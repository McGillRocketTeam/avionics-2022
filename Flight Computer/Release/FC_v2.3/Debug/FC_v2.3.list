
FC_v2.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017b10  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024e0  08017cc0  08017cc0  00027cc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a1a0  0801a1a0  000302c4  2**0
                  CONTENTS
  4 .ARM          00000008  0801a1a0  0801a1a0  0002a1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a1a8  0801a1a8  000302c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a1a8  0801a1a8  0002a1a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a1b0  0801a1b0  0002a1b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c4  20000000  0801a1b4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302c4  2**0
                  CONTENTS
 10 .bss          000061c4  200002c4  200002c4  000302c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20006488  20006488  000302c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000641db  00000000  00000000  000302f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009219  00000000  00000000  000944cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000035d8  00000000  00000000  0009d6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003330  00000000  00000000  000a0cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00035a27  00000000  00000000  000a3ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003d5ea  00000000  00000000  000d9a17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001108c5  00000000  00000000  00117001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002278c6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00010168  00000000  00000000  0022791c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  00237a84  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  00237b50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002c4 	.word	0x200002c4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08017ca8 	.word	0x08017ca8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002c8 	.word	0x200002c8
 80001ec:	08017ca8 	.word	0x08017ca8

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9ef 	b.w	80010c8 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a4 	b.w	80010c8 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	468c      	mov	ip, r1
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8083 	bne.w	8000f1a <__udivmoddi4+0x116>
 8000e14:	428a      	cmp	r2, r1
 8000e16:	4617      	mov	r7, r2
 8000e18:	d947      	bls.n	8000eaa <__udivmoddi4+0xa6>
 8000e1a:	fab2 f282 	clz	r2, r2
 8000e1e:	b142      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e20:	f1c2 0020 	rsb	r0, r2, #32
 8000e24:	fa24 f000 	lsr.w	r0, r4, r0
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	4097      	lsls	r7, r2
 8000e2c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e30:	4094      	lsls	r4, r2
 8000e32:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e36:	0c23      	lsrs	r3, r4, #16
 8000e38:	fbbc f6f8 	udiv	r6, ip, r8
 8000e3c:	fa1f fe87 	uxth.w	lr, r7
 8000e40:	fb08 c116 	mls	r1, r8, r6, ip
 8000e44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e48:	fb06 f10e 	mul.w	r1, r6, lr
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x60>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e56:	f080 8119 	bcs.w	800108c <__udivmoddi4+0x288>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 8116 	bls.w	800108c <__udivmoddi4+0x288>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e78:	45a6      	cmp	lr, r4
 8000e7a:	d909      	bls.n	8000e90 <__udivmoddi4+0x8c>
 8000e7c:	193c      	adds	r4, r7, r4
 8000e7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e82:	f080 8105 	bcs.w	8001090 <__udivmoddi4+0x28c>
 8000e86:	45a6      	cmp	lr, r4
 8000e88:	f240 8102 	bls.w	8001090 <__udivmoddi4+0x28c>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	443c      	add	r4, r7
 8000e90:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e94:	eba4 040e 	sub.w	r4, r4, lr
 8000e98:	2600      	movs	r6, #0
 8000e9a:	b11d      	cbz	r5, 8000ea4 <__udivmoddi4+0xa0>
 8000e9c:	40d4      	lsrs	r4, r2
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	b902      	cbnz	r2, 8000eae <__udivmoddi4+0xaa>
 8000eac:	deff      	udf	#255	; 0xff
 8000eae:	fab2 f282 	clz	r2, r2
 8000eb2:	2a00      	cmp	r2, #0
 8000eb4:	d150      	bne.n	8000f58 <__udivmoddi4+0x154>
 8000eb6:	1bcb      	subs	r3, r1, r7
 8000eb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ebc:	fa1f f887 	uxth.w	r8, r7
 8000ec0:	2601      	movs	r6, #1
 8000ec2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ec6:	0c21      	lsrs	r1, r4, #16
 8000ec8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0xe4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0xe2>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	f200 80e9 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000ee6:	4684      	mov	ip, r0
 8000ee8:	1ac9      	subs	r1, r1, r3
 8000eea:	b2a3      	uxth	r3, r4
 8000eec:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ef8:	fb08 f800 	mul.w	r8, r8, r0
 8000efc:	45a0      	cmp	r8, r4
 8000efe:	d907      	bls.n	8000f10 <__udivmoddi4+0x10c>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f06:	d202      	bcs.n	8000f0e <__udivmoddi4+0x10a>
 8000f08:	45a0      	cmp	r8, r4
 8000f0a:	f200 80d9 	bhi.w	80010c0 <__udivmoddi4+0x2bc>
 8000f0e:	4618      	mov	r0, r3
 8000f10:	eba4 0408 	sub.w	r4, r4, r8
 8000f14:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f18:	e7bf      	b.n	8000e9a <__udivmoddi4+0x96>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d909      	bls.n	8000f32 <__udivmoddi4+0x12e>
 8000f1e:	2d00      	cmp	r5, #0
 8000f20:	f000 80b1 	beq.w	8001086 <__udivmoddi4+0x282>
 8000f24:	2600      	movs	r6, #0
 8000f26:	e9c5 0100 	strd	r0, r1, [r5]
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	4631      	mov	r1, r6
 8000f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f32:	fab3 f683 	clz	r6, r3
 8000f36:	2e00      	cmp	r6, #0
 8000f38:	d14a      	bne.n	8000fd0 <__udivmoddi4+0x1cc>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d302      	bcc.n	8000f44 <__udivmoddi4+0x140>
 8000f3e:	4282      	cmp	r2, r0
 8000f40:	f200 80b8 	bhi.w	80010b4 <__udivmoddi4+0x2b0>
 8000f44:	1a84      	subs	r4, r0, r2
 8000f46:	eb61 0103 	sbc.w	r1, r1, r3
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	468c      	mov	ip, r1
 8000f4e:	2d00      	cmp	r5, #0
 8000f50:	d0a8      	beq.n	8000ea4 <__udivmoddi4+0xa0>
 8000f52:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f56:	e7a5      	b.n	8000ea4 <__udivmoddi4+0xa0>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f60:	4097      	lsls	r7, r2
 8000f62:	fa01 f002 	lsl.w	r0, r1, r2
 8000f66:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6a:	40d9      	lsrs	r1, r3
 8000f6c:	4330      	orrs	r0, r6
 8000f6e:	0c03      	lsrs	r3, r0, #16
 8000f70:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f74:	fa1f f887 	uxth.w	r8, r7
 8000f78:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f80:	fb06 f108 	mul.w	r1, r6, r8
 8000f84:	4299      	cmp	r1, r3
 8000f86:	fa04 f402 	lsl.w	r4, r4, r2
 8000f8a:	d909      	bls.n	8000fa0 <__udivmoddi4+0x19c>
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f92:	f080 808d 	bcs.w	80010b0 <__udivmoddi4+0x2ac>
 8000f96:	4299      	cmp	r1, r3
 8000f98:	f240 808a 	bls.w	80010b0 <__udivmoddi4+0x2ac>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	443b      	add	r3, r7
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b281      	uxth	r1, r0
 8000fa4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fa8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb0:	fb00 f308 	mul.w	r3, r0, r8
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	d907      	bls.n	8000fc8 <__udivmoddi4+0x1c4>
 8000fb8:	1879      	adds	r1, r7, r1
 8000fba:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fbe:	d273      	bcs.n	80010a8 <__udivmoddi4+0x2a4>
 8000fc0:	428b      	cmp	r3, r1
 8000fc2:	d971      	bls.n	80010a8 <__udivmoddi4+0x2a4>
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	4439      	add	r1, r7
 8000fc8:	1acb      	subs	r3, r1, r3
 8000fca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fce:	e778      	b.n	8000ec2 <__udivmoddi4+0xbe>
 8000fd0:	f1c6 0c20 	rsb	ip, r6, #32
 8000fd4:	fa03 f406 	lsl.w	r4, r3, r6
 8000fd8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fdc:	431c      	orrs	r4, r3
 8000fde:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fe2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fe6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fea:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fee:	431f      	orrs	r7, r3
 8000ff0:	0c3b      	lsrs	r3, r7, #16
 8000ff2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff6:	fa1f f884 	uxth.w	r8, r4
 8000ffa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001002:	fb09 fa08 	mul.w	sl, r9, r8
 8001006:	458a      	cmp	sl, r1
 8001008:	fa02 f206 	lsl.w	r2, r2, r6
 800100c:	fa00 f306 	lsl.w	r3, r0, r6
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x220>
 8001012:	1861      	adds	r1, r4, r1
 8001014:	f109 30ff 	add.w	r0, r9, #4294967295
 8001018:	d248      	bcs.n	80010ac <__udivmoddi4+0x2a8>
 800101a:	458a      	cmp	sl, r1
 800101c:	d946      	bls.n	80010ac <__udivmoddi4+0x2a8>
 800101e:	f1a9 0902 	sub.w	r9, r9, #2
 8001022:	4421      	add	r1, r4
 8001024:	eba1 010a 	sub.w	r1, r1, sl
 8001028:	b2bf      	uxth	r7, r7
 800102a:	fbb1 f0fe 	udiv	r0, r1, lr
 800102e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001032:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001036:	fb00 f808 	mul.w	r8, r0, r8
 800103a:	45b8      	cmp	r8, r7
 800103c:	d907      	bls.n	800104e <__udivmoddi4+0x24a>
 800103e:	19e7      	adds	r7, r4, r7
 8001040:	f100 31ff 	add.w	r1, r0, #4294967295
 8001044:	d22e      	bcs.n	80010a4 <__udivmoddi4+0x2a0>
 8001046:	45b8      	cmp	r8, r7
 8001048:	d92c      	bls.n	80010a4 <__udivmoddi4+0x2a0>
 800104a:	3802      	subs	r0, #2
 800104c:	4427      	add	r7, r4
 800104e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001052:	eba7 0708 	sub.w	r7, r7, r8
 8001056:	fba0 8902 	umull	r8, r9, r0, r2
 800105a:	454f      	cmp	r7, r9
 800105c:	46c6      	mov	lr, r8
 800105e:	4649      	mov	r1, r9
 8001060:	d31a      	bcc.n	8001098 <__udivmoddi4+0x294>
 8001062:	d017      	beq.n	8001094 <__udivmoddi4+0x290>
 8001064:	b15d      	cbz	r5, 800107e <__udivmoddi4+0x27a>
 8001066:	ebb3 020e 	subs.w	r2, r3, lr
 800106a:	eb67 0701 	sbc.w	r7, r7, r1
 800106e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001072:	40f2      	lsrs	r2, r6
 8001074:	ea4c 0202 	orr.w	r2, ip, r2
 8001078:	40f7      	lsrs	r7, r6
 800107a:	e9c5 2700 	strd	r2, r7, [r5]
 800107e:	2600      	movs	r6, #0
 8001080:	4631      	mov	r1, r6
 8001082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e70b      	b.n	8000ea4 <__udivmoddi4+0xa0>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e9      	b.n	8000e64 <__udivmoddi4+0x60>
 8001090:	4618      	mov	r0, r3
 8001092:	e6fd      	b.n	8000e90 <__udivmoddi4+0x8c>
 8001094:	4543      	cmp	r3, r8
 8001096:	d2e5      	bcs.n	8001064 <__udivmoddi4+0x260>
 8001098:	ebb8 0e02 	subs.w	lr, r8, r2
 800109c:	eb69 0104 	sbc.w	r1, r9, r4
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7df      	b.n	8001064 <__udivmoddi4+0x260>
 80010a4:	4608      	mov	r0, r1
 80010a6:	e7d2      	b.n	800104e <__udivmoddi4+0x24a>
 80010a8:	4660      	mov	r0, ip
 80010aa:	e78d      	b.n	8000fc8 <__udivmoddi4+0x1c4>
 80010ac:	4681      	mov	r9, r0
 80010ae:	e7b9      	b.n	8001024 <__udivmoddi4+0x220>
 80010b0:	4666      	mov	r6, ip
 80010b2:	e775      	b.n	8000fa0 <__udivmoddi4+0x19c>
 80010b4:	4630      	mov	r0, r6
 80010b6:	e74a      	b.n	8000f4e <__udivmoddi4+0x14a>
 80010b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80010bc:	4439      	add	r1, r7
 80010be:	e713      	b.n	8000ee8 <__udivmoddi4+0xe4>
 80010c0:	3802      	subs	r0, #2
 80010c2:	443c      	add	r4, r7
 80010c4:	e724      	b.n	8000f10 <__udivmoddi4+0x10c>
 80010c6:	bf00      	nop

080010c8 <__aeabi_idiv0>:
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <println>:

#include <MRT_helpers.h>
#include <MRT_setup.h>
#include <tim.h>

void println(char* s){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	#if PRINT
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff f895 	bl	8000204 <strlen>
 80010da:	4603      	mov	r3, r0
 80010dc:	b29a      	uxth	r2, r3
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4806      	ldr	r0, [pc, #24]	; (8001100 <println+0x34>)
 80010e6:	f00d f9d0 	bl	800e48a <HAL_UART_Transmit>
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	2202      	movs	r2, #2
 80010f0:	4904      	ldr	r1, [pc, #16]	; (8001104 <println+0x38>)
 80010f2:	4803      	ldr	r0, [pc, #12]	; (8001100 <println+0x34>)
 80010f4:	f00d f9c9 	bl	800e48a <HAL_UART_Transmit>
	#endif
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20005d38 	.word	0x20005d38
 8001104:	08017cc0 	.word	0x08017cc0

08001108 <print>:

void print(char* s){
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	#if PRINT
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff f877 	bl	8000204 <strlen>
 8001116:	4603      	mov	r3, r0
 8001118:	b29a      	uxth	r2, r3
 800111a:	f04f 33ff 	mov.w	r3, #4294967295
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	4803      	ldr	r0, [pc, #12]	; (8001130 <print+0x28>)
 8001122:	f00d f9b2 	bl	800e48a <HAL_UART_Transmit>
	#endif
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20005d38 	.word	0x20005d38

08001134 <tone_freq>:
void no_print(char* s){
	//TODO Buffer function for Iridium
}

// buzz at particular frequency
void tone_freq(uint32_t duration, uint32_t repeats, uint32_t freq) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
	// TIM2 base frequency is 90 MHz, PSC = 90-1
	// can calculate required ARR value
	TIM2->ARR = 1000000 / freq;
 8001140:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001144:	491c      	ldr	r1, [pc, #112]	; (80011b8 <tone_freq+0x84>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	fbb1 f3f3 	udiv	r3, r1, r3
 800114c:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->EGR |= TIM_EGR_UG;
 800114e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6153      	str	r3, [r2, #20]

	for (uint32_t i = 0; i < repeats; i++) {
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
 8001162:	e01f      	b.n	80011a4 <tone_freq+0x70>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001164:	2108      	movs	r1, #8
 8001166:	4815      	ldr	r0, [pc, #84]	; (80011bc <tone_freq+0x88>)
 8001168:	f00c f9b0 	bl	800d4cc <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(POWER_ON_EXT_LED_GPIO_Port, POWER_ON_EXT_LED_Pin, SET);
 800116c:	2201      	movs	r2, #1
 800116e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001172:	4813      	ldr	r0, [pc, #76]	; (80011c0 <tone_freq+0x8c>)
 8001174:	f008 fe44 	bl	8009e00 <HAL_GPIO_WritePin>
		HAL_Delay(duration);
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	f008 f8d3 	bl	8009324 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 800117e:	2108      	movs	r1, #8
 8001180:	480e      	ldr	r0, [pc, #56]	; (80011bc <tone_freq+0x88>)
 8001182:	f00c fa6b 	bl	800d65c <HAL_TIM_PWM_Stop>
		HAL_GPIO_WritePin(POWER_ON_EXT_LED_GPIO_Port, POWER_ON_EXT_LED_Pin, RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 7100 	mov.w	r1, #512	; 0x200
 800118c:	480c      	ldr	r0, [pc, #48]	; (80011c0 <tone_freq+0x8c>)
 800118e:	f008 fe37 	bl	8009e00 <HAL_GPIO_WritePin>
		if (repeats > 1)
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d902      	bls.n	800119e <tone_freq+0x6a>
			HAL_Delay(duration);
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	f008 f8c3 	bl	8009324 <HAL_Delay>
	for (uint32_t i = 0; i < repeats; i++) {
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	3301      	adds	r3, #1
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d3db      	bcc.n	8001164 <tone_freq+0x30>
	}
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	000f4240 	.word	0x000f4240
 80011bc:	20005cac 	.word	0x20005cac
 80011c0:	40020400 	.word	0x40020400

080011c4 <buzz_success>:
void buzz_success(void) { tone_freq(BUZZ_SUCCESS_DURATION, BUZZ_SUCCESS_REPEATS, BUZZ_SUCCESS_FREQ); }
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	f240 4216 	movw	r2, #1046	; 0x416
 80011cc:	2102      	movs	r1, #2
 80011ce:	204b      	movs	r0, #75	; 0x4b
 80011d0:	f7ff ffb0 	bl	8001134 <tone_freq>
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <buzz_startup_success>:
void buzz_failure(void) { tone_freq(BUZZ_FAILURE_DURATION, BUZZ_FAILURE_REPEATS, BUZZ_FAILURE_FREQ); }
void buzz_startup_success(void) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 80011de:	2300      	movs	r3, #0
 80011e0:	71fb      	strb	r3, [r7, #7]
 80011e2:	e008      	b.n	80011f6 <buzz_startup_success+0x1e>
		buzz_success();
 80011e4:	f7ff ffee 	bl	80011c4 <buzz_success>
		HAL_Delay(1000);
 80011e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011ec:	f008 f89a 	bl	8009324 <HAL_Delay>
	for (uint8_t i = 0; i < 3; i++) {
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	3301      	adds	r3, #1
 80011f4:	71fb      	strb	r3, [r7, #7]
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d9f3      	bls.n	80011e4 <buzz_startup_success+0xc>
	}
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <MRT_Init>:


//**************************************************//
//PUBLIC FUNCTIONS

void MRT_Init(void){
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	print((char*) "\r\n\r\n/********MRT Init********/\r\n");
 800120c:	4808      	ldr	r0, [pc, #32]	; (8001230 <MRT_Init+0x28>)
 800120e:	f7ff ff7b 	bl	8001108 <print>
	print((char*) "IWDG Init...");
	MX_IWDG_Init();
	print((char*) "OK\r\n");
	#endif

	MRT_Reinitialize_Peripherals();
 8001212:	f000 f915 	bl	8001440 <MRT_Reinitialize_Peripherals>
	MRT_external_flash_Init();
 8001216:	f001 fe95 	bl	8002f44 <MRT_external_flash_Init>
	MRT_reset_info();
 800121a:	f000 f819 	bl	8001250 <MRT_reset_info>

	//RTC
	HAL_IWDG_Refresh(&hiwdg);
	MRT_rtc_Init();
 800121e:	f000 ffe9 	bl	80021f4 <MRT_rtc_Init>
		  checkForI2CDevices(huart8,hi2c1);
		  checkForI2CDevices(huart8,hi2c2);
		  checkForI2CDevices(huart8,hi2c3);
		#endif

		MRT_i2c_sensors_Init();
 8001222:	f002 fef9 	bl	8004018 <MRT_i2c_sensors_Init>
	#endif


	//Telemetry
	#if TELEMETRY_THREAD
		MRT_TELEMETRY_Init();
 8001226:	f008 f819 	bl	800925c <MRT_TELEMETRY_Init>
	#endif

	#if FORCED_EJECTION_STAGE
		  ejection_stage_flag = FORCED_STAGE;
	#endif
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	08017cc4 	.word	0x08017cc4

08001234 <MRT_Deinit>:




void MRT_Deinit(void){
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	print((char*) "\r\n\r\n/********MRT Deinit********/\r\n");
 8001238:	4804      	ldr	r0, [pc, #16]	; (800124c <MRT_Deinit+0x18>)
 800123a:	f7ff ff65 	bl	8001108 <print>

	MRT_Reinitialize_Peripherals();
 800123e:	f000 f8ff 	bl	8001440 <MRT_Reinitialize_Peripherals>
	#endif


	//Sensors
	#if SENSORS_THREAD
		MRT_i2c_sensors_Deinit();
 8001242:	f002 ff19 	bl	8004078 <MRT_i2c_sensors_Deinit>
	#endif

    //TODO
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	08017ce8 	.word	0x08017ce8

08001250 <MRT_reset_info>:

//**************************************************//
//PRIVATE FUNCTIONS


void MRT_reset_info(void){
 8001250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001252:	b0a7      	sub	sp, #156	; 0x9c
 8001254:	af04      	add	r7, sp, #16

	  char buffer[100];
	  sprintf(buffer,"Reset: %i,  WU: %i,  IWDG: %i\r\nPrevious RTC time: %i:%i:%i\r\n",reset_flag, wu_flag, iwdg_flag, prev_hours, prev_min, prev_sec);
 8001256:	4b62      	ldr	r3, [pc, #392]	; (80013e0 <MRT_reset_info+0x190>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	461d      	mov	r5, r3
 800125c:	4b61      	ldr	r3, [pc, #388]	; (80013e4 <MRT_reset_info+0x194>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	461e      	mov	r6, r3
 8001262:	4b61      	ldr	r3, [pc, #388]	; (80013e8 <MRT_reset_info+0x198>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	4b60      	ldr	r3, [pc, #384]	; (80013ec <MRT_reset_info+0x19c>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	4619      	mov	r1, r3
 800126e:	4b60      	ldr	r3, [pc, #384]	; (80013f0 <MRT_reset_info+0x1a0>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	461c      	mov	r4, r3
 8001274:	4b5f      	ldr	r3, [pc, #380]	; (80013f4 <MRT_reset_info+0x1a4>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	f107 0020 	add.w	r0, r7, #32
 800127c:	9303      	str	r3, [sp, #12]
 800127e:	9402      	str	r4, [sp, #8]
 8001280:	9101      	str	r1, [sp, #4]
 8001282:	9200      	str	r2, [sp, #0]
 8001284:	4633      	mov	r3, r6
 8001286:	462a      	mov	r2, r5
 8001288:	495b      	ldr	r1, [pc, #364]	; (80013f8 <MRT_reset_info+0x1a8>)
 800128a:	f012 f93f 	bl	801350c <siprintf>
	  print(buffer);
 800128e:	f107 0320 	add.w	r3, r7, #32
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff ff38 	bl	8001108 <print>

	  //Check if IWDG is being deactivated
	  if (iwdg_flag==1){
 8001298:	4b53      	ldr	r3, [pc, #332]	; (80013e8 <MRT_reset_info+0x198>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d11a      	bne.n	80012d6 <MRT_reset_info+0x86>
		  print((char*) "Deactivating IWDG\r\n");
 80012a0:	4856      	ldr	r0, [pc, #344]	; (80013fc <MRT_reset_info+0x1ac>)
 80012a2:	f7ff ff31 	bl	8001108 <print>

		  iwdg_flag = 0; //Flip flag
 80012a6:	4b50      	ldr	r3, [pc, #320]	; (80013e8 <MRT_reset_info+0x198>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
		  flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 80012ac:	4b4e      	ldr	r3, [pc, #312]	; (80013e8 <MRT_reset_info+0x198>)
 80012ae:	781a      	ldrb	r2, [r3, #0]
 80012b0:	4b53      	ldr	r3, [pc, #332]	; (8001400 <MRT_reset_info+0x1b0>)
 80012b2:	709a      	strb	r2, [r3, #2]
		  W25qxx_EraseSector(1);
 80012b4:	2001      	movs	r0, #1
 80012b6:	f002 fa01 	bl	80036bc <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80012ba:	2305      	movs	r3, #5
 80012bc:	2200      	movs	r2, #0
 80012be:	2101      	movs	r1, #1
 80012c0:	484f      	ldr	r0, [pc, #316]	; (8001400 <MRT_reset_info+0x1b0>)
 80012c2:	f002 fb45 	bl	8003950 <W25qxx_WriteSector>

		  HAL_Delay(1000);
 80012c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012ca:	f008 f82b 	bl	8009324 <HAL_Delay>

		  //Go to sleep
		  MRT_StandByMode(SLEEP_TIME);
 80012ce:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 80012d2:	f001 f857 	bl	8002384 <MRT_StandByMode>
	  }


	  //Check if we are after waking up (and at which wake up we are at)
	  if (wu_flag>0){
 80012d6:	4b43      	ldr	r3, [pc, #268]	; (80013e4 <MRT_reset_info+0x194>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d02b      	beq.n	8001336 <MRT_reset_info+0xe6>
		  char buf[30];
		  sprintf(buf, "FC wake up %i\r\n", wu_flag);
 80012de:	4b41      	ldr	r3, [pc, #260]	; (80013e4 <MRT_reset_info+0x194>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	463b      	mov	r3, r7
 80012e6:	4947      	ldr	r1, [pc, #284]	; (8001404 <MRT_reset_info+0x1b4>)
 80012e8:	4618      	mov	r0, r3
 80012ea:	f012 f90f 	bl	801350c <siprintf>
		  print(buf);
 80012ee:	463b      	mov	r3, r7
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff09 	bl	8001108 <print>

		  print((char*) "Resetting RTC time\r\n");
 80012f6:	4844      	ldr	r0, [pc, #272]	; (8001408 <MRT_reset_info+0x1b8>)
 80012f8:	f7ff ff06 	bl	8001108 <print>

		  //Clear RTC time (last recorded)
		  W25qxx_EraseSector(2);
 80012fc:	2002      	movs	r0, #2
 80012fe:	f002 f9dd 	bl	80036bc <W25qxx_EraseSector>
		  W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, 2, RTC_TIME_OFFSET, 3);
 8001302:	2303      	movs	r3, #3
 8001304:	2200      	movs	r2, #0
 8001306:	2102      	movs	r1, #2
 8001308:	4840      	ldr	r0, [pc, #256]	; (800140c <MRT_reset_info+0x1bc>)
 800130a:	f002 fb21 	bl	8003950 <W25qxx_WriteSector>

		  //Update variables (to 0)
		  for (int i = 0; i < 3; i++){
 800130e:	2300      	movs	r3, #0
 8001310:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001314:	e00b      	b.n	800132e <MRT_reset_info+0xde>
			  *flash_time[i] = 0x0;
 8001316:	4a3e      	ldr	r2, [pc, #248]	; (8001410 <MRT_reset_info+0x1c0>)
 8001318:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800131c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 3; i++){
 8001324:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001328:	3301      	adds	r3, #1
 800132a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800132e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001332:	2b02      	cmp	r3, #2
 8001334:	ddef      	ble.n	8001316 <MRT_reset_info+0xc6>

	  }


	  //Check if we start from the beginning
	  if (reset_flag==0){
 8001336:	4b2a      	ldr	r3, [pc, #168]	; (80013e0 <MRT_reset_info+0x190>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d112      	bne.n	8001364 <MRT_reset_info+0x114>
		  print((char*) "FC restarted\r\n");
 800133e:	4835      	ldr	r0, [pc, #212]	; (8001414 <MRT_reset_info+0x1c4>)
 8001340:	f7ff fee2 	bl	8001108 <print>

		  reset_flag = 1; //Flip flag
 8001344:	4b26      	ldr	r3, [pc, #152]	; (80013e0 <MRT_reset_info+0x190>)
 8001346:	2201      	movs	r2, #1
 8001348:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
	      flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 800134a:	4b25      	ldr	r3, [pc, #148]	; (80013e0 <MRT_reset_info+0x190>)
 800134c:	781a      	ldrb	r2, [r3, #0]
 800134e:	4b2c      	ldr	r3, [pc, #176]	; (8001400 <MRT_reset_info+0x1b0>)
 8001350:	701a      	strb	r2, [r3, #0]
		  W25qxx_EraseSector(1);
 8001352:	2001      	movs	r0, #1
 8001354:	f002 f9b2 	bl	80036bc <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8001358:	2305      	movs	r3, #5
 800135a:	2200      	movs	r2, #0
 800135c:	2101      	movs	r1, #1
 800135e:	4828      	ldr	r0, [pc, #160]	; (8001400 <MRT_reset_info+0x1b0>)
 8001360:	f002 faf6 	bl	8003950 <W25qxx_WriteSector>
	  }


	  //Check if before or after apogee
	  if (apogee_flag == 0){
 8001364:	4b2c      	ldr	r3, [pc, #176]	; (8001418 <MRT_reset_info+0x1c8>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d103      	bne.n	8001374 <MRT_reset_info+0x124>
		  print((char*) "Pre-apogee\r\n");
 800136c:	482b      	ldr	r0, [pc, #172]	; (800141c <MRT_reset_info+0x1cc>)
 800136e:	f7ff fecb 	bl	8001108 <print>
 8001372:	e006      	b.n	8001382 <MRT_reset_info+0x132>
	  }
	  else if(apogee_flag==1){
 8001374:	4b28      	ldr	r3, [pc, #160]	; (8001418 <MRT_reset_info+0x1c8>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d102      	bne.n	8001382 <MRT_reset_info+0x132>
		  print((char*) "Post-apogee\r\n");
 800137c:	4828      	ldr	r0, [pc, #160]	; (8001420 <MRT_reset_info+0x1d0>)
 800137e:	f7ff fec3 	bl	8001108 <print>
	  }


	  //Check ejection stage
	  print((char*)"Ejection Stage: ");
 8001382:	4828      	ldr	r0, [pc, #160]	; (8001424 <MRT_reset_info+0x1d4>)
 8001384:	f7ff fec0 	bl	8001108 <print>
	  if (ejection_state_flag==0){
 8001388:	4b27      	ldr	r3, [pc, #156]	; (8001428 <MRT_reset_info+0x1d8>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d103      	bne.n	8001398 <MRT_reset_info+0x148>
		  print((char*)"Pad\r\n");
 8001390:	4826      	ldr	r0, [pc, #152]	; (800142c <MRT_reset_info+0x1dc>)
 8001392:	f7ff feb9 	bl	8001108 <print>
		  print((char*)"Main descent\r\n");
	  }
	  else if(ejection_state_flag==4){
		  print((char*)"Landed\r\n");
	  }
}
 8001396:	e01e      	b.n	80013d6 <MRT_reset_info+0x186>
	  else if(ejection_state_flag==1){
 8001398:	4b23      	ldr	r3, [pc, #140]	; (8001428 <MRT_reset_info+0x1d8>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d103      	bne.n	80013a8 <MRT_reset_info+0x158>
		  print((char*)"Boost\r\n");
 80013a0:	4823      	ldr	r0, [pc, #140]	; (8001430 <MRT_reset_info+0x1e0>)
 80013a2:	f7ff feb1 	bl	8001108 <print>
}
 80013a6:	e016      	b.n	80013d6 <MRT_reset_info+0x186>
	  else if(ejection_state_flag==2){
 80013a8:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <MRT_reset_info+0x1d8>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d103      	bne.n	80013b8 <MRT_reset_info+0x168>
		  print((char*)"Drogue descent\r\n");
 80013b0:	4820      	ldr	r0, [pc, #128]	; (8001434 <MRT_reset_info+0x1e4>)
 80013b2:	f7ff fea9 	bl	8001108 <print>
}
 80013b6:	e00e      	b.n	80013d6 <MRT_reset_info+0x186>
	  else if(ejection_state_flag==3){
 80013b8:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <MRT_reset_info+0x1d8>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b03      	cmp	r3, #3
 80013be:	d103      	bne.n	80013c8 <MRT_reset_info+0x178>
		  print((char*)"Main descent\r\n");
 80013c0:	481d      	ldr	r0, [pc, #116]	; (8001438 <MRT_reset_info+0x1e8>)
 80013c2:	f7ff fea1 	bl	8001108 <print>
}
 80013c6:	e006      	b.n	80013d6 <MRT_reset_info+0x186>
	  else if(ejection_state_flag==4){
 80013c8:	4b17      	ldr	r3, [pc, #92]	; (8001428 <MRT_reset_info+0x1d8>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b04      	cmp	r3, #4
 80013ce:	d102      	bne.n	80013d6 <MRT_reset_info+0x186>
		  print((char*)"Landed\r\n");
 80013d0:	481a      	ldr	r0, [pc, #104]	; (800143c <MRT_reset_info+0x1ec>)
 80013d2:	f7ff fe99 	bl	8001108 <print>
}
 80013d6:	bf00      	nop
 80013d8:	378c      	adds	r7, #140	; 0x8c
 80013da:	46bd      	mov	sp, r7
 80013dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013de:	bf00      	nop
 80013e0:	2000030d 	.word	0x2000030d
 80013e4:	2000030e 	.word	0x2000030e
 80013e8:	2000030f 	.word	0x2000030f
 80013ec:	20000312 	.word	0x20000312
 80013f0:	20000313 	.word	0x20000313
 80013f4:	20000314 	.word	0x20000314
 80013f8:	08017d0c 	.word	0x08017d0c
 80013fc:	08017d4c 	.word	0x08017d4c
 8001400:	20005e90 	.word	0x20005e90
 8001404:	08017d60 	.word	0x08017d60
 8001408:	08017d70 	.word	0x08017d70
 800140c:	2000031c 	.word	0x2000031c
 8001410:	20000054 	.word	0x20000054
 8001414:	08017d88 	.word	0x08017d88
 8001418:	20000310 	.word	0x20000310
 800141c:	08017d98 	.word	0x08017d98
 8001420:	08017da8 	.word	0x08017da8
 8001424:	08017db8 	.word	0x08017db8
 8001428:	20000311 	.word	0x20000311
 800142c:	08017dcc 	.word	0x08017dcc
 8001430:	08017dd4 	.word	0x08017dd4
 8001434:	08017ddc 	.word	0x08017ddc
 8001438:	08017df0 	.word	0x08017df0
 800143c:	08017e00 	.word	0x08017e00

08001440 <MRT_Reinitialize_Peripherals>:


void MRT_Reinitialize_Peripherals(void){
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	  /*
	   * Reinitialize all peripherals
	   */

	  print((char*)"Reinitializing Peripherals...");
 8001444:	482f      	ldr	r0, [pc, #188]	; (8001504 <MRT_Reinitialize_Peripherals+0xc4>)
 8001446:	f7ff fe5f 	bl	8001108 <print>

	  // reset LEDs
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 800144a:	2200      	movs	r2, #0
 800144c:	2102      	movs	r1, #2
 800144e:	482e      	ldr	r0, [pc, #184]	; (8001508 <MRT_Reinitialize_Peripherals+0xc8>)
 8001450:	f008 fcd6 	bl	8009e00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001454:	2200      	movs	r2, #0
 8001456:	2104      	movs	r1, #4
 8001458:	482b      	ldr	r0, [pc, #172]	; (8001508 <MRT_Reinitialize_Peripherals+0xc8>)
 800145a:	f008 fcd1 	bl	8009e00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	2108      	movs	r1, #8
 8001462:	4829      	ldr	r0, [pc, #164]	; (8001508 <MRT_Reinitialize_Peripherals+0xc8>)
 8001464:	f008 fccc 	bl	8009e00 <HAL_GPIO_WritePin>

	  // reset recovery pyro pins
	  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 8001468:	2201      	movs	r2, #1
 800146a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800146e:	4827      	ldr	r0, [pc, #156]	; (800150c <MRT_Reinitialize_Peripherals+0xcc>)
 8001470:	f008 fcc6 	bl	8009e00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 8001474:	2200      	movs	r2, #0
 8001476:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800147a:	4824      	ldr	r0, [pc, #144]	; (800150c <MRT_Reinitialize_Peripherals+0xcc>)
 800147c:	f008 fcc0 	bl	8009e00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 8001480:	2200      	movs	r2, #0
 8001482:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001486:	4821      	ldr	r0, [pc, #132]	; (800150c <MRT_Reinitialize_Peripherals+0xcc>)
 8001488:	f008 fcba 	bl	8009e00 <HAL_GPIO_WritePin>

	  // reset prop pyro pins
	  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET); //PG1 ARMING_PROP
 800148c:	2201      	movs	r2, #1
 800148e:	2102      	movs	r1, #2
 8001490:	481e      	ldr	r0, [pc, #120]	; (800150c <MRT_Reinitialize_Peripherals+0xcc>)
 8001492:	f008 fcb5 	bl	8009e00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 8001496:	2200      	movs	r2, #0
 8001498:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800149c:	481c      	ldr	r0, [pc, #112]	; (8001510 <MRT_Reinitialize_Peripherals+0xd0>)
 800149e:	f008 fcaf 	bl	8009e00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 80014a2:	2200      	movs	r2, #0
 80014a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014a8:	4819      	ldr	r0, [pc, #100]	; (8001510 <MRT_Reinitialize_Peripherals+0xd0>)
 80014aa:	f008 fca9 	bl	8009e00 <HAL_GPIO_WritePin>

	  // reset 12 V buck converter enable pin (disable converter)
	  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 80014ae:	2200      	movs	r2, #0
 80014b0:	2104      	movs	r1, #4
 80014b2:	4818      	ldr	r0, [pc, #96]	; (8001514 <MRT_Reinitialize_Peripherals+0xd4>)
 80014b4:	f008 fca4 	bl	8009e00 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
	  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


	  // reset payload EN signal
	  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 80014b8:	2200      	movs	r2, #0
 80014ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014be:	4815      	ldr	r0, [pc, #84]	; (8001514 <MRT_Reinitialize_Peripherals+0xd4>)
 80014c0:	f008 fc9e 	bl	8009e00 <HAL_GPIO_WritePin>

	  // set CS pin for thermocouple chip high
	  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

	  // set power off for VR
	  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 80014c4:	2200      	movs	r2, #0
 80014c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014ca:	4810      	ldr	r0, [pc, #64]	; (800150c <MRT_Reinitialize_Peripherals+0xcc>)
 80014cc:	f008 fc98 	bl	8009e00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 80014d0:	2200      	movs	r2, #0
 80014d2:	2180      	movs	r1, #128	; 0x80
 80014d4:	4810      	ldr	r0, [pc, #64]	; (8001518 <MRT_Reinitialize_Peripherals+0xd8>)
 80014d6:	f008 fc93 	bl	8009e00 <HAL_GPIO_WritePin>

	  // FLASH set CS, WP and IO3 pins high
	  HAL_GPIO_WritePin(OUT_FLASH_CS_GPIO_Port, OUT_FLASH_CS_Pin, SET);
 80014da:	2201      	movs	r2, #1
 80014dc:	2140      	movs	r1, #64	; 0x40
 80014de:	480e      	ldr	r0, [pc, #56]	; (8001518 <MRT_Reinitialize_Peripherals+0xd8>)
 80014e0:	f008 fc8e 	bl	8009e00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_WP_GPIO_Port, OUT_FLASH_WP_Pin, SET);
 80014e4:	2201      	movs	r2, #1
 80014e6:	2120      	movs	r1, #32
 80014e8:	480b      	ldr	r0, [pc, #44]	; (8001518 <MRT_Reinitialize_Peripherals+0xd8>)
 80014ea:	f008 fc89 	bl	8009e00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_IO3_GPIO_Port, OUT_FLASH_IO3_Pin, SET);
 80014ee:	2201      	movs	r2, #1
 80014f0:	2110      	movs	r1, #16
 80014f2:	4809      	ldr	r0, [pc, #36]	; (8001518 <MRT_Reinitialize_Peripherals+0xd8>)
 80014f4:	f008 fc84 	bl	8009e00 <HAL_GPIO_WritePin>

	  print((char*)"OK\r\n");
 80014f8:	4808      	ldr	r0, [pc, #32]	; (800151c <MRT_Reinitialize_Peripherals+0xdc>)
 80014fa:	f7ff fe05 	bl	8001108 <print>
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	08017e0c 	.word	0x08017e0c
 8001508:	40020800 	.word	0x40020800
 800150c:	40021800 	.word	0x40021800
 8001510:	40021400 	.word	0x40021400
 8001514:	40021000 	.word	0x40021000
 8001518:	40020c00 	.word	0x40020c00
 800151c:	08017e2c 	.word	0x08017e2c

08001520 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001526:	463b      	mov	r3, r7
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001532:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <MX_ADC1_Init+0x98>)
 8001534:	4a21      	ldr	r2, [pc, #132]	; (80015bc <MX_ADC1_Init+0x9c>)
 8001536:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001538:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <MX_ADC1_Init+0x98>)
 800153a:	2200      	movs	r2, #0
 800153c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800153e:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <MX_ADC1_Init+0x98>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001544:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <MX_ADC1_Init+0x98>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800154a:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <MX_ADC1_Init+0x98>)
 800154c:	2200      	movs	r2, #0
 800154e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001550:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <MX_ADC1_Init+0x98>)
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001558:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <MX_ADC1_Init+0x98>)
 800155a:	2200      	movs	r2, #0
 800155c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800155e:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <MX_ADC1_Init+0x98>)
 8001560:	4a17      	ldr	r2, [pc, #92]	; (80015c0 <MX_ADC1_Init+0xa0>)
 8001562:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001564:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <MX_ADC1_Init+0x98>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800156a:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <MX_ADC1_Init+0x98>)
 800156c:	2201      	movs	r2, #1
 800156e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_ADC1_Init+0x98>)
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <MX_ADC1_Init+0x98>)
 800157a:	2201      	movs	r2, #1
 800157c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800157e:	480e      	ldr	r0, [pc, #56]	; (80015b8 <MX_ADC1_Init+0x98>)
 8001580:	f007 fef4 	bl	800936c <HAL_ADC_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800158a:	f000 fd6f 	bl	800206c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800158e:	2306      	movs	r3, #6
 8001590:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001592:	2301      	movs	r3, #1
 8001594:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800159a:	463b      	mov	r3, r7
 800159c:	4619      	mov	r1, r3
 800159e:	4806      	ldr	r0, [pc, #24]	; (80015b8 <MX_ADC1_Init+0x98>)
 80015a0:	f007 ff28 	bl	80093f4 <HAL_ADC_ConfigChannel>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80015aa:	f000 fd5f 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20005a20 	.word	0x20005a20
 80015bc:	40012000 	.word	0x40012000
 80015c0:	0f000001 	.word	0x0f000001

080015c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	; 0x28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a17      	ldr	r2, [pc, #92]	; (8001640 <HAL_ADC_MspInit+0x7c>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d127      	bne.n	8001636 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	4b16      	ldr	r3, [pc, #88]	; (8001644 <HAL_ADC_MspInit+0x80>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	4a15      	ldr	r2, [pc, #84]	; (8001644 <HAL_ADC_MspInit+0x80>)
 80015f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f4:	6453      	str	r3, [r2, #68]	; 0x44
 80015f6:	4b13      	ldr	r3, [pc, #76]	; (8001644 <HAL_ADC_MspInit+0x80>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <HAL_ADC_MspInit+0x80>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a0e      	ldr	r2, [pc, #56]	; (8001644 <HAL_ADC_MspInit+0x80>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <HAL_ADC_MspInit+0x80>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 800161e:	2340      	movs	r3, #64	; 0x40
 8001620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001622:	2303      	movs	r3, #3
 8001624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	4619      	mov	r1, r3
 8001630:	4805      	ldr	r0, [pc, #20]	; (8001648 <HAL_ADC_MspInit+0x84>)
 8001632:	f008 fa21 	bl	8009a78 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001636:	bf00      	nop
 8001638:	3728      	adds	r7, #40	; 0x28
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40012000 	.word	0x40012000
 8001644:	40023800 	.word	0x40023800
 8001648:	40020000 	.word	0x40020000

0800164c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

	println("\r\nFREERTOS Init");
 8001650:	4821      	ldr	r0, [pc, #132]	; (80016d8 <MX_FREERTOS_Init+0x8c>)
 8001652:	f7ff fd3b 	bl	80010cc <println>
	print("\tInitializing the kernel...");
 8001656:	4821      	ldr	r0, [pc, #132]	; (80016dc <MX_FREERTOS_Init+0x90>)
 8001658:	f7ff fd56 	bl	8001108 <print>
	osKernelInitialize();
 800165c:	f00d fb8a 	bl	800ed74 <osKernelInitialize>
	println("OK");
 8001660:	481f      	ldr	r0, [pc, #124]	; (80016e0 <MX_FREERTOS_Init+0x94>)
 8001662:	f7ff fd33 	bl	80010cc <println>

	print("\tCreating the threads...");
 8001666:	481f      	ldr	r0, [pc, #124]	; (80016e4 <MX_FREERTOS_Init+0x98>)
 8001668:	f7ff fd4e 	bl	8001108 <print>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Memory0 */
  Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 800166c:	4a1e      	ldr	r2, [pc, #120]	; (80016e8 <MX_FREERTOS_Init+0x9c>)
 800166e:	2100      	movs	r1, #0
 8001670:	481e      	ldr	r0, [pc, #120]	; (80016ec <MX_FREERTOS_Init+0xa0>)
 8001672:	f00d fbc9 	bl	800ee08 <osThreadNew>
 8001676:	4603      	mov	r3, r0
 8001678:	4a1d      	ldr	r2, [pc, #116]	; (80016f0 <MX_FREERTOS_Init+0xa4>)
 800167a:	6013      	str	r3, [r2, #0]

  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 800167c:	4a1d      	ldr	r2, [pc, #116]	; (80016f4 <MX_FREERTOS_Init+0xa8>)
 800167e:	2100      	movs	r1, #0
 8001680:	481d      	ldr	r0, [pc, #116]	; (80016f8 <MX_FREERTOS_Init+0xac>)
 8001682:	f00d fbc1 	bl	800ee08 <osThreadNew>
 8001686:	4603      	mov	r3, r0
 8001688:	4a1c      	ldr	r2, [pc, #112]	; (80016fc <MX_FREERTOS_Init+0xb0>)
 800168a:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 800168c:	4a1c      	ldr	r2, [pc, #112]	; (8001700 <MX_FREERTOS_Init+0xb4>)
 800168e:	2100      	movs	r1, #0
 8001690:	481c      	ldr	r0, [pc, #112]	; (8001704 <MX_FREERTOS_Init+0xb8>)
 8001692:	f00d fbb9 	bl	800ee08 <osThreadNew>
 8001696:	4603      	mov	r3, r0
 8001698:	4a1b      	ldr	r2, [pc, #108]	; (8001708 <MX_FREERTOS_Init+0xbc>)
 800169a:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 800169c:	4a1b      	ldr	r2, [pc, #108]	; (800170c <MX_FREERTOS_Init+0xc0>)
 800169e:	2100      	movs	r1, #0
 80016a0:	481b      	ldr	r0, [pc, #108]	; (8001710 <MX_FREERTOS_Init+0xc4>)
 80016a2:	f00d fbb1 	bl	800ee08 <osThreadNew>
 80016a6:	4603      	mov	r3, r0
 80016a8:	4a1a      	ldr	r2, [pc, #104]	; (8001714 <MX_FREERTOS_Init+0xc8>)
 80016aa:	6013      	str	r3, [r2, #0]

  /* creation of WatchDog */
  WatchDogHandle = osThreadNew(StartWatchDog, NULL, &WatchDog_attributes);
 80016ac:	4a1a      	ldr	r2, [pc, #104]	; (8001718 <MX_FREERTOS_Init+0xcc>)
 80016ae:	2100      	movs	r1, #0
 80016b0:	481a      	ldr	r0, [pc, #104]	; (800171c <MX_FREERTOS_Init+0xd0>)
 80016b2:	f00d fba9 	bl	800ee08 <osThreadNew>
 80016b6:	4603      	mov	r3, r0
 80016b8:	4a19      	ldr	r2, [pc, #100]	; (8001720 <MX_FREERTOS_Init+0xd4>)
 80016ba:	6013      	str	r3, [r2, #0]

  /* creation of Propulsion4 */
  Propulsion4Handle = osThreadNew(StartPropulsion4, NULL, &Propulsion4_attributes);
 80016bc:	4a19      	ldr	r2, [pc, #100]	; (8001724 <MX_FREERTOS_Init+0xd8>)
 80016be:	2100      	movs	r1, #0
 80016c0:	4819      	ldr	r0, [pc, #100]	; (8001728 <MX_FREERTOS_Init+0xdc>)
 80016c2:	f00d fba1 	bl	800ee08 <osThreadNew>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4a18      	ldr	r2, [pc, #96]	; (800172c <MX_FREERTOS_Init+0xe0>)
 80016ca:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  println("OK");
 80016cc:	4804      	ldr	r0, [pc, #16]	; (80016e0 <MX_FREERTOS_Init+0x94>)
 80016ce:	f7ff fcfd 	bl	80010cc <println>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	08017e78 	.word	0x08017e78
 80016dc:	08017e88 	.word	0x08017e88
 80016e0:	08017ea4 	.word	0x08017ea4
 80016e4:	08017ea8 	.word	0x08017ea8
 80016e8:	080199c8 	.word	0x080199c8
 80016ec:	08001731 	.word	0x08001731
 80016f0:	20005a6c 	.word	0x20005a6c
 80016f4:	080199ec 	.word	0x080199ec
 80016f8:	08001755 	.word	0x08001755
 80016fc:	20005a84 	.word	0x20005a84
 8001700:	08019a10 	.word	0x08019a10
 8001704:	08001771 	.word	0x08001771
 8001708:	20005a88 	.word	0x20005a88
 800170c:	08019a34 	.word	0x08019a34
 8001710:	08001881 	.word	0x08001881
 8001714:	20005a8c 	.word	0x20005a8c
 8001718:	08019a58 	.word	0x08019a58
 800171c:	080018f9 	.word	0x080018f9
 8001720:	20005a68 	.word	0x20005a68
 8001724:	08019a7c 	.word	0x08019a7c
 8001728:	08001909 	.word	0x08001909
 800172c:	20005a90 	.word	0x20005a90

08001730 <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMemory0 */

	//TODO UNTESTED

	//Add thread id to the list
	threadsID[0]=osThreadGetId();
 8001738:	f00d fbf8 	bl	800ef2c <osThreadGetId>
 800173c:	4603      	mov	r3, r0
 800173e:	4a04      	ldr	r2, [pc, #16]	; (8001750 <StartMemory0+0x20>)
 8001740:	6013      	str	r3, [r2, #0]

	#if !MEMORY_THREAD
    osThreadExit();
	#endif

    uint8_t counter = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	73fb      	strb	r3, [r7, #15]
		sd_write(&fil, msg_buffer_pr);
	}
	f_close(&fil);
	#endif

	osDelay(1000/DATA_FREQ);
 8001746:	2064      	movs	r0, #100	; 0x64
 8001748:	f00d fc01 	bl	800ef4e <osDelay>
 800174c:	e7fb      	b.n	8001746 <StartMemory0+0x16>
 800174e:	bf00      	nop
 8001750:	20005a70 	.word	0x20005a70

08001754 <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEjection1 */

	//Add thread id to the list
	threadsID[1]=osThreadGetId();
 800175c:	f00d fbe6 	bl	800ef2c <osThreadGetId>
 8001760:	4603      	mov	r3, r0
 8001762:	4a02      	ldr	r2, [pc, #8]	; (800176c <StartEjection1+0x18>)
 8001764:	6053      	str	r3, [r2, #4]

	#if !EJECTION_THREAD
	osThreadExit();
 8001766:	f00d fbec 	bl	800ef42 <osThreadExit>
 800176a:	bf00      	nop
 800176c:	20005a70 	.word	0x20005a70

08001770 <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b0c4      	sub	sp, #272	; 0x110
 8001774:	af00      	add	r7, sp, #0
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartTelemetry2 */

	//Add thread id to the list
	threadsID[2]=osThreadGetId();
 800177a:	f00d fbd7 	bl	800ef2c <osThreadGetId>
 800177e:	4603      	mov	r3, r0
 8001780:	4a39      	ldr	r2, [pc, #228]	; (8001868 <StartTelemetry2+0xf8>)
 8001782:	6093      	str	r3, [r2, #8]
	#if !TELEMETRY_THREAD
	osThreadExit();
	#endif

	char radio_buffer[RADIO_BUFFER_SIZE];
	uint8_t counter = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint8_t iridium_counter = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 8001790:	2201      	movs	r2, #1
 8001792:	2108      	movs	r1, #8
 8001794:	4835      	ldr	r0, [pc, #212]	; (800186c <StartTelemetry2+0xfc>)
 8001796:	f008 fb33 	bl	8009e00 <HAL_GPIO_WritePin>

	  if(apogee_flag == 0){ //Only send prop data pre-apogee
 800179a:	4b35      	ldr	r3, [pc, #212]	; (8001870 <StartTelemetry2+0x100>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d118      	bne.n	80017d4 <StartTelemetry2+0x64>

		  //Send propulsion data
		  memset(radio_buffer, 0, RADIO_BUFFER_SIZE);
 80017a2:	f107 030c 	add.w	r3, r7, #12
 80017a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017aa:	2100      	movs	r1, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f010 fbb1 	bl	8011f14 <memset>
		  MRT_formatPropulsion();
 80017b2:	f002 fa87 	bl	8003cc4 <MRT_formatPropulsion>
		  memcpy(radio_buffer, msg_buffer_pr, strlen(msg_buffer_pr));
 80017b6:	482f      	ldr	r0, [pc, #188]	; (8001874 <StartTelemetry2+0x104>)
 80017b8:	f7fe fd24 	bl	8000204 <strlen>
 80017bc:	4602      	mov	r2, r0
 80017be:	f107 030c 	add.w	r3, r7, #12
 80017c2:	492c      	ldr	r1, [pc, #176]	; (8001874 <StartTelemetry2+0x104>)
 80017c4:	4618      	mov	r0, r3
 80017c6:	f010 fb7d 	bl	8011ec4 <memcpy>
		  MRT_radio_tx((char*) radio_buffer);
 80017ca:	f107 030c 	add.w	r3, r7, #12
 80017ce:	4618      	mov	r0, r3
 80017d0:	f007 fd26 	bl	8009220 <MRT_radio_tx>
	  }


	  if (counter == SENSORS_SEND_FREQ_DIVIDER){
 80017d4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80017d8:	2b0a      	cmp	r3, #10
 80017da:	d12e      	bne.n	800183a <StartTelemetry2+0xca>
		  counter = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		  float SEC = (uint8_t) time % 60; sprintf(&SEC,"%.0f",SEC);
		  float SUBSEC = time / 3600.0; sprintf(&SUBSEC,"%.0f",SUBSEC);
		  */

	  	  //Send sensors data
		  memset(radio_buffer, 0, RADIO_BUFFER_SIZE);
 80017e2:	f107 030c 	add.w	r3, r7, #12
 80017e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ea:	2100      	movs	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f010 fb91 	bl	8011f14 <memset>
		  MRT_formatAvionics();
 80017f2:	f001 fb13 	bl	8002e1c <MRT_formatAvionics>
		  memcpy(radio_buffer, msg_buffer_av, strlen(msg_buffer_av));
 80017f6:	4820      	ldr	r0, [pc, #128]	; (8001878 <StartTelemetry2+0x108>)
 80017f8:	f7fe fd04 	bl	8000204 <strlen>
 80017fc:	4602      	mov	r2, r0
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	491d      	ldr	r1, [pc, #116]	; (8001878 <StartTelemetry2+0x108>)
 8001804:	4618      	mov	r0, r3
 8001806:	f010 fb5d 	bl	8011ec4 <memcpy>
		  MRT_radio_tx((char*) radio_buffer);
 800180a:	f107 030c 	add.w	r3, r7, #12
 800180e:	4618      	mov	r0, r3
 8001810:	f007 fd06 	bl	8009220 <MRT_radio_tx>


		  if(apogee_flag && iridium_counter == IRIDIUM_SEND_FREQ_DIVIDER){
 8001814:	4b16      	ldr	r3, [pc, #88]	; (8001870 <StartTelemetry2+0x100>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d009      	beq.n	8001830 <StartTelemetry2+0xc0>
 800181c:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001820:	2b05      	cmp	r3, #5
 8001822:	d105      	bne.n	8001830 <StartTelemetry2+0xc0>
			  iridium_counter = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
			  #if IRIDIUM_ //Iridium send
			  hiridium.getTime(); //TODO doesn't cost anything
 800182a:	4b14      	ldr	r3, [pc, #80]	; (800187c <StartTelemetry2+0x10c>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	4798      	blx	r3
			  //hiridium.sendMessage(msg); TODO IT COSTS CREDITS WATCH OUT
			  #endif
		  }
		  iridium_counter++;
 8001830:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001834:	3301      	adds	r3, #1
 8001836:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	  }
	  counter++;
 800183a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800183e:	3301      	adds	r3, #1
 8001840:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f


	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8001844:	2200      	movs	r2, #0
 8001846:	2108      	movs	r1, #8
 8001848:	4808      	ldr	r0, [pc, #32]	; (800186c <StartTelemetry2+0xfc>)
 800184a:	f008 fad9 	bl	8009e00 <HAL_GPIO_WritePin>

	  if (apogee_flag){
 800184e:	4b08      	ldr	r3, [pc, #32]	; (8001870 <StartTelemetry2+0x100>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <StartTelemetry2+0xee>
		  osDelay(1000/POST_APOGEE_SEND_FREQ);
 8001856:	200a      	movs	r0, #10
 8001858:	f00d fb79 	bl	800ef4e <osDelay>
 800185c:	e798      	b.n	8001790 <StartTelemetry2+0x20>
	  }
	  else{
		  osDelay(1000/PRE_APOGEE_SEND_FREQ);
 800185e:	2014      	movs	r0, #20
 8001860:	f00d fb75 	bl	800ef4e <osDelay>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 8001864:	e794      	b.n	8001790 <StartTelemetry2+0x20>
 8001866:	bf00      	nop
 8001868:	20005a70 	.word	0x20005a70
 800186c:	40020800 	.word	0x40020800
 8001870:	20000310 	.word	0x20000310
 8001874:	20005ec4 	.word	0x20005ec4
 8001878:	20005dc0 	.word	0x20005dc0
 800187c:	20000380 	.word	0x20000380

08001880 <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */

	//Add thread id to the list
	threadsID[3]=osThreadGetId();
 8001888:	f00d fb50 	bl	800ef2c <osThreadGetId>
 800188c:	4603      	mov	r3, r0
 800188e:	4a13      	ldr	r2, [pc, #76]	; (80018dc <StartSensors3+0x5c>)
 8001890:	60d3      	str	r3, [r2, #12]


  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 8001892:	2201      	movs	r2, #1
 8001894:	2102      	movs	r1, #2
 8001896:	4812      	ldr	r0, [pc, #72]	; (80018e0 <StartSensors3+0x60>)
 8001898:	f008 fab2 	bl	8009e00 <HAL_GPIO_WritePin>

	  //GPS
	  hgps.pollAll();
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <StartSensors3+0x64>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	4798      	blx	r3

	  //LSM6DSR
	  hlsm6dsr.pollAll();
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <StartSensors3+0x68>)
 80018a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a6:	4798      	blx	r3

	  //LPS22HH
	  hlps22hh.pollAll();
 80018a8:	4b10      	ldr	r3, [pc, #64]	; (80018ec <StartSensors3+0x6c>)
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	4798      	blx	r3

	  //Gates continuity
	  gates_continuity = MRT_getContinuity();
 80018ae:	f001 fa81 	bl	8002db4 <MRT_getContinuity>
 80018b2:	4603      	mov	r3, r0
 80018b4:	461a      	mov	r2, r3
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <StartSensors3+0x70>)
 80018b8:	701a      	strb	r2, [r3, #0]

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2102      	movs	r1, #2
 80018be:	4808      	ldr	r0, [pc, #32]	; (80018e0 <StartSensors3+0x60>)
 80018c0:	f008 fa9e 	bl	8009e00 <HAL_GPIO_WritePin>

	  if (apogee_flag){
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <StartSensors3+0x74>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <StartSensors3+0x54>
		  osDelay(1000/POST_APOGEE_POLL_FREQ);
 80018cc:	200a      	movs	r0, #10
 80018ce:	f00d fb3e 	bl	800ef4e <osDelay>
 80018d2:	e7de      	b.n	8001892 <StartSensors3+0x12>
	  }
	  else{
		  osDelay(1000/PRE_APOGEE_POLL_FREQ);
 80018d4:	2014      	movs	r0, #20
 80018d6:	f00d fb3a 	bl	800ef4e <osDelay>
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 80018da:	e7da      	b.n	8001892 <StartSensors3+0x12>
 80018dc:	20005a70 	.word	0x20005a70
 80018e0:	40020800 	.word	0x40020800
 80018e4:	20000368 	.word	0x20000368
 80018e8:	20000328 	.word	0x20000328
 80018ec:	20000354 	.word	0x20000354
 80018f0:	2000030c 	.word	0x2000030c
 80018f4:	20000310 	.word	0x20000310

080018f8 <StartWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchDog */
void StartWatchDog(void *argument)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b0c2      	sub	sp, #264	; 0x108
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartWatchDog */

	#if !WATCHDOG_THREAD
	osThreadExit();
 8001902:	f00d fb1e 	bl	800ef42 <osThreadExit>
	...

08001908 <StartPropulsion4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPropulsion4 */
void StartPropulsion4(void *argument)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPropulsion4 */

	//Add thread id to the list
	threadsID[4]=osThreadGetId();
 8001910:	f00d fb0c 	bl	800ef2c <osThreadGetId>
 8001914:	4603      	mov	r3, r0
 8001916:	4a02      	ldr	r2, [pc, #8]	; (8001920 <StartPropulsion4+0x18>)
 8001918:	6113      	str	r3, [r2, #16]

	#if !PROPULSION_THREAD
	osThreadExit();
 800191a:	f00d fb12 	bl	800ef42 <osThreadExit>
 800191e:	bf00      	nop
 8001920:	20005a70 	.word	0x20005a70

08001924 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08e      	sub	sp, #56	; 0x38
 8001928:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	623b      	str	r3, [r7, #32]
 800193e:	4bb5      	ldr	r3, [pc, #724]	; (8001c14 <MX_GPIO_Init+0x2f0>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4ab4      	ldr	r2, [pc, #720]	; (8001c14 <MX_GPIO_Init+0x2f0>)
 8001944:	f043 0310 	orr.w	r3, r3, #16
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4bb2      	ldr	r3, [pc, #712]	; (8001c14 <MX_GPIO_Init+0x2f0>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0310 	and.w	r3, r3, #16
 8001952:	623b      	str	r3, [r7, #32]
 8001954:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
 800195a:	4bae      	ldr	r3, [pc, #696]	; (8001c14 <MX_GPIO_Init+0x2f0>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4aad      	ldr	r2, [pc, #692]	; (8001c14 <MX_GPIO_Init+0x2f0>)
 8001960:	f043 0304 	orr.w	r3, r3, #4
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4bab      	ldr	r3, [pc, #684]	; (8001c14 <MX_GPIO_Init+0x2f0>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	61fb      	str	r3, [r7, #28]
 8001970:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	61bb      	str	r3, [r7, #24]
 8001976:	4ba7      	ldr	r3, [pc, #668]	; (8001c14 <MX_GPIO_Init+0x2f0>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	4aa6      	ldr	r2, [pc, #664]	; (8001c14 <MX_GPIO_Init+0x2f0>)
 800197c:	f043 0320 	orr.w	r3, r3, #32
 8001980:	6313      	str	r3, [r2, #48]	; 0x30
 8001982:	4ba4      	ldr	r3, [pc, #656]	; (8001c14 <MX_GPIO_Init+0x2f0>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	f003 0320 	and.w	r3, r3, #32
 800198a:	61bb      	str	r3, [r7, #24]
 800198c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	4ba0      	ldr	r3, [pc, #640]	; (8001c14 <MX_GPIO_Init+0x2f0>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a9f      	ldr	r2, [pc, #636]	; (8001c14 <MX_GPIO_Init+0x2f0>)
 8001998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b9d      	ldr	r3, [pc, #628]	; (8001c14 <MX_GPIO_Init+0x2f0>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	4b99      	ldr	r3, [pc, #612]	; (8001c14 <MX_GPIO_Init+0x2f0>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a98      	ldr	r2, [pc, #608]	; (8001c14 <MX_GPIO_Init+0x2f0>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b96      	ldr	r3, [pc, #600]	; (8001c14 <MX_GPIO_Init+0x2f0>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	4b92      	ldr	r3, [pc, #584]	; (8001c14 <MX_GPIO_Init+0x2f0>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a91      	ldr	r2, [pc, #580]	; (8001c14 <MX_GPIO_Init+0x2f0>)
 80019d0:	f043 0302 	orr.w	r3, r3, #2
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b8f      	ldr	r3, [pc, #572]	; (8001c14 <MX_GPIO_Init+0x2f0>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	4b8b      	ldr	r3, [pc, #556]	; (8001c14 <MX_GPIO_Init+0x2f0>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a8a      	ldr	r2, [pc, #552]	; (8001c14 <MX_GPIO_Init+0x2f0>)
 80019ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b88      	ldr	r3, [pc, #544]	; (8001c14 <MX_GPIO_Init+0x2f0>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	607b      	str	r3, [r7, #4]
 8001a02:	4b84      	ldr	r3, [pc, #528]	; (8001c14 <MX_GPIO_Init+0x2f0>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	4a83      	ldr	r2, [pc, #524]	; (8001c14 <MX_GPIO_Init+0x2f0>)
 8001a08:	f043 0308 	orr.w	r3, r3, #8
 8001a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0e:	4b81      	ldr	r3, [pc, #516]	; (8001c14 <MX_GPIO_Init+0x2f0>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f248 4184 	movw	r1, #33924	; 0x8484
 8001a20:	487d      	ldr	r0, [pc, #500]	; (8001c18 <MX_GPIO_Init+0x2f4>)
 8001a22:	f008 f9ed 	bl	8009e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 8001a26:	2200      	movs	r2, #0
 8001a28:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8001a2c:	487b      	ldr	r0, [pc, #492]	; (8001c1c <MX_GPIO_Init+0x2f8>)
 8001a2e:	f008 f9e7 	bl	8009e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 8001a32:	2200      	movs	r2, #0
 8001a34:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001a38:	4879      	ldr	r0, [pc, #484]	; (8001c20 <MX_GPIO_Init+0x2fc>)
 8001a3a:	f008 f9e1 	bl	8009e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2108      	movs	r1, #8
 8001a42:	4878      	ldr	r0, [pc, #480]	; (8001c24 <MX_GPIO_Init+0x300>)
 8001a44:	f008 f9dc 	bl	8009e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f645 2126 	movw	r1, #23078	; 0x5a26
 8001a4e:	4876      	ldr	r0, [pc, #472]	; (8001c28 <MX_GPIO_Init+0x304>)
 8001a50:	f008 f9d6 	bl	8009e00 <HAL_GPIO_WritePin>
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin, GPIO_PIN_RESET);
 8001a54:	2200      	movs	r2, #0
 8001a56:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8001a5a:	4874      	ldr	r0, [pc, #464]	; (8001c2c <MX_GPIO_Init+0x308>)
 8001a5c:	f008 f9d0 	bl	8009e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8001a60:	2200      	movs	r2, #0
 8001a62:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 8001a66:	4872      	ldr	r0, [pc, #456]	; (8001c30 <MX_GPIO_Init+0x30c>)
 8001a68:	f008 f9ca 	bl	8009e00 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 8001a6c:	f248 4384 	movw	r3, #33924	; 0x8484
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a72:	2301      	movs	r3, #1
 8001a74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a82:	4619      	mov	r1, r3
 8001a84:	4864      	ldr	r0, [pc, #400]	; (8001c18 <MX_GPIO_Init+0x2f4>)
 8001a86:	f007 fff7 	bl	8009a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a90:	2301      	movs	r3, #1
 8001a92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a94:	2301      	movs	r3, #1
 8001a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	485e      	ldr	r0, [pc, #376]	; (8001c1c <MX_GPIO_Init+0x2f8>)
 8001aa4:	f007 ffe8 	bl	8009a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001aac:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 8001ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aba:	4619      	mov	r1, r3
 8001abc:	4858      	ldr	r0, [pc, #352]	; (8001c20 <MX_GPIO_Init+0x2fc>)
 8001abe:	f007 ffdb 	bl	8009a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 8001ac2:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4851      	ldr	r0, [pc, #324]	; (8001c20 <MX_GPIO_Init+0x2fc>)
 8001adc:	f007 ffcc 	bl	8009a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 8001ae0:	2308      	movs	r3, #8
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	2300      	movs	r3, #0
 8001aee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 8001af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af4:	4619      	mov	r1, r3
 8001af6:	484b      	ldr	r0, [pc, #300]	; (8001c24 <MX_GPIO_Init+0x300>)
 8001af8:	f007 ffbe 	bl	8009a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8001afc:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b02:	2300      	movs	r3, #0
 8001b04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4843      	ldr	r0, [pc, #268]	; (8001c20 <MX_GPIO_Init+0x2fc>)
 8001b12:	f007 ffb1 	bl	8009a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 8001b16:	2302      	movs	r3, #2
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 8001b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b26:	4619      	mov	r1, r3
 8001b28:	4840      	ldr	r0, [pc, #256]	; (8001c2c <MX_GPIO_Init+0x308>)
 8001b2a:	f007 ffa5 	bl	8009a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 8001b2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b34:	2300      	movs	r3, #0
 8001b36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 8001b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b40:	4619      	mov	r1, r3
 8001b42:	4836      	ldr	r0, [pc, #216]	; (8001c1c <MX_GPIO_Init+0x2f8>)
 8001b44:	f007 ff98 	bl	8009a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 8001b48:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b56:	2300      	movs	r3, #0
 8001b58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b5e:	4619      	mov	r1, r3
 8001b60:	482e      	ldr	r0, [pc, #184]	; (8001c1c <MX_GPIO_Init+0x2f8>)
 8001b62:	f007 ff89 	bl	8009a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|IN_EJ_Main_Cont_Pin
 8001b66:	f242 4319 	movw	r3, #9241	; 0x2419
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
                          |IN_EJ_Drogue_Cont_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b78:	4619      	mov	r1, r3
 8001b7a:	482b      	ldr	r0, [pc, #172]	; (8001c28 <MX_GPIO_Init+0x304>)
 8001b7c:	f007 ff7c 	bl	8009a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 8001b80:	f645 2326 	movw	r3, #23078	; 0x5a26
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b86:	2301      	movs	r3, #1
 8001b88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b96:	4619      	mov	r1, r3
 8001b98:	4823      	ldr	r0, [pc, #140]	; (8001c28 <MX_GPIO_Init+0x304>)
 8001b9a:	f007 ff6d 	bl	8009a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 8001b9e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4819      	ldr	r0, [pc, #100]	; (8001c18 <MX_GPIO_Init+0x2f4>)
 8001bb4:	f007 ff60 	bl	8009a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB8 PBPin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin;
 8001bb8:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4816      	ldr	r0, [pc, #88]	; (8001c2c <MX_GPIO_Init+0x308>)
 8001bd2:	f007 ff51 	bl	8009a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8001bd6:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2300      	movs	r3, #0
 8001be6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bec:	4619      	mov	r1, r3
 8001bee:	4810      	ldr	r0, [pc, #64]	; (8001c30 <MX_GPIO_Init+0x30c>)
 8001bf0:	f007 ff42 	bl	8009a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 8001bf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8001c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c06:	4619      	mov	r1, r3
 8001c08:	4809      	ldr	r0, [pc, #36]	; (8001c30 <MX_GPIO_Init+0x30c>)
 8001c0a:	f007 ff35 	bl	8009a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 8001c0e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001c12:	e00f      	b.n	8001c34 <MX_GPIO_Init+0x310>
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40021400 	.word	0x40021400
 8001c20:	40020800 	.word	0x40020800
 8001c24:	40020000 	.word	0x40020000
 8001c28:	40021800 	.word	0x40021800
 8001c2c:	40020400 	.word	0x40020400
 8001c30:	40020c00 	.word	0x40020c00
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c36:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c44:	4619      	mov	r1, r3
 8001c46:	4807      	ldr	r0, [pc, #28]	; (8001c64 <MX_GPIO_Init+0x340>)
 8001c48:	f007 ff16 	bl	8009a78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2105      	movs	r1, #5
 8001c50:	2006      	movs	r0, #6
 8001c52:	f007 fed9 	bl	8009a08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001c56:	2006      	movs	r0, #6
 8001c58:	f007 fef2 	bl	8009a40 <HAL_NVIC_EnableIRQ>

}
 8001c5c:	bf00      	nop
 8001c5e:	3738      	adds	r7, #56	; 0x38
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40021800 	.word	0x40021800

08001c68 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c6c:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <MX_I2C2_Init+0x74>)
 8001c6e:	4a1c      	ldr	r2, [pc, #112]	; (8001ce0 <MX_I2C2_Init+0x78>)
 8001c70:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001c72:	4b1a      	ldr	r3, [pc, #104]	; (8001cdc <MX_I2C2_Init+0x74>)
 8001c74:	4a1b      	ldr	r2, [pc, #108]	; (8001ce4 <MX_I2C2_Init+0x7c>)
 8001c76:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c78:	4b18      	ldr	r3, [pc, #96]	; (8001cdc <MX_I2C2_Init+0x74>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001c7e:	4b17      	ldr	r3, [pc, #92]	; (8001cdc <MX_I2C2_Init+0x74>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c84:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <MX_I2C2_Init+0x74>)
 8001c86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c8a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c8c:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <MX_I2C2_Init+0x74>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001c92:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <MX_I2C2_Init+0x74>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c98:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <MX_I2C2_Init+0x74>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <MX_I2C2_Init+0x74>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ca4:	480d      	ldr	r0, [pc, #52]	; (8001cdc <MX_I2C2_Init+0x74>)
 8001ca6:	f008 f8dd 	bl	8009e64 <HAL_I2C_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001cb0:	f000 f9dc 	bl	800206c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4809      	ldr	r0, [pc, #36]	; (8001cdc <MX_I2C2_Init+0x74>)
 8001cb8:	f009 f8c9 	bl	800ae4e <HAL_I2CEx_ConfigAnalogFilter>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001cc2:	f000 f9d3 	bl	800206c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4804      	ldr	r0, [pc, #16]	; (8001cdc <MX_I2C2_Init+0x74>)
 8001cca:	f009 f8fc 	bl	800aec6 <HAL_I2CEx_ConfigDigitalFilter>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001cd4:	f000 f9ca 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20005ae8 	.word	0x20005ae8
 8001ce0:	40005800 	.word	0x40005800
 8001ce4:	000186a0 	.word	0x000186a0

08001ce8 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001cec:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <MX_I2C3_Init+0x74>)
 8001cee:	4a1c      	ldr	r2, [pc, #112]	; (8001d60 <MX_I2C3_Init+0x78>)
 8001cf0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001cf2:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <MX_I2C3_Init+0x74>)
 8001cf4:	4a1b      	ldr	r2, [pc, #108]	; (8001d64 <MX_I2C3_Init+0x7c>)
 8001cf6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cf8:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <MX_I2C3_Init+0x74>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001cfe:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <MX_I2C3_Init+0x74>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d04:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <MX_I2C3_Init+0x74>)
 8001d06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d0a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d0c:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <MX_I2C3_Init+0x74>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001d12:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <MX_I2C3_Init+0x74>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d18:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <MX_I2C3_Init+0x74>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d1e:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <MX_I2C3_Init+0x74>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001d24:	480d      	ldr	r0, [pc, #52]	; (8001d5c <MX_I2C3_Init+0x74>)
 8001d26:	f008 f89d 	bl	8009e64 <HAL_I2C_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001d30:	f000 f99c 	bl	800206c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d34:	2100      	movs	r1, #0
 8001d36:	4809      	ldr	r0, [pc, #36]	; (8001d5c <MX_I2C3_Init+0x74>)
 8001d38:	f009 f889 	bl	800ae4e <HAL_I2CEx_ConfigAnalogFilter>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001d42:	f000 f993 	bl	800206c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001d46:	2100      	movs	r1, #0
 8001d48:	4804      	ldr	r0, [pc, #16]	; (8001d5c <MX_I2C3_Init+0x74>)
 8001d4a:	f009 f8bc 	bl	800aec6 <HAL_I2CEx_ConfigDigitalFilter>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001d54:	f000 f98a 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20005a94 	.word	0x20005a94
 8001d60:	40005c00 	.word	0x40005c00
 8001d64:	000186a0 	.word	0x000186a0

08001d68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08c      	sub	sp, #48	; 0x30
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 031c 	add.w	r3, r7, #28
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a42      	ldr	r2, [pc, #264]	; (8001e90 <HAL_I2C_MspInit+0x128>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d12d      	bne.n	8001de6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61bb      	str	r3, [r7, #24]
 8001d8e:	4b41      	ldr	r3, [pc, #260]	; (8001e94 <HAL_I2C_MspInit+0x12c>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	4a40      	ldr	r2, [pc, #256]	; (8001e94 <HAL_I2C_MspInit+0x12c>)
 8001d94:	f043 0302 	orr.w	r3, r3, #2
 8001d98:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9a:	4b3e      	ldr	r3, [pc, #248]	; (8001e94 <HAL_I2C_MspInit+0x12c>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	61bb      	str	r3, [r7, #24]
 8001da4:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001da6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dac:	2312      	movs	r3, #18
 8001dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001db0:	2301      	movs	r3, #1
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db4:	2303      	movs	r3, #3
 8001db6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001db8:	2304      	movs	r3, #4
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dbc:	f107 031c 	add.w	r3, r7, #28
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4835      	ldr	r0, [pc, #212]	; (8001e98 <HAL_I2C_MspInit+0x130>)
 8001dc4:	f007 fe58 	bl	8009a78 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	4b31      	ldr	r3, [pc, #196]	; (8001e94 <HAL_I2C_MspInit+0x12c>)
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	4a30      	ldr	r2, [pc, #192]	; (8001e94 <HAL_I2C_MspInit+0x12c>)
 8001dd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd8:	4b2e      	ldr	r3, [pc, #184]	; (8001e94 <HAL_I2C_MspInit+0x12c>)
 8001dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ddc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001de4:	e050      	b.n	8001e88 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a2c      	ldr	r2, [pc, #176]	; (8001e9c <HAL_I2C_MspInit+0x134>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d14b      	bne.n	8001e88 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df0:	2300      	movs	r3, #0
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	4b27      	ldr	r3, [pc, #156]	; (8001e94 <HAL_I2C_MspInit+0x12c>)
 8001df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df8:	4a26      	ldr	r2, [pc, #152]	; (8001e94 <HAL_I2C_MspInit+0x12c>)
 8001dfa:	f043 0304 	orr.w	r3, r3, #4
 8001dfe:	6313      	str	r3, [r2, #48]	; 0x30
 8001e00:	4b24      	ldr	r3, [pc, #144]	; (8001e94 <HAL_I2C_MspInit+0x12c>)
 8001e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	4b20      	ldr	r3, [pc, #128]	; (8001e94 <HAL_I2C_MspInit+0x12c>)
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	4a1f      	ldr	r2, [pc, #124]	; (8001e94 <HAL_I2C_MspInit+0x12c>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1c:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <HAL_I2C_MspInit+0x12c>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e2e:	2312      	movs	r3, #18
 8001e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e32:	2301      	movs	r3, #1
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e36:	2303      	movs	r3, #3
 8001e38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e3e:	f107 031c 	add.w	r3, r7, #28
 8001e42:	4619      	mov	r1, r3
 8001e44:	4816      	ldr	r0, [pc, #88]	; (8001ea0 <HAL_I2C_MspInit+0x138>)
 8001e46:	f007 fe17 	bl	8009a78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e50:	2312      	movs	r3, #18
 8001e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e54:	2301      	movs	r3, #1
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e60:	f107 031c 	add.w	r3, r7, #28
 8001e64:	4619      	mov	r1, r3
 8001e66:	480f      	ldr	r0, [pc, #60]	; (8001ea4 <HAL_I2C_MspInit+0x13c>)
 8001e68:	f007 fe06 	bl	8009a78 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <HAL_I2C_MspInit+0x12c>)
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	4a07      	ldr	r2, [pc, #28]	; (8001e94 <HAL_I2C_MspInit+0x12c>)
 8001e76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7c:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <HAL_I2C_MspInit+0x12c>)
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	68bb      	ldr	r3, [r7, #8]
}
 8001e88:	bf00      	nop
 8001e8a:	3730      	adds	r7, #48	; 0x30
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40005800 	.word	0x40005800
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40020400 	.word	0x40020400
 8001e9c:	40005c00 	.word	0x40005c00
 8001ea0:	40020800 	.word	0x40020800
 8001ea4:	40020000 	.word	0x40020000

08001ea8 <main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int main(void){
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
	MRT_STM_Init();
 8001eac:	f000 f894 	bl	8001fd8 <MRT_STM_Init>
	println("\r\n\r\nSTM Init...OK");
 8001eb0:	480c      	ldr	r0, [pc, #48]	; (8001ee4 <main+0x3c>)
 8001eb2:	f7ff f90b 	bl	80010cc <println>

	MRT_Init();
 8001eb6:	f7ff f9a7 	bl	8001208 <MRT_Init>

	println("\r\n\r\n/****Starting FC****/\r\n\r\n");
 8001eba:	480b      	ldr	r0, [pc, #44]	; (8001ee8 <main+0x40>)
 8001ebc:	f7ff f906 	bl	80010cc <println>
	HAL_IWDG_Refresh(&hiwdg);
	buzz_startup_success();
 8001ec0:	f7ff f98a 	bl	80011d8 <buzz_startup_success>

	MRT_waitForLaunch();
 8001ec4:	f000 f8aa 	bl	800201c <MRT_waitForLaunch>
	//if (DEBUG) TESTING_LOOP(); //TODO remove

	//TODO I2C SENSORS (lsm and lps) SOMETIMES DON'T WANT TO WORK ANYMORE -> NEED TO RESET THE POWER (Enter quick standByMode?)

	//Initialize the os
	MX_FREERTOS_Init();
 8001ec8:	f7ff fbc0 	bl	800164c <MX_FREERTOS_Init>

	//Starting the os
	println("\r\n/****Starting the OS****/\r\n");
 8001ecc:	4807      	ldr	r0, [pc, #28]	; (8001eec <main+0x44>)
 8001ece:	f7ff f8fd 	bl	80010cc <println>
	osKernelStart();
 8001ed2:	f00c ff73 	bl	800edbc <osKernelStart>

	println("SOMETHING WENT HORRIBLY WRONG, WAITING FOR WATCH DOG RESET");
 8001ed6:	4806      	ldr	r0, [pc, #24]	; (8001ef0 <main+0x48>)
 8001ed8:	f7ff f8f8 	bl	80010cc <println>
	HAL_IWDG_Refresh(&hiwdg);
	MRT_Deinit();
 8001edc:	f7ff f9aa 	bl	8001234 <MRT_Deinit>
	while (1){}
 8001ee0:	e7fe      	b.n	8001ee0 <main+0x38>
 8001ee2:	bf00      	nop
 8001ee4:	08017ec4 	.word	0x08017ec4
 8001ee8:	08017ed8 	.word	0x08017ed8
 8001eec:	08017ef8 	.word	0x08017ef8
 8001ef0:	08017f18 	.word	0x08017f18

08001ef4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b094      	sub	sp, #80	; 0x50
 8001ef8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001efa:	f107 0320 	add.w	r3, r7, #32
 8001efe:	2230      	movs	r2, #48	; 0x30
 8001f00:	2100      	movs	r1, #0
 8001f02:	4618      	mov	r0, r3
 8001f04:	f010 f806 	bl	8011f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f08:	f107 030c 	add.w	r3, r7, #12
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60bb      	str	r3, [r7, #8]
 8001f1c:	4b2c      	ldr	r3, [pc, #176]	; (8001fd0 <SystemClock_Config+0xdc>)
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	4a2b      	ldr	r2, [pc, #172]	; (8001fd0 <SystemClock_Config+0xdc>)
 8001f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f26:	6413      	str	r3, [r2, #64]	; 0x40
 8001f28:	4b29      	ldr	r3, [pc, #164]	; (8001fd0 <SystemClock_Config+0xdc>)
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f34:	2300      	movs	r3, #0
 8001f36:	607b      	str	r3, [r7, #4]
 8001f38:	4b26      	ldr	r3, [pc, #152]	; (8001fd4 <SystemClock_Config+0xe0>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a25      	ldr	r2, [pc, #148]	; (8001fd4 <SystemClock_Config+0xe0>)
 8001f3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	4b23      	ldr	r3, [pc, #140]	; (8001fd4 <SystemClock_Config+0xe0>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f4c:	607b      	str	r3, [r7, #4]
 8001f4e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001f50:	2309      	movs	r3, #9
 8001f52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f68:	2308      	movs	r3, #8
 8001f6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001f6c:	23b4      	movs	r3, #180	; 0xb4
 8001f6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f70:	2302      	movs	r3, #2
 8001f72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001f74:	2303      	movs	r3, #3
 8001f76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f78:	f107 0320 	add.w	r3, r7, #32
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f009 f86f 	bl	800b060 <HAL_RCC_OscConfig>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001f88:	f000 f870 	bl	800206c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001f8c:	f009 f818 	bl	800afc0 <HAL_PWREx_EnableOverDrive>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001f96:	f000 f869 	bl	800206c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f9a:	230f      	movs	r3, #15
 8001f9c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001fa6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001faa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001fac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001fb0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001fb2:	f107 030c 	add.w	r3, r7, #12
 8001fb6:	2105      	movs	r1, #5
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f009 fac9 	bl	800b550 <HAL_RCC_ClockConfig>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001fc4:	f000 f852 	bl	800206c <Error_Handler>
  }
}
 8001fc8:	bf00      	nop
 8001fca:	3750      	adds	r7, #80	; 0x50
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40007000 	.word	0x40007000

08001fd8 <MRT_STM_Init>:

/* USER CODE BEGIN 4 */

void MRT_STM_Init(void){
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
	HAL_Init();
 8001fdc:	f007 f960 	bl	80092a0 <HAL_Init>
	SystemClock_Config();
 8001fe0:	f7ff ff88 	bl	8001ef4 <SystemClock_Config>

	MX_GPIO_Init();
 8001fe4:	f7ff fc9e 	bl	8001924 <MX_GPIO_Init>
	MX_ADC1_Init();
 8001fe8:	f7ff fa9a 	bl	8001520 <MX_ADC1_Init>
	MX_I2C2_Init();
 8001fec:	f7ff fe3c 	bl	8001c68 <MX_I2C2_Init>
	MX_I2C3_Init();
 8001ff0:	f7ff fe7a 	bl	8001ce8 <MX_I2C3_Init>
	MX_SPI2_Init();
 8001ff4:	f000 fa86 	bl	8002504 <MX_SPI2_Init>
	MX_SPI4_Init();
 8001ff8:	f000 faba 	bl	8002570 <MX_SPI4_Init>
	MX_SPI5_Init();
 8001ffc:	f000 faee 	bl	80025dc <MX_SPI5_Init>
	MX_TIM2_Init();
 8002000:	f000 fcae 	bl	8002960 <MX_TIM2_Init>
	MX_UART8_Init();
 8002004:	f000 fd7a 	bl	8002afc <MX_UART8_Init>
	MX_USART3_UART_Init();
 8002008:	f000 fda2 	bl	8002b50 <MX_USART3_UART_Init>
	MX_USART6_UART_Init();
 800200c:	f000 fdca 	bl	8002ba4 <MX_USART6_UART_Init>
	MX_RTC_Init();
 8002010:	f000 f832 	bl	8002078 <MX_RTC_Init>
	//MX_IWDG_Init(); TODO ADDED IN MRT_Init()
	MX_FATFS_Init();
 8002014:	f00c fda4 	bl	800eb60 <MX_FATFS_Init>
}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}

0800201c <MRT_waitForLaunch>:

void MRT_waitForLaunch(void){
 800201c:	b580      	push	{r7, lr}
 800201e:	b0c2      	sub	sp, #264	; 0x108
 8002020:	af00      	add	r7, sp, #0

	println("Waiting for launch command from ground station\r\n");
 8002022:	4807      	ldr	r0, [pc, #28]	; (8002040 <MRT_waitForLaunch+0x24>)
 8002024:	f7ff f852 	bl	80010cc <println>

	char radio_buffer[RADIO_BUFFER_SIZE];
	radio_command cmd = -1;
 8002028:	23ff      	movs	r3, #255	; 0xff
 800202a:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

	//Poll propulsion until launch command sent
	while((XTEND_ || SRADIO_) && ejection_state_flag == PAD && wu_flag == 0){
 800202e:	bf00      	nop
		HAL_Delay(1000/PRE_APOGEE_SEND_FREQ);
	}


	//Send acknowledgement
	MRT_radio_tx((char*) "LAUNCH COMMAND RECEIVED"); //TODO CHECK AT WHAT JASPER DID
 8002030:	4804      	ldr	r0, [pc, #16]	; (8002044 <MRT_waitForLaunch+0x28>)
 8002032:	f007 f8f5 	bl	8009220 <MRT_radio_tx>
}
 8002036:	bf00      	nop
 8002038:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	08017f54 	.word	0x08017f54
 8002044:	08017f88 	.word	0x08017f88

08002048 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a04      	ldr	r2, [pc, #16]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d101      	bne.n	800205e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800205a:	f007 f943 	bl	80092e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40001000 	.word	0x40001000

0800206c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002070:	b672      	cpsid	i
}
 8002072:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002074:	e7fe      	b.n	8002074 <Error_Handler+0x8>
	...

08002078 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b090      	sub	sp, #64	; 0x40
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800207e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	605a      	str	r2, [r3, #4]
 8002088:	609a      	str	r2, [r3, #8]
 800208a:	60da      	str	r2, [r3, #12]
 800208c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800208e:	2300      	movs	r3, #0
 8002090:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8002092:	463b      	mov	r3, r7
 8002094:	2228      	movs	r2, #40	; 0x28
 8002096:	2100      	movs	r1, #0
 8002098:	4618      	mov	r0, r3
 800209a:	f00f ff3b 	bl	8011f14 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800209e:	4b3a      	ldr	r3, [pc, #232]	; (8002188 <MX_RTC_Init+0x110>)
 80020a0:	4a3a      	ldr	r2, [pc, #232]	; (800218c <MX_RTC_Init+0x114>)
 80020a2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80020a4:	4b38      	ldr	r3, [pc, #224]	; (8002188 <MX_RTC_Init+0x110>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80020aa:	4b37      	ldr	r3, [pc, #220]	; (8002188 <MX_RTC_Init+0x110>)
 80020ac:	227f      	movs	r2, #127	; 0x7f
 80020ae:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80020b0:	4b35      	ldr	r3, [pc, #212]	; (8002188 <MX_RTC_Init+0x110>)
 80020b2:	22ff      	movs	r2, #255	; 0xff
 80020b4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80020b6:	4b34      	ldr	r3, [pc, #208]	; (8002188 <MX_RTC_Init+0x110>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80020bc:	4b32      	ldr	r3, [pc, #200]	; (8002188 <MX_RTC_Init+0x110>)
 80020be:	2200      	movs	r2, #0
 80020c0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80020c2:	4b31      	ldr	r3, [pc, #196]	; (8002188 <MX_RTC_Init+0x110>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80020c8:	482f      	ldr	r0, [pc, #188]	; (8002188 <MX_RTC_Init+0x110>)
 80020ca:	f009 fe2b 	bl	800bd24 <HAL_RTC_Init>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80020d4:	f7ff ffca 	bl	800206c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80020d8:	2300      	movs	r3, #0
 80020da:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 80020de:	2300      	movs	r3, #0
 80020e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80020ea:	2300      	movs	r3, #0
 80020ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80020ee:	2300      	movs	r3, #0
 80020f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80020f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020f6:	2201      	movs	r2, #1
 80020f8:	4619      	mov	r1, r3
 80020fa:	4823      	ldr	r0, [pc, #140]	; (8002188 <MX_RTC_Init+0x110>)
 80020fc:	f009 fea3 	bl	800be46 <HAL_RTC_SetTime>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8002106:	f7ff ffb1 	bl	800206c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800210a:	2301      	movs	r3, #1
 800210c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002110:	2301      	movs	r3, #1
 8002112:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8002116:	2301      	movs	r3, #1
 8002118:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 800211c:	2300      	movs	r3, #0
 800211e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002122:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002126:	2201      	movs	r2, #1
 8002128:	4619      	mov	r1, r3
 800212a:	4817      	ldr	r0, [pc, #92]	; (8002188 <MX_RTC_Init+0x110>)
 800212c:	f009 ff48 	bl	800bfc0 <HAL_RTC_SetDate>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8002136:	f7ff ff99 	bl	800206c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800213a:	2300      	movs	r3, #0
 800213c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 800213e:	2301      	movs	r3, #1
 8002140:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002142:	2300      	movs	r3, #0
 8002144:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002156:	2300      	movs	r3, #0
 8002158:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800215e:	2301      	movs	r3, #1
 8002160:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002164:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800216a:	463b      	mov	r3, r7
 800216c:	2201      	movs	r2, #1
 800216e:	4619      	mov	r1, r3
 8002170:	4805      	ldr	r0, [pc, #20]	; (8002188 <MX_RTC_Init+0x110>)
 8002172:	f009 ffcd 	bl	800c110 <HAL_RTC_SetAlarm_IT>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 800217c:	f7ff ff76 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002180:	bf00      	nop
 8002182:	3740      	adds	r7, #64	; 0x40
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20005b3c 	.word	0x20005b3c
 800218c:	40002800 	.word	0x40002800

08002190 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08e      	sub	sp, #56	; 0x38
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002198:	f107 0308 	add.w	r3, r7, #8
 800219c:	2230      	movs	r2, #48	; 0x30
 800219e:	2100      	movs	r1, #0
 80021a0:	4618      	mov	r0, r3
 80021a2:	f00f feb7 	bl	8011f14 <memset>
  if(rtcHandle->Instance==RTC)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a10      	ldr	r2, [pc, #64]	; (80021ec <HAL_RTC_MspInit+0x5c>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d119      	bne.n	80021e4 <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021b0:	2320      	movs	r3, #32
 80021b2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80021b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021b8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021ba:	f107 0308 	add.w	r3, r7, #8
 80021be:	4618      	mov	r0, r3
 80021c0:	f009 fbf2 	bl	800b9a8 <HAL_RCCEx_PeriphCLKConfig>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80021ca:	f7ff ff4f 	bl	800206c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021ce:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <HAL_RTC_MspInit+0x60>)
 80021d0:	2201      	movs	r2, #1
 80021d2:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 80021d4:	2200      	movs	r2, #0
 80021d6:	2105      	movs	r1, #5
 80021d8:	2029      	movs	r0, #41	; 0x29
 80021da:	f007 fc15 	bl	8009a08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80021de:	2029      	movs	r0, #41	; 0x29
 80021e0:	f007 fc2e 	bl	8009a40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80021e4:	bf00      	nop
 80021e6:	3738      	adds	r7, #56	; 0x38
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40002800 	.word	0x40002800
 80021f0:	42470e3c 	.word	0x42470e3c

080021f4 <MRT_rtc_Init>:


//**************************************************//
//FUNCTIONS

void MRT_rtc_Init(void){
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
	println("\r\nMRT RTC Init");
 80021f8:	4816      	ldr	r0, [pc, #88]	; (8002254 <MRT_rtc_Init+0x60>)
 80021fa:	f7fe ff67 	bl	80010cc <println>

	print("\tSetting RTC to previous time...");
 80021fe:	4816      	ldr	r0, [pc, #88]	; (8002258 <MRT_rtc_Init+0x64>)
 8002200:	f7fe ff82 	bl	8001108 <print>
	MRT_set_rtc(prev_hours,prev_min,prev_sec);
 8002204:	4b15      	ldr	r3, [pc, #84]	; (800225c <MRT_rtc_Init+0x68>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	4a15      	ldr	r2, [pc, #84]	; (8002260 <MRT_rtc_Init+0x6c>)
 800220a:	7811      	ldrb	r1, [r2, #0]
 800220c:	4a15      	ldr	r2, [pc, #84]	; (8002264 <MRT_rtc_Init+0x70>)
 800220e:	7812      	ldrb	r2, [r2, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f000 f8eb 	bl	80023ec <MRT_set_rtc>
	println("OK");
 8002216:	4814      	ldr	r0, [pc, #80]	; (8002268 <MRT_rtc_Init+0x74>)
 8002218:	f7fe ff58 	bl	80010cc <println>

	#if ALARM_A_ACTIVE
		print("\tSetting alarmA...");
 800221c:	4813      	ldr	r0, [pc, #76]	; (800226c <MRT_rtc_Init+0x78>)
 800221e:	f7fe ff73 	bl	8001108 <print>
		HAL_Delay(2000); //To make sure that when you set the Alarm it doesn't go off automatically
 8002222:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002226:	f007 f87d 	bl	8009324 <HAL_Delay>
		if (wu_flag == 0){
 800222a:	4b11      	ldr	r3, [pc, #68]	; (8002270 <MRT_rtc_Init+0x7c>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d105      	bne.n	800223e <MRT_rtc_Init+0x4a>
			MRT_set_alarmA(PRE_WHEN_SLEEP_TIME_HOURS, PRE_WHEN_SLEEP_TIME_MIN, PRE_WHEN_SLEEP_TIME_SEC);
 8002232:	2200      	movs	r2, #0
 8002234:	211e      	movs	r1, #30
 8002236:	2004      	movs	r0, #4
 8002238:	f000 f91e 	bl	8002478 <MRT_set_alarmA>
 800223c:	e004      	b.n	8002248 <MRT_rtc_Init+0x54>
		}
		else{
			MRT_set_alarmA(POST_WHEN_SLEEP_TIME_HOURS, POST_WHEN_SLEEP_TIME_MIN, POST_WHEN_SLEEP_TIME_SEC);
 800223e:	2200      	movs	r2, #0
 8002240:	2100      	movs	r1, #0
 8002242:	200e      	movs	r0, #14
 8002244:	f000 f918 	bl	8002478 <MRT_set_alarmA>
		}
		println("OK");
 8002248:	4807      	ldr	r0, [pc, #28]	; (8002268 <MRT_rtc_Init+0x74>)
 800224a:	f7fe ff3f 	bl	80010cc <println>
	#endif
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	08017fa0 	.word	0x08017fa0
 8002258:	08017fb0 	.word	0x08017fb0
 800225c:	20000312 	.word	0x20000312
 8002260:	20000313 	.word	0x20000313
 8002264:	20000314 	.word	0x20000314
 8002268:	08017fd4 	.word	0x08017fd4
 800226c:	08017fd8 	.word	0x08017fd8
 8002270:	2000030e 	.word	0x2000030e

08002274 <MRT_check_for_wake_up>:


void MRT_check_for_wake_up(void){
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0

	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8002278:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <MRT_check_for_wake_up+0x40>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b02      	cmp	r3, #2
 8002282:	d112      	bne.n	80022aa <MRT_check_for_wake_up+0x36>
	{

		wu_flag = 1;
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <MRT_check_for_wake_up+0x44>)
 8002286:	2201      	movs	r2, #1
 8002288:	701a      	strb	r2, [r3, #0]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 800228a:	4b0a      	ldr	r3, [pc, #40]	; (80022b4 <MRT_check_for_wake_up+0x40>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a09      	ldr	r2, [pc, #36]	; (80022b4 <MRT_check_for_wake_up+0x40>)
 8002290:	f043 0308 	orr.w	r3, r3, #8
 8002294:	6013      	str	r3, [r2, #0]

		println("Wakeup from STANDBY MODE");
 8002296:	4809      	ldr	r0, [pc, #36]	; (80022bc <MRT_check_for_wake_up+0x48>)
 8002298:	f7fe ff18 	bl	80010cc <println>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 800229c:	f44f 7080 	mov.w	r0, #256	; 0x100
 80022a0:	f008 fe62 	bl	800af68 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc); //TODO hrtc from rtc.h (should we pass it as an argument instead?)
 80022a4:	4806      	ldr	r0, [pc, #24]	; (80022c0 <MRT_check_for_wake_up+0x4c>)
 80022a6:	f00a f9ed 	bl	800c684 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_clear_alarms_flags();
 80022aa:	f000 f80b 	bl	80022c4 <MRT_clear_alarms_flags>
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40007000 	.word	0x40007000
 80022b8:	2000030e 	.word	0x2000030e
 80022bc:	08017fec 	.word	0x08017fec
 80022c0:	20005b3c 	.word	0x20005b3c

080022c4 <MRT_clear_alarms_flags>:



void MRT_clear_alarms_flags(void){
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	print("Clearing the flags\r\n");
 80022c8:	482a      	ldr	r0, [pc, #168]	; (8002374 <MRT_clear_alarms_flags+0xb0>)
 80022ca:	f7fe ff1d 	bl	8001108 <print>

	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 80022ce:	4b2a      	ldr	r3, [pc, #168]	; (8002378 <MRT_clear_alarms_flags+0xb4>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	22ca      	movs	r2, #202	; 0xca
 80022d4:	625a      	str	r2, [r3, #36]	; 0x24
 80022d6:	4b28      	ldr	r3, [pc, #160]	; (8002378 <MRT_clear_alarms_flags+0xb4>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2253      	movs	r2, #83	; 0x53
 80022dc:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 80022de:	e008      	b.n	80022f2 <MRT_clear_alarms_flags+0x2e>
		//print("Clearing alarm A flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80022e0:	4b25      	ldr	r3, [pc, #148]	; (8002378 <MRT_clear_alarms_flags+0xb4>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	4b23      	ldr	r3, [pc, #140]	; (8002378 <MRT_clear_alarms_flags+0xb4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80022f0:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 80022f2:	4b21      	ldr	r3, [pc, #132]	; (8002378 <MRT_clear_alarms_flags+0xb4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1ef      	bne.n	80022e0 <MRT_clear_alarms_flags+0x1c>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002300:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <MRT_clear_alarms_flags+0xb4>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	22ff      	movs	r2, #255	; 0xff
 8002306:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002308:	4b1c      	ldr	r3, [pc, #112]	; (800237c <MRT_clear_alarms_flags+0xb8>)
 800230a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800230e:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002310:	4b19      	ldr	r3, [pc, #100]	; (8002378 <MRT_clear_alarms_flags+0xb4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	22ca      	movs	r2, #202	; 0xca
 8002316:	625a      	str	r2, [r3, #36]	; 0x24
 8002318:	4b17      	ldr	r3, [pc, #92]	; (8002378 <MRT_clear_alarms_flags+0xb4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2253      	movs	r2, #83	; 0x53
 800231e:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8002320:	e008      	b.n	8002334 <MRT_clear_alarms_flags+0x70>
		//print("Clearing alarm B flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 8002322:	4b15      	ldr	r3, [pc, #84]	; (8002378 <MRT_clear_alarms_flags+0xb4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	b2da      	uxtb	r2, r3
 800232a:	4b13      	ldr	r3, [pc, #76]	; (8002378 <MRT_clear_alarms_flags+0xb4>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002332:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8002334:	4b10      	ldr	r3, [pc, #64]	; (8002378 <MRT_clear_alarms_flags+0xb4>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1ef      	bne.n	8002322 <MRT_clear_alarms_flags+0x5e>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002342:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <MRT_clear_alarms_flags+0xb4>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	22ff      	movs	r2, #255	; 0xff
 8002348:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800234a:	4b0c      	ldr	r3, [pc, #48]	; (800237c <MRT_clear_alarms_flags+0xb8>)
 800234c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002350:	615a      	str	r2, [r3, #20]

	/* Clear the WU FLAG */
	//print("Clearing wake up flag\r\n");
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8002352:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <MRT_clear_alarms_flags+0xbc>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <MRT_clear_alarms_flags+0xbc>)
 8002358:	f043 0304 	orr.w	r3, r3, #4
 800235c:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//print("Clearing RTC wake up flag\r\n");
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 800235e:	4b06      	ldr	r3, [pc, #24]	; (8002378 <MRT_clear_alarms_flags+0xb4>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	b2da      	uxtb	r2, r3
 8002366:	4b04      	ldr	r3, [pc, #16]	; (8002378 <MRT_clear_alarms_flags+0xb4>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800236e:	60da      	str	r2, [r3, #12]
}
 8002370:	bf00      	nop
 8002372:	bd80      	pop	{r7, pc}
 8002374:	08018008 	.word	0x08018008
 8002378:	20005b3c 	.word	0x20005b3c
 800237c:	40013c00 	.word	0x40013c00
 8002380:	40007000 	.word	0x40007000

08002384 <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode(uint32_t seconds){
 8002384:	b580      	push	{r7, lr}
 8002386:	b08c      	sub	sp, #48	; 0x30
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
	print("\r\n/*****StandByMode*****/\r\n");
 800238c:	4813      	ldr	r0, [pc, #76]	; (80023dc <MRT_StandByMode+0x58>)
 800238e:	f7fe febb 	bl	8001108 <print>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8002392:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002396:	f008 fdd5 	bl	800af44 <HAL_PWR_EnableWakeUpPin>

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_clear_alarms_flags();
 800239a:	f7ff ff93 	bl	80022c4 <MRT_clear_alarms_flags>

	//Setup RTC wake up timer
	println("Setting up RTCW");
 800239e:	4810      	ldr	r0, [pc, #64]	; (80023e0 <MRT_StandByMode+0x5c>)
 80023a0:	f7fe fe94 	bl	80010cc <println>
	  Error_Handler();
	}
	*/

	char msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds",(int) seconds);
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	f107 030c 	add.w	r3, r7, #12
 80023aa:	490e      	ldr	r1, [pc, #56]	; (80023e4 <MRT_StandByMode+0x60>)
 80023ac:	4618      	mov	r0, r3
 80023ae:	f011 f8ad 	bl	801350c <siprintf>
	println(msg);
 80023b2:	f107 030c 	add.w	r3, r7, #12
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe fe88 	bl	80010cc <println>

	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80023bc:	2204      	movs	r2, #4
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4809      	ldr	r0, [pc, #36]	; (80023e8 <MRT_StandByMode+0x64>)
 80023c2:	f00a f89f 	bl	800c504 <HAL_RTCEx_SetWakeUpTimer_IT>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MRT_StandByMode+0x4c>
	{
	  Error_Handler();
 80023cc:	f7ff fe4e 	bl	800206c <Error_Handler>
	}

	HAL_PWR_EnterSTANDBYMode();
 80023d0:	f008 fdde 	bl	800af90 <HAL_PWR_EnterSTANDBYMode>
}
 80023d4:	bf00      	nop
 80023d6:	3730      	adds	r7, #48	; 0x30
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	08018020 	.word	0x08018020
 80023e0:	0801803c 	.word	0x0801803c
 80023e4:	0801804c 	.word	0x0801804c
 80023e8:	20005b3c 	.word	0x20005b3c

080023ec <MRT_set_rtc>:




void MRT_set_rtc(uint8_t h, uint8_t m, uint8_t s){
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
 80023f6:	460b      	mov	r3, r1
 80023f8:	71bb      	strb	r3, [r7, #6]
 80023fa:	4613      	mov	r3, r2
 80023fc:	717b      	strb	r3, [r7, #5]
	  /** Initialize RTC and set the Time and Date
	  */
	  RTC_TimeTypeDef sTime;

	  sTime.Hours = int_to_hex_table[h];
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	4a1a      	ldr	r2, [pc, #104]	; (800246c <MRT_set_rtc+0x80>)
 8002402:	5cd3      	ldrb	r3, [r2, r3]
 8002404:	733b      	strb	r3, [r7, #12]
	  sTime.Minutes = int_to_hex_table[m];
 8002406:	79bb      	ldrb	r3, [r7, #6]
 8002408:	4a18      	ldr	r2, [pc, #96]	; (800246c <MRT_set_rtc+0x80>)
 800240a:	5cd3      	ldrb	r3, [r2, r3]
 800240c:	737b      	strb	r3, [r7, #13]
	  sTime.Seconds = int_to_hex_table[s];
 800240e:	797b      	ldrb	r3, [r7, #5]
 8002410:	4a16      	ldr	r2, [pc, #88]	; (800246c <MRT_set_rtc+0x80>)
 8002412:	5cd3      	ldrb	r3, [r2, r3]
 8002414:	73bb      	strb	r3, [r7, #14]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800241e:	f107 030c 	add.w	r3, r7, #12
 8002422:	2201      	movs	r2, #1
 8002424:	4619      	mov	r1, r3
 8002426:	4812      	ldr	r0, [pc, #72]	; (8002470 <MRT_set_rtc+0x84>)
 8002428:	f009 fd0d 	bl	800be46 <HAL_RTC_SetTime>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MRT_set_rtc+0x4a>
	  {
	    Error_Handler();
 8002432:	f7ff fe1b 	bl	800206c <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002436:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <MRT_set_rtc+0x88>)
 8002438:	2201      	movs	r2, #1
 800243a:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 800243c:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <MRT_set_rtc+0x88>)
 800243e:	2201      	movs	r2, #1
 8002440:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x1;
 8002442:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <MRT_set_rtc+0x88>)
 8002444:	2201      	movs	r2, #1
 8002446:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x0;
 8002448:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <MRT_set_rtc+0x88>)
 800244a:	2200      	movs	r2, #0
 800244c:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800244e:	2201      	movs	r2, #1
 8002450:	4908      	ldr	r1, [pc, #32]	; (8002474 <MRT_set_rtc+0x88>)
 8002452:	4807      	ldr	r0, [pc, #28]	; (8002470 <MRT_set_rtc+0x84>)
 8002454:	f009 fdb4 	bl	800bfc0 <HAL_RTC_SetDate>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MRT_set_rtc+0x76>
	  {
	    Error_Handler();
 800245e:	f7ff fe05 	bl	800206c <Error_Handler>
	  }
}
 8002462:	bf00      	nop
 8002464:	3720      	adds	r7, #32
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000000 	.word	0x20000000
 8002470:	20005b3c 	.word	0x20005b3c
 8002474:	200002e0 	.word	0x200002e0

08002478 <MRT_set_alarmA>:



void MRT_set_alarmA(uint8_t h, uint8_t m, uint8_t s){
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]
 8002482:	460b      	mov	r3, r1
 8002484:	71bb      	strb	r3, [r7, #6]
 8002486:	4613      	mov	r3, r2
 8002488:	717b      	strb	r3, [r7, #5]
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = int_to_hex_table[h];
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	4a1a      	ldr	r2, [pc, #104]	; (80024f8 <MRT_set_alarmA+0x80>)
 800248e:	5cd2      	ldrb	r2, [r2, r3]
 8002490:	4b1a      	ldr	r3, [pc, #104]	; (80024fc <MRT_set_alarmA+0x84>)
 8002492:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = int_to_hex_table[m];
 8002494:	79bb      	ldrb	r3, [r7, #6]
 8002496:	4a18      	ldr	r2, [pc, #96]	; (80024f8 <MRT_set_alarmA+0x80>)
 8002498:	5cd2      	ldrb	r2, [r2, r3]
 800249a:	4b18      	ldr	r3, [pc, #96]	; (80024fc <MRT_set_alarmA+0x84>)
 800249c:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = int_to_hex_table[s];
 800249e:	797b      	ldrb	r3, [r7, #5]
 80024a0:	4a15      	ldr	r2, [pc, #84]	; (80024f8 <MRT_set_alarmA+0x80>)
 80024a2:	5cd2      	ldrb	r2, [r2, r3]
 80024a4:	4b15      	ldr	r3, [pc, #84]	; (80024fc <MRT_set_alarmA+0x84>)
 80024a6:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 80024a8:	4b14      	ldr	r3, [pc, #80]	; (80024fc <MRT_set_alarmA+0x84>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80024ae:	4b13      	ldr	r3, [pc, #76]	; (80024fc <MRT_set_alarmA+0x84>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80024b4:	4b11      	ldr	r3, [pc, #68]	; (80024fc <MRT_set_alarmA+0x84>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80024ba:	4b10      	ldr	r3, [pc, #64]	; (80024fc <MRT_set_alarmA+0x84>)
 80024bc:	2200      	movs	r2, #0
 80024be:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80024c0:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <MRT_set_alarmA+0x84>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80024c6:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <MRT_set_alarmA+0x84>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <MRT_set_alarmA+0x84>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <MRT_set_alarmA+0x84>)
 80024d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024da:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80024dc:	2201      	movs	r2, #1
 80024de:	4907      	ldr	r1, [pc, #28]	; (80024fc <MRT_set_alarmA+0x84>)
 80024e0:	4807      	ldr	r0, [pc, #28]	; (8002500 <MRT_set_alarmA+0x88>)
 80024e2:	f009 fe15 	bl	800c110 <HAL_RTC_SetAlarm_IT>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MRT_set_alarmA+0x78>
	  {
	    Error_Handler();
 80024ec:	f7ff fdbe 	bl	800206c <Error_Handler>
	  }
}
 80024f0:	bf00      	nop
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20000000 	.word	0x20000000
 80024fc:	200002e4 	.word	0x200002e4
 8002500:	20005b3c 	.word	0x20005b3c

08002504 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002508:	4b17      	ldr	r3, [pc, #92]	; (8002568 <MX_SPI2_Init+0x64>)
 800250a:	4a18      	ldr	r2, [pc, #96]	; (800256c <MX_SPI2_Init+0x68>)
 800250c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800250e:	4b16      	ldr	r3, [pc, #88]	; (8002568 <MX_SPI2_Init+0x64>)
 8002510:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002514:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002516:	4b14      	ldr	r3, [pc, #80]	; (8002568 <MX_SPI2_Init+0x64>)
 8002518:	2200      	movs	r2, #0
 800251a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800251c:	4b12      	ldr	r3, [pc, #72]	; (8002568 <MX_SPI2_Init+0x64>)
 800251e:	2200      	movs	r2, #0
 8002520:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002522:	4b11      	ldr	r3, [pc, #68]	; (8002568 <MX_SPI2_Init+0x64>)
 8002524:	2200      	movs	r2, #0
 8002526:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002528:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <MX_SPI2_Init+0x64>)
 800252a:	2200      	movs	r2, #0
 800252c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800252e:	4b0e      	ldr	r3, [pc, #56]	; (8002568 <MX_SPI2_Init+0x64>)
 8002530:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002534:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002536:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <MX_SPI2_Init+0x64>)
 8002538:	2200      	movs	r2, #0
 800253a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800253c:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <MX_SPI2_Init+0x64>)
 800253e:	2200      	movs	r2, #0
 8002540:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002542:	4b09      	ldr	r3, [pc, #36]	; (8002568 <MX_SPI2_Init+0x64>)
 8002544:	2200      	movs	r2, #0
 8002546:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002548:	4b07      	ldr	r3, [pc, #28]	; (8002568 <MX_SPI2_Init+0x64>)
 800254a:	2200      	movs	r2, #0
 800254c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800254e:	4b06      	ldr	r3, [pc, #24]	; (8002568 <MX_SPI2_Init+0x64>)
 8002550:	220a      	movs	r2, #10
 8002552:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002554:	4804      	ldr	r0, [pc, #16]	; (8002568 <MX_SPI2_Init+0x64>)
 8002556:	f00a f8f7 	bl	800c748 <HAL_SPI_Init>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002560:	f7ff fd84 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002564:	bf00      	nop
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20005b5c 	.word	0x20005b5c
 800256c:	40003800 	.word	0x40003800

08002570 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002574:	4b17      	ldr	r3, [pc, #92]	; (80025d4 <MX_SPI4_Init+0x64>)
 8002576:	4a18      	ldr	r2, [pc, #96]	; (80025d8 <MX_SPI4_Init+0x68>)
 8002578:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800257a:	4b16      	ldr	r3, [pc, #88]	; (80025d4 <MX_SPI4_Init+0x64>)
 800257c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002580:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002582:	4b14      	ldr	r3, [pc, #80]	; (80025d4 <MX_SPI4_Init+0x64>)
 8002584:	2200      	movs	r2, #0
 8002586:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002588:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <MX_SPI4_Init+0x64>)
 800258a:	2200      	movs	r2, #0
 800258c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800258e:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <MX_SPI4_Init+0x64>)
 8002590:	2200      	movs	r2, #0
 8002592:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002594:	4b0f      	ldr	r3, [pc, #60]	; (80025d4 <MX_SPI4_Init+0x64>)
 8002596:	2200      	movs	r2, #0
 8002598:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800259a:	4b0e      	ldr	r3, [pc, #56]	; (80025d4 <MX_SPI4_Init+0x64>)
 800259c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025a0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025a2:	4b0c      	ldr	r3, [pc, #48]	; (80025d4 <MX_SPI4_Init+0x64>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025a8:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <MX_SPI4_Init+0x64>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80025ae:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <MX_SPI4_Init+0x64>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025b4:	4b07      	ldr	r3, [pc, #28]	; (80025d4 <MX_SPI4_Init+0x64>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80025ba:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <MX_SPI4_Init+0x64>)
 80025bc:	220a      	movs	r2, #10
 80025be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80025c0:	4804      	ldr	r0, [pc, #16]	; (80025d4 <MX_SPI4_Init+0x64>)
 80025c2:	f00a f8c1 	bl	800c748 <HAL_SPI_Init>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80025cc:	f7ff fd4e 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80025d0:	bf00      	nop
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20005c0c 	.word	0x20005c0c
 80025d8:	40013400 	.word	0x40013400

080025dc <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80025e0:	4b17      	ldr	r3, [pc, #92]	; (8002640 <MX_SPI5_Init+0x64>)
 80025e2:	4a18      	ldr	r2, [pc, #96]	; (8002644 <MX_SPI5_Init+0x68>)
 80025e4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80025e6:	4b16      	ldr	r3, [pc, #88]	; (8002640 <MX_SPI5_Init+0x64>)
 80025e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025ec:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80025ee:	4b14      	ldr	r3, [pc, #80]	; (8002640 <MX_SPI5_Init+0x64>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80025f4:	4b12      	ldr	r3, [pc, #72]	; (8002640 <MX_SPI5_Init+0x64>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025fa:	4b11      	ldr	r3, [pc, #68]	; (8002640 <MX_SPI5_Init+0x64>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002600:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <MX_SPI5_Init+0x64>)
 8002602:	2200      	movs	r2, #0
 8002604:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002606:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <MX_SPI5_Init+0x64>)
 8002608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800260c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800260e:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <MX_SPI5_Init+0x64>)
 8002610:	2200      	movs	r2, #0
 8002612:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002614:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <MX_SPI5_Init+0x64>)
 8002616:	2200      	movs	r2, #0
 8002618:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800261a:	4b09      	ldr	r3, [pc, #36]	; (8002640 <MX_SPI5_Init+0x64>)
 800261c:	2200      	movs	r2, #0
 800261e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002620:	4b07      	ldr	r3, [pc, #28]	; (8002640 <MX_SPI5_Init+0x64>)
 8002622:	2200      	movs	r2, #0
 8002624:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002626:	4b06      	ldr	r3, [pc, #24]	; (8002640 <MX_SPI5_Init+0x64>)
 8002628:	220a      	movs	r2, #10
 800262a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800262c:	4804      	ldr	r0, [pc, #16]	; (8002640 <MX_SPI5_Init+0x64>)
 800262e:	f00a f88b 	bl	800c748 <HAL_SPI_Init>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002638:	f7ff fd18 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800263c:	bf00      	nop
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20005bb4 	.word	0x20005bb4
 8002644:	40015000 	.word	0x40015000

08002648 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08e      	sub	sp, #56	; 0x38
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	60da      	str	r2, [r3, #12]
 800265e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a4c      	ldr	r2, [pc, #304]	; (8002798 <HAL_SPI_MspInit+0x150>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d12d      	bne.n	80026c6 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	623b      	str	r3, [r7, #32]
 800266e:	4b4b      	ldr	r3, [pc, #300]	; (800279c <HAL_SPI_MspInit+0x154>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	4a4a      	ldr	r2, [pc, #296]	; (800279c <HAL_SPI_MspInit+0x154>)
 8002674:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002678:	6413      	str	r3, [r2, #64]	; 0x40
 800267a:	4b48      	ldr	r3, [pc, #288]	; (800279c <HAL_SPI_MspInit+0x154>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002682:	623b      	str	r3, [r7, #32]
 8002684:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
 800268a:	4b44      	ldr	r3, [pc, #272]	; (800279c <HAL_SPI_MspInit+0x154>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	4a43      	ldr	r2, [pc, #268]	; (800279c <HAL_SPI_MspInit+0x154>)
 8002690:	f043 0302 	orr.w	r3, r3, #2
 8002694:	6313      	str	r3, [r2, #48]	; 0x30
 8002696:	4b41      	ldr	r3, [pc, #260]	; (800279c <HAL_SPI_MspInit+0x154>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	61fb      	str	r3, [r7, #28]
 80026a0:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80026a2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a8:	2302      	movs	r3, #2
 80026aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b0:	2303      	movs	r3, #3
 80026b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026b4:	2305      	movs	r3, #5
 80026b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026bc:	4619      	mov	r1, r3
 80026be:	4838      	ldr	r0, [pc, #224]	; (80027a0 <HAL_SPI_MspInit+0x158>)
 80026c0:	f007 f9da 	bl	8009a78 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80026c4:	e064      	b.n	8002790 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI4)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a36      	ldr	r2, [pc, #216]	; (80027a4 <HAL_SPI_MspInit+0x15c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d12d      	bne.n	800272c <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80026d0:	2300      	movs	r3, #0
 80026d2:	61bb      	str	r3, [r7, #24]
 80026d4:	4b31      	ldr	r3, [pc, #196]	; (800279c <HAL_SPI_MspInit+0x154>)
 80026d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d8:	4a30      	ldr	r2, [pc, #192]	; (800279c <HAL_SPI_MspInit+0x154>)
 80026da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026de:	6453      	str	r3, [r2, #68]	; 0x44
 80026e0:	4b2e      	ldr	r3, [pc, #184]	; (800279c <HAL_SPI_MspInit+0x154>)
 80026e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	4b2a      	ldr	r3, [pc, #168]	; (800279c <HAL_SPI_MspInit+0x154>)
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	4a29      	ldr	r2, [pc, #164]	; (800279c <HAL_SPI_MspInit+0x154>)
 80026f6:	f043 0310 	orr.w	r3, r3, #16
 80026fa:	6313      	str	r3, [r2, #48]	; 0x30
 80026fc:	4b27      	ldr	r3, [pc, #156]	; (800279c <HAL_SPI_MspInit+0x154>)
 80026fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002700:	f003 0310 	and.w	r3, r3, #16
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002708:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270e:	2302      	movs	r3, #2
 8002710:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002712:	2300      	movs	r3, #0
 8002714:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002716:	2303      	movs	r3, #3
 8002718:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800271a:	2305      	movs	r3, #5
 800271c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800271e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002722:	4619      	mov	r1, r3
 8002724:	4820      	ldr	r0, [pc, #128]	; (80027a8 <HAL_SPI_MspInit+0x160>)
 8002726:	f007 f9a7 	bl	8009a78 <HAL_GPIO_Init>
}
 800272a:	e031      	b.n	8002790 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI5)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a1e      	ldr	r2, [pc, #120]	; (80027ac <HAL_SPI_MspInit+0x164>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d12c      	bne.n	8002790 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	4b18      	ldr	r3, [pc, #96]	; (800279c <HAL_SPI_MspInit+0x154>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	4a17      	ldr	r2, [pc, #92]	; (800279c <HAL_SPI_MspInit+0x154>)
 8002740:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002744:	6453      	str	r3, [r2, #68]	; 0x44
 8002746:	4b15      	ldr	r3, [pc, #84]	; (800279c <HAL_SPI_MspInit+0x154>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800274e:	613b      	str	r3, [r7, #16]
 8002750:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	4b11      	ldr	r3, [pc, #68]	; (800279c <HAL_SPI_MspInit+0x154>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	4a10      	ldr	r2, [pc, #64]	; (800279c <HAL_SPI_MspInit+0x154>)
 800275c:	f043 0320 	orr.w	r3, r3, #32
 8002760:	6313      	str	r3, [r2, #48]	; 0x30
 8002762:	4b0e      	ldr	r3, [pc, #56]	; (800279c <HAL_SPI_MspInit+0x154>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	f003 0320 	and.w	r3, r3, #32
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800276e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002774:	2302      	movs	r3, #2
 8002776:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002778:	2301      	movs	r3, #1
 800277a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800277c:	2303      	movs	r3, #3
 800277e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002780:	2305      	movs	r3, #5
 8002782:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002788:	4619      	mov	r1, r3
 800278a:	4809      	ldr	r0, [pc, #36]	; (80027b0 <HAL_SPI_MspInit+0x168>)
 800278c:	f007 f974 	bl	8009a78 <HAL_GPIO_Init>
}
 8002790:	bf00      	nop
 8002792:	3738      	adds	r7, #56	; 0x38
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40003800 	.word	0x40003800
 800279c:	40023800 	.word	0x40023800
 80027a0:	40020400 	.word	0x40020400
 80027a4:	40013400 	.word	0x40013400
 80027a8:	40021000 	.word	0x40021000
 80027ac:	40015000 	.word	0x40015000
 80027b0:	40021400 	.word	0x40021400

080027b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	607b      	str	r3, [r7, #4]
 80027be:	4b12      	ldr	r3, [pc, #72]	; (8002808 <HAL_MspInit+0x54>)
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	4a11      	ldr	r2, [pc, #68]	; (8002808 <HAL_MspInit+0x54>)
 80027c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027c8:	6453      	str	r3, [r2, #68]	; 0x44
 80027ca:	4b0f      	ldr	r3, [pc, #60]	; (8002808 <HAL_MspInit+0x54>)
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027d2:	607b      	str	r3, [r7, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	603b      	str	r3, [r7, #0]
 80027da:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <HAL_MspInit+0x54>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	4a0a      	ldr	r2, [pc, #40]	; (8002808 <HAL_MspInit+0x54>)
 80027e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e4:	6413      	str	r3, [r2, #64]	; 0x40
 80027e6:	4b08      	ldr	r3, [pc, #32]	; (8002808 <HAL_MspInit+0x54>)
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027f2:	2200      	movs	r2, #0
 80027f4:	210f      	movs	r1, #15
 80027f6:	f06f 0001 	mvn.w	r0, #1
 80027fa:	f007 f905 	bl	8009a08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40023800 	.word	0x40023800

0800280c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08c      	sub	sp, #48	; 0x30
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002818:	2300      	movs	r3, #0
 800281a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800281c:	2200      	movs	r2, #0
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	2036      	movs	r0, #54	; 0x36
 8002822:	f007 f8f1 	bl	8009a08 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002826:	2036      	movs	r0, #54	; 0x36
 8002828:	f007 f90a 	bl	8009a40 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800282c:	2300      	movs	r3, #0
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	4b1f      	ldr	r3, [pc, #124]	; (80028b0 <HAL_InitTick+0xa4>)
 8002832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002834:	4a1e      	ldr	r2, [pc, #120]	; (80028b0 <HAL_InitTick+0xa4>)
 8002836:	f043 0310 	orr.w	r3, r3, #16
 800283a:	6413      	str	r3, [r2, #64]	; 0x40
 800283c:	4b1c      	ldr	r3, [pc, #112]	; (80028b0 <HAL_InitTick+0xa4>)
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	f003 0310 	and.w	r3, r3, #16
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002848:	f107 0210 	add.w	r2, r7, #16
 800284c:	f107 0314 	add.w	r3, r7, #20
 8002850:	4611      	mov	r1, r2
 8002852:	4618      	mov	r0, r3
 8002854:	f009 f876 	bl	800b944 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002858:	f009 f84c 	bl	800b8f4 <HAL_RCC_GetPCLK1Freq>
 800285c:	4603      	mov	r3, r0
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002864:	4a13      	ldr	r2, [pc, #76]	; (80028b4 <HAL_InitTick+0xa8>)
 8002866:	fba2 2303 	umull	r2, r3, r2, r3
 800286a:	0c9b      	lsrs	r3, r3, #18
 800286c:	3b01      	subs	r3, #1
 800286e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002870:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <HAL_InitTick+0xac>)
 8002872:	4a12      	ldr	r2, [pc, #72]	; (80028bc <HAL_InitTick+0xb0>)
 8002874:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002876:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <HAL_InitTick+0xac>)
 8002878:	f240 32e7 	movw	r2, #999	; 0x3e7
 800287c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800287e:	4a0e      	ldr	r2, [pc, #56]	; (80028b8 <HAL_InitTick+0xac>)
 8002880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002882:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002884:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <HAL_InitTick+0xac>)
 8002886:	2200      	movs	r2, #0
 8002888:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800288a:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <HAL_InitTick+0xac>)
 800288c:	2200      	movs	r2, #0
 800288e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002890:	4809      	ldr	r0, [pc, #36]	; (80028b8 <HAL_InitTick+0xac>)
 8002892:	f00a fd01 	bl	800d298 <HAL_TIM_Base_Init>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d104      	bne.n	80028a6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800289c:	4806      	ldr	r0, [pc, #24]	; (80028b8 <HAL_InitTick+0xac>)
 800289e:	f00a fd4b 	bl	800d338 <HAL_TIM_Base_Start_IT>
 80028a2:	4603      	mov	r3, r0
 80028a4:	e000      	b.n	80028a8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3730      	adds	r7, #48	; 0x30
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40023800 	.word	0x40023800
 80028b4:	431bde83 	.word	0x431bde83
 80028b8:	20005c64 	.word	0x20005c64
 80028bc:	40001000 	.word	0x40001000

080028c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028c4:	e7fe      	b.n	80028c4 <NMI_Handler+0x4>

080028c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028c6:	b480      	push	{r7}
 80028c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028ca:	e7fe      	b.n	80028ca <HardFault_Handler+0x4>

080028cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028d0:	e7fe      	b.n	80028d0 <MemManage_Handler+0x4>

080028d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028d2:	b480      	push	{r7}
 80028d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028d6:	e7fe      	b.n	80028d6 <BusFault_Handler+0x4>

080028d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028dc:	e7fe      	b.n	80028dc <UsageFault_Handler+0x4>

080028de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028de:	b480      	push	{r7}
 80028e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80028f0:	2001      	movs	r0, #1
 80028f2:	f007 fa9f 	bl	8009e34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
	...

080028fc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002900:	4802      	ldr	r0, [pc, #8]	; (800290c <RTC_Alarm_IRQHandler+0x10>)
 8002902:	f009 fd3d 	bl	800c380 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20005b3c 	.word	0x20005b3c

08002910 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002914:	4802      	ldr	r0, [pc, #8]	; (8002920 <TIM6_DAC_IRQHandler+0x10>)
 8002916:	f00a ff11 	bl	800d73c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20005c64 	.word	0x20005c64

08002924 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	4603      	mov	r3, r0
 800292c:	80fb      	strh	r3, [r7, #6]

}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
	...

0800293c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <SystemInit+0x20>)
 8002942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002946:	4a05      	ldr	r2, [pc, #20]	; (800295c <SystemInit+0x20>)
 8002948:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800294c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b08e      	sub	sp, #56	; 0x38
 8002964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002966:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	605a      	str	r2, [r3, #4]
 8002970:	609a      	str	r2, [r3, #8]
 8002972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002974:	f107 0320 	add.w	r3, r7, #32
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800297e:	1d3b      	adds	r3, r7, #4
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	60da      	str	r2, [r3, #12]
 800298a:	611a      	str	r2, [r3, #16]
 800298c:	615a      	str	r2, [r3, #20]
 800298e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002990:	4b2d      	ldr	r3, [pc, #180]	; (8002a48 <MX_TIM2_Init+0xe8>)
 8002992:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002996:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8002998:	4b2b      	ldr	r3, [pc, #172]	; (8002a48 <MX_TIM2_Init+0xe8>)
 800299a:	2259      	movs	r2, #89	; 0x59
 800299c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800299e:	4b2a      	ldr	r3, [pc, #168]	; (8002a48 <MX_TIM2_Init+0xe8>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 80029a4:	4b28      	ldr	r3, [pc, #160]	; (8002a48 <MX_TIM2_Init+0xe8>)
 80029a6:	f240 128f 	movw	r2, #399	; 0x18f
 80029aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ac:	4b26      	ldr	r3, [pc, #152]	; (8002a48 <MX_TIM2_Init+0xe8>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029b2:	4b25      	ldr	r3, [pc, #148]	; (8002a48 <MX_TIM2_Init+0xe8>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029b8:	4823      	ldr	r0, [pc, #140]	; (8002a48 <MX_TIM2_Init+0xe8>)
 80029ba:	f00a fc6d 	bl	800d298 <HAL_TIM_Base_Init>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80029c4:	f7ff fb52 	bl	800206c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029d2:	4619      	mov	r1, r3
 80029d4:	481c      	ldr	r0, [pc, #112]	; (8002a48 <MX_TIM2_Init+0xe8>)
 80029d6:	f00b f87b 	bl	800dad0 <HAL_TIM_ConfigClockSource>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80029e0:	f7ff fb44 	bl	800206c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80029e4:	4818      	ldr	r0, [pc, #96]	; (8002a48 <MX_TIM2_Init+0xe8>)
 80029e6:	f00a fd17 	bl	800d418 <HAL_TIM_PWM_Init>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80029f0:	f7ff fb3c 	bl	800206c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80029f4:	2320      	movs	r3, #32
 80029f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029f8:	2300      	movs	r3, #0
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029fc:	f107 0320 	add.w	r3, r7, #32
 8002a00:	4619      	mov	r1, r3
 8002a02:	4811      	ldr	r0, [pc, #68]	; (8002a48 <MX_TIM2_Init+0xe8>)
 8002a04:	f00b fc64 	bl	800e2d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002a0e:	f7ff fb2d 	bl	800206c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a12:	2360      	movs	r3, #96	; 0x60
 8002a14:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8002a16:	2364      	movs	r3, #100	; 0x64
 8002a18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a22:	1d3b      	adds	r3, r7, #4
 8002a24:	2208      	movs	r2, #8
 8002a26:	4619      	mov	r1, r3
 8002a28:	4807      	ldr	r0, [pc, #28]	; (8002a48 <MX_TIM2_Init+0xe8>)
 8002a2a:	f00a ff8f 	bl	800d94c <HAL_TIM_PWM_ConfigChannel>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002a34:	f7ff fb1a 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002a38:	4803      	ldr	r0, [pc, #12]	; (8002a48 <MX_TIM2_Init+0xe8>)
 8002a3a:	f000 f827 	bl	8002a8c <HAL_TIM_MspPostInit>

}
 8002a3e:	bf00      	nop
 8002a40:	3738      	adds	r7, #56	; 0x38
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20005cac 	.word	0x20005cac

08002a4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a5c:	d10d      	bne.n	8002a7a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <HAL_TIM_Base_MspInit+0x3c>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	4a08      	ldr	r2, [pc, #32]	; (8002a88 <HAL_TIM_Base_MspInit+0x3c>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a6e:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <HAL_TIM_Base_MspInit+0x3c>)
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002a7a:	bf00      	nop
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800

08002a8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a94:	f107 030c 	add.w	r3, r7, #12
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aac:	d11d      	bne.n	8002aea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60bb      	str	r3, [r7, #8]
 8002ab2:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <HAL_TIM_MspPostInit+0x68>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	4a0f      	ldr	r2, [pc, #60]	; (8002af4 <HAL_TIM_MspPostInit+0x68>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	6313      	str	r3, [r2, #48]	; 0x30
 8002abe:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <HAL_TIM_MspPostInit+0x68>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	60bb      	str	r3, [r7, #8]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8002aca:	2304      	movs	r3, #4
 8002acc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ace:	2302      	movs	r3, #2
 8002ad0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ada:	2301      	movs	r3, #1
 8002adc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8002ade:	f107 030c 	add.w	r3, r7, #12
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4804      	ldr	r0, [pc, #16]	; (8002af8 <HAL_TIM_MspPostInit+0x6c>)
 8002ae6:	f006 ffc7 	bl	8009a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002aea:	bf00      	nop
 8002aec:	3720      	adds	r7, #32
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40023800 	.word	0x40023800
 8002af8:	40020000 	.word	0x40020000

08002afc <MX_UART8_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART8 init function */
void MX_UART8_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8002b00:	4b11      	ldr	r3, [pc, #68]	; (8002b48 <MX_UART8_Init+0x4c>)
 8002b02:	4a12      	ldr	r2, [pc, #72]	; (8002b4c <MX_UART8_Init+0x50>)
 8002b04:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8002b06:	4b10      	ldr	r3, [pc, #64]	; (8002b48 <MX_UART8_Init+0x4c>)
 8002b08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b0c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8002b0e:	4b0e      	ldr	r3, [pc, #56]	; (8002b48 <MX_UART8_Init+0x4c>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002b14:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <MX_UART8_Init+0x4c>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002b1a:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <MX_UART8_Init+0x4c>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002b20:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <MX_UART8_Init+0x4c>)
 8002b22:	220c      	movs	r2, #12
 8002b24:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b26:	4b08      	ldr	r3, [pc, #32]	; (8002b48 <MX_UART8_Init+0x4c>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <MX_UART8_Init+0x4c>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002b32:	4805      	ldr	r0, [pc, #20]	; (8002b48 <MX_UART8_Init+0x4c>)
 8002b34:	f00b fc5c 	bl	800e3f0 <HAL_UART_Init>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8002b3e:	f7ff fa95 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20005d38 	.word	0x20005d38
 8002b4c:	40007c00 	.word	0x40007c00

08002b50 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b54:	4b11      	ldr	r3, [pc, #68]	; (8002b9c <MX_USART3_UART_Init+0x4c>)
 8002b56:	4a12      	ldr	r2, [pc, #72]	; (8002ba0 <MX_USART3_UART_Init+0x50>)
 8002b58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002b5a:	4b10      	ldr	r3, [pc, #64]	; (8002b9c <MX_USART3_UART_Init+0x4c>)
 8002b5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002b60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b62:	4b0e      	ldr	r3, [pc, #56]	; (8002b9c <MX_USART3_UART_Init+0x4c>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b68:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <MX_USART3_UART_Init+0x4c>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b6e:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <MX_USART3_UART_Init+0x4c>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b74:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <MX_USART3_UART_Init+0x4c>)
 8002b76:	220c      	movs	r2, #12
 8002b78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b7a:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <MX_USART3_UART_Init+0x4c>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b80:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <MX_USART3_UART_Init+0x4c>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002b86:	4805      	ldr	r0, [pc, #20]	; (8002b9c <MX_USART3_UART_Init+0x4c>)
 8002b88:	f00b fc32 	bl	800e3f0 <HAL_UART_Init>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002b92:	f7ff fa6b 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002b96:	bf00      	nop
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	20005cf4 	.word	0x20005cf4
 8002ba0:	40004800 	.word	0x40004800

08002ba4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002ba8:	4b11      	ldr	r3, [pc, #68]	; (8002bf0 <MX_USART6_UART_Init+0x4c>)
 8002baa:	4a12      	ldr	r2, [pc, #72]	; (8002bf4 <MX_USART6_UART_Init+0x50>)
 8002bac:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002bae:	4b10      	ldr	r3, [pc, #64]	; (8002bf0 <MX_USART6_UART_Init+0x4c>)
 8002bb0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002bb4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002bb6:	4b0e      	ldr	r3, [pc, #56]	; (8002bf0 <MX_USART6_UART_Init+0x4c>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002bbc:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <MX_USART6_UART_Init+0x4c>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002bc2:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <MX_USART6_UART_Init+0x4c>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002bc8:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <MX_USART6_UART_Init+0x4c>)
 8002bca:	220c      	movs	r2, #12
 8002bcc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bce:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <MX_USART6_UART_Init+0x4c>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bd4:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <MX_USART6_UART_Init+0x4c>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002bda:	4805      	ldr	r0, [pc, #20]	; (8002bf0 <MX_USART6_UART_Init+0x4c>)
 8002bdc:	f00b fc08 	bl	800e3f0 <HAL_UART_Init>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002be6:	f7ff fa41 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20005d7c 	.word	0x20005d7c
 8002bf4:	40011400 	.word	0x40011400

08002bf8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08e      	sub	sp, #56	; 0x38
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART8)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a4b      	ldr	r2, [pc, #300]	; (8002d44 <HAL_UART_MspInit+0x14c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d12c      	bne.n	8002c74 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	623b      	str	r3, [r7, #32]
 8002c1e:	4b4a      	ldr	r3, [pc, #296]	; (8002d48 <HAL_UART_MspInit+0x150>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	4a49      	ldr	r2, [pc, #292]	; (8002d48 <HAL_UART_MspInit+0x150>)
 8002c24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c28:	6413      	str	r3, [r2, #64]	; 0x40
 8002c2a:	4b47      	ldr	r3, [pc, #284]	; (8002d48 <HAL_UART_MspInit+0x150>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c32:	623b      	str	r3, [r7, #32]
 8002c34:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
 8002c3a:	4b43      	ldr	r3, [pc, #268]	; (8002d48 <HAL_UART_MspInit+0x150>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	4a42      	ldr	r2, [pc, #264]	; (8002d48 <HAL_UART_MspInit+0x150>)
 8002c40:	f043 0310 	orr.w	r3, r3, #16
 8002c44:	6313      	str	r3, [r2, #48]	; 0x30
 8002c46:	4b40      	ldr	r3, [pc, #256]	; (8002d48 <HAL_UART_MspInit+0x150>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	f003 0310 	and.w	r3, r3, #16
 8002c4e:	61fb      	str	r3, [r7, #28]
 8002c50:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8002c52:	2303      	movs	r3, #3
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c56:	2302      	movs	r3, #2
 8002c58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002c62:	2308      	movs	r3, #8
 8002c64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4837      	ldr	r0, [pc, #220]	; (8002d4c <HAL_UART_MspInit+0x154>)
 8002c6e:	f006 ff03 	bl	8009a78 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002c72:	e063      	b.n	8002d3c <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART3)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a35      	ldr	r2, [pc, #212]	; (8002d50 <HAL_UART_MspInit+0x158>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d12d      	bne.n	8002cda <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61bb      	str	r3, [r7, #24]
 8002c82:	4b31      	ldr	r3, [pc, #196]	; (8002d48 <HAL_UART_MspInit+0x150>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	4a30      	ldr	r2, [pc, #192]	; (8002d48 <HAL_UART_MspInit+0x150>)
 8002c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c8e:	4b2e      	ldr	r3, [pc, #184]	; (8002d48 <HAL_UART_MspInit+0x150>)
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c96:	61bb      	str	r3, [r7, #24]
 8002c98:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	617b      	str	r3, [r7, #20]
 8002c9e:	4b2a      	ldr	r3, [pc, #168]	; (8002d48 <HAL_UART_MspInit+0x150>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	4a29      	ldr	r2, [pc, #164]	; (8002d48 <HAL_UART_MspInit+0x150>)
 8002ca4:	f043 0308 	orr.w	r3, r3, #8
 8002ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8002caa:	4b27      	ldr	r3, [pc, #156]	; (8002d48 <HAL_UART_MspInit+0x150>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8002cb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002cba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002cc8:	2307      	movs	r3, #7
 8002cca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4820      	ldr	r0, [pc, #128]	; (8002d54 <HAL_UART_MspInit+0x15c>)
 8002cd4:	f006 fed0 	bl	8009a78 <HAL_GPIO_Init>
}
 8002cd8:	e030      	b.n	8002d3c <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART6)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a1e      	ldr	r2, [pc, #120]	; (8002d58 <HAL_UART_MspInit+0x160>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d12b      	bne.n	8002d3c <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	4b17      	ldr	r3, [pc, #92]	; (8002d48 <HAL_UART_MspInit+0x150>)
 8002cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cec:	4a16      	ldr	r2, [pc, #88]	; (8002d48 <HAL_UART_MspInit+0x150>)
 8002cee:	f043 0320 	orr.w	r3, r3, #32
 8002cf2:	6453      	str	r3, [r2, #68]	; 0x44
 8002cf4:	4b14      	ldr	r3, [pc, #80]	; (8002d48 <HAL_UART_MspInit+0x150>)
 8002cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf8:	f003 0320 	and.w	r3, r3, #32
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d00:	2300      	movs	r3, #0
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	4b10      	ldr	r3, [pc, #64]	; (8002d48 <HAL_UART_MspInit+0x150>)
 8002d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d08:	4a0f      	ldr	r2, [pc, #60]	; (8002d48 <HAL_UART_MspInit+0x150>)
 8002d0a:	f043 0304 	orr.w	r3, r3, #4
 8002d0e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d10:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <HAL_UART_MspInit+0x150>)
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8002d1c:	23c0      	movs	r3, #192	; 0xc0
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d20:	2302      	movs	r3, #2
 8002d22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d24:	2300      	movs	r3, #0
 8002d26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002d2c:	2308      	movs	r3, #8
 8002d2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d34:	4619      	mov	r1, r3
 8002d36:	4809      	ldr	r0, [pc, #36]	; (8002d5c <HAL_UART_MspInit+0x164>)
 8002d38:	f006 fe9e 	bl	8009a78 <HAL_GPIO_Init>
}
 8002d3c:	bf00      	nop
 8002d3e:	3738      	adds	r7, #56	; 0x38
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40007c00 	.word	0x40007c00
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40004800 	.word	0x40004800
 8002d54:	40020c00 	.word	0x40020c00
 8002d58:	40011400 	.word	0x40011400
 8002d5c:	40020800 	.word	0x40020800

08002d60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d98 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002d64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002d66:	e003      	b.n	8002d70 <LoopCopyDataInit>

08002d68 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002d68:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002d6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002d6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002d6e:	3104      	adds	r1, #4

08002d70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002d70:	480b      	ldr	r0, [pc, #44]	; (8002da0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002d72:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002d74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002d76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002d78:	d3f6      	bcc.n	8002d68 <CopyDataInit>
  ldr  r2, =_sbss
 8002d7a:	4a0b      	ldr	r2, [pc, #44]	; (8002da8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002d7c:	e002      	b.n	8002d84 <LoopFillZerobss>

08002d7e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002d7e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002d80:	f842 3b04 	str.w	r3, [r2], #4

08002d84 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002d84:	4b09      	ldr	r3, [pc, #36]	; (8002dac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002d86:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002d88:	d3f9      	bcc.n	8002d7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d8a:	f7ff fdd7 	bl	800293c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d8e:	f00e ff43 	bl	8011c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d92:	f7ff f889 	bl	8001ea8 <main>
  bx  lr    
 8002d96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d98:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002d9c:	0801a1b4 	.word	0x0801a1b4
  ldr  r0, =_sdata
 8002da0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002da4:	200002c4 	.word	0x200002c4
  ldr  r2, =_sbss
 8002da8:	200002c4 	.word	0x200002c4
  ldr  r3, = _ebss
 8002dac:	20006488 	.word	0x20006488

08002db0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002db0:	e7fe      	b.n	8002db0 <ADC_IRQHandler>
	...

08002db4 <MRT_getContinuity>:
 * Checks the continuity of the gates
 *
 * returns a binary number in its decimal form. Each bit is the state of a gate.
 * bit3 bit2 bit1 bit0 = drogue1 drogue2 prop1 prop2
 */
uint8_t MRT_getContinuity(void){
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
	uint8_t drogue1 = HAL_GPIO_ReadPin(IN_EJ_Drogue_Cont_GPIO_Port, IN_EJ_Drogue_Cont_Pin);
 8002dba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dbe:	4815      	ldr	r0, [pc, #84]	; (8002e14 <MRT_getContinuity+0x60>)
 8002dc0:	f007 f806 	bl	8009dd0 <HAL_GPIO_ReadPin>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	71fb      	strb	r3, [r7, #7]
	uint8_t drogue2 = HAL_GPIO_ReadPin(IN_EJ_Main_Cont_GPIO_Port, IN_EJ_Main_Cont_Pin);
 8002dc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002dcc:	4811      	ldr	r0, [pc, #68]	; (8002e14 <MRT_getContinuity+0x60>)
 8002dce:	f006 ffff 	bl	8009dd0 <HAL_GPIO_ReadPin>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	71bb      	strb	r3, [r7, #6]
	uint8_t prop1 = HAL_GPIO_ReadPin(IN_PyroValve_Cont_1_GPIO_Port, IN_PyroValve_Cont_1_Pin);
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	480e      	ldr	r0, [pc, #56]	; (8002e14 <MRT_getContinuity+0x60>)
 8002dda:	f006 fff9 	bl	8009dd0 <HAL_GPIO_ReadPin>
 8002dde:	4603      	mov	r3, r0
 8002de0:	717b      	strb	r3, [r7, #5]
	uint8_t prop2 = HAL_GPIO_ReadPin(IN_PyroValve_Cont_2_GPIO_Port, IN_PyroValve_Cont_2_Pin);
 8002de2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002de6:	480c      	ldr	r0, [pc, #48]	; (8002e18 <MRT_getContinuity+0x64>)
 8002de8:	f006 fff2 	bl	8009dd0 <HAL_GPIO_ReadPin>
 8002dec:	4603      	mov	r3, r0
 8002dee:	713b      	strb	r3, [r7, #4]
	uint8_t continuity = 8*drogue1 + 4*drogue2 + 2*prop1 + prop2;
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	005a      	lsls	r2, r3, #1
 8002df4:	79bb      	ldrb	r3, [r7, #6]
 8002df6:	4413      	add	r3, r2
 8002df8:	005a      	lsls	r2, r3, #1
 8002dfa:	797b      	ldrb	r3, [r7, #5]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	793b      	ldrb	r3, [r7, #4]
 8002e06:	4413      	add	r3, r2
 8002e08:	70fb      	strb	r3, [r7, #3]
	return continuity;
 8002e0a:	78fb      	ldrb	r3, [r7, #3]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40021800 	.word	0x40021800
 8002e18:	40021400 	.word	0x40021400

08002e1c <MRT_formatAvionics>:


// formats avionics telemetry string using sprintf
void MRT_formatAvionics(void) {
 8002e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e20:	b0a3      	sub	sp, #140	; 0x8c
 8002e22:	af16      	add	r7, sp, #88	; 0x58
	memset(msg_buffer_av, 0, 200);
 8002e24:	22c8      	movs	r2, #200	; 0xc8
 8002e26:	2100      	movs	r1, #0
 8002e28:	483c      	ldr	r0, [pc, #240]	; (8002f1c <MRT_formatAvionics+0x100>)
 8002e2a:	f00f f873 	bl	8011f14 <memset>
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
		hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 8002e2e:	4b3c      	ldr	r3, [pc, #240]	; (8002f20 <MRT_formatAvionics+0x104>)
 8002e30:	681b      	ldr	r3, [r3, #0]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fd fba8 	bl	8000588 <__aeabi_f2d>
 8002e38:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
		hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 8002e3c:	4b38      	ldr	r3, [pc, #224]	; (8002f20 <MRT_formatAvionics+0x104>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7fd fba1 	bl	8000588 <__aeabi_f2d>
 8002e46:	e9c7 0108 	strd	r0, r1, [r7, #32]
		hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 8002e4a:	4b35      	ldr	r3, [pc, #212]	; (8002f20 <MRT_formatAvionics+0x104>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fd fb9a 	bl	8000588 <__aeabi_f2d>
 8002e54:	e9c7 0106 	strd	r0, r1, [r7, #24]
		hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 8002e58:	4b31      	ldr	r3, [pc, #196]	; (8002f20 <MRT_formatAvionics+0x104>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fd fb93 	bl	8000588 <__aeabi_f2d>
 8002e62:	e9c7 0104 	strd	r0, r1, [r7, #16]
		hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 8002e66:	4b2e      	ldr	r3, [pc, #184]	; (8002f20 <MRT_formatAvionics+0x104>)
 8002e68:	691b      	ldr	r3, [r3, #16]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fd fb8c 	bl	8000588 <__aeabi_f2d>
 8002e70:	e9c7 0102 	strd	r0, r1, [r7, #8]
		hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 8002e74:	4b2a      	ldr	r3, [pc, #168]	; (8002f20 <MRT_formatAvionics+0x104>)
 8002e76:	695b      	ldr	r3, [r3, #20]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fd fb85 	bl	8000588 <__aeabi_f2d>
 8002e7e:	e9c7 0100 	strd	r0, r1, [r7]
		hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 8002e82:	4b28      	ldr	r3, [pc, #160]	; (8002f24 <MRT_formatAvionics+0x108>)
 8002e84:	681b      	ldr	r3, [r3, #0]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fd fb7e 	bl	8000588 <__aeabi_f2d>
 8002e8c:	4682      	mov	sl, r0
 8002e8e:	468b      	mov	fp, r1
		hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 8002e90:	4b25      	ldr	r3, [pc, #148]	; (8002f28 <MRT_formatAvionics+0x10c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fd fb77 	bl	8000588 <__aeabi_f2d>
 8002e9a:	4680      	mov	r8, r0
 8002e9c:	4689      	mov	r9, r1
		hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 8002e9e:	4b22      	ldr	r3, [pc, #136]	; (8002f28 <MRT_formatAvionics+0x10c>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fd fb70 	bl	8000588 <__aeabi_f2d>
 8002ea8:	4604      	mov	r4, r0
 8002eaa:	460d      	mov	r5, r1
 8002eac:	4b1f      	ldr	r3, [pc, #124]	; (8002f2c <MRT_formatAvionics+0x110>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	461e      	mov	r6, r3
 8002eb2:	4b1f      	ldr	r3, [pc, #124]	; (8002f30 <MRT_formatAvionics+0x114>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	4b1e      	ldr	r3, [pc, #120]	; (8002f34 <MRT_formatAvionics+0x118>)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	4b1e      	ldr	r3, [pc, #120]	; (8002f38 <MRT_formatAvionics+0x11c>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4b1e      	ldr	r3, [pc, #120]	; (8002f3c <MRT_formatAvionics+0x120>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	9314      	str	r3, [sp, #80]	; 0x50
 8002ec8:	9113      	str	r1, [sp, #76]	; 0x4c
 8002eca:	9212      	str	r2, [sp, #72]	; 0x48
 8002ecc:	9011      	str	r0, [sp, #68]	; 0x44
 8002ece:	9610      	str	r6, [sp, #64]	; 0x40
 8002ed0:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8002ed4:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8002ed8:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8002edc:	ed97 7b00 	vldr	d7, [r7]
 8002ee0:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002ee4:	ed97 7b02 	vldr	d7, [r7, #8]
 8002ee8:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002eec:	ed97 7b04 	vldr	d7, [r7, #16]
 8002ef0:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002ef4:	ed97 7b06 	vldr	d7, [r7, #24]
 8002ef8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002efc:	ed97 7b08 	vldr	d7, [r7, #32]
 8002f00:	ed8d 7b00 	vstr	d7, [sp]
 8002f04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f08:	490d      	ldr	r1, [pc, #52]	; (8002f40 <MRT_formatAvionics+0x124>)
 8002f0a:	4804      	ldr	r0, [pc, #16]	; (8002f1c <MRT_formatAvionics+0x100>)
 8002f0c:	f010 fafe 	bl	801350c <siprintf>
		prev_min, prev_sec, prev_subsec,
		gates_continuity,	ejection_state_flag);
}
 8002f10:	bf00      	nop
 8002f12:	3734      	adds	r7, #52	; 0x34
 8002f14:	46bd      	mov	sp, r7
 8002f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f1a:	bf00      	nop
 8002f1c:	20005dc0 	.word	0x20005dc0
 8002f20:	20000328 	.word	0x20000328
 8002f24:	20000354 	.word	0x20000354
 8002f28:	20000368 	.word	0x20000368
 8002f2c:	20000313 	.word	0x20000313
 8002f30:	20000314 	.word	0x20000314
 8002f34:	20000318 	.word	0x20000318
 8002f38:	2000030c 	.word	0x2000030c
 8002f3c:	20000311 	.word	0x20000311
 8002f40:	0801806c 	.word	0x0801806c

08002f44 <MRT_external_flash_Init>:


//**************************************************//
//FUNCTIONS

void MRT_external_flash_Init(void){
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0

	for (int i = 0; i < NB_OF_FLAGS; i++){
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	607b      	str	r3, [r7, #4]
 8002f4e:	e007      	b.n	8002f60 <MRT_external_flash_Init+0x1c>
		FLAGS_NULL_BUFFER[i] = 0; //Setup the flags null buffer for the correct number of values
 8002f50:	4a0e      	ldr	r2, [pc, #56]	; (8002f8c <MRT_external_flash_Init+0x48>)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4413      	add	r3, r2
 8002f56:	2200      	movs	r2, #0
 8002f58:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	607b      	str	r3, [r7, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	ddf4      	ble.n	8002f50 <MRT_external_flash_Init+0xc>
	}

	if (!W25qxx_Init()) {
 8002f66:	f000 fa57 	bl	8003418 <W25qxx_Init>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	f083 0301 	eor.w	r3, r3, #1
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <MRT_external_flash_Init+0x36>
		Error_Handler(); // hangs and blinks LEDF
 8002f76:	f7ff f879 	bl	800206c <Error_Handler>
	}
	MRT_check_for_wake_up(); //Needs to be called before getFlags() and after the W25xx_Init()
 8002f7a:	f7ff f97b 	bl	8002274 <MRT_check_for_wake_up>
	MRT_get_flags();
 8002f7e:	f000 f807 	bl	8002f90 <MRT_get_flags>
}
 8002f82:	bf00      	nop
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20005e88 	.word	0x20005e88

08002f90 <MRT_get_flags>:




void MRT_get_flags(void){
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0

	//Retrieve flags
	W25qxx_ReadSector(flash_flags_buffer, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8002f94:	2305      	movs	r3, #5
 8002f96:	2200      	movs	r2, #0
 8002f98:	2101      	movs	r1, #1
 8002f9a:	4875      	ldr	r0, [pc, #468]	; (8003170 <MRT_get_flags+0x1e0>)
 8002f9c:	f000 fe16 	bl	8003bcc <W25qxx_ReadSector>

	//Retrieve RTC time (last recorded)
	W25qxx_ReadSector(flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8002fa0:	2304      	movs	r3, #4
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2102      	movs	r1, #2
 8002fa6:	4873      	ldr	r0, [pc, #460]	; (8003174 <MRT_get_flags+0x1e4>)
 8002fa8:	f000 fe10 	bl	8003bcc <W25qxx_ReadSector>

	//If RTC detected a wake up, update the flash memory
	if (wu_flag == 1){
 8002fac:	4b72      	ldr	r3, [pc, #456]	; (8003178 <MRT_get_flags+0x1e8>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d10e      	bne.n	8002fd2 <MRT_get_flags+0x42>
		//Write the new number of wake up to external flash
		flash_flags_buffer[WU_FLAG_OFFSET] = flash_flags_buffer[WU_FLAG_OFFSET] + 1; //Update number of wake up
 8002fb4:	4b6e      	ldr	r3, [pc, #440]	; (8003170 <MRT_get_flags+0x1e0>)
 8002fb6:	785b      	ldrb	r3, [r3, #1]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	4b6c      	ldr	r3, [pc, #432]	; (8003170 <MRT_get_flags+0x1e0>)
 8002fbe:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(FLAGS_SECTOR);
 8002fc0:	2001      	movs	r0, #1
 8002fc2:	f000 fb7b 	bl	80036bc <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8002fc6:	2305      	movs	r3, #5
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2101      	movs	r1, #1
 8002fcc:	4868      	ldr	r0, [pc, #416]	; (8003170 <MRT_get_flags+0x1e0>)
 8002fce:	f000 fcbf 	bl	8003950 <W25qxx_WriteSector>
	}

	//Assign each value read to their variable
	 MRT_update_flags_values();
 8002fd2:	f000 f8e3 	bl	800319c <MRT_update_flags_values>


	//Check flags values
	//Reset flag
	if (reset_flag != 0 && reset_flag !=1){ //If random value (none was written)
 8002fd6:	4b69      	ldr	r3, [pc, #420]	; (800317c <MRT_get_flags+0x1ec>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d013      	beq.n	8003006 <MRT_get_flags+0x76>
 8002fde:	4b67      	ldr	r3, [pc, #412]	; (800317c <MRT_get_flags+0x1ec>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d00f      	beq.n	8003006 <MRT_get_flags+0x76>
		reset_flag = 0;
 8002fe6:	4b65      	ldr	r3, [pc, #404]	; (800317c <MRT_get_flags+0x1ec>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 8002fec:	4b63      	ldr	r3, [pc, #396]	; (800317c <MRT_get_flags+0x1ec>)
 8002fee:	781a      	ldrb	r2, [r3, #0]
 8002ff0:	4b5f      	ldr	r3, [pc, #380]	; (8003170 <MRT_get_flags+0x1e0>)
 8002ff2:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(FLAGS_SECTOR);
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	f000 fb61 	bl	80036bc <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8002ffa:	2305      	movs	r3, #5
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	2101      	movs	r1, #1
 8003000:	485b      	ldr	r0, [pc, #364]	; (8003170 <MRT_get_flags+0x1e0>)
 8003002:	f000 fca5 	bl	8003950 <W25qxx_WriteSector>
	}

	//Wake up flag
	if (wu_flag != 0 && wu_flag !=1 && wu_flag !=2){ //If random value (none was written)
 8003006:	4b5c      	ldr	r3, [pc, #368]	; (8003178 <MRT_get_flags+0x1e8>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d017      	beq.n	800303e <MRT_get_flags+0xae>
 800300e:	4b5a      	ldr	r3, [pc, #360]	; (8003178 <MRT_get_flags+0x1e8>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d013      	beq.n	800303e <MRT_get_flags+0xae>
 8003016:	4b58      	ldr	r3, [pc, #352]	; (8003178 <MRT_get_flags+0x1e8>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b02      	cmp	r3, #2
 800301c:	d00f      	beq.n	800303e <MRT_get_flags+0xae>
		wu_flag = 0;
 800301e:	4b56      	ldr	r3, [pc, #344]	; (8003178 <MRT_get_flags+0x1e8>)
 8003020:	2200      	movs	r2, #0
 8003022:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[WU_FLAG_OFFSET] = wu_flag;
 8003024:	4b54      	ldr	r3, [pc, #336]	; (8003178 <MRT_get_flags+0x1e8>)
 8003026:	781a      	ldrb	r2, [r3, #0]
 8003028:	4b51      	ldr	r3, [pc, #324]	; (8003170 <MRT_get_flags+0x1e0>)
 800302a:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(FLAGS_SECTOR);
 800302c:	2001      	movs	r0, #1
 800302e:	f000 fb45 	bl	80036bc <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8003032:	2305      	movs	r3, #5
 8003034:	2200      	movs	r2, #0
 8003036:	2101      	movs	r1, #1
 8003038:	484d      	ldr	r0, [pc, #308]	; (8003170 <MRT_get_flags+0x1e0>)
 800303a:	f000 fc89 	bl	8003950 <W25qxx_WriteSector>
	}

	//IWDG flag
	if (iwdg_flag != 0 && iwdg_flag !=1){ //If random value (none was written)
 800303e:	4b50      	ldr	r3, [pc, #320]	; (8003180 <MRT_get_flags+0x1f0>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d013      	beq.n	800306e <MRT_get_flags+0xde>
 8003046:	4b4e      	ldr	r3, [pc, #312]	; (8003180 <MRT_get_flags+0x1f0>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d00f      	beq.n	800306e <MRT_get_flags+0xde>
		iwdg_flag = 0;
 800304e:	4b4c      	ldr	r3, [pc, #304]	; (8003180 <MRT_get_flags+0x1f0>)
 8003050:	2200      	movs	r2, #0
 8003052:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8003054:	4b4a      	ldr	r3, [pc, #296]	; (8003180 <MRT_get_flags+0x1f0>)
 8003056:	781a      	ldrb	r2, [r3, #0]
 8003058:	4b45      	ldr	r3, [pc, #276]	; (8003170 <MRT_get_flags+0x1e0>)
 800305a:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(FLAGS_SECTOR);
 800305c:	2001      	movs	r0, #1
 800305e:	f000 fb2d 	bl	80036bc <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8003062:	2305      	movs	r3, #5
 8003064:	2200      	movs	r2, #0
 8003066:	2101      	movs	r1, #1
 8003068:	4841      	ldr	r0, [pc, #260]	; (8003170 <MRT_get_flags+0x1e0>)
 800306a:	f000 fc71 	bl	8003950 <W25qxx_WriteSector>
	}

	//Apogee flag
	if (apogee_flag != 0 && apogee_flag !=1){ //If random value (none was written)
 800306e:	4b45      	ldr	r3, [pc, #276]	; (8003184 <MRT_get_flags+0x1f4>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d013      	beq.n	800309e <MRT_get_flags+0x10e>
 8003076:	4b43      	ldr	r3, [pc, #268]	; (8003184 <MRT_get_flags+0x1f4>)
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d00f      	beq.n	800309e <MRT_get_flags+0x10e>
		apogee_flag = 0;
 800307e:	4b41      	ldr	r3, [pc, #260]	; (8003184 <MRT_get_flags+0x1f4>)
 8003080:	2200      	movs	r2, #0
 8003082:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[APOGEE_FLAG_OFFSET] = apogee_flag;
 8003084:	4b3f      	ldr	r3, [pc, #252]	; (8003184 <MRT_get_flags+0x1f4>)
 8003086:	781a      	ldrb	r2, [r3, #0]
 8003088:	4b39      	ldr	r3, [pc, #228]	; (8003170 <MRT_get_flags+0x1e0>)
 800308a:	70da      	strb	r2, [r3, #3]
		W25qxx_EraseSector(FLAGS_SECTOR);
 800308c:	2001      	movs	r0, #1
 800308e:	f000 fb15 	bl	80036bc <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8003092:	2305      	movs	r3, #5
 8003094:	2200      	movs	r2, #0
 8003096:	2101      	movs	r1, #1
 8003098:	4835      	ldr	r0, [pc, #212]	; (8003170 <MRT_get_flags+0x1e0>)
 800309a:	f000 fc59 	bl	8003950 <W25qxx_WriteSector>
	}

	//Ejection state flag
	if (!(ejection_state_flag >= 0 && ejection_state_flag <=4)){ //If random value (none was written)
 800309e:	4b3a      	ldr	r3, [pc, #232]	; (8003188 <MRT_get_flags+0x1f8>)
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d90f      	bls.n	80030c6 <MRT_get_flags+0x136>
		ejection_state_flag = 0;
 80030a6:	4b38      	ldr	r3, [pc, #224]	; (8003188 <MRT_get_flags+0x1f8>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[EJECTION_STATE_FLAG_OFFSET] = ejection_state_flag;
 80030ac:	4b36      	ldr	r3, [pc, #216]	; (8003188 <MRT_get_flags+0x1f8>)
 80030ae:	781a      	ldrb	r2, [r3, #0]
 80030b0:	4b2f      	ldr	r3, [pc, #188]	; (8003170 <MRT_get_flags+0x1e0>)
 80030b2:	711a      	strb	r2, [r3, #4]
		W25qxx_EraseSector(FLAGS_SECTOR);
 80030b4:	2001      	movs	r0, #1
 80030b6:	f000 fb01 	bl	80036bc <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 80030ba:	2305      	movs	r3, #5
 80030bc:	2200      	movs	r2, #0
 80030be:	2101      	movs	r1, #1
 80030c0:	482b      	ldr	r0, [pc, #172]	; (8003170 <MRT_get_flags+0x1e0>)
 80030c2:	f000 fc45 	bl	8003950 <W25qxx_WriteSector>
	}


	//Check RTC time values
	//Hours
	if (!(prev_hours >= 0 && prev_hours < 24)){ //If random value (none was written)
 80030c6:	4b31      	ldr	r3, [pc, #196]	; (800318c <MRT_get_flags+0x1fc>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b17      	cmp	r3, #23
 80030cc:	d90f      	bls.n	80030ee <MRT_get_flags+0x15e>
		prev_hours = 0;
 80030ce:	4b2f      	ldr	r3, [pc, #188]	; (800318c <MRT_get_flags+0x1fc>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_HOURS_OFFSET] = prev_hours;
 80030d4:	4b2d      	ldr	r3, [pc, #180]	; (800318c <MRT_get_flags+0x1fc>)
 80030d6:	781a      	ldrb	r2, [r3, #0]
 80030d8:	4b26      	ldr	r3, [pc, #152]	; (8003174 <MRT_get_flags+0x1e4>)
 80030da:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(RTC_SECTOR);
 80030dc:	2002      	movs	r0, #2
 80030de:	f000 faed 	bl	80036bc <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 80030e2:	2304      	movs	r3, #4
 80030e4:	2200      	movs	r2, #0
 80030e6:	2102      	movs	r1, #2
 80030e8:	4822      	ldr	r0, [pc, #136]	; (8003174 <MRT_get_flags+0x1e4>)
 80030ea:	f000 fc31 	bl	8003950 <W25qxx_WriteSector>
	}

	//Minutes
	if (!(prev_min >= 0 && prev_min < 60)){ //If random value (none was written)
 80030ee:	4b28      	ldr	r3, [pc, #160]	; (8003190 <MRT_get_flags+0x200>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b3b      	cmp	r3, #59	; 0x3b
 80030f4:	d90f      	bls.n	8003116 <MRT_get_flags+0x186>
		prev_min = 0;
 80030f6:	4b26      	ldr	r3, [pc, #152]	; (8003190 <MRT_get_flags+0x200>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_MIN_OFFSET] = prev_min;
 80030fc:	4b24      	ldr	r3, [pc, #144]	; (8003190 <MRT_get_flags+0x200>)
 80030fe:	781a      	ldrb	r2, [r3, #0]
 8003100:	4b1c      	ldr	r3, [pc, #112]	; (8003174 <MRT_get_flags+0x1e4>)
 8003102:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(RTC_SECTOR);
 8003104:	2002      	movs	r0, #2
 8003106:	f000 fad9 	bl	80036bc <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 800310a:	2304      	movs	r3, #4
 800310c:	2200      	movs	r2, #0
 800310e:	2102      	movs	r1, #2
 8003110:	4818      	ldr	r0, [pc, #96]	; (8003174 <MRT_get_flags+0x1e4>)
 8003112:	f000 fc1d 	bl	8003950 <W25qxx_WriteSector>
	}

	//Seconds
	if (!(prev_sec >= 0 && prev_sec < 60)){ //If random value (none was written)
 8003116:	4b1f      	ldr	r3, [pc, #124]	; (8003194 <MRT_get_flags+0x204>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b3b      	cmp	r3, #59	; 0x3b
 800311c:	d90f      	bls.n	800313e <MRT_get_flags+0x1ae>
		prev_sec = 0;
 800311e:	4b1d      	ldr	r3, [pc, #116]	; (8003194 <MRT_get_flags+0x204>)
 8003120:	2200      	movs	r2, #0
 8003122:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_SEC_OFFSET] = prev_sec;
 8003124:	4b1b      	ldr	r3, [pc, #108]	; (8003194 <MRT_get_flags+0x204>)
 8003126:	781a      	ldrb	r2, [r3, #0]
 8003128:	4b12      	ldr	r3, [pc, #72]	; (8003174 <MRT_get_flags+0x1e4>)
 800312a:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(RTC_SECTOR);
 800312c:	2002      	movs	r0, #2
 800312e:	f000 fac5 	bl	80036bc <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003132:	2304      	movs	r3, #4
 8003134:	2200      	movs	r2, #0
 8003136:	2102      	movs	r1, #2
 8003138:	480e      	ldr	r0, [pc, #56]	; (8003174 <MRT_get_flags+0x1e4>)
 800313a:	f000 fc09 	bl	8003950 <W25qxx_WriteSector>
	}

	//Sub-Seconds
	if (!(prev_subsec >= 0 && prev_subsec < 1000)){ //If random value (none was written)
 800313e:	4b16      	ldr	r3, [pc, #88]	; (8003198 <MRT_get_flags+0x208>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003146:	d310      	bcc.n	800316a <MRT_get_flags+0x1da>
		prev_subsec = 0;
 8003148:	4b13      	ldr	r3, [pc, #76]	; (8003198 <MRT_get_flags+0x208>)
 800314a:	2200      	movs	r2, #0
 800314c:	601a      	str	r2, [r3, #0]
		flash_time_buffer[RTC_SEC_OFFSET] = prev_subsec;
 800314e:	4b12      	ldr	r3, [pc, #72]	; (8003198 <MRT_get_flags+0x208>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	b2da      	uxtb	r2, r3
 8003154:	4b07      	ldr	r3, [pc, #28]	; (8003174 <MRT_get_flags+0x1e4>)
 8003156:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(RTC_SECTOR);
 8003158:	2002      	movs	r0, #2
 800315a:	f000 faaf 	bl	80036bc <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 800315e:	2304      	movs	r3, #4
 8003160:	2200      	movs	r2, #0
 8003162:	2102      	movs	r1, #2
 8003164:	4803      	ldr	r0, [pc, #12]	; (8003174 <MRT_get_flags+0x1e4>)
 8003166:	f000 fbf3 	bl	8003950 <W25qxx_WriteSector>
	}
}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20005e90 	.word	0x20005e90
 8003174:	20005e98 	.word	0x20005e98
 8003178:	2000030e 	.word	0x2000030e
 800317c:	2000030d 	.word	0x2000030d
 8003180:	2000030f 	.word	0x2000030f
 8003184:	20000310 	.word	0x20000310
 8003188:	20000311 	.word	0x20000311
 800318c:	20000312 	.word	0x20000312
 8003190:	20000313 	.word	0x20000313
 8003194:	20000314 	.word	0x20000314
 8003198:	20000318 	.word	0x20000318

0800319c <MRT_update_flags_values>:
		flash_time_buffer[i] = *flash_time[i];
	}
}


void MRT_update_flags_values(void){
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 80031a2:	2300      	movs	r3, #0
 80031a4:	607b      	str	r3, [r7, #4]
 80031a6:	e00b      	b.n	80031c0 <MRT_update_flags_values+0x24>
		*flash_flags[i] = flash_flags_buffer[i];
 80031a8:	4a13      	ldr	r2, [pc, #76]	; (80031f8 <MRT_update_flags_values+0x5c>)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031b0:	4912      	ldr	r1, [pc, #72]	; (80031fc <MRT_update_flags_values+0x60>)
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	440a      	add	r2, r1
 80031b6:	7812      	ldrb	r2, [r2, #0]
 80031b8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3301      	adds	r3, #1
 80031be:	607b      	str	r3, [r7, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	ddf0      	ble.n	80031a8 <MRT_update_flags_values+0xc>
	}
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 80031c6:	2300      	movs	r3, #0
 80031c8:	603b      	str	r3, [r7, #0]
 80031ca:	e00b      	b.n	80031e4 <MRT_update_flags_values+0x48>
		*flash_time[i] = flash_time_buffer[i];
 80031cc:	4a0c      	ldr	r2, [pc, #48]	; (8003200 <MRT_update_flags_values+0x64>)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d4:	490b      	ldr	r1, [pc, #44]	; (8003204 <MRT_update_flags_values+0x68>)
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	440a      	add	r2, r1
 80031da:	7812      	ldrb	r2, [r2, #0]
 80031dc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	3301      	adds	r3, #1
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	2b03      	cmp	r3, #3
 80031e8:	ddf0      	ble.n	80031cc <MRT_update_flags_values+0x30>
	}
}
 80031ea:	bf00      	nop
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	20000040 	.word	0x20000040
 80031fc:	20005e90 	.word	0x20005e90
 8003200:	20000054 	.word	0x20000054
 8003204:	20005e98 	.word	0x20005e98

08003208 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af02      	add	r7, sp, #8
 800320e:	4603      	mov	r3, r0
 8003210:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8003212:	f107 020f 	add.w	r2, r7, #15
 8003216:	1df9      	adds	r1, r7, #7
 8003218:	2364      	movs	r3, #100	; 0x64
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	2301      	movs	r3, #1
 800321e:	4804      	ldr	r0, [pc, #16]	; (8003230 <W25qxx_Spi+0x28>)
 8003220:	f009 fd68 	bl	800ccf4 <HAL_SPI_TransmitReceive>
	return ret;
 8003224:	7bfb      	ldrb	r3, [r7, #15]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	20005bb4 	.word	0x20005bb4

08003234 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800323a:	2300      	movs	r3, #0
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	2300      	movs	r3, #0
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	2300      	movs	r3, #0
 8003244:	607b      	str	r3, [r7, #4]
 8003246:	2300      	movs	r3, #0
 8003248:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800324a:	2200      	movs	r2, #0
 800324c:	2140      	movs	r1, #64	; 0x40
 800324e:	4813      	ldr	r0, [pc, #76]	; (800329c <W25qxx_ReadID+0x68>)
 8003250:	f006 fdd6 	bl	8009e00 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8003254:	209f      	movs	r0, #159	; 0x9f
 8003256:	f7ff ffd7 	bl	8003208 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800325a:	20a5      	movs	r0, #165	; 0xa5
 800325c:	f7ff ffd4 	bl	8003208 <W25qxx_Spi>
 8003260:	4603      	mov	r3, r0
 8003262:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003264:	20a5      	movs	r0, #165	; 0xa5
 8003266:	f7ff ffcf 	bl	8003208 <W25qxx_Spi>
 800326a:	4603      	mov	r3, r0
 800326c:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800326e:	20a5      	movs	r0, #165	; 0xa5
 8003270:	f7ff ffca 	bl	8003208 <W25qxx_Spi>
 8003274:	4603      	mov	r3, r0
 8003276:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003278:	2201      	movs	r2, #1
 800327a:	2140      	movs	r1, #64	; 0x40
 800327c:	4807      	ldr	r0, [pc, #28]	; (800329c <W25qxx_ReadID+0x68>)
 800327e:	f006 fdbf 	bl	8009e00 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	041a      	lsls	r2, r3, #16
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	021b      	lsls	r3, r3, #8
 800328a:	4313      	orrs	r3, r2
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]
	return Temp;
 8003292:	68fb      	ldr	r3, [r7, #12]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40020c00 	.word	0x40020c00

080032a0 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 80032a0:	b590      	push	{r4, r7, lr}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80032a6:	2200      	movs	r2, #0
 80032a8:	2140      	movs	r1, #64	; 0x40
 80032aa:	4816      	ldr	r0, [pc, #88]	; (8003304 <W25qxx_ReadUniqID+0x64>)
 80032ac:	f006 fda8 	bl	8009e00 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 80032b0:	204b      	movs	r0, #75	; 0x4b
 80032b2:	f7ff ffa9 	bl	8003208 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80032b6:	2300      	movs	r3, #0
 80032b8:	71fb      	strb	r3, [r7, #7]
 80032ba:	e005      	b.n	80032c8 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80032bc:	20a5      	movs	r0, #165	; 0xa5
 80032be:	f7ff ffa3 	bl	8003208 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80032c2:	79fb      	ldrb	r3, [r7, #7]
 80032c4:	3301      	adds	r3, #1
 80032c6:	71fb      	strb	r3, [r7, #7]
 80032c8:	79fb      	ldrb	r3, [r7, #7]
 80032ca:	2b03      	cmp	r3, #3
 80032cc:	d9f6      	bls.n	80032bc <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 80032ce:	2300      	movs	r3, #0
 80032d0:	71bb      	strb	r3, [r7, #6]
 80032d2:	e00b      	b.n	80032ec <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80032d4:	79bc      	ldrb	r4, [r7, #6]
 80032d6:	20a5      	movs	r0, #165	; 0xa5
 80032d8:	f7ff ff96 	bl	8003208 <W25qxx_Spi>
 80032dc:	4603      	mov	r3, r0
 80032de:	461a      	mov	r2, r3
 80032e0:	4b09      	ldr	r3, [pc, #36]	; (8003308 <W25qxx_ReadUniqID+0x68>)
 80032e2:	4423      	add	r3, r4
 80032e4:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 80032e6:	79bb      	ldrb	r3, [r7, #6]
 80032e8:	3301      	adds	r3, #1
 80032ea:	71bb      	strb	r3, [r7, #6]
 80032ec:	79bb      	ldrb	r3, [r7, #6]
 80032ee:	2b07      	cmp	r3, #7
 80032f0:	d9f0      	bls.n	80032d4 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80032f2:	2201      	movs	r2, #1
 80032f4:	2140      	movs	r1, #64	; 0x40
 80032f6:	4803      	ldr	r0, [pc, #12]	; (8003304 <W25qxx_ReadUniqID+0x64>)
 80032f8:	f006 fd82 	bl	8009e00 <HAL_GPIO_WritePin>
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	bd90      	pop	{r4, r7, pc}
 8003304:	40020c00 	.word	0x40020c00
 8003308:	20005e9c 	.word	0x20005e9c

0800330c <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003310:	2200      	movs	r2, #0
 8003312:	2140      	movs	r1, #64	; 0x40
 8003314:	4807      	ldr	r0, [pc, #28]	; (8003334 <W25qxx_WriteEnable+0x28>)
 8003316:	f006 fd73 	bl	8009e00 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 800331a:	2006      	movs	r0, #6
 800331c:	f7ff ff74 	bl	8003208 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003320:	2201      	movs	r2, #1
 8003322:	2140      	movs	r1, #64	; 0x40
 8003324:	4803      	ldr	r0, [pc, #12]	; (8003334 <W25qxx_WriteEnable+0x28>)
 8003326:	f006 fd6b 	bl	8009e00 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 800332a:	2001      	movs	r0, #1
 800332c:	f00b fe0f 	bl	800ef4e <osDelay>
}
 8003330:	bf00      	nop
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40020c00 	.word	0x40020c00

08003338 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8003342:	2300      	movs	r3, #0
 8003344:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003346:	2200      	movs	r2, #0
 8003348:	2140      	movs	r1, #64	; 0x40
 800334a:	481c      	ldr	r0, [pc, #112]	; (80033bc <W25qxx_ReadStatusRegister+0x84>)
 800334c:	f006 fd58 	bl	8009e00 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8003350:	79fb      	ldrb	r3, [r7, #7]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d10c      	bne.n	8003370 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8003356:	2005      	movs	r0, #5
 8003358:	f7ff ff56 	bl	8003208 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800335c:	20a5      	movs	r0, #165	; 0xa5
 800335e:	f7ff ff53 	bl	8003208 <W25qxx_Spi>
 8003362:	4603      	mov	r3, r0
 8003364:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8003366:	4a16      	ldr	r2, [pc, #88]	; (80033c0 <W25qxx_ReadStatusRegister+0x88>)
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800336e:	e01b      	b.n	80033a8 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8003370:	79fb      	ldrb	r3, [r7, #7]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d10c      	bne.n	8003390 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8003376:	2035      	movs	r0, #53	; 0x35
 8003378:	f7ff ff46 	bl	8003208 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800337c:	20a5      	movs	r0, #165	; 0xa5
 800337e:	f7ff ff43 	bl	8003208 <W25qxx_Spi>
 8003382:	4603      	mov	r3, r0
 8003384:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8003386:	4a0e      	ldr	r2, [pc, #56]	; (80033c0 <W25qxx_ReadStatusRegister+0x88>)
 8003388:	7bfb      	ldrb	r3, [r7, #15]
 800338a:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 800338e:	e00b      	b.n	80033a8 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8003390:	2015      	movs	r0, #21
 8003392:	f7ff ff39 	bl	8003208 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003396:	20a5      	movs	r0, #165	; 0xa5
 8003398:	f7ff ff36 	bl	8003208 <W25qxx_Spi>
 800339c:	4603      	mov	r3, r0
 800339e:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 80033a0:	4a07      	ldr	r2, [pc, #28]	; (80033c0 <W25qxx_ReadStatusRegister+0x88>)
 80033a2:	7bfb      	ldrb	r3, [r7, #15]
 80033a4:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80033a8:	2201      	movs	r2, #1
 80033aa:	2140      	movs	r1, #64	; 0x40
 80033ac:	4803      	ldr	r0, [pc, #12]	; (80033bc <W25qxx_ReadStatusRegister+0x84>)
 80033ae:	f006 fd27 	bl	8009e00 <HAL_GPIO_WritePin>
	return status;
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40020c00 	.word	0x40020c00
 80033c0:	20005e9c 	.word	0x20005e9c

080033c4 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 80033c8:	2001      	movs	r0, #1
 80033ca:	f00b fdc0 	bl	800ef4e <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80033ce:	2200      	movs	r2, #0
 80033d0:	2140      	movs	r1, #64	; 0x40
 80033d2:	480f      	ldr	r0, [pc, #60]	; (8003410 <W25qxx_WaitForWriteEnd+0x4c>)
 80033d4:	f006 fd14 	bl	8009e00 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 80033d8:	2005      	movs	r0, #5
 80033da:	f7ff ff15 	bl	8003208 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80033de:	20a5      	movs	r0, #165	; 0xa5
 80033e0:	f7ff ff12 	bl	8003208 <W25qxx_Spi>
 80033e4:	4603      	mov	r3, r0
 80033e6:	461a      	mov	r2, r3
 80033e8:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <W25qxx_WaitForWriteEnd+0x50>)
 80033ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 80033ee:	2001      	movs	r0, #1
 80033f0:	f00b fdad 	bl	800ef4e <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 80033f4:	4b07      	ldr	r3, [pc, #28]	; (8003414 <W25qxx_WaitForWriteEnd+0x50>)
 80033f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1ed      	bne.n	80033de <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003402:	2201      	movs	r2, #1
 8003404:	2140      	movs	r1, #64	; 0x40
 8003406:	4802      	ldr	r0, [pc, #8]	; (8003410 <W25qxx_WaitForWriteEnd+0x4c>)
 8003408:	f006 fcfa 	bl	8009e00 <HAL_GPIO_WritePin>
}
 800340c:	bf00      	nop
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40020c00 	.word	0x40020c00
 8003414:	20005e9c 	.word	0x20005e9c

08003418 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 800341e:	4b90      	ldr	r3, [pc, #576]	; (8003660 <W25qxx_Init+0x248>)
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8003426:	e002      	b.n	800342e <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8003428:	2001      	movs	r0, #1
 800342a:	f00b fd90 	bl	800ef4e <osDelay>
	while (HAL_GetTick() < 100)
 800342e:	f005 ff6d 	bl	800930c <HAL_GetTick>
 8003432:	4603      	mov	r3, r0
 8003434:	2b63      	cmp	r3, #99	; 0x63
 8003436:	d9f7      	bls.n	8003428 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003438:	2201      	movs	r2, #1
 800343a:	2140      	movs	r1, #64	; 0x40
 800343c:	4889      	ldr	r0, [pc, #548]	; (8003664 <W25qxx_Init+0x24c>)
 800343e:	f006 fcdf 	bl	8009e00 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8003442:	2064      	movs	r0, #100	; 0x64
 8003444:	f00b fd83 	bl	800ef4e <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 8003448:	4887      	ldr	r0, [pc, #540]	; (8003668 <W25qxx_Init+0x250>)
 800344a:	f00f ff93 	bl	8013374 <puts>
#endif
	id = W25qxx_ReadID();
 800344e:	f7ff fef1 	bl	8003234 <W25qxx_ReadID>
 8003452:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	4885      	ldr	r0, [pc, #532]	; (800366c <W25qxx_Init+0x254>)
 8003458:	f00f ff06 	bl	8013268 <iprintf>
#endif
	switch (id & 0x000000FF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	b2db      	uxtb	r3, r3
 8003460:	3b11      	subs	r3, #17
 8003462:	2b0f      	cmp	r3, #15
 8003464:	f200 808b 	bhi.w	800357e <W25qxx_Init+0x166>
 8003468:	a201      	add	r2, pc, #4	; (adr r2, 8003470 <W25qxx_Init+0x58>)
 800346a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346e:	bf00      	nop
 8003470:	0800356b 	.word	0x0800356b
 8003474:	08003557 	.word	0x08003557
 8003478:	08003543 	.word	0x08003543
 800347c:	0800352f 	.word	0x0800352f
 8003480:	0800351b 	.word	0x0800351b
 8003484:	08003507 	.word	0x08003507
 8003488:	080034f3 	.word	0x080034f3
 800348c:	080034dd 	.word	0x080034dd
 8003490:	080034c7 	.word	0x080034c7
 8003494:	0800357f 	.word	0x0800357f
 8003498:	0800357f 	.word	0x0800357f
 800349c:	0800357f 	.word	0x0800357f
 80034a0:	0800357f 	.word	0x0800357f
 80034a4:	0800357f 	.word	0x0800357f
 80034a8:	0800357f 	.word	0x0800357f
 80034ac:	080034b1 	.word	0x080034b1
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 80034b0:	4b6b      	ldr	r3, [pc, #428]	; (8003660 <W25qxx_Init+0x248>)
 80034b2:	220a      	movs	r2, #10
 80034b4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 80034b6:	4b6a      	ldr	r3, [pc, #424]	; (8003660 <W25qxx_Init+0x248>)
 80034b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034bc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 80034be:	486c      	ldr	r0, [pc, #432]	; (8003670 <W25qxx_Init+0x258>)
 80034c0:	f00f ff58 	bl	8013374 <puts>
#endif
		break;
 80034c4:	e064      	b.n	8003590 <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 80034c6:	4b66      	ldr	r3, [pc, #408]	; (8003660 <W25qxx_Init+0x248>)
 80034c8:	2209      	movs	r2, #9
 80034ca:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 80034cc:	4b64      	ldr	r3, [pc, #400]	; (8003660 <W25qxx_Init+0x248>)
 80034ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034d2:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 80034d4:	4867      	ldr	r0, [pc, #412]	; (8003674 <W25qxx_Init+0x25c>)
 80034d6:	f00f ff4d 	bl	8013374 <puts>
#endif
		break;
 80034da:	e059      	b.n	8003590 <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 80034dc:	4b60      	ldr	r3, [pc, #384]	; (8003660 <W25qxx_Init+0x248>)
 80034de:	2208      	movs	r2, #8
 80034e0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 80034e2:	4b5f      	ldr	r3, [pc, #380]	; (8003660 <W25qxx_Init+0x248>)
 80034e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034e8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 80034ea:	4863      	ldr	r0, [pc, #396]	; (8003678 <W25qxx_Init+0x260>)
 80034ec:	f00f ff42 	bl	8013374 <puts>
#endif
		break;
 80034f0:	e04e      	b.n	8003590 <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 80034f2:	4b5b      	ldr	r3, [pc, #364]	; (8003660 <W25qxx_Init+0x248>)
 80034f4:	2207      	movs	r2, #7
 80034f6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 80034f8:	4b59      	ldr	r3, [pc, #356]	; (8003660 <W25qxx_Init+0x248>)
 80034fa:	2280      	movs	r2, #128	; 0x80
 80034fc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 80034fe:	485f      	ldr	r0, [pc, #380]	; (800367c <W25qxx_Init+0x264>)
 8003500:	f00f ff38 	bl	8013374 <puts>
#endif
		break;
 8003504:	e044      	b.n	8003590 <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8003506:	4b56      	ldr	r3, [pc, #344]	; (8003660 <W25qxx_Init+0x248>)
 8003508:	2206      	movs	r2, #6
 800350a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 800350c:	4b54      	ldr	r3, [pc, #336]	; (8003660 <W25qxx_Init+0x248>)
 800350e:	2240      	movs	r2, #64	; 0x40
 8003510:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 8003512:	485b      	ldr	r0, [pc, #364]	; (8003680 <W25qxx_Init+0x268>)
 8003514:	f00f ff2e 	bl	8013374 <puts>
#endif
		break;
 8003518:	e03a      	b.n	8003590 <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 800351a:	4b51      	ldr	r3, [pc, #324]	; (8003660 <W25qxx_Init+0x248>)
 800351c:	2205      	movs	r2, #5
 800351e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8003520:	4b4f      	ldr	r3, [pc, #316]	; (8003660 <W25qxx_Init+0x248>)
 8003522:	2220      	movs	r2, #32
 8003524:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 8003526:	4857      	ldr	r0, [pc, #348]	; (8003684 <W25qxx_Init+0x26c>)
 8003528:	f00f ff24 	bl	8013374 <puts>
#endif
		break;
 800352c:	e030      	b.n	8003590 <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 800352e:	4b4c      	ldr	r3, [pc, #304]	; (8003660 <W25qxx_Init+0x248>)
 8003530:	2204      	movs	r2, #4
 8003532:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8003534:	4b4a      	ldr	r3, [pc, #296]	; (8003660 <W25qxx_Init+0x248>)
 8003536:	2210      	movs	r2, #16
 8003538:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 800353a:	4853      	ldr	r0, [pc, #332]	; (8003688 <W25qxx_Init+0x270>)
 800353c:	f00f ff1a 	bl	8013374 <puts>
#endif
		break;
 8003540:	e026      	b.n	8003590 <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8003542:	4b47      	ldr	r3, [pc, #284]	; (8003660 <W25qxx_Init+0x248>)
 8003544:	2203      	movs	r2, #3
 8003546:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8003548:	4b45      	ldr	r3, [pc, #276]	; (8003660 <W25qxx_Init+0x248>)
 800354a:	2208      	movs	r2, #8
 800354c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 800354e:	484f      	ldr	r0, [pc, #316]	; (800368c <W25qxx_Init+0x274>)
 8003550:	f00f ff10 	bl	8013374 <puts>
#endif
		break;
 8003554:	e01c      	b.n	8003590 <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8003556:	4b42      	ldr	r3, [pc, #264]	; (8003660 <W25qxx_Init+0x248>)
 8003558:	2202      	movs	r2, #2
 800355a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 800355c:	4b40      	ldr	r3, [pc, #256]	; (8003660 <W25qxx_Init+0x248>)
 800355e:	2204      	movs	r2, #4
 8003560:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 8003562:	484b      	ldr	r0, [pc, #300]	; (8003690 <W25qxx_Init+0x278>)
 8003564:	f00f ff06 	bl	8013374 <puts>
#endif
		break;
 8003568:	e012      	b.n	8003590 <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 800356a:	4b3d      	ldr	r3, [pc, #244]	; (8003660 <W25qxx_Init+0x248>)
 800356c:	2201      	movs	r2, #1
 800356e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8003570:	4b3b      	ldr	r3, [pc, #236]	; (8003660 <W25qxx_Init+0x248>)
 8003572:	2202      	movs	r2, #2
 8003574:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 8003576:	4847      	ldr	r0, [pc, #284]	; (8003694 <W25qxx_Init+0x27c>)
 8003578:	f00f fefc 	bl	8013374 <puts>
#endif
		break;
 800357c:	e008      	b.n	8003590 <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 800357e:	4846      	ldr	r0, [pc, #280]	; (8003698 <W25qxx_Init+0x280>)
 8003580:	f00f fef8 	bl	8013374 <puts>
#endif
		w25qxx.Lock = 0;
 8003584:	4b36      	ldr	r3, [pc, #216]	; (8003660 <W25qxx_Init+0x248>)
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 800358c:	2300      	movs	r3, #0
 800358e:	e063      	b.n	8003658 <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 8003590:	4b33      	ldr	r3, [pc, #204]	; (8003660 <W25qxx_Init+0x248>)
 8003592:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003596:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8003598:	4b31      	ldr	r3, [pc, #196]	; (8003660 <W25qxx_Init+0x248>)
 800359a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800359e:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 80035a0:	4b2f      	ldr	r3, [pc, #188]	; (8003660 <W25qxx_Init+0x248>)
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	4a2e      	ldr	r2, [pc, #184]	; (8003660 <W25qxx_Init+0x248>)
 80035a8:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 80035aa:	4b2d      	ldr	r3, [pc, #180]	; (8003660 <W25qxx_Init+0x248>)
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	4a2c      	ldr	r2, [pc, #176]	; (8003660 <W25qxx_Init+0x248>)
 80035b0:	6912      	ldr	r2, [r2, #16]
 80035b2:	fb02 f303 	mul.w	r3, r2, r3
 80035b6:	4a2a      	ldr	r2, [pc, #168]	; (8003660 <W25qxx_Init+0x248>)
 80035b8:	8952      	ldrh	r2, [r2, #10]
 80035ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80035be:	4a28      	ldr	r2, [pc, #160]	; (8003660 <W25qxx_Init+0x248>)
 80035c0:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80035c2:	4b27      	ldr	r3, [pc, #156]	; (8003660 <W25qxx_Init+0x248>)
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	4a25      	ldr	r2, [pc, #148]	; (8003660 <W25qxx_Init+0x248>)
 80035ca:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80035cc:	4b24      	ldr	r3, [pc, #144]	; (8003660 <W25qxx_Init+0x248>)
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	4a23      	ldr	r2, [pc, #140]	; (8003660 <W25qxx_Init+0x248>)
 80035d2:	6912      	ldr	r2, [r2, #16]
 80035d4:	fb02 f303 	mul.w	r3, r2, r3
 80035d8:	0a9b      	lsrs	r3, r3, #10
 80035da:	4a21      	ldr	r2, [pc, #132]	; (8003660 <W25qxx_Init+0x248>)
 80035dc:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80035de:	f7ff fe5f 	bl	80032a0 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80035e2:	2001      	movs	r0, #1
 80035e4:	f7ff fea8 	bl	8003338 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80035e8:	2002      	movs	r0, #2
 80035ea:	f7ff fea5 	bl	8003338 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80035ee:	2003      	movs	r0, #3
 80035f0:	f7ff fea2 	bl	8003338 <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 80035f4:	4b1a      	ldr	r3, [pc, #104]	; (8003660 <W25qxx_Init+0x248>)
 80035f6:	895b      	ldrh	r3, [r3, #10]
 80035f8:	4619      	mov	r1, r3
 80035fa:	4828      	ldr	r0, [pc, #160]	; (800369c <W25qxx_Init+0x284>)
 80035fc:	f00f fe34 	bl	8013268 <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 8003600:	4b17      	ldr	r3, [pc, #92]	; (8003660 <W25qxx_Init+0x248>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	4619      	mov	r1, r3
 8003606:	4826      	ldr	r0, [pc, #152]	; (80036a0 <W25qxx_Init+0x288>)
 8003608:	f00f fe2e 	bl	8013268 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 800360c:	4b14      	ldr	r3, [pc, #80]	; (8003660 <W25qxx_Init+0x248>)
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	4619      	mov	r1, r3
 8003612:	4824      	ldr	r0, [pc, #144]	; (80036a4 <W25qxx_Init+0x28c>)
 8003614:	f00f fe28 	bl	8013268 <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 8003618:	4b11      	ldr	r3, [pc, #68]	; (8003660 <W25qxx_Init+0x248>)
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	4619      	mov	r1, r3
 800361e:	4822      	ldr	r0, [pc, #136]	; (80036a8 <W25qxx_Init+0x290>)
 8003620:	f00f fe22 	bl	8013268 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 8003624:	4b0e      	ldr	r3, [pc, #56]	; (8003660 <W25qxx_Init+0x248>)
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	4619      	mov	r1, r3
 800362a:	4820      	ldr	r0, [pc, #128]	; (80036ac <W25qxx_Init+0x294>)
 800362c:	f00f fe1c 	bl	8013268 <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 8003630:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <W25qxx_Init+0x248>)
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	4619      	mov	r1, r3
 8003636:	481e      	ldr	r0, [pc, #120]	; (80036b0 <W25qxx_Init+0x298>)
 8003638:	f00f fe16 	bl	8013268 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 800363c:	4b08      	ldr	r3, [pc, #32]	; (8003660 <W25qxx_Init+0x248>)
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	4619      	mov	r1, r3
 8003642:	481c      	ldr	r0, [pc, #112]	; (80036b4 <W25qxx_Init+0x29c>)
 8003644:	f00f fe10 	bl	8013268 <iprintf>
	printf("w25qxx Init Done\r\n");
 8003648:	481b      	ldr	r0, [pc, #108]	; (80036b8 <W25qxx_Init+0x2a0>)
 800364a:	f00f fe93 	bl	8013374 <puts>
#endif
	w25qxx.Lock = 0;
 800364e:	4b04      	ldr	r3, [pc, #16]	; (8003660 <W25qxx_Init+0x248>)
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8003656:	2301      	movs	r3, #1
}
 8003658:	4618      	mov	r0, r3
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20005e9c 	.word	0x20005e9c
 8003664:	40020c00 	.word	0x40020c00
 8003668:	080180c4 	.word	0x080180c4
 800366c:	080180dc 	.word	0x080180dc
 8003670:	080180f0 	.word	0x080180f0
 8003674:	08018108 	.word	0x08018108
 8003678:	08018120 	.word	0x08018120
 800367c:	08018138 	.word	0x08018138
 8003680:	08018150 	.word	0x08018150
 8003684:	08018168 	.word	0x08018168
 8003688:	08018180 	.word	0x08018180
 800368c:	08018198 	.word	0x08018198
 8003690:	080181b0 	.word	0x080181b0
 8003694:	080181c8 	.word	0x080181c8
 8003698:	080181e0 	.word	0x080181e0
 800369c:	080181f4 	.word	0x080181f4
 80036a0:	08018214 	.word	0x08018214
 80036a4:	0801822c 	.word	0x0801822c
 80036a8:	0801824c 	.word	0x0801824c
 80036ac:	08018268 	.word	0x08018268
 80036b0:	08018288 	.word	0x08018288
 80036b4:	080182a4 	.word	0x080182a4
 80036b8:	080182c4 	.word	0x080182c4

080036bc <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 80036c4:	e002      	b.n	80036cc <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 80036c6:	2001      	movs	r0, #1
 80036c8:	f00b fc41 	bl	800ef4e <osDelay>
	while (w25qxx.Lock == 1)
 80036cc:	4b2d      	ldr	r3, [pc, #180]	; (8003784 <W25qxx_EraseSector+0xc8>)
 80036ce:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d0f7      	beq.n	80036c6 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 80036d6:	4b2b      	ldr	r3, [pc, #172]	; (8003784 <W25qxx_EraseSector+0xc8>)
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 80036de:	f005 fe15 	bl	800930c <HAL_GetTick>
 80036e2:	60f8      	str	r0, [r7, #12]
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
 80036e4:	6879      	ldr	r1, [r7, #4]
 80036e6:	4828      	ldr	r0, [pc, #160]	; (8003788 <W25qxx_EraseSector+0xcc>)
 80036e8:	f00f fdbe 	bl	8013268 <iprintf>
#endif
	W25qxx_WaitForWriteEnd();
 80036ec:	f7ff fe6a 	bl	80033c4 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 80036f0:	4b24      	ldr	r3, [pc, #144]	; (8003784 <W25qxx_EraseSector+0xc8>)
 80036f2:	691a      	ldr	r2, [r3, #16]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	fb02 f303 	mul.w	r3, r2, r3
 80036fa:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 80036fc:	f7ff fe06 	bl	800330c <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003700:	2200      	movs	r2, #0
 8003702:	2140      	movs	r1, #64	; 0x40
 8003704:	4821      	ldr	r0, [pc, #132]	; (800378c <W25qxx_EraseSector+0xd0>)
 8003706:	f006 fb7b 	bl	8009e00 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800370a:	4b1e      	ldr	r3, [pc, #120]	; (8003784 <W25qxx_EraseSector+0xc8>)
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	2b08      	cmp	r3, #8
 8003710:	d909      	bls.n	8003726 <W25qxx_EraseSector+0x6a>
	{
		W25qxx_Spi(0x21);
 8003712:	2021      	movs	r0, #33	; 0x21
 8003714:	f7ff fd78 	bl	8003208 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	0e1b      	lsrs	r3, r3, #24
 800371c:	b2db      	uxtb	r3, r3
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff fd72 	bl	8003208 <W25qxx_Spi>
 8003724:	e002      	b.n	800372c <W25qxx_EraseSector+0x70>
	}
	else
	{
		W25qxx_Spi(0x20);
 8003726:	2020      	movs	r0, #32
 8003728:	f7ff fd6e 	bl	8003208 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	0c1b      	lsrs	r3, r3, #16
 8003730:	b2db      	uxtb	r3, r3
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff fd68 	bl	8003208 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	0a1b      	lsrs	r3, r3, #8
 800373c:	b2db      	uxtb	r3, r3
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff fd62 	bl	8003208 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	b2db      	uxtb	r3, r3
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff fd5d 	bl	8003208 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800374e:	2201      	movs	r2, #1
 8003750:	2140      	movs	r1, #64	; 0x40
 8003752:	480e      	ldr	r0, [pc, #56]	; (800378c <W25qxx_EraseSector+0xd0>)
 8003754:	f006 fb54 	bl	8009e00 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8003758:	f7ff fe34 	bl	80033c4 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
 800375c:	f005 fdd6 	bl	800930c <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	4619      	mov	r1, r3
 8003768:	4809      	ldr	r0, [pc, #36]	; (8003790 <W25qxx_EraseSector+0xd4>)
 800376a:	f00f fd7d 	bl	8013268 <iprintf>
#endif
	W25qxx_Delay(1);
 800376e:	2001      	movs	r0, #1
 8003770:	f00b fbed 	bl	800ef4e <osDelay>
	w25qxx.Lock = 0;
 8003774:	4b03      	ldr	r3, [pc, #12]	; (8003784 <W25qxx_EraseSector+0xc8>)
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800377c:	bf00      	nop
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	20005e9c 	.word	0x20005e9c
 8003788:	0801831c 	.word	0x0801831c
 800378c:	40020c00 	.word	0x40020c00
 8003790:	08018340 	.word	0x08018340

08003794 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 800379c:	4b07      	ldr	r3, [pc, #28]	; (80037bc <W25qxx_SectorToPage+0x28>)
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	fb02 f303 	mul.w	r3, r2, r3
 80037a6:	4a05      	ldr	r2, [pc, #20]	; (80037bc <W25qxx_SectorToPage+0x28>)
 80037a8:	8952      	ldrh	r2, [r2, #10]
 80037aa:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	20005e9c 	.word	0x20005e9c

080037c0 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80037ce:	e002      	b.n	80037d6 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 80037d0:	2001      	movs	r0, #1
 80037d2:	f00b fbbc 	bl	800ef4e <osDelay>
	while (w25qxx.Lock == 1)
 80037d6:	4b57      	ldr	r3, [pc, #348]	; (8003934 <W25qxx_WritePage+0x174>)
 80037d8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d0f7      	beq.n	80037d0 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 80037e0:	4b54      	ldr	r3, [pc, #336]	; (8003934 <W25qxx_WritePage+0x174>)
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4413      	add	r3, r2
 80037ee:	4a51      	ldr	r2, [pc, #324]	; (8003934 <W25qxx_WritePage+0x174>)
 80037f0:	8952      	ldrh	r2, [r2, #10]
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d802      	bhi.n	80037fc <W25qxx_WritePage+0x3c>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d105      	bne.n	8003808 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80037fc:	4b4d      	ldr	r3, [pc, #308]	; (8003934 <W25qxx_WritePage+0x174>)
 80037fe:	895b      	ldrh	r3, [r3, #10]
 8003800:	461a      	mov	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	4413      	add	r3, r2
 800380e:	4a49      	ldr	r2, [pc, #292]	; (8003934 <W25qxx_WritePage+0x174>)
 8003810:	8952      	ldrh	r2, [r2, #10]
 8003812:	4293      	cmp	r3, r2
 8003814:	d905      	bls.n	8003822 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003816:	4b47      	ldr	r3, [pc, #284]	; (8003934 <W25qxx_WritePage+0x174>)
 8003818:	895b      	ldrh	r3, [r3, #10]
 800381a:	461a      	mov	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	68b9      	ldr	r1, [r7, #8]
 8003828:	4843      	ldr	r0, [pc, #268]	; (8003938 <W25qxx_WritePage+0x178>)
 800382a:	f00f fd1d 	bl	8013268 <iprintf>
	W25qxx_Delay(100);
 800382e:	2064      	movs	r0, #100	; 0x64
 8003830:	f00b fb8d 	bl	800ef4e <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8003834:	f005 fd6a 	bl	800930c <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 800383a:	f7ff fdc3 	bl	80033c4 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 800383e:	f7ff fd65 	bl	800330c <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003842:	2200      	movs	r2, #0
 8003844:	2140      	movs	r1, #64	; 0x40
 8003846:	483d      	ldr	r0, [pc, #244]	; (800393c <W25qxx_WritePage+0x17c>)
 8003848:	f006 fada 	bl	8009e00 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 800384c:	4b39      	ldr	r3, [pc, #228]	; (8003934 <W25qxx_WritePage+0x174>)
 800384e:	895b      	ldrh	r3, [r3, #10]
 8003850:	461a      	mov	r2, r3
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	fb03 f302 	mul.w	r3, r3, r2
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	4413      	add	r3, r2
 800385c:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 800385e:	4b35      	ldr	r3, [pc, #212]	; (8003934 <W25qxx_WritePage+0x174>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	2b08      	cmp	r3, #8
 8003864:	d909      	bls.n	800387a <W25qxx_WritePage+0xba>
	{
		W25qxx_Spi(0x12);
 8003866:	2012      	movs	r0, #18
 8003868:	f7ff fcce 	bl	8003208 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	0e1b      	lsrs	r3, r3, #24
 8003870:	b2db      	uxtb	r3, r3
 8003872:	4618      	mov	r0, r3
 8003874:	f7ff fcc8 	bl	8003208 <W25qxx_Spi>
 8003878:	e002      	b.n	8003880 <W25qxx_WritePage+0xc0>
	}
	else
	{
		W25qxx_Spi(0x02);
 800387a:	2002      	movs	r0, #2
 800387c:	f7ff fcc4 	bl	8003208 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	0c1b      	lsrs	r3, r3, #16
 8003884:	b2db      	uxtb	r3, r3
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff fcbe 	bl	8003208 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	0a1b      	lsrs	r3, r3, #8
 8003890:	b2db      	uxtb	r3, r3
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff fcb8 	bl	8003208 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	b2db      	uxtb	r3, r3
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff fcb3 	bl	8003208 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	2364      	movs	r3, #100	; 0x64
 80038a8:	68f9      	ldr	r1, [r7, #12]
 80038aa:	4825      	ldr	r0, [pc, #148]	; (8003940 <W25qxx_WritePage+0x180>)
 80038ac:	f008 ffd5 	bl	800c85a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80038b0:	2201      	movs	r2, #1
 80038b2:	2140      	movs	r1, #64	; 0x40
 80038b4:	4821      	ldr	r0, [pc, #132]	; (800393c <W25qxx_WritePage+0x17c>)
 80038b6:	f006 faa3 	bl	8009e00 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80038ba:	f7ff fd83 	bl	80033c4 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 80038be:	f005 fd25 	bl	800930c <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 80038ca:	2300      	movs	r3, #0
 80038cc:	617b      	str	r3, [r7, #20]
 80038ce:	e018      	b.n	8003902 <W25qxx_WritePage+0x142>
	{
		if ((i % 8 == 0) && (i > 2))
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d108      	bne.n	80038ec <W25qxx_WritePage+0x12c>
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d905      	bls.n	80038ec <W25qxx_WritePage+0x12c>
		{
			printf("\r\n");
 80038e0:	4818      	ldr	r0, [pc, #96]	; (8003944 <W25qxx_WritePage+0x184>)
 80038e2:	f00f fd47 	bl	8013374 <puts>
			W25qxx_Delay(10);
 80038e6:	200a      	movs	r0, #10
 80038e8:	f00b fb31 	bl	800ef4e <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	4413      	add	r3, r2
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	4619      	mov	r1, r3
 80038f6:	4814      	ldr	r0, [pc, #80]	; (8003948 <W25qxx_WritePage+0x188>)
 80038f8:	f00f fcb6 	bl	8013268 <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	3301      	adds	r3, #1
 8003900:	617b      	str	r3, [r7, #20]
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	429a      	cmp	r2, r3
 8003908:	d3e2      	bcc.n	80038d0 <W25qxx_WritePage+0x110>
	}
	printf("\r\n");
 800390a:	480e      	ldr	r0, [pc, #56]	; (8003944 <W25qxx_WritePage+0x184>)
 800390c:	f00f fd32 	bl	8013374 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 8003910:	6939      	ldr	r1, [r7, #16]
 8003912:	480e      	ldr	r0, [pc, #56]	; (800394c <W25qxx_WritePage+0x18c>)
 8003914:	f00f fca8 	bl	8013268 <iprintf>
	W25qxx_Delay(100);
 8003918:	2064      	movs	r0, #100	; 0x64
 800391a:	f00b fb18 	bl	800ef4e <osDelay>
#endif
	W25qxx_Delay(1);
 800391e:	2001      	movs	r0, #1
 8003920:	f00b fb15 	bl	800ef4e <osDelay>
	w25qxx.Lock = 0;
 8003924:	4b03      	ldr	r3, [pc, #12]	; (8003934 <W25qxx_WritePage+0x174>)
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800392c:	bf00      	nop
 800392e:	3718      	adds	r7, #24
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	20005e9c 	.word	0x20005e9c
 8003938:	080185a4 	.word	0x080185a4
 800393c:	40020c00 	.word	0x40020c00
 8003940:	20005bb4 	.word	0x20005bb4
 8003944:	080185e0 	.word	0x080185e0
 8003948:	080185e4 	.word	0x080185e4
 800394c:	080185ec 	.word	0x080185ec

08003950 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b088      	sub	sp, #32
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
 800395c:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 800395e:	4b36      	ldr	r3, [pc, #216]	; (8003a38 <W25qxx_WriteSector+0xe8>)
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d802      	bhi.n	800396e <W25qxx_WriteSector+0x1e>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d102      	bne.n	8003974 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 800396e:	4b32      	ldr	r3, [pc, #200]	; (8003a38 <W25qxx_WriteSector+0xe8>)
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	4830      	ldr	r0, [pc, #192]	; (8003a3c <W25qxx_WriteSector+0xec>)
 800397c:	f00f fc74 	bl	8013268 <iprintf>
	W25qxx_Delay(100);
 8003980:	2064      	movs	r0, #100	; 0x64
 8003982:	f00b fae4 	bl	800ef4e <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8003986:	4b2c      	ldr	r3, [pc, #176]	; (8003a38 <W25qxx_WriteSector+0xe8>)
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	429a      	cmp	r2, r3
 800398e:	d306      	bcc.n	800399e <W25qxx_WriteSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
 8003990:	482b      	ldr	r0, [pc, #172]	; (8003a40 <W25qxx_WriteSector+0xf0>)
 8003992:	f00f fcef 	bl	8013374 <puts>
		W25qxx_Delay(100);
 8003996:	2064      	movs	r0, #100	; 0x64
 8003998:	f00b fad9 	bl	800ef4e <osDelay>
#endif
		return;
 800399c:	e048      	b.n	8003a30 <W25qxx_WriteSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	441a      	add	r2, r3
 80039a4:	4b24      	ldr	r3, [pc, #144]	; (8003a38 <W25qxx_WriteSector+0xe8>)
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d905      	bls.n	80039b8 <W25qxx_WriteSector+0x68>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 80039ac:	4b22      	ldr	r3, [pc, #136]	; (8003a38 <W25qxx_WriteSector+0xe8>)
 80039ae:	691a      	ldr	r2, [r3, #16]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	61bb      	str	r3, [r7, #24]
 80039b6:	e001      	b.n	80039bc <W25qxx_WriteSector+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80039bc:	68b8      	ldr	r0, [r7, #8]
 80039be:	f7ff fee9 	bl	8003794 <W25qxx_SectorToPage>
 80039c2:	4602      	mov	r2, r0
 80039c4:	4b1c      	ldr	r3, [pc, #112]	; (8003a38 <W25qxx_WriteSector+0xe8>)
 80039c6:	895b      	ldrh	r3, [r3, #10]
 80039c8:	4619      	mov	r1, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80039d0:	4413      	add	r3, r2
 80039d2:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80039d4:	4b18      	ldr	r3, [pc, #96]	; (8003a38 <W25qxx_WriteSector+0xe8>)
 80039d6:	895b      	ldrh	r3, [r3, #10]
 80039d8:	461a      	mov	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80039e0:	fb02 f201 	mul.w	r2, r2, r1
 80039e4:	1a9b      	subs	r3, r3, r2
 80039e6:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	69f9      	ldr	r1, [r7, #28]
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f7ff fee6 	bl	80037c0 <W25qxx_WritePage>
		StartPage++;
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	3301      	adds	r3, #1
 80039f8:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 80039fa:	4b0f      	ldr	r3, [pc, #60]	; (8003a38 <W25qxx_WriteSector+0xe8>)
 80039fc:	895b      	ldrh	r3, [r3, #10]
 80039fe:	461a      	mov	r2, r3
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	1a9a      	subs	r2, r3, r2
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	4413      	add	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8003a0a:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <W25qxx_WriteSector+0xe8>)
 8003a0c:	895b      	ldrh	r3, [r3, #10]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	4413      	add	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	dce1      	bgt.n	80039e8 <W25qxx_WriteSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
 8003a24:	4807      	ldr	r0, [pc, #28]	; (8003a44 <W25qxx_WriteSector+0xf4>)
 8003a26:	f00f fca5 	bl	8013374 <puts>
	W25qxx_Delay(100);
 8003a2a:	2064      	movs	r0, #100	; 0x64
 8003a2c:	f00b fa8f 	bl	800ef4e <osDelay>
#endif
}
 8003a30:	3720      	adds	r7, #32
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20005e9c 	.word	0x20005e9c
 8003a3c:	08018610 	.word	0x08018610
 8003a40:	08018650 	.word	0x08018650
 8003a44:	08018670 	.word	0x08018670

08003a48 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
 8003a54:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8003a56:	e002      	b.n	8003a5e <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8003a58:	2001      	movs	r0, #1
 8003a5a:	f00b fa78 	bl	800ef4e <osDelay>
	while (w25qxx.Lock == 1)
 8003a5e:	4b54      	ldr	r3, [pc, #336]	; (8003bb0 <W25qxx_ReadPage+0x168>)
 8003a60:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d0f7      	beq.n	8003a58 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8003a68:	4b51      	ldr	r3, [pc, #324]	; (8003bb0 <W25qxx_ReadPage+0x168>)
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8003a70:	4b4f      	ldr	r3, [pc, #316]	; (8003bb0 <W25qxx_ReadPage+0x168>)
 8003a72:	895b      	ldrh	r3, [r3, #10]
 8003a74:	461a      	mov	r2, r3
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d802      	bhi.n	8003a82 <W25qxx_ReadPage+0x3a>
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d102      	bne.n	8003a88 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8003a82:	4b4b      	ldr	r3, [pc, #300]	; (8003bb0 <W25qxx_ReadPage+0x168>)
 8003a84:	895b      	ldrh	r3, [r3, #10]
 8003a86:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	4a48      	ldr	r2, [pc, #288]	; (8003bb0 <W25qxx_ReadPage+0x168>)
 8003a90:	8952      	ldrh	r2, [r2, #10]
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d905      	bls.n	8003aa2 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003a96:	4b46      	ldr	r3, [pc, #280]	; (8003bb0 <W25qxx_ReadPage+0x168>)
 8003a98:	895b      	ldrh	r3, [r3, #10]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	68b9      	ldr	r1, [r7, #8]
 8003aa8:	4842      	ldr	r0, [pc, #264]	; (8003bb4 <W25qxx_ReadPage+0x16c>)
 8003aaa:	f00f fbdd 	bl	8013268 <iprintf>
	W25qxx_Delay(100);
 8003aae:	2064      	movs	r0, #100	; 0x64
 8003ab0:	f00b fa4d 	bl	800ef4e <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8003ab4:	f005 fc2a 	bl	800930c <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8003aba:	4b3d      	ldr	r3, [pc, #244]	; (8003bb0 <W25qxx_ReadPage+0x168>)
 8003abc:	895b      	ldrh	r3, [r3, #10]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	fb03 f302 	mul.w	r3, r3, r2
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	4413      	add	r3, r2
 8003aca:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003acc:	2200      	movs	r2, #0
 8003ace:	2140      	movs	r1, #64	; 0x40
 8003ad0:	4839      	ldr	r0, [pc, #228]	; (8003bb8 <W25qxx_ReadPage+0x170>)
 8003ad2:	f006 f995 	bl	8009e00 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8003ad6:	4b36      	ldr	r3, [pc, #216]	; (8003bb0 <W25qxx_ReadPage+0x168>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	2b08      	cmp	r3, #8
 8003adc:	d909      	bls.n	8003af2 <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 8003ade:	200c      	movs	r0, #12
 8003ae0:	f7ff fb92 	bl	8003208 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	0e1b      	lsrs	r3, r3, #24
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff fb8c 	bl	8003208 <W25qxx_Spi>
 8003af0:	e002      	b.n	8003af8 <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8003af2:	200b      	movs	r0, #11
 8003af4:	f7ff fb88 	bl	8003208 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	0c1b      	lsrs	r3, r3, #16
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7ff fb82 	bl	8003208 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	0a1b      	lsrs	r3, r3, #8
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7ff fb7c 	bl	8003208 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff fb77 	bl	8003208 <W25qxx_Spi>
	W25qxx_Spi(0);
 8003b1a:	2000      	movs	r0, #0
 8003b1c:	f7ff fb74 	bl	8003208 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	2364      	movs	r3, #100	; 0x64
 8003b26:	68f9      	ldr	r1, [r7, #12]
 8003b28:	4824      	ldr	r0, [pc, #144]	; (8003bbc <W25qxx_ReadPage+0x174>)
 8003b2a:	f008 ffd2 	bl	800cad2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003b2e:	2201      	movs	r2, #1
 8003b30:	2140      	movs	r1, #64	; 0x40
 8003b32:	4821      	ldr	r0, [pc, #132]	; (8003bb8 <W25qxx_ReadPage+0x170>)
 8003b34:	f006 f964 	bl	8009e00 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8003b38:	f005 fbe8 	bl	800930c <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8003b44:	2300      	movs	r3, #0
 8003b46:	617b      	str	r3, [r7, #20]
 8003b48:	e018      	b.n	8003b7c <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d108      	bne.n	8003b66 <W25qxx_ReadPage+0x11e>
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d905      	bls.n	8003b66 <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 8003b5a:	4819      	ldr	r0, [pc, #100]	; (8003bc0 <W25qxx_ReadPage+0x178>)
 8003b5c:	f00f fc0a 	bl	8013374 <puts>
			W25qxx_Delay(10);
 8003b60:	200a      	movs	r0, #10
 8003b62:	f00b f9f4 	bl	800ef4e <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	4619      	mov	r1, r3
 8003b70:	4814      	ldr	r0, [pc, #80]	; (8003bc4 <W25qxx_ReadPage+0x17c>)
 8003b72:	f00f fb79 	bl	8013268 <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	617b      	str	r3, [r7, #20]
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d3e2      	bcc.n	8003b4a <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 8003b84:	480e      	ldr	r0, [pc, #56]	; (8003bc0 <W25qxx_ReadPage+0x178>)
 8003b86:	f00f fbf5 	bl	8013374 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 8003b8a:	6939      	ldr	r1, [r7, #16]
 8003b8c:	480e      	ldr	r0, [pc, #56]	; (8003bc8 <W25qxx_ReadPage+0x180>)
 8003b8e:	f00f fb6b 	bl	8013268 <iprintf>
	W25qxx_Delay(100);
 8003b92:	2064      	movs	r0, #100	; 0x64
 8003b94:	f00b f9db 	bl	800ef4e <osDelay>
#endif
	W25qxx_Delay(1);
 8003b98:	2001      	movs	r0, #1
 8003b9a:	f00b f9d8 	bl	800ef4e <osDelay>
	w25qxx.Lock = 0;
 8003b9e:	4b04      	ldr	r3, [pc, #16]	; (8003bb0 <W25qxx_ReadPage+0x168>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003ba6:	bf00      	nop
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	20005e9c 	.word	0x20005e9c
 8003bb4:	080187bc 	.word	0x080187bc
 8003bb8:	40020c00 	.word	0x40020c00
 8003bbc:	20005bb4 	.word	0x20005bb4
 8003bc0:	080185e0 	.word	0x080185e0
 8003bc4:	080185e4 	.word	0x080185e4
 8003bc8:	080187f8 	.word	0x080187f8

08003bcc <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8003bda:	4b36      	ldr	r3, [pc, #216]	; (8003cb4 <W25qxx_ReadSector+0xe8>)
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d802      	bhi.n	8003bea <W25qxx_ReadSector+0x1e>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d102      	bne.n	8003bf0 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8003bea:	4b32      	ldr	r3, [pc, #200]	; (8003cb4 <W25qxx_ReadSector+0xe8>)
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	68b9      	ldr	r1, [r7, #8]
 8003bf6:	4830      	ldr	r0, [pc, #192]	; (8003cb8 <W25qxx_ReadSector+0xec>)
 8003bf8:	f00f fb36 	bl	8013268 <iprintf>
	W25qxx_Delay(100);
 8003bfc:	2064      	movs	r0, #100	; 0x64
 8003bfe:	f00b f9a6 	bl	800ef4e <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8003c02:	4b2c      	ldr	r3, [pc, #176]	; (8003cb4 <W25qxx_ReadSector+0xe8>)
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d306      	bcc.n	8003c1a <W25qxx_ReadSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
 8003c0c:	482b      	ldr	r0, [pc, #172]	; (8003cbc <W25qxx_ReadSector+0xf0>)
 8003c0e:	f00f fbb1 	bl	8013374 <puts>
		W25qxx_Delay(100);
 8003c12:	2064      	movs	r0, #100	; 0x64
 8003c14:	f00b f99b 	bl	800ef4e <osDelay>
#endif
		return;
 8003c18:	e048      	b.n	8003cac <W25qxx_ReadSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	441a      	add	r2, r3
 8003c20:	4b24      	ldr	r3, [pc, #144]	; (8003cb4 <W25qxx_ReadSector+0xe8>)
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d905      	bls.n	8003c34 <W25qxx_ReadSector+0x68>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8003c28:	4b22      	ldr	r3, [pc, #136]	; (8003cb4 <W25qxx_ReadSector+0xe8>)
 8003c2a:	691a      	ldr	r2, [r3, #16]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	61bb      	str	r3, [r7, #24]
 8003c32:	e001      	b.n	8003c38 <W25qxx_ReadSector+0x6c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8003c38:	68b8      	ldr	r0, [r7, #8]
 8003c3a:	f7ff fdab 	bl	8003794 <W25qxx_SectorToPage>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	4b1c      	ldr	r3, [pc, #112]	; (8003cb4 <W25qxx_ReadSector+0xe8>)
 8003c42:	895b      	ldrh	r3, [r3, #10]
 8003c44:	4619      	mov	r1, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c4c:	4413      	add	r3, r2
 8003c4e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8003c50:	4b18      	ldr	r3, [pc, #96]	; (8003cb4 <W25qxx_ReadSector+0xe8>)
 8003c52:	895b      	ldrh	r3, [r3, #10]
 8003c54:	461a      	mov	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c5c:	fb02 f201 	mul.w	r2, r2, r1
 8003c60:	1a9b      	subs	r3, r3, r2
 8003c62:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	69f9      	ldr	r1, [r7, #28]
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f7ff feec 	bl	8003a48 <W25qxx_ReadPage>
		StartPage++;
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	3301      	adds	r3, #1
 8003c74:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8003c76:	4b0f      	ldr	r3, [pc, #60]	; (8003cb4 <W25qxx_ReadSector+0xe8>)
 8003c78:	895b      	ldrh	r3, [r3, #10]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	1a9a      	subs	r2, r3, r2
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	4413      	add	r3, r2
 8003c84:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8003c86:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <W25qxx_ReadSector+0xe8>)
 8003c88:	895b      	ldrh	r3, [r3, #10]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	4413      	add	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	dce1      	bgt.n	8003c64 <W25qxx_ReadSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
 8003ca0:	4807      	ldr	r0, [pc, #28]	; (8003cc0 <W25qxx_ReadSector+0xf4>)
 8003ca2:	f00f fb67 	bl	8013374 <puts>
	W25qxx_Delay(100);
 8003ca6:	2064      	movs	r0, #100	; 0x64
 8003ca8:	f00b f951 	bl	800ef4e <osDelay>
#endif
}
 8003cac:	3720      	adds	r7, #32
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20005e9c 	.word	0x20005e9c
 8003cb8:	0801881c 	.word	0x0801881c
 8003cbc:	0801885c 	.word	0x0801885c
 8003cc0:	0801887c 	.word	0x0801887c

08003cc4 <MRT_formatPropulsion>:
void MRT_getValveStatus(void){
	valve_status = HAL_GPIO_ReadPin(IN_Prop_ActuatedVent_Feedback_GPIO_Port,IN_Prop_ActuatedVent_Feedback_Pin);
}

// formats propulsion telemetry string using sprintf
void MRT_formatPropulsion(void) {
 8003cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cc6:	b089      	sub	sp, #36	; 0x24
 8003cc8:	af06      	add	r7, sp, #24
	memset(msg_buffer_pr, 0, 50);
 8003cca:	2232      	movs	r2, #50	; 0x32
 8003ccc:	2100      	movs	r1, #0
 8003cce:	4816      	ldr	r0, [pc, #88]	; (8003d28 <MRT_formatPropulsion+0x64>)
 8003cd0:	f00e f920 	bl	8011f14 <memset>
	//tank_pressure = convert_prop_tank_pressure(); // convert buffered readings to voltage TODO??
	sprintf(msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 8003cd4:	4b15      	ldr	r3, [pc, #84]	; (8003d2c <MRT_formatPropulsion+0x68>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7fc fc55 	bl	8000588 <__aeabi_f2d>
 8003cde:	4604      	mov	r4, r0
 8003ce0:	460d      	mov	r5, r1
 8003ce2:	4b13      	ldr	r3, [pc, #76]	; (8003d30 <MRT_formatPropulsion+0x6c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7fc fc4e 	bl	8000588 <__aeabi_f2d>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4910      	ldr	r1, [pc, #64]	; (8003d34 <MRT_formatPropulsion+0x70>)
 8003cf2:	7809      	ldrb	r1, [r1, #0]
 8003cf4:	4608      	mov	r0, r1
 8003cf6:	4910      	ldr	r1, [pc, #64]	; (8003d38 <MRT_formatPropulsion+0x74>)
 8003cf8:	7809      	ldrb	r1, [r1, #0]
 8003cfa:	460e      	mov	r6, r1
 8003cfc:	490f      	ldr	r1, [pc, #60]	; (8003d3c <MRT_formatPropulsion+0x78>)
 8003cfe:	7809      	ldrb	r1, [r1, #0]
 8003d00:	6079      	str	r1, [r7, #4]
 8003d02:	490f      	ldr	r1, [pc, #60]	; (8003d40 <MRT_formatPropulsion+0x7c>)
 8003d04:	6809      	ldr	r1, [r1, #0]
 8003d06:	9105      	str	r1, [sp, #20]
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	9104      	str	r1, [sp, #16]
 8003d0c:	9603      	str	r6, [sp, #12]
 8003d0e:	9002      	str	r0, [sp, #8]
 8003d10:	e9cd 2300 	strd	r2, r3, [sp]
 8003d14:	4622      	mov	r2, r4
 8003d16:	462b      	mov	r3, r5
 8003d18:	490a      	ldr	r1, [pc, #40]	; (8003d44 <MRT_formatPropulsion+0x80>)
 8003d1a:	4803      	ldr	r0, [pc, #12]	; (8003d28 <MRT_formatPropulsion+0x64>)
 8003d1c:	f00f fbf6 	bl	801350c <siprintf>
			transducer_voltage, thermocouple_temperature, valve_status,
			prev_min, prev_sec, prev_subsec);
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d28:	20005ec4 	.word	0x20005ec4
 8003d2c:	20005efc 	.word	0x20005efc
 8003d30:	20005ef8 	.word	0x20005ef8
 8003d34:	20005ef6 	.word	0x20005ef6
 8003d38:	20000313 	.word	0x20000313
 8003d3c:	20000314 	.word	0x20000314
 8003d40:	20000318 	.word	0x20000318
 8003d44:	08018910 	.word	0x08018910

08003d48 <MRT_LSM6DSR_Constructor>:


//**************************************************//
/*****LSM6DSR STATIC FUNCTIONS*****/

void MRT_LSM6DSR_Constructor(){
 8003d48:	b598      	push	{r3, r4, r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
	if (lsm6dsr==NULL){
 8003d4c:	4b08      	ldr	r3, [pc, #32]	; (8003d70 <MRT_LSM6DSR_Constructor+0x28>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10b      	bne.n	8003d6c <MRT_LSM6DSR_Constructor+0x24>
		lsm6dsr = new LSM6DSR(&LSM6DSR_I2C, (uint8_t) MRT_LSM6DSR_ADDRESS);
 8003d54:	203c      	movs	r0, #60	; 0x3c
 8003d56:	f00d fe19 	bl	801198c <_Znwj>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	461c      	mov	r4, r3
 8003d5e:	226a      	movs	r2, #106	; 0x6a
 8003d60:	4904      	ldr	r1, [pc, #16]	; (8003d74 <MRT_LSM6DSR_Constructor+0x2c>)
 8003d62:	4620      	mov	r0, r4
 8003d64:	f000 f990 	bl	8004088 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh>
 8003d68:	4b01      	ldr	r3, [pc, #4]	; (8003d70 <MRT_LSM6DSR_Constructor+0x28>)
 8003d6a:	601c      	str	r4, [r3, #0]
	}
}
 8003d6c:	bf00      	nop
 8003d6e:	bd98      	pop	{r3, r4, r7, pc}
 8003d70:	20000320 	.word	0x20000320
 8003d74:	20005a94 	.word	0x20005a94

08003d78 <MRT_LSM6DSR_Destructor>:

void MRT_LSM6DSR_Destructor(){
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
	if (lsm6dsr!=NULL){
 8003d7c:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <MRT_LSM6DSR_Destructor+0x1c>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <MRT_LSM6DSR_Destructor+0x12>
		lsm6dsr = NULL;
 8003d84:	4b03      	ldr	r3, [pc, #12]	; (8003d94 <MRT_LSM6DSR_Destructor+0x1c>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	601a      	str	r2, [r3, #0]
	}
}
 8003d8a:	bf00      	nop
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	20000320 	.word	0x20000320

08003d98 <MRT_LSM6DSR_getAcceleration>:

void MRT_LSM6DSR_getAcceleration(void){
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
	float* temp_array = lsm6dsr->getAcceleration();
 8003d9e:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <MRT_LSM6DSR_getAcceleration+0x34>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 fa1c 	bl	80041e0 <_ZN7LSM6DSR15getAccelerationEv>
 8003da8:	6078      	str	r0, [r7, #4]
	hlsm6dsr.acceleration_mg[0] = temp_array[0];
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a08      	ldr	r2, [pc, #32]	; (8003dd0 <MRT_LSM6DSR_getAcceleration+0x38>)
 8003db0:	6013      	str	r3, [r2, #0]
	hlsm6dsr.acceleration_mg[1] = temp_array[1];
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	4a06      	ldr	r2, [pc, #24]	; (8003dd0 <MRT_LSM6DSR_getAcceleration+0x38>)
 8003db8:	6053      	str	r3, [r2, #4]
	hlsm6dsr.acceleration_mg[2] = temp_array[2];
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	4a04      	ldr	r2, [pc, #16]	; (8003dd0 <MRT_LSM6DSR_getAcceleration+0x38>)
 8003dc0:	6093      	str	r3, [r2, #8]
}
 8003dc2:	bf00      	nop
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	20000320 	.word	0x20000320
 8003dd0:	20000328 	.word	0x20000328

08003dd4 <MRT_LSM6DSR_getAngularRate>:
void MRT_LSM6DSR_getAngularRate(void){
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
	float* temp_array = lsm6dsr->getAngularRate();
 8003dda:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <MRT_LSM6DSR_getAngularRate+0x34>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 fa7c 	bl	80042dc <_ZN7LSM6DSR14getAngularRateEv>
 8003de4:	6078      	str	r0, [r7, #4]
	hlsm6dsr.angular_rate_mdps[0] = temp_array[0];
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a08      	ldr	r2, [pc, #32]	; (8003e0c <MRT_LSM6DSR_getAngularRate+0x38>)
 8003dec:	60d3      	str	r3, [r2, #12]
	hlsm6dsr.angular_rate_mdps[1] = temp_array[1];
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	4a06      	ldr	r2, [pc, #24]	; (8003e0c <MRT_LSM6DSR_getAngularRate+0x38>)
 8003df4:	6113      	str	r3, [r2, #16]
	hlsm6dsr.angular_rate_mdps[2] = temp_array[2];
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	4a04      	ldr	r2, [pc, #16]	; (8003e0c <MRT_LSM6DSR_getAngularRate+0x38>)
 8003dfc:	6153      	str	r3, [r2, #20]
}
 8003dfe:	bf00      	nop
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	20000320 	.word	0x20000320
 8003e0c:	20000328 	.word	0x20000328

08003e10 <MRT_LSM6DSR_getTemperature>:
void MRT_LSM6DSR_getTemperature(void){
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
	lsm6dsr->getTemperature();
 8003e14:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <MRT_LSM6DSR_getTemperature+0x1c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 fa29 	bl	8004270 <_ZN7LSM6DSR14getTemperatureEv>
	hlsm6dsr.temperature_degC = lsm6dsr->temperature_degC;
 8003e1e:	4b03      	ldr	r3, [pc, #12]	; (8003e2c <MRT_LSM6DSR_getTemperature+0x1c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	4a02      	ldr	r2, [pc, #8]	; (8003e30 <MRT_LSM6DSR_getTemperature+0x20>)
 8003e26:	6193      	str	r3, [r2, #24]
}
 8003e28:	bf00      	nop
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	20000320 	.word	0x20000320
 8003e30:	20000328 	.word	0x20000328

08003e34 <MRT_LSM6DSR_pollAll>:

void MRT_LSM6DSR_pollAll(void){
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
	MRT_LSM6DSR_getAcceleration();
 8003e38:	f7ff ffae 	bl	8003d98 <MRT_LSM6DSR_getAcceleration>
	MRT_LSM6DSR_getAngularRate();
 8003e3c:	f7ff ffca 	bl	8003dd4 <MRT_LSM6DSR_getAngularRate>
	MRT_LSM6DSR_getTemperature();
 8003e40:	f7ff ffe6 	bl	8003e10 <MRT_LSM6DSR_getTemperature>
}
 8003e44:	bf00      	nop
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <MRT_LPS22HH_Constructor>:


//**************************************************//
/*****LPS22HH STATIC FUNCTIONS*****/

void MRT_LPS22HH_Constructor(){
 8003e48:	b598      	push	{r3, r4, r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
	if (lps22hh==NULL){
 8003e4c:	4b08      	ldr	r3, [pc, #32]	; (8003e70 <MRT_LPS22HH_Constructor+0x28>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10b      	bne.n	8003e6c <MRT_LPS22HH_Constructor+0x24>
		lps22hh = new LPS22HH(&LPS22HH_I2C, (uint8_t) MRT_LPS22HH_ADDRESS);
 8003e54:	2020      	movs	r0, #32
 8003e56:	f00d fd99 	bl	801198c <_Znwj>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	461c      	mov	r4, r3
 8003e5e:	22b3      	movs	r2, #179	; 0xb3
 8003e60:	4904      	ldr	r1, [pc, #16]	; (8003e74 <MRT_LPS22HH_Constructor+0x2c>)
 8003e62:	4620      	mov	r0, r4
 8003e64:	f000 fabe 	bl	80043e4 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh>
 8003e68:	4b01      	ldr	r3, [pc, #4]	; (8003e70 <MRT_LPS22HH_Constructor+0x28>)
 8003e6a:	601c      	str	r4, [r3, #0]
	}
}
 8003e6c:	bf00      	nop
 8003e6e:	bd98      	pop	{r3, r4, r7, pc}
 8003e70:	20000324 	.word	0x20000324
 8003e74:	20005a94 	.word	0x20005a94

08003e78 <MRT_LPS22HH_Destructor>:

void MRT_LPS22HH_Destructor(){
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
	if (lps22hh!=NULL){
 8003e7c:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <MRT_LPS22HH_Destructor+0x1c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <MRT_LPS22HH_Destructor+0x12>
		lps22hh = NULL;
 8003e84:	4b03      	ldr	r3, [pc, #12]	; (8003e94 <MRT_LPS22HH_Destructor+0x1c>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]
	}
}
 8003e8a:	bf00      	nop
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	20000324 	.word	0x20000324

08003e98 <MRT_LPS22HH_getPressure>:

void MRT_LPS22HH_getPressure(void){
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
	hlps22hh.pressure_hPa = lps22hh->getPressure();
 8003e9c:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <MRT_LPS22HH_getPressure+0x1c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 fb27 	bl	80044f4 <_ZN7LPS22HH11getPressureEv>
 8003ea6:	eef0 7a40 	vmov.f32	s15, s0
 8003eaa:	4b03      	ldr	r3, [pc, #12]	; (8003eb8 <MRT_LPS22HH_getPressure+0x20>)
 8003eac:	edc3 7a00 	vstr	s15, [r3]
}
 8003eb0:	bf00      	nop
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	20000324 	.word	0x20000324
 8003eb8:	20000354 	.word	0x20000354

08003ebc <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(void){
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
	hlps22hh.temperature_degC = lps22hh->getTemperature();
 8003ec0:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <MRT_LPS22HH_getTemperature+0x1c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 fb49 	bl	800455c <_ZN7LPS22HH14getTemperatureEv>
 8003eca:	eef0 7a40 	vmov.f32	s15, s0
 8003ece:	4b03      	ldr	r3, [pc, #12]	; (8003edc <MRT_LPS22HH_getTemperature+0x20>)
 8003ed0:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8003ed4:	bf00      	nop
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	20000324 	.word	0x20000324
 8003edc:	20000354 	.word	0x20000354

08003ee0 <MRT_LPS22HH_pollAll>:

void MRT_LPS22HH_pollAll(void){
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
	MRT_LPS22HH_getPressure();
 8003ee4:	f7ff ffd8 	bl	8003e98 <MRT_LPS22HH_getPressure>
	MRT_LPS22HH_getTemperature();
 8003ee8:	f7ff ffe8 	bl	8003ebc <MRT_LPS22HH_getTemperature>
}
 8003eec:	bf00      	nop
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <MRT_GPS_pollAll>:


//**************************************************//
/*****GPS STATIC FUNCTIONS*****/

void MRT_GPS_pollAll(void){
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
	GPS_Poll(&hgps.latitude, &hgps.longitude, &hgps.time);
 8003ef4:	4a03      	ldr	r2, [pc, #12]	; (8003f04 <MRT_GPS_pollAll+0x14>)
 8003ef6:	4904      	ldr	r1, [pc, #16]	; (8003f08 <MRT_GPS_pollAll+0x18>)
 8003ef8:	4804      	ldr	r0, [pc, #16]	; (8003f0c <MRT_GPS_pollAll+0x1c>)
 8003efa:	f000 fb9f 	bl	800463c <GPS_Poll>
}
 8003efe:	bf00      	nop
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	20000370 	.word	0x20000370
 8003f08:	2000036c 	.word	0x2000036c
 8003f0c:	20000368 	.word	0x20000368

08003f10 <MRT_LSM6DSR_Init>:


//**************************************************//
/*****PUBLIC STATIC FUNCTIONS*****/

HLSM6DSR MRT_LSM6DSR_Init(void){
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
	MRT_LSM6DSR_Constructor();
 8003f18:	f7ff ff16 	bl	8003d48 <MRT_LSM6DSR_Constructor>
	HLSM6DSR lsm6dsr_handler;
	lsm6dsr_handler.getAcceleration = &MRT_LSM6DSR_getAcceleration;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a16      	ldr	r2, [pc, #88]	; (8003f78 <MRT_LSM6DSR_Init+0x68>)
 8003f20:	61da      	str	r2, [r3, #28]
	lsm6dsr_handler.getAngularRate = &MRT_LSM6DSR_getAngularRate;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a15      	ldr	r2, [pc, #84]	; (8003f7c <MRT_LSM6DSR_Init+0x6c>)
 8003f26:	621a      	str	r2, [r3, #32]
	lsm6dsr_handler.getTemperature = &MRT_LSM6DSR_getTemperature;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a15      	ldr	r2, [pc, #84]	; (8003f80 <MRT_LSM6DSR_Init+0x70>)
 8003f2c:	625a      	str	r2, [r3, #36]	; 0x24
	lsm6dsr_handler.pollAll = &MRT_LSM6DSR_pollAll;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a14      	ldr	r2, [pc, #80]	; (8003f84 <MRT_LSM6DSR_Init+0x74>)
 8003f32:	629a      	str	r2, [r3, #40]	; 0x28

	lsm6dsr_handler.acceleration_mg[0] = 0;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f04f 0200 	mov.w	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]
	lsm6dsr_handler.acceleration_mg[1] = 0;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	605a      	str	r2, [r3, #4]
	lsm6dsr_handler.acceleration_mg[2] = 0;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f04f 0200 	mov.w	r2, #0
 8003f4a:	609a      	str	r2, [r3, #8]
	lsm6dsr_handler.angular_rate_mdps[0] = 0;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f04f 0200 	mov.w	r2, #0
 8003f52:	60da      	str	r2, [r3, #12]
	lsm6dsr_handler.angular_rate_mdps[1] = 0;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f04f 0200 	mov.w	r2, #0
 8003f5a:	611a      	str	r2, [r3, #16]
	lsm6dsr_handler.angular_rate_mdps[2] = 0;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f04f 0200 	mov.w	r2, #0
 8003f62:	615a      	str	r2, [r3, #20]
	lsm6dsr_handler.temperature_degC = 0;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f04f 0200 	mov.w	r2, #0
 8003f6a:	619a      	str	r2, [r3, #24]
	return lsm6dsr_handler;
 8003f6c:	bf00      	nop
}
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	08003d99 	.word	0x08003d99
 8003f7c:	08003dd5 	.word	0x08003dd5
 8003f80:	08003e11 	.word	0x08003e11
 8003f84:	08003e35 	.word	0x08003e35

08003f88 <MRT_LPS22HH_Init>:

struct HLPS22HH MRT_LPS22HH_Init(void){
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
	MRT_LPS22HH_Constructor();
 8003f90:	f7ff ff5a 	bl	8003e48 <MRT_LPS22HH_Constructor>
	struct HLPS22HH lps22hh_handler;
	lps22hh_handler.getPressure = &MRT_LPS22HH_getPressure;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a0a      	ldr	r2, [pc, #40]	; (8003fc0 <MRT_LPS22HH_Init+0x38>)
 8003f98:	609a      	str	r2, [r3, #8]
	lps22hh_handler.getTemperature = &MRT_LPS22HH_getTemperature;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a09      	ldr	r2, [pc, #36]	; (8003fc4 <MRT_LPS22HH_Init+0x3c>)
 8003f9e:	60da      	str	r2, [r3, #12]
	lps22hh_handler.pollAll = &MRT_LPS22HH_pollAll;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a09      	ldr	r2, [pc, #36]	; (8003fc8 <MRT_LPS22HH_Init+0x40>)
 8003fa4:	611a      	str	r2, [r3, #16]

	lps22hh_handler.pressure_hPa = 0;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f04f 0200 	mov.w	r2, #0
 8003fac:	601a      	str	r2, [r3, #0]
	lps22hh_handler.temperature_degC = 0;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	605a      	str	r2, [r3, #4]
	return lps22hh_handler;
 8003fb6:	bf00      	nop
}
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	08003e99 	.word	0x08003e99
 8003fc4:	08003ebd 	.word	0x08003ebd
 8003fc8:	08003ee1 	.word	0x08003ee1

08003fcc <MRT_GPS_Init>:

struct HGPS MRT_GPS_Init(void){
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
	struct HGPS gps_handler;
	gps_handler.pollAll = &MRT_GPS_pollAll;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a0c      	ldr	r2, [pc, #48]	; (8004008 <MRT_GPS_Init+0x3c>)
 8003fd8:	60da      	str	r2, [r3, #12]
	GPS_Init(&GPS_UART, print, tone_freq);
 8003fda:	4a0c      	ldr	r2, [pc, #48]	; (800400c <MRT_GPS_Init+0x40>)
 8003fdc:	490c      	ldr	r1, [pc, #48]	; (8004010 <MRT_GPS_Init+0x44>)
 8003fde:	480d      	ldr	r0, [pc, #52]	; (8004014 <MRT_GPS_Init+0x48>)
 8003fe0:	f000 fd8c 	bl	8004afc <GPS_Init>
	gps_handler.latitude = 0;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f04f 0200 	mov.w	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]
	gps_handler.longitude = 0;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f04f 0200 	mov.w	r2, #0
 8003ff2:	605a      	str	r2, [r3, #4]
	gps_handler.time = 0;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	609a      	str	r2, [r3, #8]
	return gps_handler;
 8003ffc:	bf00      	nop
}
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	08003ef1 	.word	0x08003ef1
 800400c:	08001135 	.word	0x08001135
 8004010:	08001109 	.word	0x08001109
 8004014:	20005d7c 	.word	0x20005d7c

08004018 <MRT_i2c_sensors_Init>:

void MRT_i2c_sensors_Init(void){
 8004018:	b5b0      	push	{r4, r5, r7, lr}
 800401a:	b08c      	sub	sp, #48	; 0x30
 800401c:	af00      	add	r7, sp, #0

	//LSM6DSR
	#if LSM6DSR_
	HAL_IWDG_Refresh(&hiwdg);
	hlsm6dsr = MRT_LSM6DSR_Init();
 800401e:	4c13      	ldr	r4, [pc, #76]	; (800406c <MRT_i2c_sensors_Init+0x54>)
 8004020:	463b      	mov	r3, r7
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff ff74 	bl	8003f10 <MRT_LSM6DSR_Init>
 8004028:	4625      	mov	r5, r4
 800402a:	463c      	mov	r4, r7
 800402c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800402e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004030:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004032:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004034:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004038:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	#endif

	//LPS22HH
	#if LPS22HH_
	HAL_IWDG_Refresh(&hiwdg);
	hlps22hh = MRT_LPS22HH_Init();
 800403c:	4c0c      	ldr	r4, [pc, #48]	; (8004070 <MRT_i2c_sensors_Init+0x58>)
 800403e:	463b      	mov	r3, r7
 8004040:	4618      	mov	r0, r3
 8004042:	f7ff ffa1 	bl	8003f88 <MRT_LPS22HH_Init>
 8004046:	4625      	mov	r5, r4
 8004048:	463c      	mov	r4, r7
 800404a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800404c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800404e:	6823      	ldr	r3, [r4, #0]
 8004050:	602b      	str	r3, [r5, #0]
	#endif

	//GPS
	#if GPS_
	HAL_IWDG_Refresh(&hiwdg);
	hgps = MRT_GPS_Init();
 8004052:	4c08      	ldr	r4, [pc, #32]	; (8004074 <MRT_i2c_sensors_Init+0x5c>)
 8004054:	463b      	mov	r3, r7
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff ffb8 	bl	8003fcc <MRT_GPS_Init>
 800405c:	463b      	mov	r3, r7
 800405e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004060:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	#endif

}
 8004064:	bf00      	nop
 8004066:	3730      	adds	r7, #48	; 0x30
 8004068:	46bd      	mov	sp, r7
 800406a:	bdb0      	pop	{r4, r5, r7, pc}
 800406c:	20000328 	.word	0x20000328
 8004070:	20000354 	.word	0x20000354
 8004074:	20000368 	.word	0x20000368

08004078 <MRT_i2c_sensors_Deinit>:


void MRT_i2c_sensors_Deinit(void){
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0

	//LSM6DSR
	#if LSM6DSR_
	MRT_LSM6DSR_Destructor();
 800407c:	f7ff fe7c 	bl	8003d78 <MRT_LSM6DSR_Destructor>
	#endif

	//LPS22HH
	#if LPS22HH_
	MRT_LPS22HH_Destructor();
 8004080:	f7ff fefa 	bl	8003e78 <MRT_LPS22HH_Destructor>
	#endif

	//GPS
	//NO DEINIT NEEDED HERE
}
 8004084:	bf00      	nop
 8004086:	bd80      	pop	{r7, pc}

08004088 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh>:


//**************************************************//
/*****LSM6DSR*****/

LSM6DSR::LSM6DSR(I2C_HandleTypeDef* i2c_bus, uint8_t address){
 8004088:	b580      	push	{r7, lr}
 800408a:	b088      	sub	sp, #32
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	4613      	mov	r3, r2
 8004094:	71fb      	strb	r3, [r7, #7]
	println((char*) "\r\nLSM6DSR Init");
 8004096:	4848      	ldr	r0, [pc, #288]	; (80041b8 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x130>)
 8004098:	f7fd f818 	bl	80010cc <println>

	/* Initialize mems driver interface */
	ctx.write_reg = write;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4a47      	ldr	r2, [pc, #284]	; (80041bc <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x134>)
 80040a0:	61da      	str	r2, [r3, #28]
	ctx.read_reg = read;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	4a46      	ldr	r2, [pc, #280]	; (80041c0 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x138>)
 80040a6:	621a      	str	r2, [r3, #32]
	ctx.handle = i2c_bus;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait sensor boot time */
	HAL_Delay(LSM6DSR_BOOT_TIME);
 80040ae:	2064      	movs	r0, #100	; 0x64
 80040b0:	f005 f938 	bl	8009324 <HAL_Delay>
	/* Check device ID */
	lsm6dsr_device_id_get(&ctx, &whoamI);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f103 021c 	add.w	r2, r3, #28
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	3338      	adds	r3, #56	; 0x38
 80040be:	4619      	mov	r1, r3
 80040c0:	4610      	mov	r0, r2
 80040c2:	f001 faf1 	bl	80056a8 <lsm6dsr_device_id_get>

	print((char*) "\tChecking Sensor ID...");
 80040c6:	483f      	ldr	r0, [pc, #252]	; (80041c4 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x13c>)
 80040c8:	f7fd f81e 	bl	8001108 <print>
	if (whoamI != address){
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040d2:	79fa      	ldrb	r2, [r7, #7]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d018      	beq.n	800410a <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x82>
	  println((char*) "NOT OK");
 80040d8:	483b      	ldr	r0, [pc, #236]	; (80041c8 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x140>)
 80040da:	f7fc fff7 	bl	80010cc <println>
	  print((char*) "\tThis Device is: ");
 80040de:	483b      	ldr	r0, [pc, #236]	; (80041cc <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x144>)
 80040e0:	f7fd f812 	bl	8001108 <print>

	  char buffer[10];
	  sprintf(buffer, "%X\r\n", whoamI);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040ea:	461a      	mov	r2, r3
 80040ec:	f107 0314 	add.w	r3, r7, #20
 80040f0:	4937      	ldr	r1, [pc, #220]	; (80041d0 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x148>)
 80040f2:	4618      	mov	r0, r3
 80040f4:	f00f fa0a 	bl	801350c <siprintf>
	  print(buffer);
 80040f8:	f107 0314 	add.w	r3, r7, #20
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7fd f803 	bl	8001108 <print>

	  println((char*) "\n\rProgram Terminated\n\r");
 8004102:	4834      	ldr	r0, [pc, #208]	; (80041d4 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x14c>)
 8004104:	f7fc ffe2 	bl	80010cc <println>
	  while(1);
 8004108:	e7fe      	b.n	8004108 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x80>
	}
	println((char*) "OK");
 800410a:	4833      	ldr	r0, [pc, #204]	; (80041d8 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x150>)
 800410c:	f7fc ffde 	bl	80010cc <println>

	/* Restore default configuration */
	print((char*) "\tRestore default configuration...");
 8004110:	4832      	ldr	r0, [pc, #200]	; (80041dc <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x154>)
 8004112:	f7fc fff9 	bl	8001108 <print>
	lsm6dsr_reset_set(&ctx, PROPERTY_ENABLE);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	331c      	adds	r3, #28
 800411a:	2101      	movs	r1, #1
 800411c:	4618      	mov	r0, r3
 800411e:	f001 fad4 	bl	80056ca <lsm6dsr_reset_set>
	HAL_Delay(500);
 8004122:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004126:	f005 f8fd 	bl	8009324 <HAL_Delay>
	do {
	lsm6dsr_reset_get(&ctx, &rst);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f103 021c 	add.w	r2, r3, #28
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	3339      	adds	r3, #57	; 0x39
 8004134:	4619      	mov	r1, r3
 8004136:	4610      	mov	r0, r2
 8004138:	f001 faed 	bl	8005716 <lsm6dsr_reset_get>
	} while (rst);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004142:	2b00      	cmp	r3, #0
 8004144:	d000      	beq.n	8004148 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0xc0>
	do {
 8004146:	e7f0      	b.n	800412a <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0xa2>
	println((char*) "OK");
 8004148:	4823      	ldr	r0, [pc, #140]	; (80041d8 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x150>)
 800414a:	f7fc ffbf 	bl	80010cc <println>

	/* Disable I3C interface */
    lsm6dsr_i3c_disable_set(&ctx, LSM6DSR_I3C_DISABLE);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	331c      	adds	r3, #28
 8004152:	2180      	movs	r1, #128	; 0x80
 8004154:	4618      	mov	r0, r3
 8004156:	f001 fb55 	bl	8005804 <lsm6dsr_i3c_disable_set>

	/* Enable Block Data Update */
	lsm6dsr_block_data_update_set(&ctx, PROPERTY_ENABLE);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	331c      	adds	r3, #28
 800415e:	2101      	movs	r1, #1
 8004160:	4618      	mov	r0, r3
 8004162:	f001 f951 	bl	8005408 <lsm6dsr_block_data_update_set>
	/* Set Output Data Rate */
	lsm6dsr_xl_data_rate_set(&ctx, LSM6DSR_XL_ODR_12Hz5);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	331c      	adds	r3, #28
 800416a:	2101      	movs	r1, #1
 800416c:	4618      	mov	r0, r3
 800416e:	f000 ff2d 	bl	8004fcc <lsm6dsr_xl_data_rate_set>
	lsm6dsr_gy_data_rate_set(&ctx, LSM6DSR_GY_ODR_12Hz5);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	331c      	adds	r3, #28
 8004176:	2101      	movs	r1, #1
 8004178:	4618      	mov	r0, r3
 800417a:	f001 f849 	bl	8005210 <lsm6dsr_gy_data_rate_set>
	/* Set full scale */
	lsm6dsr_xl_full_scale_set(&ctx, LSM6DSR_2g);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	331c      	adds	r3, #28
 8004182:	2100      	movs	r1, #0
 8004184:	4618      	mov	r0, r3
 8004186:	f000 fefb 	bl	8004f80 <lsm6dsr_xl_full_scale_set>
	lsm6dsr_gy_full_scale_set(&ctx, LSM6DSR_2000dps);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	331c      	adds	r3, #28
 800418e:	210c      	movs	r1, #12
 8004190:	4618      	mov	r0, r3
 8004192:	f001 f817 	bl	80051c4 <lsm6dsr_gy_full_scale_set>
	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsr_xl_hp_path_on_out_set(&ctx, LSM6DSR_LP_ODR_DIV_100);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	331c      	adds	r3, #28
 800419a:	2104      	movs	r1, #4
 800419c:	4618      	mov	r0, r3
 800419e:	f001 faf9 	bl	8005794 <lsm6dsr_xl_hp_path_on_out_set>
	lsm6dsr_xl_filter_lp2_set(&ctx, PROPERTY_ENABLE);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	331c      	adds	r3, #28
 80041a6:	2101      	movs	r1, #1
 80041a8:	4618      	mov	r0, r3
 80041aa:	f001 facd 	bl	8005748 <lsm6dsr_xl_filter_lp2_set>
}
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	4618      	mov	r0, r3
 80041b2:	3720      	adds	r7, #32
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	08018938 	.word	0x08018938
 80041bc:	0800436f 	.word	0x0800436f
 80041c0:	080043a9 	.word	0x080043a9
 80041c4:	08018948 	.word	0x08018948
 80041c8:	08018960 	.word	0x08018960
 80041cc:	08018968 	.word	0x08018968
 80041d0:	0801897c 	.word	0x0801897c
 80041d4:	08018984 	.word	0x08018984
 80041d8:	0801899c 	.word	0x0801899c
 80041dc:	080189a0 	.word	0x080189a0

080041e0 <_ZN7LSM6DSR15getAccelerationEv>:


float* LSM6DSR::getAcceleration(void){
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
	lsm6dsr_xl_flag_data_ready_get(&ctx, &reg);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f103 021c 	add.w	r2, r3, #28
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3328      	adds	r3, #40	; 0x28
 80041f2:	4619      	mov	r1, r3
 80041f4:	4610      	mov	r0, r2
 80041f6:	f001 f92d 	bl	8005454 <lsm6dsr_xl_flag_data_ready_get>

	if (reg){
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004200:	2b00      	cmp	r3, #0
 8004202:	d030      	beq.n	8004266 <_ZN7LSM6DSR15getAccelerationEv+0x86>
		// Read magnetic field data
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	332a      	adds	r3, #42	; 0x2a
 8004208:	2206      	movs	r2, #6
 800420a:	2100      	movs	r1, #0
 800420c:	4618      	mov	r0, r3
 800420e:	f00d fe81 	bl	8011f14 <memset>
		lsm6dsr_acceleration_raw_get(&ctx, data_raw_acceleration);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f103 021c 	add.w	r2, r3, #28
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	332a      	adds	r3, #42	; 0x2a
 800421c:	4619      	mov	r1, r3
 800421e:	4610      	mov	r0, r2
 8004220:	f001 f9d1 	bl	80055c6 <lsm6dsr_acceleration_raw_get>
		acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[0]);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fe5c 	bl	8004ee8 <lsm6dsr_from_fs2g_to_mg>
 8004230:	eef0 7a40 	vmov.f32	s15, s0
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	edc3 7a00 	vstr	s15, [r3]
		acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[1]);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8004240:	4618      	mov	r0, r3
 8004242:	f000 fe51 	bl	8004ee8 <lsm6dsr_from_fs2g_to_mg>
 8004246:	eef0 7a40 	vmov.f32	s15, s0
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	edc3 7a01 	vstr	s15, [r3, #4]
		acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[2]);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8004256:	4618      	mov	r0, r3
 8004258:	f000 fe46 	bl	8004ee8 <lsm6dsr_from_fs2g_to_mg>
 800425c:	eef0 7a40 	vmov.f32	s15, s0
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	return acceleration_mg;
 8004266:	687b      	ldr	r3, [r7, #4]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <_ZN7LSM6DSR14getTemperatureEv>:


float LSM6DSR::getTemperature(void){
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
    lsm6dsr_temp_flag_data_ready_get(&ctx, &reg);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f103 021c 	add.w	r2, r3, #28
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	3328      	adds	r3, #40	; 0x28
 8004282:	4619      	mov	r1, r3
 8004284:	4610      	mov	r0, r2
 8004286:	f001 f917 	bl	80054b8 <lsm6dsr_temp_flag_data_ready_get>

    if (reg){
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004290:	2b00      	cmp	r3, #0
 8004292:	d01a      	beq.n	80042ca <_ZN7LSM6DSR14getTemperatureEv+0x5a>
		// Read temperature data
		memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3336      	adds	r3, #54	; 0x36
 8004298:	2202      	movs	r2, #2
 800429a:	2100      	movs	r1, #0
 800429c:	4618      	mov	r0, r3
 800429e:	f00d fe39 	bl	8011f14 <memset>
		lsm6dsr_temperature_raw_get(&ctx, &data_raw_temperature);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f103 021c 	add.w	r2, r3, #28
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3336      	adds	r3, #54	; 0x36
 80042ac:	4619      	mov	r1, r3
 80042ae:	4610      	mov	r0, r2
 80042b0:	f001 f91b 	bl	80054ea <lsm6dsr_temperature_raw_get>
		temperature_degC = lsm6dsr_from_lsb_to_celsius(data_raw_temperature);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 fe44 	bl	8004f48 <lsm6dsr_from_lsb_to_celsius>
 80042c0:	eef0 7a40 	vmov.f32	s15, s0
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	edc3 7a06 	vstr	s15, [r3, #24]
	}
    return temperature_degC;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	ee07 3a90 	vmov	s15, r3
}
 80042d2:	eeb0 0a67 	vmov.f32	s0, s15
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <_ZN7LSM6DSR14getAngularRateEv>:


float* LSM6DSR::getAngularRate(void){
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
    lsm6dsr_gy_flag_data_ready_get(&ctx, &reg);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f103 021c 	add.w	r2, r3, #28
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	3328      	adds	r3, #40	; 0x28
 80042ee:	4619      	mov	r1, r3
 80042f0:	4610      	mov	r0, r2
 80042f2:	f001 f8c8 	bl	8005486 <lsm6dsr_gy_flag_data_ready_get>

    if (reg){
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d030      	beq.n	8004362 <_ZN7LSM6DSR14getAngularRateEv+0x86>
		// Read magnetic field data
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3330      	adds	r3, #48	; 0x30
 8004304:	2206      	movs	r2, #6
 8004306:	2100      	movs	r1, #0
 8004308:	4618      	mov	r0, r3
 800430a:	f00d fe03 	bl	8011f14 <memset>
		lsm6dsr_angular_rate_raw_get(&ctx, data_raw_angular_rate);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f103 021c 	add.w	r2, r3, #28
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3330      	adds	r3, #48	; 0x30
 8004318:	4619      	mov	r1, r3
 800431a:	4610      	mov	r0, r2
 800431c:	f001 f908 	bl	8005530 <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8004326:	4618      	mov	r0, r3
 8004328:	f000 fdf6 	bl	8004f18 <lsm6dsr_from_fs2000dps_to_mdps>
 800432c:	eef0 7a40 	vmov.f32	s15, s0
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	edc3 7a03 	vstr	s15, [r3, #12]
		angular_rate_mdps[1] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800433c:	4618      	mov	r0, r3
 800433e:	f000 fdeb 	bl	8004f18 <lsm6dsr_from_fs2000dps_to_mdps>
 8004342:	eef0 7a40 	vmov.f32	s15, s0
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	edc3 7a04 	vstr	s15, [r3, #16]
		angular_rate_mdps[2] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8004352:	4618      	mov	r0, r3
 8004354:	f000 fde0 	bl	8004f18 <lsm6dsr_from_fs2000dps_to_mdps>
 8004358:	eef0 7a40 	vmov.f32	s15, s0
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	edc3 7a05 	vstr	s15, [r3, #20]
		fs500dps_to_mdps
		fs1000dps_to_mdps
		fs2000dps_to_mdps
		*/
	}
    return angular_rate_mdps;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	330c      	adds	r3, #12
}
 8004366:	4618      	mov	r0, r3
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <_ZN7LSM6DSR5writeEPvhPKht>:


int32_t LSM6DSR::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 800436e:	b580      	push	{r7, lr}
 8004370:	b088      	sub	sp, #32
 8004372:	af04      	add	r7, sp, #16
 8004374:	60f8      	str	r0, [r7, #12]
 8004376:	607a      	str	r2, [r7, #4]
 8004378:	461a      	mov	r2, r3
 800437a:	460b      	mov	r3, r1
 800437c:	72fb      	strb	r3, [r7, #11]
 800437e:	4613      	mov	r3, r2
 8004380:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8004382:	7afb      	ldrb	r3, [r7, #11]
 8004384:	b29a      	uxth	r2, r3
 8004386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800438a:	9302      	str	r3, [sp, #8]
 800438c:	893b      	ldrh	r3, [r7, #8]
 800438e:	9301      	str	r3, [sp, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	2301      	movs	r3, #1
 8004396:	21d5      	movs	r1, #213	; 0xd5
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f005 fea7 	bl	800a0ec <HAL_I2C_Mem_Write>
  return 0;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <_ZN7LSM6DSR4readEPvhPht>:

int32_t LSM6DSR::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b088      	sub	sp, #32
 80043ac:	af04      	add	r7, sp, #16
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	607a      	str	r2, [r7, #4]
 80043b2:	461a      	mov	r2, r3
 80043b4:	460b      	mov	r3, r1
 80043b6:	72fb      	strb	r3, [r7, #11]
 80043b8:	4613      	mov	r3, r2
 80043ba:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80043bc:	7afb      	ldrb	r3, [r7, #11]
 80043be:	b29a      	uxth	r2, r3
 80043c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043c4:	9302      	str	r3, [sp, #8]
 80043c6:	893b      	ldrh	r3, [r7, #8]
 80043c8:	9301      	str	r3, [sp, #4]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	2301      	movs	r3, #1
 80043d0:	21d5      	movs	r1, #213	; 0xd5
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f005 ff84 	bl	800a2e0 <HAL_I2C_Mem_Read>
  return 0;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh>:

//**************************************************//
/*****LPS22HH*****/


LPS22HH::LPS22HH(I2C_HandleTypeDef* i2c_bus, uint8_t address){
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b088      	sub	sp, #32
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	4613      	mov	r3, r2
 80043f0:	71fb      	strb	r3, [r7, #7]
	println((char*) "\r\nLPS22HH Init");
 80043f2:	4836      	ldr	r0, [pc, #216]	; (80044cc <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xe8>)
 80043f4:	f7fc fe6a 	bl	80010cc <println>

	/* Initialize mems driver interface */
	ctx.write_reg = write;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4a35      	ldr	r2, [pc, #212]	; (80044d0 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xec>)
 80043fc:	609a      	str	r2, [r3, #8]
	ctx.read_reg = read;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4a34      	ldr	r2, [pc, #208]	; (80044d4 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf0>)
 8004402:	60da      	str	r2, [r3, #12]
	ctx.handle = i2c_bus;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	611a      	str	r2, [r3, #16]
	/* Wait sensor boot time */
	HAL_Delay(LPS22HH_BOOT_TIME);
 800440a:	2064      	movs	r0, #100	; 0x64
 800440c:	f004 ff8a 	bl	8009324 <HAL_Delay>
	/* Check device ID */
	whoamI = 0;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	779a      	strb	r2, [r3, #30]
	lps22hh_device_id_get(&ctx, &whoamI);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f103 0208 	add.w	r2, r3, #8
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	331e      	adds	r3, #30
 8004420:	4619      	mov	r1, r3
 8004422:	4610      	mov	r0, r2
 8004424:	f000 fce0 	bl	8004de8 <lps22hh_device_id_get>


	print((char*) "\tChecking Sensor ID...");
 8004428:	482b      	ldr	r0, [pc, #172]	; (80044d8 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf4>)
 800442a:	f7fc fe6d 	bl	8001108 <print>
	if ( whoamI != address ){
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	7f9b      	ldrb	r3, [r3, #30]
 8004432:	79fa      	ldrb	r2, [r7, #7]
 8004434:	429a      	cmp	r2, r3
 8004436:	d017      	beq.n	8004468 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x84>
	  println((char*) "NOT OK");
 8004438:	4828      	ldr	r0, [pc, #160]	; (80044dc <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf8>)
 800443a:	f7fc fe47 	bl	80010cc <println>
	  print((char*) "\tThis Device is: ");
 800443e:	4828      	ldr	r0, [pc, #160]	; (80044e0 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xfc>)
 8004440:	f7fc fe62 	bl	8001108 <print>

	  char buffer[10];
	  sprintf(buffer, "%X\r\n", whoamI);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	7f9b      	ldrb	r3, [r3, #30]
 8004448:	461a      	mov	r2, r3
 800444a:	f107 0314 	add.w	r3, r7, #20
 800444e:	4925      	ldr	r1, [pc, #148]	; (80044e4 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x100>)
 8004450:	4618      	mov	r0, r3
 8004452:	f00f f85b 	bl	801350c <siprintf>
	  print(buffer);
 8004456:	f107 0314 	add.w	r3, r7, #20
 800445a:	4618      	mov	r0, r3
 800445c:	f7fc fe54 	bl	8001108 <print>

	  println((char*) "\n\rProgram Terminated\n\r");
 8004460:	4821      	ldr	r0, [pc, #132]	; (80044e8 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x104>)
 8004462:	f7fc fe33 	bl	80010cc <println>
	  while(1);
 8004466:	e7fe      	b.n	8004466 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x82>
	}
	println((char*) "OK");
 8004468:	4820      	ldr	r0, [pc, #128]	; (80044ec <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x108>)
 800446a:	f7fc fe2f 	bl	80010cc <println>

	/* Restore default configuration */
	print((char*) "\tRestore default configuration...");
 800446e:	4820      	ldr	r0, [pc, #128]	; (80044f0 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x10c>)
 8004470:	f7fc fe4a 	bl	8001108 <print>
	lps22hh_reset_set(&ctx, PROPERTY_ENABLE);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	3308      	adds	r3, #8
 8004478:	2101      	movs	r1, #1
 800447a:	4618      	mov	r0, r3
 800447c:	f000 fcc5 	bl	8004e0a <lps22hh_reset_set>
	HAL_Delay(500);
 8004480:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004484:	f004 ff4e 	bl	8009324 <HAL_Delay>
	do {
	lps22hh_reset_get(&ctx, &rst);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f103 0208 	add.w	r2, r3, #8
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	331f      	adds	r3, #31
 8004492:	4619      	mov	r1, r3
 8004494:	4610      	mov	r0, r2
 8004496:	f000 fcde 	bl	8004e56 <lps22hh_reset_get>
	} while (rst);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	7fdb      	ldrb	r3, [r3, #31]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d000      	beq.n	80044a4 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xc0>
	do {
 80044a2:	e7f1      	b.n	8004488 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xa4>
	println((char*) "OK");
 80044a4:	4811      	ldr	r0, [pc, #68]	; (80044ec <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x108>)
 80044a6:	f7fc fe11 	bl	80010cc <println>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&ctx, PROPERTY_ENABLE);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	3308      	adds	r3, #8
 80044ae:	2101      	movs	r1, #1
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 fba7 	bl	8004c04 <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&ctx, LPS22HH_75_Hz_LOW_NOISE);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	3308      	adds	r3, #8
 80044ba:	2115      	movs	r1, #21
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 fbc7 	bl	8004c50 <lps22hh_data_rate_set>
}
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4618      	mov	r0, r3
 80044c6:	3720      	adds	r7, #32
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	080189c4 	.word	0x080189c4
 80044d0:	080045c7 	.word	0x080045c7
 80044d4:	08004601 	.word	0x08004601
 80044d8:	08018948 	.word	0x08018948
 80044dc:	08018960 	.word	0x08018960
 80044e0:	08018968 	.word	0x08018968
 80044e4:	0801897c 	.word	0x0801897c
 80044e8:	08018984 	.word	0x08018984
 80044ec:	0801899c 	.word	0x0801899c
 80044f0:	080189a0 	.word	0x080189a0

080044f4 <_ZN7LPS22HH11getPressureEv>:



float LPS22HH::getPressure(void){
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
	/* Read output only if new value is available */
	lps22hh_press_flag_data_ready_get(&ctx, &reg);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f103 0208 	add.w	r2, r3, #8
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	3314      	adds	r3, #20
 8004506:	4619      	mov	r1, r3
 8004508:	4610      	mov	r0, r2
 800450a:	f000 fbef 	bl	8004cec <lps22hh_press_flag_data_ready_get>

	if (reg) {
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	7d1b      	ldrb	r3, [r3, #20]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d019      	beq.n	800454a <_ZN7LPS22HH11getPressureEv+0x56>
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	3318      	adds	r3, #24
 800451a:	2204      	movs	r2, #4
 800451c:	2100      	movs	r1, #0
 800451e:	4618      	mov	r0, r3
 8004520:	f00d fcf8 	bl	8011f14 <memset>
	  lps22hh_pressure_raw_get(&ctx, &data_raw_pressure);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f103 0208 	add.w	r2, r3, #8
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	3318      	adds	r3, #24
 800452e:	4619      	mov	r1, r3
 8004530:	4610      	mov	r0, r2
 8004532:	f000 fc0d 	bl	8004d50 <lps22hh_pressure_raw_get>
	  pressure_hPa = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	4618      	mov	r0, r3
 800453c:	f000 fb30 	bl	8004ba0 <lps22hh_from_lsb_to_hpa>
 8004540:	eef0 7a40 	vmov.f32	s15, s0
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	edc3 7a00 	vstr	s15, [r3]
	}
	return pressure_hPa;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	ee07 3a90 	vmov	s15, r3
}
 8004552:	eeb0 0a67 	vmov.f32	s0, s15
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <_ZN7LPS22HH14getTemperatureEv>:


float LPS22HH::getTemperature(void){
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
	/* Read output only if new value is available */
	lps22hh_temp_flag_data_ready_get(&ctx, &reg);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f103 0208 	add.w	r2, r3, #8
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	3314      	adds	r3, #20
 800456e:	4619      	mov	r1, r3
 8004570:	4610      	mov	r0, r2
 8004572:	f000 fbd4 	bl	8004d1e <lps22hh_temp_flag_data_ready_get>

	if (reg) {
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	7d1b      	ldrb	r3, [r3, #20]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d01a      	beq.n	80045b4 <_ZN7LPS22HH14getTemperatureEv+0x58>
	  memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	331c      	adds	r3, #28
 8004582:	2202      	movs	r2, #2
 8004584:	2100      	movs	r1, #0
 8004586:	4618      	mov	r0, r3
 8004588:	f00d fcc4 	bl	8011f14 <memset>
	  lps22hh_temperature_raw_get(&ctx, &data_raw_temperature);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f103 0208 	add.w	r2, r3, #8
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	331c      	adds	r3, #28
 8004596:	4619      	mov	r1, r3
 8004598:	4610      	mov	r0, r2
 800459a:	f000 fc02 	bl	8004da2 <lps22hh_temperature_raw_get>
	  temperature_degC = lps22hh_from_lsb_to_celsius(data_raw_temperature);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 fb13 	bl	8004bd0 <lps22hh_from_lsb_to_celsius>
 80045aa:	eef0 7a40 	vmov.f32	s15, s0
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	return temperature_degC;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	ee07 3a90 	vmov	s15, r3
}
 80045bc:	eeb0 0a67 	vmov.f32	s0, s15
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <_ZN7LPS22HH5writeEPvhPKht>:



int32_t LPS22HH::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b088      	sub	sp, #32
 80045ca:	af04      	add	r7, sp, #16
 80045cc:	60f8      	str	r0, [r7, #12]
 80045ce:	607a      	str	r2, [r7, #4]
 80045d0:	461a      	mov	r2, r3
 80045d2:	460b      	mov	r3, r1
 80045d4:	72fb      	strb	r3, [r7, #11]
 80045d6:	4613      	mov	r3, r2
 80045d8:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 80045da:	7afb      	ldrb	r3, [r7, #11]
 80045dc:	b29a      	uxth	r2, r3
 80045de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045e2:	9302      	str	r3, [sp, #8]
 80045e4:	893b      	ldrh	r3, [r7, #8]
 80045e6:	9301      	str	r3, [sp, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	2301      	movs	r3, #1
 80045ee:	21b9      	movs	r1, #185	; 0xb9
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f005 fd7b 	bl	800a0ec <HAL_I2C_Mem_Write>
  return 0;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <_ZN7LPS22HH4readEPvhPht>:

int32_t LPS22HH::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8004600:	b580      	push	{r7, lr}
 8004602:	b088      	sub	sp, #32
 8004604:	af04      	add	r7, sp, #16
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	607a      	str	r2, [r7, #4]
 800460a:	461a      	mov	r2, r3
 800460c:	460b      	mov	r3, r1
 800460e:	72fb      	strb	r3, [r7, #11]
 8004610:	4613      	mov	r3, r2
 8004612:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8004614:	7afb      	ldrb	r3, [r7, #11]
 8004616:	b29a      	uxth	r2, r3
 8004618:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800461c:	9302      	str	r3, [sp, #8]
 800461e:	893b      	ldrh	r3, [r7, #8]
 8004620:	9301      	str	r3, [sp, #4]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	2301      	movs	r3, #1
 8004628:	21b9      	movs	r1, #185	; 0xb9
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f005 fe58 	bl	800a2e0 <HAL_I2C_Mem_Read>
  return 0;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
	...

0800463c <GPS_Poll>:
#define LED3_GPIO_Port	((GPIO_TypeDef *) ((0x40000000UL + 0x00020000UL) + 0x0800UL))//OUT_LED3_GPIO_Port
#define LED3_Pin	(uint16_t)0x0008//OUT_LED3_Pin


void GPS_Poll(float *latitude, float *longitude, float *time)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b08c      	sub	sp, #48	; 0x30
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 8004648:	2364      	movs	r3, #100	; 0x64
 800464a:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 800464c:	2300      	movs	r3, #0
 800464e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 8004650:	2300      	movs	r3, #0
 8004652:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 8004654:	e073      	b.n	800473e <GPS_Poll+0x102>
		HAL_UART_Receive(GPS.uart, (uint8_t*)&rx_current, 1, 100);
 8004656:	4b3f      	ldr	r3, [pc, #252]	; (8004754 <GPS_Poll+0x118>)
 8004658:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800465a:	2364      	movs	r3, #100	; 0x64
 800465c:	2201      	movs	r2, #1
 800465e:	493e      	ldr	r1, [pc, #248]	; (8004758 <GPS_Poll+0x11c>)
 8004660:	f009 ffa5 	bl	800e5ae <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 8004664:	4b3c      	ldr	r3, [pc, #240]	; (8004758 <GPS_Poll+0x11c>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	2b0a      	cmp	r3, #10
 800466a:	d00f      	beq.n	800468c <GPS_Poll+0x50>
 800466c:	4b3b      	ldr	r3, [pc, #236]	; (800475c <GPS_Poll+0x120>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2b63      	cmp	r3, #99	; 0x63
 8004672:	d80b      	bhi.n	800468c <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 8004674:	4b39      	ldr	r3, [pc, #228]	; (800475c <GPS_Poll+0x120>)
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	1c5a      	adds	r2, r3, #1
 800467a:	b2d1      	uxtb	r1, r2
 800467c:	4a37      	ldr	r2, [pc, #220]	; (800475c <GPS_Poll+0x120>)
 800467e:	7011      	strb	r1, [r2, #0]
 8004680:	461a      	mov	r2, r3
 8004682:	4b35      	ldr	r3, [pc, #212]	; (8004758 <GPS_Poll+0x11c>)
 8004684:	7819      	ldrb	r1, [r3, #0]
 8004686:	4b36      	ldr	r3, [pc, #216]	; (8004760 <GPS_Poll+0x124>)
 8004688:	5499      	strb	r1, [r3, r2]
 800468a:	e021      	b.n	80046d0 <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 800468c:	4834      	ldr	r0, [pc, #208]	; (8004760 <GPS_Poll+0x124>)
 800468e:	f000 f869 	bl	8004764 <GPS_validate>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d013      	beq.n	80046c0 <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 8004698:	4831      	ldr	r0, [pc, #196]	; (8004760 <GPS_Poll+0x124>)
 800469a:	f000 f8c5 	bl	8004828 <GPS_parse>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00d      	beq.n	80046c0 <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 80046a4:	4b2b      	ldr	r3, [pc, #172]	; (8004754 <GPS_Poll+0x118>)
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 80046ac:	4b29      	ldr	r3, [pc, #164]	; (8004754 <GPS_Poll+0x118>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 80046b4:	4b27      	ldr	r3, [pc, #156]	; (8004754 <GPS_Poll+0x118>)
 80046b6:	695a      	ldr	r2, [r3, #20]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	601a      	str	r2, [r3, #0]
					done = 1;
 80046bc:	2301      	movs	r3, #1
 80046be:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 80046c0:	4b26      	ldr	r3, [pc, #152]	; (800475c <GPS_Poll+0x120>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 80046c6:	2264      	movs	r2, #100	; 0x64
 80046c8:	2100      	movs	r1, #0
 80046ca:	4825      	ldr	r0, [pc, #148]	; (8004760 <GPS_Poll+0x124>)
 80046cc:	f00d fc22 	bl	8011f14 <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS.uart);
 80046d0:	2300      	movs	r3, #0
 80046d2:	623b      	str	r3, [r7, #32]
 80046d4:	4b1f      	ldr	r3, [pc, #124]	; (8004754 <GPS_Poll+0x118>)
 80046d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	623b      	str	r3, [r7, #32]
 80046de:	4b1d      	ldr	r3, [pc, #116]	; (8004754 <GPS_Poll+0x118>)
 80046e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	623b      	str	r3, [r7, #32]
 80046e8:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS.uart);
 80046ea:	2300      	movs	r3, #0
 80046ec:	61fb      	str	r3, [r7, #28]
 80046ee:	4b19      	ldr	r3, [pc, #100]	; (8004754 <GPS_Poll+0x118>)
 80046f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	61fb      	str	r3, [r7, #28]
 80046f8:	4b16      	ldr	r3, [pc, #88]	; (8004754 <GPS_Poll+0x118>)
 80046fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	61fb      	str	r3, [r7, #28]
 8004702:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS.uart);
 8004704:	2300      	movs	r3, #0
 8004706:	61bb      	str	r3, [r7, #24]
 8004708:	4b12      	ldr	r3, [pc, #72]	; (8004754 <GPS_Poll+0x118>)
 800470a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	61bb      	str	r3, [r7, #24]
 8004712:	4b10      	ldr	r3, [pc, #64]	; (8004754 <GPS_Poll+0x118>)
 8004714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	61bb      	str	r3, [r7, #24]
 800471c:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS.uart);
 800471e:	2300      	movs	r3, #0
 8004720:	617b      	str	r3, [r7, #20]
 8004722:	4b0c      	ldr	r3, [pc, #48]	; (8004754 <GPS_Poll+0x118>)
 8004724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	617b      	str	r3, [r7, #20]
 800472c:	4b09      	ldr	r3, [pc, #36]	; (8004754 <GPS_Poll+0x118>)
 800472e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	617b      	str	r3, [r7, #20]
 8004736:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 8004738:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800473a:	3301      	adds	r3, #1
 800473c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 800473e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004740:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004742:	429a      	cmp	r2, r3
 8004744:	d202      	bcs.n	800474c <GPS_Poll+0x110>
 8004746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004748:	2b00      	cmp	r3, #0
 800474a:	d084      	beq.n	8004656 <GPS_Poll+0x1a>
	}
}
 800474c:	bf00      	nop
 800474e:	3730      	adds	r7, #48	; 0x30
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	20005f00 	.word	0x20005f00
 8004758:	20000378 	.word	0x20000378
 800475c:	20000379 	.word	0x20000379
 8004760:	20005f64 	.word	0x20005f64

08004764 <GPS_validate>:

int GPS_validate(char *nmeastr){
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 800476c:	2300      	movs	r3, #0
 800476e:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8004770:	2300      	movs	r3, #0
 8004772:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	4413      	add	r3, r2
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	2b24      	cmp	r3, #36	; 0x24
 800477e:	d103      	bne.n	8004788 <GPS_validate+0x24>
        i++;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	3301      	adds	r3, #1
 8004784:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8004786:	e00c      	b.n	80047a2 <GPS_validate+0x3e>
        return 0;
 8004788:	2300      	movs	r3, #0
 800478a:	e047      	b.n	800481c <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	4413      	add	r3, r2
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	461a      	mov	r2, r3
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	4053      	eors	r3, r2
 800479a:	613b      	str	r3, [r7, #16]
        i++;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	3301      	adds	r3, #1
 80047a0:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	4413      	add	r3, r2
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d008      	beq.n	80047c0 <GPS_validate+0x5c>
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	4413      	add	r3, r2
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	2b2a      	cmp	r3, #42	; 0x2a
 80047b8:	d002      	beq.n	80047c0 <GPS_validate+0x5c>
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2b4a      	cmp	r3, #74	; 0x4a
 80047be:	dde5      	ble.n	800478c <GPS_validate+0x28>
    }

    if(i >= 75){
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	2b4a      	cmp	r3, #74	; 0x4a
 80047c4:	dd01      	ble.n	80047ca <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 80047c6:	2300      	movs	r3, #0
 80047c8:	e028      	b.n	800481c <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	4413      	add	r3, r2
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	2b2a      	cmp	r3, #42	; 0x2a
 80047d4:	d119      	bne.n	800480a <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	3301      	adds	r3, #1
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	4413      	add	r3, r2
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	3302      	adds	r3, #2
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	4413      	add	r3, r2
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 80047ee:	2300      	movs	r3, #0
 80047f0:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 80047f2:	f107 0308 	add.w	r3, r7, #8
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	490a      	ldr	r1, [pc, #40]	; (8004824 <GPS_validate+0xc0>)
 80047fa:	4618      	mov	r0, r3
 80047fc:	f00e fe86 	bl	801350c <siprintf>
    return((checkcalcstr[0] == check[0])
 8004800:	7a3a      	ldrb	r2, [r7, #8]
 8004802:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8004804:	429a      	cmp	r2, r3
 8004806:	d108      	bne.n	800481a <GPS_validate+0xb6>
 8004808:	e001      	b.n	800480e <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 800480a:	2300      	movs	r3, #0
 800480c:	e006      	b.n	800481c <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800480e:	7a7a      	ldrb	r2, [r7, #9]
 8004810:	7b7b      	ldrb	r3, [r7, #13]
 8004812:	429a      	cmp	r2, r3
 8004814:	d101      	bne.n	800481a <GPS_validate+0xb6>
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <GPS_validate+0xb8>
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3718      	adds	r7, #24
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	080189d4 	.word	0x080189d4

08004828 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 8004828:	b580      	push	{r7, lr}
 800482a:	b08a      	sub	sp, #40	; 0x28
 800482c:	af08      	add	r7, sp, #32
 800482e:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 8004830:	2206      	movs	r2, #6
 8004832:	496d      	ldr	r1, [pc, #436]	; (80049e8 <GPS_parse+0x1c0>)
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f00e ff0f 	bl	8013658 <strncmp>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d139      	bne.n	80048b4 <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8004840:	4b6a      	ldr	r3, [pc, #424]	; (80049ec <GPS_parse+0x1c4>)
 8004842:	9307      	str	r3, [sp, #28]
 8004844:	4b6a      	ldr	r3, [pc, #424]	; (80049f0 <GPS_parse+0x1c8>)
 8004846:	9306      	str	r3, [sp, #24]
 8004848:	4b6a      	ldr	r3, [pc, #424]	; (80049f4 <GPS_parse+0x1cc>)
 800484a:	9305      	str	r3, [sp, #20]
 800484c:	4b6a      	ldr	r3, [pc, #424]	; (80049f8 <GPS_parse+0x1d0>)
 800484e:	9304      	str	r3, [sp, #16]
 8004850:	4b6a      	ldr	r3, [pc, #424]	; (80049fc <GPS_parse+0x1d4>)
 8004852:	9303      	str	r3, [sp, #12]
 8004854:	4b6a      	ldr	r3, [pc, #424]	; (8004a00 <GPS_parse+0x1d8>)
 8004856:	9302      	str	r3, [sp, #8]
 8004858:	4b6a      	ldr	r3, [pc, #424]	; (8004a04 <GPS_parse+0x1dc>)
 800485a:	9301      	str	r3, [sp, #4]
 800485c:	4b6a      	ldr	r3, [pc, #424]	; (8004a08 <GPS_parse+0x1e0>)
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	4b6a      	ldr	r3, [pc, #424]	; (8004a0c <GPS_parse+0x1e4>)
 8004862:	4a6b      	ldr	r2, [pc, #428]	; (8004a10 <GPS_parse+0x1e8>)
 8004864:	496b      	ldr	r1, [pc, #428]	; (8004a14 <GPS_parse+0x1ec>)
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f00e fe70 	bl	801354c <siscanf>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	f340 80b5 	ble.w	80049de <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8004874:	4b68      	ldr	r3, [pc, #416]	; (8004a18 <GPS_parse+0x1f0>)
 8004876:	edd3 7a04 	vldr	s15, [r3, #16]
 800487a:	4b67      	ldr	r3, [pc, #412]	; (8004a18 <GPS_parse+0x1f0>)
 800487c:	7e1b      	ldrb	r3, [r3, #24]
 800487e:	4618      	mov	r0, r3
 8004880:	eeb0 0a67 	vmov.f32	s0, s15
 8004884:	f000 f8ec 	bl	8004a60 <GPS_nmea_to_dec>
 8004888:	eef0 7a40 	vmov.f32	s15, s0
 800488c:	4b62      	ldr	r3, [pc, #392]	; (8004a18 <GPS_parse+0x1f0>)
 800488e:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8004892:	4b61      	ldr	r3, [pc, #388]	; (8004a18 <GPS_parse+0x1f0>)
 8004894:	edd3 7a03 	vldr	s15, [r3, #12]
 8004898:	4b5f      	ldr	r3, [pc, #380]	; (8004a18 <GPS_parse+0x1f0>)
 800489a:	7e5b      	ldrb	r3, [r3, #25]
 800489c:	4618      	mov	r0, r3
 800489e:	eeb0 0a67 	vmov.f32	s0, s15
 80048a2:	f000 f8dd 	bl	8004a60 <GPS_nmea_to_dec>
 80048a6:	eef0 7a40 	vmov.f32	s15, s0
 80048aa:	4b5b      	ldr	r3, [pc, #364]	; (8004a18 <GPS_parse+0x1f0>)
 80048ac:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e095      	b.n	80049e0 <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 80048b4:	2206      	movs	r2, #6
 80048b6:	4959      	ldr	r1, [pc, #356]	; (8004a1c <GPS_parse+0x1f4>)
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f00e fecd 	bl	8013658 <strncmp>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d134      	bne.n	800492e <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 80048c4:	4b56      	ldr	r3, [pc, #344]	; (8004a20 <GPS_parse+0x1f8>)
 80048c6:	9305      	str	r3, [sp, #20]
 80048c8:	4b56      	ldr	r3, [pc, #344]	; (8004a24 <GPS_parse+0x1fc>)
 80048ca:	9304      	str	r3, [sp, #16]
 80048cc:	4b56      	ldr	r3, [pc, #344]	; (8004a28 <GPS_parse+0x200>)
 80048ce:	9303      	str	r3, [sp, #12]
 80048d0:	4b4b      	ldr	r3, [pc, #300]	; (8004a00 <GPS_parse+0x1d8>)
 80048d2:	9302      	str	r3, [sp, #8]
 80048d4:	4b4b      	ldr	r3, [pc, #300]	; (8004a04 <GPS_parse+0x1dc>)
 80048d6:	9301      	str	r3, [sp, #4]
 80048d8:	4b4b      	ldr	r3, [pc, #300]	; (8004a08 <GPS_parse+0x1e0>)
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	4b4b      	ldr	r3, [pc, #300]	; (8004a0c <GPS_parse+0x1e4>)
 80048de:	4a4c      	ldr	r2, [pc, #304]	; (8004a10 <GPS_parse+0x1e8>)
 80048e0:	4952      	ldr	r1, [pc, #328]	; (8004a2c <GPS_parse+0x204>)
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f00e fe32 	bl	801354c <siscanf>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	dd77      	ble.n	80049de <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80048ee:	4b4a      	ldr	r3, [pc, #296]	; (8004a18 <GPS_parse+0x1f0>)
 80048f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80048f4:	4b48      	ldr	r3, [pc, #288]	; (8004a18 <GPS_parse+0x1f0>)
 80048f6:	7e1b      	ldrb	r3, [r3, #24]
 80048f8:	4618      	mov	r0, r3
 80048fa:	eeb0 0a67 	vmov.f32	s0, s15
 80048fe:	f000 f8af 	bl	8004a60 <GPS_nmea_to_dec>
 8004902:	eef0 7a40 	vmov.f32	s15, s0
 8004906:	4b44      	ldr	r3, [pc, #272]	; (8004a18 <GPS_parse+0x1f0>)
 8004908:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 800490c:	4b42      	ldr	r3, [pc, #264]	; (8004a18 <GPS_parse+0x1f0>)
 800490e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004912:	4b41      	ldr	r3, [pc, #260]	; (8004a18 <GPS_parse+0x1f0>)
 8004914:	7e5b      	ldrb	r3, [r3, #25]
 8004916:	4618      	mov	r0, r3
 8004918:	eeb0 0a67 	vmov.f32	s0, s15
 800491c:	f000 f8a0 	bl	8004a60 <GPS_nmea_to_dec>
 8004920:	eef0 7a40 	vmov.f32	s15, s0
 8004924:	4b3c      	ldr	r3, [pc, #240]	; (8004a18 <GPS_parse+0x1f0>)
 8004926:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 800492a:	2301      	movs	r3, #1
 800492c:	e058      	b.n	80049e0 <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 800492e:	2206      	movs	r2, #6
 8004930:	493f      	ldr	r1, [pc, #252]	; (8004a30 <GPS_parse+0x208>)
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f00e fe90 	bl	8013658 <strncmp>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d130      	bne.n	80049a0 <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 800493e:	4b3d      	ldr	r3, [pc, #244]	; (8004a34 <GPS_parse+0x20c>)
 8004940:	9303      	str	r3, [sp, #12]
 8004942:	4b33      	ldr	r3, [pc, #204]	; (8004a10 <GPS_parse+0x1e8>)
 8004944:	9302      	str	r3, [sp, #8]
 8004946:	4b2e      	ldr	r3, [pc, #184]	; (8004a00 <GPS_parse+0x1d8>)
 8004948:	9301      	str	r3, [sp, #4]
 800494a:	4b2e      	ldr	r3, [pc, #184]	; (8004a04 <GPS_parse+0x1dc>)
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	4b2e      	ldr	r3, [pc, #184]	; (8004a08 <GPS_parse+0x1e0>)
 8004950:	4a2e      	ldr	r2, [pc, #184]	; (8004a0c <GPS_parse+0x1e4>)
 8004952:	4939      	ldr	r1, [pc, #228]	; (8004a38 <GPS_parse+0x210>)
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f00e fdf9 	bl	801354c <siscanf>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	dd3e      	ble.n	80049de <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8004960:	4b2d      	ldr	r3, [pc, #180]	; (8004a18 <GPS_parse+0x1f0>)
 8004962:	edd3 7a04 	vldr	s15, [r3, #16]
 8004966:	4b2c      	ldr	r3, [pc, #176]	; (8004a18 <GPS_parse+0x1f0>)
 8004968:	7e1b      	ldrb	r3, [r3, #24]
 800496a:	4618      	mov	r0, r3
 800496c:	eeb0 0a67 	vmov.f32	s0, s15
 8004970:	f000 f876 	bl	8004a60 <GPS_nmea_to_dec>
 8004974:	eef0 7a40 	vmov.f32	s15, s0
 8004978:	4b27      	ldr	r3, [pc, #156]	; (8004a18 <GPS_parse+0x1f0>)
 800497a:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 800497e:	4b26      	ldr	r3, [pc, #152]	; (8004a18 <GPS_parse+0x1f0>)
 8004980:	edd3 7a03 	vldr	s15, [r3, #12]
 8004984:	4b24      	ldr	r3, [pc, #144]	; (8004a18 <GPS_parse+0x1f0>)
 8004986:	7e5b      	ldrb	r3, [r3, #25]
 8004988:	4618      	mov	r0, r3
 800498a:	eeb0 0a67 	vmov.f32	s0, s15
 800498e:	f000 f867 	bl	8004a60 <GPS_nmea_to_dec>
 8004992:	eef0 7a40 	vmov.f32	s15, s0
 8004996:	4b20      	ldr	r3, [pc, #128]	; (8004a18 <GPS_parse+0x1f0>)
 8004998:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 800499c:	2301      	movs	r3, #1
 800499e:	e01f      	b.n	80049e0 <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 80049a0:	2206      	movs	r2, #6
 80049a2:	4926      	ldr	r1, [pc, #152]	; (8004a3c <GPS_parse+0x214>)
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f00e fe57 	bl	8013658 <strncmp>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d116      	bne.n	80049de <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 80049b0:	4b23      	ldr	r3, [pc, #140]	; (8004a40 <GPS_parse+0x218>)
 80049b2:	9305      	str	r3, [sp, #20]
 80049b4:	4b23      	ldr	r3, [pc, #140]	; (8004a44 <GPS_parse+0x21c>)
 80049b6:	9304      	str	r3, [sp, #16]
 80049b8:	4b23      	ldr	r3, [pc, #140]	; (8004a48 <GPS_parse+0x220>)
 80049ba:	9303      	str	r3, [sp, #12]
 80049bc:	4b1a      	ldr	r3, [pc, #104]	; (8004a28 <GPS_parse+0x200>)
 80049be:	9302      	str	r3, [sp, #8]
 80049c0:	4b22      	ldr	r3, [pc, #136]	; (8004a4c <GPS_parse+0x224>)
 80049c2:	9301      	str	r3, [sp, #4]
 80049c4:	4b22      	ldr	r3, [pc, #136]	; (8004a50 <GPS_parse+0x228>)
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	4b22      	ldr	r3, [pc, #136]	; (8004a54 <GPS_parse+0x22c>)
 80049ca:	4a23      	ldr	r2, [pc, #140]	; (8004a58 <GPS_parse+0x230>)
 80049cc:	4923      	ldr	r1, [pc, #140]	; (8004a5c <GPS_parse+0x234>)
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f00e fdbc 	bl	801354c <siscanf>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	dd01      	ble.n	80049de <GPS_parse+0x1b6>
            return 0;
 80049da:	2300      	movs	r3, #0
 80049dc:	e000      	b.n	80049e0 <GPS_parse+0x1b8>
    }
    return 0;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3708      	adds	r7, #8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	080189dc 	.word	0x080189dc
 80049ec:	20005f2c 	.word	0x20005f2c
 80049f0:	20005f28 	.word	0x20005f28
 80049f4:	20005f24 	.word	0x20005f24
 80049f8:	20005f20 	.word	0x20005f20
 80049fc:	20005f1c 	.word	0x20005f1c
 8004a00:	20005f19 	.word	0x20005f19
 8004a04:	20005f0c 	.word	0x20005f0c
 8004a08:	20005f18 	.word	0x20005f18
 8004a0c:	20005f10 	.word	0x20005f10
 8004a10:	20005f14 	.word	0x20005f14
 8004a14:	080189e4 	.word	0x080189e4
 8004a18:	20005f00 	.word	0x20005f00
 8004a1c:	08018a0c 	.word	0x08018a0c
 8004a20:	20005f38 	.word	0x20005f38
 8004a24:	20005f34 	.word	0x20005f34
 8004a28:	20005f30 	.word	0x20005f30
 8004a2c:	08018a14 	.word	0x08018a14
 8004a30:	08018a34 	.word	0x08018a34
 8004a34:	20005f3c 	.word	0x20005f3c
 8004a38:	08018a3c 	.word	0x08018a3c
 8004a3c:	08018a58 	.word	0x08018a58
 8004a40:	20005f54 	.word	0x20005f54
 8004a44:	20005f50 	.word	0x20005f50
 8004a48:	20005f4d 	.word	0x20005f4d
 8004a4c:	20005f4c 	.word	0x20005f4c
 8004a50:	20005f48 	.word	0x20005f48
 8004a54:	20005f44 	.word	0x20005f44
 8004a58:	20005f40 	.word	0x20005f40
 8004a5c:	08018a60 	.word	0x08018a60

08004a60 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8004a60:	b480      	push	{r7}
 8004a62:	b087      	sub	sp, #28
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	ed87 0a01 	vstr	s0, [r7, #4]
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8004a6e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a72:	eddf 6a20 	vldr	s13, [pc, #128]	; 8004af4 <GPS_nmea_to_dec+0x94>
 8004a76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a7e:	ee17 3a90 	vmov	r3, s15
 8004a82:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	2264      	movs	r2, #100	; 0x64
 8004a88:	fb02 f303 	mul.w	r3, r2, r3
 8004a8c:	ee07 3a90 	vmov	s15, r3
 8004a90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a94:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a9c:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8004aa0:	ed97 7a03 	vldr	s14, [r7, #12]
 8004aa4:	eddf 6a14 	vldr	s13, [pc, #80]	; 8004af8 <GPS_nmea_to_dec+0x98>
 8004aa8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004aac:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	ee07 3a90 	vmov	s15, r3
 8004ab6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004aba:	ed97 7a02 	vldr	s14, [r7, #8]
 8004abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ac2:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8004ac6:	78fb      	ldrb	r3, [r7, #3]
 8004ac8:	2b53      	cmp	r3, #83	; 0x53
 8004aca:	d002      	beq.n	8004ad2 <GPS_nmea_to_dec+0x72>
 8004acc:	78fb      	ldrb	r3, [r7, #3]
 8004ace:	2b57      	cmp	r3, #87	; 0x57
 8004ad0:	d105      	bne.n	8004ade <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8004ad2:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ad6:	eef1 7a67 	vneg.f32	s15, s15
 8004ada:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	ee07 3a90 	vmov	s15, r3
}
 8004ae4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ae8:	371c      	adds	r7, #28
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	42c80000 	.word	0x42c80000
 8004af8:	42700000 	.word	0x42700000

08004afc <GPS_Init>:
	}
}


void GPS_Init(UART_HandleTypeDef* data_uart, void (*gps_print)(char*),
		void (*gps_tone_freq)(uint32_t duration, uint32_t repeats, uint32_t freq)){
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
	GPS.print = gps_print;
 8004b08:	4a0a      	ldr	r2, [pc, #40]	; (8004b34 <GPS_Init+0x38>)
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	65d3      	str	r3, [r2, #92]	; 0x5c
	GPS.print((char*) "\r\nGPS Init...");
 8004b0e:	4b09      	ldr	r3, [pc, #36]	; (8004b34 <GPS_Init+0x38>)
 8004b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b12:	4809      	ldr	r0, [pc, #36]	; (8004b38 <GPS_Init+0x3c>)
 8004b14:	4798      	blx	r3
	GPS.uart = data_uart;
 8004b16:	4a07      	ldr	r2, [pc, #28]	; (8004b34 <GPS_Init+0x38>)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6593      	str	r3, [r2, #88]	; 0x58
	GPS.tone_freq = gps_tone_freq;
 8004b1c:	4a05      	ldr	r2, [pc, #20]	; (8004b34 <GPS_Init+0x38>)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6613      	str	r3, [r2, #96]	; 0x60
	GPS.print((char*) "OK\r\n");
 8004b22:	4b04      	ldr	r3, [pc, #16]	; (8004b34 <GPS_Init+0x38>)
 8004b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b26:	4805      	ldr	r0, [pc, #20]	; (8004b3c <GPS_Init+0x40>)
 8004b28:	4798      	blx	r3
}
 8004b2a:	bf00      	nop
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	20005f00 	.word	0x20005f00
 8004b38:	08018a80 	.word	0x08018a80
 8004b3c:	08018a90 	.word	0x08018a90

08004b40 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004b40:	b590      	push	{r4, r7, lr}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	607a      	str	r2, [r7, #4]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	72fb      	strb	r3, [r7, #11]
 8004b50:	4613      	mov	r3, r2
 8004b52:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	685c      	ldr	r4, [r3, #4]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6898      	ldr	r0, [r3, #8]
 8004b5c:	893b      	ldrh	r3, [r7, #8]
 8004b5e:	7af9      	ldrb	r1, [r7, #11]
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	47a0      	blx	r4
 8004b64:	6178      	str	r0, [r7, #20]

  return ret;
 8004b66:	697b      	ldr	r3, [r7, #20]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	371c      	adds	r7, #28
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd90      	pop	{r4, r7, pc}

08004b70 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004b70:	b590      	push	{r4, r7, lr}
 8004b72:	b087      	sub	sp, #28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	607a      	str	r2, [r7, #4]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	72fb      	strb	r3, [r7, #11]
 8004b80:	4613      	mov	r3, r2
 8004b82:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681c      	ldr	r4, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6898      	ldr	r0, [r3, #8]
 8004b8c:	893b      	ldrh	r3, [r7, #8]
 8004b8e:	7af9      	ldrb	r1, [r7, #11]
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	47a0      	blx	r4
 8004b94:	6178      	str	r0, [r7, #20]

  return ret;
 8004b96:	697b      	ldr	r3, [r7, #20]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	371c      	adds	r7, #28
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd90      	pop	{r4, r7, pc}

08004ba0 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	ee07 3a90 	vmov	s15, r3
 8004bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004bcc <lps22hh_from_lsb_to_hpa+0x2c>
 8004bb6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004bba:	eef0 7a66 	vmov.f32	s15, s13
}
 8004bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	49800000 	.word	0x49800000

08004bd0 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8004bda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bde:	ee07 3a90 	vmov	s15, r3
 8004be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004be6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004c00 <lps22hh_from_lsb_to_celsius+0x30>
 8004bea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004bee:	eef0 7a66 	vmov.f32	s15, s13
}
 8004bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	42c80000 	.word	0x42c80000

08004c04 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8004c10:	f107 0208 	add.w	r2, r7, #8
 8004c14:	2301      	movs	r3, #1
 8004c16:	2110      	movs	r1, #16
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f7ff ff91 	bl	8004b40 <lps22hh_read_reg>
 8004c1e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10f      	bne.n	8004c46 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004c26:	78fb      	ldrb	r3, [r7, #3]
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	b2da      	uxtb	r2, r3
 8004c2e:	7a3b      	ldrb	r3, [r7, #8]
 8004c30:	f362 0341 	bfi	r3, r2, #1, #1
 8004c34:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8004c36:	f107 0208 	add.w	r2, r7, #8
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	2110      	movs	r1, #16
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7ff ff96 	bl	8004b70 <lps22hh_write_reg>
 8004c44:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004c46:	68fb      	ldr	r3, [r7, #12]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004c5c:	f107 0210 	add.w	r2, r7, #16
 8004c60:	2301      	movs	r3, #1
 8004c62:	2110      	movs	r1, #16
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7ff ff6b 	bl	8004b40 <lps22hh_read_reg>
 8004c6a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d107      	bne.n	8004c82 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004c72:	f107 020c 	add.w	r2, r7, #12
 8004c76:	2301      	movs	r3, #1
 8004c78:	2111      	movs	r1, #17
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7ff ff60 	bl	8004b40 <lps22hh_read_reg>
 8004c80:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10f      	bne.n	8004ca8 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8004c88:	78fb      	ldrb	r3, [r7, #3]
 8004c8a:	f003 0307 	and.w	r3, r3, #7
 8004c8e:	b2da      	uxtb	r2, r3
 8004c90:	7c3b      	ldrb	r3, [r7, #16]
 8004c92:	f362 1306 	bfi	r3, r2, #4, #3
 8004c96:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004c98:	f107 0210 	add.w	r2, r7, #16
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	2110      	movs	r1, #16
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7ff ff65 	bl	8004b70 <lps22hh_write_reg>
 8004ca6:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d119      	bne.n	8004ce2 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8004cae:	78fb      	ldrb	r3, [r7, #3]
 8004cb0:	091b      	lsrs	r3, r3, #4
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	b2da      	uxtb	r2, r3
 8004cb8:	7b3b      	ldrb	r3, [r7, #12]
 8004cba:	f362 0341 	bfi	r3, r2, #1, #1
 8004cbe:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8004cc0:	78fb      	ldrb	r3, [r7, #3]
 8004cc2:	08db      	lsrs	r3, r3, #3
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	7b3b      	ldrb	r3, [r7, #12]
 8004ccc:	f362 0300 	bfi	r3, r2, #0, #1
 8004cd0:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004cd2:	f107 020c 	add.w	r2, r7, #12
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	2111      	movs	r1, #17
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7ff ff48 	bl	8004b70 <lps22hh_write_reg>
 8004ce0:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004ce2:	697b      	ldr	r3, [r7, #20]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3718      	adds	r7, #24
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <lps22hh_press_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_press_flag_data_ready_get(stmdev_ctx_t *ctx,
                                          uint8_t *val)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8004cf6:	f107 0208 	add.w	r2, r7, #8
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	2127      	movs	r1, #39	; 0x27
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7ff ff1e 	bl	8004b40 <lps22hh_read_reg>
 8004d04:	60f8      	str	r0, [r7, #12]
  *val = reg.p_da;
 8004d06:	7a3b      	ldrb	r3, [r7, #8]
 8004d08:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	461a      	mov	r2, r3
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	701a      	strb	r2, [r3, #0]

  return ret;
 8004d14:	68fb      	ldr	r3, [r7, #12]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b084      	sub	sp, #16
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
 8004d26:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8004d28:	f107 0208 	add.w	r2, r7, #8
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	2127      	movs	r1, #39	; 0x27
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f7ff ff05 	bl	8004b40 <lps22hh_read_reg>
 8004d36:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 8004d38:	7a3b      	ldrb	r3, [r7, #8]
 8004d3a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	461a      	mov	r2, r3
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	701a      	strb	r2, [r3, #0]

  return ret;
 8004d46:	68fb      	ldr	r3, [r7, #12]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8004d5a:	f107 0208 	add.w	r2, r7, #8
 8004d5e:	2303      	movs	r3, #3
 8004d60:	2128      	movs	r1, #40	; 0x28
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7ff feec 	bl	8004b40 <lps22hh_read_reg>
 8004d68:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8004d6a:	7abb      	ldrb	r3, [r7, #10]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	021b      	lsls	r3, r3, #8
 8004d78:	7a7a      	ldrb	r2, [r7, #9]
 8004d7a:	441a      	add	r2, r3
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	021b      	lsls	r3, r3, #8
 8004d86:	7a3a      	ldrb	r2, [r7, #8]
 8004d88:	441a      	add	r2, r3
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	021a      	lsls	r2, r3, #8
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	601a      	str	r2, [r3, #0]

  return ret;
 8004d98:	68fb      	ldr	r3, [r7, #12]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b084      	sub	sp, #16
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
 8004daa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8004dac:	f107 0208 	add.w	r2, r7, #8
 8004db0:	2302      	movs	r3, #2
 8004db2:	212b      	movs	r1, #43	; 0x2b
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7ff fec3 	bl	8004b40 <lps22hh_read_reg>
 8004dba:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8004dbc:	7a7b      	ldrb	r3, [r7, #9]
 8004dbe:	b21a      	sxth	r2, r3
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	021b      	lsls	r3, r3, #8
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	7a3b      	ldrb	r3, [r7, #8]
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	4413      	add	r3, r2
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	b21a      	sxth	r2, r3
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	801a      	strh	r2, [r3, #0]

  return ret;
 8004dde:	68fb      	ldr	r3, [r7, #12]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8004df2:	2301      	movs	r3, #1
 8004df4:	683a      	ldr	r2, [r7, #0]
 8004df6:	210f      	movs	r1, #15
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f7ff fea1 	bl	8004b40 <lps22hh_read_reg>
 8004dfe:	60f8      	str	r0, [r7, #12]

  return ret;
 8004e00:	68fb      	ldr	r3, [r7, #12]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b084      	sub	sp, #16
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
 8004e12:	460b      	mov	r3, r1
 8004e14:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8004e16:	f107 0208 	add.w	r2, r7, #8
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	2111      	movs	r1, #17
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7ff fe8e 	bl	8004b40 <lps22hh_read_reg>
 8004e24:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10f      	bne.n	8004e4c <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8004e2c:	78fb      	ldrb	r3, [r7, #3]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	b2da      	uxtb	r2, r3
 8004e34:	7a3b      	ldrb	r3, [r7, #8]
 8004e36:	f362 0382 	bfi	r3, r2, #2, #1
 8004e3a:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8004e3c:	f107 0208 	add.w	r2, r7, #8
 8004e40:	2301      	movs	r3, #1
 8004e42:	2111      	movs	r1, #17
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f7ff fe93 	bl	8004b70 <lps22hh_write_reg>
 8004e4a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b084      	sub	sp, #16
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8004e60:	f107 0208 	add.w	r2, r7, #8
 8004e64:	2301      	movs	r3, #1
 8004e66:	2111      	movs	r1, #17
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7ff fe69 	bl	8004b40 <lps22hh_read_reg>
 8004e6e:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8004e70:	7a3b      	ldrb	r3, [r7, #8]
 8004e72:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	461a      	mov	r2, r3
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	701a      	strb	r2, [r3, #0]

  return ret;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004e88:	b590      	push	{r4, r7, lr}
 8004e8a:	b087      	sub	sp, #28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	607a      	str	r2, [r7, #4]
 8004e92:	461a      	mov	r2, r3
 8004e94:	460b      	mov	r3, r1
 8004e96:	72fb      	strb	r3, [r7, #11]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	685c      	ldr	r4, [r3, #4]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6898      	ldr	r0, [r3, #8]
 8004ea4:	893b      	ldrh	r3, [r7, #8]
 8004ea6:	7af9      	ldrb	r1, [r7, #11]
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	47a0      	blx	r4
 8004eac:	6178      	str	r0, [r7, #20]

  return ret;
 8004eae:	697b      	ldr	r3, [r7, #20]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	371c      	adds	r7, #28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd90      	pop	{r4, r7, pc}

08004eb8 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004eb8:	b590      	push	{r4, r7, lr}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	607a      	str	r2, [r7, #4]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	72fb      	strb	r3, [r7, #11]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681c      	ldr	r4, [r3, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6898      	ldr	r0, [r3, #8]
 8004ed4:	893b      	ldrh	r3, [r7, #8]
 8004ed6:	7af9      	ldrb	r1, [r7, #11]
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	47a0      	blx	r4
 8004edc:	6178      	str	r0, [r7, #20]

  return ret;
 8004ede:	697b      	ldr	r3, [r7, #20]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	371c      	adds	r7, #28
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd90      	pop	{r4, r7, pc}

08004ee8 <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	4603      	mov	r3, r0
 8004ef0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8004ef2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ef6:	ee07 3a90 	vmov	s15, r3
 8004efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004efe:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004f14 <lsm6dsr_from_fs2g_to_mg+0x2c>
 8004f02:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004f06:	eeb0 0a67 	vmov.f32	s0, s15
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr
 8004f14:	3d79db23 	.word	0x3d79db23

08004f18 <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	4603      	mov	r3, r0
 8004f20:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8004f22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f26:	ee07 3a90 	vmov	s15, r3
 8004f2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f2e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004f44 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 8004f32:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004f36:	eeb0 0a67 	vmov.f32	s0, s15
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr
 8004f44:	428c0000 	.word	0x428c0000

08004f48 <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	4603      	mov	r3, r0
 8004f50:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8004f52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f56:	ee07 3a90 	vmov	s15, r3
 8004f5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f5e:	eddf 6a07 	vldr	s13, [pc, #28]	; 8004f7c <lsm6dsr_from_lsb_to_celsius+0x34>
 8004f62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f66:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004f6a:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8004f6e:	eeb0 0a67 	vmov.f32	s0, s15
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	43800000 	.word	0x43800000

08004f80 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	460b      	mov	r3, r1
 8004f8a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8004f8c:	f107 0208 	add.w	r2, r7, #8
 8004f90:	2301      	movs	r3, #1
 8004f92:	2110      	movs	r1, #16
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7ff ff77 	bl	8004e88 <lsm6dsr_read_reg>
 8004f9a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10f      	bne.n	8004fc2 <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8004fa2:	78fb      	ldrb	r3, [r7, #3]
 8004fa4:	f003 0303 	and.w	r3, r3, #3
 8004fa8:	b2da      	uxtb	r2, r3
 8004faa:	7a3b      	ldrb	r3, [r7, #8]
 8004fac:	f362 0383 	bfi	r3, r2, #2, #2
 8004fb0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8004fb2:	f107 0208 	add.w	r2, r7, #8
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	2110      	movs	r1, #16
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7ff ff7c 	bl	8004eb8 <lsm6dsr_write_reg>
 8004fc0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8004fd8:	78fb      	ldrb	r3, [r7, #3]
 8004fda:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8004fdc:	f107 030c 	add.w	r3, r7, #12
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fc54 	bl	8005890 <lsm6dsr_fsm_enable_get>
 8004fe8:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f040 80c4 	bne.w	800517a <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004ff2:	7b3b      	ldrb	r3, [r7, #12]
 8004ff4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004ff8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004ffa:	7b3b      	ldrb	r3, [r7, #12]
 8004ffc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005000:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005002:	4313      	orrs	r3, r2
 8005004:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005006:	7b3b      	ldrb	r3, [r7, #12]
 8005008:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800500c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800500e:	4313      	orrs	r3, r2
 8005010:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005012:	7b3b      	ldrb	r3, [r7, #12]
 8005014:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005018:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800501a:	4313      	orrs	r3, r2
 800501c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800501e:	7b3b      	ldrb	r3, [r7, #12]
 8005020:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005024:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005026:	4313      	orrs	r3, r2
 8005028:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800502a:	7b3b      	ldrb	r3, [r7, #12]
 800502c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005030:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005032:	4313      	orrs	r3, r2
 8005034:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005036:	7b3b      	ldrb	r3, [r7, #12]
 8005038:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800503c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800503e:	4313      	orrs	r3, r2
 8005040:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005042:	7b3b      	ldrb	r3, [r7, #12]
 8005044:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005048:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800504a:	4313      	orrs	r3, r2
 800504c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800504e:	7b7b      	ldrb	r3, [r7, #13]
 8005050:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005054:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005056:	4313      	orrs	r3, r2
 8005058:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800505a:	7b7b      	ldrb	r3, [r7, #13]
 800505c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005060:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005062:	4313      	orrs	r3, r2
 8005064:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005066:	7b7b      	ldrb	r3, [r7, #13]
 8005068:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800506c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800506e:	4313      	orrs	r3, r2
 8005070:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005072:	7b7b      	ldrb	r3, [r7, #13]
 8005074:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005078:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800507a:	4313      	orrs	r3, r2
 800507c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800507e:	7b7b      	ldrb	r3, [r7, #13]
 8005080:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005084:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005086:	4313      	orrs	r3, r2
 8005088:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800508a:	7b7b      	ldrb	r3, [r7, #13]
 800508c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005090:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005092:	4313      	orrs	r3, r2
 8005094:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005096:	7b7b      	ldrb	r3, [r7, #13]
 8005098:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800509c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800509e:	4313      	orrs	r3, r2
 80050a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80050a2:	7b7b      	ldrb	r3, [r7, #13]
 80050a4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80050a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80050aa:	4313      	orrs	r3, r2
 80050ac:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d163      	bne.n	800517a <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 80050b2:	f107 030b 	add.w	r3, r7, #11
 80050b6:	4619      	mov	r1, r3
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 fc15 	bl	80058e8 <lsm6dsr_fsm_data_rate_get>
 80050be:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d159      	bne.n	800517a <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80050c6:	7afb      	ldrb	r3, [r7, #11]
 80050c8:	2b03      	cmp	r3, #3
 80050ca:	d853      	bhi.n	8005174 <lsm6dsr_xl_data_rate_set+0x1a8>
 80050cc:	a201      	add	r2, pc, #4	; (adr r2, 80050d4 <lsm6dsr_xl_data_rate_set+0x108>)
 80050ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d2:	bf00      	nop
 80050d4:	080050e5 	.word	0x080050e5
 80050d8:	080050f7 	.word	0x080050f7
 80050dc:	08005115 	.word	0x08005115
 80050e0:	0800513f 	.word	0x0800513f
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 80050e4:	78fb      	ldrb	r3, [r7, #3]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d102      	bne.n	80050f0 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 80050ea:	2301      	movs	r3, #1
 80050ec:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80050ee:	e045      	b.n	800517c <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	75fb      	strb	r3, [r7, #23]
            break;
 80050f4:	e042      	b.n	800517c <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80050f6:	78fb      	ldrb	r3, [r7, #3]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d102      	bne.n	8005102 <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 80050fc:	2302      	movs	r3, #2
 80050fe:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005100:	e03c      	b.n	800517c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8005102:	78fb      	ldrb	r3, [r7, #3]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d102      	bne.n	800510e <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8005108:	2302      	movs	r3, #2
 800510a:	75fb      	strb	r3, [r7, #23]
            break;
 800510c:	e036      	b.n	800517c <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800510e:	78fb      	ldrb	r3, [r7, #3]
 8005110:	75fb      	strb	r3, [r7, #23]
            break;
 8005112:	e033      	b.n	800517c <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8005114:	78fb      	ldrb	r3, [r7, #3]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d102      	bne.n	8005120 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800511a:	2303      	movs	r3, #3
 800511c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800511e:	e02d      	b.n	800517c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8005120:	78fb      	ldrb	r3, [r7, #3]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d102      	bne.n	800512c <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8005126:	2303      	movs	r3, #3
 8005128:	75fb      	strb	r3, [r7, #23]
            break;
 800512a:	e027      	b.n	800517c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 800512c:	78fb      	ldrb	r3, [r7, #3]
 800512e:	2b02      	cmp	r3, #2
 8005130:	d102      	bne.n	8005138 <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8005132:	2303      	movs	r3, #3
 8005134:	75fb      	strb	r3, [r7, #23]
            break;
 8005136:	e021      	b.n	800517c <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005138:	78fb      	ldrb	r3, [r7, #3]
 800513a:	75fb      	strb	r3, [r7, #23]
            break;
 800513c:	e01e      	b.n	800517c <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 800513e:	78fb      	ldrb	r3, [r7, #3]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d102      	bne.n	800514a <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8005144:	2304      	movs	r3, #4
 8005146:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005148:	e018      	b.n	800517c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 800514a:	78fb      	ldrb	r3, [r7, #3]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d102      	bne.n	8005156 <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8005150:	2304      	movs	r3, #4
 8005152:	75fb      	strb	r3, [r7, #23]
            break;
 8005154:	e012      	b.n	800517c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8005156:	78fb      	ldrb	r3, [r7, #3]
 8005158:	2b02      	cmp	r3, #2
 800515a:	d102      	bne.n	8005162 <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 800515c:	2304      	movs	r3, #4
 800515e:	75fb      	strb	r3, [r7, #23]
            break;
 8005160:	e00c      	b.n	800517c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 8005162:	78fb      	ldrb	r3, [r7, #3]
 8005164:	2b03      	cmp	r3, #3
 8005166:	d102      	bne.n	800516e <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8005168:	2304      	movs	r3, #4
 800516a:	75fb      	strb	r3, [r7, #23]
            break;
 800516c:	e006      	b.n	800517c <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800516e:	78fb      	ldrb	r3, [r7, #3]
 8005170:	75fb      	strb	r3, [r7, #23]
            break;
 8005172:	e003      	b.n	800517c <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8005174:	78fb      	ldrb	r3, [r7, #3]
 8005176:	75fb      	strb	r3, [r7, #23]
            break;
 8005178:	e000      	b.n	800517c <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 800517a:	bf00      	nop
    }
  }

  if (ret == 0)
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d107      	bne.n	8005192 <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005182:	f107 0208 	add.w	r2, r7, #8
 8005186:	2301      	movs	r3, #1
 8005188:	2110      	movs	r1, #16
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7ff fe7c 	bl	8004e88 <lsm6dsr_read_reg>
 8005190:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10f      	bne.n	80051b8 <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8005198:	7dfb      	ldrb	r3, [r7, #23]
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	b2da      	uxtb	r2, r3
 80051a0:	7a3b      	ldrb	r3, [r7, #8]
 80051a2:	f362 1307 	bfi	r3, r2, #4, #4
 80051a6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 80051a8:	f107 0208 	add.w	r2, r7, #8
 80051ac:	2301      	movs	r3, #1
 80051ae:	2110      	movs	r1, #16
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7ff fe81 	bl	8004eb8 <lsm6dsr_write_reg>
 80051b6:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80051b8:	693b      	ldr	r3, [r7, #16]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop

080051c4 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	460b      	mov	r3, r1
 80051ce:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80051d0:	f107 0208 	add.w	r2, r7, #8
 80051d4:	2301      	movs	r3, #1
 80051d6:	2111      	movs	r1, #17
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f7ff fe55 	bl	8004e88 <lsm6dsr_read_reg>
 80051de:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10f      	bne.n	8005206 <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 80051e6:	78fb      	ldrb	r3, [r7, #3]
 80051e8:	f003 030f 	and.w	r3, r3, #15
 80051ec:	b2da      	uxtb	r2, r3
 80051ee:	7a3b      	ldrb	r3, [r7, #8]
 80051f0:	f362 0303 	bfi	r3, r2, #0, #4
 80051f4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80051f6:	f107 0208 	add.w	r2, r7, #8
 80051fa:	2301      	movs	r3, #1
 80051fc:	2111      	movs	r1, #17
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7ff fe5a 	bl	8004eb8 <lsm6dsr_write_reg>
 8005204:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005206:	68fb      	ldr	r3, [r7, #12]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	460b      	mov	r3, r1
 800521a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 800521c:	78fb      	ldrb	r3, [r7, #3]
 800521e:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8005220:	f107 030c 	add.w	r3, r7, #12
 8005224:	4619      	mov	r1, r3
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 fb32 	bl	8005890 <lsm6dsr_fsm_enable_get>
 800522c:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	f040 80c4 	bne.w	80053be <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005236:	7b3b      	ldrb	r3, [r7, #12]
 8005238:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800523c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800523e:	7b3b      	ldrb	r3, [r7, #12]
 8005240:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005244:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005246:	4313      	orrs	r3, r2
 8005248:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800524a:	7b3b      	ldrb	r3, [r7, #12]
 800524c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005250:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005252:	4313      	orrs	r3, r2
 8005254:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005256:	7b3b      	ldrb	r3, [r7, #12]
 8005258:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800525c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800525e:	4313      	orrs	r3, r2
 8005260:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005262:	7b3b      	ldrb	r3, [r7, #12]
 8005264:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005268:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800526a:	4313      	orrs	r3, r2
 800526c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800526e:	7b3b      	ldrb	r3, [r7, #12]
 8005270:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005274:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005276:	4313      	orrs	r3, r2
 8005278:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800527a:	7b3b      	ldrb	r3, [r7, #12]
 800527c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005280:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005282:	4313      	orrs	r3, r2
 8005284:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005286:	7b3b      	ldrb	r3, [r7, #12]
 8005288:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800528c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800528e:	4313      	orrs	r3, r2
 8005290:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005292:	7b7b      	ldrb	r3, [r7, #13]
 8005294:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005298:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800529a:	4313      	orrs	r3, r2
 800529c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800529e:	7b7b      	ldrb	r3, [r7, #13]
 80052a0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80052a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80052a6:	4313      	orrs	r3, r2
 80052a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80052aa:	7b7b      	ldrb	r3, [r7, #13]
 80052ac:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80052b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80052b2:	4313      	orrs	r3, r2
 80052b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80052b6:	7b7b      	ldrb	r3, [r7, #13]
 80052b8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80052bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80052be:	4313      	orrs	r3, r2
 80052c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80052c2:	7b7b      	ldrb	r3, [r7, #13]
 80052c4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80052c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80052ca:	4313      	orrs	r3, r2
 80052cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80052ce:	7b7b      	ldrb	r3, [r7, #13]
 80052d0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80052d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80052d6:	4313      	orrs	r3, r2
 80052d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80052da:	7b7b      	ldrb	r3, [r7, #13]
 80052dc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80052e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80052e2:	4313      	orrs	r3, r2
 80052e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80052e6:	7b7b      	ldrb	r3, [r7, #13]
 80052e8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80052ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80052ee:	4313      	orrs	r3, r2
 80052f0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d163      	bne.n	80053be <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 80052f6:	f107 030b 	add.w	r3, r7, #11
 80052fa:	4619      	mov	r1, r3
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 faf3 	bl	80058e8 <lsm6dsr_fsm_data_rate_get>
 8005302:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d159      	bne.n	80053be <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800530a:	7afb      	ldrb	r3, [r7, #11]
 800530c:	2b03      	cmp	r3, #3
 800530e:	d853      	bhi.n	80053b8 <lsm6dsr_gy_data_rate_set+0x1a8>
 8005310:	a201      	add	r2, pc, #4	; (adr r2, 8005318 <lsm6dsr_gy_data_rate_set+0x108>)
 8005312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005316:	bf00      	nop
 8005318:	08005329 	.word	0x08005329
 800531c:	0800533b 	.word	0x0800533b
 8005320:	08005359 	.word	0x08005359
 8005324:	08005383 	.word	0x08005383
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 8005328:	78fb      	ldrb	r3, [r7, #3]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d102      	bne.n	8005334 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 800532e:	2301      	movs	r3, #1
 8005330:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005332:	e045      	b.n	80053c0 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005334:	78fb      	ldrb	r3, [r7, #3]
 8005336:	75fb      	strb	r3, [r7, #23]
            break;
 8005338:	e042      	b.n	80053c0 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800533a:	78fb      	ldrb	r3, [r7, #3]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d102      	bne.n	8005346 <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8005340:	2302      	movs	r3, #2
 8005342:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005344:	e03c      	b.n	80053c0 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8005346:	78fb      	ldrb	r3, [r7, #3]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d102      	bne.n	8005352 <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 800534c:	2302      	movs	r3, #2
 800534e:	75fb      	strb	r3, [r7, #23]
            break;
 8005350:	e036      	b.n	80053c0 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005352:	78fb      	ldrb	r3, [r7, #3]
 8005354:	75fb      	strb	r3, [r7, #23]
            break;
 8005356:	e033      	b.n	80053c0 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8005358:	78fb      	ldrb	r3, [r7, #3]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d102      	bne.n	8005364 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800535e:	2303      	movs	r3, #3
 8005360:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005362:	e02d      	b.n	80053c0 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8005364:	78fb      	ldrb	r3, [r7, #3]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d102      	bne.n	8005370 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800536a:	2303      	movs	r3, #3
 800536c:	75fb      	strb	r3, [r7, #23]
            break;
 800536e:	e027      	b.n	80053c0 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8005370:	78fb      	ldrb	r3, [r7, #3]
 8005372:	2b02      	cmp	r3, #2
 8005374:	d102      	bne.n	800537c <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8005376:	2303      	movs	r3, #3
 8005378:	75fb      	strb	r3, [r7, #23]
            break;
 800537a:	e021      	b.n	80053c0 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800537c:	78fb      	ldrb	r3, [r7, #3]
 800537e:	75fb      	strb	r3, [r7, #23]
            break;
 8005380:	e01e      	b.n	80053c0 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8005382:	78fb      	ldrb	r3, [r7, #3]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d102      	bne.n	800538e <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8005388:	2304      	movs	r3, #4
 800538a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800538c:	e018      	b.n	80053c0 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 800538e:	78fb      	ldrb	r3, [r7, #3]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d102      	bne.n	800539a <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8005394:	2304      	movs	r3, #4
 8005396:	75fb      	strb	r3, [r7, #23]
            break;
 8005398:	e012      	b.n	80053c0 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 800539a:	78fb      	ldrb	r3, [r7, #3]
 800539c:	2b02      	cmp	r3, #2
 800539e:	d102      	bne.n	80053a6 <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80053a0:	2304      	movs	r3, #4
 80053a2:	75fb      	strb	r3, [r7, #23]
            break;
 80053a4:	e00c      	b.n	80053c0 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 80053a6:	78fb      	ldrb	r3, [r7, #3]
 80053a8:	2b03      	cmp	r3, #3
 80053aa:	d102      	bne.n	80053b2 <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80053ac:	2304      	movs	r3, #4
 80053ae:	75fb      	strb	r3, [r7, #23]
            break;
 80053b0:	e006      	b.n	80053c0 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80053b2:	78fb      	ldrb	r3, [r7, #3]
 80053b4:	75fb      	strb	r3, [r7, #23]
            break;
 80053b6:	e003      	b.n	80053c0 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 80053b8:	78fb      	ldrb	r3, [r7, #3]
 80053ba:	75fb      	strb	r3, [r7, #23]
            break;
 80053bc:	e000      	b.n	80053c0 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 80053be:	bf00      	nop
    }
  }

  if (ret == 0)
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d107      	bne.n	80053d6 <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80053c6:	f107 0208 	add.w	r2, r7, #8
 80053ca:	2301      	movs	r3, #1
 80053cc:	2111      	movs	r1, #17
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7ff fd5a 	bl	8004e88 <lsm6dsr_read_reg>
 80053d4:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10f      	bne.n	80053fc <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 80053dc:	7dfb      	ldrb	r3, [r7, #23]
 80053de:	f003 030f 	and.w	r3, r3, #15
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	7a3b      	ldrb	r3, [r7, #8]
 80053e6:	f362 1307 	bfi	r3, r2, #4, #4
 80053ea:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80053ec:	f107 0208 	add.w	r2, r7, #8
 80053f0:	2301      	movs	r3, #1
 80053f2:	2111      	movs	r1, #17
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f7ff fd5f 	bl	8004eb8 <lsm6dsr_write_reg>
 80053fa:	6138      	str	r0, [r7, #16]
  }

  return ret;
 80053fc:	693b      	ldr	r3, [r7, #16]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3718      	adds	r7, #24
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop

08005408 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	460b      	mov	r3, r1
 8005412:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005414:	f107 0208 	add.w	r2, r7, #8
 8005418:	2301      	movs	r3, #1
 800541a:	2112      	movs	r1, #18
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7ff fd33 	bl	8004e88 <lsm6dsr_read_reg>
 8005422:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10f      	bne.n	800544a <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 800542a:	78fb      	ldrb	r3, [r7, #3]
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	b2da      	uxtb	r2, r3
 8005432:	7a3b      	ldrb	r3, [r7, #8]
 8005434:	f362 1386 	bfi	r3, r2, #6, #1
 8005438:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800543a:	f107 0208 	add.w	r2, r7, #8
 800543e:	2301      	movs	r3, #1
 8005440:	2112      	movs	r1, #18
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f7ff fd38 	bl	8004eb8 <lsm6dsr_write_reg>
 8005448:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800544a:	68fb      	ldr	r3, [r7, #12]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 800545e:	f107 0208 	add.w	r2, r7, #8
 8005462:	2301      	movs	r3, #1
 8005464:	211e      	movs	r1, #30
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7ff fd0e 	bl	8004e88 <lsm6dsr_read_reg>
 800546c:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 800546e:	7a3b      	ldrb	r3, [r7, #8]
 8005470:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005474:	b2db      	uxtb	r3, r3
 8005476:	461a      	mov	r2, r3
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	701a      	strb	r2, [r3, #0]

  return ret;
 800547c:	68fb      	ldr	r3, [r7, #12]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b084      	sub	sp, #16
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8005490:	f107 0208 	add.w	r2, r7, #8
 8005494:	2301      	movs	r3, #1
 8005496:	211e      	movs	r1, #30
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f7ff fcf5 	bl	8004e88 <lsm6dsr_read_reg>
 800549e:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 80054a0:	7a3b      	ldrb	r3, [r7, #8]
 80054a2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	461a      	mov	r2, r3
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	701a      	strb	r2, [r3, #0]

  return ret;
 80054ae:	68fb      	ldr	r3, [r7, #12]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 80054c2:	f107 0208 	add.w	r2, r7, #8
 80054c6:	2301      	movs	r3, #1
 80054c8:	211e      	movs	r1, #30
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7ff fcdc 	bl	8004e88 <lsm6dsr_read_reg>
 80054d0:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 80054d2:	7a3b      	ldrb	r3, [r7, #8]
 80054d4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	461a      	mov	r2, r3
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	701a      	strb	r2, [r3, #0]

  return ret;
 80054e0:	68fb      	ldr	r3, [r7, #12]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b084      	sub	sp, #16
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
 80054f2:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 80054f4:	f107 0208 	add.w	r2, r7, #8
 80054f8:	2302      	movs	r3, #2
 80054fa:	2120      	movs	r1, #32
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7ff fcc3 	bl	8004e88 <lsm6dsr_read_reg>
 8005502:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 8005504:	7a7b      	ldrb	r3, [r7, #9]
 8005506:	b21a      	sxth	r2, r3
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005512:	b29b      	uxth	r3, r3
 8005514:	021b      	lsls	r3, r3, #8
 8005516:	b29a      	uxth	r2, r3
 8005518:	7a3b      	ldrb	r3, [r7, #8]
 800551a:	b29b      	uxth	r3, r3
 800551c:	4413      	add	r3, r2
 800551e:	b29b      	uxth	r3, r3
 8005520:	b21a      	sxth	r2, r3
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	801a      	strh	r2, [r3, #0]

  return ret;
 8005526:	68fb      	ldr	r3, [r7, #12]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 800553a:	f107 020c 	add.w	r2, r7, #12
 800553e:	2306      	movs	r3, #6
 8005540:	2122      	movs	r1, #34	; 0x22
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7ff fca0 	bl	8004e88 <lsm6dsr_read_reg>
 8005548:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800554a:	7b7b      	ldrb	r3, [r7, #13]
 800554c:	b21a      	sxth	r2, r3
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005558:	b29b      	uxth	r3, r3
 800555a:	021b      	lsls	r3, r3, #8
 800555c:	b29a      	uxth	r2, r3
 800555e:	7b3b      	ldrb	r3, [r7, #12]
 8005560:	b29b      	uxth	r3, r3
 8005562:	4413      	add	r3, r2
 8005564:	b29b      	uxth	r3, r3
 8005566:	b21a      	sxth	r2, r3
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800556c:	7bfa      	ldrb	r2, [r7, #15]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	3302      	adds	r3, #2
 8005572:	b212      	sxth	r2, r2
 8005574:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	3302      	adds	r3, #2
 800557a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800557e:	b29b      	uxth	r3, r3
 8005580:	021b      	lsls	r3, r3, #8
 8005582:	b29a      	uxth	r2, r3
 8005584:	7bbb      	ldrb	r3, [r7, #14]
 8005586:	b29b      	uxth	r3, r3
 8005588:	4413      	add	r3, r2
 800558a:	b29a      	uxth	r2, r3
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	3302      	adds	r3, #2
 8005590:	b212      	sxth	r2, r2
 8005592:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005594:	7c7a      	ldrb	r2, [r7, #17]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	3304      	adds	r3, #4
 800559a:	b212      	sxth	r2, r2
 800559c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	3304      	adds	r3, #4
 80055a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	021b      	lsls	r3, r3, #8
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	7c3b      	ldrb	r3, [r7, #16]
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	4413      	add	r3, r2
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	3304      	adds	r3, #4
 80055b8:	b212      	sxth	r2, r2
 80055ba:	801a      	strh	r2, [r3, #0]

  return ret;
 80055bc:	697b      	ldr	r3, [r7, #20]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3718      	adds	r7, #24
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b086      	sub	sp, #24
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 80055d0:	f107 020c 	add.w	r2, r7, #12
 80055d4:	2306      	movs	r3, #6
 80055d6:	2128      	movs	r1, #40	; 0x28
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f7ff fc55 	bl	8004e88 <lsm6dsr_read_reg>
 80055de:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80055e0:	7b7b      	ldrb	r3, [r7, #13]
 80055e2:	b21a      	sxth	r2, r3
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	021b      	lsls	r3, r3, #8
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	7b3b      	ldrb	r3, [r7, #12]
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	4413      	add	r3, r2
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	b21a      	sxth	r2, r3
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005602:	7bfa      	ldrb	r2, [r7, #15]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	3302      	adds	r3, #2
 8005608:	b212      	sxth	r2, r2
 800560a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	3302      	adds	r3, #2
 8005610:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005614:	b29b      	uxth	r3, r3
 8005616:	021b      	lsls	r3, r3, #8
 8005618:	b29a      	uxth	r2, r3
 800561a:	7bbb      	ldrb	r3, [r7, #14]
 800561c:	b29b      	uxth	r3, r3
 800561e:	4413      	add	r3, r2
 8005620:	b29a      	uxth	r2, r3
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	3302      	adds	r3, #2
 8005626:	b212      	sxth	r2, r2
 8005628:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800562a:	7c7a      	ldrb	r2, [r7, #17]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	3304      	adds	r3, #4
 8005630:	b212      	sxth	r2, r2
 8005632:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	3304      	adds	r3, #4
 8005638:	f9b3 3000 	ldrsh.w	r3, [r3]
 800563c:	b29b      	uxth	r3, r3
 800563e:	021b      	lsls	r3, r3, #8
 8005640:	b29a      	uxth	r2, r3
 8005642:	7c3b      	ldrb	r3, [r7, #16]
 8005644:	b29b      	uxth	r3, r3
 8005646:	4413      	add	r3, r2
 8005648:	b29a      	uxth	r2, r3
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	3304      	adds	r3, #4
 800564e:	b212      	sxth	r2, r2
 8005650:	801a      	strh	r2, [r3, #0]

  return ret;
 8005652:	697b      	ldr	r3, [r7, #20]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	460b      	mov	r3, r1
 8005666:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8005668:	f107 0208 	add.w	r2, r7, #8
 800566c:	2301      	movs	r3, #1
 800566e:	2101      	movs	r1, #1
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f7ff fc09 	bl	8004e88 <lsm6dsr_read_reg>
 8005676:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10f      	bne.n	800569e <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 800567e:	78fb      	ldrb	r3, [r7, #3]
 8005680:	f003 0303 	and.w	r3, r3, #3
 8005684:	b2da      	uxtb	r2, r3
 8005686:	7a3b      	ldrb	r3, [r7, #8]
 8005688:	f362 1387 	bfi	r3, r2, #6, #2
 800568c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 800568e:	f107 0208 	add.w	r2, r7, #8
 8005692:	2301      	movs	r3, #1
 8005694:	2101      	movs	r1, #1
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7ff fc0e 	bl	8004eb8 <lsm6dsr_write_reg>
 800569c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 800569e:	68fb      	ldr	r3, [r7, #12]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 80056b2:	2301      	movs	r3, #1
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	210f      	movs	r1, #15
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7ff fbe5 	bl	8004e88 <lsm6dsr_read_reg>
 80056be:	60f8      	str	r0, [r7, #12]

  return ret;
 80056c0:	68fb      	ldr	r3, [r7, #12]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b084      	sub	sp, #16
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	460b      	mov	r3, r1
 80056d4:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80056d6:	f107 0208 	add.w	r2, r7, #8
 80056da:	2301      	movs	r3, #1
 80056dc:	2112      	movs	r1, #18
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7ff fbd2 	bl	8004e88 <lsm6dsr_read_reg>
 80056e4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10f      	bne.n	800570c <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 80056ec:	78fb      	ldrb	r3, [r7, #3]
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	7a3b      	ldrb	r3, [r7, #8]
 80056f6:	f362 0300 	bfi	r3, r2, #0, #1
 80056fa:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80056fc:	f107 0208 	add.w	r2, r7, #8
 8005700:	2301      	movs	r3, #1
 8005702:	2112      	movs	r1, #18
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7ff fbd7 	bl	8004eb8 <lsm6dsr_write_reg>
 800570a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800570c:	68fb      	ldr	r3, [r7, #12]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b084      	sub	sp, #16
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
 800571e:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005720:	f107 0208 	add.w	r2, r7, #8
 8005724:	2301      	movs	r3, #1
 8005726:	2112      	movs	r1, #18
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7ff fbad 	bl	8004e88 <lsm6dsr_read_reg>
 800572e:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8005730:	7a3b      	ldrb	r3, [r7, #8]
 8005732:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005736:	b2db      	uxtb	r3, r3
 8005738:	461a      	mov	r2, r3
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	701a      	strb	r2, [r3, #0]

  return ret;
 800573e:	68fb      	ldr	r3, [r7, #12]
}
 8005740:	4618      	mov	r0, r3
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <lsm6dsr_xl_filter_lp2_set>:
  * @param  val    Change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	460b      	mov	r3, r1
 8005752:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005754:	f107 0208 	add.w	r2, r7, #8
 8005758:	2301      	movs	r3, #1
 800575a:	2110      	movs	r1, #16
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f7ff fb93 	bl	8004e88 <lsm6dsr_read_reg>
 8005762:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10f      	bne.n	800578a <lsm6dsr_xl_filter_lp2_set+0x42>
  {
    ctrl1_xl.lpf2_xl_en = (uint8_t)val;
 800576a:	78fb      	ldrb	r3, [r7, #3]
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	b2da      	uxtb	r2, r3
 8005772:	7a3b      	ldrb	r3, [r7, #8]
 8005774:	f362 0341 	bfi	r3, r2, #1, #1
 8005778:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 800577a:	f107 0208 	add.w	r2, r7, #8
 800577e:	2301      	movs	r3, #1
 8005780:	2110      	movs	r1, #16
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7ff fb98 	bl	8004eb8 <lsm6dsr_write_reg>
 8005788:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800578a:	68fb      	ldr	r3, [r7, #12]
}
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <lsm6dsr_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dsr_hp_slope_xl_en_t val)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	460b      	mov	r3, r1
 800579e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 80057a0:	f107 0208 	add.w	r2, r7, #8
 80057a4:	2301      	movs	r3, #1
 80057a6:	2117      	movs	r1, #23
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7ff fb6d 	bl	8004e88 <lsm6dsr_read_reg>
 80057ae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d121      	bne.n	80057fa <lsm6dsr_xl_hp_path_on_out_set+0x66>
  {
    ctrl8_xl.hp_slope_xl_en = (((uint8_t)val & 0x10U) >> 4);
 80057b6:	78fb      	ldrb	r3, [r7, #3]
 80057b8:	091b      	lsrs	r3, r3, #4
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	b2da      	uxtb	r2, r3
 80057c0:	7a3b      	ldrb	r3, [r7, #8]
 80057c2:	f362 0382 	bfi	r3, r2, #2, #1
 80057c6:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_ref_mode_xl = (((uint8_t)val & 0x20U) >> 5);
 80057c8:	78fb      	ldrb	r3, [r7, #3]
 80057ca:	095b      	lsrs	r3, r3, #5
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	b2da      	uxtb	r2, r3
 80057d2:	7a3b      	ldrb	r3, [r7, #8]
 80057d4:	f362 1304 	bfi	r3, r2, #4, #1
 80057d8:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 80057da:	78fb      	ldrb	r3, [r7, #3]
 80057dc:	f003 0307 	and.w	r3, r3, #7
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	7a3b      	ldrb	r3, [r7, #8]
 80057e4:	f362 1347 	bfi	r3, r2, #5, #3
 80057e8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL8_XL,
 80057ea:	f107 0208 	add.w	r2, r7, #8
 80057ee:	2301      	movs	r3, #1
 80057f0:	2117      	movs	r1, #23
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7ff fb60 	bl	8004eb8 <lsm6dsr_write_reg>
 80057f8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 80057fa:	68fb      	ldr	r3, [r7, #12]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <lsm6dsr_i3c_disable_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dsr_i3c_disable_t val)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	460b      	mov	r3, r1
 800580e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl9_xl_t ctrl9_xl;
  lsm6dsr_i3c_bus_avb_t i3c_bus_avb;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8005810:	f107 0210 	add.w	r2, r7, #16
 8005814:	2301      	movs	r3, #1
 8005816:	2118      	movs	r1, #24
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7ff fb35 	bl	8004e88 <lsm6dsr_read_reg>
 800581e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d111      	bne.n	800584a <lsm6dsr_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8005826:	78fb      	ldrb	r3, [r7, #3]
 8005828:	09db      	lsrs	r3, r3, #7
 800582a:	b2db      	uxtb	r3, r3
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	b2da      	uxtb	r2, r3
 8005832:	7c3b      	ldrb	r3, [r7, #16]
 8005834:	f362 0341 	bfi	r3, r2, #1, #1
 8005838:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL9_XL,
 800583a:	f107 0210 	add.w	r2, r7, #16
 800583e:	2301      	movs	r3, #1
 8005840:	2118      	movs	r1, #24
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7ff fb38 	bl	8004eb8 <lsm6dsr_write_reg>
 8005848:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0)
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d107      	bne.n	8005860 <lsm6dsr_i3c_disable_set+0x5c>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8005850:	f107 020c 	add.w	r2, r7, #12
 8005854:	2301      	movs	r3, #1
 8005856:	2162      	movs	r1, #98	; 0x62
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f7ff fb15 	bl	8004e88 <lsm6dsr_read_reg>
 800585e:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10f      	bne.n	8005886 <lsm6dsr_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8005866:	78fb      	ldrb	r3, [r7, #3]
 8005868:	f003 0303 	and.w	r3, r3, #3
 800586c:	b2da      	uxtb	r2, r3
 800586e:	7b3b      	ldrb	r3, [r7, #12]
 8005870:	f362 03c4 	bfi	r3, r2, #3, #2
 8005874:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8005876:	f107 020c 	add.w	r2, r7, #12
 800587a:	2301      	movs	r3, #1
 800587c:	2162      	movs	r1, #98	; 0x62
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7ff fb1a 	bl	8004eb8 <lsm6dsr_write_reg>
 8005884:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8005886:	697b      	ldr	r3, [r7, #20]
}
 8005888:	4618      	mov	r0, r3
 800588a:	3718      	adds	r7, #24
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800589a:	2102      	movs	r1, #2
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7ff fedd 	bl	800565c <lsm6dsr_mem_bank_set>
 80058a2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d106      	bne.n	80058b8 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 80058aa:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 80058ac:	2301      	movs	r3, #1
 80058ae:	2146      	movs	r1, #70	; 0x46
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7ff fae9 	bl	8004e88 <lsm6dsr_read_reg>
 80058b6:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d107      	bne.n	80058ce <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 80058c2:	2301      	movs	r3, #1
 80058c4:	2147      	movs	r1, #71	; 0x47
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7ff fade 	bl	8004e88 <lsm6dsr_read_reg>
 80058cc:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d104      	bne.n	80058de <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 80058d4:	2100      	movs	r1, #0
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f7ff fec0 	bl	800565c <lsm6dsr_mem_bank_set>
 80058dc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80058de:	68fb      	ldr	r3, [r7, #12]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80058f2:	2102      	movs	r1, #2
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f7ff feb1 	bl	800565c <lsm6dsr_mem_bank_set>
 80058fa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d107      	bne.n	8005912 <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 8005902:	f107 0208 	add.w	r2, r7, #8
 8005906:	2301      	movs	r3, #1
 8005908:	215f      	movs	r1, #95	; 0x5f
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f7ff fabc 	bl	8004e88 <lsm6dsr_read_reg>
 8005910:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d104      	bne.n	8005922 <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8005918:	2100      	movs	r1, #0
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7ff fe9e 	bl	800565c <lsm6dsr_mem_bank_set>
 8005920:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 8005922:	7a3b      	ldrb	r3, [r7, #8]
 8005924:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b03      	cmp	r3, #3
 800592c:	d81a      	bhi.n	8005964 <lsm6dsr_fsm_data_rate_get+0x7c>
 800592e:	a201      	add	r2, pc, #4	; (adr r2, 8005934 <lsm6dsr_fsm_data_rate_get+0x4c>)
 8005930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005934:	08005945 	.word	0x08005945
 8005938:	0800594d 	.word	0x0800594d
 800593c:	08005955 	.word	0x08005955
 8005940:	0800595d 	.word	0x0800595d
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	2200      	movs	r2, #0
 8005948:	701a      	strb	r2, [r3, #0]
      break;
 800594a:	e00f      	b.n	800596c <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	2201      	movs	r2, #1
 8005950:	701a      	strb	r2, [r3, #0]
      break;
 8005952:	e00b      	b.n	800596c <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	2202      	movs	r2, #2
 8005958:	701a      	strb	r2, [r3, #0]
      break;
 800595a:	e007      	b.n	800596c <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	2203      	movs	r2, #3
 8005960:	701a      	strb	r2, [r3, #0]
      break;
 8005962:	e003      	b.n	800596c <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	2200      	movs	r2, #0
 8005968:	701a      	strb	r2, [r3, #0]
      break;
 800596a:	bf00      	nop
  }

  return ret;
 800596c:	68fb      	ldr	r3, [r7, #12]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop

08005978 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	b2d2      	uxtb	r2, r2
 800598c:	4611      	mov	r1, r2
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	4798      	blx	r3
 8005992:	4603      	mov	r3, r0
 8005994:	4618      	mov	r0, r3
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <_Z12ISBDCallbackv>:

bool ISBDCallback() __attribute__((weak));
void ISBDConsoleCallback(IridiumSBD *device, char c) __attribute__((weak));
void ISBDDiagsCallback(IridiumSBD *device, char c) __attribute__((weak));

bool ISBDCallback() { return true; }
 800599c:	b480      	push	{r7}
 800599e:	af00      	add	r7, sp, #0
 80059a0:	2301      	movs	r3, #1
 80059a2:	4618      	mov	r0, r3
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <_Z19ISBDConsoleCallbackP10IridiumSBDc>:
void ISBDConsoleCallback(IridiumSBD *device, char c) { }
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	460b      	mov	r3, r1
 80059b6:	70fb      	strb	r3, [r7, #3]
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <_Z17ISBDDiagsCallbackP10IridiumSBDc>:
void ISBDDiagsCallback(IridiumSBD *device, char c) { }
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	460b      	mov	r3, r1
 80059ce:	70fb      	strb	r3, [r7, #3]
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <_ZN10IridiumSBD5beginEv>:



// Power on the RockBLOCK or return from sleep
int IridiumSBD::begin()
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <_ZN10IridiumSBD5beginEv+0x16>
      return ISBD_REENTRANT;
 80059ee:	2309      	movs	r3, #9
 80059f0:	e01a      	b.n	8005a28 <_ZN10IridiumSBD5beginEv+0x4c>

   this->reentrant = true;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalBegin();
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 faf6 	bl	8005fec <_ZN10IridiumSBD13internalBeginEv>
 8005a00:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

   // Absent a successful startup, keep the device turned off
   if (ret != ISBD_SUCCESS)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00a      	beq.n	8005a26 <_ZN10IridiumSBD5beginEv+0x4a>
   {
      if (this->useSerial)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	7c5b      	ldrb	r3, [r3, #17]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <_ZN10IridiumSBD5beginEv+0x42>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f001 fc2b 	bl	8007274 <_ZN10IridiumSBD13endSerialPortEv>
      power(false);
 8005a1e:	2100      	movs	r1, #0
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f001 fb79 	bl	8007118 <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 8005a26:	68fb      	ldr	r3, [r7, #12]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <_ZN10IridiumSBD11sendSBDTextEPKc>:
   return ret;
}

// Transmit a text message
int IridiumSBD::sendSBDText(const char *message)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af02      	add	r7, sp, #8
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
   if (this->reentrant)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <_ZN10IridiumSBD11sendSBDTextEPKc+0x18>
      return ISBD_REENTRANT;
 8005a44:	2309      	movs	r3, #9
 8005a46:	e013      	b.n	8005a70 <_ZN10IridiumSBD11sendSBDTextEPKc+0x40>

   this->reentrant = true;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalSendReceiveSBD(message, NULL, 0, NULL, NULL);
 8005a50:	2300      	movs	r3, #0
 8005a52:	9301      	str	r3, [sp, #4]
 8005a54:	2300      	movs	r3, #0
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	2300      	movs	r3, #0
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	6839      	ldr	r1, [r7, #0]
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fc4c 	bl	80062fc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj>
 8005a64:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <_ZN10IridiumSBD16getSignalQualityERi>:
   return ret;
}

// High-level wrapper for AT+CSQ
int IridiumSBD::getSignalQuality(int &quality)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
   if (this->reentrant)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d001      	beq.n	8005a90 <_ZN10IridiumSBD16getSignalQualityERi+0x18>
      return ISBD_REENTRANT;
 8005a8c:	2309      	movs	r3, #9
 8005a8e:	e00d      	b.n	8005aac <_ZN10IridiumSBD16getSignalQualityERi+0x34>

   this->reentrant = true;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalGetSignalQuality(quality);
 8005a98:	6839      	ldr	r1, [r7, #0]
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 feea 	bl	8006874 <_ZN10IridiumSBD24internalGetSignalQualityERi>
 8005aa0:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <_ZN10IridiumSBD15adjustATTimeoutEi>:
   }
}

// Tweak AT timeout
void IridiumSBD::adjustATTimeout(int seconds)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
   this->atTimeout = seconds;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <_ZN10IridiumSBD16enableRingAlertsEb>:
{
   this->msstmWorkaroundRequested = useWorkAround;
}

void IridiumSBD::enableRingAlerts(bool enable) // true to enable SBDRING alerts and RING signal pin
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	460b      	mov	r3, r1
 8005ada:	70fb      	strb	r3, [r7, #3]
   this->ringAlertsEnabled = enable;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	78fa      	ldrb	r2, [r7, #3]
 8005ae0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
   if (enable)
 8005ae4:	78fb      	ldrb	r3, [r7, #3]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00d      	beq.n	8005b06 <_ZN10IridiumSBD16enableRingAlertsEb+0x36>
   {
      this->ringAsserted = false;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
      if (!this->useSerial) // If we are using I2C, clear the ring indicator flag
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	7c5b      	ldrb	r3, [r3, #17]
 8005af6:	f083 0301 	eor.w	r3, r3, #1
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <_ZN10IridiumSBD16enableRingAlertsEb+0x36>
      {
        clearRingIndicator();
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 f9b3 	bl	8005e6c <_ZN10IridiumSBD18clearRingIndicatorEv>
      }
   }
}
 8005b06:	bf00      	nop
 8005b08:	3708      	adds	r7, #8
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
	...

08005b10 <_ZN10IridiumSBD13getSystemTimeER2tm>:

   return ret;
}

int IridiumSBD::getSystemTime(struct tm &tm)
{
 8005b10:	b5b0      	push	{r4, r5, r7, lr}
 8005b12:	b09c      	sub	sp, #112	; 0x70
 8005b14:	af02      	add	r7, sp, #8
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
   char msstmResponseBuf[24];

   send(F("AT-MSSTM\r"));
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	493f      	ldr	r1, [pc, #252]	; (8005c1c <_ZN10IridiumSBD13getSystemTimeER2tm+0x10c>)
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f001 fbb5 	bl	8007290 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(msstmResponseBuf, sizeof(msstmResponseBuf), "-MSSTM: "))
 8005b26:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8005b2a:	4b3d      	ldr	r3, [pc, #244]	; (8005c20 <_ZN10IridiumSBD13getSystemTimeER2tm+0x110>)
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	4b3d      	ldr	r3, [pc, #244]	; (8005c24 <_ZN10IridiumSBD13getSystemTimeER2tm+0x114>)
 8005b30:	2218      	movs	r2, #24
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 ff4a 	bl	80069cc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	f083 0301 	eor.w	r3, r3, #1
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d009      	beq.n	8005b58 <_ZN10IridiumSBD13getSystemTimeER2tm+0x48>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 ffff 	bl	8006b48 <_ZN10IridiumSBD9cancelledEv>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <_ZN10IridiumSBD13getSystemTimeER2tm+0x44>
 8005b50:	2304      	movs	r3, #4
 8005b52:	e05e      	b.n	8005c12 <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>
 8005b54:	2303      	movs	r3, #3
 8005b56:	e05c      	b.n	8005c12 <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>

   if (!isxdigit(msstmResponseBuf[0]))
 8005b58:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f00c f87f 	bl	8011c60 <isxdigit>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <_ZN10IridiumSBD13getSystemTimeER2tm+0x5c>
      return ISBD_NO_NETWORK;
 8005b68:	230c      	movs	r3, #12
 8005b6a:	e052      	b.n	8005c12 <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>

   // Latest epoch began at May 11, 2014, at 14:23:55 UTC.
   struct tm epoch_start;
   epoch_start.tm_year = 2014 - 1900;
 8005b6c:	2372      	movs	r3, #114	; 0x72
 8005b6e:	62bb      	str	r3, [r7, #40]	; 0x28
   epoch_start.tm_mon = 5 - 1;
 8005b70:	2304      	movs	r3, #4
 8005b72:	627b      	str	r3, [r7, #36]	; 0x24
   epoch_start.tm_mday = 11;
 8005b74:	230b      	movs	r3, #11
 8005b76:	623b      	str	r3, [r7, #32]
   epoch_start.tm_hour = 14;
 8005b78:	230e      	movs	r3, #14
 8005b7a:	61fb      	str	r3, [r7, #28]
   epoch_start.tm_min = 23;
 8005b7c:	2317      	movs	r3, #23
 8005b7e:	61bb      	str	r3, [r7, #24]
   epoch_start.tm_sec = 55;
 8005b80:	2337      	movs	r3, #55	; 0x37
 8005b82:	617b      	str	r3, [r7, #20]

   unsigned long ticks_since_epoch = strtoul(msstmResponseBuf, NULL, 16);
 8005b84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005b88:	2210      	movs	r2, #16
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f00e fd0d 	bl	80145ac <strtoul>
 8005b92:	6678      	str	r0, [r7, #100]	; 0x64
      seconds less than the equivalent ticks_since_epoch. Subtract that away and
      we'll be left with a small number that won't overflow when we scale by 90/1000.

      Many thanks to Scott Weldon for this suggestion.
   */
   unsigned long secs_since_epoch = (ticks_since_epoch / 1000) * 90;
 8005b94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b96:	4a24      	ldr	r2, [pc, #144]	; (8005c28 <_ZN10IridiumSBD13getSystemTimeER2tm+0x118>)
 8005b98:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9c:	099b      	lsrs	r3, r3, #6
 8005b9e:	225a      	movs	r2, #90	; 0x5a
 8005ba0:	fb02 f303 	mul.w	r3, r2, r3
 8005ba4:	663b      	str	r3, [r7, #96]	; 0x60
   unsigned long small_ticks = ticks_since_epoch - (secs_since_epoch / 90) * 1000;
 8005ba6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ba8:	085b      	lsrs	r3, r3, #1
 8005baa:	4a20      	ldr	r2, [pc, #128]	; (8005c2c <_ZN10IridiumSBD13getSystemTimeER2tm+0x11c>)
 8005bac:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb0:	095b      	lsrs	r3, r3, #5
 8005bb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005bb6:	fb02 f303 	mul.w	r3, r2, r3
 8005bba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	65fb      	str	r3, [r7, #92]	; 0x5c
   secs_since_epoch += small_ticks * 90 / 1000;
 8005bc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bc2:	225a      	movs	r2, #90	; 0x5a
 8005bc4:	fb02 f303 	mul.w	r3, r2, r3
 8005bc8:	4a17      	ldr	r2, [pc, #92]	; (8005c28 <_ZN10IridiumSBD13getSystemTimeER2tm+0x118>)
 8005bca:	fba2 2303 	umull	r2, r3, r2, r3
 8005bce:	099b      	lsrs	r3, r3, #6
 8005bd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005bd2:	4413      	add	r3, r2
 8005bd4:	663b      	str	r3, [r7, #96]	; 0x60

   time_t epoch_time = mktime(&epoch_start);
 8005bd6:	f107 0314 	add.w	r3, r7, #20
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f00c fa7a 	bl	80120d4 <mktime>
 8005be0:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
   time_t now = epoch_time + secs_since_epoch;
 8005be4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005be6:	4618      	mov	r0, r3
 8005be8:	f04f 0100 	mov.w	r1, #0
 8005bec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005bf0:	1884      	adds	r4, r0, r2
 8005bf2:	eb41 0503 	adc.w	r5, r1, r3
 8005bf6:	e9c7 4502 	strd	r4, r5, [r7, #8]
   memcpy(&tm, localtime(&now), sizeof tm);
 8005bfa:	f107 0308 	add.w	r3, r7, #8
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f00c f836 	bl	8011c70 <localtime>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2224      	movs	r2, #36	; 0x24
 8005c08:	4619      	mov	r1, r3
 8005c0a:	6838      	ldr	r0, [r7, #0]
 8005c0c:	f00c f95a 	bl	8011ec4 <memcpy>
   return ISBD_SUCCESS;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3768      	adds	r7, #104	; 0x68
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bdb0      	pop	{r4, r5, r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	08018ac0 	.word	0x08018ac0
 8005c20:	08018ad8 	.word	0x08018ad8
 8005c24:	08018acc 	.word	0x08018acc
 8005c28:	10624dd3 	.word	0x10624dd3
 8005c2c:	b60b60b7 	.word	0xb60b60b7

08005c30 <_ZN10IridiumSBD18getFirmwareVersionEPcj>:

int IridiumSBD::getFirmwareVersion(char *version, size_t bufferSize)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af02      	add	r7, sp, #8
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
   if (bufferSize < 8)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b07      	cmp	r3, #7
 8005c40:	d801      	bhi.n	8005c46 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x16>
      return ISBD_RX_OVERFLOW;
 8005c42:	2308      	movs	r3, #8
 8005c44:	e01e      	b.n	8005c84 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   send(F("AT+CGMR\r"));
 8005c46:	2301      	movs	r3, #1
 8005c48:	2201      	movs	r2, #1
 8005c4a:	4910      	ldr	r1, [pc, #64]	; (8005c8c <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x5c>)
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f001 fb1f 	bl	8007290 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(version, bufferSize, "Call Processor Version: "))
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	4b0e      	ldr	r3, [pc, #56]	; (8005c90 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x60>)
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	4b0e      	ldr	r3, [pc, #56]	; (8005c94 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x64>)
 8005c5a:	68b9      	ldr	r1, [r7, #8]
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f000 feb5 	bl	80069cc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8005c62:	4603      	mov	r3, r0
 8005c64:	f083 0301 	eor.w	r3, r3, #1
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d009      	beq.n	8005c82 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x52>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 ff6a 	bl	8006b48 <_ZN10IridiumSBD9cancelledEv>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x4e>
 8005c7a:	2304      	movs	r3, #4
 8005c7c:	e002      	b.n	8005c84 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e000      	b.n	8005c84 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   return ISBD_SUCCESS;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	08018ae0 	.word	0x08018ae0
 8005c90:	08018ad8 	.word	0x08018ad8
 8005c94:	08018aec 	.word	0x08018aec

08005c98 <_ZN10IridiumSBD21enableSuperCapChargerEb>:

void IridiumSBD::enableSuperCapCharger(bool enable)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the charger manually)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	7c5b      	ldrb	r3, [r3, #17]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d004      	beq.n	8005cb6 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x1e>
  {
    diagprint(F("enableSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8005cac:	4918      	ldr	r1, [pc, #96]	; (8005d10 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x78>)
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f001 fc6c 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8005cb4:	e028      	b.n	8005d08 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x70>
  }

  // Enable/disable the supercapacitor charger by pulling its SHDN pin high/low
  check9603pins(); // Update IO_REGISTER
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f001 ff59 	bl	8007b6e <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8005cbc:	78fb      	ldrb	r3, [r7, #3]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00b      	beq.n	8005cda <_ZN10IridiumSBD21enableSuperCapChargerEb+0x42>
  {
    IO_REGISTER |= IO_SHDN; // Set the SHDN bit
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	b2da      	uxtb	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8005cd8:	e00f      	b.n	8005cfa <_ZN10IridiumSBD21enableSuperCapChargerEb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_SHDN; // Clear the SHDN bit
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005ce0:	b25a      	sxtb	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005ce8:	b25b      	sxtb	r3, r3
 8005cea:	43db      	mvns	r3, r3
 8005cec:	b25b      	sxtb	r3, r3
 8005cee:	4013      	ands	r3, r2
 8005cf0:	b25b      	sxtb	r3, r3
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
  set9603pins(IO_REGISTER); // Update the pins
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005d00:	4619      	mov	r1, r3
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f001 ff6c 	bl	8007be0 <_ZN10IridiumSBD11set9603pinsEh>
}
 8005d08:	3708      	adds	r7, #8
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	08018b08 	.word	0x08018b08

08005d14 <_ZN10IridiumSBD20checkSuperCapChargerEv>:

bool IridiumSBD::checkSuperCapCharger()
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial (the user will have to check PGOOD manually)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	7c5b      	ldrb	r3, [r3, #17]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d005      	beq.n	8005d30 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x1c>
  {
    diagprint(F("checkSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8005d24:	4912      	ldr	r1, [pc, #72]	; (8005d70 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x5c>)
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f001 fc30 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return(false);
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	e01a      	b.n	8005d66 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x52>
  }

  // Check the status of the supercapacitor charger PGOOD pin
  check9603pins(); // Update IO_REGISTER
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f001 ff1c 	bl	8007b6e <_ZN10IridiumSBD13check9603pinsEv>
  if (IO_REGISTER &= IO_PGOOD) // If the PGOOD bit is set, return true
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8005d42:	4013      	ands	r3, r2
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	bf14      	ite	ne
 8005d56:	2301      	movne	r3, #1
 8005d58:	2300      	moveq	r3, #0
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d001      	beq.n	8005d64 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x50>
  {
    return(true);
 8005d60:	2301      	movs	r3, #1
 8005d62:	e000      	b.n	8005d66 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x52>
  }
  else
  {
    return(false);
 8005d64:	2300      	movs	r3, #0
  }
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3708      	adds	r7, #8
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	08018b54 	.word	0x08018b54

08005d74 <_ZN10IridiumSBD16enable9603NpowerEb>:

void IridiumSBD::enable9603Npower(bool enable)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N power manually)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	7c5b      	ldrb	r3, [r3, #17]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d004      	beq.n	8005d92 <_ZN10IridiumSBD16enable9603NpowerEb+0x1e>
  {
    diagprint(F("enable9603Npower is only valid when using I2C on the Qwiic Iridium\r\n"));
 8005d88:	4918      	ldr	r1, [pc, #96]	; (8005dec <_ZN10IridiumSBD16enable9603NpowerEb+0x78>)
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f001 fbfe 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8005d90:	e028      	b.n	8005de4 <_ZN10IridiumSBD16enable9603NpowerEb+0x70>
  }

  // Enable/disable power to the 9603N by pulling PWR_EN high/low
  check9603pins(); // Update IO_REGISTER
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f001 feeb 	bl	8007b6e <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8005d98:	78fb      	ldrb	r3, [r7, #3]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00b      	beq.n	8005db6 <_ZN10IridiumSBD16enable9603NpowerEb+0x42>
  {
    IO_REGISTER |= IO_PWR_EN; // Set the PWR_EN bit
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8005daa:	4313      	orrs	r3, r2
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8005db4:	e00f      	b.n	8005dd6 <_ZN10IridiumSBD16enable9603NpowerEb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_PWR_EN; // Clear the PWR_EN bit
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005dbc:	b25a      	sxtb	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8005dc4:	b25b      	sxtb	r3, r3
 8005dc6:	43db      	mvns	r3, r3
 8005dc8:	b25b      	sxtb	r3, r3
 8005dca:	4013      	ands	r3, r2
 8005dcc:	b25b      	sxtb	r3, r3
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
  set9603pins(IO_REGISTER); // Update the pins
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005ddc:	4619      	mov	r1, r3
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f001 fefe 	bl	8007be0 <_ZN10IridiumSBD11set9603pinsEh>
}
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	08018ba0 	.word	0x08018ba0

08005df0 <_ZN10IridiumSBD10enable9603Eb>:

void IridiumSBD::enable9603(bool enable)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N manually)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	7c5b      	ldrb	r3, [r3, #17]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d004      	beq.n	8005e0e <_ZN10IridiumSBD10enable9603Eb+0x1e>
  {
    diagprint(F("enable9603 is only valid when using I2C on the Qwiic Iridium\r\n"));
 8005e04:	4918      	ldr	r1, [pc, #96]	; (8005e68 <_ZN10IridiumSBD10enable9603Eb+0x78>)
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f001 fbc0 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8005e0c:	e028      	b.n	8005e60 <_ZN10IridiumSBD10enable9603Eb+0x70>
  }

  // Enable/disable the 9603 by pulling ON_OFF high/low
  check9603pins(); // Update IO_REGISTER
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f001 fead 	bl	8007b6e <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8005e14:	78fb      	ldrb	r3, [r7, #3]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00b      	beq.n	8005e32 <_ZN10IridiumSBD10enable9603Eb+0x42>
  {
    IO_REGISTER |= IO_ON_OFF; // Set the ON_OFF bit
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8005e26:	4313      	orrs	r3, r2
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8005e30:	e00f      	b.n	8005e52 <_ZN10IridiumSBD10enable9603Eb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_ON_OFF; // Clear the ON_OFF bit
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005e38:	b25a      	sxtb	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8005e40:	b25b      	sxtb	r3, r3
 8005e42:	43db      	mvns	r3, r3
 8005e44:	b25b      	sxtb	r3, r3
 8005e46:	4013      	ands	r3, r2
 8005e48:	b25b      	sxtb	r3, r3
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
  set9603pins(IO_REGISTER); // Update the pins
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005e58:	4619      	mov	r1, r3
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f001 fec0 	bl	8007be0 <_ZN10IridiumSBD11set9603pinsEh>
}
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	08018be8 	.word	0x08018be8

08005e6c <_ZN10IridiumSBD18clearRingIndicatorEv>:
    return(false);
  }
}

void IridiumSBD::clearRingIndicator()
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	7c5b      	ldrb	r3, [r3, #17]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d004      	beq.n	8005e86 <_ZN10IridiumSBD18clearRingIndicatorEv+0x1a>
  {
    diagprint(F("clearRingIndicator is only valid when using I2C on the Qwiic Iridium\r\n"));
 8005e7c:	4912      	ldr	r1, [pc, #72]	; (8005ec8 <_ZN10IridiumSBD18clearRingIndicatorEv+0x5c>)
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f001 fb84 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8005e84:	e01d      	b.n	8005ec2 <_ZN10IridiumSBD18clearRingIndicatorEv+0x56>
  }

  // Clear the 9603 RI flag
  check9603pins(); // Update IO_REGISTER
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f001 fe71 	bl	8007b6e <_ZN10IridiumSBD13check9603pinsEv>
  IO_REGISTER &= ~IO_RI; // Clear the RI bit
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005e92:	b25a      	sxtb	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005e9a:	b25b      	sxtb	r3, r3
 8005e9c:	43db      	mvns	r3, r3
 8005e9e:	b25b      	sxtb	r3, r3
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	b25b      	sxtb	r3, r3
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  set9603pins(IO_REGISTER); // Update the pins
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f001 fe93 	bl	8007be0 <_ZN10IridiumSBD11set9603pinsEh>
  this->ringAsserted = false; // Also clear the ringAsserted flag
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
}
 8005ec2:	3708      	adds	r7, #8
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	08018cb8 	.word	0x08018cb8

08005ecc <_ZN10IridiumSBD21checkNetworkAvailableEv>:

bool IridiumSBD::checkNetworkAvailable()
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	7c5b      	ldrb	r3, [r3, #17]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d005      	beq.n	8005ee8 <_ZN10IridiumSBD21checkNetworkAvailableEv+0x1c>
  {
    diagprint(F("checkNetworkAvailable is only valid when using I2C on the Qwiic Iridium\r\n"));
 8005edc:	4912      	ldr	r1, [pc, #72]	; (8005f28 <_ZN10IridiumSBD21checkNetworkAvailableEv+0x5c>)
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f001 fb54 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return(false);
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	e01a      	b.n	8005f1e <_ZN10IridiumSBD21checkNetworkAvailableEv+0x52>
  }

  // Check the status of the 9603 Network Available pin
  check9603pins(); // Update IO_REGISTER
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f001 fe40 	bl	8007b6e <_ZN10IridiumSBD13check9603pinsEv>
  if (IO_REGISTER &= IO_NA) // If the NA bit is set, return true
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005efa:	4013      	ands	r3, r2
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	bf14      	ite	ne
 8005f0e:	2301      	movne	r3, #1
 8005f10:	2300      	moveq	r3, #0
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d001      	beq.n	8005f1c <_ZN10IridiumSBD21checkNetworkAvailableEv+0x50>
  {
    return(true);
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e000      	b.n	8005f1e <_ZN10IridiumSBD21checkNetworkAvailableEv+0x52>
  }
  else
  {
    return(false);
 8005f1c:	2300      	movs	r3, #0
  }
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3708      	adds	r7, #8
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	08018d00 	.word	0x08018d00

08005f2c <_ZN10IridiumSBD12clearBuffersEi>:

// High-level wrapper for AT+SBDD
int IridiumSBD::clearBuffers(int buffers)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
   if (this->reentrant)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <_ZN10IridiumSBD12clearBuffersEi+0x18>
      return ISBD_REENTRANT;
 8005f40:	2309      	movs	r3, #9
 8005f42:	e00d      	b.n	8005f60 <_ZN10IridiumSBD12clearBuffersEi+0x34>

   this->reentrant = true;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalClearBuffers(buffers);
 8005f4c:	6839      	ldr	r1, [r7, #0]
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f001 fed0 	bl	8007cf4 <_ZN10IridiumSBD20internalClearBuffersEi>
 8005f54:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <_ZN10IridiumSBD7getIMEIEPcj>:

// High-level wrapper for AT+CGSN
int IridiumSBD::getIMEI(char *IMEI, size_t bufferSize)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
   if (this->reentrant)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d001      	beq.n	8005f82 <_ZN10IridiumSBD7getIMEIEPcj+0x1a>
      return ISBD_REENTRANT;
 8005f7e:	2309      	movs	r3, #9
 8005f80:	e00e      	b.n	8005fa0 <_ZN10IridiumSBD7getIMEIEPcj+0x38>

   this->reentrant = true;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalGetIMEI(IMEI, bufferSize);
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	68b9      	ldr	r1, [r7, #8]
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f001 fefc 	bl	8007d8c <_ZN10IridiumSBD15internalGetIMEIEPcj>
 8005f94:	6178      	str	r0, [r7, #20]
   this->reentrant = false;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 8005f9e:	697b      	ldr	r3, [r7, #20]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3718      	adds	r7, #24
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <_ZN10IridiumSBD11isConnectedEv>:

//Returns true if the I2C device is connected
//Always returns true for serial
//boolean IridiumSBD::isConnected() TODO
bool IridiumSBD::isConnected()
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
   if (this->useSerial) // If we are using Serial
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	7c5b      	ldrb	r3, [r3, #17]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d001      	beq.n	8005fbc <_ZN10IridiumSBD11isConnectedEv+0x14>
   {
		return true;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e012      	b.n	8005fe2 <_ZN10IridiumSBD11isConnectedEv+0x3a>
   }
   else
   {
		wireport->beginTransmission((uint8_t)deviceaddress);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	68da      	ldr	r2, [r3, #12]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	7c1b      	ldrb	r3, [r3, #16]
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	4610      	mov	r0, r2
 8005fc8:	f002 fce0 	bl	800898c <_ZN7TwoWire17beginTransmissionEh>
		return (wireport->endTransmission() == 0); // Check that the device ack's
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f002 fd25 	bl	8008a20 <_ZN7TwoWire15endTransmissionEv>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	bf0c      	ite	eq
 8005fdc:	2301      	moveq	r3, #1
 8005fde:	2300      	movne	r3, #0
 8005fe0:	b2db      	uxtb	r3, r3
   }
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3708      	adds	r7, #8
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
	...

08005fec <_ZN10IridiumSBD13internalBeginEv>:
/*
Private interface
*/

int IridiumSBD::internalBegin()
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b090      	sub	sp, #64	; 0x40
 8005ff0:	af02      	add	r7, sp, #8
 8005ff2:	6078      	str	r0, [r7, #4]
   diagprint(F("Calling internalBegin\r\n"));
 8005ff4:	49b0      	ldr	r1, [pc, #704]	; (80062b8 <_ZN10IridiumSBD13internalBeginEv+0x2cc>)
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f001 fac8 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (!this->asleep)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8006002:	f083 0301 	eor.w	r3, r3, #1
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b00      	cmp	r3, #0
 800600a:	d001      	beq.n	8006010 <_ZN10IridiumSBD13internalBeginEv+0x24>
      return ISBD_ALREADY_AWAKE;
 800600c:	2301      	movs	r3, #1
 800600e:	e14f      	b.n	80062b0 <_ZN10IridiumSBD13internalBeginEv+0x2c4>

   if (!this->useSerial) // If we are using I2C
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	7c5b      	ldrb	r3, [r3, #17]
 8006014:	f083 0301 	eor.w	r3, r3, #1
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	d005      	beq.n	800602a <_ZN10IridiumSBD13internalBeginEv+0x3e>
   {
      check9603pins(); // Update IO_REGISTER with the status of the 9603 pins
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f001 fda5 	bl	8007b6e <_ZN10IridiumSBD13check9603pinsEv>
      check9603data(); // Get any waiting 9603 serial data
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f001 fcd1 	bl	80079cc <_ZN10IridiumSBD13check9603dataEv>
   }

   power(true); // power on
 800602a:	2101      	movs	r1, #1
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f001 f873 	bl	8007118 <_ZN10IridiumSBD5powerEb>

   bool modemAlive = false;
 8006032:	2300      	movs	r3, #0
 8006034:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

   unsigned long startupTime = 500; //ms
 8006038:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800603c:	62fb      	str	r3, [r7, #44]	; 0x2c
   for (unsigned long start = millis(); millis() - start < startupTime;)
 800603e:	f003 f965 	bl	800930c <HAL_GetTick>
 8006042:	62b8      	str	r0, [r7, #40]	; 0x28
 8006044:	f003 f962 	bl	800930c <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006050:	429a      	cmp	r2, r3
 8006052:	bf8c      	ite	hi
 8006054:	2301      	movhi	r3, #1
 8006056:	2300      	movls	r3, #0
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d007      	beq.n	800606e <_ZN10IridiumSBD13internalBeginEv+0x82>
      if (cancelled())
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 fd72 	bl	8006b48 <_ZN10IridiumSBD9cancelledEv>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d0ec      	beq.n	8006044 <_ZN10IridiumSBD13internalBeginEv+0x58>
         return ISBD_CANCELLED;
 800606a:	2304      	movs	r3, #4
 800606c:	e120      	b.n	80062b0 <_ZN10IridiumSBD13internalBeginEv+0x2c4>

   if (this->useSerial) // If we are using Serial
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	7c5b      	ldrb	r3, [r3, #17]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d002      	beq.n	800607c <_ZN10IridiumSBD13internalBeginEv+0x90>
      beginSerialPort(); // Apollo3 v2.1 Serial fix - begin the Serial port 500ms after power(true)
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f001 f8ee 	bl	8007258 <_ZN10IridiumSBD15beginSerialPortEv>

   // Turn on modem and wait for a response from "AT" command to begin
   for (unsigned long start = millis(); !modemAlive && millis() - start < 1000UL * this->startupTimeout;)
 800607c:	f003 f946 	bl	800930c <HAL_GetTick>
 8006080:	6278      	str	r0, [r7, #36]	; 0x24
 8006082:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006086:	f083 0301 	eor.w	r3, r3, #1
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00f      	beq.n	80060b0 <_ZN10IridiumSBD13internalBeginEv+0xc4>
 8006090:	f003 f93c 	bl	800930c <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006098:	1ad2      	subs	r2, r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800609e:	4619      	mov	r1, r3
 80060a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80060a4:	fb03 f301 	mul.w	r3, r3, r1
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d201      	bcs.n	80060b0 <_ZN10IridiumSBD13internalBeginEv+0xc4>
 80060ac:	2301      	movs	r3, #1
 80060ae:	e000      	b.n	80060b2 <_ZN10IridiumSBD13internalBeginEv+0xc6>
 80060b0:	2300      	movs	r3, #0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d018      	beq.n	80060e8 <_ZN10IridiumSBD13internalBeginEv+0xfc>
   {
      send(F("AT\r"));
 80060b6:	2301      	movs	r3, #1
 80060b8:	2201      	movs	r2, #1
 80060ba:	4980      	ldr	r1, [pc, #512]	; (80062bc <_ZN10IridiumSBD13internalBeginEv+0x2d0>)
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f001 f8e7 	bl	8007290 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      modemAlive = waitForATResponse();
 80060c2:	4b7f      	ldr	r3, [pc, #508]	; (80062c0 <_ZN10IridiumSBD13internalBeginEv+0x2d4>)
 80060c4:	9300      	str	r3, [sp, #0]
 80060c6:	2300      	movs	r3, #0
 80060c8:	2200      	movs	r2, #0
 80060ca:	2100      	movs	r1, #0
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 fc7d 	bl	80069cc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80060d2:	4603      	mov	r3, r0
 80060d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (cancelled())
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 fd35 	bl	8006b48 <_ZN10IridiumSBD9cancelledEv>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d0ce      	beq.n	8006082 <_ZN10IridiumSBD13internalBeginEv+0x96>
         return ISBD_CANCELLED;
 80060e4:	2304      	movs	r3, #4
 80060e6:	e0e3      	b.n	80062b0 <_ZN10IridiumSBD13internalBeginEv+0x2c4>
   }

   if (!modemAlive)
 80060e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060ec:	f083 0301 	eor.w	r3, r3, #1
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d005      	beq.n	8006102 <_ZN10IridiumSBD13internalBeginEv+0x116>
   {
      diagprint(F("No modem detected.\r\n"));
 80060f6:	4973      	ldr	r1, [pc, #460]	; (80062c4 <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f001 fa47 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      return ISBD_NO_MODEM_DETECTED;
 80060fe:	2305      	movs	r3, #5
 8006100:	e0d6      	b.n	80062b0 <_ZN10IridiumSBD13internalBeginEv+0x2c4>
   }

   // The usual initialization sequence
   const char *strings[3] = { "ATE1\r", "AT&D0\r", "AT&K0\r" };
 8006102:	4a71      	ldr	r2, [pc, #452]	; (80062c8 <_ZN10IridiumSBD13internalBeginEv+0x2dc>)
 8006104:	f107 0310 	add.w	r3, r7, #16
 8006108:	ca07      	ldmia	r2, {r0, r1, r2}
 800610a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   for (int i=0; i<3; ++i)
 800610e:	2300      	movs	r3, #0
 8006110:	633b      	str	r3, [r7, #48]	; 0x30
 8006112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006114:	2b02      	cmp	r3, #2
 8006116:	dc26      	bgt.n	8006166 <_ZN10IridiumSBD13internalBeginEv+0x17a>
   {
      send(strings[i]);
 8006118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006120:	4413      	add	r3, r2
 8006122:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8006126:	4619      	mov	r1, r3
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f001 f90d 	bl	8007348 <_ZN10IridiumSBD4sendEPKc>
      if (!waitForATResponse())
 800612e:	4b64      	ldr	r3, [pc, #400]	; (80062c0 <_ZN10IridiumSBD13internalBeginEv+0x2d4>)
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	2300      	movs	r3, #0
 8006134:	2200      	movs	r2, #0
 8006136:	2100      	movs	r1, #0
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 fc47 	bl	80069cc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 800613e:	4603      	mov	r3, r0
 8006140:	f083 0301 	eor.w	r3, r3, #1
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d009      	beq.n	800615e <_ZN10IridiumSBD13internalBeginEv+0x172>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fcfc 	bl	8006b48 <_ZN10IridiumSBD9cancelledEv>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <_ZN10IridiumSBD13internalBeginEv+0x16e>
 8006156:	2304      	movs	r3, #4
 8006158:	e0aa      	b.n	80062b0 <_ZN10IridiumSBD13internalBeginEv+0x2c4>
 800615a:	2303      	movs	r3, #3
 800615c:	e0a8      	b.n	80062b0 <_ZN10IridiumSBD13internalBeginEv+0x2c4>
   for (int i=0; i<3; ++i)
 800615e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006160:	3301      	adds	r3, #1
 8006162:	633b      	str	r3, [r7, #48]	; 0x30
 8006164:	e7d5      	b.n	8006112 <_ZN10IridiumSBD13internalBeginEv+0x126>
   }

   // Enable or disable RING alerts as requested by user
   // By default they are on if a RING pin was supplied on constructor
   diagprint(F("Ring alerts are")); diagprint(ringAlertsEnabled ? F("") : F(" NOT")); diagprint(F(" enabled.\r\n"));
 8006166:	4959      	ldr	r1, [pc, #356]	; (80062cc <_ZN10IridiumSBD13internalBeginEv+0x2e0>)
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f001 fa0f 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8006174:	2b00      	cmp	r3, #0
 8006176:	d001      	beq.n	800617c <_ZN10IridiumSBD13internalBeginEv+0x190>
 8006178:	4b55      	ldr	r3, [pc, #340]	; (80062d0 <_ZN10IridiumSBD13internalBeginEv+0x2e4>)
 800617a:	e000      	b.n	800617e <_ZN10IridiumSBD13internalBeginEv+0x192>
 800617c:	4b55      	ldr	r3, [pc, #340]	; (80062d4 <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 800617e:	4619      	mov	r1, r3
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f001 fa03 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8006186:	4954      	ldr	r1, [pc, #336]	; (80062d8 <_ZN10IridiumSBD13internalBeginEv+0x2ec>)
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f001 f9ff 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (ringAlertsEnabled) enableRingAlerts(true); // This will clear ringAsserted and the Ring Indicator flag
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8006194:	2b00      	cmp	r3, #0
 8006196:	d004      	beq.n	80061a2 <_ZN10IridiumSBD13internalBeginEv+0x1b6>
 8006198:	2101      	movs	r1, #1
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7ff fc98 	bl	8005ad0 <_ZN10IridiumSBD16enableRingAlertsEb>
 80061a0:	e009      	b.n	80061b6 <_ZN10IridiumSBD13internalBeginEv+0x1ca>
   else {
	   if (!this->useSerial) clearRingIndicator(); // If ring alerts are not enabled and using I2C, make sure the Ring Indicator flag is clear
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	7c5b      	ldrb	r3, [r3, #17]
 80061a6:	f083 0301 	eor.w	r3, r3, #1
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d002      	beq.n	80061b6 <_ZN10IridiumSBD13internalBeginEv+0x1ca>
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f7ff fe5b 	bl	8005e6c <_ZN10IridiumSBD18clearRingIndicatorEv>
   }

   send(ringAlertsEnabled ? F("AT+SBDMTA=1\r") : F("AT+SBDMTA=0\r"));
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <_ZN10IridiumSBD13internalBeginEv+0x1d8>
 80061c0:	4946      	ldr	r1, [pc, #280]	; (80062dc <_ZN10IridiumSBD13internalBeginEv+0x2f0>)
 80061c2:	e000      	b.n	80061c6 <_ZN10IridiumSBD13internalBeginEv+0x1da>
 80061c4:	4946      	ldr	r1, [pc, #280]	; (80062e0 <_ZN10IridiumSBD13internalBeginEv+0x2f4>)
 80061c6:	2301      	movs	r3, #1
 80061c8:	2201      	movs	r2, #1
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f001 f860 	bl	8007290 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   HAL_Delay(10); //TODO Added
 80061d0:	200a      	movs	r0, #10
 80061d2:	f003 f8a7 	bl	8009324 <HAL_Delay>
   if (!waitForATResponse())
 80061d6:	4b3a      	ldr	r3, [pc, #232]	; (80062c0 <_ZN10IridiumSBD13internalBeginEv+0x2d4>)
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	2300      	movs	r3, #0
 80061dc:	2200      	movs	r2, #0
 80061de:	2100      	movs	r1, #0
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 fbf3 	bl	80069cc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80061e6:	4603      	mov	r3, r0
 80061e8:	f083 0301 	eor.w	r3, r3, #1
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d009      	beq.n	8006206 <_ZN10IridiumSBD13internalBeginEv+0x21a>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fca8 	bl	8006b48 <_ZN10IridiumSBD9cancelledEv>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <_ZN10IridiumSBD13internalBeginEv+0x216>
 80061fe:	2304      	movs	r3, #4
 8006200:	e056      	b.n	80062b0 <_ZN10IridiumSBD13internalBeginEv+0x2c4>
 8006202:	2303      	movs	r3, #3
 8006204:	e054      	b.n	80062b0 <_ZN10IridiumSBD13internalBeginEv+0x2c4>

   // Decide whether the internal MSSTM workaround should be enforced on TX/RX
   // By default it is unless the firmware rev is >= TA13001
   char version[8];
   int ret = getFirmwareVersion(version, sizeof(version));
 8006206:	f107 0308 	add.w	r3, r7, #8
 800620a:	2208      	movs	r2, #8
 800620c:	4619      	mov	r1, r3
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7ff fd0e 	bl	8005c30 <_ZN10IridiumSBD18getFirmwareVersionEPcj>
 8006214:	6238      	str	r0, [r7, #32]
   if (ret != ISBD_SUCCESS)
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d008      	beq.n	800622e <_ZN10IridiumSBD13internalBeginEv+0x242>
   {
      diagprint(F("Unknown FW version\r\n"));
 800621c:	4931      	ldr	r1, [pc, #196]	; (80062e4 <_ZN10IridiumSBD13internalBeginEv+0x2f8>)
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f001 f9b4 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      msstmWorkaroundRequested = true;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 800622c:	e027      	b.n	800627e <_ZN10IridiumSBD13internalBeginEv+0x292>
   }
   else
   {
      diagprint(F("Firmware version is ")); diagprint(version); diagprint(F("\r\n"));
 800622e:	492e      	ldr	r1, [pc, #184]	; (80062e8 <_ZN10IridiumSBD13internalBeginEv+0x2fc>)
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f001 f9ab 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8006236:	f107 0308 	add.w	r3, r7, #8
 800623a:	4619      	mov	r1, r3
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f001 f9c3 	bl	80075c8 <_ZN10IridiumSBD9diagprintEPKc>
 8006242:	492a      	ldr	r1, [pc, #168]	; (80062ec <_ZN10IridiumSBD13internalBeginEv+0x300>)
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f001 f9a1 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (version[0] == 'T' && version[1] == 'A')
 800624a:	7a3b      	ldrb	r3, [r7, #8]
 800624c:	2b54      	cmp	r3, #84	; 0x54
 800624e:	d116      	bne.n	800627e <_ZN10IridiumSBD13internalBeginEv+0x292>
 8006250:	7a7b      	ldrb	r3, [r7, #9]
 8006252:	2b41      	cmp	r3, #65	; 0x41
 8006254:	d113      	bne.n	800627e <_ZN10IridiumSBD13internalBeginEv+0x292>
      {
         unsigned long ver = strtoul(version + 2, NULL, 10);
 8006256:	f107 0308 	add.w	r3, r7, #8
 800625a:	3302      	adds	r3, #2
 800625c:	220a      	movs	r2, #10
 800625e:	2100      	movs	r1, #0
 8006260:	4618      	mov	r0, r3
 8006262:	f00e f9a3 	bl	80145ac <strtoul>
 8006266:	61f8      	str	r0, [r7, #28]
         msstmWorkaroundRequested = ver < ISBD_MSSTM_WORKAROUND_FW_VER;
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800626e:	4293      	cmp	r3, r2
 8006270:	bf94      	ite	ls
 8006272:	2301      	movls	r3, #1
 8006274:	2300      	movhi	r3, #0
 8006276:	b2da      	uxtb	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
      }
   }
   diagprint(F("MSSTM workaround is")); diagprint(msstmWorkaroundRequested ? F("") : F(" NOT")); diagprint(F(" enforced.\r\n"));
 800627e:	491c      	ldr	r1, [pc, #112]	; (80062f0 <_ZN10IridiumSBD13internalBeginEv+0x304>)
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f001 f983 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800628c:	2b00      	cmp	r3, #0
 800628e:	d001      	beq.n	8006294 <_ZN10IridiumSBD13internalBeginEv+0x2a8>
 8006290:	4b0f      	ldr	r3, [pc, #60]	; (80062d0 <_ZN10IridiumSBD13internalBeginEv+0x2e4>)
 8006292:	e000      	b.n	8006296 <_ZN10IridiumSBD13internalBeginEv+0x2aa>
 8006294:	4b0f      	ldr	r3, [pc, #60]	; (80062d4 <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 8006296:	4619      	mov	r1, r3
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f001 f977 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 800629e:	4915      	ldr	r1, [pc, #84]	; (80062f4 <_ZN10IridiumSBD13internalBeginEv+0x308>)
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f001 f973 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   // Done!
   diagprint(F("InternalBegin: success!\r\n"));
 80062a6:	4914      	ldr	r1, [pc, #80]	; (80062f8 <_ZN10IridiumSBD13internalBeginEv+0x30c>)
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f001 f96f 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   return ISBD_SUCCESS;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3738      	adds	r7, #56	; 0x38
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	08018dd8 	.word	0x08018dd8
 80062bc:	08018df0 	.word	0x08018df0
 80062c0:	08018ad8 	.word	0x08018ad8
 80062c4:	08018df4 	.word	0x08018df4
 80062c8:	08018ec8 	.word	0x08018ec8
 80062cc:	08018e0c 	.word	0x08018e0c
 80062d0:	08018e1c 	.word	0x08018e1c
 80062d4:	08018e20 	.word	0x08018e20
 80062d8:	08018e28 	.word	0x08018e28
 80062dc:	08018e34 	.word	0x08018e34
 80062e0:	08018e44 	.word	0x08018e44
 80062e4:	08018e54 	.word	0x08018e54
 80062e8:	08018e6c 	.word	0x08018e6c
 80062ec:	08018e84 	.word	0x08018e84
 80062f0:	08018e88 	.word	0x08018e88
 80062f4:	08018e9c 	.word	0x08018e9c
 80062f8:	08018eac 	.word	0x08018eac

080062fc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj>:

int IridiumSBD::internalSendReceiveSBD(const char *txTxtMessage, const uint8_t *txData, size_t txDataSize, uint8_t *rxBuffer, size_t *prxBufferSize)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b096      	sub	sp, #88	; 0x58
 8006300:	af04      	add	r7, sp, #16
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	603b      	str	r3, [r7, #0]
   diagprint(F("internalSendReceive\r\n"));
 800630a:	49a5      	ldr	r1, [pc, #660]	; (80065a0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2a4>)
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f001 f93d 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (this->asleep)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x24>
      return ISBD_IS_ASLEEP;
 800631c:	230a      	movs	r3, #10
 800631e:	e289      	b.n	8006834 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

   // Binary transmission?
   if (txData && txDataSize)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	f000 8152 	beq.w	80065cc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2d0>
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 814e 	beq.w	80065cc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2d0>
   {
      if (txDataSize > ISBD_MAX_MESSAGE_LENGTH)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8006336:	d901      	bls.n	800633c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x40>
         return ISBD_MSG_TOO_LONG;
 8006338:	230d      	movs	r3, #13
 800633a:	e27b      	b.n	8006834 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

      // send will use serial or wire as appropriate
      send(F("AT+SBDWB="), true, false);
 800633c:	2300      	movs	r3, #0
 800633e:	2201      	movs	r2, #1
 8006340:	4998      	ldr	r1, [pc, #608]	; (80065a4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2a8>)
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 ffa4 	bl	8007290 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      send(txDataSize);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	b29b      	uxth	r3, r3
 800634c:	4619      	mov	r1, r3
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f001 f8d6 	bl	8007500 <_ZN10IridiumSBD4sendEt>
      send(F("\r"), false);
 8006354:	2301      	movs	r3, #1
 8006356:	2200      	movs	r2, #0
 8006358:	4993      	ldr	r1, [pc, #588]	; (80065a8 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2ac>)
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f000 ff98 	bl	8007290 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      if (!waitForATResponse(NULL, 0, NULL, "READY\r\n"))
 8006360:	4b92      	ldr	r3, [pc, #584]	; (80065ac <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2b0>)
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	2300      	movs	r3, #0
 8006366:	2200      	movs	r2, #0
 8006368:	2100      	movs	r1, #0
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f000 fb2e 	bl	80069cc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006370:	4603      	mov	r3, r0
 8006372:	f083 0301 	eor.w	r3, r3, #1
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b00      	cmp	r3, #0
 800637a:	d009      	beq.n	8006390 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x94>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f000 fbe3 	bl	8006b48 <_ZN10IridiumSBD9cancelledEv>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d001      	beq.n	800638c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x90>
 8006388:	2304      	movs	r3, #4
 800638a:	e253      	b.n	8006834 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 800638c:	2303      	movs	r3, #3
 800638e:	e251      	b.n	8006834 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

      uint16_t checksum = 0;
 8006390:	2300      	movs	r3, #0
 8006392:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

      if (this->useSerial)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	7c5b      	ldrb	r3, [r3, #17]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d03a      	beq.n	8006414 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x118>
      {
         for (size_t i=0; i<txDataSize; ++i)
 800639e:	2300      	movs	r3, #0
 80063a0:	643b      	str	r3, [r7, #64]	; 0x40
 80063a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d21a      	bcs.n	80063e0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0xe4>
         {
            stream->write(txData[i]);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	4618      	mov	r0, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6879      	ldr	r1, [r7, #4]
 80063ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063bc:	440a      	add	r2, r1
 80063be:	7812      	ldrb	r2, [r2, #0]
 80063c0:	4611      	mov	r1, r2
 80063c2:	4798      	blx	r3
            checksum += (uint16_t)txData[i];
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063c8:	4413      	add	r3, r2
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80063d2:	4413      	add	r3, r2
 80063d4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
         for (size_t i=0; i<txDataSize; ++i)
 80063d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063da:	3301      	adds	r3, #1
 80063dc:	643b      	str	r3, [r7, #64]	; 0x40
 80063de:	e7e0      	b.n	80063a2 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0xa6>
         }
         stream->write((uint8_t)(checksum >> 8));
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	4618      	mov	r0, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80063f2:	1212      	asrs	r2, r2, #8
 80063f4:	b2d2      	uxtb	r2, r2
 80063f6:	4611      	mov	r1, r2
 80063f8:	4798      	blx	r3
         stream->write((uint8_t)(checksum & 0xFF));
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	4618      	mov	r0, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800640c:	b2d2      	uxtb	r2, r2
 800640e:	4611      	mov	r1, r2
 8006410:	4798      	blx	r3
 8006412:	e092      	b.n	800653a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x23e>
      }
      else
      {
         //lastCheck = millis(); // Update lastCheck so we enforce a full I2C_POLLING_WAIT
         // We need to make sure we don't send too much I2C data in one go (otherwise we will overflow the ATtiny841's I2C buffer)
         size_t bytes_to_send = txDataSize; // Send this many bytes in total
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	63fb      	str	r3, [r7, #60]	; 0x3c
         size_t i=0;
 8006418:	2300      	movs	r3, #0
 800641a:	63bb      	str	r3, [r7, #56]	; 0x38
         size_t nexti;
         while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 3)) // If there are too many bytes to send all in one go
 800641c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800641e:	2b1d      	cmp	r3, #29
 8006420:	d937      	bls.n	8006492 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x196>
         {
            nexti = i + (TINY_I2C_BUFFER_LENGTH - 3);
 8006422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006424:	331d      	adds	r3, #29
 8006426:	637b      	str	r3, [r7, #52]	; 0x34
            wireport->beginTransmission((uint8_t)deviceaddress);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	68da      	ldr	r2, [r3, #12]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	7c1b      	ldrb	r3, [r3, #16]
 8006430:	4619      	mov	r1, r3
 8006432:	4610      	mov	r0, r2
 8006434:	f002 faaa 	bl	800898c <_ZN7TwoWire17beginTransmissionEh>
            wireport->write(DATA_REG); // Point to the serial data 'register'
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	21ff      	movs	r1, #255	; 0xff
 800643e:	4618      	mov	r0, r3
 8006440:	f7ff fa9a 	bl	8005978 <_ZN7TwoWire5writeEi>
            for (; i<nexti; ++i)
 8006444:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006448:	429a      	cmp	r2, r3
 800644a:	d219      	bcs.n	8006480 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x184>
            {
               wireport->write(txData[i]); // Write each byte
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	68d8      	ldr	r0, [r3, #12]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6879      	ldr	r1, [r7, #4]
 800645a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800645c:	440a      	add	r2, r1
 800645e:	7812      	ldrb	r2, [r2, #0]
 8006460:	4611      	mov	r1, r2
 8006462:	4798      	blx	r3
               checksum += (uint16_t)txData[i];
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006468:	4413      	add	r3, r2
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	b29a      	uxth	r2, r3
 800646e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006472:	4413      	add	r3, r2
 8006474:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            for (; i<nexti; ++i)
 8006478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647a:	3301      	adds	r3, #1
 800647c:	63bb      	str	r3, [r7, #56]	; 0x38
 800647e:	e7e1      	b.n	8006444 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x148>
            }
            bytes_to_send = bytes_to_send - (TINY_I2C_BUFFER_LENGTH - 3); // Decrease the number of bytes still to send
 8006480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006482:	3b1d      	subs	r3, #29
 8006484:	63fb      	str	r3, [r7, #60]	; 0x3c
            wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	4618      	mov	r0, r3
 800648c:	f002 fac8 	bl	8008a20 <_ZN7TwoWire15endTransmissionEv>
         while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 3)) // If there are too many bytes to send all in one go
 8006490:	e7c4      	b.n	800641c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x120>
         }
         // There are now <= (TINY_I2C_BUFFER_LENGTH - 3) bytes left to send, so send them and then release the bus
         wireport->beginTransmission((uint8_t)deviceaddress);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	68da      	ldr	r2, [r3, #12]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	7c1b      	ldrb	r3, [r3, #16]
 800649a:	4619      	mov	r1, r3
 800649c:	4610      	mov	r0, r2
 800649e:	f002 fa75 	bl	800898c <_ZN7TwoWire17beginTransmissionEh>
         wireport->write(DATA_REG); // Point to the 'serial register'
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	21ff      	movs	r1, #255	; 0xff
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7ff fa65 	bl	8005978 <_ZN7TwoWire5writeEi>
         for (; i<txDataSize; ++i)
 80064ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d219      	bcs.n	80064ea <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x1ee>
         {
            wireport->write(txData[i]);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	68d8      	ldr	r0, [r3, #12]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	6879      	ldr	r1, [r7, #4]
 80064c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064c6:	440a      	add	r2, r1
 80064c8:	7812      	ldrb	r2, [r2, #0]
 80064ca:	4611      	mov	r1, r2
 80064cc:	4798      	blx	r3
            checksum += (uint16_t)txData[i];
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d2:	4413      	add	r3, r2
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80064dc:	4413      	add	r3, r2
 80064de:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
         for (; i<txDataSize; ++i)
 80064e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e4:	3301      	adds	r3, #1
 80064e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80064e8:	e7e1      	b.n	80064ae <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x1b2>
         }
         wireport->write((uint8_t)(checksum >> 8));
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	68d8      	ldr	r0, [r3, #12]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80064fa:	1212      	asrs	r2, r2, #8
 80064fc:	b2d2      	uxtb	r2, r2
 80064fe:	4611      	mov	r1, r2
 8006500:	4798      	blx	r3
         wireport->write((uint8_t)(checksum & 0xFF));
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	68da      	ldr	r2, [r3, #12]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8006512:	b2c9      	uxtb	r1, r1
 8006514:	4610      	mov	r0, r2
 8006516:	4798      	blx	r3
         if (wireport->endTransmission() != 0) //Send data and release bus
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	4618      	mov	r0, r3
 800651e:	f002 fa7f 	bl	8008a20 <_ZN7TwoWire15endTransmissionEv>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	bf14      	ite	ne
 8006528:	2301      	movne	r3, #1
 800652a:	2300      	moveq	r3, #0
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x23e>
            diagprint(F("I2C write was not successful!\r\n"));
 8006532:	491f      	ldr	r1, [pc, #124]	; (80065b0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2b4>)
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f001 f829 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      }

      consoleprint(F("["));
 800653a:	491e      	ldr	r1, [pc, #120]	; (80065b4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2b8>)
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f001 f87d 	bl	800763c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
      consoleprint((uint16_t)txDataSize);
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	b29b      	uxth	r3, r3
 8006546:	4619      	mov	r1, r3
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f001 f8af 	bl	80076ac <_ZN10IridiumSBD12consoleprintEt>
      consoleprint(F(" bytes]"));
 800654e:	491a      	ldr	r1, [pc, #104]	; (80065b8 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2bc>)
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f001 f873 	bl	800763c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

      diagprint(F("Checksum:"));
 8006556:	4919      	ldr	r1, [pc, #100]	; (80065bc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2c0>)
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f001 f817 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      diagprint(checksum);
 800655e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006562:	4619      	mov	r1, r3
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f001 f849 	bl	80075fc <_ZN10IridiumSBD9diagprintEt>
      diagprint(F("\r\n"));
 800656a:	4915      	ldr	r1, [pc, #84]	; (80065c0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2c4>)
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f001 f80d 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

      if (!waitForATResponse(NULL, 0, NULL, "0\r\n\r\nOK\r\n"))
 8006572:	4b14      	ldr	r3, [pc, #80]	; (80065c4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2c8>)
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	2300      	movs	r3, #0
 8006578:	2200      	movs	r2, #0
 800657a:	2100      	movs	r1, #0
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 fa25 	bl	80069cc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006582:	4603      	mov	r3, r0
 8006584:	f083 0301 	eor.w	r3, r3, #1
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	f000 8091 	beq.w	80066b2 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b6>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 fad9 	bl	8006b48 <_ZN10IridiumSBD9cancelledEv>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d015      	beq.n	80065c8 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2cc>
 800659c:	2304      	movs	r3, #4
 800659e:	e149      	b.n	8006834 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 80065a0:	08018ed4 	.word	0x08018ed4
 80065a4:	08018eec 	.word	0x08018eec
 80065a8:	08018ef8 	.word	0x08018ef8
 80065ac:	08018efc 	.word	0x08018efc
 80065b0:	08018f04 	.word	0x08018f04
 80065b4:	08018f24 	.word	0x08018f24
 80065b8:	08018f28 	.word	0x08018f28
 80065bc:	08018f30 	.word	0x08018f30
 80065c0:	08018e84 	.word	0x08018e84
 80065c4:	08018f3c 	.word	0x08018f3c
 80065c8:	2303      	movs	r3, #3
 80065ca:	e133      	b.n	8006834 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
   }

   else // Text transmission
   {
#if true // use long string implementation
      if (txTxtMessage == NULL) // It's ok to have a NULL txtTxtMessage if the transaction is RX only
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d11d      	bne.n	800660e <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x312>
      {
         send(F("AT+SBDWT=\r"));
 80065d2:	2301      	movs	r3, #1
 80065d4:	2201      	movs	r2, #1
 80065d6:	4999      	ldr	r1, [pc, #612]	; (800683c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x540>)
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f000 fe59 	bl	8007290 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
         if (!waitForATResponse())
 80065de:	4b98      	ldr	r3, [pc, #608]	; (8006840 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x544>)
 80065e0:	9300      	str	r3, [sp, #0]
 80065e2:	2300      	movs	r3, #0
 80065e4:	2200      	movs	r2, #0
 80065e6:	2100      	movs	r1, #0
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 f9ef 	bl	80069cc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80065ee:	4603      	mov	r3, r0
 80065f0:	f083 0301 	eor.w	r3, r3, #1
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d05c      	beq.n	80066b4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b8>
            return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f000 faa4 	bl	8006b48 <_ZN10IridiumSBD9cancelledEv>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x30e>
 8006606:	2304      	movs	r3, #4
 8006608:	e114      	b.n	8006834 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 800660a:	2303      	movs	r3, #3
 800660c:	e112      	b.n	8006834 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
      }
      else
      {
         // remove any embedded \r
         char *p = strchr(txTxtMessage, '\r');
 800660e:	210d      	movs	r1, #13
 8006610:	68b8      	ldr	r0, [r7, #8]
 8006612:	f00d f80c 	bl	801362e <strchr>
 8006616:	6338      	str	r0, [r7, #48]	; 0x30
         if (p) *p = 0;
 8006618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661a:	2b00      	cmp	r3, #0
 800661c:	d002      	beq.n	8006624 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x328>
 800661e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006620:	2200      	movs	r2, #0
 8006622:	701a      	strb	r2, [r3, #0]
         if (strlen(txTxtMessage) > ISBD_MAX_MESSAGE_LENGTH)
 8006624:	68b8      	ldr	r0, [r7, #8]
 8006626:	f7f9 fded 	bl	8000204 <strlen>
 800662a:	4603      	mov	r3, r0
 800662c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8006630:	d901      	bls.n	8006636 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x33a>
            return ISBD_MSG_TOO_LONG;
 8006632:	230d      	movs	r3, #13
 8006634:	e0fe      	b.n	8006834 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         send(F("AT+SBDWT\r"));
 8006636:	2301      	movs	r3, #1
 8006638:	2201      	movs	r2, #1
 800663a:	4982      	ldr	r1, [pc, #520]	; (8006844 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x548>)
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f000 fe27 	bl	8007290 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
         if (!waitForATResponse(NULL, 0, NULL, "READY\r\n"))
 8006642:	4b81      	ldr	r3, [pc, #516]	; (8006848 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x54c>)
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	2300      	movs	r3, #0
 8006648:	2200      	movs	r2, #0
 800664a:	2100      	movs	r1, #0
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 f9bd 	bl	80069cc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006652:	4603      	mov	r3, r0
 8006654:	f083 0301 	eor.w	r3, r3, #1
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d009      	beq.n	8006672 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x376>
            return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f000 fa72 	bl	8006b48 <_ZN10IridiumSBD9cancelledEv>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d001      	beq.n	800666e <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x372>
 800666a:	2304      	movs	r3, #4
 800666c:	e0e2      	b.n	8006834 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 800666e:	2303      	movs	r3, #3
 8006670:	e0e0      	b.n	8006834 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         sendlong(txTxtMessage);
 8006672:	68b9      	ldr	r1, [r7, #8]
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f000 feb3 	bl	80073e0 <_ZN10IridiumSBD8sendlongEPKc>
         send("\r");
 800667a:	4974      	ldr	r1, [pc, #464]	; (800684c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x550>)
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f000 fe63 	bl	8007348 <_ZN10IridiumSBD4sendEPKc>
         if (!waitForATResponse(NULL, 0, NULL, "0\r\n\r\nOK\r\n"))
 8006682:	4b73      	ldr	r3, [pc, #460]	; (8006850 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x554>)
 8006684:	9300      	str	r3, [sp, #0]
 8006686:	2300      	movs	r3, #0
 8006688:	2200      	movs	r2, #0
 800668a:	2100      	movs	r1, #0
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f000 f99d 	bl	80069cc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006692:	4603      	mov	r3, r0
 8006694:	f083 0301 	eor.w	r3, r3, #1
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00a      	beq.n	80066b4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b8>
            return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f000 fa52 	bl	8006b48 <_ZN10IridiumSBD9cancelledEv>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b2>
 80066aa:	2304      	movs	r3, #4
 80066ac:	e0c2      	b.n	8006834 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 80066ae:	2303      	movs	r3, #3
 80066b0:	e0c0      	b.n	8006834 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80066b2:	bf00      	nop
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
#endif
   }

   // Long SBDIX loop begins here
   for (unsigned long start = millis(); millis() - start < 1000UL * this->sendReceiveTimeout;)
 80066b4:	f002 fe2a 	bl	800930c <HAL_GetTick>
 80066b8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80066ba:	f002 fe27 	bl	800930c <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c2:	1ad2      	subs	r2, r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066c8:	4619      	mov	r1, r3
 80066ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80066ce:	fb03 f301 	mul.w	r3, r3, r1
 80066d2:	429a      	cmp	r2, r3
 80066d4:	bf34      	ite	cc
 80066d6:	2301      	movcc	r3, #1
 80066d8:	2300      	movcs	r3, #0
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 80a4 	beq.w	800682a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x52e>
   {
      bool okToProceed = true;
 80066e2:	2301      	movs	r3, #1
 80066e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      if (this->msstmWorkaroundRequested)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00e      	beq.n	8006710 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x414>
      {
         okToProceed = false;
 80066f2:	2300      	movs	r3, #0
 80066f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
         int ret = internalMSSTMWorkaround(okToProceed);
 80066f8:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80066fc:	4619      	mov	r1, r3
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f000 f902 	bl	8006908 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb>
 8006704:	62b8      	str	r0, [r7, #40]	; 0x28
         if (ret != ISBD_SUCCESS)
 8006706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x414>
            return ret;
 800670c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670e:	e091      	b.n	8006834 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
      }

      if (okToProceed)
 8006710:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006714:	2b00      	cmp	r3, #0
 8006716:	d077      	beq.n	8006808 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50c>
      {
         uint16_t moCode = 0, moMSN = 0, mtCode = 0, mtMSN = 0, mtLen = 0, mtRemaining = 0;
 8006718:	2300      	movs	r3, #0
 800671a:	843b      	strh	r3, [r7, #32]
 800671c:	2300      	movs	r3, #0
 800671e:	83fb      	strh	r3, [r7, #30]
 8006720:	2300      	movs	r3, #0
 8006722:	83bb      	strh	r3, [r7, #28]
 8006724:	2300      	movs	r3, #0
 8006726:	837b      	strh	r3, [r7, #26]
 8006728:	2300      	movs	r3, #0
 800672a:	833b      	strh	r3, [r7, #24]
 800672c:	2300      	movs	r3, #0
 800672e:	82fb      	strh	r3, [r7, #22]
         int ret = doSBDIX(moCode, moMSN, mtCode, mtMSN, mtLen, mtRemaining);
 8006730:	f107 001c 	add.w	r0, r7, #28
 8006734:	f107 021e 	add.w	r2, r7, #30
 8006738:	f107 0120 	add.w	r1, r7, #32
 800673c:	f107 0316 	add.w	r3, r7, #22
 8006740:	9302      	str	r3, [sp, #8]
 8006742:	f107 0318 	add.w	r3, r7, #24
 8006746:	9301      	str	r3, [sp, #4]
 8006748:	f107 031a 	add.w	r3, r7, #26
 800674c:	9300      	str	r3, [sp, #0]
 800674e:	4603      	mov	r3, r0
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f000 fa29 	bl	8006ba8 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_>
 8006756:	6278      	str	r0, [r7, #36]	; 0x24
         if (ret != ISBD_SUCCESS)
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x466>
            return ret;
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	e068      	b.n	8006834 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

         diagprint(F("SBDIX MO code: "));
 8006762:	493c      	ldr	r1, [pc, #240]	; (8006854 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x558>)
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 ff11 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
         diagprint(moCode);
 800676a:	8c3b      	ldrh	r3, [r7, #32]
 800676c:	4619      	mov	r1, r3
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f000 ff44 	bl	80075fc <_ZN10IridiumSBD9diagprintEt>
         diagprint(F("\r\n"));
 8006774:	4938      	ldr	r1, [pc, #224]	; (8006858 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x55c>)
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f000 ff08 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

         if (moCode <= 4) // this range indicates successful return!
 800677c:	8c3b      	ldrh	r3, [r7, #32]
 800677e:	2b04      	cmp	r3, #4
 8006780:	d820      	bhi.n	80067c4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4c8>
         {
            diagprint(F("SBDIX success!\r\n"));
 8006782:	4936      	ldr	r1, [pc, #216]	; (800685c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x560>)
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f000 ff01 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

            this->remainingMessages = mtRemaining;
 800678a:	8afb      	ldrh	r3, [r7, #22]
 800678c:	461a      	mov	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	675a      	str	r2, [r3, #116]	; 0x74
            if (mtCode == 1 && rxBuffer) // retrieved 1 message
 8006792:	8bbb      	ldrh	r3, [r7, #28]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d10d      	bne.n	80067b4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4b8>
 8006798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00a      	beq.n	80067b4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4b8>
            {
               diagprint(F("Incoming message!\r\n"));
 800679e:	4930      	ldr	r1, [pc, #192]	; (8006860 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x564>)
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 fef3 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
               return doSBDRB(rxBuffer, prxBufferSize);
 80067a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80067a8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f000 fa62 	bl	8006c74 <_ZN10IridiumSBD7doSBDRBEPhPj>
 80067b0:	4603      	mov	r3, r0
 80067b2:	e028      	b.n	8006806 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50a>
            }

            else
            {
               // No data returned
               if (prxBufferSize)
 80067b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d002      	beq.n	80067c0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4c4>
                  *prxBufferSize = 0;
 80067ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067bc:	2200      	movs	r2, #0
 80067be:	601a      	str	r2, [r3, #0]
            }
            return ISBD_SUCCESS;
 80067c0:	2300      	movs	r3, #0
 80067c2:	e020      	b.n	8006806 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50a>
         }

         else if (moCode == 12 || moCode == 14 || moCode == 16) // fatal failure: no retry
 80067c4:	8c3b      	ldrh	r3, [r7, #32]
 80067c6:	2b0c      	cmp	r3, #12
 80067c8:	d005      	beq.n	80067d6 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4da>
 80067ca:	8c3b      	ldrh	r3, [r7, #32]
 80067cc:	2b0e      	cmp	r3, #14
 80067ce:	d002      	beq.n	80067d6 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4da>
 80067d0:	8c3b      	ldrh	r3, [r7, #32]
 80067d2:	2b10      	cmp	r3, #16
 80067d4:	d105      	bne.n	80067e2 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4e6>
         {
            diagprint(F("SBDIX fatal!\r\n"));
 80067d6:	4923      	ldr	r1, [pc, #140]	; (8006864 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x568>)
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f000 fed7 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
            return ISBD_SBDIX_FATAL_ERROR;
 80067de:	2306      	movs	r3, #6
 80067e0:	e011      	b.n	8006806 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50a>
         }

         else // retry
         {
            diagprint(F("Waiting for SBDIX retry...\r\n"));
 80067e2:	4921      	ldr	r1, [pc, #132]	; (8006868 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x56c>)
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f000 fed1 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
            if (!noBlockWait(sbdixInterval))
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ee:	4619      	mov	r1, r3
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f000 f8c5 	bl	8006980 <_ZN10IridiumSBD11noBlockWaitEi>
 80067f6:	4603      	mov	r3, r0
 80067f8:	f083 0301 	eor.w	r3, r3, #1
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	f43f af5b 	beq.w	80066ba <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3be>
               return ISBD_CANCELLED;
 8006804:	2304      	movs	r3, #4
            return ret;
 8006806:	e015      	b.n	8006834 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         }
      }

      else // MSSTM check fail
      {
         diagprint(F("Waiting for MSSTM retry...\r\n"));
 8006808:	4918      	ldr	r1, [pc, #96]	; (800686c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x570>)
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	f000 febe 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
         if (!noBlockWait(ISBD_MSSTM_RETRY_INTERVAL))
 8006810:	210a      	movs	r1, #10
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f000 f8b4 	bl	8006980 <_ZN10IridiumSBD11noBlockWaitEi>
 8006818:	4603      	mov	r3, r0
 800681a:	f083 0301 	eor.w	r3, r3, #1
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b00      	cmp	r3, #0
 8006822:	f43f af4a 	beq.w	80066ba <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3be>
            return ISBD_CANCELLED;
 8006826:	2304      	movs	r3, #4
 8006828:	e004      	b.n	8006834 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
      }
   } // big wait loop

   diagprint(F("SBDIX timeout!\r\n"));
 800682a:	4911      	ldr	r1, [pc, #68]	; (8006870 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x574>)
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f000 fead 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   return ISBD_SENDRECEIVE_TIMEOUT;
 8006832:	2307      	movs	r3, #7
}
 8006834:	4618      	mov	r0, r3
 8006836:	3748      	adds	r7, #72	; 0x48
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	08018f48 	.word	0x08018f48
 8006840:	08018ad8 	.word	0x08018ad8
 8006844:	08018f54 	.word	0x08018f54
 8006848:	08018efc 	.word	0x08018efc
 800684c:	08018ef8 	.word	0x08018ef8
 8006850:	08018f3c 	.word	0x08018f3c
 8006854:	08018f60 	.word	0x08018f60
 8006858:	08018e84 	.word	0x08018e84
 800685c:	08018f70 	.word	0x08018f70
 8006860:	08018f84 	.word	0x08018f84
 8006864:	08018f98 	.word	0x08018f98
 8006868:	08018fa8 	.word	0x08018fa8
 800686c:	08018fc8 	.word	0x08018fc8
 8006870:	08018fe8 	.word	0x08018fe8

08006874 <_ZN10IridiumSBD24internalGetSignalQualityERi>:

int IridiumSBD::internalGetSignalQuality(int &quality)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af02      	add	r7, sp, #8
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
   if (this->asleep)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8006884:	2b00      	cmp	r3, #0
 8006886:	d001      	beq.n	800688c <_ZN10IridiumSBD24internalGetSignalQualityERi+0x18>
      return ISBD_IS_ASLEEP;
 8006888:	230a      	movs	r3, #10
 800688a:	e032      	b.n	80068f2 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>

   char csqResponseBuf[2];

   send(F("AT+CSQ\r"));
 800688c:	2301      	movs	r3, #1
 800688e:	2201      	movs	r2, #1
 8006890:	491a      	ldr	r1, [pc, #104]	; (80068fc <_ZN10IridiumSBD24internalGetSignalQualityERi+0x88>)
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 fcfc 	bl	8007290 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(csqResponseBuf, sizeof(csqResponseBuf), "+CSQ:"))
 8006898:	f107 010c 	add.w	r1, r7, #12
 800689c:	4b18      	ldr	r3, [pc, #96]	; (8006900 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x8c>)
 800689e:	9300      	str	r3, [sp, #0]
 80068a0:	4b18      	ldr	r3, [pc, #96]	; (8006904 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x90>)
 80068a2:	2202      	movs	r2, #2
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f891 	bl	80069cc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80068aa:	4603      	mov	r3, r0
 80068ac:	f083 0301 	eor.w	r3, r3, #1
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d009      	beq.n	80068ca <_ZN10IridiumSBD24internalGetSignalQualityERi+0x56>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f946 	bl	8006b48 <_ZN10IridiumSBD9cancelledEv>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x52>
 80068c2:	2304      	movs	r3, #4
 80068c4:	e015      	b.n	80068f2 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>
 80068c6:	2303      	movs	r3, #3
 80068c8:	e013      	b.n	80068f2 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>

   if (isdigit(csqResponseBuf[0]))
 80068ca:	7b3b      	ldrb	r3, [r7, #12]
 80068cc:	3b30      	subs	r3, #48	; 0x30
 80068ce:	2b09      	cmp	r3, #9
 80068d0:	bf94      	ite	ls
 80068d2:	2301      	movls	r3, #1
 80068d4:	2300      	movhi	r3, #0
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d009      	beq.n	80068f0 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7c>
   {
      quality = atoi(csqResponseBuf);
 80068dc:	f107 030c 	add.w	r3, r7, #12
 80068e0:	4618      	mov	r0, r3
 80068e2:	f00b f894 	bl	8011a0e <atoi>
 80068e6:	4602      	mov	r2, r0
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	601a      	str	r2, [r3, #0]
      return ISBD_SUCCESS;
 80068ec:	2300      	movs	r3, #0
 80068ee:	e000      	b.n	80068f2 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>
   }

   return ISBD_PROTOCOL_ERROR;
 80068f0:	2303      	movs	r3, #3
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	08018ffc 	.word	0x08018ffc
 8006900:	08018ad8 	.word	0x08018ad8
 8006904:	08019004 	.word	0x08019004

08006908 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb>:

int IridiumSBD::internalMSSTMWorkaround(bool &okToProceed)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b08a      	sub	sp, #40	; 0x28
 800690c:	af02      	add	r7, sp, #8
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
   satellite. Ensuring that the received signal strength reported in response to AT command +CSQ and +CIER is above 2-3 bars
   before attempting SBD communication will protect against lockout.
   */
   char msstmResponseBuf[24];

   send(F("AT-MSSTM\r"));
 8006912:	2301      	movs	r3, #1
 8006914:	2201      	movs	r2, #1
 8006916:	4917      	ldr	r1, [pc, #92]	; (8006974 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x6c>)
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 fcb9 	bl	8007290 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(msstmResponseBuf, sizeof(msstmResponseBuf), "-MSSTM: "))
 800691e:	f107 0108 	add.w	r1, r7, #8
 8006922:	4b15      	ldr	r3, [pc, #84]	; (8006978 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x70>)
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	4b15      	ldr	r3, [pc, #84]	; (800697c <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x74>)
 8006928:	2218      	movs	r2, #24
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f84e 	bl	80069cc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006930:	4603      	mov	r3, r0
 8006932:	f083 0301 	eor.w	r3, r3, #1
 8006936:	b2db      	uxtb	r3, r3
 8006938:	2b00      	cmp	r3, #0
 800693a:	d009      	beq.n	8006950 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x48>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 f903 	bl	8006b48 <_ZN10IridiumSBD9cancelledEv>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d001      	beq.n	800694c <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x44>
 8006948:	2304      	movs	r3, #4
 800694a:	e00e      	b.n	800696a <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x62>
 800694c:	2303      	movs	r3, #3
 800694e:	e00c      	b.n	800696a <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x62>

   // Response buf now contains either an 8-digit number or the string "no network service"
   okToProceed = isxdigit(msstmResponseBuf[0]);
 8006950:	7a3b      	ldrb	r3, [r7, #8]
 8006952:	4618      	mov	r0, r3
 8006954:	f00b f984 	bl	8011c60 <isxdigit>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	bf14      	ite	ne
 800695e:	2301      	movne	r3, #1
 8006960:	2300      	moveq	r3, #0
 8006962:	b2da      	uxtb	r2, r3
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	701a      	strb	r2, [r3, #0]
   return ISBD_SUCCESS;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3720      	adds	r7, #32
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	08018ac0 	.word	0x08018ac0
 8006978:	08018ad8 	.word	0x08018ad8
 800697c:	08018acc 	.word	0x08018acc

08006980 <_ZN10IridiumSBD11noBlockWaitEi>:

   return ISBD_SUCCESS;
}

bool IridiumSBD::noBlockWait(int seconds)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
   for (unsigned long start=millis(); millis() - start < 1000UL * seconds;)
 800698a:	f002 fcbf 	bl	800930c <HAL_GetTick>
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	f002 fcbc 	bl	800930c <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	1ad2      	subs	r2, r2, r3
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80069a0:	fb01 f303 	mul.w	r3, r1, r3
 80069a4:	429a      	cmp	r2, r3
 80069a6:	bf34      	ite	cc
 80069a8:	2301      	movcc	r3, #1
 80069aa:	2300      	movcs	r3, #0
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d007      	beq.n	80069c2 <_ZN10IridiumSBD11noBlockWaitEi+0x42>
      if (cancelled())
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f8c8 	bl	8006b48 <_ZN10IridiumSBD9cancelledEv>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d0e8      	beq.n	8006990 <_ZN10IridiumSBD11noBlockWaitEi+0x10>
         return false;
 80069be:	2300      	movs	r3, #0
 80069c0:	e000      	b.n	80069c4 <_ZN10IridiumSBD11noBlockWaitEi+0x44>

   return true;
 80069c2:	2301      	movs	r3, #1
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>:

// Wait for response from previous AT command.  This process terminates when "terminator" string is seen or upon timeout.
// If "prompt" string is provided (example "+CSQ:"), then all characters following prompt up to the next CRLF are
// stored in response buffer for later parsing by caller.
bool IridiumSBD::waitForATResponse(char *response, int responseSize, const char *prompt, const char *terminator)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b08a      	sub	sp, #40	; 0x28
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
 80069d8:	603b      	str	r3, [r7, #0]
   diagprint(F("Waiting for response "));
 80069da:	4959      	ldr	r1, [pc, #356]	; (8006b40 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x174>)
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f000 fdd5 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   diagprint(terminator);
 80069e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f000 fdef 	bl	80075c8 <_ZN10IridiumSBD9diagprintEPKc>
   this->print((char*) terminator); //TODO doesn't print otherwise
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069f0:	4798      	blx	r3
   diagprint(F("\r\n"));
 80069f2:	4954      	ldr	r1, [pc, #336]	; (8006b44 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x178>)
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f000 fdc9 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (response)
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d005      	beq.n	8006a0c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x40>
      memset(response, 0, responseSize);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	461a      	mov	r2, r3
 8006a04:	2100      	movs	r1, #0
 8006a06:	68b8      	ldr	r0, [r7, #8]
 8006a08:	f00b fa84 	bl	8011f14 <memset>

   int matchPromptPos = 0; // Matches chars in prompt
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	627b      	str	r3, [r7, #36]	; 0x24
   int matchTerminatorPos = 0; // Matches chars in terminator
 8006a10:	2300      	movs	r3, #0
 8006a12:	623b      	str	r3, [r7, #32]
   enum {LOOKING_FOR_PROMPT, GATHERING_RESPONSE, LOOKING_FOR_TERMINATOR};
   int promptState = prompt ? LOOKING_FOR_PROMPT : LOOKING_FOR_TERMINATOR;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d001      	beq.n	8006a1e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x52>
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	e000      	b.n	8006a20 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x54>
 8006a1e:	2302      	movs	r3, #2
 8006a20:	61fb      	str	r3, [r7, #28]
   //consoleprint(F("<< ")); //TODO If we comment out this it looks cleaner in the serial

   for (unsigned long start=millis(); millis() - start < 1000UL * atTimeout;)
 8006a22:	f002 fc73 	bl	800930c <HAL_GetTick>
 8006a26:	61b8      	str	r0, [r7, #24]
 8006a28:	f002 fc70 	bl	800930c <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	1ad2      	subs	r2, r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a36:	4619      	mov	r1, r3
 8006a38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a3c:	fb03 f301 	mul.w	r3, r3, r1
 8006a40:	429a      	cmp	r2, r3
 8006a42:	bf34      	ite	cc
 8006a44:	2301      	movcc	r3, #1
 8006a46:	2300      	movcs	r3, #0
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d072      	beq.n	8006b34 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x168>
   {
      if (cancelled())
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f000 f87a 	bl	8006b48 <_ZN10IridiumSBD9cancelledEv>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d001      	beq.n	8006a5e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x92>
         return false;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	e06b      	b.n	8006b36 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x16a>

      while (filteredavailable() > 0)
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f000 ff52 	bl	8007908 <_ZN10IridiumSBD17filteredavailableEv>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	bfcc      	ite	gt
 8006a6a:	2301      	movgt	r3, #1
 8006a6c:	2300      	movle	r3, #0
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d0d9      	beq.n	8006a28 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x5c>
      {
         char c = filteredread();
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f000 ff63 	bl	8007940 <_ZN10IridiumSBD12filteredreadEv>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	75fb      	strb	r3, [r7, #23]
         if (prompt)
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d03b      	beq.n	8006afc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x130>
         {
            switch (promptState)
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d003      	beq.n	8006a92 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xc6>
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d01d      	beq.n	8006acc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x100>
 8006a90:	e034      	b.n	8006afc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x130>
            {
            case LOOKING_FOR_PROMPT:
               if (c == prompt[matchPromptPos])
 8006a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a94:	683a      	ldr	r2, [r7, #0]
 8006a96:	4413      	add	r3, r2
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	7dfa      	ldrb	r2, [r7, #23]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d10b      	bne.n	8006ab8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xec>
               {
                  ++matchPromptPos;
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	627b      	str	r3, [r7, #36]	; 0x24
                  if (prompt[matchPromptPos] == '\0')
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa8:	683a      	ldr	r2, [r7, #0]
 8006aaa:	4413      	add	r3, r2
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d121      	bne.n	8006af6 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12a>
                     promptState = GATHERING_RESPONSE;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	61fb      	str	r3, [r7, #28]
               else
               {
                  matchPromptPos = c == prompt[0] ? 1 : 0;
               }

               break;
 8006ab6:	e01e      	b.n	8006af6 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12a>
                  matchPromptPos = c == prompt[0] ? 1 : 0;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	7dfa      	ldrb	r2, [r7, #23]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d101      	bne.n	8006ac6 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xfa>
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e000      	b.n	8006ac8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xfc>
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	627b      	str	r3, [r7, #36]	; 0x24
               break;
 8006aca:	e014      	b.n	8006af6 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12a>
            case GATHERING_RESPONSE: // gathering response from end of prompt to first \r
               if (response)
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d013      	beq.n	8006afa <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12e>
               {
                  if (c == '\r' || responseSize < 2)
 8006ad2:	7dfb      	ldrb	r3, [r7, #23]
 8006ad4:	2b0d      	cmp	r3, #13
 8006ad6:	d002      	beq.n	8006ade <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x112>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	dc02      	bgt.n	8006ae4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x118>
                  {
                     promptState = LOOKING_FOR_TERMINATOR;
 8006ade:	2302      	movs	r3, #2
 8006ae0:	61fb      	str	r3, [r7, #28]
                  {
                     *response++ = c;
                     responseSize--;
                  }
               }
               break;
 8006ae2:	e00a      	b.n	8006afa <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12e>
                     *response++ = c;
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	1c5a      	adds	r2, r3, #1
 8006ae8:	60ba      	str	r2, [r7, #8]
 8006aea:	7dfa      	ldrb	r2, [r7, #23]
 8006aec:	701a      	strb	r2, [r3, #0]
                     responseSize--;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	3b01      	subs	r3, #1
 8006af2:	607b      	str	r3, [r7, #4]
               break;
 8006af4:	e001      	b.n	8006afa <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12e>
               break;
 8006af6:	bf00      	nop
 8006af8:	e000      	b.n	8006afc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x130>
               break;
 8006afa:	bf00      	nop
            }
         }

         if (c == terminator[matchTerminatorPos])
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b00:	4413      	add	r3, r2
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	7dfa      	ldrb	r2, [r7, #23]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d10a      	bne.n	8006b20 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x154>
         {
            ++matchTerminatorPos;
 8006b0a:	6a3b      	ldr	r3, [r7, #32]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	623b      	str	r3, [r7, #32]
            if (terminator[matchTerminatorPos] == '\0')
 8006b10:	6a3b      	ldr	r3, [r7, #32]
 8006b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b14:	4413      	add	r3, r2
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1a0      	bne.n	8006a5e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x92>
               return true;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e00a      	b.n	8006b36 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x16a>
         }
         else
         {
            matchTerminatorPos = c == terminator[0] ? 1 : 0;
 8006b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	7dfa      	ldrb	r2, [r7, #23]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d101      	bne.n	8006b2e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x162>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e000      	b.n	8006b30 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x164>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	623b      	str	r3, [r7, #32]
      while (filteredavailable() > 0)
 8006b32:	e794      	b.n	8006a5e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x92>
         }
      } // while (filteredavailable() > 0)
   } // timer loop
   return false;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3728      	adds	r7, #40	; 0x28
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	0801900c 	.word	0x0801900c
 8006b44:	08018e84 	.word	0x08018e84

08006b48 <_ZN10IridiumSBD9cancelledEv>:

bool IridiumSBD::cancelled()
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
   if (this->useSerial)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	7c5b      	ldrb	r3, [r3, #17]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d019      	beq.n	8006b8c <_ZN10IridiumSBD9cancelledEv+0x44>
   {
	   //TODO For some reason when using digitalRead here it didn't work so simply replaced with HAL function
	   //if ((ringPin != -1) && digitalRead(ringPin) == LOW)
	     if ((ringPin != -1) && HAL_GPIO_ReadPin(ringPin_GPIO_Port,ringPin_Pin) == LOW)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b62:	d008      	beq.n	8006b76 <_ZN10IridiumSBD9cancelledEv+0x2e>
 8006b64:	2110      	movs	r1, #16
 8006b66:	480e      	ldr	r0, [pc, #56]	; (8006ba0 <_ZN10IridiumSBD9cancelledEv+0x58>)
 8006b68:	f003 f932 	bl	8009dd0 <HAL_GPIO_ReadPin>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d101      	bne.n	8006b76 <_ZN10IridiumSBD9cancelledEv+0x2e>
 8006b72:	2301      	movs	r3, #1
 8006b74:	e000      	b.n	8006b78 <_ZN10IridiumSBD9cancelledEv+0x30>
 8006b76:	2300      	movs	r3, #0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d007      	beq.n	8006b8c <_ZN10IridiumSBD9cancelledEv+0x44>
	  {
         ringAsserted = true;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
		 diagprint(F("ringPin seen!\r\n"));
 8006b84:	4907      	ldr	r1, [pc, #28]	; (8006ba4 <_ZN10IridiumSBD9cancelledEv+0x5c>)
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fd00 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
	  }
   }

   return !ISBDCallback();
 8006b8c:	f7fe ff06 	bl	800599c <_Z12ISBDCallbackv>
 8006b90:	4603      	mov	r3, r0
 8006b92:	f083 0301 	eor.w	r3, r3, #1
 8006b96:	b2db      	uxtb	r3, r3
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	40020800 	.word	0x40020800
 8006ba4:	08019024 	.word	0x08019024

08006ba8 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_>:

int IridiumSBD::doSBDIX(uint16_t &moCode, uint16_t &moMSN, uint16_t &mtCode, uint16_t &mtMSN, uint16_t &mtLen, uint16_t &mtRemaining)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b096      	sub	sp, #88	; 0x58
 8006bac:	af02      	add	r7, sp, #8
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
 8006bb4:	603b      	str	r3, [r7, #0]
   // Returns xx,xxxxx,xx,xxxxx,xx,xxx
   char sbdixResponseBuf[32];
   send(F("AT+SBDIX\r"));
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	2201      	movs	r2, #1
 8006bba:	492a      	ldr	r1, [pc, #168]	; (8006c64 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xbc>)
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 fb67 	bl	8007290 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(sbdixResponseBuf, sizeof(sbdixResponseBuf), "+SBDIX: "))
 8006bc2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006bc6:	4b28      	ldr	r3, [pc, #160]	; (8006c68 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xc0>)
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	4b28      	ldr	r3, [pc, #160]	; (8006c6c <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xc4>)
 8006bcc:	2220      	movs	r2, #32
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f7ff fefc 	bl	80069cc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	f083 0301 	eor.w	r3, r3, #1
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d009      	beq.n	8006bf4 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x4c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f7ff ffb1 	bl	8006b48 <_ZN10IridiumSBD9cancelledEv>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d001      	beq.n	8006bf0 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x48>
 8006bec:	2304      	movs	r3, #4
 8006bee:	e035      	b.n	8006c5c <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb4>
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e033      	b.n	8006c5c <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb4>

   uint16_t *values[6] = { &moCode, &moMSN, &mtCode, &mtMSN, &mtLen, &mtRemaining };
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	613b      	str	r3, [r7, #16]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	617b      	str	r3, [r7, #20]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	61bb      	str	r3, [r7, #24]
 8006c00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c02:	61fb      	str	r3, [r7, #28]
 8006c04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c06:	623b      	str	r3, [r7, #32]
 8006c08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c0a:	627b      	str	r3, [r7, #36]	; 0x24
   for (int i=0; i<6; ++i)
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c12:	2b05      	cmp	r3, #5
 8006c14:	dc21      	bgt.n	8006c5a <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb2>
   {
      char *p = strtok(i == 0 ? sbdixResponseBuf : NULL, ", ");
 8006c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d102      	bne.n	8006c22 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x7a>
 8006c1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c20:	e000      	b.n	8006c24 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x7c>
 8006c22:	2300      	movs	r3, #0
 8006c24:	4912      	ldr	r1, [pc, #72]	; (8006c70 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xc8>)
 8006c26:	4618      	mov	r0, r3
 8006c28:	f00d fb56 	bl	80142d8 <strtok>
 8006c2c:	64b8      	str	r0, [r7, #72]	; 0x48
      if (p == NULL)
 8006c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d101      	bne.n	8006c38 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x90>
         return ISBD_PROTOCOL_ERROR;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e011      	b.n	8006c5c <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb4>
      *values[i] = atol(p);
 8006c38:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006c3a:	f00a feec 	bl	8011a16 <atol>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8006c48:	440b      	add	r3, r1
 8006c4a:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8006c4e:	b292      	uxth	r2, r2
 8006c50:	801a      	strh	r2, [r3, #0]
   for (int i=0; i<6; ++i)
 8006c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c54:	3301      	adds	r3, #1
 8006c56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c58:	e7da      	b.n	8006c10 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x68>
   }
   return ISBD_SUCCESS;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3750      	adds	r7, #80	; 0x50
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	08019034 	.word	0x08019034
 8006c68:	08018ad8 	.word	0x08018ad8
 8006c6c:	08019040 	.word	0x08019040
 8006c70:	0801904c 	.word	0x0801904c

08006c74 <_ZN10IridiumSBD7doSBDRBEPhPj>:

int IridiumSBD::doSBDRB(uint8_t *rxBuffer, size_t *prxBufferSize)
{
 8006c74:	b590      	push	{r4, r7, lr}
 8006c76:	b08b      	sub	sp, #44	; 0x2c
 8006c78:	af02      	add	r7, sp, #8
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
   bool rxOverflow = false;
 8006c80:	2300      	movs	r3, #0
 8006c82:	77fb      	strb	r3, [r7, #31]

   send(F("AT+SBDRB\r"));
 8006c84:	2301      	movs	r3, #1
 8006c86:	2201      	movs	r2, #1
 8006c88:	49a2      	ldr	r1, [pc, #648]	; (8006f14 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a0>)
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f000 fb00 	bl	8007290 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(NULL, 0, NULL, "AT+SBDRB\r")) // waits for its own echo
 8006c90:	4ba0      	ldr	r3, [pc, #640]	; (8006f14 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a0>)
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	2300      	movs	r3, #0
 8006c96:	2200      	movs	r2, #0
 8006c98:	2100      	movs	r1, #0
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f7ff fe96 	bl	80069cc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	f083 0301 	eor.w	r3, r3, #1
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d009      	beq.n	8006cc0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x4c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f7ff ff4b 	bl	8006b48 <_ZN10IridiumSBD9cancelledEv>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d001      	beq.n	8006cbc <_ZN10IridiumSBD7doSBDRBEPhPj+0x48>
 8006cb8:	2304      	movs	r3, #4
 8006cba:	e223      	b.n	8007104 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e221      	b.n	8007104 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   if(!this->useSerial) check9603data(); // Check for any 9603 serial data
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	7c5b      	ldrb	r3, [r3, #17]
 8006cc4:	f083 0301 	eor.w	r3, r3, #1
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d002      	beq.n	8006cd4 <_ZN10IridiumSBD7doSBDRBEPhPj+0x60>
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f000 fe7c 	bl	80079cc <_ZN10IridiumSBD13check9603dataEv>

   // Time to read the binary data: size[2], body[size], checksum[2]
   unsigned long start = millis();
 8006cd4:	f002 fb1a 	bl	800930c <HAL_GetTick>
 8006cd8:	6138      	str	r0, [r7, #16]
   while (millis() - start < 1000UL * atTimeout)
 8006cda:	f002 fb17 	bl	800930c <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	1ad2      	subs	r2, r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ce8:	4619      	mov	r1, r3
 8006cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006cee:	fb03 f301 	mul.w	r3, r3, r1
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	bf34      	ite	cc
 8006cf6:	2301      	movcc	r3, #1
 8006cf8:	2300      	movcs	r3, #0
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d03c      	beq.n	8006d7a <_ZN10IridiumSBD7doSBDRBEPhPj+0x106>
   {
      if(!this->useSerial) check9603data(); // Keep checking for new 9603 serial data
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	7c5b      	ldrb	r3, [r3, #17]
 8006d04:	f083 0301 	eor.w	r3, r3, #1
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d002      	beq.n	8006d14 <_ZN10IridiumSBD7doSBDRBEPhPj+0xa0>
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f000 fe5c 	bl	80079cc <_ZN10IridiumSBD13check9603dataEv>
      if (cancelled())
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f7ff ff17 	bl	8006b48 <_ZN10IridiumSBD9cancelledEv>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d001      	beq.n	8006d24 <_ZN10IridiumSBD7doSBDRBEPhPj+0xb0>
         return ISBD_CANCELLED;
 8006d20:	2304      	movs	r3, #4
 8006d22:	e1ef      	b.n	8007104 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
      if (this->useSerial && (stream->available() >= 2))
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	7c5b      	ldrb	r3, [r3, #17]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00d      	beq.n	8006d48 <_ZN10IridiumSBD7doSBDRBEPhPj+0xd4>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	689a      	ldr	r2, [r3, #8]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	3308      	adds	r3, #8
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4610      	mov	r0, r2
 8006d3c:	4798      	blx	r3
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	dd01      	ble.n	8006d48 <_ZN10IridiumSBD7doSBDRBEPhPj+0xd4>
 8006d44:	2301      	movs	r3, #1
 8006d46:	e000      	b.n	8006d4a <_ZN10IridiumSBD7doSBDRBEPhPj+0xd6>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d112      	bne.n	8006d74 <_ZN10IridiumSBD7doSBDRBEPhPj+0x100>
         break;
      if ((!this->useSerial) && (i2cSerAvailable() >= 2))
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	7c5b      	ldrb	r3, [r3, #17]
 8006d52:	f083 0301 	eor.w	r3, r3, #1
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d007      	beq.n	8006d6c <_ZN10IridiumSBD7doSBDRBEPhPj+0xf8>
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f000 ff65 	bl	8007c2c <_ZN10IridiumSBD15i2cSerAvailableEv>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	dd01      	ble.n	8006d6c <_ZN10IridiumSBD7doSBDRBEPhPj+0xf8>
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e000      	b.n	8006d6e <_ZN10IridiumSBD7doSBDRBEPhPj+0xfa>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d102      	bne.n	8006d78 <_ZN10IridiumSBD7doSBDRBEPhPj+0x104>
   while (millis() - start < 1000UL * atTimeout)
 8006d72:	e7b2      	b.n	8006cda <_ZN10IridiumSBD7doSBDRBEPhPj+0x66>
         break;
 8006d74:	bf00      	nop
 8006d76:	e000      	b.n	8006d7a <_ZN10IridiumSBD7doSBDRBEPhPj+0x106>
         break;
 8006d78:	bf00      	nop
   }

   if (this->useSerial && (stream->available() < 2))
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	7c5b      	ldrb	r3, [r3, #17]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00d      	beq.n	8006d9e <_ZN10IridiumSBD7doSBDRBEPhPj+0x12a>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	689a      	ldr	r2, [r3, #8]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	3308      	adds	r3, #8
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4610      	mov	r0, r2
 8006d92:	4798      	blx	r3
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	dc01      	bgt.n	8006d9e <_ZN10IridiumSBD7doSBDRBEPhPj+0x12a>
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e000      	b.n	8006da0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x12c>
 8006d9e:	2300      	movs	r3, #0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d001      	beq.n	8006da8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x134>
      return ISBD_SENDRECEIVE_TIMEOUT;
 8006da4:	2307      	movs	r3, #7
 8006da6:	e1ad      	b.n	8007104 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
   if ((!this->useSerial) && (i2cSerAvailable() < 2))
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	7c5b      	ldrb	r3, [r3, #17]
 8006dac:	f083 0301 	eor.w	r3, r3, #1
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d007      	beq.n	8006dc6 <_ZN10IridiumSBD7doSBDRBEPhPj+0x152>
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f000 ff38 	bl	8007c2c <_ZN10IridiumSBD15i2cSerAvailableEv>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	dc01      	bgt.n	8006dc6 <_ZN10IridiumSBD7doSBDRBEPhPj+0x152>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e000      	b.n	8006dc8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x154>
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d001      	beq.n	8006dd0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x15c>
      return ISBD_SENDRECEIVE_TIMEOUT;
 8006dcc:	2307      	movs	r3, #7
 8006dce:	e199      	b.n	8007104 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   uint16_t size;
   if (this->useSerial)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	7c5b      	ldrb	r3, [r3, #17]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d01a      	beq.n	8006e0e <_ZN10IridiumSBD7doSBDRBEPhPj+0x19a>
   {
      size = 256 * stream->read() + stream->read();
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	689a      	ldr	r2, [r3, #8]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	330c      	adds	r3, #12
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4610      	mov	r0, r2
 8006de8:	4798      	blx	r3
 8006dea:	4603      	mov	r3, r0
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	021b      	lsls	r3, r3, #8
 8006df0:	b29c      	uxth	r4, r3
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	689a      	ldr	r2, [r3, #8]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	330c      	adds	r3, #12
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4610      	mov	r0, r2
 8006e02:	4798      	blx	r3
 8006e04:	4603      	mov	r3, r0
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	4423      	add	r3, r4
 8006e0a:	83bb      	strh	r3, [r7, #28]
 8006e0c:	e00d      	b.n	8006e2a <_ZN10IridiumSBD7doSBDRBEPhPj+0x1b6>
   }
   else
   {
      size = 256 * i2cSerRead() + i2cSerRead();
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f000 ff24 	bl	8007c5c <_ZN10IridiumSBD10i2cSerReadEv>
 8006e14:	4603      	mov	r3, r0
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	021b      	lsls	r3, r3, #8
 8006e1a:	b29c      	uxth	r4, r3
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f000 ff1d 	bl	8007c5c <_ZN10IridiumSBD10i2cSerReadEv>
 8006e22:	4603      	mov	r3, r0
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	4423      	add	r3, r4
 8006e28:	83bb      	strh	r3, [r7, #28]
   }
   consoleprint(F("[Binary size:"));
 8006e2a:	493b      	ldr	r1, [pc, #236]	; (8006f18 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a4>)
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f000 fc05 	bl	800763c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(size);
 8006e32:	8bbb      	ldrh	r3, [r7, #28]
 8006e34:	4619      	mov	r1, r3
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f000 fc38 	bl	80076ac <_ZN10IridiumSBD12consoleprintEt>
   consoleprint(F("]"));
 8006e3c:	4937      	ldr	r1, [pc, #220]	; (8006f1c <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a8>)
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f000 fbfc 	bl	800763c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

   for (uint16_t bytesRead = 0; bytesRead < size;)
 8006e44:	2300      	movs	r3, #0
 8006e46:	837b      	strh	r3, [r7, #26]
 8006e48:	8b7a      	ldrh	r2, [r7, #26]
 8006e4a:	8bbb      	ldrh	r3, [r7, #28]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d27f      	bcs.n	8006f50 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2dc>
   {
      if (cancelled())
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f7ff fe79 	bl	8006b48 <_ZN10IridiumSBD9cancelledEv>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d001      	beq.n	8006e60 <_ZN10IridiumSBD7doSBDRBEPhPj+0x1ec>
         return ISBD_CANCELLED;
 8006e5c:	2304      	movs	r3, #4
 8006e5e:	e151      	b.n	8007104 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

      if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	7c5b      	ldrb	r3, [r3, #17]
 8006e64:	f083 0301 	eor.w	r3, r3, #1
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d002      	beq.n	8006e74 <_ZN10IridiumSBD7doSBDRBEPhPj+0x200>
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f000 fdac 	bl	80079cc <_ZN10IridiumSBD13check9603dataEv>

      if ((this->useSerial && (stream->available())) || ((!this->useSerial) && i2cSerAvailable()))
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	7c5b      	ldrb	r3, [r3, #17]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00b      	beq.n	8006e94 <_ZN10IridiumSBD7doSBDRBEPhPj+0x220>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	3308      	adds	r3, #8
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4610      	mov	r0, r2
 8006e8c:	4798      	blx	r3
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d10c      	bne.n	8006eae <_ZN10IridiumSBD7doSBDRBEPhPj+0x23a>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	7c5b      	ldrb	r3, [r3, #17]
 8006e98:	f083 0301 	eor.w	r3, r3, #1
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d007      	beq.n	8006eb2 <_ZN10IridiumSBD7doSBDRBEPhPj+0x23e>
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f000 fec2 	bl	8007c2c <_ZN10IridiumSBD15i2cSerAvailableEv>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d001      	beq.n	8006eb2 <_ZN10IridiumSBD7doSBDRBEPhPj+0x23e>
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e000      	b.n	8006eb4 <_ZN10IridiumSBD7doSBDRBEPhPj+0x240>
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d035      	beq.n	8006f24 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
      {
         uint8_t c;
         if (this->useSerial)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	7c5b      	ldrb	r3, [r3, #17]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00b      	beq.n	8006ed8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x264>
         {
            c = stream->read();
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	689a      	ldr	r2, [r3, #8]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	330c      	adds	r3, #12
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4610      	mov	r0, r2
 8006ed0:	4798      	blx	r3
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	767b      	strb	r3, [r7, #25]
 8006ed6:	e004      	b.n	8006ee2 <_ZN10IridiumSBD7doSBDRBEPhPj+0x26e>
         }
         else
         {
            c = i2cSerRead();
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f000 febf 	bl	8007c5c <_ZN10IridiumSBD10i2cSerReadEv>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	767b      	strb	r3, [r7, #25]
         }
         bytesRead++;
 8006ee2:	8b7b      	ldrh	r3, [r7, #26]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	837b      	strh	r3, [r7, #26]
         if (rxBuffer && prxBufferSize)
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d01a      	beq.n	8006f24 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d017      	beq.n	8006f24 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
         {
            if (*prxBufferSize > 0)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d011      	beq.n	8006f20 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2ac>
            {
               *rxBuffer++ = c;
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	1c5a      	adds	r2, r3, #1
 8006f00:	60ba      	str	r2, [r7, #8]
 8006f02:	7e7a      	ldrb	r2, [r7, #25]
 8006f04:	701a      	strb	r2, [r3, #0]
               (*prxBufferSize)--;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	1e5a      	subs	r2, r3, #1
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	601a      	str	r2, [r3, #0]
 8006f10:	e008      	b.n	8006f24 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
 8006f12:	bf00      	nop
 8006f14:	08019050 	.word	0x08019050
 8006f18:	0801905c 	.word	0x0801905c
 8006f1c:	0801906c 	.word	0x0801906c
            }
            else
            {
               rxOverflow = true;
 8006f20:	2301      	movs	r3, #1
 8006f22:	77fb      	strb	r3, [r7, #31]
            }
         }
      }

      if (millis() - start >= 1000UL * atTimeout)
 8006f24:	f002 f9f2 	bl	800930c <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	1ad2      	subs	r2, r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f32:	4619      	mov	r1, r3
 8006f34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f38:	fb03 f301 	mul.w	r3, r3, r1
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	bf2c      	ite	cs
 8006f40:	2301      	movcs	r3, #1
 8006f42:	2300      	movcc	r3, #0
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	f43f af7e 	beq.w	8006e48 <_ZN10IridiumSBD7doSBDRBEPhPj+0x1d4>
         return ISBD_SENDRECEIVE_TIMEOUT;
 8006f4c:	2307      	movs	r3, #7
 8006f4e:	e0d9      	b.n	8007104 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
   }

   while (millis() - start < 1000UL * atTimeout)
 8006f50:	f002 f9dc 	bl	800930c <HAL_GetTick>
 8006f54:	4602      	mov	r2, r0
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	1ad2      	subs	r2, r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f5e:	4619      	mov	r1, r3
 8006f60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f64:	fb03 f301 	mul.w	r3, r3, r1
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	bf34      	ite	cc
 8006f6c:	2301      	movcc	r3, #1
 8006f6e:	2300      	movcs	r3, #0
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d03c      	beq.n	8006ff0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x37c>
   {
      if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	7c5b      	ldrb	r3, [r3, #17]
 8006f7a:	f083 0301 	eor.w	r3, r3, #1
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d002      	beq.n	8006f8a <_ZN10IridiumSBD7doSBDRBEPhPj+0x316>
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f000 fd21 	bl	80079cc <_ZN10IridiumSBD13check9603dataEv>
      if (cancelled())
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f7ff fddc 	bl	8006b48 <_ZN10IridiumSBD9cancelledEv>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d001      	beq.n	8006f9a <_ZN10IridiumSBD7doSBDRBEPhPj+0x326>
         return ISBD_CANCELLED;
 8006f96:	2304      	movs	r3, #4
 8006f98:	e0b4      	b.n	8007104 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
      if (this->useSerial && (stream->available() >= 2))
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	7c5b      	ldrb	r3, [r3, #17]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00d      	beq.n	8006fbe <_ZN10IridiumSBD7doSBDRBEPhPj+0x34a>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	689a      	ldr	r2, [r3, #8]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	3308      	adds	r3, #8
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	4798      	blx	r3
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	dd01      	ble.n	8006fbe <_ZN10IridiumSBD7doSBDRBEPhPj+0x34a>
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e000      	b.n	8006fc0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x34c>
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d112      	bne.n	8006fea <_ZN10IridiumSBD7doSBDRBEPhPj+0x376>
         break;
      if ((!this->useSerial) && (i2cSerAvailable() >= 2))
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	7c5b      	ldrb	r3, [r3, #17]
 8006fc8:	f083 0301 	eor.w	r3, r3, #1
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d007      	beq.n	8006fe2 <_ZN10IridiumSBD7doSBDRBEPhPj+0x36e>
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f000 fe2a 	bl	8007c2c <_ZN10IridiumSBD15i2cSerAvailableEv>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	dd01      	ble.n	8006fe2 <_ZN10IridiumSBD7doSBDRBEPhPj+0x36e>
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e000      	b.n	8006fe4 <_ZN10IridiumSBD7doSBDRBEPhPj+0x370>
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d102      	bne.n	8006fee <_ZN10IridiumSBD7doSBDRBEPhPj+0x37a>
   while (millis() - start < 1000UL * atTimeout)
 8006fe8:	e7b2      	b.n	8006f50 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2dc>
         break;
 8006fea:	bf00      	nop
 8006fec:	e000      	b.n	8006ff0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x37c>
         break;
 8006fee:	bf00      	nop
   }

   if (this->useSerial && (stream->available() < 2))
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	7c5b      	ldrb	r3, [r3, #17]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00d      	beq.n	8007014 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3a0>
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	689a      	ldr	r2, [r3, #8]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3308      	adds	r3, #8
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4610      	mov	r0, r2
 8007008:	4798      	blx	r3
 800700a:	4603      	mov	r3, r0
 800700c:	2b01      	cmp	r3, #1
 800700e:	dc01      	bgt.n	8007014 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3a0>
 8007010:	2301      	movs	r3, #1
 8007012:	e000      	b.n	8007016 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3a2>
 8007014:	2300      	movs	r3, #0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d001      	beq.n	800701e <_ZN10IridiumSBD7doSBDRBEPhPj+0x3aa>
      return ISBD_SENDRECEIVE_TIMEOUT;
 800701a:	2307      	movs	r3, #7
 800701c:	e072      	b.n	8007104 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
   if ((!this->useSerial) && (i2cSerAvailable() < 2))
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	7c5b      	ldrb	r3, [r3, #17]
 8007022:	f083 0301 	eor.w	r3, r3, #1
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b00      	cmp	r3, #0
 800702a:	d007      	beq.n	800703c <_ZN10IridiumSBD7doSBDRBEPhPj+0x3c8>
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f000 fdfd 	bl	8007c2c <_ZN10IridiumSBD15i2cSerAvailableEv>
 8007032:	4603      	mov	r3, r0
 8007034:	2b01      	cmp	r3, #1
 8007036:	dc01      	bgt.n	800703c <_ZN10IridiumSBD7doSBDRBEPhPj+0x3c8>
 8007038:	2301      	movs	r3, #1
 800703a:	e000      	b.n	800703e <_ZN10IridiumSBD7doSBDRBEPhPj+0x3ca>
 800703c:	2300      	movs	r3, #0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d001      	beq.n	8007046 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3d2>
      return ISBD_SENDRECEIVE_TIMEOUT;
 8007042:	2307      	movs	r3, #7
 8007044:	e05e      	b.n	8007104 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   uint16_t checksum;
   if (this->useSerial)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	7c5b      	ldrb	r3, [r3, #17]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d01a      	beq.n	8007084 <_ZN10IridiumSBD7doSBDRBEPhPj+0x410>
   {
      checksum = 256 * stream->read() + stream->read();
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	689a      	ldr	r2, [r3, #8]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	330c      	adds	r3, #12
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4610      	mov	r0, r2
 800705e:	4798      	blx	r3
 8007060:	4603      	mov	r3, r0
 8007062:	b29b      	uxth	r3, r3
 8007064:	021b      	lsls	r3, r3, #8
 8007066:	b29c      	uxth	r4, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	689a      	ldr	r2, [r3, #8]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	330c      	adds	r3, #12
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4610      	mov	r0, r2
 8007078:	4798      	blx	r3
 800707a:	4603      	mov	r3, r0
 800707c:	b29b      	uxth	r3, r3
 800707e:	4423      	add	r3, r4
 8007080:	82fb      	strh	r3, [r7, #22]
 8007082:	e00d      	b.n	80070a0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x42c>
   }
   else
   {
      checksum = 256 * i2cSerRead() + i2cSerRead();
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f000 fde9 	bl	8007c5c <_ZN10IridiumSBD10i2cSerReadEv>
 800708a:	4603      	mov	r3, r0
 800708c:	b29b      	uxth	r3, r3
 800708e:	021b      	lsls	r3, r3, #8
 8007090:	b29c      	uxth	r4, r3
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f000 fde2 	bl	8007c5c <_ZN10IridiumSBD10i2cSerReadEv>
 8007098:	4603      	mov	r3, r0
 800709a:	b29b      	uxth	r3, r3
 800709c:	4423      	add	r3, r4
 800709e:	82fb      	strh	r3, [r7, #22]
   }
   consoleprint(F("[csum:"));
 80070a0:	491a      	ldr	r1, [pc, #104]	; (800710c <_ZN10IridiumSBD7doSBDRBEPhPj+0x498>)
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f000 faca 	bl	800763c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(checksum);
 80070a8:	8afb      	ldrh	r3, [r7, #22]
 80070aa:	4619      	mov	r1, r3
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f000 fafd 	bl	80076ac <_ZN10IridiumSBD12consoleprintEt>
   consoleprint(F("]"));
 80070b2:	4917      	ldr	r1, [pc, #92]	; (8007110 <_ZN10IridiumSBD7doSBDRBEPhPj+0x49c>)
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f000 fac1 	bl	800763c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

   // Return actual size of returned buffer
   if (prxBufferSize)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d002      	beq.n	80070c6 <_ZN10IridiumSBD7doSBDRBEPhPj+0x452>
      *prxBufferSize = (size_t)size;
 80070c0:	8bba      	ldrh	r2, [r7, #28]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	601a      	str	r2, [r3, #0]

   // Wait for final OK
   if (!waitForATResponse())
 80070c6:	4b13      	ldr	r3, [pc, #76]	; (8007114 <_ZN10IridiumSBD7doSBDRBEPhPj+0x4a0>)
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	2300      	movs	r3, #0
 80070cc:	2200      	movs	r2, #0
 80070ce:	2100      	movs	r1, #0
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f7ff fc7b 	bl	80069cc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80070d6:	4603      	mov	r3, r0
 80070d8:	f083 0301 	eor.w	r3, r3, #1
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d009      	beq.n	80070f6 <_ZN10IridiumSBD7doSBDRBEPhPj+0x482>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f7ff fd30 	bl	8006b48 <_ZN10IridiumSBD9cancelledEv>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d001      	beq.n	80070f2 <_ZN10IridiumSBD7doSBDRBEPhPj+0x47e>
 80070ee:	2304      	movs	r3, #4
 80070f0:	e008      	b.n	8007104 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
 80070f2:	2303      	movs	r3, #3
 80070f4:	e006      	b.n	8007104 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   return rxOverflow ? ISBD_RX_OVERFLOW : ISBD_SUCCESS;
 80070f6:	7ffb      	ldrb	r3, [r7, #31]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d001      	beq.n	8007100 <_ZN10IridiumSBD7doSBDRBEPhPj+0x48c>
 80070fc:	2308      	movs	r3, #8
 80070fe:	e000      	b.n	8007102 <_ZN10IridiumSBD7doSBDRBEPhPj+0x48e>
 8007100:	2300      	movs	r3, #0
 8007102:	bf00      	nop
}
 8007104:	4618      	mov	r0, r3
 8007106:	3724      	adds	r7, #36	; 0x24
 8007108:	46bd      	mov	sp, r7
 800710a:	bd90      	pop	{r4, r7, pc}
 800710c:	08019070 	.word	0x08019070
 8007110:	0801906c 	.word	0x0801906c
 8007114:	08018ad8 	.word	0x08018ad8

08007118 <_ZN10IridiumSBD5powerEb>:

void IridiumSBD::power(bool on)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	460b      	mov	r3, r1
 8007122:	70fb      	strb	r3, [r7, #3]
   this->asleep = !on;
 8007124:	78fb      	ldrb	r3, [r7, #3]
 8007126:	f083 0301 	eor.w	r3, r3, #1
 800712a:	b2da      	uxtb	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

   if (this->useSerial)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	7c5b      	ldrb	r3, [r3, #17]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d010      	beq.n	800715c <_ZN10IridiumSBD5powerEb+0x44>
   {
      if (this->sleepPin == -1)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800713e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007142:	d04a      	beq.n	80071da <_ZN10IridiumSBD5powerEb+0xc2>
      {
         return;
      }
      else
      {
          if (this->sleepPinConfigured == false)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800714a:	2b00      	cmp	r3, #0
 800714c:	d106      	bne.n	800715c <_ZN10IridiumSBD5powerEb+0x44>
          {
             configureSleepPin();
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f84c 	bl	80071ec <_ZN10IridiumSBD17configureSleepPinEv>
             this->sleepPinConfigured = true;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          }
      }
   }

   if (on)
 800715c:	78fb      	ldrb	r3, [r7, #3]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d017      	beq.n	8007192 <_ZN10IridiumSBD5powerEb+0x7a>
   {
      diagprint(F("Powering on modem...\r\n"));
 8007162:	4920      	ldr	r1, [pc, #128]	; (80071e4 <_ZN10IridiumSBD5powerEb+0xcc>)
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fa11 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	7c5b      	ldrb	r3, [r3, #17]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d004      	beq.n	800717c <_ZN10IridiumSBD5powerEb+0x64>
      {
         setSleepPin(HIGH); // HIGH = awake
 8007172:	2101      	movs	r1, #1
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 f847 	bl	8007208 <_ZN10IridiumSBD11setSleepPinEh>
 800717a:	e003      	b.n	8007184 <_ZN10IridiumSBD5powerEb+0x6c>
      }
      else
      {
         enable9603(true);
 800717c:	2101      	movs	r1, #1
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7fe fe36 	bl	8005df0 <_ZN10IridiumSBD10enable9603Eb>
      }
      lastPowerOnTime = millis();
 8007184:	f002 f8c2 	bl	800930c <HAL_GetTick>
 8007188:	4602      	mov	r2, r0
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8007190:	e024      	b.n	80071dc <_ZN10IridiumSBD5powerEb+0xc4>
   }
   else
   {
      // Best Practices Guide suggests waiting at least 2 seconds
      // before powering off again
      unsigned long elapsed = millis() - lastPowerOnTime;
 8007192:	f002 f8bb 	bl	800930c <HAL_GetTick>
 8007196:	4602      	mov	r2, r0
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	60fb      	str	r3, [r7, #12]
      if (elapsed < 2000UL)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80071a8:	d205      	bcs.n	80071b6 <_ZN10IridiumSBD5powerEb+0x9e>
         //delay(2000UL - elapsed); TODO
    	  HAL_Delay(2000UL - elapsed);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 80071b0:	4618      	mov	r0, r3
 80071b2:	f002 f8b7 	bl	8009324 <HAL_Delay>

      diagprint(F("Powering off modem...\r\n"));
 80071b6:	490c      	ldr	r1, [pc, #48]	; (80071e8 <_ZN10IridiumSBD5powerEb+0xd0>)
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f9e7 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	7c5b      	ldrb	r3, [r3, #17]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d004      	beq.n	80071d0 <_ZN10IridiumSBD5powerEb+0xb8>
      {
         setSleepPin(LOW); // LOW = asleep
 80071c6:	2100      	movs	r1, #0
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f81d 	bl	8007208 <_ZN10IridiumSBD11setSleepPinEh>
 80071ce:	e005      	b.n	80071dc <_ZN10IridiumSBD5powerEb+0xc4>
      }
      else
      {
         enable9603(false);
 80071d0:	2100      	movs	r1, #0
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f7fe fe0c 	bl	8005df0 <_ZN10IridiumSBD10enable9603Eb>
 80071d8:	e000      	b.n	80071dc <_ZN10IridiumSBD5powerEb+0xc4>
         return;
 80071da:	bf00      	nop
      }
   }
}
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	08019078 	.word	0x08019078
 80071e8:	08019090 	.word	0x08019090

080071ec <_ZN10IridiumSBD17configureSleepPinEv>:

void IridiumSBD::configureSleepPin()
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
	//pinMode(sleepPin, OUTPUT); // Make the sleep pin an output TODO (doesnt work with this)
   //pinMode(sleepPin, OUTPUT_PP); // Make the sleep pin an output
   diagprint(F("configureSleepPin: sleepPin configured\r\n"));
 80071f4:	4903      	ldr	r1, [pc, #12]	; (8007204 <_ZN10IridiumSBD17configureSleepPinEv+0x18>)
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f9c8 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80071fc:	bf00      	nop
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	080190a8 	.word	0x080190a8

08007208 <_ZN10IridiumSBD11setSleepPinEh>:

void IridiumSBD::setSleepPin(uint8_t enable)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	460b      	mov	r3, r1
 8007212:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(sleepPin_GPIO_Port,sleepPin_Pin,GPIO_PIN_SET);
 8007214:	2201      	movs	r2, #1
 8007216:	2108      	movs	r1, #8
 8007218:	480b      	ldr	r0, [pc, #44]	; (8007248 <_ZN10IridiumSBD11setSleepPinEh+0x40>)
 800721a:	f002 fdf1 	bl	8009e00 <HAL_GPIO_WritePin>
   //digitalWrite(this->sleepPin, enable); // HIGH = awake, LOW = asleep TODO
   diagprint(F("setSleepPin: sleepPin set "));
 800721e:	490b      	ldr	r1, [pc, #44]	; (800724c <_ZN10IridiumSBD11setSleepPinEh+0x44>)
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f9b3 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   if (enable == HIGH)
 8007226:	78fb      	ldrb	r3, [r7, #3]
 8007228:	2b01      	cmp	r3, #1
 800722a:	d104      	bne.n	8007236 <_ZN10IridiumSBD11setSleepPinEh+0x2e>
      diagprint(F("HIGH\r\n"));
 800722c:	4908      	ldr	r1, [pc, #32]	; (8007250 <_ZN10IridiumSBD11setSleepPinEh+0x48>)
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f9ac 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   else
      diagprint(F("LOW\r\n"));
}
 8007234:	e003      	b.n	800723e <_ZN10IridiumSBD11setSleepPinEh+0x36>
      diagprint(F("LOW\r\n"));
 8007236:	4907      	ldr	r1, [pc, #28]	; (8007254 <_ZN10IridiumSBD11setSleepPinEh+0x4c>)
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f9a7 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 800723e:	bf00      	nop
 8007240:	3708      	adds	r7, #8
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	40020800 	.word	0x40020800
 800724c:	080190d4 	.word	0x080190d4
 8007250:	080190f0 	.word	0x080190f0
 8007254:	080190f8 	.word	0x080190f8

08007258 <_ZN10IridiumSBD15beginSerialPortEv>:

void IridiumSBD::beginSerialPort()
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::beginSerialPort\r\n"));
 8007260:	4903      	ldr	r1, [pc, #12]	; (8007270 <_ZN10IridiumSBD15beginSerialPortEv+0x18>)
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f992 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8007268:	bf00      	nop
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	08019100 	.word	0x08019100

08007274 <_ZN10IridiumSBD13endSerialPortEv>:

void IridiumSBD::endSerialPort()
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::endSerialPort\r\n"));
 800727c:	4903      	ldr	r1, [pc, #12]	; (800728c <_ZN10IridiumSBD13endSerialPortEv+0x18>)
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f984 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8007284:	bf00      	nop
 8007286:	3708      	adds	r7, #8
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	08019120 	.word	0x08019120

08007290 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>:

void IridiumSBD::send(FlashString str, bool beginLine, bool endLine)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	4611      	mov	r1, r2
 800729c:	461a      	mov	r2, r3
 800729e:	460b      	mov	r3, r1
 80072a0:	71fb      	strb	r3, [r7, #7]
 80072a2:	4613      	mov	r3, r2
 80072a4:	71bb      	strb	r3, [r7, #6]
   if (beginLine)
 80072a6:	79fb      	ldrb	r3, [r7, #7]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d003      	beq.n	80072b4 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x24>
      consoleprint(F(">> "));
 80072ac:	4923      	ldr	r1, [pc, #140]	; (800733c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xac>)
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f000 f9c4 	bl	800763c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 80072b4:	68b9      	ldr	r1, [r7, #8]
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f000 f9c0 	bl	800763c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (endLine)
 80072bc:	79bb      	ldrb	r3, [r7, #6]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d003      	beq.n	80072ca <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x3a>
      consoleprint(F("\r\n"));
 80072c2:	491f      	ldr	r1, [pc, #124]	; (8007340 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xb0>)
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f000 f9b9 	bl	800763c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	7c5b      	ldrb	r3, [r3, #17]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d006      	beq.n	80072e0 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x50>
   {
      stream->print(str);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	68b9      	ldr	r1, [r7, #8]
 80072d8:	4618      	mov	r0, r3
 80072da:	f001 f9e3 	bl	80086a4 <_ZN5Print5printEPK19__FlashStringHelper>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 80072de:	e029      	b.n	8007334 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xa4>
      lastCheck = millis(); // Update lastCheck so we enforce a full I2C_POLLING_WAIT //TODO Uncommented this line
 80072e0:	f002 f814 	bl	800930c <HAL_GetTick>
 80072e4:	4602      	mov	r2, r0
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	66da      	str	r2, [r3, #108]	; 0x6c
      wireport->beginTransmission((uint8_t)deviceaddress);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	68da      	ldr	r2, [r3, #12]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	7c1b      	ldrb	r3, [r3, #16]
 80072f2:	4619      	mov	r1, r3
 80072f4:	4610      	mov	r0, r2
 80072f6:	f001 fb49 	bl	800898c <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	21ff      	movs	r1, #255	; 0xff
 8007300:	4618      	mov	r0, r3
 8007302:	f7fe fb39 	bl	8005978 <_ZN7TwoWire5writeEi>
      wireport->print(str);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	68b9      	ldr	r1, [r7, #8]
 800730c:	4618      	mov	r0, r3
 800730e:	f001 f9c9 	bl	80086a4 <_ZN5Print5printEPK19__FlashStringHelper>
      if (wireport->endTransmission() != 0) //Release bus
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	4618      	mov	r0, r3
 8007318:	f001 fb82 	bl	8008a20 <_ZN7TwoWire15endTransmissionEv>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	bf14      	ite	ne
 8007322:	2301      	movne	r3, #1
 8007324:	2300      	moveq	r3, #0
 8007326:	b2db      	uxtb	r3, r3
 8007328:	2b00      	cmp	r3, #0
 800732a:	d003      	beq.n	8007334 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xa4>
         diagprint(F("I2C write was not successful!\r\n"));
 800732c:	4905      	ldr	r1, [pc, #20]	; (8007344 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xb4>)
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f000 f92c 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8007334:	bf00      	nop
 8007336:	3710      	adds	r7, #16
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	0801913c 	.word	0x0801913c
 8007340:	08018e84 	.word	0x08018e84
 8007344:	08018f04 	.word	0x08018f04

08007348 <_ZN10IridiumSBD4sendEPKc>:

void IridiumSBD::send(const char *str)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
   consoleprint(F(">> "));
 8007352:	4920      	ldr	r1, [pc, #128]	; (80073d4 <_ZN10IridiumSBD4sendEPKc+0x8c>)
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f971 	bl	800763c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 800735a:	6839      	ldr	r1, [r7, #0]
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 f98b 	bl	8007678 <_ZN10IridiumSBD12consoleprintEPKc>
   consoleprint(F("\r\n"));
 8007362:	491d      	ldr	r1, [pc, #116]	; (80073d8 <_ZN10IridiumSBD4sendEPKc+0x90>)
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 f969 	bl	800763c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	7c5b      	ldrb	r3, [r3, #17]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d006      	beq.n	8007380 <_ZN10IridiumSBD4sendEPKc+0x38>
   {
      stream->print(str);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	6839      	ldr	r1, [r7, #0]
 8007378:	4618      	mov	r0, r3
 800737a:	f001 f9a1 	bl	80086c0 <_ZN5Print5printEPKc>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 800737e:	e024      	b.n	80073ca <_ZN10IridiumSBD4sendEPKc+0x82>
      wireport->beginTransmission((uint8_t)deviceaddress);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	68da      	ldr	r2, [r3, #12]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	7c1b      	ldrb	r3, [r3, #16]
 8007388:	4619      	mov	r1, r3
 800738a:	4610      	mov	r0, r2
 800738c:	f001 fafe 	bl	800898c <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	21ff      	movs	r1, #255	; 0xff
 8007396:	4618      	mov	r0, r3
 8007398:	f7fe faee 	bl	8005978 <_ZN7TwoWire5writeEi>
      wireport->print(str);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	6839      	ldr	r1, [r7, #0]
 80073a2:	4618      	mov	r0, r3
 80073a4:	f001 f98c 	bl	80086c0 <_ZN5Print5printEPKc>
      if (wireport->endTransmission() != 0) //Release bus
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	4618      	mov	r0, r3
 80073ae:	f001 fb37 	bl	8008a20 <_ZN7TwoWire15endTransmissionEv>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	bf14      	ite	ne
 80073b8:	2301      	movne	r3, #1
 80073ba:	2300      	moveq	r3, #0
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d003      	beq.n	80073ca <_ZN10IridiumSBD4sendEPKc+0x82>
         diagprint(F("I2C write was not successful!\r\n"));
 80073c2:	4906      	ldr	r1, [pc, #24]	; (80073dc <_ZN10IridiumSBD4sendEPKc+0x94>)
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f8e1 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80073ca:	bf00      	nop
 80073cc:	3708      	adds	r7, #8
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	0801913c 	.word	0x0801913c
 80073d8:	08018e84 	.word	0x08018e84
 80073dc:	08018f04 	.word	0x08018f04

080073e0 <_ZN10IridiumSBD8sendlongEPKc>:

void IridiumSBD::sendlong(const char *str)
// Send a long string that might need to be broken up for the I2C port
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
   consoleprint(F(">> "));
 80073ea:	4942      	ldr	r1, [pc, #264]	; (80074f4 <_ZN10IridiumSBD8sendlongEPKc+0x114>)
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 f925 	bl	800763c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   this->print((char*) str);//TODO doesn't print otherwise
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	6838      	ldr	r0, [r7, #0]
 80073f8:	4798      	blx	r3
   consoleprint(str);
 80073fa:	6839      	ldr	r1, [r7, #0]
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 f93b 	bl	8007678 <_ZN10IridiumSBD12consoleprintEPKc>
   consoleprint(F("\r\n"));
 8007402:	493d      	ldr	r1, [pc, #244]	; (80074f8 <_ZN10IridiumSBD8sendlongEPKc+0x118>)
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 f919 	bl	800763c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

   if (this->useSerial)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	7c5b      	ldrb	r3, [r3, #17]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d006      	beq.n	8007420 <_ZN10IridiumSBD8sendlongEPKc+0x40>
   {
      stream->print(str); // If we are using serial then send it and don't worry about the long length
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	6839      	ldr	r1, [r7, #0]
 8007418:	4618      	mov	r0, r3
 800741a:	f001 f951 	bl	80086c0 <_ZN5Print5printEPKc>
         wireport->write(str[i]);
      }
      if (wireport->endTransmission() != 0) //Send data and release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 800741e:	e065      	b.n	80074ec <_ZN10IridiumSBD8sendlongEPKc+0x10c>
      size_t bytes_to_send = strlen(str); // Send this many bytes in total
 8007420:	6838      	ldr	r0, [r7, #0]
 8007422:	f7f8 feef 	bl	8000204 <strlen>
 8007426:	6178      	str	r0, [r7, #20]
      size_t txDataSize = bytes_to_send;
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	60fb      	str	r3, [r7, #12]
      size_t i=0;
 800742c:	2300      	movs	r3, #0
 800742e:	613b      	str	r3, [r7, #16]
      while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 1)) // If there are too many bytes to send all in one go
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	2b1f      	cmp	r3, #31
 8007434:	d92a      	bls.n	800748c <_ZN10IridiumSBD8sendlongEPKc+0xac>
         nexti = i + (TINY_I2C_BUFFER_LENGTH - 1);
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	331f      	adds	r3, #31
 800743a:	60bb      	str	r3, [r7, #8]
         wireport->beginTransmission((uint8_t)deviceaddress);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	68da      	ldr	r2, [r3, #12]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	7c1b      	ldrb	r3, [r3, #16]
 8007444:	4619      	mov	r1, r3
 8007446:	4610      	mov	r0, r2
 8007448:	f001 faa0 	bl	800898c <_ZN7TwoWire17beginTransmissionEh>
         wireport->write(DATA_REG); // Point to the 'serial register'
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	21ff      	movs	r1, #255	; 0xff
 8007452:	4618      	mov	r0, r3
 8007454:	f7fe fa90 	bl	8005978 <_ZN7TwoWire5writeEi>
         for (; i<nexti; ++i)
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	429a      	cmp	r2, r3
 800745e:	d20c      	bcs.n	800747a <_ZN10IridiumSBD8sendlongEPKc+0x9a>
            wireport->write(str[i]); // Write each byte
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68d8      	ldr	r0, [r3, #12]
 8007464:	683a      	ldr	r2, [r7, #0]
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	4413      	add	r3, r2
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	4619      	mov	r1, r3
 800746e:	f7fe fa83 	bl	8005978 <_ZN7TwoWire5writeEi>
         for (; i<nexti; ++i)
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	3301      	adds	r3, #1
 8007476:	613b      	str	r3, [r7, #16]
 8007478:	e7ee      	b.n	8007458 <_ZN10IridiumSBD8sendlongEPKc+0x78>
         bytes_to_send = bytes_to_send - (TINY_I2C_BUFFER_LENGTH - 1); // Decrease the number of bytes still to send
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	3b1f      	subs	r3, #31
 800747e:	617b      	str	r3, [r7, #20]
         wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	4618      	mov	r0, r3
 8007486:	f001 facb 	bl	8008a20 <_ZN7TwoWire15endTransmissionEv>
      while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 1)) // If there are too many bytes to send all in one go
 800748a:	e7d1      	b.n	8007430 <_ZN10IridiumSBD8sendlongEPKc+0x50>
      wireport->beginTransmission((uint8_t)deviceaddress);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	68da      	ldr	r2, [r3, #12]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	7c1b      	ldrb	r3, [r3, #16]
 8007494:	4619      	mov	r1, r3
 8007496:	4610      	mov	r0, r2
 8007498:	f001 fa78 	bl	800898c <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	21ff      	movs	r1, #255	; 0xff
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7fe fa68 	bl	8005978 <_ZN7TwoWire5writeEi>
      for (; i<txDataSize; ++i)
 80074a8:	693a      	ldr	r2, [r7, #16]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d20c      	bcs.n	80074ca <_ZN10IridiumSBD8sendlongEPKc+0xea>
         wireport->write(str[i]);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	68d8      	ldr	r0, [r3, #12]
 80074b4:	683a      	ldr	r2, [r7, #0]
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	4413      	add	r3, r2
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	4619      	mov	r1, r3
 80074be:	f7fe fa5b 	bl	8005978 <_ZN7TwoWire5writeEi>
      for (; i<txDataSize; ++i)
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	3301      	adds	r3, #1
 80074c6:	613b      	str	r3, [r7, #16]
 80074c8:	e7ee      	b.n	80074a8 <_ZN10IridiumSBD8sendlongEPKc+0xc8>
      if (wireport->endTransmission() != 0) //Send data and release bus
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	4618      	mov	r0, r3
 80074d0:	f001 faa6 	bl	8008a20 <_ZN7TwoWire15endTransmissionEv>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	bf14      	ite	ne
 80074da:	2301      	movne	r3, #1
 80074dc:	2300      	moveq	r3, #0
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d003      	beq.n	80074ec <_ZN10IridiumSBD8sendlongEPKc+0x10c>
         diagprint(F("I2C write was not successful!\r\n"));
 80074e4:	4905      	ldr	r1, [pc, #20]	; (80074fc <_ZN10IridiumSBD8sendlongEPKc+0x11c>)
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f850 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80074ec:	bf00      	nop
 80074ee:	3718      	adds	r7, #24
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	0801913c 	.word	0x0801913c
 80074f8:	08018e84 	.word	0x08018e84
 80074fc:	08018f04 	.word	0x08018f04

08007500 <_ZN10IridiumSBD4sendEt>:

void IridiumSBD::send(uint16_t n)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	460b      	mov	r3, r1
 800750a:	807b      	strh	r3, [r7, #2]
   consoleprint(n);
 800750c:	887b      	ldrh	r3, [r7, #2]
 800750e:	4619      	mov	r1, r3
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 f8cb 	bl	80076ac <_ZN10IridiumSBD12consoleprintEt>
   if (this->useSerial)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	7c5b      	ldrb	r3, [r3, #17]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d008      	beq.n	8007530 <_ZN10IridiumSBD4sendEt+0x30>
   {
      stream->print(n);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	4618      	mov	r0, r3
 8007524:	887b      	ldrh	r3, [r7, #2]
 8007526:	220a      	movs	r2, #10
 8007528:	4619      	mov	r1, r3
 800752a:	f001 f8e9 	bl	8008700 <_ZN5Print5printEii>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(n);
      if (wireport->endTransmission() != 0) //Send data and release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 800752e:	e026      	b.n	800757e <_ZN10IridiumSBD4sendEt+0x7e>
      wireport->beginTransmission((uint8_t)deviceaddress);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	68da      	ldr	r2, [r3, #12]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	7c1b      	ldrb	r3, [r3, #16]
 8007538:	4619      	mov	r1, r3
 800753a:	4610      	mov	r0, r2
 800753c:	f001 fa26 	bl	800898c <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	21ff      	movs	r1, #255	; 0xff
 8007546:	4618      	mov	r0, r3
 8007548:	f7fe fa16 	bl	8005978 <_ZN7TwoWire5writeEi>
      wireport->print(n);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	4618      	mov	r0, r3
 8007552:	887b      	ldrh	r3, [r7, #2]
 8007554:	220a      	movs	r2, #10
 8007556:	4619      	mov	r1, r3
 8007558:	f001 f8d2 	bl	8008700 <_ZN5Print5printEii>
      if (wireport->endTransmission() != 0) //Send data and release bus
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	4618      	mov	r0, r3
 8007562:	f001 fa5d 	bl	8008a20 <_ZN7TwoWire15endTransmissionEv>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	bf14      	ite	ne
 800756c:	2301      	movne	r3, #1
 800756e:	2300      	moveq	r3, #0
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b00      	cmp	r3, #0
 8007574:	d003      	beq.n	800757e <_ZN10IridiumSBD4sendEt+0x7e>
         diagprint(F("I2C write was not successful!\r\n"));
 8007576:	4904      	ldr	r1, [pc, #16]	; (8007588 <_ZN10IridiumSBD4sendEt+0x88>)
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 f807 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 800757e:	bf00      	nop
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	08018f04 	.word	0x08018f04

0800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>:

void IridiumSBD::diagprint(FlashString str)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	1c5a      	adds	r2, r3, #1
 800759e:	60fa      	str	r2, [r7, #12]
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 80075a4:	7afb      	ldrb	r3, [r7, #11]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d005      	beq.n	80075b6 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0x2a>
      ISBDDiagsCallback(this, c);
 80075aa:	7afb      	ldrb	r3, [r7, #11]
 80075ac:	4619      	mov	r1, r3
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f7fe fa08 	bl	80059c4 <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   }
 80075b4:	e7f1      	b.n	800759a <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 80075b6:	bf00      	nop

   //TODO
   this->print((char*) str);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	6838      	ldr	r0, [r7, #0]
 80075be:	4798      	blx	r3
}
 80075c0:	bf00      	nop
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <_ZN10IridiumSBD9diagprintEPKc>:

void IridiumSBD::diagprint(const char *str)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
   while (*str)
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d008      	beq.n	80075ec <_ZN10IridiumSBD9diagprintEPKc+0x24>
      ISBDDiagsCallback(this, *str++);
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	1c5a      	adds	r2, r3, #1
 80075de:	603a      	str	r2, [r7, #0]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f7fe f9ed 	bl	80059c4 <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   while (*str)
 80075ea:	e7f2      	b.n	80075d2 <_ZN10IridiumSBD9diagprintEPKc+0xa>

   //TODO
   this->print((char*) str);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	6838      	ldr	r0, [r7, #0]
 80075f2:	4798      	blx	r3
}
 80075f4:	bf00      	nop
 80075f6:	3708      	adds	r7, #8
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <_ZN10IridiumSBD9diagprintEt>:

void IridiumSBD::diagprint(uint16_t n)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b086      	sub	sp, #24
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	460b      	mov	r3, r1
 8007606:	807b      	strh	r3, [r7, #2]
   char str[10];
   sprintf(str, "%u", n);
 8007608:	887a      	ldrh	r2, [r7, #2]
 800760a:	f107 030c 	add.w	r3, r7, #12
 800760e:	490a      	ldr	r1, [pc, #40]	; (8007638 <_ZN10IridiumSBD9diagprintEt+0x3c>)
 8007610:	4618      	mov	r0, r3
 8007612:	f00b ff7b 	bl	801350c <siprintf>
   diagprint(str);
 8007616:	f107 030c 	add.w	r3, r7, #12
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f7ff ffd3 	bl	80075c8 <_ZN10IridiumSBD9diagprintEPKc>

   //TODO
   this->print((char*) str);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f107 020c 	add.w	r2, r7, #12
 800762a:	4610      	mov	r0, r2
 800762c:	4798      	blx	r3
}
 800762e:	bf00      	nop
 8007630:	3718      	adds	r7, #24
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	08019140 	.word	0x08019140

0800763c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>:

void IridiumSBD::consoleprint(FlashString str)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	1c5a      	adds	r2, r3, #1
 800764e:	60fa      	str	r2, [r7, #12]
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 8007654:	7afb      	ldrb	r3, [r7, #11]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d005      	beq.n	8007666 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0x2a>
      ISBDConsoleCallback(this, c);
 800765a:	7afb      	ldrb	r3, [r7, #11]
 800765c:	4619      	mov	r1, r3
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f7fe f9a4 	bl	80059ac <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   }
 8007664:	e7f1      	b.n	800764a <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 8007666:	bf00      	nop

   //TODO
   this->print((char*) str);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6838      	ldr	r0, [r7, #0]
 800766e:	4798      	blx	r3
}
 8007670:	bf00      	nop
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <_ZN10IridiumSBD12consoleprintEPKc>:

void IridiumSBD::consoleprint(const char *str)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
   while (*str)
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d008      	beq.n	800769c <_ZN10IridiumSBD12consoleprintEPKc+0x24>
      ISBDConsoleCallback(this, *str++);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	1c5a      	adds	r2, r3, #1
 800768e:	603a      	str	r2, [r7, #0]
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	4619      	mov	r1, r3
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f7fe f989 	bl	80059ac <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   while (*str)
 800769a:	e7f2      	b.n	8007682 <_ZN10IridiumSBD12consoleprintEPKc+0xa>

   //TODO
   this->print((char*) str);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	6838      	ldr	r0, [r7, #0]
 80076a2:	4798      	blx	r3
}
 80076a4:	bf00      	nop
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <_ZN10IridiumSBD12consoleprintEt>:

void IridiumSBD::consoleprint(uint16_t n)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	460b      	mov	r3, r1
 80076b6:	807b      	strh	r3, [r7, #2]
   char str[10];
   sprintf(str, "%u", n);
 80076b8:	887a      	ldrh	r2, [r7, #2]
 80076ba:	f107 030c 	add.w	r3, r7, #12
 80076be:	490a      	ldr	r1, [pc, #40]	; (80076e8 <_ZN10IridiumSBD12consoleprintEt+0x3c>)
 80076c0:	4618      	mov	r0, r3
 80076c2:	f00b ff23 	bl	801350c <siprintf>
   consoleprint(str); //TODO
 80076c6:	f107 030c 	add.w	r3, r7, #12
 80076ca:	4619      	mov	r1, r3
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f7ff ffd3 	bl	8007678 <_ZN10IridiumSBD12consoleprintEPKc>
   //consoleprint((const char*) str);
   this->print((char*) str);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f107 020c 	add.w	r2, r7, #12
 80076da:	4610      	mov	r0, r2
 80076dc:	4798      	blx	r3
}
 80076de:	bf00      	nop
 80076e0:	3718      	adds	r7, #24
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	08019140 	.word	0x08019140

080076ec <_ZN10IridiumSBD12consoleprintEc>:

void IridiumSBD::consoleprint(char c)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	460b      	mov	r3, r1
 80076f6:	70fb      	strb	r3, [r7, #3]
   ISBDConsoleCallback(this, c);
 80076f8:	78fb      	ldrb	r3, [r7, #3]
 80076fa:	4619      	mov	r1, r3
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f7fe f955 	bl	80059ac <_Z19ISBDConsoleCallbackP10IridiumSBDc>
}
 8007702:	bf00      	nop
 8007704:	3708      	adds	r7, #8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
	...

0800770c <_ZN10IridiumSBD11SBDRINGSeenEv>:

void IridiumSBD::SBDRINGSeen()
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
   ringAsserted = true;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
   diagprint(F("SBDRING alert seen!\r\n"));
 800771c:	4903      	ldr	r1, [pc, #12]	; (800772c <_ZN10IridiumSBD11SBDRINGSeenEv+0x20>)
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7ff ff34 	bl	800758c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8007724:	bf00      	nop
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	08019144 	.word	0x08019144

08007730 <_ZN10IridiumSBD13filterSBDRINGEv>:
// Read characters until we find one that doesn't match SBDRING
// If nextChar is -1 it means we are still entertaining a possible
// match with SBDRING\r\n.  Once we find a mismatch, stuff it into
// nextChar.
void IridiumSBD::filterSBDRING()
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
   if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	7c5b      	ldrb	r3, [r3, #17]
 800773c:	f083 0301 	eor.w	r3, r3, #1
 8007740:	b2db      	uxtb	r3, r3
 8007742:	2b00      	cmp	r3, #0
 8007744:	d002      	beq.n	800774c <_ZN10IridiumSBD13filterSBDRINGEv+0x1c>
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f940 	bl	80079cc <_ZN10IridiumSBD13check9603dataEv>
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	7c5b      	ldrb	r3, [r3, #17]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00b      	beq.n	800776c <_ZN10IridiumSBD13filterSBDRINGEv+0x3c>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	689a      	ldr	r2, [r3, #8]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	3308      	adds	r3, #8
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4610      	mov	r0, r2
 8007764:	4798      	blx	r3
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	dc0c      	bgt.n	8007786 <_ZN10IridiumSBD13filterSBDRINGEv+0x56>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	7c5b      	ldrb	r3, [r3, #17]
 8007770:	f083 0301 	eor.w	r3, r3, #1
 8007774:	b2db      	uxtb	r3, r3
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00d      	beq.n	8007796 <_ZN10IridiumSBD13filterSBDRINGEv+0x66>
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fa56 	bl	8007c2c <_ZN10IridiumSBD15i2cSerAvailableEv>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	dd07      	ble.n	8007796 <_ZN10IridiumSBD13filterSBDRINGEv+0x66>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800778c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007790:	d101      	bne.n	8007796 <_ZN10IridiumSBD13filterSBDRINGEv+0x66>
 8007792:	2301      	movs	r3, #1
 8007794:	e000      	b.n	8007798 <_ZN10IridiumSBD13filterSBDRINGEv+0x68>
 8007796:	2300      	movs	r3, #0
 8007798:	2b00      	cmp	r3, #0
 800779a:	f000 80af 	beq.w	80078fc <_ZN10IridiumSBD13filterSBDRINGEv+0x1cc>
   {
      char c;
      if (this->useSerial)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	7c5b      	ldrb	r3, [r3, #17]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00b      	beq.n	80077be <_ZN10IridiumSBD13filterSBDRINGEv+0x8e>
      {
         c = stream->read();
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	689a      	ldr	r2, [r3, #8]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	330c      	adds	r3, #12
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4610      	mov	r0, r2
 80077b6:	4798      	blx	r3
 80077b8:	4603      	mov	r3, r0
 80077ba:	73fb      	strb	r3, [r7, #15]
 80077bc:	e004      	b.n	80077c8 <_ZN10IridiumSBD13filterSBDRINGEv+0x98>
      }
      else
      {
         c = i2cSerRead();
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fa4c 	bl	8007c5c <_ZN10IridiumSBD10i2cSerReadEv>
 80077c4:	4603      	mov	r3, r0
 80077c6:	73fb      	strb	r3, [r7, #15]
      }
      consoleprint(c);
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
 80077ca:	4619      	mov	r1, r3
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f7ff ff8d 	bl	80076ec <_ZN10IridiumSBD12consoleprintEc>
      if (*head != 0 && c == *head)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	f000 8087 	beq.w	80078ee <_ZN10IridiumSBD13filterSBDRINGEv+0x1be>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	7bfa      	ldrb	r2, [r7, #15]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d17f      	bne.n	80078ee <_ZN10IridiumSBD13filterSBDRINGEv+0x1be>
      {
         ++head;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077f4:	1c5a      	adds	r2, r3, #1
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
         if (*head == 0)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d10d      	bne.n	8007824 <_ZN10IridiumSBD13filterSBDRINGEv+0xf4>
         {
            SBDRINGSeen();
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f7ff ff7f 	bl	800770c <_ZN10IridiumSBD11SBDRINGSeenEv>
            head = tail = SBDRING;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4a3c      	ldr	r2, [pc, #240]	; (8007904 <_ZN10IridiumSBD13filterSBDRINGEv+0x1d4>)
 8007812:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
            {
               --head;
               nextChar = c;
            }
         }
 8007822:	e069      	b.n	80078f8 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c8>
            for (unsigned long start = millis(); ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) && millis() - start < FILTERTIMEOUT; );
 8007824:	f001 fd72 	bl	800930c <HAL_GetTick>
 8007828:	60b8      	str	r0, [r7, #8]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	7c5b      	ldrb	r3, [r3, #17]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00b      	beq.n	800784a <_ZN10IridiumSBD13filterSBDRINGEv+0x11a>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	689a      	ldr	r2, [r3, #8]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	3308      	adds	r3, #8
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4610      	mov	r0, r2
 8007842:	4798      	blx	r3
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00c      	beq.n	8007864 <_ZN10IridiumSBD13filterSBDRINGEv+0x134>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	7c5b      	ldrb	r3, [r3, #17]
 800784e:	f083 0301 	eor.w	r3, r3, #1
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00e      	beq.n	8007876 <_ZN10IridiumSBD13filterSBDRINGEv+0x146>
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 f9e7 	bl	8007c2c <_ZN10IridiumSBD15i2cSerAvailableEv>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d108      	bne.n	8007876 <_ZN10IridiumSBD13filterSBDRINGEv+0x146>
 8007864:	f001 fd52 	bl	800930c <HAL_GetTick>
 8007868:	4602      	mov	r2, r0
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	1ad3      	subs	r3, r2, r3
 800786e:	2b09      	cmp	r3, #9
 8007870:	d801      	bhi.n	8007876 <_ZN10IridiumSBD13filterSBDRINGEv+0x146>
 8007872:	2301      	movs	r3, #1
 8007874:	e000      	b.n	8007878 <_ZN10IridiumSBD13filterSBDRINGEv+0x148>
 8007876:	2300      	movs	r3, #0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d000      	beq.n	800787e <_ZN10IridiumSBD13filterSBDRINGEv+0x14e>
 800787c:	e7d5      	b.n	800782a <_ZN10IridiumSBD13filterSBDRINGEv+0xfa>
            if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	7c5b      	ldrb	r3, [r3, #17]
 8007882:	f083 0301 	eor.w	r3, r3, #1
 8007886:	b2db      	uxtb	r3, r3
 8007888:	2b00      	cmp	r3, #0
 800788a:	d002      	beq.n	8007892 <_ZN10IridiumSBD13filterSBDRINGEv+0x162>
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f89d 	bl	80079cc <_ZN10IridiumSBD13check9603dataEv>
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	7c5b      	ldrb	r3, [r3, #17]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00b      	beq.n	80078b2 <_ZN10IridiumSBD13filterSBDRINGEv+0x182>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	689a      	ldr	r2, [r3, #8]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	3308      	adds	r3, #8
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4610      	mov	r0, r2
 80078aa:	4798      	blx	r3
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00c      	beq.n	80078cc <_ZN10IridiumSBD13filterSBDRINGEv+0x19c>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	7c5b      	ldrb	r3, [r3, #17]
 80078b6:	f083 0301 	eor.w	r3, r3, #1
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d007      	beq.n	80078d0 <_ZN10IridiumSBD13filterSBDRINGEv+0x1a0>
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f9b3 	bl	8007c2c <_ZN10IridiumSBD15i2cSerAvailableEv>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d101      	bne.n	80078d0 <_ZN10IridiumSBD13filterSBDRINGEv+0x1a0>
 80078cc:	2301      	movs	r3, #1
 80078ce:	e000      	b.n	80078d2 <_ZN10IridiumSBD13filterSBDRINGEv+0x1a2>
 80078d0:	2300      	movs	r3, #0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d010      	beq.n	80078f8 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c8>
               --head;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078dc:	1e5a      	subs	r2, r3, #1
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
               nextChar = c;
 80078e4:	7bfa      	ldrb	r2, [r7, #15]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
         }
 80078ec:	e004      	b.n	80078f8 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c8>
      }
      else
      {
         nextChar = c;
 80078ee:	7bfa      	ldrb	r2, [r7, #15]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80078f6:	e729      	b.n	800774c <_ZN10IridiumSBD13filterSBDRINGEv+0x1c>
         }
 80078f8:	bf00      	nop
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 80078fa:	e727      	b.n	800774c <_ZN10IridiumSBD13filterSBDRINGEv+0x1c>
      }
   }
}
 80078fc:	bf00      	nop
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	08019ab8 	.word	0x08019ab8

08007908 <_ZN10IridiumSBD17filteredavailableEv>:

const char IridiumSBD::SBDRING[] = "SBDRING\r\n";

int IridiumSBD::filteredavailable()
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f7ff ff0d 	bl	8007730 <_ZN10IridiumSBD13filterSBDRINGEv>
   return head - tail + (nextChar != -1 ? 1 : 0);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 800792a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800792e:	d001      	beq.n	8007934 <_ZN10IridiumSBD17filteredavailableEv+0x2c>
 8007930:	2201      	movs	r2, #1
 8007932:	e000      	b.n	8007936 <_ZN10IridiumSBD17filteredavailableEv+0x2e>
 8007934:	2200      	movs	r2, #0
 8007936:	4413      	add	r3, r2
}
 8007938:	4618      	mov	r0, r3
 800793a:	3708      	adds	r7, #8
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <_ZN10IridiumSBD12filteredreadEv>:

int IridiumSBD::filteredread()
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f7ff fef1 	bl	8007730 <_ZN10IridiumSBD13filterSBDRINGEv>

   // Use up the queue first
   if (head > tail)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800795a:	429a      	cmp	r2, r3
 800795c:	d91c      	bls.n	8007998 <_ZN10IridiumSBD12filteredreadEv+0x58>
   {
      char c = *tail++;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007964:	1c59      	adds	r1, r3, #1
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	73bb      	strb	r3, [r7, #14]
      if (head == tail)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800797c:	429a      	cmp	r2, r3
 800797e:	d109      	bne.n	8007994 <_ZN10IridiumSBD12filteredreadEv+0x54>
         head = tail = SBDRING;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a11      	ldr	r2, [pc, #68]	; (80079c8 <_ZN10IridiumSBD12filteredreadEv+0x88>)
 8007984:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      return c;
 8007994:	7bbb      	ldrb	r3, [r7, #14]
 8007996:	e012      	b.n	80079be <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   // Then the "extra" char
   else if (nextChar != -1)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800799e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a2:	d00a      	beq.n	80079ba <_ZN10IridiumSBD12filteredreadEv+0x7a>
   {
      char c = (char)nextChar;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80079aa:	73fb      	strb	r3, [r7, #15]
      nextChar = -1;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f04f 32ff 	mov.w	r2, #4294967295
 80079b2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      return c;
 80079b6:	7bfb      	ldrb	r3, [r7, #15]
 80079b8:	e001      	b.n	80079be <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   return -1;
 80079ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	08019ab8 	.word	0x08019ab8

080079cc <_ZN10IridiumSBD13check9603dataEv>:

//Checks the number of available serial bytes
//Reads the available serial bytes (if any) and stores them in i2c_ser_buffer
void IridiumSBD::check9603data()
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  if (millis() - lastCheck >= I2C_POLLING_WAIT_MS)
 80079d4:	f001 fc9a 	bl	800930c <HAL_GetTick>
 80079d8:	4602      	mov	r2, r0
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 80079e6:	4293      	cmp	r3, r2
 80079e8:	bf2c      	ite	cs
 80079ea:	2301      	movcs	r3, #1
 80079ec:	2300      	movcc	r3, #0
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f000 80b8 	beq.w	8007b66 <_ZN10IridiumSBD13check9603dataEv+0x19a>
  {
    //Check how many serial bytes are waiting to be read
    uint16_t bytesAvailable = 0;
 80079f6:	2300      	movs	r3, #0
 80079f8:	81fb      	strh	r3, [r7, #14]
    wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	68da      	ldr	r2, [r3, #12]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	7c1b      	ldrb	r3, [r3, #16]
 8007a02:	4619      	mov	r1, r3
 8007a04:	4610      	mov	r0, r2
 8007a06:	f000 ffc1 	bl	800898c <_ZN7TwoWire17beginTransmissionEh>
    wireport->write(LEN_REG); // Point to the serial buffer length
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	21fd      	movs	r1, #253	; 0xfd
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7fd ffb1 	bl	8005978 <_ZN7TwoWire5writeEi>
    wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f001 f800 	bl	8008a20 <_ZN7TwoWire15endTransmissionEv>
    if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)2) == 2) // Request two bytes
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	68d8      	ldr	r0, [r3, #12]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	7c1b      	ldrb	r3, [r3, #16]
 8007a28:	2202      	movs	r2, #2
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	f000 ff9b 	bl	8008966 <_ZN7TwoWire11requestFromEhh>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	bf0c      	ite	eq
 8007a36:	2301      	moveq	r3, #1
 8007a38:	2300      	movne	r3, #0
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d01d      	beq.n	8007a7c <_ZN10IridiumSBD13check9603dataEv+0xb0>
    {
      uint8_t msb = wireport->read();
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	68da      	ldr	r2, [r3, #12]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	330c      	adds	r3, #12
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4610      	mov	r0, r2
 8007a50:	4798      	blx	r3
 8007a52:	4603      	mov	r3, r0
 8007a54:	737b      	strb	r3, [r7, #13]
      uint8_t lsb = wireport->read();
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	68da      	ldr	r2, [r3, #12]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	330c      	adds	r3, #12
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4610      	mov	r0, r2
 8007a66:	4798      	blx	r3
 8007a68:	4603      	mov	r3, r0
 8007a6a:	733b      	strb	r3, [r7, #12]
      bytesAvailable = (((uint16_t)msb) << 8) | lsb;
 8007a6c:	7b7b      	ldrb	r3, [r7, #13]
 8007a6e:	021b      	lsls	r3, r3, #8
 8007a70:	b21a      	sxth	r2, r3
 8007a72:	7b3b      	ldrb	r3, [r7, #12]
 8007a74:	b21b      	sxth	r3, r3
 8007a76:	4313      	orrs	r3, r2
 8007a78:	b21b      	sxth	r3, r3
 8007a7a:	81fb      	strh	r3, [r7, #14]
    }

    //Now read the serial bytes (if any)
    if (bytesAvailable > 0)
 8007a7c:	89fb      	ldrh	r3, [r7, #14]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d06c      	beq.n	8007b5c <_ZN10IridiumSBD13check9603dataEv+0x190>
    {
      // Request the bytes
      // Poke them into the i2c_serial buffer
      // Release the bus afterwards
      wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	68da      	ldr	r2, [r3, #12]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	7c1b      	ldrb	r3, [r3, #16]
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	f000 ff7d 	bl	800898c <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the serial buffer
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	21ff      	movs	r1, #255	; 0xff
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7fd ff6d 	bl	8005978 <_ZN7TwoWire5writeEi>
      wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f000 ffbc 	bl	8008a20 <_ZN7TwoWire15endTransmissionEv>
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 8007aa8:	89fb      	ldrh	r3, [r7, #14]
 8007aaa:	2b08      	cmp	r3, #8
 8007aac:	d92c      	bls.n	8007b08 <_ZN10IridiumSBD13check9603dataEv+0x13c>
      {
        wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)SER_PACKET_SIZE, (uint8_t)false); // Request SER_PACKET_SIZE bytes, don't release the bus
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	68d8      	ldr	r0, [r3, #12]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	7c19      	ldrb	r1, [r3, #16]
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	2208      	movs	r2, #8
 8007aba:	f000 ff19 	bl	80088f0 <_ZN7TwoWire11requestFromEhhh>
        while (wireport->available())
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	68da      	ldr	r2, [r3, #12]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	3308      	adds	r3, #8
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4610      	mov	r0, r2
 8007ace:	4798      	blx	r3
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	bf14      	ite	ne
 8007ad6:	2301      	movne	r3, #1
 8007ad8:	2300      	moveq	r3, #0
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00f      	beq.n	8007b00 <_ZN10IridiumSBD13check9603dataEv+0x134>
        {
          i2cSerPoke(wireport->read()); // Read and store each byte
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	68da      	ldr	r2, [r3, #12]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	330c      	adds	r3, #12
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4610      	mov	r0, r2
 8007af0:	4798      	blx	r3
 8007af2:	4603      	mov	r3, r0
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 f8d5 	bl	8007ca8 <_ZN10IridiumSBD10i2cSerPokeEc>
        while (wireport->available())
 8007afe:	e7de      	b.n	8007abe <_ZN10IridiumSBD13check9603dataEv+0xf2>
        }
        bytesAvailable -= SER_PACKET_SIZE; // Decrease the number of bytes available by SER_PACKET_SIZE
 8007b00:	89fb      	ldrh	r3, [r7, #14]
 8007b02:	3b08      	subs	r3, #8
 8007b04:	81fb      	strh	r3, [r7, #14]
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 8007b06:	e7cf      	b.n	8007aa8 <_ZN10IridiumSBD13check9603dataEv+0xdc>
      }
      wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)bytesAvailable); // Request remaining bytes, release the bus
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	68d8      	ldr	r0, [r3, #12]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	7c1b      	ldrb	r3, [r3, #16]
 8007b10:	89fa      	ldrh	r2, [r7, #14]
 8007b12:	b2d2      	uxtb	r2, r2
 8007b14:	4619      	mov	r1, r3
 8007b16:	f000 ff26 	bl	8008966 <_ZN7TwoWire11requestFromEhh>
      while (wireport->available())
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	68da      	ldr	r2, [r3, #12]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3308      	adds	r3, #8
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4610      	mov	r0, r2
 8007b2a:	4798      	blx	r3
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	bf14      	ite	ne
 8007b32:	2301      	movne	r3, #1
 8007b34:	2300      	moveq	r3, #0
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00f      	beq.n	8007b5c <_ZN10IridiumSBD13check9603dataEv+0x190>
      {
        i2cSerPoke(wireport->read()); // Read and store each byte
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	68da      	ldr	r2, [r3, #12]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	330c      	adds	r3, #12
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4610      	mov	r0, r2
 8007b4c:	4798      	blx	r3
 8007b4e:	4603      	mov	r3, r0
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	4619      	mov	r1, r3
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f8a7 	bl	8007ca8 <_ZN10IridiumSBD10i2cSerPokeEc>
      while (wireport->available())
 8007b5a:	e7de      	b.n	8007b1a <_ZN10IridiumSBD13check9603dataEv+0x14e>
      }
    }

    lastCheck = millis(); //Put off checking to avoid excessive I2C bus traffic
 8007b5c:	f001 fbd6 	bl	800930c <HAL_GetTick>
 8007b60:	4602      	mov	r2, r0
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8007b66:	bf00      	nop
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <_ZN10IridiumSBD13check9603pinsEv>:

//Reads the IO pins and update IO_REGISTER
void IridiumSBD::check9603pins()
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b082      	sub	sp, #8
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
  //Read the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	68da      	ldr	r2, [r3, #12]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	7c1b      	ldrb	r3, [r3, #16]
 8007b7e:	4619      	mov	r1, r3
 8007b80:	4610      	mov	r0, r2
 8007b82:	f000 ff03 	bl	800898c <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	2110      	movs	r1, #16
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7fd fef3 	bl	8005978 <_ZN7TwoWire5writeEi>
  wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	4618      	mov	r0, r3
 8007b98:	f000 ff42 	bl	8008a20 <_ZN7TwoWire15endTransmissionEv>
  if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)1) == 1) // Request one byte from the IO register
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	68d8      	ldr	r0, [r3, #12]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	7c1b      	ldrb	r3, [r3, #16]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	f000 fedd 	bl	8008966 <_ZN7TwoWire11requestFromEhh>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	bf0c      	ite	eq
 8007bb2:	2301      	moveq	r3, #1
 8007bb4:	2300      	movne	r3, #0
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00d      	beq.n	8007bd8 <_ZN10IridiumSBD13check9603pinsEv+0x6a>
  {
    IO_REGISTER = wireport->read(); // Read the IO register
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	68da      	ldr	r2, [r3, #12]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	330c      	adds	r3, #12
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4610      	mov	r0, r2
 8007bcc:	4798      	blx	r3
 8007bce:	4603      	mov	r3, r0
 8007bd0:	b2da      	uxtb	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
}
 8007bd8:	bf00      	nop
 8007bda:	3708      	adds	r7, #8
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <_ZN10IridiumSBD11set9603pinsEh>:

//Set the IO pins
void IridiumSBD::set9603pins(uint8_t pins)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	460b      	mov	r3, r1
 8007bea:	70fb      	strb	r3, [r7, #3]
  //Write to the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	68da      	ldr	r2, [r3, #12]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	7c1b      	ldrb	r3, [r3, #16]
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	4610      	mov	r0, r2
 8007bf8:	f000 fec8 	bl	800898c <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	2110      	movs	r1, #16
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fd feb8 	bl	8005978 <_ZN7TwoWire5writeEi>
  wireport->write(pins); // Set the pins
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	68da      	ldr	r2, [r3, #12]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	78f9      	ldrb	r1, [r7, #3]
 8007c16:	4610      	mov	r0, r2
 8007c18:	4798      	blx	r3
  wireport->endTransmission(); // Send data and surrender the bus
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f000 fefe 	bl	8008a20 <_ZN7TwoWire15endTransmissionEv>
}
 8007c24:	bf00      	nop
 8007c26:	3708      	adds	r7, #8
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <_ZN10IridiumSBD15i2cSerAvailableEv>:
    return(ISBD_SUCCESS);
}

// I2C_SER functions
int IridiumSBD::i2cSerAvailable()
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  return (i2c_ser_buffer_tail + I2C_SER_MAX_BUFF - i2c_ser_buffer_head) % I2C_SER_MAX_BUFF;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c38:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	425a      	negs	r2, r3
 8007c44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c48:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007c4c:	bf58      	it	pl
 8007c4e:	4253      	negpl	r3, r2
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <_ZN10IridiumSBD10i2cSerReadEv>:

int IridiumSBD::i2cSerRead()
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  // Empty buffer?
  if (i2c_ser_buffer_head == i2c_ser_buffer_tail)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d102      	bne.n	8007c76 <_ZN10IridiumSBD10i2cSerReadEv+0x1a>
    return -1;
 8007c70:	f04f 33ff 	mov.w	r3, #4294967295
 8007c74:	e012      	b.n	8007c9c <_ZN10IridiumSBD10i2cSerReadEv+0x40>

  // Read from "head"
  uint8_t d = i2c_ser_buffer[i2c_ser_buffer_head]; // grab next byte
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	7c9b      	ldrb	r3, [r3, #18]
 8007c80:	73fb      	strb	r3, [r7, #15]
  i2c_ser_buffer_head = (i2c_ser_buffer_head + 1) % I2C_SER_MAX_BUFF; // update head
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c86:	3301      	adds	r3, #1
 8007c88:	425a      	negs	r2, r3
 8007c8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c8e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007c92:	bf58      	it	pl
 8007c94:	4253      	negpl	r3, r2
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	6593      	str	r3, [r2, #88]	; 0x58
  return d;
 8007c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3714      	adds	r7, #20
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <_ZN10IridiumSBD10i2cSerPokeEc>:

void IridiumSBD::i2cSerPoke(char serChar)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	70fb      	strb	r3, [r7, #3]
  // Calculate the new value for the tail
  int next = (i2c_ser_buffer_tail + 1) % I2C_SER_MAX_BUFF;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cb8:	3301      	adds	r3, #1
 8007cba:	425a      	negs	r2, r3
 8007cbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cc0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007cc4:	bf58      	it	pl
 8007cc6:	4253      	negpl	r3, r2
 8007cc8:	60fb      	str	r3, [r7, #12]
  // If the buffer is not full (i.e. we are not about to overwrite the head byte)
  // If the buffer is full, the byte is lost
  if (next != i2c_ser_buffer_head)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d008      	beq.n	8007ce6 <_ZN10IridiumSBD10i2cSerPokeEc+0x3e>
  {
    // save new data in buffer: tail points to where byte goes
    i2c_ser_buffer[i2c_ser_buffer_tail] = serChar; // save new byte
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	4413      	add	r3, r2
 8007cdc:	78fa      	ldrb	r2, [r7, #3]
 8007cde:	749a      	strb	r2, [r3, #18]
    i2c_ser_buffer_tail = next;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 8007ce6:	bf00      	nop
 8007ce8:	3714      	adds	r7, #20
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
	...

08007cf4 <_ZN10IridiumSBD20internalClearBuffersEi>:

int IridiumSBD::internalClearBuffers(int buffers)
// Clear the MO/MT/Both buffers
// Defaults to clearing the MO buffer to avoid resending old messages
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af02      	add	r7, sp, #8
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
   if (this->asleep)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d001      	beq.n	8007d0c <_ZN10IridiumSBD20internalClearBuffersEi+0x18>
      return ISBD_IS_ASLEEP;
 8007d08:	230a      	movs	r3, #10
 8007d0a:	e032      	b.n	8007d72 <_ZN10IridiumSBD20internalClearBuffersEi+0x7e>

   if (buffers == ISBD_CLEAR_MT) // Clear MT buffer
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d106      	bne.n	8007d20 <_ZN10IridiumSBD20internalClearBuffersEi+0x2c>
   {
      send(F("AT+SBDD1\r"));
 8007d12:	2301      	movs	r3, #1
 8007d14:	2201      	movs	r2, #1
 8007d16:	4919      	ldr	r1, [pc, #100]	; (8007d7c <_ZN10IridiumSBD20internalClearBuffersEi+0x88>)
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f7ff fab9 	bl	8007290 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
 8007d1e:	e00f      	b.n	8007d40 <_ZN10IridiumSBD20internalClearBuffersEi+0x4c>
   }
   else if (buffers == ISBD_CLEAR_BOTH) // Clear both buffers
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	d106      	bne.n	8007d34 <_ZN10IridiumSBD20internalClearBuffersEi+0x40>
   {
      send(F("AT+SBDD2\r"));
 8007d26:	2301      	movs	r3, #1
 8007d28:	2201      	movs	r2, #1
 8007d2a:	4915      	ldr	r1, [pc, #84]	; (8007d80 <_ZN10IridiumSBD20internalClearBuffersEi+0x8c>)
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f7ff faaf 	bl	8007290 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
 8007d32:	e005      	b.n	8007d40 <_ZN10IridiumSBD20internalClearBuffersEi+0x4c>
   }
   else // Clear MO buffer
   {
      send(F("AT+SBDD0\r"));
 8007d34:	2301      	movs	r3, #1
 8007d36:	2201      	movs	r2, #1
 8007d38:	4912      	ldr	r1, [pc, #72]	; (8007d84 <_ZN10IridiumSBD20internalClearBuffersEi+0x90>)
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f7ff faa8 	bl	8007290 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   }
   if (!waitForATResponse())
 8007d40:	4b11      	ldr	r3, [pc, #68]	; (8007d88 <_ZN10IridiumSBD20internalClearBuffersEi+0x94>)
 8007d42:	9300      	str	r3, [sp, #0]
 8007d44:	2300      	movs	r3, #0
 8007d46:	2200      	movs	r2, #0
 8007d48:	2100      	movs	r1, #0
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f7fe fe3e 	bl	80069cc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8007d50:	4603      	mov	r3, r0
 8007d52:	f083 0301 	eor.w	r3, r3, #1
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d009      	beq.n	8007d70 <_ZN10IridiumSBD20internalClearBuffersEi+0x7c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f7fe fef3 	bl	8006b48 <_ZN10IridiumSBD9cancelledEv>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d001      	beq.n	8007d6c <_ZN10IridiumSBD20internalClearBuffersEi+0x78>
 8007d68:	2304      	movs	r3, #4
 8007d6a:	e002      	b.n	8007d72 <_ZN10IridiumSBD20internalClearBuffersEi+0x7e>
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	e000      	b.n	8007d72 <_ZN10IridiumSBD20internalClearBuffersEi+0x7e>

   return ISBD_SUCCESS;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3708      	adds	r7, #8
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	08019190 	.word	0x08019190
 8007d80:	0801919c 	.word	0x0801919c
 8007d84:	080191a8 	.word	0x080191a8
 8007d88:	08018ad8 	.word	0x08018ad8

08007d8c <_ZN10IridiumSBD15internalGetIMEIEPcj>:

int IridiumSBD::internalGetIMEI(char *IMEI, size_t bufferSize)
// Get the IMEI
// https://github.com/mikalhart/IridiumSBD/pull/21
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b086      	sub	sp, #24
 8007d90:	af02      	add	r7, sp, #8
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	607a      	str	r2, [r7, #4]
   if (this->asleep)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d001      	beq.n	8007da6 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x1a>
      return ISBD_IS_ASLEEP;
 8007da2:	230a      	movs	r3, #10
 8007da4:	e023      	b.n	8007dee <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>

   if (bufferSize < 16) // IMEI is 15 digits
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2b0f      	cmp	r3, #15
 8007daa:	d801      	bhi.n	8007db0 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x24>
      return ISBD_RX_OVERFLOW;
 8007dac:	2308      	movs	r3, #8
 8007dae:	e01e      	b.n	8007dee <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>

   send(F("AT+CGSN\r"));
 8007db0:	2301      	movs	r3, #1
 8007db2:	2201      	movs	r2, #1
 8007db4:	4910      	ldr	r1, [pc, #64]	; (8007df8 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x6c>)
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f7ff fa6a 	bl	8007290 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(IMEI, bufferSize, "\n"))
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	4b0f      	ldr	r3, [pc, #60]	; (8007dfc <_ZN10IridiumSBD15internalGetIMEIEPcj+0x70>)
 8007dc0:	9300      	str	r3, [sp, #0]
 8007dc2:	4b0f      	ldr	r3, [pc, #60]	; (8007e00 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x74>)
 8007dc4:	68b9      	ldr	r1, [r7, #8]
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f7fe fe00 	bl	80069cc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	f083 0301 	eor.w	r3, r3, #1
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d009      	beq.n	8007dec <_ZN10IridiumSBD15internalGetIMEIEPcj+0x60>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	f7fe feb5 	bl	8006b48 <_ZN10IridiumSBD9cancelledEv>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d001      	beq.n	8007de8 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x5c>
 8007de4:	2304      	movs	r3, #4
 8007de6:	e002      	b.n	8007dee <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>
 8007de8:	2303      	movs	r3, #3
 8007dea:	e000      	b.n	8007dee <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>

   return ISBD_SUCCESS;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	080191b4 	.word	0x080191b4
 8007dfc:	08018ad8 	.word	0x08018ad8
 8007e00:	080191c0 	.word	0x080191c0

08007e04 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE>:
}
#endif


//uint8_t IridiumSBD::MRT_Iridium_setup(UART_HandleTypeDef huart,POWERPROFILE profile){ TODO??
uint8_t IridiumSBD::MRT_Iridium_setup(uint8_t timeout, uint8_t i2c_bus, void (*iridium_print)(char*)){
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b092      	sub	sp, #72	; 0x48
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	607b      	str	r3, [r7, #4]
 8007e0e:	460b      	mov	r3, r1
 8007e10:	72fb      	strb	r3, [r7, #11]
 8007e12:	4613      	mov	r3, r2
 8007e14:	72bb      	strb	r3, [r7, #10]
	this->print = iridium_print;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	601a      	str	r2, [r3, #0]
	this->print((char*) "\r\nIridium 9603N Init\r\n");
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	485b      	ldr	r0, [pc, #364]	; (8007f90 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x18c>)
 8007e22:	4798      	blx	r3

	this->print((char*) "\tSetting I2C bus...");
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	485a      	ldr	r0, [pc, #360]	; (8007f94 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x190>)
 8007e2a:	4798      	blx	r3
	if (i2c_bus == 1){
 8007e2c:	7abb      	ldrb	r3, [r7, #10]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d103      	bne.n	8007e3a <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x36>
		this->wireport = &Wire;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	4a58      	ldr	r2, [pc, #352]	; (8007f98 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x194>)
 8007e36:	60da      	str	r2, [r3, #12]
 8007e38:	e00c      	b.n	8007e54 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x50>
	}
	else if (i2c_bus == 2){
 8007e3a:	7abb      	ldrb	r3, [r7, #10]
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d103      	bne.n	8007e48 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x44>
		this->wireport = &Wire1;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	4a56      	ldr	r2, [pc, #344]	; (8007f9c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x198>)
 8007e44:	60da      	str	r2, [r3, #12]
 8007e46:	e005      	b.n	8007e54 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x50>
	}
	else if (i2c_bus == 3){
 8007e48:	7abb      	ldrb	r3, [r7, #10]
 8007e4a:	2b03      	cmp	r3, #3
 8007e4c:	d102      	bne.n	8007e54 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x50>
		this->wireport = &Wire2;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	4a53      	ldr	r2, [pc, #332]	; (8007fa0 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x19c>)
 8007e52:	60da      	str	r2, [r3, #12]
	}
	this->print((char*) "OK\r\n");
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4852      	ldr	r0, [pc, #328]	; (8007fa4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 8007e5a:	4798      	blx	r3

	this->print((char*) "\tChecking device connection...");
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4851      	ldr	r0, [pc, #324]	; (8007fa8 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a4>)
 8007e62:	4798      	blx	r3
	while(!this->isConnected()){
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f7fe f89f 	bl	8005fa8 <_ZN10IridiumSBD11isConnectedEv>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	f083 0301 	eor.w	r3, r3, #1
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d020      	beq.n	8007eb8 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0xb4>
		HAL_Delay(300);
 8007e76:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007e7a:	f001 fa53 	bl	8009324 <HAL_Delay>
		this->print((char*) "\r\tChecking device connection   ");
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	484a      	ldr	r0, [pc, #296]	; (8007fac <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a8>)
 8007e84:	4798      	blx	r3
		HAL_Delay(300);
 8007e86:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007e8a:	f001 fa4b 	bl	8009324 <HAL_Delay>
		this->print((char*) "\r\tChecking device connection.  ");
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4847      	ldr	r0, [pc, #284]	; (8007fb0 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1ac>)
 8007e94:	4798      	blx	r3
		HAL_Delay(300);
 8007e96:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007e9a:	f001 fa43 	bl	8009324 <HAL_Delay>
		this->print((char*) "\r\tChecking device connection.. ");
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4844      	ldr	r0, [pc, #272]	; (8007fb4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1b0>)
 8007ea4:	4798      	blx	r3
		HAL_Delay(300);
 8007ea6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007eaa:	f001 fa3b 	bl	8009324 <HAL_Delay>
		this->print((char*) "\r\tChecking device connection...");
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4841      	ldr	r0, [pc, #260]	; (8007fb8 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1b4>)
 8007eb4:	4798      	blx	r3
	while(!this->isConnected()){
 8007eb6:	e7d5      	b.n	8007e64 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x60>
	}
	this->print((char*) "OK\r\n");
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4839      	ldr	r0, [pc, #228]	; (8007fa4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 8007ebe:	4798      	blx	r3

	//Activate the superchargers
	this->print((char*) "\tActivating the superchargers...");
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	483d      	ldr	r0, [pc, #244]	; (8007fbc <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1b8>)
 8007ec6:	4798      	blx	r3
	this->enableSuperCapCharger(true);
 8007ec8:	2101      	movs	r1, #1
 8007eca:	68f8      	ldr	r0, [r7, #12]
 8007ecc:	f7fd fee4 	bl	8005c98 <_ZN10IridiumSBD21enableSuperCapChargerEb>
	this->print((char*) "OK\r\n");
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4833      	ldr	r0, [pc, #204]	; (8007fa4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 8007ed6:	4798      	blx	r3


	//Wait for the supercapacitors to charge
	//int start=millis();
	this->print((char*) "\tWaiting for the supercapacitors to charge...");
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4838      	ldr	r0, [pc, #224]	; (8007fc0 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1bc>)
 8007ede:	4798      	blx	r3
	while (!this->checkSuperCapCharger()){
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f7fd ff17 	bl	8005d14 <_ZN10IridiumSBD20checkSuperCapChargerEv>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	f083 0301 	eor.w	r3, r3, #1
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d004      	beq.n	8007efc <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0xf8>
		HAL_Delay(333);
 8007ef2:	f240 104d 	movw	r0, #333	; 0x14d
 8007ef6:	f001 fa15 	bl	8009324 <HAL_Delay>
	while (!this->checkSuperCapCharger()){
 8007efa:	e7f1      	b.n	8007ee0 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0xdc>
	}
	this->print((char*) "OK\r\n");
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4828      	ldr	r0, [pc, #160]	; (8007fa4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 8007f02:	4798      	blx	r3


	//Enable power for the 9603N
	this->print((char*) "\tEnabling 9603N power...");
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	482e      	ldr	r0, [pc, #184]	; (8007fc4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1c0>)
 8007f0a:	4798      	blx	r3
	this->enable9603Npower(true);
 8007f0c:	2101      	movs	r1, #1
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f7fd ff30 	bl	8005d74 <_ZN10IridiumSBD16enable9603NpowerEb>
	this->print((char*) "OK\r\n");
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4822      	ldr	r0, [pc, #136]	; (8007fa4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 8007f1a:	4798      	blx	r3
	/*
	 * Begin satellite modem operation
	 */

	//Power on the rockblock
	this->print((char*) "\tStarting Modem...");
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4829      	ldr	r0, [pc, #164]	; (8007fc8 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1c4>)
 8007f22:	4798      	blx	r3
	//this->setPowerProfile(profile);
	int err = this->begin();
 8007f24:	68f8      	ldr	r0, [r7, #12]
 8007f26:	f7fd fd59 	bl	80059dc <_ZN10IridiumSBD5beginEv>
 8007f2a:	6478      	str	r0, [r7, #68]	; 0x44
	if (err != ISBD_SUCCESS)
 8007f2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00b      	beq.n	8007f4a <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x146>
	  {
		this->print((char*) "Failed: ");
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4825      	ldr	r0, [pc, #148]	; (8007fcc <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1c8>)
 8007f38:	4798      	blx	r3
		this->MRT_Iridium_ErrorMessage(err);
 8007f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	4619      	mov	r1, r3
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f000 f849 	bl	8007fd8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>

	    return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e01d      	b.n	8007f86 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x182>
	  }
	this->print((char*) "OK\r\n");
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4815      	ldr	r0, [pc, #84]	; (8007fa4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 8007f50:	4798      	blx	r3

	//Setup default IMEI to 000000000000000 (no IMEI)
	IMEI= (char*) "000000000000000";
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	4a1e      	ldr	r2, [pc, #120]	; (8007fd0 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1cc>)
 8007f56:	605a      	str	r2, [r3, #4]

	char str[50];
	sprintf(str, "\tSetting timeout of %i seconds...", timeout);
 8007f58:	7afa      	ldrb	r2, [r7, #11]
 8007f5a:	f107 0310 	add.w	r3, r7, #16
 8007f5e:	491d      	ldr	r1, [pc, #116]	; (8007fd4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1d0>)
 8007f60:	4618      	mov	r0, r3
 8007f62:	f00b fad3 	bl	801350c <siprintf>
	this->print((char*) str);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f107 0210 	add.w	r2, r7, #16
 8007f6e:	4610      	mov	r0, r2
 8007f70:	4798      	blx	r3
	adjustATTimeout(timeout);
 8007f72:	7afb      	ldrb	r3, [r7, #11]
 8007f74:	4619      	mov	r1, r3
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f7fd fd9c 	bl	8005ab4 <_ZN10IridiumSBD15adjustATTimeoutEi>
	this->print((char*) "OK\r\n");
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4808      	ldr	r0, [pc, #32]	; (8007fa4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 8007f82:	4798      	blx	r3

	return HAL_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3748      	adds	r7, #72	; 0x48
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	080191c4 	.word	0x080191c4
 8007f94:	080191dc 	.word	0x080191dc
 8007f98:	20000394 	.word	0x20000394
 8007f9c:	2000044c 	.word	0x2000044c
 8007fa0:	20000504 	.word	0x20000504
 8007fa4:	08018ad8 	.word	0x08018ad8
 8007fa8:	080191f0 	.word	0x080191f0
 8007fac:	08019210 	.word	0x08019210
 8007fb0:	08019230 	.word	0x08019230
 8007fb4:	08019250 	.word	0x08019250
 8007fb8:	08019270 	.word	0x08019270
 8007fbc:	08019290 	.word	0x08019290
 8007fc0:	080192b4 	.word	0x080192b4
 8007fc4:	080192e4 	.word	0x080192e4
 8007fc8:	08019300 	.word	0x08019300
 8007fcc:	08019314 	.word	0x08019314
 8007fd0:	08019320 	.word	0x08019320
 8007fd4:	08019330 	.word	0x08019330

08007fd8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>:
	return true;
}



void IridiumSBD::MRT_Iridium_ErrorMessage(uint8_t error){
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	70fb      	strb	r3, [r7, #3]
	this->print((char*) "\r\n\tError:\t");
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4834      	ldr	r0, [pc, #208]	; (80080bc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xe4>)
 8007fea:	4798      	blx	r3
	if (error == ISBD_ALREADY_AWAKE){
 8007fec:	78fb      	ldrb	r3, [r7, #3]
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d104      	bne.n	8007ffc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x24>
		this->print((char*) "\tAlready Awake\r\n");
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4832      	ldr	r0, [pc, #200]	; (80080c0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xe8>)
 8007ff8:	4798      	blx	r3
		this->print((char*) "\tDEBUG LINE REACHED\r\n");
	}
	else{
		this->print((char*) "\tUNKNOWN\r\n");
	}
}
 8007ffa:	e05b      	b.n	80080b4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_SERIAL_FAILURE){
 8007ffc:	78fb      	ldrb	r3, [r7, #3]
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	d104      	bne.n	800800c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x34>
		this->print((char*) "\tSerial Failure\r\n");
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	482f      	ldr	r0, [pc, #188]	; (80080c4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xec>)
 8008008:	4798      	blx	r3
}
 800800a:	e053      	b.n	80080b4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_PROTOCOL_ERROR){
 800800c:	78fb      	ldrb	r3, [r7, #3]
 800800e:	2b03      	cmp	r3, #3
 8008010:	d104      	bne.n	800801c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x44>
		this->print((char*) "\tProtocol Error\r\n");
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	482c      	ldr	r0, [pc, #176]	; (80080c8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf0>)
 8008018:	4798      	blx	r3
}
 800801a:	e04b      	b.n	80080b4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_CANCELLED){
 800801c:	78fb      	ldrb	r3, [r7, #3]
 800801e:	2b04      	cmp	r3, #4
 8008020:	d104      	bne.n	800802c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x54>
		this->print((char*) "\tCancelled\r\n");
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4829      	ldr	r0, [pc, #164]	; (80080cc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf4>)
 8008028:	4798      	blx	r3
}
 800802a:	e043      	b.n	80080b4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_NO_MODEM_DETECTED){
 800802c:	78fb      	ldrb	r3, [r7, #3]
 800802e:	2b05      	cmp	r3, #5
 8008030:	d104      	bne.n	800803c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x64>
		this->print((char*) "\tNo modem detected: check wiring.\r\n");
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4826      	ldr	r0, [pc, #152]	; (80080d0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf8>)
 8008038:	4798      	blx	r3
}
 800803a:	e03b      	b.n	80080b4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_SBDIX_FATAL_ERROR){
 800803c:	78fb      	ldrb	r3, [r7, #3]
 800803e:	2b06      	cmp	r3, #6
 8008040:	d104      	bne.n	800804c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x74>
		this->print((char*) "\tSDBIX Fatal Error\r\n");
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4823      	ldr	r0, [pc, #140]	; (80080d4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xfc>)
 8008048:	4798      	blx	r3
}
 800804a:	e033      	b.n	80080b4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_SENDRECEIVE_TIMEOUT){
 800804c:	78fb      	ldrb	r3, [r7, #3]
 800804e:	2b07      	cmp	r3, #7
 8008050:	d104      	bne.n	800805c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x84>
		this->print((char*) "\tSend-Receive Timeout\r\n");
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4820      	ldr	r0, [pc, #128]	; (80080d8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x100>)
 8008058:	4798      	blx	r3
}
 800805a:	e02b      	b.n	80080b4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_RX_OVERFLOW){
 800805c:	78fb      	ldrb	r3, [r7, #3]
 800805e:	2b08      	cmp	r3, #8
 8008060:	d104      	bne.n	800806c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x94>
		this->print((char*) "\tRX Overflow\r\n");
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	481d      	ldr	r0, [pc, #116]	; (80080dc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x104>)
 8008068:	4798      	blx	r3
}
 800806a:	e023      	b.n	80080b4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_REENTRANT){
 800806c:	78fb      	ldrb	r3, [r7, #3]
 800806e:	2b09      	cmp	r3, #9
 8008070:	d104      	bne.n	800807c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xa4>
		this->print((char*) "\tREENTRANT\r\n");
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	481a      	ldr	r0, [pc, #104]	; (80080e0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x108>)
 8008078:	4798      	blx	r3
}
 800807a:	e01b      	b.n	80080b4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_IS_ASLEEP){
 800807c:	78fb      	ldrb	r3, [r7, #3]
 800807e:	2b0a      	cmp	r3, #10
 8008080:	d104      	bne.n	800808c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xb4>
		this->print((char*) "\tIs Asleep\r\n");
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4817      	ldr	r0, [pc, #92]	; (80080e4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x10c>)
 8008088:	4798      	blx	r3
}
 800808a:	e013      	b.n	80080b4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_NO_SLEEP_PIN){
 800808c:	78fb      	ldrb	r3, [r7, #3]
 800808e:	2b0b      	cmp	r3, #11
 8008090:	d104      	bne.n	800809c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xc4>
		this->print((char*) "\tNo Sleep Pin\r\n");
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4814      	ldr	r0, [pc, #80]	; (80080e8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x110>)
 8008098:	4798      	blx	r3
}
 800809a:	e00b      	b.n	80080b4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if(error == 20){
 800809c:	78fb      	ldrb	r3, [r7, #3]
 800809e:	2b14      	cmp	r3, #20
 80080a0:	d104      	bne.n	80080ac <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xd4>
		this->print((char*) "\tDEBUG LINE REACHED\r\n");
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4811      	ldr	r0, [pc, #68]	; (80080ec <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x114>)
 80080a8:	4798      	blx	r3
}
 80080aa:	e003      	b.n	80080b4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
		this->print((char*) "\tUNKNOWN\r\n");
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	480f      	ldr	r0, [pc, #60]	; (80080f0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x118>)
 80080b2:	4798      	blx	r3
}
 80080b4:	bf00      	nop
 80080b6:	3708      	adds	r7, #8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	08019414 	.word	0x08019414
 80080c0:	08019420 	.word	0x08019420
 80080c4:	08019434 	.word	0x08019434
 80080c8:	08019448 	.word	0x08019448
 80080cc:	0801945c 	.word	0x0801945c
 80080d0:	0801946c 	.word	0x0801946c
 80080d4:	08019490 	.word	0x08019490
 80080d8:	080194a8 	.word	0x080194a8
 80080dc:	080194c0 	.word	0x080194c0
 80080e0:	080194d0 	.word	0x080194d0
 80080e4:	080194e0 	.word	0x080194e0
 80080e8:	080194f0 	.word	0x080194f0
 80080ec:	08019500 	.word	0x08019500
 80080f0:	08019518 	.word	0x08019518

080080f4 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv>:


/*
 * This function requests the satellite modem's IMEI number.
 */
boolean IridiumSBD::MRT_Iridium_getIMEI(void){
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b092      	sub	sp, #72	; 0x48
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]

	//Check if we already have the IMEI
	if (strcmp(IMEI,"000000000000000")==0){
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	491f      	ldr	r1, [pc, #124]	; (8008180 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x8c>)
 8008102:	4618      	mov	r0, r3
 8008104:	f7f8 f874 	bl	80001f0 <strcmp>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d124      	bne.n	8008158 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x64>

		//Reset the IMEI
		IMEI=new char[16];
 800810e:	2010      	movs	r0, #16
 8008110:	f009 fc4d 	bl	80119ae <_Znaj>
 8008114:	4603      	mov	r3, r0
 8008116:	461a      	mov	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	605a      	str	r2, [r3, #4]

		// Get the IMEI
		this->print((char*) "\r\nIridium: Retrieving the IMEI\r\n");
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4818      	ldr	r0, [pc, #96]	; (8008184 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x90>)
 8008122:	4798      	blx	r3
		int err = this->getIMEI(IMEI, 16);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	2210      	movs	r2, #16
 800812a:	4619      	mov	r1, r3
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f7fd ff1b 	bl	8005f68 <_ZN10IridiumSBD7getIMEIEPcj>
 8008132:	6478      	str	r0, [r7, #68]	; 0x44
		if (err != ISBD_SUCCESS)
 8008134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00e      	beq.n	8008158 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x64>
		{
			char str[24+sizeof(int)];
		    sprintf(str, "\tgetIMEI failed: error %i\r\n", err);
 800813a:	f107 030c 	add.w	r3, r7, #12
 800813e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008140:	4911      	ldr	r1, [pc, #68]	; (8008188 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x94>)
 8008142:	4618      	mov	r0, r3
 8008144:	f00b f9e2 	bl	801350c <siprintf>
		    this->print((char*) str);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f107 020c 	add.w	r2, r7, #12
 8008150:	4610      	mov	r0, r2
 8008152:	4798      	blx	r3
		    return false;
 8008154:	2300      	movs	r3, #0
 8008156:	e00e      	b.n	8008176 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x82>
		  }
	}

	char str[28];//IMEI is 15 integers long
	sprintf(str, "\tIMEI is %s\r\n", IMEI);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	685a      	ldr	r2, [r3, #4]
 800815c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008160:	490a      	ldr	r1, [pc, #40]	; (800818c <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x98>)
 8008162:	4618      	mov	r0, r3
 8008164:	f00b f9d2 	bl	801350c <siprintf>
	this->print((char*) str);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008170:	4610      	mov	r0, r2
 8008172:	4798      	blx	r3
	return true;
 8008174:	2301      	movs	r3, #1
}
 8008176:	4618      	mov	r0, r3
 8008178:	3748      	adds	r7, #72	; 0x48
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	08019320 	.word	0x08019320
 8008184:	08019524 	.word	0x08019524
 8008188:	08019548 	.word	0x08019548
 800818c:	08019564 	.word	0x08019564

08008190 <_ZN10IridiumSBD15MRT_Iridium_CSQEv>:
 * This sketch checks the Iridium signal quality and returns the status
 * of the Network Available signal.
 *
 * The boolean param is if you want to check for network availability
 */
int IridiumSBD::MRT_Iridium_CSQ(){
 8008190:	b580      	push	{r7, lr}
 8008192:	b09e      	sub	sp, #120	; 0x78
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
	this->print((char*) "\r\nIridium: Checking Signal Quality\r\n");
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	481c      	ldr	r0, [pc, #112]	; (8008210 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x80>)
 800819e:	4798      	blx	r3
	int signalQuality = -1;
 80081a0:	f04f 33ff 	mov.w	r3, #4294967295
 80081a4:	673b      	str	r3, [r7, #112]	; 0x70

	this->MRT_Iridium_getIMEI();
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f7ff ffa4 	bl	80080f4 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv>

	// Check the signal quality.
	// This returns a number between 0 and 5.
	// 2 or better is preferred.
	int err = this->getSignalQuality(signalQuality);
 80081ac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80081b0:	4619      	mov	r1, r3
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f7fd fc60 	bl	8005a78 <_ZN10IridiumSBD16getSignalQualityERi>
 80081b8:	6778      	str	r0, [r7, #116]	; 0x74
	if (err != ISBD_SUCCESS)
 80081ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d015      	beq.n	80081ec <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x5c>
	{
	  char str[34+sizeof(int)];
	  sprintf(str, "\tSignalQuality failed: error  %i\r\n", err);
 80081c0:	f107 030c 	add.w	r3, r7, #12
 80081c4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80081c6:	4913      	ldr	r1, [pc, #76]	; (8008214 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x84>)
 80081c8:	4618      	mov	r0, r3
 80081ca:	f00b f99f 	bl	801350c <siprintf>
	  this->print((char*) str);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f107 020c 	add.w	r2, r7, #12
 80081d6:	4610      	mov	r0, r2
 80081d8:	4798      	blx	r3
	  this->MRT_Iridium_ErrorMessage(err);
 80081da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	4619      	mov	r1, r3
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f7ff fef9 	bl	8007fd8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
	  return -1;
 80081e6:	f04f 33ff 	mov.w	r3, #4294967295
 80081ea:	e00d      	b.n	8008208 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x78>
	}

	char str[56+sizeof(int)];
	sprintf(str, "\tOn a scale of 0 to 5, signal quality is currently  %i\r\n", signalQuality);
 80081ec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80081ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80081f2:	4909      	ldr	r1, [pc, #36]	; (8008218 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x88>)
 80081f4:	4618      	mov	r0, r3
 80081f6:	f00b f989 	bl	801350c <siprintf>
	this->print((char*) str);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008202:	4610      	mov	r0, r2
 8008204:	4798      	blx	r3

	return signalQuality;
 8008206:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 8008208:	4618      	mov	r0, r3
 800820a:	3778      	adds	r7, #120	; 0x78
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}
 8008210:	08019574 	.word	0x08019574
 8008214:	0801959c 	.word	0x0801959c
 8008218:	080195c0 	.word	0x080195c0

0800821c <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv>:


/*
 * This function checks if a network is available
 */
boolean IridiumSBD::MRT_Iridium_NetworkAvailability(void){
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]

	// Check Network Available.
	this->print((char*) "\r\nIridium: Checking if Network is Available:\t");
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	480c      	ldr	r0, [pc, #48]	; (800825c <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x40>)
 800822a:	4798      	blx	r3
	if (!this->checkNetworkAvailable()){
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f7fd fe4d 	bl	8005ecc <_ZN10IridiumSBD21checkNetworkAvailableEv>
 8008232:	4603      	mov	r3, r0
 8008234:	f083 0301 	eor.w	r3, r3, #1
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b00      	cmp	r3, #0
 800823c:	d005      	beq.n	800824a <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x2e>
		this->print((char*) "not available.\r\n");
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4807      	ldr	r0, [pc, #28]	; (8008260 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x44>)
 8008244:	4798      	blx	r3
		//diagprint(F("(This might be because the 9603N has not yet aquired the ring channel.)\r\n"));
		return false;
 8008246:	2300      	movs	r3, #0
 8008248:	e004      	b.n	8008254 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x38>
	}

	this->print((char*) "available.\r\n");
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4805      	ldr	r0, [pc, #20]	; (8008264 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x48>)
 8008250:	4798      	blx	r3
	return true;
 8008252:	2301      	movs	r3, #1
}
 8008254:	4618      	mov	r0, r3
 8008256:	3708      	adds	r7, #8
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}
 800825c:	080195fc 	.word	0x080195fc
 8008260:	0801962c 	.word	0x0801962c
 8008264:	08019640 	.word	0x08019640

08008268 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv>:


/*
 * This function requests the time
 */
boolean IridiumSBD::MRT_Iridium_getTime(void){
 8008268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800826a:	b0a1      	sub	sp, #132	; 0x84
 800826c:	af04      	add	r7, sp, #16
 800826e:	6078      	str	r0, [r7, #4]
	this->print((char*) "\r\nIridium: Retrieving time\r\n");
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4820      	ldr	r0, [pc, #128]	; (80082f8 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x90>)
 8008276:	4798      	blx	r3
	struct tm t; // struct tm is defined in time.h
	int err = this->getSystemTime(t); // Ask the 9603N for the system time
 8008278:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800827c:	4619      	mov	r1, r3
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f7fd fc46 	bl	8005b10 <_ZN10IridiumSBD13getSystemTimeER2tm>
 8008284:	66f8      	str	r0, [r7, #108]	; 0x6c
	if (err == ISBD_SUCCESS) // Was it successful?
 8008286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008288:	2b00      	cmp	r3, #0
 800828a:	d11c      	bne.n	80082c6 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x5e>
	    {
		char buf[61];
		sprintf(buf, "\r\n\t<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
				t.tm_year + 1900, t.tm_mon + 1, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec);
 800828c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
		sprintf(buf, "\r\n\t<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
 800828e:	f203 756c 	addw	r5, r3, #1900	; 0x76c
				t.tm_year + 1900, t.tm_mon + 1, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec);
 8008292:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		sprintf(buf, "\r\n\t<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
 8008294:	1c5e      	adds	r6, r3, #1
 8008296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008298:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800829a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800829c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800829e:	f107 0408 	add.w	r4, r7, #8
 80082a2:	9003      	str	r0, [sp, #12]
 80082a4:	9102      	str	r1, [sp, #8]
 80082a6:	9201      	str	r2, [sp, #4]
 80082a8:	9300      	str	r3, [sp, #0]
 80082aa:	4633      	mov	r3, r6
 80082ac:	462a      	mov	r2, r5
 80082ae:	4913      	ldr	r1, [pc, #76]	; (80082fc <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x94>)
 80082b0:	4620      	mov	r0, r4
 80082b2:	f00b f92b 	bl	801350c <siprintf>
		this->print((char*) buf);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f107 0208 	add.w	r2, r7, #8
 80082be:	4610      	mov	r0, r2
 80082c0:	4798      	blx	r3
		return true;
 80082c2:	2301      	movs	r3, #1
 80082c4:	e013      	b.n	80082ee <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x86>
	}

	else if (err == ISBD_NO_NETWORK) // Did it fail because the 9603N has not yet seen the network?
 80082c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082c8:	2b0c      	cmp	r3, #12
 80082ca:	d105      	bne.n	80082d8 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x70>
	     {
		 this->print((char*) "\tNo network detected.\r\n");
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	480b      	ldr	r0, [pc, #44]	; (8008300 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x98>)
 80082d2:	4798      	blx	r3
	   	 return false;
 80082d4:	2300      	movs	r3, #0
 80082d6:	e00a      	b.n	80082ee <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x86>
	}

	else
	    {
		this->print((char*) "\tUnexpected Error ");
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4809      	ldr	r0, [pc, #36]	; (8008304 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x9c>)
 80082de:	4798      	blx	r3
		this->MRT_Iridium_ErrorMessage(err);
 80082e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	4619      	mov	r1, r3
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f7ff fe76 	bl	8007fd8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
		return false;
 80082ec:	2300      	movs	r3, #0
	}
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3774      	adds	r7, #116	; 0x74
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082f6:	bf00      	nop
 80082f8:	08019650 	.word	0x08019650
 80082fc:	08019670 	.word	0x08019670
 8008300:	080196ac 	.word	0x080196ac
 8008304:	080196c4 	.word	0x080196c4

08008308 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc>:
 * This sketch sends a "Hello, world!" message from the satellite modem.
 * If you have activated your account and have credits, this message
 * should arrive at the endpoints (delivery group) you have configured
 * (email address or HTTP POST).
 */
boolean IridiumSBD::MRT_Iridium_sendMessage(char* msg){
 8008308:	b580      	push	{r7, lr}
 800830a:	b090      	sub	sp, #64	; 0x40
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
	int temp = this->atTimeout; //Save default atTimeout
	adjustATTimeout(timeout);
*/

	// Send the message
	this->print((char*) "\r\nIridium: Trying to send the message.  This might take several minutes.\r\n");
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4828      	ldr	r0, [pc, #160]	; (80083b8 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xb0>)
 8008318:	4798      	blx	r3
	int err = this->sendSBDText((const char*) msg);
 800831a:	6839      	ldr	r1, [r7, #0]
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f7fd fb87 	bl	8005a30 <_ZN10IridiumSBD11sendSBDTextEPKc>
 8008322:	63f8      	str	r0, [r7, #60]	; 0x3c
	//int err = this->sendSBDText((const char*) "Hello, world!");
	//int err = ISBD_SENDRECEIVE_TIMEOUT;

	if (err != ISBD_SUCCESS){
 8008324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008326:	2b00      	cmp	r3, #0
 8008328:	d01b      	beq.n	8008362 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0x5a>
		char str[50];
		sprintf(str, "\tsendSBDText failed: error -> %i\r\n", err);
 800832a:	f107 0308 	add.w	r3, r7, #8
 800832e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008330:	4922      	ldr	r1, [pc, #136]	; (80083bc <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xb4>)
 8008332:	4618      	mov	r0, r3
 8008334:	f00b f8ea 	bl	801350c <siprintf>
		this->print((char*) str);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f107 0208 	add.w	r2, r7, #8
 8008340:	4610      	mov	r0, r2
 8008342:	4798      	blx	r3
	    if (err == ISBD_SENDRECEIVE_TIMEOUT){
 8008344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008346:	2b07      	cmp	r3, #7
 8008348:	d103      	bne.n	8008352 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0x4a>
	    	this->print((char*) "\tTry again with a better view of the sky.\r\n");
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	481c      	ldr	r0, [pc, #112]	; (80083c0 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xb8>)
 8008350:	4798      	blx	r3
	    }
	    this->MRT_Iridium_ErrorMessage((uint8_t) err);
 8008352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008354:	b2db      	uxtb	r3, r3
 8008356:	4619      	mov	r1, r3
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f7ff fe3d 	bl	8007fd8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
	    return false;
 800835e:	2300      	movs	r3, #0
 8008360:	e025      	b.n	80083ae <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xa6>
	}

	else{
		this->print((char*) "\tMessage sent\r\n");
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4817      	ldr	r0, [pc, #92]	; (80083c4 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xbc>)
 8008368:	4798      	blx	r3
	}

	// Clear the Mobile Originated message buffer
	this->print((char*) "\tClearing the MO buffer.\r\n");
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4816      	ldr	r0, [pc, #88]	; (80083c8 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xc0>)
 8008370:	4798      	blx	r3
	err = this->clearBuffers(ISBD_CLEAR_MO); // Clear MO buffer
 8008372:	2100      	movs	r1, #0
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f7fd fdd9 	bl	8005f2c <_ZN10IridiumSBD12clearBuffersEi>
 800837a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (err != ISBD_SUCCESS){
 800837c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800837e:	2b00      	cmp	r3, #0
 8008380:	d014      	beq.n	80083ac <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xa4>
		char str[50];
		sprintf(str, "clearBuffers failed: error -> %i\r\n", err);
 8008382:	f107 0308 	add.w	r3, r7, #8
 8008386:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008388:	4910      	ldr	r1, [pc, #64]	; (80083cc <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xc4>)
 800838a:	4618      	mov	r0, r3
 800838c:	f00b f8be 	bl	801350c <siprintf>
		this->print((char*) str);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f107 0208 	add.w	r2, r7, #8
 8008398:	4610      	mov	r0, r2
 800839a:	4798      	blx	r3
		this->MRT_Iridium_ErrorMessage((uint8_t) err);
 800839c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	4619      	mov	r1, r3
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f7ff fe18 	bl	8007fd8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
		return false;
 80083a8:	2300      	movs	r3, #0
 80083aa:	e000      	b.n	80083ae <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xa6>
	}
	return true;
 80083ac:	2301      	movs	r3, #1
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3740      	adds	r7, #64	; 0x40
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	080196d8 	.word	0x080196d8
 80083bc:	08019724 	.word	0x08019724
 80083c0:	08019748 	.word	0x08019748
 80083c4:	08019774 	.word	0x08019774
 80083c8:	08019784 	.word	0x08019784
 80083cc:	080197a0 	.word	0x080197a0

080083d0 <_ZN10IridiumSBDC1ER7TwoWireh>:
      if (ringPin != -1)
         pinMode(ringPin, INPUT);
   }
   */

IridiumSBD(TwoWire &wirePort = IRIDIUM_I2C, uint8_t deviceAddress = 0x63)
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	4613      	mov	r3, r2
 80083dc:	71fb      	strb	r3, [r7, #7]
   {
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2200      	movs	r2, #0
 80083e2:	66da      	str	r2, [r3, #108]	; 0x6c
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2205      	movs	r2, #5
 80083e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2202      	movs	r2, #2
 80083f8:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2204      	movs	r2, #4
 8008400:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2208      	movs	r2, #8
 8008408:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2210      	movs	r2, #16
 8008410:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2220      	movs	r2, #32
 8008418:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2240      	movs	r2, #64	; 0x40
 8008420:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
      useSerial = false;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2200      	movs	r2, #0
 8008428:	745a      	strb	r2, [r3, #17]
      wireport = &wirePort;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	68ba      	ldr	r2, [r7, #8]
 800842e:	60da      	str	r2, [r3, #12]
      deviceaddress = deviceAddress;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	79fa      	ldrb	r2, [r7, #7]
 8008434:	741a      	strb	r2, [r3, #16]
      sbdixInterval = ISBD_USB_SBDIX_INTERVAL;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	221e      	movs	r2, #30
 800843a:	65da      	str	r2, [r3, #92]	; 0x5c
      atTimeout = ISBD_DEFAULT_AT_TIMEOUT;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	221e      	movs	r2, #30
 8008440:	661a      	str	r2, [r3, #96]	; 0x60
      sendReceiveTimeout = ISBD_DEFAULT_SENDRECEIVE_TIME;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008448:	665a      	str	r2, [r3, #100]	; 0x64
      startupTimeout = ISBD_STARTUP_MAX_TIME;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	22f0      	movs	r2, #240	; 0xf0
 800844e:	669a      	str	r2, [r3, #104]	; 0x68
      remainingMessages = -1;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f04f 32ff 	mov.w	r2, #4294967295
 8008456:	675a      	str	r2, [r3, #116]	; 0x74
      asleep = true;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
      reentrant = false;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2200      	movs	r2, #0
 8008464:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
      sleepPin = -1;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f04f 32ff 	mov.w	r2, #4294967295
 800846e:	67da      	str	r2, [r3, #124]	; 0x7c
      sleepPinConfigured = false;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      ringPin = -1;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f04f 32ff 	mov.w	r2, #4294967295
 800847e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      msstmWorkaroundRequested = false;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2200      	movs	r2, #0
 8008486:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
      ringAlertsEnabled = true;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2201      	movs	r2, #1
 800848e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
      ringAsserted = false;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2200      	movs	r2, #0
 8008496:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
      lastPowerOnTime = 0UL;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      head = SBDRING;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	4a0c      	ldr	r2, [pc, #48]	; (80084d8 <_ZN10IridiumSBDC1ER7TwoWireh+0x108>)
 80084a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      tail = SBDRING;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	4a0a      	ldr	r2, [pc, #40]	; (80084d8 <_ZN10IridiumSBDC1ER7TwoWireh+0x108>)
 80084ae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      nextChar = -1;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f04f 32ff 	mov.w	r2, #4294967295
 80084b8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      i2c_ser_buffer_tail = 0;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2200      	movs	r2, #0
 80084c0:	655a      	str	r2, [r3, #84]	; 0x54
      i2c_ser_buffer_head = 0;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2200      	movs	r2, #0
 80084c6:	659a      	str	r2, [r3, #88]	; 0x58
   }
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	4618      	mov	r0, r3
 80084cc:	3714      	adds	r7, #20
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	08019ab8 	.word	0x08019ab8

080084dc <MRT_Iridium_Constructor>:

//C structs
struct HIRIDIUM hiridium;


void MRT_Iridium_Constructor(){
 80084dc:	b598      	push	{r3, r4, r7, lr}
 80084de:	af00      	add	r7, sp, #0
	if (E_T==NULL){
 80084e0:	4b08      	ldr	r3, [pc, #32]	; (8008504 <MRT_Iridium_Constructor+0x28>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d10b      	bne.n	8008500 <MRT_Iridium_Constructor+0x24>
		E_T = new IridiumSBD();
 80084e8:	20a4      	movs	r0, #164	; 0xa4
 80084ea:	f009 fa4f 	bl	801198c <_Znwj>
 80084ee:	4603      	mov	r3, r0
 80084f0:	461c      	mov	r4, r3
 80084f2:	2263      	movs	r2, #99	; 0x63
 80084f4:	4904      	ldr	r1, [pc, #16]	; (8008508 <MRT_Iridium_Constructor+0x2c>)
 80084f6:	4620      	mov	r0, r4
 80084f8:	f7ff ff6a 	bl	80083d0 <_ZN10IridiumSBDC1ER7TwoWireh>
 80084fc:	4b01      	ldr	r3, [pc, #4]	; (8008504 <MRT_Iridium_Constructor+0x28>)
 80084fe:	601c      	str	r4, [r3, #0]
	}
}
 8008500:	bf00      	nop
 8008502:	bd98      	pop	{r3, r4, r7, pc}
 8008504:	2000037c 	.word	0x2000037c
 8008508:	20000394 	.word	0x20000394

0800850c <MRT_Iridium_Init>:
		E_T = NULL;
	}
}


struct HIRIDIUM MRT_Iridium_Init(uint8_t timeout, uint8_t i2c_bus, void (*iridium_print)(char*)){
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	607b      	str	r3, [r7, #4]
 8008516:	460b      	mov	r3, r1
 8008518:	72fb      	strb	r3, [r7, #11]
 800851a:	4613      	mov	r3, r2
 800851c:	72bb      	strb	r3, [r7, #10]
	MRT_Iridium_Constructor();
 800851e:	f7ff ffdd 	bl	80084dc <MRT_Iridium_Constructor>
	E_T->MRT_Iridium_setup(timeout, i2c_bus, iridium_print);
 8008522:	4b0d      	ldr	r3, [pc, #52]	; (8008558 <MRT_Iridium_Init+0x4c>)
 8008524:	6818      	ldr	r0, [r3, #0]
 8008526:	7aba      	ldrb	r2, [r7, #10]
 8008528:	7af9      	ldrb	r1, [r7, #11]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f7ff fc6a 	bl	8007e04 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE>
	HIRIDIUM iridium_handler;
	iridium_handler.CSQ = &MRT_Iridium_CSQ;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	4a0a      	ldr	r2, [pc, #40]	; (800855c <MRT_Iridium_Init+0x50>)
 8008534:	60da      	str	r2, [r3, #12]
	iridium_handler.getIMEI = &MRT_Iridium_getIMEI;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	4a09      	ldr	r2, [pc, #36]	; (8008560 <MRT_Iridium_Init+0x54>)
 800853a:	601a      	str	r2, [r3, #0]
	iridium_handler.getNetworkAvailability = &MRT_Iridium_NetworkAvailability;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	4a09      	ldr	r2, [pc, #36]	; (8008564 <MRT_Iridium_Init+0x58>)
 8008540:	609a      	str	r2, [r3, #8]
	iridium_handler.getTime = &MRT_Iridium_getTime;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	4a08      	ldr	r2, [pc, #32]	; (8008568 <MRT_Iridium_Init+0x5c>)
 8008546:	605a      	str	r2, [r3, #4]
	iridium_handler.sendMessage = &MRT_Iridium_sendMessage;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	4a08      	ldr	r2, [pc, #32]	; (800856c <MRT_Iridium_Init+0x60>)
 800854c:	611a      	str	r2, [r3, #16]
	return iridium_handler;
 800854e:	bf00      	nop
}
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	3710      	adds	r7, #16
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}
 8008558:	2000037c 	.word	0x2000037c
 800855c:	08008595 	.word	0x08008595
 8008560:	08008571 	.word	0x08008571
 8008564:	080085ad 	.word	0x080085ad
 8008568:	080085d1 	.word	0x080085d1
 800856c:	080085f5 	.word	0x080085f5

08008570 <MRT_Iridium_getIMEI>:

void MRT_Iridium_ErrorMessage(uint8_t error){
	return E_T->MRT_Iridium_ErrorMessage(error);
}

bool MRT_Iridium_getIMEI(void){
 8008570:	b580      	push	{r7, lr}
 8008572:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_getIMEI();
 8008574:	4b06      	ldr	r3, [pc, #24]	; (8008590 <MRT_Iridium_getIMEI+0x20>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4618      	mov	r0, r3
 800857a:	f7ff fdbb 	bl	80080f4 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	bf14      	ite	ne
 8008584:	2301      	movne	r3, #1
 8008586:	2300      	moveq	r3, #0
 8008588:	b2db      	uxtb	r3, r3
}
 800858a:	4618      	mov	r0, r3
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	2000037c 	.word	0x2000037c

08008594 <MRT_Iridium_CSQ>:


int MRT_Iridium_CSQ(){
 8008594:	b580      	push	{r7, lr}
 8008596:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_CSQ();
 8008598:	4b03      	ldr	r3, [pc, #12]	; (80085a8 <MRT_Iridium_CSQ+0x14>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4618      	mov	r0, r3
 800859e:	f7ff fdf7 	bl	8008190 <_ZN10IridiumSBD15MRT_Iridium_CSQEv>
 80085a2:	4603      	mov	r3, r0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	2000037c 	.word	0x2000037c

080085ac <MRT_Iridium_NetworkAvailability>:

bool MRT_Iridium_NetworkAvailability(){
 80085ac:	b580      	push	{r7, lr}
 80085ae:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_NetworkAvailability();
 80085b0:	4b06      	ldr	r3, [pc, #24]	; (80085cc <MRT_Iridium_NetworkAvailability+0x20>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7ff fe31 	bl	800821c <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	bf14      	ite	ne
 80085c0:	2301      	movne	r3, #1
 80085c2:	2300      	moveq	r3, #0
 80085c4:	b2db      	uxtb	r3, r3
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	2000037c 	.word	0x2000037c

080085d0 <MRT_Iridium_getTime>:


bool MRT_Iridium_getTime(void){
 80085d0:	b580      	push	{r7, lr}
 80085d2:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_getTime();
 80085d4:	4b06      	ldr	r3, [pc, #24]	; (80085f0 <MRT_Iridium_getTime+0x20>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4618      	mov	r0, r3
 80085da:	f7ff fe45 	bl	8008268 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	bf14      	ite	ne
 80085e4:	2301      	movne	r3, #1
 80085e6:	2300      	moveq	r3, #0
 80085e8:	b2db      	uxtb	r3, r3
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	2000037c 	.word	0x2000037c

080085f4 <MRT_Iridium_sendMessage>:

bool MRT_Iridium_sendMessage(char* msg){
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
	return E_T->MRT_Iridium_sendMessage(msg);
 80085fc:	4b07      	ldr	r3, [pc, #28]	; (800861c <MRT_Iridium_sendMessage+0x28>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	6879      	ldr	r1, [r7, #4]
 8008602:	4618      	mov	r0, r3
 8008604:	f7ff fe80 	bl	8008308 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	bf14      	ite	ne
 800860e:	2301      	movne	r3, #1
 8008610:	2300      	moveq	r3, #0
 8008612:	b2db      	uxtb	r3, r3
}
 8008614:	4618      	mov	r0, r3
 8008616:	3708      	adds	r7, #8
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}
 800861c:	2000037c 	.word	0x2000037c

08008620 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8008620:	b590      	push	{r4, r7, lr}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d101      	bne.n	8008634 <_ZN5Print5writeEPKc+0x14>
 8008630:	2300      	movs	r3, #0
 8008632:	e00d      	b.n	8008650 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	3304      	adds	r3, #4
 800863a:	681c      	ldr	r4, [r3, #0]
 800863c:	6838      	ldr	r0, [r7, #0]
 800863e:	f7f7 fde1 	bl	8000204 <strlen>
 8008642:	4603      	mov	r3, r0
 8008644:	461a      	mov	r2, r3
 8008646:	6839      	ldr	r1, [r7, #0]
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	47a0      	blx	r4
 800864c:	4603      	mov	r3, r0
 800864e:	bf00      	nop
    }
 8008650:	4618      	mov	r0, r3
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	bd90      	pop	{r4, r7, pc}

08008658 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b086      	sub	sp, #24
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8008664:	2300      	movs	r3, #0
 8008666:	617b      	str	r3, [r7, #20]
  while (size--) {
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	1e5a      	subs	r2, r3, #1
 800866c:	607a      	str	r2, [r7, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	bf14      	ite	ne
 8008672:	2301      	movne	r3, #1
 8008674:	2300      	moveq	r3, #0
 8008676:	b2db      	uxtb	r3, r3
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00e      	beq.n	800869a <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	1c59      	adds	r1, r3, #1
 8008686:	60b9      	str	r1, [r7, #8]
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	4619      	mov	r1, r3
 800868c:	68f8      	ldr	r0, [r7, #12]
 800868e:	4790      	blx	r2
 8008690:	4602      	mov	r2, r0
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	4413      	add	r3, r2
 8008696:	617b      	str	r3, [r7, #20]
  while (size--) {
 8008698:	e7e6      	b.n	8008668 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 800869a:	697b      	ldr	r3, [r7, #20]
}
 800869c:	4618      	mov	r0, r3
 800869e:	3718      	adds	r7, #24
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 80086ae:	6839      	ldr	r1, [r7, #0]
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f805 	bl	80086c0 <_ZN5Print5printEPKc>
 80086b6:	4603      	mov	r3, r0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3708      	adds	r7, #8
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  return write(str);
 80086ca:	6839      	ldr	r1, [r7, #0]
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f7ff ffa7 	bl	8008620 <_ZN5Print5writeEPKc>
 80086d2:	4603      	mov	r3, r0
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3708      	adds	r7, #8
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	460b      	mov	r3, r1
 80086e6:	70fb      	strb	r3, [r7, #3]
  return write(c);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	78fa      	ldrb	r2, [r7, #3]
 80086f0:	4611      	mov	r1, r2
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	4798      	blx	r3
 80086f6:	4603      	mov	r3, r0
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3708      	adds	r7, #8
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	68b9      	ldr	r1, [r7, #8]
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f000 f805 	bl	8008720 <_ZN5Print5printEli>
 8008716:	4603      	mov	r3, r0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b086      	sub	sp, #24
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d109      	bne.n	8008746 <_ZN5Print5printEli+0x26>
    return write(n);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	68ba      	ldr	r2, [r7, #8]
 800873a:	b2d2      	uxtb	r2, r2
 800873c:	4611      	mov	r1, r2
 800873e:	68f8      	ldr	r0, [r7, #12]
 8008740:	4798      	blx	r3
 8008742:	4603      	mov	r3, r0
 8008744:	e029      	b.n	800879a <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2b0a      	cmp	r3, #10
 800874a:	d11d      	bne.n	8008788 <_ZN5Print5printEli+0x68>
    if (n < 0) {
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	2b00      	cmp	r3, #0
 8008750:	da12      	bge.n	8008778 <_ZN5Print5printEli+0x58>
      int t = print('-');
 8008752:	212d      	movs	r1, #45	; 0x2d
 8008754:	68f8      	ldr	r0, [r7, #12]
 8008756:	f7ff ffc1 	bl	80086dc <_ZN5Print5printEc>
 800875a:	4603      	mov	r3, r0
 800875c:	617b      	str	r3, [r7, #20]
      n = -n;
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	425b      	negs	r3, r3
 8008762:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	220a      	movs	r2, #10
 8008768:	4619      	mov	r1, r3
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f000 f819 	bl	80087a2 <_ZN5Print11printNumberEmh>
 8008770:	4602      	mov	r2, r0
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	4413      	add	r3, r2
 8008776:	e010      	b.n	800879a <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	220a      	movs	r2, #10
 800877c:	4619      	mov	r1, r3
 800877e:	68f8      	ldr	r0, [r7, #12]
 8008780:	f000 f80f 	bl	80087a2 <_ZN5Print11printNumberEmh>
 8008784:	4603      	mov	r3, r0
 8008786:	e008      	b.n	800879a <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	b2d2      	uxtb	r2, r2
 800878e:	4619      	mov	r1, r3
 8008790:	68f8      	ldr	r0, [r7, #12]
 8008792:	f000 f806 	bl	80087a2 <_ZN5Print11printNumberEmh>
 8008796:	4603      	mov	r3, r0
 8008798:	bf00      	nop
  }
}
 800879a:	4618      	mov	r0, r3
 800879c:	3718      	adds	r7, #24
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b090      	sub	sp, #64	; 0x40
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	60f8      	str	r0, [r7, #12]
 80087aa:	60b9      	str	r1, [r7, #8]
 80087ac:	4613      	mov	r3, r2
 80087ae:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 80087b0:	f107 0314 	add.w	r3, r7, #20
 80087b4:	3320      	adds	r3, #32
 80087b6:	63fb      	str	r3, [r7, #60]	; 0x3c

  *str = '\0';
 80087b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ba:	2200      	movs	r2, #0
 80087bc:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80087be:	79fb      	ldrb	r3, [r7, #7]
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d801      	bhi.n	80087c8 <_ZN5Print11printNumberEmh+0x26>
 80087c4:	230a      	movs	r3, #10
 80087c6:	71fb      	strb	r3, [r7, #7]

  do {
    unsigned long m = n;
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	63bb      	str	r3, [r7, #56]	; 0x38
    n /= base;
 80087cc:	79fb      	ldrb	r3, [r7, #7]
 80087ce:	68ba      	ldr	r2, [r7, #8]
 80087d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087d4:	60bb      	str	r3, [r7, #8]
    char c = m - base * n;
 80087d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d8:	b2da      	uxtb	r2, r3
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	79f9      	ldrb	r1, [r7, #7]
 80087e0:	fb11 f303 	smulbb	r3, r1, r3
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	1ad3      	subs	r3, r2, r3
 80087e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80087ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087f0:	2b09      	cmp	r3, #9
 80087f2:	d804      	bhi.n	80087fe <_ZN5Print11printNumberEmh+0x5c>
 80087f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087f8:	3330      	adds	r3, #48	; 0x30
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	e003      	b.n	8008806 <_ZN5Print11printNumberEmh+0x64>
 80087fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008802:	3337      	adds	r3, #55	; 0x37
 8008804:	b2db      	uxtb	r3, r3
 8008806:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008808:	3a01      	subs	r2, #1
 800880a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800880c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800880e:	7013      	strb	r3, [r2, #0]
  } while(n);
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d000      	beq.n	8008818 <_ZN5Print11printNumberEmh+0x76>
  do {
 8008816:	e7d7      	b.n	80087c8 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
 8008818:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f7ff ff00 	bl	8008620 <_ZN5Print5writeEPKc>
 8008820:	4603      	mov	r3, r0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3740      	adds	r7, #64	; 0x40
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
	...

0800882c <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	4a06      	ldr	r2, [pc, #24]	; (8008850 <_ZN5PrintC1Ev+0x24>)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	601a      	str	r2, [r3, #0]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	605a      	str	r2, [r3, #4]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4618      	mov	r0, r3
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop
 8008850:	08019acc 	.word	0x08019acc

08008854 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4618      	mov	r0, r3
 8008860:	f7ff ffe4 	bl	800882c <_ZN5PrintC1Ev>
 8008864:	4a05      	ldr	r2, [pc, #20]	; (800887c <_ZN6StreamC1Ev+0x28>)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	601a      	str	r2, [r3, #0]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008870:	609a      	str	r2, [r3, #8]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4618      	mov	r0, r3
 8008876:	3708      	adds	r7, #8
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	08019afc 	.word	0x08019afc

08008880 <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4618      	mov	r0, r3
 800888e:	f7ff ffe1 	bl	8008854 <_ZN6StreamC1Ev>
 8008892:	4a16      	ldr	r2, [pc, #88]	; (80088ec <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	683a      	ldr	r2, [r7, #0]
 800889c:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	3390      	adds	r3, #144	; 0x90
 80088a2:	2220      	movs	r2, #32
 80088a4:	2100      	movs	r1, #0
 80088a6:	4618      	mov	r0, r3
 80088a8:	f009 fb34 	bl	8011f14 <memset>
  rxBufferIndex = 0;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4618      	mov	r0, r3
 80088e6:	3708      	adds	r7, #8
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	08019adc 	.word	0x08019adc

080088f0 <_ZN7TwoWire11requestFromEhhh>:
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  HAL_I2C_Init(&I2cHandle);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b086      	sub	sp, #24
 80088f4:	af02      	add	r7, sp, #8
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	4608      	mov	r0, r1
 80088fa:	4611      	mov	r1, r2
 80088fc:	461a      	mov	r2, r3
 80088fe:	4603      	mov	r3, r0
 8008900:	70fb      	strb	r3, [r7, #3]
 8008902:	460b      	mov	r3, r1
 8008904:	70bb      	strb	r3, [r7, #2]
 8008906:	4613      	mov	r3, r2
 8008908:	707b      	strb	r3, [r7, #1]
  uint8_t ret_val;

  disableInterrupt();
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fc24 	bl	8009158 <_ZN7TwoWire16disableInterruptEv>

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
 8008910:	78bb      	ldrb	r3, [r7, #2]
 8008912:	2b20      	cmp	r3, #32
 8008914:	d901      	bls.n	800891a <_ZN7TwoWire11requestFromEhhh+0x2a>
    quantity = BUFFER_LENGTH;
 8008916:	2320      	movs	r3, #32
 8008918:	70bb      	strb	r3, [r7, #2]
  }
  // perform blocking read into buffer
  int read = i2c_master_read((address << 1), (char *)rxBuffer, quantity, sendStop);
 800891a:	78fb      	ldrb	r3, [r7, #3]
 800891c:	005b      	lsls	r3, r3, #1
 800891e:	b2d9      	uxtb	r1, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8008926:	78b8      	ldrb	r0, [r7, #2]
 8008928:	787b      	ldrb	r3, [r7, #1]
 800892a:	9300      	str	r3, [sp, #0]
 800892c:	4603      	mov	r3, r0
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f9cf 	bl	8008cd2 <_ZN7TwoWire15i2c_master_readEhPchh>
 8008934:	60b8      	str	r0, [r7, #8]

  if(read < 0)
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	2b00      	cmp	r3, #0
 800893a:	da02      	bge.n	8008942 <_ZN7TwoWire11requestFromEhhh+0x52>
  {
    ret_val = 0;
 800893c:	2300      	movs	r3, #0
 800893e:	73fb      	strb	r3, [r7, #15]
 8008940:	e001      	b.n	8008946 <_ZN7TwoWire11requestFromEhhh+0x56>
  }else
  {
    ret_val = read;
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	73fb      	strb	r3, [r7, #15]
  }

  // set rx buffer iterator vars
  rxBufferIndex = 0;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = ret_val;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	7bfa      	ldrb	r2, [r7, #15]
 8008952:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

  enableInterrupt();
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 fbcc 	bl	80090f4 <_ZN7TwoWire15enableInterruptEv>

  return ret_val;
 800895c:	7bfb      	ldrb	r3, [r7, #15]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b082      	sub	sp, #8
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
 800896e:	460b      	mov	r3, r1
 8008970:	70fb      	strb	r3, [r7, #3]
 8008972:	4613      	mov	r3, r2
 8008974:	70bb      	strb	r3, [r7, #2]
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 8008976:	78ba      	ldrb	r2, [r7, #2]
 8008978:	78f9      	ldrb	r1, [r7, #3]
 800897a:	2301      	movs	r3, #1
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f7ff ffb7 	bl	80088f0 <_ZN7TwoWire11requestFromEhhh>
 8008982:	4603      	mov	r3, r0
}
 8008984:	4618      	mov	r0, r3
 8008986:	3708      	adds	r7, #8
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <_ZN7TwoWire17beginTransmissionEh>:
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	460b      	mov	r3, r1
 8008996:	70fb      	strb	r3, [r7, #3]
  // indicate that we are transmitting
  transmitting = 1;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2201      	movs	r2, #1
 800899c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  // set address of targeted slave
  txAddress = address;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	78fa      	ldrb	r2, [r7, #3]
 80089a4:	741a      	strb	r2, [r3, #16]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 80089b6:	bf00      	nop
 80089b8:	370c      	adds	r7, #12
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr

080089c2 <_ZN7TwoWire15endTransmissionEh>:
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
 80089c2:	b580      	push	{r7, lr}
 80089c4:	b086      	sub	sp, #24
 80089c6:	af02      	add	r7, sp, #8
 80089c8:	6078      	str	r0, [r7, #4]
 80089ca:	460b      	mov	r3, r1
 80089cc:	70fb      	strb	r3, [r7, #3]
  // transmit buffer (blocking)
  disableInterrupt();
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 fbc2 	bl	8009158 <_ZN7TwoWire16disableInterruptEv>

  int8_t ret = i2c_master_write((txAddress << 1), (const char *)txBuffer, txBufferLength, sendStop);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	7c1b      	ldrb	r3, [r3, #16]
 80089d8:	0059      	lsls	r1, r3, #1
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f103 0211 	add.w	r2, r3, #17
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80089e6:	4618      	mov	r0, r3
 80089e8:	78fb      	ldrb	r3, [r7, #3]
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	4603      	mov	r3, r0
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 fa00 	bl	8008df4 <_ZN7TwoWire16i2c_master_writeEiPKcii>
 80089f4:	4603      	mov	r3, r0
 80089f6:	73fb      	strb	r3, [r7, #15]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  // indicate that we are done transmitting
  transmitting = 0;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  enableInterrupt();
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 fb6f 	bl	80090f4 <_ZN7TwoWire15enableInterruptEv>

  return ret;
 8008a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3710      	adds	r7, #16
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <_ZN7TwoWire15endTransmissionEv>:

//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  return endTransmission(true);
 8008a28:	2101      	movs	r1, #1
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f7ff ffc9 	bl	80089c2 <_ZN7TwoWire15endTransmissionEh>
 8008a30:	4603      	mov	r3, r0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3708      	adds	r7, #8
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b082      	sub	sp, #8
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
 8008a42:	460b      	mov	r3, r1
 8008a44:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d01d      	beq.n	8008a8c <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008a56:	2b1f      	cmp	r3, #31
 8008a58:	d901      	bls.n	8008a5e <_ZN7TwoWire5writeEh+0x24>
      return 0;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	e028      	b.n	8008ab0 <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008a64:	4619      	mov	r1, r3
 8008a66:	78fa      	ldrb	r2, [r7, #3]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	440b      	add	r3, r1
 8008a6c:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008a74:	3301      	adds	r3, #1
 8008a76:	b2da      	uxtb	r2, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8008a8a:	e010      	b.n	8008aae <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 fb63 	bl	8009158 <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 8008a92:	1cfb      	adds	r3, r7, #3
 8008a94:	2201      	movs	r2, #1
 8008a96:	4619      	mov	r1, r3
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 fa95 	bl	8008fc8 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fb28 	bl	80090f4 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	333c      	adds	r3, #60	; 0x3c
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f001 fe3f 	bl	800a72c <HAL_I2C_EnableListen_IT>
  }
  return 1;
 8008aae:	2301      	movs	r3, #1
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3708      	adds	r7, #8
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b086      	sub	sp, #24
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	607a      	str	r2, [r7, #4]
  if(transmitting){
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d013      	beq.n	8008af6 <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 8008ace:	2300      	movs	r3, #0
 8008ad0:	617b      	str	r3, [r7, #20]
 8008ad2:	697a      	ldr	r2, [r7, #20]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d21e      	bcs.n	8008b18 <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	68b9      	ldr	r1, [r7, #8]
 8008ae2:	697a      	ldr	r2, [r7, #20]
 8008ae4:	440a      	add	r2, r1
 8008ae6:	7812      	ldrb	r2, [r2, #0]
 8008ae8:	4611      	mov	r1, r2
 8008aea:	68f8      	ldr	r0, [r7, #12]
 8008aec:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	3301      	adds	r3, #1
 8008af2:	617b      	str	r3, [r7, #20]
 8008af4:	e7ed      	b.n	8008ad2 <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f000 fb2e 	bl	8009158 <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	461a      	mov	r2, r3
 8008b00:	68b9      	ldr	r1, [r7, #8]
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	f000 fa60 	bl	8008fc8 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f000 faf3 	bl	80090f4 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	333c      	adds	r3, #60	; 0x3c
 8008b12:	4618      	mov	r0, r3
 8008b14:	f001 fe0a 	bl	800a72c <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 8008b18:	687b      	ldr	r3, [r7, #4]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3718      	adds	r7, #24
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 8008b22:	b480      	push	{r7}
 8008b24:	b083      	sub	sp, #12
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	461a      	mov	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	1ad3      	subs	r3, r2, r3
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	370c      	adds	r7, #12
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr

08008b4a <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 8008b4a:	b480      	push	{r7}
 8008b4c:	b085      	sub	sp, #20
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
  int value = -1;
 8008b52:	f04f 33ff 	mov.w	r3, #4294967295
 8008b56:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8008b5e:	b2da      	uxtb	r2, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	bf34      	ite	cc
 8008b6c:	2301      	movcc	r3, #1
 8008b6e:	2300      	movcs	r3, #0
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d012      	beq.n	8008b9c <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	461a      	mov	r2, r3
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4413      	add	r3, r2
 8008b84:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8008b88:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	3301      	adds	r3, #1
 8008b94:	b2da      	uxtb	r2, r3
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3714      	adds	r7, #20
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr

08008baa <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 8008baa:	b480      	push	{r7}
 8008bac:	b085      	sub	sp, #20
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
  int value = -1;
 8008bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8008bb6:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8008bbe:	b2da      	uxtb	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	bf34      	ite	cc
 8008bcc:	2301      	movcc	r3, #1
 8008bce:	2300      	movcs	r3, #0
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d009      	beq.n	8008bea <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	461a      	mov	r2, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4413      	add	r3, r2
 8008be4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8008be8:	60fb      	str	r3, [r7, #12]
  }

  return value;
 8008bea:	68fb      	ldr	r3, [r7, #12]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3714      	adds	r7, #20
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 8008c00:	bf00      	nop
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <_ZN7TwoWire16i2c_master_startEv>:
{
  user_onRequest = function;
}

int TwoWire::i2c_master_start()
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c18:	60bb      	str	r3, [r7, #8]

    int timeout;

    // Clear Acknowledge failure flag
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008c22:	615a      	str	r2, [r3, #20]

    // Wait the STOP condition has been previously correctly sent
  // This timeout can be avoid in some specific cases by simply clearing the STOP bit
    timeout = FLAG_TIMEOUT;
 8008c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c28:	60fb      	str	r3, [r7, #12]
    while ((i2c->CR1 & I2C_CR1_STOP) == I2C_CR1_STOP) {
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c36:	bf0c      	ite	eq
 8008c38:	2301      	moveq	r3, #1
 8008c3a:	2300      	movne	r3, #0
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00b      	beq.n	8008c5a <_ZN7TwoWire16i2c_master_startEv+0x4e>
        if ((timeout--) == 0) {
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	1e5a      	subs	r2, r3, #1
 8008c46:	60fa      	str	r2, [r7, #12]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	bf0c      	ite	eq
 8008c4c:	2301      	moveq	r3, #1
 8008c4e:	2300      	movne	r3, #0
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d0e9      	beq.n	8008c2a <_ZN7TwoWire16i2c_master_startEv+0x1e>
            return 1;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e021      	b.n	8008c9e <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    // Generate the START condition
    i2c->CR1 |= I2C_CR1_START;
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	601a      	str	r2, [r3, #0]

    // Wait the START condition has been correctly sent
    timeout = FLAG_TIMEOUT;
 8008c66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c6a:	60fb      	str	r3, [r7, #12]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c70:	695b      	ldr	r3, [r3, #20]
 8008c72:	f003 0301 	and.w	r3, r3, #1
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	bf14      	ite	ne
 8008c7a:	2301      	movne	r3, #1
 8008c7c:	2300      	moveq	r3, #0
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d00b      	beq.n	8008c9c <_ZN7TwoWire16i2c_master_startEv+0x90>
        if ((timeout--) == 0) {
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	1e5a      	subs	r2, r3, #1
 8008c88:	60fa      	str	r2, [r7, #12]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	bf0c      	ite	eq
 8008c8e:	2301      	moveq	r3, #1
 8008c90:	2300      	movne	r3, #0
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d0e9      	beq.n	8008c6c <_ZN7TwoWire16i2c_master_startEv+0x60>
            return 1;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e000      	b.n	8008c9e <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    return 0;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3714      	adds	r7, #20
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr

08008caa <_ZN7TwoWire15i2c_master_stopEv>:

int TwoWire::i2c_master_stop()
{
 8008caa:	b480      	push	{r7}
 8008cac:	b085      	sub	sp, #20
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cb6:	60fb      	str	r3, [r7, #12]

    // Generate the STOP condition
    i2c->CR1 |= I2C_CR1_STOP;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	601a      	str	r2, [r3, #0]

    return 0;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3714      	adds	r7, #20
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr

08008cd2 <_ZN7TwoWire15i2c_master_readEhPchh>:

int TwoWire::i2c_master_read(uint8_t address, char *data, uint8_t length, uint8_t stop)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b08a      	sub	sp, #40	; 0x28
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	60f8      	str	r0, [r7, #12]
 8008cda:	607a      	str	r2, [r7, #4]
 8008cdc:	461a      	mov	r2, r3
 8008cde:	460b      	mov	r3, r1
 8008ce0:	72fb      	strb	r3, [r7, #11]
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	72bb      	strb	r3, [r7, #10]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cea:	61fb      	str	r3, [r7, #28]
    int timeout;
    int count;
    int value;
    int ret;

    i2c_master_start();
 8008cec:	68f8      	ldr	r0, [r7, #12]
 8008cee:	f7ff ff8d 	bl	8008c0c <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 8008cf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cf6:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cfc:	695b      	ldr	r3, [r3, #20]
 8008cfe:	f003 0301 	and.w	r3, r3, #1
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	bf14      	ite	ne
 8008d06:	2301      	movne	r3, #1
 8008d08:	2300      	moveq	r3, #0
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d008      	beq.n	8008d22 <_ZN7TwoWire15i2c_master_readEhPchh+0x50>
        timeout--;
 8008d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d12:	3b01      	subs	r3, #1
 8008d14:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 8008d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d1ed      	bne.n	8008cf8 <_ZN7TwoWire15i2c_master_readEhPchh+0x26>
            return -1;
 8008d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8008d20:	e064      	b.n	8008dec <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_READ(address);
 8008d22:	7afb      	ldrb	r3, [r7, #11]
 8008d24:	f043 0301 	orr.w	r3, r3, #1
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 8008d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d34:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d3a:	695b      	ldr	r3, [r3, #20]
 8008d3c:	f003 0302 	and.w	r3, r3, #2
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	bf14      	ite	ne
 8008d44:	2301      	movne	r3, #1
 8008d46:	2300      	moveq	r3, #0
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d008      	beq.n	8008d60 <_ZN7TwoWire15i2c_master_readEhPchh+0x8e>
        timeout--;
 8008d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d50:	3b01      	subs	r3, #1
 8008d52:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 8008d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d1ed      	bne.n	8008d36 <_ZN7TwoWire15i2c_master_readEhPchh+0x64>
            return -1;
 8008d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d5e:	e045      	b.n	8008dec <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 8008d60:	2300      	movs	r3, #0
 8008d62:	613b      	str	r3, [r7, #16]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d68:	695b      	ldr	r3, [r3, #20]
 8008d6a:	613b      	str	r3, [r7, #16]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d70:	699b      	ldr	r3, [r3, #24]
 8008d72:	613b      	str	r3, [r7, #16]
 8008d74:	693b      	ldr	r3, [r7, #16]

    // Read all bytes except last one
    for (count = 0; count < (length - 1); count++) {
 8008d76:	2300      	movs	r3, #0
 8008d78:	623b      	str	r3, [r7, #32]
 8008d7a:	7abb      	ldrb	r3, [r7, #10]
 8008d7c:	3b01      	subs	r3, #1
 8008d7e:	6a3a      	ldr	r2, [r7, #32]
 8008d80:	429a      	cmp	r2, r3
 8008d82:	da17      	bge.n	8008db4 <_ZN7TwoWire15i2c_master_readEhPchh+0xe2>
        ret = i2c_master_byte_read(&value, 0);
 8008d84:	f107 0314 	add.w	r3, r7, #20
 8008d88:	2200      	movs	r2, #0
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	68f8      	ldr	r0, [r7, #12]
 8008d8e:	f000 f8a4 	bl	8008eda <_ZN7TwoWire20i2c_master_byte_readEPii>
 8008d92:	61b8      	str	r0, [r7, #24]
        if(ret)
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d002      	beq.n	8008da0 <_ZN7TwoWire15i2c_master_readEhPchh+0xce>
        {
          return -1;
 8008d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d9e:	e025      	b.n	8008dec <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
        data[count] = (char)value;
 8008da0:	6979      	ldr	r1, [r7, #20]
 8008da2:	6a3b      	ldr	r3, [r7, #32]
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	4413      	add	r3, r2
 8008da8:	b2ca      	uxtb	r2, r1
 8008daa:	701a      	strb	r2, [r3, #0]
    for (count = 0; count < (length - 1); count++) {
 8008dac:	6a3b      	ldr	r3, [r7, #32]
 8008dae:	3301      	adds	r3, #1
 8008db0:	623b      	str	r3, [r7, #32]
 8008db2:	e7e2      	b.n	8008d7a <_ZN7TwoWire15i2c_master_readEhPchh+0xa8>
    }

    // If not repeated start, send stop.
    // Warning: must be done BEFORE the data is read.
    if (stop) {
 8008db4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d002      	beq.n	8008dc2 <_ZN7TwoWire15i2c_master_readEhPchh+0xf0>
        i2c_master_stop();
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	f7ff ff74 	bl	8008caa <_ZN7TwoWire15i2c_master_stopEv>
    }

    // Read the last byte
    ret = i2c_master_byte_read(&value, 1);
 8008dc2:	f107 0314 	add.w	r3, r7, #20
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	4619      	mov	r1, r3
 8008dca:	68f8      	ldr	r0, [r7, #12]
 8008dcc:	f000 f885 	bl	8008eda <_ZN7TwoWire20i2c_master_byte_readEPii>
 8008dd0:	61b8      	str	r0, [r7, #24]
    if(ret)
 8008dd2:	69bb      	ldr	r3, [r7, #24]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d002      	beq.n	8008dde <_ZN7TwoWire15i2c_master_readEhPchh+0x10c>
    {
      return -1;
 8008dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8008ddc:	e006      	b.n	8008dec <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
    }
    data[count] = (char)value;
 8008dde:	6979      	ldr	r1, [r7, #20]
 8008de0:	6a3b      	ldr	r3, [r7, #32]
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	4413      	add	r3, r2
 8008de6:	b2ca      	uxtb	r2, r1
 8008de8:	701a      	strb	r2, [r3, #0]

    return length;
 8008dea:	7abb      	ldrb	r3, [r7, #10]
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3728      	adds	r7, #40	; 0x28
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <_ZN7TwoWire16i2c_master_writeEiPKcii>:

int TwoWire::i2c_master_write(int address, const char *data, int length, int stop)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b088      	sub	sp, #32
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	607a      	str	r2, [r7, #4]
 8008e00:	603b      	str	r3, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e06:	617b      	str	r3, [r7, #20]
    int timeout;
    int count;

    i2c_master_start();
 8008e08:	68f8      	ldr	r0, [r7, #12]
 8008e0a:	f7ff feff 	bl	8008c0c <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 8008e0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e12:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e18:	695b      	ldr	r3, [r3, #20]
 8008e1a:	f003 0301 	and.w	r3, r3, #1
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	bf14      	ite	ne
 8008e22:	2301      	movne	r3, #1
 8008e24:	2300      	moveq	r3, #0
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d007      	beq.n	8008e3c <_ZN7TwoWire16i2c_master_writeEiPKcii+0x48>
        timeout--;
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 8008e32:	69fb      	ldr	r3, [r7, #28]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d1ed      	bne.n	8008e14 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x20>
            return 4;
 8008e38:	2304      	movs	r3, #4
 8008e3a:	e04a      	b.n	8008ed2 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_WRITE(address);
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 8008e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e4c:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e52:	695b      	ldr	r3, [r3, #20]
 8008e54:	f003 0302 	and.w	r3, r3, #2
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	bf14      	ite	ne
 8008e5c:	2301      	movne	r3, #1
 8008e5e:	2300      	moveq	r3, #0
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d007      	beq.n	8008e76 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x82>
        timeout--;
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d1ed      	bne.n	8008e4e <_ZN7TwoWire16i2c_master_writeEiPKcii+0x5a>
            return 2;
 8008e72:	2302      	movs	r3, #2
 8008e74:	e02d      	b.n	8008ed2 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 8008e76:	2300      	movs	r3, #0
 8008e78:	613b      	str	r3, [r7, #16]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e7e:	695b      	ldr	r3, [r3, #20]
 8008e80:	613b      	str	r3, [r7, #16]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e86:	699b      	ldr	r3, [r3, #24]
 8008e88:	613b      	str	r3, [r7, #16]
 8008e8a:	693b      	ldr	r3, [r7, #16]

    for (count = 0; count < length; count++) {
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	61bb      	str	r3, [r7, #24]
 8008e90:	69ba      	ldr	r2, [r7, #24]
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	da15      	bge.n	8008ec4 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xd0>
        if (i2c_master_byte_write(data[count]) != 1) {
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	68f8      	ldr	r0, [r7, #12]
 8008ea4:	f000 f85a 	bl	8008f5c <_ZN7TwoWire21i2c_master_byte_writeEi>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	bf14      	ite	ne
 8008eae:	2301      	movne	r3, #1
 8008eb0:	2300      	moveq	r3, #0
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d001      	beq.n	8008ebc <_ZN7TwoWire16i2c_master_writeEiPKcii+0xc8>
            return 3;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e00a      	b.n	8008ed2 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
    for (count = 0; count < length; count++) {
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	61bb      	str	r3, [r7, #24]
 8008ec2:	e7e5      	b.n	8008e90 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x9c>
        }
    }

    // If not repeated start, send stop.
    if (stop) {
 8008ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d002      	beq.n	8008ed0 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xdc>
        i2c_master_stop();
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f7ff feed 	bl	8008caa <_ZN7TwoWire15i2c_master_stopEv>
    }

    return 0;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3720      	adds	r7, #32
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <_ZN7TwoWire20i2c_master_byte_readEPii>:

int TwoWire::i2c_master_byte_read(int *value, int last)
{
 8008eda:	b480      	push	{r7}
 8008edc:	b087      	sub	sp, #28
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	60f8      	str	r0, [r7, #12]
 8008ee2:	60b9      	str	r1, [r7, #8]
 8008ee4:	607a      	str	r2, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eea:	613b      	str	r3, [r7, #16]
    int timeout;

    if (last) {
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d006      	beq.n	8008f00 <_ZN7TwoWire20i2c_master_byte_readEPii+0x26>
        // Don't acknowledge the last byte
        i2c->CR1 &= ~I2C_CR1_ACK;
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	601a      	str	r2, [r3, #0]
 8008efe:	e005      	b.n	8008f0c <_ZN7TwoWire20i2c_master_byte_readEPii+0x32>
    } else {
        // Acknowledge the byte
        i2c->CR1 |= I2C_CR1_ACK;
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	601a      	str	r2, [r3, #0]
    }

    // Wait until the byte is received
    timeout = FLAG_TIMEOUT;
 8008f0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f10:	617b      	str	r3, [r7, #20]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_RXNE) == RESET) {
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f16:	695b      	ldr	r3, [r3, #20]
 8008f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f1c:	2b40      	cmp	r3, #64	; 0x40
 8008f1e:	bf14      	ite	ne
 8008f20:	2301      	movne	r3, #1
 8008f22:	2300      	moveq	r3, #0
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00c      	beq.n	8008f44 <_ZN7TwoWire20i2c_master_byte_readEPii+0x6a>
        if ((timeout--) == 0) {
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	1e5a      	subs	r2, r3, #1
 8008f2e:	617a      	str	r2, [r7, #20]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	bf0c      	ite	eq
 8008f34:	2301      	moveq	r3, #1
 8008f36:	2300      	movne	r3, #0
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d0e9      	beq.n	8008f12 <_ZN7TwoWire20i2c_master_byte_readEPii+0x38>
            return -1;
 8008f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f42:	e005      	b.n	8008f50 <_ZN7TwoWire20i2c_master_byte_readEPii+0x76>
        }
    }

    *value = (int)i2c->DR;
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	691b      	ldr	r3, [r3, #16]
 8008f48:	461a      	mov	r2, r3
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	601a      	str	r2, [r3, #0]

    return 0;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	371c      	adds	r7, #28
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <_ZN7TwoWire21i2c_master_byte_writeEi>:

int TwoWire::i2c_master_byte_write(int data)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b085      	sub	sp, #20
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f6a:	60bb      	str	r3, [r7, #8]
    int timeout;

    i2c->DR = (uint8_t)data;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	461a      	mov	r2, r3
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	611a      	str	r2, [r3, #16]

    // Wait until the byte is transmitted
    timeout = FLAG_TIMEOUT;
 8008f76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f7a:	60fb      	str	r3, [r7, #12]
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f80:	695b      	ldr	r3, [r3, #20]
 8008f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f86:	2b80      	cmp	r3, #128	; 0x80
 8008f88:	d008      	beq.n	8008f9c <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
            (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == RESET)) {
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f8e:	695b      	ldr	r3, [r3, #20]
 8008f90:	f003 0304 	and.w	r3, r3, #4
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8008f94:	2b04      	cmp	r3, #4
 8008f96:	d001      	beq.n	8008f9c <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
 8008f98:	2301      	movs	r3, #1
 8008f9a:	e000      	b.n	8008f9e <_ZN7TwoWire21i2c_master_byte_writeEi+0x42>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00b      	beq.n	8008fba <_ZN7TwoWire21i2c_master_byte_writeEi+0x5e>
        if ((timeout--) == 0) {
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	1e5a      	subs	r2, r3, #1
 8008fa6:	60fa      	str	r2, [r7, #12]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	bf0c      	ite	eq
 8008fac:	2301      	moveq	r3, #1
 8008fae:	2300      	movne	r3, #0
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d0e2      	beq.n	8008f7c <_ZN7TwoWire21i2c_master_byte_writeEi+0x20>
            return 0;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	e000      	b.n	8008fbc <_ZN7TwoWire21i2c_master_byte_writeEi+0x60>
        }
    }

    return 1;
 8008fba:	2301      	movs	r3, #1
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3714      	adds	r7, #20
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <_ZN7TwoWire15i2c_slave_writeEPKci>:

int TwoWire::i2c_slave_write(const char *data, int length)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b089      	sub	sp, #36	; 0x24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fdc:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	dd41      	ble.n	8009068 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 8008fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fe8:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fee:	695b      	ldr	r3, [r3, #20]
 8008ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ff4:	2b80      	cmp	r3, #128	; 0x80
 8008ff6:	bf14      	ite	ne
 8008ff8:	2301      	movne	r3, #1
 8008ffa:	2300      	moveq	r3, #0
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d008      	beq.n	8009014 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	3b01      	subs	r3, #1
 8009006:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d1ed      	bne.n	8008fea <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 800900e:	f04f 33ff 	mov.w	r3, #4294967295
 8009012:	e068      	b.n	80090e6 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	1c5a      	adds	r2, r3, #1
 8009018:	60ba      	str	r2, [r7, #8]
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	461a      	mov	r2, r3
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	611a      	str	r2, [r3, #16]
        length--;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	3b01      	subs	r3, #1
 8009026:	607b      	str	r3, [r7, #4]
        size++;
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	3301      	adds	r3, #1
 800902c:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009032:	695b      	ldr	r3, [r3, #20]
 8009034:	f003 0304 	and.w	r3, r3, #4
 8009038:	2b04      	cmp	r3, #4
 800903a:	d104      	bne.n	8009046 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d001      	beq.n	8009046 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8009042:	2301      	movs	r3, #1
 8009044:	e000      	b.n	8009048 <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 8009046:	2300      	movs	r3, #0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d0c8      	beq.n	8008fde <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	1c5a      	adds	r2, r3, #1
 8009050:	60ba      	str	r2, [r7, #8]
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	461a      	mov	r2, r3
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	611a      	str	r2, [r3, #16]
            length--;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	3b01      	subs	r3, #1
 800905e:	607b      	str	r3, [r7, #4]
            size++;
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	3301      	adds	r3, #1
 8009064:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 8009066:	e7ba      	b.n	8008fde <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 8009068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800906c:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009072:	695b      	ldr	r3, [r3, #20]
 8009074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800907c:	bf14      	ite	ne
 800907e:	2301      	movne	r3, #1
 8009080:	2300      	moveq	r3, #0
 8009082:	b2db      	uxtb	r3, r3
 8009084:	2b00      	cmp	r3, #0
 8009086:	d008      	beq.n	800909a <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	3b01      	subs	r3, #1
 800908c:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 800908e:	69fb      	ldr	r3, [r7, #28]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d1ec      	bne.n	800906e <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 8009094:	f04f 33ff 	mov.w	r3, #4294967295
 8009098:	e025      	b.n	80090e6 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800909e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80090a2:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 80090a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090a8:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ae:	699b      	ldr	r3, [r3, #24]
 80090b0:	f003 0302 	and.w	r3, r3, #2
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	bf0c      	ite	eq
 80090b8:	2301      	moveq	r3, #1
 80090ba:	2300      	movne	r3, #0
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d008      	beq.n	80090d4 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	3b01      	subs	r3, #1
 80090c6:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 80090c8:	69fb      	ldr	r3, [r7, #28]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d1ed      	bne.n	80090aa <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 80090ce:	f04f 33ff 	mov.w	r3, #4294967295
 80090d2:	e008      	b.n	80090e6 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2220      	movs	r2, #32
 80090d8:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2200      	movs	r2, #0
 80090e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 80090e4:	69bb      	ldr	r3, [r7, #24]
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3724      	adds	r7, #36	; 0x24
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
	...

080090f4 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009100:	4a12      	ldr	r2, [pc, #72]	; (800914c <_ZN7TwoWire15enableInterruptEv+0x58>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d106      	bne.n	8009114 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8009106:	2049      	movs	r0, #73	; 0x49
 8009108:	f000 fc9a 	bl	8009a40 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800910c:	2048      	movs	r0, #72	; 0x48
 800910e:	f000 fc97 	bl	8009a40 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8009112:	e016      	b.n	8009142 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009118:	4a0d      	ldr	r2, [pc, #52]	; (8009150 <_ZN7TwoWire15enableInterruptEv+0x5c>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d106      	bne.n	800912c <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800911e:	2022      	movs	r0, #34	; 0x22
 8009120:	f000 fc8e 	bl	8009a40 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8009124:	2021      	movs	r0, #33	; 0x21
 8009126:	f000 fc8b 	bl	8009a40 <HAL_NVIC_EnableIRQ>
}
 800912a:	e00a      	b.n	8009142 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009130:	4a08      	ldr	r2, [pc, #32]	; (8009154 <_ZN7TwoWire15enableInterruptEv+0x60>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d105      	bne.n	8009142 <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8009136:	2020      	movs	r0, #32
 8009138:	f000 fc82 	bl	8009a40 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800913c:	201f      	movs	r0, #31
 800913e:	f000 fc7f 	bl	8009a40 <HAL_NVIC_EnableIRQ>
}
 8009142:	bf00      	nop
 8009144:	3708      	adds	r7, #8
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	40005c00 	.word	0x40005c00
 8009150:	40005800 	.word	0x40005800
 8009154:	40005400 	.word	0x40005400

08009158 <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009164:	4a12      	ldr	r2, [pc, #72]	; (80091b0 <_ZN7TwoWire16disableInterruptEv+0x58>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d106      	bne.n	8009178 <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 800916a:	2049      	movs	r0, #73	; 0x49
 800916c:	f000 fc76 	bl	8009a5c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8009170:	2048      	movs	r0, #72	; 0x48
 8009172:	f000 fc73 	bl	8009a5c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8009176:	e016      	b.n	80091a6 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800917c:	4a0d      	ldr	r2, [pc, #52]	; (80091b4 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d106      	bne.n	8009190 <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8009182:	2022      	movs	r0, #34	; 0x22
 8009184:	f000 fc6a 	bl	8009a5c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8009188:	2021      	movs	r0, #33	; 0x21
 800918a:	f000 fc67 	bl	8009a5c <HAL_NVIC_DisableIRQ>
}
 800918e:	e00a      	b.n	80091a6 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009194:	4a08      	ldr	r2, [pc, #32]	; (80091b8 <_ZN7TwoWire16disableInterruptEv+0x60>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d105      	bne.n	80091a6 <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 800919a:	2020      	movs	r0, #32
 800919c:	f000 fc5e 	bl	8009a5c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 80091a0:	201f      	movs	r0, #31
 80091a2:	f000 fc5b 	bl	8009a5c <HAL_NVIC_DisableIRQ>
}
 80091a6:	bf00      	nop
 80091a8:	3708      	adds	r7, #8
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	40005c00 	.word	0x40005c00
 80091b4:	40005800 	.word	0x40005800
 80091b8:	40005400 	.word	0x40005400

080091bc <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d110      	bne.n	80091ee <_Z41__static_initialization_and_destruction_0ii+0x32>
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d10b      	bne.n	80091ee <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 80091d6:	4908      	ldr	r1, [pc, #32]	; (80091f8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80091d8:	4808      	ldr	r0, [pc, #32]	; (80091fc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80091da:	f7ff fb51 	bl	8008880 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 80091de:	4908      	ldr	r1, [pc, #32]	; (8009200 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80091e0:	4808      	ldr	r0, [pc, #32]	; (8009204 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80091e2:	f7ff fb4d 	bl	8008880 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 80091e6:	4908      	ldr	r1, [pc, #32]	; (8009208 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80091e8:	4808      	ldr	r0, [pc, #32]	; (800920c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80091ea:	f7ff fb49 	bl	8008880 <_ZN7TwoWireC1EP11I2C_TypeDef>
 80091ee:	bf00      	nop
 80091f0:	3708      	adds	r7, #8
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	40005400 	.word	0x40005400
 80091fc:	20000394 	.word	0x20000394
 8009200:	40005800 	.word	0x40005800
 8009204:	2000044c 	.word	0x2000044c
 8009208:	40005c00 	.word	0x40005c00
 800920c:	20000504 	.word	0x20000504

08009210 <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 8009210:	b580      	push	{r7, lr}
 8009212:	af00      	add	r7, sp, #0
 8009214:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009218:	2001      	movs	r0, #1
 800921a:	f7ff ffcf 	bl	80091bc <_Z41__static_initialization_and_destruction_0ii>
 800921e:	bd80      	pop	{r7, pc}

08009220 <MRT_radio_tx>:
#include <iwdg.h>
#include <string.h>
#include <sx126x.h>


void MRT_radio_tx(char* buffer){
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
			//sx126x_set_tx(); TODO
			TxProtocol(buffer, strlen(buffer));
		}
	#endif

	print((char*) "Radio sending:\t");
 8009228:	4804      	ldr	r0, [pc, #16]	; (800923c <MRT_radio_tx+0x1c>)
 800922a:	f7f7 ff6d 	bl	8001108 <print>
	println(buffer);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f7f7 ff4c 	bl	80010cc <println>
}
 8009234:	bf00      	nop
 8009236:	3708      	adds	r7, #8
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}
 800923c:	08019954 	.word	0x08019954

08009240 <MRT_radio_Init>:
	println(buffer);
}



void MRT_radio_Init(void){
 8009240:	b580      	push	{r7, lr}
 8009242:	af00      	add	r7, sp, #0
	println("\r\nRadio Init");
 8009244:	4803      	ldr	r0, [pc, #12]	; (8009254 <MRT_radio_Init+0x14>)
 8009246:	f7f7 ff41 	bl	80010cc <println>
	set_NRESET_pin(SX_RST_GPIO_Port, SX_RST_Pin);
	set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
	Tx_setup();
	println("OK");
	#else
	println("\tNo radio currently in use");
 800924a:	4803      	ldr	r0, [pc, #12]	; (8009258 <MRT_radio_Init+0x18>)
 800924c:	f7f7 ff3e 	bl	80010cc <println>
	#endif
}
 8009250:	bf00      	nop
 8009252:	bd80      	pop	{r7, pc}
 8009254:	08019978 	.word	0x08019978
 8009258:	08019988 	.word	0x08019988

0800925c <MRT_TELEMETRY_Init>:


void MRT_TELEMETRY_Init(void){
 800925c:	b5b0      	push	{r4, r5, r7, lr}
 800925e:	b086      	sub	sp, #24
 8009260:	af00      	add	r7, sp, #0

	MRT_radio_Init();
 8009262:	f7ff ffed 	bl	8009240 <MRT_radio_Init>

	HAL_IWDG_Refresh(&hiwdg);

	#if IRIDIUM_
		HAL_GPIO_WritePin(Iridium_RST_GPIO_Port, Iridium_RST_Pin, SET);
 8009266:	2201      	movs	r2, #1
 8009268:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800926c:	4809      	ldr	r0, [pc, #36]	; (8009294 <MRT_TELEMETRY_Init+0x38>)
 800926e:	f000 fdc7 	bl	8009e00 <HAL_GPIO_WritePin>
		#if IRIDIUM_INTERNAL_PRINT
		hiridium = MRT_Iridium_Init(IRIDIUM_TIMEOUT, IRIDIUM_I2C, print);
 8009272:	4c09      	ldr	r4, [pc, #36]	; (8009298 <MRT_TELEMETRY_Init+0x3c>)
 8009274:	4638      	mov	r0, r7
 8009276:	4b09      	ldr	r3, [pc, #36]	; (800929c <MRT_TELEMETRY_Init+0x40>)
 8009278:	2202      	movs	r2, #2
 800927a:	2101      	movs	r1, #1
 800927c:	f7ff f946 	bl	800850c <MRT_Iridium_Init>
 8009280:	4625      	mov	r5, r4
 8009282:	463c      	mov	r4, r7
 8009284:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009286:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009288:	6823      	ldr	r3, [r4, #0]
 800928a:	602b      	str	r3, [r5, #0]
		#else
		hiridium = MRT_Iridium_Init(IRIDIUM_TIMEOUT, IRIDIUM_I2C, no_print); //Doesn't print the internal commands
		#endif
	#endif
}
 800928c:	bf00      	nop
 800928e:	3718      	adds	r7, #24
 8009290:	46bd      	mov	sp, r7
 8009292:	bdb0      	pop	{r4, r5, r7, pc}
 8009294:	40021000 	.word	0x40021000
 8009298:	20000380 	.word	0x20000380
 800929c:	08001109 	.word	0x08001109

080092a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80092a4:	4b0e      	ldr	r3, [pc, #56]	; (80092e0 <HAL_Init+0x40>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a0d      	ldr	r2, [pc, #52]	; (80092e0 <HAL_Init+0x40>)
 80092aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80092ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80092b0:	4b0b      	ldr	r3, [pc, #44]	; (80092e0 <HAL_Init+0x40>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a0a      	ldr	r2, [pc, #40]	; (80092e0 <HAL_Init+0x40>)
 80092b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80092ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80092bc:	4b08      	ldr	r3, [pc, #32]	; (80092e0 <HAL_Init+0x40>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a07      	ldr	r2, [pc, #28]	; (80092e0 <HAL_Init+0x40>)
 80092c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80092c8:	2003      	movs	r0, #3
 80092ca:	f000 fb92 	bl	80099f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80092ce:	2000      	movs	r0, #0
 80092d0:	f7f9 fa9c 	bl	800280c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80092d4:	f7f9 fa6e 	bl	80027b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	40023c00 	.word	0x40023c00

080092e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80092e4:	b480      	push	{r7}
 80092e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80092e8:	4b06      	ldr	r3, [pc, #24]	; (8009304 <HAL_IncTick+0x20>)
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	461a      	mov	r2, r3
 80092ee:	4b06      	ldr	r3, [pc, #24]	; (8009308 <HAL_IncTick+0x24>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4413      	add	r3, r2
 80092f4:	4a04      	ldr	r2, [pc, #16]	; (8009308 <HAL_IncTick+0x24>)
 80092f6:	6013      	str	r3, [r2, #0]
}
 80092f8:	bf00      	nop
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop
 8009304:	20000068 	.word	0x20000068
 8009308:	20005fc8 	.word	0x20005fc8

0800930c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800930c:	b480      	push	{r7}
 800930e:	af00      	add	r7, sp, #0
  return uwTick;
 8009310:	4b03      	ldr	r3, [pc, #12]	; (8009320 <HAL_GetTick+0x14>)
 8009312:	681b      	ldr	r3, [r3, #0]
}
 8009314:	4618      	mov	r0, r3
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop
 8009320:	20005fc8 	.word	0x20005fc8

08009324 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800932c:	f7ff ffee 	bl	800930c <HAL_GetTick>
 8009330:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800933c:	d005      	beq.n	800934a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800933e:	4b0a      	ldr	r3, [pc, #40]	; (8009368 <HAL_Delay+0x44>)
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	461a      	mov	r2, r3
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	4413      	add	r3, r2
 8009348:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800934a:	bf00      	nop
 800934c:	f7ff ffde 	bl	800930c <HAL_GetTick>
 8009350:	4602      	mov	r2, r0
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	429a      	cmp	r2, r3
 800935a:	d8f7      	bhi.n	800934c <HAL_Delay+0x28>
  {
  }
}
 800935c:	bf00      	nop
 800935e:	bf00      	nop
 8009360:	3710      	adds	r7, #16
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
 8009366:	bf00      	nop
 8009368:	20000068 	.word	0x20000068

0800936c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009374:	2300      	movs	r3, #0
 8009376:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d101      	bne.n	8009382 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800937e:	2301      	movs	r3, #1
 8009380:	e033      	b.n	80093ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009386:	2b00      	cmp	r3, #0
 8009388:	d109      	bne.n	800939e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f7f8 f91a 	bl	80015c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2200      	movs	r2, #0
 800939a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a2:	f003 0310 	and.w	r3, r3, #16
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d118      	bne.n	80093dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80093b2:	f023 0302 	bic.w	r3, r3, #2
 80093b6:	f043 0202 	orr.w	r2, r3, #2
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 f94a 	bl	8009658 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ce:	f023 0303 	bic.w	r3, r3, #3
 80093d2:	f043 0201 	orr.w	r2, r3, #1
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	641a      	str	r2, [r3, #64]	; 0x40
 80093da:	e001      	b.n	80093e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80093e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
	...

080093f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80093fe:	2300      	movs	r3, #0
 8009400:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009408:	2b01      	cmp	r3, #1
 800940a:	d101      	bne.n	8009410 <HAL_ADC_ConfigChannel+0x1c>
 800940c:	2302      	movs	r3, #2
 800940e:	e113      	b.n	8009638 <HAL_ADC_ConfigChannel+0x244>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2b09      	cmp	r3, #9
 800941e:	d925      	bls.n	800946c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	68d9      	ldr	r1, [r3, #12]
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	b29b      	uxth	r3, r3
 800942c:	461a      	mov	r2, r3
 800942e:	4613      	mov	r3, r2
 8009430:	005b      	lsls	r3, r3, #1
 8009432:	4413      	add	r3, r2
 8009434:	3b1e      	subs	r3, #30
 8009436:	2207      	movs	r2, #7
 8009438:	fa02 f303 	lsl.w	r3, r2, r3
 800943c:	43da      	mvns	r2, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	400a      	ands	r2, r1
 8009444:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68d9      	ldr	r1, [r3, #12]
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	689a      	ldr	r2, [r3, #8]
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	b29b      	uxth	r3, r3
 8009456:	4618      	mov	r0, r3
 8009458:	4603      	mov	r3, r0
 800945a:	005b      	lsls	r3, r3, #1
 800945c:	4403      	add	r3, r0
 800945e:	3b1e      	subs	r3, #30
 8009460:	409a      	lsls	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	430a      	orrs	r2, r1
 8009468:	60da      	str	r2, [r3, #12]
 800946a:	e022      	b.n	80094b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	6919      	ldr	r1, [r3, #16]
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	b29b      	uxth	r3, r3
 8009478:	461a      	mov	r2, r3
 800947a:	4613      	mov	r3, r2
 800947c:	005b      	lsls	r3, r3, #1
 800947e:	4413      	add	r3, r2
 8009480:	2207      	movs	r2, #7
 8009482:	fa02 f303 	lsl.w	r3, r2, r3
 8009486:	43da      	mvns	r2, r3
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	400a      	ands	r2, r1
 800948e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	6919      	ldr	r1, [r3, #16]
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	689a      	ldr	r2, [r3, #8]
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	b29b      	uxth	r3, r3
 80094a0:	4618      	mov	r0, r3
 80094a2:	4603      	mov	r3, r0
 80094a4:	005b      	lsls	r3, r3, #1
 80094a6:	4403      	add	r3, r0
 80094a8:	409a      	lsls	r2, r3
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	430a      	orrs	r2, r1
 80094b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	2b06      	cmp	r3, #6
 80094b8:	d824      	bhi.n	8009504 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	685a      	ldr	r2, [r3, #4]
 80094c4:	4613      	mov	r3, r2
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	4413      	add	r3, r2
 80094ca:	3b05      	subs	r3, #5
 80094cc:	221f      	movs	r2, #31
 80094ce:	fa02 f303 	lsl.w	r3, r2, r3
 80094d2:	43da      	mvns	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	400a      	ands	r2, r1
 80094da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	4618      	mov	r0, r3
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	685a      	ldr	r2, [r3, #4]
 80094ee:	4613      	mov	r3, r2
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	4413      	add	r3, r2
 80094f4:	3b05      	subs	r3, #5
 80094f6:	fa00 f203 	lsl.w	r2, r0, r3
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	430a      	orrs	r2, r1
 8009500:	635a      	str	r2, [r3, #52]	; 0x34
 8009502:	e04c      	b.n	800959e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	2b0c      	cmp	r3, #12
 800950a:	d824      	bhi.n	8009556 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	685a      	ldr	r2, [r3, #4]
 8009516:	4613      	mov	r3, r2
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	4413      	add	r3, r2
 800951c:	3b23      	subs	r3, #35	; 0x23
 800951e:	221f      	movs	r2, #31
 8009520:	fa02 f303 	lsl.w	r3, r2, r3
 8009524:	43da      	mvns	r2, r3
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	400a      	ands	r2, r1
 800952c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	b29b      	uxth	r3, r3
 800953a:	4618      	mov	r0, r3
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	685a      	ldr	r2, [r3, #4]
 8009540:	4613      	mov	r3, r2
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	4413      	add	r3, r2
 8009546:	3b23      	subs	r3, #35	; 0x23
 8009548:	fa00 f203 	lsl.w	r2, r0, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	430a      	orrs	r2, r1
 8009552:	631a      	str	r2, [r3, #48]	; 0x30
 8009554:	e023      	b.n	800959e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	685a      	ldr	r2, [r3, #4]
 8009560:	4613      	mov	r3, r2
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	4413      	add	r3, r2
 8009566:	3b41      	subs	r3, #65	; 0x41
 8009568:	221f      	movs	r2, #31
 800956a:	fa02 f303 	lsl.w	r3, r2, r3
 800956e:	43da      	mvns	r2, r3
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	400a      	ands	r2, r1
 8009576:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	b29b      	uxth	r3, r3
 8009584:	4618      	mov	r0, r3
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	685a      	ldr	r2, [r3, #4]
 800958a:	4613      	mov	r3, r2
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	4413      	add	r3, r2
 8009590:	3b41      	subs	r3, #65	; 0x41
 8009592:	fa00 f203 	lsl.w	r2, r0, r3
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	430a      	orrs	r2, r1
 800959c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800959e:	4b29      	ldr	r3, [pc, #164]	; (8009644 <HAL_ADC_ConfigChannel+0x250>)
 80095a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a28      	ldr	r2, [pc, #160]	; (8009648 <HAL_ADC_ConfigChannel+0x254>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d10f      	bne.n	80095cc <HAL_ADC_ConfigChannel+0x1d8>
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2b12      	cmp	r3, #18
 80095b2:	d10b      	bne.n	80095cc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a1d      	ldr	r2, [pc, #116]	; (8009648 <HAL_ADC_ConfigChannel+0x254>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d12b      	bne.n	800962e <HAL_ADC_ConfigChannel+0x23a>
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a1c      	ldr	r2, [pc, #112]	; (800964c <HAL_ADC_ConfigChannel+0x258>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d003      	beq.n	80095e8 <HAL_ADC_ConfigChannel+0x1f4>
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2b11      	cmp	r3, #17
 80095e6:	d122      	bne.n	800962e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a11      	ldr	r2, [pc, #68]	; (800964c <HAL_ADC_ConfigChannel+0x258>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d111      	bne.n	800962e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800960a:	4b11      	ldr	r3, [pc, #68]	; (8009650 <HAL_ADC_ConfigChannel+0x25c>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a11      	ldr	r2, [pc, #68]	; (8009654 <HAL_ADC_ConfigChannel+0x260>)
 8009610:	fba2 2303 	umull	r2, r3, r2, r3
 8009614:	0c9a      	lsrs	r2, r3, #18
 8009616:	4613      	mov	r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4413      	add	r3, r2
 800961c:	005b      	lsls	r3, r3, #1
 800961e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009620:	e002      	b.n	8009628 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	3b01      	subs	r3, #1
 8009626:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d1f9      	bne.n	8009622 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	3714      	adds	r7, #20
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr
 8009644:	40012300 	.word	0x40012300
 8009648:	40012000 	.word	0x40012000
 800964c:	10000012 	.word	0x10000012
 8009650:	2000003c 	.word	0x2000003c
 8009654:	431bde83 	.word	0x431bde83

08009658 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009658:	b480      	push	{r7}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009660:	4b79      	ldr	r3, [pc, #484]	; (8009848 <ADC_Init+0x1f0>)
 8009662:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	685a      	ldr	r2, [r3, #4]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	431a      	orrs	r2, r3
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	685a      	ldr	r2, [r3, #4]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800968c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	6859      	ldr	r1, [r3, #4]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	021a      	lsls	r2, r3, #8
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	430a      	orrs	r2, r1
 80096a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	685a      	ldr	r2, [r3, #4]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80096b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	6859      	ldr	r1, [r3, #4]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	689a      	ldr	r2, [r3, #8]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	430a      	orrs	r2, r1
 80096c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	689a      	ldr	r2, [r3, #8]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80096d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	6899      	ldr	r1, [r3, #8]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	68da      	ldr	r2, [r3, #12]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	430a      	orrs	r2, r1
 80096e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ea:	4a58      	ldr	r2, [pc, #352]	; (800984c <ADC_Init+0x1f4>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d022      	beq.n	8009736 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	689a      	ldr	r2, [r3, #8]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80096fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	6899      	ldr	r1, [r3, #8]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	430a      	orrs	r2, r1
 8009710:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	689a      	ldr	r2, [r3, #8]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009720:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	6899      	ldr	r1, [r3, #8]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	430a      	orrs	r2, r1
 8009732:	609a      	str	r2, [r3, #8]
 8009734:	e00f      	b.n	8009756 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	689a      	ldr	r2, [r3, #8]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009744:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	689a      	ldr	r2, [r3, #8]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009754:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	689a      	ldr	r2, [r3, #8]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f022 0202 	bic.w	r2, r2, #2
 8009764:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	6899      	ldr	r1, [r3, #8]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	7e1b      	ldrb	r3, [r3, #24]
 8009770:	005a      	lsls	r2, r3, #1
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	430a      	orrs	r2, r1
 8009778:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d01b      	beq.n	80097bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	685a      	ldr	r2, [r3, #4]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009792:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	685a      	ldr	r2, [r3, #4]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80097a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	6859      	ldr	r1, [r3, #4]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ae:	3b01      	subs	r3, #1
 80097b0:	035a      	lsls	r2, r3, #13
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	430a      	orrs	r2, r1
 80097b8:	605a      	str	r2, [r3, #4]
 80097ba:	e007      	b.n	80097cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	685a      	ldr	r2, [r3, #4]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80097ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80097da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	69db      	ldr	r3, [r3, #28]
 80097e6:	3b01      	subs	r3, #1
 80097e8:	051a      	lsls	r2, r3, #20
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	430a      	orrs	r2, r1
 80097f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	689a      	ldr	r2, [r3, #8]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009800:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	6899      	ldr	r1, [r3, #8]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800980e:	025a      	lsls	r2, r3, #9
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	430a      	orrs	r2, r1
 8009816:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	689a      	ldr	r2, [r3, #8]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009826:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	6899      	ldr	r1, [r3, #8]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	695b      	ldr	r3, [r3, #20]
 8009832:	029a      	lsls	r2, r3, #10
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	430a      	orrs	r2, r1
 800983a:	609a      	str	r2, [r3, #8]
}
 800983c:	bf00      	nop
 800983e:	3714      	adds	r7, #20
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr
 8009848:	40012300 	.word	0x40012300
 800984c:	0f000001 	.word	0x0f000001

08009850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009850:	b480      	push	{r7}
 8009852:	b085      	sub	sp, #20
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f003 0307 	and.w	r3, r3, #7
 800985e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009860:	4b0c      	ldr	r3, [pc, #48]	; (8009894 <__NVIC_SetPriorityGrouping+0x44>)
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009866:	68ba      	ldr	r2, [r7, #8]
 8009868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800986c:	4013      	ands	r3, r2
 800986e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009878:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800987c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009882:	4a04      	ldr	r2, [pc, #16]	; (8009894 <__NVIC_SetPriorityGrouping+0x44>)
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	60d3      	str	r3, [r2, #12]
}
 8009888:	bf00      	nop
 800988a:	3714      	adds	r7, #20
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr
 8009894:	e000ed00 	.word	0xe000ed00

08009898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009898:	b480      	push	{r7}
 800989a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800989c:	4b04      	ldr	r3, [pc, #16]	; (80098b0 <__NVIC_GetPriorityGrouping+0x18>)
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	0a1b      	lsrs	r3, r3, #8
 80098a2:	f003 0307 	and.w	r3, r3, #7
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr
 80098b0:	e000ed00 	.word	0xe000ed00

080098b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	4603      	mov	r3, r0
 80098bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80098be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	db0b      	blt.n	80098de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80098c6:	79fb      	ldrb	r3, [r7, #7]
 80098c8:	f003 021f 	and.w	r2, r3, #31
 80098cc:	4907      	ldr	r1, [pc, #28]	; (80098ec <__NVIC_EnableIRQ+0x38>)
 80098ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098d2:	095b      	lsrs	r3, r3, #5
 80098d4:	2001      	movs	r0, #1
 80098d6:	fa00 f202 	lsl.w	r2, r0, r2
 80098da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80098de:	bf00      	nop
 80098e0:	370c      	adds	r7, #12
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop
 80098ec:	e000e100 	.word	0xe000e100

080098f0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	4603      	mov	r3, r0
 80098f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80098fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	db12      	blt.n	8009928 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009902:	79fb      	ldrb	r3, [r7, #7]
 8009904:	f003 021f 	and.w	r2, r3, #31
 8009908:	490a      	ldr	r1, [pc, #40]	; (8009934 <__NVIC_DisableIRQ+0x44>)
 800990a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800990e:	095b      	lsrs	r3, r3, #5
 8009910:	2001      	movs	r0, #1
 8009912:	fa00 f202 	lsl.w	r2, r0, r2
 8009916:	3320      	adds	r3, #32
 8009918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800991c:	f3bf 8f4f 	dsb	sy
}
 8009920:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009922:	f3bf 8f6f 	isb	sy
}
 8009926:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8009928:	bf00      	nop
 800992a:	370c      	adds	r7, #12
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr
 8009934:	e000e100 	.word	0xe000e100

08009938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	4603      	mov	r3, r0
 8009940:	6039      	str	r1, [r7, #0]
 8009942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009948:	2b00      	cmp	r3, #0
 800994a:	db0a      	blt.n	8009962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	b2da      	uxtb	r2, r3
 8009950:	490c      	ldr	r1, [pc, #48]	; (8009984 <__NVIC_SetPriority+0x4c>)
 8009952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009956:	0112      	lsls	r2, r2, #4
 8009958:	b2d2      	uxtb	r2, r2
 800995a:	440b      	add	r3, r1
 800995c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009960:	e00a      	b.n	8009978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	b2da      	uxtb	r2, r3
 8009966:	4908      	ldr	r1, [pc, #32]	; (8009988 <__NVIC_SetPriority+0x50>)
 8009968:	79fb      	ldrb	r3, [r7, #7]
 800996a:	f003 030f 	and.w	r3, r3, #15
 800996e:	3b04      	subs	r3, #4
 8009970:	0112      	lsls	r2, r2, #4
 8009972:	b2d2      	uxtb	r2, r2
 8009974:	440b      	add	r3, r1
 8009976:	761a      	strb	r2, [r3, #24]
}
 8009978:	bf00      	nop
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr
 8009984:	e000e100 	.word	0xe000e100
 8009988:	e000ed00 	.word	0xe000ed00

0800998c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800998c:	b480      	push	{r7}
 800998e:	b089      	sub	sp, #36	; 0x24
 8009990:	af00      	add	r7, sp, #0
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f003 0307 	and.w	r3, r3, #7
 800999e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80099a0:	69fb      	ldr	r3, [r7, #28]
 80099a2:	f1c3 0307 	rsb	r3, r3, #7
 80099a6:	2b04      	cmp	r3, #4
 80099a8:	bf28      	it	cs
 80099aa:	2304      	movcs	r3, #4
 80099ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80099ae:	69fb      	ldr	r3, [r7, #28]
 80099b0:	3304      	adds	r3, #4
 80099b2:	2b06      	cmp	r3, #6
 80099b4:	d902      	bls.n	80099bc <NVIC_EncodePriority+0x30>
 80099b6:	69fb      	ldr	r3, [r7, #28]
 80099b8:	3b03      	subs	r3, #3
 80099ba:	e000      	b.n	80099be <NVIC_EncodePriority+0x32>
 80099bc:	2300      	movs	r3, #0
 80099be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80099c0:	f04f 32ff 	mov.w	r2, #4294967295
 80099c4:	69bb      	ldr	r3, [r7, #24]
 80099c6:	fa02 f303 	lsl.w	r3, r2, r3
 80099ca:	43da      	mvns	r2, r3
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	401a      	ands	r2, r3
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80099d4:	f04f 31ff 	mov.w	r1, #4294967295
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	fa01 f303 	lsl.w	r3, r1, r3
 80099de:	43d9      	mvns	r1, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80099e4:	4313      	orrs	r3, r2
         );
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3724      	adds	r7, #36	; 0x24
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr

080099f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b082      	sub	sp, #8
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f7ff ff28 	bl	8009850 <__NVIC_SetPriorityGrouping>
}
 8009a00:	bf00      	nop
 8009a02:	3708      	adds	r7, #8
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b086      	sub	sp, #24
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	4603      	mov	r3, r0
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	607a      	str	r2, [r7, #4]
 8009a14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009a16:	2300      	movs	r3, #0
 8009a18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009a1a:	f7ff ff3d 	bl	8009898 <__NVIC_GetPriorityGrouping>
 8009a1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	68b9      	ldr	r1, [r7, #8]
 8009a24:	6978      	ldr	r0, [r7, #20]
 8009a26:	f7ff ffb1 	bl	800998c <NVIC_EncodePriority>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a30:	4611      	mov	r1, r2
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7ff ff80 	bl	8009938 <__NVIC_SetPriority>
}
 8009a38:	bf00      	nop
 8009a3a:	3718      	adds	r7, #24
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	4603      	mov	r3, r0
 8009a48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7ff ff30 	bl	80098b4 <__NVIC_EnableIRQ>
}
 8009a54:	bf00      	nop
 8009a56:	3708      	adds	r7, #8
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	4603      	mov	r3, r0
 8009a64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7ff ff40 	bl	80098f0 <__NVIC_DisableIRQ>
}
 8009a70:	bf00      	nop
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b089      	sub	sp, #36	; 0x24
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009a82:	2300      	movs	r3, #0
 8009a84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009a86:	2300      	movs	r3, #0
 8009a88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009a8e:	2300      	movs	r3, #0
 8009a90:	61fb      	str	r3, [r7, #28]
 8009a92:	e177      	b.n	8009d84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009a94:	2201      	movs	r2, #1
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	fa02 f303 	lsl.w	r3, r2, r3
 8009a9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	697a      	ldr	r2, [r7, #20]
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009aa8:	693a      	ldr	r2, [r7, #16]
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	f040 8166 	bne.w	8009d7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	f003 0303 	and.w	r3, r3, #3
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d005      	beq.n	8009aca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009ac6:	2b02      	cmp	r3, #2
 8009ac8:	d130      	bne.n	8009b2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	005b      	lsls	r3, r3, #1
 8009ad4:	2203      	movs	r2, #3
 8009ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8009ada:	43db      	mvns	r3, r3
 8009adc:	69ba      	ldr	r2, [r7, #24]
 8009ade:	4013      	ands	r3, r2
 8009ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	68da      	ldr	r2, [r3, #12]
 8009ae6:	69fb      	ldr	r3, [r7, #28]
 8009ae8:	005b      	lsls	r3, r3, #1
 8009aea:	fa02 f303 	lsl.w	r3, r2, r3
 8009aee:	69ba      	ldr	r2, [r7, #24]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	69ba      	ldr	r2, [r7, #24]
 8009af8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009b00:	2201      	movs	r2, #1
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	fa02 f303 	lsl.w	r3, r2, r3
 8009b08:	43db      	mvns	r3, r3
 8009b0a:	69ba      	ldr	r2, [r7, #24]
 8009b0c:	4013      	ands	r3, r2
 8009b0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	091b      	lsrs	r3, r3, #4
 8009b16:	f003 0201 	and.w	r2, r3, #1
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b20:	69ba      	ldr	r2, [r7, #24]
 8009b22:	4313      	orrs	r3, r2
 8009b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	69ba      	ldr	r2, [r7, #24]
 8009b2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	f003 0303 	and.w	r3, r3, #3
 8009b34:	2b03      	cmp	r3, #3
 8009b36:	d017      	beq.n	8009b68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009b3e:	69fb      	ldr	r3, [r7, #28]
 8009b40:	005b      	lsls	r3, r3, #1
 8009b42:	2203      	movs	r2, #3
 8009b44:	fa02 f303 	lsl.w	r3, r2, r3
 8009b48:	43db      	mvns	r3, r3
 8009b4a:	69ba      	ldr	r2, [r7, #24]
 8009b4c:	4013      	ands	r3, r2
 8009b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	689a      	ldr	r2, [r3, #8]
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	005b      	lsls	r3, r3, #1
 8009b58:	fa02 f303 	lsl.w	r3, r2, r3
 8009b5c:	69ba      	ldr	r2, [r7, #24]
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	69ba      	ldr	r2, [r7, #24]
 8009b66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	f003 0303 	and.w	r3, r3, #3
 8009b70:	2b02      	cmp	r3, #2
 8009b72:	d123      	bne.n	8009bbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009b74:	69fb      	ldr	r3, [r7, #28]
 8009b76:	08da      	lsrs	r2, r3, #3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	3208      	adds	r2, #8
 8009b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	f003 0307 	and.w	r3, r3, #7
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	220f      	movs	r2, #15
 8009b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b90:	43db      	mvns	r3, r3
 8009b92:	69ba      	ldr	r2, [r7, #24]
 8009b94:	4013      	ands	r3, r2
 8009b96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	691a      	ldr	r2, [r3, #16]
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	f003 0307 	and.w	r3, r3, #7
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ba8:	69ba      	ldr	r2, [r7, #24]
 8009baa:	4313      	orrs	r3, r2
 8009bac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009bae:	69fb      	ldr	r3, [r7, #28]
 8009bb0:	08da      	lsrs	r2, r3, #3
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	3208      	adds	r2, #8
 8009bb6:	69b9      	ldr	r1, [r7, #24]
 8009bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	005b      	lsls	r3, r3, #1
 8009bc6:	2203      	movs	r2, #3
 8009bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8009bcc:	43db      	mvns	r3, r3
 8009bce:	69ba      	ldr	r2, [r7, #24]
 8009bd0:	4013      	ands	r3, r2
 8009bd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	f003 0203 	and.w	r2, r3, #3
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	005b      	lsls	r3, r3, #1
 8009be0:	fa02 f303 	lsl.w	r3, r2, r3
 8009be4:	69ba      	ldr	r2, [r7, #24]
 8009be6:	4313      	orrs	r3, r2
 8009be8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	69ba      	ldr	r2, [r7, #24]
 8009bee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f000 80c0 	beq.w	8009d7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009bfe:	2300      	movs	r3, #0
 8009c00:	60fb      	str	r3, [r7, #12]
 8009c02:	4b66      	ldr	r3, [pc, #408]	; (8009d9c <HAL_GPIO_Init+0x324>)
 8009c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c06:	4a65      	ldr	r2, [pc, #404]	; (8009d9c <HAL_GPIO_Init+0x324>)
 8009c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8009c0e:	4b63      	ldr	r3, [pc, #396]	; (8009d9c <HAL_GPIO_Init+0x324>)
 8009c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c16:	60fb      	str	r3, [r7, #12]
 8009c18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009c1a:	4a61      	ldr	r2, [pc, #388]	; (8009da0 <HAL_GPIO_Init+0x328>)
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	089b      	lsrs	r3, r3, #2
 8009c20:	3302      	adds	r3, #2
 8009c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	f003 0303 	and.w	r3, r3, #3
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	220f      	movs	r2, #15
 8009c32:	fa02 f303 	lsl.w	r3, r2, r3
 8009c36:	43db      	mvns	r3, r3
 8009c38:	69ba      	ldr	r2, [r7, #24]
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	4a58      	ldr	r2, [pc, #352]	; (8009da4 <HAL_GPIO_Init+0x32c>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d037      	beq.n	8009cb6 <HAL_GPIO_Init+0x23e>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	4a57      	ldr	r2, [pc, #348]	; (8009da8 <HAL_GPIO_Init+0x330>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d031      	beq.n	8009cb2 <HAL_GPIO_Init+0x23a>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4a56      	ldr	r2, [pc, #344]	; (8009dac <HAL_GPIO_Init+0x334>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d02b      	beq.n	8009cae <HAL_GPIO_Init+0x236>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4a55      	ldr	r2, [pc, #340]	; (8009db0 <HAL_GPIO_Init+0x338>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d025      	beq.n	8009caa <HAL_GPIO_Init+0x232>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	4a54      	ldr	r2, [pc, #336]	; (8009db4 <HAL_GPIO_Init+0x33c>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d01f      	beq.n	8009ca6 <HAL_GPIO_Init+0x22e>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4a53      	ldr	r2, [pc, #332]	; (8009db8 <HAL_GPIO_Init+0x340>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d019      	beq.n	8009ca2 <HAL_GPIO_Init+0x22a>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4a52      	ldr	r2, [pc, #328]	; (8009dbc <HAL_GPIO_Init+0x344>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d013      	beq.n	8009c9e <HAL_GPIO_Init+0x226>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4a51      	ldr	r2, [pc, #324]	; (8009dc0 <HAL_GPIO_Init+0x348>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d00d      	beq.n	8009c9a <HAL_GPIO_Init+0x222>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	4a50      	ldr	r2, [pc, #320]	; (8009dc4 <HAL_GPIO_Init+0x34c>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d007      	beq.n	8009c96 <HAL_GPIO_Init+0x21e>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	4a4f      	ldr	r2, [pc, #316]	; (8009dc8 <HAL_GPIO_Init+0x350>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d101      	bne.n	8009c92 <HAL_GPIO_Init+0x21a>
 8009c8e:	2309      	movs	r3, #9
 8009c90:	e012      	b.n	8009cb8 <HAL_GPIO_Init+0x240>
 8009c92:	230a      	movs	r3, #10
 8009c94:	e010      	b.n	8009cb8 <HAL_GPIO_Init+0x240>
 8009c96:	2308      	movs	r3, #8
 8009c98:	e00e      	b.n	8009cb8 <HAL_GPIO_Init+0x240>
 8009c9a:	2307      	movs	r3, #7
 8009c9c:	e00c      	b.n	8009cb8 <HAL_GPIO_Init+0x240>
 8009c9e:	2306      	movs	r3, #6
 8009ca0:	e00a      	b.n	8009cb8 <HAL_GPIO_Init+0x240>
 8009ca2:	2305      	movs	r3, #5
 8009ca4:	e008      	b.n	8009cb8 <HAL_GPIO_Init+0x240>
 8009ca6:	2304      	movs	r3, #4
 8009ca8:	e006      	b.n	8009cb8 <HAL_GPIO_Init+0x240>
 8009caa:	2303      	movs	r3, #3
 8009cac:	e004      	b.n	8009cb8 <HAL_GPIO_Init+0x240>
 8009cae:	2302      	movs	r3, #2
 8009cb0:	e002      	b.n	8009cb8 <HAL_GPIO_Init+0x240>
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e000      	b.n	8009cb8 <HAL_GPIO_Init+0x240>
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	69fa      	ldr	r2, [r7, #28]
 8009cba:	f002 0203 	and.w	r2, r2, #3
 8009cbe:	0092      	lsls	r2, r2, #2
 8009cc0:	4093      	lsls	r3, r2
 8009cc2:	69ba      	ldr	r2, [r7, #24]
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009cc8:	4935      	ldr	r1, [pc, #212]	; (8009da0 <HAL_GPIO_Init+0x328>)
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	089b      	lsrs	r3, r3, #2
 8009cce:	3302      	adds	r3, #2
 8009cd0:	69ba      	ldr	r2, [r7, #24]
 8009cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009cd6:	4b3d      	ldr	r3, [pc, #244]	; (8009dcc <HAL_GPIO_Init+0x354>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	43db      	mvns	r3, r3
 8009ce0:	69ba      	ldr	r2, [r7, #24]
 8009ce2:	4013      	ands	r3, r2
 8009ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d003      	beq.n	8009cfa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009cf2:	69ba      	ldr	r2, [r7, #24]
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009cfa:	4a34      	ldr	r2, [pc, #208]	; (8009dcc <HAL_GPIO_Init+0x354>)
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009d00:	4b32      	ldr	r3, [pc, #200]	; (8009dcc <HAL_GPIO_Init+0x354>)
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	43db      	mvns	r3, r3
 8009d0a:	69ba      	ldr	r2, [r7, #24]
 8009d0c:	4013      	ands	r3, r2
 8009d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d003      	beq.n	8009d24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009d1c:	69ba      	ldr	r2, [r7, #24]
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009d24:	4a29      	ldr	r2, [pc, #164]	; (8009dcc <HAL_GPIO_Init+0x354>)
 8009d26:	69bb      	ldr	r3, [r7, #24]
 8009d28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009d2a:	4b28      	ldr	r3, [pc, #160]	; (8009dcc <HAL_GPIO_Init+0x354>)
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	43db      	mvns	r3, r3
 8009d34:	69ba      	ldr	r2, [r7, #24]
 8009d36:	4013      	ands	r3, r2
 8009d38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d003      	beq.n	8009d4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009d46:	69ba      	ldr	r2, [r7, #24]
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009d4e:	4a1f      	ldr	r2, [pc, #124]	; (8009dcc <HAL_GPIO_Init+0x354>)
 8009d50:	69bb      	ldr	r3, [r7, #24]
 8009d52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009d54:	4b1d      	ldr	r3, [pc, #116]	; (8009dcc <HAL_GPIO_Init+0x354>)
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	43db      	mvns	r3, r3
 8009d5e:	69ba      	ldr	r2, [r7, #24]
 8009d60:	4013      	ands	r3, r2
 8009d62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d003      	beq.n	8009d78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009d70:	69ba      	ldr	r2, [r7, #24]
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	4313      	orrs	r3, r2
 8009d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009d78:	4a14      	ldr	r2, [pc, #80]	; (8009dcc <HAL_GPIO_Init+0x354>)
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	3301      	adds	r3, #1
 8009d82:	61fb      	str	r3, [r7, #28]
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	2b0f      	cmp	r3, #15
 8009d88:	f67f ae84 	bls.w	8009a94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009d8c:	bf00      	nop
 8009d8e:	bf00      	nop
 8009d90:	3724      	adds	r7, #36	; 0x24
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr
 8009d9a:	bf00      	nop
 8009d9c:	40023800 	.word	0x40023800
 8009da0:	40013800 	.word	0x40013800
 8009da4:	40020000 	.word	0x40020000
 8009da8:	40020400 	.word	0x40020400
 8009dac:	40020800 	.word	0x40020800
 8009db0:	40020c00 	.word	0x40020c00
 8009db4:	40021000 	.word	0x40021000
 8009db8:	40021400 	.word	0x40021400
 8009dbc:	40021800 	.word	0x40021800
 8009dc0:	40021c00 	.word	0x40021c00
 8009dc4:	40022000 	.word	0x40022000
 8009dc8:	40022400 	.word	0x40022400
 8009dcc:	40013c00 	.word	0x40013c00

08009dd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b085      	sub	sp, #20
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	460b      	mov	r3, r1
 8009dda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	691a      	ldr	r2, [r3, #16]
 8009de0:	887b      	ldrh	r3, [r7, #2]
 8009de2:	4013      	ands	r3, r2
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d002      	beq.n	8009dee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009de8:	2301      	movs	r3, #1
 8009dea:	73fb      	strb	r3, [r7, #15]
 8009dec:	e001      	b.n	8009df2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009dee:	2300      	movs	r3, #0
 8009df0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3714      	adds	r7, #20
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr

08009e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	460b      	mov	r3, r1
 8009e0a:	807b      	strh	r3, [r7, #2]
 8009e0c:	4613      	mov	r3, r2
 8009e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009e10:	787b      	ldrb	r3, [r7, #1]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d003      	beq.n	8009e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009e16:	887a      	ldrh	r2, [r7, #2]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009e1c:	e003      	b.n	8009e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009e1e:	887b      	ldrh	r3, [r7, #2]
 8009e20:	041a      	lsls	r2, r3, #16
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	619a      	str	r2, [r3, #24]
}
 8009e26:	bf00      	nop
 8009e28:	370c      	adds	r7, #12
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr
	...

08009e34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009e3e:	4b08      	ldr	r3, [pc, #32]	; (8009e60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009e40:	695a      	ldr	r2, [r3, #20]
 8009e42:	88fb      	ldrh	r3, [r7, #6]
 8009e44:	4013      	ands	r3, r2
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d006      	beq.n	8009e58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009e4a:	4a05      	ldr	r2, [pc, #20]	; (8009e60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009e4c:	88fb      	ldrh	r3, [r7, #6]
 8009e4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009e50:	88fb      	ldrh	r3, [r7, #6]
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7f8 fd66 	bl	8002924 <HAL_GPIO_EXTI_Callback>
  }
}
 8009e58:	bf00      	nop
 8009e5a:	3708      	adds	r7, #8
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	40013c00 	.word	0x40013c00

08009e64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d101      	bne.n	8009e76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009e72:	2301      	movs	r3, #1
 8009e74:	e12b      	b.n	800a0ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d106      	bne.n	8009e90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2200      	movs	r2, #0
 8009e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f7f7 ff6c 	bl	8001d68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2224      	movs	r2, #36	; 0x24
 8009e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f022 0201 	bic.w	r2, r2, #1
 8009ea6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009eb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009ec6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009ec8:	f001 fd14 	bl	800b8f4 <HAL_RCC_GetPCLK1Freq>
 8009ecc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	4a81      	ldr	r2, [pc, #516]	; (800a0d8 <HAL_I2C_Init+0x274>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d807      	bhi.n	8009ee8 <HAL_I2C_Init+0x84>
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	4a80      	ldr	r2, [pc, #512]	; (800a0dc <HAL_I2C_Init+0x278>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	bf94      	ite	ls
 8009ee0:	2301      	movls	r3, #1
 8009ee2:	2300      	movhi	r3, #0
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	e006      	b.n	8009ef6 <HAL_I2C_Init+0x92>
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	4a7d      	ldr	r2, [pc, #500]	; (800a0e0 <HAL_I2C_Init+0x27c>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	bf94      	ite	ls
 8009ef0:	2301      	movls	r3, #1
 8009ef2:	2300      	movhi	r3, #0
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d001      	beq.n	8009efe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009efa:	2301      	movs	r3, #1
 8009efc:	e0e7      	b.n	800a0ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	4a78      	ldr	r2, [pc, #480]	; (800a0e4 <HAL_I2C_Init+0x280>)
 8009f02:	fba2 2303 	umull	r2, r3, r2, r3
 8009f06:	0c9b      	lsrs	r3, r3, #18
 8009f08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	68ba      	ldr	r2, [r7, #8]
 8009f1a:	430a      	orrs	r2, r1
 8009f1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	6a1b      	ldr	r3, [r3, #32]
 8009f24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	4a6a      	ldr	r2, [pc, #424]	; (800a0d8 <HAL_I2C_Init+0x274>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d802      	bhi.n	8009f38 <HAL_I2C_Init+0xd4>
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	3301      	adds	r3, #1
 8009f36:	e009      	b.n	8009f4c <HAL_I2C_Init+0xe8>
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009f3e:	fb02 f303 	mul.w	r3, r2, r3
 8009f42:	4a69      	ldr	r2, [pc, #420]	; (800a0e8 <HAL_I2C_Init+0x284>)
 8009f44:	fba2 2303 	umull	r2, r3, r2, r3
 8009f48:	099b      	lsrs	r3, r3, #6
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	6812      	ldr	r2, [r2, #0]
 8009f50:	430b      	orrs	r3, r1
 8009f52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	69db      	ldr	r3, [r3, #28]
 8009f5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009f5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	495c      	ldr	r1, [pc, #368]	; (800a0d8 <HAL_I2C_Init+0x274>)
 8009f68:	428b      	cmp	r3, r1
 8009f6a:	d819      	bhi.n	8009fa0 <HAL_I2C_Init+0x13c>
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	1e59      	subs	r1, r3, #1
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	005b      	lsls	r3, r3, #1
 8009f76:	fbb1 f3f3 	udiv	r3, r1, r3
 8009f7a:	1c59      	adds	r1, r3, #1
 8009f7c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009f80:	400b      	ands	r3, r1
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d00a      	beq.n	8009f9c <HAL_I2C_Init+0x138>
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	1e59      	subs	r1, r3, #1
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	005b      	lsls	r3, r3, #1
 8009f90:	fbb1 f3f3 	udiv	r3, r1, r3
 8009f94:	3301      	adds	r3, #1
 8009f96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f9a:	e051      	b.n	800a040 <HAL_I2C_Init+0x1dc>
 8009f9c:	2304      	movs	r3, #4
 8009f9e:	e04f      	b.n	800a040 <HAL_I2C_Init+0x1dc>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d111      	bne.n	8009fcc <HAL_I2C_Init+0x168>
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	1e58      	subs	r0, r3, #1
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6859      	ldr	r1, [r3, #4]
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	005b      	lsls	r3, r3, #1
 8009fb4:	440b      	add	r3, r1
 8009fb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8009fba:	3301      	adds	r3, #1
 8009fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	bf0c      	ite	eq
 8009fc4:	2301      	moveq	r3, #1
 8009fc6:	2300      	movne	r3, #0
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	e012      	b.n	8009ff2 <HAL_I2C_Init+0x18e>
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	1e58      	subs	r0, r3, #1
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6859      	ldr	r1, [r3, #4]
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	009b      	lsls	r3, r3, #2
 8009fd8:	440b      	add	r3, r1
 8009fda:	0099      	lsls	r1, r3, #2
 8009fdc:	440b      	add	r3, r1
 8009fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	bf0c      	ite	eq
 8009fec:	2301      	moveq	r3, #1
 8009fee:	2300      	movne	r3, #0
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d001      	beq.n	8009ffa <HAL_I2C_Init+0x196>
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e022      	b.n	800a040 <HAL_I2C_Init+0x1dc>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d10e      	bne.n	800a020 <HAL_I2C_Init+0x1bc>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	1e58      	subs	r0, r3, #1
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6859      	ldr	r1, [r3, #4]
 800a00a:	460b      	mov	r3, r1
 800a00c:	005b      	lsls	r3, r3, #1
 800a00e:	440b      	add	r3, r1
 800a010:	fbb0 f3f3 	udiv	r3, r0, r3
 800a014:	3301      	adds	r3, #1
 800a016:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a01a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a01e:	e00f      	b.n	800a040 <HAL_I2C_Init+0x1dc>
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	1e58      	subs	r0, r3, #1
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6859      	ldr	r1, [r3, #4]
 800a028:	460b      	mov	r3, r1
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	440b      	add	r3, r1
 800a02e:	0099      	lsls	r1, r3, #2
 800a030:	440b      	add	r3, r1
 800a032:	fbb0 f3f3 	udiv	r3, r0, r3
 800a036:	3301      	adds	r3, #1
 800a038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a03c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a040:	6879      	ldr	r1, [r7, #4]
 800a042:	6809      	ldr	r1, [r1, #0]
 800a044:	4313      	orrs	r3, r2
 800a046:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	69da      	ldr	r2, [r3, #28]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6a1b      	ldr	r3, [r3, #32]
 800a05a:	431a      	orrs	r2, r3
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	430a      	orrs	r2, r1
 800a062:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	689b      	ldr	r3, [r3, #8]
 800a06a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a06e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	6911      	ldr	r1, [r2, #16]
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	68d2      	ldr	r2, [r2, #12]
 800a07a:	4311      	orrs	r1, r2
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	6812      	ldr	r2, [r2, #0]
 800a080:	430b      	orrs	r3, r1
 800a082:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	695a      	ldr	r2, [r3, #20]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	699b      	ldr	r3, [r3, #24]
 800a096:	431a      	orrs	r2, r3
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	430a      	orrs	r2, r1
 800a09e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f042 0201 	orr.w	r2, r2, #1
 800a0ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2220      	movs	r2, #32
 800a0ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3710      	adds	r7, #16
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	000186a0 	.word	0x000186a0
 800a0dc:	001e847f 	.word	0x001e847f
 800a0e0:	003d08ff 	.word	0x003d08ff
 800a0e4:	431bde83 	.word	0x431bde83
 800a0e8:	10624dd3 	.word	0x10624dd3

0800a0ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b088      	sub	sp, #32
 800a0f0:	af02      	add	r7, sp, #8
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	4608      	mov	r0, r1
 800a0f6:	4611      	mov	r1, r2
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	817b      	strh	r3, [r7, #10]
 800a0fe:	460b      	mov	r3, r1
 800a100:	813b      	strh	r3, [r7, #8]
 800a102:	4613      	mov	r3, r2
 800a104:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a106:	f7ff f901 	bl	800930c <HAL_GetTick>
 800a10a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a112:	b2db      	uxtb	r3, r3
 800a114:	2b20      	cmp	r3, #32
 800a116:	f040 80d9 	bne.w	800a2cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	9300      	str	r3, [sp, #0]
 800a11e:	2319      	movs	r3, #25
 800a120:	2201      	movs	r2, #1
 800a122:	496d      	ldr	r1, [pc, #436]	; (800a2d8 <HAL_I2C_Mem_Write+0x1ec>)
 800a124:	68f8      	ldr	r0, [r7, #12]
 800a126:	f000 fcb5 	bl	800aa94 <I2C_WaitOnFlagUntilTimeout>
 800a12a:	4603      	mov	r3, r0
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d001      	beq.n	800a134 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a130:	2302      	movs	r3, #2
 800a132:	e0cc      	b.n	800a2ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d101      	bne.n	800a142 <HAL_I2C_Mem_Write+0x56>
 800a13e:	2302      	movs	r3, #2
 800a140:	e0c5      	b.n	800a2ce <HAL_I2C_Mem_Write+0x1e2>
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2201      	movs	r2, #1
 800a146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f003 0301 	and.w	r3, r3, #1
 800a154:	2b01      	cmp	r3, #1
 800a156:	d007      	beq.n	800a168 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f042 0201 	orr.w	r2, r2, #1
 800a166:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a176:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2221      	movs	r2, #33	; 0x21
 800a17c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2240      	movs	r2, #64	; 0x40
 800a184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2200      	movs	r2, #0
 800a18c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	6a3a      	ldr	r2, [r7, #32]
 800a192:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a198:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a19e:	b29a      	uxth	r2, r3
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	4a4d      	ldr	r2, [pc, #308]	; (800a2dc <HAL_I2C_Mem_Write+0x1f0>)
 800a1a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a1aa:	88f8      	ldrh	r0, [r7, #6]
 800a1ac:	893a      	ldrh	r2, [r7, #8]
 800a1ae:	8979      	ldrh	r1, [r7, #10]
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	9301      	str	r3, [sp, #4]
 800a1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b6:	9300      	str	r3, [sp, #0]
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	f000 faec 	bl	800a798 <I2C_RequestMemoryWrite>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d052      	beq.n	800a26c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e081      	b.n	800a2ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a1ca:	697a      	ldr	r2, [r7, #20]
 800a1cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f000 fd36 	bl	800ac40 <I2C_WaitOnTXEFlagUntilTimeout>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d00d      	beq.n	800a1f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1de:	2b04      	cmp	r3, #4
 800a1e0:	d107      	bne.n	800a1f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	e06b      	b.n	800a2ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fa:	781a      	ldrb	r2, [r3, #0]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a206:	1c5a      	adds	r2, r3, #1
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a210:	3b01      	subs	r3, #1
 800a212:	b29a      	uxth	r2, r3
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	3b01      	subs	r3, #1
 800a220:	b29a      	uxth	r2, r3
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	695b      	ldr	r3, [r3, #20]
 800a22c:	f003 0304 	and.w	r3, r3, #4
 800a230:	2b04      	cmp	r3, #4
 800a232:	d11b      	bne.n	800a26c <HAL_I2C_Mem_Write+0x180>
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d017      	beq.n	800a26c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a240:	781a      	ldrb	r2, [r3, #0]
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a24c:	1c5a      	adds	r2, r3, #1
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a256:	3b01      	subs	r3, #1
 800a258:	b29a      	uxth	r2, r3
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a262:	b29b      	uxth	r3, r3
 800a264:	3b01      	subs	r3, #1
 800a266:	b29a      	uxth	r2, r3
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a270:	2b00      	cmp	r3, #0
 800a272:	d1aa      	bne.n	800a1ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a274:	697a      	ldr	r2, [r7, #20]
 800a276:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a278:	68f8      	ldr	r0, [r7, #12]
 800a27a:	f000 fd22 	bl	800acc2 <I2C_WaitOnBTFFlagUntilTimeout>
 800a27e:	4603      	mov	r3, r0
 800a280:	2b00      	cmp	r3, #0
 800a282:	d00d      	beq.n	800a2a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a288:	2b04      	cmp	r3, #4
 800a28a:	d107      	bne.n	800a29c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a29a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a29c:	2301      	movs	r3, #1
 800a29e:	e016      	b.n	800a2ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	681a      	ldr	r2, [r3, #0]
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2220      	movs	r2, #32
 800a2b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	e000      	b.n	800a2ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a2cc:	2302      	movs	r3, #2
  }
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3718      	adds	r7, #24
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	00100002 	.word	0x00100002
 800a2dc:	ffff0000 	.word	0xffff0000

0800a2e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b08c      	sub	sp, #48	; 0x30
 800a2e4:	af02      	add	r7, sp, #8
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	4608      	mov	r0, r1
 800a2ea:	4611      	mov	r1, r2
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	817b      	strh	r3, [r7, #10]
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	813b      	strh	r3, [r7, #8]
 800a2f6:	4613      	mov	r3, r2
 800a2f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a2fa:	f7ff f807 	bl	800930c <HAL_GetTick>
 800a2fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a306:	b2db      	uxtb	r3, r3
 800a308:	2b20      	cmp	r3, #32
 800a30a:	f040 8208 	bne.w	800a71e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a310:	9300      	str	r3, [sp, #0]
 800a312:	2319      	movs	r3, #25
 800a314:	2201      	movs	r2, #1
 800a316:	497b      	ldr	r1, [pc, #492]	; (800a504 <HAL_I2C_Mem_Read+0x224>)
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	f000 fbbb 	bl	800aa94 <I2C_WaitOnFlagUntilTimeout>
 800a31e:	4603      	mov	r3, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d001      	beq.n	800a328 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800a324:	2302      	movs	r3, #2
 800a326:	e1fb      	b.n	800a720 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d101      	bne.n	800a336 <HAL_I2C_Mem_Read+0x56>
 800a332:	2302      	movs	r3, #2
 800a334:	e1f4      	b.n	800a720 <HAL_I2C_Mem_Read+0x440>
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2201      	movs	r2, #1
 800a33a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f003 0301 	and.w	r3, r3, #1
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d007      	beq.n	800a35c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	681a      	ldr	r2, [r3, #0]
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f042 0201 	orr.w	r2, r2, #1
 800a35a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a36a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2222      	movs	r2, #34	; 0x22
 800a370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2240      	movs	r2, #64	; 0x40
 800a378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2200      	movs	r2, #0
 800a380:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a386:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a38c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a392:	b29a      	uxth	r2, r3
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	4a5b      	ldr	r2, [pc, #364]	; (800a508 <HAL_I2C_Mem_Read+0x228>)
 800a39c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a39e:	88f8      	ldrh	r0, [r7, #6]
 800a3a0:	893a      	ldrh	r2, [r7, #8]
 800a3a2:	8979      	ldrh	r1, [r7, #10]
 800a3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a6:	9301      	str	r3, [sp, #4]
 800a3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3aa:	9300      	str	r3, [sp, #0]
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	68f8      	ldr	r0, [r7, #12]
 800a3b0:	f000 fa88 	bl	800a8c4 <I2C_RequestMemoryRead>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d001      	beq.n	800a3be <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	e1b0      	b.n	800a720 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d113      	bne.n	800a3ee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	623b      	str	r3, [r7, #32]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	695b      	ldr	r3, [r3, #20]
 800a3d0:	623b      	str	r3, [r7, #32]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	699b      	ldr	r3, [r3, #24]
 800a3d8:	623b      	str	r3, [r7, #32]
 800a3da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3ea:	601a      	str	r2, [r3, #0]
 800a3ec:	e184      	b.n	800a6f8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	d11b      	bne.n	800a42e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a404:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a406:	2300      	movs	r3, #0
 800a408:	61fb      	str	r3, [r7, #28]
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	695b      	ldr	r3, [r3, #20]
 800a410:	61fb      	str	r3, [r7, #28]
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	699b      	ldr	r3, [r3, #24]
 800a418:	61fb      	str	r3, [r7, #28]
 800a41a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a42a:	601a      	str	r2, [r3, #0]
 800a42c:	e164      	b.n	800a6f8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a432:	2b02      	cmp	r3, #2
 800a434:	d11b      	bne.n	800a46e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	681a      	ldr	r2, [r3, #0]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a444:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a454:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a456:	2300      	movs	r3, #0
 800a458:	61bb      	str	r3, [r7, #24]
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	695b      	ldr	r3, [r3, #20]
 800a460:	61bb      	str	r3, [r7, #24]
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	699b      	ldr	r3, [r3, #24]
 800a468:	61bb      	str	r3, [r7, #24]
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	e144      	b.n	800a6f8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a46e:	2300      	movs	r3, #0
 800a470:	617b      	str	r3, [r7, #20]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	695b      	ldr	r3, [r3, #20]
 800a478:	617b      	str	r3, [r7, #20]
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	699b      	ldr	r3, [r3, #24]
 800a480:	617b      	str	r3, [r7, #20]
 800a482:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a484:	e138      	b.n	800a6f8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a48a:	2b03      	cmp	r3, #3
 800a48c:	f200 80f1 	bhi.w	800a672 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a494:	2b01      	cmp	r3, #1
 800a496:	d123      	bne.n	800a4e0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a49a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a49c:	68f8      	ldr	r0, [r7, #12]
 800a49e:	f000 fc51 	bl	800ad44 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d001      	beq.n	800a4ac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	e139      	b.n	800a720 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	691a      	ldr	r2, [r3, #16]
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b6:	b2d2      	uxtb	r2, r2
 800a4b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4be:	1c5a      	adds	r2, r3, #1
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4c8:	3b01      	subs	r3, #1
 800a4ca:	b29a      	uxth	r2, r3
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	3b01      	subs	r3, #1
 800a4d8:	b29a      	uxth	r2, r3
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a4de:	e10b      	b.n	800a6f8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4e4:	2b02      	cmp	r3, #2
 800a4e6:	d14e      	bne.n	800a586 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ea:	9300      	str	r3, [sp, #0]
 800a4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	4906      	ldr	r1, [pc, #24]	; (800a50c <HAL_I2C_Mem_Read+0x22c>)
 800a4f2:	68f8      	ldr	r0, [r7, #12]
 800a4f4:	f000 face 	bl	800aa94 <I2C_WaitOnFlagUntilTimeout>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d008      	beq.n	800a510 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	e10e      	b.n	800a720 <HAL_I2C_Mem_Read+0x440>
 800a502:	bf00      	nop
 800a504:	00100002 	.word	0x00100002
 800a508:	ffff0000 	.word	0xffff0000
 800a50c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a51e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	691a      	ldr	r2, [r3, #16]
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52a:	b2d2      	uxtb	r2, r2
 800a52c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a532:	1c5a      	adds	r2, r3, #1
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a53c:	3b01      	subs	r3, #1
 800a53e:	b29a      	uxth	r2, r3
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a548:	b29b      	uxth	r3, r3
 800a54a:	3b01      	subs	r3, #1
 800a54c:	b29a      	uxth	r2, r3
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	691a      	ldr	r2, [r3, #16]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a55c:	b2d2      	uxtb	r2, r2
 800a55e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a564:	1c5a      	adds	r2, r3, #1
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a56e:	3b01      	subs	r3, #1
 800a570:	b29a      	uxth	r2, r3
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	3b01      	subs	r3, #1
 800a57e:	b29a      	uxth	r2, r3
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a584:	e0b8      	b.n	800a6f8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a588:	9300      	str	r3, [sp, #0]
 800a58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58c:	2200      	movs	r2, #0
 800a58e:	4966      	ldr	r1, [pc, #408]	; (800a728 <HAL_I2C_Mem_Read+0x448>)
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f000 fa7f 	bl	800aa94 <I2C_WaitOnFlagUntilTimeout>
 800a596:	4603      	mov	r3, r0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d001      	beq.n	800a5a0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800a59c:	2301      	movs	r3, #1
 800a59e:	e0bf      	b.n	800a720 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	681a      	ldr	r2, [r3, #0]
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	691a      	ldr	r2, [r3, #16]
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ba:	b2d2      	uxtb	r2, r2
 800a5bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c2:	1c5a      	adds	r2, r3, #1
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5cc:	3b01      	subs	r3, #1
 800a5ce:	b29a      	uxth	r2, r3
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	b29a      	uxth	r2, r3
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e4:	9300      	str	r3, [sp, #0]
 800a5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	494f      	ldr	r1, [pc, #316]	; (800a728 <HAL_I2C_Mem_Read+0x448>)
 800a5ec:	68f8      	ldr	r0, [r7, #12]
 800a5ee:	f000 fa51 	bl	800aa94 <I2C_WaitOnFlagUntilTimeout>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d001      	beq.n	800a5fc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e091      	b.n	800a720 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a60a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	691a      	ldr	r2, [r3, #16]
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a616:	b2d2      	uxtb	r2, r2
 800a618:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a61e:	1c5a      	adds	r2, r3, #1
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a628:	3b01      	subs	r3, #1
 800a62a:	b29a      	uxth	r2, r3
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a634:	b29b      	uxth	r3, r3
 800a636:	3b01      	subs	r3, #1
 800a638:	b29a      	uxth	r2, r3
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	691a      	ldr	r2, [r3, #16]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a648:	b2d2      	uxtb	r2, r2
 800a64a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a650:	1c5a      	adds	r2, r3, #1
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a65a:	3b01      	subs	r3, #1
 800a65c:	b29a      	uxth	r2, r3
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a666:	b29b      	uxth	r3, r3
 800a668:	3b01      	subs	r3, #1
 800a66a:	b29a      	uxth	r2, r3
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a670:	e042      	b.n	800a6f8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a674:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a676:	68f8      	ldr	r0, [r7, #12]
 800a678:	f000 fb64 	bl	800ad44 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d001      	beq.n	800a686 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a682:	2301      	movs	r3, #1
 800a684:	e04c      	b.n	800a720 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	691a      	ldr	r2, [r3, #16]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a690:	b2d2      	uxtb	r2, r2
 800a692:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a698:	1c5a      	adds	r2, r3, #1
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6a2:	3b01      	subs	r3, #1
 800a6a4:	b29a      	uxth	r2, r3
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	3b01      	subs	r3, #1
 800a6b2:	b29a      	uxth	r2, r3
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	695b      	ldr	r3, [r3, #20]
 800a6be:	f003 0304 	and.w	r3, r3, #4
 800a6c2:	2b04      	cmp	r3, #4
 800a6c4:	d118      	bne.n	800a6f8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	691a      	ldr	r2, [r3, #16]
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d0:	b2d2      	uxtb	r2, r2
 800a6d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d8:	1c5a      	adds	r2, r3, #1
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6e2:	3b01      	subs	r3, #1
 800a6e4:	b29a      	uxth	r2, r3
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	3b01      	subs	r3, #1
 800a6f2:	b29a      	uxth	r2, r3
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	f47f aec2 	bne.w	800a486 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2220      	movs	r2, #32
 800a706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2200      	movs	r2, #0
 800a70e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2200      	movs	r2, #0
 800a716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a71a:	2300      	movs	r3, #0
 800a71c:	e000      	b.n	800a720 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a71e:	2302      	movs	r3, #2
  }
}
 800a720:	4618      	mov	r0, r3
 800a722:	3728      	adds	r7, #40	; 0x28
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}
 800a728:	00010004 	.word	0x00010004

0800a72c <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b083      	sub	sp, #12
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a73a:	b2db      	uxtb	r3, r3
 800a73c:	2b20      	cmp	r3, #32
 800a73e:	d124      	bne.n	800a78a <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2228      	movs	r2, #40	; 0x28
 800a744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f003 0301 	and.w	r3, r3, #1
 800a752:	2b01      	cmp	r3, #1
 800a754:	d007      	beq.n	800a766 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f042 0201 	orr.w	r2, r2, #1
 800a764:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a774:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	685a      	ldr	r2, [r3, #4]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800a784:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800a786:	2300      	movs	r3, #0
 800a788:	e000      	b.n	800a78c <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800a78a:	2302      	movs	r3, #2
  }
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	370c      	adds	r7, #12
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b088      	sub	sp, #32
 800a79c:	af02      	add	r7, sp, #8
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	4608      	mov	r0, r1
 800a7a2:	4611      	mov	r1, r2
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	817b      	strh	r3, [r7, #10]
 800a7aa:	460b      	mov	r3, r1
 800a7ac:	813b      	strh	r3, [r7, #8]
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a7c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c4:	9300      	str	r3, [sp, #0]
 800a7c6:	6a3b      	ldr	r3, [r7, #32]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a7ce:	68f8      	ldr	r0, [r7, #12]
 800a7d0:	f000 f960 	bl	800aa94 <I2C_WaitOnFlagUntilTimeout>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d00d      	beq.n	800a7f6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7e8:	d103      	bne.n	800a7f2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a7f2:	2303      	movs	r3, #3
 800a7f4:	e05f      	b.n	800a8b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a7f6:	897b      	ldrh	r3, [r7, #10]
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a804:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a808:	6a3a      	ldr	r2, [r7, #32]
 800a80a:	492d      	ldr	r1, [pc, #180]	; (800a8c0 <I2C_RequestMemoryWrite+0x128>)
 800a80c:	68f8      	ldr	r0, [r7, #12]
 800a80e:	f000 f998 	bl	800ab42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a812:	4603      	mov	r3, r0
 800a814:	2b00      	cmp	r3, #0
 800a816:	d001      	beq.n	800a81c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a818:	2301      	movs	r3, #1
 800a81a:	e04c      	b.n	800a8b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a81c:	2300      	movs	r3, #0
 800a81e:	617b      	str	r3, [r7, #20]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	695b      	ldr	r3, [r3, #20]
 800a826:	617b      	str	r3, [r7, #20]
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	699b      	ldr	r3, [r3, #24]
 800a82e:	617b      	str	r3, [r7, #20]
 800a830:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a834:	6a39      	ldr	r1, [r7, #32]
 800a836:	68f8      	ldr	r0, [r7, #12]
 800a838:	f000 fa02 	bl	800ac40 <I2C_WaitOnTXEFlagUntilTimeout>
 800a83c:	4603      	mov	r3, r0
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d00d      	beq.n	800a85e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a846:	2b04      	cmp	r3, #4
 800a848:	d107      	bne.n	800a85a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	681a      	ldr	r2, [r3, #0]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a858:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	e02b      	b.n	800a8b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a85e:	88fb      	ldrh	r3, [r7, #6]
 800a860:	2b01      	cmp	r3, #1
 800a862:	d105      	bne.n	800a870 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a864:	893b      	ldrh	r3, [r7, #8]
 800a866:	b2da      	uxtb	r2, r3
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	611a      	str	r2, [r3, #16]
 800a86e:	e021      	b.n	800a8b4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a870:	893b      	ldrh	r3, [r7, #8]
 800a872:	0a1b      	lsrs	r3, r3, #8
 800a874:	b29b      	uxth	r3, r3
 800a876:	b2da      	uxtb	r2, r3
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a87e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a880:	6a39      	ldr	r1, [r7, #32]
 800a882:	68f8      	ldr	r0, [r7, #12]
 800a884:	f000 f9dc 	bl	800ac40 <I2C_WaitOnTXEFlagUntilTimeout>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d00d      	beq.n	800a8aa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a892:	2b04      	cmp	r3, #4
 800a894:	d107      	bne.n	800a8a6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e005      	b.n	800a8b6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a8aa:	893b      	ldrh	r3, [r7, #8]
 800a8ac:	b2da      	uxtb	r2, r3
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a8b4:	2300      	movs	r3, #0
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3718      	adds	r7, #24
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	00010002 	.word	0x00010002

0800a8c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b088      	sub	sp, #32
 800a8c8:	af02      	add	r7, sp, #8
 800a8ca:	60f8      	str	r0, [r7, #12]
 800a8cc:	4608      	mov	r0, r1
 800a8ce:	4611      	mov	r1, r2
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	817b      	strh	r3, [r7, #10]
 800a8d6:	460b      	mov	r3, r1
 800a8d8:	813b      	strh	r3, [r7, #8]
 800a8da:	4613      	mov	r3, r2
 800a8dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	681a      	ldr	r2, [r3, #0]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a8ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	681a      	ldr	r2, [r3, #0]
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a900:	9300      	str	r3, [sp, #0]
 800a902:	6a3b      	ldr	r3, [r7, #32]
 800a904:	2200      	movs	r2, #0
 800a906:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a90a:	68f8      	ldr	r0, [r7, #12]
 800a90c:	f000 f8c2 	bl	800aa94 <I2C_WaitOnFlagUntilTimeout>
 800a910:	4603      	mov	r3, r0
 800a912:	2b00      	cmp	r3, #0
 800a914:	d00d      	beq.n	800a932 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a920:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a924:	d103      	bne.n	800a92e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a92c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a92e:	2303      	movs	r3, #3
 800a930:	e0aa      	b.n	800aa88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a932:	897b      	ldrh	r3, [r7, #10]
 800a934:	b2db      	uxtb	r3, r3
 800a936:	461a      	mov	r2, r3
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a940:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a944:	6a3a      	ldr	r2, [r7, #32]
 800a946:	4952      	ldr	r1, [pc, #328]	; (800aa90 <I2C_RequestMemoryRead+0x1cc>)
 800a948:	68f8      	ldr	r0, [r7, #12]
 800a94a:	f000 f8fa 	bl	800ab42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a94e:	4603      	mov	r3, r0
 800a950:	2b00      	cmp	r3, #0
 800a952:	d001      	beq.n	800a958 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a954:	2301      	movs	r3, #1
 800a956:	e097      	b.n	800aa88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a958:	2300      	movs	r3, #0
 800a95a:	617b      	str	r3, [r7, #20]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	695b      	ldr	r3, [r3, #20]
 800a962:	617b      	str	r3, [r7, #20]
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	699b      	ldr	r3, [r3, #24]
 800a96a:	617b      	str	r3, [r7, #20]
 800a96c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a96e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a970:	6a39      	ldr	r1, [r7, #32]
 800a972:	68f8      	ldr	r0, [r7, #12]
 800a974:	f000 f964 	bl	800ac40 <I2C_WaitOnTXEFlagUntilTimeout>
 800a978:	4603      	mov	r3, r0
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d00d      	beq.n	800a99a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a982:	2b04      	cmp	r3, #4
 800a984:	d107      	bne.n	800a996 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a994:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a996:	2301      	movs	r3, #1
 800a998:	e076      	b.n	800aa88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a99a:	88fb      	ldrh	r3, [r7, #6]
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d105      	bne.n	800a9ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a9a0:	893b      	ldrh	r3, [r7, #8]
 800a9a2:	b2da      	uxtb	r2, r3
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	611a      	str	r2, [r3, #16]
 800a9aa:	e021      	b.n	800a9f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a9ac:	893b      	ldrh	r3, [r7, #8]
 800a9ae:	0a1b      	lsrs	r3, r3, #8
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	b2da      	uxtb	r2, r3
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a9ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9bc:	6a39      	ldr	r1, [r7, #32]
 800a9be:	68f8      	ldr	r0, [r7, #12]
 800a9c0:	f000 f93e 	bl	800ac40 <I2C_WaitOnTXEFlagUntilTimeout>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d00d      	beq.n	800a9e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ce:	2b04      	cmp	r3, #4
 800a9d0:	d107      	bne.n	800a9e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	681a      	ldr	r2, [r3, #0]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	e050      	b.n	800aa88 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a9e6:	893b      	ldrh	r3, [r7, #8]
 800a9e8:	b2da      	uxtb	r2, r3
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a9f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9f2:	6a39      	ldr	r1, [r7, #32]
 800a9f4:	68f8      	ldr	r0, [r7, #12]
 800a9f6:	f000 f923 	bl	800ac40 <I2C_WaitOnTXEFlagUntilTimeout>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d00d      	beq.n	800aa1c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa04:	2b04      	cmp	r3, #4
 800aa06:	d107      	bne.n	800aa18 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa16:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	e035      	b.n	800aa88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa2a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aa2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2e:	9300      	str	r3, [sp, #0]
 800aa30:	6a3b      	ldr	r3, [r7, #32]
 800aa32:	2200      	movs	r2, #0
 800aa34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800aa38:	68f8      	ldr	r0, [r7, #12]
 800aa3a:	f000 f82b 	bl	800aa94 <I2C_WaitOnFlagUntilTimeout>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d00d      	beq.n	800aa60 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa52:	d103      	bne.n	800aa5c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800aa5c:	2303      	movs	r3, #3
 800aa5e:	e013      	b.n	800aa88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800aa60:	897b      	ldrh	r3, [r7, #10]
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	f043 0301 	orr.w	r3, r3, #1
 800aa68:	b2da      	uxtb	r2, r3
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aa70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa72:	6a3a      	ldr	r2, [r7, #32]
 800aa74:	4906      	ldr	r1, [pc, #24]	; (800aa90 <I2C_RequestMemoryRead+0x1cc>)
 800aa76:	68f8      	ldr	r0, [r7, #12]
 800aa78:	f000 f863 	bl	800ab42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d001      	beq.n	800aa86 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800aa82:	2301      	movs	r3, #1
 800aa84:	e000      	b.n	800aa88 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800aa86:	2300      	movs	r3, #0
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3718      	adds	r7, #24
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}
 800aa90:	00010002 	.word	0x00010002

0800aa94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	60b9      	str	r1, [r7, #8]
 800aa9e:	603b      	str	r3, [r7, #0]
 800aaa0:	4613      	mov	r3, r2
 800aaa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aaa4:	e025      	b.n	800aaf2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaac:	d021      	beq.n	800aaf2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aaae:	f7fe fc2d 	bl	800930c <HAL_GetTick>
 800aab2:	4602      	mov	r2, r0
 800aab4:	69bb      	ldr	r3, [r7, #24]
 800aab6:	1ad3      	subs	r3, r2, r3
 800aab8:	683a      	ldr	r2, [r7, #0]
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d302      	bcc.n	800aac4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d116      	bne.n	800aaf2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2200      	movs	r2, #0
 800aac8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2220      	movs	r2, #32
 800aace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2200      	movs	r2, #0
 800aad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aade:	f043 0220 	orr.w	r2, r3, #32
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2200      	movs	r2, #0
 800aaea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	e023      	b.n	800ab3a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	0c1b      	lsrs	r3, r3, #16
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d10d      	bne.n	800ab18 <I2C_WaitOnFlagUntilTimeout+0x84>
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	695b      	ldr	r3, [r3, #20]
 800ab02:	43da      	mvns	r2, r3
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	4013      	ands	r3, r2
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	bf0c      	ite	eq
 800ab0e:	2301      	moveq	r3, #1
 800ab10:	2300      	movne	r3, #0
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	461a      	mov	r2, r3
 800ab16:	e00c      	b.n	800ab32 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	699b      	ldr	r3, [r3, #24]
 800ab1e:	43da      	mvns	r2, r3
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	4013      	ands	r3, r2
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	bf0c      	ite	eq
 800ab2a:	2301      	moveq	r3, #1
 800ab2c:	2300      	movne	r3, #0
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	461a      	mov	r2, r3
 800ab32:	79fb      	ldrb	r3, [r7, #7]
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d0b6      	beq.n	800aaa6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ab38:	2300      	movs	r3, #0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3710      	adds	r7, #16
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b084      	sub	sp, #16
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	60f8      	str	r0, [r7, #12]
 800ab4a:	60b9      	str	r1, [r7, #8]
 800ab4c:	607a      	str	r2, [r7, #4]
 800ab4e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ab50:	e051      	b.n	800abf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	695b      	ldr	r3, [r3, #20]
 800ab58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab60:	d123      	bne.n	800abaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	681a      	ldr	r2, [r3, #0]
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab70:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ab7a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2220      	movs	r2, #32
 800ab86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab96:	f043 0204 	orr.w	r2, r3, #4
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	2200      	movs	r2, #0
 800aba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800aba6:	2301      	movs	r3, #1
 800aba8:	e046      	b.n	800ac38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abb0:	d021      	beq.n	800abf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abb2:	f7fe fbab 	bl	800930c <HAL_GetTick>
 800abb6:	4602      	mov	r2, r0
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	1ad3      	subs	r3, r2, r3
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d302      	bcc.n	800abc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d116      	bne.n	800abf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2200      	movs	r2, #0
 800abcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2220      	movs	r2, #32
 800abd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2200      	movs	r2, #0
 800abda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe2:	f043 0220 	orr.w	r2, r3, #32
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2200      	movs	r2, #0
 800abee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800abf2:	2301      	movs	r3, #1
 800abf4:	e020      	b.n	800ac38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	0c1b      	lsrs	r3, r3, #16
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d10c      	bne.n	800ac1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	695b      	ldr	r3, [r3, #20]
 800ac06:	43da      	mvns	r2, r3
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	4013      	ands	r3, r2
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	bf14      	ite	ne
 800ac12:	2301      	movne	r3, #1
 800ac14:	2300      	moveq	r3, #0
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	e00b      	b.n	800ac32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	699b      	ldr	r3, [r3, #24]
 800ac20:	43da      	mvns	r2, r3
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	4013      	ands	r3, r2
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	bf14      	ite	ne
 800ac2c:	2301      	movne	r3, #1
 800ac2e:	2300      	moveq	r3, #0
 800ac30:	b2db      	uxtb	r3, r3
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d18d      	bne.n	800ab52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800ac36:	2300      	movs	r3, #0
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3710      	adds	r7, #16
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ac4c:	e02d      	b.n	800acaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ac4e:	68f8      	ldr	r0, [r7, #12]
 800ac50:	f000 f8ce 	bl	800adf0 <I2C_IsAcknowledgeFailed>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d001      	beq.n	800ac5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	e02d      	b.n	800acba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac64:	d021      	beq.n	800acaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac66:	f7fe fb51 	bl	800930c <HAL_GetTick>
 800ac6a:	4602      	mov	r2, r0
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	1ad3      	subs	r3, r2, r3
 800ac70:	68ba      	ldr	r2, [r7, #8]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d302      	bcc.n	800ac7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d116      	bne.n	800acaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2220      	movs	r2, #32
 800ac86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac96:	f043 0220 	orr.w	r2, r3, #32
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2200      	movs	r2, #0
 800aca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800aca6:	2301      	movs	r3, #1
 800aca8:	e007      	b.n	800acba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	695b      	ldr	r3, [r3, #20]
 800acb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acb4:	2b80      	cmp	r3, #128	; 0x80
 800acb6:	d1ca      	bne.n	800ac4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800acb8:	2300      	movs	r3, #0
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3710      	adds	r7, #16
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}

0800acc2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800acc2:	b580      	push	{r7, lr}
 800acc4:	b084      	sub	sp, #16
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	60f8      	str	r0, [r7, #12]
 800acca:	60b9      	str	r1, [r7, #8]
 800accc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800acce:	e02d      	b.n	800ad2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800acd0:	68f8      	ldr	r0, [r7, #12]
 800acd2:	f000 f88d 	bl	800adf0 <I2C_IsAcknowledgeFailed>
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d001      	beq.n	800ace0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800acdc:	2301      	movs	r3, #1
 800acde:	e02d      	b.n	800ad3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ace6:	d021      	beq.n	800ad2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ace8:	f7fe fb10 	bl	800930c <HAL_GetTick>
 800acec:	4602      	mov	r2, r0
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	1ad3      	subs	r3, r2, r3
 800acf2:	68ba      	ldr	r2, [r7, #8]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d302      	bcc.n	800acfe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d116      	bne.n	800ad2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2200      	movs	r2, #0
 800ad02:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2220      	movs	r2, #32
 800ad08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad18:	f043 0220 	orr.w	r2, r3, #32
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2200      	movs	r2, #0
 800ad24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	e007      	b.n	800ad3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	695b      	ldr	r3, [r3, #20]
 800ad32:	f003 0304 	and.w	r3, r3, #4
 800ad36:	2b04      	cmp	r3, #4
 800ad38:	d1ca      	bne.n	800acd0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ad3a:	2300      	movs	r3, #0
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3710      	adds	r7, #16
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b084      	sub	sp, #16
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	60f8      	str	r0, [r7, #12]
 800ad4c:	60b9      	str	r1, [r7, #8]
 800ad4e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ad50:	e042      	b.n	800add8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	695b      	ldr	r3, [r3, #20]
 800ad58:	f003 0310 	and.w	r3, r3, #16
 800ad5c:	2b10      	cmp	r3, #16
 800ad5e:	d119      	bne.n	800ad94 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f06f 0210 	mvn.w	r2, #16
 800ad68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	2220      	movs	r2, #32
 800ad74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ad90:	2301      	movs	r3, #1
 800ad92:	e029      	b.n	800ade8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad94:	f7fe faba 	bl	800930c <HAL_GetTick>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	1ad3      	subs	r3, r2, r3
 800ad9e:	68ba      	ldr	r2, [r7, #8]
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d302      	bcc.n	800adaa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d116      	bne.n	800add8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2200      	movs	r2, #0
 800adae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2220      	movs	r2, #32
 800adb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2200      	movs	r2, #0
 800adbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc4:	f043 0220 	orr.w	r2, r3, #32
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2200      	movs	r2, #0
 800add0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800add4:	2301      	movs	r3, #1
 800add6:	e007      	b.n	800ade8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	695b      	ldr	r3, [r3, #20]
 800adde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ade2:	2b40      	cmp	r3, #64	; 0x40
 800ade4:	d1b5      	bne.n	800ad52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ade6:	2300      	movs	r3, #0
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3710      	adds	r7, #16
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b083      	sub	sp, #12
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	695b      	ldr	r3, [r3, #20]
 800adfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae06:	d11b      	bne.n	800ae40 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ae10:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2200      	movs	r2, #0
 800ae16:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2220      	movs	r2, #32
 800ae1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae2c:	f043 0204 	orr.w	r2, r3, #4
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2200      	movs	r2, #0
 800ae38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	e000      	b.n	800ae42 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ae40:	2300      	movs	r3, #0
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	370c      	adds	r7, #12
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr

0800ae4e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ae4e:	b480      	push	{r7}
 800ae50:	b083      	sub	sp, #12
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	6078      	str	r0, [r7, #4]
 800ae56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae5e:	b2db      	uxtb	r3, r3
 800ae60:	2b20      	cmp	r3, #32
 800ae62:	d129      	bne.n	800aeb8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2224      	movs	r2, #36	; 0x24
 800ae68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f022 0201 	bic.w	r2, r2, #1
 800ae7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f022 0210 	bic.w	r2, r2, #16
 800ae8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	683a      	ldr	r2, [r7, #0]
 800ae98:	430a      	orrs	r2, r1
 800ae9a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f042 0201 	orr.w	r2, r2, #1
 800aeaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2220      	movs	r2, #32
 800aeb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	e000      	b.n	800aeba <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800aeb8:	2302      	movs	r3, #2
  }
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	370c      	adds	r7, #12
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr

0800aec6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800aec6:	b480      	push	{r7}
 800aec8:	b085      	sub	sp, #20
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
 800aece:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800aed0:	2300      	movs	r3, #0
 800aed2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aeda:	b2db      	uxtb	r3, r3
 800aedc:	2b20      	cmp	r3, #32
 800aede:	d12a      	bne.n	800af36 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2224      	movs	r2, #36	; 0x24
 800aee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	681a      	ldr	r2, [r3, #0]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f022 0201 	bic.w	r2, r2, #1
 800aef6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aefe:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800af00:	89fb      	ldrh	r3, [r7, #14]
 800af02:	f023 030f 	bic.w	r3, r3, #15
 800af06:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	b29a      	uxth	r2, r3
 800af0c:	89fb      	ldrh	r3, [r7, #14]
 800af0e:	4313      	orrs	r3, r2
 800af10:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	89fa      	ldrh	r2, [r7, #14]
 800af18:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f042 0201 	orr.w	r2, r2, #1
 800af28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2220      	movs	r2, #32
 800af2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800af32:	2300      	movs	r3, #0
 800af34:	e000      	b.n	800af38 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800af36:	2302      	movs	r3, #2
  }
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3714      	adds	r7, #20
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr

0800af44 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 800af4c:	4b05      	ldr	r3, [pc, #20]	; (800af64 <HAL_PWR_EnableWakeUpPin+0x20>)
 800af4e:	685a      	ldr	r2, [r3, #4]
 800af50:	4904      	ldr	r1, [pc, #16]	; (800af64 <HAL_PWR_EnableWakeUpPin+0x20>)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	4313      	orrs	r3, r2
 800af56:	604b      	str	r3, [r1, #4]
}
 800af58:	bf00      	nop
 800af5a:	370c      	adds	r7, #12
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr
 800af64:	40007000 	.word	0x40007000

0800af68 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800af68:	b480      	push	{r7}
 800af6a:	b083      	sub	sp, #12
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 800af70:	4b06      	ldr	r3, [pc, #24]	; (800af8c <HAL_PWR_DisableWakeUpPin+0x24>)
 800af72:	685a      	ldr	r2, [r3, #4]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	43db      	mvns	r3, r3
 800af78:	4904      	ldr	r1, [pc, #16]	; (800af8c <HAL_PWR_DisableWakeUpPin+0x24>)
 800af7a:	4013      	ands	r3, r2
 800af7c:	604b      	str	r3, [r1, #4]
}
 800af7e:	bf00      	nop
 800af80:	370c      	adds	r7, #12
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr
 800af8a:	bf00      	nop
 800af8c:	40007000 	.word	0x40007000

0800af90 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800af90:	b480      	push	{r7}
 800af92:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800af94:	4b08      	ldr	r3, [pc, #32]	; (800afb8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4a07      	ldr	r2, [pc, #28]	; (800afb8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800af9a:	f043 0302 	orr.w	r3, r3, #2
 800af9e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800afa0:	4b06      	ldr	r3, [pc, #24]	; (800afbc <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800afa2:	691b      	ldr	r3, [r3, #16]
 800afa4:	4a05      	ldr	r2, [pc, #20]	; (800afbc <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800afa6:	f043 0304 	orr.w	r3, r3, #4
 800afaa:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800afac:	bf30      	wfi
}
 800afae:	bf00      	nop
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr
 800afb8:	40007000 	.word	0x40007000
 800afbc:	e000ed00 	.word	0xe000ed00

0800afc0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b082      	sub	sp, #8
 800afc4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800afc6:	2300      	movs	r3, #0
 800afc8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800afca:	2300      	movs	r3, #0
 800afcc:	603b      	str	r3, [r7, #0]
 800afce:	4b20      	ldr	r3, [pc, #128]	; (800b050 <HAL_PWREx_EnableOverDrive+0x90>)
 800afd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afd2:	4a1f      	ldr	r2, [pc, #124]	; (800b050 <HAL_PWREx_EnableOverDrive+0x90>)
 800afd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800afd8:	6413      	str	r3, [r2, #64]	; 0x40
 800afda:	4b1d      	ldr	r3, [pc, #116]	; (800b050 <HAL_PWREx_EnableOverDrive+0x90>)
 800afdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afe2:	603b      	str	r3, [r7, #0]
 800afe4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800afe6:	4b1b      	ldr	r3, [pc, #108]	; (800b054 <HAL_PWREx_EnableOverDrive+0x94>)
 800afe8:	2201      	movs	r2, #1
 800afea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800afec:	f7fe f98e 	bl	800930c <HAL_GetTick>
 800aff0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800aff2:	e009      	b.n	800b008 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800aff4:	f7fe f98a 	bl	800930c <HAL_GetTick>
 800aff8:	4602      	mov	r2, r0
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	1ad3      	subs	r3, r2, r3
 800affe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b002:	d901      	bls.n	800b008 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800b004:	2303      	movs	r3, #3
 800b006:	e01f      	b.n	800b048 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b008:	4b13      	ldr	r3, [pc, #76]	; (800b058 <HAL_PWREx_EnableOverDrive+0x98>)
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b014:	d1ee      	bne.n	800aff4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b016:	4b11      	ldr	r3, [pc, #68]	; (800b05c <HAL_PWREx_EnableOverDrive+0x9c>)
 800b018:	2201      	movs	r2, #1
 800b01a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b01c:	f7fe f976 	bl	800930c <HAL_GetTick>
 800b020:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b022:	e009      	b.n	800b038 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b024:	f7fe f972 	bl	800930c <HAL_GetTick>
 800b028:	4602      	mov	r2, r0
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	1ad3      	subs	r3, r2, r3
 800b02e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b032:	d901      	bls.n	800b038 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800b034:	2303      	movs	r3, #3
 800b036:	e007      	b.n	800b048 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b038:	4b07      	ldr	r3, [pc, #28]	; (800b058 <HAL_PWREx_EnableOverDrive+0x98>)
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b040:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b044:	d1ee      	bne.n	800b024 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800b046:	2300      	movs	r3, #0
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3708      	adds	r7, #8
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}
 800b050:	40023800 	.word	0x40023800
 800b054:	420e0040 	.word	0x420e0040
 800b058:	40007000 	.word	0x40007000
 800b05c:	420e0044 	.word	0x420e0044

0800b060 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b086      	sub	sp, #24
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d101      	bne.n	800b072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b06e:	2301      	movs	r3, #1
 800b070:	e264      	b.n	800b53c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f003 0301 	and.w	r3, r3, #1
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d075      	beq.n	800b16a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b07e:	4ba3      	ldr	r3, [pc, #652]	; (800b30c <HAL_RCC_OscConfig+0x2ac>)
 800b080:	689b      	ldr	r3, [r3, #8]
 800b082:	f003 030c 	and.w	r3, r3, #12
 800b086:	2b04      	cmp	r3, #4
 800b088:	d00c      	beq.n	800b0a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b08a:	4ba0      	ldr	r3, [pc, #640]	; (800b30c <HAL_RCC_OscConfig+0x2ac>)
 800b08c:	689b      	ldr	r3, [r3, #8]
 800b08e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b092:	2b08      	cmp	r3, #8
 800b094:	d112      	bne.n	800b0bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b096:	4b9d      	ldr	r3, [pc, #628]	; (800b30c <HAL_RCC_OscConfig+0x2ac>)
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b09e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b0a2:	d10b      	bne.n	800b0bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b0a4:	4b99      	ldr	r3, [pc, #612]	; (800b30c <HAL_RCC_OscConfig+0x2ac>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d05b      	beq.n	800b168 <HAL_RCC_OscConfig+0x108>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d157      	bne.n	800b168 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	e23f      	b.n	800b53c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0c4:	d106      	bne.n	800b0d4 <HAL_RCC_OscConfig+0x74>
 800b0c6:	4b91      	ldr	r3, [pc, #580]	; (800b30c <HAL_RCC_OscConfig+0x2ac>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4a90      	ldr	r2, [pc, #576]	; (800b30c <HAL_RCC_OscConfig+0x2ac>)
 800b0cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b0d0:	6013      	str	r3, [r2, #0]
 800b0d2:	e01d      	b.n	800b110 <HAL_RCC_OscConfig+0xb0>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b0dc:	d10c      	bne.n	800b0f8 <HAL_RCC_OscConfig+0x98>
 800b0de:	4b8b      	ldr	r3, [pc, #556]	; (800b30c <HAL_RCC_OscConfig+0x2ac>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4a8a      	ldr	r2, [pc, #552]	; (800b30c <HAL_RCC_OscConfig+0x2ac>)
 800b0e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b0e8:	6013      	str	r3, [r2, #0]
 800b0ea:	4b88      	ldr	r3, [pc, #544]	; (800b30c <HAL_RCC_OscConfig+0x2ac>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4a87      	ldr	r2, [pc, #540]	; (800b30c <HAL_RCC_OscConfig+0x2ac>)
 800b0f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b0f4:	6013      	str	r3, [r2, #0]
 800b0f6:	e00b      	b.n	800b110 <HAL_RCC_OscConfig+0xb0>
 800b0f8:	4b84      	ldr	r3, [pc, #528]	; (800b30c <HAL_RCC_OscConfig+0x2ac>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	4a83      	ldr	r2, [pc, #524]	; (800b30c <HAL_RCC_OscConfig+0x2ac>)
 800b0fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b102:	6013      	str	r3, [r2, #0]
 800b104:	4b81      	ldr	r3, [pc, #516]	; (800b30c <HAL_RCC_OscConfig+0x2ac>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4a80      	ldr	r2, [pc, #512]	; (800b30c <HAL_RCC_OscConfig+0x2ac>)
 800b10a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b10e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d013      	beq.n	800b140 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b118:	f7fe f8f8 	bl	800930c <HAL_GetTick>
 800b11c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b11e:	e008      	b.n	800b132 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b120:	f7fe f8f4 	bl	800930c <HAL_GetTick>
 800b124:	4602      	mov	r2, r0
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	1ad3      	subs	r3, r2, r3
 800b12a:	2b64      	cmp	r3, #100	; 0x64
 800b12c:	d901      	bls.n	800b132 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b12e:	2303      	movs	r3, #3
 800b130:	e204      	b.n	800b53c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b132:	4b76      	ldr	r3, [pc, #472]	; (800b30c <HAL_RCC_OscConfig+0x2ac>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d0f0      	beq.n	800b120 <HAL_RCC_OscConfig+0xc0>
 800b13e:	e014      	b.n	800b16a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b140:	f7fe f8e4 	bl	800930c <HAL_GetTick>
 800b144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b146:	e008      	b.n	800b15a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b148:	f7fe f8e0 	bl	800930c <HAL_GetTick>
 800b14c:	4602      	mov	r2, r0
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	1ad3      	subs	r3, r2, r3
 800b152:	2b64      	cmp	r3, #100	; 0x64
 800b154:	d901      	bls.n	800b15a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b156:	2303      	movs	r3, #3
 800b158:	e1f0      	b.n	800b53c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b15a:	4b6c      	ldr	r3, [pc, #432]	; (800b30c <HAL_RCC_OscConfig+0x2ac>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b162:	2b00      	cmp	r3, #0
 800b164:	d1f0      	bne.n	800b148 <HAL_RCC_OscConfig+0xe8>
 800b166:	e000      	b.n	800b16a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f003 0302 	and.w	r3, r3, #2
 800b172:	2b00      	cmp	r3, #0
 800b174:	d063      	beq.n	800b23e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b176:	4b65      	ldr	r3, [pc, #404]	; (800b30c <HAL_RCC_OscConfig+0x2ac>)
 800b178:	689b      	ldr	r3, [r3, #8]
 800b17a:	f003 030c 	and.w	r3, r3, #12
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d00b      	beq.n	800b19a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b182:	4b62      	ldr	r3, [pc, #392]	; (800b30c <HAL_RCC_OscConfig+0x2ac>)
 800b184:	689b      	ldr	r3, [r3, #8]
 800b186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b18a:	2b08      	cmp	r3, #8
 800b18c:	d11c      	bne.n	800b1c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b18e:	4b5f      	ldr	r3, [pc, #380]	; (800b30c <HAL_RCC_OscConfig+0x2ac>)
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b196:	2b00      	cmp	r3, #0
 800b198:	d116      	bne.n	800b1c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b19a:	4b5c      	ldr	r3, [pc, #368]	; (800b30c <HAL_RCC_OscConfig+0x2ac>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f003 0302 	and.w	r3, r3, #2
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d005      	beq.n	800b1b2 <HAL_RCC_OscConfig+0x152>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	68db      	ldr	r3, [r3, #12]
 800b1aa:	2b01      	cmp	r3, #1
 800b1ac:	d001      	beq.n	800b1b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	e1c4      	b.n	800b53c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b1b2:	4b56      	ldr	r3, [pc, #344]	; (800b30c <HAL_RCC_OscConfig+0x2ac>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	691b      	ldr	r3, [r3, #16]
 800b1be:	00db      	lsls	r3, r3, #3
 800b1c0:	4952      	ldr	r1, [pc, #328]	; (800b30c <HAL_RCC_OscConfig+0x2ac>)
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b1c6:	e03a      	b.n	800b23e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d020      	beq.n	800b212 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b1d0:	4b4f      	ldr	r3, [pc, #316]	; (800b310 <HAL_RCC_OscConfig+0x2b0>)
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1d6:	f7fe f899 	bl	800930c <HAL_GetTick>
 800b1da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b1dc:	e008      	b.n	800b1f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b1de:	f7fe f895 	bl	800930c <HAL_GetTick>
 800b1e2:	4602      	mov	r2, r0
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	1ad3      	subs	r3, r2, r3
 800b1e8:	2b02      	cmp	r3, #2
 800b1ea:	d901      	bls.n	800b1f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b1ec:	2303      	movs	r3, #3
 800b1ee:	e1a5      	b.n	800b53c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b1f0:	4b46      	ldr	r3, [pc, #280]	; (800b30c <HAL_RCC_OscConfig+0x2ac>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f003 0302 	and.w	r3, r3, #2
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d0f0      	beq.n	800b1de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b1fc:	4b43      	ldr	r3, [pc, #268]	; (800b30c <HAL_RCC_OscConfig+0x2ac>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	691b      	ldr	r3, [r3, #16]
 800b208:	00db      	lsls	r3, r3, #3
 800b20a:	4940      	ldr	r1, [pc, #256]	; (800b30c <HAL_RCC_OscConfig+0x2ac>)
 800b20c:	4313      	orrs	r3, r2
 800b20e:	600b      	str	r3, [r1, #0]
 800b210:	e015      	b.n	800b23e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b212:	4b3f      	ldr	r3, [pc, #252]	; (800b310 <HAL_RCC_OscConfig+0x2b0>)
 800b214:	2200      	movs	r2, #0
 800b216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b218:	f7fe f878 	bl	800930c <HAL_GetTick>
 800b21c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b21e:	e008      	b.n	800b232 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b220:	f7fe f874 	bl	800930c <HAL_GetTick>
 800b224:	4602      	mov	r2, r0
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	1ad3      	subs	r3, r2, r3
 800b22a:	2b02      	cmp	r3, #2
 800b22c:	d901      	bls.n	800b232 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b22e:	2303      	movs	r3, #3
 800b230:	e184      	b.n	800b53c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b232:	4b36      	ldr	r3, [pc, #216]	; (800b30c <HAL_RCC_OscConfig+0x2ac>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f003 0302 	and.w	r3, r3, #2
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d1f0      	bne.n	800b220 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f003 0308 	and.w	r3, r3, #8
 800b246:	2b00      	cmp	r3, #0
 800b248:	d030      	beq.n	800b2ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	695b      	ldr	r3, [r3, #20]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d016      	beq.n	800b280 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b252:	4b30      	ldr	r3, [pc, #192]	; (800b314 <HAL_RCC_OscConfig+0x2b4>)
 800b254:	2201      	movs	r2, #1
 800b256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b258:	f7fe f858 	bl	800930c <HAL_GetTick>
 800b25c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b25e:	e008      	b.n	800b272 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b260:	f7fe f854 	bl	800930c <HAL_GetTick>
 800b264:	4602      	mov	r2, r0
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	1ad3      	subs	r3, r2, r3
 800b26a:	2b02      	cmp	r3, #2
 800b26c:	d901      	bls.n	800b272 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b26e:	2303      	movs	r3, #3
 800b270:	e164      	b.n	800b53c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b272:	4b26      	ldr	r3, [pc, #152]	; (800b30c <HAL_RCC_OscConfig+0x2ac>)
 800b274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b276:	f003 0302 	and.w	r3, r3, #2
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d0f0      	beq.n	800b260 <HAL_RCC_OscConfig+0x200>
 800b27e:	e015      	b.n	800b2ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b280:	4b24      	ldr	r3, [pc, #144]	; (800b314 <HAL_RCC_OscConfig+0x2b4>)
 800b282:	2200      	movs	r2, #0
 800b284:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b286:	f7fe f841 	bl	800930c <HAL_GetTick>
 800b28a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b28c:	e008      	b.n	800b2a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b28e:	f7fe f83d 	bl	800930c <HAL_GetTick>
 800b292:	4602      	mov	r2, r0
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	1ad3      	subs	r3, r2, r3
 800b298:	2b02      	cmp	r3, #2
 800b29a:	d901      	bls.n	800b2a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b29c:	2303      	movs	r3, #3
 800b29e:	e14d      	b.n	800b53c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b2a0:	4b1a      	ldr	r3, [pc, #104]	; (800b30c <HAL_RCC_OscConfig+0x2ac>)
 800b2a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2a4:	f003 0302 	and.w	r3, r3, #2
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d1f0      	bne.n	800b28e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f003 0304 	and.w	r3, r3, #4
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	f000 80a0 	beq.w	800b3fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b2be:	4b13      	ldr	r3, [pc, #76]	; (800b30c <HAL_RCC_OscConfig+0x2ac>)
 800b2c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d10f      	bne.n	800b2ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	60bb      	str	r3, [r7, #8]
 800b2ce:	4b0f      	ldr	r3, [pc, #60]	; (800b30c <HAL_RCC_OscConfig+0x2ac>)
 800b2d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d2:	4a0e      	ldr	r2, [pc, #56]	; (800b30c <HAL_RCC_OscConfig+0x2ac>)
 800b2d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2d8:	6413      	str	r3, [r2, #64]	; 0x40
 800b2da:	4b0c      	ldr	r3, [pc, #48]	; (800b30c <HAL_RCC_OscConfig+0x2ac>)
 800b2dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b2e2:	60bb      	str	r3, [r7, #8]
 800b2e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b2ea:	4b0b      	ldr	r3, [pc, #44]	; (800b318 <HAL_RCC_OscConfig+0x2b8>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d121      	bne.n	800b33a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b2f6:	4b08      	ldr	r3, [pc, #32]	; (800b318 <HAL_RCC_OscConfig+0x2b8>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4a07      	ldr	r2, [pc, #28]	; (800b318 <HAL_RCC_OscConfig+0x2b8>)
 800b2fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b302:	f7fe f803 	bl	800930c <HAL_GetTick>
 800b306:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b308:	e011      	b.n	800b32e <HAL_RCC_OscConfig+0x2ce>
 800b30a:	bf00      	nop
 800b30c:	40023800 	.word	0x40023800
 800b310:	42470000 	.word	0x42470000
 800b314:	42470e80 	.word	0x42470e80
 800b318:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b31c:	f7fd fff6 	bl	800930c <HAL_GetTick>
 800b320:	4602      	mov	r2, r0
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	1ad3      	subs	r3, r2, r3
 800b326:	2b02      	cmp	r3, #2
 800b328:	d901      	bls.n	800b32e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800b32a:	2303      	movs	r3, #3
 800b32c:	e106      	b.n	800b53c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b32e:	4b85      	ldr	r3, [pc, #532]	; (800b544 <HAL_RCC_OscConfig+0x4e4>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b336:	2b00      	cmp	r3, #0
 800b338:	d0f0      	beq.n	800b31c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	689b      	ldr	r3, [r3, #8]
 800b33e:	2b01      	cmp	r3, #1
 800b340:	d106      	bne.n	800b350 <HAL_RCC_OscConfig+0x2f0>
 800b342:	4b81      	ldr	r3, [pc, #516]	; (800b548 <HAL_RCC_OscConfig+0x4e8>)
 800b344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b346:	4a80      	ldr	r2, [pc, #512]	; (800b548 <HAL_RCC_OscConfig+0x4e8>)
 800b348:	f043 0301 	orr.w	r3, r3, #1
 800b34c:	6713      	str	r3, [r2, #112]	; 0x70
 800b34e:	e01c      	b.n	800b38a <HAL_RCC_OscConfig+0x32a>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	689b      	ldr	r3, [r3, #8]
 800b354:	2b05      	cmp	r3, #5
 800b356:	d10c      	bne.n	800b372 <HAL_RCC_OscConfig+0x312>
 800b358:	4b7b      	ldr	r3, [pc, #492]	; (800b548 <HAL_RCC_OscConfig+0x4e8>)
 800b35a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b35c:	4a7a      	ldr	r2, [pc, #488]	; (800b548 <HAL_RCC_OscConfig+0x4e8>)
 800b35e:	f043 0304 	orr.w	r3, r3, #4
 800b362:	6713      	str	r3, [r2, #112]	; 0x70
 800b364:	4b78      	ldr	r3, [pc, #480]	; (800b548 <HAL_RCC_OscConfig+0x4e8>)
 800b366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b368:	4a77      	ldr	r2, [pc, #476]	; (800b548 <HAL_RCC_OscConfig+0x4e8>)
 800b36a:	f043 0301 	orr.w	r3, r3, #1
 800b36e:	6713      	str	r3, [r2, #112]	; 0x70
 800b370:	e00b      	b.n	800b38a <HAL_RCC_OscConfig+0x32a>
 800b372:	4b75      	ldr	r3, [pc, #468]	; (800b548 <HAL_RCC_OscConfig+0x4e8>)
 800b374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b376:	4a74      	ldr	r2, [pc, #464]	; (800b548 <HAL_RCC_OscConfig+0x4e8>)
 800b378:	f023 0301 	bic.w	r3, r3, #1
 800b37c:	6713      	str	r3, [r2, #112]	; 0x70
 800b37e:	4b72      	ldr	r3, [pc, #456]	; (800b548 <HAL_RCC_OscConfig+0x4e8>)
 800b380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b382:	4a71      	ldr	r2, [pc, #452]	; (800b548 <HAL_RCC_OscConfig+0x4e8>)
 800b384:	f023 0304 	bic.w	r3, r3, #4
 800b388:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	689b      	ldr	r3, [r3, #8]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d015      	beq.n	800b3be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b392:	f7fd ffbb 	bl	800930c <HAL_GetTick>
 800b396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b398:	e00a      	b.n	800b3b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b39a:	f7fd ffb7 	bl	800930c <HAL_GetTick>
 800b39e:	4602      	mov	r2, r0
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	1ad3      	subs	r3, r2, r3
 800b3a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d901      	bls.n	800b3b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800b3ac:	2303      	movs	r3, #3
 800b3ae:	e0c5      	b.n	800b53c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b3b0:	4b65      	ldr	r3, [pc, #404]	; (800b548 <HAL_RCC_OscConfig+0x4e8>)
 800b3b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3b4:	f003 0302 	and.w	r3, r3, #2
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d0ee      	beq.n	800b39a <HAL_RCC_OscConfig+0x33a>
 800b3bc:	e014      	b.n	800b3e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b3be:	f7fd ffa5 	bl	800930c <HAL_GetTick>
 800b3c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b3c4:	e00a      	b.n	800b3dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b3c6:	f7fd ffa1 	bl	800930c <HAL_GetTick>
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	1ad3      	subs	r3, r2, r3
 800b3d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d901      	bls.n	800b3dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800b3d8:	2303      	movs	r3, #3
 800b3da:	e0af      	b.n	800b53c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b3dc:	4b5a      	ldr	r3, [pc, #360]	; (800b548 <HAL_RCC_OscConfig+0x4e8>)
 800b3de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3e0:	f003 0302 	and.w	r3, r3, #2
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d1ee      	bne.n	800b3c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b3e8:	7dfb      	ldrb	r3, [r7, #23]
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	d105      	bne.n	800b3fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b3ee:	4b56      	ldr	r3, [pc, #344]	; (800b548 <HAL_RCC_OscConfig+0x4e8>)
 800b3f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3f2:	4a55      	ldr	r2, [pc, #340]	; (800b548 <HAL_RCC_OscConfig+0x4e8>)
 800b3f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b3f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	699b      	ldr	r3, [r3, #24]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	f000 809b 	beq.w	800b53a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b404:	4b50      	ldr	r3, [pc, #320]	; (800b548 <HAL_RCC_OscConfig+0x4e8>)
 800b406:	689b      	ldr	r3, [r3, #8]
 800b408:	f003 030c 	and.w	r3, r3, #12
 800b40c:	2b08      	cmp	r3, #8
 800b40e:	d05c      	beq.n	800b4ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	699b      	ldr	r3, [r3, #24]
 800b414:	2b02      	cmp	r3, #2
 800b416:	d141      	bne.n	800b49c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b418:	4b4c      	ldr	r3, [pc, #304]	; (800b54c <HAL_RCC_OscConfig+0x4ec>)
 800b41a:	2200      	movs	r2, #0
 800b41c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b41e:	f7fd ff75 	bl	800930c <HAL_GetTick>
 800b422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b424:	e008      	b.n	800b438 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b426:	f7fd ff71 	bl	800930c <HAL_GetTick>
 800b42a:	4602      	mov	r2, r0
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	1ad3      	subs	r3, r2, r3
 800b430:	2b02      	cmp	r3, #2
 800b432:	d901      	bls.n	800b438 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800b434:	2303      	movs	r3, #3
 800b436:	e081      	b.n	800b53c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b438:	4b43      	ldr	r3, [pc, #268]	; (800b548 <HAL_RCC_OscConfig+0x4e8>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b440:	2b00      	cmp	r3, #0
 800b442:	d1f0      	bne.n	800b426 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	69da      	ldr	r2, [r3, #28]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6a1b      	ldr	r3, [r3, #32]
 800b44c:	431a      	orrs	r2, r3
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b452:	019b      	lsls	r3, r3, #6
 800b454:	431a      	orrs	r2, r3
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b45a:	085b      	lsrs	r3, r3, #1
 800b45c:	3b01      	subs	r3, #1
 800b45e:	041b      	lsls	r3, r3, #16
 800b460:	431a      	orrs	r2, r3
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b466:	061b      	lsls	r3, r3, #24
 800b468:	4937      	ldr	r1, [pc, #220]	; (800b548 <HAL_RCC_OscConfig+0x4e8>)
 800b46a:	4313      	orrs	r3, r2
 800b46c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b46e:	4b37      	ldr	r3, [pc, #220]	; (800b54c <HAL_RCC_OscConfig+0x4ec>)
 800b470:	2201      	movs	r2, #1
 800b472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b474:	f7fd ff4a 	bl	800930c <HAL_GetTick>
 800b478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b47a:	e008      	b.n	800b48e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b47c:	f7fd ff46 	bl	800930c <HAL_GetTick>
 800b480:	4602      	mov	r2, r0
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	1ad3      	subs	r3, r2, r3
 800b486:	2b02      	cmp	r3, #2
 800b488:	d901      	bls.n	800b48e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800b48a:	2303      	movs	r3, #3
 800b48c:	e056      	b.n	800b53c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b48e:	4b2e      	ldr	r3, [pc, #184]	; (800b548 <HAL_RCC_OscConfig+0x4e8>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b496:	2b00      	cmp	r3, #0
 800b498:	d0f0      	beq.n	800b47c <HAL_RCC_OscConfig+0x41c>
 800b49a:	e04e      	b.n	800b53a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b49c:	4b2b      	ldr	r3, [pc, #172]	; (800b54c <HAL_RCC_OscConfig+0x4ec>)
 800b49e:	2200      	movs	r2, #0
 800b4a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b4a2:	f7fd ff33 	bl	800930c <HAL_GetTick>
 800b4a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b4a8:	e008      	b.n	800b4bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b4aa:	f7fd ff2f 	bl	800930c <HAL_GetTick>
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	1ad3      	subs	r3, r2, r3
 800b4b4:	2b02      	cmp	r3, #2
 800b4b6:	d901      	bls.n	800b4bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800b4b8:	2303      	movs	r3, #3
 800b4ba:	e03f      	b.n	800b53c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b4bc:	4b22      	ldr	r3, [pc, #136]	; (800b548 <HAL_RCC_OscConfig+0x4e8>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d1f0      	bne.n	800b4aa <HAL_RCC_OscConfig+0x44a>
 800b4c8:	e037      	b.n	800b53a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	699b      	ldr	r3, [r3, #24]
 800b4ce:	2b01      	cmp	r3, #1
 800b4d0:	d101      	bne.n	800b4d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	e032      	b.n	800b53c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b4d6:	4b1c      	ldr	r3, [pc, #112]	; (800b548 <HAL_RCC_OscConfig+0x4e8>)
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	699b      	ldr	r3, [r3, #24]
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d028      	beq.n	800b536 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d121      	bne.n	800b536 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d11a      	bne.n	800b536 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b506:	4013      	ands	r3, r2
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b50c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b50e:	4293      	cmp	r3, r2
 800b510:	d111      	bne.n	800b536 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b51c:	085b      	lsrs	r3, r3, #1
 800b51e:	3b01      	subs	r3, #1
 800b520:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b522:	429a      	cmp	r2, r3
 800b524:	d107      	bne.n	800b536 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b530:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b532:	429a      	cmp	r2, r3
 800b534:	d001      	beq.n	800b53a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800b536:	2301      	movs	r3, #1
 800b538:	e000      	b.n	800b53c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800b53a:	2300      	movs	r3, #0
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3718      	adds	r7, #24
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}
 800b544:	40007000 	.word	0x40007000
 800b548:	40023800 	.word	0x40023800
 800b54c:	42470060 	.word	0x42470060

0800b550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b084      	sub	sp, #16
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d101      	bne.n	800b564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b560:	2301      	movs	r3, #1
 800b562:	e0cc      	b.n	800b6fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b564:	4b68      	ldr	r3, [pc, #416]	; (800b708 <HAL_RCC_ClockConfig+0x1b8>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f003 030f 	and.w	r3, r3, #15
 800b56c:	683a      	ldr	r2, [r7, #0]
 800b56e:	429a      	cmp	r2, r3
 800b570:	d90c      	bls.n	800b58c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b572:	4b65      	ldr	r3, [pc, #404]	; (800b708 <HAL_RCC_ClockConfig+0x1b8>)
 800b574:	683a      	ldr	r2, [r7, #0]
 800b576:	b2d2      	uxtb	r2, r2
 800b578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b57a:	4b63      	ldr	r3, [pc, #396]	; (800b708 <HAL_RCC_ClockConfig+0x1b8>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f003 030f 	and.w	r3, r3, #15
 800b582:	683a      	ldr	r2, [r7, #0]
 800b584:	429a      	cmp	r2, r3
 800b586:	d001      	beq.n	800b58c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b588:	2301      	movs	r3, #1
 800b58a:	e0b8      	b.n	800b6fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f003 0302 	and.w	r3, r3, #2
 800b594:	2b00      	cmp	r3, #0
 800b596:	d020      	beq.n	800b5da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f003 0304 	and.w	r3, r3, #4
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d005      	beq.n	800b5b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b5a4:	4b59      	ldr	r3, [pc, #356]	; (800b70c <HAL_RCC_ClockConfig+0x1bc>)
 800b5a6:	689b      	ldr	r3, [r3, #8]
 800b5a8:	4a58      	ldr	r2, [pc, #352]	; (800b70c <HAL_RCC_ClockConfig+0x1bc>)
 800b5aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b5ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f003 0308 	and.w	r3, r3, #8
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d005      	beq.n	800b5c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b5bc:	4b53      	ldr	r3, [pc, #332]	; (800b70c <HAL_RCC_ClockConfig+0x1bc>)
 800b5be:	689b      	ldr	r3, [r3, #8]
 800b5c0:	4a52      	ldr	r2, [pc, #328]	; (800b70c <HAL_RCC_ClockConfig+0x1bc>)
 800b5c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b5c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b5c8:	4b50      	ldr	r3, [pc, #320]	; (800b70c <HAL_RCC_ClockConfig+0x1bc>)
 800b5ca:	689b      	ldr	r3, [r3, #8]
 800b5cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	689b      	ldr	r3, [r3, #8]
 800b5d4:	494d      	ldr	r1, [pc, #308]	; (800b70c <HAL_RCC_ClockConfig+0x1bc>)
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f003 0301 	and.w	r3, r3, #1
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d044      	beq.n	800b670 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	2b01      	cmp	r3, #1
 800b5ec:	d107      	bne.n	800b5fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b5ee:	4b47      	ldr	r3, [pc, #284]	; (800b70c <HAL_RCC_ClockConfig+0x1bc>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d119      	bne.n	800b62e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	e07f      	b.n	800b6fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	2b02      	cmp	r3, #2
 800b604:	d003      	beq.n	800b60e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b60a:	2b03      	cmp	r3, #3
 800b60c:	d107      	bne.n	800b61e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b60e:	4b3f      	ldr	r3, [pc, #252]	; (800b70c <HAL_RCC_ClockConfig+0x1bc>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b616:	2b00      	cmp	r3, #0
 800b618:	d109      	bne.n	800b62e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b61a:	2301      	movs	r3, #1
 800b61c:	e06f      	b.n	800b6fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b61e:	4b3b      	ldr	r3, [pc, #236]	; (800b70c <HAL_RCC_ClockConfig+0x1bc>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f003 0302 	and.w	r3, r3, #2
 800b626:	2b00      	cmp	r3, #0
 800b628:	d101      	bne.n	800b62e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b62a:	2301      	movs	r3, #1
 800b62c:	e067      	b.n	800b6fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b62e:	4b37      	ldr	r3, [pc, #220]	; (800b70c <HAL_RCC_ClockConfig+0x1bc>)
 800b630:	689b      	ldr	r3, [r3, #8]
 800b632:	f023 0203 	bic.w	r2, r3, #3
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	4934      	ldr	r1, [pc, #208]	; (800b70c <HAL_RCC_ClockConfig+0x1bc>)
 800b63c:	4313      	orrs	r3, r2
 800b63e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b640:	f7fd fe64 	bl	800930c <HAL_GetTick>
 800b644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b646:	e00a      	b.n	800b65e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b648:	f7fd fe60 	bl	800930c <HAL_GetTick>
 800b64c:	4602      	mov	r2, r0
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	1ad3      	subs	r3, r2, r3
 800b652:	f241 3288 	movw	r2, #5000	; 0x1388
 800b656:	4293      	cmp	r3, r2
 800b658:	d901      	bls.n	800b65e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b65a:	2303      	movs	r3, #3
 800b65c:	e04f      	b.n	800b6fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b65e:	4b2b      	ldr	r3, [pc, #172]	; (800b70c <HAL_RCC_ClockConfig+0x1bc>)
 800b660:	689b      	ldr	r3, [r3, #8]
 800b662:	f003 020c 	and.w	r2, r3, #12
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	009b      	lsls	r3, r3, #2
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d1eb      	bne.n	800b648 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b670:	4b25      	ldr	r3, [pc, #148]	; (800b708 <HAL_RCC_ClockConfig+0x1b8>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f003 030f 	and.w	r3, r3, #15
 800b678:	683a      	ldr	r2, [r7, #0]
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d20c      	bcs.n	800b698 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b67e:	4b22      	ldr	r3, [pc, #136]	; (800b708 <HAL_RCC_ClockConfig+0x1b8>)
 800b680:	683a      	ldr	r2, [r7, #0]
 800b682:	b2d2      	uxtb	r2, r2
 800b684:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b686:	4b20      	ldr	r3, [pc, #128]	; (800b708 <HAL_RCC_ClockConfig+0x1b8>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f003 030f 	and.w	r3, r3, #15
 800b68e:	683a      	ldr	r2, [r7, #0]
 800b690:	429a      	cmp	r2, r3
 800b692:	d001      	beq.n	800b698 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b694:	2301      	movs	r3, #1
 800b696:	e032      	b.n	800b6fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f003 0304 	and.w	r3, r3, #4
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d008      	beq.n	800b6b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b6a4:	4b19      	ldr	r3, [pc, #100]	; (800b70c <HAL_RCC_ClockConfig+0x1bc>)
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	68db      	ldr	r3, [r3, #12]
 800b6b0:	4916      	ldr	r1, [pc, #88]	; (800b70c <HAL_RCC_ClockConfig+0x1bc>)
 800b6b2:	4313      	orrs	r3, r2
 800b6b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f003 0308 	and.w	r3, r3, #8
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d009      	beq.n	800b6d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b6c2:	4b12      	ldr	r3, [pc, #72]	; (800b70c <HAL_RCC_ClockConfig+0x1bc>)
 800b6c4:	689b      	ldr	r3, [r3, #8]
 800b6c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	691b      	ldr	r3, [r3, #16]
 800b6ce:	00db      	lsls	r3, r3, #3
 800b6d0:	490e      	ldr	r1, [pc, #56]	; (800b70c <HAL_RCC_ClockConfig+0x1bc>)
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b6d6:	f000 f821 	bl	800b71c <HAL_RCC_GetSysClockFreq>
 800b6da:	4602      	mov	r2, r0
 800b6dc:	4b0b      	ldr	r3, [pc, #44]	; (800b70c <HAL_RCC_ClockConfig+0x1bc>)
 800b6de:	689b      	ldr	r3, [r3, #8]
 800b6e0:	091b      	lsrs	r3, r3, #4
 800b6e2:	f003 030f 	and.w	r3, r3, #15
 800b6e6:	490a      	ldr	r1, [pc, #40]	; (800b710 <HAL_RCC_ClockConfig+0x1c0>)
 800b6e8:	5ccb      	ldrb	r3, [r1, r3]
 800b6ea:	fa22 f303 	lsr.w	r3, r2, r3
 800b6ee:	4a09      	ldr	r2, [pc, #36]	; (800b714 <HAL_RCC_ClockConfig+0x1c4>)
 800b6f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b6f2:	4b09      	ldr	r3, [pc, #36]	; (800b718 <HAL_RCC_ClockConfig+0x1c8>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f7f7 f888 	bl	800280c <HAL_InitTick>

  return HAL_OK;
 800b6fc:	2300      	movs	r3, #0
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3710      	adds	r7, #16
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop
 800b708:	40023c00 	.word	0x40023c00
 800b70c:	40023800 	.word	0x40023800
 800b710:	08019aa0 	.word	0x08019aa0
 800b714:	2000003c 	.word	0x2000003c
 800b718:	20000064 	.word	0x20000064

0800b71c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b71c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b720:	b084      	sub	sp, #16
 800b722:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b724:	2300      	movs	r3, #0
 800b726:	607b      	str	r3, [r7, #4]
 800b728:	2300      	movs	r3, #0
 800b72a:	60fb      	str	r3, [r7, #12]
 800b72c:	2300      	movs	r3, #0
 800b72e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800b730:	2300      	movs	r3, #0
 800b732:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b734:	4b67      	ldr	r3, [pc, #412]	; (800b8d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b736:	689b      	ldr	r3, [r3, #8]
 800b738:	f003 030c 	and.w	r3, r3, #12
 800b73c:	2b08      	cmp	r3, #8
 800b73e:	d00d      	beq.n	800b75c <HAL_RCC_GetSysClockFreq+0x40>
 800b740:	2b08      	cmp	r3, #8
 800b742:	f200 80bd 	bhi.w	800b8c0 <HAL_RCC_GetSysClockFreq+0x1a4>
 800b746:	2b00      	cmp	r3, #0
 800b748:	d002      	beq.n	800b750 <HAL_RCC_GetSysClockFreq+0x34>
 800b74a:	2b04      	cmp	r3, #4
 800b74c:	d003      	beq.n	800b756 <HAL_RCC_GetSysClockFreq+0x3a>
 800b74e:	e0b7      	b.n	800b8c0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b750:	4b61      	ldr	r3, [pc, #388]	; (800b8d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800b752:	60bb      	str	r3, [r7, #8]
       break;
 800b754:	e0b7      	b.n	800b8c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b756:	4b60      	ldr	r3, [pc, #384]	; (800b8d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800b758:	60bb      	str	r3, [r7, #8]
      break;
 800b75a:	e0b4      	b.n	800b8c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b75c:	4b5d      	ldr	r3, [pc, #372]	; (800b8d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b764:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b766:	4b5b      	ldr	r3, [pc, #364]	; (800b8d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b768:	685b      	ldr	r3, [r3, #4]
 800b76a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d04d      	beq.n	800b80e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b772:	4b58      	ldr	r3, [pc, #352]	; (800b8d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	099b      	lsrs	r3, r3, #6
 800b778:	461a      	mov	r2, r3
 800b77a:	f04f 0300 	mov.w	r3, #0
 800b77e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b782:	f04f 0100 	mov.w	r1, #0
 800b786:	ea02 0800 	and.w	r8, r2, r0
 800b78a:	ea03 0901 	and.w	r9, r3, r1
 800b78e:	4640      	mov	r0, r8
 800b790:	4649      	mov	r1, r9
 800b792:	f04f 0200 	mov.w	r2, #0
 800b796:	f04f 0300 	mov.w	r3, #0
 800b79a:	014b      	lsls	r3, r1, #5
 800b79c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b7a0:	0142      	lsls	r2, r0, #5
 800b7a2:	4610      	mov	r0, r2
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	ebb0 0008 	subs.w	r0, r0, r8
 800b7aa:	eb61 0109 	sbc.w	r1, r1, r9
 800b7ae:	f04f 0200 	mov.w	r2, #0
 800b7b2:	f04f 0300 	mov.w	r3, #0
 800b7b6:	018b      	lsls	r3, r1, #6
 800b7b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b7bc:	0182      	lsls	r2, r0, #6
 800b7be:	1a12      	subs	r2, r2, r0
 800b7c0:	eb63 0301 	sbc.w	r3, r3, r1
 800b7c4:	f04f 0000 	mov.w	r0, #0
 800b7c8:	f04f 0100 	mov.w	r1, #0
 800b7cc:	00d9      	lsls	r1, r3, #3
 800b7ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b7d2:	00d0      	lsls	r0, r2, #3
 800b7d4:	4602      	mov	r2, r0
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	eb12 0208 	adds.w	r2, r2, r8
 800b7dc:	eb43 0309 	adc.w	r3, r3, r9
 800b7e0:	f04f 0000 	mov.w	r0, #0
 800b7e4:	f04f 0100 	mov.w	r1, #0
 800b7e8:	0299      	lsls	r1, r3, #10
 800b7ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b7ee:	0290      	lsls	r0, r2, #10
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	4610      	mov	r0, r2
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	f04f 0300 	mov.w	r3, #0
 800b800:	f7f5 fab2 	bl	8000d68 <__aeabi_uldivmod>
 800b804:	4602      	mov	r2, r0
 800b806:	460b      	mov	r3, r1
 800b808:	4613      	mov	r3, r2
 800b80a:	60fb      	str	r3, [r7, #12]
 800b80c:	e04a      	b.n	800b8a4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b80e:	4b31      	ldr	r3, [pc, #196]	; (800b8d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	099b      	lsrs	r3, r3, #6
 800b814:	461a      	mov	r2, r3
 800b816:	f04f 0300 	mov.w	r3, #0
 800b81a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b81e:	f04f 0100 	mov.w	r1, #0
 800b822:	ea02 0400 	and.w	r4, r2, r0
 800b826:	ea03 0501 	and.w	r5, r3, r1
 800b82a:	4620      	mov	r0, r4
 800b82c:	4629      	mov	r1, r5
 800b82e:	f04f 0200 	mov.w	r2, #0
 800b832:	f04f 0300 	mov.w	r3, #0
 800b836:	014b      	lsls	r3, r1, #5
 800b838:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b83c:	0142      	lsls	r2, r0, #5
 800b83e:	4610      	mov	r0, r2
 800b840:	4619      	mov	r1, r3
 800b842:	1b00      	subs	r0, r0, r4
 800b844:	eb61 0105 	sbc.w	r1, r1, r5
 800b848:	f04f 0200 	mov.w	r2, #0
 800b84c:	f04f 0300 	mov.w	r3, #0
 800b850:	018b      	lsls	r3, r1, #6
 800b852:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b856:	0182      	lsls	r2, r0, #6
 800b858:	1a12      	subs	r2, r2, r0
 800b85a:	eb63 0301 	sbc.w	r3, r3, r1
 800b85e:	f04f 0000 	mov.w	r0, #0
 800b862:	f04f 0100 	mov.w	r1, #0
 800b866:	00d9      	lsls	r1, r3, #3
 800b868:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b86c:	00d0      	lsls	r0, r2, #3
 800b86e:	4602      	mov	r2, r0
 800b870:	460b      	mov	r3, r1
 800b872:	1912      	adds	r2, r2, r4
 800b874:	eb45 0303 	adc.w	r3, r5, r3
 800b878:	f04f 0000 	mov.w	r0, #0
 800b87c:	f04f 0100 	mov.w	r1, #0
 800b880:	0299      	lsls	r1, r3, #10
 800b882:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b886:	0290      	lsls	r0, r2, #10
 800b888:	4602      	mov	r2, r0
 800b88a:	460b      	mov	r3, r1
 800b88c:	4610      	mov	r0, r2
 800b88e:	4619      	mov	r1, r3
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	461a      	mov	r2, r3
 800b894:	f04f 0300 	mov.w	r3, #0
 800b898:	f7f5 fa66 	bl	8000d68 <__aeabi_uldivmod>
 800b89c:	4602      	mov	r2, r0
 800b89e:	460b      	mov	r3, r1
 800b8a0:	4613      	mov	r3, r2
 800b8a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b8a4:	4b0b      	ldr	r3, [pc, #44]	; (800b8d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b8a6:	685b      	ldr	r3, [r3, #4]
 800b8a8:	0c1b      	lsrs	r3, r3, #16
 800b8aa:	f003 0303 	and.w	r3, r3, #3
 800b8ae:	3301      	adds	r3, #1
 800b8b0:	005b      	lsls	r3, r3, #1
 800b8b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b8b4:	68fa      	ldr	r2, [r7, #12]
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8bc:	60bb      	str	r3, [r7, #8]
      break;
 800b8be:	e002      	b.n	800b8c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b8c0:	4b05      	ldr	r3, [pc, #20]	; (800b8d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800b8c2:	60bb      	str	r3, [r7, #8]
      break;
 800b8c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b8c6:	68bb      	ldr	r3, [r7, #8]
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3710      	adds	r7, #16
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b8d2:	bf00      	nop
 800b8d4:	40023800 	.word	0x40023800
 800b8d8:	00f42400 	.word	0x00f42400

0800b8dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b8e0:	4b03      	ldr	r3, [pc, #12]	; (800b8f0 <HAL_RCC_GetHCLKFreq+0x14>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ec:	4770      	bx	lr
 800b8ee:	bf00      	nop
 800b8f0:	2000003c 	.word	0x2000003c

0800b8f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b8f8:	f7ff fff0 	bl	800b8dc <HAL_RCC_GetHCLKFreq>
 800b8fc:	4602      	mov	r2, r0
 800b8fe:	4b05      	ldr	r3, [pc, #20]	; (800b914 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b900:	689b      	ldr	r3, [r3, #8]
 800b902:	0a9b      	lsrs	r3, r3, #10
 800b904:	f003 0307 	and.w	r3, r3, #7
 800b908:	4903      	ldr	r1, [pc, #12]	; (800b918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b90a:	5ccb      	ldrb	r3, [r1, r3]
 800b90c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b910:	4618      	mov	r0, r3
 800b912:	bd80      	pop	{r7, pc}
 800b914:	40023800 	.word	0x40023800
 800b918:	08019ab0 	.word	0x08019ab0

0800b91c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b920:	f7ff ffdc 	bl	800b8dc <HAL_RCC_GetHCLKFreq>
 800b924:	4602      	mov	r2, r0
 800b926:	4b05      	ldr	r3, [pc, #20]	; (800b93c <HAL_RCC_GetPCLK2Freq+0x20>)
 800b928:	689b      	ldr	r3, [r3, #8]
 800b92a:	0b5b      	lsrs	r3, r3, #13
 800b92c:	f003 0307 	and.w	r3, r3, #7
 800b930:	4903      	ldr	r1, [pc, #12]	; (800b940 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b932:	5ccb      	ldrb	r3, [r1, r3]
 800b934:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b938:	4618      	mov	r0, r3
 800b93a:	bd80      	pop	{r7, pc}
 800b93c:	40023800 	.word	0x40023800
 800b940:	08019ab0 	.word	0x08019ab0

0800b944 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	220f      	movs	r2, #15
 800b952:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b954:	4b12      	ldr	r3, [pc, #72]	; (800b9a0 <HAL_RCC_GetClockConfig+0x5c>)
 800b956:	689b      	ldr	r3, [r3, #8]
 800b958:	f003 0203 	and.w	r2, r3, #3
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b960:	4b0f      	ldr	r3, [pc, #60]	; (800b9a0 <HAL_RCC_GetClockConfig+0x5c>)
 800b962:	689b      	ldr	r3, [r3, #8]
 800b964:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b96c:	4b0c      	ldr	r3, [pc, #48]	; (800b9a0 <HAL_RCC_GetClockConfig+0x5c>)
 800b96e:	689b      	ldr	r3, [r3, #8]
 800b970:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800b978:	4b09      	ldr	r3, [pc, #36]	; (800b9a0 <HAL_RCC_GetClockConfig+0x5c>)
 800b97a:	689b      	ldr	r3, [r3, #8]
 800b97c:	08db      	lsrs	r3, r3, #3
 800b97e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b986:	4b07      	ldr	r3, [pc, #28]	; (800b9a4 <HAL_RCC_GetClockConfig+0x60>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f003 020f 	and.w	r2, r3, #15
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	601a      	str	r2, [r3, #0]
}
 800b992:	bf00      	nop
 800b994:	370c      	adds	r7, #12
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr
 800b99e:	bf00      	nop
 800b9a0:	40023800 	.word	0x40023800
 800b9a4:	40023c00 	.word	0x40023c00

0800b9a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b086      	sub	sp, #24
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f003 0301 	and.w	r3, r3, #1
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d10b      	bne.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d105      	bne.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d075      	beq.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b9dc:	4bad      	ldr	r3, [pc, #692]	; (800bc94 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800b9de:	2200      	movs	r2, #0
 800b9e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b9e2:	f7fd fc93 	bl	800930c <HAL_GetTick>
 800b9e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b9e8:	e008      	b.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b9ea:	f7fd fc8f 	bl	800930c <HAL_GetTick>
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	1ad3      	subs	r3, r2, r3
 800b9f4:	2b02      	cmp	r3, #2
 800b9f6:	d901      	bls.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b9f8:	2303      	movs	r3, #3
 800b9fa:	e18b      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b9fc:	4ba6      	ldr	r3, [pc, #664]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d1f0      	bne.n	800b9ea <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f003 0301 	and.w	r3, r3, #1
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d009      	beq.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	019a      	lsls	r2, r3, #6
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	689b      	ldr	r3, [r3, #8]
 800ba1e:	071b      	lsls	r3, r3, #28
 800ba20:	499d      	ldr	r1, [pc, #628]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ba22:	4313      	orrs	r3, r2
 800ba24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f003 0302 	and.w	r3, r3, #2
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d01f      	beq.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800ba34:	4b98      	ldr	r3, [pc, #608]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ba36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba3a:	0f1b      	lsrs	r3, r3, #28
 800ba3c:	f003 0307 	and.w	r3, r3, #7
 800ba40:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	019a      	lsls	r2, r3, #6
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	68db      	ldr	r3, [r3, #12]
 800ba4c:	061b      	lsls	r3, r3, #24
 800ba4e:	431a      	orrs	r2, r3
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	071b      	lsls	r3, r3, #28
 800ba54:	4990      	ldr	r1, [pc, #576]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ba56:	4313      	orrs	r3, r2
 800ba58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800ba5c:	4b8e      	ldr	r3, [pc, #568]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ba5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba62:	f023 021f 	bic.w	r2, r3, #31
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	69db      	ldr	r3, [r3, #28]
 800ba6a:	3b01      	subs	r3, #1
 800ba6c:	498a      	ldr	r1, [pc, #552]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ba6e:	4313      	orrs	r3, r2
 800ba70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d00d      	beq.n	800ba9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	019a      	lsls	r2, r3, #6
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	68db      	ldr	r3, [r3, #12]
 800ba8a:	061b      	lsls	r3, r3, #24
 800ba8c:	431a      	orrs	r2, r3
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	689b      	ldr	r3, [r3, #8]
 800ba92:	071b      	lsls	r3, r3, #28
 800ba94:	4980      	ldr	r1, [pc, #512]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ba96:	4313      	orrs	r3, r2
 800ba98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800ba9c:	4b7d      	ldr	r3, [pc, #500]	; (800bc94 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800ba9e:	2201      	movs	r2, #1
 800baa0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800baa2:	f7fd fc33 	bl	800930c <HAL_GetTick>
 800baa6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800baa8:	e008      	b.n	800babc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800baaa:	f7fd fc2f 	bl	800930c <HAL_GetTick>
 800baae:	4602      	mov	r2, r0
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	1ad3      	subs	r3, r2, r3
 800bab4:	2b02      	cmp	r3, #2
 800bab6:	d901      	bls.n	800babc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bab8:	2303      	movs	r3, #3
 800baba:	e12b      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800babc:	4b76      	ldr	r3, [pc, #472]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d0f0      	beq.n	800baaa <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f003 0304 	and.w	r3, r3, #4
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d105      	bne.n	800bae0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800badc:	2b00      	cmp	r3, #0
 800bade:	d079      	beq.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800bae0:	4b6e      	ldr	r3, [pc, #440]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bae2:	2200      	movs	r2, #0
 800bae4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bae6:	f7fd fc11 	bl	800930c <HAL_GetTick>
 800baea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800baec:	e008      	b.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800baee:	f7fd fc0d 	bl	800930c <HAL_GetTick>
 800baf2:	4602      	mov	r2, r0
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	1ad3      	subs	r3, r2, r3
 800baf8:	2b02      	cmp	r3, #2
 800bafa:	d901      	bls.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bafc:	2303      	movs	r3, #3
 800bafe:	e109      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bb00:	4b65      	ldr	r3, [pc, #404]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb0c:	d0ef      	beq.n	800baee <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f003 0304 	and.w	r3, r3, #4
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d020      	beq.n	800bb5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bb1a:	4b5f      	ldr	r3, [pc, #380]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bb1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb20:	0f1b      	lsrs	r3, r3, #28
 800bb22:	f003 0307 	and.w	r3, r3, #7
 800bb26:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	691b      	ldr	r3, [r3, #16]
 800bb2c:	019a      	lsls	r2, r3, #6
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	695b      	ldr	r3, [r3, #20]
 800bb32:	061b      	lsls	r3, r3, #24
 800bb34:	431a      	orrs	r2, r3
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	071b      	lsls	r3, r3, #28
 800bb3a:	4957      	ldr	r1, [pc, #348]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800bb42:	4b55      	ldr	r3, [pc, #340]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bb44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb48:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6a1b      	ldr	r3, [r3, #32]
 800bb50:	3b01      	subs	r3, #1
 800bb52:	021b      	lsls	r3, r3, #8
 800bb54:	4950      	ldr	r1, [pc, #320]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bb56:	4313      	orrs	r3, r2
 800bb58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f003 0308 	and.w	r3, r3, #8
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d01e      	beq.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bb68:	4b4b      	ldr	r3, [pc, #300]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bb6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb6e:	0e1b      	lsrs	r3, r3, #24
 800bb70:	f003 030f 	and.w	r3, r3, #15
 800bb74:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	691b      	ldr	r3, [r3, #16]
 800bb7a:	019a      	lsls	r2, r3, #6
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	061b      	lsls	r3, r3, #24
 800bb80:	431a      	orrs	r2, r3
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	699b      	ldr	r3, [r3, #24]
 800bb86:	071b      	lsls	r3, r3, #28
 800bb88:	4943      	ldr	r1, [pc, #268]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800bb90:	4b41      	ldr	r3, [pc, #260]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bb92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb9e:	493e      	ldr	r1, [pc, #248]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bba0:	4313      	orrs	r3, r2
 800bba2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800bba6:	4b3d      	ldr	r3, [pc, #244]	; (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bba8:	2201      	movs	r2, #1
 800bbaa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bbac:	f7fd fbae 	bl	800930c <HAL_GetTick>
 800bbb0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bbb2:	e008      	b.n	800bbc6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800bbb4:	f7fd fbaa 	bl	800930c <HAL_GetTick>
 800bbb8:	4602      	mov	r2, r0
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	1ad3      	subs	r3, r2, r3
 800bbbe:	2b02      	cmp	r3, #2
 800bbc0:	d901      	bls.n	800bbc6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bbc2:	2303      	movs	r3, #3
 800bbc4:	e0a6      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bbc6:	4b34      	ldr	r3, [pc, #208]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bbce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbd2:	d1ef      	bne.n	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f003 0320 	and.w	r3, r3, #32
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	f000 808d 	beq.w	800bcfc <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	60fb      	str	r3, [r7, #12]
 800bbe6:	4b2c      	ldr	r3, [pc, #176]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bbe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbea:	4a2b      	ldr	r2, [pc, #172]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bbec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbf0:	6413      	str	r3, [r2, #64]	; 0x40
 800bbf2:	4b29      	ldr	r3, [pc, #164]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bbf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbfa:	60fb      	str	r3, [r7, #12]
 800bbfc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800bbfe:	4b28      	ldr	r3, [pc, #160]	; (800bca0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	4a27      	ldr	r2, [pc, #156]	; (800bca0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800bc04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc08:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bc0a:	f7fd fb7f 	bl	800930c <HAL_GetTick>
 800bc0e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800bc10:	e008      	b.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800bc12:	f7fd fb7b 	bl	800930c <HAL_GetTick>
 800bc16:	4602      	mov	r2, r0
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	1ad3      	subs	r3, r2, r3
 800bc1c:	2b02      	cmp	r3, #2
 800bc1e:	d901      	bls.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800bc20:	2303      	movs	r3, #3
 800bc22:	e077      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800bc24:	4b1e      	ldr	r3, [pc, #120]	; (800bca0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d0f0      	beq.n	800bc12 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800bc30:	4b19      	ldr	r3, [pc, #100]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bc32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc38:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d039      	beq.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc48:	693a      	ldr	r2, [r7, #16]
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d032      	beq.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bc4e:	4b12      	ldr	r3, [pc, #72]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bc50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc56:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800bc58:	4b12      	ldr	r3, [pc, #72]	; (800bca4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800bc5e:	4b11      	ldr	r3, [pc, #68]	; (800bca4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800bc60:	2200      	movs	r2, #0
 800bc62:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800bc64:	4a0c      	ldr	r2, [pc, #48]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800bc6a:	4b0b      	ldr	r3, [pc, #44]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bc6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc6e:	f003 0301 	and.w	r3, r3, #1
 800bc72:	2b01      	cmp	r3, #1
 800bc74:	d11e      	bne.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800bc76:	f7fd fb49 	bl	800930c <HAL_GetTick>
 800bc7a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bc7c:	e014      	b.n	800bca8 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bc7e:	f7fd fb45 	bl	800930c <HAL_GetTick>
 800bc82:	4602      	mov	r2, r0
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	1ad3      	subs	r3, r2, r3
 800bc88:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d90b      	bls.n	800bca8 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800bc90:	2303      	movs	r3, #3
 800bc92:	e03f      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800bc94:	42470068 	.word	0x42470068
 800bc98:	40023800 	.word	0x40023800
 800bc9c:	42470070 	.word	0x42470070
 800bca0:	40007000 	.word	0x40007000
 800bca4:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bca8:	4b1c      	ldr	r3, [pc, #112]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800bcaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcac:	f003 0302 	and.w	r3, r3, #2
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d0e4      	beq.n	800bc7e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bcbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bcc0:	d10d      	bne.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0x336>
 800bcc2:	4b16      	ldr	r3, [pc, #88]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800bcc4:	689b      	ldr	r3, [r3, #8]
 800bcc6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bcd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bcd6:	4911      	ldr	r1, [pc, #68]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	608b      	str	r3, [r1, #8]
 800bcdc:	e005      	b.n	800bcea <HAL_RCCEx_PeriphCLKConfig+0x342>
 800bcde:	4b0f      	ldr	r3, [pc, #60]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800bce0:	689b      	ldr	r3, [r3, #8]
 800bce2:	4a0e      	ldr	r2, [pc, #56]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800bce4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800bce8:	6093      	str	r3, [r2, #8]
 800bcea:	4b0c      	ldr	r3, [pc, #48]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800bcec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bcf6:	4909      	ldr	r1, [pc, #36]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f003 0310 	and.w	r3, r3, #16
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d004      	beq.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800bd0e:	4b04      	ldr	r3, [pc, #16]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800bd10:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800bd12:	2300      	movs	r3, #0
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3718      	adds	r7, #24
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}
 800bd1c:	40023800 	.word	0x40023800
 800bd20:	424711e0 	.word	0x424711e0

0800bd24 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b082      	sub	sp, #8
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d101      	bne.n	800bd36 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800bd32:	2301      	movs	r3, #1
 800bd34:	e083      	b.n	800be3e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	7f5b      	ldrb	r3, [r3, #29]
 800bd3a:	b2db      	uxtb	r3, r3
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d105      	bne.n	800bd4c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2200      	movs	r2, #0
 800bd44:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f7f6 fa22 	bl	8002190 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2202      	movs	r2, #2
 800bd50:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	22ca      	movs	r2, #202	; 0xca
 800bd58:	625a      	str	r2, [r3, #36]	; 0x24
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	2253      	movs	r2, #83	; 0x53
 800bd60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f000 fb84 	bl	800c470 <RTC_EnterInitMode>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d008      	beq.n	800bd80 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	22ff      	movs	r2, #255	; 0xff
 800bd74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2204      	movs	r2, #4
 800bd7a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	e05e      	b.n	800be3e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	689b      	ldr	r3, [r3, #8]
 800bd86:	687a      	ldr	r2, [r7, #4]
 800bd88:	6812      	ldr	r2, [r2, #0]
 800bd8a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bd8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd92:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	6899      	ldr	r1, [r3, #8]
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	685a      	ldr	r2, [r3, #4]
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	691b      	ldr	r3, [r3, #16]
 800bda2:	431a      	orrs	r2, r3
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	695b      	ldr	r3, [r3, #20]
 800bda8:	431a      	orrs	r2, r3
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	430a      	orrs	r2, r1
 800bdb0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	687a      	ldr	r2, [r7, #4]
 800bdb8:	68d2      	ldr	r2, [r2, #12]
 800bdba:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	6919      	ldr	r1, [r3, #16]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	689b      	ldr	r3, [r3, #8]
 800bdc6:	041a      	lsls	r2, r3, #16
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	430a      	orrs	r2, r1
 800bdce:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	68da      	ldr	r2, [r3, #12]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bdde:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	689b      	ldr	r3, [r3, #8]
 800bde6:	f003 0320 	and.w	r3, r3, #32
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d10e      	bne.n	800be0c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f000 fb16 	bl	800c420 <HAL_RTC_WaitForSynchro>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d008      	beq.n	800be0c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	22ff      	movs	r2, #255	; 0xff
 800be00:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2204      	movs	r2, #4
 800be06:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800be08:	2301      	movs	r3, #1
 800be0a:	e018      	b.n	800be3e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800be1a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	699a      	ldr	r2, [r3, #24]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	430a      	orrs	r2, r1
 800be2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	22ff      	movs	r2, #255	; 0xff
 800be34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2201      	movs	r2, #1
 800be3a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800be3c:	2300      	movs	r3, #0
  }
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3708      	adds	r7, #8
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}

0800be46 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800be46:	b590      	push	{r4, r7, lr}
 800be48:	b087      	sub	sp, #28
 800be4a:	af00      	add	r7, sp, #0
 800be4c:	60f8      	str	r0, [r7, #12]
 800be4e:	60b9      	str	r1, [r7, #8]
 800be50:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800be52:	2300      	movs	r3, #0
 800be54:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	7f1b      	ldrb	r3, [r3, #28]
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	d101      	bne.n	800be62 <HAL_RTC_SetTime+0x1c>
 800be5e:	2302      	movs	r3, #2
 800be60:	e0aa      	b.n	800bfb8 <HAL_RTC_SetTime+0x172>
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2201      	movs	r2, #1
 800be66:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2202      	movs	r2, #2
 800be6c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d126      	bne.n	800bec2 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	689b      	ldr	r3, [r3, #8]
 800be7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d102      	bne.n	800be88 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	2200      	movs	r2, #0
 800be86:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	781b      	ldrb	r3, [r3, #0]
 800be8c:	4618      	mov	r0, r3
 800be8e:	f000 fb1b 	bl	800c4c8 <RTC_ByteToBcd2>
 800be92:	4603      	mov	r3, r0
 800be94:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	785b      	ldrb	r3, [r3, #1]
 800be9a:	4618      	mov	r0, r3
 800be9c:	f000 fb14 	bl	800c4c8 <RTC_ByteToBcd2>
 800bea0:	4603      	mov	r3, r0
 800bea2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800bea4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	789b      	ldrb	r3, [r3, #2]
 800beaa:	4618      	mov	r0, r3
 800beac:	f000 fb0c 	bl	800c4c8 <RTC_ByteToBcd2>
 800beb0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800beb2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	78db      	ldrb	r3, [r3, #3]
 800beba:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800bebc:	4313      	orrs	r3, r2
 800bebe:	617b      	str	r3, [r7, #20]
 800bec0:	e018      	b.n	800bef4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	689b      	ldr	r3, [r3, #8]
 800bec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800becc:	2b00      	cmp	r3, #0
 800bece:	d102      	bne.n	800bed6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	2200      	movs	r2, #0
 800bed4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	785b      	ldrb	r3, [r3, #1]
 800bee0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800bee2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800bee4:	68ba      	ldr	r2, [r7, #8]
 800bee6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800bee8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	78db      	ldrb	r3, [r3, #3]
 800beee:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800bef0:	4313      	orrs	r3, r2
 800bef2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	22ca      	movs	r2, #202	; 0xca
 800befa:	625a      	str	r2, [r3, #36]	; 0x24
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	2253      	movs	r2, #83	; 0x53
 800bf02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800bf04:	68f8      	ldr	r0, [r7, #12]
 800bf06:	f000 fab3 	bl	800c470 <RTC_EnterInitMode>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d00b      	beq.n	800bf28 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	22ff      	movs	r2, #255	; 0xff
 800bf16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	2204      	movs	r2, #4
 800bf1c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	2200      	movs	r2, #0
 800bf22:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800bf24:	2301      	movs	r3, #1
 800bf26:	e047      	b.n	800bfb8 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681a      	ldr	r2, [r3, #0]
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800bf32:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800bf36:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	689a      	ldr	r2, [r3, #8]
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bf46:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	6899      	ldr	r1, [r3, #8]
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	68da      	ldr	r2, [r3, #12]
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	691b      	ldr	r3, [r3, #16]
 800bf56:	431a      	orrs	r2, r3
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	430a      	orrs	r2, r1
 800bf5e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	68da      	ldr	r2, [r3, #12]
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bf6e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	689b      	ldr	r3, [r3, #8]
 800bf76:	f003 0320 	and.w	r3, r3, #32
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d111      	bne.n	800bfa2 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bf7e:	68f8      	ldr	r0, [r7, #12]
 800bf80:	f000 fa4e 	bl	800c420 <HAL_RTC_WaitForSynchro>
 800bf84:	4603      	mov	r3, r0
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d00b      	beq.n	800bfa2 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	22ff      	movs	r2, #255	; 0xff
 800bf90:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2204      	movs	r2, #4
 800bf96:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	e00a      	b.n	800bfb8 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	22ff      	movs	r2, #255	; 0xff
 800bfa8:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	2201      	movs	r2, #1
 800bfae:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800bfb6:	2300      	movs	r3, #0
  }
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	371c      	adds	r7, #28
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd90      	pop	{r4, r7, pc}

0800bfc0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bfc0:	b590      	push	{r4, r7, lr}
 800bfc2:	b087      	sub	sp, #28
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	60f8      	str	r0, [r7, #12]
 800bfc8:	60b9      	str	r1, [r7, #8]
 800bfca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	7f1b      	ldrb	r3, [r3, #28]
 800bfd4:	2b01      	cmp	r3, #1
 800bfd6:	d101      	bne.n	800bfdc <HAL_RTC_SetDate+0x1c>
 800bfd8:	2302      	movs	r3, #2
 800bfda:	e094      	b.n	800c106 <HAL_RTC_SetDate+0x146>
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	2201      	movs	r2, #1
 800bfe0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	2202      	movs	r2, #2
 800bfe6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d10e      	bne.n	800c00c <HAL_RTC_SetDate+0x4c>
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	785b      	ldrb	r3, [r3, #1]
 800bff2:	f003 0310 	and.w	r3, r3, #16
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d008      	beq.n	800c00c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	785b      	ldrb	r3, [r3, #1]
 800bffe:	f023 0310 	bic.w	r3, r3, #16
 800c002:	b2db      	uxtb	r3, r3
 800c004:	330a      	adds	r3, #10
 800c006:	b2da      	uxtb	r2, r3
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d11c      	bne.n	800c04c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	78db      	ldrb	r3, [r3, #3]
 800c016:	4618      	mov	r0, r3
 800c018:	f000 fa56 	bl	800c4c8 <RTC_ByteToBcd2>
 800c01c:	4603      	mov	r3, r0
 800c01e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	785b      	ldrb	r3, [r3, #1]
 800c024:	4618      	mov	r0, r3
 800c026:	f000 fa4f 	bl	800c4c8 <RTC_ByteToBcd2>
 800c02a:	4603      	mov	r3, r0
 800c02c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c02e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	789b      	ldrb	r3, [r3, #2]
 800c034:	4618      	mov	r0, r3
 800c036:	f000 fa47 	bl	800c4c8 <RTC_ByteToBcd2>
 800c03a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c03c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	781b      	ldrb	r3, [r3, #0]
 800c044:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c046:	4313      	orrs	r3, r2
 800c048:	617b      	str	r3, [r7, #20]
 800c04a:	e00e      	b.n	800c06a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	78db      	ldrb	r3, [r3, #3]
 800c050:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	785b      	ldrb	r3, [r3, #1]
 800c056:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c058:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800c05a:	68ba      	ldr	r2, [r7, #8]
 800c05c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800c05e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c066:	4313      	orrs	r3, r2
 800c068:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	22ca      	movs	r2, #202	; 0xca
 800c070:	625a      	str	r2, [r3, #36]	; 0x24
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	2253      	movs	r2, #83	; 0x53
 800c078:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c07a:	68f8      	ldr	r0, [r7, #12]
 800c07c:	f000 f9f8 	bl	800c470 <RTC_EnterInitMode>
 800c080:	4603      	mov	r3, r0
 800c082:	2b00      	cmp	r3, #0
 800c084:	d00b      	beq.n	800c09e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	22ff      	movs	r2, #255	; 0xff
 800c08c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2204      	movs	r2, #4
 800c092:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	2200      	movs	r2, #0
 800c098:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800c09a:	2301      	movs	r3, #1
 800c09c:	e033      	b.n	800c106 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681a      	ldr	r2, [r3, #0]
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c0a8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c0ac:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	68da      	ldr	r2, [r3, #12]
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c0bc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	689b      	ldr	r3, [r3, #8]
 800c0c4:	f003 0320 	and.w	r3, r3, #32
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d111      	bne.n	800c0f0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c0cc:	68f8      	ldr	r0, [r7, #12]
 800c0ce:	f000 f9a7 	bl	800c420 <HAL_RTC_WaitForSynchro>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d00b      	beq.n	800c0f0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	22ff      	movs	r2, #255	; 0xff
 800c0de:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	2204      	movs	r2, #4
 800c0e4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	e00a      	b.n	800c106 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	22ff      	movs	r2, #255	; 0xff
 800c0f6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2200      	movs	r2, #0
 800c102:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800c104:	2300      	movs	r3, #0
  }
}
 800c106:	4618      	mov	r0, r3
 800c108:	371c      	adds	r7, #28
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd90      	pop	{r4, r7, pc}
	...

0800c110 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800c110:	b590      	push	{r4, r7, lr}
 800c112:	b089      	sub	sp, #36	; 0x24
 800c114:	af00      	add	r7, sp, #0
 800c116:	60f8      	str	r0, [r7, #12]
 800c118:	60b9      	str	r1, [r7, #8]
 800c11a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800c11c:	2300      	movs	r3, #0
 800c11e:	61fb      	str	r3, [r7, #28]
 800c120:	2300      	movs	r3, #0
 800c122:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800c124:	4b93      	ldr	r3, [pc, #588]	; (800c374 <HAL_RTC_SetAlarm_IT+0x264>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	4a93      	ldr	r2, [pc, #588]	; (800c378 <HAL_RTC_SetAlarm_IT+0x268>)
 800c12a:	fba2 2303 	umull	r2, r3, r2, r3
 800c12e:	0adb      	lsrs	r3, r3, #11
 800c130:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c134:	fb02 f303 	mul.w	r3, r2, r3
 800c138:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	7f1b      	ldrb	r3, [r3, #28]
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d101      	bne.n	800c146 <HAL_RTC_SetAlarm_IT+0x36>
 800c142:	2302      	movs	r3, #2
 800c144:	e111      	b.n	800c36a <HAL_RTC_SetAlarm_IT+0x25a>
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2201      	movs	r2, #1
 800c14a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2202      	movs	r2, #2
 800c150:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d137      	bne.n	800c1c8 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	689b      	ldr	r3, [r3, #8]
 800c15e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c162:	2b00      	cmp	r3, #0
 800c164:	d102      	bne.n	800c16c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	2200      	movs	r2, #0
 800c16a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	781b      	ldrb	r3, [r3, #0]
 800c170:	4618      	mov	r0, r3
 800c172:	f000 f9a9 	bl	800c4c8 <RTC_ByteToBcd2>
 800c176:	4603      	mov	r3, r0
 800c178:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	785b      	ldrb	r3, [r3, #1]
 800c17e:	4618      	mov	r0, r3
 800c180:	f000 f9a2 	bl	800c4c8 <RTC_ByteToBcd2>
 800c184:	4603      	mov	r3, r0
 800c186:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800c188:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	789b      	ldrb	r3, [r3, #2]
 800c18e:	4618      	mov	r0, r3
 800c190:	f000 f99a 	bl	800c4c8 <RTC_ByteToBcd2>
 800c194:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c196:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	78db      	ldrb	r3, [r3, #3]
 800c19e:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800c1a0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f000 f98c 	bl	800c4c8 <RTC_ByteToBcd2>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c1b4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c1bc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	61fb      	str	r3, [r7, #28]
 800c1c6:	e023      	b.n	800c210 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	689b      	ldr	r3, [r3, #8]
 800c1ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d102      	bne.n	800c1dc <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	785b      	ldrb	r3, [r3, #1]
 800c1e6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800c1e8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800c1ea:	68ba      	ldr	r2, [r7, #8]
 800c1ec:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c1ee:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	78db      	ldrb	r3, [r3, #3]
 800c1f4:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800c1f6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c1fe:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c200:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c206:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800c20c:	4313      	orrs	r3, r2
 800c20e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	685a      	ldr	r2, [r3, #4]
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	699b      	ldr	r3, [r3, #24]
 800c218:	4313      	orrs	r3, r2
 800c21a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	22ca      	movs	r2, #202	; 0xca
 800c222:	625a      	str	r2, [r3, #36]	; 0x24
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	2253      	movs	r2, #83	; 0x53
 800c22a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c230:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c234:	d141      	bne.n	800c2ba <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	689a      	ldr	r2, [r3, #8]
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c244:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	68db      	ldr	r3, [r3, #12]
 800c24c:	b2da      	uxtb	r2, r3
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800c256:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	1e5a      	subs	r2, r3, #1
 800c25c:	617a      	str	r2, [r7, #20]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d10b      	bne.n	800c27a <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	22ff      	movs	r2, #255	; 0xff
 800c268:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2203      	movs	r2, #3
 800c26e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	2200      	movs	r2, #0
 800c274:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c276:	2303      	movs	r3, #3
 800c278:	e077      	b.n	800c36a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	68db      	ldr	r3, [r3, #12]
 800c280:	f003 0301 	and.w	r3, r3, #1
 800c284:	2b00      	cmp	r3, #0
 800c286:	d0e7      	beq.n	800c258 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	69fa      	ldr	r2, [r7, #28]
 800c28e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	69ba      	ldr	r2, [r7, #24]
 800c296:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	689a      	ldr	r2, [r3, #8]
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c2a6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	689a      	ldr	r2, [r3, #8]
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c2b6:	609a      	str	r2, [r3, #8]
 800c2b8:	e040      	b.n	800c33c <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	689a      	ldr	r2, [r3, #8]
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c2c8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	68db      	ldr	r3, [r3, #12]
 800c2d0:	b2da      	uxtb	r2, r3
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f462 7220 	orn	r2, r2, #640	; 0x280
 800c2da:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	1e5a      	subs	r2, r3, #1
 800c2e0:	617a      	str	r2, [r7, #20]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d10b      	bne.n	800c2fe <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	22ff      	movs	r2, #255	; 0xff
 800c2ec:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	2203      	movs	r2, #3
 800c2f2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c2fa:	2303      	movs	r3, #3
 800c2fc:	e035      	b.n	800c36a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	68db      	ldr	r3, [r3, #12]
 800c304:	f003 0302 	and.w	r3, r3, #2
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d0e7      	beq.n	800c2dc <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	69fa      	ldr	r2, [r7, #28]
 800c312:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	69ba      	ldr	r2, [r7, #24]
 800c31a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	689a      	ldr	r2, [r3, #8]
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c32a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	689a      	ldr	r2, [r3, #8]
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c33a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800c33c:	4b0f      	ldr	r3, [pc, #60]	; (800c37c <HAL_RTC_SetAlarm_IT+0x26c>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	4a0e      	ldr	r2, [pc, #56]	; (800c37c <HAL_RTC_SetAlarm_IT+0x26c>)
 800c342:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c346:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 800c348:	4b0c      	ldr	r3, [pc, #48]	; (800c37c <HAL_RTC_SetAlarm_IT+0x26c>)
 800c34a:	689b      	ldr	r3, [r3, #8]
 800c34c:	4a0b      	ldr	r2, [pc, #44]	; (800c37c <HAL_RTC_SetAlarm_IT+0x26c>)
 800c34e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c352:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	22ff      	movs	r2, #255	; 0xff
 800c35a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2201      	movs	r2, #1
 800c360:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2200      	movs	r2, #0
 800c366:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c368:	2300      	movs	r3, #0
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3724      	adds	r7, #36	; 0x24
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd90      	pop	{r4, r7, pc}
 800c372:	bf00      	nop
 800c374:	2000003c 	.word	0x2000003c
 800c378:	10624dd3 	.word	0x10624dd3
 800c37c:	40013c00 	.word	0x40013c00

0800c380 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b082      	sub	sp, #8
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	689b      	ldr	r3, [r3, #8]
 800c38e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c392:	2b00      	cmp	r3, #0
 800c394:	d012      	beq.n	800c3bc <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	68db      	ldr	r3, [r3, #12]
 800c39c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d00b      	beq.n	800c3bc <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f000 f831 	bl	800c40c <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	68db      	ldr	r3, [r3, #12]
 800c3b0:	b2da      	uxtb	r2, r3
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800c3ba:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	689b      	ldr	r3, [r3, #8]
 800c3c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d012      	beq.n	800c3f0 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	68db      	ldr	r3, [r3, #12]
 800c3d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d00b      	beq.n	800c3f0 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f000 f9ab 	bl	800c734 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	68db      	ldr	r3, [r3, #12]
 800c3e4:	b2da      	uxtb	r2, r3
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f462 7220 	orn	r2, r2, #640	; 0x280
 800c3ee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800c3f0:	4b05      	ldr	r3, [pc, #20]	; (800c408 <HAL_RTC_AlarmIRQHandler+0x88>)
 800c3f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c3f6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2201      	movs	r2, #1
 800c3fc:	775a      	strb	r2, [r3, #29]
}
 800c3fe:	bf00      	nop
 800c400:	3708      	adds	r7, #8
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
 800c406:	bf00      	nop
 800c408:	40013c00 	.word	0x40013c00

0800c40c <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800c40c:	b480      	push	{r7}
 800c40e:	b083      	sub	sp, #12
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800c414:	bf00      	nop
 800c416:	370c      	adds	r7, #12
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr

0800c420 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b084      	sub	sp, #16
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c428:	2300      	movs	r3, #0
 800c42a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	68da      	ldr	r2, [r3, #12]
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c43a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c43c:	f7fc ff66 	bl	800930c <HAL_GetTick>
 800c440:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c442:	e009      	b.n	800c458 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c444:	f7fc ff62 	bl	800930c <HAL_GetTick>
 800c448:	4602      	mov	r2, r0
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	1ad3      	subs	r3, r2, r3
 800c44e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c452:	d901      	bls.n	800c458 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800c454:	2303      	movs	r3, #3
 800c456:	e007      	b.n	800c468 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	68db      	ldr	r3, [r3, #12]
 800c45e:	f003 0320 	and.w	r3, r3, #32
 800c462:	2b00      	cmp	r3, #0
 800c464:	d0ee      	beq.n	800c444 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800c466:	2300      	movs	r3, #0
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3710      	adds	r7, #16
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b084      	sub	sp, #16
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c478:	2300      	movs	r3, #0
 800c47a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	68db      	ldr	r3, [r3, #12]
 800c482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c486:	2b00      	cmp	r3, #0
 800c488:	d119      	bne.n	800c4be <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f04f 32ff 	mov.w	r2, #4294967295
 800c492:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c494:	f7fc ff3a 	bl	800930c <HAL_GetTick>
 800c498:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c49a:	e009      	b.n	800c4b0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c49c:	f7fc ff36 	bl	800930c <HAL_GetTick>
 800c4a0:	4602      	mov	r2, r0
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	1ad3      	subs	r3, r2, r3
 800c4a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c4aa:	d901      	bls.n	800c4b0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800c4ac:	2303      	movs	r3, #3
 800c4ae:	e007      	b.n	800c4c0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	68db      	ldr	r3, [r3, #12]
 800c4b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d0ee      	beq.n	800c49c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800c4be:	2300      	movs	r3, #0
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3710      	adds	r7, #16
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b085      	sub	sp, #20
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800c4d6:	e005      	b.n	800c4e4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	3301      	adds	r3, #1
 800c4dc:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800c4de:	79fb      	ldrb	r3, [r7, #7]
 800c4e0:	3b0a      	subs	r3, #10
 800c4e2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800c4e4:	79fb      	ldrb	r3, [r7, #7]
 800c4e6:	2b09      	cmp	r3, #9
 800c4e8:	d8f6      	bhi.n	800c4d8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	b2db      	uxtb	r3, r3
 800c4ee:	011b      	lsls	r3, r3, #4
 800c4f0:	b2da      	uxtb	r2, r3
 800c4f2:	79fb      	ldrb	r3, [r7, #7]
 800c4f4:	4313      	orrs	r3, r2
 800c4f6:	b2db      	uxtb	r3, r3
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3714      	adds	r7, #20
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr

0800c504 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800c504:	b480      	push	{r7}
 800c506:	b087      	sub	sp, #28
 800c508:	af00      	add	r7, sp, #0
 800c50a:	60f8      	str	r0, [r7, #12]
 800c50c:	60b9      	str	r1, [r7, #8]
 800c50e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	7f1b      	ldrb	r3, [r3, #28]
 800c514:	2b01      	cmp	r3, #1
 800c516:	d101      	bne.n	800c51c <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 800c518:	2302      	movs	r3, #2
 800c51a:	e0a6      	b.n	800c66a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	2201      	movs	r2, #1
 800c520:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	2202      	movs	r2, #2
 800c526:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	22ca      	movs	r2, #202	; 0xca
 800c52e:	625a      	str	r2, [r3, #36]	; 0x24
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	2253      	movs	r2, #83	; 0x53
 800c536:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	689b      	ldr	r3, [r3, #8]
 800c53e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c542:	2b00      	cmp	r3, #0
 800c544:	d022      	beq.n	800c58c <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800c546:	4b4c      	ldr	r3, [pc, #304]	; (800c678 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	4a4c      	ldr	r2, [pc, #304]	; (800c67c <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800c54c:	fba2 2303 	umull	r2, r3, r2, r3
 800c550:	0adb      	lsrs	r3, r3, #11
 800c552:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c556:	fb02 f303 	mul.w	r3, r2, r3
 800c55a:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	1e5a      	subs	r2, r3, #1
 800c560:	617a      	str	r2, [r7, #20]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d10b      	bne.n	800c57e <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	22ff      	movs	r2, #255	; 0xff
 800c56c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	2203      	movs	r2, #3
 800c572:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	2200      	movs	r2, #0
 800c578:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c57a:	2303      	movs	r3, #3
 800c57c:	e075      	b.n	800c66a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	68db      	ldr	r3, [r3, #12]
 800c584:	f003 0304 	and.w	r3, r3, #4
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d1e7      	bne.n	800c55c <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	689a      	ldr	r2, [r3, #8]
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c59a:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800c59c:	4b36      	ldr	r3, [pc, #216]	; (800c678 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4a36      	ldr	r2, [pc, #216]	; (800c67c <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800c5a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c5a6:	0adb      	lsrs	r3, r3, #11
 800c5a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c5ac:	fb02 f303 	mul.w	r3, r2, r3
 800c5b0:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	1e5a      	subs	r2, r3, #1
 800c5b6:	617a      	str	r2, [r7, #20]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d10b      	bne.n	800c5d4 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	22ff      	movs	r2, #255	; 0xff
 800c5c2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	2203      	movs	r2, #3
 800c5c8:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800c5d0:	2303      	movs	r3, #3
 800c5d2:	e04a      	b.n	800c66a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	68db      	ldr	r3, [r3, #12]
 800c5da:	f003 0304 	and.w	r3, r3, #4
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d0e7      	beq.n	800c5b2 <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	68ba      	ldr	r2, [r7, #8]
 800c5e8:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	689a      	ldr	r2, [r3, #8]
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f022 0207 	bic.w	r2, r2, #7
 800c5f8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	6899      	ldr	r1, [r3, #8]
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	687a      	ldr	r2, [r7, #4]
 800c606:	430a      	orrs	r2, r1
 800c608:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800c60a:	4b1d      	ldr	r3, [pc, #116]	; (800c680 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	4a1c      	ldr	r2, [pc, #112]	; (800c680 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800c610:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c614:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800c616:	4b1a      	ldr	r3, [pc, #104]	; (800c680 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800c618:	689b      	ldr	r3, [r3, #8]
 800c61a:	4a19      	ldr	r2, [pc, #100]	; (800c680 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800c61c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c620:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	68db      	ldr	r3, [r3, #12]
 800c628:	b2da      	uxtb	r2, r3
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800c632:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	689a      	ldr	r2, [r3, #8]
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c642:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	689a      	ldr	r2, [r3, #8]
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c652:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	22ff      	movs	r2, #255	; 0xff
 800c65a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2201      	movs	r2, #1
 800c660:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2200      	movs	r2, #0
 800c666:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c668:	2300      	movs	r3, #0
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	371c      	adds	r7, #28
 800c66e:	46bd      	mov	sp, r7
 800c670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c674:	4770      	bx	lr
 800c676:	bf00      	nop
 800c678:	2000003c 	.word	0x2000003c
 800c67c:	10624dd3 	.word	0x10624dd3
 800c680:	40013c00 	.word	0x40013c00

0800c684 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b084      	sub	sp, #16
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c68c:	2300      	movs	r3, #0
 800c68e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	7f1b      	ldrb	r3, [r3, #28]
 800c694:	2b01      	cmp	r3, #1
 800c696:	d101      	bne.n	800c69c <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 800c698:	2302      	movs	r3, #2
 800c69a:	e047      	b.n	800c72c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2201      	movs	r2, #1
 800c6a0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2202      	movs	r2, #2
 800c6a6:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	22ca      	movs	r2, #202	; 0xca
 800c6ae:	625a      	str	r2, [r3, #36]	; 0x24
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	2253      	movs	r2, #83	; 0x53
 800c6b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	689a      	ldr	r2, [r3, #8]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c6c6:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	689a      	ldr	r2, [r3, #8]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c6d6:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c6d8:	f7fc fe18 	bl	800930c <HAL_GetTick>
 800c6dc:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800c6de:	e013      	b.n	800c708 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c6e0:	f7fc fe14 	bl	800930c <HAL_GetTick>
 800c6e4:	4602      	mov	r2, r0
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	1ad3      	subs	r3, r2, r3
 800c6ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c6ee:	d90b      	bls.n	800c708 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	22ff      	movs	r2, #255	; 0xff
 800c6f6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2203      	movs	r2, #3
 800c6fc:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2200      	movs	r2, #0
 800c702:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800c704:	2303      	movs	r3, #3
 800c706:	e011      	b.n	800c72c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	68db      	ldr	r3, [r3, #12]
 800c70e:	f003 0304 	and.w	r3, r3, #4
 800c712:	2b00      	cmp	r3, #0
 800c714:	d0e4      	beq.n	800c6e0 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	22ff      	movs	r2, #255	; 0xff
 800c71c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2201      	movs	r2, #1
 800c722:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2200      	movs	r2, #0
 800c728:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c72a:	2300      	movs	r3, #0
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3710      	adds	r7, #16
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800c734:	b480      	push	{r7}
 800c736:	b083      	sub	sp, #12
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 800c73c:	bf00      	nop
 800c73e:	370c      	adds	r7, #12
 800c740:	46bd      	mov	sp, r7
 800c742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c746:	4770      	bx	lr

0800c748 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d101      	bne.n	800c75a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c756:	2301      	movs	r3, #1
 800c758:	e07b      	b.n	800c852 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d108      	bne.n	800c774 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	685b      	ldr	r3, [r3, #4]
 800c766:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c76a:	d009      	beq.n	800c780 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2200      	movs	r2, #0
 800c770:	61da      	str	r2, [r3, #28]
 800c772:	e005      	b.n	800c780 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2200      	movs	r2, #0
 800c778:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2200      	movs	r2, #0
 800c77e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2200      	movs	r2, #0
 800c784:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c78c:	b2db      	uxtb	r3, r3
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d106      	bne.n	800c7a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2200      	movs	r2, #0
 800c796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f7f5 ff54 	bl	8002648 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2202      	movs	r2, #2
 800c7a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	681a      	ldr	r2, [r3, #0]
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c7b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	685b      	ldr	r3, [r3, #4]
 800c7bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	689b      	ldr	r3, [r3, #8]
 800c7c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c7c8:	431a      	orrs	r2, r3
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	68db      	ldr	r3, [r3, #12]
 800c7ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c7d2:	431a      	orrs	r2, r3
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	691b      	ldr	r3, [r3, #16]
 800c7d8:	f003 0302 	and.w	r3, r3, #2
 800c7dc:	431a      	orrs	r2, r3
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	695b      	ldr	r3, [r3, #20]
 800c7e2:	f003 0301 	and.w	r3, r3, #1
 800c7e6:	431a      	orrs	r2, r3
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	699b      	ldr	r3, [r3, #24]
 800c7ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c7f0:	431a      	orrs	r2, r3
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	69db      	ldr	r3, [r3, #28]
 800c7f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c7fa:	431a      	orrs	r2, r3
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	6a1b      	ldr	r3, [r3, #32]
 800c800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c804:	ea42 0103 	orr.w	r1, r2, r3
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c80c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	430a      	orrs	r2, r1
 800c816:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	699b      	ldr	r3, [r3, #24]
 800c81c:	0c1b      	lsrs	r3, r3, #16
 800c81e:	f003 0104 	and.w	r1, r3, #4
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c826:	f003 0210 	and.w	r2, r3, #16
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	430a      	orrs	r2, r1
 800c830:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	69da      	ldr	r2, [r3, #28]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c840:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2200      	movs	r2, #0
 800c846:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2201      	movs	r2, #1
 800c84c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c850:	2300      	movs	r3, #0
}
 800c852:	4618      	mov	r0, r3
 800c854:	3708      	adds	r7, #8
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}

0800c85a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c85a:	b580      	push	{r7, lr}
 800c85c:	b088      	sub	sp, #32
 800c85e:	af00      	add	r7, sp, #0
 800c860:	60f8      	str	r0, [r7, #12]
 800c862:	60b9      	str	r1, [r7, #8]
 800c864:	603b      	str	r3, [r7, #0]
 800c866:	4613      	mov	r3, r2
 800c868:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c86a:	2300      	movs	r3, #0
 800c86c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c874:	2b01      	cmp	r3, #1
 800c876:	d101      	bne.n	800c87c <HAL_SPI_Transmit+0x22>
 800c878:	2302      	movs	r3, #2
 800c87a:	e126      	b.n	800caca <HAL_SPI_Transmit+0x270>
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	2201      	movs	r2, #1
 800c880:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c884:	f7fc fd42 	bl	800930c <HAL_GetTick>
 800c888:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c88a:	88fb      	ldrh	r3, [r7, #6]
 800c88c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c894:	b2db      	uxtb	r3, r3
 800c896:	2b01      	cmp	r3, #1
 800c898:	d002      	beq.n	800c8a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c89a:	2302      	movs	r3, #2
 800c89c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c89e:	e10b      	b.n	800cab8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d002      	beq.n	800c8ac <HAL_SPI_Transmit+0x52>
 800c8a6:	88fb      	ldrh	r3, [r7, #6]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d102      	bne.n	800c8b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c8b0:	e102      	b.n	800cab8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	2203      	movs	r2, #3
 800c8b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	2200      	movs	r2, #0
 800c8be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	68ba      	ldr	r2, [r7, #8]
 800c8c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	88fa      	ldrh	r2, [r7, #6]
 800c8ca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	88fa      	ldrh	r2, [r7, #6]
 800c8d0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	689b      	ldr	r3, [r3, #8]
 800c8f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c8f8:	d10f      	bne.n	800c91a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	681a      	ldr	r2, [r3, #0]
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c908:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	681a      	ldr	r2, [r3, #0]
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c918:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c924:	2b40      	cmp	r3, #64	; 0x40
 800c926:	d007      	beq.n	800c938 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	681a      	ldr	r2, [r3, #0]
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c936:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	68db      	ldr	r3, [r3, #12]
 800c93c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c940:	d14b      	bne.n	800c9da <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	685b      	ldr	r3, [r3, #4]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d002      	beq.n	800c950 <HAL_SPI_Transmit+0xf6>
 800c94a:	8afb      	ldrh	r3, [r7, #22]
 800c94c:	2b01      	cmp	r3, #1
 800c94e:	d13e      	bne.n	800c9ce <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c954:	881a      	ldrh	r2, [r3, #0]
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c960:	1c9a      	adds	r2, r3, #2
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c96a:	b29b      	uxth	r3, r3
 800c96c:	3b01      	subs	r3, #1
 800c96e:	b29a      	uxth	r2, r3
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c974:	e02b      	b.n	800c9ce <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	689b      	ldr	r3, [r3, #8]
 800c97c:	f003 0302 	and.w	r3, r3, #2
 800c980:	2b02      	cmp	r3, #2
 800c982:	d112      	bne.n	800c9aa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c988:	881a      	ldrh	r2, [r3, #0]
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c994:	1c9a      	adds	r2, r3, #2
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c99e:	b29b      	uxth	r3, r3
 800c9a0:	3b01      	subs	r3, #1
 800c9a2:	b29a      	uxth	r2, r3
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	86da      	strh	r2, [r3, #54]	; 0x36
 800c9a8:	e011      	b.n	800c9ce <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c9aa:	f7fc fcaf 	bl	800930c <HAL_GetTick>
 800c9ae:	4602      	mov	r2, r0
 800c9b0:	69bb      	ldr	r3, [r7, #24]
 800c9b2:	1ad3      	subs	r3, r2, r3
 800c9b4:	683a      	ldr	r2, [r7, #0]
 800c9b6:	429a      	cmp	r2, r3
 800c9b8:	d803      	bhi.n	800c9c2 <HAL_SPI_Transmit+0x168>
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9c0:	d102      	bne.n	800c9c8 <HAL_SPI_Transmit+0x16e>
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d102      	bne.n	800c9ce <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800c9c8:	2303      	movs	r3, #3
 800c9ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c9cc:	e074      	b.n	800cab8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c9d2:	b29b      	uxth	r3, r3
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d1ce      	bne.n	800c976 <HAL_SPI_Transmit+0x11c>
 800c9d8:	e04c      	b.n	800ca74 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	685b      	ldr	r3, [r3, #4]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d002      	beq.n	800c9e8 <HAL_SPI_Transmit+0x18e>
 800c9e2:	8afb      	ldrh	r3, [r7, #22]
 800c9e4:	2b01      	cmp	r3, #1
 800c9e6:	d140      	bne.n	800ca6a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	330c      	adds	r3, #12
 800c9f2:	7812      	ldrb	r2, [r2, #0]
 800c9f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9fa:	1c5a      	adds	r2, r3, #1
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ca04:	b29b      	uxth	r3, r3
 800ca06:	3b01      	subs	r3, #1
 800ca08:	b29a      	uxth	r2, r3
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800ca0e:	e02c      	b.n	800ca6a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	689b      	ldr	r3, [r3, #8]
 800ca16:	f003 0302 	and.w	r3, r3, #2
 800ca1a:	2b02      	cmp	r3, #2
 800ca1c:	d113      	bne.n	800ca46 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	330c      	adds	r3, #12
 800ca28:	7812      	ldrb	r2, [r2, #0]
 800ca2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca30:	1c5a      	adds	r2, r3, #1
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ca3a:	b29b      	uxth	r3, r3
 800ca3c:	3b01      	subs	r3, #1
 800ca3e:	b29a      	uxth	r2, r3
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	86da      	strh	r2, [r3, #54]	; 0x36
 800ca44:	e011      	b.n	800ca6a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ca46:	f7fc fc61 	bl	800930c <HAL_GetTick>
 800ca4a:	4602      	mov	r2, r0
 800ca4c:	69bb      	ldr	r3, [r7, #24]
 800ca4e:	1ad3      	subs	r3, r2, r3
 800ca50:	683a      	ldr	r2, [r7, #0]
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d803      	bhi.n	800ca5e <HAL_SPI_Transmit+0x204>
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca5c:	d102      	bne.n	800ca64 <HAL_SPI_Transmit+0x20a>
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d102      	bne.n	800ca6a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800ca64:	2303      	movs	r3, #3
 800ca66:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ca68:	e026      	b.n	800cab8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ca6e:	b29b      	uxth	r3, r3
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d1cd      	bne.n	800ca10 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ca74:	69ba      	ldr	r2, [r7, #24]
 800ca76:	6839      	ldr	r1, [r7, #0]
 800ca78:	68f8      	ldr	r0, [r7, #12]
 800ca7a:	f000 fbcb 	bl	800d214 <SPI_EndRxTxTransaction>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d002      	beq.n	800ca8a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2220      	movs	r2, #32
 800ca88:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	689b      	ldr	r3, [r3, #8]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d10a      	bne.n	800caa8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ca92:	2300      	movs	r3, #0
 800ca94:	613b      	str	r3, [r7, #16]
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	68db      	ldr	r3, [r3, #12]
 800ca9c:	613b      	str	r3, [r7, #16]
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	689b      	ldr	r3, [r3, #8]
 800caa4:	613b      	str	r3, [r7, #16]
 800caa6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800caac:	2b00      	cmp	r3, #0
 800caae:	d002      	beq.n	800cab6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800cab0:	2301      	movs	r3, #1
 800cab2:	77fb      	strb	r3, [r7, #31]
 800cab4:	e000      	b.n	800cab8 <HAL_SPI_Transmit+0x25e>
  }

error:
 800cab6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	2201      	movs	r2, #1
 800cabc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	2200      	movs	r2, #0
 800cac4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800cac8:	7ffb      	ldrb	r3, [r7, #31]
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3720      	adds	r7, #32
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}

0800cad2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cad2:	b580      	push	{r7, lr}
 800cad4:	b088      	sub	sp, #32
 800cad6:	af02      	add	r7, sp, #8
 800cad8:	60f8      	str	r0, [r7, #12]
 800cada:	60b9      	str	r1, [r7, #8]
 800cadc:	603b      	str	r3, [r7, #0]
 800cade:	4613      	mov	r3, r2
 800cae0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cae2:	2300      	movs	r3, #0
 800cae4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	685b      	ldr	r3, [r3, #4]
 800caea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800caee:	d112      	bne.n	800cb16 <HAL_SPI_Receive+0x44>
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	689b      	ldr	r3, [r3, #8]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d10e      	bne.n	800cb16 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	2204      	movs	r2, #4
 800cafc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800cb00:	88fa      	ldrh	r2, [r7, #6]
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	9300      	str	r3, [sp, #0]
 800cb06:	4613      	mov	r3, r2
 800cb08:	68ba      	ldr	r2, [r7, #8]
 800cb0a:	68b9      	ldr	r1, [r7, #8]
 800cb0c:	68f8      	ldr	r0, [r7, #12]
 800cb0e:	f000 f8f1 	bl	800ccf4 <HAL_SPI_TransmitReceive>
 800cb12:	4603      	mov	r3, r0
 800cb14:	e0ea      	b.n	800ccec <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	d101      	bne.n	800cb24 <HAL_SPI_Receive+0x52>
 800cb20:	2302      	movs	r3, #2
 800cb22:	e0e3      	b.n	800ccec <HAL_SPI_Receive+0x21a>
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2201      	movs	r2, #1
 800cb28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cb2c:	f7fc fbee 	bl	800930c <HAL_GetTick>
 800cb30:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	2b01      	cmp	r3, #1
 800cb3c:	d002      	beq.n	800cb44 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800cb3e:	2302      	movs	r3, #2
 800cb40:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cb42:	e0ca      	b.n	800ccda <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d002      	beq.n	800cb50 <HAL_SPI_Receive+0x7e>
 800cb4a:	88fb      	ldrh	r3, [r7, #6]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d102      	bne.n	800cb56 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800cb50:	2301      	movs	r3, #1
 800cb52:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cb54:	e0c1      	b.n	800ccda <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	2204      	movs	r2, #4
 800cb5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	2200      	movs	r2, #0
 800cb62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	68ba      	ldr	r2, [r7, #8]
 800cb68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	88fa      	ldrh	r2, [r7, #6]
 800cb6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	88fa      	ldrh	r2, [r7, #6]
 800cb74:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	2200      	movs	r2, #0
 800cb80:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	2200      	movs	r2, #0
 800cb86:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	2200      	movs	r2, #0
 800cb92:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	689b      	ldr	r3, [r3, #8]
 800cb98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb9c:	d10f      	bne.n	800cbbe <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	681a      	ldr	r2, [r3, #0]
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cbac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	681a      	ldr	r2, [r3, #0]
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cbbc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbc8:	2b40      	cmp	r3, #64	; 0x40
 800cbca:	d007      	beq.n	800cbdc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	681a      	ldr	r2, [r3, #0]
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cbda:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	68db      	ldr	r3, [r3, #12]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d162      	bne.n	800ccaa <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800cbe4:	e02e      	b.n	800cc44 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	689b      	ldr	r3, [r3, #8]
 800cbec:	f003 0301 	and.w	r3, r3, #1
 800cbf0:	2b01      	cmp	r3, #1
 800cbf2:	d115      	bne.n	800cc20 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f103 020c 	add.w	r2, r3, #12
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc00:	7812      	ldrb	r2, [r2, #0]
 800cc02:	b2d2      	uxtb	r2, r2
 800cc04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc0a:	1c5a      	adds	r2, r3, #1
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cc14:	b29b      	uxth	r3, r3
 800cc16:	3b01      	subs	r3, #1
 800cc18:	b29a      	uxth	r2, r3
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cc1e:	e011      	b.n	800cc44 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cc20:	f7fc fb74 	bl	800930c <HAL_GetTick>
 800cc24:	4602      	mov	r2, r0
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	1ad3      	subs	r3, r2, r3
 800cc2a:	683a      	ldr	r2, [r7, #0]
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d803      	bhi.n	800cc38 <HAL_SPI_Receive+0x166>
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc36:	d102      	bne.n	800cc3e <HAL_SPI_Receive+0x16c>
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d102      	bne.n	800cc44 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800cc3e:	2303      	movs	r3, #3
 800cc40:	75fb      	strb	r3, [r7, #23]
          goto error;
 800cc42:	e04a      	b.n	800ccda <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cc48:	b29b      	uxth	r3, r3
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d1cb      	bne.n	800cbe6 <HAL_SPI_Receive+0x114>
 800cc4e:	e031      	b.n	800ccb4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	689b      	ldr	r3, [r3, #8]
 800cc56:	f003 0301 	and.w	r3, r3, #1
 800cc5a:	2b01      	cmp	r3, #1
 800cc5c:	d113      	bne.n	800cc86 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	68da      	ldr	r2, [r3, #12]
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc68:	b292      	uxth	r2, r2
 800cc6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc70:	1c9a      	adds	r2, r3, #2
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cc7a:	b29b      	uxth	r3, r3
 800cc7c:	3b01      	subs	r3, #1
 800cc7e:	b29a      	uxth	r2, r3
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cc84:	e011      	b.n	800ccaa <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cc86:	f7fc fb41 	bl	800930c <HAL_GetTick>
 800cc8a:	4602      	mov	r2, r0
 800cc8c:	693b      	ldr	r3, [r7, #16]
 800cc8e:	1ad3      	subs	r3, r2, r3
 800cc90:	683a      	ldr	r2, [r7, #0]
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d803      	bhi.n	800cc9e <HAL_SPI_Receive+0x1cc>
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc9c:	d102      	bne.n	800cca4 <HAL_SPI_Receive+0x1d2>
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d102      	bne.n	800ccaa <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800cca4:	2303      	movs	r3, #3
 800cca6:	75fb      	strb	r3, [r7, #23]
          goto error;
 800cca8:	e017      	b.n	800ccda <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ccae:	b29b      	uxth	r3, r3
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d1cd      	bne.n	800cc50 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ccb4:	693a      	ldr	r2, [r7, #16]
 800ccb6:	6839      	ldr	r1, [r7, #0]
 800ccb8:	68f8      	ldr	r0, [r7, #12]
 800ccba:	f000 fa45 	bl	800d148 <SPI_EndRxTransaction>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d002      	beq.n	800ccca <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	2220      	movs	r2, #32
 800ccc8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d002      	beq.n	800ccd8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	75fb      	strb	r3, [r7, #23]
 800ccd6:	e000      	b.n	800ccda <HAL_SPI_Receive+0x208>
  }

error :
 800ccd8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	2201      	movs	r2, #1
 800ccde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2200      	movs	r2, #0
 800cce6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ccea:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3718      	adds	r7, #24
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}

0800ccf4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b08c      	sub	sp, #48	; 0x30
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	60f8      	str	r0, [r7, #12]
 800ccfc:	60b9      	str	r1, [r7, #8]
 800ccfe:	607a      	str	r2, [r7, #4]
 800cd00:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800cd02:	2301      	movs	r3, #1
 800cd04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800cd06:	2300      	movs	r3, #0
 800cd08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cd12:	2b01      	cmp	r3, #1
 800cd14:	d101      	bne.n	800cd1a <HAL_SPI_TransmitReceive+0x26>
 800cd16:	2302      	movs	r3, #2
 800cd18:	e18a      	b.n	800d030 <HAL_SPI_TransmitReceive+0x33c>
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	2201      	movs	r2, #1
 800cd1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cd22:	f7fc faf3 	bl	800930c <HAL_GetTick>
 800cd26:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cd2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	685b      	ldr	r3, [r3, #4]
 800cd36:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800cd38:	887b      	ldrh	r3, [r7, #2]
 800cd3a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800cd3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cd40:	2b01      	cmp	r3, #1
 800cd42:	d00f      	beq.n	800cd64 <HAL_SPI_TransmitReceive+0x70>
 800cd44:	69fb      	ldr	r3, [r7, #28]
 800cd46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cd4a:	d107      	bne.n	800cd5c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	689b      	ldr	r3, [r3, #8]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d103      	bne.n	800cd5c <HAL_SPI_TransmitReceive+0x68>
 800cd54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cd58:	2b04      	cmp	r3, #4
 800cd5a:	d003      	beq.n	800cd64 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800cd5c:	2302      	movs	r3, #2
 800cd5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800cd62:	e15b      	b.n	800d01c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d005      	beq.n	800cd76 <HAL_SPI_TransmitReceive+0x82>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d002      	beq.n	800cd76 <HAL_SPI_TransmitReceive+0x82>
 800cd70:	887b      	ldrh	r3, [r7, #2]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d103      	bne.n	800cd7e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800cd76:	2301      	movs	r3, #1
 800cd78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800cd7c:	e14e      	b.n	800d01c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cd84:	b2db      	uxtb	r3, r3
 800cd86:	2b04      	cmp	r3, #4
 800cd88:	d003      	beq.n	800cd92 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	2205      	movs	r2, #5
 800cd8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	2200      	movs	r2, #0
 800cd96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	687a      	ldr	r2, [r7, #4]
 800cd9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	887a      	ldrh	r2, [r7, #2]
 800cda2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	887a      	ldrh	r2, [r7, #2]
 800cda8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	68ba      	ldr	r2, [r7, #8]
 800cdae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	887a      	ldrh	r2, [r7, #2]
 800cdb4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	887a      	ldrh	r2, [r7, #2]
 800cdba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdd2:	2b40      	cmp	r3, #64	; 0x40
 800cdd4:	d007      	beq.n	800cde6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	681a      	ldr	r2, [r3, #0]
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cde4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	68db      	ldr	r3, [r3, #12]
 800cdea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cdee:	d178      	bne.n	800cee2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	685b      	ldr	r3, [r3, #4]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d002      	beq.n	800cdfe <HAL_SPI_TransmitReceive+0x10a>
 800cdf8:	8b7b      	ldrh	r3, [r7, #26]
 800cdfa:	2b01      	cmp	r3, #1
 800cdfc:	d166      	bne.n	800cecc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce02:	881a      	ldrh	r2, [r3, #0]
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce0e:	1c9a      	adds	r2, r3, #2
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ce18:	b29b      	uxth	r3, r3
 800ce1a:	3b01      	subs	r3, #1
 800ce1c:	b29a      	uxth	r2, r3
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ce22:	e053      	b.n	800cecc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	689b      	ldr	r3, [r3, #8]
 800ce2a:	f003 0302 	and.w	r3, r3, #2
 800ce2e:	2b02      	cmp	r3, #2
 800ce30:	d11b      	bne.n	800ce6a <HAL_SPI_TransmitReceive+0x176>
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ce36:	b29b      	uxth	r3, r3
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d016      	beq.n	800ce6a <HAL_SPI_TransmitReceive+0x176>
 800ce3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce3e:	2b01      	cmp	r3, #1
 800ce40:	d113      	bne.n	800ce6a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce46:	881a      	ldrh	r2, [r3, #0]
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce52:	1c9a      	adds	r2, r3, #2
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ce5c:	b29b      	uxth	r3, r3
 800ce5e:	3b01      	subs	r3, #1
 800ce60:	b29a      	uxth	r2, r3
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ce66:	2300      	movs	r3, #0
 800ce68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	689b      	ldr	r3, [r3, #8]
 800ce70:	f003 0301 	and.w	r3, r3, #1
 800ce74:	2b01      	cmp	r3, #1
 800ce76:	d119      	bne.n	800ceac <HAL_SPI_TransmitReceive+0x1b8>
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ce7c:	b29b      	uxth	r3, r3
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d014      	beq.n	800ceac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	68da      	ldr	r2, [r3, #12]
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce8c:	b292      	uxth	r2, r2
 800ce8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce94:	1c9a      	adds	r2, r3, #2
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ce9e:	b29b      	uxth	r3, r3
 800cea0:	3b01      	subs	r3, #1
 800cea2:	b29a      	uxth	r2, r3
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800cea8:	2301      	movs	r3, #1
 800ceaa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ceac:	f7fc fa2e 	bl	800930c <HAL_GetTick>
 800ceb0:	4602      	mov	r2, r0
 800ceb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb4:	1ad3      	subs	r3, r2, r3
 800ceb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d807      	bhi.n	800cecc <HAL_SPI_TransmitReceive+0x1d8>
 800cebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cec2:	d003      	beq.n	800cecc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800cec4:	2303      	movs	r3, #3
 800cec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ceca:	e0a7      	b.n	800d01c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ced0:	b29b      	uxth	r3, r3
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d1a6      	bne.n	800ce24 <HAL_SPI_TransmitReceive+0x130>
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ceda:	b29b      	uxth	r3, r3
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d1a1      	bne.n	800ce24 <HAL_SPI_TransmitReceive+0x130>
 800cee0:	e07c      	b.n	800cfdc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	685b      	ldr	r3, [r3, #4]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d002      	beq.n	800cef0 <HAL_SPI_TransmitReceive+0x1fc>
 800ceea:	8b7b      	ldrh	r3, [r7, #26]
 800ceec:	2b01      	cmp	r3, #1
 800ceee:	d16b      	bne.n	800cfc8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	330c      	adds	r3, #12
 800cefa:	7812      	ldrb	r2, [r2, #0]
 800cefc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf02:	1c5a      	adds	r2, r3, #1
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cf0c:	b29b      	uxth	r3, r3
 800cf0e:	3b01      	subs	r3, #1
 800cf10:	b29a      	uxth	r2, r3
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cf16:	e057      	b.n	800cfc8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	689b      	ldr	r3, [r3, #8]
 800cf1e:	f003 0302 	and.w	r3, r3, #2
 800cf22:	2b02      	cmp	r3, #2
 800cf24:	d11c      	bne.n	800cf60 <HAL_SPI_TransmitReceive+0x26c>
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cf2a:	b29b      	uxth	r3, r3
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d017      	beq.n	800cf60 <HAL_SPI_TransmitReceive+0x26c>
 800cf30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf32:	2b01      	cmp	r3, #1
 800cf34:	d114      	bne.n	800cf60 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	330c      	adds	r3, #12
 800cf40:	7812      	ldrb	r2, [r2, #0]
 800cf42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf48:	1c5a      	adds	r2, r3, #1
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cf52:	b29b      	uxth	r3, r3
 800cf54:	3b01      	subs	r3, #1
 800cf56:	b29a      	uxth	r2, r3
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	689b      	ldr	r3, [r3, #8]
 800cf66:	f003 0301 	and.w	r3, r3, #1
 800cf6a:	2b01      	cmp	r3, #1
 800cf6c:	d119      	bne.n	800cfa2 <HAL_SPI_TransmitReceive+0x2ae>
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cf72:	b29b      	uxth	r3, r3
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d014      	beq.n	800cfa2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	68da      	ldr	r2, [r3, #12]
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf82:	b2d2      	uxtb	r2, r2
 800cf84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf8a:	1c5a      	adds	r2, r3, #1
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cf94:	b29b      	uxth	r3, r3
 800cf96:	3b01      	subs	r3, #1
 800cf98:	b29a      	uxth	r2, r3
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800cfa2:	f7fc f9b3 	bl	800930c <HAL_GetTick>
 800cfa6:	4602      	mov	r2, r0
 800cfa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfaa:	1ad3      	subs	r3, r2, r3
 800cfac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d803      	bhi.n	800cfba <HAL_SPI_TransmitReceive+0x2c6>
 800cfb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfb8:	d102      	bne.n	800cfc0 <HAL_SPI_TransmitReceive+0x2cc>
 800cfba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d103      	bne.n	800cfc8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800cfc0:	2303      	movs	r3, #3
 800cfc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800cfc6:	e029      	b.n	800d01c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cfcc:	b29b      	uxth	r3, r3
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d1a2      	bne.n	800cf18 <HAL_SPI_TransmitReceive+0x224>
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cfd6:	b29b      	uxth	r3, r3
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d19d      	bne.n	800cf18 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cfdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cfe0:	68f8      	ldr	r0, [r7, #12]
 800cfe2:	f000 f917 	bl	800d214 <SPI_EndRxTxTransaction>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d006      	beq.n	800cffa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800cfec:	2301      	movs	r3, #1
 800cfee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	2220      	movs	r2, #32
 800cff6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800cff8:	e010      	b.n	800d01c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	689b      	ldr	r3, [r3, #8]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d10b      	bne.n	800d01a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d002:	2300      	movs	r3, #0
 800d004:	617b      	str	r3, [r7, #20]
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	68db      	ldr	r3, [r3, #12]
 800d00c:	617b      	str	r3, [r7, #20]
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	689b      	ldr	r3, [r3, #8]
 800d014:	617b      	str	r3, [r7, #20]
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	e000      	b.n	800d01c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800d01a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	2201      	movs	r2, #1
 800d020:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	2200      	movs	r2, #0
 800d028:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d02c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d030:	4618      	mov	r0, r3
 800d032:	3730      	adds	r7, #48	; 0x30
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}

0800d038 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b088      	sub	sp, #32
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	60f8      	str	r0, [r7, #12]
 800d040:	60b9      	str	r1, [r7, #8]
 800d042:	603b      	str	r3, [r7, #0]
 800d044:	4613      	mov	r3, r2
 800d046:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d048:	f7fc f960 	bl	800930c <HAL_GetTick>
 800d04c:	4602      	mov	r2, r0
 800d04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d050:	1a9b      	subs	r3, r3, r2
 800d052:	683a      	ldr	r2, [r7, #0]
 800d054:	4413      	add	r3, r2
 800d056:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d058:	f7fc f958 	bl	800930c <HAL_GetTick>
 800d05c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d05e:	4b39      	ldr	r3, [pc, #228]	; (800d144 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	015b      	lsls	r3, r3, #5
 800d064:	0d1b      	lsrs	r3, r3, #20
 800d066:	69fa      	ldr	r2, [r7, #28]
 800d068:	fb02 f303 	mul.w	r3, r2, r3
 800d06c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d06e:	e054      	b.n	800d11a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d076:	d050      	beq.n	800d11a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d078:	f7fc f948 	bl	800930c <HAL_GetTick>
 800d07c:	4602      	mov	r2, r0
 800d07e:	69bb      	ldr	r3, [r7, #24]
 800d080:	1ad3      	subs	r3, r2, r3
 800d082:	69fa      	ldr	r2, [r7, #28]
 800d084:	429a      	cmp	r2, r3
 800d086:	d902      	bls.n	800d08e <SPI_WaitFlagStateUntilTimeout+0x56>
 800d088:	69fb      	ldr	r3, [r7, #28]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d13d      	bne.n	800d10a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	685a      	ldr	r2, [r3, #4]
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d09c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	685b      	ldr	r3, [r3, #4]
 800d0a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d0a6:	d111      	bne.n	800d0cc <SPI_WaitFlagStateUntilTimeout+0x94>
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	689b      	ldr	r3, [r3, #8]
 800d0ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d0b0:	d004      	beq.n	800d0bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	689b      	ldr	r3, [r3, #8]
 800d0b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d0ba:	d107      	bne.n	800d0cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	681a      	ldr	r2, [r3, #0]
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d0ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d0d4:	d10f      	bne.n	800d0f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	681a      	ldr	r2, [r3, #0]
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d0e4:	601a      	str	r2, [r3, #0]
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	681a      	ldr	r2, [r3, #0]
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d0f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	2201      	movs	r2, #1
 800d0fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	2200      	movs	r2, #0
 800d102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800d106:	2303      	movs	r3, #3
 800d108:	e017      	b.n	800d13a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d101      	bne.n	800d114 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d110:	2300      	movs	r3, #0
 800d112:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	3b01      	subs	r3, #1
 800d118:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	689a      	ldr	r2, [r3, #8]
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	4013      	ands	r3, r2
 800d124:	68ba      	ldr	r2, [r7, #8]
 800d126:	429a      	cmp	r2, r3
 800d128:	bf0c      	ite	eq
 800d12a:	2301      	moveq	r3, #1
 800d12c:	2300      	movne	r3, #0
 800d12e:	b2db      	uxtb	r3, r3
 800d130:	461a      	mov	r2, r3
 800d132:	79fb      	ldrb	r3, [r7, #7]
 800d134:	429a      	cmp	r2, r3
 800d136:	d19b      	bne.n	800d070 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d138:	2300      	movs	r3, #0
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3720      	adds	r7, #32
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}
 800d142:	bf00      	nop
 800d144:	2000003c 	.word	0x2000003c

0800d148 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b086      	sub	sp, #24
 800d14c:	af02      	add	r7, sp, #8
 800d14e:	60f8      	str	r0, [r7, #12]
 800d150:	60b9      	str	r1, [r7, #8]
 800d152:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	685b      	ldr	r3, [r3, #4]
 800d158:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d15c:	d111      	bne.n	800d182 <SPI_EndRxTransaction+0x3a>
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	689b      	ldr	r3, [r3, #8]
 800d162:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d166:	d004      	beq.n	800d172 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	689b      	ldr	r3, [r3, #8]
 800d16c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d170:	d107      	bne.n	800d182 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	681a      	ldr	r2, [r3, #0]
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d180:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	685b      	ldr	r3, [r3, #4]
 800d186:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d18a:	d12a      	bne.n	800d1e2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	689b      	ldr	r3, [r3, #8]
 800d190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d194:	d012      	beq.n	800d1bc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	9300      	str	r3, [sp, #0]
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	2200      	movs	r2, #0
 800d19e:	2180      	movs	r1, #128	; 0x80
 800d1a0:	68f8      	ldr	r0, [r7, #12]
 800d1a2:	f7ff ff49 	bl	800d038 <SPI_WaitFlagStateUntilTimeout>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d02d      	beq.n	800d208 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1b0:	f043 0220 	orr.w	r2, r3, #32
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800d1b8:	2303      	movs	r3, #3
 800d1ba:	e026      	b.n	800d20a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	9300      	str	r3, [sp, #0]
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	2101      	movs	r1, #1
 800d1c6:	68f8      	ldr	r0, [r7, #12]
 800d1c8:	f7ff ff36 	bl	800d038 <SPI_WaitFlagStateUntilTimeout>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d01a      	beq.n	800d208 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1d6:	f043 0220 	orr.w	r2, r3, #32
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800d1de:	2303      	movs	r3, #3
 800d1e0:	e013      	b.n	800d20a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	9300      	str	r3, [sp, #0]
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	2101      	movs	r1, #1
 800d1ec:	68f8      	ldr	r0, [r7, #12]
 800d1ee:	f7ff ff23 	bl	800d038 <SPI_WaitFlagStateUntilTimeout>
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d007      	beq.n	800d208 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1fc:	f043 0220 	orr.w	r2, r3, #32
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d204:	2303      	movs	r3, #3
 800d206:	e000      	b.n	800d20a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800d208:	2300      	movs	r3, #0
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3710      	adds	r7, #16
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}
	...

0800d214 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b088      	sub	sp, #32
 800d218:	af02      	add	r7, sp, #8
 800d21a:	60f8      	str	r0, [r7, #12]
 800d21c:	60b9      	str	r1, [r7, #8]
 800d21e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800d220:	4b1b      	ldr	r3, [pc, #108]	; (800d290 <SPI_EndRxTxTransaction+0x7c>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	4a1b      	ldr	r2, [pc, #108]	; (800d294 <SPI_EndRxTxTransaction+0x80>)
 800d226:	fba2 2303 	umull	r2, r3, r2, r3
 800d22a:	0d5b      	lsrs	r3, r3, #21
 800d22c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d230:	fb02 f303 	mul.w	r3, r2, r3
 800d234:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	685b      	ldr	r3, [r3, #4]
 800d23a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d23e:	d112      	bne.n	800d266 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	9300      	str	r3, [sp, #0]
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	2200      	movs	r2, #0
 800d248:	2180      	movs	r1, #128	; 0x80
 800d24a:	68f8      	ldr	r0, [r7, #12]
 800d24c:	f7ff fef4 	bl	800d038 <SPI_WaitFlagStateUntilTimeout>
 800d250:	4603      	mov	r3, r0
 800d252:	2b00      	cmp	r3, #0
 800d254:	d016      	beq.n	800d284 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d25a:	f043 0220 	orr.w	r2, r3, #32
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d262:	2303      	movs	r3, #3
 800d264:	e00f      	b.n	800d286 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d00a      	beq.n	800d282 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	3b01      	subs	r3, #1
 800d270:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	689b      	ldr	r3, [r3, #8]
 800d278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d27c:	2b80      	cmp	r3, #128	; 0x80
 800d27e:	d0f2      	beq.n	800d266 <SPI_EndRxTxTransaction+0x52>
 800d280:	e000      	b.n	800d284 <SPI_EndRxTxTransaction+0x70>
        break;
 800d282:	bf00      	nop
  }

  return HAL_OK;
 800d284:	2300      	movs	r3, #0
}
 800d286:	4618      	mov	r0, r3
 800d288:	3718      	adds	r7, #24
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
 800d28e:	bf00      	nop
 800d290:	2000003c 	.word	0x2000003c
 800d294:	165e9f81 	.word	0x165e9f81

0800d298 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b082      	sub	sp, #8
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d101      	bne.n	800d2aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	e041      	b.n	800d32e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d2b0:	b2db      	uxtb	r3, r3
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d106      	bne.n	800d2c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f7f5 fbc4 	bl	8002a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2202      	movs	r2, #2
 800d2c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681a      	ldr	r2, [r3, #0]
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	3304      	adds	r3, #4
 800d2d4:	4619      	mov	r1, r3
 800d2d6:	4610      	mov	r0, r2
 800d2d8:	f000 fcea 	bl	800dcb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2201      	movs	r2, #1
 800d2e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2201      	movs	r2, #1
 800d2e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2201      	movs	r2, #1
 800d2f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2201      	movs	r2, #1
 800d300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2201      	movs	r2, #1
 800d308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2201      	movs	r2, #1
 800d310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2201      	movs	r2, #1
 800d318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2201      	movs	r2, #1
 800d320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2201      	movs	r2, #1
 800d328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d32c:	2300      	movs	r3, #0
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3708      	adds	r7, #8
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}
	...

0800d338 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d338:	b480      	push	{r7}
 800d33a:	b085      	sub	sp, #20
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d346:	b2db      	uxtb	r3, r3
 800d348:	2b01      	cmp	r3, #1
 800d34a:	d001      	beq.n	800d350 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d34c:	2301      	movs	r3, #1
 800d34e:	e04e      	b.n	800d3ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2202      	movs	r2, #2
 800d354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	68da      	ldr	r2, [r3, #12]
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	f042 0201 	orr.w	r2, r2, #1
 800d366:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	4a23      	ldr	r2, [pc, #140]	; (800d3fc <HAL_TIM_Base_Start_IT+0xc4>)
 800d36e:	4293      	cmp	r3, r2
 800d370:	d022      	beq.n	800d3b8 <HAL_TIM_Base_Start_IT+0x80>
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d37a:	d01d      	beq.n	800d3b8 <HAL_TIM_Base_Start_IT+0x80>
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	4a1f      	ldr	r2, [pc, #124]	; (800d400 <HAL_TIM_Base_Start_IT+0xc8>)
 800d382:	4293      	cmp	r3, r2
 800d384:	d018      	beq.n	800d3b8 <HAL_TIM_Base_Start_IT+0x80>
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	4a1e      	ldr	r2, [pc, #120]	; (800d404 <HAL_TIM_Base_Start_IT+0xcc>)
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d013      	beq.n	800d3b8 <HAL_TIM_Base_Start_IT+0x80>
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	4a1c      	ldr	r2, [pc, #112]	; (800d408 <HAL_TIM_Base_Start_IT+0xd0>)
 800d396:	4293      	cmp	r3, r2
 800d398:	d00e      	beq.n	800d3b8 <HAL_TIM_Base_Start_IT+0x80>
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	4a1b      	ldr	r2, [pc, #108]	; (800d40c <HAL_TIM_Base_Start_IT+0xd4>)
 800d3a0:	4293      	cmp	r3, r2
 800d3a2:	d009      	beq.n	800d3b8 <HAL_TIM_Base_Start_IT+0x80>
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	4a19      	ldr	r2, [pc, #100]	; (800d410 <HAL_TIM_Base_Start_IT+0xd8>)
 800d3aa:	4293      	cmp	r3, r2
 800d3ac:	d004      	beq.n	800d3b8 <HAL_TIM_Base_Start_IT+0x80>
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	4a18      	ldr	r2, [pc, #96]	; (800d414 <HAL_TIM_Base_Start_IT+0xdc>)
 800d3b4:	4293      	cmp	r3, r2
 800d3b6:	d111      	bne.n	800d3dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	689b      	ldr	r3, [r3, #8]
 800d3be:	f003 0307 	and.w	r3, r3, #7
 800d3c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	2b06      	cmp	r3, #6
 800d3c8:	d010      	beq.n	800d3ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	681a      	ldr	r2, [r3, #0]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	f042 0201 	orr.w	r2, r2, #1
 800d3d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d3da:	e007      	b.n	800d3ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	681a      	ldr	r2, [r3, #0]
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f042 0201 	orr.w	r2, r2, #1
 800d3ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d3ec:	2300      	movs	r3, #0
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3714      	adds	r7, #20
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f8:	4770      	bx	lr
 800d3fa:	bf00      	nop
 800d3fc:	40010000 	.word	0x40010000
 800d400:	40000400 	.word	0x40000400
 800d404:	40000800 	.word	0x40000800
 800d408:	40000c00 	.word	0x40000c00
 800d40c:	40010400 	.word	0x40010400
 800d410:	40014000 	.word	0x40014000
 800d414:	40001800 	.word	0x40001800

0800d418 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b082      	sub	sp, #8
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d101      	bne.n	800d42a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d426:	2301      	movs	r3, #1
 800d428:	e041      	b.n	800d4ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d430:	b2db      	uxtb	r3, r3
 800d432:	2b00      	cmp	r3, #0
 800d434:	d106      	bne.n	800d444 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2200      	movs	r2, #0
 800d43a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f000 f839 	bl	800d4b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2202      	movs	r2, #2
 800d448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681a      	ldr	r2, [r3, #0]
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	3304      	adds	r3, #4
 800d454:	4619      	mov	r1, r3
 800d456:	4610      	mov	r0, r2
 800d458:	f000 fc2a 	bl	800dcb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2201      	movs	r2, #1
 800d460:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2201      	movs	r2, #1
 800d468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2201      	movs	r2, #1
 800d470:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2201      	movs	r2, #1
 800d478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2201      	movs	r2, #1
 800d480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2201      	movs	r2, #1
 800d488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2201      	movs	r2, #1
 800d490:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2201      	movs	r2, #1
 800d498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2201      	movs	r2, #1
 800d4a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d4ac:	2300      	movs	r3, #0
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3708      	adds	r7, #8
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}

0800d4b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d4b6:	b480      	push	{r7}
 800d4b8:	b083      	sub	sp, #12
 800d4ba:	af00      	add	r7, sp, #0
 800d4bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d4be:	bf00      	nop
 800d4c0:	370c      	adds	r7, #12
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c8:	4770      	bx	lr
	...

0800d4cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b084      	sub	sp, #16
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d109      	bne.n	800d4f0 <HAL_TIM_PWM_Start+0x24>
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d4e2:	b2db      	uxtb	r3, r3
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	bf14      	ite	ne
 800d4e8:	2301      	movne	r3, #1
 800d4ea:	2300      	moveq	r3, #0
 800d4ec:	b2db      	uxtb	r3, r3
 800d4ee:	e022      	b.n	800d536 <HAL_TIM_PWM_Start+0x6a>
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	2b04      	cmp	r3, #4
 800d4f4:	d109      	bne.n	800d50a <HAL_TIM_PWM_Start+0x3e>
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d4fc:	b2db      	uxtb	r3, r3
 800d4fe:	2b01      	cmp	r3, #1
 800d500:	bf14      	ite	ne
 800d502:	2301      	movne	r3, #1
 800d504:	2300      	moveq	r3, #0
 800d506:	b2db      	uxtb	r3, r3
 800d508:	e015      	b.n	800d536 <HAL_TIM_PWM_Start+0x6a>
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	2b08      	cmp	r3, #8
 800d50e:	d109      	bne.n	800d524 <HAL_TIM_PWM_Start+0x58>
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d516:	b2db      	uxtb	r3, r3
 800d518:	2b01      	cmp	r3, #1
 800d51a:	bf14      	ite	ne
 800d51c:	2301      	movne	r3, #1
 800d51e:	2300      	moveq	r3, #0
 800d520:	b2db      	uxtb	r3, r3
 800d522:	e008      	b.n	800d536 <HAL_TIM_PWM_Start+0x6a>
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d52a:	b2db      	uxtb	r3, r3
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	bf14      	ite	ne
 800d530:	2301      	movne	r3, #1
 800d532:	2300      	moveq	r3, #0
 800d534:	b2db      	uxtb	r3, r3
 800d536:	2b00      	cmp	r3, #0
 800d538:	d001      	beq.n	800d53e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800d53a:	2301      	movs	r3, #1
 800d53c:	e07c      	b.n	800d638 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d104      	bne.n	800d54e <HAL_TIM_PWM_Start+0x82>
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2202      	movs	r2, #2
 800d548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d54c:	e013      	b.n	800d576 <HAL_TIM_PWM_Start+0xaa>
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	2b04      	cmp	r3, #4
 800d552:	d104      	bne.n	800d55e <HAL_TIM_PWM_Start+0x92>
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2202      	movs	r2, #2
 800d558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d55c:	e00b      	b.n	800d576 <HAL_TIM_PWM_Start+0xaa>
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	2b08      	cmp	r3, #8
 800d562:	d104      	bne.n	800d56e <HAL_TIM_PWM_Start+0xa2>
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2202      	movs	r2, #2
 800d568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d56c:	e003      	b.n	800d576 <HAL_TIM_PWM_Start+0xaa>
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2202      	movs	r2, #2
 800d572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	2201      	movs	r2, #1
 800d57c:	6839      	ldr	r1, [r7, #0]
 800d57e:	4618      	mov	r0, r3
 800d580:	f000 fe80 	bl	800e284 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	4a2d      	ldr	r2, [pc, #180]	; (800d640 <HAL_TIM_PWM_Start+0x174>)
 800d58a:	4293      	cmp	r3, r2
 800d58c:	d004      	beq.n	800d598 <HAL_TIM_PWM_Start+0xcc>
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	4a2c      	ldr	r2, [pc, #176]	; (800d644 <HAL_TIM_PWM_Start+0x178>)
 800d594:	4293      	cmp	r3, r2
 800d596:	d101      	bne.n	800d59c <HAL_TIM_PWM_Start+0xd0>
 800d598:	2301      	movs	r3, #1
 800d59a:	e000      	b.n	800d59e <HAL_TIM_PWM_Start+0xd2>
 800d59c:	2300      	movs	r3, #0
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d007      	beq.n	800d5b2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d5b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	4a22      	ldr	r2, [pc, #136]	; (800d640 <HAL_TIM_PWM_Start+0x174>)
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d022      	beq.n	800d602 <HAL_TIM_PWM_Start+0x136>
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d5c4:	d01d      	beq.n	800d602 <HAL_TIM_PWM_Start+0x136>
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	4a1f      	ldr	r2, [pc, #124]	; (800d648 <HAL_TIM_PWM_Start+0x17c>)
 800d5cc:	4293      	cmp	r3, r2
 800d5ce:	d018      	beq.n	800d602 <HAL_TIM_PWM_Start+0x136>
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	4a1d      	ldr	r2, [pc, #116]	; (800d64c <HAL_TIM_PWM_Start+0x180>)
 800d5d6:	4293      	cmp	r3, r2
 800d5d8:	d013      	beq.n	800d602 <HAL_TIM_PWM_Start+0x136>
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	4a1c      	ldr	r2, [pc, #112]	; (800d650 <HAL_TIM_PWM_Start+0x184>)
 800d5e0:	4293      	cmp	r3, r2
 800d5e2:	d00e      	beq.n	800d602 <HAL_TIM_PWM_Start+0x136>
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	4a16      	ldr	r2, [pc, #88]	; (800d644 <HAL_TIM_PWM_Start+0x178>)
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	d009      	beq.n	800d602 <HAL_TIM_PWM_Start+0x136>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	4a18      	ldr	r2, [pc, #96]	; (800d654 <HAL_TIM_PWM_Start+0x188>)
 800d5f4:	4293      	cmp	r3, r2
 800d5f6:	d004      	beq.n	800d602 <HAL_TIM_PWM_Start+0x136>
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	4a16      	ldr	r2, [pc, #88]	; (800d658 <HAL_TIM_PWM_Start+0x18c>)
 800d5fe:	4293      	cmp	r3, r2
 800d600:	d111      	bne.n	800d626 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	689b      	ldr	r3, [r3, #8]
 800d608:	f003 0307 	and.w	r3, r3, #7
 800d60c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	2b06      	cmp	r3, #6
 800d612:	d010      	beq.n	800d636 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	681a      	ldr	r2, [r3, #0]
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f042 0201 	orr.w	r2, r2, #1
 800d622:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d624:	e007      	b.n	800d636 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	681a      	ldr	r2, [r3, #0]
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	f042 0201 	orr.w	r2, r2, #1
 800d634:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d636:	2300      	movs	r3, #0
}
 800d638:	4618      	mov	r0, r3
 800d63a:	3710      	adds	r7, #16
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}
 800d640:	40010000 	.word	0x40010000
 800d644:	40010400 	.word	0x40010400
 800d648:	40000400 	.word	0x40000400
 800d64c:	40000800 	.word	0x40000800
 800d650:	40000c00 	.word	0x40000c00
 800d654:	40014000 	.word	0x40014000
 800d658:	40001800 	.word	0x40001800

0800d65c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b082      	sub	sp, #8
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
 800d664:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	2200      	movs	r2, #0
 800d66c:	6839      	ldr	r1, [r7, #0]
 800d66e:	4618      	mov	r0, r3
 800d670:	f000 fe08 	bl	800e284 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	4a2e      	ldr	r2, [pc, #184]	; (800d734 <HAL_TIM_PWM_Stop+0xd8>)
 800d67a:	4293      	cmp	r3, r2
 800d67c:	d004      	beq.n	800d688 <HAL_TIM_PWM_Stop+0x2c>
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	4a2d      	ldr	r2, [pc, #180]	; (800d738 <HAL_TIM_PWM_Stop+0xdc>)
 800d684:	4293      	cmp	r3, r2
 800d686:	d101      	bne.n	800d68c <HAL_TIM_PWM_Stop+0x30>
 800d688:	2301      	movs	r3, #1
 800d68a:	e000      	b.n	800d68e <HAL_TIM_PWM_Stop+0x32>
 800d68c:	2300      	movs	r3, #0
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d017      	beq.n	800d6c2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	6a1a      	ldr	r2, [r3, #32]
 800d698:	f241 1311 	movw	r3, #4369	; 0x1111
 800d69c:	4013      	ands	r3, r2
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d10f      	bne.n	800d6c2 <HAL_TIM_PWM_Stop+0x66>
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	6a1a      	ldr	r2, [r3, #32]
 800d6a8:	f240 4344 	movw	r3, #1092	; 0x444
 800d6ac:	4013      	ands	r3, r2
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d107      	bne.n	800d6c2 <HAL_TIM_PWM_Stop+0x66>
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d6c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	6a1a      	ldr	r2, [r3, #32]
 800d6c8:	f241 1311 	movw	r3, #4369	; 0x1111
 800d6cc:	4013      	ands	r3, r2
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d10f      	bne.n	800d6f2 <HAL_TIM_PWM_Stop+0x96>
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	6a1a      	ldr	r2, [r3, #32]
 800d6d8:	f240 4344 	movw	r3, #1092	; 0x444
 800d6dc:	4013      	ands	r3, r2
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d107      	bne.n	800d6f2 <HAL_TIM_PWM_Stop+0x96>
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	681a      	ldr	r2, [r3, #0]
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f022 0201 	bic.w	r2, r2, #1
 800d6f0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d104      	bne.n	800d702 <HAL_TIM_PWM_Stop+0xa6>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2201      	movs	r2, #1
 800d6fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d700:	e013      	b.n	800d72a <HAL_TIM_PWM_Stop+0xce>
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	2b04      	cmp	r3, #4
 800d706:	d104      	bne.n	800d712 <HAL_TIM_PWM_Stop+0xb6>
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2201      	movs	r2, #1
 800d70c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d710:	e00b      	b.n	800d72a <HAL_TIM_PWM_Stop+0xce>
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	2b08      	cmp	r3, #8
 800d716:	d104      	bne.n	800d722 <HAL_TIM_PWM_Stop+0xc6>
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2201      	movs	r2, #1
 800d71c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d720:	e003      	b.n	800d72a <HAL_TIM_PWM_Stop+0xce>
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2201      	movs	r2, #1
 800d726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800d72a:	2300      	movs	r3, #0
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	3708      	adds	r7, #8
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}
 800d734:	40010000 	.word	0x40010000
 800d738:	40010400 	.word	0x40010400

0800d73c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b082      	sub	sp, #8
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	691b      	ldr	r3, [r3, #16]
 800d74a:	f003 0302 	and.w	r3, r3, #2
 800d74e:	2b02      	cmp	r3, #2
 800d750:	d122      	bne.n	800d798 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	68db      	ldr	r3, [r3, #12]
 800d758:	f003 0302 	and.w	r3, r3, #2
 800d75c:	2b02      	cmp	r3, #2
 800d75e:	d11b      	bne.n	800d798 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	f06f 0202 	mvn.w	r2, #2
 800d768:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2201      	movs	r2, #1
 800d76e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	699b      	ldr	r3, [r3, #24]
 800d776:	f003 0303 	and.w	r3, r3, #3
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d003      	beq.n	800d786 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f000 fa77 	bl	800dc72 <HAL_TIM_IC_CaptureCallback>
 800d784:	e005      	b.n	800d792 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f000 fa69 	bl	800dc5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f000 fa7a 	bl	800dc86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2200      	movs	r2, #0
 800d796:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	691b      	ldr	r3, [r3, #16]
 800d79e:	f003 0304 	and.w	r3, r3, #4
 800d7a2:	2b04      	cmp	r3, #4
 800d7a4:	d122      	bne.n	800d7ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	68db      	ldr	r3, [r3, #12]
 800d7ac:	f003 0304 	and.w	r3, r3, #4
 800d7b0:	2b04      	cmp	r3, #4
 800d7b2:	d11b      	bne.n	800d7ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	f06f 0204 	mvn.w	r2, #4
 800d7bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2202      	movs	r2, #2
 800d7c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	699b      	ldr	r3, [r3, #24]
 800d7ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d003      	beq.n	800d7da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f000 fa4d 	bl	800dc72 <HAL_TIM_IC_CaptureCallback>
 800d7d8:	e005      	b.n	800d7e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f000 fa3f 	bl	800dc5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f000 fa50 	bl	800dc86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	691b      	ldr	r3, [r3, #16]
 800d7f2:	f003 0308 	and.w	r3, r3, #8
 800d7f6:	2b08      	cmp	r3, #8
 800d7f8:	d122      	bne.n	800d840 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	68db      	ldr	r3, [r3, #12]
 800d800:	f003 0308 	and.w	r3, r3, #8
 800d804:	2b08      	cmp	r3, #8
 800d806:	d11b      	bne.n	800d840 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	f06f 0208 	mvn.w	r2, #8
 800d810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2204      	movs	r2, #4
 800d816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	69db      	ldr	r3, [r3, #28]
 800d81e:	f003 0303 	and.w	r3, r3, #3
 800d822:	2b00      	cmp	r3, #0
 800d824:	d003      	beq.n	800d82e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f000 fa23 	bl	800dc72 <HAL_TIM_IC_CaptureCallback>
 800d82c:	e005      	b.n	800d83a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f000 fa15 	bl	800dc5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f000 fa26 	bl	800dc86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2200      	movs	r2, #0
 800d83e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	691b      	ldr	r3, [r3, #16]
 800d846:	f003 0310 	and.w	r3, r3, #16
 800d84a:	2b10      	cmp	r3, #16
 800d84c:	d122      	bne.n	800d894 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	68db      	ldr	r3, [r3, #12]
 800d854:	f003 0310 	and.w	r3, r3, #16
 800d858:	2b10      	cmp	r3, #16
 800d85a:	d11b      	bne.n	800d894 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	f06f 0210 	mvn.w	r2, #16
 800d864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2208      	movs	r2, #8
 800d86a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	69db      	ldr	r3, [r3, #28]
 800d872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d876:	2b00      	cmp	r3, #0
 800d878:	d003      	beq.n	800d882 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f000 f9f9 	bl	800dc72 <HAL_TIM_IC_CaptureCallback>
 800d880:	e005      	b.n	800d88e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	f000 f9eb 	bl	800dc5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f000 f9fc 	bl	800dc86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2200      	movs	r2, #0
 800d892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	691b      	ldr	r3, [r3, #16]
 800d89a:	f003 0301 	and.w	r3, r3, #1
 800d89e:	2b01      	cmp	r3, #1
 800d8a0:	d10e      	bne.n	800d8c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	68db      	ldr	r3, [r3, #12]
 800d8a8:	f003 0301 	and.w	r3, r3, #1
 800d8ac:	2b01      	cmp	r3, #1
 800d8ae:	d107      	bne.n	800d8c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	f06f 0201 	mvn.w	r2, #1
 800d8b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f7f4 fbc4 	bl	8002048 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	691b      	ldr	r3, [r3, #16]
 800d8c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8ca:	2b80      	cmp	r3, #128	; 0x80
 800d8cc:	d10e      	bne.n	800d8ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	68db      	ldr	r3, [r3, #12]
 800d8d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8d8:	2b80      	cmp	r3, #128	; 0x80
 800d8da:	d107      	bne.n	800d8ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d8e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f000 fd78 	bl	800e3dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	691b      	ldr	r3, [r3, #16]
 800d8f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8f6:	2b40      	cmp	r3, #64	; 0x40
 800d8f8:	d10e      	bne.n	800d918 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	68db      	ldr	r3, [r3, #12]
 800d900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d904:	2b40      	cmp	r3, #64	; 0x40
 800d906:	d107      	bne.n	800d918 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	f000 f9c1 	bl	800dc9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	691b      	ldr	r3, [r3, #16]
 800d91e:	f003 0320 	and.w	r3, r3, #32
 800d922:	2b20      	cmp	r3, #32
 800d924:	d10e      	bne.n	800d944 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	68db      	ldr	r3, [r3, #12]
 800d92c:	f003 0320 	and.w	r3, r3, #32
 800d930:	2b20      	cmp	r3, #32
 800d932:	d107      	bne.n	800d944 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	f06f 0220 	mvn.w	r2, #32
 800d93c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	f000 fd42 	bl	800e3c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d944:	bf00      	nop
 800d946:	3708      	adds	r7, #8
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}

0800d94c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b086      	sub	sp, #24
 800d950:	af00      	add	r7, sp, #0
 800d952:	60f8      	str	r0, [r7, #12]
 800d954:	60b9      	str	r1, [r7, #8]
 800d956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d958:	2300      	movs	r3, #0
 800d95a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d962:	2b01      	cmp	r3, #1
 800d964:	d101      	bne.n	800d96a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d966:	2302      	movs	r3, #2
 800d968:	e0ae      	b.n	800dac8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	2201      	movs	r2, #1
 800d96e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2b0c      	cmp	r3, #12
 800d976:	f200 809f 	bhi.w	800dab8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800d97a:	a201      	add	r2, pc, #4	; (adr r2, 800d980 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d980:	0800d9b5 	.word	0x0800d9b5
 800d984:	0800dab9 	.word	0x0800dab9
 800d988:	0800dab9 	.word	0x0800dab9
 800d98c:	0800dab9 	.word	0x0800dab9
 800d990:	0800d9f5 	.word	0x0800d9f5
 800d994:	0800dab9 	.word	0x0800dab9
 800d998:	0800dab9 	.word	0x0800dab9
 800d99c:	0800dab9 	.word	0x0800dab9
 800d9a0:	0800da37 	.word	0x0800da37
 800d9a4:	0800dab9 	.word	0x0800dab9
 800d9a8:	0800dab9 	.word	0x0800dab9
 800d9ac:	0800dab9 	.word	0x0800dab9
 800d9b0:	0800da77 	.word	0x0800da77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	68b9      	ldr	r1, [r7, #8]
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f000 fa18 	bl	800ddf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	699a      	ldr	r2, [r3, #24]
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	f042 0208 	orr.w	r2, r2, #8
 800d9ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	699a      	ldr	r2, [r3, #24]
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	f022 0204 	bic.w	r2, r2, #4
 800d9de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	6999      	ldr	r1, [r3, #24]
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	691a      	ldr	r2, [r3, #16]
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	430a      	orrs	r2, r1
 800d9f0:	619a      	str	r2, [r3, #24]
      break;
 800d9f2:	e064      	b.n	800dabe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	68b9      	ldr	r1, [r7, #8]
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f000 fa68 	bl	800ded0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	699a      	ldr	r2, [r3, #24]
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	699a      	ldr	r2, [r3, #24]
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800da1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	6999      	ldr	r1, [r3, #24]
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	691b      	ldr	r3, [r3, #16]
 800da2a:	021a      	lsls	r2, r3, #8
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	430a      	orrs	r2, r1
 800da32:	619a      	str	r2, [r3, #24]
      break;
 800da34:	e043      	b.n	800dabe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	68b9      	ldr	r1, [r7, #8]
 800da3c:	4618      	mov	r0, r3
 800da3e:	f000 fabd 	bl	800dfbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	69da      	ldr	r2, [r3, #28]
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	f042 0208 	orr.w	r2, r2, #8
 800da50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	69da      	ldr	r2, [r3, #28]
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	f022 0204 	bic.w	r2, r2, #4
 800da60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	69d9      	ldr	r1, [r3, #28]
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	691a      	ldr	r2, [r3, #16]
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	430a      	orrs	r2, r1
 800da72:	61da      	str	r2, [r3, #28]
      break;
 800da74:	e023      	b.n	800dabe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	68b9      	ldr	r1, [r7, #8]
 800da7c:	4618      	mov	r0, r3
 800da7e:	f000 fb11 	bl	800e0a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	69da      	ldr	r2, [r3, #28]
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	69da      	ldr	r2, [r3, #28]
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800daa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	69d9      	ldr	r1, [r3, #28]
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	691b      	ldr	r3, [r3, #16]
 800daac:	021a      	lsls	r2, r3, #8
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	430a      	orrs	r2, r1
 800dab4:	61da      	str	r2, [r3, #28]
      break;
 800dab6:	e002      	b.n	800dabe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800dab8:	2301      	movs	r3, #1
 800daba:	75fb      	strb	r3, [r7, #23]
      break;
 800dabc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	2200      	movs	r2, #0
 800dac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dac6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dac8:	4618      	mov	r0, r3
 800daca:	3718      	adds	r7, #24
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}

0800dad0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b084      	sub	sp, #16
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dada:	2300      	movs	r3, #0
 800dadc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dae4:	2b01      	cmp	r3, #1
 800dae6:	d101      	bne.n	800daec <HAL_TIM_ConfigClockSource+0x1c>
 800dae8:	2302      	movs	r3, #2
 800daea:	e0b4      	b.n	800dc56 <HAL_TIM_ConfigClockSource+0x186>
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2201      	movs	r2, #1
 800daf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2202      	movs	r2, #2
 800daf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	689b      	ldr	r3, [r3, #8]
 800db02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800db0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800db12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	68ba      	ldr	r2, [r7, #8]
 800db1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db24:	d03e      	beq.n	800dba4 <HAL_TIM_ConfigClockSource+0xd4>
 800db26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db2a:	f200 8087 	bhi.w	800dc3c <HAL_TIM_ConfigClockSource+0x16c>
 800db2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db32:	f000 8086 	beq.w	800dc42 <HAL_TIM_ConfigClockSource+0x172>
 800db36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db3a:	d87f      	bhi.n	800dc3c <HAL_TIM_ConfigClockSource+0x16c>
 800db3c:	2b70      	cmp	r3, #112	; 0x70
 800db3e:	d01a      	beq.n	800db76 <HAL_TIM_ConfigClockSource+0xa6>
 800db40:	2b70      	cmp	r3, #112	; 0x70
 800db42:	d87b      	bhi.n	800dc3c <HAL_TIM_ConfigClockSource+0x16c>
 800db44:	2b60      	cmp	r3, #96	; 0x60
 800db46:	d050      	beq.n	800dbea <HAL_TIM_ConfigClockSource+0x11a>
 800db48:	2b60      	cmp	r3, #96	; 0x60
 800db4a:	d877      	bhi.n	800dc3c <HAL_TIM_ConfigClockSource+0x16c>
 800db4c:	2b50      	cmp	r3, #80	; 0x50
 800db4e:	d03c      	beq.n	800dbca <HAL_TIM_ConfigClockSource+0xfa>
 800db50:	2b50      	cmp	r3, #80	; 0x50
 800db52:	d873      	bhi.n	800dc3c <HAL_TIM_ConfigClockSource+0x16c>
 800db54:	2b40      	cmp	r3, #64	; 0x40
 800db56:	d058      	beq.n	800dc0a <HAL_TIM_ConfigClockSource+0x13a>
 800db58:	2b40      	cmp	r3, #64	; 0x40
 800db5a:	d86f      	bhi.n	800dc3c <HAL_TIM_ConfigClockSource+0x16c>
 800db5c:	2b30      	cmp	r3, #48	; 0x30
 800db5e:	d064      	beq.n	800dc2a <HAL_TIM_ConfigClockSource+0x15a>
 800db60:	2b30      	cmp	r3, #48	; 0x30
 800db62:	d86b      	bhi.n	800dc3c <HAL_TIM_ConfigClockSource+0x16c>
 800db64:	2b20      	cmp	r3, #32
 800db66:	d060      	beq.n	800dc2a <HAL_TIM_ConfigClockSource+0x15a>
 800db68:	2b20      	cmp	r3, #32
 800db6a:	d867      	bhi.n	800dc3c <HAL_TIM_ConfigClockSource+0x16c>
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d05c      	beq.n	800dc2a <HAL_TIM_ConfigClockSource+0x15a>
 800db70:	2b10      	cmp	r3, #16
 800db72:	d05a      	beq.n	800dc2a <HAL_TIM_ConfigClockSource+0x15a>
 800db74:	e062      	b.n	800dc3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6818      	ldr	r0, [r3, #0]
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	6899      	ldr	r1, [r3, #8]
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	685a      	ldr	r2, [r3, #4]
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	68db      	ldr	r3, [r3, #12]
 800db86:	f000 fb5d 	bl	800e244 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	689b      	ldr	r3, [r3, #8]
 800db90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800db98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	68ba      	ldr	r2, [r7, #8]
 800dba0:	609a      	str	r2, [r3, #8]
      break;
 800dba2:	e04f      	b.n	800dc44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	6818      	ldr	r0, [r3, #0]
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	6899      	ldr	r1, [r3, #8]
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	685a      	ldr	r2, [r3, #4]
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	68db      	ldr	r3, [r3, #12]
 800dbb4:	f000 fb46 	bl	800e244 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	689a      	ldr	r2, [r3, #8]
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dbc6:	609a      	str	r2, [r3, #8]
      break;
 800dbc8:	e03c      	b.n	800dc44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6818      	ldr	r0, [r3, #0]
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	6859      	ldr	r1, [r3, #4]
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	68db      	ldr	r3, [r3, #12]
 800dbd6:	461a      	mov	r2, r3
 800dbd8:	f000 faba 	bl	800e150 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	2150      	movs	r1, #80	; 0x50
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f000 fb13 	bl	800e20e <TIM_ITRx_SetConfig>
      break;
 800dbe8:	e02c      	b.n	800dc44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6818      	ldr	r0, [r3, #0]
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	6859      	ldr	r1, [r3, #4]
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	68db      	ldr	r3, [r3, #12]
 800dbf6:	461a      	mov	r2, r3
 800dbf8:	f000 fad9 	bl	800e1ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	2160      	movs	r1, #96	; 0x60
 800dc02:	4618      	mov	r0, r3
 800dc04:	f000 fb03 	bl	800e20e <TIM_ITRx_SetConfig>
      break;
 800dc08:	e01c      	b.n	800dc44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	6818      	ldr	r0, [r3, #0]
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	6859      	ldr	r1, [r3, #4]
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	68db      	ldr	r3, [r3, #12]
 800dc16:	461a      	mov	r2, r3
 800dc18:	f000 fa9a 	bl	800e150 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	2140      	movs	r1, #64	; 0x40
 800dc22:	4618      	mov	r0, r3
 800dc24:	f000 faf3 	bl	800e20e <TIM_ITRx_SetConfig>
      break;
 800dc28:	e00c      	b.n	800dc44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681a      	ldr	r2, [r3, #0]
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	4619      	mov	r1, r3
 800dc34:	4610      	mov	r0, r2
 800dc36:	f000 faea 	bl	800e20e <TIM_ITRx_SetConfig>
      break;
 800dc3a:	e003      	b.n	800dc44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	73fb      	strb	r3, [r7, #15]
      break;
 800dc40:	e000      	b.n	800dc44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800dc42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2201      	movs	r2, #1
 800dc48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2200      	movs	r2, #0
 800dc50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dc54:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3710      	adds	r7, #16
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}

0800dc5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dc5e:	b480      	push	{r7}
 800dc60:	b083      	sub	sp, #12
 800dc62:	af00      	add	r7, sp, #0
 800dc64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dc66:	bf00      	nop
 800dc68:	370c      	adds	r7, #12
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc70:	4770      	bx	lr

0800dc72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dc72:	b480      	push	{r7}
 800dc74:	b083      	sub	sp, #12
 800dc76:	af00      	add	r7, sp, #0
 800dc78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dc7a:	bf00      	nop
 800dc7c:	370c      	adds	r7, #12
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc84:	4770      	bx	lr

0800dc86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dc86:	b480      	push	{r7}
 800dc88:	b083      	sub	sp, #12
 800dc8a:	af00      	add	r7, sp, #0
 800dc8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dc8e:	bf00      	nop
 800dc90:	370c      	adds	r7, #12
 800dc92:	46bd      	mov	sp, r7
 800dc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc98:	4770      	bx	lr

0800dc9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dc9a:	b480      	push	{r7}
 800dc9c:	b083      	sub	sp, #12
 800dc9e:	af00      	add	r7, sp, #0
 800dca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dca2:	bf00      	nop
 800dca4:	370c      	adds	r7, #12
 800dca6:	46bd      	mov	sp, r7
 800dca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcac:	4770      	bx	lr
	...

0800dcb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dcb0:	b480      	push	{r7}
 800dcb2:	b085      	sub	sp, #20
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
 800dcb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	4a40      	ldr	r2, [pc, #256]	; (800ddc4 <TIM_Base_SetConfig+0x114>)
 800dcc4:	4293      	cmp	r3, r2
 800dcc6:	d013      	beq.n	800dcf0 <TIM_Base_SetConfig+0x40>
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dcce:	d00f      	beq.n	800dcf0 <TIM_Base_SetConfig+0x40>
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	4a3d      	ldr	r2, [pc, #244]	; (800ddc8 <TIM_Base_SetConfig+0x118>)
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	d00b      	beq.n	800dcf0 <TIM_Base_SetConfig+0x40>
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	4a3c      	ldr	r2, [pc, #240]	; (800ddcc <TIM_Base_SetConfig+0x11c>)
 800dcdc:	4293      	cmp	r3, r2
 800dcde:	d007      	beq.n	800dcf0 <TIM_Base_SetConfig+0x40>
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	4a3b      	ldr	r2, [pc, #236]	; (800ddd0 <TIM_Base_SetConfig+0x120>)
 800dce4:	4293      	cmp	r3, r2
 800dce6:	d003      	beq.n	800dcf0 <TIM_Base_SetConfig+0x40>
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	4a3a      	ldr	r2, [pc, #232]	; (800ddd4 <TIM_Base_SetConfig+0x124>)
 800dcec:	4293      	cmp	r3, r2
 800dcee:	d108      	bne.n	800dd02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dcf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	68fa      	ldr	r2, [r7, #12]
 800dcfe:	4313      	orrs	r3, r2
 800dd00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	4a2f      	ldr	r2, [pc, #188]	; (800ddc4 <TIM_Base_SetConfig+0x114>)
 800dd06:	4293      	cmp	r3, r2
 800dd08:	d02b      	beq.n	800dd62 <TIM_Base_SetConfig+0xb2>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd10:	d027      	beq.n	800dd62 <TIM_Base_SetConfig+0xb2>
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	4a2c      	ldr	r2, [pc, #176]	; (800ddc8 <TIM_Base_SetConfig+0x118>)
 800dd16:	4293      	cmp	r3, r2
 800dd18:	d023      	beq.n	800dd62 <TIM_Base_SetConfig+0xb2>
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	4a2b      	ldr	r2, [pc, #172]	; (800ddcc <TIM_Base_SetConfig+0x11c>)
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d01f      	beq.n	800dd62 <TIM_Base_SetConfig+0xb2>
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	4a2a      	ldr	r2, [pc, #168]	; (800ddd0 <TIM_Base_SetConfig+0x120>)
 800dd26:	4293      	cmp	r3, r2
 800dd28:	d01b      	beq.n	800dd62 <TIM_Base_SetConfig+0xb2>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	4a29      	ldr	r2, [pc, #164]	; (800ddd4 <TIM_Base_SetConfig+0x124>)
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	d017      	beq.n	800dd62 <TIM_Base_SetConfig+0xb2>
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	4a28      	ldr	r2, [pc, #160]	; (800ddd8 <TIM_Base_SetConfig+0x128>)
 800dd36:	4293      	cmp	r3, r2
 800dd38:	d013      	beq.n	800dd62 <TIM_Base_SetConfig+0xb2>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	4a27      	ldr	r2, [pc, #156]	; (800dddc <TIM_Base_SetConfig+0x12c>)
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	d00f      	beq.n	800dd62 <TIM_Base_SetConfig+0xb2>
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	4a26      	ldr	r2, [pc, #152]	; (800dde0 <TIM_Base_SetConfig+0x130>)
 800dd46:	4293      	cmp	r3, r2
 800dd48:	d00b      	beq.n	800dd62 <TIM_Base_SetConfig+0xb2>
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	4a25      	ldr	r2, [pc, #148]	; (800dde4 <TIM_Base_SetConfig+0x134>)
 800dd4e:	4293      	cmp	r3, r2
 800dd50:	d007      	beq.n	800dd62 <TIM_Base_SetConfig+0xb2>
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	4a24      	ldr	r2, [pc, #144]	; (800dde8 <TIM_Base_SetConfig+0x138>)
 800dd56:	4293      	cmp	r3, r2
 800dd58:	d003      	beq.n	800dd62 <TIM_Base_SetConfig+0xb2>
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	4a23      	ldr	r2, [pc, #140]	; (800ddec <TIM_Base_SetConfig+0x13c>)
 800dd5e:	4293      	cmp	r3, r2
 800dd60:	d108      	bne.n	800dd74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dd68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	68db      	ldr	r3, [r3, #12]
 800dd6e:	68fa      	ldr	r2, [r7, #12]
 800dd70:	4313      	orrs	r3, r2
 800dd72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	695b      	ldr	r3, [r3, #20]
 800dd7e:	4313      	orrs	r3, r2
 800dd80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	68fa      	ldr	r2, [r7, #12]
 800dd86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	689a      	ldr	r2, [r3, #8]
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	681a      	ldr	r2, [r3, #0]
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	4a0a      	ldr	r2, [pc, #40]	; (800ddc4 <TIM_Base_SetConfig+0x114>)
 800dd9c:	4293      	cmp	r3, r2
 800dd9e:	d003      	beq.n	800dda8 <TIM_Base_SetConfig+0xf8>
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	4a0c      	ldr	r2, [pc, #48]	; (800ddd4 <TIM_Base_SetConfig+0x124>)
 800dda4:	4293      	cmp	r3, r2
 800dda6:	d103      	bne.n	800ddb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	691a      	ldr	r2, [r3, #16]
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2201      	movs	r2, #1
 800ddb4:	615a      	str	r2, [r3, #20]
}
 800ddb6:	bf00      	nop
 800ddb8:	3714      	adds	r7, #20
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc0:	4770      	bx	lr
 800ddc2:	bf00      	nop
 800ddc4:	40010000 	.word	0x40010000
 800ddc8:	40000400 	.word	0x40000400
 800ddcc:	40000800 	.word	0x40000800
 800ddd0:	40000c00 	.word	0x40000c00
 800ddd4:	40010400 	.word	0x40010400
 800ddd8:	40014000 	.word	0x40014000
 800dddc:	40014400 	.word	0x40014400
 800dde0:	40014800 	.word	0x40014800
 800dde4:	40001800 	.word	0x40001800
 800dde8:	40001c00 	.word	0x40001c00
 800ddec:	40002000 	.word	0x40002000

0800ddf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ddf0:	b480      	push	{r7}
 800ddf2:	b087      	sub	sp, #28
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
 800ddf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6a1b      	ldr	r3, [r3, #32]
 800ddfe:	f023 0201 	bic.w	r2, r3, #1
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6a1b      	ldr	r3, [r3, #32]
 800de0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	685b      	ldr	r3, [r3, #4]
 800de10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	699b      	ldr	r3, [r3, #24]
 800de16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	f023 0303 	bic.w	r3, r3, #3
 800de26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	68fa      	ldr	r2, [r7, #12]
 800de2e:	4313      	orrs	r3, r2
 800de30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	f023 0302 	bic.w	r3, r3, #2
 800de38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	689b      	ldr	r3, [r3, #8]
 800de3e:	697a      	ldr	r2, [r7, #20]
 800de40:	4313      	orrs	r3, r2
 800de42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	4a20      	ldr	r2, [pc, #128]	; (800dec8 <TIM_OC1_SetConfig+0xd8>)
 800de48:	4293      	cmp	r3, r2
 800de4a:	d003      	beq.n	800de54 <TIM_OC1_SetConfig+0x64>
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	4a1f      	ldr	r2, [pc, #124]	; (800decc <TIM_OC1_SetConfig+0xdc>)
 800de50:	4293      	cmp	r3, r2
 800de52:	d10c      	bne.n	800de6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800de54:	697b      	ldr	r3, [r7, #20]
 800de56:	f023 0308 	bic.w	r3, r3, #8
 800de5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	68db      	ldr	r3, [r3, #12]
 800de60:	697a      	ldr	r2, [r7, #20]
 800de62:	4313      	orrs	r3, r2
 800de64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	f023 0304 	bic.w	r3, r3, #4
 800de6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	4a15      	ldr	r2, [pc, #84]	; (800dec8 <TIM_OC1_SetConfig+0xd8>)
 800de72:	4293      	cmp	r3, r2
 800de74:	d003      	beq.n	800de7e <TIM_OC1_SetConfig+0x8e>
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	4a14      	ldr	r2, [pc, #80]	; (800decc <TIM_OC1_SetConfig+0xdc>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d111      	bne.n	800dea2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800de7e:	693b      	ldr	r3, [r7, #16]
 800de80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800de84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800de86:	693b      	ldr	r3, [r7, #16]
 800de88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800de8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	695b      	ldr	r3, [r3, #20]
 800de92:	693a      	ldr	r2, [r7, #16]
 800de94:	4313      	orrs	r3, r2
 800de96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	699b      	ldr	r3, [r3, #24]
 800de9c:	693a      	ldr	r2, [r7, #16]
 800de9e:	4313      	orrs	r3, r2
 800dea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	693a      	ldr	r2, [r7, #16]
 800dea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	68fa      	ldr	r2, [r7, #12]
 800deac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	685a      	ldr	r2, [r3, #4]
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	697a      	ldr	r2, [r7, #20]
 800deba:	621a      	str	r2, [r3, #32]
}
 800debc:	bf00      	nop
 800debe:	371c      	adds	r7, #28
 800dec0:	46bd      	mov	sp, r7
 800dec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec6:	4770      	bx	lr
 800dec8:	40010000 	.word	0x40010000
 800decc:	40010400 	.word	0x40010400

0800ded0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ded0:	b480      	push	{r7}
 800ded2:	b087      	sub	sp, #28
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
 800ded8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6a1b      	ldr	r3, [r3, #32]
 800dede:	f023 0210 	bic.w	r2, r3, #16
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6a1b      	ldr	r3, [r3, #32]
 800deea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	685b      	ldr	r3, [r3, #4]
 800def0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	699b      	ldr	r3, [r3, #24]
 800def6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800defe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800df06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	021b      	lsls	r3, r3, #8
 800df0e:	68fa      	ldr	r2, [r7, #12]
 800df10:	4313      	orrs	r3, r2
 800df12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	f023 0320 	bic.w	r3, r3, #32
 800df1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	689b      	ldr	r3, [r3, #8]
 800df20:	011b      	lsls	r3, r3, #4
 800df22:	697a      	ldr	r2, [r7, #20]
 800df24:	4313      	orrs	r3, r2
 800df26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	4a22      	ldr	r2, [pc, #136]	; (800dfb4 <TIM_OC2_SetConfig+0xe4>)
 800df2c:	4293      	cmp	r3, r2
 800df2e:	d003      	beq.n	800df38 <TIM_OC2_SetConfig+0x68>
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	4a21      	ldr	r2, [pc, #132]	; (800dfb8 <TIM_OC2_SetConfig+0xe8>)
 800df34:	4293      	cmp	r3, r2
 800df36:	d10d      	bne.n	800df54 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	68db      	ldr	r3, [r3, #12]
 800df44:	011b      	lsls	r3, r3, #4
 800df46:	697a      	ldr	r2, [r7, #20]
 800df48:	4313      	orrs	r3, r2
 800df4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800df4c:	697b      	ldr	r3, [r7, #20]
 800df4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	4a17      	ldr	r2, [pc, #92]	; (800dfb4 <TIM_OC2_SetConfig+0xe4>)
 800df58:	4293      	cmp	r3, r2
 800df5a:	d003      	beq.n	800df64 <TIM_OC2_SetConfig+0x94>
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	4a16      	ldr	r2, [pc, #88]	; (800dfb8 <TIM_OC2_SetConfig+0xe8>)
 800df60:	4293      	cmp	r3, r2
 800df62:	d113      	bne.n	800df8c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800df64:	693b      	ldr	r3, [r7, #16]
 800df66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800df6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800df6c:	693b      	ldr	r3, [r7, #16]
 800df6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800df72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	695b      	ldr	r3, [r3, #20]
 800df78:	009b      	lsls	r3, r3, #2
 800df7a:	693a      	ldr	r2, [r7, #16]
 800df7c:	4313      	orrs	r3, r2
 800df7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	699b      	ldr	r3, [r3, #24]
 800df84:	009b      	lsls	r3, r3, #2
 800df86:	693a      	ldr	r2, [r7, #16]
 800df88:	4313      	orrs	r3, r2
 800df8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	693a      	ldr	r2, [r7, #16]
 800df90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	68fa      	ldr	r2, [r7, #12]
 800df96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	685a      	ldr	r2, [r3, #4]
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	697a      	ldr	r2, [r7, #20]
 800dfa4:	621a      	str	r2, [r3, #32]
}
 800dfa6:	bf00      	nop
 800dfa8:	371c      	adds	r7, #28
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb0:	4770      	bx	lr
 800dfb2:	bf00      	nop
 800dfb4:	40010000 	.word	0x40010000
 800dfb8:	40010400 	.word	0x40010400

0800dfbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dfbc:	b480      	push	{r7}
 800dfbe:	b087      	sub	sp, #28
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
 800dfc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6a1b      	ldr	r3, [r3, #32]
 800dfca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6a1b      	ldr	r3, [r3, #32]
 800dfd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	685b      	ldr	r3, [r3, #4]
 800dfdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	69db      	ldr	r3, [r3, #28]
 800dfe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dfea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	f023 0303 	bic.w	r3, r3, #3
 800dff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	68fa      	ldr	r2, [r7, #12]
 800dffa:	4313      	orrs	r3, r2
 800dffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dffe:	697b      	ldr	r3, [r7, #20]
 800e000:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e006:	683b      	ldr	r3, [r7, #0]
 800e008:	689b      	ldr	r3, [r3, #8]
 800e00a:	021b      	lsls	r3, r3, #8
 800e00c:	697a      	ldr	r2, [r7, #20]
 800e00e:	4313      	orrs	r3, r2
 800e010:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	4a21      	ldr	r2, [pc, #132]	; (800e09c <TIM_OC3_SetConfig+0xe0>)
 800e016:	4293      	cmp	r3, r2
 800e018:	d003      	beq.n	800e022 <TIM_OC3_SetConfig+0x66>
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	4a20      	ldr	r2, [pc, #128]	; (800e0a0 <TIM_OC3_SetConfig+0xe4>)
 800e01e:	4293      	cmp	r3, r2
 800e020:	d10d      	bne.n	800e03e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e028:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	68db      	ldr	r3, [r3, #12]
 800e02e:	021b      	lsls	r3, r3, #8
 800e030:	697a      	ldr	r2, [r7, #20]
 800e032:	4313      	orrs	r3, r2
 800e034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e03c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	4a16      	ldr	r2, [pc, #88]	; (800e09c <TIM_OC3_SetConfig+0xe0>)
 800e042:	4293      	cmp	r3, r2
 800e044:	d003      	beq.n	800e04e <TIM_OC3_SetConfig+0x92>
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	4a15      	ldr	r2, [pc, #84]	; (800e0a0 <TIM_OC3_SetConfig+0xe4>)
 800e04a:	4293      	cmp	r3, r2
 800e04c:	d113      	bne.n	800e076 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e05c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	695b      	ldr	r3, [r3, #20]
 800e062:	011b      	lsls	r3, r3, #4
 800e064:	693a      	ldr	r2, [r7, #16]
 800e066:	4313      	orrs	r3, r2
 800e068:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	699b      	ldr	r3, [r3, #24]
 800e06e:	011b      	lsls	r3, r3, #4
 800e070:	693a      	ldr	r2, [r7, #16]
 800e072:	4313      	orrs	r3, r2
 800e074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	693a      	ldr	r2, [r7, #16]
 800e07a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	68fa      	ldr	r2, [r7, #12]
 800e080:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	685a      	ldr	r2, [r3, #4]
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	697a      	ldr	r2, [r7, #20]
 800e08e:	621a      	str	r2, [r3, #32]
}
 800e090:	bf00      	nop
 800e092:	371c      	adds	r7, #28
 800e094:	46bd      	mov	sp, r7
 800e096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09a:	4770      	bx	lr
 800e09c:	40010000 	.word	0x40010000
 800e0a0:	40010400 	.word	0x40010400

0800e0a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e0a4:	b480      	push	{r7}
 800e0a6:	b087      	sub	sp, #28
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
 800e0ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6a1b      	ldr	r3, [r3, #32]
 800e0b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6a1b      	ldr	r3, [r3, #32]
 800e0be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	685b      	ldr	r3, [r3, #4]
 800e0c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	69db      	ldr	r3, [r3, #28]
 800e0ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e0d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e0da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	021b      	lsls	r3, r3, #8
 800e0e2:	68fa      	ldr	r2, [r7, #12]
 800e0e4:	4313      	orrs	r3, r2
 800e0e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e0e8:	693b      	ldr	r3, [r7, #16]
 800e0ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e0ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	689b      	ldr	r3, [r3, #8]
 800e0f4:	031b      	lsls	r3, r3, #12
 800e0f6:	693a      	ldr	r2, [r7, #16]
 800e0f8:	4313      	orrs	r3, r2
 800e0fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	4a12      	ldr	r2, [pc, #72]	; (800e148 <TIM_OC4_SetConfig+0xa4>)
 800e100:	4293      	cmp	r3, r2
 800e102:	d003      	beq.n	800e10c <TIM_OC4_SetConfig+0x68>
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	4a11      	ldr	r2, [pc, #68]	; (800e14c <TIM_OC4_SetConfig+0xa8>)
 800e108:	4293      	cmp	r3, r2
 800e10a:	d109      	bne.n	800e120 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e10c:	697b      	ldr	r3, [r7, #20]
 800e10e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e112:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	695b      	ldr	r3, [r3, #20]
 800e118:	019b      	lsls	r3, r3, #6
 800e11a:	697a      	ldr	r2, [r7, #20]
 800e11c:	4313      	orrs	r3, r2
 800e11e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	697a      	ldr	r2, [r7, #20]
 800e124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	68fa      	ldr	r2, [r7, #12]
 800e12a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	685a      	ldr	r2, [r3, #4]
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	693a      	ldr	r2, [r7, #16]
 800e138:	621a      	str	r2, [r3, #32]
}
 800e13a:	bf00      	nop
 800e13c:	371c      	adds	r7, #28
 800e13e:	46bd      	mov	sp, r7
 800e140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e144:	4770      	bx	lr
 800e146:	bf00      	nop
 800e148:	40010000 	.word	0x40010000
 800e14c:	40010400 	.word	0x40010400

0800e150 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e150:	b480      	push	{r7}
 800e152:	b087      	sub	sp, #28
 800e154:	af00      	add	r7, sp, #0
 800e156:	60f8      	str	r0, [r7, #12]
 800e158:	60b9      	str	r1, [r7, #8]
 800e15a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	6a1b      	ldr	r3, [r3, #32]
 800e160:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	6a1b      	ldr	r3, [r3, #32]
 800e166:	f023 0201 	bic.w	r2, r3, #1
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	699b      	ldr	r3, [r3, #24]
 800e172:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e174:	693b      	ldr	r3, [r7, #16]
 800e176:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e17a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	011b      	lsls	r3, r3, #4
 800e180:	693a      	ldr	r2, [r7, #16]
 800e182:	4313      	orrs	r3, r2
 800e184:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e186:	697b      	ldr	r3, [r7, #20]
 800e188:	f023 030a 	bic.w	r3, r3, #10
 800e18c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e18e:	697a      	ldr	r2, [r7, #20]
 800e190:	68bb      	ldr	r3, [r7, #8]
 800e192:	4313      	orrs	r3, r2
 800e194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	693a      	ldr	r2, [r7, #16]
 800e19a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	697a      	ldr	r2, [r7, #20]
 800e1a0:	621a      	str	r2, [r3, #32]
}
 800e1a2:	bf00      	nop
 800e1a4:	371c      	adds	r7, #28
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ac:	4770      	bx	lr

0800e1ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e1ae:	b480      	push	{r7}
 800e1b0:	b087      	sub	sp, #28
 800e1b2:	af00      	add	r7, sp, #0
 800e1b4:	60f8      	str	r0, [r7, #12]
 800e1b6:	60b9      	str	r1, [r7, #8]
 800e1b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	6a1b      	ldr	r3, [r3, #32]
 800e1be:	f023 0210 	bic.w	r2, r3, #16
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	699b      	ldr	r3, [r3, #24]
 800e1ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	6a1b      	ldr	r3, [r3, #32]
 800e1d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e1d2:	697b      	ldr	r3, [r7, #20]
 800e1d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e1d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	031b      	lsls	r3, r3, #12
 800e1de:	697a      	ldr	r2, [r7, #20]
 800e1e0:	4313      	orrs	r3, r2
 800e1e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e1ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	011b      	lsls	r3, r3, #4
 800e1f0:	693a      	ldr	r2, [r7, #16]
 800e1f2:	4313      	orrs	r3, r2
 800e1f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	697a      	ldr	r2, [r7, #20]
 800e1fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	693a      	ldr	r2, [r7, #16]
 800e200:	621a      	str	r2, [r3, #32]
}
 800e202:	bf00      	nop
 800e204:	371c      	adds	r7, #28
 800e206:	46bd      	mov	sp, r7
 800e208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20c:	4770      	bx	lr

0800e20e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e20e:	b480      	push	{r7}
 800e210:	b085      	sub	sp, #20
 800e212:	af00      	add	r7, sp, #0
 800e214:	6078      	str	r0, [r7, #4]
 800e216:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	689b      	ldr	r3, [r3, #8]
 800e21c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e224:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e226:	683a      	ldr	r2, [r7, #0]
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	4313      	orrs	r3, r2
 800e22c:	f043 0307 	orr.w	r3, r3, #7
 800e230:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	68fa      	ldr	r2, [r7, #12]
 800e236:	609a      	str	r2, [r3, #8]
}
 800e238:	bf00      	nop
 800e23a:	3714      	adds	r7, #20
 800e23c:	46bd      	mov	sp, r7
 800e23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e242:	4770      	bx	lr

0800e244 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e244:	b480      	push	{r7}
 800e246:	b087      	sub	sp, #28
 800e248:	af00      	add	r7, sp, #0
 800e24a:	60f8      	str	r0, [r7, #12]
 800e24c:	60b9      	str	r1, [r7, #8]
 800e24e:	607a      	str	r2, [r7, #4]
 800e250:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	689b      	ldr	r3, [r3, #8]
 800e256:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e25e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	021a      	lsls	r2, r3, #8
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	431a      	orrs	r2, r3
 800e268:	68bb      	ldr	r3, [r7, #8]
 800e26a:	4313      	orrs	r3, r2
 800e26c:	697a      	ldr	r2, [r7, #20]
 800e26e:	4313      	orrs	r3, r2
 800e270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	697a      	ldr	r2, [r7, #20]
 800e276:	609a      	str	r2, [r3, #8]
}
 800e278:	bf00      	nop
 800e27a:	371c      	adds	r7, #28
 800e27c:	46bd      	mov	sp, r7
 800e27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e282:	4770      	bx	lr

0800e284 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e284:	b480      	push	{r7}
 800e286:	b087      	sub	sp, #28
 800e288:	af00      	add	r7, sp, #0
 800e28a:	60f8      	str	r0, [r7, #12]
 800e28c:	60b9      	str	r1, [r7, #8]
 800e28e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	f003 031f 	and.w	r3, r3, #31
 800e296:	2201      	movs	r2, #1
 800e298:	fa02 f303 	lsl.w	r3, r2, r3
 800e29c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	6a1a      	ldr	r2, [r3, #32]
 800e2a2:	697b      	ldr	r3, [r7, #20]
 800e2a4:	43db      	mvns	r3, r3
 800e2a6:	401a      	ands	r2, r3
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	6a1a      	ldr	r2, [r3, #32]
 800e2b0:	68bb      	ldr	r3, [r7, #8]
 800e2b2:	f003 031f 	and.w	r3, r3, #31
 800e2b6:	6879      	ldr	r1, [r7, #4]
 800e2b8:	fa01 f303 	lsl.w	r3, r1, r3
 800e2bc:	431a      	orrs	r2, r3
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	621a      	str	r2, [r3, #32]
}
 800e2c2:	bf00      	nop
 800e2c4:	371c      	adds	r7, #28
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2cc:	4770      	bx	lr
	...

0800e2d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e2d0:	b480      	push	{r7}
 800e2d2:	b085      	sub	sp, #20
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
 800e2d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	d101      	bne.n	800e2e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e2e4:	2302      	movs	r3, #2
 800e2e6:	e05a      	b.n	800e39e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2201      	movs	r2, #1
 800e2ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2202      	movs	r2, #2
 800e2f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	685b      	ldr	r3, [r3, #4]
 800e2fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	689b      	ldr	r3, [r3, #8]
 800e306:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e30e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	68fa      	ldr	r2, [r7, #12]
 800e316:	4313      	orrs	r3, r2
 800e318:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	68fa      	ldr	r2, [r7, #12]
 800e320:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	4a21      	ldr	r2, [pc, #132]	; (800e3ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e328:	4293      	cmp	r3, r2
 800e32a:	d022      	beq.n	800e372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e334:	d01d      	beq.n	800e372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	4a1d      	ldr	r2, [pc, #116]	; (800e3b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e33c:	4293      	cmp	r3, r2
 800e33e:	d018      	beq.n	800e372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	4a1b      	ldr	r2, [pc, #108]	; (800e3b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e346:	4293      	cmp	r3, r2
 800e348:	d013      	beq.n	800e372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	4a1a      	ldr	r2, [pc, #104]	; (800e3b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e350:	4293      	cmp	r3, r2
 800e352:	d00e      	beq.n	800e372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	4a18      	ldr	r2, [pc, #96]	; (800e3bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e35a:	4293      	cmp	r3, r2
 800e35c:	d009      	beq.n	800e372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	4a17      	ldr	r2, [pc, #92]	; (800e3c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e364:	4293      	cmp	r3, r2
 800e366:	d004      	beq.n	800e372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	4a15      	ldr	r2, [pc, #84]	; (800e3c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e36e:	4293      	cmp	r3, r2
 800e370:	d10c      	bne.n	800e38c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e378:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	685b      	ldr	r3, [r3, #4]
 800e37e:	68ba      	ldr	r2, [r7, #8]
 800e380:	4313      	orrs	r3, r2
 800e382:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	68ba      	ldr	r2, [r7, #8]
 800e38a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2201      	movs	r2, #1
 800e390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2200      	movs	r2, #0
 800e398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e39c:	2300      	movs	r3, #0
}
 800e39e:	4618      	mov	r0, r3
 800e3a0:	3714      	adds	r7, #20
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a8:	4770      	bx	lr
 800e3aa:	bf00      	nop
 800e3ac:	40010000 	.word	0x40010000
 800e3b0:	40000400 	.word	0x40000400
 800e3b4:	40000800 	.word	0x40000800
 800e3b8:	40000c00 	.word	0x40000c00
 800e3bc:	40010400 	.word	0x40010400
 800e3c0:	40014000 	.word	0x40014000
 800e3c4:	40001800 	.word	0x40001800

0800e3c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b083      	sub	sp, #12
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e3d0:	bf00      	nop
 800e3d2:	370c      	adds	r7, #12
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3da:	4770      	bx	lr

0800e3dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e3dc:	b480      	push	{r7}
 800e3de:	b083      	sub	sp, #12
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e3e4:	bf00      	nop
 800e3e6:	370c      	adds	r7, #12
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ee:	4770      	bx	lr

0800e3f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b082      	sub	sp, #8
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d101      	bne.n	800e402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e3fe:	2301      	movs	r3, #1
 800e400:	e03f      	b.n	800e482 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e408:	b2db      	uxtb	r3, r3
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d106      	bne.n	800e41c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2200      	movs	r2, #0
 800e412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f7f4 fbee 	bl	8002bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2224      	movs	r2, #36	; 0x24
 800e420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	68da      	ldr	r2, [r3, #12]
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e432:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e434:	6878      	ldr	r0, [r7, #4]
 800e436:	f000 f9cb 	bl	800e7d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	691a      	ldr	r2, [r3, #16]
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e448:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	695a      	ldr	r2, [r3, #20]
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e458:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	68da      	ldr	r2, [r3, #12]
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e468:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	2200      	movs	r2, #0
 800e46e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2220      	movs	r2, #32
 800e474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	2220      	movs	r2, #32
 800e47c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800e480:	2300      	movs	r3, #0
}
 800e482:	4618      	mov	r0, r3
 800e484:	3708      	adds	r7, #8
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}

0800e48a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e48a:	b580      	push	{r7, lr}
 800e48c:	b08a      	sub	sp, #40	; 0x28
 800e48e:	af02      	add	r7, sp, #8
 800e490:	60f8      	str	r0, [r7, #12]
 800e492:	60b9      	str	r1, [r7, #8]
 800e494:	603b      	str	r3, [r7, #0]
 800e496:	4613      	mov	r3, r2
 800e498:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800e49a:	2300      	movs	r3, #0
 800e49c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e4a4:	b2db      	uxtb	r3, r3
 800e4a6:	2b20      	cmp	r3, #32
 800e4a8:	d17c      	bne.n	800e5a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d002      	beq.n	800e4b6 <HAL_UART_Transmit+0x2c>
 800e4b0:	88fb      	ldrh	r3, [r7, #6]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d101      	bne.n	800e4ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	e075      	b.n	800e5a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e4c0:	2b01      	cmp	r3, #1
 800e4c2:	d101      	bne.n	800e4c8 <HAL_UART_Transmit+0x3e>
 800e4c4:	2302      	movs	r3, #2
 800e4c6:	e06e      	b.n	800e5a6 <HAL_UART_Transmit+0x11c>
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	2201      	movs	r2, #1
 800e4cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	2221      	movs	r2, #33	; 0x21
 800e4da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e4de:	f7fa ff15 	bl	800930c <HAL_GetTick>
 800e4e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	88fa      	ldrh	r2, [r7, #6]
 800e4e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	88fa      	ldrh	r2, [r7, #6]
 800e4ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	689b      	ldr	r3, [r3, #8]
 800e4f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e4f8:	d108      	bne.n	800e50c <HAL_UART_Transmit+0x82>
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	691b      	ldr	r3, [r3, #16]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d104      	bne.n	800e50c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800e502:	2300      	movs	r3, #0
 800e504:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e506:	68bb      	ldr	r3, [r7, #8]
 800e508:	61bb      	str	r3, [r7, #24]
 800e50a:	e003      	b.n	800e514 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800e50c:	68bb      	ldr	r3, [r7, #8]
 800e50e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e510:	2300      	movs	r3, #0
 800e512:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	2200      	movs	r2, #0
 800e518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800e51c:	e02a      	b.n	800e574 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	9300      	str	r3, [sp, #0]
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	2200      	movs	r2, #0
 800e526:	2180      	movs	r1, #128	; 0x80
 800e528:	68f8      	ldr	r0, [r7, #12]
 800e52a:	f000 f8e2 	bl	800e6f2 <UART_WaitOnFlagUntilTimeout>
 800e52e:	4603      	mov	r3, r0
 800e530:	2b00      	cmp	r3, #0
 800e532:	d001      	beq.n	800e538 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800e534:	2303      	movs	r3, #3
 800e536:	e036      	b.n	800e5a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800e538:	69fb      	ldr	r3, [r7, #28]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d10b      	bne.n	800e556 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e53e:	69bb      	ldr	r3, [r7, #24]
 800e540:	881b      	ldrh	r3, [r3, #0]
 800e542:	461a      	mov	r2, r3
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e54c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800e54e:	69bb      	ldr	r3, [r7, #24]
 800e550:	3302      	adds	r3, #2
 800e552:	61bb      	str	r3, [r7, #24]
 800e554:	e007      	b.n	800e566 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800e556:	69fb      	ldr	r3, [r7, #28]
 800e558:	781a      	ldrb	r2, [r3, #0]
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800e560:	69fb      	ldr	r3, [r7, #28]
 800e562:	3301      	adds	r3, #1
 800e564:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e56a:	b29b      	uxth	r3, r3
 800e56c:	3b01      	subs	r3, #1
 800e56e:	b29a      	uxth	r2, r3
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e578:	b29b      	uxth	r3, r3
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d1cf      	bne.n	800e51e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	9300      	str	r3, [sp, #0]
 800e582:	697b      	ldr	r3, [r7, #20]
 800e584:	2200      	movs	r2, #0
 800e586:	2140      	movs	r1, #64	; 0x40
 800e588:	68f8      	ldr	r0, [r7, #12]
 800e58a:	f000 f8b2 	bl	800e6f2 <UART_WaitOnFlagUntilTimeout>
 800e58e:	4603      	mov	r3, r0
 800e590:	2b00      	cmp	r3, #0
 800e592:	d001      	beq.n	800e598 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800e594:	2303      	movs	r3, #3
 800e596:	e006      	b.n	800e5a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	2220      	movs	r2, #32
 800e59c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	e000      	b.n	800e5a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800e5a4:	2302      	movs	r3, #2
  }
}
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	3720      	adds	r7, #32
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	bd80      	pop	{r7, pc}

0800e5ae <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e5ae:	b580      	push	{r7, lr}
 800e5b0:	b08a      	sub	sp, #40	; 0x28
 800e5b2:	af02      	add	r7, sp, #8
 800e5b4:	60f8      	str	r0, [r7, #12]
 800e5b6:	60b9      	str	r1, [r7, #8]
 800e5b8:	603b      	str	r3, [r7, #0]
 800e5ba:	4613      	mov	r3, r2
 800e5bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e5c8:	b2db      	uxtb	r3, r3
 800e5ca:	2b20      	cmp	r3, #32
 800e5cc:	f040 808c 	bne.w	800e6e8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d002      	beq.n	800e5dc <HAL_UART_Receive+0x2e>
 800e5d6:	88fb      	ldrh	r3, [r7, #6]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d101      	bne.n	800e5e0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800e5dc:	2301      	movs	r3, #1
 800e5de:	e084      	b.n	800e6ea <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e5e6:	2b01      	cmp	r3, #1
 800e5e8:	d101      	bne.n	800e5ee <HAL_UART_Receive+0x40>
 800e5ea:	2302      	movs	r3, #2
 800e5ec:	e07d      	b.n	800e6ea <HAL_UART_Receive+0x13c>
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	2201      	movs	r2, #1
 800e5f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	2222      	movs	r2, #34	; 0x22
 800e600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	2200      	movs	r2, #0
 800e608:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e60a:	f7fa fe7f 	bl	800930c <HAL_GetTick>
 800e60e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	88fa      	ldrh	r2, [r7, #6]
 800e614:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	88fa      	ldrh	r2, [r7, #6]
 800e61a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	689b      	ldr	r3, [r3, #8]
 800e620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e624:	d108      	bne.n	800e638 <HAL_UART_Receive+0x8a>
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	691b      	ldr	r3, [r3, #16]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d104      	bne.n	800e638 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800e62e:	2300      	movs	r3, #0
 800e630:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	61bb      	str	r3, [r7, #24]
 800e636:	e003      	b.n	800e640 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800e638:	68bb      	ldr	r3, [r7, #8]
 800e63a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e63c:	2300      	movs	r3, #0
 800e63e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	2200      	movs	r2, #0
 800e644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800e648:	e043      	b.n	800e6d2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	9300      	str	r3, [sp, #0]
 800e64e:	697b      	ldr	r3, [r7, #20]
 800e650:	2200      	movs	r2, #0
 800e652:	2120      	movs	r1, #32
 800e654:	68f8      	ldr	r0, [r7, #12]
 800e656:	f000 f84c 	bl	800e6f2 <UART_WaitOnFlagUntilTimeout>
 800e65a:	4603      	mov	r3, r0
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d001      	beq.n	800e664 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800e660:	2303      	movs	r3, #3
 800e662:	e042      	b.n	800e6ea <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800e664:	69fb      	ldr	r3, [r7, #28]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d10c      	bne.n	800e684 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	685b      	ldr	r3, [r3, #4]
 800e670:	b29b      	uxth	r3, r3
 800e672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e676:	b29a      	uxth	r2, r3
 800e678:	69bb      	ldr	r3, [r7, #24]
 800e67a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800e67c:	69bb      	ldr	r3, [r7, #24]
 800e67e:	3302      	adds	r3, #2
 800e680:	61bb      	str	r3, [r7, #24]
 800e682:	e01f      	b.n	800e6c4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	689b      	ldr	r3, [r3, #8]
 800e688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e68c:	d007      	beq.n	800e69e <HAL_UART_Receive+0xf0>
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	689b      	ldr	r3, [r3, #8]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d10a      	bne.n	800e6ac <HAL_UART_Receive+0xfe>
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	691b      	ldr	r3, [r3, #16]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d106      	bne.n	800e6ac <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	685b      	ldr	r3, [r3, #4]
 800e6a4:	b2da      	uxtb	r2, r3
 800e6a6:	69fb      	ldr	r3, [r7, #28]
 800e6a8:	701a      	strb	r2, [r3, #0]
 800e6aa:	e008      	b.n	800e6be <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	685b      	ldr	r3, [r3, #4]
 800e6b2:	b2db      	uxtb	r3, r3
 800e6b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e6b8:	b2da      	uxtb	r2, r3
 800e6ba:	69fb      	ldr	r3, [r7, #28]
 800e6bc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800e6be:	69fb      	ldr	r3, [r7, #28]
 800e6c0:	3301      	adds	r3, #1
 800e6c2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e6c8:	b29b      	uxth	r3, r3
 800e6ca:	3b01      	subs	r3, #1
 800e6cc:	b29a      	uxth	r2, r3
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e6d6:	b29b      	uxth	r3, r3
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d1b6      	bne.n	800e64a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	2220      	movs	r2, #32
 800e6e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	e000      	b.n	800e6ea <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800e6e8:	2302      	movs	r3, #2
  }
}
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	3720      	adds	r7, #32
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}

0800e6f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800e6f2:	b580      	push	{r7, lr}
 800e6f4:	b090      	sub	sp, #64	; 0x40
 800e6f6:	af00      	add	r7, sp, #0
 800e6f8:	60f8      	str	r0, [r7, #12]
 800e6fa:	60b9      	str	r1, [r7, #8]
 800e6fc:	603b      	str	r3, [r7, #0]
 800e6fe:	4613      	mov	r3, r2
 800e700:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e702:	e050      	b.n	800e7a6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e704:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e70a:	d04c      	beq.n	800e7a6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800e70c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d007      	beq.n	800e722 <UART_WaitOnFlagUntilTimeout+0x30>
 800e712:	f7fa fdfb 	bl	800930c <HAL_GetTick>
 800e716:	4602      	mov	r2, r0
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	1ad3      	subs	r3, r2, r3
 800e71c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e71e:	429a      	cmp	r2, r3
 800e720:	d241      	bcs.n	800e7a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	330c      	adds	r3, #12
 800e728:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e72c:	e853 3f00 	ldrex	r3, [r3]
 800e730:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e734:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e738:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	330c      	adds	r3, #12
 800e740:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e742:	637a      	str	r2, [r7, #52]	; 0x34
 800e744:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e746:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e748:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e74a:	e841 2300 	strex	r3, r2, [r1]
 800e74e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e752:	2b00      	cmp	r3, #0
 800e754:	d1e5      	bne.n	800e722 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	3314      	adds	r3, #20
 800e75c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	e853 3f00 	ldrex	r3, [r3]
 800e764:	613b      	str	r3, [r7, #16]
   return(result);
 800e766:	693b      	ldr	r3, [r7, #16]
 800e768:	f023 0301 	bic.w	r3, r3, #1
 800e76c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	3314      	adds	r3, #20
 800e774:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e776:	623a      	str	r2, [r7, #32]
 800e778:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e77a:	69f9      	ldr	r1, [r7, #28]
 800e77c:	6a3a      	ldr	r2, [r7, #32]
 800e77e:	e841 2300 	strex	r3, r2, [r1]
 800e782:	61bb      	str	r3, [r7, #24]
   return(result);
 800e784:	69bb      	ldr	r3, [r7, #24]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d1e5      	bne.n	800e756 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	2220      	movs	r2, #32
 800e78e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	2220      	movs	r2, #32
 800e796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	2200      	movs	r2, #0
 800e79e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800e7a2:	2303      	movs	r3, #3
 800e7a4:	e00f      	b.n	800e7c6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	681a      	ldr	r2, [r3, #0]
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	4013      	ands	r3, r2
 800e7b0:	68ba      	ldr	r2, [r7, #8]
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	bf0c      	ite	eq
 800e7b6:	2301      	moveq	r3, #1
 800e7b8:	2300      	movne	r3, #0
 800e7ba:	b2db      	uxtb	r3, r3
 800e7bc:	461a      	mov	r2, r3
 800e7be:	79fb      	ldrb	r3, [r7, #7]
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d09f      	beq.n	800e704 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e7c4:	2300      	movs	r3, #0
}
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	3740      	adds	r7, #64	; 0x40
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}
	...

0800e7d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7d4:	b09f      	sub	sp, #124	; 0x7c
 800e7d6:	af00      	add	r7, sp, #0
 800e7d8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e7da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	691b      	ldr	r3, [r3, #16]
 800e7e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e7e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7e6:	68d9      	ldr	r1, [r3, #12]
 800e7e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7ea:	681a      	ldr	r2, [r3, #0]
 800e7ec:	ea40 0301 	orr.w	r3, r0, r1
 800e7f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e7f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7f4:	689a      	ldr	r2, [r3, #8]
 800e7f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7f8:	691b      	ldr	r3, [r3, #16]
 800e7fa:	431a      	orrs	r2, r3
 800e7fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7fe:	695b      	ldr	r3, [r3, #20]
 800e800:	431a      	orrs	r2, r3
 800e802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e804:	69db      	ldr	r3, [r3, #28]
 800e806:	4313      	orrs	r3, r2
 800e808:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800e80a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	68db      	ldr	r3, [r3, #12]
 800e810:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800e814:	f021 010c 	bic.w	r1, r1, #12
 800e818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e81a:	681a      	ldr	r2, [r3, #0]
 800e81c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e81e:	430b      	orrs	r3, r1
 800e820:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	695b      	ldr	r3, [r3, #20]
 800e828:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800e82c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e82e:	6999      	ldr	r1, [r3, #24]
 800e830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e832:	681a      	ldr	r2, [r3, #0]
 800e834:	ea40 0301 	orr.w	r3, r0, r1
 800e838:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e83a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e83c:	681a      	ldr	r2, [r3, #0]
 800e83e:	4bc5      	ldr	r3, [pc, #788]	; (800eb54 <UART_SetConfig+0x384>)
 800e840:	429a      	cmp	r2, r3
 800e842:	d004      	beq.n	800e84e <UART_SetConfig+0x7e>
 800e844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e846:	681a      	ldr	r2, [r3, #0]
 800e848:	4bc3      	ldr	r3, [pc, #780]	; (800eb58 <UART_SetConfig+0x388>)
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d103      	bne.n	800e856 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e84e:	f7fd f865 	bl	800b91c <HAL_RCC_GetPCLK2Freq>
 800e852:	6778      	str	r0, [r7, #116]	; 0x74
 800e854:	e002      	b.n	800e85c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e856:	f7fd f84d 	bl	800b8f4 <HAL_RCC_GetPCLK1Freq>
 800e85a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e85c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e85e:	69db      	ldr	r3, [r3, #28]
 800e860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e864:	f040 80b6 	bne.w	800e9d4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e868:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e86a:	461c      	mov	r4, r3
 800e86c:	f04f 0500 	mov.w	r5, #0
 800e870:	4622      	mov	r2, r4
 800e872:	462b      	mov	r3, r5
 800e874:	1891      	adds	r1, r2, r2
 800e876:	6439      	str	r1, [r7, #64]	; 0x40
 800e878:	415b      	adcs	r3, r3
 800e87a:	647b      	str	r3, [r7, #68]	; 0x44
 800e87c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e880:	1912      	adds	r2, r2, r4
 800e882:	eb45 0303 	adc.w	r3, r5, r3
 800e886:	f04f 0000 	mov.w	r0, #0
 800e88a:	f04f 0100 	mov.w	r1, #0
 800e88e:	00d9      	lsls	r1, r3, #3
 800e890:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e894:	00d0      	lsls	r0, r2, #3
 800e896:	4602      	mov	r2, r0
 800e898:	460b      	mov	r3, r1
 800e89a:	1911      	adds	r1, r2, r4
 800e89c:	6639      	str	r1, [r7, #96]	; 0x60
 800e89e:	416b      	adcs	r3, r5
 800e8a0:	667b      	str	r3, [r7, #100]	; 0x64
 800e8a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8a4:	685b      	ldr	r3, [r3, #4]
 800e8a6:	461a      	mov	r2, r3
 800e8a8:	f04f 0300 	mov.w	r3, #0
 800e8ac:	1891      	adds	r1, r2, r2
 800e8ae:	63b9      	str	r1, [r7, #56]	; 0x38
 800e8b0:	415b      	adcs	r3, r3
 800e8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e8b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e8b8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800e8bc:	f7f2 fa54 	bl	8000d68 <__aeabi_uldivmod>
 800e8c0:	4602      	mov	r2, r0
 800e8c2:	460b      	mov	r3, r1
 800e8c4:	4ba5      	ldr	r3, [pc, #660]	; (800eb5c <UART_SetConfig+0x38c>)
 800e8c6:	fba3 2302 	umull	r2, r3, r3, r2
 800e8ca:	095b      	lsrs	r3, r3, #5
 800e8cc:	011e      	lsls	r6, r3, #4
 800e8ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e8d0:	461c      	mov	r4, r3
 800e8d2:	f04f 0500 	mov.w	r5, #0
 800e8d6:	4622      	mov	r2, r4
 800e8d8:	462b      	mov	r3, r5
 800e8da:	1891      	adds	r1, r2, r2
 800e8dc:	6339      	str	r1, [r7, #48]	; 0x30
 800e8de:	415b      	adcs	r3, r3
 800e8e0:	637b      	str	r3, [r7, #52]	; 0x34
 800e8e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800e8e6:	1912      	adds	r2, r2, r4
 800e8e8:	eb45 0303 	adc.w	r3, r5, r3
 800e8ec:	f04f 0000 	mov.w	r0, #0
 800e8f0:	f04f 0100 	mov.w	r1, #0
 800e8f4:	00d9      	lsls	r1, r3, #3
 800e8f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e8fa:	00d0      	lsls	r0, r2, #3
 800e8fc:	4602      	mov	r2, r0
 800e8fe:	460b      	mov	r3, r1
 800e900:	1911      	adds	r1, r2, r4
 800e902:	65b9      	str	r1, [r7, #88]	; 0x58
 800e904:	416b      	adcs	r3, r5
 800e906:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e90a:	685b      	ldr	r3, [r3, #4]
 800e90c:	461a      	mov	r2, r3
 800e90e:	f04f 0300 	mov.w	r3, #0
 800e912:	1891      	adds	r1, r2, r2
 800e914:	62b9      	str	r1, [r7, #40]	; 0x28
 800e916:	415b      	adcs	r3, r3
 800e918:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e91a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e91e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800e922:	f7f2 fa21 	bl	8000d68 <__aeabi_uldivmod>
 800e926:	4602      	mov	r2, r0
 800e928:	460b      	mov	r3, r1
 800e92a:	4b8c      	ldr	r3, [pc, #560]	; (800eb5c <UART_SetConfig+0x38c>)
 800e92c:	fba3 1302 	umull	r1, r3, r3, r2
 800e930:	095b      	lsrs	r3, r3, #5
 800e932:	2164      	movs	r1, #100	; 0x64
 800e934:	fb01 f303 	mul.w	r3, r1, r3
 800e938:	1ad3      	subs	r3, r2, r3
 800e93a:	00db      	lsls	r3, r3, #3
 800e93c:	3332      	adds	r3, #50	; 0x32
 800e93e:	4a87      	ldr	r2, [pc, #540]	; (800eb5c <UART_SetConfig+0x38c>)
 800e940:	fba2 2303 	umull	r2, r3, r2, r3
 800e944:	095b      	lsrs	r3, r3, #5
 800e946:	005b      	lsls	r3, r3, #1
 800e948:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e94c:	441e      	add	r6, r3
 800e94e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e950:	4618      	mov	r0, r3
 800e952:	f04f 0100 	mov.w	r1, #0
 800e956:	4602      	mov	r2, r0
 800e958:	460b      	mov	r3, r1
 800e95a:	1894      	adds	r4, r2, r2
 800e95c:	623c      	str	r4, [r7, #32]
 800e95e:	415b      	adcs	r3, r3
 800e960:	627b      	str	r3, [r7, #36]	; 0x24
 800e962:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e966:	1812      	adds	r2, r2, r0
 800e968:	eb41 0303 	adc.w	r3, r1, r3
 800e96c:	f04f 0400 	mov.w	r4, #0
 800e970:	f04f 0500 	mov.w	r5, #0
 800e974:	00dd      	lsls	r5, r3, #3
 800e976:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e97a:	00d4      	lsls	r4, r2, #3
 800e97c:	4622      	mov	r2, r4
 800e97e:	462b      	mov	r3, r5
 800e980:	1814      	adds	r4, r2, r0
 800e982:	653c      	str	r4, [r7, #80]	; 0x50
 800e984:	414b      	adcs	r3, r1
 800e986:	657b      	str	r3, [r7, #84]	; 0x54
 800e988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e98a:	685b      	ldr	r3, [r3, #4]
 800e98c:	461a      	mov	r2, r3
 800e98e:	f04f 0300 	mov.w	r3, #0
 800e992:	1891      	adds	r1, r2, r2
 800e994:	61b9      	str	r1, [r7, #24]
 800e996:	415b      	adcs	r3, r3
 800e998:	61fb      	str	r3, [r7, #28]
 800e99a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e99e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e9a2:	f7f2 f9e1 	bl	8000d68 <__aeabi_uldivmod>
 800e9a6:	4602      	mov	r2, r0
 800e9a8:	460b      	mov	r3, r1
 800e9aa:	4b6c      	ldr	r3, [pc, #432]	; (800eb5c <UART_SetConfig+0x38c>)
 800e9ac:	fba3 1302 	umull	r1, r3, r3, r2
 800e9b0:	095b      	lsrs	r3, r3, #5
 800e9b2:	2164      	movs	r1, #100	; 0x64
 800e9b4:	fb01 f303 	mul.w	r3, r1, r3
 800e9b8:	1ad3      	subs	r3, r2, r3
 800e9ba:	00db      	lsls	r3, r3, #3
 800e9bc:	3332      	adds	r3, #50	; 0x32
 800e9be:	4a67      	ldr	r2, [pc, #412]	; (800eb5c <UART_SetConfig+0x38c>)
 800e9c0:	fba2 2303 	umull	r2, r3, r2, r3
 800e9c4:	095b      	lsrs	r3, r3, #5
 800e9c6:	f003 0207 	and.w	r2, r3, #7
 800e9ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	4432      	add	r2, r6
 800e9d0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e9d2:	e0b9      	b.n	800eb48 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e9d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e9d6:	461c      	mov	r4, r3
 800e9d8:	f04f 0500 	mov.w	r5, #0
 800e9dc:	4622      	mov	r2, r4
 800e9de:	462b      	mov	r3, r5
 800e9e0:	1891      	adds	r1, r2, r2
 800e9e2:	6139      	str	r1, [r7, #16]
 800e9e4:	415b      	adcs	r3, r3
 800e9e6:	617b      	str	r3, [r7, #20]
 800e9e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e9ec:	1912      	adds	r2, r2, r4
 800e9ee:	eb45 0303 	adc.w	r3, r5, r3
 800e9f2:	f04f 0000 	mov.w	r0, #0
 800e9f6:	f04f 0100 	mov.w	r1, #0
 800e9fa:	00d9      	lsls	r1, r3, #3
 800e9fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ea00:	00d0      	lsls	r0, r2, #3
 800ea02:	4602      	mov	r2, r0
 800ea04:	460b      	mov	r3, r1
 800ea06:	eb12 0804 	adds.w	r8, r2, r4
 800ea0a:	eb43 0905 	adc.w	r9, r3, r5
 800ea0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea10:	685b      	ldr	r3, [r3, #4]
 800ea12:	4618      	mov	r0, r3
 800ea14:	f04f 0100 	mov.w	r1, #0
 800ea18:	f04f 0200 	mov.w	r2, #0
 800ea1c:	f04f 0300 	mov.w	r3, #0
 800ea20:	008b      	lsls	r3, r1, #2
 800ea22:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ea26:	0082      	lsls	r2, r0, #2
 800ea28:	4640      	mov	r0, r8
 800ea2a:	4649      	mov	r1, r9
 800ea2c:	f7f2 f99c 	bl	8000d68 <__aeabi_uldivmod>
 800ea30:	4602      	mov	r2, r0
 800ea32:	460b      	mov	r3, r1
 800ea34:	4b49      	ldr	r3, [pc, #292]	; (800eb5c <UART_SetConfig+0x38c>)
 800ea36:	fba3 2302 	umull	r2, r3, r3, r2
 800ea3a:	095b      	lsrs	r3, r3, #5
 800ea3c:	011e      	lsls	r6, r3, #4
 800ea3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ea40:	4618      	mov	r0, r3
 800ea42:	f04f 0100 	mov.w	r1, #0
 800ea46:	4602      	mov	r2, r0
 800ea48:	460b      	mov	r3, r1
 800ea4a:	1894      	adds	r4, r2, r2
 800ea4c:	60bc      	str	r4, [r7, #8]
 800ea4e:	415b      	adcs	r3, r3
 800ea50:	60fb      	str	r3, [r7, #12]
 800ea52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ea56:	1812      	adds	r2, r2, r0
 800ea58:	eb41 0303 	adc.w	r3, r1, r3
 800ea5c:	f04f 0400 	mov.w	r4, #0
 800ea60:	f04f 0500 	mov.w	r5, #0
 800ea64:	00dd      	lsls	r5, r3, #3
 800ea66:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ea6a:	00d4      	lsls	r4, r2, #3
 800ea6c:	4622      	mov	r2, r4
 800ea6e:	462b      	mov	r3, r5
 800ea70:	1814      	adds	r4, r2, r0
 800ea72:	64bc      	str	r4, [r7, #72]	; 0x48
 800ea74:	414b      	adcs	r3, r1
 800ea76:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea7a:	685b      	ldr	r3, [r3, #4]
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f04f 0100 	mov.w	r1, #0
 800ea82:	f04f 0200 	mov.w	r2, #0
 800ea86:	f04f 0300 	mov.w	r3, #0
 800ea8a:	008b      	lsls	r3, r1, #2
 800ea8c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ea90:	0082      	lsls	r2, r0, #2
 800ea92:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800ea96:	f7f2 f967 	bl	8000d68 <__aeabi_uldivmod>
 800ea9a:	4602      	mov	r2, r0
 800ea9c:	460b      	mov	r3, r1
 800ea9e:	4b2f      	ldr	r3, [pc, #188]	; (800eb5c <UART_SetConfig+0x38c>)
 800eaa0:	fba3 1302 	umull	r1, r3, r3, r2
 800eaa4:	095b      	lsrs	r3, r3, #5
 800eaa6:	2164      	movs	r1, #100	; 0x64
 800eaa8:	fb01 f303 	mul.w	r3, r1, r3
 800eaac:	1ad3      	subs	r3, r2, r3
 800eaae:	011b      	lsls	r3, r3, #4
 800eab0:	3332      	adds	r3, #50	; 0x32
 800eab2:	4a2a      	ldr	r2, [pc, #168]	; (800eb5c <UART_SetConfig+0x38c>)
 800eab4:	fba2 2303 	umull	r2, r3, r2, r3
 800eab8:	095b      	lsrs	r3, r3, #5
 800eaba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eabe:	441e      	add	r6, r3
 800eac0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eac2:	4618      	mov	r0, r3
 800eac4:	f04f 0100 	mov.w	r1, #0
 800eac8:	4602      	mov	r2, r0
 800eaca:	460b      	mov	r3, r1
 800eacc:	1894      	adds	r4, r2, r2
 800eace:	603c      	str	r4, [r7, #0]
 800ead0:	415b      	adcs	r3, r3
 800ead2:	607b      	str	r3, [r7, #4]
 800ead4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ead8:	1812      	adds	r2, r2, r0
 800eada:	eb41 0303 	adc.w	r3, r1, r3
 800eade:	f04f 0400 	mov.w	r4, #0
 800eae2:	f04f 0500 	mov.w	r5, #0
 800eae6:	00dd      	lsls	r5, r3, #3
 800eae8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800eaec:	00d4      	lsls	r4, r2, #3
 800eaee:	4622      	mov	r2, r4
 800eaf0:	462b      	mov	r3, r5
 800eaf2:	eb12 0a00 	adds.w	sl, r2, r0
 800eaf6:	eb43 0b01 	adc.w	fp, r3, r1
 800eafa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eafc:	685b      	ldr	r3, [r3, #4]
 800eafe:	4618      	mov	r0, r3
 800eb00:	f04f 0100 	mov.w	r1, #0
 800eb04:	f04f 0200 	mov.w	r2, #0
 800eb08:	f04f 0300 	mov.w	r3, #0
 800eb0c:	008b      	lsls	r3, r1, #2
 800eb0e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800eb12:	0082      	lsls	r2, r0, #2
 800eb14:	4650      	mov	r0, sl
 800eb16:	4659      	mov	r1, fp
 800eb18:	f7f2 f926 	bl	8000d68 <__aeabi_uldivmod>
 800eb1c:	4602      	mov	r2, r0
 800eb1e:	460b      	mov	r3, r1
 800eb20:	4b0e      	ldr	r3, [pc, #56]	; (800eb5c <UART_SetConfig+0x38c>)
 800eb22:	fba3 1302 	umull	r1, r3, r3, r2
 800eb26:	095b      	lsrs	r3, r3, #5
 800eb28:	2164      	movs	r1, #100	; 0x64
 800eb2a:	fb01 f303 	mul.w	r3, r1, r3
 800eb2e:	1ad3      	subs	r3, r2, r3
 800eb30:	011b      	lsls	r3, r3, #4
 800eb32:	3332      	adds	r3, #50	; 0x32
 800eb34:	4a09      	ldr	r2, [pc, #36]	; (800eb5c <UART_SetConfig+0x38c>)
 800eb36:	fba2 2303 	umull	r2, r3, r2, r3
 800eb3a:	095b      	lsrs	r3, r3, #5
 800eb3c:	f003 020f 	and.w	r2, r3, #15
 800eb40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	4432      	add	r2, r6
 800eb46:	609a      	str	r2, [r3, #8]
}
 800eb48:	bf00      	nop
 800eb4a:	377c      	adds	r7, #124	; 0x7c
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb52:	bf00      	nop
 800eb54:	40011000 	.word	0x40011000
 800eb58:	40011400 	.word	0x40011400
 800eb5c:	51eb851f 	.word	0x51eb851f

0800eb60 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800eb64:	4904      	ldr	r1, [pc, #16]	; (800eb78 <MX_FATFS_Init+0x18>)
 800eb66:	4805      	ldr	r0, [pc, #20]	; (800eb7c <MX_FATFS_Init+0x1c>)
 800eb68:	f000 f8b0 	bl	800eccc <FATFS_LinkDriver>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	461a      	mov	r2, r3
 800eb70:	4b03      	ldr	r3, [pc, #12]	; (800eb80 <MX_FATFS_Init+0x20>)
 800eb72:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800eb74:	bf00      	nop
 800eb76:	bd80      	pop	{r7, pc}
 800eb78:	20005fcc 	.word	0x20005fcc
 800eb7c:	2000006c 	.word	0x2000006c
 800eb80:	20005fd0 	.word	0x20005fd0

0800eb84 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800eb84:	b480      	push	{r7}
 800eb86:	b083      	sub	sp, #12
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800eb8e:	4b06      	ldr	r3, [pc, #24]	; (800eba8 <USER_initialize+0x24>)
 800eb90:	2201      	movs	r2, #1
 800eb92:	701a      	strb	r2, [r3, #0]
    return Stat;
 800eb94:	4b04      	ldr	r3, [pc, #16]	; (800eba8 <USER_initialize+0x24>)
 800eb96:	781b      	ldrb	r3, [r3, #0]
 800eb98:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	370c      	adds	r7, #12
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba4:	4770      	bx	lr
 800eba6:	bf00      	nop
 800eba8:	20000069 	.word	0x20000069

0800ebac <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800ebac:	b480      	push	{r7}
 800ebae:	b083      	sub	sp, #12
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800ebb6:	4b06      	ldr	r3, [pc, #24]	; (800ebd0 <USER_status+0x24>)
 800ebb8:	2201      	movs	r2, #1
 800ebba:	701a      	strb	r2, [r3, #0]
    return Stat;
 800ebbc:	4b04      	ldr	r3, [pc, #16]	; (800ebd0 <USER_status+0x24>)
 800ebbe:	781b      	ldrb	r3, [r3, #0]
 800ebc0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	370c      	adds	r7, #12
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebcc:	4770      	bx	lr
 800ebce:	bf00      	nop
 800ebd0:	20000069 	.word	0x20000069

0800ebd4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	b085      	sub	sp, #20
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	60b9      	str	r1, [r7, #8]
 800ebdc:	607a      	str	r2, [r7, #4]
 800ebde:	603b      	str	r3, [r7, #0]
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800ebe4:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	3714      	adds	r7, #20
 800ebea:	46bd      	mov	sp, r7
 800ebec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf0:	4770      	bx	lr

0800ebf2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800ebf2:	b480      	push	{r7}
 800ebf4:	b085      	sub	sp, #20
 800ebf6:	af00      	add	r7, sp, #0
 800ebf8:	60b9      	str	r1, [r7, #8]
 800ebfa:	607a      	str	r2, [r7, #4]
 800ebfc:	603b      	str	r3, [r7, #0]
 800ebfe:	4603      	mov	r3, r0
 800ec00:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800ec02:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800ec04:	4618      	mov	r0, r3
 800ec06:	3714      	adds	r7, #20
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0e:	4770      	bx	lr

0800ec10 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ec10:	b480      	push	{r7}
 800ec12:	b085      	sub	sp, #20
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	4603      	mov	r3, r0
 800ec18:	603a      	str	r2, [r7, #0]
 800ec1a:	71fb      	strb	r3, [r7, #7]
 800ec1c:	460b      	mov	r3, r1
 800ec1e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800ec20:	2301      	movs	r3, #1
 800ec22:	73fb      	strb	r3, [r7, #15]
    return res;
 800ec24:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	3714      	adds	r7, #20
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec30:	4770      	bx	lr
	...

0800ec34 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ec34:	b480      	push	{r7}
 800ec36:	b087      	sub	sp, #28
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	60f8      	str	r0, [r7, #12]
 800ec3c:	60b9      	str	r1, [r7, #8]
 800ec3e:	4613      	mov	r3, r2
 800ec40:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ec42:	2301      	movs	r3, #1
 800ec44:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ec46:	2300      	movs	r3, #0
 800ec48:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ec4a:	4b1f      	ldr	r3, [pc, #124]	; (800ecc8 <FATFS_LinkDriverEx+0x94>)
 800ec4c:	7a5b      	ldrb	r3, [r3, #9]
 800ec4e:	b2db      	uxtb	r3, r3
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d131      	bne.n	800ecb8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ec54:	4b1c      	ldr	r3, [pc, #112]	; (800ecc8 <FATFS_LinkDriverEx+0x94>)
 800ec56:	7a5b      	ldrb	r3, [r3, #9]
 800ec58:	b2db      	uxtb	r3, r3
 800ec5a:	461a      	mov	r2, r3
 800ec5c:	4b1a      	ldr	r3, [pc, #104]	; (800ecc8 <FATFS_LinkDriverEx+0x94>)
 800ec5e:	2100      	movs	r1, #0
 800ec60:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ec62:	4b19      	ldr	r3, [pc, #100]	; (800ecc8 <FATFS_LinkDriverEx+0x94>)
 800ec64:	7a5b      	ldrb	r3, [r3, #9]
 800ec66:	b2db      	uxtb	r3, r3
 800ec68:	4a17      	ldr	r2, [pc, #92]	; (800ecc8 <FATFS_LinkDriverEx+0x94>)
 800ec6a:	009b      	lsls	r3, r3, #2
 800ec6c:	4413      	add	r3, r2
 800ec6e:	68fa      	ldr	r2, [r7, #12]
 800ec70:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ec72:	4b15      	ldr	r3, [pc, #84]	; (800ecc8 <FATFS_LinkDriverEx+0x94>)
 800ec74:	7a5b      	ldrb	r3, [r3, #9]
 800ec76:	b2db      	uxtb	r3, r3
 800ec78:	461a      	mov	r2, r3
 800ec7a:	4b13      	ldr	r3, [pc, #76]	; (800ecc8 <FATFS_LinkDriverEx+0x94>)
 800ec7c:	4413      	add	r3, r2
 800ec7e:	79fa      	ldrb	r2, [r7, #7]
 800ec80:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ec82:	4b11      	ldr	r3, [pc, #68]	; (800ecc8 <FATFS_LinkDriverEx+0x94>)
 800ec84:	7a5b      	ldrb	r3, [r3, #9]
 800ec86:	b2db      	uxtb	r3, r3
 800ec88:	1c5a      	adds	r2, r3, #1
 800ec8a:	b2d1      	uxtb	r1, r2
 800ec8c:	4a0e      	ldr	r2, [pc, #56]	; (800ecc8 <FATFS_LinkDriverEx+0x94>)
 800ec8e:	7251      	strb	r1, [r2, #9]
 800ec90:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ec92:	7dbb      	ldrb	r3, [r7, #22]
 800ec94:	3330      	adds	r3, #48	; 0x30
 800ec96:	b2da      	uxtb	r2, r3
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	3301      	adds	r3, #1
 800eca0:	223a      	movs	r2, #58	; 0x3a
 800eca2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800eca4:	68bb      	ldr	r3, [r7, #8]
 800eca6:	3302      	adds	r3, #2
 800eca8:	222f      	movs	r2, #47	; 0x2f
 800ecaa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ecac:	68bb      	ldr	r3, [r7, #8]
 800ecae:	3303      	adds	r3, #3
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ecb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecba:	4618      	mov	r0, r3
 800ecbc:	371c      	adds	r7, #28
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc4:	4770      	bx	lr
 800ecc6:	bf00      	nop
 800ecc8:	200005bc 	.word	0x200005bc

0800eccc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b082      	sub	sp, #8
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
 800ecd4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	6839      	ldr	r1, [r7, #0]
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f7ff ffaa 	bl	800ec34 <FATFS_LinkDriverEx>
 800ece0:	4603      	mov	r3, r0
}
 800ece2:	4618      	mov	r0, r3
 800ece4:	3708      	adds	r7, #8
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}
	...

0800ecec <__NVIC_SetPriority>:
{
 800ecec:	b480      	push	{r7}
 800ecee:	b083      	sub	sp, #12
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	6039      	str	r1, [r7, #0]
 800ecf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ecf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	db0a      	blt.n	800ed16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	b2da      	uxtb	r2, r3
 800ed04:	490c      	ldr	r1, [pc, #48]	; (800ed38 <__NVIC_SetPriority+0x4c>)
 800ed06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ed0a:	0112      	lsls	r2, r2, #4
 800ed0c:	b2d2      	uxtb	r2, r2
 800ed0e:	440b      	add	r3, r1
 800ed10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ed14:	e00a      	b.n	800ed2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ed16:	683b      	ldr	r3, [r7, #0]
 800ed18:	b2da      	uxtb	r2, r3
 800ed1a:	4908      	ldr	r1, [pc, #32]	; (800ed3c <__NVIC_SetPriority+0x50>)
 800ed1c:	79fb      	ldrb	r3, [r7, #7]
 800ed1e:	f003 030f 	and.w	r3, r3, #15
 800ed22:	3b04      	subs	r3, #4
 800ed24:	0112      	lsls	r2, r2, #4
 800ed26:	b2d2      	uxtb	r2, r2
 800ed28:	440b      	add	r3, r1
 800ed2a:	761a      	strb	r2, [r3, #24]
}
 800ed2c:	bf00      	nop
 800ed2e:	370c      	adds	r7, #12
 800ed30:	46bd      	mov	sp, r7
 800ed32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed36:	4770      	bx	lr
 800ed38:	e000e100 	.word	0xe000e100
 800ed3c:	e000ed00 	.word	0xe000ed00

0800ed40 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ed40:	b580      	push	{r7, lr}
 800ed42:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ed44:	4b05      	ldr	r3, [pc, #20]	; (800ed5c <SysTick_Handler+0x1c>)
 800ed46:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ed48:	f001 fdba 	bl	80108c0 <xTaskGetSchedulerState>
 800ed4c:	4603      	mov	r3, r0
 800ed4e:	2b01      	cmp	r3, #1
 800ed50:	d001      	beq.n	800ed56 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ed52:	f002 fba1 	bl	8011498 <xPortSysTickHandler>
  }
}
 800ed56:	bf00      	nop
 800ed58:	bd80      	pop	{r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	e000e010 	.word	0xe000e010

0800ed60 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ed60:	b580      	push	{r7, lr}
 800ed62:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ed64:	2100      	movs	r1, #0
 800ed66:	f06f 0004 	mvn.w	r0, #4
 800ed6a:	f7ff ffbf 	bl	800ecec <__NVIC_SetPriority>
#endif
}
 800ed6e:	bf00      	nop
 800ed70:	bd80      	pop	{r7, pc}
	...

0800ed74 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ed74:	b480      	push	{r7}
 800ed76:	b083      	sub	sp, #12
 800ed78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed7a:	f3ef 8305 	mrs	r3, IPSR
 800ed7e:	603b      	str	r3, [r7, #0]
  return(result);
 800ed80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d003      	beq.n	800ed8e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ed86:	f06f 0305 	mvn.w	r3, #5
 800ed8a:	607b      	str	r3, [r7, #4]
 800ed8c:	e00c      	b.n	800eda8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ed8e:	4b0a      	ldr	r3, [pc, #40]	; (800edb8 <osKernelInitialize+0x44>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d105      	bne.n	800eda2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ed96:	4b08      	ldr	r3, [pc, #32]	; (800edb8 <osKernelInitialize+0x44>)
 800ed98:	2201      	movs	r2, #1
 800ed9a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	607b      	str	r3, [r7, #4]
 800eda0:	e002      	b.n	800eda8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800eda2:	f04f 33ff 	mov.w	r3, #4294967295
 800eda6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800eda8:	687b      	ldr	r3, [r7, #4]
}
 800edaa:	4618      	mov	r0, r3
 800edac:	370c      	adds	r7, #12
 800edae:	46bd      	mov	sp, r7
 800edb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb4:	4770      	bx	lr
 800edb6:	bf00      	nop
 800edb8:	200005c8 	.word	0x200005c8

0800edbc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b082      	sub	sp, #8
 800edc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800edc2:	f3ef 8305 	mrs	r3, IPSR
 800edc6:	603b      	str	r3, [r7, #0]
  return(result);
 800edc8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d003      	beq.n	800edd6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800edce:	f06f 0305 	mvn.w	r3, #5
 800edd2:	607b      	str	r3, [r7, #4]
 800edd4:	e010      	b.n	800edf8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800edd6:	4b0b      	ldr	r3, [pc, #44]	; (800ee04 <osKernelStart+0x48>)
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	2b01      	cmp	r3, #1
 800eddc:	d109      	bne.n	800edf2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800edde:	f7ff ffbf 	bl	800ed60 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ede2:	4b08      	ldr	r3, [pc, #32]	; (800ee04 <osKernelStart+0x48>)
 800ede4:	2202      	movs	r2, #2
 800ede6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ede8:	f001 f8fe 	bl	800ffe8 <vTaskStartScheduler>
      stat = osOK;
 800edec:	2300      	movs	r3, #0
 800edee:	607b      	str	r3, [r7, #4]
 800edf0:	e002      	b.n	800edf8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800edf2:	f04f 33ff 	mov.w	r3, #4294967295
 800edf6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800edf8:	687b      	ldr	r3, [r7, #4]
}
 800edfa:	4618      	mov	r0, r3
 800edfc:	3708      	adds	r7, #8
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd80      	pop	{r7, pc}
 800ee02:	bf00      	nop
 800ee04:	200005c8 	.word	0x200005c8

0800ee08 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b08e      	sub	sp, #56	; 0x38
 800ee0c:	af04      	add	r7, sp, #16
 800ee0e:	60f8      	str	r0, [r7, #12]
 800ee10:	60b9      	str	r1, [r7, #8]
 800ee12:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ee14:	2300      	movs	r3, #0
 800ee16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee18:	f3ef 8305 	mrs	r3, IPSR
 800ee1c:	617b      	str	r3, [r7, #20]
  return(result);
 800ee1e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d17e      	bne.n	800ef22 <osThreadNew+0x11a>
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d07b      	beq.n	800ef22 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ee2a:	2380      	movs	r3, #128	; 0x80
 800ee2c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ee2e:	2318      	movs	r3, #24
 800ee30:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ee32:	2300      	movs	r3, #0
 800ee34:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ee36:	f04f 33ff 	mov.w	r3, #4294967295
 800ee3a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d045      	beq.n	800eece <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d002      	beq.n	800ee50 <osThreadNew+0x48>
        name = attr->name;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	699b      	ldr	r3, [r3, #24]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d002      	beq.n	800ee5e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	699b      	ldr	r3, [r3, #24]
 800ee5c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ee5e:	69fb      	ldr	r3, [r7, #28]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d008      	beq.n	800ee76 <osThreadNew+0x6e>
 800ee64:	69fb      	ldr	r3, [r7, #28]
 800ee66:	2b38      	cmp	r3, #56	; 0x38
 800ee68:	d805      	bhi.n	800ee76 <osThreadNew+0x6e>
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	685b      	ldr	r3, [r3, #4]
 800ee6e:	f003 0301 	and.w	r3, r3, #1
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d001      	beq.n	800ee7a <osThreadNew+0x72>
        return (NULL);
 800ee76:	2300      	movs	r3, #0
 800ee78:	e054      	b.n	800ef24 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	695b      	ldr	r3, [r3, #20]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d003      	beq.n	800ee8a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	695b      	ldr	r3, [r3, #20]
 800ee86:	089b      	lsrs	r3, r3, #2
 800ee88:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	689b      	ldr	r3, [r3, #8]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d00e      	beq.n	800eeb0 <osThreadNew+0xa8>
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	68db      	ldr	r3, [r3, #12]
 800ee96:	2bbb      	cmp	r3, #187	; 0xbb
 800ee98:	d90a      	bls.n	800eeb0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d006      	beq.n	800eeb0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	695b      	ldr	r3, [r3, #20]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d002      	beq.n	800eeb0 <osThreadNew+0xa8>
        mem = 1;
 800eeaa:	2301      	movs	r3, #1
 800eeac:	61bb      	str	r3, [r7, #24]
 800eeae:	e010      	b.n	800eed2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	689b      	ldr	r3, [r3, #8]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d10c      	bne.n	800eed2 <osThreadNew+0xca>
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	68db      	ldr	r3, [r3, #12]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d108      	bne.n	800eed2 <osThreadNew+0xca>
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	691b      	ldr	r3, [r3, #16]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d104      	bne.n	800eed2 <osThreadNew+0xca>
          mem = 0;
 800eec8:	2300      	movs	r3, #0
 800eeca:	61bb      	str	r3, [r7, #24]
 800eecc:	e001      	b.n	800eed2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800eece:	2300      	movs	r3, #0
 800eed0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800eed2:	69bb      	ldr	r3, [r7, #24]
 800eed4:	2b01      	cmp	r3, #1
 800eed6:	d110      	bne.n	800eefa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800eedc:	687a      	ldr	r2, [r7, #4]
 800eede:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800eee0:	9202      	str	r2, [sp, #8]
 800eee2:	9301      	str	r3, [sp, #4]
 800eee4:	69fb      	ldr	r3, [r7, #28]
 800eee6:	9300      	str	r3, [sp, #0]
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	6a3a      	ldr	r2, [r7, #32]
 800eeec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eeee:	68f8      	ldr	r0, [r7, #12]
 800eef0:	f000 fe1c 	bl	800fb2c <xTaskCreateStatic>
 800eef4:	4603      	mov	r3, r0
 800eef6:	613b      	str	r3, [r7, #16]
 800eef8:	e013      	b.n	800ef22 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800eefa:	69bb      	ldr	r3, [r7, #24]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d110      	bne.n	800ef22 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ef00:	6a3b      	ldr	r3, [r7, #32]
 800ef02:	b29a      	uxth	r2, r3
 800ef04:	f107 0310 	add.w	r3, r7, #16
 800ef08:	9301      	str	r3, [sp, #4]
 800ef0a:	69fb      	ldr	r3, [r7, #28]
 800ef0c:	9300      	str	r3, [sp, #0]
 800ef0e:	68bb      	ldr	r3, [r7, #8]
 800ef10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef12:	68f8      	ldr	r0, [r7, #12]
 800ef14:	f000 fe67 	bl	800fbe6 <xTaskCreate>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	2b01      	cmp	r3, #1
 800ef1c:	d001      	beq.n	800ef22 <osThreadNew+0x11a>
            hTask = NULL;
 800ef1e:	2300      	movs	r3, #0
 800ef20:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ef22:	693b      	ldr	r3, [r7, #16]
}
 800ef24:	4618      	mov	r0, r3
 800ef26:	3728      	adds	r7, #40	; 0x28
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	bd80      	pop	{r7, pc}

0800ef2c <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b082      	sub	sp, #8
 800ef30:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 800ef32:	f001 fcb5 	bl	80108a0 <xTaskGetCurrentTaskHandle>
 800ef36:	6078      	str	r0, [r7, #4]

  return (id);
 800ef38:	687b      	ldr	r3, [r7, #4]
}
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	3708      	adds	r7, #8
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}

0800ef42 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 800ef42:	b580      	push	{r7, lr}
 800ef44:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800ef46:	2000      	movs	r0, #0
 800ef48:	f000 ffa8 	bl	800fe9c <vTaskDelete>
#endif
  for (;;);
 800ef4c:	e7fe      	b.n	800ef4c <osThreadExit+0xa>

0800ef4e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ef4e:	b580      	push	{r7, lr}
 800ef50:	b084      	sub	sp, #16
 800ef52:	af00      	add	r7, sp, #0
 800ef54:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef56:	f3ef 8305 	mrs	r3, IPSR
 800ef5a:	60bb      	str	r3, [r7, #8]
  return(result);
 800ef5c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d003      	beq.n	800ef6a <osDelay+0x1c>
    stat = osErrorISR;
 800ef62:	f06f 0305 	mvn.w	r3, #5
 800ef66:	60fb      	str	r3, [r7, #12]
 800ef68:	e007      	b.n	800ef7a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d002      	beq.n	800ef7a <osDelay+0x2c>
      vTaskDelay(ticks);
 800ef74:	6878      	ldr	r0, [r7, #4]
 800ef76:	f001 f803 	bl	800ff80 <vTaskDelay>
    }
  }

  return (stat);
 800ef7a:	68fb      	ldr	r3, [r7, #12]
}
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	3710      	adds	r7, #16
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}

0800ef84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ef84:	b480      	push	{r7}
 800ef86:	b085      	sub	sp, #20
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	60f8      	str	r0, [r7, #12]
 800ef8c:	60b9      	str	r1, [r7, #8]
 800ef8e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	4a07      	ldr	r2, [pc, #28]	; (800efb0 <vApplicationGetIdleTaskMemory+0x2c>)
 800ef94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	4a06      	ldr	r2, [pc, #24]	; (800efb4 <vApplicationGetIdleTaskMemory+0x30>)
 800ef9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2280      	movs	r2, #128	; 0x80
 800efa0:	601a      	str	r2, [r3, #0]
}
 800efa2:	bf00      	nop
 800efa4:	3714      	adds	r7, #20
 800efa6:	46bd      	mov	sp, r7
 800efa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efac:	4770      	bx	lr
 800efae:	bf00      	nop
 800efb0:	200005cc 	.word	0x200005cc
 800efb4:	20000688 	.word	0x20000688

0800efb8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800efb8:	b480      	push	{r7}
 800efba:	b085      	sub	sp, #20
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	60f8      	str	r0, [r7, #12]
 800efc0:	60b9      	str	r1, [r7, #8]
 800efc2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	4a07      	ldr	r2, [pc, #28]	; (800efe4 <vApplicationGetTimerTaskMemory+0x2c>)
 800efc8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800efca:	68bb      	ldr	r3, [r7, #8]
 800efcc:	4a06      	ldr	r2, [pc, #24]	; (800efe8 <vApplicationGetTimerTaskMemory+0x30>)
 800efce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800efd6:	601a      	str	r2, [r3, #0]
}
 800efd8:	bf00      	nop
 800efda:	3714      	adds	r7, #20
 800efdc:	46bd      	mov	sp, r7
 800efde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe2:	4770      	bx	lr
 800efe4:	20000888 	.word	0x20000888
 800efe8:	20000944 	.word	0x20000944

0800efec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800efec:	b480      	push	{r7}
 800efee:	b083      	sub	sp, #12
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f103 0208 	add.w	r2, r3, #8
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	f04f 32ff 	mov.w	r2, #4294967295
 800f004:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	f103 0208 	add.w	r2, r3, #8
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f103 0208 	add.w	r2, r3, #8
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	2200      	movs	r2, #0
 800f01e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f020:	bf00      	nop
 800f022:	370c      	adds	r7, #12
 800f024:	46bd      	mov	sp, r7
 800f026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02a:	4770      	bx	lr

0800f02c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f02c:	b480      	push	{r7}
 800f02e:	b083      	sub	sp, #12
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2200      	movs	r2, #0
 800f038:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f03a:	bf00      	nop
 800f03c:	370c      	adds	r7, #12
 800f03e:	46bd      	mov	sp, r7
 800f040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f044:	4770      	bx	lr

0800f046 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f046:	b480      	push	{r7}
 800f048:	b085      	sub	sp, #20
 800f04a:	af00      	add	r7, sp, #0
 800f04c:	6078      	str	r0, [r7, #4]
 800f04e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	685b      	ldr	r3, [r3, #4]
 800f054:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	68fa      	ldr	r2, [r7, #12]
 800f05a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	689a      	ldr	r2, [r3, #8]
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	689b      	ldr	r3, [r3, #8]
 800f068:	683a      	ldr	r2, [r7, #0]
 800f06a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	683a      	ldr	r2, [r7, #0]
 800f070:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	687a      	ldr	r2, [r7, #4]
 800f076:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	1c5a      	adds	r2, r3, #1
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	601a      	str	r2, [r3, #0]
}
 800f082:	bf00      	nop
 800f084:	3714      	adds	r7, #20
 800f086:	46bd      	mov	sp, r7
 800f088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08c:	4770      	bx	lr

0800f08e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f08e:	b480      	push	{r7}
 800f090:	b085      	sub	sp, #20
 800f092:	af00      	add	r7, sp, #0
 800f094:	6078      	str	r0, [r7, #4]
 800f096:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0a4:	d103      	bne.n	800f0ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	691b      	ldr	r3, [r3, #16]
 800f0aa:	60fb      	str	r3, [r7, #12]
 800f0ac:	e00c      	b.n	800f0c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	3308      	adds	r3, #8
 800f0b2:	60fb      	str	r3, [r7, #12]
 800f0b4:	e002      	b.n	800f0bc <vListInsert+0x2e>
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	685b      	ldr	r3, [r3, #4]
 800f0ba:	60fb      	str	r3, [r7, #12]
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	685b      	ldr	r3, [r3, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	68ba      	ldr	r2, [r7, #8]
 800f0c4:	429a      	cmp	r2, r3
 800f0c6:	d2f6      	bcs.n	800f0b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	685a      	ldr	r2, [r3, #4]
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	685b      	ldr	r3, [r3, #4]
 800f0d4:	683a      	ldr	r2, [r7, #0]
 800f0d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	68fa      	ldr	r2, [r7, #12]
 800f0dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	683a      	ldr	r2, [r7, #0]
 800f0e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	687a      	ldr	r2, [r7, #4]
 800f0e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	1c5a      	adds	r2, r3, #1
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	601a      	str	r2, [r3, #0]
}
 800f0f4:	bf00      	nop
 800f0f6:	3714      	adds	r7, #20
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fe:	4770      	bx	lr

0800f100 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f100:	b480      	push	{r7}
 800f102:	b085      	sub	sp, #20
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	691b      	ldr	r3, [r3, #16]
 800f10c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	685b      	ldr	r3, [r3, #4]
 800f112:	687a      	ldr	r2, [r7, #4]
 800f114:	6892      	ldr	r2, [r2, #8]
 800f116:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	689b      	ldr	r3, [r3, #8]
 800f11c:	687a      	ldr	r2, [r7, #4]
 800f11e:	6852      	ldr	r2, [r2, #4]
 800f120:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	685b      	ldr	r3, [r3, #4]
 800f126:	687a      	ldr	r2, [r7, #4]
 800f128:	429a      	cmp	r2, r3
 800f12a:	d103      	bne.n	800f134 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	689a      	ldr	r2, [r3, #8]
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2200      	movs	r2, #0
 800f138:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	1e5a      	subs	r2, r3, #1
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	681b      	ldr	r3, [r3, #0]
}
 800f148:	4618      	mov	r0, r3
 800f14a:	3714      	adds	r7, #20
 800f14c:	46bd      	mov	sp, r7
 800f14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f152:	4770      	bx	lr

0800f154 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b084      	sub	sp, #16
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d10a      	bne.n	800f17e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f16c:	f383 8811 	msr	BASEPRI, r3
 800f170:	f3bf 8f6f 	isb	sy
 800f174:	f3bf 8f4f 	dsb	sy
 800f178:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f17a:	bf00      	nop
 800f17c:	e7fe      	b.n	800f17c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f17e:	f002 f8f9 	bl	8011374 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	681a      	ldr	r2, [r3, #0]
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f18a:	68f9      	ldr	r1, [r7, #12]
 800f18c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f18e:	fb01 f303 	mul.w	r3, r1, r3
 800f192:	441a      	add	r2, r3
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	2200      	movs	r2, #0
 800f19c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	681a      	ldr	r2, [r3, #0]
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	681a      	ldr	r2, [r3, #0]
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1ae:	3b01      	subs	r3, #1
 800f1b0:	68f9      	ldr	r1, [r7, #12]
 800f1b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f1b4:	fb01 f303 	mul.w	r3, r1, r3
 800f1b8:	441a      	add	r2, r3
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	22ff      	movs	r2, #255	; 0xff
 800f1c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	22ff      	movs	r2, #255	; 0xff
 800f1ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d114      	bne.n	800f1fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	691b      	ldr	r3, [r3, #16]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d01a      	beq.n	800f212 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	3310      	adds	r3, #16
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f001 f99b 	bl	801051c <xTaskRemoveFromEventList>
 800f1e6:	4603      	mov	r3, r0
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d012      	beq.n	800f212 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f1ec:	4b0c      	ldr	r3, [pc, #48]	; (800f220 <xQueueGenericReset+0xcc>)
 800f1ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1f2:	601a      	str	r2, [r3, #0]
 800f1f4:	f3bf 8f4f 	dsb	sy
 800f1f8:	f3bf 8f6f 	isb	sy
 800f1fc:	e009      	b.n	800f212 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	3310      	adds	r3, #16
 800f202:	4618      	mov	r0, r3
 800f204:	f7ff fef2 	bl	800efec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	3324      	adds	r3, #36	; 0x24
 800f20c:	4618      	mov	r0, r3
 800f20e:	f7ff feed 	bl	800efec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f212:	f002 f8df 	bl	80113d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f216:	2301      	movs	r3, #1
}
 800f218:	4618      	mov	r0, r3
 800f21a:	3710      	adds	r7, #16
 800f21c:	46bd      	mov	sp, r7
 800f21e:	bd80      	pop	{r7, pc}
 800f220:	e000ed04 	.word	0xe000ed04

0800f224 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f224:	b580      	push	{r7, lr}
 800f226:	b08e      	sub	sp, #56	; 0x38
 800f228:	af02      	add	r7, sp, #8
 800f22a:	60f8      	str	r0, [r7, #12]
 800f22c:	60b9      	str	r1, [r7, #8]
 800f22e:	607a      	str	r2, [r7, #4]
 800f230:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d10a      	bne.n	800f24e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f23c:	f383 8811 	msr	BASEPRI, r3
 800f240:	f3bf 8f6f 	isb	sy
 800f244:	f3bf 8f4f 	dsb	sy
 800f248:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f24a:	bf00      	nop
 800f24c:	e7fe      	b.n	800f24c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f24e:	683b      	ldr	r3, [r7, #0]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d10a      	bne.n	800f26a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f258:	f383 8811 	msr	BASEPRI, r3
 800f25c:	f3bf 8f6f 	isb	sy
 800f260:	f3bf 8f4f 	dsb	sy
 800f264:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f266:	bf00      	nop
 800f268:	e7fe      	b.n	800f268 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d002      	beq.n	800f276 <xQueueGenericCreateStatic+0x52>
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d001      	beq.n	800f27a <xQueueGenericCreateStatic+0x56>
 800f276:	2301      	movs	r3, #1
 800f278:	e000      	b.n	800f27c <xQueueGenericCreateStatic+0x58>
 800f27a:	2300      	movs	r3, #0
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d10a      	bne.n	800f296 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f284:	f383 8811 	msr	BASEPRI, r3
 800f288:	f3bf 8f6f 	isb	sy
 800f28c:	f3bf 8f4f 	dsb	sy
 800f290:	623b      	str	r3, [r7, #32]
}
 800f292:	bf00      	nop
 800f294:	e7fe      	b.n	800f294 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d102      	bne.n	800f2a2 <xQueueGenericCreateStatic+0x7e>
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d101      	bne.n	800f2a6 <xQueueGenericCreateStatic+0x82>
 800f2a2:	2301      	movs	r3, #1
 800f2a4:	e000      	b.n	800f2a8 <xQueueGenericCreateStatic+0x84>
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d10a      	bne.n	800f2c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2b0:	f383 8811 	msr	BASEPRI, r3
 800f2b4:	f3bf 8f6f 	isb	sy
 800f2b8:	f3bf 8f4f 	dsb	sy
 800f2bc:	61fb      	str	r3, [r7, #28]
}
 800f2be:	bf00      	nop
 800f2c0:	e7fe      	b.n	800f2c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f2c2:	2350      	movs	r3, #80	; 0x50
 800f2c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f2c6:	697b      	ldr	r3, [r7, #20]
 800f2c8:	2b50      	cmp	r3, #80	; 0x50
 800f2ca:	d00a      	beq.n	800f2e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800f2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2d0:	f383 8811 	msr	BASEPRI, r3
 800f2d4:	f3bf 8f6f 	isb	sy
 800f2d8:	f3bf 8f4f 	dsb	sy
 800f2dc:	61bb      	str	r3, [r7, #24]
}
 800f2de:	bf00      	nop
 800f2e0:	e7fe      	b.n	800f2e0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f2e2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d00d      	beq.n	800f30a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2f0:	2201      	movs	r2, #1
 800f2f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f2f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2fc:	9300      	str	r3, [sp, #0]
 800f2fe:	4613      	mov	r3, r2
 800f300:	687a      	ldr	r2, [r7, #4]
 800f302:	68b9      	ldr	r1, [r7, #8]
 800f304:	68f8      	ldr	r0, [r7, #12]
 800f306:	f000 f805 	bl	800f314 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f30c:	4618      	mov	r0, r3
 800f30e:	3730      	adds	r7, #48	; 0x30
 800f310:	46bd      	mov	sp, r7
 800f312:	bd80      	pop	{r7, pc}

0800f314 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b084      	sub	sp, #16
 800f318:	af00      	add	r7, sp, #0
 800f31a:	60f8      	str	r0, [r7, #12]
 800f31c:	60b9      	str	r1, [r7, #8]
 800f31e:	607a      	str	r2, [r7, #4]
 800f320:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f322:	68bb      	ldr	r3, [r7, #8]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d103      	bne.n	800f330 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f328:	69bb      	ldr	r3, [r7, #24]
 800f32a:	69ba      	ldr	r2, [r7, #24]
 800f32c:	601a      	str	r2, [r3, #0]
 800f32e:	e002      	b.n	800f336 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f330:	69bb      	ldr	r3, [r7, #24]
 800f332:	687a      	ldr	r2, [r7, #4]
 800f334:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f336:	69bb      	ldr	r3, [r7, #24]
 800f338:	68fa      	ldr	r2, [r7, #12]
 800f33a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f33c:	69bb      	ldr	r3, [r7, #24]
 800f33e:	68ba      	ldr	r2, [r7, #8]
 800f340:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f342:	2101      	movs	r1, #1
 800f344:	69b8      	ldr	r0, [r7, #24]
 800f346:	f7ff ff05 	bl	800f154 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f34a:	69bb      	ldr	r3, [r7, #24]
 800f34c:	78fa      	ldrb	r2, [r7, #3]
 800f34e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f352:	bf00      	nop
 800f354:	3710      	adds	r7, #16
 800f356:	46bd      	mov	sp, r7
 800f358:	bd80      	pop	{r7, pc}
	...

0800f35c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b08e      	sub	sp, #56	; 0x38
 800f360:	af00      	add	r7, sp, #0
 800f362:	60f8      	str	r0, [r7, #12]
 800f364:	60b9      	str	r1, [r7, #8]
 800f366:	607a      	str	r2, [r7, #4]
 800f368:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f36a:	2300      	movs	r3, #0
 800f36c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f374:	2b00      	cmp	r3, #0
 800f376:	d10a      	bne.n	800f38e <xQueueGenericSend+0x32>
	__asm volatile
 800f378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f37c:	f383 8811 	msr	BASEPRI, r3
 800f380:	f3bf 8f6f 	isb	sy
 800f384:	f3bf 8f4f 	dsb	sy
 800f388:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f38a:	bf00      	nop
 800f38c:	e7fe      	b.n	800f38c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f38e:	68bb      	ldr	r3, [r7, #8]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d103      	bne.n	800f39c <xQueueGenericSend+0x40>
 800f394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d101      	bne.n	800f3a0 <xQueueGenericSend+0x44>
 800f39c:	2301      	movs	r3, #1
 800f39e:	e000      	b.n	800f3a2 <xQueueGenericSend+0x46>
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d10a      	bne.n	800f3bc <xQueueGenericSend+0x60>
	__asm volatile
 800f3a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3aa:	f383 8811 	msr	BASEPRI, r3
 800f3ae:	f3bf 8f6f 	isb	sy
 800f3b2:	f3bf 8f4f 	dsb	sy
 800f3b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f3b8:	bf00      	nop
 800f3ba:	e7fe      	b.n	800f3ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	2b02      	cmp	r3, #2
 800f3c0:	d103      	bne.n	800f3ca <xQueueGenericSend+0x6e>
 800f3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3c6:	2b01      	cmp	r3, #1
 800f3c8:	d101      	bne.n	800f3ce <xQueueGenericSend+0x72>
 800f3ca:	2301      	movs	r3, #1
 800f3cc:	e000      	b.n	800f3d0 <xQueueGenericSend+0x74>
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d10a      	bne.n	800f3ea <xQueueGenericSend+0x8e>
	__asm volatile
 800f3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3d8:	f383 8811 	msr	BASEPRI, r3
 800f3dc:	f3bf 8f6f 	isb	sy
 800f3e0:	f3bf 8f4f 	dsb	sy
 800f3e4:	623b      	str	r3, [r7, #32]
}
 800f3e6:	bf00      	nop
 800f3e8:	e7fe      	b.n	800f3e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f3ea:	f001 fa69 	bl	80108c0 <xTaskGetSchedulerState>
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d102      	bne.n	800f3fa <xQueueGenericSend+0x9e>
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d101      	bne.n	800f3fe <xQueueGenericSend+0xa2>
 800f3fa:	2301      	movs	r3, #1
 800f3fc:	e000      	b.n	800f400 <xQueueGenericSend+0xa4>
 800f3fe:	2300      	movs	r3, #0
 800f400:	2b00      	cmp	r3, #0
 800f402:	d10a      	bne.n	800f41a <xQueueGenericSend+0xbe>
	__asm volatile
 800f404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f408:	f383 8811 	msr	BASEPRI, r3
 800f40c:	f3bf 8f6f 	isb	sy
 800f410:	f3bf 8f4f 	dsb	sy
 800f414:	61fb      	str	r3, [r7, #28]
}
 800f416:	bf00      	nop
 800f418:	e7fe      	b.n	800f418 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f41a:	f001 ffab 	bl	8011374 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f426:	429a      	cmp	r2, r3
 800f428:	d302      	bcc.n	800f430 <xQueueGenericSend+0xd4>
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	2b02      	cmp	r3, #2
 800f42e:	d129      	bne.n	800f484 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f430:	683a      	ldr	r2, [r7, #0]
 800f432:	68b9      	ldr	r1, [r7, #8]
 800f434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f436:	f000 fa0b 	bl	800f850 <prvCopyDataToQueue>
 800f43a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f440:	2b00      	cmp	r3, #0
 800f442:	d010      	beq.n	800f466 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f446:	3324      	adds	r3, #36	; 0x24
 800f448:	4618      	mov	r0, r3
 800f44a:	f001 f867 	bl	801051c <xTaskRemoveFromEventList>
 800f44e:	4603      	mov	r3, r0
 800f450:	2b00      	cmp	r3, #0
 800f452:	d013      	beq.n	800f47c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f454:	4b3f      	ldr	r3, [pc, #252]	; (800f554 <xQueueGenericSend+0x1f8>)
 800f456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f45a:	601a      	str	r2, [r3, #0]
 800f45c:	f3bf 8f4f 	dsb	sy
 800f460:	f3bf 8f6f 	isb	sy
 800f464:	e00a      	b.n	800f47c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d007      	beq.n	800f47c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f46c:	4b39      	ldr	r3, [pc, #228]	; (800f554 <xQueueGenericSend+0x1f8>)
 800f46e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f472:	601a      	str	r2, [r3, #0]
 800f474:	f3bf 8f4f 	dsb	sy
 800f478:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f47c:	f001 ffaa 	bl	80113d4 <vPortExitCritical>
				return pdPASS;
 800f480:	2301      	movs	r3, #1
 800f482:	e063      	b.n	800f54c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d103      	bne.n	800f492 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f48a:	f001 ffa3 	bl	80113d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f48e:	2300      	movs	r3, #0
 800f490:	e05c      	b.n	800f54c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f494:	2b00      	cmp	r3, #0
 800f496:	d106      	bne.n	800f4a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f498:	f107 0314 	add.w	r3, r7, #20
 800f49c:	4618      	mov	r0, r3
 800f49e:	f001 f8a1 	bl	80105e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f4a6:	f001 ff95 	bl	80113d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f4aa:	f000 fe0d 	bl	80100c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f4ae:	f001 ff61 	bl	8011374 <vPortEnterCritical>
 800f4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f4b8:	b25b      	sxtb	r3, r3
 800f4ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4be:	d103      	bne.n	800f4c8 <xQueueGenericSend+0x16c>
 800f4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f4ce:	b25b      	sxtb	r3, r3
 800f4d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4d4:	d103      	bne.n	800f4de <xQueueGenericSend+0x182>
 800f4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4d8:	2200      	movs	r2, #0
 800f4da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f4de:	f001 ff79 	bl	80113d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f4e2:	1d3a      	adds	r2, r7, #4
 800f4e4:	f107 0314 	add.w	r3, r7, #20
 800f4e8:	4611      	mov	r1, r2
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f001 f890 	bl	8010610 <xTaskCheckForTimeOut>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d124      	bne.n	800f540 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f4f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f4f8:	f000 faa2 	bl	800fa40 <prvIsQueueFull>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d018      	beq.n	800f534 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f504:	3310      	adds	r3, #16
 800f506:	687a      	ldr	r2, [r7, #4]
 800f508:	4611      	mov	r1, r2
 800f50a:	4618      	mov	r0, r3
 800f50c:	f000 ffb6 	bl	801047c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f512:	f000 fa2d 	bl	800f970 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f516:	f000 fde5 	bl	80100e4 <xTaskResumeAll>
 800f51a:	4603      	mov	r3, r0
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	f47f af7c 	bne.w	800f41a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f522:	4b0c      	ldr	r3, [pc, #48]	; (800f554 <xQueueGenericSend+0x1f8>)
 800f524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f528:	601a      	str	r2, [r3, #0]
 800f52a:	f3bf 8f4f 	dsb	sy
 800f52e:	f3bf 8f6f 	isb	sy
 800f532:	e772      	b.n	800f41a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f536:	f000 fa1b 	bl	800f970 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f53a:	f000 fdd3 	bl	80100e4 <xTaskResumeAll>
 800f53e:	e76c      	b.n	800f41a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f542:	f000 fa15 	bl	800f970 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f546:	f000 fdcd 	bl	80100e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f54a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f54c:	4618      	mov	r0, r3
 800f54e:	3738      	adds	r7, #56	; 0x38
 800f550:	46bd      	mov	sp, r7
 800f552:	bd80      	pop	{r7, pc}
 800f554:	e000ed04 	.word	0xe000ed04

0800f558 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b090      	sub	sp, #64	; 0x40
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	60f8      	str	r0, [r7, #12]
 800f560:	60b9      	str	r1, [r7, #8]
 800f562:	607a      	str	r2, [r7, #4]
 800f564:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d10a      	bne.n	800f586 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f574:	f383 8811 	msr	BASEPRI, r3
 800f578:	f3bf 8f6f 	isb	sy
 800f57c:	f3bf 8f4f 	dsb	sy
 800f580:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f582:	bf00      	nop
 800f584:	e7fe      	b.n	800f584 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d103      	bne.n	800f594 <xQueueGenericSendFromISR+0x3c>
 800f58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f58e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f590:	2b00      	cmp	r3, #0
 800f592:	d101      	bne.n	800f598 <xQueueGenericSendFromISR+0x40>
 800f594:	2301      	movs	r3, #1
 800f596:	e000      	b.n	800f59a <xQueueGenericSendFromISR+0x42>
 800f598:	2300      	movs	r3, #0
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d10a      	bne.n	800f5b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5a2:	f383 8811 	msr	BASEPRI, r3
 800f5a6:	f3bf 8f6f 	isb	sy
 800f5aa:	f3bf 8f4f 	dsb	sy
 800f5ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f5b0:	bf00      	nop
 800f5b2:	e7fe      	b.n	800f5b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	2b02      	cmp	r3, #2
 800f5b8:	d103      	bne.n	800f5c2 <xQueueGenericSendFromISR+0x6a>
 800f5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5be:	2b01      	cmp	r3, #1
 800f5c0:	d101      	bne.n	800f5c6 <xQueueGenericSendFromISR+0x6e>
 800f5c2:	2301      	movs	r3, #1
 800f5c4:	e000      	b.n	800f5c8 <xQueueGenericSendFromISR+0x70>
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d10a      	bne.n	800f5e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800f5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5d0:	f383 8811 	msr	BASEPRI, r3
 800f5d4:	f3bf 8f6f 	isb	sy
 800f5d8:	f3bf 8f4f 	dsb	sy
 800f5dc:	623b      	str	r3, [r7, #32]
}
 800f5de:	bf00      	nop
 800f5e0:	e7fe      	b.n	800f5e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f5e2:	f001 ffa9 	bl	8011538 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f5e6:	f3ef 8211 	mrs	r2, BASEPRI
 800f5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ee:	f383 8811 	msr	BASEPRI, r3
 800f5f2:	f3bf 8f6f 	isb	sy
 800f5f6:	f3bf 8f4f 	dsb	sy
 800f5fa:	61fa      	str	r2, [r7, #28]
 800f5fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f5fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f600:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f60a:	429a      	cmp	r2, r3
 800f60c:	d302      	bcc.n	800f614 <xQueueGenericSendFromISR+0xbc>
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	2b02      	cmp	r3, #2
 800f612:	d12f      	bne.n	800f674 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f616:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f61a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f622:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f624:	683a      	ldr	r2, [r7, #0]
 800f626:	68b9      	ldr	r1, [r7, #8]
 800f628:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f62a:	f000 f911 	bl	800f850 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f62e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800f632:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f636:	d112      	bne.n	800f65e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d016      	beq.n	800f66e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f642:	3324      	adds	r3, #36	; 0x24
 800f644:	4618      	mov	r0, r3
 800f646:	f000 ff69 	bl	801051c <xTaskRemoveFromEventList>
 800f64a:	4603      	mov	r3, r0
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d00e      	beq.n	800f66e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d00b      	beq.n	800f66e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2201      	movs	r2, #1
 800f65a:	601a      	str	r2, [r3, #0]
 800f65c:	e007      	b.n	800f66e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f65e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f662:	3301      	adds	r3, #1
 800f664:	b2db      	uxtb	r3, r3
 800f666:	b25a      	sxtb	r2, r3
 800f668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f66a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f66e:	2301      	movs	r3, #1
 800f670:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800f672:	e001      	b.n	800f678 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f674:	2300      	movs	r3, #0
 800f676:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f67a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f682:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f686:	4618      	mov	r0, r3
 800f688:	3740      	adds	r7, #64	; 0x40
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd80      	pop	{r7, pc}
	...

0800f690 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b08c      	sub	sp, #48	; 0x30
 800f694:	af00      	add	r7, sp, #0
 800f696:	60f8      	str	r0, [r7, #12]
 800f698:	60b9      	str	r1, [r7, #8]
 800f69a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f69c:	2300      	movs	r3, #0
 800f69e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d10a      	bne.n	800f6c0 <xQueueReceive+0x30>
	__asm volatile
 800f6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6ae:	f383 8811 	msr	BASEPRI, r3
 800f6b2:	f3bf 8f6f 	isb	sy
 800f6b6:	f3bf 8f4f 	dsb	sy
 800f6ba:	623b      	str	r3, [r7, #32]
}
 800f6bc:	bf00      	nop
 800f6be:	e7fe      	b.n	800f6be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f6c0:	68bb      	ldr	r3, [r7, #8]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d103      	bne.n	800f6ce <xQueueReceive+0x3e>
 800f6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d101      	bne.n	800f6d2 <xQueueReceive+0x42>
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	e000      	b.n	800f6d4 <xQueueReceive+0x44>
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d10a      	bne.n	800f6ee <xQueueReceive+0x5e>
	__asm volatile
 800f6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6dc:	f383 8811 	msr	BASEPRI, r3
 800f6e0:	f3bf 8f6f 	isb	sy
 800f6e4:	f3bf 8f4f 	dsb	sy
 800f6e8:	61fb      	str	r3, [r7, #28]
}
 800f6ea:	bf00      	nop
 800f6ec:	e7fe      	b.n	800f6ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f6ee:	f001 f8e7 	bl	80108c0 <xTaskGetSchedulerState>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d102      	bne.n	800f6fe <xQueueReceive+0x6e>
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d101      	bne.n	800f702 <xQueueReceive+0x72>
 800f6fe:	2301      	movs	r3, #1
 800f700:	e000      	b.n	800f704 <xQueueReceive+0x74>
 800f702:	2300      	movs	r3, #0
 800f704:	2b00      	cmp	r3, #0
 800f706:	d10a      	bne.n	800f71e <xQueueReceive+0x8e>
	__asm volatile
 800f708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f70c:	f383 8811 	msr	BASEPRI, r3
 800f710:	f3bf 8f6f 	isb	sy
 800f714:	f3bf 8f4f 	dsb	sy
 800f718:	61bb      	str	r3, [r7, #24]
}
 800f71a:	bf00      	nop
 800f71c:	e7fe      	b.n	800f71c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f71e:	f001 fe29 	bl	8011374 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f726:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d01f      	beq.n	800f76e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f72e:	68b9      	ldr	r1, [r7, #8]
 800f730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f732:	f000 f8f7 	bl	800f924 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f738:	1e5a      	subs	r2, r3, #1
 800f73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f73c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f740:	691b      	ldr	r3, [r3, #16]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d00f      	beq.n	800f766 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f748:	3310      	adds	r3, #16
 800f74a:	4618      	mov	r0, r3
 800f74c:	f000 fee6 	bl	801051c <xTaskRemoveFromEventList>
 800f750:	4603      	mov	r3, r0
 800f752:	2b00      	cmp	r3, #0
 800f754:	d007      	beq.n	800f766 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f756:	4b3d      	ldr	r3, [pc, #244]	; (800f84c <xQueueReceive+0x1bc>)
 800f758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f75c:	601a      	str	r2, [r3, #0]
 800f75e:	f3bf 8f4f 	dsb	sy
 800f762:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f766:	f001 fe35 	bl	80113d4 <vPortExitCritical>
				return pdPASS;
 800f76a:	2301      	movs	r3, #1
 800f76c:	e069      	b.n	800f842 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d103      	bne.n	800f77c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f774:	f001 fe2e 	bl	80113d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f778:	2300      	movs	r3, #0
 800f77a:	e062      	b.n	800f842 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d106      	bne.n	800f790 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f782:	f107 0310 	add.w	r3, r7, #16
 800f786:	4618      	mov	r0, r3
 800f788:	f000 ff2c 	bl	80105e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f78c:	2301      	movs	r3, #1
 800f78e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f790:	f001 fe20 	bl	80113d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f794:	f000 fc98 	bl	80100c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f798:	f001 fdec 	bl	8011374 <vPortEnterCritical>
 800f79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f79e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f7a2:	b25b      	sxtb	r3, r3
 800f7a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7a8:	d103      	bne.n	800f7b2 <xQueueReceive+0x122>
 800f7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f7b8:	b25b      	sxtb	r3, r3
 800f7ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7be:	d103      	bne.n	800f7c8 <xQueueReceive+0x138>
 800f7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f7c8:	f001 fe04 	bl	80113d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f7cc:	1d3a      	adds	r2, r7, #4
 800f7ce:	f107 0310 	add.w	r3, r7, #16
 800f7d2:	4611      	mov	r1, r2
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	f000 ff1b 	bl	8010610 <xTaskCheckForTimeOut>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d123      	bne.n	800f828 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f7e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7e2:	f000 f917 	bl	800fa14 <prvIsQueueEmpty>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d017      	beq.n	800f81c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ee:	3324      	adds	r3, #36	; 0x24
 800f7f0:	687a      	ldr	r2, [r7, #4]
 800f7f2:	4611      	mov	r1, r2
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	f000 fe41 	bl	801047c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f7fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7fc:	f000 f8b8 	bl	800f970 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f800:	f000 fc70 	bl	80100e4 <xTaskResumeAll>
 800f804:	4603      	mov	r3, r0
 800f806:	2b00      	cmp	r3, #0
 800f808:	d189      	bne.n	800f71e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f80a:	4b10      	ldr	r3, [pc, #64]	; (800f84c <xQueueReceive+0x1bc>)
 800f80c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f810:	601a      	str	r2, [r3, #0]
 800f812:	f3bf 8f4f 	dsb	sy
 800f816:	f3bf 8f6f 	isb	sy
 800f81a:	e780      	b.n	800f71e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f81c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f81e:	f000 f8a7 	bl	800f970 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f822:	f000 fc5f 	bl	80100e4 <xTaskResumeAll>
 800f826:	e77a      	b.n	800f71e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f828:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f82a:	f000 f8a1 	bl	800f970 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f82e:	f000 fc59 	bl	80100e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f834:	f000 f8ee 	bl	800fa14 <prvIsQueueEmpty>
 800f838:	4603      	mov	r3, r0
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	f43f af6f 	beq.w	800f71e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f840:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f842:	4618      	mov	r0, r3
 800f844:	3730      	adds	r7, #48	; 0x30
 800f846:	46bd      	mov	sp, r7
 800f848:	bd80      	pop	{r7, pc}
 800f84a:	bf00      	nop
 800f84c:	e000ed04 	.word	0xe000ed04

0800f850 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b086      	sub	sp, #24
 800f854:	af00      	add	r7, sp, #0
 800f856:	60f8      	str	r0, [r7, #12]
 800f858:	60b9      	str	r1, [r7, #8]
 800f85a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f85c:	2300      	movs	r3, #0
 800f85e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f864:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d10d      	bne.n	800f88a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d14d      	bne.n	800f912 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	689b      	ldr	r3, [r3, #8]
 800f87a:	4618      	mov	r0, r3
 800f87c:	f001 f83e 	bl	80108fc <xTaskPriorityDisinherit>
 800f880:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	2200      	movs	r2, #0
 800f886:	609a      	str	r2, [r3, #8]
 800f888:	e043      	b.n	800f912 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d119      	bne.n	800f8c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	6858      	ldr	r0, [r3, #4]
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f898:	461a      	mov	r2, r3
 800f89a:	68b9      	ldr	r1, [r7, #8]
 800f89c:	f002 fb12 	bl	8011ec4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	685a      	ldr	r2, [r3, #4]
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8a8:	441a      	add	r2, r3
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	685a      	ldr	r2, [r3, #4]
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	689b      	ldr	r3, [r3, #8]
 800f8b6:	429a      	cmp	r2, r3
 800f8b8:	d32b      	bcc.n	800f912 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	681a      	ldr	r2, [r3, #0]
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	605a      	str	r2, [r3, #4]
 800f8c2:	e026      	b.n	800f912 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	68d8      	ldr	r0, [r3, #12]
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8cc:	461a      	mov	r2, r3
 800f8ce:	68b9      	ldr	r1, [r7, #8]
 800f8d0:	f002 faf8 	bl	8011ec4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	68da      	ldr	r2, [r3, #12]
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8dc:	425b      	negs	r3, r3
 800f8de:	441a      	add	r2, r3
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	68da      	ldr	r2, [r3, #12]
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	429a      	cmp	r2, r3
 800f8ee:	d207      	bcs.n	800f900 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	689a      	ldr	r2, [r3, #8]
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8f8:	425b      	negs	r3, r3
 800f8fa:	441a      	add	r2, r3
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	2b02      	cmp	r3, #2
 800f904:	d105      	bne.n	800f912 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f906:	693b      	ldr	r3, [r7, #16]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d002      	beq.n	800f912 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f90c:	693b      	ldr	r3, [r7, #16]
 800f90e:	3b01      	subs	r3, #1
 800f910:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f912:	693b      	ldr	r3, [r7, #16]
 800f914:	1c5a      	adds	r2, r3, #1
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f91a:	697b      	ldr	r3, [r7, #20]
}
 800f91c:	4618      	mov	r0, r3
 800f91e:	3718      	adds	r7, #24
 800f920:	46bd      	mov	sp, r7
 800f922:	bd80      	pop	{r7, pc}

0800f924 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b082      	sub	sp, #8
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
 800f92c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f932:	2b00      	cmp	r3, #0
 800f934:	d018      	beq.n	800f968 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	68da      	ldr	r2, [r3, #12]
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f93e:	441a      	add	r2, r3
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	68da      	ldr	r2, [r3, #12]
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	689b      	ldr	r3, [r3, #8]
 800f94c:	429a      	cmp	r2, r3
 800f94e:	d303      	bcc.n	800f958 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681a      	ldr	r2, [r3, #0]
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	68d9      	ldr	r1, [r3, #12]
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f960:	461a      	mov	r2, r3
 800f962:	6838      	ldr	r0, [r7, #0]
 800f964:	f002 faae 	bl	8011ec4 <memcpy>
	}
}
 800f968:	bf00      	nop
 800f96a:	3708      	adds	r7, #8
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bd80      	pop	{r7, pc}

0800f970 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b084      	sub	sp, #16
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f978:	f001 fcfc 	bl	8011374 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f982:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f984:	e011      	b.n	800f9aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d012      	beq.n	800f9b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	3324      	adds	r3, #36	; 0x24
 800f992:	4618      	mov	r0, r3
 800f994:	f000 fdc2 	bl	801051c <xTaskRemoveFromEventList>
 800f998:	4603      	mov	r3, r0
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d001      	beq.n	800f9a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f99e:	f000 fe99 	bl	80106d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f9a2:	7bfb      	ldrb	r3, [r7, #15]
 800f9a4:	3b01      	subs	r3, #1
 800f9a6:	b2db      	uxtb	r3, r3
 800f9a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f9aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	dce9      	bgt.n	800f986 <prvUnlockQueue+0x16>
 800f9b2:	e000      	b.n	800f9b6 <prvUnlockQueue+0x46>
					break;
 800f9b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	22ff      	movs	r2, #255	; 0xff
 800f9ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f9be:	f001 fd09 	bl	80113d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f9c2:	f001 fcd7 	bl	8011374 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f9cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f9ce:	e011      	b.n	800f9f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	691b      	ldr	r3, [r3, #16]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d012      	beq.n	800f9fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	3310      	adds	r3, #16
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f000 fd9d 	bl	801051c <xTaskRemoveFromEventList>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d001      	beq.n	800f9ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f9e8:	f000 fe74 	bl	80106d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f9ec:	7bbb      	ldrb	r3, [r7, #14]
 800f9ee:	3b01      	subs	r3, #1
 800f9f0:	b2db      	uxtb	r3, r3
 800f9f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f9f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	dce9      	bgt.n	800f9d0 <prvUnlockQueue+0x60>
 800f9fc:	e000      	b.n	800fa00 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f9fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	22ff      	movs	r2, #255	; 0xff
 800fa04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800fa08:	f001 fce4 	bl	80113d4 <vPortExitCritical>
}
 800fa0c:	bf00      	nop
 800fa0e:	3710      	adds	r7, #16
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}

0800fa14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b084      	sub	sp, #16
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fa1c:	f001 fcaa 	bl	8011374 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d102      	bne.n	800fa2e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fa28:	2301      	movs	r3, #1
 800fa2a:	60fb      	str	r3, [r7, #12]
 800fa2c:	e001      	b.n	800fa32 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fa2e:	2300      	movs	r3, #0
 800fa30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fa32:	f001 fccf 	bl	80113d4 <vPortExitCritical>

	return xReturn;
 800fa36:	68fb      	ldr	r3, [r7, #12]
}
 800fa38:	4618      	mov	r0, r3
 800fa3a:	3710      	adds	r7, #16
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	bd80      	pop	{r7, pc}

0800fa40 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b084      	sub	sp, #16
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fa48:	f001 fc94 	bl	8011374 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa54:	429a      	cmp	r2, r3
 800fa56:	d102      	bne.n	800fa5e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fa58:	2301      	movs	r3, #1
 800fa5a:	60fb      	str	r3, [r7, #12]
 800fa5c:	e001      	b.n	800fa62 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fa62:	f001 fcb7 	bl	80113d4 <vPortExitCritical>

	return xReturn;
 800fa66:	68fb      	ldr	r3, [r7, #12]
}
 800fa68:	4618      	mov	r0, r3
 800fa6a:	3710      	adds	r7, #16
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bd80      	pop	{r7, pc}

0800fa70 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800fa70:	b480      	push	{r7}
 800fa72:	b085      	sub	sp, #20
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
 800fa78:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	60fb      	str	r3, [r7, #12]
 800fa7e:	e014      	b.n	800faaa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800fa80:	4a0f      	ldr	r2, [pc, #60]	; (800fac0 <vQueueAddToRegistry+0x50>)
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d10b      	bne.n	800faa4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800fa8c:	490c      	ldr	r1, [pc, #48]	; (800fac0 <vQueueAddToRegistry+0x50>)
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	683a      	ldr	r2, [r7, #0]
 800fa92:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800fa96:	4a0a      	ldr	r2, [pc, #40]	; (800fac0 <vQueueAddToRegistry+0x50>)
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	00db      	lsls	r3, r3, #3
 800fa9c:	4413      	add	r3, r2
 800fa9e:	687a      	ldr	r2, [r7, #4]
 800faa0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800faa2:	e006      	b.n	800fab2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	3301      	adds	r3, #1
 800faa8:	60fb      	str	r3, [r7, #12]
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	2b07      	cmp	r3, #7
 800faae:	d9e7      	bls.n	800fa80 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fab0:	bf00      	nop
 800fab2:	bf00      	nop
 800fab4:	3714      	adds	r7, #20
 800fab6:	46bd      	mov	sp, r7
 800fab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabc:	4770      	bx	lr
 800fabe:	bf00      	nop
 800fac0:	20006438 	.word	0x20006438

0800fac4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b086      	sub	sp, #24
 800fac8:	af00      	add	r7, sp, #0
 800faca:	60f8      	str	r0, [r7, #12]
 800facc:	60b9      	str	r1, [r7, #8]
 800face:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800fad4:	f001 fc4e 	bl	8011374 <vPortEnterCritical>
 800fad8:	697b      	ldr	r3, [r7, #20]
 800fada:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fade:	b25b      	sxtb	r3, r3
 800fae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fae4:	d103      	bne.n	800faee <vQueueWaitForMessageRestricted+0x2a>
 800fae6:	697b      	ldr	r3, [r7, #20]
 800fae8:	2200      	movs	r2, #0
 800faea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800faee:	697b      	ldr	r3, [r7, #20]
 800faf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800faf4:	b25b      	sxtb	r3, r3
 800faf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fafa:	d103      	bne.n	800fb04 <vQueueWaitForMessageRestricted+0x40>
 800fafc:	697b      	ldr	r3, [r7, #20]
 800fafe:	2200      	movs	r2, #0
 800fb00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fb04:	f001 fc66 	bl	80113d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800fb08:	697b      	ldr	r3, [r7, #20]
 800fb0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d106      	bne.n	800fb1e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800fb10:	697b      	ldr	r3, [r7, #20]
 800fb12:	3324      	adds	r3, #36	; 0x24
 800fb14:	687a      	ldr	r2, [r7, #4]
 800fb16:	68b9      	ldr	r1, [r7, #8]
 800fb18:	4618      	mov	r0, r3
 800fb1a:	f000 fcd3 	bl	80104c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800fb1e:	6978      	ldr	r0, [r7, #20]
 800fb20:	f7ff ff26 	bl	800f970 <prvUnlockQueue>
	}
 800fb24:	bf00      	nop
 800fb26:	3718      	adds	r7, #24
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	bd80      	pop	{r7, pc}

0800fb2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b08e      	sub	sp, #56	; 0x38
 800fb30:	af04      	add	r7, sp, #16
 800fb32:	60f8      	str	r0, [r7, #12]
 800fb34:	60b9      	str	r1, [r7, #8]
 800fb36:	607a      	str	r2, [r7, #4]
 800fb38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fb3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d10a      	bne.n	800fb56 <xTaskCreateStatic+0x2a>
	__asm volatile
 800fb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb44:	f383 8811 	msr	BASEPRI, r3
 800fb48:	f3bf 8f6f 	isb	sy
 800fb4c:	f3bf 8f4f 	dsb	sy
 800fb50:	623b      	str	r3, [r7, #32]
}
 800fb52:	bf00      	nop
 800fb54:	e7fe      	b.n	800fb54 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800fb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d10a      	bne.n	800fb72 <xTaskCreateStatic+0x46>
	__asm volatile
 800fb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb60:	f383 8811 	msr	BASEPRI, r3
 800fb64:	f3bf 8f6f 	isb	sy
 800fb68:	f3bf 8f4f 	dsb	sy
 800fb6c:	61fb      	str	r3, [r7, #28]
}
 800fb6e:	bf00      	nop
 800fb70:	e7fe      	b.n	800fb70 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fb72:	23bc      	movs	r3, #188	; 0xbc
 800fb74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fb76:	693b      	ldr	r3, [r7, #16]
 800fb78:	2bbc      	cmp	r3, #188	; 0xbc
 800fb7a:	d00a      	beq.n	800fb92 <xTaskCreateStatic+0x66>
	__asm volatile
 800fb7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb80:	f383 8811 	msr	BASEPRI, r3
 800fb84:	f3bf 8f6f 	isb	sy
 800fb88:	f3bf 8f4f 	dsb	sy
 800fb8c:	61bb      	str	r3, [r7, #24]
}
 800fb8e:	bf00      	nop
 800fb90:	e7fe      	b.n	800fb90 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fb92:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fb94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d01e      	beq.n	800fbd8 <xTaskCreateStatic+0xac>
 800fb9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d01b      	beq.n	800fbd8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fba2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fba6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fba8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fbaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbac:	2202      	movs	r2, #2
 800fbae:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	9303      	str	r3, [sp, #12]
 800fbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbb8:	9302      	str	r3, [sp, #8]
 800fbba:	f107 0314 	add.w	r3, r7, #20
 800fbbe:	9301      	str	r3, [sp, #4]
 800fbc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbc2:	9300      	str	r3, [sp, #0]
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	687a      	ldr	r2, [r7, #4]
 800fbc8:	68b9      	ldr	r1, [r7, #8]
 800fbca:	68f8      	ldr	r0, [r7, #12]
 800fbcc:	f000 f850 	bl	800fc70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fbd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fbd2:	f000 f8f3 	bl	800fdbc <prvAddNewTaskToReadyList>
 800fbd6:	e001      	b.n	800fbdc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800fbd8:	2300      	movs	r3, #0
 800fbda:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fbdc:	697b      	ldr	r3, [r7, #20]
	}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	3728      	adds	r7, #40	; 0x28
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}

0800fbe6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fbe6:	b580      	push	{r7, lr}
 800fbe8:	b08c      	sub	sp, #48	; 0x30
 800fbea:	af04      	add	r7, sp, #16
 800fbec:	60f8      	str	r0, [r7, #12]
 800fbee:	60b9      	str	r1, [r7, #8]
 800fbf0:	603b      	str	r3, [r7, #0]
 800fbf2:	4613      	mov	r3, r2
 800fbf4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fbf6:	88fb      	ldrh	r3, [r7, #6]
 800fbf8:	009b      	lsls	r3, r3, #2
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	f001 fcdc 	bl	80115b8 <pvPortMalloc>
 800fc00:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d00e      	beq.n	800fc26 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fc08:	20bc      	movs	r0, #188	; 0xbc
 800fc0a:	f001 fcd5 	bl	80115b8 <pvPortMalloc>
 800fc0e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fc10:	69fb      	ldr	r3, [r7, #28]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d003      	beq.n	800fc1e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fc16:	69fb      	ldr	r3, [r7, #28]
 800fc18:	697a      	ldr	r2, [r7, #20]
 800fc1a:	631a      	str	r2, [r3, #48]	; 0x30
 800fc1c:	e005      	b.n	800fc2a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fc1e:	6978      	ldr	r0, [r7, #20]
 800fc20:	f001 fd96 	bl	8011750 <vPortFree>
 800fc24:	e001      	b.n	800fc2a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fc26:	2300      	movs	r3, #0
 800fc28:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fc2a:	69fb      	ldr	r3, [r7, #28]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d017      	beq.n	800fc60 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fc30:	69fb      	ldr	r3, [r7, #28]
 800fc32:	2200      	movs	r2, #0
 800fc34:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fc38:	88fa      	ldrh	r2, [r7, #6]
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	9303      	str	r3, [sp, #12]
 800fc3e:	69fb      	ldr	r3, [r7, #28]
 800fc40:	9302      	str	r3, [sp, #8]
 800fc42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc44:	9301      	str	r3, [sp, #4]
 800fc46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc48:	9300      	str	r3, [sp, #0]
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	68b9      	ldr	r1, [r7, #8]
 800fc4e:	68f8      	ldr	r0, [r7, #12]
 800fc50:	f000 f80e 	bl	800fc70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fc54:	69f8      	ldr	r0, [r7, #28]
 800fc56:	f000 f8b1 	bl	800fdbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fc5a:	2301      	movs	r3, #1
 800fc5c:	61bb      	str	r3, [r7, #24]
 800fc5e:	e002      	b.n	800fc66 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fc60:	f04f 33ff 	mov.w	r3, #4294967295
 800fc64:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fc66:	69bb      	ldr	r3, [r7, #24]
	}
 800fc68:	4618      	mov	r0, r3
 800fc6a:	3720      	adds	r7, #32
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bd80      	pop	{r7, pc}

0800fc70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b088      	sub	sp, #32
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	60f8      	str	r0, [r7, #12]
 800fc78:	60b9      	str	r1, [r7, #8]
 800fc7a:	607a      	str	r2, [r7, #4]
 800fc7c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc80:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	009b      	lsls	r3, r3, #2
 800fc86:	461a      	mov	r2, r3
 800fc88:	21a5      	movs	r1, #165	; 0xa5
 800fc8a:	f002 f943 	bl	8011f14 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fc98:	3b01      	subs	r3, #1
 800fc9a:	009b      	lsls	r3, r3, #2
 800fc9c:	4413      	add	r3, r2
 800fc9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fca0:	69bb      	ldr	r3, [r7, #24]
 800fca2:	f023 0307 	bic.w	r3, r3, #7
 800fca6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fca8:	69bb      	ldr	r3, [r7, #24]
 800fcaa:	f003 0307 	and.w	r3, r3, #7
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d00a      	beq.n	800fcc8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800fcb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcb6:	f383 8811 	msr	BASEPRI, r3
 800fcba:	f3bf 8f6f 	isb	sy
 800fcbe:	f3bf 8f4f 	dsb	sy
 800fcc2:	617b      	str	r3, [r7, #20]
}
 800fcc4:	bf00      	nop
 800fcc6:	e7fe      	b.n	800fcc6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fcc8:	68bb      	ldr	r3, [r7, #8]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d01f      	beq.n	800fd0e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fcce:	2300      	movs	r3, #0
 800fcd0:	61fb      	str	r3, [r7, #28]
 800fcd2:	e012      	b.n	800fcfa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fcd4:	68ba      	ldr	r2, [r7, #8]
 800fcd6:	69fb      	ldr	r3, [r7, #28]
 800fcd8:	4413      	add	r3, r2
 800fcda:	7819      	ldrb	r1, [r3, #0]
 800fcdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fcde:	69fb      	ldr	r3, [r7, #28]
 800fce0:	4413      	add	r3, r2
 800fce2:	3334      	adds	r3, #52	; 0x34
 800fce4:	460a      	mov	r2, r1
 800fce6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fce8:	68ba      	ldr	r2, [r7, #8]
 800fcea:	69fb      	ldr	r3, [r7, #28]
 800fcec:	4413      	add	r3, r2
 800fcee:	781b      	ldrb	r3, [r3, #0]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d006      	beq.n	800fd02 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fcf4:	69fb      	ldr	r3, [r7, #28]
 800fcf6:	3301      	adds	r3, #1
 800fcf8:	61fb      	str	r3, [r7, #28]
 800fcfa:	69fb      	ldr	r3, [r7, #28]
 800fcfc:	2b0f      	cmp	r3, #15
 800fcfe:	d9e9      	bls.n	800fcd4 <prvInitialiseNewTask+0x64>
 800fd00:	e000      	b.n	800fd04 <prvInitialiseNewTask+0x94>
			{
				break;
 800fd02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd06:	2200      	movs	r2, #0
 800fd08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fd0c:	e003      	b.n	800fd16 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fd0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd10:	2200      	movs	r2, #0
 800fd12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd18:	2b37      	cmp	r3, #55	; 0x37
 800fd1a:	d901      	bls.n	800fd20 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fd1c:	2337      	movs	r3, #55	; 0x37
 800fd1e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fd20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd2a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fd2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd2e:	2200      	movs	r2, #0
 800fd30:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fd32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd34:	3304      	adds	r3, #4
 800fd36:	4618      	mov	r0, r3
 800fd38:	f7ff f978 	bl	800f02c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fd3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd3e:	3318      	adds	r3, #24
 800fd40:	4618      	mov	r0, r3
 800fd42:	f7ff f973 	bl	800f02c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fd5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd5e:	2200      	movs	r2, #0
 800fd60:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fd64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd66:	2200      	movs	r2, #0
 800fd68:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800fd6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd6e:	3354      	adds	r3, #84	; 0x54
 800fd70:	2260      	movs	r2, #96	; 0x60
 800fd72:	2100      	movs	r1, #0
 800fd74:	4618      	mov	r0, r3
 800fd76:	f002 f8cd 	bl	8011f14 <memset>
 800fd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd7c:	4a0c      	ldr	r2, [pc, #48]	; (800fdb0 <prvInitialiseNewTask+0x140>)
 800fd7e:	659a      	str	r2, [r3, #88]	; 0x58
 800fd80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd82:	4a0c      	ldr	r2, [pc, #48]	; (800fdb4 <prvInitialiseNewTask+0x144>)
 800fd84:	65da      	str	r2, [r3, #92]	; 0x5c
 800fd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd88:	4a0b      	ldr	r2, [pc, #44]	; (800fdb8 <prvInitialiseNewTask+0x148>)
 800fd8a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fd8c:	683a      	ldr	r2, [r7, #0]
 800fd8e:	68f9      	ldr	r1, [r7, #12]
 800fd90:	69b8      	ldr	r0, [r7, #24]
 800fd92:	f001 f9c3 	bl	801111c <pxPortInitialiseStack>
 800fd96:	4602      	mov	r2, r0
 800fd98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd9a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fd9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d002      	beq.n	800fda8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fda2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fda4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fda6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fda8:	bf00      	nop
 800fdaa:	3720      	adds	r7, #32
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bd80      	pop	{r7, pc}
 800fdb0:	08019c38 	.word	0x08019c38
 800fdb4:	08019c58 	.word	0x08019c58
 800fdb8:	08019c18 	.word	0x08019c18

0800fdbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b082      	sub	sp, #8
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fdc4:	f001 fad6 	bl	8011374 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fdc8:	4b2d      	ldr	r3, [pc, #180]	; (800fe80 <prvAddNewTaskToReadyList+0xc4>)
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	3301      	adds	r3, #1
 800fdce:	4a2c      	ldr	r2, [pc, #176]	; (800fe80 <prvAddNewTaskToReadyList+0xc4>)
 800fdd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fdd2:	4b2c      	ldr	r3, [pc, #176]	; (800fe84 <prvAddNewTaskToReadyList+0xc8>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d109      	bne.n	800fdee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fdda:	4a2a      	ldr	r2, [pc, #168]	; (800fe84 <prvAddNewTaskToReadyList+0xc8>)
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fde0:	4b27      	ldr	r3, [pc, #156]	; (800fe80 <prvAddNewTaskToReadyList+0xc4>)
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	2b01      	cmp	r3, #1
 800fde6:	d110      	bne.n	800fe0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fde8:	f000 fc98 	bl	801071c <prvInitialiseTaskLists>
 800fdec:	e00d      	b.n	800fe0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fdee:	4b26      	ldr	r3, [pc, #152]	; (800fe88 <prvAddNewTaskToReadyList+0xcc>)
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d109      	bne.n	800fe0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fdf6:	4b23      	ldr	r3, [pc, #140]	; (800fe84 <prvAddNewTaskToReadyList+0xc8>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe00:	429a      	cmp	r2, r3
 800fe02:	d802      	bhi.n	800fe0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fe04:	4a1f      	ldr	r2, [pc, #124]	; (800fe84 <prvAddNewTaskToReadyList+0xc8>)
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fe0a:	4b20      	ldr	r3, [pc, #128]	; (800fe8c <prvAddNewTaskToReadyList+0xd0>)
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	3301      	adds	r3, #1
 800fe10:	4a1e      	ldr	r2, [pc, #120]	; (800fe8c <prvAddNewTaskToReadyList+0xd0>)
 800fe12:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fe14:	4b1d      	ldr	r3, [pc, #116]	; (800fe8c <prvAddNewTaskToReadyList+0xd0>)
 800fe16:	681a      	ldr	r2, [r3, #0]
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe20:	4b1b      	ldr	r3, [pc, #108]	; (800fe90 <prvAddNewTaskToReadyList+0xd4>)
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	429a      	cmp	r2, r3
 800fe26:	d903      	bls.n	800fe30 <prvAddNewTaskToReadyList+0x74>
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe2c:	4a18      	ldr	r2, [pc, #96]	; (800fe90 <prvAddNewTaskToReadyList+0xd4>)
 800fe2e:	6013      	str	r3, [r2, #0]
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe34:	4613      	mov	r3, r2
 800fe36:	009b      	lsls	r3, r3, #2
 800fe38:	4413      	add	r3, r2
 800fe3a:	009b      	lsls	r3, r3, #2
 800fe3c:	4a15      	ldr	r2, [pc, #84]	; (800fe94 <prvAddNewTaskToReadyList+0xd8>)
 800fe3e:	441a      	add	r2, r3
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	3304      	adds	r3, #4
 800fe44:	4619      	mov	r1, r3
 800fe46:	4610      	mov	r0, r2
 800fe48:	f7ff f8fd 	bl	800f046 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fe4c:	f001 fac2 	bl	80113d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fe50:	4b0d      	ldr	r3, [pc, #52]	; (800fe88 <prvAddNewTaskToReadyList+0xcc>)
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d00e      	beq.n	800fe76 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fe58:	4b0a      	ldr	r3, [pc, #40]	; (800fe84 <prvAddNewTaskToReadyList+0xc8>)
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe62:	429a      	cmp	r2, r3
 800fe64:	d207      	bcs.n	800fe76 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fe66:	4b0c      	ldr	r3, [pc, #48]	; (800fe98 <prvAddNewTaskToReadyList+0xdc>)
 800fe68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe6c:	601a      	str	r2, [r3, #0]
 800fe6e:	f3bf 8f4f 	dsb	sy
 800fe72:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fe76:	bf00      	nop
 800fe78:	3708      	adds	r7, #8
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd80      	pop	{r7, pc}
 800fe7e:	bf00      	nop
 800fe80:	20001218 	.word	0x20001218
 800fe84:	20000d44 	.word	0x20000d44
 800fe88:	20001224 	.word	0x20001224
 800fe8c:	20001234 	.word	0x20001234
 800fe90:	20001220 	.word	0x20001220
 800fe94:	20000d48 	.word	0x20000d48
 800fe98:	e000ed04 	.word	0xe000ed04

0800fe9c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b084      	sub	sp, #16
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800fea4:	f001 fa66 	bl	8011374 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d102      	bne.n	800feb4 <vTaskDelete+0x18>
 800feae:	4b2c      	ldr	r3, [pc, #176]	; (800ff60 <vTaskDelete+0xc4>)
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	e000      	b.n	800feb6 <vTaskDelete+0x1a>
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	3304      	adds	r3, #4
 800febc:	4618      	mov	r0, r3
 800febe:	f7ff f91f 	bl	800f100 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d004      	beq.n	800fed4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	3318      	adds	r3, #24
 800fece:	4618      	mov	r0, r3
 800fed0:	f7ff f916 	bl	800f100 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800fed4:	4b23      	ldr	r3, [pc, #140]	; (800ff64 <vTaskDelete+0xc8>)
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	3301      	adds	r3, #1
 800feda:	4a22      	ldr	r2, [pc, #136]	; (800ff64 <vTaskDelete+0xc8>)
 800fedc:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800fede:	4b20      	ldr	r3, [pc, #128]	; (800ff60 <vTaskDelete+0xc4>)
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	68fa      	ldr	r2, [r7, #12]
 800fee4:	429a      	cmp	r2, r3
 800fee6:	d10b      	bne.n	800ff00 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	3304      	adds	r3, #4
 800feec:	4619      	mov	r1, r3
 800feee:	481e      	ldr	r0, [pc, #120]	; (800ff68 <vTaskDelete+0xcc>)
 800fef0:	f7ff f8a9 	bl	800f046 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800fef4:	4b1d      	ldr	r3, [pc, #116]	; (800ff6c <vTaskDelete+0xd0>)
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	3301      	adds	r3, #1
 800fefa:	4a1c      	ldr	r2, [pc, #112]	; (800ff6c <vTaskDelete+0xd0>)
 800fefc:	6013      	str	r3, [r2, #0]
 800fefe:	e009      	b.n	800ff14 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800ff00:	4b1b      	ldr	r3, [pc, #108]	; (800ff70 <vTaskDelete+0xd4>)
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	3b01      	subs	r3, #1
 800ff06:	4a1a      	ldr	r2, [pc, #104]	; (800ff70 <vTaskDelete+0xd4>)
 800ff08:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800ff0a:	68f8      	ldr	r0, [r7, #12]
 800ff0c:	f000 fc74 	bl	80107f8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800ff10:	f000 fca6 	bl	8010860 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800ff14:	f001 fa5e 	bl	80113d4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800ff18:	4b16      	ldr	r3, [pc, #88]	; (800ff74 <vTaskDelete+0xd8>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d01b      	beq.n	800ff58 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800ff20:	4b0f      	ldr	r3, [pc, #60]	; (800ff60 <vTaskDelete+0xc4>)
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	68fa      	ldr	r2, [r7, #12]
 800ff26:	429a      	cmp	r2, r3
 800ff28:	d116      	bne.n	800ff58 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800ff2a:	4b13      	ldr	r3, [pc, #76]	; (800ff78 <vTaskDelete+0xdc>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d00a      	beq.n	800ff48 <vTaskDelete+0xac>
	__asm volatile
 800ff32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff36:	f383 8811 	msr	BASEPRI, r3
 800ff3a:	f3bf 8f6f 	isb	sy
 800ff3e:	f3bf 8f4f 	dsb	sy
 800ff42:	60bb      	str	r3, [r7, #8]
}
 800ff44:	bf00      	nop
 800ff46:	e7fe      	b.n	800ff46 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800ff48:	4b0c      	ldr	r3, [pc, #48]	; (800ff7c <vTaskDelete+0xe0>)
 800ff4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff4e:	601a      	str	r2, [r3, #0]
 800ff50:	f3bf 8f4f 	dsb	sy
 800ff54:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ff58:	bf00      	nop
 800ff5a:	3710      	adds	r7, #16
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bd80      	pop	{r7, pc}
 800ff60:	20000d44 	.word	0x20000d44
 800ff64:	20001234 	.word	0x20001234
 800ff68:	200011ec 	.word	0x200011ec
 800ff6c:	20001200 	.word	0x20001200
 800ff70:	20001218 	.word	0x20001218
 800ff74:	20001224 	.word	0x20001224
 800ff78:	20001240 	.word	0x20001240
 800ff7c:	e000ed04 	.word	0xe000ed04

0800ff80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b084      	sub	sp, #16
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ff88:	2300      	movs	r3, #0
 800ff8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d017      	beq.n	800ffc2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ff92:	4b13      	ldr	r3, [pc, #76]	; (800ffe0 <vTaskDelay+0x60>)
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d00a      	beq.n	800ffb0 <vTaskDelay+0x30>
	__asm volatile
 800ff9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff9e:	f383 8811 	msr	BASEPRI, r3
 800ffa2:	f3bf 8f6f 	isb	sy
 800ffa6:	f3bf 8f4f 	dsb	sy
 800ffaa:	60bb      	str	r3, [r7, #8]
}
 800ffac:	bf00      	nop
 800ffae:	e7fe      	b.n	800ffae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ffb0:	f000 f88a 	bl	80100c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ffb4:	2100      	movs	r1, #0
 800ffb6:	6878      	ldr	r0, [r7, #4]
 800ffb8:	f000 fd0e 	bl	80109d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ffbc:	f000 f892 	bl	80100e4 <xTaskResumeAll>
 800ffc0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d107      	bne.n	800ffd8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ffc8:	4b06      	ldr	r3, [pc, #24]	; (800ffe4 <vTaskDelay+0x64>)
 800ffca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffce:	601a      	str	r2, [r3, #0]
 800ffd0:	f3bf 8f4f 	dsb	sy
 800ffd4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ffd8:	bf00      	nop
 800ffda:	3710      	adds	r7, #16
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}
 800ffe0:	20001240 	.word	0x20001240
 800ffe4:	e000ed04 	.word	0xe000ed04

0800ffe8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b08a      	sub	sp, #40	; 0x28
 800ffec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ffee:	2300      	movs	r3, #0
 800fff0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fff2:	2300      	movs	r3, #0
 800fff4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fff6:	463a      	mov	r2, r7
 800fff8:	1d39      	adds	r1, r7, #4
 800fffa:	f107 0308 	add.w	r3, r7, #8
 800fffe:	4618      	mov	r0, r3
 8010000:	f7fe ffc0 	bl	800ef84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010004:	6839      	ldr	r1, [r7, #0]
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	68ba      	ldr	r2, [r7, #8]
 801000a:	9202      	str	r2, [sp, #8]
 801000c:	9301      	str	r3, [sp, #4]
 801000e:	2300      	movs	r3, #0
 8010010:	9300      	str	r3, [sp, #0]
 8010012:	2300      	movs	r3, #0
 8010014:	460a      	mov	r2, r1
 8010016:	4924      	ldr	r1, [pc, #144]	; (80100a8 <vTaskStartScheduler+0xc0>)
 8010018:	4824      	ldr	r0, [pc, #144]	; (80100ac <vTaskStartScheduler+0xc4>)
 801001a:	f7ff fd87 	bl	800fb2c <xTaskCreateStatic>
 801001e:	4603      	mov	r3, r0
 8010020:	4a23      	ldr	r2, [pc, #140]	; (80100b0 <vTaskStartScheduler+0xc8>)
 8010022:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010024:	4b22      	ldr	r3, [pc, #136]	; (80100b0 <vTaskStartScheduler+0xc8>)
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d002      	beq.n	8010032 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801002c:	2301      	movs	r3, #1
 801002e:	617b      	str	r3, [r7, #20]
 8010030:	e001      	b.n	8010036 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010032:	2300      	movs	r3, #0
 8010034:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010036:	697b      	ldr	r3, [r7, #20]
 8010038:	2b01      	cmp	r3, #1
 801003a:	d102      	bne.n	8010042 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801003c:	f000 fd20 	bl	8010a80 <xTimerCreateTimerTask>
 8010040:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010042:	697b      	ldr	r3, [r7, #20]
 8010044:	2b01      	cmp	r3, #1
 8010046:	d11b      	bne.n	8010080 <vTaskStartScheduler+0x98>
	__asm volatile
 8010048:	f04f 0350 	mov.w	r3, #80	; 0x50
 801004c:	f383 8811 	msr	BASEPRI, r3
 8010050:	f3bf 8f6f 	isb	sy
 8010054:	f3bf 8f4f 	dsb	sy
 8010058:	613b      	str	r3, [r7, #16]
}
 801005a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801005c:	4b15      	ldr	r3, [pc, #84]	; (80100b4 <vTaskStartScheduler+0xcc>)
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	3354      	adds	r3, #84	; 0x54
 8010062:	4a15      	ldr	r2, [pc, #84]	; (80100b8 <vTaskStartScheduler+0xd0>)
 8010064:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010066:	4b15      	ldr	r3, [pc, #84]	; (80100bc <vTaskStartScheduler+0xd4>)
 8010068:	f04f 32ff 	mov.w	r2, #4294967295
 801006c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801006e:	4b14      	ldr	r3, [pc, #80]	; (80100c0 <vTaskStartScheduler+0xd8>)
 8010070:	2201      	movs	r2, #1
 8010072:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010074:	4b13      	ldr	r3, [pc, #76]	; (80100c4 <vTaskStartScheduler+0xdc>)
 8010076:	2200      	movs	r2, #0
 8010078:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801007a:	f001 f8d9 	bl	8011230 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801007e:	e00e      	b.n	801009e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010080:	697b      	ldr	r3, [r7, #20]
 8010082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010086:	d10a      	bne.n	801009e <vTaskStartScheduler+0xb6>
	__asm volatile
 8010088:	f04f 0350 	mov.w	r3, #80	; 0x50
 801008c:	f383 8811 	msr	BASEPRI, r3
 8010090:	f3bf 8f6f 	isb	sy
 8010094:	f3bf 8f4f 	dsb	sy
 8010098:	60fb      	str	r3, [r7, #12]
}
 801009a:	bf00      	nop
 801009c:	e7fe      	b.n	801009c <vTaskStartScheduler+0xb4>
}
 801009e:	bf00      	nop
 80100a0:	3718      	adds	r7, #24
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd80      	pop	{r7, pc}
 80100a6:	bf00      	nop
 80100a8:	080199a4 	.word	0x080199a4
 80100ac:	080106ed 	.word	0x080106ed
 80100b0:	2000123c 	.word	0x2000123c
 80100b4:	20000d44 	.word	0x20000d44
 80100b8:	20000088 	.word	0x20000088
 80100bc:	20001238 	.word	0x20001238
 80100c0:	20001224 	.word	0x20001224
 80100c4:	2000121c 	.word	0x2000121c

080100c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80100c8:	b480      	push	{r7}
 80100ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80100cc:	4b04      	ldr	r3, [pc, #16]	; (80100e0 <vTaskSuspendAll+0x18>)
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	3301      	adds	r3, #1
 80100d2:	4a03      	ldr	r2, [pc, #12]	; (80100e0 <vTaskSuspendAll+0x18>)
 80100d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80100d6:	bf00      	nop
 80100d8:	46bd      	mov	sp, r7
 80100da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100de:	4770      	bx	lr
 80100e0:	20001240 	.word	0x20001240

080100e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b084      	sub	sp, #16
 80100e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80100ea:	2300      	movs	r3, #0
 80100ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80100ee:	2300      	movs	r3, #0
 80100f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80100f2:	4b42      	ldr	r3, [pc, #264]	; (80101fc <xTaskResumeAll+0x118>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d10a      	bne.n	8010110 <xTaskResumeAll+0x2c>
	__asm volatile
 80100fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100fe:	f383 8811 	msr	BASEPRI, r3
 8010102:	f3bf 8f6f 	isb	sy
 8010106:	f3bf 8f4f 	dsb	sy
 801010a:	603b      	str	r3, [r7, #0]
}
 801010c:	bf00      	nop
 801010e:	e7fe      	b.n	801010e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010110:	f001 f930 	bl	8011374 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010114:	4b39      	ldr	r3, [pc, #228]	; (80101fc <xTaskResumeAll+0x118>)
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	3b01      	subs	r3, #1
 801011a:	4a38      	ldr	r2, [pc, #224]	; (80101fc <xTaskResumeAll+0x118>)
 801011c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801011e:	4b37      	ldr	r3, [pc, #220]	; (80101fc <xTaskResumeAll+0x118>)
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d162      	bne.n	80101ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010126:	4b36      	ldr	r3, [pc, #216]	; (8010200 <xTaskResumeAll+0x11c>)
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d05e      	beq.n	80101ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801012e:	e02f      	b.n	8010190 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010130:	4b34      	ldr	r3, [pc, #208]	; (8010204 <xTaskResumeAll+0x120>)
 8010132:	68db      	ldr	r3, [r3, #12]
 8010134:	68db      	ldr	r3, [r3, #12]
 8010136:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	3318      	adds	r3, #24
 801013c:	4618      	mov	r0, r3
 801013e:	f7fe ffdf 	bl	800f100 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	3304      	adds	r3, #4
 8010146:	4618      	mov	r0, r3
 8010148:	f7fe ffda 	bl	800f100 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010150:	4b2d      	ldr	r3, [pc, #180]	; (8010208 <xTaskResumeAll+0x124>)
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	429a      	cmp	r2, r3
 8010156:	d903      	bls.n	8010160 <xTaskResumeAll+0x7c>
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801015c:	4a2a      	ldr	r2, [pc, #168]	; (8010208 <xTaskResumeAll+0x124>)
 801015e:	6013      	str	r3, [r2, #0]
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010164:	4613      	mov	r3, r2
 8010166:	009b      	lsls	r3, r3, #2
 8010168:	4413      	add	r3, r2
 801016a:	009b      	lsls	r3, r3, #2
 801016c:	4a27      	ldr	r2, [pc, #156]	; (801020c <xTaskResumeAll+0x128>)
 801016e:	441a      	add	r2, r3
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	3304      	adds	r3, #4
 8010174:	4619      	mov	r1, r3
 8010176:	4610      	mov	r0, r2
 8010178:	f7fe ff65 	bl	800f046 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010180:	4b23      	ldr	r3, [pc, #140]	; (8010210 <xTaskResumeAll+0x12c>)
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010186:	429a      	cmp	r2, r3
 8010188:	d302      	bcc.n	8010190 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801018a:	4b22      	ldr	r3, [pc, #136]	; (8010214 <xTaskResumeAll+0x130>)
 801018c:	2201      	movs	r2, #1
 801018e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010190:	4b1c      	ldr	r3, [pc, #112]	; (8010204 <xTaskResumeAll+0x120>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d1cb      	bne.n	8010130 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d001      	beq.n	80101a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801019e:	f000 fb5f 	bl	8010860 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80101a2:	4b1d      	ldr	r3, [pc, #116]	; (8010218 <xTaskResumeAll+0x134>)
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d010      	beq.n	80101d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80101ae:	f000 f847 	bl	8010240 <xTaskIncrementTick>
 80101b2:	4603      	mov	r3, r0
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d002      	beq.n	80101be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80101b8:	4b16      	ldr	r3, [pc, #88]	; (8010214 <xTaskResumeAll+0x130>)
 80101ba:	2201      	movs	r2, #1
 80101bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	3b01      	subs	r3, #1
 80101c2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d1f1      	bne.n	80101ae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80101ca:	4b13      	ldr	r3, [pc, #76]	; (8010218 <xTaskResumeAll+0x134>)
 80101cc:	2200      	movs	r2, #0
 80101ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80101d0:	4b10      	ldr	r3, [pc, #64]	; (8010214 <xTaskResumeAll+0x130>)
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d009      	beq.n	80101ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80101d8:	2301      	movs	r3, #1
 80101da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80101dc:	4b0f      	ldr	r3, [pc, #60]	; (801021c <xTaskResumeAll+0x138>)
 80101de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101e2:	601a      	str	r2, [r3, #0]
 80101e4:	f3bf 8f4f 	dsb	sy
 80101e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80101ec:	f001 f8f2 	bl	80113d4 <vPortExitCritical>

	return xAlreadyYielded;
 80101f0:	68bb      	ldr	r3, [r7, #8]
}
 80101f2:	4618      	mov	r0, r3
 80101f4:	3710      	adds	r7, #16
 80101f6:	46bd      	mov	sp, r7
 80101f8:	bd80      	pop	{r7, pc}
 80101fa:	bf00      	nop
 80101fc:	20001240 	.word	0x20001240
 8010200:	20001218 	.word	0x20001218
 8010204:	200011d8 	.word	0x200011d8
 8010208:	20001220 	.word	0x20001220
 801020c:	20000d48 	.word	0x20000d48
 8010210:	20000d44 	.word	0x20000d44
 8010214:	2000122c 	.word	0x2000122c
 8010218:	20001228 	.word	0x20001228
 801021c:	e000ed04 	.word	0xe000ed04

08010220 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010220:	b480      	push	{r7}
 8010222:	b083      	sub	sp, #12
 8010224:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010226:	4b05      	ldr	r3, [pc, #20]	; (801023c <xTaskGetTickCount+0x1c>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801022c:	687b      	ldr	r3, [r7, #4]
}
 801022e:	4618      	mov	r0, r3
 8010230:	370c      	adds	r7, #12
 8010232:	46bd      	mov	sp, r7
 8010234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010238:	4770      	bx	lr
 801023a:	bf00      	nop
 801023c:	2000121c 	.word	0x2000121c

08010240 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b086      	sub	sp, #24
 8010244:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010246:	2300      	movs	r3, #0
 8010248:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801024a:	4b4f      	ldr	r3, [pc, #316]	; (8010388 <xTaskIncrementTick+0x148>)
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	2b00      	cmp	r3, #0
 8010250:	f040 808f 	bne.w	8010372 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010254:	4b4d      	ldr	r3, [pc, #308]	; (801038c <xTaskIncrementTick+0x14c>)
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	3301      	adds	r3, #1
 801025a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801025c:	4a4b      	ldr	r2, [pc, #300]	; (801038c <xTaskIncrementTick+0x14c>)
 801025e:	693b      	ldr	r3, [r7, #16]
 8010260:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010262:	693b      	ldr	r3, [r7, #16]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d120      	bne.n	80102aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010268:	4b49      	ldr	r3, [pc, #292]	; (8010390 <xTaskIncrementTick+0x150>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d00a      	beq.n	8010288 <xTaskIncrementTick+0x48>
	__asm volatile
 8010272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010276:	f383 8811 	msr	BASEPRI, r3
 801027a:	f3bf 8f6f 	isb	sy
 801027e:	f3bf 8f4f 	dsb	sy
 8010282:	603b      	str	r3, [r7, #0]
}
 8010284:	bf00      	nop
 8010286:	e7fe      	b.n	8010286 <xTaskIncrementTick+0x46>
 8010288:	4b41      	ldr	r3, [pc, #260]	; (8010390 <xTaskIncrementTick+0x150>)
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	60fb      	str	r3, [r7, #12]
 801028e:	4b41      	ldr	r3, [pc, #260]	; (8010394 <xTaskIncrementTick+0x154>)
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	4a3f      	ldr	r2, [pc, #252]	; (8010390 <xTaskIncrementTick+0x150>)
 8010294:	6013      	str	r3, [r2, #0]
 8010296:	4a3f      	ldr	r2, [pc, #252]	; (8010394 <xTaskIncrementTick+0x154>)
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	6013      	str	r3, [r2, #0]
 801029c:	4b3e      	ldr	r3, [pc, #248]	; (8010398 <xTaskIncrementTick+0x158>)
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	3301      	adds	r3, #1
 80102a2:	4a3d      	ldr	r2, [pc, #244]	; (8010398 <xTaskIncrementTick+0x158>)
 80102a4:	6013      	str	r3, [r2, #0]
 80102a6:	f000 fadb 	bl	8010860 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80102aa:	4b3c      	ldr	r3, [pc, #240]	; (801039c <xTaskIncrementTick+0x15c>)
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	693a      	ldr	r2, [r7, #16]
 80102b0:	429a      	cmp	r2, r3
 80102b2:	d349      	bcc.n	8010348 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80102b4:	4b36      	ldr	r3, [pc, #216]	; (8010390 <xTaskIncrementTick+0x150>)
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d104      	bne.n	80102c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80102be:	4b37      	ldr	r3, [pc, #220]	; (801039c <xTaskIncrementTick+0x15c>)
 80102c0:	f04f 32ff 	mov.w	r2, #4294967295
 80102c4:	601a      	str	r2, [r3, #0]
					break;
 80102c6:	e03f      	b.n	8010348 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102c8:	4b31      	ldr	r3, [pc, #196]	; (8010390 <xTaskIncrementTick+0x150>)
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	68db      	ldr	r3, [r3, #12]
 80102ce:	68db      	ldr	r3, [r3, #12]
 80102d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80102d2:	68bb      	ldr	r3, [r7, #8]
 80102d4:	685b      	ldr	r3, [r3, #4]
 80102d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80102d8:	693a      	ldr	r2, [r7, #16]
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	429a      	cmp	r2, r3
 80102de:	d203      	bcs.n	80102e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80102e0:	4a2e      	ldr	r2, [pc, #184]	; (801039c <xTaskIncrementTick+0x15c>)
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80102e6:	e02f      	b.n	8010348 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80102e8:	68bb      	ldr	r3, [r7, #8]
 80102ea:	3304      	adds	r3, #4
 80102ec:	4618      	mov	r0, r3
 80102ee:	f7fe ff07 	bl	800f100 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80102f2:	68bb      	ldr	r3, [r7, #8]
 80102f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d004      	beq.n	8010304 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80102fa:	68bb      	ldr	r3, [r7, #8]
 80102fc:	3318      	adds	r3, #24
 80102fe:	4618      	mov	r0, r3
 8010300:	f7fe fefe 	bl	800f100 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010304:	68bb      	ldr	r3, [r7, #8]
 8010306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010308:	4b25      	ldr	r3, [pc, #148]	; (80103a0 <xTaskIncrementTick+0x160>)
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	429a      	cmp	r2, r3
 801030e:	d903      	bls.n	8010318 <xTaskIncrementTick+0xd8>
 8010310:	68bb      	ldr	r3, [r7, #8]
 8010312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010314:	4a22      	ldr	r2, [pc, #136]	; (80103a0 <xTaskIncrementTick+0x160>)
 8010316:	6013      	str	r3, [r2, #0]
 8010318:	68bb      	ldr	r3, [r7, #8]
 801031a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801031c:	4613      	mov	r3, r2
 801031e:	009b      	lsls	r3, r3, #2
 8010320:	4413      	add	r3, r2
 8010322:	009b      	lsls	r3, r3, #2
 8010324:	4a1f      	ldr	r2, [pc, #124]	; (80103a4 <xTaskIncrementTick+0x164>)
 8010326:	441a      	add	r2, r3
 8010328:	68bb      	ldr	r3, [r7, #8]
 801032a:	3304      	adds	r3, #4
 801032c:	4619      	mov	r1, r3
 801032e:	4610      	mov	r0, r2
 8010330:	f7fe fe89 	bl	800f046 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010334:	68bb      	ldr	r3, [r7, #8]
 8010336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010338:	4b1b      	ldr	r3, [pc, #108]	; (80103a8 <xTaskIncrementTick+0x168>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801033e:	429a      	cmp	r2, r3
 8010340:	d3b8      	bcc.n	80102b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8010342:	2301      	movs	r3, #1
 8010344:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010346:	e7b5      	b.n	80102b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010348:	4b17      	ldr	r3, [pc, #92]	; (80103a8 <xTaskIncrementTick+0x168>)
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801034e:	4915      	ldr	r1, [pc, #84]	; (80103a4 <xTaskIncrementTick+0x164>)
 8010350:	4613      	mov	r3, r2
 8010352:	009b      	lsls	r3, r3, #2
 8010354:	4413      	add	r3, r2
 8010356:	009b      	lsls	r3, r3, #2
 8010358:	440b      	add	r3, r1
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	2b01      	cmp	r3, #1
 801035e:	d901      	bls.n	8010364 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8010360:	2301      	movs	r3, #1
 8010362:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010364:	4b11      	ldr	r3, [pc, #68]	; (80103ac <xTaskIncrementTick+0x16c>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d007      	beq.n	801037c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801036c:	2301      	movs	r3, #1
 801036e:	617b      	str	r3, [r7, #20]
 8010370:	e004      	b.n	801037c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010372:	4b0f      	ldr	r3, [pc, #60]	; (80103b0 <xTaskIncrementTick+0x170>)
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	3301      	adds	r3, #1
 8010378:	4a0d      	ldr	r2, [pc, #52]	; (80103b0 <xTaskIncrementTick+0x170>)
 801037a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801037c:	697b      	ldr	r3, [r7, #20]
}
 801037e:	4618      	mov	r0, r3
 8010380:	3718      	adds	r7, #24
 8010382:	46bd      	mov	sp, r7
 8010384:	bd80      	pop	{r7, pc}
 8010386:	bf00      	nop
 8010388:	20001240 	.word	0x20001240
 801038c:	2000121c 	.word	0x2000121c
 8010390:	200011d0 	.word	0x200011d0
 8010394:	200011d4 	.word	0x200011d4
 8010398:	20001230 	.word	0x20001230
 801039c:	20001238 	.word	0x20001238
 80103a0:	20001220 	.word	0x20001220
 80103a4:	20000d48 	.word	0x20000d48
 80103a8:	20000d44 	.word	0x20000d44
 80103ac:	2000122c 	.word	0x2000122c
 80103b0:	20001228 	.word	0x20001228

080103b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80103b4:	b480      	push	{r7}
 80103b6:	b085      	sub	sp, #20
 80103b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80103ba:	4b2a      	ldr	r3, [pc, #168]	; (8010464 <vTaskSwitchContext+0xb0>)
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d003      	beq.n	80103ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80103c2:	4b29      	ldr	r3, [pc, #164]	; (8010468 <vTaskSwitchContext+0xb4>)
 80103c4:	2201      	movs	r2, #1
 80103c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80103c8:	e046      	b.n	8010458 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80103ca:	4b27      	ldr	r3, [pc, #156]	; (8010468 <vTaskSwitchContext+0xb4>)
 80103cc:	2200      	movs	r2, #0
 80103ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80103d0:	4b26      	ldr	r3, [pc, #152]	; (801046c <vTaskSwitchContext+0xb8>)
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	60fb      	str	r3, [r7, #12]
 80103d6:	e010      	b.n	80103fa <vTaskSwitchContext+0x46>
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d10a      	bne.n	80103f4 <vTaskSwitchContext+0x40>
	__asm volatile
 80103de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103e2:	f383 8811 	msr	BASEPRI, r3
 80103e6:	f3bf 8f6f 	isb	sy
 80103ea:	f3bf 8f4f 	dsb	sy
 80103ee:	607b      	str	r3, [r7, #4]
}
 80103f0:	bf00      	nop
 80103f2:	e7fe      	b.n	80103f2 <vTaskSwitchContext+0x3e>
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	3b01      	subs	r3, #1
 80103f8:	60fb      	str	r3, [r7, #12]
 80103fa:	491d      	ldr	r1, [pc, #116]	; (8010470 <vTaskSwitchContext+0xbc>)
 80103fc:	68fa      	ldr	r2, [r7, #12]
 80103fe:	4613      	mov	r3, r2
 8010400:	009b      	lsls	r3, r3, #2
 8010402:	4413      	add	r3, r2
 8010404:	009b      	lsls	r3, r3, #2
 8010406:	440b      	add	r3, r1
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d0e4      	beq.n	80103d8 <vTaskSwitchContext+0x24>
 801040e:	68fa      	ldr	r2, [r7, #12]
 8010410:	4613      	mov	r3, r2
 8010412:	009b      	lsls	r3, r3, #2
 8010414:	4413      	add	r3, r2
 8010416:	009b      	lsls	r3, r3, #2
 8010418:	4a15      	ldr	r2, [pc, #84]	; (8010470 <vTaskSwitchContext+0xbc>)
 801041a:	4413      	add	r3, r2
 801041c:	60bb      	str	r3, [r7, #8]
 801041e:	68bb      	ldr	r3, [r7, #8]
 8010420:	685b      	ldr	r3, [r3, #4]
 8010422:	685a      	ldr	r2, [r3, #4]
 8010424:	68bb      	ldr	r3, [r7, #8]
 8010426:	605a      	str	r2, [r3, #4]
 8010428:	68bb      	ldr	r3, [r7, #8]
 801042a:	685a      	ldr	r2, [r3, #4]
 801042c:	68bb      	ldr	r3, [r7, #8]
 801042e:	3308      	adds	r3, #8
 8010430:	429a      	cmp	r2, r3
 8010432:	d104      	bne.n	801043e <vTaskSwitchContext+0x8a>
 8010434:	68bb      	ldr	r3, [r7, #8]
 8010436:	685b      	ldr	r3, [r3, #4]
 8010438:	685a      	ldr	r2, [r3, #4]
 801043a:	68bb      	ldr	r3, [r7, #8]
 801043c:	605a      	str	r2, [r3, #4]
 801043e:	68bb      	ldr	r3, [r7, #8]
 8010440:	685b      	ldr	r3, [r3, #4]
 8010442:	68db      	ldr	r3, [r3, #12]
 8010444:	4a0b      	ldr	r2, [pc, #44]	; (8010474 <vTaskSwitchContext+0xc0>)
 8010446:	6013      	str	r3, [r2, #0]
 8010448:	4a08      	ldr	r2, [pc, #32]	; (801046c <vTaskSwitchContext+0xb8>)
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801044e:	4b09      	ldr	r3, [pc, #36]	; (8010474 <vTaskSwitchContext+0xc0>)
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	3354      	adds	r3, #84	; 0x54
 8010454:	4a08      	ldr	r2, [pc, #32]	; (8010478 <vTaskSwitchContext+0xc4>)
 8010456:	6013      	str	r3, [r2, #0]
}
 8010458:	bf00      	nop
 801045a:	3714      	adds	r7, #20
 801045c:	46bd      	mov	sp, r7
 801045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010462:	4770      	bx	lr
 8010464:	20001240 	.word	0x20001240
 8010468:	2000122c 	.word	0x2000122c
 801046c:	20001220 	.word	0x20001220
 8010470:	20000d48 	.word	0x20000d48
 8010474:	20000d44 	.word	0x20000d44
 8010478:	20000088 	.word	0x20000088

0801047c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b084      	sub	sp, #16
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
 8010484:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d10a      	bne.n	80104a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801048c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010490:	f383 8811 	msr	BASEPRI, r3
 8010494:	f3bf 8f6f 	isb	sy
 8010498:	f3bf 8f4f 	dsb	sy
 801049c:	60fb      	str	r3, [r7, #12]
}
 801049e:	bf00      	nop
 80104a0:	e7fe      	b.n	80104a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80104a2:	4b07      	ldr	r3, [pc, #28]	; (80104c0 <vTaskPlaceOnEventList+0x44>)
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	3318      	adds	r3, #24
 80104a8:	4619      	mov	r1, r3
 80104aa:	6878      	ldr	r0, [r7, #4]
 80104ac:	f7fe fdef 	bl	800f08e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80104b0:	2101      	movs	r1, #1
 80104b2:	6838      	ldr	r0, [r7, #0]
 80104b4:	f000 fa90 	bl	80109d8 <prvAddCurrentTaskToDelayedList>
}
 80104b8:	bf00      	nop
 80104ba:	3710      	adds	r7, #16
 80104bc:	46bd      	mov	sp, r7
 80104be:	bd80      	pop	{r7, pc}
 80104c0:	20000d44 	.word	0x20000d44

080104c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b086      	sub	sp, #24
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	60f8      	str	r0, [r7, #12]
 80104cc:	60b9      	str	r1, [r7, #8]
 80104ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d10a      	bne.n	80104ec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80104d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104da:	f383 8811 	msr	BASEPRI, r3
 80104de:	f3bf 8f6f 	isb	sy
 80104e2:	f3bf 8f4f 	dsb	sy
 80104e6:	617b      	str	r3, [r7, #20]
}
 80104e8:	bf00      	nop
 80104ea:	e7fe      	b.n	80104ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80104ec:	4b0a      	ldr	r3, [pc, #40]	; (8010518 <vTaskPlaceOnEventListRestricted+0x54>)
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	3318      	adds	r3, #24
 80104f2:	4619      	mov	r1, r3
 80104f4:	68f8      	ldr	r0, [r7, #12]
 80104f6:	f7fe fda6 	bl	800f046 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d002      	beq.n	8010506 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8010500:	f04f 33ff 	mov.w	r3, #4294967295
 8010504:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010506:	6879      	ldr	r1, [r7, #4]
 8010508:	68b8      	ldr	r0, [r7, #8]
 801050a:	f000 fa65 	bl	80109d8 <prvAddCurrentTaskToDelayedList>
	}
 801050e:	bf00      	nop
 8010510:	3718      	adds	r7, #24
 8010512:	46bd      	mov	sp, r7
 8010514:	bd80      	pop	{r7, pc}
 8010516:	bf00      	nop
 8010518:	20000d44 	.word	0x20000d44

0801051c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b086      	sub	sp, #24
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	68db      	ldr	r3, [r3, #12]
 8010528:	68db      	ldr	r3, [r3, #12]
 801052a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801052c:	693b      	ldr	r3, [r7, #16]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d10a      	bne.n	8010548 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8010532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010536:	f383 8811 	msr	BASEPRI, r3
 801053a:	f3bf 8f6f 	isb	sy
 801053e:	f3bf 8f4f 	dsb	sy
 8010542:	60fb      	str	r3, [r7, #12]
}
 8010544:	bf00      	nop
 8010546:	e7fe      	b.n	8010546 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010548:	693b      	ldr	r3, [r7, #16]
 801054a:	3318      	adds	r3, #24
 801054c:	4618      	mov	r0, r3
 801054e:	f7fe fdd7 	bl	800f100 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010552:	4b1e      	ldr	r3, [pc, #120]	; (80105cc <xTaskRemoveFromEventList+0xb0>)
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d11d      	bne.n	8010596 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801055a:	693b      	ldr	r3, [r7, #16]
 801055c:	3304      	adds	r3, #4
 801055e:	4618      	mov	r0, r3
 8010560:	f7fe fdce 	bl	800f100 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010564:	693b      	ldr	r3, [r7, #16]
 8010566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010568:	4b19      	ldr	r3, [pc, #100]	; (80105d0 <xTaskRemoveFromEventList+0xb4>)
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	429a      	cmp	r2, r3
 801056e:	d903      	bls.n	8010578 <xTaskRemoveFromEventList+0x5c>
 8010570:	693b      	ldr	r3, [r7, #16]
 8010572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010574:	4a16      	ldr	r2, [pc, #88]	; (80105d0 <xTaskRemoveFromEventList+0xb4>)
 8010576:	6013      	str	r3, [r2, #0]
 8010578:	693b      	ldr	r3, [r7, #16]
 801057a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801057c:	4613      	mov	r3, r2
 801057e:	009b      	lsls	r3, r3, #2
 8010580:	4413      	add	r3, r2
 8010582:	009b      	lsls	r3, r3, #2
 8010584:	4a13      	ldr	r2, [pc, #76]	; (80105d4 <xTaskRemoveFromEventList+0xb8>)
 8010586:	441a      	add	r2, r3
 8010588:	693b      	ldr	r3, [r7, #16]
 801058a:	3304      	adds	r3, #4
 801058c:	4619      	mov	r1, r3
 801058e:	4610      	mov	r0, r2
 8010590:	f7fe fd59 	bl	800f046 <vListInsertEnd>
 8010594:	e005      	b.n	80105a2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010596:	693b      	ldr	r3, [r7, #16]
 8010598:	3318      	adds	r3, #24
 801059a:	4619      	mov	r1, r3
 801059c:	480e      	ldr	r0, [pc, #56]	; (80105d8 <xTaskRemoveFromEventList+0xbc>)
 801059e:	f7fe fd52 	bl	800f046 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80105a2:	693b      	ldr	r3, [r7, #16]
 80105a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105a6:	4b0d      	ldr	r3, [pc, #52]	; (80105dc <xTaskRemoveFromEventList+0xc0>)
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105ac:	429a      	cmp	r2, r3
 80105ae:	d905      	bls.n	80105bc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80105b0:	2301      	movs	r3, #1
 80105b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80105b4:	4b0a      	ldr	r3, [pc, #40]	; (80105e0 <xTaskRemoveFromEventList+0xc4>)
 80105b6:	2201      	movs	r2, #1
 80105b8:	601a      	str	r2, [r3, #0]
 80105ba:	e001      	b.n	80105c0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80105bc:	2300      	movs	r3, #0
 80105be:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80105c0:	697b      	ldr	r3, [r7, #20]
}
 80105c2:	4618      	mov	r0, r3
 80105c4:	3718      	adds	r7, #24
 80105c6:	46bd      	mov	sp, r7
 80105c8:	bd80      	pop	{r7, pc}
 80105ca:	bf00      	nop
 80105cc:	20001240 	.word	0x20001240
 80105d0:	20001220 	.word	0x20001220
 80105d4:	20000d48 	.word	0x20000d48
 80105d8:	200011d8 	.word	0x200011d8
 80105dc:	20000d44 	.word	0x20000d44
 80105e0:	2000122c 	.word	0x2000122c

080105e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80105e4:	b480      	push	{r7}
 80105e6:	b083      	sub	sp, #12
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80105ec:	4b06      	ldr	r3, [pc, #24]	; (8010608 <vTaskInternalSetTimeOutState+0x24>)
 80105ee:	681a      	ldr	r2, [r3, #0]
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80105f4:	4b05      	ldr	r3, [pc, #20]	; (801060c <vTaskInternalSetTimeOutState+0x28>)
 80105f6:	681a      	ldr	r2, [r3, #0]
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	605a      	str	r2, [r3, #4]
}
 80105fc:	bf00      	nop
 80105fe:	370c      	adds	r7, #12
 8010600:	46bd      	mov	sp, r7
 8010602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010606:	4770      	bx	lr
 8010608:	20001230 	.word	0x20001230
 801060c:	2000121c 	.word	0x2000121c

08010610 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b088      	sub	sp, #32
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
 8010618:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d10a      	bne.n	8010636 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010624:	f383 8811 	msr	BASEPRI, r3
 8010628:	f3bf 8f6f 	isb	sy
 801062c:	f3bf 8f4f 	dsb	sy
 8010630:	613b      	str	r3, [r7, #16]
}
 8010632:	bf00      	nop
 8010634:	e7fe      	b.n	8010634 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010636:	683b      	ldr	r3, [r7, #0]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d10a      	bne.n	8010652 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801063c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010640:	f383 8811 	msr	BASEPRI, r3
 8010644:	f3bf 8f6f 	isb	sy
 8010648:	f3bf 8f4f 	dsb	sy
 801064c:	60fb      	str	r3, [r7, #12]
}
 801064e:	bf00      	nop
 8010650:	e7fe      	b.n	8010650 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8010652:	f000 fe8f 	bl	8011374 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010656:	4b1d      	ldr	r3, [pc, #116]	; (80106cc <xTaskCheckForTimeOut+0xbc>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	685b      	ldr	r3, [r3, #4]
 8010660:	69ba      	ldr	r2, [r7, #24]
 8010662:	1ad3      	subs	r3, r2, r3
 8010664:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801066e:	d102      	bne.n	8010676 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010670:	2300      	movs	r3, #0
 8010672:	61fb      	str	r3, [r7, #28]
 8010674:	e023      	b.n	80106be <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	681a      	ldr	r2, [r3, #0]
 801067a:	4b15      	ldr	r3, [pc, #84]	; (80106d0 <xTaskCheckForTimeOut+0xc0>)
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	429a      	cmp	r2, r3
 8010680:	d007      	beq.n	8010692 <xTaskCheckForTimeOut+0x82>
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	685b      	ldr	r3, [r3, #4]
 8010686:	69ba      	ldr	r2, [r7, #24]
 8010688:	429a      	cmp	r2, r3
 801068a:	d302      	bcc.n	8010692 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801068c:	2301      	movs	r3, #1
 801068e:	61fb      	str	r3, [r7, #28]
 8010690:	e015      	b.n	80106be <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010692:	683b      	ldr	r3, [r7, #0]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	697a      	ldr	r2, [r7, #20]
 8010698:	429a      	cmp	r2, r3
 801069a:	d20b      	bcs.n	80106b4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	681a      	ldr	r2, [r3, #0]
 80106a0:	697b      	ldr	r3, [r7, #20]
 80106a2:	1ad2      	subs	r2, r2, r3
 80106a4:	683b      	ldr	r3, [r7, #0]
 80106a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80106a8:	6878      	ldr	r0, [r7, #4]
 80106aa:	f7ff ff9b 	bl	80105e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80106ae:	2300      	movs	r3, #0
 80106b0:	61fb      	str	r3, [r7, #28]
 80106b2:	e004      	b.n	80106be <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	2200      	movs	r2, #0
 80106b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80106ba:	2301      	movs	r3, #1
 80106bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80106be:	f000 fe89 	bl	80113d4 <vPortExitCritical>

	return xReturn;
 80106c2:	69fb      	ldr	r3, [r7, #28]
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	3720      	adds	r7, #32
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}
 80106cc:	2000121c 	.word	0x2000121c
 80106d0:	20001230 	.word	0x20001230

080106d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80106d4:	b480      	push	{r7}
 80106d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80106d8:	4b03      	ldr	r3, [pc, #12]	; (80106e8 <vTaskMissedYield+0x14>)
 80106da:	2201      	movs	r2, #1
 80106dc:	601a      	str	r2, [r3, #0]
}
 80106de:	bf00      	nop
 80106e0:	46bd      	mov	sp, r7
 80106e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e6:	4770      	bx	lr
 80106e8:	2000122c 	.word	0x2000122c

080106ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b082      	sub	sp, #8
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80106f4:	f000 f852 	bl	801079c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80106f8:	4b06      	ldr	r3, [pc, #24]	; (8010714 <prvIdleTask+0x28>)
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	2b01      	cmp	r3, #1
 80106fe:	d9f9      	bls.n	80106f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010700:	4b05      	ldr	r3, [pc, #20]	; (8010718 <prvIdleTask+0x2c>)
 8010702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010706:	601a      	str	r2, [r3, #0]
 8010708:	f3bf 8f4f 	dsb	sy
 801070c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010710:	e7f0      	b.n	80106f4 <prvIdleTask+0x8>
 8010712:	bf00      	nop
 8010714:	20000d48 	.word	0x20000d48
 8010718:	e000ed04 	.word	0xe000ed04

0801071c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b082      	sub	sp, #8
 8010720:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010722:	2300      	movs	r3, #0
 8010724:	607b      	str	r3, [r7, #4]
 8010726:	e00c      	b.n	8010742 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010728:	687a      	ldr	r2, [r7, #4]
 801072a:	4613      	mov	r3, r2
 801072c:	009b      	lsls	r3, r3, #2
 801072e:	4413      	add	r3, r2
 8010730:	009b      	lsls	r3, r3, #2
 8010732:	4a12      	ldr	r2, [pc, #72]	; (801077c <prvInitialiseTaskLists+0x60>)
 8010734:	4413      	add	r3, r2
 8010736:	4618      	mov	r0, r3
 8010738:	f7fe fc58 	bl	800efec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	3301      	adds	r3, #1
 8010740:	607b      	str	r3, [r7, #4]
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	2b37      	cmp	r3, #55	; 0x37
 8010746:	d9ef      	bls.n	8010728 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010748:	480d      	ldr	r0, [pc, #52]	; (8010780 <prvInitialiseTaskLists+0x64>)
 801074a:	f7fe fc4f 	bl	800efec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801074e:	480d      	ldr	r0, [pc, #52]	; (8010784 <prvInitialiseTaskLists+0x68>)
 8010750:	f7fe fc4c 	bl	800efec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010754:	480c      	ldr	r0, [pc, #48]	; (8010788 <prvInitialiseTaskLists+0x6c>)
 8010756:	f7fe fc49 	bl	800efec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801075a:	480c      	ldr	r0, [pc, #48]	; (801078c <prvInitialiseTaskLists+0x70>)
 801075c:	f7fe fc46 	bl	800efec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010760:	480b      	ldr	r0, [pc, #44]	; (8010790 <prvInitialiseTaskLists+0x74>)
 8010762:	f7fe fc43 	bl	800efec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010766:	4b0b      	ldr	r3, [pc, #44]	; (8010794 <prvInitialiseTaskLists+0x78>)
 8010768:	4a05      	ldr	r2, [pc, #20]	; (8010780 <prvInitialiseTaskLists+0x64>)
 801076a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801076c:	4b0a      	ldr	r3, [pc, #40]	; (8010798 <prvInitialiseTaskLists+0x7c>)
 801076e:	4a05      	ldr	r2, [pc, #20]	; (8010784 <prvInitialiseTaskLists+0x68>)
 8010770:	601a      	str	r2, [r3, #0]
}
 8010772:	bf00      	nop
 8010774:	3708      	adds	r7, #8
 8010776:	46bd      	mov	sp, r7
 8010778:	bd80      	pop	{r7, pc}
 801077a:	bf00      	nop
 801077c:	20000d48 	.word	0x20000d48
 8010780:	200011a8 	.word	0x200011a8
 8010784:	200011bc 	.word	0x200011bc
 8010788:	200011d8 	.word	0x200011d8
 801078c:	200011ec 	.word	0x200011ec
 8010790:	20001204 	.word	0x20001204
 8010794:	200011d0 	.word	0x200011d0
 8010798:	200011d4 	.word	0x200011d4

0801079c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b082      	sub	sp, #8
 80107a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80107a2:	e019      	b.n	80107d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80107a4:	f000 fde6 	bl	8011374 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80107a8:	4b10      	ldr	r3, [pc, #64]	; (80107ec <prvCheckTasksWaitingTermination+0x50>)
 80107aa:	68db      	ldr	r3, [r3, #12]
 80107ac:	68db      	ldr	r3, [r3, #12]
 80107ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	3304      	adds	r3, #4
 80107b4:	4618      	mov	r0, r3
 80107b6:	f7fe fca3 	bl	800f100 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80107ba:	4b0d      	ldr	r3, [pc, #52]	; (80107f0 <prvCheckTasksWaitingTermination+0x54>)
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	3b01      	subs	r3, #1
 80107c0:	4a0b      	ldr	r2, [pc, #44]	; (80107f0 <prvCheckTasksWaitingTermination+0x54>)
 80107c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80107c4:	4b0b      	ldr	r3, [pc, #44]	; (80107f4 <prvCheckTasksWaitingTermination+0x58>)
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	3b01      	subs	r3, #1
 80107ca:	4a0a      	ldr	r2, [pc, #40]	; (80107f4 <prvCheckTasksWaitingTermination+0x58>)
 80107cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80107ce:	f000 fe01 	bl	80113d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80107d2:	6878      	ldr	r0, [r7, #4]
 80107d4:	f000 f810 	bl	80107f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80107d8:	4b06      	ldr	r3, [pc, #24]	; (80107f4 <prvCheckTasksWaitingTermination+0x58>)
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d1e1      	bne.n	80107a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80107e0:	bf00      	nop
 80107e2:	bf00      	nop
 80107e4:	3708      	adds	r7, #8
 80107e6:	46bd      	mov	sp, r7
 80107e8:	bd80      	pop	{r7, pc}
 80107ea:	bf00      	nop
 80107ec:	200011ec 	.word	0x200011ec
 80107f0:	20001218 	.word	0x20001218
 80107f4:	20001200 	.word	0x20001200

080107f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b084      	sub	sp, #16
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	3354      	adds	r3, #84	; 0x54
 8010804:	4618      	mov	r0, r3
 8010806:	f002 fdcb 	bl	80133a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8010810:	2b00      	cmp	r3, #0
 8010812:	d108      	bne.n	8010826 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010818:	4618      	mov	r0, r3
 801081a:	f000 ff99 	bl	8011750 <vPortFree>
				vPortFree( pxTCB );
 801081e:	6878      	ldr	r0, [r7, #4]
 8010820:	f000 ff96 	bl	8011750 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010824:	e018      	b.n	8010858 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801082c:	2b01      	cmp	r3, #1
 801082e:	d103      	bne.n	8010838 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010830:	6878      	ldr	r0, [r7, #4]
 8010832:	f000 ff8d 	bl	8011750 <vPortFree>
	}
 8010836:	e00f      	b.n	8010858 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801083e:	2b02      	cmp	r3, #2
 8010840:	d00a      	beq.n	8010858 <prvDeleteTCB+0x60>
	__asm volatile
 8010842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010846:	f383 8811 	msr	BASEPRI, r3
 801084a:	f3bf 8f6f 	isb	sy
 801084e:	f3bf 8f4f 	dsb	sy
 8010852:	60fb      	str	r3, [r7, #12]
}
 8010854:	bf00      	nop
 8010856:	e7fe      	b.n	8010856 <prvDeleteTCB+0x5e>
	}
 8010858:	bf00      	nop
 801085a:	3710      	adds	r7, #16
 801085c:	46bd      	mov	sp, r7
 801085e:	bd80      	pop	{r7, pc}

08010860 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010860:	b480      	push	{r7}
 8010862:	b083      	sub	sp, #12
 8010864:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010866:	4b0c      	ldr	r3, [pc, #48]	; (8010898 <prvResetNextTaskUnblockTime+0x38>)
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d104      	bne.n	801087a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010870:	4b0a      	ldr	r3, [pc, #40]	; (801089c <prvResetNextTaskUnblockTime+0x3c>)
 8010872:	f04f 32ff 	mov.w	r2, #4294967295
 8010876:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010878:	e008      	b.n	801088c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801087a:	4b07      	ldr	r3, [pc, #28]	; (8010898 <prvResetNextTaskUnblockTime+0x38>)
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	68db      	ldr	r3, [r3, #12]
 8010880:	68db      	ldr	r3, [r3, #12]
 8010882:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	685b      	ldr	r3, [r3, #4]
 8010888:	4a04      	ldr	r2, [pc, #16]	; (801089c <prvResetNextTaskUnblockTime+0x3c>)
 801088a:	6013      	str	r3, [r2, #0]
}
 801088c:	bf00      	nop
 801088e:	370c      	adds	r7, #12
 8010890:	46bd      	mov	sp, r7
 8010892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010896:	4770      	bx	lr
 8010898:	200011d0 	.word	0x200011d0
 801089c:	20001238 	.word	0x20001238

080108a0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80108a0:	b480      	push	{r7}
 80108a2:	b083      	sub	sp, #12
 80108a4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80108a6:	4b05      	ldr	r3, [pc, #20]	; (80108bc <xTaskGetCurrentTaskHandle+0x1c>)
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	607b      	str	r3, [r7, #4]

		return xReturn;
 80108ac:	687b      	ldr	r3, [r7, #4]
	}
 80108ae:	4618      	mov	r0, r3
 80108b0:	370c      	adds	r7, #12
 80108b2:	46bd      	mov	sp, r7
 80108b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b8:	4770      	bx	lr
 80108ba:	bf00      	nop
 80108bc:	20000d44 	.word	0x20000d44

080108c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80108c0:	b480      	push	{r7}
 80108c2:	b083      	sub	sp, #12
 80108c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80108c6:	4b0b      	ldr	r3, [pc, #44]	; (80108f4 <xTaskGetSchedulerState+0x34>)
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d102      	bne.n	80108d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80108ce:	2301      	movs	r3, #1
 80108d0:	607b      	str	r3, [r7, #4]
 80108d2:	e008      	b.n	80108e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80108d4:	4b08      	ldr	r3, [pc, #32]	; (80108f8 <xTaskGetSchedulerState+0x38>)
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d102      	bne.n	80108e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80108dc:	2302      	movs	r3, #2
 80108de:	607b      	str	r3, [r7, #4]
 80108e0:	e001      	b.n	80108e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80108e2:	2300      	movs	r3, #0
 80108e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80108e6:	687b      	ldr	r3, [r7, #4]
	}
 80108e8:	4618      	mov	r0, r3
 80108ea:	370c      	adds	r7, #12
 80108ec:	46bd      	mov	sp, r7
 80108ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f2:	4770      	bx	lr
 80108f4:	20001224 	.word	0x20001224
 80108f8:	20001240 	.word	0x20001240

080108fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b086      	sub	sp, #24
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010908:	2300      	movs	r3, #0
 801090a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d056      	beq.n	80109c0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010912:	4b2e      	ldr	r3, [pc, #184]	; (80109cc <xTaskPriorityDisinherit+0xd0>)
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	693a      	ldr	r2, [r7, #16]
 8010918:	429a      	cmp	r2, r3
 801091a:	d00a      	beq.n	8010932 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801091c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010920:	f383 8811 	msr	BASEPRI, r3
 8010924:	f3bf 8f6f 	isb	sy
 8010928:	f3bf 8f4f 	dsb	sy
 801092c:	60fb      	str	r3, [r7, #12]
}
 801092e:	bf00      	nop
 8010930:	e7fe      	b.n	8010930 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010932:	693b      	ldr	r3, [r7, #16]
 8010934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010936:	2b00      	cmp	r3, #0
 8010938:	d10a      	bne.n	8010950 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801093a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801093e:	f383 8811 	msr	BASEPRI, r3
 8010942:	f3bf 8f6f 	isb	sy
 8010946:	f3bf 8f4f 	dsb	sy
 801094a:	60bb      	str	r3, [r7, #8]
}
 801094c:	bf00      	nop
 801094e:	e7fe      	b.n	801094e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010950:	693b      	ldr	r3, [r7, #16]
 8010952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010954:	1e5a      	subs	r2, r3, #1
 8010956:	693b      	ldr	r3, [r7, #16]
 8010958:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801095a:	693b      	ldr	r3, [r7, #16]
 801095c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801095e:	693b      	ldr	r3, [r7, #16]
 8010960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010962:	429a      	cmp	r2, r3
 8010964:	d02c      	beq.n	80109c0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010966:	693b      	ldr	r3, [r7, #16]
 8010968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801096a:	2b00      	cmp	r3, #0
 801096c:	d128      	bne.n	80109c0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801096e:	693b      	ldr	r3, [r7, #16]
 8010970:	3304      	adds	r3, #4
 8010972:	4618      	mov	r0, r3
 8010974:	f7fe fbc4 	bl	800f100 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010978:	693b      	ldr	r3, [r7, #16]
 801097a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801097c:	693b      	ldr	r3, [r7, #16]
 801097e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010980:	693b      	ldr	r3, [r7, #16]
 8010982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010984:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010988:	693b      	ldr	r3, [r7, #16]
 801098a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801098c:	693b      	ldr	r3, [r7, #16]
 801098e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010990:	4b0f      	ldr	r3, [pc, #60]	; (80109d0 <xTaskPriorityDisinherit+0xd4>)
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	429a      	cmp	r2, r3
 8010996:	d903      	bls.n	80109a0 <xTaskPriorityDisinherit+0xa4>
 8010998:	693b      	ldr	r3, [r7, #16]
 801099a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801099c:	4a0c      	ldr	r2, [pc, #48]	; (80109d0 <xTaskPriorityDisinherit+0xd4>)
 801099e:	6013      	str	r3, [r2, #0]
 80109a0:	693b      	ldr	r3, [r7, #16]
 80109a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109a4:	4613      	mov	r3, r2
 80109a6:	009b      	lsls	r3, r3, #2
 80109a8:	4413      	add	r3, r2
 80109aa:	009b      	lsls	r3, r3, #2
 80109ac:	4a09      	ldr	r2, [pc, #36]	; (80109d4 <xTaskPriorityDisinherit+0xd8>)
 80109ae:	441a      	add	r2, r3
 80109b0:	693b      	ldr	r3, [r7, #16]
 80109b2:	3304      	adds	r3, #4
 80109b4:	4619      	mov	r1, r3
 80109b6:	4610      	mov	r0, r2
 80109b8:	f7fe fb45 	bl	800f046 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80109bc:	2301      	movs	r3, #1
 80109be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80109c0:	697b      	ldr	r3, [r7, #20]
	}
 80109c2:	4618      	mov	r0, r3
 80109c4:	3718      	adds	r7, #24
 80109c6:	46bd      	mov	sp, r7
 80109c8:	bd80      	pop	{r7, pc}
 80109ca:	bf00      	nop
 80109cc:	20000d44 	.word	0x20000d44
 80109d0:	20001220 	.word	0x20001220
 80109d4:	20000d48 	.word	0x20000d48

080109d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	b084      	sub	sp, #16
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
 80109e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80109e2:	4b21      	ldr	r3, [pc, #132]	; (8010a68 <prvAddCurrentTaskToDelayedList+0x90>)
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80109e8:	4b20      	ldr	r3, [pc, #128]	; (8010a6c <prvAddCurrentTaskToDelayedList+0x94>)
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	3304      	adds	r3, #4
 80109ee:	4618      	mov	r0, r3
 80109f0:	f7fe fb86 	bl	800f100 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109fa:	d10a      	bne.n	8010a12 <prvAddCurrentTaskToDelayedList+0x3a>
 80109fc:	683b      	ldr	r3, [r7, #0]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d007      	beq.n	8010a12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a02:	4b1a      	ldr	r3, [pc, #104]	; (8010a6c <prvAddCurrentTaskToDelayedList+0x94>)
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	3304      	adds	r3, #4
 8010a08:	4619      	mov	r1, r3
 8010a0a:	4819      	ldr	r0, [pc, #100]	; (8010a70 <prvAddCurrentTaskToDelayedList+0x98>)
 8010a0c:	f7fe fb1b 	bl	800f046 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010a10:	e026      	b.n	8010a60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010a12:	68fa      	ldr	r2, [r7, #12]
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	4413      	add	r3, r2
 8010a18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010a1a:	4b14      	ldr	r3, [pc, #80]	; (8010a6c <prvAddCurrentTaskToDelayedList+0x94>)
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	68ba      	ldr	r2, [r7, #8]
 8010a20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010a22:	68ba      	ldr	r2, [r7, #8]
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	429a      	cmp	r2, r3
 8010a28:	d209      	bcs.n	8010a3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a2a:	4b12      	ldr	r3, [pc, #72]	; (8010a74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010a2c:	681a      	ldr	r2, [r3, #0]
 8010a2e:	4b0f      	ldr	r3, [pc, #60]	; (8010a6c <prvAddCurrentTaskToDelayedList+0x94>)
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	3304      	adds	r3, #4
 8010a34:	4619      	mov	r1, r3
 8010a36:	4610      	mov	r0, r2
 8010a38:	f7fe fb29 	bl	800f08e <vListInsert>
}
 8010a3c:	e010      	b.n	8010a60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a3e:	4b0e      	ldr	r3, [pc, #56]	; (8010a78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010a40:	681a      	ldr	r2, [r3, #0]
 8010a42:	4b0a      	ldr	r3, [pc, #40]	; (8010a6c <prvAddCurrentTaskToDelayedList+0x94>)
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	3304      	adds	r3, #4
 8010a48:	4619      	mov	r1, r3
 8010a4a:	4610      	mov	r0, r2
 8010a4c:	f7fe fb1f 	bl	800f08e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010a50:	4b0a      	ldr	r3, [pc, #40]	; (8010a7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	68ba      	ldr	r2, [r7, #8]
 8010a56:	429a      	cmp	r2, r3
 8010a58:	d202      	bcs.n	8010a60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010a5a:	4a08      	ldr	r2, [pc, #32]	; (8010a7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8010a5c:	68bb      	ldr	r3, [r7, #8]
 8010a5e:	6013      	str	r3, [r2, #0]
}
 8010a60:	bf00      	nop
 8010a62:	3710      	adds	r7, #16
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bd80      	pop	{r7, pc}
 8010a68:	2000121c 	.word	0x2000121c
 8010a6c:	20000d44 	.word	0x20000d44
 8010a70:	20001204 	.word	0x20001204
 8010a74:	200011d4 	.word	0x200011d4
 8010a78:	200011d0 	.word	0x200011d0
 8010a7c:	20001238 	.word	0x20001238

08010a80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b08a      	sub	sp, #40	; 0x28
 8010a84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010a86:	2300      	movs	r3, #0
 8010a88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010a8a:	f000 fb07 	bl	801109c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010a8e:	4b1c      	ldr	r3, [pc, #112]	; (8010b00 <xTimerCreateTimerTask+0x80>)
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d021      	beq.n	8010ada <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010a96:	2300      	movs	r3, #0
 8010a98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010a9e:	1d3a      	adds	r2, r7, #4
 8010aa0:	f107 0108 	add.w	r1, r7, #8
 8010aa4:	f107 030c 	add.w	r3, r7, #12
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	f7fe fa85 	bl	800efb8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010aae:	6879      	ldr	r1, [r7, #4]
 8010ab0:	68bb      	ldr	r3, [r7, #8]
 8010ab2:	68fa      	ldr	r2, [r7, #12]
 8010ab4:	9202      	str	r2, [sp, #8]
 8010ab6:	9301      	str	r3, [sp, #4]
 8010ab8:	2302      	movs	r3, #2
 8010aba:	9300      	str	r3, [sp, #0]
 8010abc:	2300      	movs	r3, #0
 8010abe:	460a      	mov	r2, r1
 8010ac0:	4910      	ldr	r1, [pc, #64]	; (8010b04 <xTimerCreateTimerTask+0x84>)
 8010ac2:	4811      	ldr	r0, [pc, #68]	; (8010b08 <xTimerCreateTimerTask+0x88>)
 8010ac4:	f7ff f832 	bl	800fb2c <xTaskCreateStatic>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	4a10      	ldr	r2, [pc, #64]	; (8010b0c <xTimerCreateTimerTask+0x8c>)
 8010acc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010ace:	4b0f      	ldr	r3, [pc, #60]	; (8010b0c <xTimerCreateTimerTask+0x8c>)
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d001      	beq.n	8010ada <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010ad6:	2301      	movs	r3, #1
 8010ad8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010ada:	697b      	ldr	r3, [r7, #20]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d10a      	bne.n	8010af6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ae4:	f383 8811 	msr	BASEPRI, r3
 8010ae8:	f3bf 8f6f 	isb	sy
 8010aec:	f3bf 8f4f 	dsb	sy
 8010af0:	613b      	str	r3, [r7, #16]
}
 8010af2:	bf00      	nop
 8010af4:	e7fe      	b.n	8010af4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010af6:	697b      	ldr	r3, [r7, #20]
}
 8010af8:	4618      	mov	r0, r3
 8010afa:	3718      	adds	r7, #24
 8010afc:	46bd      	mov	sp, r7
 8010afe:	bd80      	pop	{r7, pc}
 8010b00:	20001274 	.word	0x20001274
 8010b04:	080199ac 	.word	0x080199ac
 8010b08:	08010c45 	.word	0x08010c45
 8010b0c:	20001278 	.word	0x20001278

08010b10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b08a      	sub	sp, #40	; 0x28
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	60f8      	str	r0, [r7, #12]
 8010b18:	60b9      	str	r1, [r7, #8]
 8010b1a:	607a      	str	r2, [r7, #4]
 8010b1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010b1e:	2300      	movs	r3, #0
 8010b20:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d10a      	bne.n	8010b3e <xTimerGenericCommand+0x2e>
	__asm volatile
 8010b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b2c:	f383 8811 	msr	BASEPRI, r3
 8010b30:	f3bf 8f6f 	isb	sy
 8010b34:	f3bf 8f4f 	dsb	sy
 8010b38:	623b      	str	r3, [r7, #32]
}
 8010b3a:	bf00      	nop
 8010b3c:	e7fe      	b.n	8010b3c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010b3e:	4b1a      	ldr	r3, [pc, #104]	; (8010ba8 <xTimerGenericCommand+0x98>)
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d02a      	beq.n	8010b9c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010b46:	68bb      	ldr	r3, [r7, #8]
 8010b48:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010b52:	68bb      	ldr	r3, [r7, #8]
 8010b54:	2b05      	cmp	r3, #5
 8010b56:	dc18      	bgt.n	8010b8a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010b58:	f7ff feb2 	bl	80108c0 <xTaskGetSchedulerState>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	2b02      	cmp	r3, #2
 8010b60:	d109      	bne.n	8010b76 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010b62:	4b11      	ldr	r3, [pc, #68]	; (8010ba8 <xTimerGenericCommand+0x98>)
 8010b64:	6818      	ldr	r0, [r3, #0]
 8010b66:	f107 0110 	add.w	r1, r7, #16
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b6e:	f7fe fbf5 	bl	800f35c <xQueueGenericSend>
 8010b72:	6278      	str	r0, [r7, #36]	; 0x24
 8010b74:	e012      	b.n	8010b9c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010b76:	4b0c      	ldr	r3, [pc, #48]	; (8010ba8 <xTimerGenericCommand+0x98>)
 8010b78:	6818      	ldr	r0, [r3, #0]
 8010b7a:	f107 0110 	add.w	r1, r7, #16
 8010b7e:	2300      	movs	r3, #0
 8010b80:	2200      	movs	r2, #0
 8010b82:	f7fe fbeb 	bl	800f35c <xQueueGenericSend>
 8010b86:	6278      	str	r0, [r7, #36]	; 0x24
 8010b88:	e008      	b.n	8010b9c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010b8a:	4b07      	ldr	r3, [pc, #28]	; (8010ba8 <xTimerGenericCommand+0x98>)
 8010b8c:	6818      	ldr	r0, [r3, #0]
 8010b8e:	f107 0110 	add.w	r1, r7, #16
 8010b92:	2300      	movs	r3, #0
 8010b94:	683a      	ldr	r2, [r7, #0]
 8010b96:	f7fe fcdf 	bl	800f558 <xQueueGenericSendFromISR>
 8010b9a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	3728      	adds	r7, #40	; 0x28
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	bd80      	pop	{r7, pc}
 8010ba6:	bf00      	nop
 8010ba8:	20001274 	.word	0x20001274

08010bac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b088      	sub	sp, #32
 8010bb0:	af02      	add	r7, sp, #8
 8010bb2:	6078      	str	r0, [r7, #4]
 8010bb4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010bb6:	4b22      	ldr	r3, [pc, #136]	; (8010c40 <prvProcessExpiredTimer+0x94>)
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	68db      	ldr	r3, [r3, #12]
 8010bbc:	68db      	ldr	r3, [r3, #12]
 8010bbe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010bc0:	697b      	ldr	r3, [r7, #20]
 8010bc2:	3304      	adds	r3, #4
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	f7fe fa9b 	bl	800f100 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010bca:	697b      	ldr	r3, [r7, #20]
 8010bcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010bd0:	f003 0304 	and.w	r3, r3, #4
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d022      	beq.n	8010c1e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010bd8:	697b      	ldr	r3, [r7, #20]
 8010bda:	699a      	ldr	r2, [r3, #24]
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	18d1      	adds	r1, r2, r3
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	683a      	ldr	r2, [r7, #0]
 8010be4:	6978      	ldr	r0, [r7, #20]
 8010be6:	f000 f8d1 	bl	8010d8c <prvInsertTimerInActiveList>
 8010bea:	4603      	mov	r3, r0
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d01f      	beq.n	8010c30 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	9300      	str	r3, [sp, #0]
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	687a      	ldr	r2, [r7, #4]
 8010bf8:	2100      	movs	r1, #0
 8010bfa:	6978      	ldr	r0, [r7, #20]
 8010bfc:	f7ff ff88 	bl	8010b10 <xTimerGenericCommand>
 8010c00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010c02:	693b      	ldr	r3, [r7, #16]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d113      	bne.n	8010c30 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c0c:	f383 8811 	msr	BASEPRI, r3
 8010c10:	f3bf 8f6f 	isb	sy
 8010c14:	f3bf 8f4f 	dsb	sy
 8010c18:	60fb      	str	r3, [r7, #12]
}
 8010c1a:	bf00      	nop
 8010c1c:	e7fe      	b.n	8010c1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010c1e:	697b      	ldr	r3, [r7, #20]
 8010c20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c24:	f023 0301 	bic.w	r3, r3, #1
 8010c28:	b2da      	uxtb	r2, r3
 8010c2a:	697b      	ldr	r3, [r7, #20]
 8010c2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010c30:	697b      	ldr	r3, [r7, #20]
 8010c32:	6a1b      	ldr	r3, [r3, #32]
 8010c34:	6978      	ldr	r0, [r7, #20]
 8010c36:	4798      	blx	r3
}
 8010c38:	bf00      	nop
 8010c3a:	3718      	adds	r7, #24
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	bd80      	pop	{r7, pc}
 8010c40:	2000126c 	.word	0x2000126c

08010c44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b084      	sub	sp, #16
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010c4c:	f107 0308 	add.w	r3, r7, #8
 8010c50:	4618      	mov	r0, r3
 8010c52:	f000 f857 	bl	8010d04 <prvGetNextExpireTime>
 8010c56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010c58:	68bb      	ldr	r3, [r7, #8]
 8010c5a:	4619      	mov	r1, r3
 8010c5c:	68f8      	ldr	r0, [r7, #12]
 8010c5e:	f000 f803 	bl	8010c68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010c62:	f000 f8d5 	bl	8010e10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010c66:	e7f1      	b.n	8010c4c <prvTimerTask+0x8>

08010c68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b084      	sub	sp, #16
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
 8010c70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010c72:	f7ff fa29 	bl	80100c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010c76:	f107 0308 	add.w	r3, r7, #8
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	f000 f866 	bl	8010d4c <prvSampleTimeNow>
 8010c80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010c82:	68bb      	ldr	r3, [r7, #8]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d130      	bne.n	8010cea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010c88:	683b      	ldr	r3, [r7, #0]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d10a      	bne.n	8010ca4 <prvProcessTimerOrBlockTask+0x3c>
 8010c8e:	687a      	ldr	r2, [r7, #4]
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	429a      	cmp	r2, r3
 8010c94:	d806      	bhi.n	8010ca4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010c96:	f7ff fa25 	bl	80100e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010c9a:	68f9      	ldr	r1, [r7, #12]
 8010c9c:	6878      	ldr	r0, [r7, #4]
 8010c9e:	f7ff ff85 	bl	8010bac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010ca2:	e024      	b.n	8010cee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010ca4:	683b      	ldr	r3, [r7, #0]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d008      	beq.n	8010cbc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010caa:	4b13      	ldr	r3, [pc, #76]	; (8010cf8 <prvProcessTimerOrBlockTask+0x90>)
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d101      	bne.n	8010cb8 <prvProcessTimerOrBlockTask+0x50>
 8010cb4:	2301      	movs	r3, #1
 8010cb6:	e000      	b.n	8010cba <prvProcessTimerOrBlockTask+0x52>
 8010cb8:	2300      	movs	r3, #0
 8010cba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010cbc:	4b0f      	ldr	r3, [pc, #60]	; (8010cfc <prvProcessTimerOrBlockTask+0x94>)
 8010cbe:	6818      	ldr	r0, [r3, #0]
 8010cc0:	687a      	ldr	r2, [r7, #4]
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	1ad3      	subs	r3, r2, r3
 8010cc6:	683a      	ldr	r2, [r7, #0]
 8010cc8:	4619      	mov	r1, r3
 8010cca:	f7fe fefb 	bl	800fac4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010cce:	f7ff fa09 	bl	80100e4 <xTaskResumeAll>
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d10a      	bne.n	8010cee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010cd8:	4b09      	ldr	r3, [pc, #36]	; (8010d00 <prvProcessTimerOrBlockTask+0x98>)
 8010cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010cde:	601a      	str	r2, [r3, #0]
 8010ce0:	f3bf 8f4f 	dsb	sy
 8010ce4:	f3bf 8f6f 	isb	sy
}
 8010ce8:	e001      	b.n	8010cee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010cea:	f7ff f9fb 	bl	80100e4 <xTaskResumeAll>
}
 8010cee:	bf00      	nop
 8010cf0:	3710      	adds	r7, #16
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	bd80      	pop	{r7, pc}
 8010cf6:	bf00      	nop
 8010cf8:	20001270 	.word	0x20001270
 8010cfc:	20001274 	.word	0x20001274
 8010d00:	e000ed04 	.word	0xe000ed04

08010d04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010d04:	b480      	push	{r7}
 8010d06:	b085      	sub	sp, #20
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010d0c:	4b0e      	ldr	r3, [pc, #56]	; (8010d48 <prvGetNextExpireTime+0x44>)
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d101      	bne.n	8010d1a <prvGetNextExpireTime+0x16>
 8010d16:	2201      	movs	r2, #1
 8010d18:	e000      	b.n	8010d1c <prvGetNextExpireTime+0x18>
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d105      	bne.n	8010d34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010d28:	4b07      	ldr	r3, [pc, #28]	; (8010d48 <prvGetNextExpireTime+0x44>)
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	68db      	ldr	r3, [r3, #12]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	60fb      	str	r3, [r7, #12]
 8010d32:	e001      	b.n	8010d38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010d34:	2300      	movs	r3, #0
 8010d36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010d38:	68fb      	ldr	r3, [r7, #12]
}
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	3714      	adds	r7, #20
 8010d3e:	46bd      	mov	sp, r7
 8010d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d44:	4770      	bx	lr
 8010d46:	bf00      	nop
 8010d48:	2000126c 	.word	0x2000126c

08010d4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b084      	sub	sp, #16
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010d54:	f7ff fa64 	bl	8010220 <xTaskGetTickCount>
 8010d58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010d5a:	4b0b      	ldr	r3, [pc, #44]	; (8010d88 <prvSampleTimeNow+0x3c>)
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	68fa      	ldr	r2, [r7, #12]
 8010d60:	429a      	cmp	r2, r3
 8010d62:	d205      	bcs.n	8010d70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010d64:	f000 f936 	bl	8010fd4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	2201      	movs	r2, #1
 8010d6c:	601a      	str	r2, [r3, #0]
 8010d6e:	e002      	b.n	8010d76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	2200      	movs	r2, #0
 8010d74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010d76:	4a04      	ldr	r2, [pc, #16]	; (8010d88 <prvSampleTimeNow+0x3c>)
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010d7c:	68fb      	ldr	r3, [r7, #12]
}
 8010d7e:	4618      	mov	r0, r3
 8010d80:	3710      	adds	r7, #16
 8010d82:	46bd      	mov	sp, r7
 8010d84:	bd80      	pop	{r7, pc}
 8010d86:	bf00      	nop
 8010d88:	2000127c 	.word	0x2000127c

08010d8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b086      	sub	sp, #24
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	60f8      	str	r0, [r7, #12]
 8010d94:	60b9      	str	r1, [r7, #8]
 8010d96:	607a      	str	r2, [r7, #4]
 8010d98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	68ba      	ldr	r2, [r7, #8]
 8010da2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	68fa      	ldr	r2, [r7, #12]
 8010da8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010daa:	68ba      	ldr	r2, [r7, #8]
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	429a      	cmp	r2, r3
 8010db0:	d812      	bhi.n	8010dd8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010db2:	687a      	ldr	r2, [r7, #4]
 8010db4:	683b      	ldr	r3, [r7, #0]
 8010db6:	1ad2      	subs	r2, r2, r3
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	699b      	ldr	r3, [r3, #24]
 8010dbc:	429a      	cmp	r2, r3
 8010dbe:	d302      	bcc.n	8010dc6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010dc0:	2301      	movs	r3, #1
 8010dc2:	617b      	str	r3, [r7, #20]
 8010dc4:	e01b      	b.n	8010dfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010dc6:	4b10      	ldr	r3, [pc, #64]	; (8010e08 <prvInsertTimerInActiveList+0x7c>)
 8010dc8:	681a      	ldr	r2, [r3, #0]
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	3304      	adds	r3, #4
 8010dce:	4619      	mov	r1, r3
 8010dd0:	4610      	mov	r0, r2
 8010dd2:	f7fe f95c 	bl	800f08e <vListInsert>
 8010dd6:	e012      	b.n	8010dfe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010dd8:	687a      	ldr	r2, [r7, #4]
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	429a      	cmp	r2, r3
 8010dde:	d206      	bcs.n	8010dee <prvInsertTimerInActiveList+0x62>
 8010de0:	68ba      	ldr	r2, [r7, #8]
 8010de2:	683b      	ldr	r3, [r7, #0]
 8010de4:	429a      	cmp	r2, r3
 8010de6:	d302      	bcc.n	8010dee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010de8:	2301      	movs	r3, #1
 8010dea:	617b      	str	r3, [r7, #20]
 8010dec:	e007      	b.n	8010dfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010dee:	4b07      	ldr	r3, [pc, #28]	; (8010e0c <prvInsertTimerInActiveList+0x80>)
 8010df0:	681a      	ldr	r2, [r3, #0]
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	3304      	adds	r3, #4
 8010df6:	4619      	mov	r1, r3
 8010df8:	4610      	mov	r0, r2
 8010dfa:	f7fe f948 	bl	800f08e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010dfe:	697b      	ldr	r3, [r7, #20]
}
 8010e00:	4618      	mov	r0, r3
 8010e02:	3718      	adds	r7, #24
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd80      	pop	{r7, pc}
 8010e08:	20001270 	.word	0x20001270
 8010e0c:	2000126c 	.word	0x2000126c

08010e10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b08e      	sub	sp, #56	; 0x38
 8010e14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010e16:	e0ca      	b.n	8010fae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	da18      	bge.n	8010e50 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010e1e:	1d3b      	adds	r3, r7, #4
 8010e20:	3304      	adds	r3, #4
 8010e22:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d10a      	bne.n	8010e40 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e2e:	f383 8811 	msr	BASEPRI, r3
 8010e32:	f3bf 8f6f 	isb	sy
 8010e36:	f3bf 8f4f 	dsb	sy
 8010e3a:	61fb      	str	r3, [r7, #28]
}
 8010e3c:	bf00      	nop
 8010e3e:	e7fe      	b.n	8010e3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e46:	6850      	ldr	r0, [r2, #4]
 8010e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e4a:	6892      	ldr	r2, [r2, #8]
 8010e4c:	4611      	mov	r1, r2
 8010e4e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	f2c0 80aa 	blt.w	8010fac <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e5e:	695b      	ldr	r3, [r3, #20]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d004      	beq.n	8010e6e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e66:	3304      	adds	r3, #4
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f7fe f949 	bl	800f100 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010e6e:	463b      	mov	r3, r7
 8010e70:	4618      	mov	r0, r3
 8010e72:	f7ff ff6b 	bl	8010d4c <prvSampleTimeNow>
 8010e76:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	2b09      	cmp	r3, #9
 8010e7c:	f200 8097 	bhi.w	8010fae <prvProcessReceivedCommands+0x19e>
 8010e80:	a201      	add	r2, pc, #4	; (adr r2, 8010e88 <prvProcessReceivedCommands+0x78>)
 8010e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e86:	bf00      	nop
 8010e88:	08010eb1 	.word	0x08010eb1
 8010e8c:	08010eb1 	.word	0x08010eb1
 8010e90:	08010eb1 	.word	0x08010eb1
 8010e94:	08010f25 	.word	0x08010f25
 8010e98:	08010f39 	.word	0x08010f39
 8010e9c:	08010f83 	.word	0x08010f83
 8010ea0:	08010eb1 	.word	0x08010eb1
 8010ea4:	08010eb1 	.word	0x08010eb1
 8010ea8:	08010f25 	.word	0x08010f25
 8010eac:	08010f39 	.word	0x08010f39
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010eb6:	f043 0301 	orr.w	r3, r3, #1
 8010eba:	b2da      	uxtb	r2, r3
 8010ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ebe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010ec2:	68ba      	ldr	r2, [r7, #8]
 8010ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ec6:	699b      	ldr	r3, [r3, #24]
 8010ec8:	18d1      	adds	r1, r2, r3
 8010eca:	68bb      	ldr	r3, [r7, #8]
 8010ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ed0:	f7ff ff5c 	bl	8010d8c <prvInsertTimerInActiveList>
 8010ed4:	4603      	mov	r3, r0
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d069      	beq.n	8010fae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010edc:	6a1b      	ldr	r3, [r3, #32]
 8010ede:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ee0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ee4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ee8:	f003 0304 	and.w	r3, r3, #4
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d05e      	beq.n	8010fae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010ef0:	68ba      	ldr	r2, [r7, #8]
 8010ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ef4:	699b      	ldr	r3, [r3, #24]
 8010ef6:	441a      	add	r2, r3
 8010ef8:	2300      	movs	r3, #0
 8010efa:	9300      	str	r3, [sp, #0]
 8010efc:	2300      	movs	r3, #0
 8010efe:	2100      	movs	r1, #0
 8010f00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f02:	f7ff fe05 	bl	8010b10 <xTimerGenericCommand>
 8010f06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010f08:	6a3b      	ldr	r3, [r7, #32]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d14f      	bne.n	8010fae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f12:	f383 8811 	msr	BASEPRI, r3
 8010f16:	f3bf 8f6f 	isb	sy
 8010f1a:	f3bf 8f4f 	dsb	sy
 8010f1e:	61bb      	str	r3, [r7, #24]
}
 8010f20:	bf00      	nop
 8010f22:	e7fe      	b.n	8010f22 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010f2a:	f023 0301 	bic.w	r3, r3, #1
 8010f2e:	b2da      	uxtb	r2, r3
 8010f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010f36:	e03a      	b.n	8010fae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010f3e:	f043 0301 	orr.w	r3, r3, #1
 8010f42:	b2da      	uxtb	r2, r3
 8010f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010f4a:	68ba      	ldr	r2, [r7, #8]
 8010f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f4e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f52:	699b      	ldr	r3, [r3, #24]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d10a      	bne.n	8010f6e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f5c:	f383 8811 	msr	BASEPRI, r3
 8010f60:	f3bf 8f6f 	isb	sy
 8010f64:	f3bf 8f4f 	dsb	sy
 8010f68:	617b      	str	r3, [r7, #20]
}
 8010f6a:	bf00      	nop
 8010f6c:	e7fe      	b.n	8010f6c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f70:	699a      	ldr	r2, [r3, #24]
 8010f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f74:	18d1      	adds	r1, r2, r3
 8010f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f7c:	f7ff ff06 	bl	8010d8c <prvInsertTimerInActiveList>
					break;
 8010f80:	e015      	b.n	8010fae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010f88:	f003 0302 	and.w	r3, r3, #2
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d103      	bne.n	8010f98 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010f90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f92:	f000 fbdd 	bl	8011750 <vPortFree>
 8010f96:	e00a      	b.n	8010fae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010f9e:	f023 0301 	bic.w	r3, r3, #1
 8010fa2:	b2da      	uxtb	r2, r3
 8010fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010faa:	e000      	b.n	8010fae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010fac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010fae:	4b08      	ldr	r3, [pc, #32]	; (8010fd0 <prvProcessReceivedCommands+0x1c0>)
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	1d39      	adds	r1, r7, #4
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f7fe fb6a 	bl	800f690 <xQueueReceive>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	f47f af2a 	bne.w	8010e18 <prvProcessReceivedCommands+0x8>
	}
}
 8010fc4:	bf00      	nop
 8010fc6:	bf00      	nop
 8010fc8:	3730      	adds	r7, #48	; 0x30
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	bd80      	pop	{r7, pc}
 8010fce:	bf00      	nop
 8010fd0:	20001274 	.word	0x20001274

08010fd4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b088      	sub	sp, #32
 8010fd8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010fda:	e048      	b.n	801106e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010fdc:	4b2d      	ldr	r3, [pc, #180]	; (8011094 <prvSwitchTimerLists+0xc0>)
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	68db      	ldr	r3, [r3, #12]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010fe6:	4b2b      	ldr	r3, [pc, #172]	; (8011094 <prvSwitchTimerLists+0xc0>)
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	68db      	ldr	r3, [r3, #12]
 8010fec:	68db      	ldr	r3, [r3, #12]
 8010fee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	3304      	adds	r3, #4
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	f7fe f883 	bl	800f100 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	6a1b      	ldr	r3, [r3, #32]
 8010ffe:	68f8      	ldr	r0, [r7, #12]
 8011000:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011008:	f003 0304 	and.w	r3, r3, #4
 801100c:	2b00      	cmp	r3, #0
 801100e:	d02e      	beq.n	801106e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	699b      	ldr	r3, [r3, #24]
 8011014:	693a      	ldr	r2, [r7, #16]
 8011016:	4413      	add	r3, r2
 8011018:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801101a:	68ba      	ldr	r2, [r7, #8]
 801101c:	693b      	ldr	r3, [r7, #16]
 801101e:	429a      	cmp	r2, r3
 8011020:	d90e      	bls.n	8011040 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	68ba      	ldr	r2, [r7, #8]
 8011026:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	68fa      	ldr	r2, [r7, #12]
 801102c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801102e:	4b19      	ldr	r3, [pc, #100]	; (8011094 <prvSwitchTimerLists+0xc0>)
 8011030:	681a      	ldr	r2, [r3, #0]
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	3304      	adds	r3, #4
 8011036:	4619      	mov	r1, r3
 8011038:	4610      	mov	r0, r2
 801103a:	f7fe f828 	bl	800f08e <vListInsert>
 801103e:	e016      	b.n	801106e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011040:	2300      	movs	r3, #0
 8011042:	9300      	str	r3, [sp, #0]
 8011044:	2300      	movs	r3, #0
 8011046:	693a      	ldr	r2, [r7, #16]
 8011048:	2100      	movs	r1, #0
 801104a:	68f8      	ldr	r0, [r7, #12]
 801104c:	f7ff fd60 	bl	8010b10 <xTimerGenericCommand>
 8011050:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d10a      	bne.n	801106e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8011058:	f04f 0350 	mov.w	r3, #80	; 0x50
 801105c:	f383 8811 	msr	BASEPRI, r3
 8011060:	f3bf 8f6f 	isb	sy
 8011064:	f3bf 8f4f 	dsb	sy
 8011068:	603b      	str	r3, [r7, #0]
}
 801106a:	bf00      	nop
 801106c:	e7fe      	b.n	801106c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801106e:	4b09      	ldr	r3, [pc, #36]	; (8011094 <prvSwitchTimerLists+0xc0>)
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d1b1      	bne.n	8010fdc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011078:	4b06      	ldr	r3, [pc, #24]	; (8011094 <prvSwitchTimerLists+0xc0>)
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801107e:	4b06      	ldr	r3, [pc, #24]	; (8011098 <prvSwitchTimerLists+0xc4>)
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	4a04      	ldr	r2, [pc, #16]	; (8011094 <prvSwitchTimerLists+0xc0>)
 8011084:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011086:	4a04      	ldr	r2, [pc, #16]	; (8011098 <prvSwitchTimerLists+0xc4>)
 8011088:	697b      	ldr	r3, [r7, #20]
 801108a:	6013      	str	r3, [r2, #0]
}
 801108c:	bf00      	nop
 801108e:	3718      	adds	r7, #24
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}
 8011094:	2000126c 	.word	0x2000126c
 8011098:	20001270 	.word	0x20001270

0801109c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b082      	sub	sp, #8
 80110a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80110a2:	f000 f967 	bl	8011374 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80110a6:	4b15      	ldr	r3, [pc, #84]	; (80110fc <prvCheckForValidListAndQueue+0x60>)
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d120      	bne.n	80110f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80110ae:	4814      	ldr	r0, [pc, #80]	; (8011100 <prvCheckForValidListAndQueue+0x64>)
 80110b0:	f7fd ff9c 	bl	800efec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80110b4:	4813      	ldr	r0, [pc, #76]	; (8011104 <prvCheckForValidListAndQueue+0x68>)
 80110b6:	f7fd ff99 	bl	800efec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80110ba:	4b13      	ldr	r3, [pc, #76]	; (8011108 <prvCheckForValidListAndQueue+0x6c>)
 80110bc:	4a10      	ldr	r2, [pc, #64]	; (8011100 <prvCheckForValidListAndQueue+0x64>)
 80110be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80110c0:	4b12      	ldr	r3, [pc, #72]	; (801110c <prvCheckForValidListAndQueue+0x70>)
 80110c2:	4a10      	ldr	r2, [pc, #64]	; (8011104 <prvCheckForValidListAndQueue+0x68>)
 80110c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80110c6:	2300      	movs	r3, #0
 80110c8:	9300      	str	r3, [sp, #0]
 80110ca:	4b11      	ldr	r3, [pc, #68]	; (8011110 <prvCheckForValidListAndQueue+0x74>)
 80110cc:	4a11      	ldr	r2, [pc, #68]	; (8011114 <prvCheckForValidListAndQueue+0x78>)
 80110ce:	2110      	movs	r1, #16
 80110d0:	200a      	movs	r0, #10
 80110d2:	f7fe f8a7 	bl	800f224 <xQueueGenericCreateStatic>
 80110d6:	4603      	mov	r3, r0
 80110d8:	4a08      	ldr	r2, [pc, #32]	; (80110fc <prvCheckForValidListAndQueue+0x60>)
 80110da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80110dc:	4b07      	ldr	r3, [pc, #28]	; (80110fc <prvCheckForValidListAndQueue+0x60>)
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d005      	beq.n	80110f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80110e4:	4b05      	ldr	r3, [pc, #20]	; (80110fc <prvCheckForValidListAndQueue+0x60>)
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	490b      	ldr	r1, [pc, #44]	; (8011118 <prvCheckForValidListAndQueue+0x7c>)
 80110ea:	4618      	mov	r0, r3
 80110ec:	f7fe fcc0 	bl	800fa70 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80110f0:	f000 f970 	bl	80113d4 <vPortExitCritical>
}
 80110f4:	bf00      	nop
 80110f6:	46bd      	mov	sp, r7
 80110f8:	bd80      	pop	{r7, pc}
 80110fa:	bf00      	nop
 80110fc:	20001274 	.word	0x20001274
 8011100:	20001244 	.word	0x20001244
 8011104:	20001258 	.word	0x20001258
 8011108:	2000126c 	.word	0x2000126c
 801110c:	20001270 	.word	0x20001270
 8011110:	20001320 	.word	0x20001320
 8011114:	20001280 	.word	0x20001280
 8011118:	080199b4 	.word	0x080199b4

0801111c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801111c:	b480      	push	{r7}
 801111e:	b085      	sub	sp, #20
 8011120:	af00      	add	r7, sp, #0
 8011122:	60f8      	str	r0, [r7, #12]
 8011124:	60b9      	str	r1, [r7, #8]
 8011126:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	3b04      	subs	r3, #4
 801112c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011134:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	3b04      	subs	r3, #4
 801113a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801113c:	68bb      	ldr	r3, [r7, #8]
 801113e:	f023 0201 	bic.w	r2, r3, #1
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	3b04      	subs	r3, #4
 801114a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801114c:	4a0c      	ldr	r2, [pc, #48]	; (8011180 <pxPortInitialiseStack+0x64>)
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	3b14      	subs	r3, #20
 8011156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011158:	687a      	ldr	r2, [r7, #4]
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	3b04      	subs	r3, #4
 8011162:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	f06f 0202 	mvn.w	r2, #2
 801116a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	3b20      	subs	r3, #32
 8011170:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011172:	68fb      	ldr	r3, [r7, #12]
}
 8011174:	4618      	mov	r0, r3
 8011176:	3714      	adds	r7, #20
 8011178:	46bd      	mov	sp, r7
 801117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117e:	4770      	bx	lr
 8011180:	08011185 	.word	0x08011185

08011184 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011184:	b480      	push	{r7}
 8011186:	b085      	sub	sp, #20
 8011188:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801118a:	2300      	movs	r3, #0
 801118c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801118e:	4b12      	ldr	r3, [pc, #72]	; (80111d8 <prvTaskExitError+0x54>)
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011196:	d00a      	beq.n	80111ae <prvTaskExitError+0x2a>
	__asm volatile
 8011198:	f04f 0350 	mov.w	r3, #80	; 0x50
 801119c:	f383 8811 	msr	BASEPRI, r3
 80111a0:	f3bf 8f6f 	isb	sy
 80111a4:	f3bf 8f4f 	dsb	sy
 80111a8:	60fb      	str	r3, [r7, #12]
}
 80111aa:	bf00      	nop
 80111ac:	e7fe      	b.n	80111ac <prvTaskExitError+0x28>
	__asm volatile
 80111ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111b2:	f383 8811 	msr	BASEPRI, r3
 80111b6:	f3bf 8f6f 	isb	sy
 80111ba:	f3bf 8f4f 	dsb	sy
 80111be:	60bb      	str	r3, [r7, #8]
}
 80111c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80111c2:	bf00      	nop
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d0fc      	beq.n	80111c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80111ca:	bf00      	nop
 80111cc:	bf00      	nop
 80111ce:	3714      	adds	r7, #20
 80111d0:	46bd      	mov	sp, r7
 80111d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d6:	4770      	bx	lr
 80111d8:	20000080 	.word	0x20000080
 80111dc:	00000000 	.word	0x00000000

080111e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80111e0:	4b07      	ldr	r3, [pc, #28]	; (8011200 <pxCurrentTCBConst2>)
 80111e2:	6819      	ldr	r1, [r3, #0]
 80111e4:	6808      	ldr	r0, [r1, #0]
 80111e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111ea:	f380 8809 	msr	PSP, r0
 80111ee:	f3bf 8f6f 	isb	sy
 80111f2:	f04f 0000 	mov.w	r0, #0
 80111f6:	f380 8811 	msr	BASEPRI, r0
 80111fa:	4770      	bx	lr
 80111fc:	f3af 8000 	nop.w

08011200 <pxCurrentTCBConst2>:
 8011200:	20000d44 	.word	0x20000d44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011204:	bf00      	nop
 8011206:	bf00      	nop

08011208 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011208:	4808      	ldr	r0, [pc, #32]	; (801122c <prvPortStartFirstTask+0x24>)
 801120a:	6800      	ldr	r0, [r0, #0]
 801120c:	6800      	ldr	r0, [r0, #0]
 801120e:	f380 8808 	msr	MSP, r0
 8011212:	f04f 0000 	mov.w	r0, #0
 8011216:	f380 8814 	msr	CONTROL, r0
 801121a:	b662      	cpsie	i
 801121c:	b661      	cpsie	f
 801121e:	f3bf 8f4f 	dsb	sy
 8011222:	f3bf 8f6f 	isb	sy
 8011226:	df00      	svc	0
 8011228:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801122a:	bf00      	nop
 801122c:	e000ed08 	.word	0xe000ed08

08011230 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011230:	b580      	push	{r7, lr}
 8011232:	b086      	sub	sp, #24
 8011234:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011236:	4b46      	ldr	r3, [pc, #280]	; (8011350 <xPortStartScheduler+0x120>)
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	4a46      	ldr	r2, [pc, #280]	; (8011354 <xPortStartScheduler+0x124>)
 801123c:	4293      	cmp	r3, r2
 801123e:	d10a      	bne.n	8011256 <xPortStartScheduler+0x26>
	__asm volatile
 8011240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011244:	f383 8811 	msr	BASEPRI, r3
 8011248:	f3bf 8f6f 	isb	sy
 801124c:	f3bf 8f4f 	dsb	sy
 8011250:	613b      	str	r3, [r7, #16]
}
 8011252:	bf00      	nop
 8011254:	e7fe      	b.n	8011254 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011256:	4b3e      	ldr	r3, [pc, #248]	; (8011350 <xPortStartScheduler+0x120>)
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	4a3f      	ldr	r2, [pc, #252]	; (8011358 <xPortStartScheduler+0x128>)
 801125c:	4293      	cmp	r3, r2
 801125e:	d10a      	bne.n	8011276 <xPortStartScheduler+0x46>
	__asm volatile
 8011260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011264:	f383 8811 	msr	BASEPRI, r3
 8011268:	f3bf 8f6f 	isb	sy
 801126c:	f3bf 8f4f 	dsb	sy
 8011270:	60fb      	str	r3, [r7, #12]
}
 8011272:	bf00      	nop
 8011274:	e7fe      	b.n	8011274 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011276:	4b39      	ldr	r3, [pc, #228]	; (801135c <xPortStartScheduler+0x12c>)
 8011278:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801127a:	697b      	ldr	r3, [r7, #20]
 801127c:	781b      	ldrb	r3, [r3, #0]
 801127e:	b2db      	uxtb	r3, r3
 8011280:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011282:	697b      	ldr	r3, [r7, #20]
 8011284:	22ff      	movs	r2, #255	; 0xff
 8011286:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011288:	697b      	ldr	r3, [r7, #20]
 801128a:	781b      	ldrb	r3, [r3, #0]
 801128c:	b2db      	uxtb	r3, r3
 801128e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011290:	78fb      	ldrb	r3, [r7, #3]
 8011292:	b2db      	uxtb	r3, r3
 8011294:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011298:	b2da      	uxtb	r2, r3
 801129a:	4b31      	ldr	r3, [pc, #196]	; (8011360 <xPortStartScheduler+0x130>)
 801129c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801129e:	4b31      	ldr	r3, [pc, #196]	; (8011364 <xPortStartScheduler+0x134>)
 80112a0:	2207      	movs	r2, #7
 80112a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80112a4:	e009      	b.n	80112ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80112a6:	4b2f      	ldr	r3, [pc, #188]	; (8011364 <xPortStartScheduler+0x134>)
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	3b01      	subs	r3, #1
 80112ac:	4a2d      	ldr	r2, [pc, #180]	; (8011364 <xPortStartScheduler+0x134>)
 80112ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80112b0:	78fb      	ldrb	r3, [r7, #3]
 80112b2:	b2db      	uxtb	r3, r3
 80112b4:	005b      	lsls	r3, r3, #1
 80112b6:	b2db      	uxtb	r3, r3
 80112b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80112ba:	78fb      	ldrb	r3, [r7, #3]
 80112bc:	b2db      	uxtb	r3, r3
 80112be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80112c2:	2b80      	cmp	r3, #128	; 0x80
 80112c4:	d0ef      	beq.n	80112a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80112c6:	4b27      	ldr	r3, [pc, #156]	; (8011364 <xPortStartScheduler+0x134>)
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	f1c3 0307 	rsb	r3, r3, #7
 80112ce:	2b04      	cmp	r3, #4
 80112d0:	d00a      	beq.n	80112e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80112d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112d6:	f383 8811 	msr	BASEPRI, r3
 80112da:	f3bf 8f6f 	isb	sy
 80112de:	f3bf 8f4f 	dsb	sy
 80112e2:	60bb      	str	r3, [r7, #8]
}
 80112e4:	bf00      	nop
 80112e6:	e7fe      	b.n	80112e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80112e8:	4b1e      	ldr	r3, [pc, #120]	; (8011364 <xPortStartScheduler+0x134>)
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	021b      	lsls	r3, r3, #8
 80112ee:	4a1d      	ldr	r2, [pc, #116]	; (8011364 <xPortStartScheduler+0x134>)
 80112f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80112f2:	4b1c      	ldr	r3, [pc, #112]	; (8011364 <xPortStartScheduler+0x134>)
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80112fa:	4a1a      	ldr	r2, [pc, #104]	; (8011364 <xPortStartScheduler+0x134>)
 80112fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	b2da      	uxtb	r2, r3
 8011302:	697b      	ldr	r3, [r7, #20]
 8011304:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011306:	4b18      	ldr	r3, [pc, #96]	; (8011368 <xPortStartScheduler+0x138>)
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	4a17      	ldr	r2, [pc, #92]	; (8011368 <xPortStartScheduler+0x138>)
 801130c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011310:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011312:	4b15      	ldr	r3, [pc, #84]	; (8011368 <xPortStartScheduler+0x138>)
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	4a14      	ldr	r2, [pc, #80]	; (8011368 <xPortStartScheduler+0x138>)
 8011318:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801131c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801131e:	f000 f8dd 	bl	80114dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011322:	4b12      	ldr	r3, [pc, #72]	; (801136c <xPortStartScheduler+0x13c>)
 8011324:	2200      	movs	r2, #0
 8011326:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011328:	f000 f8fc 	bl	8011524 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801132c:	4b10      	ldr	r3, [pc, #64]	; (8011370 <xPortStartScheduler+0x140>)
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	4a0f      	ldr	r2, [pc, #60]	; (8011370 <xPortStartScheduler+0x140>)
 8011332:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011336:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011338:	f7ff ff66 	bl	8011208 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801133c:	f7ff f83a 	bl	80103b4 <vTaskSwitchContext>
	prvTaskExitError();
 8011340:	f7ff ff20 	bl	8011184 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011344:	2300      	movs	r3, #0
}
 8011346:	4618      	mov	r0, r3
 8011348:	3718      	adds	r7, #24
 801134a:	46bd      	mov	sp, r7
 801134c:	bd80      	pop	{r7, pc}
 801134e:	bf00      	nop
 8011350:	e000ed00 	.word	0xe000ed00
 8011354:	410fc271 	.word	0x410fc271
 8011358:	410fc270 	.word	0x410fc270
 801135c:	e000e400 	.word	0xe000e400
 8011360:	20001370 	.word	0x20001370
 8011364:	20001374 	.word	0x20001374
 8011368:	e000ed20 	.word	0xe000ed20
 801136c:	20000080 	.word	0x20000080
 8011370:	e000ef34 	.word	0xe000ef34

08011374 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011374:	b480      	push	{r7}
 8011376:	b083      	sub	sp, #12
 8011378:	af00      	add	r7, sp, #0
	__asm volatile
 801137a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801137e:	f383 8811 	msr	BASEPRI, r3
 8011382:	f3bf 8f6f 	isb	sy
 8011386:	f3bf 8f4f 	dsb	sy
 801138a:	607b      	str	r3, [r7, #4]
}
 801138c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801138e:	4b0f      	ldr	r3, [pc, #60]	; (80113cc <vPortEnterCritical+0x58>)
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	3301      	adds	r3, #1
 8011394:	4a0d      	ldr	r2, [pc, #52]	; (80113cc <vPortEnterCritical+0x58>)
 8011396:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011398:	4b0c      	ldr	r3, [pc, #48]	; (80113cc <vPortEnterCritical+0x58>)
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	2b01      	cmp	r3, #1
 801139e:	d10f      	bne.n	80113c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80113a0:	4b0b      	ldr	r3, [pc, #44]	; (80113d0 <vPortEnterCritical+0x5c>)
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	b2db      	uxtb	r3, r3
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d00a      	beq.n	80113c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80113aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113ae:	f383 8811 	msr	BASEPRI, r3
 80113b2:	f3bf 8f6f 	isb	sy
 80113b6:	f3bf 8f4f 	dsb	sy
 80113ba:	603b      	str	r3, [r7, #0]
}
 80113bc:	bf00      	nop
 80113be:	e7fe      	b.n	80113be <vPortEnterCritical+0x4a>
	}
}
 80113c0:	bf00      	nop
 80113c2:	370c      	adds	r7, #12
 80113c4:	46bd      	mov	sp, r7
 80113c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ca:	4770      	bx	lr
 80113cc:	20000080 	.word	0x20000080
 80113d0:	e000ed04 	.word	0xe000ed04

080113d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80113d4:	b480      	push	{r7}
 80113d6:	b083      	sub	sp, #12
 80113d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80113da:	4b12      	ldr	r3, [pc, #72]	; (8011424 <vPortExitCritical+0x50>)
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d10a      	bne.n	80113f8 <vPortExitCritical+0x24>
	__asm volatile
 80113e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113e6:	f383 8811 	msr	BASEPRI, r3
 80113ea:	f3bf 8f6f 	isb	sy
 80113ee:	f3bf 8f4f 	dsb	sy
 80113f2:	607b      	str	r3, [r7, #4]
}
 80113f4:	bf00      	nop
 80113f6:	e7fe      	b.n	80113f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80113f8:	4b0a      	ldr	r3, [pc, #40]	; (8011424 <vPortExitCritical+0x50>)
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	3b01      	subs	r3, #1
 80113fe:	4a09      	ldr	r2, [pc, #36]	; (8011424 <vPortExitCritical+0x50>)
 8011400:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011402:	4b08      	ldr	r3, [pc, #32]	; (8011424 <vPortExitCritical+0x50>)
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d105      	bne.n	8011416 <vPortExitCritical+0x42>
 801140a:	2300      	movs	r3, #0
 801140c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801140e:	683b      	ldr	r3, [r7, #0]
 8011410:	f383 8811 	msr	BASEPRI, r3
}
 8011414:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011416:	bf00      	nop
 8011418:	370c      	adds	r7, #12
 801141a:	46bd      	mov	sp, r7
 801141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011420:	4770      	bx	lr
 8011422:	bf00      	nop
 8011424:	20000080 	.word	0x20000080
	...

08011430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011430:	f3ef 8009 	mrs	r0, PSP
 8011434:	f3bf 8f6f 	isb	sy
 8011438:	4b15      	ldr	r3, [pc, #84]	; (8011490 <pxCurrentTCBConst>)
 801143a:	681a      	ldr	r2, [r3, #0]
 801143c:	f01e 0f10 	tst.w	lr, #16
 8011440:	bf08      	it	eq
 8011442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801144a:	6010      	str	r0, [r2, #0]
 801144c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011450:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011454:	f380 8811 	msr	BASEPRI, r0
 8011458:	f3bf 8f4f 	dsb	sy
 801145c:	f3bf 8f6f 	isb	sy
 8011460:	f7fe ffa8 	bl	80103b4 <vTaskSwitchContext>
 8011464:	f04f 0000 	mov.w	r0, #0
 8011468:	f380 8811 	msr	BASEPRI, r0
 801146c:	bc09      	pop	{r0, r3}
 801146e:	6819      	ldr	r1, [r3, #0]
 8011470:	6808      	ldr	r0, [r1, #0]
 8011472:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011476:	f01e 0f10 	tst.w	lr, #16
 801147a:	bf08      	it	eq
 801147c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011480:	f380 8809 	msr	PSP, r0
 8011484:	f3bf 8f6f 	isb	sy
 8011488:	4770      	bx	lr
 801148a:	bf00      	nop
 801148c:	f3af 8000 	nop.w

08011490 <pxCurrentTCBConst>:
 8011490:	20000d44 	.word	0x20000d44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011494:	bf00      	nop
 8011496:	bf00      	nop

08011498 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b082      	sub	sp, #8
 801149c:	af00      	add	r7, sp, #0
	__asm volatile
 801149e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114a2:	f383 8811 	msr	BASEPRI, r3
 80114a6:	f3bf 8f6f 	isb	sy
 80114aa:	f3bf 8f4f 	dsb	sy
 80114ae:	607b      	str	r3, [r7, #4]
}
 80114b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80114b2:	f7fe fec5 	bl	8010240 <xTaskIncrementTick>
 80114b6:	4603      	mov	r3, r0
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d003      	beq.n	80114c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80114bc:	4b06      	ldr	r3, [pc, #24]	; (80114d8 <xPortSysTickHandler+0x40>)
 80114be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114c2:	601a      	str	r2, [r3, #0]
 80114c4:	2300      	movs	r3, #0
 80114c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80114c8:	683b      	ldr	r3, [r7, #0]
 80114ca:	f383 8811 	msr	BASEPRI, r3
}
 80114ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80114d0:	bf00      	nop
 80114d2:	3708      	adds	r7, #8
 80114d4:	46bd      	mov	sp, r7
 80114d6:	bd80      	pop	{r7, pc}
 80114d8:	e000ed04 	.word	0xe000ed04

080114dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80114dc:	b480      	push	{r7}
 80114de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80114e0:	4b0b      	ldr	r3, [pc, #44]	; (8011510 <vPortSetupTimerInterrupt+0x34>)
 80114e2:	2200      	movs	r2, #0
 80114e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80114e6:	4b0b      	ldr	r3, [pc, #44]	; (8011514 <vPortSetupTimerInterrupt+0x38>)
 80114e8:	2200      	movs	r2, #0
 80114ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80114ec:	4b0a      	ldr	r3, [pc, #40]	; (8011518 <vPortSetupTimerInterrupt+0x3c>)
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	4a0a      	ldr	r2, [pc, #40]	; (801151c <vPortSetupTimerInterrupt+0x40>)
 80114f2:	fba2 2303 	umull	r2, r3, r2, r3
 80114f6:	099b      	lsrs	r3, r3, #6
 80114f8:	4a09      	ldr	r2, [pc, #36]	; (8011520 <vPortSetupTimerInterrupt+0x44>)
 80114fa:	3b01      	subs	r3, #1
 80114fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80114fe:	4b04      	ldr	r3, [pc, #16]	; (8011510 <vPortSetupTimerInterrupt+0x34>)
 8011500:	2207      	movs	r2, #7
 8011502:	601a      	str	r2, [r3, #0]
}
 8011504:	bf00      	nop
 8011506:	46bd      	mov	sp, r7
 8011508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150c:	4770      	bx	lr
 801150e:	bf00      	nop
 8011510:	e000e010 	.word	0xe000e010
 8011514:	e000e018 	.word	0xe000e018
 8011518:	2000003c 	.word	0x2000003c
 801151c:	10624dd3 	.word	0x10624dd3
 8011520:	e000e014 	.word	0xe000e014

08011524 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011524:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011534 <vPortEnableVFP+0x10>
 8011528:	6801      	ldr	r1, [r0, #0]
 801152a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801152e:	6001      	str	r1, [r0, #0]
 8011530:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011532:	bf00      	nop
 8011534:	e000ed88 	.word	0xe000ed88

08011538 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011538:	b480      	push	{r7}
 801153a:	b085      	sub	sp, #20
 801153c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801153e:	f3ef 8305 	mrs	r3, IPSR
 8011542:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	2b0f      	cmp	r3, #15
 8011548:	d914      	bls.n	8011574 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801154a:	4a17      	ldr	r2, [pc, #92]	; (80115a8 <vPortValidateInterruptPriority+0x70>)
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	4413      	add	r3, r2
 8011550:	781b      	ldrb	r3, [r3, #0]
 8011552:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011554:	4b15      	ldr	r3, [pc, #84]	; (80115ac <vPortValidateInterruptPriority+0x74>)
 8011556:	781b      	ldrb	r3, [r3, #0]
 8011558:	7afa      	ldrb	r2, [r7, #11]
 801155a:	429a      	cmp	r2, r3
 801155c:	d20a      	bcs.n	8011574 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801155e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011562:	f383 8811 	msr	BASEPRI, r3
 8011566:	f3bf 8f6f 	isb	sy
 801156a:	f3bf 8f4f 	dsb	sy
 801156e:	607b      	str	r3, [r7, #4]
}
 8011570:	bf00      	nop
 8011572:	e7fe      	b.n	8011572 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011574:	4b0e      	ldr	r3, [pc, #56]	; (80115b0 <vPortValidateInterruptPriority+0x78>)
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801157c:	4b0d      	ldr	r3, [pc, #52]	; (80115b4 <vPortValidateInterruptPriority+0x7c>)
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	429a      	cmp	r2, r3
 8011582:	d90a      	bls.n	801159a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011588:	f383 8811 	msr	BASEPRI, r3
 801158c:	f3bf 8f6f 	isb	sy
 8011590:	f3bf 8f4f 	dsb	sy
 8011594:	603b      	str	r3, [r7, #0]
}
 8011596:	bf00      	nop
 8011598:	e7fe      	b.n	8011598 <vPortValidateInterruptPriority+0x60>
	}
 801159a:	bf00      	nop
 801159c:	3714      	adds	r7, #20
 801159e:	46bd      	mov	sp, r7
 80115a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a4:	4770      	bx	lr
 80115a6:	bf00      	nop
 80115a8:	e000e3f0 	.word	0xe000e3f0
 80115ac:	20001370 	.word	0x20001370
 80115b0:	e000ed0c 	.word	0xe000ed0c
 80115b4:	20001374 	.word	0x20001374

080115b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b08a      	sub	sp, #40	; 0x28
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80115c0:	2300      	movs	r3, #0
 80115c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80115c4:	f7fe fd80 	bl	80100c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80115c8:	4b5b      	ldr	r3, [pc, #364]	; (8011738 <pvPortMalloc+0x180>)
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d101      	bne.n	80115d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80115d0:	f000 f920 	bl	8011814 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80115d4:	4b59      	ldr	r3, [pc, #356]	; (801173c <pvPortMalloc+0x184>)
 80115d6:	681a      	ldr	r2, [r3, #0]
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	4013      	ands	r3, r2
 80115dc:	2b00      	cmp	r3, #0
 80115de:	f040 8093 	bne.w	8011708 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d01d      	beq.n	8011624 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80115e8:	2208      	movs	r2, #8
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	4413      	add	r3, r2
 80115ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	f003 0307 	and.w	r3, r3, #7
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d014      	beq.n	8011624 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	f023 0307 	bic.w	r3, r3, #7
 8011600:	3308      	adds	r3, #8
 8011602:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f003 0307 	and.w	r3, r3, #7
 801160a:	2b00      	cmp	r3, #0
 801160c:	d00a      	beq.n	8011624 <pvPortMalloc+0x6c>
	__asm volatile
 801160e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011612:	f383 8811 	msr	BASEPRI, r3
 8011616:	f3bf 8f6f 	isb	sy
 801161a:	f3bf 8f4f 	dsb	sy
 801161e:	617b      	str	r3, [r7, #20]
}
 8011620:	bf00      	nop
 8011622:	e7fe      	b.n	8011622 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d06e      	beq.n	8011708 <pvPortMalloc+0x150>
 801162a:	4b45      	ldr	r3, [pc, #276]	; (8011740 <pvPortMalloc+0x188>)
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	687a      	ldr	r2, [r7, #4]
 8011630:	429a      	cmp	r2, r3
 8011632:	d869      	bhi.n	8011708 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011634:	4b43      	ldr	r3, [pc, #268]	; (8011744 <pvPortMalloc+0x18c>)
 8011636:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011638:	4b42      	ldr	r3, [pc, #264]	; (8011744 <pvPortMalloc+0x18c>)
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801163e:	e004      	b.n	801164a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011642:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801164c:	685b      	ldr	r3, [r3, #4]
 801164e:	687a      	ldr	r2, [r7, #4]
 8011650:	429a      	cmp	r2, r3
 8011652:	d903      	bls.n	801165c <pvPortMalloc+0xa4>
 8011654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d1f1      	bne.n	8011640 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801165c:	4b36      	ldr	r3, [pc, #216]	; (8011738 <pvPortMalloc+0x180>)
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011662:	429a      	cmp	r2, r3
 8011664:	d050      	beq.n	8011708 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011666:	6a3b      	ldr	r3, [r7, #32]
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	2208      	movs	r2, #8
 801166c:	4413      	add	r3, r2
 801166e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011672:	681a      	ldr	r2, [r3, #0]
 8011674:	6a3b      	ldr	r3, [r7, #32]
 8011676:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801167a:	685a      	ldr	r2, [r3, #4]
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	1ad2      	subs	r2, r2, r3
 8011680:	2308      	movs	r3, #8
 8011682:	005b      	lsls	r3, r3, #1
 8011684:	429a      	cmp	r2, r3
 8011686:	d91f      	bls.n	80116c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	4413      	add	r3, r2
 801168e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011690:	69bb      	ldr	r3, [r7, #24]
 8011692:	f003 0307 	and.w	r3, r3, #7
 8011696:	2b00      	cmp	r3, #0
 8011698:	d00a      	beq.n	80116b0 <pvPortMalloc+0xf8>
	__asm volatile
 801169a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801169e:	f383 8811 	msr	BASEPRI, r3
 80116a2:	f3bf 8f6f 	isb	sy
 80116a6:	f3bf 8f4f 	dsb	sy
 80116aa:	613b      	str	r3, [r7, #16]
}
 80116ac:	bf00      	nop
 80116ae:	e7fe      	b.n	80116ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80116b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116b2:	685a      	ldr	r2, [r3, #4]
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	1ad2      	subs	r2, r2, r3
 80116b8:	69bb      	ldr	r3, [r7, #24]
 80116ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80116bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116be:	687a      	ldr	r2, [r7, #4]
 80116c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80116c2:	69b8      	ldr	r0, [r7, #24]
 80116c4:	f000 f908 	bl	80118d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80116c8:	4b1d      	ldr	r3, [pc, #116]	; (8011740 <pvPortMalloc+0x188>)
 80116ca:	681a      	ldr	r2, [r3, #0]
 80116cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ce:	685b      	ldr	r3, [r3, #4]
 80116d0:	1ad3      	subs	r3, r2, r3
 80116d2:	4a1b      	ldr	r2, [pc, #108]	; (8011740 <pvPortMalloc+0x188>)
 80116d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80116d6:	4b1a      	ldr	r3, [pc, #104]	; (8011740 <pvPortMalloc+0x188>)
 80116d8:	681a      	ldr	r2, [r3, #0]
 80116da:	4b1b      	ldr	r3, [pc, #108]	; (8011748 <pvPortMalloc+0x190>)
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	429a      	cmp	r2, r3
 80116e0:	d203      	bcs.n	80116ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80116e2:	4b17      	ldr	r3, [pc, #92]	; (8011740 <pvPortMalloc+0x188>)
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	4a18      	ldr	r2, [pc, #96]	; (8011748 <pvPortMalloc+0x190>)
 80116e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80116ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ec:	685a      	ldr	r2, [r3, #4]
 80116ee:	4b13      	ldr	r3, [pc, #76]	; (801173c <pvPortMalloc+0x184>)
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	431a      	orrs	r2, r3
 80116f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80116f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116fa:	2200      	movs	r2, #0
 80116fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80116fe:	4b13      	ldr	r3, [pc, #76]	; (801174c <pvPortMalloc+0x194>)
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	3301      	adds	r3, #1
 8011704:	4a11      	ldr	r2, [pc, #68]	; (801174c <pvPortMalloc+0x194>)
 8011706:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011708:	f7fe fcec 	bl	80100e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801170c:	69fb      	ldr	r3, [r7, #28]
 801170e:	f003 0307 	and.w	r3, r3, #7
 8011712:	2b00      	cmp	r3, #0
 8011714:	d00a      	beq.n	801172c <pvPortMalloc+0x174>
	__asm volatile
 8011716:	f04f 0350 	mov.w	r3, #80	; 0x50
 801171a:	f383 8811 	msr	BASEPRI, r3
 801171e:	f3bf 8f6f 	isb	sy
 8011722:	f3bf 8f4f 	dsb	sy
 8011726:	60fb      	str	r3, [r7, #12]
}
 8011728:	bf00      	nop
 801172a:	e7fe      	b.n	801172a <pvPortMalloc+0x172>
	return pvReturn;
 801172c:	69fb      	ldr	r3, [r7, #28]
}
 801172e:	4618      	mov	r0, r3
 8011730:	3728      	adds	r7, #40	; 0x28
 8011732:	46bd      	mov	sp, r7
 8011734:	bd80      	pop	{r7, pc}
 8011736:	bf00      	nop
 8011738:	200059d0 	.word	0x200059d0
 801173c:	200059e4 	.word	0x200059e4
 8011740:	200059d4 	.word	0x200059d4
 8011744:	200059c8 	.word	0x200059c8
 8011748:	200059d8 	.word	0x200059d8
 801174c:	200059dc 	.word	0x200059dc

08011750 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011750:	b580      	push	{r7, lr}
 8011752:	b086      	sub	sp, #24
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d04d      	beq.n	80117fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011762:	2308      	movs	r3, #8
 8011764:	425b      	negs	r3, r3
 8011766:	697a      	ldr	r2, [r7, #20]
 8011768:	4413      	add	r3, r2
 801176a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801176c:	697b      	ldr	r3, [r7, #20]
 801176e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011770:	693b      	ldr	r3, [r7, #16]
 8011772:	685a      	ldr	r2, [r3, #4]
 8011774:	4b24      	ldr	r3, [pc, #144]	; (8011808 <vPortFree+0xb8>)
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	4013      	ands	r3, r2
 801177a:	2b00      	cmp	r3, #0
 801177c:	d10a      	bne.n	8011794 <vPortFree+0x44>
	__asm volatile
 801177e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011782:	f383 8811 	msr	BASEPRI, r3
 8011786:	f3bf 8f6f 	isb	sy
 801178a:	f3bf 8f4f 	dsb	sy
 801178e:	60fb      	str	r3, [r7, #12]
}
 8011790:	bf00      	nop
 8011792:	e7fe      	b.n	8011792 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011794:	693b      	ldr	r3, [r7, #16]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d00a      	beq.n	80117b2 <vPortFree+0x62>
	__asm volatile
 801179c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117a0:	f383 8811 	msr	BASEPRI, r3
 80117a4:	f3bf 8f6f 	isb	sy
 80117a8:	f3bf 8f4f 	dsb	sy
 80117ac:	60bb      	str	r3, [r7, #8]
}
 80117ae:	bf00      	nop
 80117b0:	e7fe      	b.n	80117b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80117b2:	693b      	ldr	r3, [r7, #16]
 80117b4:	685a      	ldr	r2, [r3, #4]
 80117b6:	4b14      	ldr	r3, [pc, #80]	; (8011808 <vPortFree+0xb8>)
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	4013      	ands	r3, r2
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d01e      	beq.n	80117fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80117c0:	693b      	ldr	r3, [r7, #16]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d11a      	bne.n	80117fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80117c8:	693b      	ldr	r3, [r7, #16]
 80117ca:	685a      	ldr	r2, [r3, #4]
 80117cc:	4b0e      	ldr	r3, [pc, #56]	; (8011808 <vPortFree+0xb8>)
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	43db      	mvns	r3, r3
 80117d2:	401a      	ands	r2, r3
 80117d4:	693b      	ldr	r3, [r7, #16]
 80117d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80117d8:	f7fe fc76 	bl	80100c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80117dc:	693b      	ldr	r3, [r7, #16]
 80117de:	685a      	ldr	r2, [r3, #4]
 80117e0:	4b0a      	ldr	r3, [pc, #40]	; (801180c <vPortFree+0xbc>)
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	4413      	add	r3, r2
 80117e6:	4a09      	ldr	r2, [pc, #36]	; (801180c <vPortFree+0xbc>)
 80117e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80117ea:	6938      	ldr	r0, [r7, #16]
 80117ec:	f000 f874 	bl	80118d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80117f0:	4b07      	ldr	r3, [pc, #28]	; (8011810 <vPortFree+0xc0>)
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	3301      	adds	r3, #1
 80117f6:	4a06      	ldr	r2, [pc, #24]	; (8011810 <vPortFree+0xc0>)
 80117f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80117fa:	f7fe fc73 	bl	80100e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80117fe:	bf00      	nop
 8011800:	3718      	adds	r7, #24
 8011802:	46bd      	mov	sp, r7
 8011804:	bd80      	pop	{r7, pc}
 8011806:	bf00      	nop
 8011808:	200059e4 	.word	0x200059e4
 801180c:	200059d4 	.word	0x200059d4
 8011810:	200059e0 	.word	0x200059e0

08011814 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011814:	b480      	push	{r7}
 8011816:	b085      	sub	sp, #20
 8011818:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801181a:	f244 6350 	movw	r3, #18000	; 0x4650
 801181e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011820:	4b27      	ldr	r3, [pc, #156]	; (80118c0 <prvHeapInit+0xac>)
 8011822:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	f003 0307 	and.w	r3, r3, #7
 801182a:	2b00      	cmp	r3, #0
 801182c:	d00c      	beq.n	8011848 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	3307      	adds	r3, #7
 8011832:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	f023 0307 	bic.w	r3, r3, #7
 801183a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801183c:	68ba      	ldr	r2, [r7, #8]
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	1ad3      	subs	r3, r2, r3
 8011842:	4a1f      	ldr	r2, [pc, #124]	; (80118c0 <prvHeapInit+0xac>)
 8011844:	4413      	add	r3, r2
 8011846:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801184c:	4a1d      	ldr	r2, [pc, #116]	; (80118c4 <prvHeapInit+0xb0>)
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011852:	4b1c      	ldr	r3, [pc, #112]	; (80118c4 <prvHeapInit+0xb0>)
 8011854:	2200      	movs	r2, #0
 8011856:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	68ba      	ldr	r2, [r7, #8]
 801185c:	4413      	add	r3, r2
 801185e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011860:	2208      	movs	r2, #8
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	1a9b      	subs	r3, r3, r2
 8011866:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	f023 0307 	bic.w	r3, r3, #7
 801186e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	4a15      	ldr	r2, [pc, #84]	; (80118c8 <prvHeapInit+0xb4>)
 8011874:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011876:	4b14      	ldr	r3, [pc, #80]	; (80118c8 <prvHeapInit+0xb4>)
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	2200      	movs	r2, #0
 801187c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801187e:	4b12      	ldr	r3, [pc, #72]	; (80118c8 <prvHeapInit+0xb4>)
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	2200      	movs	r2, #0
 8011884:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801188a:	683b      	ldr	r3, [r7, #0]
 801188c:	68fa      	ldr	r2, [r7, #12]
 801188e:	1ad2      	subs	r2, r2, r3
 8011890:	683b      	ldr	r3, [r7, #0]
 8011892:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011894:	4b0c      	ldr	r3, [pc, #48]	; (80118c8 <prvHeapInit+0xb4>)
 8011896:	681a      	ldr	r2, [r3, #0]
 8011898:	683b      	ldr	r3, [r7, #0]
 801189a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801189c:	683b      	ldr	r3, [r7, #0]
 801189e:	685b      	ldr	r3, [r3, #4]
 80118a0:	4a0a      	ldr	r2, [pc, #40]	; (80118cc <prvHeapInit+0xb8>)
 80118a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80118a4:	683b      	ldr	r3, [r7, #0]
 80118a6:	685b      	ldr	r3, [r3, #4]
 80118a8:	4a09      	ldr	r2, [pc, #36]	; (80118d0 <prvHeapInit+0xbc>)
 80118aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80118ac:	4b09      	ldr	r3, [pc, #36]	; (80118d4 <prvHeapInit+0xc0>)
 80118ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80118b2:	601a      	str	r2, [r3, #0]
}
 80118b4:	bf00      	nop
 80118b6:	3714      	adds	r7, #20
 80118b8:	46bd      	mov	sp, r7
 80118ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118be:	4770      	bx	lr
 80118c0:	20001378 	.word	0x20001378
 80118c4:	200059c8 	.word	0x200059c8
 80118c8:	200059d0 	.word	0x200059d0
 80118cc:	200059d8 	.word	0x200059d8
 80118d0:	200059d4 	.word	0x200059d4
 80118d4:	200059e4 	.word	0x200059e4

080118d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80118d8:	b480      	push	{r7}
 80118da:	b085      	sub	sp, #20
 80118dc:	af00      	add	r7, sp, #0
 80118de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80118e0:	4b28      	ldr	r3, [pc, #160]	; (8011984 <prvInsertBlockIntoFreeList+0xac>)
 80118e2:	60fb      	str	r3, [r7, #12]
 80118e4:	e002      	b.n	80118ec <prvInsertBlockIntoFreeList+0x14>
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	60fb      	str	r3, [r7, #12]
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	687a      	ldr	r2, [r7, #4]
 80118f2:	429a      	cmp	r2, r3
 80118f4:	d8f7      	bhi.n	80118e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	685b      	ldr	r3, [r3, #4]
 80118fe:	68ba      	ldr	r2, [r7, #8]
 8011900:	4413      	add	r3, r2
 8011902:	687a      	ldr	r2, [r7, #4]
 8011904:	429a      	cmp	r2, r3
 8011906:	d108      	bne.n	801191a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	685a      	ldr	r2, [r3, #4]
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	685b      	ldr	r3, [r3, #4]
 8011910:	441a      	add	r2, r3
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	685b      	ldr	r3, [r3, #4]
 8011922:	68ba      	ldr	r2, [r7, #8]
 8011924:	441a      	add	r2, r3
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	429a      	cmp	r2, r3
 801192c:	d118      	bne.n	8011960 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	681a      	ldr	r2, [r3, #0]
 8011932:	4b15      	ldr	r3, [pc, #84]	; (8011988 <prvInsertBlockIntoFreeList+0xb0>)
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	429a      	cmp	r2, r3
 8011938:	d00d      	beq.n	8011956 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	685a      	ldr	r2, [r3, #4]
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	685b      	ldr	r3, [r3, #4]
 8011944:	441a      	add	r2, r3
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	681a      	ldr	r2, [r3, #0]
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	601a      	str	r2, [r3, #0]
 8011954:	e008      	b.n	8011968 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011956:	4b0c      	ldr	r3, [pc, #48]	; (8011988 <prvInsertBlockIntoFreeList+0xb0>)
 8011958:	681a      	ldr	r2, [r3, #0]
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	601a      	str	r2, [r3, #0]
 801195e:	e003      	b.n	8011968 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	681a      	ldr	r2, [r3, #0]
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011968:	68fa      	ldr	r2, [r7, #12]
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	429a      	cmp	r2, r3
 801196e:	d002      	beq.n	8011976 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	687a      	ldr	r2, [r7, #4]
 8011974:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011976:	bf00      	nop
 8011978:	3714      	adds	r7, #20
 801197a:	46bd      	mov	sp, r7
 801197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011980:	4770      	bx	lr
 8011982:	bf00      	nop
 8011984:	200059c8 	.word	0x200059c8
 8011988:	200059d0 	.word	0x200059d0

0801198c <_Znwj>:
 801198c:	2801      	cmp	r0, #1
 801198e:	bf38      	it	cc
 8011990:	2001      	movcc	r0, #1
 8011992:	b510      	push	{r4, lr}
 8011994:	4604      	mov	r4, r0
 8011996:	4620      	mov	r0, r4
 8011998:	f000 fa84 	bl	8011ea4 <malloc>
 801199c:	b930      	cbnz	r0, 80119ac <_Znwj+0x20>
 801199e:	f000 f81d 	bl	80119dc <_ZSt15get_new_handlerv>
 80119a2:	b908      	cbnz	r0, 80119a8 <_Znwj+0x1c>
 80119a4:	f000 f82c 	bl	8011a00 <abort>
 80119a8:	4780      	blx	r0
 80119aa:	e7f4      	b.n	8011996 <_Znwj+0xa>
 80119ac:	bd10      	pop	{r4, pc}

080119ae <_Znaj>:
 80119ae:	f7ff bfed 	b.w	801198c <_Znwj>

080119b2 <__cxa_pure_virtual>:
 80119b2:	b508      	push	{r3, lr}
 80119b4:	f000 f80c 	bl	80119d0 <_ZSt9terminatev>

080119b8 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80119b8:	b508      	push	{r3, lr}
 80119ba:	4780      	blx	r0
 80119bc:	f000 f820 	bl	8011a00 <abort>

080119c0 <_ZSt13get_terminatev>:
 80119c0:	4b02      	ldr	r3, [pc, #8]	; (80119cc <_ZSt13get_terminatev+0xc>)
 80119c2:	6818      	ldr	r0, [r3, #0]
 80119c4:	f3bf 8f5b 	dmb	ish
 80119c8:	4770      	bx	lr
 80119ca:	bf00      	nop
 80119cc:	20000084 	.word	0x20000084

080119d0 <_ZSt9terminatev>:
 80119d0:	b508      	push	{r3, lr}
 80119d2:	f7ff fff5 	bl	80119c0 <_ZSt13get_terminatev>
 80119d6:	f7ff ffef 	bl	80119b8 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080119dc <_ZSt15get_new_handlerv>:
 80119dc:	4b02      	ldr	r3, [pc, #8]	; (80119e8 <_ZSt15get_new_handlerv+0xc>)
 80119de:	6818      	ldr	r0, [r3, #0]
 80119e0:	f3bf 8f5b 	dmb	ish
 80119e4:	4770      	bx	lr
 80119e6:	bf00      	nop
 80119e8:	200059e8 	.word	0x200059e8
 80119ec:	00000000 	.word	0x00000000

080119f0 <nan>:
 80119f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80119f8 <nan+0x8>
 80119f4:	4770      	bx	lr
 80119f6:	bf00      	nop
 80119f8:	00000000 	.word	0x00000000
 80119fc:	7ff80000 	.word	0x7ff80000

08011a00 <abort>:
 8011a00:	b508      	push	{r3, lr}
 8011a02:	2006      	movs	r0, #6
 8011a04:	f001 fd66 	bl	80134d4 <raise>
 8011a08:	2001      	movs	r0, #1
 8011a0a:	f006 f94b 	bl	8017ca4 <_exit>

08011a0e <atoi>:
 8011a0e:	220a      	movs	r2, #10
 8011a10:	2100      	movs	r1, #0
 8011a12:	f002 bd43 	b.w	801449c <strtol>

08011a16 <atol>:
 8011a16:	220a      	movs	r2, #10
 8011a18:	2100      	movs	r1, #0
 8011a1a:	f002 bd3f 	b.w	801449c <strtol>
	...

08011a20 <__errno>:
 8011a20:	4b01      	ldr	r3, [pc, #4]	; (8011a28 <__errno+0x8>)
 8011a22:	6818      	ldr	r0, [r3, #0]
 8011a24:	4770      	bx	lr
 8011a26:	bf00      	nop
 8011a28:	20000088 	.word	0x20000088

08011a2c <std>:
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	b510      	push	{r4, lr}
 8011a30:	4604      	mov	r4, r0
 8011a32:	e9c0 3300 	strd	r3, r3, [r0]
 8011a36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011a3a:	6083      	str	r3, [r0, #8]
 8011a3c:	8181      	strh	r1, [r0, #12]
 8011a3e:	6643      	str	r3, [r0, #100]	; 0x64
 8011a40:	81c2      	strh	r2, [r0, #14]
 8011a42:	6183      	str	r3, [r0, #24]
 8011a44:	4619      	mov	r1, r3
 8011a46:	2208      	movs	r2, #8
 8011a48:	305c      	adds	r0, #92	; 0x5c
 8011a4a:	f000 fa63 	bl	8011f14 <memset>
 8011a4e:	4b05      	ldr	r3, [pc, #20]	; (8011a64 <std+0x38>)
 8011a50:	6263      	str	r3, [r4, #36]	; 0x24
 8011a52:	4b05      	ldr	r3, [pc, #20]	; (8011a68 <std+0x3c>)
 8011a54:	62a3      	str	r3, [r4, #40]	; 0x28
 8011a56:	4b05      	ldr	r3, [pc, #20]	; (8011a6c <std+0x40>)
 8011a58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011a5a:	4b05      	ldr	r3, [pc, #20]	; (8011a70 <std+0x44>)
 8011a5c:	6224      	str	r4, [r4, #32]
 8011a5e:	6323      	str	r3, [r4, #48]	; 0x30
 8011a60:	bd10      	pop	{r4, pc}
 8011a62:	bf00      	nop
 8011a64:	080135a5 	.word	0x080135a5
 8011a68:	080135cb 	.word	0x080135cb
 8011a6c:	08013603 	.word	0x08013603
 8011a70:	08013627 	.word	0x08013627

08011a74 <_cleanup_r>:
 8011a74:	4901      	ldr	r1, [pc, #4]	; (8011a7c <_cleanup_r+0x8>)
 8011a76:	f000 b8af 	b.w	8011bd8 <_fwalk_reent>
 8011a7a:	bf00      	nop
 8011a7c:	08015a55 	.word	0x08015a55

08011a80 <__sfmoreglue>:
 8011a80:	b570      	push	{r4, r5, r6, lr}
 8011a82:	1e4a      	subs	r2, r1, #1
 8011a84:	2568      	movs	r5, #104	; 0x68
 8011a86:	4355      	muls	r5, r2
 8011a88:	460e      	mov	r6, r1
 8011a8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011a8e:	f000 fd17 	bl	80124c0 <_malloc_r>
 8011a92:	4604      	mov	r4, r0
 8011a94:	b140      	cbz	r0, 8011aa8 <__sfmoreglue+0x28>
 8011a96:	2100      	movs	r1, #0
 8011a98:	e9c0 1600 	strd	r1, r6, [r0]
 8011a9c:	300c      	adds	r0, #12
 8011a9e:	60a0      	str	r0, [r4, #8]
 8011aa0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011aa4:	f000 fa36 	bl	8011f14 <memset>
 8011aa8:	4620      	mov	r0, r4
 8011aaa:	bd70      	pop	{r4, r5, r6, pc}

08011aac <__sfp_lock_acquire>:
 8011aac:	4801      	ldr	r0, [pc, #4]	; (8011ab4 <__sfp_lock_acquire+0x8>)
 8011aae:	f000 b9f5 	b.w	8011e9c <__retarget_lock_acquire_recursive>
 8011ab2:	bf00      	nop
 8011ab4:	20006480 	.word	0x20006480

08011ab8 <__sfp_lock_release>:
 8011ab8:	4801      	ldr	r0, [pc, #4]	; (8011ac0 <__sfp_lock_release+0x8>)
 8011aba:	f000 b9f1 	b.w	8011ea0 <__retarget_lock_release_recursive>
 8011abe:	bf00      	nop
 8011ac0:	20006480 	.word	0x20006480

08011ac4 <__sinit_lock_acquire>:
 8011ac4:	4801      	ldr	r0, [pc, #4]	; (8011acc <__sinit_lock_acquire+0x8>)
 8011ac6:	f000 b9e9 	b.w	8011e9c <__retarget_lock_acquire_recursive>
 8011aca:	bf00      	nop
 8011acc:	2000647b 	.word	0x2000647b

08011ad0 <__sinit_lock_release>:
 8011ad0:	4801      	ldr	r0, [pc, #4]	; (8011ad8 <__sinit_lock_release+0x8>)
 8011ad2:	f000 b9e5 	b.w	8011ea0 <__retarget_lock_release_recursive>
 8011ad6:	bf00      	nop
 8011ad8:	2000647b 	.word	0x2000647b

08011adc <__sinit>:
 8011adc:	b510      	push	{r4, lr}
 8011ade:	4604      	mov	r4, r0
 8011ae0:	f7ff fff0 	bl	8011ac4 <__sinit_lock_acquire>
 8011ae4:	69a3      	ldr	r3, [r4, #24]
 8011ae6:	b11b      	cbz	r3, 8011af0 <__sinit+0x14>
 8011ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011aec:	f7ff bff0 	b.w	8011ad0 <__sinit_lock_release>
 8011af0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011af4:	6523      	str	r3, [r4, #80]	; 0x50
 8011af6:	4b13      	ldr	r3, [pc, #76]	; (8011b44 <__sinit+0x68>)
 8011af8:	4a13      	ldr	r2, [pc, #76]	; (8011b48 <__sinit+0x6c>)
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	62a2      	str	r2, [r4, #40]	; 0x28
 8011afe:	42a3      	cmp	r3, r4
 8011b00:	bf04      	itt	eq
 8011b02:	2301      	moveq	r3, #1
 8011b04:	61a3      	streq	r3, [r4, #24]
 8011b06:	4620      	mov	r0, r4
 8011b08:	f000 f820 	bl	8011b4c <__sfp>
 8011b0c:	6060      	str	r0, [r4, #4]
 8011b0e:	4620      	mov	r0, r4
 8011b10:	f000 f81c 	bl	8011b4c <__sfp>
 8011b14:	60a0      	str	r0, [r4, #8]
 8011b16:	4620      	mov	r0, r4
 8011b18:	f000 f818 	bl	8011b4c <__sfp>
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	60e0      	str	r0, [r4, #12]
 8011b20:	2104      	movs	r1, #4
 8011b22:	6860      	ldr	r0, [r4, #4]
 8011b24:	f7ff ff82 	bl	8011a2c <std>
 8011b28:	68a0      	ldr	r0, [r4, #8]
 8011b2a:	2201      	movs	r2, #1
 8011b2c:	2109      	movs	r1, #9
 8011b2e:	f7ff ff7d 	bl	8011a2c <std>
 8011b32:	68e0      	ldr	r0, [r4, #12]
 8011b34:	2202      	movs	r2, #2
 8011b36:	2112      	movs	r1, #18
 8011b38:	f7ff ff78 	bl	8011a2c <std>
 8011b3c:	2301      	movs	r3, #1
 8011b3e:	61a3      	str	r3, [r4, #24]
 8011b40:	e7d2      	b.n	8011ae8 <__sinit+0xc>
 8011b42:	bf00      	nop
 8011b44:	08019c78 	.word	0x08019c78
 8011b48:	08011a75 	.word	0x08011a75

08011b4c <__sfp>:
 8011b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b4e:	4607      	mov	r7, r0
 8011b50:	f7ff ffac 	bl	8011aac <__sfp_lock_acquire>
 8011b54:	4b1e      	ldr	r3, [pc, #120]	; (8011bd0 <__sfp+0x84>)
 8011b56:	681e      	ldr	r6, [r3, #0]
 8011b58:	69b3      	ldr	r3, [r6, #24]
 8011b5a:	b913      	cbnz	r3, 8011b62 <__sfp+0x16>
 8011b5c:	4630      	mov	r0, r6
 8011b5e:	f7ff ffbd 	bl	8011adc <__sinit>
 8011b62:	3648      	adds	r6, #72	; 0x48
 8011b64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011b68:	3b01      	subs	r3, #1
 8011b6a:	d503      	bpl.n	8011b74 <__sfp+0x28>
 8011b6c:	6833      	ldr	r3, [r6, #0]
 8011b6e:	b30b      	cbz	r3, 8011bb4 <__sfp+0x68>
 8011b70:	6836      	ldr	r6, [r6, #0]
 8011b72:	e7f7      	b.n	8011b64 <__sfp+0x18>
 8011b74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011b78:	b9d5      	cbnz	r5, 8011bb0 <__sfp+0x64>
 8011b7a:	4b16      	ldr	r3, [pc, #88]	; (8011bd4 <__sfp+0x88>)
 8011b7c:	60e3      	str	r3, [r4, #12]
 8011b7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011b82:	6665      	str	r5, [r4, #100]	; 0x64
 8011b84:	f000 f988 	bl	8011e98 <__retarget_lock_init_recursive>
 8011b88:	f7ff ff96 	bl	8011ab8 <__sfp_lock_release>
 8011b8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011b90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011b94:	6025      	str	r5, [r4, #0]
 8011b96:	61a5      	str	r5, [r4, #24]
 8011b98:	2208      	movs	r2, #8
 8011b9a:	4629      	mov	r1, r5
 8011b9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011ba0:	f000 f9b8 	bl	8011f14 <memset>
 8011ba4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011ba8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011bac:	4620      	mov	r0, r4
 8011bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011bb0:	3468      	adds	r4, #104	; 0x68
 8011bb2:	e7d9      	b.n	8011b68 <__sfp+0x1c>
 8011bb4:	2104      	movs	r1, #4
 8011bb6:	4638      	mov	r0, r7
 8011bb8:	f7ff ff62 	bl	8011a80 <__sfmoreglue>
 8011bbc:	4604      	mov	r4, r0
 8011bbe:	6030      	str	r0, [r6, #0]
 8011bc0:	2800      	cmp	r0, #0
 8011bc2:	d1d5      	bne.n	8011b70 <__sfp+0x24>
 8011bc4:	f7ff ff78 	bl	8011ab8 <__sfp_lock_release>
 8011bc8:	230c      	movs	r3, #12
 8011bca:	603b      	str	r3, [r7, #0]
 8011bcc:	e7ee      	b.n	8011bac <__sfp+0x60>
 8011bce:	bf00      	nop
 8011bd0:	08019c78 	.word	0x08019c78
 8011bd4:	ffff0001 	.word	0xffff0001

08011bd8 <_fwalk_reent>:
 8011bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011bdc:	4606      	mov	r6, r0
 8011bde:	4688      	mov	r8, r1
 8011be0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011be4:	2700      	movs	r7, #0
 8011be6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011bea:	f1b9 0901 	subs.w	r9, r9, #1
 8011bee:	d505      	bpl.n	8011bfc <_fwalk_reent+0x24>
 8011bf0:	6824      	ldr	r4, [r4, #0]
 8011bf2:	2c00      	cmp	r4, #0
 8011bf4:	d1f7      	bne.n	8011be6 <_fwalk_reent+0xe>
 8011bf6:	4638      	mov	r0, r7
 8011bf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bfc:	89ab      	ldrh	r3, [r5, #12]
 8011bfe:	2b01      	cmp	r3, #1
 8011c00:	d907      	bls.n	8011c12 <_fwalk_reent+0x3a>
 8011c02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011c06:	3301      	adds	r3, #1
 8011c08:	d003      	beq.n	8011c12 <_fwalk_reent+0x3a>
 8011c0a:	4629      	mov	r1, r5
 8011c0c:	4630      	mov	r0, r6
 8011c0e:	47c0      	blx	r8
 8011c10:	4307      	orrs	r7, r0
 8011c12:	3568      	adds	r5, #104	; 0x68
 8011c14:	e7e9      	b.n	8011bea <_fwalk_reent+0x12>
	...

08011c18 <__libc_init_array>:
 8011c18:	b570      	push	{r4, r5, r6, lr}
 8011c1a:	4d0d      	ldr	r5, [pc, #52]	; (8011c50 <__libc_init_array+0x38>)
 8011c1c:	4c0d      	ldr	r4, [pc, #52]	; (8011c54 <__libc_init_array+0x3c>)
 8011c1e:	1b64      	subs	r4, r4, r5
 8011c20:	10a4      	asrs	r4, r4, #2
 8011c22:	2600      	movs	r6, #0
 8011c24:	42a6      	cmp	r6, r4
 8011c26:	d109      	bne.n	8011c3c <__libc_init_array+0x24>
 8011c28:	4d0b      	ldr	r5, [pc, #44]	; (8011c58 <__libc_init_array+0x40>)
 8011c2a:	4c0c      	ldr	r4, [pc, #48]	; (8011c5c <__libc_init_array+0x44>)
 8011c2c:	f006 f83c 	bl	8017ca8 <_init>
 8011c30:	1b64      	subs	r4, r4, r5
 8011c32:	10a4      	asrs	r4, r4, #2
 8011c34:	2600      	movs	r6, #0
 8011c36:	42a6      	cmp	r6, r4
 8011c38:	d105      	bne.n	8011c46 <__libc_init_array+0x2e>
 8011c3a:	bd70      	pop	{r4, r5, r6, pc}
 8011c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011c40:	4798      	blx	r3
 8011c42:	3601      	adds	r6, #1
 8011c44:	e7ee      	b.n	8011c24 <__libc_init_array+0xc>
 8011c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8011c4a:	4798      	blx	r3
 8011c4c:	3601      	adds	r6, #1
 8011c4e:	e7f2      	b.n	8011c36 <__libc_init_array+0x1e>
 8011c50:	0801a1a8 	.word	0x0801a1a8
 8011c54:	0801a1a8 	.word	0x0801a1a8
 8011c58:	0801a1a8 	.word	0x0801a1a8
 8011c5c:	0801a1b0 	.word	0x0801a1b0

08011c60 <isxdigit>:
 8011c60:	4b02      	ldr	r3, [pc, #8]	; (8011c6c <isxdigit+0xc>)
 8011c62:	4418      	add	r0, r3
 8011c64:	7840      	ldrb	r0, [r0, #1]
 8011c66:	f000 0044 	and.w	r0, r0, #68	; 0x44
 8011c6a:	4770      	bx	lr
 8011c6c:	08019b14 	.word	0x08019b14

08011c70 <localtime>:
 8011c70:	b538      	push	{r3, r4, r5, lr}
 8011c72:	4b0b      	ldr	r3, [pc, #44]	; (8011ca0 <localtime+0x30>)
 8011c74:	681d      	ldr	r5, [r3, #0]
 8011c76:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8011c78:	4604      	mov	r4, r0
 8011c7a:	b953      	cbnz	r3, 8011c92 <localtime+0x22>
 8011c7c:	2024      	movs	r0, #36	; 0x24
 8011c7e:	f000 f911 	bl	8011ea4 <malloc>
 8011c82:	4602      	mov	r2, r0
 8011c84:	63e8      	str	r0, [r5, #60]	; 0x3c
 8011c86:	b920      	cbnz	r0, 8011c92 <localtime+0x22>
 8011c88:	4b06      	ldr	r3, [pc, #24]	; (8011ca4 <localtime+0x34>)
 8011c8a:	4807      	ldr	r0, [pc, #28]	; (8011ca8 <localtime+0x38>)
 8011c8c:	2132      	movs	r1, #50	; 0x32
 8011c8e:	f002 ff9f 	bl	8014bd0 <__assert_func>
 8011c92:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8011c94:	4620      	mov	r0, r4
 8011c96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011c9a:	f000 b807 	b.w	8011cac <localtime_r>
 8011c9e:	bf00      	nop
 8011ca0:	20000088 	.word	0x20000088
 8011ca4:	08019c7c 	.word	0x08019c7c
 8011ca8:	08019c93 	.word	0x08019c93

08011cac <localtime_r>:
 8011cac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011cb0:	4607      	mov	r7, r0
 8011cb2:	9101      	str	r1, [sp, #4]
 8011cb4:	f004 face 	bl	8016254 <__gettzinfo>
 8011cb8:	9901      	ldr	r1, [sp, #4]
 8011cba:	4680      	mov	r8, r0
 8011cbc:	4638      	mov	r0, r7
 8011cbe:	f004 facd 	bl	801625c <gmtime_r>
 8011cc2:	6943      	ldr	r3, [r0, #20]
 8011cc4:	079a      	lsls	r2, r3, #30
 8011cc6:	4604      	mov	r4, r0
 8011cc8:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 8011ccc:	d105      	bne.n	8011cda <localtime_r+0x2e>
 8011cce:	2264      	movs	r2, #100	; 0x64
 8011cd0:	fb96 f3f2 	sdiv	r3, r6, r2
 8011cd4:	fb02 6313 	mls	r3, r2, r3, r6
 8011cd8:	bb7b      	cbnz	r3, 8011d3a <localtime_r+0x8e>
 8011cda:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8011cde:	fb96 f5f3 	sdiv	r5, r6, r3
 8011ce2:	fb03 6515 	mls	r5, r3, r5, r6
 8011ce6:	fab5 f585 	clz	r5, r5
 8011cea:	096d      	lsrs	r5, r5, #5
 8011cec:	4b68      	ldr	r3, [pc, #416]	; (8011e90 <localtime_r+0x1e4>)
 8011cee:	2230      	movs	r2, #48	; 0x30
 8011cf0:	fb02 3505 	mla	r5, r2, r5, r3
 8011cf4:	f002 fd0c 	bl	8014710 <__tz_lock>
 8011cf8:	f002 fd16 	bl	8014728 <_tzset_unlocked>
 8011cfc:	4b65      	ldr	r3, [pc, #404]	; (8011e94 <localtime_r+0x1e8>)
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	b353      	cbz	r3, 8011d58 <localtime_r+0xac>
 8011d02:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011d06:	42b3      	cmp	r3, r6
 8011d08:	d119      	bne.n	8011d3e <localtime_r+0x92>
 8011d0a:	f8d8 1000 	ldr.w	r1, [r8]
 8011d0e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8011d12:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 8011d16:	b9d1      	cbnz	r1, 8011d4e <localtime_r+0xa2>
 8011d18:	4296      	cmp	r6, r2
 8011d1a:	eb77 0303 	sbcs.w	r3, r7, r3
 8011d1e:	da23      	bge.n	8011d68 <localtime_r+0xbc>
 8011d20:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8011d24:	4296      	cmp	r6, r2
 8011d26:	eb77 0303 	sbcs.w	r3, r7, r3
 8011d2a:	bfb4      	ite	lt
 8011d2c:	2301      	movlt	r3, #1
 8011d2e:	2300      	movge	r3, #0
 8011d30:	6223      	str	r3, [r4, #32]
 8011d32:	db1b      	blt.n	8011d6c <localtime_r+0xc0>
 8011d34:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 8011d38:	e01a      	b.n	8011d70 <localtime_r+0xc4>
 8011d3a:	2501      	movs	r5, #1
 8011d3c:	e7d6      	b.n	8011cec <localtime_r+0x40>
 8011d3e:	4630      	mov	r0, r6
 8011d40:	f002 fc3e 	bl	80145c0 <__tzcalc_limits>
 8011d44:	2800      	cmp	r0, #0
 8011d46:	d1e0      	bne.n	8011d0a <localtime_r+0x5e>
 8011d48:	f04f 33ff 	mov.w	r3, #4294967295
 8011d4c:	e004      	b.n	8011d58 <localtime_r+0xac>
 8011d4e:	4296      	cmp	r6, r2
 8011d50:	eb77 0303 	sbcs.w	r3, r7, r3
 8011d54:	da02      	bge.n	8011d5c <localtime_r+0xb0>
 8011d56:	2300      	movs	r3, #0
 8011d58:	6223      	str	r3, [r4, #32]
 8011d5a:	e7eb      	b.n	8011d34 <localtime_r+0x88>
 8011d5c:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8011d60:	4296      	cmp	r6, r2
 8011d62:	eb77 0303 	sbcs.w	r3, r7, r3
 8011d66:	daf6      	bge.n	8011d56 <localtime_r+0xaa>
 8011d68:	2301      	movs	r3, #1
 8011d6a:	6223      	str	r3, [r4, #32]
 8011d6c:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8011d70:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8011d74:	203c      	movs	r0, #60	; 0x3c
 8011d76:	fb91 f6f3 	sdiv	r6, r1, r3
 8011d7a:	fb03 1316 	mls	r3, r3, r6, r1
 8011d7e:	6861      	ldr	r1, [r4, #4]
 8011d80:	fb93 f2f0 	sdiv	r2, r3, r0
 8011d84:	fb00 3012 	mls	r0, r0, r2, r3
 8011d88:	6823      	ldr	r3, [r4, #0]
 8011d8a:	1a89      	subs	r1, r1, r2
 8011d8c:	68a2      	ldr	r2, [r4, #8]
 8011d8e:	6061      	str	r1, [r4, #4]
 8011d90:	1a1b      	subs	r3, r3, r0
 8011d92:	1b92      	subs	r2, r2, r6
 8011d94:	2b3b      	cmp	r3, #59	; 0x3b
 8011d96:	6023      	str	r3, [r4, #0]
 8011d98:	60a2      	str	r2, [r4, #8]
 8011d9a:	dd35      	ble.n	8011e08 <localtime_r+0x15c>
 8011d9c:	3101      	adds	r1, #1
 8011d9e:	6061      	str	r1, [r4, #4]
 8011da0:	3b3c      	subs	r3, #60	; 0x3c
 8011da2:	6023      	str	r3, [r4, #0]
 8011da4:	6863      	ldr	r3, [r4, #4]
 8011da6:	2b3b      	cmp	r3, #59	; 0x3b
 8011da8:	dd34      	ble.n	8011e14 <localtime_r+0x168>
 8011daa:	3201      	adds	r2, #1
 8011dac:	60a2      	str	r2, [r4, #8]
 8011dae:	3b3c      	subs	r3, #60	; 0x3c
 8011db0:	6063      	str	r3, [r4, #4]
 8011db2:	68a3      	ldr	r3, [r4, #8]
 8011db4:	2b17      	cmp	r3, #23
 8011db6:	dd33      	ble.n	8011e20 <localtime_r+0x174>
 8011db8:	69e2      	ldr	r2, [r4, #28]
 8011dba:	3201      	adds	r2, #1
 8011dbc:	61e2      	str	r2, [r4, #28]
 8011dbe:	69a2      	ldr	r2, [r4, #24]
 8011dc0:	3201      	adds	r2, #1
 8011dc2:	2a06      	cmp	r2, #6
 8011dc4:	bfc8      	it	gt
 8011dc6:	2200      	movgt	r2, #0
 8011dc8:	61a2      	str	r2, [r4, #24]
 8011dca:	68e2      	ldr	r2, [r4, #12]
 8011dcc:	3b18      	subs	r3, #24
 8011dce:	3201      	adds	r2, #1
 8011dd0:	60a3      	str	r3, [r4, #8]
 8011dd2:	6923      	ldr	r3, [r4, #16]
 8011dd4:	60e2      	str	r2, [r4, #12]
 8011dd6:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8011dda:	428a      	cmp	r2, r1
 8011ddc:	dd0e      	ble.n	8011dfc <localtime_r+0x150>
 8011dde:	2b0b      	cmp	r3, #11
 8011de0:	eba2 0201 	sub.w	r2, r2, r1
 8011de4:	60e2      	str	r2, [r4, #12]
 8011de6:	f103 0201 	add.w	r2, r3, #1
 8011dea:	bf09      	itett	eq
 8011dec:	6963      	ldreq	r3, [r4, #20]
 8011dee:	6122      	strne	r2, [r4, #16]
 8011df0:	2200      	moveq	r2, #0
 8011df2:	3301      	addeq	r3, #1
 8011df4:	bf02      	ittt	eq
 8011df6:	6122      	streq	r2, [r4, #16]
 8011df8:	6163      	streq	r3, [r4, #20]
 8011dfa:	61e2      	streq	r2, [r4, #28]
 8011dfc:	f002 fc8e 	bl	801471c <__tz_unlock>
 8011e00:	4620      	mov	r0, r4
 8011e02:	b002      	add	sp, #8
 8011e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	dacb      	bge.n	8011da4 <localtime_r+0xf8>
 8011e0c:	3901      	subs	r1, #1
 8011e0e:	6061      	str	r1, [r4, #4]
 8011e10:	333c      	adds	r3, #60	; 0x3c
 8011e12:	e7c6      	b.n	8011da2 <localtime_r+0xf6>
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	dacc      	bge.n	8011db2 <localtime_r+0x106>
 8011e18:	3a01      	subs	r2, #1
 8011e1a:	60a2      	str	r2, [r4, #8]
 8011e1c:	333c      	adds	r3, #60	; 0x3c
 8011e1e:	e7c7      	b.n	8011db0 <localtime_r+0x104>
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	daeb      	bge.n	8011dfc <localtime_r+0x150>
 8011e24:	69e2      	ldr	r2, [r4, #28]
 8011e26:	3a01      	subs	r2, #1
 8011e28:	61e2      	str	r2, [r4, #28]
 8011e2a:	69a2      	ldr	r2, [r4, #24]
 8011e2c:	3a01      	subs	r2, #1
 8011e2e:	bf48      	it	mi
 8011e30:	2206      	movmi	r2, #6
 8011e32:	61a2      	str	r2, [r4, #24]
 8011e34:	68e2      	ldr	r2, [r4, #12]
 8011e36:	3318      	adds	r3, #24
 8011e38:	3a01      	subs	r2, #1
 8011e3a:	60e2      	str	r2, [r4, #12]
 8011e3c:	60a3      	str	r3, [r4, #8]
 8011e3e:	2a00      	cmp	r2, #0
 8011e40:	d1dc      	bne.n	8011dfc <localtime_r+0x150>
 8011e42:	6923      	ldr	r3, [r4, #16]
 8011e44:	3b01      	subs	r3, #1
 8011e46:	d405      	bmi.n	8011e54 <localtime_r+0x1a8>
 8011e48:	6123      	str	r3, [r4, #16]
 8011e4a:	6923      	ldr	r3, [r4, #16]
 8011e4c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8011e50:	60e3      	str	r3, [r4, #12]
 8011e52:	e7d3      	b.n	8011dfc <localtime_r+0x150>
 8011e54:	230b      	movs	r3, #11
 8011e56:	6123      	str	r3, [r4, #16]
 8011e58:	6963      	ldr	r3, [r4, #20]
 8011e5a:	1e5a      	subs	r2, r3, #1
 8011e5c:	6162      	str	r2, [r4, #20]
 8011e5e:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 8011e62:	0793      	lsls	r3, r2, #30
 8011e64:	d105      	bne.n	8011e72 <localtime_r+0x1c6>
 8011e66:	2164      	movs	r1, #100	; 0x64
 8011e68:	fb92 f3f1 	sdiv	r3, r2, r1
 8011e6c:	fb01 2313 	mls	r3, r1, r3, r2
 8011e70:	b963      	cbnz	r3, 8011e8c <localtime_r+0x1e0>
 8011e72:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8011e76:	fb92 f3f1 	sdiv	r3, r2, r1
 8011e7a:	fb01 2313 	mls	r3, r1, r3, r2
 8011e7e:	fab3 f383 	clz	r3, r3
 8011e82:	095b      	lsrs	r3, r3, #5
 8011e84:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8011e88:	61e3      	str	r3, [r4, #28]
 8011e8a:	e7de      	b.n	8011e4a <localtime_r+0x19e>
 8011e8c:	2301      	movs	r3, #1
 8011e8e:	e7f9      	b.n	8011e84 <localtime_r+0x1d8>
 8011e90:	08019d54 	.word	0x08019d54
 8011e94:	20005a10 	.word	0x20005a10

08011e98 <__retarget_lock_init_recursive>:
 8011e98:	4770      	bx	lr

08011e9a <__retarget_lock_acquire>:
 8011e9a:	4770      	bx	lr

08011e9c <__retarget_lock_acquire_recursive>:
 8011e9c:	4770      	bx	lr

08011e9e <__retarget_lock_release>:
 8011e9e:	4770      	bx	lr

08011ea0 <__retarget_lock_release_recursive>:
 8011ea0:	4770      	bx	lr
	...

08011ea4 <malloc>:
 8011ea4:	4b02      	ldr	r3, [pc, #8]	; (8011eb0 <malloc+0xc>)
 8011ea6:	4601      	mov	r1, r0
 8011ea8:	6818      	ldr	r0, [r3, #0]
 8011eaa:	f000 bb09 	b.w	80124c0 <_malloc_r>
 8011eae:	bf00      	nop
 8011eb0:	20000088 	.word	0x20000088

08011eb4 <free>:
 8011eb4:	4b02      	ldr	r3, [pc, #8]	; (8011ec0 <free+0xc>)
 8011eb6:	4601      	mov	r1, r0
 8011eb8:	6818      	ldr	r0, [r3, #0]
 8011eba:	f000 bab1 	b.w	8012420 <_free_r>
 8011ebe:	bf00      	nop
 8011ec0:	20000088 	.word	0x20000088

08011ec4 <memcpy>:
 8011ec4:	440a      	add	r2, r1
 8011ec6:	4291      	cmp	r1, r2
 8011ec8:	f100 33ff 	add.w	r3, r0, #4294967295
 8011ecc:	d100      	bne.n	8011ed0 <memcpy+0xc>
 8011ece:	4770      	bx	lr
 8011ed0:	b510      	push	{r4, lr}
 8011ed2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011ed6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011eda:	4291      	cmp	r1, r2
 8011edc:	d1f9      	bne.n	8011ed2 <memcpy+0xe>
 8011ede:	bd10      	pop	{r4, pc}

08011ee0 <memmove>:
 8011ee0:	4288      	cmp	r0, r1
 8011ee2:	b510      	push	{r4, lr}
 8011ee4:	eb01 0402 	add.w	r4, r1, r2
 8011ee8:	d902      	bls.n	8011ef0 <memmove+0x10>
 8011eea:	4284      	cmp	r4, r0
 8011eec:	4623      	mov	r3, r4
 8011eee:	d807      	bhi.n	8011f00 <memmove+0x20>
 8011ef0:	1e43      	subs	r3, r0, #1
 8011ef2:	42a1      	cmp	r1, r4
 8011ef4:	d008      	beq.n	8011f08 <memmove+0x28>
 8011ef6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011efa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011efe:	e7f8      	b.n	8011ef2 <memmove+0x12>
 8011f00:	4402      	add	r2, r0
 8011f02:	4601      	mov	r1, r0
 8011f04:	428a      	cmp	r2, r1
 8011f06:	d100      	bne.n	8011f0a <memmove+0x2a>
 8011f08:	bd10      	pop	{r4, pc}
 8011f0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011f0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011f12:	e7f7      	b.n	8011f04 <memmove+0x24>

08011f14 <memset>:
 8011f14:	4402      	add	r2, r0
 8011f16:	4603      	mov	r3, r0
 8011f18:	4293      	cmp	r3, r2
 8011f1a:	d100      	bne.n	8011f1e <memset+0xa>
 8011f1c:	4770      	bx	lr
 8011f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8011f22:	e7f9      	b.n	8011f18 <memset+0x4>

08011f24 <validate_structure>:
 8011f24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011f26:	6801      	ldr	r1, [r0, #0]
 8011f28:	293b      	cmp	r1, #59	; 0x3b
 8011f2a:	4604      	mov	r4, r0
 8011f2c:	d911      	bls.n	8011f52 <validate_structure+0x2e>
 8011f2e:	223c      	movs	r2, #60	; 0x3c
 8011f30:	4668      	mov	r0, sp
 8011f32:	f002 fe7b 	bl	8014c2c <div>
 8011f36:	9a01      	ldr	r2, [sp, #4]
 8011f38:	6863      	ldr	r3, [r4, #4]
 8011f3a:	9900      	ldr	r1, [sp, #0]
 8011f3c:	2a00      	cmp	r2, #0
 8011f3e:	440b      	add	r3, r1
 8011f40:	6063      	str	r3, [r4, #4]
 8011f42:	bfbb      	ittet	lt
 8011f44:	323c      	addlt	r2, #60	; 0x3c
 8011f46:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8011f4a:	6022      	strge	r2, [r4, #0]
 8011f4c:	6022      	strlt	r2, [r4, #0]
 8011f4e:	bfb8      	it	lt
 8011f50:	6063      	strlt	r3, [r4, #4]
 8011f52:	6861      	ldr	r1, [r4, #4]
 8011f54:	293b      	cmp	r1, #59	; 0x3b
 8011f56:	d911      	bls.n	8011f7c <validate_structure+0x58>
 8011f58:	223c      	movs	r2, #60	; 0x3c
 8011f5a:	4668      	mov	r0, sp
 8011f5c:	f002 fe66 	bl	8014c2c <div>
 8011f60:	9a01      	ldr	r2, [sp, #4]
 8011f62:	68a3      	ldr	r3, [r4, #8]
 8011f64:	9900      	ldr	r1, [sp, #0]
 8011f66:	2a00      	cmp	r2, #0
 8011f68:	440b      	add	r3, r1
 8011f6a:	60a3      	str	r3, [r4, #8]
 8011f6c:	bfbb      	ittet	lt
 8011f6e:	323c      	addlt	r2, #60	; 0x3c
 8011f70:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8011f74:	6062      	strge	r2, [r4, #4]
 8011f76:	6062      	strlt	r2, [r4, #4]
 8011f78:	bfb8      	it	lt
 8011f7a:	60a3      	strlt	r3, [r4, #8]
 8011f7c:	68a1      	ldr	r1, [r4, #8]
 8011f7e:	2917      	cmp	r1, #23
 8011f80:	d911      	bls.n	8011fa6 <validate_structure+0x82>
 8011f82:	2218      	movs	r2, #24
 8011f84:	4668      	mov	r0, sp
 8011f86:	f002 fe51 	bl	8014c2c <div>
 8011f8a:	9a01      	ldr	r2, [sp, #4]
 8011f8c:	68e3      	ldr	r3, [r4, #12]
 8011f8e:	9900      	ldr	r1, [sp, #0]
 8011f90:	2a00      	cmp	r2, #0
 8011f92:	440b      	add	r3, r1
 8011f94:	60e3      	str	r3, [r4, #12]
 8011f96:	bfbb      	ittet	lt
 8011f98:	3218      	addlt	r2, #24
 8011f9a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8011f9e:	60a2      	strge	r2, [r4, #8]
 8011fa0:	60a2      	strlt	r2, [r4, #8]
 8011fa2:	bfb8      	it	lt
 8011fa4:	60e3      	strlt	r3, [r4, #12]
 8011fa6:	6921      	ldr	r1, [r4, #16]
 8011fa8:	290b      	cmp	r1, #11
 8011faa:	d911      	bls.n	8011fd0 <validate_structure+0xac>
 8011fac:	220c      	movs	r2, #12
 8011fae:	4668      	mov	r0, sp
 8011fb0:	f002 fe3c 	bl	8014c2c <div>
 8011fb4:	9a01      	ldr	r2, [sp, #4]
 8011fb6:	6963      	ldr	r3, [r4, #20]
 8011fb8:	9900      	ldr	r1, [sp, #0]
 8011fba:	2a00      	cmp	r2, #0
 8011fbc:	440b      	add	r3, r1
 8011fbe:	6163      	str	r3, [r4, #20]
 8011fc0:	bfbb      	ittet	lt
 8011fc2:	320c      	addlt	r2, #12
 8011fc4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8011fc8:	6122      	strge	r2, [r4, #16]
 8011fca:	6122      	strlt	r2, [r4, #16]
 8011fcc:	bfb8      	it	lt
 8011fce:	6163      	strlt	r3, [r4, #20]
 8011fd0:	6963      	ldr	r3, [r4, #20]
 8011fd2:	0799      	lsls	r1, r3, #30
 8011fd4:	d120      	bne.n	8012018 <validate_structure+0xf4>
 8011fd6:	2164      	movs	r1, #100	; 0x64
 8011fd8:	fb93 f2f1 	sdiv	r2, r3, r1
 8011fdc:	fb01 3212 	mls	r2, r1, r2, r3
 8011fe0:	b9e2      	cbnz	r2, 801201c <validate_structure+0xf8>
 8011fe2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8011fe6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8011fea:	fb93 f2f1 	sdiv	r2, r3, r1
 8011fee:	fb01 3312 	mls	r3, r1, r2, r3
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	bf14      	ite	ne
 8011ff6:	231c      	movne	r3, #28
 8011ff8:	231d      	moveq	r3, #29
 8011ffa:	68e2      	ldr	r2, [r4, #12]
 8011ffc:	2a00      	cmp	r2, #0
 8011ffe:	dc0f      	bgt.n	8012020 <validate_structure+0xfc>
 8012000:	4f33      	ldr	r7, [pc, #204]	; (80120d0 <validate_structure+0x1ac>)
 8012002:	260b      	movs	r6, #11
 8012004:	2064      	movs	r0, #100	; 0x64
 8012006:	f44f 75c8 	mov.w	r5, #400	; 0x190
 801200a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801200e:	f1bc 0f00 	cmp.w	ip, #0
 8012012:	dd31      	ble.n	8012078 <validate_structure+0x154>
 8012014:	b003      	add	sp, #12
 8012016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012018:	231c      	movs	r3, #28
 801201a:	e7ee      	b.n	8011ffa <validate_structure+0xd6>
 801201c:	231d      	movs	r3, #29
 801201e:	e7ec      	b.n	8011ffa <validate_structure+0xd6>
 8012020:	4f2b      	ldr	r7, [pc, #172]	; (80120d0 <validate_structure+0x1ac>)
 8012022:	f04f 0c00 	mov.w	ip, #0
 8012026:	2564      	movs	r5, #100	; 0x64
 8012028:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801202c:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8012030:	2a01      	cmp	r2, #1
 8012032:	bf14      	ite	ne
 8012034:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 8012038:	4618      	moveq	r0, r3
 801203a:	4281      	cmp	r1, r0
 801203c:	ddea      	ble.n	8012014 <validate_structure+0xf0>
 801203e:	3201      	adds	r2, #1
 8012040:	1a09      	subs	r1, r1, r0
 8012042:	2a0c      	cmp	r2, #12
 8012044:	60e1      	str	r1, [r4, #12]
 8012046:	6122      	str	r2, [r4, #16]
 8012048:	d1f0      	bne.n	801202c <validate_structure+0x108>
 801204a:	6963      	ldr	r3, [r4, #20]
 801204c:	1c5a      	adds	r2, r3, #1
 801204e:	0791      	lsls	r1, r2, #30
 8012050:	e9c4 c204 	strd	ip, r2, [r4, #16]
 8012054:	d137      	bne.n	80120c6 <validate_structure+0x1a2>
 8012056:	fb92 f1f5 	sdiv	r1, r2, r5
 801205a:	fb05 2211 	mls	r2, r5, r1, r2
 801205e:	2a00      	cmp	r2, #0
 8012060:	d133      	bne.n	80120ca <validate_structure+0x1a6>
 8012062:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8012066:	fb93 f2f6 	sdiv	r2, r3, r6
 801206a:	fb06 3312 	mls	r3, r6, r2, r3
 801206e:	2b00      	cmp	r3, #0
 8012070:	bf14      	ite	ne
 8012072:	231c      	movne	r3, #28
 8012074:	231d      	moveq	r3, #29
 8012076:	e7d9      	b.n	801202c <validate_structure+0x108>
 8012078:	6921      	ldr	r1, [r4, #16]
 801207a:	3901      	subs	r1, #1
 801207c:	6121      	str	r1, [r4, #16]
 801207e:	3101      	adds	r1, #1
 8012080:	d114      	bne.n	80120ac <validate_structure+0x188>
 8012082:	6963      	ldr	r3, [r4, #20]
 8012084:	1e59      	subs	r1, r3, #1
 8012086:	078a      	lsls	r2, r1, #30
 8012088:	e9c4 6104 	strd	r6, r1, [r4, #16]
 801208c:	d117      	bne.n	80120be <validate_structure+0x19a>
 801208e:	fb91 f2f0 	sdiv	r2, r1, r0
 8012092:	fb00 1112 	mls	r1, r0, r2, r1
 8012096:	b9a1      	cbnz	r1, 80120c2 <validate_structure+0x19e>
 8012098:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 801209c:	fb93 f2f5 	sdiv	r2, r3, r5
 80120a0:	fb05 3312 	mls	r3, r5, r2, r3
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	bf14      	ite	ne
 80120a8:	231c      	movne	r3, #28
 80120aa:	231d      	moveq	r3, #29
 80120ac:	6922      	ldr	r2, [r4, #16]
 80120ae:	2a01      	cmp	r2, #1
 80120b0:	bf14      	ite	ne
 80120b2:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 80120b6:	461a      	moveq	r2, r3
 80120b8:	4462      	add	r2, ip
 80120ba:	60e2      	str	r2, [r4, #12]
 80120bc:	e7a5      	b.n	801200a <validate_structure+0xe6>
 80120be:	231c      	movs	r3, #28
 80120c0:	e7f4      	b.n	80120ac <validate_structure+0x188>
 80120c2:	231d      	movs	r3, #29
 80120c4:	e7f2      	b.n	80120ac <validate_structure+0x188>
 80120c6:	231c      	movs	r3, #28
 80120c8:	e7b0      	b.n	801202c <validate_structure+0x108>
 80120ca:	231d      	movs	r3, #29
 80120cc:	e7ae      	b.n	801202c <validate_structure+0x108>
 80120ce:	bf00      	nop
 80120d0:	08019cf4 	.word	0x08019cf4

080120d4 <mktime>:
 80120d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120d8:	b08b      	sub	sp, #44	; 0x2c
 80120da:	4605      	mov	r5, r0
 80120dc:	f004 f8ba 	bl	8016254 <__gettzinfo>
 80120e0:	4607      	mov	r7, r0
 80120e2:	4628      	mov	r0, r5
 80120e4:	f7ff ff1e 	bl	8011f24 <validate_structure>
 80120e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80120ec:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 80120f0:	68a8      	ldr	r0, [r5, #8]
 80120f2:	696e      	ldr	r6, [r5, #20]
 80120f4:	fb0a 2303 	mla	r3, sl, r3, r2
 80120f8:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 80120fc:	fb0a 3a00 	mla	sl, sl, r0, r3
 8012100:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 8012104:	4ac3      	ldr	r2, [pc, #780]	; (8012414 <mktime+0x340>)
 8012106:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801210a:	3c01      	subs	r4, #1
 801210c:	2b01      	cmp	r3, #1
 801210e:	4414      	add	r4, r2
 8012110:	dd11      	ble.n	8012136 <mktime+0x62>
 8012112:	07b1      	lsls	r1, r6, #30
 8012114:	d10f      	bne.n	8012136 <mktime+0x62>
 8012116:	2264      	movs	r2, #100	; 0x64
 8012118:	fb96 f3f2 	sdiv	r3, r6, r2
 801211c:	fb02 6313 	mls	r3, r2, r3, r6
 8012120:	b943      	cbnz	r3, 8012134 <mktime+0x60>
 8012122:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8012126:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801212a:	fb91 f3f2 	sdiv	r3, r1, r2
 801212e:	fb02 1313 	mls	r3, r2, r3, r1
 8012132:	b903      	cbnz	r3, 8012136 <mktime+0x62>
 8012134:	3401      	adds	r4, #1
 8012136:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 801213a:	3310      	adds	r3, #16
 801213c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8012140:	4293      	cmp	r3, r2
 8012142:	61ec      	str	r4, [r5, #28]
 8012144:	f200 8161 	bhi.w	801240a <mktime+0x336>
 8012148:	2e46      	cmp	r6, #70	; 0x46
 801214a:	dd77      	ble.n	801223c <mktime+0x168>
 801214c:	2346      	movs	r3, #70	; 0x46
 801214e:	f240 1e6d 	movw	lr, #365	; 0x16d
 8012152:	2164      	movs	r1, #100	; 0x64
 8012154:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8012158:	079a      	lsls	r2, r3, #30
 801215a:	d169      	bne.n	8012230 <mktime+0x15c>
 801215c:	fb93 f2f1 	sdiv	r2, r3, r1
 8012160:	fb01 3212 	mls	r2, r1, r2, r3
 8012164:	2a00      	cmp	r2, #0
 8012166:	d166      	bne.n	8012236 <mktime+0x162>
 8012168:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801216c:	fb9c f2f0 	sdiv	r2, ip, r0
 8012170:	fb00 c212 	mls	r2, r0, r2, ip
 8012174:	2a00      	cmp	r2, #0
 8012176:	bf14      	ite	ne
 8012178:	4672      	movne	r2, lr
 801217a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801217e:	3301      	adds	r3, #1
 8012180:	429e      	cmp	r6, r3
 8012182:	4414      	add	r4, r2
 8012184:	d1e8      	bne.n	8012158 <mktime+0x84>
 8012186:	4ba4      	ldr	r3, [pc, #656]	; (8012418 <mktime+0x344>)
 8012188:	ea4f 7bea 	mov.w	fp, sl, asr #31
 801218c:	fbc3 ab04 	smlal	sl, fp, r3, r4
 8012190:	f002 fabe 	bl	8014710 <__tz_lock>
 8012194:	f002 fac8 	bl	8014728 <_tzset_unlocked>
 8012198:	4ba0      	ldr	r3, [pc, #640]	; (801241c <mktime+0x348>)
 801219a:	f8d3 9000 	ldr.w	r9, [r3]
 801219e:	f1b9 0f00 	cmp.w	r9, #0
 80121a2:	d03f      	beq.n	8012224 <mktime+0x150>
 80121a4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80121a8:	6968      	ldr	r0, [r5, #20]
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	f1b9 0f01 	cmp.w	r9, #1
 80121b0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80121b4:	46c8      	mov	r8, r9
 80121b6:	bfa8      	it	ge
 80121b8:	f04f 0801 	movge.w	r8, #1
 80121bc:	4283      	cmp	r3, r0
 80121be:	d17f      	bne.n	80122c0 <mktime+0x1ec>
 80121c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121c2:	4619      	mov	r1, r3
 80121c4:	17da      	asrs	r2, r3, #31
 80121c6:	e9cd 1200 	strd	r1, r2, [sp]
 80121ca:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80121ce:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80121d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80121d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80121d8:	1a80      	subs	r0, r0, r2
 80121da:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 80121de:	4582      	cmp	sl, r0
 80121e0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80121e4:	eb7b 0101 	sbcs.w	r1, fp, r1
 80121e8:	da71      	bge.n	80122ce <mktime+0x1fa>
 80121ea:	9800      	ldr	r0, [sp, #0]
 80121ec:	6a39      	ldr	r1, [r7, #32]
 80121ee:	1a09      	subs	r1, r1, r0
 80121f0:	9104      	str	r1, [sp, #16]
 80121f2:	9801      	ldr	r0, [sp, #4]
 80121f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80121f6:	eb61 0100 	sbc.w	r1, r1, r0
 80121fa:	9105      	str	r1, [sp, #20]
 80121fc:	6839      	ldr	r1, [r7, #0]
 80121fe:	2900      	cmp	r1, #0
 8012200:	d075      	beq.n	80122ee <mktime+0x21a>
 8012202:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012206:	4582      	cmp	sl, r0
 8012208:	eb7b 0101 	sbcs.w	r1, fp, r1
 801220c:	db05      	blt.n	801221a <mktime+0x146>
 801220e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012212:	4582      	cmp	sl, r0
 8012214:	eb7b 0101 	sbcs.w	r1, fp, r1
 8012218:	db6f      	blt.n	80122fa <mktime+0x226>
 801221a:	f1b9 0f00 	cmp.w	r9, #0
 801221e:	f04f 0900 	mov.w	r9, #0
 8012222:	da6f      	bge.n	8012304 <mktime+0x230>
 8012224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012226:	eb1a 0a03 	adds.w	sl, sl, r3
 801222a:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801222e:	e0ae      	b.n	801238e <mktime+0x2ba>
 8012230:	f240 126d 	movw	r2, #365	; 0x16d
 8012234:	e7a3      	b.n	801217e <mktime+0xaa>
 8012236:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801223a:	e7a0      	b.n	801217e <mktime+0xaa>
 801223c:	d0a3      	beq.n	8012186 <mktime+0xb2>
 801223e:	2345      	movs	r3, #69	; 0x45
 8012240:	f240 1e6d 	movw	lr, #365	; 0x16d
 8012244:	2164      	movs	r1, #100	; 0x64
 8012246:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801224a:	e012      	b.n	8012272 <mktime+0x19e>
 801224c:	bb62      	cbnz	r2, 80122a8 <mktime+0x1d4>
 801224e:	fb93 f2f1 	sdiv	r2, r3, r1
 8012252:	fb01 3212 	mls	r2, r1, r2, r3
 8012256:	bb52      	cbnz	r2, 80122ae <mktime+0x1da>
 8012258:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801225c:	fb9c f2f0 	sdiv	r2, ip, r0
 8012260:	fb00 c212 	mls	r2, r0, r2, ip
 8012264:	2a00      	cmp	r2, #0
 8012266:	bf14      	ite	ne
 8012268:	4672      	movne	r2, lr
 801226a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801226e:	1aa4      	subs	r4, r4, r2
 8012270:	3b01      	subs	r3, #1
 8012272:	429e      	cmp	r6, r3
 8012274:	f003 0203 	and.w	r2, r3, #3
 8012278:	dbe8      	blt.n	801224c <mktime+0x178>
 801227a:	b9da      	cbnz	r2, 80122b4 <mktime+0x1e0>
 801227c:	2264      	movs	r2, #100	; 0x64
 801227e:	fb96 f3f2 	sdiv	r3, r6, r2
 8012282:	fb02 6313 	mls	r3, r2, r3, r6
 8012286:	b9c3      	cbnz	r3, 80122ba <mktime+0x1e6>
 8012288:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 801228c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8012290:	fb91 f3f2 	sdiv	r3, r1, r2
 8012294:	fb02 1313 	mls	r3, r2, r3, r1
 8012298:	2b00      	cmp	r3, #0
 801229a:	f240 136d 	movw	r3, #365	; 0x16d
 801229e:	bf08      	it	eq
 80122a0:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 80122a4:	1ae4      	subs	r4, r4, r3
 80122a6:	e76e      	b.n	8012186 <mktime+0xb2>
 80122a8:	f240 126d 	movw	r2, #365	; 0x16d
 80122ac:	e7df      	b.n	801226e <mktime+0x19a>
 80122ae:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80122b2:	e7dc      	b.n	801226e <mktime+0x19a>
 80122b4:	f240 136d 	movw	r3, #365	; 0x16d
 80122b8:	e7f4      	b.n	80122a4 <mktime+0x1d0>
 80122ba:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80122be:	e7f1      	b.n	80122a4 <mktime+0x1d0>
 80122c0:	f002 f97e 	bl	80145c0 <__tzcalc_limits>
 80122c4:	2800      	cmp	r0, #0
 80122c6:	f47f af7b 	bne.w	80121c0 <mktime+0xec>
 80122ca:	46c1      	mov	r9, r8
 80122cc:	e054      	b.n	8012378 <mktime+0x2a4>
 80122ce:	9800      	ldr	r0, [sp, #0]
 80122d0:	9902      	ldr	r1, [sp, #8]
 80122d2:	1a09      	subs	r1, r1, r0
 80122d4:	9108      	str	r1, [sp, #32]
 80122d6:	9801      	ldr	r0, [sp, #4]
 80122d8:	9903      	ldr	r1, [sp, #12]
 80122da:	eb61 0100 	sbc.w	r1, r1, r0
 80122de:	9109      	str	r1, [sp, #36]	; 0x24
 80122e0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80122e4:	4582      	cmp	sl, r0
 80122e6:	eb7b 0101 	sbcs.w	r1, fp, r1
 80122ea:	dbee      	blt.n	80122ca <mktime+0x1f6>
 80122ec:	e77d      	b.n	80121ea <mktime+0x116>
 80122ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80122f2:	4582      	cmp	sl, r0
 80122f4:	eb7b 0101 	sbcs.w	r1, fp, r1
 80122f8:	db89      	blt.n	801220e <mktime+0x13a>
 80122fa:	f1b9 0f00 	cmp.w	r9, #0
 80122fe:	db3f      	blt.n	8012380 <mktime+0x2ac>
 8012300:	f04f 0901 	mov.w	r9, #1
 8012304:	ea88 0809 	eor.w	r8, r8, r9
 8012308:	f1b8 0f01 	cmp.w	r8, #1
 801230c:	d134      	bne.n	8012378 <mktime+0x2a4>
 801230e:	f1b9 0f00 	cmp.w	r9, #0
 8012312:	d04f      	beq.n	80123b4 <mktime+0x2e0>
 8012314:	1ad3      	subs	r3, r2, r3
 8012316:	682a      	ldr	r2, [r5, #0]
 8012318:	f8d5 800c 	ldr.w	r8, [r5, #12]
 801231c:	441a      	add	r2, r3
 801231e:	eb1a 0a03 	adds.w	sl, sl, r3
 8012322:	602a      	str	r2, [r5, #0]
 8012324:	4628      	mov	r0, r5
 8012326:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801232a:	f7ff fdfb 	bl	8011f24 <validate_structure>
 801232e:	68ea      	ldr	r2, [r5, #12]
 8012330:	ebb2 0208 	subs.w	r2, r2, r8
 8012334:	d020      	beq.n	8012378 <mktime+0x2a4>
 8012336:	2a01      	cmp	r2, #1
 8012338:	dc3e      	bgt.n	80123b8 <mktime+0x2e4>
 801233a:	1c90      	adds	r0, r2, #2
 801233c:	bfd8      	it	le
 801233e:	2201      	movle	r2, #1
 8012340:	69eb      	ldr	r3, [r5, #28]
 8012342:	18d3      	adds	r3, r2, r3
 8012344:	4414      	add	r4, r2
 8012346:	d540      	bpl.n	80123ca <mktime+0x2f6>
 8012348:	1e72      	subs	r2, r6, #1
 801234a:	0791      	lsls	r1, r2, #30
 801234c:	d137      	bne.n	80123be <mktime+0x2ea>
 801234e:	2164      	movs	r1, #100	; 0x64
 8012350:	fb92 f3f1 	sdiv	r3, r2, r1
 8012354:	fb01 2313 	mls	r3, r1, r3, r2
 8012358:	bba3      	cbnz	r3, 80123c4 <mktime+0x2f0>
 801235a:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 801235e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8012362:	fb96 f3f2 	sdiv	r3, r6, r2
 8012366:	fb02 6613 	mls	r6, r2, r3, r6
 801236a:	2e00      	cmp	r6, #0
 801236c:	f240 136d 	movw	r3, #365	; 0x16d
 8012370:	bf18      	it	ne
 8012372:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8012376:	61eb      	str	r3, [r5, #28]
 8012378:	f1b9 0f01 	cmp.w	r9, #1
 801237c:	f47f af52 	bne.w	8012224 <mktime+0x150>
 8012380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012382:	eb1a 0a03 	adds.w	sl, sl, r3
 8012386:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801238a:	f04f 0901 	mov.w	r9, #1
 801238e:	f002 f9c5 	bl	801471c <__tz_unlock>
 8012392:	3404      	adds	r4, #4
 8012394:	2307      	movs	r3, #7
 8012396:	fb94 f3f3 	sdiv	r3, r4, r3
 801239a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801239e:	1ae4      	subs	r4, r4, r3
 80123a0:	bf48      	it	mi
 80123a2:	3407      	addmi	r4, #7
 80123a4:	f8c5 9020 	str.w	r9, [r5, #32]
 80123a8:	61ac      	str	r4, [r5, #24]
 80123aa:	4650      	mov	r0, sl
 80123ac:	4659      	mov	r1, fp
 80123ae:	b00b      	add	sp, #44	; 0x2c
 80123b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123b4:	1a9b      	subs	r3, r3, r2
 80123b6:	e7ae      	b.n	8012316 <mktime+0x242>
 80123b8:	f04f 32ff 	mov.w	r2, #4294967295
 80123bc:	e7c0      	b.n	8012340 <mktime+0x26c>
 80123be:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80123c2:	e7d8      	b.n	8012376 <mktime+0x2a2>
 80123c4:	f240 136d 	movw	r3, #365	; 0x16d
 80123c8:	e7d5      	b.n	8012376 <mktime+0x2a2>
 80123ca:	07b2      	lsls	r2, r6, #30
 80123cc:	d117      	bne.n	80123fe <mktime+0x32a>
 80123ce:	2164      	movs	r1, #100	; 0x64
 80123d0:	fb96 f2f1 	sdiv	r2, r6, r1
 80123d4:	fb01 6212 	mls	r2, r1, r2, r6
 80123d8:	b9a2      	cbnz	r2, 8012404 <mktime+0x330>
 80123da:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80123de:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80123e2:	fb96 f2f1 	sdiv	r2, r6, r1
 80123e6:	fb01 6612 	mls	r6, r1, r2, r6
 80123ea:	2e00      	cmp	r6, #0
 80123ec:	f240 126d 	movw	r2, #365	; 0x16d
 80123f0:	bf08      	it	eq
 80123f2:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80123f6:	4293      	cmp	r3, r2
 80123f8:	bfa8      	it	ge
 80123fa:	1a9b      	subge	r3, r3, r2
 80123fc:	e7bb      	b.n	8012376 <mktime+0x2a2>
 80123fe:	f240 126d 	movw	r2, #365	; 0x16d
 8012402:	e7f8      	b.n	80123f6 <mktime+0x322>
 8012404:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8012408:	e7f5      	b.n	80123f6 <mktime+0x322>
 801240a:	f04f 3aff 	mov.w	sl, #4294967295
 801240e:	f04f 3bff 	mov.w	fp, #4294967295
 8012412:	e7ca      	b.n	80123aa <mktime+0x2d6>
 8012414:	08019d24 	.word	0x08019d24
 8012418:	00015180 	.word	0x00015180
 801241c:	20005a10 	.word	0x20005a10

08012420 <_free_r>:
 8012420:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012422:	2900      	cmp	r1, #0
 8012424:	d048      	beq.n	80124b8 <_free_r+0x98>
 8012426:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801242a:	9001      	str	r0, [sp, #4]
 801242c:	2b00      	cmp	r3, #0
 801242e:	f1a1 0404 	sub.w	r4, r1, #4
 8012432:	bfb8      	it	lt
 8012434:	18e4      	addlt	r4, r4, r3
 8012436:	f004 f84d 	bl	80164d4 <__malloc_lock>
 801243a:	4a20      	ldr	r2, [pc, #128]	; (80124bc <_free_r+0x9c>)
 801243c:	9801      	ldr	r0, [sp, #4]
 801243e:	6813      	ldr	r3, [r2, #0]
 8012440:	4615      	mov	r5, r2
 8012442:	b933      	cbnz	r3, 8012452 <_free_r+0x32>
 8012444:	6063      	str	r3, [r4, #4]
 8012446:	6014      	str	r4, [r2, #0]
 8012448:	b003      	add	sp, #12
 801244a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801244e:	f004 b847 	b.w	80164e0 <__malloc_unlock>
 8012452:	42a3      	cmp	r3, r4
 8012454:	d90b      	bls.n	801246e <_free_r+0x4e>
 8012456:	6821      	ldr	r1, [r4, #0]
 8012458:	1862      	adds	r2, r4, r1
 801245a:	4293      	cmp	r3, r2
 801245c:	bf04      	itt	eq
 801245e:	681a      	ldreq	r2, [r3, #0]
 8012460:	685b      	ldreq	r3, [r3, #4]
 8012462:	6063      	str	r3, [r4, #4]
 8012464:	bf04      	itt	eq
 8012466:	1852      	addeq	r2, r2, r1
 8012468:	6022      	streq	r2, [r4, #0]
 801246a:	602c      	str	r4, [r5, #0]
 801246c:	e7ec      	b.n	8012448 <_free_r+0x28>
 801246e:	461a      	mov	r2, r3
 8012470:	685b      	ldr	r3, [r3, #4]
 8012472:	b10b      	cbz	r3, 8012478 <_free_r+0x58>
 8012474:	42a3      	cmp	r3, r4
 8012476:	d9fa      	bls.n	801246e <_free_r+0x4e>
 8012478:	6811      	ldr	r1, [r2, #0]
 801247a:	1855      	adds	r5, r2, r1
 801247c:	42a5      	cmp	r5, r4
 801247e:	d10b      	bne.n	8012498 <_free_r+0x78>
 8012480:	6824      	ldr	r4, [r4, #0]
 8012482:	4421      	add	r1, r4
 8012484:	1854      	adds	r4, r2, r1
 8012486:	42a3      	cmp	r3, r4
 8012488:	6011      	str	r1, [r2, #0]
 801248a:	d1dd      	bne.n	8012448 <_free_r+0x28>
 801248c:	681c      	ldr	r4, [r3, #0]
 801248e:	685b      	ldr	r3, [r3, #4]
 8012490:	6053      	str	r3, [r2, #4]
 8012492:	4421      	add	r1, r4
 8012494:	6011      	str	r1, [r2, #0]
 8012496:	e7d7      	b.n	8012448 <_free_r+0x28>
 8012498:	d902      	bls.n	80124a0 <_free_r+0x80>
 801249a:	230c      	movs	r3, #12
 801249c:	6003      	str	r3, [r0, #0]
 801249e:	e7d3      	b.n	8012448 <_free_r+0x28>
 80124a0:	6825      	ldr	r5, [r4, #0]
 80124a2:	1961      	adds	r1, r4, r5
 80124a4:	428b      	cmp	r3, r1
 80124a6:	bf04      	itt	eq
 80124a8:	6819      	ldreq	r1, [r3, #0]
 80124aa:	685b      	ldreq	r3, [r3, #4]
 80124ac:	6063      	str	r3, [r4, #4]
 80124ae:	bf04      	itt	eq
 80124b0:	1949      	addeq	r1, r1, r5
 80124b2:	6021      	streq	r1, [r4, #0]
 80124b4:	6054      	str	r4, [r2, #4]
 80124b6:	e7c7      	b.n	8012448 <_free_r+0x28>
 80124b8:	b003      	add	sp, #12
 80124ba:	bd30      	pop	{r4, r5, pc}
 80124bc:	200059ec 	.word	0x200059ec

080124c0 <_malloc_r>:
 80124c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124c2:	1ccd      	adds	r5, r1, #3
 80124c4:	f025 0503 	bic.w	r5, r5, #3
 80124c8:	3508      	adds	r5, #8
 80124ca:	2d0c      	cmp	r5, #12
 80124cc:	bf38      	it	cc
 80124ce:	250c      	movcc	r5, #12
 80124d0:	2d00      	cmp	r5, #0
 80124d2:	4606      	mov	r6, r0
 80124d4:	db01      	blt.n	80124da <_malloc_r+0x1a>
 80124d6:	42a9      	cmp	r1, r5
 80124d8:	d903      	bls.n	80124e2 <_malloc_r+0x22>
 80124da:	230c      	movs	r3, #12
 80124dc:	6033      	str	r3, [r6, #0]
 80124de:	2000      	movs	r0, #0
 80124e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80124e2:	f003 fff7 	bl	80164d4 <__malloc_lock>
 80124e6:	4921      	ldr	r1, [pc, #132]	; (801256c <_malloc_r+0xac>)
 80124e8:	680a      	ldr	r2, [r1, #0]
 80124ea:	4614      	mov	r4, r2
 80124ec:	b99c      	cbnz	r4, 8012516 <_malloc_r+0x56>
 80124ee:	4f20      	ldr	r7, [pc, #128]	; (8012570 <_malloc_r+0xb0>)
 80124f0:	683b      	ldr	r3, [r7, #0]
 80124f2:	b923      	cbnz	r3, 80124fe <_malloc_r+0x3e>
 80124f4:	4621      	mov	r1, r4
 80124f6:	4630      	mov	r0, r6
 80124f8:	f000 ffae 	bl	8013458 <_sbrk_r>
 80124fc:	6038      	str	r0, [r7, #0]
 80124fe:	4629      	mov	r1, r5
 8012500:	4630      	mov	r0, r6
 8012502:	f000 ffa9 	bl	8013458 <_sbrk_r>
 8012506:	1c43      	adds	r3, r0, #1
 8012508:	d123      	bne.n	8012552 <_malloc_r+0x92>
 801250a:	230c      	movs	r3, #12
 801250c:	6033      	str	r3, [r6, #0]
 801250e:	4630      	mov	r0, r6
 8012510:	f003 ffe6 	bl	80164e0 <__malloc_unlock>
 8012514:	e7e3      	b.n	80124de <_malloc_r+0x1e>
 8012516:	6823      	ldr	r3, [r4, #0]
 8012518:	1b5b      	subs	r3, r3, r5
 801251a:	d417      	bmi.n	801254c <_malloc_r+0x8c>
 801251c:	2b0b      	cmp	r3, #11
 801251e:	d903      	bls.n	8012528 <_malloc_r+0x68>
 8012520:	6023      	str	r3, [r4, #0]
 8012522:	441c      	add	r4, r3
 8012524:	6025      	str	r5, [r4, #0]
 8012526:	e004      	b.n	8012532 <_malloc_r+0x72>
 8012528:	6863      	ldr	r3, [r4, #4]
 801252a:	42a2      	cmp	r2, r4
 801252c:	bf0c      	ite	eq
 801252e:	600b      	streq	r3, [r1, #0]
 8012530:	6053      	strne	r3, [r2, #4]
 8012532:	4630      	mov	r0, r6
 8012534:	f003 ffd4 	bl	80164e0 <__malloc_unlock>
 8012538:	f104 000b 	add.w	r0, r4, #11
 801253c:	1d23      	adds	r3, r4, #4
 801253e:	f020 0007 	bic.w	r0, r0, #7
 8012542:	1ac2      	subs	r2, r0, r3
 8012544:	d0cc      	beq.n	80124e0 <_malloc_r+0x20>
 8012546:	1a1b      	subs	r3, r3, r0
 8012548:	50a3      	str	r3, [r4, r2]
 801254a:	e7c9      	b.n	80124e0 <_malloc_r+0x20>
 801254c:	4622      	mov	r2, r4
 801254e:	6864      	ldr	r4, [r4, #4]
 8012550:	e7cc      	b.n	80124ec <_malloc_r+0x2c>
 8012552:	1cc4      	adds	r4, r0, #3
 8012554:	f024 0403 	bic.w	r4, r4, #3
 8012558:	42a0      	cmp	r0, r4
 801255a:	d0e3      	beq.n	8012524 <_malloc_r+0x64>
 801255c:	1a21      	subs	r1, r4, r0
 801255e:	4630      	mov	r0, r6
 8012560:	f000 ff7a 	bl	8013458 <_sbrk_r>
 8012564:	3001      	adds	r0, #1
 8012566:	d1dd      	bne.n	8012524 <_malloc_r+0x64>
 8012568:	e7cf      	b.n	801250a <_malloc_r+0x4a>
 801256a:	bf00      	nop
 801256c:	200059ec 	.word	0x200059ec
 8012570:	200059f0 	.word	0x200059f0

08012574 <__cvt>:
 8012574:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012578:	ec55 4b10 	vmov	r4, r5, d0
 801257c:	2d00      	cmp	r5, #0
 801257e:	460e      	mov	r6, r1
 8012580:	4619      	mov	r1, r3
 8012582:	462b      	mov	r3, r5
 8012584:	bfbb      	ittet	lt
 8012586:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801258a:	461d      	movlt	r5, r3
 801258c:	2300      	movge	r3, #0
 801258e:	232d      	movlt	r3, #45	; 0x2d
 8012590:	700b      	strb	r3, [r1, #0]
 8012592:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012594:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012598:	4691      	mov	r9, r2
 801259a:	f023 0820 	bic.w	r8, r3, #32
 801259e:	bfbc      	itt	lt
 80125a0:	4622      	movlt	r2, r4
 80125a2:	4614      	movlt	r4, r2
 80125a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80125a8:	d005      	beq.n	80125b6 <__cvt+0x42>
 80125aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80125ae:	d100      	bne.n	80125b2 <__cvt+0x3e>
 80125b0:	3601      	adds	r6, #1
 80125b2:	2102      	movs	r1, #2
 80125b4:	e000      	b.n	80125b8 <__cvt+0x44>
 80125b6:	2103      	movs	r1, #3
 80125b8:	ab03      	add	r3, sp, #12
 80125ba:	9301      	str	r3, [sp, #4]
 80125bc:	ab02      	add	r3, sp, #8
 80125be:	9300      	str	r3, [sp, #0]
 80125c0:	ec45 4b10 	vmov	d0, r4, r5
 80125c4:	4653      	mov	r3, sl
 80125c6:	4632      	mov	r2, r6
 80125c8:	f002 fbd2 	bl	8014d70 <_dtoa_r>
 80125cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80125d0:	4607      	mov	r7, r0
 80125d2:	d102      	bne.n	80125da <__cvt+0x66>
 80125d4:	f019 0f01 	tst.w	r9, #1
 80125d8:	d022      	beq.n	8012620 <__cvt+0xac>
 80125da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80125de:	eb07 0906 	add.w	r9, r7, r6
 80125e2:	d110      	bne.n	8012606 <__cvt+0x92>
 80125e4:	783b      	ldrb	r3, [r7, #0]
 80125e6:	2b30      	cmp	r3, #48	; 0x30
 80125e8:	d10a      	bne.n	8012600 <__cvt+0x8c>
 80125ea:	2200      	movs	r2, #0
 80125ec:	2300      	movs	r3, #0
 80125ee:	4620      	mov	r0, r4
 80125f0:	4629      	mov	r1, r5
 80125f2:	f7ee fa89 	bl	8000b08 <__aeabi_dcmpeq>
 80125f6:	b918      	cbnz	r0, 8012600 <__cvt+0x8c>
 80125f8:	f1c6 0601 	rsb	r6, r6, #1
 80125fc:	f8ca 6000 	str.w	r6, [sl]
 8012600:	f8da 3000 	ldr.w	r3, [sl]
 8012604:	4499      	add	r9, r3
 8012606:	2200      	movs	r2, #0
 8012608:	2300      	movs	r3, #0
 801260a:	4620      	mov	r0, r4
 801260c:	4629      	mov	r1, r5
 801260e:	f7ee fa7b 	bl	8000b08 <__aeabi_dcmpeq>
 8012612:	b108      	cbz	r0, 8012618 <__cvt+0xa4>
 8012614:	f8cd 900c 	str.w	r9, [sp, #12]
 8012618:	2230      	movs	r2, #48	; 0x30
 801261a:	9b03      	ldr	r3, [sp, #12]
 801261c:	454b      	cmp	r3, r9
 801261e:	d307      	bcc.n	8012630 <__cvt+0xbc>
 8012620:	9b03      	ldr	r3, [sp, #12]
 8012622:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012624:	1bdb      	subs	r3, r3, r7
 8012626:	4638      	mov	r0, r7
 8012628:	6013      	str	r3, [r2, #0]
 801262a:	b004      	add	sp, #16
 801262c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012630:	1c59      	adds	r1, r3, #1
 8012632:	9103      	str	r1, [sp, #12]
 8012634:	701a      	strb	r2, [r3, #0]
 8012636:	e7f0      	b.n	801261a <__cvt+0xa6>

08012638 <__exponent>:
 8012638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801263a:	4603      	mov	r3, r0
 801263c:	2900      	cmp	r1, #0
 801263e:	bfb8      	it	lt
 8012640:	4249      	neglt	r1, r1
 8012642:	f803 2b02 	strb.w	r2, [r3], #2
 8012646:	bfb4      	ite	lt
 8012648:	222d      	movlt	r2, #45	; 0x2d
 801264a:	222b      	movge	r2, #43	; 0x2b
 801264c:	2909      	cmp	r1, #9
 801264e:	7042      	strb	r2, [r0, #1]
 8012650:	dd2a      	ble.n	80126a8 <__exponent+0x70>
 8012652:	f10d 0407 	add.w	r4, sp, #7
 8012656:	46a4      	mov	ip, r4
 8012658:	270a      	movs	r7, #10
 801265a:	46a6      	mov	lr, r4
 801265c:	460a      	mov	r2, r1
 801265e:	fb91 f6f7 	sdiv	r6, r1, r7
 8012662:	fb07 1516 	mls	r5, r7, r6, r1
 8012666:	3530      	adds	r5, #48	; 0x30
 8012668:	2a63      	cmp	r2, #99	; 0x63
 801266a:	f104 34ff 	add.w	r4, r4, #4294967295
 801266e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012672:	4631      	mov	r1, r6
 8012674:	dcf1      	bgt.n	801265a <__exponent+0x22>
 8012676:	3130      	adds	r1, #48	; 0x30
 8012678:	f1ae 0502 	sub.w	r5, lr, #2
 801267c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012680:	1c44      	adds	r4, r0, #1
 8012682:	4629      	mov	r1, r5
 8012684:	4561      	cmp	r1, ip
 8012686:	d30a      	bcc.n	801269e <__exponent+0x66>
 8012688:	f10d 0209 	add.w	r2, sp, #9
 801268c:	eba2 020e 	sub.w	r2, r2, lr
 8012690:	4565      	cmp	r5, ip
 8012692:	bf88      	it	hi
 8012694:	2200      	movhi	r2, #0
 8012696:	4413      	add	r3, r2
 8012698:	1a18      	subs	r0, r3, r0
 801269a:	b003      	add	sp, #12
 801269c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801269e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80126a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80126a6:	e7ed      	b.n	8012684 <__exponent+0x4c>
 80126a8:	2330      	movs	r3, #48	; 0x30
 80126aa:	3130      	adds	r1, #48	; 0x30
 80126ac:	7083      	strb	r3, [r0, #2]
 80126ae:	70c1      	strb	r1, [r0, #3]
 80126b0:	1d03      	adds	r3, r0, #4
 80126b2:	e7f1      	b.n	8012698 <__exponent+0x60>

080126b4 <_printf_float>:
 80126b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126b8:	ed2d 8b02 	vpush	{d8}
 80126bc:	b08d      	sub	sp, #52	; 0x34
 80126be:	460c      	mov	r4, r1
 80126c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80126c4:	4616      	mov	r6, r2
 80126c6:	461f      	mov	r7, r3
 80126c8:	4605      	mov	r5, r0
 80126ca:	f003 fe77 	bl	80163bc <_localeconv_r>
 80126ce:	f8d0 a000 	ldr.w	sl, [r0]
 80126d2:	4650      	mov	r0, sl
 80126d4:	f7ed fd96 	bl	8000204 <strlen>
 80126d8:	2300      	movs	r3, #0
 80126da:	930a      	str	r3, [sp, #40]	; 0x28
 80126dc:	6823      	ldr	r3, [r4, #0]
 80126de:	9305      	str	r3, [sp, #20]
 80126e0:	f8d8 3000 	ldr.w	r3, [r8]
 80126e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80126e8:	3307      	adds	r3, #7
 80126ea:	f023 0307 	bic.w	r3, r3, #7
 80126ee:	f103 0208 	add.w	r2, r3, #8
 80126f2:	f8c8 2000 	str.w	r2, [r8]
 80126f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80126fe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012702:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012706:	9307      	str	r3, [sp, #28]
 8012708:	f8cd 8018 	str.w	r8, [sp, #24]
 801270c:	ee08 0a10 	vmov	s16, r0
 8012710:	4b9f      	ldr	r3, [pc, #636]	; (8012990 <_printf_float+0x2dc>)
 8012712:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012716:	f04f 32ff 	mov.w	r2, #4294967295
 801271a:	f7ee fa27 	bl	8000b6c <__aeabi_dcmpun>
 801271e:	bb88      	cbnz	r0, 8012784 <_printf_float+0xd0>
 8012720:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012724:	4b9a      	ldr	r3, [pc, #616]	; (8012990 <_printf_float+0x2dc>)
 8012726:	f04f 32ff 	mov.w	r2, #4294967295
 801272a:	f7ee fa01 	bl	8000b30 <__aeabi_dcmple>
 801272e:	bb48      	cbnz	r0, 8012784 <_printf_float+0xd0>
 8012730:	2200      	movs	r2, #0
 8012732:	2300      	movs	r3, #0
 8012734:	4640      	mov	r0, r8
 8012736:	4649      	mov	r1, r9
 8012738:	f7ee f9f0 	bl	8000b1c <__aeabi_dcmplt>
 801273c:	b110      	cbz	r0, 8012744 <_printf_float+0x90>
 801273e:	232d      	movs	r3, #45	; 0x2d
 8012740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012744:	4b93      	ldr	r3, [pc, #588]	; (8012994 <_printf_float+0x2e0>)
 8012746:	4894      	ldr	r0, [pc, #592]	; (8012998 <_printf_float+0x2e4>)
 8012748:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801274c:	bf94      	ite	ls
 801274e:	4698      	movls	r8, r3
 8012750:	4680      	movhi	r8, r0
 8012752:	2303      	movs	r3, #3
 8012754:	6123      	str	r3, [r4, #16]
 8012756:	9b05      	ldr	r3, [sp, #20]
 8012758:	f023 0204 	bic.w	r2, r3, #4
 801275c:	6022      	str	r2, [r4, #0]
 801275e:	f04f 0900 	mov.w	r9, #0
 8012762:	9700      	str	r7, [sp, #0]
 8012764:	4633      	mov	r3, r6
 8012766:	aa0b      	add	r2, sp, #44	; 0x2c
 8012768:	4621      	mov	r1, r4
 801276a:	4628      	mov	r0, r5
 801276c:	f000 f9d8 	bl	8012b20 <_printf_common>
 8012770:	3001      	adds	r0, #1
 8012772:	f040 8090 	bne.w	8012896 <_printf_float+0x1e2>
 8012776:	f04f 30ff 	mov.w	r0, #4294967295
 801277a:	b00d      	add	sp, #52	; 0x34
 801277c:	ecbd 8b02 	vpop	{d8}
 8012780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012784:	4642      	mov	r2, r8
 8012786:	464b      	mov	r3, r9
 8012788:	4640      	mov	r0, r8
 801278a:	4649      	mov	r1, r9
 801278c:	f7ee f9ee 	bl	8000b6c <__aeabi_dcmpun>
 8012790:	b140      	cbz	r0, 80127a4 <_printf_float+0xf0>
 8012792:	464b      	mov	r3, r9
 8012794:	2b00      	cmp	r3, #0
 8012796:	bfbc      	itt	lt
 8012798:	232d      	movlt	r3, #45	; 0x2d
 801279a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801279e:	487f      	ldr	r0, [pc, #508]	; (801299c <_printf_float+0x2e8>)
 80127a0:	4b7f      	ldr	r3, [pc, #508]	; (80129a0 <_printf_float+0x2ec>)
 80127a2:	e7d1      	b.n	8012748 <_printf_float+0x94>
 80127a4:	6863      	ldr	r3, [r4, #4]
 80127a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80127aa:	9206      	str	r2, [sp, #24]
 80127ac:	1c5a      	adds	r2, r3, #1
 80127ae:	d13f      	bne.n	8012830 <_printf_float+0x17c>
 80127b0:	2306      	movs	r3, #6
 80127b2:	6063      	str	r3, [r4, #4]
 80127b4:	9b05      	ldr	r3, [sp, #20]
 80127b6:	6861      	ldr	r1, [r4, #4]
 80127b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80127bc:	2300      	movs	r3, #0
 80127be:	9303      	str	r3, [sp, #12]
 80127c0:	ab0a      	add	r3, sp, #40	; 0x28
 80127c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80127c6:	ab09      	add	r3, sp, #36	; 0x24
 80127c8:	ec49 8b10 	vmov	d0, r8, r9
 80127cc:	9300      	str	r3, [sp, #0]
 80127ce:	6022      	str	r2, [r4, #0]
 80127d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80127d4:	4628      	mov	r0, r5
 80127d6:	f7ff fecd 	bl	8012574 <__cvt>
 80127da:	9b06      	ldr	r3, [sp, #24]
 80127dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80127de:	2b47      	cmp	r3, #71	; 0x47
 80127e0:	4680      	mov	r8, r0
 80127e2:	d108      	bne.n	80127f6 <_printf_float+0x142>
 80127e4:	1cc8      	adds	r0, r1, #3
 80127e6:	db02      	blt.n	80127ee <_printf_float+0x13a>
 80127e8:	6863      	ldr	r3, [r4, #4]
 80127ea:	4299      	cmp	r1, r3
 80127ec:	dd41      	ble.n	8012872 <_printf_float+0x1be>
 80127ee:	f1ab 0b02 	sub.w	fp, fp, #2
 80127f2:	fa5f fb8b 	uxtb.w	fp, fp
 80127f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80127fa:	d820      	bhi.n	801283e <_printf_float+0x18a>
 80127fc:	3901      	subs	r1, #1
 80127fe:	465a      	mov	r2, fp
 8012800:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012804:	9109      	str	r1, [sp, #36]	; 0x24
 8012806:	f7ff ff17 	bl	8012638 <__exponent>
 801280a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801280c:	1813      	adds	r3, r2, r0
 801280e:	2a01      	cmp	r2, #1
 8012810:	4681      	mov	r9, r0
 8012812:	6123      	str	r3, [r4, #16]
 8012814:	dc02      	bgt.n	801281c <_printf_float+0x168>
 8012816:	6822      	ldr	r2, [r4, #0]
 8012818:	07d2      	lsls	r2, r2, #31
 801281a:	d501      	bpl.n	8012820 <_printf_float+0x16c>
 801281c:	3301      	adds	r3, #1
 801281e:	6123      	str	r3, [r4, #16]
 8012820:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012824:	2b00      	cmp	r3, #0
 8012826:	d09c      	beq.n	8012762 <_printf_float+0xae>
 8012828:	232d      	movs	r3, #45	; 0x2d
 801282a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801282e:	e798      	b.n	8012762 <_printf_float+0xae>
 8012830:	9a06      	ldr	r2, [sp, #24]
 8012832:	2a47      	cmp	r2, #71	; 0x47
 8012834:	d1be      	bne.n	80127b4 <_printf_float+0x100>
 8012836:	2b00      	cmp	r3, #0
 8012838:	d1bc      	bne.n	80127b4 <_printf_float+0x100>
 801283a:	2301      	movs	r3, #1
 801283c:	e7b9      	b.n	80127b2 <_printf_float+0xfe>
 801283e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8012842:	d118      	bne.n	8012876 <_printf_float+0x1c2>
 8012844:	2900      	cmp	r1, #0
 8012846:	6863      	ldr	r3, [r4, #4]
 8012848:	dd0b      	ble.n	8012862 <_printf_float+0x1ae>
 801284a:	6121      	str	r1, [r4, #16]
 801284c:	b913      	cbnz	r3, 8012854 <_printf_float+0x1a0>
 801284e:	6822      	ldr	r2, [r4, #0]
 8012850:	07d0      	lsls	r0, r2, #31
 8012852:	d502      	bpl.n	801285a <_printf_float+0x1a6>
 8012854:	3301      	adds	r3, #1
 8012856:	440b      	add	r3, r1
 8012858:	6123      	str	r3, [r4, #16]
 801285a:	65a1      	str	r1, [r4, #88]	; 0x58
 801285c:	f04f 0900 	mov.w	r9, #0
 8012860:	e7de      	b.n	8012820 <_printf_float+0x16c>
 8012862:	b913      	cbnz	r3, 801286a <_printf_float+0x1b6>
 8012864:	6822      	ldr	r2, [r4, #0]
 8012866:	07d2      	lsls	r2, r2, #31
 8012868:	d501      	bpl.n	801286e <_printf_float+0x1ba>
 801286a:	3302      	adds	r3, #2
 801286c:	e7f4      	b.n	8012858 <_printf_float+0x1a4>
 801286e:	2301      	movs	r3, #1
 8012870:	e7f2      	b.n	8012858 <_printf_float+0x1a4>
 8012872:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012878:	4299      	cmp	r1, r3
 801287a:	db05      	blt.n	8012888 <_printf_float+0x1d4>
 801287c:	6823      	ldr	r3, [r4, #0]
 801287e:	6121      	str	r1, [r4, #16]
 8012880:	07d8      	lsls	r0, r3, #31
 8012882:	d5ea      	bpl.n	801285a <_printf_float+0x1a6>
 8012884:	1c4b      	adds	r3, r1, #1
 8012886:	e7e7      	b.n	8012858 <_printf_float+0x1a4>
 8012888:	2900      	cmp	r1, #0
 801288a:	bfd4      	ite	le
 801288c:	f1c1 0202 	rsble	r2, r1, #2
 8012890:	2201      	movgt	r2, #1
 8012892:	4413      	add	r3, r2
 8012894:	e7e0      	b.n	8012858 <_printf_float+0x1a4>
 8012896:	6823      	ldr	r3, [r4, #0]
 8012898:	055a      	lsls	r2, r3, #21
 801289a:	d407      	bmi.n	80128ac <_printf_float+0x1f8>
 801289c:	6923      	ldr	r3, [r4, #16]
 801289e:	4642      	mov	r2, r8
 80128a0:	4631      	mov	r1, r6
 80128a2:	4628      	mov	r0, r5
 80128a4:	47b8      	blx	r7
 80128a6:	3001      	adds	r0, #1
 80128a8:	d12c      	bne.n	8012904 <_printf_float+0x250>
 80128aa:	e764      	b.n	8012776 <_printf_float+0xc2>
 80128ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80128b0:	f240 80e0 	bls.w	8012a74 <_printf_float+0x3c0>
 80128b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80128b8:	2200      	movs	r2, #0
 80128ba:	2300      	movs	r3, #0
 80128bc:	f7ee f924 	bl	8000b08 <__aeabi_dcmpeq>
 80128c0:	2800      	cmp	r0, #0
 80128c2:	d034      	beq.n	801292e <_printf_float+0x27a>
 80128c4:	4a37      	ldr	r2, [pc, #220]	; (80129a4 <_printf_float+0x2f0>)
 80128c6:	2301      	movs	r3, #1
 80128c8:	4631      	mov	r1, r6
 80128ca:	4628      	mov	r0, r5
 80128cc:	47b8      	blx	r7
 80128ce:	3001      	adds	r0, #1
 80128d0:	f43f af51 	beq.w	8012776 <_printf_float+0xc2>
 80128d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80128d8:	429a      	cmp	r2, r3
 80128da:	db02      	blt.n	80128e2 <_printf_float+0x22e>
 80128dc:	6823      	ldr	r3, [r4, #0]
 80128de:	07d8      	lsls	r0, r3, #31
 80128e0:	d510      	bpl.n	8012904 <_printf_float+0x250>
 80128e2:	ee18 3a10 	vmov	r3, s16
 80128e6:	4652      	mov	r2, sl
 80128e8:	4631      	mov	r1, r6
 80128ea:	4628      	mov	r0, r5
 80128ec:	47b8      	blx	r7
 80128ee:	3001      	adds	r0, #1
 80128f0:	f43f af41 	beq.w	8012776 <_printf_float+0xc2>
 80128f4:	f04f 0800 	mov.w	r8, #0
 80128f8:	f104 091a 	add.w	r9, r4, #26
 80128fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128fe:	3b01      	subs	r3, #1
 8012900:	4543      	cmp	r3, r8
 8012902:	dc09      	bgt.n	8012918 <_printf_float+0x264>
 8012904:	6823      	ldr	r3, [r4, #0]
 8012906:	079b      	lsls	r3, r3, #30
 8012908:	f100 8105 	bmi.w	8012b16 <_printf_float+0x462>
 801290c:	68e0      	ldr	r0, [r4, #12]
 801290e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012910:	4298      	cmp	r0, r3
 8012912:	bfb8      	it	lt
 8012914:	4618      	movlt	r0, r3
 8012916:	e730      	b.n	801277a <_printf_float+0xc6>
 8012918:	2301      	movs	r3, #1
 801291a:	464a      	mov	r2, r9
 801291c:	4631      	mov	r1, r6
 801291e:	4628      	mov	r0, r5
 8012920:	47b8      	blx	r7
 8012922:	3001      	adds	r0, #1
 8012924:	f43f af27 	beq.w	8012776 <_printf_float+0xc2>
 8012928:	f108 0801 	add.w	r8, r8, #1
 801292c:	e7e6      	b.n	80128fc <_printf_float+0x248>
 801292e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012930:	2b00      	cmp	r3, #0
 8012932:	dc39      	bgt.n	80129a8 <_printf_float+0x2f4>
 8012934:	4a1b      	ldr	r2, [pc, #108]	; (80129a4 <_printf_float+0x2f0>)
 8012936:	2301      	movs	r3, #1
 8012938:	4631      	mov	r1, r6
 801293a:	4628      	mov	r0, r5
 801293c:	47b8      	blx	r7
 801293e:	3001      	adds	r0, #1
 8012940:	f43f af19 	beq.w	8012776 <_printf_float+0xc2>
 8012944:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012948:	4313      	orrs	r3, r2
 801294a:	d102      	bne.n	8012952 <_printf_float+0x29e>
 801294c:	6823      	ldr	r3, [r4, #0]
 801294e:	07d9      	lsls	r1, r3, #31
 8012950:	d5d8      	bpl.n	8012904 <_printf_float+0x250>
 8012952:	ee18 3a10 	vmov	r3, s16
 8012956:	4652      	mov	r2, sl
 8012958:	4631      	mov	r1, r6
 801295a:	4628      	mov	r0, r5
 801295c:	47b8      	blx	r7
 801295e:	3001      	adds	r0, #1
 8012960:	f43f af09 	beq.w	8012776 <_printf_float+0xc2>
 8012964:	f04f 0900 	mov.w	r9, #0
 8012968:	f104 0a1a 	add.w	sl, r4, #26
 801296c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801296e:	425b      	negs	r3, r3
 8012970:	454b      	cmp	r3, r9
 8012972:	dc01      	bgt.n	8012978 <_printf_float+0x2c4>
 8012974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012976:	e792      	b.n	801289e <_printf_float+0x1ea>
 8012978:	2301      	movs	r3, #1
 801297a:	4652      	mov	r2, sl
 801297c:	4631      	mov	r1, r6
 801297e:	4628      	mov	r0, r5
 8012980:	47b8      	blx	r7
 8012982:	3001      	adds	r0, #1
 8012984:	f43f aef7 	beq.w	8012776 <_printf_float+0xc2>
 8012988:	f109 0901 	add.w	r9, r9, #1
 801298c:	e7ee      	b.n	801296c <_printf_float+0x2b8>
 801298e:	bf00      	nop
 8012990:	7fefffff 	.word	0x7fefffff
 8012994:	08019db4 	.word	0x08019db4
 8012998:	08019db8 	.word	0x08019db8
 801299c:	08019dc0 	.word	0x08019dc0
 80129a0:	08019dbc 	.word	0x08019dbc
 80129a4:	0801a189 	.word	0x0801a189
 80129a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80129aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80129ac:	429a      	cmp	r2, r3
 80129ae:	bfa8      	it	ge
 80129b0:	461a      	movge	r2, r3
 80129b2:	2a00      	cmp	r2, #0
 80129b4:	4691      	mov	r9, r2
 80129b6:	dc37      	bgt.n	8012a28 <_printf_float+0x374>
 80129b8:	f04f 0b00 	mov.w	fp, #0
 80129bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80129c0:	f104 021a 	add.w	r2, r4, #26
 80129c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80129c6:	9305      	str	r3, [sp, #20]
 80129c8:	eba3 0309 	sub.w	r3, r3, r9
 80129cc:	455b      	cmp	r3, fp
 80129ce:	dc33      	bgt.n	8012a38 <_printf_float+0x384>
 80129d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80129d4:	429a      	cmp	r2, r3
 80129d6:	db3b      	blt.n	8012a50 <_printf_float+0x39c>
 80129d8:	6823      	ldr	r3, [r4, #0]
 80129da:	07da      	lsls	r2, r3, #31
 80129dc:	d438      	bmi.n	8012a50 <_printf_float+0x39c>
 80129de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80129e0:	9b05      	ldr	r3, [sp, #20]
 80129e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80129e4:	1ad3      	subs	r3, r2, r3
 80129e6:	eba2 0901 	sub.w	r9, r2, r1
 80129ea:	4599      	cmp	r9, r3
 80129ec:	bfa8      	it	ge
 80129ee:	4699      	movge	r9, r3
 80129f0:	f1b9 0f00 	cmp.w	r9, #0
 80129f4:	dc35      	bgt.n	8012a62 <_printf_float+0x3ae>
 80129f6:	f04f 0800 	mov.w	r8, #0
 80129fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80129fe:	f104 0a1a 	add.w	sl, r4, #26
 8012a02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012a06:	1a9b      	subs	r3, r3, r2
 8012a08:	eba3 0309 	sub.w	r3, r3, r9
 8012a0c:	4543      	cmp	r3, r8
 8012a0e:	f77f af79 	ble.w	8012904 <_printf_float+0x250>
 8012a12:	2301      	movs	r3, #1
 8012a14:	4652      	mov	r2, sl
 8012a16:	4631      	mov	r1, r6
 8012a18:	4628      	mov	r0, r5
 8012a1a:	47b8      	blx	r7
 8012a1c:	3001      	adds	r0, #1
 8012a1e:	f43f aeaa 	beq.w	8012776 <_printf_float+0xc2>
 8012a22:	f108 0801 	add.w	r8, r8, #1
 8012a26:	e7ec      	b.n	8012a02 <_printf_float+0x34e>
 8012a28:	4613      	mov	r3, r2
 8012a2a:	4631      	mov	r1, r6
 8012a2c:	4642      	mov	r2, r8
 8012a2e:	4628      	mov	r0, r5
 8012a30:	47b8      	blx	r7
 8012a32:	3001      	adds	r0, #1
 8012a34:	d1c0      	bne.n	80129b8 <_printf_float+0x304>
 8012a36:	e69e      	b.n	8012776 <_printf_float+0xc2>
 8012a38:	2301      	movs	r3, #1
 8012a3a:	4631      	mov	r1, r6
 8012a3c:	4628      	mov	r0, r5
 8012a3e:	9205      	str	r2, [sp, #20]
 8012a40:	47b8      	blx	r7
 8012a42:	3001      	adds	r0, #1
 8012a44:	f43f ae97 	beq.w	8012776 <_printf_float+0xc2>
 8012a48:	9a05      	ldr	r2, [sp, #20]
 8012a4a:	f10b 0b01 	add.w	fp, fp, #1
 8012a4e:	e7b9      	b.n	80129c4 <_printf_float+0x310>
 8012a50:	ee18 3a10 	vmov	r3, s16
 8012a54:	4652      	mov	r2, sl
 8012a56:	4631      	mov	r1, r6
 8012a58:	4628      	mov	r0, r5
 8012a5a:	47b8      	blx	r7
 8012a5c:	3001      	adds	r0, #1
 8012a5e:	d1be      	bne.n	80129de <_printf_float+0x32a>
 8012a60:	e689      	b.n	8012776 <_printf_float+0xc2>
 8012a62:	9a05      	ldr	r2, [sp, #20]
 8012a64:	464b      	mov	r3, r9
 8012a66:	4442      	add	r2, r8
 8012a68:	4631      	mov	r1, r6
 8012a6a:	4628      	mov	r0, r5
 8012a6c:	47b8      	blx	r7
 8012a6e:	3001      	adds	r0, #1
 8012a70:	d1c1      	bne.n	80129f6 <_printf_float+0x342>
 8012a72:	e680      	b.n	8012776 <_printf_float+0xc2>
 8012a74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012a76:	2a01      	cmp	r2, #1
 8012a78:	dc01      	bgt.n	8012a7e <_printf_float+0x3ca>
 8012a7a:	07db      	lsls	r3, r3, #31
 8012a7c:	d538      	bpl.n	8012af0 <_printf_float+0x43c>
 8012a7e:	2301      	movs	r3, #1
 8012a80:	4642      	mov	r2, r8
 8012a82:	4631      	mov	r1, r6
 8012a84:	4628      	mov	r0, r5
 8012a86:	47b8      	blx	r7
 8012a88:	3001      	adds	r0, #1
 8012a8a:	f43f ae74 	beq.w	8012776 <_printf_float+0xc2>
 8012a8e:	ee18 3a10 	vmov	r3, s16
 8012a92:	4652      	mov	r2, sl
 8012a94:	4631      	mov	r1, r6
 8012a96:	4628      	mov	r0, r5
 8012a98:	47b8      	blx	r7
 8012a9a:	3001      	adds	r0, #1
 8012a9c:	f43f ae6b 	beq.w	8012776 <_printf_float+0xc2>
 8012aa0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012aa4:	2200      	movs	r2, #0
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	f7ee f82e 	bl	8000b08 <__aeabi_dcmpeq>
 8012aac:	b9d8      	cbnz	r0, 8012ae6 <_printf_float+0x432>
 8012aae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ab0:	f108 0201 	add.w	r2, r8, #1
 8012ab4:	3b01      	subs	r3, #1
 8012ab6:	4631      	mov	r1, r6
 8012ab8:	4628      	mov	r0, r5
 8012aba:	47b8      	blx	r7
 8012abc:	3001      	adds	r0, #1
 8012abe:	d10e      	bne.n	8012ade <_printf_float+0x42a>
 8012ac0:	e659      	b.n	8012776 <_printf_float+0xc2>
 8012ac2:	2301      	movs	r3, #1
 8012ac4:	4652      	mov	r2, sl
 8012ac6:	4631      	mov	r1, r6
 8012ac8:	4628      	mov	r0, r5
 8012aca:	47b8      	blx	r7
 8012acc:	3001      	adds	r0, #1
 8012ace:	f43f ae52 	beq.w	8012776 <_printf_float+0xc2>
 8012ad2:	f108 0801 	add.w	r8, r8, #1
 8012ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ad8:	3b01      	subs	r3, #1
 8012ada:	4543      	cmp	r3, r8
 8012adc:	dcf1      	bgt.n	8012ac2 <_printf_float+0x40e>
 8012ade:	464b      	mov	r3, r9
 8012ae0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012ae4:	e6dc      	b.n	80128a0 <_printf_float+0x1ec>
 8012ae6:	f04f 0800 	mov.w	r8, #0
 8012aea:	f104 0a1a 	add.w	sl, r4, #26
 8012aee:	e7f2      	b.n	8012ad6 <_printf_float+0x422>
 8012af0:	2301      	movs	r3, #1
 8012af2:	4642      	mov	r2, r8
 8012af4:	e7df      	b.n	8012ab6 <_printf_float+0x402>
 8012af6:	2301      	movs	r3, #1
 8012af8:	464a      	mov	r2, r9
 8012afa:	4631      	mov	r1, r6
 8012afc:	4628      	mov	r0, r5
 8012afe:	47b8      	blx	r7
 8012b00:	3001      	adds	r0, #1
 8012b02:	f43f ae38 	beq.w	8012776 <_printf_float+0xc2>
 8012b06:	f108 0801 	add.w	r8, r8, #1
 8012b0a:	68e3      	ldr	r3, [r4, #12]
 8012b0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012b0e:	1a5b      	subs	r3, r3, r1
 8012b10:	4543      	cmp	r3, r8
 8012b12:	dcf0      	bgt.n	8012af6 <_printf_float+0x442>
 8012b14:	e6fa      	b.n	801290c <_printf_float+0x258>
 8012b16:	f04f 0800 	mov.w	r8, #0
 8012b1a:	f104 0919 	add.w	r9, r4, #25
 8012b1e:	e7f4      	b.n	8012b0a <_printf_float+0x456>

08012b20 <_printf_common>:
 8012b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b24:	4616      	mov	r6, r2
 8012b26:	4699      	mov	r9, r3
 8012b28:	688a      	ldr	r2, [r1, #8]
 8012b2a:	690b      	ldr	r3, [r1, #16]
 8012b2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012b30:	4293      	cmp	r3, r2
 8012b32:	bfb8      	it	lt
 8012b34:	4613      	movlt	r3, r2
 8012b36:	6033      	str	r3, [r6, #0]
 8012b38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012b3c:	4607      	mov	r7, r0
 8012b3e:	460c      	mov	r4, r1
 8012b40:	b10a      	cbz	r2, 8012b46 <_printf_common+0x26>
 8012b42:	3301      	adds	r3, #1
 8012b44:	6033      	str	r3, [r6, #0]
 8012b46:	6823      	ldr	r3, [r4, #0]
 8012b48:	0699      	lsls	r1, r3, #26
 8012b4a:	bf42      	ittt	mi
 8012b4c:	6833      	ldrmi	r3, [r6, #0]
 8012b4e:	3302      	addmi	r3, #2
 8012b50:	6033      	strmi	r3, [r6, #0]
 8012b52:	6825      	ldr	r5, [r4, #0]
 8012b54:	f015 0506 	ands.w	r5, r5, #6
 8012b58:	d106      	bne.n	8012b68 <_printf_common+0x48>
 8012b5a:	f104 0a19 	add.w	sl, r4, #25
 8012b5e:	68e3      	ldr	r3, [r4, #12]
 8012b60:	6832      	ldr	r2, [r6, #0]
 8012b62:	1a9b      	subs	r3, r3, r2
 8012b64:	42ab      	cmp	r3, r5
 8012b66:	dc26      	bgt.n	8012bb6 <_printf_common+0x96>
 8012b68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012b6c:	1e13      	subs	r3, r2, #0
 8012b6e:	6822      	ldr	r2, [r4, #0]
 8012b70:	bf18      	it	ne
 8012b72:	2301      	movne	r3, #1
 8012b74:	0692      	lsls	r2, r2, #26
 8012b76:	d42b      	bmi.n	8012bd0 <_printf_common+0xb0>
 8012b78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012b7c:	4649      	mov	r1, r9
 8012b7e:	4638      	mov	r0, r7
 8012b80:	47c0      	blx	r8
 8012b82:	3001      	adds	r0, #1
 8012b84:	d01e      	beq.n	8012bc4 <_printf_common+0xa4>
 8012b86:	6823      	ldr	r3, [r4, #0]
 8012b88:	68e5      	ldr	r5, [r4, #12]
 8012b8a:	6832      	ldr	r2, [r6, #0]
 8012b8c:	f003 0306 	and.w	r3, r3, #6
 8012b90:	2b04      	cmp	r3, #4
 8012b92:	bf08      	it	eq
 8012b94:	1aad      	subeq	r5, r5, r2
 8012b96:	68a3      	ldr	r3, [r4, #8]
 8012b98:	6922      	ldr	r2, [r4, #16]
 8012b9a:	bf0c      	ite	eq
 8012b9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012ba0:	2500      	movne	r5, #0
 8012ba2:	4293      	cmp	r3, r2
 8012ba4:	bfc4      	itt	gt
 8012ba6:	1a9b      	subgt	r3, r3, r2
 8012ba8:	18ed      	addgt	r5, r5, r3
 8012baa:	2600      	movs	r6, #0
 8012bac:	341a      	adds	r4, #26
 8012bae:	42b5      	cmp	r5, r6
 8012bb0:	d11a      	bne.n	8012be8 <_printf_common+0xc8>
 8012bb2:	2000      	movs	r0, #0
 8012bb4:	e008      	b.n	8012bc8 <_printf_common+0xa8>
 8012bb6:	2301      	movs	r3, #1
 8012bb8:	4652      	mov	r2, sl
 8012bba:	4649      	mov	r1, r9
 8012bbc:	4638      	mov	r0, r7
 8012bbe:	47c0      	blx	r8
 8012bc0:	3001      	adds	r0, #1
 8012bc2:	d103      	bne.n	8012bcc <_printf_common+0xac>
 8012bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8012bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bcc:	3501      	adds	r5, #1
 8012bce:	e7c6      	b.n	8012b5e <_printf_common+0x3e>
 8012bd0:	18e1      	adds	r1, r4, r3
 8012bd2:	1c5a      	adds	r2, r3, #1
 8012bd4:	2030      	movs	r0, #48	; 0x30
 8012bd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012bda:	4422      	add	r2, r4
 8012bdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012be0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012be4:	3302      	adds	r3, #2
 8012be6:	e7c7      	b.n	8012b78 <_printf_common+0x58>
 8012be8:	2301      	movs	r3, #1
 8012bea:	4622      	mov	r2, r4
 8012bec:	4649      	mov	r1, r9
 8012bee:	4638      	mov	r0, r7
 8012bf0:	47c0      	blx	r8
 8012bf2:	3001      	adds	r0, #1
 8012bf4:	d0e6      	beq.n	8012bc4 <_printf_common+0xa4>
 8012bf6:	3601      	adds	r6, #1
 8012bf8:	e7d9      	b.n	8012bae <_printf_common+0x8e>
	...

08012bfc <_printf_i>:
 8012bfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012c00:	460c      	mov	r4, r1
 8012c02:	4691      	mov	r9, r2
 8012c04:	7e27      	ldrb	r7, [r4, #24]
 8012c06:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012c08:	2f78      	cmp	r7, #120	; 0x78
 8012c0a:	4680      	mov	r8, r0
 8012c0c:	469a      	mov	sl, r3
 8012c0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012c12:	d807      	bhi.n	8012c24 <_printf_i+0x28>
 8012c14:	2f62      	cmp	r7, #98	; 0x62
 8012c16:	d80a      	bhi.n	8012c2e <_printf_i+0x32>
 8012c18:	2f00      	cmp	r7, #0
 8012c1a:	f000 80d8 	beq.w	8012dce <_printf_i+0x1d2>
 8012c1e:	2f58      	cmp	r7, #88	; 0x58
 8012c20:	f000 80a3 	beq.w	8012d6a <_printf_i+0x16e>
 8012c24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012c28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012c2c:	e03a      	b.n	8012ca4 <_printf_i+0xa8>
 8012c2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012c32:	2b15      	cmp	r3, #21
 8012c34:	d8f6      	bhi.n	8012c24 <_printf_i+0x28>
 8012c36:	a001      	add	r0, pc, #4	; (adr r0, 8012c3c <_printf_i+0x40>)
 8012c38:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012c3c:	08012c95 	.word	0x08012c95
 8012c40:	08012ca9 	.word	0x08012ca9
 8012c44:	08012c25 	.word	0x08012c25
 8012c48:	08012c25 	.word	0x08012c25
 8012c4c:	08012c25 	.word	0x08012c25
 8012c50:	08012c25 	.word	0x08012c25
 8012c54:	08012ca9 	.word	0x08012ca9
 8012c58:	08012c25 	.word	0x08012c25
 8012c5c:	08012c25 	.word	0x08012c25
 8012c60:	08012c25 	.word	0x08012c25
 8012c64:	08012c25 	.word	0x08012c25
 8012c68:	08012db5 	.word	0x08012db5
 8012c6c:	08012cd9 	.word	0x08012cd9
 8012c70:	08012d97 	.word	0x08012d97
 8012c74:	08012c25 	.word	0x08012c25
 8012c78:	08012c25 	.word	0x08012c25
 8012c7c:	08012dd7 	.word	0x08012dd7
 8012c80:	08012c25 	.word	0x08012c25
 8012c84:	08012cd9 	.word	0x08012cd9
 8012c88:	08012c25 	.word	0x08012c25
 8012c8c:	08012c25 	.word	0x08012c25
 8012c90:	08012d9f 	.word	0x08012d9f
 8012c94:	680b      	ldr	r3, [r1, #0]
 8012c96:	1d1a      	adds	r2, r3, #4
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	600a      	str	r2, [r1, #0]
 8012c9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012ca0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012ca4:	2301      	movs	r3, #1
 8012ca6:	e0a3      	b.n	8012df0 <_printf_i+0x1f4>
 8012ca8:	6825      	ldr	r5, [r4, #0]
 8012caa:	6808      	ldr	r0, [r1, #0]
 8012cac:	062e      	lsls	r6, r5, #24
 8012cae:	f100 0304 	add.w	r3, r0, #4
 8012cb2:	d50a      	bpl.n	8012cca <_printf_i+0xce>
 8012cb4:	6805      	ldr	r5, [r0, #0]
 8012cb6:	600b      	str	r3, [r1, #0]
 8012cb8:	2d00      	cmp	r5, #0
 8012cba:	da03      	bge.n	8012cc4 <_printf_i+0xc8>
 8012cbc:	232d      	movs	r3, #45	; 0x2d
 8012cbe:	426d      	negs	r5, r5
 8012cc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012cc4:	485e      	ldr	r0, [pc, #376]	; (8012e40 <_printf_i+0x244>)
 8012cc6:	230a      	movs	r3, #10
 8012cc8:	e019      	b.n	8012cfe <_printf_i+0x102>
 8012cca:	f015 0f40 	tst.w	r5, #64	; 0x40
 8012cce:	6805      	ldr	r5, [r0, #0]
 8012cd0:	600b      	str	r3, [r1, #0]
 8012cd2:	bf18      	it	ne
 8012cd4:	b22d      	sxthne	r5, r5
 8012cd6:	e7ef      	b.n	8012cb8 <_printf_i+0xbc>
 8012cd8:	680b      	ldr	r3, [r1, #0]
 8012cda:	6825      	ldr	r5, [r4, #0]
 8012cdc:	1d18      	adds	r0, r3, #4
 8012cde:	6008      	str	r0, [r1, #0]
 8012ce0:	0628      	lsls	r0, r5, #24
 8012ce2:	d501      	bpl.n	8012ce8 <_printf_i+0xec>
 8012ce4:	681d      	ldr	r5, [r3, #0]
 8012ce6:	e002      	b.n	8012cee <_printf_i+0xf2>
 8012ce8:	0669      	lsls	r1, r5, #25
 8012cea:	d5fb      	bpl.n	8012ce4 <_printf_i+0xe8>
 8012cec:	881d      	ldrh	r5, [r3, #0]
 8012cee:	4854      	ldr	r0, [pc, #336]	; (8012e40 <_printf_i+0x244>)
 8012cf0:	2f6f      	cmp	r7, #111	; 0x6f
 8012cf2:	bf0c      	ite	eq
 8012cf4:	2308      	moveq	r3, #8
 8012cf6:	230a      	movne	r3, #10
 8012cf8:	2100      	movs	r1, #0
 8012cfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012cfe:	6866      	ldr	r6, [r4, #4]
 8012d00:	60a6      	str	r6, [r4, #8]
 8012d02:	2e00      	cmp	r6, #0
 8012d04:	bfa2      	ittt	ge
 8012d06:	6821      	ldrge	r1, [r4, #0]
 8012d08:	f021 0104 	bicge.w	r1, r1, #4
 8012d0c:	6021      	strge	r1, [r4, #0]
 8012d0e:	b90d      	cbnz	r5, 8012d14 <_printf_i+0x118>
 8012d10:	2e00      	cmp	r6, #0
 8012d12:	d04d      	beq.n	8012db0 <_printf_i+0x1b4>
 8012d14:	4616      	mov	r6, r2
 8012d16:	fbb5 f1f3 	udiv	r1, r5, r3
 8012d1a:	fb03 5711 	mls	r7, r3, r1, r5
 8012d1e:	5dc7      	ldrb	r7, [r0, r7]
 8012d20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012d24:	462f      	mov	r7, r5
 8012d26:	42bb      	cmp	r3, r7
 8012d28:	460d      	mov	r5, r1
 8012d2a:	d9f4      	bls.n	8012d16 <_printf_i+0x11a>
 8012d2c:	2b08      	cmp	r3, #8
 8012d2e:	d10b      	bne.n	8012d48 <_printf_i+0x14c>
 8012d30:	6823      	ldr	r3, [r4, #0]
 8012d32:	07df      	lsls	r7, r3, #31
 8012d34:	d508      	bpl.n	8012d48 <_printf_i+0x14c>
 8012d36:	6923      	ldr	r3, [r4, #16]
 8012d38:	6861      	ldr	r1, [r4, #4]
 8012d3a:	4299      	cmp	r1, r3
 8012d3c:	bfde      	ittt	le
 8012d3e:	2330      	movle	r3, #48	; 0x30
 8012d40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012d44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012d48:	1b92      	subs	r2, r2, r6
 8012d4a:	6122      	str	r2, [r4, #16]
 8012d4c:	f8cd a000 	str.w	sl, [sp]
 8012d50:	464b      	mov	r3, r9
 8012d52:	aa03      	add	r2, sp, #12
 8012d54:	4621      	mov	r1, r4
 8012d56:	4640      	mov	r0, r8
 8012d58:	f7ff fee2 	bl	8012b20 <_printf_common>
 8012d5c:	3001      	adds	r0, #1
 8012d5e:	d14c      	bne.n	8012dfa <_printf_i+0x1fe>
 8012d60:	f04f 30ff 	mov.w	r0, #4294967295
 8012d64:	b004      	add	sp, #16
 8012d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d6a:	4835      	ldr	r0, [pc, #212]	; (8012e40 <_printf_i+0x244>)
 8012d6c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012d70:	6823      	ldr	r3, [r4, #0]
 8012d72:	680e      	ldr	r6, [r1, #0]
 8012d74:	061f      	lsls	r7, r3, #24
 8012d76:	f856 5b04 	ldr.w	r5, [r6], #4
 8012d7a:	600e      	str	r6, [r1, #0]
 8012d7c:	d514      	bpl.n	8012da8 <_printf_i+0x1ac>
 8012d7e:	07d9      	lsls	r1, r3, #31
 8012d80:	bf44      	itt	mi
 8012d82:	f043 0320 	orrmi.w	r3, r3, #32
 8012d86:	6023      	strmi	r3, [r4, #0]
 8012d88:	b91d      	cbnz	r5, 8012d92 <_printf_i+0x196>
 8012d8a:	6823      	ldr	r3, [r4, #0]
 8012d8c:	f023 0320 	bic.w	r3, r3, #32
 8012d90:	6023      	str	r3, [r4, #0]
 8012d92:	2310      	movs	r3, #16
 8012d94:	e7b0      	b.n	8012cf8 <_printf_i+0xfc>
 8012d96:	6823      	ldr	r3, [r4, #0]
 8012d98:	f043 0320 	orr.w	r3, r3, #32
 8012d9c:	6023      	str	r3, [r4, #0]
 8012d9e:	2378      	movs	r3, #120	; 0x78
 8012da0:	4828      	ldr	r0, [pc, #160]	; (8012e44 <_printf_i+0x248>)
 8012da2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012da6:	e7e3      	b.n	8012d70 <_printf_i+0x174>
 8012da8:	065e      	lsls	r6, r3, #25
 8012daa:	bf48      	it	mi
 8012dac:	b2ad      	uxthmi	r5, r5
 8012dae:	e7e6      	b.n	8012d7e <_printf_i+0x182>
 8012db0:	4616      	mov	r6, r2
 8012db2:	e7bb      	b.n	8012d2c <_printf_i+0x130>
 8012db4:	680b      	ldr	r3, [r1, #0]
 8012db6:	6826      	ldr	r6, [r4, #0]
 8012db8:	6960      	ldr	r0, [r4, #20]
 8012dba:	1d1d      	adds	r5, r3, #4
 8012dbc:	600d      	str	r5, [r1, #0]
 8012dbe:	0635      	lsls	r5, r6, #24
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	d501      	bpl.n	8012dc8 <_printf_i+0x1cc>
 8012dc4:	6018      	str	r0, [r3, #0]
 8012dc6:	e002      	b.n	8012dce <_printf_i+0x1d2>
 8012dc8:	0671      	lsls	r1, r6, #25
 8012dca:	d5fb      	bpl.n	8012dc4 <_printf_i+0x1c8>
 8012dcc:	8018      	strh	r0, [r3, #0]
 8012dce:	2300      	movs	r3, #0
 8012dd0:	6123      	str	r3, [r4, #16]
 8012dd2:	4616      	mov	r6, r2
 8012dd4:	e7ba      	b.n	8012d4c <_printf_i+0x150>
 8012dd6:	680b      	ldr	r3, [r1, #0]
 8012dd8:	1d1a      	adds	r2, r3, #4
 8012dda:	600a      	str	r2, [r1, #0]
 8012ddc:	681e      	ldr	r6, [r3, #0]
 8012dde:	6862      	ldr	r2, [r4, #4]
 8012de0:	2100      	movs	r1, #0
 8012de2:	4630      	mov	r0, r6
 8012de4:	f7ed fa1c 	bl	8000220 <memchr>
 8012de8:	b108      	cbz	r0, 8012dee <_printf_i+0x1f2>
 8012dea:	1b80      	subs	r0, r0, r6
 8012dec:	6060      	str	r0, [r4, #4]
 8012dee:	6863      	ldr	r3, [r4, #4]
 8012df0:	6123      	str	r3, [r4, #16]
 8012df2:	2300      	movs	r3, #0
 8012df4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012df8:	e7a8      	b.n	8012d4c <_printf_i+0x150>
 8012dfa:	6923      	ldr	r3, [r4, #16]
 8012dfc:	4632      	mov	r2, r6
 8012dfe:	4649      	mov	r1, r9
 8012e00:	4640      	mov	r0, r8
 8012e02:	47d0      	blx	sl
 8012e04:	3001      	adds	r0, #1
 8012e06:	d0ab      	beq.n	8012d60 <_printf_i+0x164>
 8012e08:	6823      	ldr	r3, [r4, #0]
 8012e0a:	079b      	lsls	r3, r3, #30
 8012e0c:	d413      	bmi.n	8012e36 <_printf_i+0x23a>
 8012e0e:	68e0      	ldr	r0, [r4, #12]
 8012e10:	9b03      	ldr	r3, [sp, #12]
 8012e12:	4298      	cmp	r0, r3
 8012e14:	bfb8      	it	lt
 8012e16:	4618      	movlt	r0, r3
 8012e18:	e7a4      	b.n	8012d64 <_printf_i+0x168>
 8012e1a:	2301      	movs	r3, #1
 8012e1c:	4632      	mov	r2, r6
 8012e1e:	4649      	mov	r1, r9
 8012e20:	4640      	mov	r0, r8
 8012e22:	47d0      	blx	sl
 8012e24:	3001      	adds	r0, #1
 8012e26:	d09b      	beq.n	8012d60 <_printf_i+0x164>
 8012e28:	3501      	adds	r5, #1
 8012e2a:	68e3      	ldr	r3, [r4, #12]
 8012e2c:	9903      	ldr	r1, [sp, #12]
 8012e2e:	1a5b      	subs	r3, r3, r1
 8012e30:	42ab      	cmp	r3, r5
 8012e32:	dcf2      	bgt.n	8012e1a <_printf_i+0x21e>
 8012e34:	e7eb      	b.n	8012e0e <_printf_i+0x212>
 8012e36:	2500      	movs	r5, #0
 8012e38:	f104 0619 	add.w	r6, r4, #25
 8012e3c:	e7f5      	b.n	8012e2a <_printf_i+0x22e>
 8012e3e:	bf00      	nop
 8012e40:	08019dc4 	.word	0x08019dc4
 8012e44:	08019dd5 	.word	0x08019dd5

08012e48 <_scanf_float>:
 8012e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e4c:	b087      	sub	sp, #28
 8012e4e:	4617      	mov	r7, r2
 8012e50:	9303      	str	r3, [sp, #12]
 8012e52:	688b      	ldr	r3, [r1, #8]
 8012e54:	1e5a      	subs	r2, r3, #1
 8012e56:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012e5a:	bf83      	ittte	hi
 8012e5c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012e60:	195b      	addhi	r3, r3, r5
 8012e62:	9302      	strhi	r3, [sp, #8]
 8012e64:	2300      	movls	r3, #0
 8012e66:	bf86      	itte	hi
 8012e68:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012e6c:	608b      	strhi	r3, [r1, #8]
 8012e6e:	9302      	strls	r3, [sp, #8]
 8012e70:	680b      	ldr	r3, [r1, #0]
 8012e72:	468b      	mov	fp, r1
 8012e74:	2500      	movs	r5, #0
 8012e76:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012e7a:	f84b 3b1c 	str.w	r3, [fp], #28
 8012e7e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8012e82:	4680      	mov	r8, r0
 8012e84:	460c      	mov	r4, r1
 8012e86:	465e      	mov	r6, fp
 8012e88:	46aa      	mov	sl, r5
 8012e8a:	46a9      	mov	r9, r5
 8012e8c:	9501      	str	r5, [sp, #4]
 8012e8e:	68a2      	ldr	r2, [r4, #8]
 8012e90:	b152      	cbz	r2, 8012ea8 <_scanf_float+0x60>
 8012e92:	683b      	ldr	r3, [r7, #0]
 8012e94:	781b      	ldrb	r3, [r3, #0]
 8012e96:	2b4e      	cmp	r3, #78	; 0x4e
 8012e98:	d864      	bhi.n	8012f64 <_scanf_float+0x11c>
 8012e9a:	2b40      	cmp	r3, #64	; 0x40
 8012e9c:	d83c      	bhi.n	8012f18 <_scanf_float+0xd0>
 8012e9e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8012ea2:	b2c8      	uxtb	r0, r1
 8012ea4:	280e      	cmp	r0, #14
 8012ea6:	d93a      	bls.n	8012f1e <_scanf_float+0xd6>
 8012ea8:	f1b9 0f00 	cmp.w	r9, #0
 8012eac:	d003      	beq.n	8012eb6 <_scanf_float+0x6e>
 8012eae:	6823      	ldr	r3, [r4, #0]
 8012eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012eb4:	6023      	str	r3, [r4, #0]
 8012eb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012eba:	f1ba 0f01 	cmp.w	sl, #1
 8012ebe:	f200 8113 	bhi.w	80130e8 <_scanf_float+0x2a0>
 8012ec2:	455e      	cmp	r6, fp
 8012ec4:	f200 8105 	bhi.w	80130d2 <_scanf_float+0x28a>
 8012ec8:	2501      	movs	r5, #1
 8012eca:	4628      	mov	r0, r5
 8012ecc:	b007      	add	sp, #28
 8012ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ed2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8012ed6:	2a0d      	cmp	r2, #13
 8012ed8:	d8e6      	bhi.n	8012ea8 <_scanf_float+0x60>
 8012eda:	a101      	add	r1, pc, #4	; (adr r1, 8012ee0 <_scanf_float+0x98>)
 8012edc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012ee0:	0801301f 	.word	0x0801301f
 8012ee4:	08012ea9 	.word	0x08012ea9
 8012ee8:	08012ea9 	.word	0x08012ea9
 8012eec:	08012ea9 	.word	0x08012ea9
 8012ef0:	0801307f 	.word	0x0801307f
 8012ef4:	08013057 	.word	0x08013057
 8012ef8:	08012ea9 	.word	0x08012ea9
 8012efc:	08012ea9 	.word	0x08012ea9
 8012f00:	0801302d 	.word	0x0801302d
 8012f04:	08012ea9 	.word	0x08012ea9
 8012f08:	08012ea9 	.word	0x08012ea9
 8012f0c:	08012ea9 	.word	0x08012ea9
 8012f10:	08012ea9 	.word	0x08012ea9
 8012f14:	08012fe5 	.word	0x08012fe5
 8012f18:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8012f1c:	e7db      	b.n	8012ed6 <_scanf_float+0x8e>
 8012f1e:	290e      	cmp	r1, #14
 8012f20:	d8c2      	bhi.n	8012ea8 <_scanf_float+0x60>
 8012f22:	a001      	add	r0, pc, #4	; (adr r0, 8012f28 <_scanf_float+0xe0>)
 8012f24:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8012f28:	08012fd7 	.word	0x08012fd7
 8012f2c:	08012ea9 	.word	0x08012ea9
 8012f30:	08012fd7 	.word	0x08012fd7
 8012f34:	0801306b 	.word	0x0801306b
 8012f38:	08012ea9 	.word	0x08012ea9
 8012f3c:	08012f85 	.word	0x08012f85
 8012f40:	08012fc1 	.word	0x08012fc1
 8012f44:	08012fc1 	.word	0x08012fc1
 8012f48:	08012fc1 	.word	0x08012fc1
 8012f4c:	08012fc1 	.word	0x08012fc1
 8012f50:	08012fc1 	.word	0x08012fc1
 8012f54:	08012fc1 	.word	0x08012fc1
 8012f58:	08012fc1 	.word	0x08012fc1
 8012f5c:	08012fc1 	.word	0x08012fc1
 8012f60:	08012fc1 	.word	0x08012fc1
 8012f64:	2b6e      	cmp	r3, #110	; 0x6e
 8012f66:	d809      	bhi.n	8012f7c <_scanf_float+0x134>
 8012f68:	2b60      	cmp	r3, #96	; 0x60
 8012f6a:	d8b2      	bhi.n	8012ed2 <_scanf_float+0x8a>
 8012f6c:	2b54      	cmp	r3, #84	; 0x54
 8012f6e:	d077      	beq.n	8013060 <_scanf_float+0x218>
 8012f70:	2b59      	cmp	r3, #89	; 0x59
 8012f72:	d199      	bne.n	8012ea8 <_scanf_float+0x60>
 8012f74:	2d07      	cmp	r5, #7
 8012f76:	d197      	bne.n	8012ea8 <_scanf_float+0x60>
 8012f78:	2508      	movs	r5, #8
 8012f7a:	e029      	b.n	8012fd0 <_scanf_float+0x188>
 8012f7c:	2b74      	cmp	r3, #116	; 0x74
 8012f7e:	d06f      	beq.n	8013060 <_scanf_float+0x218>
 8012f80:	2b79      	cmp	r3, #121	; 0x79
 8012f82:	e7f6      	b.n	8012f72 <_scanf_float+0x12a>
 8012f84:	6821      	ldr	r1, [r4, #0]
 8012f86:	05c8      	lsls	r0, r1, #23
 8012f88:	d51a      	bpl.n	8012fc0 <_scanf_float+0x178>
 8012f8a:	9b02      	ldr	r3, [sp, #8]
 8012f8c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012f90:	6021      	str	r1, [r4, #0]
 8012f92:	f109 0901 	add.w	r9, r9, #1
 8012f96:	b11b      	cbz	r3, 8012fa0 <_scanf_float+0x158>
 8012f98:	3b01      	subs	r3, #1
 8012f9a:	3201      	adds	r2, #1
 8012f9c:	9302      	str	r3, [sp, #8]
 8012f9e:	60a2      	str	r2, [r4, #8]
 8012fa0:	68a3      	ldr	r3, [r4, #8]
 8012fa2:	3b01      	subs	r3, #1
 8012fa4:	60a3      	str	r3, [r4, #8]
 8012fa6:	6923      	ldr	r3, [r4, #16]
 8012fa8:	3301      	adds	r3, #1
 8012faa:	6123      	str	r3, [r4, #16]
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	3b01      	subs	r3, #1
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	607b      	str	r3, [r7, #4]
 8012fb4:	f340 8084 	ble.w	80130c0 <_scanf_float+0x278>
 8012fb8:	683b      	ldr	r3, [r7, #0]
 8012fba:	3301      	adds	r3, #1
 8012fbc:	603b      	str	r3, [r7, #0]
 8012fbe:	e766      	b.n	8012e8e <_scanf_float+0x46>
 8012fc0:	eb1a 0f05 	cmn.w	sl, r5
 8012fc4:	f47f af70 	bne.w	8012ea8 <_scanf_float+0x60>
 8012fc8:	6822      	ldr	r2, [r4, #0]
 8012fca:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8012fce:	6022      	str	r2, [r4, #0]
 8012fd0:	f806 3b01 	strb.w	r3, [r6], #1
 8012fd4:	e7e4      	b.n	8012fa0 <_scanf_float+0x158>
 8012fd6:	6822      	ldr	r2, [r4, #0]
 8012fd8:	0610      	lsls	r0, r2, #24
 8012fda:	f57f af65 	bpl.w	8012ea8 <_scanf_float+0x60>
 8012fde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012fe2:	e7f4      	b.n	8012fce <_scanf_float+0x186>
 8012fe4:	f1ba 0f00 	cmp.w	sl, #0
 8012fe8:	d10e      	bne.n	8013008 <_scanf_float+0x1c0>
 8012fea:	f1b9 0f00 	cmp.w	r9, #0
 8012fee:	d10e      	bne.n	801300e <_scanf_float+0x1c6>
 8012ff0:	6822      	ldr	r2, [r4, #0]
 8012ff2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012ff6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012ffa:	d108      	bne.n	801300e <_scanf_float+0x1c6>
 8012ffc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013000:	6022      	str	r2, [r4, #0]
 8013002:	f04f 0a01 	mov.w	sl, #1
 8013006:	e7e3      	b.n	8012fd0 <_scanf_float+0x188>
 8013008:	f1ba 0f02 	cmp.w	sl, #2
 801300c:	d055      	beq.n	80130ba <_scanf_float+0x272>
 801300e:	2d01      	cmp	r5, #1
 8013010:	d002      	beq.n	8013018 <_scanf_float+0x1d0>
 8013012:	2d04      	cmp	r5, #4
 8013014:	f47f af48 	bne.w	8012ea8 <_scanf_float+0x60>
 8013018:	3501      	adds	r5, #1
 801301a:	b2ed      	uxtb	r5, r5
 801301c:	e7d8      	b.n	8012fd0 <_scanf_float+0x188>
 801301e:	f1ba 0f01 	cmp.w	sl, #1
 8013022:	f47f af41 	bne.w	8012ea8 <_scanf_float+0x60>
 8013026:	f04f 0a02 	mov.w	sl, #2
 801302a:	e7d1      	b.n	8012fd0 <_scanf_float+0x188>
 801302c:	b97d      	cbnz	r5, 801304e <_scanf_float+0x206>
 801302e:	f1b9 0f00 	cmp.w	r9, #0
 8013032:	f47f af3c 	bne.w	8012eae <_scanf_float+0x66>
 8013036:	6822      	ldr	r2, [r4, #0]
 8013038:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801303c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013040:	f47f af39 	bne.w	8012eb6 <_scanf_float+0x6e>
 8013044:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013048:	6022      	str	r2, [r4, #0]
 801304a:	2501      	movs	r5, #1
 801304c:	e7c0      	b.n	8012fd0 <_scanf_float+0x188>
 801304e:	2d03      	cmp	r5, #3
 8013050:	d0e2      	beq.n	8013018 <_scanf_float+0x1d0>
 8013052:	2d05      	cmp	r5, #5
 8013054:	e7de      	b.n	8013014 <_scanf_float+0x1cc>
 8013056:	2d02      	cmp	r5, #2
 8013058:	f47f af26 	bne.w	8012ea8 <_scanf_float+0x60>
 801305c:	2503      	movs	r5, #3
 801305e:	e7b7      	b.n	8012fd0 <_scanf_float+0x188>
 8013060:	2d06      	cmp	r5, #6
 8013062:	f47f af21 	bne.w	8012ea8 <_scanf_float+0x60>
 8013066:	2507      	movs	r5, #7
 8013068:	e7b2      	b.n	8012fd0 <_scanf_float+0x188>
 801306a:	6822      	ldr	r2, [r4, #0]
 801306c:	0591      	lsls	r1, r2, #22
 801306e:	f57f af1b 	bpl.w	8012ea8 <_scanf_float+0x60>
 8013072:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8013076:	6022      	str	r2, [r4, #0]
 8013078:	f8cd 9004 	str.w	r9, [sp, #4]
 801307c:	e7a8      	b.n	8012fd0 <_scanf_float+0x188>
 801307e:	6822      	ldr	r2, [r4, #0]
 8013080:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8013084:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8013088:	d006      	beq.n	8013098 <_scanf_float+0x250>
 801308a:	0550      	lsls	r0, r2, #21
 801308c:	f57f af0c 	bpl.w	8012ea8 <_scanf_float+0x60>
 8013090:	f1b9 0f00 	cmp.w	r9, #0
 8013094:	f43f af0f 	beq.w	8012eb6 <_scanf_float+0x6e>
 8013098:	0591      	lsls	r1, r2, #22
 801309a:	bf58      	it	pl
 801309c:	9901      	ldrpl	r1, [sp, #4]
 801309e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80130a2:	bf58      	it	pl
 80130a4:	eba9 0101 	subpl.w	r1, r9, r1
 80130a8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80130ac:	bf58      	it	pl
 80130ae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80130b2:	6022      	str	r2, [r4, #0]
 80130b4:	f04f 0900 	mov.w	r9, #0
 80130b8:	e78a      	b.n	8012fd0 <_scanf_float+0x188>
 80130ba:	f04f 0a03 	mov.w	sl, #3
 80130be:	e787      	b.n	8012fd0 <_scanf_float+0x188>
 80130c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80130c4:	4639      	mov	r1, r7
 80130c6:	4640      	mov	r0, r8
 80130c8:	4798      	blx	r3
 80130ca:	2800      	cmp	r0, #0
 80130cc:	f43f aedf 	beq.w	8012e8e <_scanf_float+0x46>
 80130d0:	e6ea      	b.n	8012ea8 <_scanf_float+0x60>
 80130d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80130d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80130da:	463a      	mov	r2, r7
 80130dc:	4640      	mov	r0, r8
 80130de:	4798      	blx	r3
 80130e0:	6923      	ldr	r3, [r4, #16]
 80130e2:	3b01      	subs	r3, #1
 80130e4:	6123      	str	r3, [r4, #16]
 80130e6:	e6ec      	b.n	8012ec2 <_scanf_float+0x7a>
 80130e8:	1e6b      	subs	r3, r5, #1
 80130ea:	2b06      	cmp	r3, #6
 80130ec:	d825      	bhi.n	801313a <_scanf_float+0x2f2>
 80130ee:	2d02      	cmp	r5, #2
 80130f0:	d836      	bhi.n	8013160 <_scanf_float+0x318>
 80130f2:	455e      	cmp	r6, fp
 80130f4:	f67f aee8 	bls.w	8012ec8 <_scanf_float+0x80>
 80130f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80130fc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013100:	463a      	mov	r2, r7
 8013102:	4640      	mov	r0, r8
 8013104:	4798      	blx	r3
 8013106:	6923      	ldr	r3, [r4, #16]
 8013108:	3b01      	subs	r3, #1
 801310a:	6123      	str	r3, [r4, #16]
 801310c:	e7f1      	b.n	80130f2 <_scanf_float+0x2aa>
 801310e:	9802      	ldr	r0, [sp, #8]
 8013110:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013114:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8013118:	9002      	str	r0, [sp, #8]
 801311a:	463a      	mov	r2, r7
 801311c:	4640      	mov	r0, r8
 801311e:	4798      	blx	r3
 8013120:	6923      	ldr	r3, [r4, #16]
 8013122:	3b01      	subs	r3, #1
 8013124:	6123      	str	r3, [r4, #16]
 8013126:	f10a 3aff 	add.w	sl, sl, #4294967295
 801312a:	fa5f fa8a 	uxtb.w	sl, sl
 801312e:	f1ba 0f02 	cmp.w	sl, #2
 8013132:	d1ec      	bne.n	801310e <_scanf_float+0x2c6>
 8013134:	3d03      	subs	r5, #3
 8013136:	b2ed      	uxtb	r5, r5
 8013138:	1b76      	subs	r6, r6, r5
 801313a:	6823      	ldr	r3, [r4, #0]
 801313c:	05da      	lsls	r2, r3, #23
 801313e:	d52f      	bpl.n	80131a0 <_scanf_float+0x358>
 8013140:	055b      	lsls	r3, r3, #21
 8013142:	d510      	bpl.n	8013166 <_scanf_float+0x31e>
 8013144:	455e      	cmp	r6, fp
 8013146:	f67f aebf 	bls.w	8012ec8 <_scanf_float+0x80>
 801314a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801314e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013152:	463a      	mov	r2, r7
 8013154:	4640      	mov	r0, r8
 8013156:	4798      	blx	r3
 8013158:	6923      	ldr	r3, [r4, #16]
 801315a:	3b01      	subs	r3, #1
 801315c:	6123      	str	r3, [r4, #16]
 801315e:	e7f1      	b.n	8013144 <_scanf_float+0x2fc>
 8013160:	46aa      	mov	sl, r5
 8013162:	9602      	str	r6, [sp, #8]
 8013164:	e7df      	b.n	8013126 <_scanf_float+0x2de>
 8013166:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801316a:	6923      	ldr	r3, [r4, #16]
 801316c:	2965      	cmp	r1, #101	; 0x65
 801316e:	f103 33ff 	add.w	r3, r3, #4294967295
 8013172:	f106 35ff 	add.w	r5, r6, #4294967295
 8013176:	6123      	str	r3, [r4, #16]
 8013178:	d00c      	beq.n	8013194 <_scanf_float+0x34c>
 801317a:	2945      	cmp	r1, #69	; 0x45
 801317c:	d00a      	beq.n	8013194 <_scanf_float+0x34c>
 801317e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013182:	463a      	mov	r2, r7
 8013184:	4640      	mov	r0, r8
 8013186:	4798      	blx	r3
 8013188:	6923      	ldr	r3, [r4, #16]
 801318a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801318e:	3b01      	subs	r3, #1
 8013190:	1eb5      	subs	r5, r6, #2
 8013192:	6123      	str	r3, [r4, #16]
 8013194:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013198:	463a      	mov	r2, r7
 801319a:	4640      	mov	r0, r8
 801319c:	4798      	blx	r3
 801319e:	462e      	mov	r6, r5
 80131a0:	6825      	ldr	r5, [r4, #0]
 80131a2:	f015 0510 	ands.w	r5, r5, #16
 80131a6:	d158      	bne.n	801325a <_scanf_float+0x412>
 80131a8:	7035      	strb	r5, [r6, #0]
 80131aa:	6823      	ldr	r3, [r4, #0]
 80131ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80131b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80131b4:	d11c      	bne.n	80131f0 <_scanf_float+0x3a8>
 80131b6:	9b01      	ldr	r3, [sp, #4]
 80131b8:	454b      	cmp	r3, r9
 80131ba:	eba3 0209 	sub.w	r2, r3, r9
 80131be:	d124      	bne.n	801320a <_scanf_float+0x3c2>
 80131c0:	2200      	movs	r2, #0
 80131c2:	4659      	mov	r1, fp
 80131c4:	4640      	mov	r0, r8
 80131c6:	f001 f881 	bl	80142cc <_strtod_r>
 80131ca:	9b03      	ldr	r3, [sp, #12]
 80131cc:	6821      	ldr	r1, [r4, #0]
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	f011 0f02 	tst.w	r1, #2
 80131d4:	ec57 6b10 	vmov	r6, r7, d0
 80131d8:	f103 0204 	add.w	r2, r3, #4
 80131dc:	d020      	beq.n	8013220 <_scanf_float+0x3d8>
 80131de:	9903      	ldr	r1, [sp, #12]
 80131e0:	600a      	str	r2, [r1, #0]
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	e9c3 6700 	strd	r6, r7, [r3]
 80131e8:	68e3      	ldr	r3, [r4, #12]
 80131ea:	3301      	adds	r3, #1
 80131ec:	60e3      	str	r3, [r4, #12]
 80131ee:	e66c      	b.n	8012eca <_scanf_float+0x82>
 80131f0:	9b04      	ldr	r3, [sp, #16]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d0e4      	beq.n	80131c0 <_scanf_float+0x378>
 80131f6:	9905      	ldr	r1, [sp, #20]
 80131f8:	230a      	movs	r3, #10
 80131fa:	462a      	mov	r2, r5
 80131fc:	3101      	adds	r1, #1
 80131fe:	4640      	mov	r0, r8
 8013200:	f001 f94a 	bl	8014498 <_strtol_r>
 8013204:	9b04      	ldr	r3, [sp, #16]
 8013206:	9e05      	ldr	r6, [sp, #20]
 8013208:	1ac2      	subs	r2, r0, r3
 801320a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801320e:	429e      	cmp	r6, r3
 8013210:	bf28      	it	cs
 8013212:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8013216:	4912      	ldr	r1, [pc, #72]	; (8013260 <_scanf_float+0x418>)
 8013218:	4630      	mov	r0, r6
 801321a:	f000 f977 	bl	801350c <siprintf>
 801321e:	e7cf      	b.n	80131c0 <_scanf_float+0x378>
 8013220:	f011 0f04 	tst.w	r1, #4
 8013224:	9903      	ldr	r1, [sp, #12]
 8013226:	600a      	str	r2, [r1, #0]
 8013228:	d1db      	bne.n	80131e2 <_scanf_float+0x39a>
 801322a:	f8d3 8000 	ldr.w	r8, [r3]
 801322e:	ee10 2a10 	vmov	r2, s0
 8013232:	ee10 0a10 	vmov	r0, s0
 8013236:	463b      	mov	r3, r7
 8013238:	4639      	mov	r1, r7
 801323a:	f7ed fc97 	bl	8000b6c <__aeabi_dcmpun>
 801323e:	b128      	cbz	r0, 801324c <_scanf_float+0x404>
 8013240:	4808      	ldr	r0, [pc, #32]	; (8013264 <_scanf_float+0x41c>)
 8013242:	f000 f919 	bl	8013478 <nanf>
 8013246:	ed88 0a00 	vstr	s0, [r8]
 801324a:	e7cd      	b.n	80131e8 <_scanf_float+0x3a0>
 801324c:	4630      	mov	r0, r6
 801324e:	4639      	mov	r1, r7
 8013250:	f7ed fcea 	bl	8000c28 <__aeabi_d2f>
 8013254:	f8c8 0000 	str.w	r0, [r8]
 8013258:	e7c6      	b.n	80131e8 <_scanf_float+0x3a0>
 801325a:	2500      	movs	r5, #0
 801325c:	e635      	b.n	8012eca <_scanf_float+0x82>
 801325e:	bf00      	nop
 8013260:	08019de6 	.word	0x08019de6
 8013264:	08019f18 	.word	0x08019f18

08013268 <iprintf>:
 8013268:	b40f      	push	{r0, r1, r2, r3}
 801326a:	4b0a      	ldr	r3, [pc, #40]	; (8013294 <iprintf+0x2c>)
 801326c:	b513      	push	{r0, r1, r4, lr}
 801326e:	681c      	ldr	r4, [r3, #0]
 8013270:	b124      	cbz	r4, 801327c <iprintf+0x14>
 8013272:	69a3      	ldr	r3, [r4, #24]
 8013274:	b913      	cbnz	r3, 801327c <iprintf+0x14>
 8013276:	4620      	mov	r0, r4
 8013278:	f7fe fc30 	bl	8011adc <__sinit>
 801327c:	ab05      	add	r3, sp, #20
 801327e:	9a04      	ldr	r2, [sp, #16]
 8013280:	68a1      	ldr	r1, [r4, #8]
 8013282:	9301      	str	r3, [sp, #4]
 8013284:	4620      	mov	r0, r4
 8013286:	f004 f979 	bl	801757c <_vfiprintf_r>
 801328a:	b002      	add	sp, #8
 801328c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013290:	b004      	add	sp, #16
 8013292:	4770      	bx	lr
 8013294:	20000088 	.word	0x20000088

08013298 <_puts_r>:
 8013298:	b570      	push	{r4, r5, r6, lr}
 801329a:	460e      	mov	r6, r1
 801329c:	4605      	mov	r5, r0
 801329e:	b118      	cbz	r0, 80132a8 <_puts_r+0x10>
 80132a0:	6983      	ldr	r3, [r0, #24]
 80132a2:	b90b      	cbnz	r3, 80132a8 <_puts_r+0x10>
 80132a4:	f7fe fc1a 	bl	8011adc <__sinit>
 80132a8:	69ab      	ldr	r3, [r5, #24]
 80132aa:	68ac      	ldr	r4, [r5, #8]
 80132ac:	b913      	cbnz	r3, 80132b4 <_puts_r+0x1c>
 80132ae:	4628      	mov	r0, r5
 80132b0:	f7fe fc14 	bl	8011adc <__sinit>
 80132b4:	4b2c      	ldr	r3, [pc, #176]	; (8013368 <_puts_r+0xd0>)
 80132b6:	429c      	cmp	r4, r3
 80132b8:	d120      	bne.n	80132fc <_puts_r+0x64>
 80132ba:	686c      	ldr	r4, [r5, #4]
 80132bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80132be:	07db      	lsls	r3, r3, #31
 80132c0:	d405      	bmi.n	80132ce <_puts_r+0x36>
 80132c2:	89a3      	ldrh	r3, [r4, #12]
 80132c4:	0598      	lsls	r0, r3, #22
 80132c6:	d402      	bmi.n	80132ce <_puts_r+0x36>
 80132c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80132ca:	f7fe fde7 	bl	8011e9c <__retarget_lock_acquire_recursive>
 80132ce:	89a3      	ldrh	r3, [r4, #12]
 80132d0:	0719      	lsls	r1, r3, #28
 80132d2:	d51d      	bpl.n	8013310 <_puts_r+0x78>
 80132d4:	6923      	ldr	r3, [r4, #16]
 80132d6:	b1db      	cbz	r3, 8013310 <_puts_r+0x78>
 80132d8:	3e01      	subs	r6, #1
 80132da:	68a3      	ldr	r3, [r4, #8]
 80132dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80132e0:	3b01      	subs	r3, #1
 80132e2:	60a3      	str	r3, [r4, #8]
 80132e4:	bb39      	cbnz	r1, 8013336 <_puts_r+0x9e>
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	da38      	bge.n	801335c <_puts_r+0xc4>
 80132ea:	4622      	mov	r2, r4
 80132ec:	210a      	movs	r1, #10
 80132ee:	4628      	mov	r0, r5
 80132f0:	f001 fb9c 	bl	8014a2c <__swbuf_r>
 80132f4:	3001      	adds	r0, #1
 80132f6:	d011      	beq.n	801331c <_puts_r+0x84>
 80132f8:	250a      	movs	r5, #10
 80132fa:	e011      	b.n	8013320 <_puts_r+0x88>
 80132fc:	4b1b      	ldr	r3, [pc, #108]	; (801336c <_puts_r+0xd4>)
 80132fe:	429c      	cmp	r4, r3
 8013300:	d101      	bne.n	8013306 <_puts_r+0x6e>
 8013302:	68ac      	ldr	r4, [r5, #8]
 8013304:	e7da      	b.n	80132bc <_puts_r+0x24>
 8013306:	4b1a      	ldr	r3, [pc, #104]	; (8013370 <_puts_r+0xd8>)
 8013308:	429c      	cmp	r4, r3
 801330a:	bf08      	it	eq
 801330c:	68ec      	ldreq	r4, [r5, #12]
 801330e:	e7d5      	b.n	80132bc <_puts_r+0x24>
 8013310:	4621      	mov	r1, r4
 8013312:	4628      	mov	r0, r5
 8013314:	f001 fbee 	bl	8014af4 <__swsetup_r>
 8013318:	2800      	cmp	r0, #0
 801331a:	d0dd      	beq.n	80132d8 <_puts_r+0x40>
 801331c:	f04f 35ff 	mov.w	r5, #4294967295
 8013320:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013322:	07da      	lsls	r2, r3, #31
 8013324:	d405      	bmi.n	8013332 <_puts_r+0x9a>
 8013326:	89a3      	ldrh	r3, [r4, #12]
 8013328:	059b      	lsls	r3, r3, #22
 801332a:	d402      	bmi.n	8013332 <_puts_r+0x9a>
 801332c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801332e:	f7fe fdb7 	bl	8011ea0 <__retarget_lock_release_recursive>
 8013332:	4628      	mov	r0, r5
 8013334:	bd70      	pop	{r4, r5, r6, pc}
 8013336:	2b00      	cmp	r3, #0
 8013338:	da04      	bge.n	8013344 <_puts_r+0xac>
 801333a:	69a2      	ldr	r2, [r4, #24]
 801333c:	429a      	cmp	r2, r3
 801333e:	dc06      	bgt.n	801334e <_puts_r+0xb6>
 8013340:	290a      	cmp	r1, #10
 8013342:	d004      	beq.n	801334e <_puts_r+0xb6>
 8013344:	6823      	ldr	r3, [r4, #0]
 8013346:	1c5a      	adds	r2, r3, #1
 8013348:	6022      	str	r2, [r4, #0]
 801334a:	7019      	strb	r1, [r3, #0]
 801334c:	e7c5      	b.n	80132da <_puts_r+0x42>
 801334e:	4622      	mov	r2, r4
 8013350:	4628      	mov	r0, r5
 8013352:	f001 fb6b 	bl	8014a2c <__swbuf_r>
 8013356:	3001      	adds	r0, #1
 8013358:	d1bf      	bne.n	80132da <_puts_r+0x42>
 801335a:	e7df      	b.n	801331c <_puts_r+0x84>
 801335c:	6823      	ldr	r3, [r4, #0]
 801335e:	250a      	movs	r5, #10
 8013360:	1c5a      	adds	r2, r3, #1
 8013362:	6022      	str	r2, [r4, #0]
 8013364:	701d      	strb	r5, [r3, #0]
 8013366:	e7db      	b.n	8013320 <_puts_r+0x88>
 8013368:	08019c38 	.word	0x08019c38
 801336c:	08019c58 	.word	0x08019c58
 8013370:	08019c18 	.word	0x08019c18

08013374 <puts>:
 8013374:	4b02      	ldr	r3, [pc, #8]	; (8013380 <puts+0xc>)
 8013376:	4601      	mov	r1, r0
 8013378:	6818      	ldr	r0, [r3, #0]
 801337a:	f7ff bf8d 	b.w	8013298 <_puts_r>
 801337e:	bf00      	nop
 8013380:	20000088 	.word	0x20000088

08013384 <cleanup_glue>:
 8013384:	b538      	push	{r3, r4, r5, lr}
 8013386:	460c      	mov	r4, r1
 8013388:	6809      	ldr	r1, [r1, #0]
 801338a:	4605      	mov	r5, r0
 801338c:	b109      	cbz	r1, 8013392 <cleanup_glue+0xe>
 801338e:	f7ff fff9 	bl	8013384 <cleanup_glue>
 8013392:	4621      	mov	r1, r4
 8013394:	4628      	mov	r0, r5
 8013396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801339a:	f7ff b841 	b.w	8012420 <_free_r>
	...

080133a0 <_reclaim_reent>:
 80133a0:	4b2c      	ldr	r3, [pc, #176]	; (8013454 <_reclaim_reent+0xb4>)
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	4283      	cmp	r3, r0
 80133a6:	b570      	push	{r4, r5, r6, lr}
 80133a8:	4604      	mov	r4, r0
 80133aa:	d051      	beq.n	8013450 <_reclaim_reent+0xb0>
 80133ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80133ae:	b143      	cbz	r3, 80133c2 <_reclaim_reent+0x22>
 80133b0:	68db      	ldr	r3, [r3, #12]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d14a      	bne.n	801344c <_reclaim_reent+0xac>
 80133b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80133b8:	6819      	ldr	r1, [r3, #0]
 80133ba:	b111      	cbz	r1, 80133c2 <_reclaim_reent+0x22>
 80133bc:	4620      	mov	r0, r4
 80133be:	f7ff f82f 	bl	8012420 <_free_r>
 80133c2:	6961      	ldr	r1, [r4, #20]
 80133c4:	b111      	cbz	r1, 80133cc <_reclaim_reent+0x2c>
 80133c6:	4620      	mov	r0, r4
 80133c8:	f7ff f82a 	bl	8012420 <_free_r>
 80133cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80133ce:	b111      	cbz	r1, 80133d6 <_reclaim_reent+0x36>
 80133d0:	4620      	mov	r0, r4
 80133d2:	f7ff f825 	bl	8012420 <_free_r>
 80133d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80133d8:	b111      	cbz	r1, 80133e0 <_reclaim_reent+0x40>
 80133da:	4620      	mov	r0, r4
 80133dc:	f7ff f820 	bl	8012420 <_free_r>
 80133e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80133e2:	b111      	cbz	r1, 80133ea <_reclaim_reent+0x4a>
 80133e4:	4620      	mov	r0, r4
 80133e6:	f7ff f81b 	bl	8012420 <_free_r>
 80133ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80133ec:	b111      	cbz	r1, 80133f4 <_reclaim_reent+0x54>
 80133ee:	4620      	mov	r0, r4
 80133f0:	f7ff f816 	bl	8012420 <_free_r>
 80133f4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80133f6:	b111      	cbz	r1, 80133fe <_reclaim_reent+0x5e>
 80133f8:	4620      	mov	r0, r4
 80133fa:	f7ff f811 	bl	8012420 <_free_r>
 80133fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8013400:	b111      	cbz	r1, 8013408 <_reclaim_reent+0x68>
 8013402:	4620      	mov	r0, r4
 8013404:	f7ff f80c 	bl	8012420 <_free_r>
 8013408:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801340a:	b111      	cbz	r1, 8013412 <_reclaim_reent+0x72>
 801340c:	4620      	mov	r0, r4
 801340e:	f7ff f807 	bl	8012420 <_free_r>
 8013412:	69a3      	ldr	r3, [r4, #24]
 8013414:	b1e3      	cbz	r3, 8013450 <_reclaim_reent+0xb0>
 8013416:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013418:	4620      	mov	r0, r4
 801341a:	4798      	blx	r3
 801341c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801341e:	b1b9      	cbz	r1, 8013450 <_reclaim_reent+0xb0>
 8013420:	4620      	mov	r0, r4
 8013422:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013426:	f7ff bfad 	b.w	8013384 <cleanup_glue>
 801342a:	5949      	ldr	r1, [r1, r5]
 801342c:	b941      	cbnz	r1, 8013440 <_reclaim_reent+0xa0>
 801342e:	3504      	adds	r5, #4
 8013430:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013432:	2d80      	cmp	r5, #128	; 0x80
 8013434:	68d9      	ldr	r1, [r3, #12]
 8013436:	d1f8      	bne.n	801342a <_reclaim_reent+0x8a>
 8013438:	4620      	mov	r0, r4
 801343a:	f7fe fff1 	bl	8012420 <_free_r>
 801343e:	e7ba      	b.n	80133b6 <_reclaim_reent+0x16>
 8013440:	680e      	ldr	r6, [r1, #0]
 8013442:	4620      	mov	r0, r4
 8013444:	f7fe ffec 	bl	8012420 <_free_r>
 8013448:	4631      	mov	r1, r6
 801344a:	e7ef      	b.n	801342c <_reclaim_reent+0x8c>
 801344c:	2500      	movs	r5, #0
 801344e:	e7ef      	b.n	8013430 <_reclaim_reent+0x90>
 8013450:	bd70      	pop	{r4, r5, r6, pc}
 8013452:	bf00      	nop
 8013454:	20000088 	.word	0x20000088

08013458 <_sbrk_r>:
 8013458:	b538      	push	{r3, r4, r5, lr}
 801345a:	4d06      	ldr	r5, [pc, #24]	; (8013474 <_sbrk_r+0x1c>)
 801345c:	2300      	movs	r3, #0
 801345e:	4604      	mov	r4, r0
 8013460:	4608      	mov	r0, r1
 8013462:	602b      	str	r3, [r5, #0]
 8013464:	f004 fc08 	bl	8017c78 <_sbrk>
 8013468:	1c43      	adds	r3, r0, #1
 801346a:	d102      	bne.n	8013472 <_sbrk_r+0x1a>
 801346c:	682b      	ldr	r3, [r5, #0]
 801346e:	b103      	cbz	r3, 8013472 <_sbrk_r+0x1a>
 8013470:	6023      	str	r3, [r4, #0]
 8013472:	bd38      	pop	{r3, r4, r5, pc}
 8013474:	20006484 	.word	0x20006484

08013478 <nanf>:
 8013478:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013480 <nanf+0x8>
 801347c:	4770      	bx	lr
 801347e:	bf00      	nop
 8013480:	7fc00000 	.word	0x7fc00000

08013484 <_raise_r>:
 8013484:	291f      	cmp	r1, #31
 8013486:	b538      	push	{r3, r4, r5, lr}
 8013488:	4604      	mov	r4, r0
 801348a:	460d      	mov	r5, r1
 801348c:	d904      	bls.n	8013498 <_raise_r+0x14>
 801348e:	2316      	movs	r3, #22
 8013490:	6003      	str	r3, [r0, #0]
 8013492:	f04f 30ff 	mov.w	r0, #4294967295
 8013496:	bd38      	pop	{r3, r4, r5, pc}
 8013498:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801349a:	b112      	cbz	r2, 80134a2 <_raise_r+0x1e>
 801349c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80134a0:	b94b      	cbnz	r3, 80134b6 <_raise_r+0x32>
 80134a2:	4620      	mov	r0, r4
 80134a4:	f000 f830 	bl	8013508 <_getpid_r>
 80134a8:	462a      	mov	r2, r5
 80134aa:	4601      	mov	r1, r0
 80134ac:	4620      	mov	r0, r4
 80134ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80134b2:	f000 b817 	b.w	80134e4 <_kill_r>
 80134b6:	2b01      	cmp	r3, #1
 80134b8:	d00a      	beq.n	80134d0 <_raise_r+0x4c>
 80134ba:	1c59      	adds	r1, r3, #1
 80134bc:	d103      	bne.n	80134c6 <_raise_r+0x42>
 80134be:	2316      	movs	r3, #22
 80134c0:	6003      	str	r3, [r0, #0]
 80134c2:	2001      	movs	r0, #1
 80134c4:	e7e7      	b.n	8013496 <_raise_r+0x12>
 80134c6:	2400      	movs	r4, #0
 80134c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80134cc:	4628      	mov	r0, r5
 80134ce:	4798      	blx	r3
 80134d0:	2000      	movs	r0, #0
 80134d2:	e7e0      	b.n	8013496 <_raise_r+0x12>

080134d4 <raise>:
 80134d4:	4b02      	ldr	r3, [pc, #8]	; (80134e0 <raise+0xc>)
 80134d6:	4601      	mov	r1, r0
 80134d8:	6818      	ldr	r0, [r3, #0]
 80134da:	f7ff bfd3 	b.w	8013484 <_raise_r>
 80134de:	bf00      	nop
 80134e0:	20000088 	.word	0x20000088

080134e4 <_kill_r>:
 80134e4:	b538      	push	{r3, r4, r5, lr}
 80134e6:	4d07      	ldr	r5, [pc, #28]	; (8013504 <_kill_r+0x20>)
 80134e8:	2300      	movs	r3, #0
 80134ea:	4604      	mov	r4, r0
 80134ec:	4608      	mov	r0, r1
 80134ee:	4611      	mov	r1, r2
 80134f0:	602b      	str	r3, [r5, #0]
 80134f2:	f004 fba9 	bl	8017c48 <_kill>
 80134f6:	1c43      	adds	r3, r0, #1
 80134f8:	d102      	bne.n	8013500 <_kill_r+0x1c>
 80134fa:	682b      	ldr	r3, [r5, #0]
 80134fc:	b103      	cbz	r3, 8013500 <_kill_r+0x1c>
 80134fe:	6023      	str	r3, [r4, #0]
 8013500:	bd38      	pop	{r3, r4, r5, pc}
 8013502:	bf00      	nop
 8013504:	20006484 	.word	0x20006484

08013508 <_getpid_r>:
 8013508:	f004 bb8e 	b.w	8017c28 <_getpid>

0801350c <siprintf>:
 801350c:	b40e      	push	{r1, r2, r3}
 801350e:	b500      	push	{lr}
 8013510:	b09c      	sub	sp, #112	; 0x70
 8013512:	ab1d      	add	r3, sp, #116	; 0x74
 8013514:	9002      	str	r0, [sp, #8]
 8013516:	9006      	str	r0, [sp, #24]
 8013518:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801351c:	4809      	ldr	r0, [pc, #36]	; (8013544 <siprintf+0x38>)
 801351e:	9107      	str	r1, [sp, #28]
 8013520:	9104      	str	r1, [sp, #16]
 8013522:	4909      	ldr	r1, [pc, #36]	; (8013548 <siprintf+0x3c>)
 8013524:	f853 2b04 	ldr.w	r2, [r3], #4
 8013528:	9105      	str	r1, [sp, #20]
 801352a:	6800      	ldr	r0, [r0, #0]
 801352c:	9301      	str	r3, [sp, #4]
 801352e:	a902      	add	r1, sp, #8
 8013530:	f003 fd28 	bl	8016f84 <_svfiprintf_r>
 8013534:	9b02      	ldr	r3, [sp, #8]
 8013536:	2200      	movs	r2, #0
 8013538:	701a      	strb	r2, [r3, #0]
 801353a:	b01c      	add	sp, #112	; 0x70
 801353c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013540:	b003      	add	sp, #12
 8013542:	4770      	bx	lr
 8013544:	20000088 	.word	0x20000088
 8013548:	ffff0208 	.word	0xffff0208

0801354c <siscanf>:
 801354c:	b40e      	push	{r1, r2, r3}
 801354e:	b510      	push	{r4, lr}
 8013550:	b09f      	sub	sp, #124	; 0x7c
 8013552:	ac21      	add	r4, sp, #132	; 0x84
 8013554:	f44f 7101 	mov.w	r1, #516	; 0x204
 8013558:	f854 2b04 	ldr.w	r2, [r4], #4
 801355c:	9201      	str	r2, [sp, #4]
 801355e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8013562:	9004      	str	r0, [sp, #16]
 8013564:	9008      	str	r0, [sp, #32]
 8013566:	f7ec fe4d 	bl	8000204 <strlen>
 801356a:	4b0c      	ldr	r3, [pc, #48]	; (801359c <siscanf+0x50>)
 801356c:	9005      	str	r0, [sp, #20]
 801356e:	9009      	str	r0, [sp, #36]	; 0x24
 8013570:	930d      	str	r3, [sp, #52]	; 0x34
 8013572:	480b      	ldr	r0, [pc, #44]	; (80135a0 <siscanf+0x54>)
 8013574:	9a01      	ldr	r2, [sp, #4]
 8013576:	6800      	ldr	r0, [r0, #0]
 8013578:	9403      	str	r4, [sp, #12]
 801357a:	2300      	movs	r3, #0
 801357c:	9311      	str	r3, [sp, #68]	; 0x44
 801357e:	9316      	str	r3, [sp, #88]	; 0x58
 8013580:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013584:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013588:	a904      	add	r1, sp, #16
 801358a:	4623      	mov	r3, r4
 801358c:	f003 fe54 	bl	8017238 <__ssvfiscanf_r>
 8013590:	b01f      	add	sp, #124	; 0x7c
 8013592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013596:	b003      	add	sp, #12
 8013598:	4770      	bx	lr
 801359a:	bf00      	nop
 801359c:	080135c7 	.word	0x080135c7
 80135a0:	20000088 	.word	0x20000088

080135a4 <__sread>:
 80135a4:	b510      	push	{r4, lr}
 80135a6:	460c      	mov	r4, r1
 80135a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135ac:	f004 fa62 	bl	8017a74 <_read_r>
 80135b0:	2800      	cmp	r0, #0
 80135b2:	bfab      	itete	ge
 80135b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80135b6:	89a3      	ldrhlt	r3, [r4, #12]
 80135b8:	181b      	addge	r3, r3, r0
 80135ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80135be:	bfac      	ite	ge
 80135c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80135c2:	81a3      	strhlt	r3, [r4, #12]
 80135c4:	bd10      	pop	{r4, pc}

080135c6 <__seofread>:
 80135c6:	2000      	movs	r0, #0
 80135c8:	4770      	bx	lr

080135ca <__swrite>:
 80135ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135ce:	461f      	mov	r7, r3
 80135d0:	898b      	ldrh	r3, [r1, #12]
 80135d2:	05db      	lsls	r3, r3, #23
 80135d4:	4605      	mov	r5, r0
 80135d6:	460c      	mov	r4, r1
 80135d8:	4616      	mov	r6, r2
 80135da:	d505      	bpl.n	80135e8 <__swrite+0x1e>
 80135dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135e0:	2302      	movs	r3, #2
 80135e2:	2200      	movs	r2, #0
 80135e4:	f002 feee 	bl	80163c4 <_lseek_r>
 80135e8:	89a3      	ldrh	r3, [r4, #12]
 80135ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80135ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80135f2:	81a3      	strh	r3, [r4, #12]
 80135f4:	4632      	mov	r2, r6
 80135f6:	463b      	mov	r3, r7
 80135f8:	4628      	mov	r0, r5
 80135fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80135fe:	f001 ba67 	b.w	8014ad0 <_write_r>

08013602 <__sseek>:
 8013602:	b510      	push	{r4, lr}
 8013604:	460c      	mov	r4, r1
 8013606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801360a:	f002 fedb 	bl	80163c4 <_lseek_r>
 801360e:	1c43      	adds	r3, r0, #1
 8013610:	89a3      	ldrh	r3, [r4, #12]
 8013612:	bf15      	itete	ne
 8013614:	6560      	strne	r0, [r4, #84]	; 0x54
 8013616:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801361a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801361e:	81a3      	strheq	r3, [r4, #12]
 8013620:	bf18      	it	ne
 8013622:	81a3      	strhne	r3, [r4, #12]
 8013624:	bd10      	pop	{r4, pc}

08013626 <__sclose>:
 8013626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801362a:	f001 baef 	b.w	8014c0c <_close_r>

0801362e <strchr>:
 801362e:	b2c9      	uxtb	r1, r1
 8013630:	4603      	mov	r3, r0
 8013632:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013636:	b11a      	cbz	r2, 8013640 <strchr+0x12>
 8013638:	428a      	cmp	r2, r1
 801363a:	d1f9      	bne.n	8013630 <strchr+0x2>
 801363c:	4618      	mov	r0, r3
 801363e:	4770      	bx	lr
 8013640:	2900      	cmp	r1, #0
 8013642:	bf18      	it	ne
 8013644:	2300      	movne	r3, #0
 8013646:	e7f9      	b.n	801363c <strchr+0xe>

08013648 <strcpy>:
 8013648:	4603      	mov	r3, r0
 801364a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801364e:	f803 2b01 	strb.w	r2, [r3], #1
 8013652:	2a00      	cmp	r2, #0
 8013654:	d1f9      	bne.n	801364a <strcpy+0x2>
 8013656:	4770      	bx	lr

08013658 <strncmp>:
 8013658:	b510      	push	{r4, lr}
 801365a:	b16a      	cbz	r2, 8013678 <strncmp+0x20>
 801365c:	3901      	subs	r1, #1
 801365e:	1884      	adds	r4, r0, r2
 8013660:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013664:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013668:	4293      	cmp	r3, r2
 801366a:	d103      	bne.n	8013674 <strncmp+0x1c>
 801366c:	42a0      	cmp	r0, r4
 801366e:	d001      	beq.n	8013674 <strncmp+0x1c>
 8013670:	2b00      	cmp	r3, #0
 8013672:	d1f5      	bne.n	8013660 <strncmp+0x8>
 8013674:	1a98      	subs	r0, r3, r2
 8013676:	bd10      	pop	{r4, pc}
 8013678:	4610      	mov	r0, r2
 801367a:	e7fc      	b.n	8013676 <strncmp+0x1e>

0801367c <sulp>:
 801367c:	b570      	push	{r4, r5, r6, lr}
 801367e:	4604      	mov	r4, r0
 8013680:	460d      	mov	r5, r1
 8013682:	ec45 4b10 	vmov	d0, r4, r5
 8013686:	4616      	mov	r6, r2
 8013688:	f003 fa9c 	bl	8016bc4 <__ulp>
 801368c:	ec51 0b10 	vmov	r0, r1, d0
 8013690:	b17e      	cbz	r6, 80136b2 <sulp+0x36>
 8013692:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013696:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801369a:	2b00      	cmp	r3, #0
 801369c:	dd09      	ble.n	80136b2 <sulp+0x36>
 801369e:	051b      	lsls	r3, r3, #20
 80136a0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80136a4:	2400      	movs	r4, #0
 80136a6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80136aa:	4622      	mov	r2, r4
 80136ac:	462b      	mov	r3, r5
 80136ae:	f7ec ffc3 	bl	8000638 <__aeabi_dmul>
 80136b2:	bd70      	pop	{r4, r5, r6, pc}
 80136b4:	0000      	movs	r0, r0
	...

080136b8 <_strtod_l>:
 80136b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136bc:	b0a3      	sub	sp, #140	; 0x8c
 80136be:	461f      	mov	r7, r3
 80136c0:	2300      	movs	r3, #0
 80136c2:	931e      	str	r3, [sp, #120]	; 0x78
 80136c4:	4ba4      	ldr	r3, [pc, #656]	; (8013958 <_strtod_l+0x2a0>)
 80136c6:	9219      	str	r2, [sp, #100]	; 0x64
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	9307      	str	r3, [sp, #28]
 80136cc:	4604      	mov	r4, r0
 80136ce:	4618      	mov	r0, r3
 80136d0:	4688      	mov	r8, r1
 80136d2:	f7ec fd97 	bl	8000204 <strlen>
 80136d6:	f04f 0a00 	mov.w	sl, #0
 80136da:	4605      	mov	r5, r0
 80136dc:	f04f 0b00 	mov.w	fp, #0
 80136e0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80136e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80136e6:	781a      	ldrb	r2, [r3, #0]
 80136e8:	2a2b      	cmp	r2, #43	; 0x2b
 80136ea:	d04c      	beq.n	8013786 <_strtod_l+0xce>
 80136ec:	d839      	bhi.n	8013762 <_strtod_l+0xaa>
 80136ee:	2a0d      	cmp	r2, #13
 80136f0:	d832      	bhi.n	8013758 <_strtod_l+0xa0>
 80136f2:	2a08      	cmp	r2, #8
 80136f4:	d832      	bhi.n	801375c <_strtod_l+0xa4>
 80136f6:	2a00      	cmp	r2, #0
 80136f8:	d03c      	beq.n	8013774 <_strtod_l+0xbc>
 80136fa:	2300      	movs	r3, #0
 80136fc:	930e      	str	r3, [sp, #56]	; 0x38
 80136fe:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8013700:	7833      	ldrb	r3, [r6, #0]
 8013702:	2b30      	cmp	r3, #48	; 0x30
 8013704:	f040 80b4 	bne.w	8013870 <_strtod_l+0x1b8>
 8013708:	7873      	ldrb	r3, [r6, #1]
 801370a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801370e:	2b58      	cmp	r3, #88	; 0x58
 8013710:	d16c      	bne.n	80137ec <_strtod_l+0x134>
 8013712:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013714:	9301      	str	r3, [sp, #4]
 8013716:	ab1e      	add	r3, sp, #120	; 0x78
 8013718:	9702      	str	r7, [sp, #8]
 801371a:	9300      	str	r3, [sp, #0]
 801371c:	4a8f      	ldr	r2, [pc, #572]	; (801395c <_strtod_l+0x2a4>)
 801371e:	ab1f      	add	r3, sp, #124	; 0x7c
 8013720:	a91d      	add	r1, sp, #116	; 0x74
 8013722:	4620      	mov	r0, r4
 8013724:	f002 fa4c 	bl	8015bc0 <__gethex>
 8013728:	f010 0707 	ands.w	r7, r0, #7
 801372c:	4605      	mov	r5, r0
 801372e:	d005      	beq.n	801373c <_strtod_l+0x84>
 8013730:	2f06      	cmp	r7, #6
 8013732:	d12a      	bne.n	801378a <_strtod_l+0xd2>
 8013734:	3601      	adds	r6, #1
 8013736:	2300      	movs	r3, #0
 8013738:	961d      	str	r6, [sp, #116]	; 0x74
 801373a:	930e      	str	r3, [sp, #56]	; 0x38
 801373c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801373e:	2b00      	cmp	r3, #0
 8013740:	f040 8596 	bne.w	8014270 <_strtod_l+0xbb8>
 8013744:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013746:	b1db      	cbz	r3, 8013780 <_strtod_l+0xc8>
 8013748:	4652      	mov	r2, sl
 801374a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801374e:	ec43 2b10 	vmov	d0, r2, r3
 8013752:	b023      	add	sp, #140	; 0x8c
 8013754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013758:	2a20      	cmp	r2, #32
 801375a:	d1ce      	bne.n	80136fa <_strtod_l+0x42>
 801375c:	3301      	adds	r3, #1
 801375e:	931d      	str	r3, [sp, #116]	; 0x74
 8013760:	e7c0      	b.n	80136e4 <_strtod_l+0x2c>
 8013762:	2a2d      	cmp	r2, #45	; 0x2d
 8013764:	d1c9      	bne.n	80136fa <_strtod_l+0x42>
 8013766:	2201      	movs	r2, #1
 8013768:	920e      	str	r2, [sp, #56]	; 0x38
 801376a:	1c5a      	adds	r2, r3, #1
 801376c:	921d      	str	r2, [sp, #116]	; 0x74
 801376e:	785b      	ldrb	r3, [r3, #1]
 8013770:	2b00      	cmp	r3, #0
 8013772:	d1c4      	bne.n	80136fe <_strtod_l+0x46>
 8013774:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013776:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801377a:	2b00      	cmp	r3, #0
 801377c:	f040 8576 	bne.w	801426c <_strtod_l+0xbb4>
 8013780:	4652      	mov	r2, sl
 8013782:	465b      	mov	r3, fp
 8013784:	e7e3      	b.n	801374e <_strtod_l+0x96>
 8013786:	2200      	movs	r2, #0
 8013788:	e7ee      	b.n	8013768 <_strtod_l+0xb0>
 801378a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801378c:	b13a      	cbz	r2, 801379e <_strtod_l+0xe6>
 801378e:	2135      	movs	r1, #53	; 0x35
 8013790:	a820      	add	r0, sp, #128	; 0x80
 8013792:	f003 fb22 	bl	8016dda <__copybits>
 8013796:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013798:	4620      	mov	r0, r4
 801379a:	f002 fee7 	bl	801656c <_Bfree>
 801379e:	3f01      	subs	r7, #1
 80137a0:	2f05      	cmp	r7, #5
 80137a2:	d807      	bhi.n	80137b4 <_strtod_l+0xfc>
 80137a4:	e8df f007 	tbb	[pc, r7]
 80137a8:	1d180b0e 	.word	0x1d180b0e
 80137ac:	030e      	.short	0x030e
 80137ae:	f04f 0b00 	mov.w	fp, #0
 80137b2:	46da      	mov	sl, fp
 80137b4:	0728      	lsls	r0, r5, #28
 80137b6:	d5c1      	bpl.n	801373c <_strtod_l+0x84>
 80137b8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80137bc:	e7be      	b.n	801373c <_strtod_l+0x84>
 80137be:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80137c2:	e7f7      	b.n	80137b4 <_strtod_l+0xfc>
 80137c4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80137c8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80137ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80137ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80137d2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80137d6:	e7ed      	b.n	80137b4 <_strtod_l+0xfc>
 80137d8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8013960 <_strtod_l+0x2a8>
 80137dc:	f04f 0a00 	mov.w	sl, #0
 80137e0:	e7e8      	b.n	80137b4 <_strtod_l+0xfc>
 80137e2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80137e6:	f04f 3aff 	mov.w	sl, #4294967295
 80137ea:	e7e3      	b.n	80137b4 <_strtod_l+0xfc>
 80137ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80137ee:	1c5a      	adds	r2, r3, #1
 80137f0:	921d      	str	r2, [sp, #116]	; 0x74
 80137f2:	785b      	ldrb	r3, [r3, #1]
 80137f4:	2b30      	cmp	r3, #48	; 0x30
 80137f6:	d0f9      	beq.n	80137ec <_strtod_l+0x134>
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d09f      	beq.n	801373c <_strtod_l+0x84>
 80137fc:	2301      	movs	r3, #1
 80137fe:	f04f 0900 	mov.w	r9, #0
 8013802:	9304      	str	r3, [sp, #16]
 8013804:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013806:	930a      	str	r3, [sp, #40]	; 0x28
 8013808:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801380c:	464f      	mov	r7, r9
 801380e:	220a      	movs	r2, #10
 8013810:	981d      	ldr	r0, [sp, #116]	; 0x74
 8013812:	7806      	ldrb	r6, [r0, #0]
 8013814:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8013818:	b2d9      	uxtb	r1, r3
 801381a:	2909      	cmp	r1, #9
 801381c:	d92a      	bls.n	8013874 <_strtod_l+0x1bc>
 801381e:	9907      	ldr	r1, [sp, #28]
 8013820:	462a      	mov	r2, r5
 8013822:	f7ff ff19 	bl	8013658 <strncmp>
 8013826:	b398      	cbz	r0, 8013890 <_strtod_l+0x1d8>
 8013828:	2000      	movs	r0, #0
 801382a:	4633      	mov	r3, r6
 801382c:	463d      	mov	r5, r7
 801382e:	9007      	str	r0, [sp, #28]
 8013830:	4602      	mov	r2, r0
 8013832:	2b65      	cmp	r3, #101	; 0x65
 8013834:	d001      	beq.n	801383a <_strtod_l+0x182>
 8013836:	2b45      	cmp	r3, #69	; 0x45
 8013838:	d118      	bne.n	801386c <_strtod_l+0x1b4>
 801383a:	b91d      	cbnz	r5, 8013844 <_strtod_l+0x18c>
 801383c:	9b04      	ldr	r3, [sp, #16]
 801383e:	4303      	orrs	r3, r0
 8013840:	d098      	beq.n	8013774 <_strtod_l+0xbc>
 8013842:	2500      	movs	r5, #0
 8013844:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8013848:	f108 0301 	add.w	r3, r8, #1
 801384c:	931d      	str	r3, [sp, #116]	; 0x74
 801384e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8013852:	2b2b      	cmp	r3, #43	; 0x2b
 8013854:	d075      	beq.n	8013942 <_strtod_l+0x28a>
 8013856:	2b2d      	cmp	r3, #45	; 0x2d
 8013858:	d07b      	beq.n	8013952 <_strtod_l+0x29a>
 801385a:	f04f 0c00 	mov.w	ip, #0
 801385e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013862:	2909      	cmp	r1, #9
 8013864:	f240 8082 	bls.w	801396c <_strtod_l+0x2b4>
 8013868:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801386c:	2600      	movs	r6, #0
 801386e:	e09d      	b.n	80139ac <_strtod_l+0x2f4>
 8013870:	2300      	movs	r3, #0
 8013872:	e7c4      	b.n	80137fe <_strtod_l+0x146>
 8013874:	2f08      	cmp	r7, #8
 8013876:	bfd8      	it	le
 8013878:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801387a:	f100 0001 	add.w	r0, r0, #1
 801387e:	bfda      	itte	le
 8013880:	fb02 3301 	mlale	r3, r2, r1, r3
 8013884:	9309      	strle	r3, [sp, #36]	; 0x24
 8013886:	fb02 3909 	mlagt	r9, r2, r9, r3
 801388a:	3701      	adds	r7, #1
 801388c:	901d      	str	r0, [sp, #116]	; 0x74
 801388e:	e7bf      	b.n	8013810 <_strtod_l+0x158>
 8013890:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013892:	195a      	adds	r2, r3, r5
 8013894:	921d      	str	r2, [sp, #116]	; 0x74
 8013896:	5d5b      	ldrb	r3, [r3, r5]
 8013898:	2f00      	cmp	r7, #0
 801389a:	d037      	beq.n	801390c <_strtod_l+0x254>
 801389c:	9007      	str	r0, [sp, #28]
 801389e:	463d      	mov	r5, r7
 80138a0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80138a4:	2a09      	cmp	r2, #9
 80138a6:	d912      	bls.n	80138ce <_strtod_l+0x216>
 80138a8:	2201      	movs	r2, #1
 80138aa:	e7c2      	b.n	8013832 <_strtod_l+0x17a>
 80138ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80138ae:	1c5a      	adds	r2, r3, #1
 80138b0:	921d      	str	r2, [sp, #116]	; 0x74
 80138b2:	785b      	ldrb	r3, [r3, #1]
 80138b4:	3001      	adds	r0, #1
 80138b6:	2b30      	cmp	r3, #48	; 0x30
 80138b8:	d0f8      	beq.n	80138ac <_strtod_l+0x1f4>
 80138ba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80138be:	2a08      	cmp	r2, #8
 80138c0:	f200 84db 	bhi.w	801427a <_strtod_l+0xbc2>
 80138c4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80138c6:	9007      	str	r0, [sp, #28]
 80138c8:	2000      	movs	r0, #0
 80138ca:	920a      	str	r2, [sp, #40]	; 0x28
 80138cc:	4605      	mov	r5, r0
 80138ce:	3b30      	subs	r3, #48	; 0x30
 80138d0:	f100 0201 	add.w	r2, r0, #1
 80138d4:	d014      	beq.n	8013900 <_strtod_l+0x248>
 80138d6:	9907      	ldr	r1, [sp, #28]
 80138d8:	4411      	add	r1, r2
 80138da:	9107      	str	r1, [sp, #28]
 80138dc:	462a      	mov	r2, r5
 80138de:	eb00 0e05 	add.w	lr, r0, r5
 80138e2:	210a      	movs	r1, #10
 80138e4:	4572      	cmp	r2, lr
 80138e6:	d113      	bne.n	8013910 <_strtod_l+0x258>
 80138e8:	182a      	adds	r2, r5, r0
 80138ea:	2a08      	cmp	r2, #8
 80138ec:	f105 0501 	add.w	r5, r5, #1
 80138f0:	4405      	add	r5, r0
 80138f2:	dc1c      	bgt.n	801392e <_strtod_l+0x276>
 80138f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80138f6:	220a      	movs	r2, #10
 80138f8:	fb02 3301 	mla	r3, r2, r1, r3
 80138fc:	9309      	str	r3, [sp, #36]	; 0x24
 80138fe:	2200      	movs	r2, #0
 8013900:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013902:	1c59      	adds	r1, r3, #1
 8013904:	911d      	str	r1, [sp, #116]	; 0x74
 8013906:	785b      	ldrb	r3, [r3, #1]
 8013908:	4610      	mov	r0, r2
 801390a:	e7c9      	b.n	80138a0 <_strtod_l+0x1e8>
 801390c:	4638      	mov	r0, r7
 801390e:	e7d2      	b.n	80138b6 <_strtod_l+0x1fe>
 8013910:	2a08      	cmp	r2, #8
 8013912:	dc04      	bgt.n	801391e <_strtod_l+0x266>
 8013914:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013916:	434e      	muls	r6, r1
 8013918:	9609      	str	r6, [sp, #36]	; 0x24
 801391a:	3201      	adds	r2, #1
 801391c:	e7e2      	b.n	80138e4 <_strtod_l+0x22c>
 801391e:	f102 0c01 	add.w	ip, r2, #1
 8013922:	f1bc 0f10 	cmp.w	ip, #16
 8013926:	bfd8      	it	le
 8013928:	fb01 f909 	mulle.w	r9, r1, r9
 801392c:	e7f5      	b.n	801391a <_strtod_l+0x262>
 801392e:	2d10      	cmp	r5, #16
 8013930:	bfdc      	itt	le
 8013932:	220a      	movle	r2, #10
 8013934:	fb02 3909 	mlale	r9, r2, r9, r3
 8013938:	e7e1      	b.n	80138fe <_strtod_l+0x246>
 801393a:	2300      	movs	r3, #0
 801393c:	9307      	str	r3, [sp, #28]
 801393e:	2201      	movs	r2, #1
 8013940:	e77c      	b.n	801383c <_strtod_l+0x184>
 8013942:	f04f 0c00 	mov.w	ip, #0
 8013946:	f108 0302 	add.w	r3, r8, #2
 801394a:	931d      	str	r3, [sp, #116]	; 0x74
 801394c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8013950:	e785      	b.n	801385e <_strtod_l+0x1a6>
 8013952:	f04f 0c01 	mov.w	ip, #1
 8013956:	e7f6      	b.n	8013946 <_strtod_l+0x28e>
 8013958:	0801a000 	.word	0x0801a000
 801395c:	08019dec 	.word	0x08019dec
 8013960:	7ff00000 	.word	0x7ff00000
 8013964:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013966:	1c59      	adds	r1, r3, #1
 8013968:	911d      	str	r1, [sp, #116]	; 0x74
 801396a:	785b      	ldrb	r3, [r3, #1]
 801396c:	2b30      	cmp	r3, #48	; 0x30
 801396e:	d0f9      	beq.n	8013964 <_strtod_l+0x2ac>
 8013970:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8013974:	2908      	cmp	r1, #8
 8013976:	f63f af79 	bhi.w	801386c <_strtod_l+0x1b4>
 801397a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801397e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013980:	9308      	str	r3, [sp, #32]
 8013982:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013984:	1c59      	adds	r1, r3, #1
 8013986:	911d      	str	r1, [sp, #116]	; 0x74
 8013988:	785b      	ldrb	r3, [r3, #1]
 801398a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801398e:	2e09      	cmp	r6, #9
 8013990:	d937      	bls.n	8013a02 <_strtod_l+0x34a>
 8013992:	9e08      	ldr	r6, [sp, #32]
 8013994:	1b89      	subs	r1, r1, r6
 8013996:	2908      	cmp	r1, #8
 8013998:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801399c:	dc02      	bgt.n	80139a4 <_strtod_l+0x2ec>
 801399e:	4576      	cmp	r6, lr
 80139a0:	bfa8      	it	ge
 80139a2:	4676      	movge	r6, lr
 80139a4:	f1bc 0f00 	cmp.w	ip, #0
 80139a8:	d000      	beq.n	80139ac <_strtod_l+0x2f4>
 80139aa:	4276      	negs	r6, r6
 80139ac:	2d00      	cmp	r5, #0
 80139ae:	d14f      	bne.n	8013a50 <_strtod_l+0x398>
 80139b0:	9904      	ldr	r1, [sp, #16]
 80139b2:	4301      	orrs	r1, r0
 80139b4:	f47f aec2 	bne.w	801373c <_strtod_l+0x84>
 80139b8:	2a00      	cmp	r2, #0
 80139ba:	f47f aedb 	bne.w	8013774 <_strtod_l+0xbc>
 80139be:	2b69      	cmp	r3, #105	; 0x69
 80139c0:	d027      	beq.n	8013a12 <_strtod_l+0x35a>
 80139c2:	dc24      	bgt.n	8013a0e <_strtod_l+0x356>
 80139c4:	2b49      	cmp	r3, #73	; 0x49
 80139c6:	d024      	beq.n	8013a12 <_strtod_l+0x35a>
 80139c8:	2b4e      	cmp	r3, #78	; 0x4e
 80139ca:	f47f aed3 	bne.w	8013774 <_strtod_l+0xbc>
 80139ce:	499e      	ldr	r1, [pc, #632]	; (8013c48 <_strtod_l+0x590>)
 80139d0:	a81d      	add	r0, sp, #116	; 0x74
 80139d2:	f002 fb4d 	bl	8016070 <__match>
 80139d6:	2800      	cmp	r0, #0
 80139d8:	f43f aecc 	beq.w	8013774 <_strtod_l+0xbc>
 80139dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80139de:	781b      	ldrb	r3, [r3, #0]
 80139e0:	2b28      	cmp	r3, #40	; 0x28
 80139e2:	d12d      	bne.n	8013a40 <_strtod_l+0x388>
 80139e4:	4999      	ldr	r1, [pc, #612]	; (8013c4c <_strtod_l+0x594>)
 80139e6:	aa20      	add	r2, sp, #128	; 0x80
 80139e8:	a81d      	add	r0, sp, #116	; 0x74
 80139ea:	f002 fb55 	bl	8016098 <__hexnan>
 80139ee:	2805      	cmp	r0, #5
 80139f0:	d126      	bne.n	8013a40 <_strtod_l+0x388>
 80139f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80139f4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80139f8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80139fc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013a00:	e69c      	b.n	801373c <_strtod_l+0x84>
 8013a02:	210a      	movs	r1, #10
 8013a04:	fb01 3e0e 	mla	lr, r1, lr, r3
 8013a08:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013a0c:	e7b9      	b.n	8013982 <_strtod_l+0x2ca>
 8013a0e:	2b6e      	cmp	r3, #110	; 0x6e
 8013a10:	e7db      	b.n	80139ca <_strtod_l+0x312>
 8013a12:	498f      	ldr	r1, [pc, #572]	; (8013c50 <_strtod_l+0x598>)
 8013a14:	a81d      	add	r0, sp, #116	; 0x74
 8013a16:	f002 fb2b 	bl	8016070 <__match>
 8013a1a:	2800      	cmp	r0, #0
 8013a1c:	f43f aeaa 	beq.w	8013774 <_strtod_l+0xbc>
 8013a20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013a22:	498c      	ldr	r1, [pc, #560]	; (8013c54 <_strtod_l+0x59c>)
 8013a24:	3b01      	subs	r3, #1
 8013a26:	a81d      	add	r0, sp, #116	; 0x74
 8013a28:	931d      	str	r3, [sp, #116]	; 0x74
 8013a2a:	f002 fb21 	bl	8016070 <__match>
 8013a2e:	b910      	cbnz	r0, 8013a36 <_strtod_l+0x37e>
 8013a30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013a32:	3301      	adds	r3, #1
 8013a34:	931d      	str	r3, [sp, #116]	; 0x74
 8013a36:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8013c64 <_strtod_l+0x5ac>
 8013a3a:	f04f 0a00 	mov.w	sl, #0
 8013a3e:	e67d      	b.n	801373c <_strtod_l+0x84>
 8013a40:	4885      	ldr	r0, [pc, #532]	; (8013c58 <_strtod_l+0x5a0>)
 8013a42:	f7fd ffd5 	bl	80119f0 <nan>
 8013a46:	ed8d 0b04 	vstr	d0, [sp, #16]
 8013a4a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8013a4e:	e675      	b.n	801373c <_strtod_l+0x84>
 8013a50:	9b07      	ldr	r3, [sp, #28]
 8013a52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013a54:	1af3      	subs	r3, r6, r3
 8013a56:	2f00      	cmp	r7, #0
 8013a58:	bf08      	it	eq
 8013a5a:	462f      	moveq	r7, r5
 8013a5c:	2d10      	cmp	r5, #16
 8013a5e:	9308      	str	r3, [sp, #32]
 8013a60:	46a8      	mov	r8, r5
 8013a62:	bfa8      	it	ge
 8013a64:	f04f 0810 	movge.w	r8, #16
 8013a68:	f7ec fd6c 	bl	8000544 <__aeabi_ui2d>
 8013a6c:	2d09      	cmp	r5, #9
 8013a6e:	4682      	mov	sl, r0
 8013a70:	468b      	mov	fp, r1
 8013a72:	dd13      	ble.n	8013a9c <_strtod_l+0x3e4>
 8013a74:	4b79      	ldr	r3, [pc, #484]	; (8013c5c <_strtod_l+0x5a4>)
 8013a76:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013a7a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013a7e:	f7ec fddb 	bl	8000638 <__aeabi_dmul>
 8013a82:	4682      	mov	sl, r0
 8013a84:	4648      	mov	r0, r9
 8013a86:	468b      	mov	fp, r1
 8013a88:	f7ec fd5c 	bl	8000544 <__aeabi_ui2d>
 8013a8c:	4602      	mov	r2, r0
 8013a8e:	460b      	mov	r3, r1
 8013a90:	4650      	mov	r0, sl
 8013a92:	4659      	mov	r1, fp
 8013a94:	f7ec fc1a 	bl	80002cc <__adddf3>
 8013a98:	4682      	mov	sl, r0
 8013a9a:	468b      	mov	fp, r1
 8013a9c:	2d0f      	cmp	r5, #15
 8013a9e:	dc38      	bgt.n	8013b12 <_strtod_l+0x45a>
 8013aa0:	9b08      	ldr	r3, [sp, #32]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	f43f ae4a 	beq.w	801373c <_strtod_l+0x84>
 8013aa8:	dd24      	ble.n	8013af4 <_strtod_l+0x43c>
 8013aaa:	2b16      	cmp	r3, #22
 8013aac:	dc0b      	bgt.n	8013ac6 <_strtod_l+0x40e>
 8013aae:	4d6b      	ldr	r5, [pc, #428]	; (8013c5c <_strtod_l+0x5a4>)
 8013ab0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8013ab4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013ab8:	4652      	mov	r2, sl
 8013aba:	465b      	mov	r3, fp
 8013abc:	f7ec fdbc 	bl	8000638 <__aeabi_dmul>
 8013ac0:	4682      	mov	sl, r0
 8013ac2:	468b      	mov	fp, r1
 8013ac4:	e63a      	b.n	801373c <_strtod_l+0x84>
 8013ac6:	9a08      	ldr	r2, [sp, #32]
 8013ac8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8013acc:	4293      	cmp	r3, r2
 8013ace:	db20      	blt.n	8013b12 <_strtod_l+0x45a>
 8013ad0:	4c62      	ldr	r4, [pc, #392]	; (8013c5c <_strtod_l+0x5a4>)
 8013ad2:	f1c5 050f 	rsb	r5, r5, #15
 8013ad6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8013ada:	4652      	mov	r2, sl
 8013adc:	465b      	mov	r3, fp
 8013ade:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ae2:	f7ec fda9 	bl	8000638 <__aeabi_dmul>
 8013ae6:	9b08      	ldr	r3, [sp, #32]
 8013ae8:	1b5d      	subs	r5, r3, r5
 8013aea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8013aee:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013af2:	e7e3      	b.n	8013abc <_strtod_l+0x404>
 8013af4:	9b08      	ldr	r3, [sp, #32]
 8013af6:	3316      	adds	r3, #22
 8013af8:	db0b      	blt.n	8013b12 <_strtod_l+0x45a>
 8013afa:	9b07      	ldr	r3, [sp, #28]
 8013afc:	4a57      	ldr	r2, [pc, #348]	; (8013c5c <_strtod_l+0x5a4>)
 8013afe:	1b9e      	subs	r6, r3, r6
 8013b00:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8013b04:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013b08:	4650      	mov	r0, sl
 8013b0a:	4659      	mov	r1, fp
 8013b0c:	f7ec febe 	bl	800088c <__aeabi_ddiv>
 8013b10:	e7d6      	b.n	8013ac0 <_strtod_l+0x408>
 8013b12:	9b08      	ldr	r3, [sp, #32]
 8013b14:	eba5 0808 	sub.w	r8, r5, r8
 8013b18:	4498      	add	r8, r3
 8013b1a:	f1b8 0f00 	cmp.w	r8, #0
 8013b1e:	dd71      	ble.n	8013c04 <_strtod_l+0x54c>
 8013b20:	f018 030f 	ands.w	r3, r8, #15
 8013b24:	d00a      	beq.n	8013b3c <_strtod_l+0x484>
 8013b26:	494d      	ldr	r1, [pc, #308]	; (8013c5c <_strtod_l+0x5a4>)
 8013b28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013b2c:	4652      	mov	r2, sl
 8013b2e:	465b      	mov	r3, fp
 8013b30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b34:	f7ec fd80 	bl	8000638 <__aeabi_dmul>
 8013b38:	4682      	mov	sl, r0
 8013b3a:	468b      	mov	fp, r1
 8013b3c:	f038 080f 	bics.w	r8, r8, #15
 8013b40:	d04d      	beq.n	8013bde <_strtod_l+0x526>
 8013b42:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013b46:	dd22      	ble.n	8013b8e <_strtod_l+0x4d6>
 8013b48:	2500      	movs	r5, #0
 8013b4a:	462e      	mov	r6, r5
 8013b4c:	9509      	str	r5, [sp, #36]	; 0x24
 8013b4e:	9507      	str	r5, [sp, #28]
 8013b50:	2322      	movs	r3, #34	; 0x22
 8013b52:	f8df b110 	ldr.w	fp, [pc, #272]	; 8013c64 <_strtod_l+0x5ac>
 8013b56:	6023      	str	r3, [r4, #0]
 8013b58:	f04f 0a00 	mov.w	sl, #0
 8013b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	f43f adec 	beq.w	801373c <_strtod_l+0x84>
 8013b64:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013b66:	4620      	mov	r0, r4
 8013b68:	f002 fd00 	bl	801656c <_Bfree>
 8013b6c:	9907      	ldr	r1, [sp, #28]
 8013b6e:	4620      	mov	r0, r4
 8013b70:	f002 fcfc 	bl	801656c <_Bfree>
 8013b74:	4631      	mov	r1, r6
 8013b76:	4620      	mov	r0, r4
 8013b78:	f002 fcf8 	bl	801656c <_Bfree>
 8013b7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013b7e:	4620      	mov	r0, r4
 8013b80:	f002 fcf4 	bl	801656c <_Bfree>
 8013b84:	4629      	mov	r1, r5
 8013b86:	4620      	mov	r0, r4
 8013b88:	f002 fcf0 	bl	801656c <_Bfree>
 8013b8c:	e5d6      	b.n	801373c <_strtod_l+0x84>
 8013b8e:	2300      	movs	r3, #0
 8013b90:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013b94:	4650      	mov	r0, sl
 8013b96:	4659      	mov	r1, fp
 8013b98:	4699      	mov	r9, r3
 8013b9a:	f1b8 0f01 	cmp.w	r8, #1
 8013b9e:	dc21      	bgt.n	8013be4 <_strtod_l+0x52c>
 8013ba0:	b10b      	cbz	r3, 8013ba6 <_strtod_l+0x4ee>
 8013ba2:	4682      	mov	sl, r0
 8013ba4:	468b      	mov	fp, r1
 8013ba6:	4b2e      	ldr	r3, [pc, #184]	; (8013c60 <_strtod_l+0x5a8>)
 8013ba8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8013bac:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8013bb0:	4652      	mov	r2, sl
 8013bb2:	465b      	mov	r3, fp
 8013bb4:	e9d9 0100 	ldrd	r0, r1, [r9]
 8013bb8:	f7ec fd3e 	bl	8000638 <__aeabi_dmul>
 8013bbc:	4b29      	ldr	r3, [pc, #164]	; (8013c64 <_strtod_l+0x5ac>)
 8013bbe:	460a      	mov	r2, r1
 8013bc0:	400b      	ands	r3, r1
 8013bc2:	4929      	ldr	r1, [pc, #164]	; (8013c68 <_strtod_l+0x5b0>)
 8013bc4:	428b      	cmp	r3, r1
 8013bc6:	4682      	mov	sl, r0
 8013bc8:	d8be      	bhi.n	8013b48 <_strtod_l+0x490>
 8013bca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013bce:	428b      	cmp	r3, r1
 8013bd0:	bf86      	itte	hi
 8013bd2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8013c6c <_strtod_l+0x5b4>
 8013bd6:	f04f 3aff 	movhi.w	sl, #4294967295
 8013bda:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8013bde:	2300      	movs	r3, #0
 8013be0:	9304      	str	r3, [sp, #16]
 8013be2:	e081      	b.n	8013ce8 <_strtod_l+0x630>
 8013be4:	f018 0f01 	tst.w	r8, #1
 8013be8:	d007      	beq.n	8013bfa <_strtod_l+0x542>
 8013bea:	4b1d      	ldr	r3, [pc, #116]	; (8013c60 <_strtod_l+0x5a8>)
 8013bec:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8013bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bf4:	f7ec fd20 	bl	8000638 <__aeabi_dmul>
 8013bf8:	2301      	movs	r3, #1
 8013bfa:	f109 0901 	add.w	r9, r9, #1
 8013bfe:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013c02:	e7ca      	b.n	8013b9a <_strtod_l+0x4e2>
 8013c04:	d0eb      	beq.n	8013bde <_strtod_l+0x526>
 8013c06:	f1c8 0800 	rsb	r8, r8, #0
 8013c0a:	f018 020f 	ands.w	r2, r8, #15
 8013c0e:	d00a      	beq.n	8013c26 <_strtod_l+0x56e>
 8013c10:	4b12      	ldr	r3, [pc, #72]	; (8013c5c <_strtod_l+0x5a4>)
 8013c12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013c16:	4650      	mov	r0, sl
 8013c18:	4659      	mov	r1, fp
 8013c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c1e:	f7ec fe35 	bl	800088c <__aeabi_ddiv>
 8013c22:	4682      	mov	sl, r0
 8013c24:	468b      	mov	fp, r1
 8013c26:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013c2a:	d0d8      	beq.n	8013bde <_strtod_l+0x526>
 8013c2c:	f1b8 0f1f 	cmp.w	r8, #31
 8013c30:	dd1e      	ble.n	8013c70 <_strtod_l+0x5b8>
 8013c32:	2500      	movs	r5, #0
 8013c34:	462e      	mov	r6, r5
 8013c36:	9509      	str	r5, [sp, #36]	; 0x24
 8013c38:	9507      	str	r5, [sp, #28]
 8013c3a:	2322      	movs	r3, #34	; 0x22
 8013c3c:	f04f 0a00 	mov.w	sl, #0
 8013c40:	f04f 0b00 	mov.w	fp, #0
 8013c44:	6023      	str	r3, [r4, #0]
 8013c46:	e789      	b.n	8013b5c <_strtod_l+0x4a4>
 8013c48:	08019dc1 	.word	0x08019dc1
 8013c4c:	08019e00 	.word	0x08019e00
 8013c50:	08019db9 	.word	0x08019db9
 8013c54:	08019f1c 	.word	0x08019f1c
 8013c58:	08019f18 	.word	0x08019f18
 8013c5c:	0801a0a0 	.word	0x0801a0a0
 8013c60:	0801a078 	.word	0x0801a078
 8013c64:	7ff00000 	.word	0x7ff00000
 8013c68:	7ca00000 	.word	0x7ca00000
 8013c6c:	7fefffff 	.word	0x7fefffff
 8013c70:	f018 0310 	ands.w	r3, r8, #16
 8013c74:	bf18      	it	ne
 8013c76:	236a      	movne	r3, #106	; 0x6a
 8013c78:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8014030 <_strtod_l+0x978>
 8013c7c:	9304      	str	r3, [sp, #16]
 8013c7e:	4650      	mov	r0, sl
 8013c80:	4659      	mov	r1, fp
 8013c82:	2300      	movs	r3, #0
 8013c84:	f018 0f01 	tst.w	r8, #1
 8013c88:	d004      	beq.n	8013c94 <_strtod_l+0x5dc>
 8013c8a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8013c8e:	f7ec fcd3 	bl	8000638 <__aeabi_dmul>
 8013c92:	2301      	movs	r3, #1
 8013c94:	ea5f 0868 	movs.w	r8, r8, asr #1
 8013c98:	f109 0908 	add.w	r9, r9, #8
 8013c9c:	d1f2      	bne.n	8013c84 <_strtod_l+0x5cc>
 8013c9e:	b10b      	cbz	r3, 8013ca4 <_strtod_l+0x5ec>
 8013ca0:	4682      	mov	sl, r0
 8013ca2:	468b      	mov	fp, r1
 8013ca4:	9b04      	ldr	r3, [sp, #16]
 8013ca6:	b1bb      	cbz	r3, 8013cd8 <_strtod_l+0x620>
 8013ca8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8013cac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	4659      	mov	r1, fp
 8013cb4:	dd10      	ble.n	8013cd8 <_strtod_l+0x620>
 8013cb6:	2b1f      	cmp	r3, #31
 8013cb8:	f340 8128 	ble.w	8013f0c <_strtod_l+0x854>
 8013cbc:	2b34      	cmp	r3, #52	; 0x34
 8013cbe:	bfde      	ittt	le
 8013cc0:	3b20      	suble	r3, #32
 8013cc2:	f04f 32ff 	movle.w	r2, #4294967295
 8013cc6:	fa02 f303 	lslle.w	r3, r2, r3
 8013cca:	f04f 0a00 	mov.w	sl, #0
 8013cce:	bfcc      	ite	gt
 8013cd0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013cd4:	ea03 0b01 	andle.w	fp, r3, r1
 8013cd8:	2200      	movs	r2, #0
 8013cda:	2300      	movs	r3, #0
 8013cdc:	4650      	mov	r0, sl
 8013cde:	4659      	mov	r1, fp
 8013ce0:	f7ec ff12 	bl	8000b08 <__aeabi_dcmpeq>
 8013ce4:	2800      	cmp	r0, #0
 8013ce6:	d1a4      	bne.n	8013c32 <_strtod_l+0x57a>
 8013ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013cea:	9300      	str	r3, [sp, #0]
 8013cec:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013cee:	462b      	mov	r3, r5
 8013cf0:	463a      	mov	r2, r7
 8013cf2:	4620      	mov	r0, r4
 8013cf4:	f002 fca6 	bl	8016644 <__s2b>
 8013cf8:	9009      	str	r0, [sp, #36]	; 0x24
 8013cfa:	2800      	cmp	r0, #0
 8013cfc:	f43f af24 	beq.w	8013b48 <_strtod_l+0x490>
 8013d00:	9b07      	ldr	r3, [sp, #28]
 8013d02:	1b9e      	subs	r6, r3, r6
 8013d04:	9b08      	ldr	r3, [sp, #32]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	bfb4      	ite	lt
 8013d0a:	4633      	movlt	r3, r6
 8013d0c:	2300      	movge	r3, #0
 8013d0e:	9310      	str	r3, [sp, #64]	; 0x40
 8013d10:	9b08      	ldr	r3, [sp, #32]
 8013d12:	2500      	movs	r5, #0
 8013d14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013d18:	9318      	str	r3, [sp, #96]	; 0x60
 8013d1a:	462e      	mov	r6, r5
 8013d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d1e:	4620      	mov	r0, r4
 8013d20:	6859      	ldr	r1, [r3, #4]
 8013d22:	f002 fbe3 	bl	80164ec <_Balloc>
 8013d26:	9007      	str	r0, [sp, #28]
 8013d28:	2800      	cmp	r0, #0
 8013d2a:	f43f af11 	beq.w	8013b50 <_strtod_l+0x498>
 8013d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d30:	691a      	ldr	r2, [r3, #16]
 8013d32:	3202      	adds	r2, #2
 8013d34:	f103 010c 	add.w	r1, r3, #12
 8013d38:	0092      	lsls	r2, r2, #2
 8013d3a:	300c      	adds	r0, #12
 8013d3c:	f7fe f8c2 	bl	8011ec4 <memcpy>
 8013d40:	ec4b ab10 	vmov	d0, sl, fp
 8013d44:	aa20      	add	r2, sp, #128	; 0x80
 8013d46:	a91f      	add	r1, sp, #124	; 0x7c
 8013d48:	4620      	mov	r0, r4
 8013d4a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8013d4e:	f002 ffb5 	bl	8016cbc <__d2b>
 8013d52:	901e      	str	r0, [sp, #120]	; 0x78
 8013d54:	2800      	cmp	r0, #0
 8013d56:	f43f aefb 	beq.w	8013b50 <_strtod_l+0x498>
 8013d5a:	2101      	movs	r1, #1
 8013d5c:	4620      	mov	r0, r4
 8013d5e:	f002 fd0b 	bl	8016778 <__i2b>
 8013d62:	4606      	mov	r6, r0
 8013d64:	2800      	cmp	r0, #0
 8013d66:	f43f aef3 	beq.w	8013b50 <_strtod_l+0x498>
 8013d6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013d6c:	9904      	ldr	r1, [sp, #16]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	bfab      	itete	ge
 8013d72:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8013d74:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8013d76:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8013d78:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8013d7c:	bfac      	ite	ge
 8013d7e:	eb03 0902 	addge.w	r9, r3, r2
 8013d82:	1ad7      	sublt	r7, r2, r3
 8013d84:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013d86:	eba3 0801 	sub.w	r8, r3, r1
 8013d8a:	4490      	add	r8, r2
 8013d8c:	4ba3      	ldr	r3, [pc, #652]	; (801401c <_strtod_l+0x964>)
 8013d8e:	f108 38ff 	add.w	r8, r8, #4294967295
 8013d92:	4598      	cmp	r8, r3
 8013d94:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013d98:	f280 80cc 	bge.w	8013f34 <_strtod_l+0x87c>
 8013d9c:	eba3 0308 	sub.w	r3, r3, r8
 8013da0:	2b1f      	cmp	r3, #31
 8013da2:	eba2 0203 	sub.w	r2, r2, r3
 8013da6:	f04f 0101 	mov.w	r1, #1
 8013daa:	f300 80b6 	bgt.w	8013f1a <_strtod_l+0x862>
 8013dae:	fa01 f303 	lsl.w	r3, r1, r3
 8013db2:	9311      	str	r3, [sp, #68]	; 0x44
 8013db4:	2300      	movs	r3, #0
 8013db6:	930c      	str	r3, [sp, #48]	; 0x30
 8013db8:	eb09 0802 	add.w	r8, r9, r2
 8013dbc:	9b04      	ldr	r3, [sp, #16]
 8013dbe:	45c1      	cmp	r9, r8
 8013dc0:	4417      	add	r7, r2
 8013dc2:	441f      	add	r7, r3
 8013dc4:	464b      	mov	r3, r9
 8013dc6:	bfa8      	it	ge
 8013dc8:	4643      	movge	r3, r8
 8013dca:	42bb      	cmp	r3, r7
 8013dcc:	bfa8      	it	ge
 8013dce:	463b      	movge	r3, r7
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	bfc2      	ittt	gt
 8013dd4:	eba8 0803 	subgt.w	r8, r8, r3
 8013dd8:	1aff      	subgt	r7, r7, r3
 8013dda:	eba9 0903 	subgt.w	r9, r9, r3
 8013dde:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	dd17      	ble.n	8013e14 <_strtod_l+0x75c>
 8013de4:	4631      	mov	r1, r6
 8013de6:	461a      	mov	r2, r3
 8013de8:	4620      	mov	r0, r4
 8013dea:	f002 fd81 	bl	80168f0 <__pow5mult>
 8013dee:	4606      	mov	r6, r0
 8013df0:	2800      	cmp	r0, #0
 8013df2:	f43f aead 	beq.w	8013b50 <_strtod_l+0x498>
 8013df6:	4601      	mov	r1, r0
 8013df8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013dfa:	4620      	mov	r0, r4
 8013dfc:	f002 fcd2 	bl	80167a4 <__multiply>
 8013e00:	900f      	str	r0, [sp, #60]	; 0x3c
 8013e02:	2800      	cmp	r0, #0
 8013e04:	f43f aea4 	beq.w	8013b50 <_strtod_l+0x498>
 8013e08:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013e0a:	4620      	mov	r0, r4
 8013e0c:	f002 fbae 	bl	801656c <_Bfree>
 8013e10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013e12:	931e      	str	r3, [sp, #120]	; 0x78
 8013e14:	f1b8 0f00 	cmp.w	r8, #0
 8013e18:	f300 8091 	bgt.w	8013f3e <_strtod_l+0x886>
 8013e1c:	9b08      	ldr	r3, [sp, #32]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	dd08      	ble.n	8013e34 <_strtod_l+0x77c>
 8013e22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013e24:	9907      	ldr	r1, [sp, #28]
 8013e26:	4620      	mov	r0, r4
 8013e28:	f002 fd62 	bl	80168f0 <__pow5mult>
 8013e2c:	9007      	str	r0, [sp, #28]
 8013e2e:	2800      	cmp	r0, #0
 8013e30:	f43f ae8e 	beq.w	8013b50 <_strtod_l+0x498>
 8013e34:	2f00      	cmp	r7, #0
 8013e36:	dd08      	ble.n	8013e4a <_strtod_l+0x792>
 8013e38:	9907      	ldr	r1, [sp, #28]
 8013e3a:	463a      	mov	r2, r7
 8013e3c:	4620      	mov	r0, r4
 8013e3e:	f002 fdb1 	bl	80169a4 <__lshift>
 8013e42:	9007      	str	r0, [sp, #28]
 8013e44:	2800      	cmp	r0, #0
 8013e46:	f43f ae83 	beq.w	8013b50 <_strtod_l+0x498>
 8013e4a:	f1b9 0f00 	cmp.w	r9, #0
 8013e4e:	dd08      	ble.n	8013e62 <_strtod_l+0x7aa>
 8013e50:	4631      	mov	r1, r6
 8013e52:	464a      	mov	r2, r9
 8013e54:	4620      	mov	r0, r4
 8013e56:	f002 fda5 	bl	80169a4 <__lshift>
 8013e5a:	4606      	mov	r6, r0
 8013e5c:	2800      	cmp	r0, #0
 8013e5e:	f43f ae77 	beq.w	8013b50 <_strtod_l+0x498>
 8013e62:	9a07      	ldr	r2, [sp, #28]
 8013e64:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013e66:	4620      	mov	r0, r4
 8013e68:	f002 fe24 	bl	8016ab4 <__mdiff>
 8013e6c:	4605      	mov	r5, r0
 8013e6e:	2800      	cmp	r0, #0
 8013e70:	f43f ae6e 	beq.w	8013b50 <_strtod_l+0x498>
 8013e74:	68c3      	ldr	r3, [r0, #12]
 8013e76:	930f      	str	r3, [sp, #60]	; 0x3c
 8013e78:	2300      	movs	r3, #0
 8013e7a:	60c3      	str	r3, [r0, #12]
 8013e7c:	4631      	mov	r1, r6
 8013e7e:	f002 fdfd 	bl	8016a7c <__mcmp>
 8013e82:	2800      	cmp	r0, #0
 8013e84:	da65      	bge.n	8013f52 <_strtod_l+0x89a>
 8013e86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013e88:	ea53 030a 	orrs.w	r3, r3, sl
 8013e8c:	f040 8087 	bne.w	8013f9e <_strtod_l+0x8e6>
 8013e90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	f040 8082 	bne.w	8013f9e <_strtod_l+0x8e6>
 8013e9a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013e9e:	0d1b      	lsrs	r3, r3, #20
 8013ea0:	051b      	lsls	r3, r3, #20
 8013ea2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013ea6:	d97a      	bls.n	8013f9e <_strtod_l+0x8e6>
 8013ea8:	696b      	ldr	r3, [r5, #20]
 8013eaa:	b913      	cbnz	r3, 8013eb2 <_strtod_l+0x7fa>
 8013eac:	692b      	ldr	r3, [r5, #16]
 8013eae:	2b01      	cmp	r3, #1
 8013eb0:	dd75      	ble.n	8013f9e <_strtod_l+0x8e6>
 8013eb2:	4629      	mov	r1, r5
 8013eb4:	2201      	movs	r2, #1
 8013eb6:	4620      	mov	r0, r4
 8013eb8:	f002 fd74 	bl	80169a4 <__lshift>
 8013ebc:	4631      	mov	r1, r6
 8013ebe:	4605      	mov	r5, r0
 8013ec0:	f002 fddc 	bl	8016a7c <__mcmp>
 8013ec4:	2800      	cmp	r0, #0
 8013ec6:	dd6a      	ble.n	8013f9e <_strtod_l+0x8e6>
 8013ec8:	9904      	ldr	r1, [sp, #16]
 8013eca:	4a55      	ldr	r2, [pc, #340]	; (8014020 <_strtod_l+0x968>)
 8013ecc:	465b      	mov	r3, fp
 8013ece:	2900      	cmp	r1, #0
 8013ed0:	f000 8085 	beq.w	8013fde <_strtod_l+0x926>
 8013ed4:	ea02 010b 	and.w	r1, r2, fp
 8013ed8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013edc:	dc7f      	bgt.n	8013fde <_strtod_l+0x926>
 8013ede:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013ee2:	f77f aeaa 	ble.w	8013c3a <_strtod_l+0x582>
 8013ee6:	4a4f      	ldr	r2, [pc, #316]	; (8014024 <_strtod_l+0x96c>)
 8013ee8:	2300      	movs	r3, #0
 8013eea:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8013eee:	4650      	mov	r0, sl
 8013ef0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8013ef4:	4659      	mov	r1, fp
 8013ef6:	f7ec fb9f 	bl	8000638 <__aeabi_dmul>
 8013efa:	460b      	mov	r3, r1
 8013efc:	4303      	orrs	r3, r0
 8013efe:	bf08      	it	eq
 8013f00:	2322      	moveq	r3, #34	; 0x22
 8013f02:	4682      	mov	sl, r0
 8013f04:	468b      	mov	fp, r1
 8013f06:	bf08      	it	eq
 8013f08:	6023      	streq	r3, [r4, #0]
 8013f0a:	e62b      	b.n	8013b64 <_strtod_l+0x4ac>
 8013f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8013f10:	fa02 f303 	lsl.w	r3, r2, r3
 8013f14:	ea03 0a0a 	and.w	sl, r3, sl
 8013f18:	e6de      	b.n	8013cd8 <_strtod_l+0x620>
 8013f1a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8013f1e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8013f22:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8013f26:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8013f2a:	fa01 f308 	lsl.w	r3, r1, r8
 8013f2e:	930c      	str	r3, [sp, #48]	; 0x30
 8013f30:	9111      	str	r1, [sp, #68]	; 0x44
 8013f32:	e741      	b.n	8013db8 <_strtod_l+0x700>
 8013f34:	2300      	movs	r3, #0
 8013f36:	930c      	str	r3, [sp, #48]	; 0x30
 8013f38:	2301      	movs	r3, #1
 8013f3a:	9311      	str	r3, [sp, #68]	; 0x44
 8013f3c:	e73c      	b.n	8013db8 <_strtod_l+0x700>
 8013f3e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013f40:	4642      	mov	r2, r8
 8013f42:	4620      	mov	r0, r4
 8013f44:	f002 fd2e 	bl	80169a4 <__lshift>
 8013f48:	901e      	str	r0, [sp, #120]	; 0x78
 8013f4a:	2800      	cmp	r0, #0
 8013f4c:	f47f af66 	bne.w	8013e1c <_strtod_l+0x764>
 8013f50:	e5fe      	b.n	8013b50 <_strtod_l+0x498>
 8013f52:	465f      	mov	r7, fp
 8013f54:	d16e      	bne.n	8014034 <_strtod_l+0x97c>
 8013f56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013f58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013f5c:	b342      	cbz	r2, 8013fb0 <_strtod_l+0x8f8>
 8013f5e:	4a32      	ldr	r2, [pc, #200]	; (8014028 <_strtod_l+0x970>)
 8013f60:	4293      	cmp	r3, r2
 8013f62:	d128      	bne.n	8013fb6 <_strtod_l+0x8fe>
 8013f64:	9b04      	ldr	r3, [sp, #16]
 8013f66:	4650      	mov	r0, sl
 8013f68:	b1eb      	cbz	r3, 8013fa6 <_strtod_l+0x8ee>
 8013f6a:	4a2d      	ldr	r2, [pc, #180]	; (8014020 <_strtod_l+0x968>)
 8013f6c:	403a      	ands	r2, r7
 8013f6e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8013f72:	f04f 31ff 	mov.w	r1, #4294967295
 8013f76:	d819      	bhi.n	8013fac <_strtod_l+0x8f4>
 8013f78:	0d12      	lsrs	r2, r2, #20
 8013f7a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8013f82:	4298      	cmp	r0, r3
 8013f84:	d117      	bne.n	8013fb6 <_strtod_l+0x8fe>
 8013f86:	4b29      	ldr	r3, [pc, #164]	; (801402c <_strtod_l+0x974>)
 8013f88:	429f      	cmp	r7, r3
 8013f8a:	d102      	bne.n	8013f92 <_strtod_l+0x8da>
 8013f8c:	3001      	adds	r0, #1
 8013f8e:	f43f addf 	beq.w	8013b50 <_strtod_l+0x498>
 8013f92:	4b23      	ldr	r3, [pc, #140]	; (8014020 <_strtod_l+0x968>)
 8013f94:	403b      	ands	r3, r7
 8013f96:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8013f9a:	f04f 0a00 	mov.w	sl, #0
 8013f9e:	9b04      	ldr	r3, [sp, #16]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d1a0      	bne.n	8013ee6 <_strtod_l+0x82e>
 8013fa4:	e5de      	b.n	8013b64 <_strtod_l+0x4ac>
 8013fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8013faa:	e7ea      	b.n	8013f82 <_strtod_l+0x8ca>
 8013fac:	460b      	mov	r3, r1
 8013fae:	e7e8      	b.n	8013f82 <_strtod_l+0x8ca>
 8013fb0:	ea53 030a 	orrs.w	r3, r3, sl
 8013fb4:	d088      	beq.n	8013ec8 <_strtod_l+0x810>
 8013fb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013fb8:	b1db      	cbz	r3, 8013ff2 <_strtod_l+0x93a>
 8013fba:	423b      	tst	r3, r7
 8013fbc:	d0ef      	beq.n	8013f9e <_strtod_l+0x8e6>
 8013fbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013fc0:	9a04      	ldr	r2, [sp, #16]
 8013fc2:	4650      	mov	r0, sl
 8013fc4:	4659      	mov	r1, fp
 8013fc6:	b1c3      	cbz	r3, 8013ffa <_strtod_l+0x942>
 8013fc8:	f7ff fb58 	bl	801367c <sulp>
 8013fcc:	4602      	mov	r2, r0
 8013fce:	460b      	mov	r3, r1
 8013fd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013fd4:	f7ec f97a 	bl	80002cc <__adddf3>
 8013fd8:	4682      	mov	sl, r0
 8013fda:	468b      	mov	fp, r1
 8013fdc:	e7df      	b.n	8013f9e <_strtod_l+0x8e6>
 8013fde:	4013      	ands	r3, r2
 8013fe0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013fe4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013fe8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013fec:	f04f 3aff 	mov.w	sl, #4294967295
 8013ff0:	e7d5      	b.n	8013f9e <_strtod_l+0x8e6>
 8013ff2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013ff4:	ea13 0f0a 	tst.w	r3, sl
 8013ff8:	e7e0      	b.n	8013fbc <_strtod_l+0x904>
 8013ffa:	f7ff fb3f 	bl	801367c <sulp>
 8013ffe:	4602      	mov	r2, r0
 8014000:	460b      	mov	r3, r1
 8014002:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014006:	f7ec f95f 	bl	80002c8 <__aeabi_dsub>
 801400a:	2200      	movs	r2, #0
 801400c:	2300      	movs	r3, #0
 801400e:	4682      	mov	sl, r0
 8014010:	468b      	mov	fp, r1
 8014012:	f7ec fd79 	bl	8000b08 <__aeabi_dcmpeq>
 8014016:	2800      	cmp	r0, #0
 8014018:	d0c1      	beq.n	8013f9e <_strtod_l+0x8e6>
 801401a:	e60e      	b.n	8013c3a <_strtod_l+0x582>
 801401c:	fffffc02 	.word	0xfffffc02
 8014020:	7ff00000 	.word	0x7ff00000
 8014024:	39500000 	.word	0x39500000
 8014028:	000fffff 	.word	0x000fffff
 801402c:	7fefffff 	.word	0x7fefffff
 8014030:	08019e18 	.word	0x08019e18
 8014034:	4631      	mov	r1, r6
 8014036:	4628      	mov	r0, r5
 8014038:	f002 fe9c 	bl	8016d74 <__ratio>
 801403c:	ec59 8b10 	vmov	r8, r9, d0
 8014040:	ee10 0a10 	vmov	r0, s0
 8014044:	2200      	movs	r2, #0
 8014046:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801404a:	4649      	mov	r1, r9
 801404c:	f7ec fd70 	bl	8000b30 <__aeabi_dcmple>
 8014050:	2800      	cmp	r0, #0
 8014052:	d07c      	beq.n	801414e <_strtod_l+0xa96>
 8014054:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014056:	2b00      	cmp	r3, #0
 8014058:	d04c      	beq.n	80140f4 <_strtod_l+0xa3c>
 801405a:	4b95      	ldr	r3, [pc, #596]	; (80142b0 <_strtod_l+0xbf8>)
 801405c:	2200      	movs	r2, #0
 801405e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014062:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80142b0 <_strtod_l+0xbf8>
 8014066:	f04f 0800 	mov.w	r8, #0
 801406a:	4b92      	ldr	r3, [pc, #584]	; (80142b4 <_strtod_l+0xbfc>)
 801406c:	403b      	ands	r3, r7
 801406e:	9311      	str	r3, [sp, #68]	; 0x44
 8014070:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014072:	4b91      	ldr	r3, [pc, #580]	; (80142b8 <_strtod_l+0xc00>)
 8014074:	429a      	cmp	r2, r3
 8014076:	f040 80b2 	bne.w	80141de <_strtod_l+0xb26>
 801407a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801407e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014082:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8014086:	ec4b ab10 	vmov	d0, sl, fp
 801408a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801408e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014092:	f002 fd97 	bl	8016bc4 <__ulp>
 8014096:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801409a:	ec53 2b10 	vmov	r2, r3, d0
 801409e:	f7ec facb 	bl	8000638 <__aeabi_dmul>
 80140a2:	4652      	mov	r2, sl
 80140a4:	465b      	mov	r3, fp
 80140a6:	f7ec f911 	bl	80002cc <__adddf3>
 80140aa:	460b      	mov	r3, r1
 80140ac:	4981      	ldr	r1, [pc, #516]	; (80142b4 <_strtod_l+0xbfc>)
 80140ae:	4a83      	ldr	r2, [pc, #524]	; (80142bc <_strtod_l+0xc04>)
 80140b0:	4019      	ands	r1, r3
 80140b2:	4291      	cmp	r1, r2
 80140b4:	4682      	mov	sl, r0
 80140b6:	d95e      	bls.n	8014176 <_strtod_l+0xabe>
 80140b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80140ba:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80140be:	4293      	cmp	r3, r2
 80140c0:	d103      	bne.n	80140ca <_strtod_l+0xa12>
 80140c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80140c4:	3301      	adds	r3, #1
 80140c6:	f43f ad43 	beq.w	8013b50 <_strtod_l+0x498>
 80140ca:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80142c8 <_strtod_l+0xc10>
 80140ce:	f04f 3aff 	mov.w	sl, #4294967295
 80140d2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80140d4:	4620      	mov	r0, r4
 80140d6:	f002 fa49 	bl	801656c <_Bfree>
 80140da:	9907      	ldr	r1, [sp, #28]
 80140dc:	4620      	mov	r0, r4
 80140de:	f002 fa45 	bl	801656c <_Bfree>
 80140e2:	4631      	mov	r1, r6
 80140e4:	4620      	mov	r0, r4
 80140e6:	f002 fa41 	bl	801656c <_Bfree>
 80140ea:	4629      	mov	r1, r5
 80140ec:	4620      	mov	r0, r4
 80140ee:	f002 fa3d 	bl	801656c <_Bfree>
 80140f2:	e613      	b.n	8013d1c <_strtod_l+0x664>
 80140f4:	f1ba 0f00 	cmp.w	sl, #0
 80140f8:	d11b      	bne.n	8014132 <_strtod_l+0xa7a>
 80140fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80140fe:	b9f3      	cbnz	r3, 801413e <_strtod_l+0xa86>
 8014100:	4b6b      	ldr	r3, [pc, #428]	; (80142b0 <_strtod_l+0xbf8>)
 8014102:	2200      	movs	r2, #0
 8014104:	4640      	mov	r0, r8
 8014106:	4649      	mov	r1, r9
 8014108:	f7ec fd08 	bl	8000b1c <__aeabi_dcmplt>
 801410c:	b9d0      	cbnz	r0, 8014144 <_strtod_l+0xa8c>
 801410e:	4640      	mov	r0, r8
 8014110:	4649      	mov	r1, r9
 8014112:	4b6b      	ldr	r3, [pc, #428]	; (80142c0 <_strtod_l+0xc08>)
 8014114:	2200      	movs	r2, #0
 8014116:	f7ec fa8f 	bl	8000638 <__aeabi_dmul>
 801411a:	4680      	mov	r8, r0
 801411c:	4689      	mov	r9, r1
 801411e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014122:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8014126:	931b      	str	r3, [sp, #108]	; 0x6c
 8014128:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801412c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014130:	e79b      	b.n	801406a <_strtod_l+0x9b2>
 8014132:	f1ba 0f01 	cmp.w	sl, #1
 8014136:	d102      	bne.n	801413e <_strtod_l+0xa86>
 8014138:	2f00      	cmp	r7, #0
 801413a:	f43f ad7e 	beq.w	8013c3a <_strtod_l+0x582>
 801413e:	4b61      	ldr	r3, [pc, #388]	; (80142c4 <_strtod_l+0xc0c>)
 8014140:	2200      	movs	r2, #0
 8014142:	e78c      	b.n	801405e <_strtod_l+0x9a6>
 8014144:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80142c0 <_strtod_l+0xc08>
 8014148:	f04f 0800 	mov.w	r8, #0
 801414c:	e7e7      	b.n	801411e <_strtod_l+0xa66>
 801414e:	4b5c      	ldr	r3, [pc, #368]	; (80142c0 <_strtod_l+0xc08>)
 8014150:	4640      	mov	r0, r8
 8014152:	4649      	mov	r1, r9
 8014154:	2200      	movs	r2, #0
 8014156:	f7ec fa6f 	bl	8000638 <__aeabi_dmul>
 801415a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801415c:	4680      	mov	r8, r0
 801415e:	4689      	mov	r9, r1
 8014160:	b933      	cbnz	r3, 8014170 <_strtod_l+0xab8>
 8014162:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014166:	9012      	str	r0, [sp, #72]	; 0x48
 8014168:	9313      	str	r3, [sp, #76]	; 0x4c
 801416a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801416e:	e7dd      	b.n	801412c <_strtod_l+0xa74>
 8014170:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8014174:	e7f9      	b.n	801416a <_strtod_l+0xab2>
 8014176:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801417a:	9b04      	ldr	r3, [sp, #16]
 801417c:	2b00      	cmp	r3, #0
 801417e:	d1a8      	bne.n	80140d2 <_strtod_l+0xa1a>
 8014180:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014184:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014186:	0d1b      	lsrs	r3, r3, #20
 8014188:	051b      	lsls	r3, r3, #20
 801418a:	429a      	cmp	r2, r3
 801418c:	d1a1      	bne.n	80140d2 <_strtod_l+0xa1a>
 801418e:	4640      	mov	r0, r8
 8014190:	4649      	mov	r1, r9
 8014192:	f7ec fe01 	bl	8000d98 <__aeabi_d2lz>
 8014196:	f7ec fa21 	bl	80005dc <__aeabi_l2d>
 801419a:	4602      	mov	r2, r0
 801419c:	460b      	mov	r3, r1
 801419e:	4640      	mov	r0, r8
 80141a0:	4649      	mov	r1, r9
 80141a2:	f7ec f891 	bl	80002c8 <__aeabi_dsub>
 80141a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80141a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80141ac:	ea43 030a 	orr.w	r3, r3, sl
 80141b0:	4313      	orrs	r3, r2
 80141b2:	4680      	mov	r8, r0
 80141b4:	4689      	mov	r9, r1
 80141b6:	d053      	beq.n	8014260 <_strtod_l+0xba8>
 80141b8:	a335      	add	r3, pc, #212	; (adr r3, 8014290 <_strtod_l+0xbd8>)
 80141ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141be:	f7ec fcad 	bl	8000b1c <__aeabi_dcmplt>
 80141c2:	2800      	cmp	r0, #0
 80141c4:	f47f acce 	bne.w	8013b64 <_strtod_l+0x4ac>
 80141c8:	a333      	add	r3, pc, #204	; (adr r3, 8014298 <_strtod_l+0xbe0>)
 80141ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141ce:	4640      	mov	r0, r8
 80141d0:	4649      	mov	r1, r9
 80141d2:	f7ec fcc1 	bl	8000b58 <__aeabi_dcmpgt>
 80141d6:	2800      	cmp	r0, #0
 80141d8:	f43f af7b 	beq.w	80140d2 <_strtod_l+0xa1a>
 80141dc:	e4c2      	b.n	8013b64 <_strtod_l+0x4ac>
 80141de:	9b04      	ldr	r3, [sp, #16]
 80141e0:	b333      	cbz	r3, 8014230 <_strtod_l+0xb78>
 80141e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80141e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80141e8:	d822      	bhi.n	8014230 <_strtod_l+0xb78>
 80141ea:	a32d      	add	r3, pc, #180	; (adr r3, 80142a0 <_strtod_l+0xbe8>)
 80141ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141f0:	4640      	mov	r0, r8
 80141f2:	4649      	mov	r1, r9
 80141f4:	f7ec fc9c 	bl	8000b30 <__aeabi_dcmple>
 80141f8:	b1a0      	cbz	r0, 8014224 <_strtod_l+0xb6c>
 80141fa:	4649      	mov	r1, r9
 80141fc:	4640      	mov	r0, r8
 80141fe:	f7ec fcf3 	bl	8000be8 <__aeabi_d2uiz>
 8014202:	2801      	cmp	r0, #1
 8014204:	bf38      	it	cc
 8014206:	2001      	movcc	r0, #1
 8014208:	f7ec f99c 	bl	8000544 <__aeabi_ui2d>
 801420c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801420e:	4680      	mov	r8, r0
 8014210:	4689      	mov	r9, r1
 8014212:	bb13      	cbnz	r3, 801425a <_strtod_l+0xba2>
 8014214:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014218:	9014      	str	r0, [sp, #80]	; 0x50
 801421a:	9315      	str	r3, [sp, #84]	; 0x54
 801421c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014220:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014226:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014228:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801422c:	1a9b      	subs	r3, r3, r2
 801422e:	930d      	str	r3, [sp, #52]	; 0x34
 8014230:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014234:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8014238:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801423c:	f002 fcc2 	bl	8016bc4 <__ulp>
 8014240:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014244:	ec53 2b10 	vmov	r2, r3, d0
 8014248:	f7ec f9f6 	bl	8000638 <__aeabi_dmul>
 801424c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014250:	f7ec f83c 	bl	80002cc <__adddf3>
 8014254:	4682      	mov	sl, r0
 8014256:	468b      	mov	fp, r1
 8014258:	e78f      	b.n	801417a <_strtod_l+0xac2>
 801425a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801425e:	e7dd      	b.n	801421c <_strtod_l+0xb64>
 8014260:	a311      	add	r3, pc, #68	; (adr r3, 80142a8 <_strtod_l+0xbf0>)
 8014262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014266:	f7ec fc59 	bl	8000b1c <__aeabi_dcmplt>
 801426a:	e7b4      	b.n	80141d6 <_strtod_l+0xb1e>
 801426c:	2300      	movs	r3, #0
 801426e:	930e      	str	r3, [sp, #56]	; 0x38
 8014270:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014272:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014274:	6013      	str	r3, [r2, #0]
 8014276:	f7ff ba65 	b.w	8013744 <_strtod_l+0x8c>
 801427a:	2b65      	cmp	r3, #101	; 0x65
 801427c:	f43f ab5d 	beq.w	801393a <_strtod_l+0x282>
 8014280:	2b45      	cmp	r3, #69	; 0x45
 8014282:	f43f ab5a 	beq.w	801393a <_strtod_l+0x282>
 8014286:	2201      	movs	r2, #1
 8014288:	f7ff bb92 	b.w	80139b0 <_strtod_l+0x2f8>
 801428c:	f3af 8000 	nop.w
 8014290:	94a03595 	.word	0x94a03595
 8014294:	3fdfffff 	.word	0x3fdfffff
 8014298:	35afe535 	.word	0x35afe535
 801429c:	3fe00000 	.word	0x3fe00000
 80142a0:	ffc00000 	.word	0xffc00000
 80142a4:	41dfffff 	.word	0x41dfffff
 80142a8:	94a03595 	.word	0x94a03595
 80142ac:	3fcfffff 	.word	0x3fcfffff
 80142b0:	3ff00000 	.word	0x3ff00000
 80142b4:	7ff00000 	.word	0x7ff00000
 80142b8:	7fe00000 	.word	0x7fe00000
 80142bc:	7c9fffff 	.word	0x7c9fffff
 80142c0:	3fe00000 	.word	0x3fe00000
 80142c4:	bff00000 	.word	0xbff00000
 80142c8:	7fefffff 	.word	0x7fefffff

080142cc <_strtod_r>:
 80142cc:	4b01      	ldr	r3, [pc, #4]	; (80142d4 <_strtod_r+0x8>)
 80142ce:	f7ff b9f3 	b.w	80136b8 <_strtod_l>
 80142d2:	bf00      	nop
 80142d4:	20000154 	.word	0x20000154

080142d8 <strtok>:
 80142d8:	4b16      	ldr	r3, [pc, #88]	; (8014334 <strtok+0x5c>)
 80142da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80142dc:	681e      	ldr	r6, [r3, #0]
 80142de:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80142e0:	4605      	mov	r5, r0
 80142e2:	b9fc      	cbnz	r4, 8014324 <strtok+0x4c>
 80142e4:	2050      	movs	r0, #80	; 0x50
 80142e6:	9101      	str	r1, [sp, #4]
 80142e8:	f7fd fddc 	bl	8011ea4 <malloc>
 80142ec:	9901      	ldr	r1, [sp, #4]
 80142ee:	65b0      	str	r0, [r6, #88]	; 0x58
 80142f0:	4602      	mov	r2, r0
 80142f2:	b920      	cbnz	r0, 80142fe <strtok+0x26>
 80142f4:	4b10      	ldr	r3, [pc, #64]	; (8014338 <strtok+0x60>)
 80142f6:	4811      	ldr	r0, [pc, #68]	; (801433c <strtok+0x64>)
 80142f8:	2157      	movs	r1, #87	; 0x57
 80142fa:	f000 fc69 	bl	8014bd0 <__assert_func>
 80142fe:	e9c0 4400 	strd	r4, r4, [r0]
 8014302:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8014306:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801430a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801430e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8014312:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8014316:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801431a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801431e:	6184      	str	r4, [r0, #24]
 8014320:	7704      	strb	r4, [r0, #28]
 8014322:	6244      	str	r4, [r0, #36]	; 0x24
 8014324:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8014326:	2301      	movs	r3, #1
 8014328:	4628      	mov	r0, r5
 801432a:	b002      	add	sp, #8
 801432c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014330:	f000 b806 	b.w	8014340 <__strtok_r>
 8014334:	20000088 	.word	0x20000088
 8014338:	08019c7c 	.word	0x08019c7c
 801433c:	08019e40 	.word	0x08019e40

08014340 <__strtok_r>:
 8014340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014342:	b908      	cbnz	r0, 8014348 <__strtok_r+0x8>
 8014344:	6810      	ldr	r0, [r2, #0]
 8014346:	b188      	cbz	r0, 801436c <__strtok_r+0x2c>
 8014348:	4604      	mov	r4, r0
 801434a:	4620      	mov	r0, r4
 801434c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8014350:	460f      	mov	r7, r1
 8014352:	f817 6b01 	ldrb.w	r6, [r7], #1
 8014356:	b91e      	cbnz	r6, 8014360 <__strtok_r+0x20>
 8014358:	b965      	cbnz	r5, 8014374 <__strtok_r+0x34>
 801435a:	6015      	str	r5, [r2, #0]
 801435c:	4628      	mov	r0, r5
 801435e:	e005      	b.n	801436c <__strtok_r+0x2c>
 8014360:	42b5      	cmp	r5, r6
 8014362:	d1f6      	bne.n	8014352 <__strtok_r+0x12>
 8014364:	2b00      	cmp	r3, #0
 8014366:	d1f0      	bne.n	801434a <__strtok_r+0xa>
 8014368:	6014      	str	r4, [r2, #0]
 801436a:	7003      	strb	r3, [r0, #0]
 801436c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801436e:	461c      	mov	r4, r3
 8014370:	e00c      	b.n	801438c <__strtok_r+0x4c>
 8014372:	b915      	cbnz	r5, 801437a <__strtok_r+0x3a>
 8014374:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014378:	460e      	mov	r6, r1
 801437a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801437e:	42ab      	cmp	r3, r5
 8014380:	d1f7      	bne.n	8014372 <__strtok_r+0x32>
 8014382:	2b00      	cmp	r3, #0
 8014384:	d0f3      	beq.n	801436e <__strtok_r+0x2e>
 8014386:	2300      	movs	r3, #0
 8014388:	f804 3c01 	strb.w	r3, [r4, #-1]
 801438c:	6014      	str	r4, [r2, #0]
 801438e:	e7ed      	b.n	801436c <__strtok_r+0x2c>

08014390 <_strtol_l.isra.0>:
 8014390:	2b01      	cmp	r3, #1
 8014392:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014396:	d001      	beq.n	801439c <_strtol_l.isra.0+0xc>
 8014398:	2b24      	cmp	r3, #36	; 0x24
 801439a:	d906      	bls.n	80143aa <_strtol_l.isra.0+0x1a>
 801439c:	f7fd fb40 	bl	8011a20 <__errno>
 80143a0:	2316      	movs	r3, #22
 80143a2:	6003      	str	r3, [r0, #0]
 80143a4:	2000      	movs	r0, #0
 80143a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143aa:	4f3a      	ldr	r7, [pc, #232]	; (8014494 <_strtol_l.isra.0+0x104>)
 80143ac:	468e      	mov	lr, r1
 80143ae:	4676      	mov	r6, lr
 80143b0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80143b4:	5de5      	ldrb	r5, [r4, r7]
 80143b6:	f015 0508 	ands.w	r5, r5, #8
 80143ba:	d1f8      	bne.n	80143ae <_strtol_l.isra.0+0x1e>
 80143bc:	2c2d      	cmp	r4, #45	; 0x2d
 80143be:	d134      	bne.n	801442a <_strtol_l.isra.0+0x9a>
 80143c0:	f89e 4000 	ldrb.w	r4, [lr]
 80143c4:	f04f 0801 	mov.w	r8, #1
 80143c8:	f106 0e02 	add.w	lr, r6, #2
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d05c      	beq.n	801448a <_strtol_l.isra.0+0xfa>
 80143d0:	2b10      	cmp	r3, #16
 80143d2:	d10c      	bne.n	80143ee <_strtol_l.isra.0+0x5e>
 80143d4:	2c30      	cmp	r4, #48	; 0x30
 80143d6:	d10a      	bne.n	80143ee <_strtol_l.isra.0+0x5e>
 80143d8:	f89e 4000 	ldrb.w	r4, [lr]
 80143dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80143e0:	2c58      	cmp	r4, #88	; 0x58
 80143e2:	d14d      	bne.n	8014480 <_strtol_l.isra.0+0xf0>
 80143e4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80143e8:	2310      	movs	r3, #16
 80143ea:	f10e 0e02 	add.w	lr, lr, #2
 80143ee:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80143f2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80143f6:	2600      	movs	r6, #0
 80143f8:	fbbc f9f3 	udiv	r9, ip, r3
 80143fc:	4635      	mov	r5, r6
 80143fe:	fb03 ca19 	mls	sl, r3, r9, ip
 8014402:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8014406:	2f09      	cmp	r7, #9
 8014408:	d818      	bhi.n	801443c <_strtol_l.isra.0+0xac>
 801440a:	463c      	mov	r4, r7
 801440c:	42a3      	cmp	r3, r4
 801440e:	dd24      	ble.n	801445a <_strtol_l.isra.0+0xca>
 8014410:	2e00      	cmp	r6, #0
 8014412:	db1f      	blt.n	8014454 <_strtol_l.isra.0+0xc4>
 8014414:	45a9      	cmp	r9, r5
 8014416:	d31d      	bcc.n	8014454 <_strtol_l.isra.0+0xc4>
 8014418:	d101      	bne.n	801441e <_strtol_l.isra.0+0x8e>
 801441a:	45a2      	cmp	sl, r4
 801441c:	db1a      	blt.n	8014454 <_strtol_l.isra.0+0xc4>
 801441e:	fb05 4503 	mla	r5, r5, r3, r4
 8014422:	2601      	movs	r6, #1
 8014424:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8014428:	e7eb      	b.n	8014402 <_strtol_l.isra.0+0x72>
 801442a:	2c2b      	cmp	r4, #43	; 0x2b
 801442c:	bf08      	it	eq
 801442e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8014432:	46a8      	mov	r8, r5
 8014434:	bf08      	it	eq
 8014436:	f106 0e02 	addeq.w	lr, r6, #2
 801443a:	e7c7      	b.n	80143cc <_strtol_l.isra.0+0x3c>
 801443c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8014440:	2f19      	cmp	r7, #25
 8014442:	d801      	bhi.n	8014448 <_strtol_l.isra.0+0xb8>
 8014444:	3c37      	subs	r4, #55	; 0x37
 8014446:	e7e1      	b.n	801440c <_strtol_l.isra.0+0x7c>
 8014448:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801444c:	2f19      	cmp	r7, #25
 801444e:	d804      	bhi.n	801445a <_strtol_l.isra.0+0xca>
 8014450:	3c57      	subs	r4, #87	; 0x57
 8014452:	e7db      	b.n	801440c <_strtol_l.isra.0+0x7c>
 8014454:	f04f 36ff 	mov.w	r6, #4294967295
 8014458:	e7e4      	b.n	8014424 <_strtol_l.isra.0+0x94>
 801445a:	2e00      	cmp	r6, #0
 801445c:	da05      	bge.n	801446a <_strtol_l.isra.0+0xda>
 801445e:	2322      	movs	r3, #34	; 0x22
 8014460:	6003      	str	r3, [r0, #0]
 8014462:	4665      	mov	r5, ip
 8014464:	b942      	cbnz	r2, 8014478 <_strtol_l.isra.0+0xe8>
 8014466:	4628      	mov	r0, r5
 8014468:	e79d      	b.n	80143a6 <_strtol_l.isra.0+0x16>
 801446a:	f1b8 0f00 	cmp.w	r8, #0
 801446e:	d000      	beq.n	8014472 <_strtol_l.isra.0+0xe2>
 8014470:	426d      	negs	r5, r5
 8014472:	2a00      	cmp	r2, #0
 8014474:	d0f7      	beq.n	8014466 <_strtol_l.isra.0+0xd6>
 8014476:	b10e      	cbz	r6, 801447c <_strtol_l.isra.0+0xec>
 8014478:	f10e 31ff 	add.w	r1, lr, #4294967295
 801447c:	6011      	str	r1, [r2, #0]
 801447e:	e7f2      	b.n	8014466 <_strtol_l.isra.0+0xd6>
 8014480:	2430      	movs	r4, #48	; 0x30
 8014482:	2b00      	cmp	r3, #0
 8014484:	d1b3      	bne.n	80143ee <_strtol_l.isra.0+0x5e>
 8014486:	2308      	movs	r3, #8
 8014488:	e7b1      	b.n	80143ee <_strtol_l.isra.0+0x5e>
 801448a:	2c30      	cmp	r4, #48	; 0x30
 801448c:	d0a4      	beq.n	80143d8 <_strtol_l.isra.0+0x48>
 801448e:	230a      	movs	r3, #10
 8014490:	e7ad      	b.n	80143ee <_strtol_l.isra.0+0x5e>
 8014492:	bf00      	nop
 8014494:	08019b15 	.word	0x08019b15

08014498 <_strtol_r>:
 8014498:	f7ff bf7a 	b.w	8014390 <_strtol_l.isra.0>

0801449c <strtol>:
 801449c:	4613      	mov	r3, r2
 801449e:	460a      	mov	r2, r1
 80144a0:	4601      	mov	r1, r0
 80144a2:	4802      	ldr	r0, [pc, #8]	; (80144ac <strtol+0x10>)
 80144a4:	6800      	ldr	r0, [r0, #0]
 80144a6:	f7ff bf73 	b.w	8014390 <_strtol_l.isra.0>
 80144aa:	bf00      	nop
 80144ac:	20000088 	.word	0x20000088

080144b0 <_strtoul_l.isra.0>:
 80144b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80144b4:	4e3b      	ldr	r6, [pc, #236]	; (80145a4 <_strtoul_l.isra.0+0xf4>)
 80144b6:	4686      	mov	lr, r0
 80144b8:	468c      	mov	ip, r1
 80144ba:	4660      	mov	r0, ip
 80144bc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80144c0:	5da5      	ldrb	r5, [r4, r6]
 80144c2:	f015 0508 	ands.w	r5, r5, #8
 80144c6:	d1f8      	bne.n	80144ba <_strtoul_l.isra.0+0xa>
 80144c8:	2c2d      	cmp	r4, #45	; 0x2d
 80144ca:	d134      	bne.n	8014536 <_strtoul_l.isra.0+0x86>
 80144cc:	f89c 4000 	ldrb.w	r4, [ip]
 80144d0:	f04f 0801 	mov.w	r8, #1
 80144d4:	f100 0c02 	add.w	ip, r0, #2
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d05e      	beq.n	801459a <_strtoul_l.isra.0+0xea>
 80144dc:	2b10      	cmp	r3, #16
 80144de:	d10c      	bne.n	80144fa <_strtoul_l.isra.0+0x4a>
 80144e0:	2c30      	cmp	r4, #48	; 0x30
 80144e2:	d10a      	bne.n	80144fa <_strtoul_l.isra.0+0x4a>
 80144e4:	f89c 0000 	ldrb.w	r0, [ip]
 80144e8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80144ec:	2858      	cmp	r0, #88	; 0x58
 80144ee:	d14f      	bne.n	8014590 <_strtoul_l.isra.0+0xe0>
 80144f0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80144f4:	2310      	movs	r3, #16
 80144f6:	f10c 0c02 	add.w	ip, ip, #2
 80144fa:	f04f 37ff 	mov.w	r7, #4294967295
 80144fe:	2500      	movs	r5, #0
 8014500:	fbb7 f7f3 	udiv	r7, r7, r3
 8014504:	fb03 f907 	mul.w	r9, r3, r7
 8014508:	ea6f 0909 	mvn.w	r9, r9
 801450c:	4628      	mov	r0, r5
 801450e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8014512:	2e09      	cmp	r6, #9
 8014514:	d818      	bhi.n	8014548 <_strtoul_l.isra.0+0x98>
 8014516:	4634      	mov	r4, r6
 8014518:	42a3      	cmp	r3, r4
 801451a:	dd24      	ble.n	8014566 <_strtoul_l.isra.0+0xb6>
 801451c:	2d00      	cmp	r5, #0
 801451e:	db1f      	blt.n	8014560 <_strtoul_l.isra.0+0xb0>
 8014520:	4287      	cmp	r7, r0
 8014522:	d31d      	bcc.n	8014560 <_strtoul_l.isra.0+0xb0>
 8014524:	d101      	bne.n	801452a <_strtoul_l.isra.0+0x7a>
 8014526:	45a1      	cmp	r9, r4
 8014528:	db1a      	blt.n	8014560 <_strtoul_l.isra.0+0xb0>
 801452a:	fb00 4003 	mla	r0, r0, r3, r4
 801452e:	2501      	movs	r5, #1
 8014530:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8014534:	e7eb      	b.n	801450e <_strtoul_l.isra.0+0x5e>
 8014536:	2c2b      	cmp	r4, #43	; 0x2b
 8014538:	bf08      	it	eq
 801453a:	f89c 4000 	ldrbeq.w	r4, [ip]
 801453e:	46a8      	mov	r8, r5
 8014540:	bf08      	it	eq
 8014542:	f100 0c02 	addeq.w	ip, r0, #2
 8014546:	e7c7      	b.n	80144d8 <_strtoul_l.isra.0+0x28>
 8014548:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801454c:	2e19      	cmp	r6, #25
 801454e:	d801      	bhi.n	8014554 <_strtoul_l.isra.0+0xa4>
 8014550:	3c37      	subs	r4, #55	; 0x37
 8014552:	e7e1      	b.n	8014518 <_strtoul_l.isra.0+0x68>
 8014554:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8014558:	2e19      	cmp	r6, #25
 801455a:	d804      	bhi.n	8014566 <_strtoul_l.isra.0+0xb6>
 801455c:	3c57      	subs	r4, #87	; 0x57
 801455e:	e7db      	b.n	8014518 <_strtoul_l.isra.0+0x68>
 8014560:	f04f 35ff 	mov.w	r5, #4294967295
 8014564:	e7e4      	b.n	8014530 <_strtoul_l.isra.0+0x80>
 8014566:	2d00      	cmp	r5, #0
 8014568:	da07      	bge.n	801457a <_strtoul_l.isra.0+0xca>
 801456a:	2322      	movs	r3, #34	; 0x22
 801456c:	f8ce 3000 	str.w	r3, [lr]
 8014570:	f04f 30ff 	mov.w	r0, #4294967295
 8014574:	b942      	cbnz	r2, 8014588 <_strtoul_l.isra.0+0xd8>
 8014576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801457a:	f1b8 0f00 	cmp.w	r8, #0
 801457e:	d000      	beq.n	8014582 <_strtoul_l.isra.0+0xd2>
 8014580:	4240      	negs	r0, r0
 8014582:	2a00      	cmp	r2, #0
 8014584:	d0f7      	beq.n	8014576 <_strtoul_l.isra.0+0xc6>
 8014586:	b10d      	cbz	r5, 801458c <_strtoul_l.isra.0+0xdc>
 8014588:	f10c 31ff 	add.w	r1, ip, #4294967295
 801458c:	6011      	str	r1, [r2, #0]
 801458e:	e7f2      	b.n	8014576 <_strtoul_l.isra.0+0xc6>
 8014590:	2430      	movs	r4, #48	; 0x30
 8014592:	2b00      	cmp	r3, #0
 8014594:	d1b1      	bne.n	80144fa <_strtoul_l.isra.0+0x4a>
 8014596:	2308      	movs	r3, #8
 8014598:	e7af      	b.n	80144fa <_strtoul_l.isra.0+0x4a>
 801459a:	2c30      	cmp	r4, #48	; 0x30
 801459c:	d0a2      	beq.n	80144e4 <_strtoul_l.isra.0+0x34>
 801459e:	230a      	movs	r3, #10
 80145a0:	e7ab      	b.n	80144fa <_strtoul_l.isra.0+0x4a>
 80145a2:	bf00      	nop
 80145a4:	08019b15 	.word	0x08019b15

080145a8 <_strtoul_r>:
 80145a8:	f7ff bf82 	b.w	80144b0 <_strtoul_l.isra.0>

080145ac <strtoul>:
 80145ac:	4613      	mov	r3, r2
 80145ae:	460a      	mov	r2, r1
 80145b0:	4601      	mov	r1, r0
 80145b2:	4802      	ldr	r0, [pc, #8]	; (80145bc <strtoul+0x10>)
 80145b4:	6800      	ldr	r0, [r0, #0]
 80145b6:	f7ff bf7b 	b.w	80144b0 <_strtoul_l.isra.0>
 80145ba:	bf00      	nop
 80145bc:	20000088 	.word	0x20000088

080145c0 <__tzcalc_limits>:
 80145c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145c4:	4680      	mov	r8, r0
 80145c6:	f001 fe45 	bl	8016254 <__gettzinfo>
 80145ca:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80145ce:	4598      	cmp	r8, r3
 80145d0:	f340 8098 	ble.w	8014704 <__tzcalc_limits+0x144>
 80145d4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80145d8:	4443      	add	r3, r8
 80145da:	109b      	asrs	r3, r3, #2
 80145dc:	f240 126d 	movw	r2, #365	; 0x16d
 80145e0:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 80145e4:	fb02 3505 	mla	r5, r2, r5, r3
 80145e8:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80145ec:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 80145f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80145f4:	441d      	add	r5, r3
 80145f6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80145fa:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80145fe:	fb98 f7f3 	sdiv	r7, r8, r3
 8014602:	fb03 8717 	mls	r7, r3, r7, r8
 8014606:	4442      	add	r2, r8
 8014608:	fab7 fc87 	clz	ip, r7
 801460c:	fbb2 f2f3 	udiv	r2, r2, r3
 8014610:	f008 0303 	and.w	r3, r8, #3
 8014614:	4415      	add	r5, r2
 8014616:	2264      	movs	r2, #100	; 0x64
 8014618:	f8c0 8004 	str.w	r8, [r0, #4]
 801461c:	fb98 f6f2 	sdiv	r6, r8, r2
 8014620:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8014624:	fb02 8616 	mls	r6, r2, r6, r8
 8014628:	4604      	mov	r4, r0
 801462a:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801462e:	9300      	str	r3, [sp, #0]
 8014630:	f04f 0e07 	mov.w	lr, #7
 8014634:	7a22      	ldrb	r2, [r4, #8]
 8014636:	6963      	ldr	r3, [r4, #20]
 8014638:	2a4a      	cmp	r2, #74	; 0x4a
 801463a:	d128      	bne.n	801468e <__tzcalc_limits+0xce>
 801463c:	9900      	ldr	r1, [sp, #0]
 801463e:	18ea      	adds	r2, r5, r3
 8014640:	b901      	cbnz	r1, 8014644 <__tzcalc_limits+0x84>
 8014642:	b906      	cbnz	r6, 8014646 <__tzcalc_limits+0x86>
 8014644:	bb0f      	cbnz	r7, 801468a <__tzcalc_limits+0xca>
 8014646:	2b3b      	cmp	r3, #59	; 0x3b
 8014648:	bfd4      	ite	le
 801464a:	2300      	movle	r3, #0
 801464c:	2301      	movgt	r3, #1
 801464e:	4413      	add	r3, r2
 8014650:	1e5a      	subs	r2, r3, #1
 8014652:	69a3      	ldr	r3, [r4, #24]
 8014654:	492c      	ldr	r1, [pc, #176]	; (8014708 <__tzcalc_limits+0x148>)
 8014656:	fb01 3202 	mla	r2, r1, r2, r3
 801465a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801465c:	4413      	add	r3, r2
 801465e:	461a      	mov	r2, r3
 8014660:	17db      	asrs	r3, r3, #31
 8014662:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8014666:	3428      	adds	r4, #40	; 0x28
 8014668:	45a3      	cmp	fp, r4
 801466a:	d1e3      	bne.n	8014634 <__tzcalc_limits+0x74>
 801466c:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8014670:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8014674:	4294      	cmp	r4, r2
 8014676:	eb75 0303 	sbcs.w	r3, r5, r3
 801467a:	bfb4      	ite	lt
 801467c:	2301      	movlt	r3, #1
 801467e:	2300      	movge	r3, #0
 8014680:	6003      	str	r3, [r0, #0]
 8014682:	2001      	movs	r0, #1
 8014684:	b003      	add	sp, #12
 8014686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801468a:	2300      	movs	r3, #0
 801468c:	e7df      	b.n	801464e <__tzcalc_limits+0x8e>
 801468e:	2a44      	cmp	r2, #68	; 0x44
 8014690:	d101      	bne.n	8014696 <__tzcalc_limits+0xd6>
 8014692:	18ea      	adds	r2, r5, r3
 8014694:	e7dd      	b.n	8014652 <__tzcalc_limits+0x92>
 8014696:	9a00      	ldr	r2, [sp, #0]
 8014698:	bb72      	cbnz	r2, 80146f8 <__tzcalc_limits+0x138>
 801469a:	2e00      	cmp	r6, #0
 801469c:	bf0c      	ite	eq
 801469e:	46e0      	moveq	r8, ip
 80146a0:	f04f 0801 	movne.w	r8, #1
 80146a4:	4919      	ldr	r1, [pc, #100]	; (801470c <__tzcalc_limits+0x14c>)
 80146a6:	68e2      	ldr	r2, [r4, #12]
 80146a8:	9201      	str	r2, [sp, #4]
 80146aa:	f04f 0a30 	mov.w	sl, #48	; 0x30
 80146ae:	fb0a 1808 	mla	r8, sl, r8, r1
 80146b2:	462a      	mov	r2, r5
 80146b4:	f04f 0900 	mov.w	r9, #0
 80146b8:	f1a8 0804 	sub.w	r8, r8, #4
 80146bc:	9901      	ldr	r1, [sp, #4]
 80146be:	f109 0901 	add.w	r9, r9, #1
 80146c2:	4549      	cmp	r1, r9
 80146c4:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 80146c8:	dc18      	bgt.n	80146fc <__tzcalc_limits+0x13c>
 80146ca:	f102 0804 	add.w	r8, r2, #4
 80146ce:	fb98 f9fe 	sdiv	r9, r8, lr
 80146d2:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80146d6:	eba8 0909 	sub.w	r9, r8, r9
 80146da:	ebb3 0909 	subs.w	r9, r3, r9
 80146de:	6923      	ldr	r3, [r4, #16]
 80146e0:	f103 33ff 	add.w	r3, r3, #4294967295
 80146e4:	bf48      	it	mi
 80146e6:	f109 0907 	addmi.w	r9, r9, #7
 80146ea:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80146ee:	444b      	add	r3, r9
 80146f0:	4553      	cmp	r3, sl
 80146f2:	da05      	bge.n	8014700 <__tzcalc_limits+0x140>
 80146f4:	441a      	add	r2, r3
 80146f6:	e7ac      	b.n	8014652 <__tzcalc_limits+0x92>
 80146f8:	46e0      	mov	r8, ip
 80146fa:	e7d3      	b.n	80146a4 <__tzcalc_limits+0xe4>
 80146fc:	4452      	add	r2, sl
 80146fe:	e7dd      	b.n	80146bc <__tzcalc_limits+0xfc>
 8014700:	3b07      	subs	r3, #7
 8014702:	e7f5      	b.n	80146f0 <__tzcalc_limits+0x130>
 8014704:	2000      	movs	r0, #0
 8014706:	e7bd      	b.n	8014684 <__tzcalc_limits+0xc4>
 8014708:	00015180 	.word	0x00015180
 801470c:	08019d54 	.word	0x08019d54

08014710 <__tz_lock>:
 8014710:	4801      	ldr	r0, [pc, #4]	; (8014718 <__tz_lock+0x8>)
 8014712:	f7fd bbc2 	b.w	8011e9a <__retarget_lock_acquire>
 8014716:	bf00      	nop
 8014718:	2000647f 	.word	0x2000647f

0801471c <__tz_unlock>:
 801471c:	4801      	ldr	r0, [pc, #4]	; (8014724 <__tz_unlock+0x8>)
 801471e:	f7fd bbbe 	b.w	8011e9e <__retarget_lock_release>
 8014722:	bf00      	nop
 8014724:	2000647f 	.word	0x2000647f

08014728 <_tzset_unlocked>:
 8014728:	4b01      	ldr	r3, [pc, #4]	; (8014730 <_tzset_unlocked+0x8>)
 801472a:	6818      	ldr	r0, [r3, #0]
 801472c:	f000 b802 	b.w	8014734 <_tzset_unlocked_r>
 8014730:	20000088 	.word	0x20000088

08014734 <_tzset_unlocked_r>:
 8014734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014738:	b08d      	sub	sp, #52	; 0x34
 801473a:	4607      	mov	r7, r0
 801473c:	f001 fd8a 	bl	8016254 <__gettzinfo>
 8014740:	49ae      	ldr	r1, [pc, #696]	; (80149fc <_tzset_unlocked_r+0x2c8>)
 8014742:	4eaf      	ldr	r6, [pc, #700]	; (8014a00 <_tzset_unlocked_r+0x2cc>)
 8014744:	4605      	mov	r5, r0
 8014746:	4638      	mov	r0, r7
 8014748:	f001 fd7c 	bl	8016244 <_getenv_r>
 801474c:	4604      	mov	r4, r0
 801474e:	b970      	cbnz	r0, 801476e <_tzset_unlocked_r+0x3a>
 8014750:	4bac      	ldr	r3, [pc, #688]	; (8014a04 <_tzset_unlocked_r+0x2d0>)
 8014752:	4aad      	ldr	r2, [pc, #692]	; (8014a08 <_tzset_unlocked_r+0x2d4>)
 8014754:	6018      	str	r0, [r3, #0]
 8014756:	4bad      	ldr	r3, [pc, #692]	; (8014a0c <_tzset_unlocked_r+0x2d8>)
 8014758:	6018      	str	r0, [r3, #0]
 801475a:	4bad      	ldr	r3, [pc, #692]	; (8014a10 <_tzset_unlocked_r+0x2dc>)
 801475c:	6830      	ldr	r0, [r6, #0]
 801475e:	e9c3 2200 	strd	r2, r2, [r3]
 8014762:	f7fd fba7 	bl	8011eb4 <free>
 8014766:	6034      	str	r4, [r6, #0]
 8014768:	b00d      	add	sp, #52	; 0x34
 801476a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801476e:	6831      	ldr	r1, [r6, #0]
 8014770:	2900      	cmp	r1, #0
 8014772:	d15f      	bne.n	8014834 <_tzset_unlocked_r+0x100>
 8014774:	6830      	ldr	r0, [r6, #0]
 8014776:	f7fd fb9d 	bl	8011eb4 <free>
 801477a:	4620      	mov	r0, r4
 801477c:	f7eb fd42 	bl	8000204 <strlen>
 8014780:	1c41      	adds	r1, r0, #1
 8014782:	4638      	mov	r0, r7
 8014784:	f7fd fe9c 	bl	80124c0 <_malloc_r>
 8014788:	6030      	str	r0, [r6, #0]
 801478a:	2800      	cmp	r0, #0
 801478c:	d157      	bne.n	801483e <_tzset_unlocked_r+0x10a>
 801478e:	7823      	ldrb	r3, [r4, #0]
 8014790:	4aa0      	ldr	r2, [pc, #640]	; (8014a14 <_tzset_unlocked_r+0x2e0>)
 8014792:	49a1      	ldr	r1, [pc, #644]	; (8014a18 <_tzset_unlocked_r+0x2e4>)
 8014794:	2b3a      	cmp	r3, #58	; 0x3a
 8014796:	bf08      	it	eq
 8014798:	3401      	addeq	r4, #1
 801479a:	ae0a      	add	r6, sp, #40	; 0x28
 801479c:	4633      	mov	r3, r6
 801479e:	4620      	mov	r0, r4
 80147a0:	f7fe fed4 	bl	801354c <siscanf>
 80147a4:	2800      	cmp	r0, #0
 80147a6:	dddf      	ble.n	8014768 <_tzset_unlocked_r+0x34>
 80147a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80147aa:	18e7      	adds	r7, r4, r3
 80147ac:	5ce3      	ldrb	r3, [r4, r3]
 80147ae:	2b2d      	cmp	r3, #45	; 0x2d
 80147b0:	d149      	bne.n	8014846 <_tzset_unlocked_r+0x112>
 80147b2:	3701      	adds	r7, #1
 80147b4:	f04f 34ff 	mov.w	r4, #4294967295
 80147b8:	f10d 0a20 	add.w	sl, sp, #32
 80147bc:	f10d 0b1e 	add.w	fp, sp, #30
 80147c0:	f04f 0800 	mov.w	r8, #0
 80147c4:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80147c8:	4994      	ldr	r1, [pc, #592]	; (8014a1c <_tzset_unlocked_r+0x2e8>)
 80147ca:	9603      	str	r6, [sp, #12]
 80147cc:	f8cd b000 	str.w	fp, [sp]
 80147d0:	4633      	mov	r3, r6
 80147d2:	aa07      	add	r2, sp, #28
 80147d4:	4638      	mov	r0, r7
 80147d6:	f8ad 801e 	strh.w	r8, [sp, #30]
 80147da:	f8ad 8020 	strh.w	r8, [sp, #32]
 80147de:	f7fe feb5 	bl	801354c <siscanf>
 80147e2:	4540      	cmp	r0, r8
 80147e4:	ddc0      	ble.n	8014768 <_tzset_unlocked_r+0x34>
 80147e6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80147ea:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80147ee:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8014a28 <_tzset_unlocked_r+0x2f4>
 80147f2:	213c      	movs	r1, #60	; 0x3c
 80147f4:	fb01 2203 	mla	r2, r1, r3, r2
 80147f8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80147fc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8014800:	fb01 2303 	mla	r3, r1, r3, r2
 8014804:	435c      	muls	r4, r3
 8014806:	62ac      	str	r4, [r5, #40]	; 0x28
 8014808:	4c81      	ldr	r4, [pc, #516]	; (8014a10 <_tzset_unlocked_r+0x2dc>)
 801480a:	4b82      	ldr	r3, [pc, #520]	; (8014a14 <_tzset_unlocked_r+0x2e0>)
 801480c:	6023      	str	r3, [r4, #0]
 801480e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014810:	4981      	ldr	r1, [pc, #516]	; (8014a18 <_tzset_unlocked_r+0x2e4>)
 8014812:	441f      	add	r7, r3
 8014814:	464a      	mov	r2, r9
 8014816:	4633      	mov	r3, r6
 8014818:	4638      	mov	r0, r7
 801481a:	f7fe fe97 	bl	801354c <siscanf>
 801481e:	4540      	cmp	r0, r8
 8014820:	dc16      	bgt.n	8014850 <_tzset_unlocked_r+0x11c>
 8014822:	6823      	ldr	r3, [r4, #0]
 8014824:	6063      	str	r3, [r4, #4]
 8014826:	4b77      	ldr	r3, [pc, #476]	; (8014a04 <_tzset_unlocked_r+0x2d0>)
 8014828:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801482a:	601a      	str	r2, [r3, #0]
 801482c:	4b77      	ldr	r3, [pc, #476]	; (8014a0c <_tzset_unlocked_r+0x2d8>)
 801482e:	f8c3 8000 	str.w	r8, [r3]
 8014832:	e799      	b.n	8014768 <_tzset_unlocked_r+0x34>
 8014834:	f7eb fcdc 	bl	80001f0 <strcmp>
 8014838:	2800      	cmp	r0, #0
 801483a:	d19b      	bne.n	8014774 <_tzset_unlocked_r+0x40>
 801483c:	e794      	b.n	8014768 <_tzset_unlocked_r+0x34>
 801483e:	4621      	mov	r1, r4
 8014840:	f7fe ff02 	bl	8013648 <strcpy>
 8014844:	e7a3      	b.n	801478e <_tzset_unlocked_r+0x5a>
 8014846:	2b2b      	cmp	r3, #43	; 0x2b
 8014848:	bf08      	it	eq
 801484a:	3701      	addeq	r7, #1
 801484c:	2401      	movs	r4, #1
 801484e:	e7b3      	b.n	80147b8 <_tzset_unlocked_r+0x84>
 8014850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014852:	f8c4 9004 	str.w	r9, [r4, #4]
 8014856:	18fc      	adds	r4, r7, r3
 8014858:	5cfb      	ldrb	r3, [r7, r3]
 801485a:	2b2d      	cmp	r3, #45	; 0x2d
 801485c:	f040 808b 	bne.w	8014976 <_tzset_unlocked_r+0x242>
 8014860:	3401      	adds	r4, #1
 8014862:	f04f 37ff 	mov.w	r7, #4294967295
 8014866:	2300      	movs	r3, #0
 8014868:	f8ad 301c 	strh.w	r3, [sp, #28]
 801486c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014870:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014874:	930a      	str	r3, [sp, #40]	; 0x28
 8014876:	e9cd a602 	strd	sl, r6, [sp, #8]
 801487a:	e9cd b600 	strd	fp, r6, [sp]
 801487e:	4967      	ldr	r1, [pc, #412]	; (8014a1c <_tzset_unlocked_r+0x2e8>)
 8014880:	4633      	mov	r3, r6
 8014882:	aa07      	add	r2, sp, #28
 8014884:	4620      	mov	r0, r4
 8014886:	f7fe fe61 	bl	801354c <siscanf>
 801488a:	2800      	cmp	r0, #0
 801488c:	dc78      	bgt.n	8014980 <_tzset_unlocked_r+0x24c>
 801488e:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8014890:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8014894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014896:	652f      	str	r7, [r5, #80]	; 0x50
 8014898:	441c      	add	r4, r3
 801489a:	462f      	mov	r7, r5
 801489c:	f04f 0900 	mov.w	r9, #0
 80148a0:	7823      	ldrb	r3, [r4, #0]
 80148a2:	2b2c      	cmp	r3, #44	; 0x2c
 80148a4:	bf08      	it	eq
 80148a6:	3401      	addeq	r4, #1
 80148a8:	f894 8000 	ldrb.w	r8, [r4]
 80148ac:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80148b0:	d178      	bne.n	80149a4 <_tzset_unlocked_r+0x270>
 80148b2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80148b6:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80148ba:	ab09      	add	r3, sp, #36	; 0x24
 80148bc:	9300      	str	r3, [sp, #0]
 80148be:	4958      	ldr	r1, [pc, #352]	; (8014a20 <_tzset_unlocked_r+0x2ec>)
 80148c0:	9603      	str	r6, [sp, #12]
 80148c2:	4633      	mov	r3, r6
 80148c4:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80148c8:	4620      	mov	r0, r4
 80148ca:	f7fe fe3f 	bl	801354c <siscanf>
 80148ce:	2803      	cmp	r0, #3
 80148d0:	f47f af4a 	bne.w	8014768 <_tzset_unlocked_r+0x34>
 80148d4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80148d8:	1e4b      	subs	r3, r1, #1
 80148da:	2b0b      	cmp	r3, #11
 80148dc:	f63f af44 	bhi.w	8014768 <_tzset_unlocked_r+0x34>
 80148e0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80148e4:	1e53      	subs	r3, r2, #1
 80148e6:	2b04      	cmp	r3, #4
 80148e8:	f63f af3e 	bhi.w	8014768 <_tzset_unlocked_r+0x34>
 80148ec:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80148f0:	2b06      	cmp	r3, #6
 80148f2:	f63f af39 	bhi.w	8014768 <_tzset_unlocked_r+0x34>
 80148f6:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80148fa:	f887 8008 	strb.w	r8, [r7, #8]
 80148fe:	617b      	str	r3, [r7, #20]
 8014900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014902:	eb04 0803 	add.w	r8, r4, r3
 8014906:	2302      	movs	r3, #2
 8014908:	f8ad 301c 	strh.w	r3, [sp, #28]
 801490c:	2300      	movs	r3, #0
 801490e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014912:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014916:	930a      	str	r3, [sp, #40]	; 0x28
 8014918:	f898 3000 	ldrb.w	r3, [r8]
 801491c:	2b2f      	cmp	r3, #47	; 0x2f
 801491e:	d109      	bne.n	8014934 <_tzset_unlocked_r+0x200>
 8014920:	e9cd a602 	strd	sl, r6, [sp, #8]
 8014924:	e9cd b600 	strd	fp, r6, [sp]
 8014928:	493e      	ldr	r1, [pc, #248]	; (8014a24 <_tzset_unlocked_r+0x2f0>)
 801492a:	4633      	mov	r3, r6
 801492c:	aa07      	add	r2, sp, #28
 801492e:	4640      	mov	r0, r8
 8014930:	f7fe fe0c 	bl	801354c <siscanf>
 8014934:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8014938:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801493c:	213c      	movs	r1, #60	; 0x3c
 801493e:	fb01 2203 	mla	r2, r1, r3, r2
 8014942:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8014946:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801494a:	fb01 2303 	mla	r3, r1, r3, r2
 801494e:	61bb      	str	r3, [r7, #24]
 8014950:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014952:	3728      	adds	r7, #40	; 0x28
 8014954:	4444      	add	r4, r8
 8014956:	f1b9 0f00 	cmp.w	r9, #0
 801495a:	d020      	beq.n	801499e <_tzset_unlocked_r+0x26a>
 801495c:	6868      	ldr	r0, [r5, #4]
 801495e:	f7ff fe2f 	bl	80145c0 <__tzcalc_limits>
 8014962:	4b28      	ldr	r3, [pc, #160]	; (8014a04 <_tzset_unlocked_r+0x2d0>)
 8014964:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8014966:	601a      	str	r2, [r3, #0]
 8014968:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801496a:	1a9b      	subs	r3, r3, r2
 801496c:	4a27      	ldr	r2, [pc, #156]	; (8014a0c <_tzset_unlocked_r+0x2d8>)
 801496e:	bf18      	it	ne
 8014970:	2301      	movne	r3, #1
 8014972:	6013      	str	r3, [r2, #0]
 8014974:	e6f8      	b.n	8014768 <_tzset_unlocked_r+0x34>
 8014976:	2b2b      	cmp	r3, #43	; 0x2b
 8014978:	bf08      	it	eq
 801497a:	3401      	addeq	r4, #1
 801497c:	2701      	movs	r7, #1
 801497e:	e772      	b.n	8014866 <_tzset_unlocked_r+0x132>
 8014980:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8014984:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8014988:	213c      	movs	r1, #60	; 0x3c
 801498a:	fb01 2203 	mla	r2, r1, r3, r2
 801498e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8014992:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8014996:	fb01 2303 	mla	r3, r1, r3, r2
 801499a:	435f      	muls	r7, r3
 801499c:	e77a      	b.n	8014894 <_tzset_unlocked_r+0x160>
 801499e:	f04f 0901 	mov.w	r9, #1
 80149a2:	e77d      	b.n	80148a0 <_tzset_unlocked_r+0x16c>
 80149a4:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80149a8:	bf06      	itte	eq
 80149aa:	3401      	addeq	r4, #1
 80149ac:	4643      	moveq	r3, r8
 80149ae:	2344      	movne	r3, #68	; 0x44
 80149b0:	220a      	movs	r2, #10
 80149b2:	a90b      	add	r1, sp, #44	; 0x2c
 80149b4:	4620      	mov	r0, r4
 80149b6:	9305      	str	r3, [sp, #20]
 80149b8:	f7ff fdf8 	bl	80145ac <strtoul>
 80149bc:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80149c0:	9b05      	ldr	r3, [sp, #20]
 80149c2:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80149c6:	45a0      	cmp	r8, r4
 80149c8:	d114      	bne.n	80149f4 <_tzset_unlocked_r+0x2c0>
 80149ca:	234d      	movs	r3, #77	; 0x4d
 80149cc:	f1b9 0f00 	cmp.w	r9, #0
 80149d0:	d107      	bne.n	80149e2 <_tzset_unlocked_r+0x2ae>
 80149d2:	722b      	strb	r3, [r5, #8]
 80149d4:	2103      	movs	r1, #3
 80149d6:	2302      	movs	r3, #2
 80149d8:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80149dc:	f8c5 9014 	str.w	r9, [r5, #20]
 80149e0:	e791      	b.n	8014906 <_tzset_unlocked_r+0x1d2>
 80149e2:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80149e6:	220b      	movs	r2, #11
 80149e8:	2301      	movs	r3, #1
 80149ea:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80149ee:	2300      	movs	r3, #0
 80149f0:	63eb      	str	r3, [r5, #60]	; 0x3c
 80149f2:	e788      	b.n	8014906 <_tzset_unlocked_r+0x1d2>
 80149f4:	b280      	uxth	r0, r0
 80149f6:	723b      	strb	r3, [r7, #8]
 80149f8:	6178      	str	r0, [r7, #20]
 80149fa:	e784      	b.n	8014906 <_tzset_unlocked_r+0x1d2>
 80149fc:	08019ea1 	.word	0x08019ea1
 8014a00:	20005a0c 	.word	0x20005a0c
 8014a04:	20005a14 	.word	0x20005a14
 8014a08:	08019ea4 	.word	0x08019ea4
 8014a0c:	20005a10 	.word	0x20005a10
 8014a10:	200000ec 	.word	0x200000ec
 8014a14:	200059ff 	.word	0x200059ff
 8014a18:	08019ea8 	.word	0x08019ea8
 8014a1c:	08019ecb 	.word	0x08019ecb
 8014a20:	08019eb7 	.word	0x08019eb7
 8014a24:	08019eca 	.word	0x08019eca
 8014a28:	200059f4 	.word	0x200059f4

08014a2c <__swbuf_r>:
 8014a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a2e:	460e      	mov	r6, r1
 8014a30:	4614      	mov	r4, r2
 8014a32:	4605      	mov	r5, r0
 8014a34:	b118      	cbz	r0, 8014a3e <__swbuf_r+0x12>
 8014a36:	6983      	ldr	r3, [r0, #24]
 8014a38:	b90b      	cbnz	r3, 8014a3e <__swbuf_r+0x12>
 8014a3a:	f7fd f84f 	bl	8011adc <__sinit>
 8014a3e:	4b21      	ldr	r3, [pc, #132]	; (8014ac4 <__swbuf_r+0x98>)
 8014a40:	429c      	cmp	r4, r3
 8014a42:	d12b      	bne.n	8014a9c <__swbuf_r+0x70>
 8014a44:	686c      	ldr	r4, [r5, #4]
 8014a46:	69a3      	ldr	r3, [r4, #24]
 8014a48:	60a3      	str	r3, [r4, #8]
 8014a4a:	89a3      	ldrh	r3, [r4, #12]
 8014a4c:	071a      	lsls	r2, r3, #28
 8014a4e:	d52f      	bpl.n	8014ab0 <__swbuf_r+0x84>
 8014a50:	6923      	ldr	r3, [r4, #16]
 8014a52:	b36b      	cbz	r3, 8014ab0 <__swbuf_r+0x84>
 8014a54:	6923      	ldr	r3, [r4, #16]
 8014a56:	6820      	ldr	r0, [r4, #0]
 8014a58:	1ac0      	subs	r0, r0, r3
 8014a5a:	6963      	ldr	r3, [r4, #20]
 8014a5c:	b2f6      	uxtb	r6, r6
 8014a5e:	4283      	cmp	r3, r0
 8014a60:	4637      	mov	r7, r6
 8014a62:	dc04      	bgt.n	8014a6e <__swbuf_r+0x42>
 8014a64:	4621      	mov	r1, r4
 8014a66:	4628      	mov	r0, r5
 8014a68:	f000 fff4 	bl	8015a54 <_fflush_r>
 8014a6c:	bb30      	cbnz	r0, 8014abc <__swbuf_r+0x90>
 8014a6e:	68a3      	ldr	r3, [r4, #8]
 8014a70:	3b01      	subs	r3, #1
 8014a72:	60a3      	str	r3, [r4, #8]
 8014a74:	6823      	ldr	r3, [r4, #0]
 8014a76:	1c5a      	adds	r2, r3, #1
 8014a78:	6022      	str	r2, [r4, #0]
 8014a7a:	701e      	strb	r6, [r3, #0]
 8014a7c:	6963      	ldr	r3, [r4, #20]
 8014a7e:	3001      	adds	r0, #1
 8014a80:	4283      	cmp	r3, r0
 8014a82:	d004      	beq.n	8014a8e <__swbuf_r+0x62>
 8014a84:	89a3      	ldrh	r3, [r4, #12]
 8014a86:	07db      	lsls	r3, r3, #31
 8014a88:	d506      	bpl.n	8014a98 <__swbuf_r+0x6c>
 8014a8a:	2e0a      	cmp	r6, #10
 8014a8c:	d104      	bne.n	8014a98 <__swbuf_r+0x6c>
 8014a8e:	4621      	mov	r1, r4
 8014a90:	4628      	mov	r0, r5
 8014a92:	f000 ffdf 	bl	8015a54 <_fflush_r>
 8014a96:	b988      	cbnz	r0, 8014abc <__swbuf_r+0x90>
 8014a98:	4638      	mov	r0, r7
 8014a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a9c:	4b0a      	ldr	r3, [pc, #40]	; (8014ac8 <__swbuf_r+0x9c>)
 8014a9e:	429c      	cmp	r4, r3
 8014aa0:	d101      	bne.n	8014aa6 <__swbuf_r+0x7a>
 8014aa2:	68ac      	ldr	r4, [r5, #8]
 8014aa4:	e7cf      	b.n	8014a46 <__swbuf_r+0x1a>
 8014aa6:	4b09      	ldr	r3, [pc, #36]	; (8014acc <__swbuf_r+0xa0>)
 8014aa8:	429c      	cmp	r4, r3
 8014aaa:	bf08      	it	eq
 8014aac:	68ec      	ldreq	r4, [r5, #12]
 8014aae:	e7ca      	b.n	8014a46 <__swbuf_r+0x1a>
 8014ab0:	4621      	mov	r1, r4
 8014ab2:	4628      	mov	r0, r5
 8014ab4:	f000 f81e 	bl	8014af4 <__swsetup_r>
 8014ab8:	2800      	cmp	r0, #0
 8014aba:	d0cb      	beq.n	8014a54 <__swbuf_r+0x28>
 8014abc:	f04f 37ff 	mov.w	r7, #4294967295
 8014ac0:	e7ea      	b.n	8014a98 <__swbuf_r+0x6c>
 8014ac2:	bf00      	nop
 8014ac4:	08019c38 	.word	0x08019c38
 8014ac8:	08019c58 	.word	0x08019c58
 8014acc:	08019c18 	.word	0x08019c18

08014ad0 <_write_r>:
 8014ad0:	b538      	push	{r3, r4, r5, lr}
 8014ad2:	4d07      	ldr	r5, [pc, #28]	; (8014af0 <_write_r+0x20>)
 8014ad4:	4604      	mov	r4, r0
 8014ad6:	4608      	mov	r0, r1
 8014ad8:	4611      	mov	r1, r2
 8014ada:	2200      	movs	r2, #0
 8014adc:	602a      	str	r2, [r5, #0]
 8014ade:	461a      	mov	r2, r3
 8014ae0:	f003 f8d8 	bl	8017c94 <_write>
 8014ae4:	1c43      	adds	r3, r0, #1
 8014ae6:	d102      	bne.n	8014aee <_write_r+0x1e>
 8014ae8:	682b      	ldr	r3, [r5, #0]
 8014aea:	b103      	cbz	r3, 8014aee <_write_r+0x1e>
 8014aec:	6023      	str	r3, [r4, #0]
 8014aee:	bd38      	pop	{r3, r4, r5, pc}
 8014af0:	20006484 	.word	0x20006484

08014af4 <__swsetup_r>:
 8014af4:	4b32      	ldr	r3, [pc, #200]	; (8014bc0 <__swsetup_r+0xcc>)
 8014af6:	b570      	push	{r4, r5, r6, lr}
 8014af8:	681d      	ldr	r5, [r3, #0]
 8014afa:	4606      	mov	r6, r0
 8014afc:	460c      	mov	r4, r1
 8014afe:	b125      	cbz	r5, 8014b0a <__swsetup_r+0x16>
 8014b00:	69ab      	ldr	r3, [r5, #24]
 8014b02:	b913      	cbnz	r3, 8014b0a <__swsetup_r+0x16>
 8014b04:	4628      	mov	r0, r5
 8014b06:	f7fc ffe9 	bl	8011adc <__sinit>
 8014b0a:	4b2e      	ldr	r3, [pc, #184]	; (8014bc4 <__swsetup_r+0xd0>)
 8014b0c:	429c      	cmp	r4, r3
 8014b0e:	d10f      	bne.n	8014b30 <__swsetup_r+0x3c>
 8014b10:	686c      	ldr	r4, [r5, #4]
 8014b12:	89a3      	ldrh	r3, [r4, #12]
 8014b14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014b18:	0719      	lsls	r1, r3, #28
 8014b1a:	d42c      	bmi.n	8014b76 <__swsetup_r+0x82>
 8014b1c:	06dd      	lsls	r5, r3, #27
 8014b1e:	d411      	bmi.n	8014b44 <__swsetup_r+0x50>
 8014b20:	2309      	movs	r3, #9
 8014b22:	6033      	str	r3, [r6, #0]
 8014b24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014b28:	81a3      	strh	r3, [r4, #12]
 8014b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8014b2e:	e03e      	b.n	8014bae <__swsetup_r+0xba>
 8014b30:	4b25      	ldr	r3, [pc, #148]	; (8014bc8 <__swsetup_r+0xd4>)
 8014b32:	429c      	cmp	r4, r3
 8014b34:	d101      	bne.n	8014b3a <__swsetup_r+0x46>
 8014b36:	68ac      	ldr	r4, [r5, #8]
 8014b38:	e7eb      	b.n	8014b12 <__swsetup_r+0x1e>
 8014b3a:	4b24      	ldr	r3, [pc, #144]	; (8014bcc <__swsetup_r+0xd8>)
 8014b3c:	429c      	cmp	r4, r3
 8014b3e:	bf08      	it	eq
 8014b40:	68ec      	ldreq	r4, [r5, #12]
 8014b42:	e7e6      	b.n	8014b12 <__swsetup_r+0x1e>
 8014b44:	0758      	lsls	r0, r3, #29
 8014b46:	d512      	bpl.n	8014b6e <__swsetup_r+0x7a>
 8014b48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014b4a:	b141      	cbz	r1, 8014b5e <__swsetup_r+0x6a>
 8014b4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014b50:	4299      	cmp	r1, r3
 8014b52:	d002      	beq.n	8014b5a <__swsetup_r+0x66>
 8014b54:	4630      	mov	r0, r6
 8014b56:	f7fd fc63 	bl	8012420 <_free_r>
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	6363      	str	r3, [r4, #52]	; 0x34
 8014b5e:	89a3      	ldrh	r3, [r4, #12]
 8014b60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014b64:	81a3      	strh	r3, [r4, #12]
 8014b66:	2300      	movs	r3, #0
 8014b68:	6063      	str	r3, [r4, #4]
 8014b6a:	6923      	ldr	r3, [r4, #16]
 8014b6c:	6023      	str	r3, [r4, #0]
 8014b6e:	89a3      	ldrh	r3, [r4, #12]
 8014b70:	f043 0308 	orr.w	r3, r3, #8
 8014b74:	81a3      	strh	r3, [r4, #12]
 8014b76:	6923      	ldr	r3, [r4, #16]
 8014b78:	b94b      	cbnz	r3, 8014b8e <__swsetup_r+0x9a>
 8014b7a:	89a3      	ldrh	r3, [r4, #12]
 8014b7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014b84:	d003      	beq.n	8014b8e <__swsetup_r+0x9a>
 8014b86:	4621      	mov	r1, r4
 8014b88:	4630      	mov	r0, r6
 8014b8a:	f001 fc51 	bl	8016430 <__smakebuf_r>
 8014b8e:	89a0      	ldrh	r0, [r4, #12]
 8014b90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014b94:	f010 0301 	ands.w	r3, r0, #1
 8014b98:	d00a      	beq.n	8014bb0 <__swsetup_r+0xbc>
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	60a3      	str	r3, [r4, #8]
 8014b9e:	6963      	ldr	r3, [r4, #20]
 8014ba0:	425b      	negs	r3, r3
 8014ba2:	61a3      	str	r3, [r4, #24]
 8014ba4:	6923      	ldr	r3, [r4, #16]
 8014ba6:	b943      	cbnz	r3, 8014bba <__swsetup_r+0xc6>
 8014ba8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014bac:	d1ba      	bne.n	8014b24 <__swsetup_r+0x30>
 8014bae:	bd70      	pop	{r4, r5, r6, pc}
 8014bb0:	0781      	lsls	r1, r0, #30
 8014bb2:	bf58      	it	pl
 8014bb4:	6963      	ldrpl	r3, [r4, #20]
 8014bb6:	60a3      	str	r3, [r4, #8]
 8014bb8:	e7f4      	b.n	8014ba4 <__swsetup_r+0xb0>
 8014bba:	2000      	movs	r0, #0
 8014bbc:	e7f7      	b.n	8014bae <__swsetup_r+0xba>
 8014bbe:	bf00      	nop
 8014bc0:	20000088 	.word	0x20000088
 8014bc4:	08019c38 	.word	0x08019c38
 8014bc8:	08019c58 	.word	0x08019c58
 8014bcc:	08019c18 	.word	0x08019c18

08014bd0 <__assert_func>:
 8014bd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014bd2:	4614      	mov	r4, r2
 8014bd4:	461a      	mov	r2, r3
 8014bd6:	4b09      	ldr	r3, [pc, #36]	; (8014bfc <__assert_func+0x2c>)
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	4605      	mov	r5, r0
 8014bdc:	68d8      	ldr	r0, [r3, #12]
 8014bde:	b14c      	cbz	r4, 8014bf4 <__assert_func+0x24>
 8014be0:	4b07      	ldr	r3, [pc, #28]	; (8014c00 <__assert_func+0x30>)
 8014be2:	9100      	str	r1, [sp, #0]
 8014be4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014be8:	4906      	ldr	r1, [pc, #24]	; (8014c04 <__assert_func+0x34>)
 8014bea:	462b      	mov	r3, r5
 8014bec:	f000 ff6e 	bl	8015acc <fiprintf>
 8014bf0:	f7fc ff06 	bl	8011a00 <abort>
 8014bf4:	4b04      	ldr	r3, [pc, #16]	; (8014c08 <__assert_func+0x38>)
 8014bf6:	461c      	mov	r4, r3
 8014bf8:	e7f3      	b.n	8014be2 <__assert_func+0x12>
 8014bfa:	bf00      	nop
 8014bfc:	20000088 	.word	0x20000088
 8014c00:	08019edd 	.word	0x08019edd
 8014c04:	08019eea 	.word	0x08019eea
 8014c08:	08019f18 	.word	0x08019f18

08014c0c <_close_r>:
 8014c0c:	b538      	push	{r3, r4, r5, lr}
 8014c0e:	4d06      	ldr	r5, [pc, #24]	; (8014c28 <_close_r+0x1c>)
 8014c10:	2300      	movs	r3, #0
 8014c12:	4604      	mov	r4, r0
 8014c14:	4608      	mov	r0, r1
 8014c16:	602b      	str	r3, [r5, #0]
 8014c18:	f002 fff6 	bl	8017c08 <_close>
 8014c1c:	1c43      	adds	r3, r0, #1
 8014c1e:	d102      	bne.n	8014c26 <_close_r+0x1a>
 8014c20:	682b      	ldr	r3, [r5, #0]
 8014c22:	b103      	cbz	r3, 8014c26 <_close_r+0x1a>
 8014c24:	6023      	str	r3, [r4, #0]
 8014c26:	bd38      	pop	{r3, r4, r5, pc}
 8014c28:	20006484 	.word	0x20006484

08014c2c <div>:
 8014c2c:	2900      	cmp	r1, #0
 8014c2e:	b510      	push	{r4, lr}
 8014c30:	fb91 f4f2 	sdiv	r4, r1, r2
 8014c34:	fb02 1314 	mls	r3, r2, r4, r1
 8014c38:	db06      	blt.n	8014c48 <div+0x1c>
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	da01      	bge.n	8014c42 <div+0x16>
 8014c3e:	3401      	adds	r4, #1
 8014c40:	1a9b      	subs	r3, r3, r2
 8014c42:	e9c0 4300 	strd	r4, r3, [r0]
 8014c46:	bd10      	pop	{r4, pc}
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	bfc4      	itt	gt
 8014c4c:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8014c50:	189b      	addgt	r3, r3, r2
 8014c52:	e7f6      	b.n	8014c42 <div+0x16>

08014c54 <quorem>:
 8014c54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c58:	6903      	ldr	r3, [r0, #16]
 8014c5a:	690c      	ldr	r4, [r1, #16]
 8014c5c:	42a3      	cmp	r3, r4
 8014c5e:	4607      	mov	r7, r0
 8014c60:	f2c0 8081 	blt.w	8014d66 <quorem+0x112>
 8014c64:	3c01      	subs	r4, #1
 8014c66:	f101 0814 	add.w	r8, r1, #20
 8014c6a:	f100 0514 	add.w	r5, r0, #20
 8014c6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014c72:	9301      	str	r3, [sp, #4]
 8014c74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014c78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014c7c:	3301      	adds	r3, #1
 8014c7e:	429a      	cmp	r2, r3
 8014c80:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014c84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014c88:	fbb2 f6f3 	udiv	r6, r2, r3
 8014c8c:	d331      	bcc.n	8014cf2 <quorem+0x9e>
 8014c8e:	f04f 0e00 	mov.w	lr, #0
 8014c92:	4640      	mov	r0, r8
 8014c94:	46ac      	mov	ip, r5
 8014c96:	46f2      	mov	sl, lr
 8014c98:	f850 2b04 	ldr.w	r2, [r0], #4
 8014c9c:	b293      	uxth	r3, r2
 8014c9e:	fb06 e303 	mla	r3, r6, r3, lr
 8014ca2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8014ca6:	b29b      	uxth	r3, r3
 8014ca8:	ebaa 0303 	sub.w	r3, sl, r3
 8014cac:	0c12      	lsrs	r2, r2, #16
 8014cae:	f8dc a000 	ldr.w	sl, [ip]
 8014cb2:	fb06 e202 	mla	r2, r6, r2, lr
 8014cb6:	fa13 f38a 	uxtah	r3, r3, sl
 8014cba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014cbe:	fa1f fa82 	uxth.w	sl, r2
 8014cc2:	f8dc 2000 	ldr.w	r2, [ip]
 8014cc6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8014cca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014cce:	b29b      	uxth	r3, r3
 8014cd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014cd4:	4581      	cmp	r9, r0
 8014cd6:	f84c 3b04 	str.w	r3, [ip], #4
 8014cda:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014cde:	d2db      	bcs.n	8014c98 <quorem+0x44>
 8014ce0:	f855 300b 	ldr.w	r3, [r5, fp]
 8014ce4:	b92b      	cbnz	r3, 8014cf2 <quorem+0x9e>
 8014ce6:	9b01      	ldr	r3, [sp, #4]
 8014ce8:	3b04      	subs	r3, #4
 8014cea:	429d      	cmp	r5, r3
 8014cec:	461a      	mov	r2, r3
 8014cee:	d32e      	bcc.n	8014d4e <quorem+0xfa>
 8014cf0:	613c      	str	r4, [r7, #16]
 8014cf2:	4638      	mov	r0, r7
 8014cf4:	f001 fec2 	bl	8016a7c <__mcmp>
 8014cf8:	2800      	cmp	r0, #0
 8014cfa:	db24      	blt.n	8014d46 <quorem+0xf2>
 8014cfc:	3601      	adds	r6, #1
 8014cfe:	4628      	mov	r0, r5
 8014d00:	f04f 0c00 	mov.w	ip, #0
 8014d04:	f858 2b04 	ldr.w	r2, [r8], #4
 8014d08:	f8d0 e000 	ldr.w	lr, [r0]
 8014d0c:	b293      	uxth	r3, r2
 8014d0e:	ebac 0303 	sub.w	r3, ip, r3
 8014d12:	0c12      	lsrs	r2, r2, #16
 8014d14:	fa13 f38e 	uxtah	r3, r3, lr
 8014d18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014d1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014d20:	b29b      	uxth	r3, r3
 8014d22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014d26:	45c1      	cmp	r9, r8
 8014d28:	f840 3b04 	str.w	r3, [r0], #4
 8014d2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014d30:	d2e8      	bcs.n	8014d04 <quorem+0xb0>
 8014d32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014d36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014d3a:	b922      	cbnz	r2, 8014d46 <quorem+0xf2>
 8014d3c:	3b04      	subs	r3, #4
 8014d3e:	429d      	cmp	r5, r3
 8014d40:	461a      	mov	r2, r3
 8014d42:	d30a      	bcc.n	8014d5a <quorem+0x106>
 8014d44:	613c      	str	r4, [r7, #16]
 8014d46:	4630      	mov	r0, r6
 8014d48:	b003      	add	sp, #12
 8014d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d4e:	6812      	ldr	r2, [r2, #0]
 8014d50:	3b04      	subs	r3, #4
 8014d52:	2a00      	cmp	r2, #0
 8014d54:	d1cc      	bne.n	8014cf0 <quorem+0x9c>
 8014d56:	3c01      	subs	r4, #1
 8014d58:	e7c7      	b.n	8014cea <quorem+0x96>
 8014d5a:	6812      	ldr	r2, [r2, #0]
 8014d5c:	3b04      	subs	r3, #4
 8014d5e:	2a00      	cmp	r2, #0
 8014d60:	d1f0      	bne.n	8014d44 <quorem+0xf0>
 8014d62:	3c01      	subs	r4, #1
 8014d64:	e7eb      	b.n	8014d3e <quorem+0xea>
 8014d66:	2000      	movs	r0, #0
 8014d68:	e7ee      	b.n	8014d48 <quorem+0xf4>
 8014d6a:	0000      	movs	r0, r0
 8014d6c:	0000      	movs	r0, r0
	...

08014d70 <_dtoa_r>:
 8014d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d74:	ed2d 8b02 	vpush	{d8}
 8014d78:	ec57 6b10 	vmov	r6, r7, d0
 8014d7c:	b095      	sub	sp, #84	; 0x54
 8014d7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014d80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014d84:	9105      	str	r1, [sp, #20]
 8014d86:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8014d8a:	4604      	mov	r4, r0
 8014d8c:	9209      	str	r2, [sp, #36]	; 0x24
 8014d8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014d90:	b975      	cbnz	r5, 8014db0 <_dtoa_r+0x40>
 8014d92:	2010      	movs	r0, #16
 8014d94:	f7fd f886 	bl	8011ea4 <malloc>
 8014d98:	4602      	mov	r2, r0
 8014d9a:	6260      	str	r0, [r4, #36]	; 0x24
 8014d9c:	b920      	cbnz	r0, 8014da8 <_dtoa_r+0x38>
 8014d9e:	4bb2      	ldr	r3, [pc, #712]	; (8015068 <_dtoa_r+0x2f8>)
 8014da0:	21ea      	movs	r1, #234	; 0xea
 8014da2:	48b2      	ldr	r0, [pc, #712]	; (801506c <_dtoa_r+0x2fc>)
 8014da4:	f7ff ff14 	bl	8014bd0 <__assert_func>
 8014da8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014dac:	6005      	str	r5, [r0, #0]
 8014dae:	60c5      	str	r5, [r0, #12]
 8014db0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014db2:	6819      	ldr	r1, [r3, #0]
 8014db4:	b151      	cbz	r1, 8014dcc <_dtoa_r+0x5c>
 8014db6:	685a      	ldr	r2, [r3, #4]
 8014db8:	604a      	str	r2, [r1, #4]
 8014dba:	2301      	movs	r3, #1
 8014dbc:	4093      	lsls	r3, r2
 8014dbe:	608b      	str	r3, [r1, #8]
 8014dc0:	4620      	mov	r0, r4
 8014dc2:	f001 fbd3 	bl	801656c <_Bfree>
 8014dc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014dc8:	2200      	movs	r2, #0
 8014dca:	601a      	str	r2, [r3, #0]
 8014dcc:	1e3b      	subs	r3, r7, #0
 8014dce:	bfb9      	ittee	lt
 8014dd0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014dd4:	9303      	strlt	r3, [sp, #12]
 8014dd6:	2300      	movge	r3, #0
 8014dd8:	f8c8 3000 	strge.w	r3, [r8]
 8014ddc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8014de0:	4ba3      	ldr	r3, [pc, #652]	; (8015070 <_dtoa_r+0x300>)
 8014de2:	bfbc      	itt	lt
 8014de4:	2201      	movlt	r2, #1
 8014de6:	f8c8 2000 	strlt.w	r2, [r8]
 8014dea:	ea33 0309 	bics.w	r3, r3, r9
 8014dee:	d11b      	bne.n	8014e28 <_dtoa_r+0xb8>
 8014df0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014df2:	f242 730f 	movw	r3, #9999	; 0x270f
 8014df6:	6013      	str	r3, [r2, #0]
 8014df8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014dfc:	4333      	orrs	r3, r6
 8014dfe:	f000 857a 	beq.w	80158f6 <_dtoa_r+0xb86>
 8014e02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014e04:	b963      	cbnz	r3, 8014e20 <_dtoa_r+0xb0>
 8014e06:	4b9b      	ldr	r3, [pc, #620]	; (8015074 <_dtoa_r+0x304>)
 8014e08:	e024      	b.n	8014e54 <_dtoa_r+0xe4>
 8014e0a:	4b9b      	ldr	r3, [pc, #620]	; (8015078 <_dtoa_r+0x308>)
 8014e0c:	9300      	str	r3, [sp, #0]
 8014e0e:	3308      	adds	r3, #8
 8014e10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014e12:	6013      	str	r3, [r2, #0]
 8014e14:	9800      	ldr	r0, [sp, #0]
 8014e16:	b015      	add	sp, #84	; 0x54
 8014e18:	ecbd 8b02 	vpop	{d8}
 8014e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e20:	4b94      	ldr	r3, [pc, #592]	; (8015074 <_dtoa_r+0x304>)
 8014e22:	9300      	str	r3, [sp, #0]
 8014e24:	3303      	adds	r3, #3
 8014e26:	e7f3      	b.n	8014e10 <_dtoa_r+0xa0>
 8014e28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014e2c:	2200      	movs	r2, #0
 8014e2e:	ec51 0b17 	vmov	r0, r1, d7
 8014e32:	2300      	movs	r3, #0
 8014e34:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8014e38:	f7eb fe66 	bl	8000b08 <__aeabi_dcmpeq>
 8014e3c:	4680      	mov	r8, r0
 8014e3e:	b158      	cbz	r0, 8014e58 <_dtoa_r+0xe8>
 8014e40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014e42:	2301      	movs	r3, #1
 8014e44:	6013      	str	r3, [r2, #0]
 8014e46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	f000 8551 	beq.w	80158f0 <_dtoa_r+0xb80>
 8014e4e:	488b      	ldr	r0, [pc, #556]	; (801507c <_dtoa_r+0x30c>)
 8014e50:	6018      	str	r0, [r3, #0]
 8014e52:	1e43      	subs	r3, r0, #1
 8014e54:	9300      	str	r3, [sp, #0]
 8014e56:	e7dd      	b.n	8014e14 <_dtoa_r+0xa4>
 8014e58:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8014e5c:	aa12      	add	r2, sp, #72	; 0x48
 8014e5e:	a913      	add	r1, sp, #76	; 0x4c
 8014e60:	4620      	mov	r0, r4
 8014e62:	f001 ff2b 	bl	8016cbc <__d2b>
 8014e66:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014e6a:	4683      	mov	fp, r0
 8014e6c:	2d00      	cmp	r5, #0
 8014e6e:	d07c      	beq.n	8014f6a <_dtoa_r+0x1fa>
 8014e70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e72:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8014e76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014e7a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8014e7e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8014e82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8014e86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014e8a:	4b7d      	ldr	r3, [pc, #500]	; (8015080 <_dtoa_r+0x310>)
 8014e8c:	2200      	movs	r2, #0
 8014e8e:	4630      	mov	r0, r6
 8014e90:	4639      	mov	r1, r7
 8014e92:	f7eb fa19 	bl	80002c8 <__aeabi_dsub>
 8014e96:	a36e      	add	r3, pc, #440	; (adr r3, 8015050 <_dtoa_r+0x2e0>)
 8014e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e9c:	f7eb fbcc 	bl	8000638 <__aeabi_dmul>
 8014ea0:	a36d      	add	r3, pc, #436	; (adr r3, 8015058 <_dtoa_r+0x2e8>)
 8014ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ea6:	f7eb fa11 	bl	80002cc <__adddf3>
 8014eaa:	4606      	mov	r6, r0
 8014eac:	4628      	mov	r0, r5
 8014eae:	460f      	mov	r7, r1
 8014eb0:	f7eb fb58 	bl	8000564 <__aeabi_i2d>
 8014eb4:	a36a      	add	r3, pc, #424	; (adr r3, 8015060 <_dtoa_r+0x2f0>)
 8014eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014eba:	f7eb fbbd 	bl	8000638 <__aeabi_dmul>
 8014ebe:	4602      	mov	r2, r0
 8014ec0:	460b      	mov	r3, r1
 8014ec2:	4630      	mov	r0, r6
 8014ec4:	4639      	mov	r1, r7
 8014ec6:	f7eb fa01 	bl	80002cc <__adddf3>
 8014eca:	4606      	mov	r6, r0
 8014ecc:	460f      	mov	r7, r1
 8014ece:	f7eb fe63 	bl	8000b98 <__aeabi_d2iz>
 8014ed2:	2200      	movs	r2, #0
 8014ed4:	4682      	mov	sl, r0
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	4630      	mov	r0, r6
 8014eda:	4639      	mov	r1, r7
 8014edc:	f7eb fe1e 	bl	8000b1c <__aeabi_dcmplt>
 8014ee0:	b148      	cbz	r0, 8014ef6 <_dtoa_r+0x186>
 8014ee2:	4650      	mov	r0, sl
 8014ee4:	f7eb fb3e 	bl	8000564 <__aeabi_i2d>
 8014ee8:	4632      	mov	r2, r6
 8014eea:	463b      	mov	r3, r7
 8014eec:	f7eb fe0c 	bl	8000b08 <__aeabi_dcmpeq>
 8014ef0:	b908      	cbnz	r0, 8014ef6 <_dtoa_r+0x186>
 8014ef2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014ef6:	f1ba 0f16 	cmp.w	sl, #22
 8014efa:	d854      	bhi.n	8014fa6 <_dtoa_r+0x236>
 8014efc:	4b61      	ldr	r3, [pc, #388]	; (8015084 <_dtoa_r+0x314>)
 8014efe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014f0a:	f7eb fe07 	bl	8000b1c <__aeabi_dcmplt>
 8014f0e:	2800      	cmp	r0, #0
 8014f10:	d04b      	beq.n	8014faa <_dtoa_r+0x23a>
 8014f12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014f16:	2300      	movs	r3, #0
 8014f18:	930e      	str	r3, [sp, #56]	; 0x38
 8014f1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014f1c:	1b5d      	subs	r5, r3, r5
 8014f1e:	1e6b      	subs	r3, r5, #1
 8014f20:	9304      	str	r3, [sp, #16]
 8014f22:	bf43      	ittte	mi
 8014f24:	2300      	movmi	r3, #0
 8014f26:	f1c5 0801 	rsbmi	r8, r5, #1
 8014f2a:	9304      	strmi	r3, [sp, #16]
 8014f2c:	f04f 0800 	movpl.w	r8, #0
 8014f30:	f1ba 0f00 	cmp.w	sl, #0
 8014f34:	db3b      	blt.n	8014fae <_dtoa_r+0x23e>
 8014f36:	9b04      	ldr	r3, [sp, #16]
 8014f38:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8014f3c:	4453      	add	r3, sl
 8014f3e:	9304      	str	r3, [sp, #16]
 8014f40:	2300      	movs	r3, #0
 8014f42:	9306      	str	r3, [sp, #24]
 8014f44:	9b05      	ldr	r3, [sp, #20]
 8014f46:	2b09      	cmp	r3, #9
 8014f48:	d869      	bhi.n	801501e <_dtoa_r+0x2ae>
 8014f4a:	2b05      	cmp	r3, #5
 8014f4c:	bfc4      	itt	gt
 8014f4e:	3b04      	subgt	r3, #4
 8014f50:	9305      	strgt	r3, [sp, #20]
 8014f52:	9b05      	ldr	r3, [sp, #20]
 8014f54:	f1a3 0302 	sub.w	r3, r3, #2
 8014f58:	bfcc      	ite	gt
 8014f5a:	2500      	movgt	r5, #0
 8014f5c:	2501      	movle	r5, #1
 8014f5e:	2b03      	cmp	r3, #3
 8014f60:	d869      	bhi.n	8015036 <_dtoa_r+0x2c6>
 8014f62:	e8df f003 	tbb	[pc, r3]
 8014f66:	4e2c      	.short	0x4e2c
 8014f68:	5a4c      	.short	0x5a4c
 8014f6a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8014f6e:	441d      	add	r5, r3
 8014f70:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014f74:	2b20      	cmp	r3, #32
 8014f76:	bfc1      	itttt	gt
 8014f78:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014f7c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8014f80:	fa09 f303 	lslgt.w	r3, r9, r3
 8014f84:	fa26 f000 	lsrgt.w	r0, r6, r0
 8014f88:	bfda      	itte	le
 8014f8a:	f1c3 0320 	rsble	r3, r3, #32
 8014f8e:	fa06 f003 	lslle.w	r0, r6, r3
 8014f92:	4318      	orrgt	r0, r3
 8014f94:	f7eb fad6 	bl	8000544 <__aeabi_ui2d>
 8014f98:	2301      	movs	r3, #1
 8014f9a:	4606      	mov	r6, r0
 8014f9c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8014fa0:	3d01      	subs	r5, #1
 8014fa2:	9310      	str	r3, [sp, #64]	; 0x40
 8014fa4:	e771      	b.n	8014e8a <_dtoa_r+0x11a>
 8014fa6:	2301      	movs	r3, #1
 8014fa8:	e7b6      	b.n	8014f18 <_dtoa_r+0x1a8>
 8014faa:	900e      	str	r0, [sp, #56]	; 0x38
 8014fac:	e7b5      	b.n	8014f1a <_dtoa_r+0x1aa>
 8014fae:	f1ca 0300 	rsb	r3, sl, #0
 8014fb2:	9306      	str	r3, [sp, #24]
 8014fb4:	2300      	movs	r3, #0
 8014fb6:	eba8 080a 	sub.w	r8, r8, sl
 8014fba:	930d      	str	r3, [sp, #52]	; 0x34
 8014fbc:	e7c2      	b.n	8014f44 <_dtoa_r+0x1d4>
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	9308      	str	r3, [sp, #32]
 8014fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	dc39      	bgt.n	801503c <_dtoa_r+0x2cc>
 8014fc8:	f04f 0901 	mov.w	r9, #1
 8014fcc:	f8cd 9004 	str.w	r9, [sp, #4]
 8014fd0:	464b      	mov	r3, r9
 8014fd2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8014fd6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8014fd8:	2200      	movs	r2, #0
 8014fda:	6042      	str	r2, [r0, #4]
 8014fdc:	2204      	movs	r2, #4
 8014fde:	f102 0614 	add.w	r6, r2, #20
 8014fe2:	429e      	cmp	r6, r3
 8014fe4:	6841      	ldr	r1, [r0, #4]
 8014fe6:	d92f      	bls.n	8015048 <_dtoa_r+0x2d8>
 8014fe8:	4620      	mov	r0, r4
 8014fea:	f001 fa7f 	bl	80164ec <_Balloc>
 8014fee:	9000      	str	r0, [sp, #0]
 8014ff0:	2800      	cmp	r0, #0
 8014ff2:	d14b      	bne.n	801508c <_dtoa_r+0x31c>
 8014ff4:	4b24      	ldr	r3, [pc, #144]	; (8015088 <_dtoa_r+0x318>)
 8014ff6:	4602      	mov	r2, r0
 8014ff8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014ffc:	e6d1      	b.n	8014da2 <_dtoa_r+0x32>
 8014ffe:	2301      	movs	r3, #1
 8015000:	e7de      	b.n	8014fc0 <_dtoa_r+0x250>
 8015002:	2300      	movs	r3, #0
 8015004:	9308      	str	r3, [sp, #32]
 8015006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015008:	eb0a 0903 	add.w	r9, sl, r3
 801500c:	f109 0301 	add.w	r3, r9, #1
 8015010:	2b01      	cmp	r3, #1
 8015012:	9301      	str	r3, [sp, #4]
 8015014:	bfb8      	it	lt
 8015016:	2301      	movlt	r3, #1
 8015018:	e7dd      	b.n	8014fd6 <_dtoa_r+0x266>
 801501a:	2301      	movs	r3, #1
 801501c:	e7f2      	b.n	8015004 <_dtoa_r+0x294>
 801501e:	2501      	movs	r5, #1
 8015020:	2300      	movs	r3, #0
 8015022:	9305      	str	r3, [sp, #20]
 8015024:	9508      	str	r5, [sp, #32]
 8015026:	f04f 39ff 	mov.w	r9, #4294967295
 801502a:	2200      	movs	r2, #0
 801502c:	f8cd 9004 	str.w	r9, [sp, #4]
 8015030:	2312      	movs	r3, #18
 8015032:	9209      	str	r2, [sp, #36]	; 0x24
 8015034:	e7cf      	b.n	8014fd6 <_dtoa_r+0x266>
 8015036:	2301      	movs	r3, #1
 8015038:	9308      	str	r3, [sp, #32]
 801503a:	e7f4      	b.n	8015026 <_dtoa_r+0x2b6>
 801503c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8015040:	f8cd 9004 	str.w	r9, [sp, #4]
 8015044:	464b      	mov	r3, r9
 8015046:	e7c6      	b.n	8014fd6 <_dtoa_r+0x266>
 8015048:	3101      	adds	r1, #1
 801504a:	6041      	str	r1, [r0, #4]
 801504c:	0052      	lsls	r2, r2, #1
 801504e:	e7c6      	b.n	8014fde <_dtoa_r+0x26e>
 8015050:	636f4361 	.word	0x636f4361
 8015054:	3fd287a7 	.word	0x3fd287a7
 8015058:	8b60c8b3 	.word	0x8b60c8b3
 801505c:	3fc68a28 	.word	0x3fc68a28
 8015060:	509f79fb 	.word	0x509f79fb
 8015064:	3fd34413 	.word	0x3fd34413
 8015068:	08019c7c 	.word	0x08019c7c
 801506c:	08019f26 	.word	0x08019f26
 8015070:	7ff00000 	.word	0x7ff00000
 8015074:	08019f22 	.word	0x08019f22
 8015078:	08019f19 	.word	0x08019f19
 801507c:	0801a18a 	.word	0x0801a18a
 8015080:	3ff80000 	.word	0x3ff80000
 8015084:	0801a0a0 	.word	0x0801a0a0
 8015088:	08019f85 	.word	0x08019f85
 801508c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801508e:	9a00      	ldr	r2, [sp, #0]
 8015090:	601a      	str	r2, [r3, #0]
 8015092:	9b01      	ldr	r3, [sp, #4]
 8015094:	2b0e      	cmp	r3, #14
 8015096:	f200 80ad 	bhi.w	80151f4 <_dtoa_r+0x484>
 801509a:	2d00      	cmp	r5, #0
 801509c:	f000 80aa 	beq.w	80151f4 <_dtoa_r+0x484>
 80150a0:	f1ba 0f00 	cmp.w	sl, #0
 80150a4:	dd36      	ble.n	8015114 <_dtoa_r+0x3a4>
 80150a6:	4ac3      	ldr	r2, [pc, #780]	; (80153b4 <_dtoa_r+0x644>)
 80150a8:	f00a 030f 	and.w	r3, sl, #15
 80150ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80150b0:	ed93 7b00 	vldr	d7, [r3]
 80150b4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80150b8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80150bc:	eeb0 8a47 	vmov.f32	s16, s14
 80150c0:	eef0 8a67 	vmov.f32	s17, s15
 80150c4:	d016      	beq.n	80150f4 <_dtoa_r+0x384>
 80150c6:	4bbc      	ldr	r3, [pc, #752]	; (80153b8 <_dtoa_r+0x648>)
 80150c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80150cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80150d0:	f7eb fbdc 	bl	800088c <__aeabi_ddiv>
 80150d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80150d8:	f007 070f 	and.w	r7, r7, #15
 80150dc:	2503      	movs	r5, #3
 80150de:	4eb6      	ldr	r6, [pc, #728]	; (80153b8 <_dtoa_r+0x648>)
 80150e0:	b957      	cbnz	r7, 80150f8 <_dtoa_r+0x388>
 80150e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80150e6:	ec53 2b18 	vmov	r2, r3, d8
 80150ea:	f7eb fbcf 	bl	800088c <__aeabi_ddiv>
 80150ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80150f2:	e029      	b.n	8015148 <_dtoa_r+0x3d8>
 80150f4:	2502      	movs	r5, #2
 80150f6:	e7f2      	b.n	80150de <_dtoa_r+0x36e>
 80150f8:	07f9      	lsls	r1, r7, #31
 80150fa:	d508      	bpl.n	801510e <_dtoa_r+0x39e>
 80150fc:	ec51 0b18 	vmov	r0, r1, d8
 8015100:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015104:	f7eb fa98 	bl	8000638 <__aeabi_dmul>
 8015108:	ec41 0b18 	vmov	d8, r0, r1
 801510c:	3501      	adds	r5, #1
 801510e:	107f      	asrs	r7, r7, #1
 8015110:	3608      	adds	r6, #8
 8015112:	e7e5      	b.n	80150e0 <_dtoa_r+0x370>
 8015114:	f000 80a6 	beq.w	8015264 <_dtoa_r+0x4f4>
 8015118:	f1ca 0600 	rsb	r6, sl, #0
 801511c:	4ba5      	ldr	r3, [pc, #660]	; (80153b4 <_dtoa_r+0x644>)
 801511e:	4fa6      	ldr	r7, [pc, #664]	; (80153b8 <_dtoa_r+0x648>)
 8015120:	f006 020f 	and.w	r2, r6, #15
 8015124:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801512c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015130:	f7eb fa82 	bl	8000638 <__aeabi_dmul>
 8015134:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015138:	1136      	asrs	r6, r6, #4
 801513a:	2300      	movs	r3, #0
 801513c:	2502      	movs	r5, #2
 801513e:	2e00      	cmp	r6, #0
 8015140:	f040 8085 	bne.w	801524e <_dtoa_r+0x4de>
 8015144:	2b00      	cmp	r3, #0
 8015146:	d1d2      	bne.n	80150ee <_dtoa_r+0x37e>
 8015148:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801514a:	2b00      	cmp	r3, #0
 801514c:	f000 808c 	beq.w	8015268 <_dtoa_r+0x4f8>
 8015150:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8015154:	4b99      	ldr	r3, [pc, #612]	; (80153bc <_dtoa_r+0x64c>)
 8015156:	2200      	movs	r2, #0
 8015158:	4630      	mov	r0, r6
 801515a:	4639      	mov	r1, r7
 801515c:	f7eb fcde 	bl	8000b1c <__aeabi_dcmplt>
 8015160:	2800      	cmp	r0, #0
 8015162:	f000 8081 	beq.w	8015268 <_dtoa_r+0x4f8>
 8015166:	9b01      	ldr	r3, [sp, #4]
 8015168:	2b00      	cmp	r3, #0
 801516a:	d07d      	beq.n	8015268 <_dtoa_r+0x4f8>
 801516c:	f1b9 0f00 	cmp.w	r9, #0
 8015170:	dd3c      	ble.n	80151ec <_dtoa_r+0x47c>
 8015172:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015176:	9307      	str	r3, [sp, #28]
 8015178:	2200      	movs	r2, #0
 801517a:	4b91      	ldr	r3, [pc, #580]	; (80153c0 <_dtoa_r+0x650>)
 801517c:	4630      	mov	r0, r6
 801517e:	4639      	mov	r1, r7
 8015180:	f7eb fa5a 	bl	8000638 <__aeabi_dmul>
 8015184:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015188:	3501      	adds	r5, #1
 801518a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801518e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8015192:	4628      	mov	r0, r5
 8015194:	f7eb f9e6 	bl	8000564 <__aeabi_i2d>
 8015198:	4632      	mov	r2, r6
 801519a:	463b      	mov	r3, r7
 801519c:	f7eb fa4c 	bl	8000638 <__aeabi_dmul>
 80151a0:	4b88      	ldr	r3, [pc, #544]	; (80153c4 <_dtoa_r+0x654>)
 80151a2:	2200      	movs	r2, #0
 80151a4:	f7eb f892 	bl	80002cc <__adddf3>
 80151a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80151ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80151b0:	9303      	str	r3, [sp, #12]
 80151b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d15c      	bne.n	8015272 <_dtoa_r+0x502>
 80151b8:	4b83      	ldr	r3, [pc, #524]	; (80153c8 <_dtoa_r+0x658>)
 80151ba:	2200      	movs	r2, #0
 80151bc:	4630      	mov	r0, r6
 80151be:	4639      	mov	r1, r7
 80151c0:	f7eb f882 	bl	80002c8 <__aeabi_dsub>
 80151c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80151c8:	4606      	mov	r6, r0
 80151ca:	460f      	mov	r7, r1
 80151cc:	f7eb fcc4 	bl	8000b58 <__aeabi_dcmpgt>
 80151d0:	2800      	cmp	r0, #0
 80151d2:	f040 8296 	bne.w	8015702 <_dtoa_r+0x992>
 80151d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80151da:	4630      	mov	r0, r6
 80151dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80151e0:	4639      	mov	r1, r7
 80151e2:	f7eb fc9b 	bl	8000b1c <__aeabi_dcmplt>
 80151e6:	2800      	cmp	r0, #0
 80151e8:	f040 8288 	bne.w	80156fc <_dtoa_r+0x98c>
 80151ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80151f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80151f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	f2c0 8158 	blt.w	80154ac <_dtoa_r+0x73c>
 80151fc:	f1ba 0f0e 	cmp.w	sl, #14
 8015200:	f300 8154 	bgt.w	80154ac <_dtoa_r+0x73c>
 8015204:	4b6b      	ldr	r3, [pc, #428]	; (80153b4 <_dtoa_r+0x644>)
 8015206:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801520a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801520e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015210:	2b00      	cmp	r3, #0
 8015212:	f280 80e3 	bge.w	80153dc <_dtoa_r+0x66c>
 8015216:	9b01      	ldr	r3, [sp, #4]
 8015218:	2b00      	cmp	r3, #0
 801521a:	f300 80df 	bgt.w	80153dc <_dtoa_r+0x66c>
 801521e:	f040 826d 	bne.w	80156fc <_dtoa_r+0x98c>
 8015222:	4b69      	ldr	r3, [pc, #420]	; (80153c8 <_dtoa_r+0x658>)
 8015224:	2200      	movs	r2, #0
 8015226:	4640      	mov	r0, r8
 8015228:	4649      	mov	r1, r9
 801522a:	f7eb fa05 	bl	8000638 <__aeabi_dmul>
 801522e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015232:	f7eb fc87 	bl	8000b44 <__aeabi_dcmpge>
 8015236:	9e01      	ldr	r6, [sp, #4]
 8015238:	4637      	mov	r7, r6
 801523a:	2800      	cmp	r0, #0
 801523c:	f040 8243 	bne.w	80156c6 <_dtoa_r+0x956>
 8015240:	9d00      	ldr	r5, [sp, #0]
 8015242:	2331      	movs	r3, #49	; 0x31
 8015244:	f805 3b01 	strb.w	r3, [r5], #1
 8015248:	f10a 0a01 	add.w	sl, sl, #1
 801524c:	e23f      	b.n	80156ce <_dtoa_r+0x95e>
 801524e:	07f2      	lsls	r2, r6, #31
 8015250:	d505      	bpl.n	801525e <_dtoa_r+0x4ee>
 8015252:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015256:	f7eb f9ef 	bl	8000638 <__aeabi_dmul>
 801525a:	3501      	adds	r5, #1
 801525c:	2301      	movs	r3, #1
 801525e:	1076      	asrs	r6, r6, #1
 8015260:	3708      	adds	r7, #8
 8015262:	e76c      	b.n	801513e <_dtoa_r+0x3ce>
 8015264:	2502      	movs	r5, #2
 8015266:	e76f      	b.n	8015148 <_dtoa_r+0x3d8>
 8015268:	9b01      	ldr	r3, [sp, #4]
 801526a:	f8cd a01c 	str.w	sl, [sp, #28]
 801526e:	930c      	str	r3, [sp, #48]	; 0x30
 8015270:	e78d      	b.n	801518e <_dtoa_r+0x41e>
 8015272:	9900      	ldr	r1, [sp, #0]
 8015274:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015276:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015278:	4b4e      	ldr	r3, [pc, #312]	; (80153b4 <_dtoa_r+0x644>)
 801527a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801527e:	4401      	add	r1, r0
 8015280:	9102      	str	r1, [sp, #8]
 8015282:	9908      	ldr	r1, [sp, #32]
 8015284:	eeb0 8a47 	vmov.f32	s16, s14
 8015288:	eef0 8a67 	vmov.f32	s17, s15
 801528c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015290:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015294:	2900      	cmp	r1, #0
 8015296:	d045      	beq.n	8015324 <_dtoa_r+0x5b4>
 8015298:	494c      	ldr	r1, [pc, #304]	; (80153cc <_dtoa_r+0x65c>)
 801529a:	2000      	movs	r0, #0
 801529c:	f7eb faf6 	bl	800088c <__aeabi_ddiv>
 80152a0:	ec53 2b18 	vmov	r2, r3, d8
 80152a4:	f7eb f810 	bl	80002c8 <__aeabi_dsub>
 80152a8:	9d00      	ldr	r5, [sp, #0]
 80152aa:	ec41 0b18 	vmov	d8, r0, r1
 80152ae:	4639      	mov	r1, r7
 80152b0:	4630      	mov	r0, r6
 80152b2:	f7eb fc71 	bl	8000b98 <__aeabi_d2iz>
 80152b6:	900c      	str	r0, [sp, #48]	; 0x30
 80152b8:	f7eb f954 	bl	8000564 <__aeabi_i2d>
 80152bc:	4602      	mov	r2, r0
 80152be:	460b      	mov	r3, r1
 80152c0:	4630      	mov	r0, r6
 80152c2:	4639      	mov	r1, r7
 80152c4:	f7eb f800 	bl	80002c8 <__aeabi_dsub>
 80152c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80152ca:	3330      	adds	r3, #48	; 0x30
 80152cc:	f805 3b01 	strb.w	r3, [r5], #1
 80152d0:	ec53 2b18 	vmov	r2, r3, d8
 80152d4:	4606      	mov	r6, r0
 80152d6:	460f      	mov	r7, r1
 80152d8:	f7eb fc20 	bl	8000b1c <__aeabi_dcmplt>
 80152dc:	2800      	cmp	r0, #0
 80152de:	d165      	bne.n	80153ac <_dtoa_r+0x63c>
 80152e0:	4632      	mov	r2, r6
 80152e2:	463b      	mov	r3, r7
 80152e4:	4935      	ldr	r1, [pc, #212]	; (80153bc <_dtoa_r+0x64c>)
 80152e6:	2000      	movs	r0, #0
 80152e8:	f7ea ffee 	bl	80002c8 <__aeabi_dsub>
 80152ec:	ec53 2b18 	vmov	r2, r3, d8
 80152f0:	f7eb fc14 	bl	8000b1c <__aeabi_dcmplt>
 80152f4:	2800      	cmp	r0, #0
 80152f6:	f040 80b9 	bne.w	801546c <_dtoa_r+0x6fc>
 80152fa:	9b02      	ldr	r3, [sp, #8]
 80152fc:	429d      	cmp	r5, r3
 80152fe:	f43f af75 	beq.w	80151ec <_dtoa_r+0x47c>
 8015302:	4b2f      	ldr	r3, [pc, #188]	; (80153c0 <_dtoa_r+0x650>)
 8015304:	ec51 0b18 	vmov	r0, r1, d8
 8015308:	2200      	movs	r2, #0
 801530a:	f7eb f995 	bl	8000638 <__aeabi_dmul>
 801530e:	4b2c      	ldr	r3, [pc, #176]	; (80153c0 <_dtoa_r+0x650>)
 8015310:	ec41 0b18 	vmov	d8, r0, r1
 8015314:	2200      	movs	r2, #0
 8015316:	4630      	mov	r0, r6
 8015318:	4639      	mov	r1, r7
 801531a:	f7eb f98d 	bl	8000638 <__aeabi_dmul>
 801531e:	4606      	mov	r6, r0
 8015320:	460f      	mov	r7, r1
 8015322:	e7c4      	b.n	80152ae <_dtoa_r+0x53e>
 8015324:	ec51 0b17 	vmov	r0, r1, d7
 8015328:	f7eb f986 	bl	8000638 <__aeabi_dmul>
 801532c:	9b02      	ldr	r3, [sp, #8]
 801532e:	9d00      	ldr	r5, [sp, #0]
 8015330:	930c      	str	r3, [sp, #48]	; 0x30
 8015332:	ec41 0b18 	vmov	d8, r0, r1
 8015336:	4639      	mov	r1, r7
 8015338:	4630      	mov	r0, r6
 801533a:	f7eb fc2d 	bl	8000b98 <__aeabi_d2iz>
 801533e:	9011      	str	r0, [sp, #68]	; 0x44
 8015340:	f7eb f910 	bl	8000564 <__aeabi_i2d>
 8015344:	4602      	mov	r2, r0
 8015346:	460b      	mov	r3, r1
 8015348:	4630      	mov	r0, r6
 801534a:	4639      	mov	r1, r7
 801534c:	f7ea ffbc 	bl	80002c8 <__aeabi_dsub>
 8015350:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015352:	3330      	adds	r3, #48	; 0x30
 8015354:	f805 3b01 	strb.w	r3, [r5], #1
 8015358:	9b02      	ldr	r3, [sp, #8]
 801535a:	429d      	cmp	r5, r3
 801535c:	4606      	mov	r6, r0
 801535e:	460f      	mov	r7, r1
 8015360:	f04f 0200 	mov.w	r2, #0
 8015364:	d134      	bne.n	80153d0 <_dtoa_r+0x660>
 8015366:	4b19      	ldr	r3, [pc, #100]	; (80153cc <_dtoa_r+0x65c>)
 8015368:	ec51 0b18 	vmov	r0, r1, d8
 801536c:	f7ea ffae 	bl	80002cc <__adddf3>
 8015370:	4602      	mov	r2, r0
 8015372:	460b      	mov	r3, r1
 8015374:	4630      	mov	r0, r6
 8015376:	4639      	mov	r1, r7
 8015378:	f7eb fbee 	bl	8000b58 <__aeabi_dcmpgt>
 801537c:	2800      	cmp	r0, #0
 801537e:	d175      	bne.n	801546c <_dtoa_r+0x6fc>
 8015380:	ec53 2b18 	vmov	r2, r3, d8
 8015384:	4911      	ldr	r1, [pc, #68]	; (80153cc <_dtoa_r+0x65c>)
 8015386:	2000      	movs	r0, #0
 8015388:	f7ea ff9e 	bl	80002c8 <__aeabi_dsub>
 801538c:	4602      	mov	r2, r0
 801538e:	460b      	mov	r3, r1
 8015390:	4630      	mov	r0, r6
 8015392:	4639      	mov	r1, r7
 8015394:	f7eb fbc2 	bl	8000b1c <__aeabi_dcmplt>
 8015398:	2800      	cmp	r0, #0
 801539a:	f43f af27 	beq.w	80151ec <_dtoa_r+0x47c>
 801539e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80153a0:	1e6b      	subs	r3, r5, #1
 80153a2:	930c      	str	r3, [sp, #48]	; 0x30
 80153a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80153a8:	2b30      	cmp	r3, #48	; 0x30
 80153aa:	d0f8      	beq.n	801539e <_dtoa_r+0x62e>
 80153ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80153b0:	e04a      	b.n	8015448 <_dtoa_r+0x6d8>
 80153b2:	bf00      	nop
 80153b4:	0801a0a0 	.word	0x0801a0a0
 80153b8:	0801a078 	.word	0x0801a078
 80153bc:	3ff00000 	.word	0x3ff00000
 80153c0:	40240000 	.word	0x40240000
 80153c4:	401c0000 	.word	0x401c0000
 80153c8:	40140000 	.word	0x40140000
 80153cc:	3fe00000 	.word	0x3fe00000
 80153d0:	4baf      	ldr	r3, [pc, #700]	; (8015690 <_dtoa_r+0x920>)
 80153d2:	f7eb f931 	bl	8000638 <__aeabi_dmul>
 80153d6:	4606      	mov	r6, r0
 80153d8:	460f      	mov	r7, r1
 80153da:	e7ac      	b.n	8015336 <_dtoa_r+0x5c6>
 80153dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80153e0:	9d00      	ldr	r5, [sp, #0]
 80153e2:	4642      	mov	r2, r8
 80153e4:	464b      	mov	r3, r9
 80153e6:	4630      	mov	r0, r6
 80153e8:	4639      	mov	r1, r7
 80153ea:	f7eb fa4f 	bl	800088c <__aeabi_ddiv>
 80153ee:	f7eb fbd3 	bl	8000b98 <__aeabi_d2iz>
 80153f2:	9002      	str	r0, [sp, #8]
 80153f4:	f7eb f8b6 	bl	8000564 <__aeabi_i2d>
 80153f8:	4642      	mov	r2, r8
 80153fa:	464b      	mov	r3, r9
 80153fc:	f7eb f91c 	bl	8000638 <__aeabi_dmul>
 8015400:	4602      	mov	r2, r0
 8015402:	460b      	mov	r3, r1
 8015404:	4630      	mov	r0, r6
 8015406:	4639      	mov	r1, r7
 8015408:	f7ea ff5e 	bl	80002c8 <__aeabi_dsub>
 801540c:	9e02      	ldr	r6, [sp, #8]
 801540e:	9f01      	ldr	r7, [sp, #4]
 8015410:	3630      	adds	r6, #48	; 0x30
 8015412:	f805 6b01 	strb.w	r6, [r5], #1
 8015416:	9e00      	ldr	r6, [sp, #0]
 8015418:	1bae      	subs	r6, r5, r6
 801541a:	42b7      	cmp	r7, r6
 801541c:	4602      	mov	r2, r0
 801541e:	460b      	mov	r3, r1
 8015420:	d137      	bne.n	8015492 <_dtoa_r+0x722>
 8015422:	f7ea ff53 	bl	80002cc <__adddf3>
 8015426:	4642      	mov	r2, r8
 8015428:	464b      	mov	r3, r9
 801542a:	4606      	mov	r6, r0
 801542c:	460f      	mov	r7, r1
 801542e:	f7eb fb93 	bl	8000b58 <__aeabi_dcmpgt>
 8015432:	b9c8      	cbnz	r0, 8015468 <_dtoa_r+0x6f8>
 8015434:	4642      	mov	r2, r8
 8015436:	464b      	mov	r3, r9
 8015438:	4630      	mov	r0, r6
 801543a:	4639      	mov	r1, r7
 801543c:	f7eb fb64 	bl	8000b08 <__aeabi_dcmpeq>
 8015440:	b110      	cbz	r0, 8015448 <_dtoa_r+0x6d8>
 8015442:	9b02      	ldr	r3, [sp, #8]
 8015444:	07d9      	lsls	r1, r3, #31
 8015446:	d40f      	bmi.n	8015468 <_dtoa_r+0x6f8>
 8015448:	4620      	mov	r0, r4
 801544a:	4659      	mov	r1, fp
 801544c:	f001 f88e 	bl	801656c <_Bfree>
 8015450:	2300      	movs	r3, #0
 8015452:	702b      	strb	r3, [r5, #0]
 8015454:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015456:	f10a 0001 	add.w	r0, sl, #1
 801545a:	6018      	str	r0, [r3, #0]
 801545c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801545e:	2b00      	cmp	r3, #0
 8015460:	f43f acd8 	beq.w	8014e14 <_dtoa_r+0xa4>
 8015464:	601d      	str	r5, [r3, #0]
 8015466:	e4d5      	b.n	8014e14 <_dtoa_r+0xa4>
 8015468:	f8cd a01c 	str.w	sl, [sp, #28]
 801546c:	462b      	mov	r3, r5
 801546e:	461d      	mov	r5, r3
 8015470:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015474:	2a39      	cmp	r2, #57	; 0x39
 8015476:	d108      	bne.n	801548a <_dtoa_r+0x71a>
 8015478:	9a00      	ldr	r2, [sp, #0]
 801547a:	429a      	cmp	r2, r3
 801547c:	d1f7      	bne.n	801546e <_dtoa_r+0x6fe>
 801547e:	9a07      	ldr	r2, [sp, #28]
 8015480:	9900      	ldr	r1, [sp, #0]
 8015482:	3201      	adds	r2, #1
 8015484:	9207      	str	r2, [sp, #28]
 8015486:	2230      	movs	r2, #48	; 0x30
 8015488:	700a      	strb	r2, [r1, #0]
 801548a:	781a      	ldrb	r2, [r3, #0]
 801548c:	3201      	adds	r2, #1
 801548e:	701a      	strb	r2, [r3, #0]
 8015490:	e78c      	b.n	80153ac <_dtoa_r+0x63c>
 8015492:	4b7f      	ldr	r3, [pc, #508]	; (8015690 <_dtoa_r+0x920>)
 8015494:	2200      	movs	r2, #0
 8015496:	f7eb f8cf 	bl	8000638 <__aeabi_dmul>
 801549a:	2200      	movs	r2, #0
 801549c:	2300      	movs	r3, #0
 801549e:	4606      	mov	r6, r0
 80154a0:	460f      	mov	r7, r1
 80154a2:	f7eb fb31 	bl	8000b08 <__aeabi_dcmpeq>
 80154a6:	2800      	cmp	r0, #0
 80154a8:	d09b      	beq.n	80153e2 <_dtoa_r+0x672>
 80154aa:	e7cd      	b.n	8015448 <_dtoa_r+0x6d8>
 80154ac:	9a08      	ldr	r2, [sp, #32]
 80154ae:	2a00      	cmp	r2, #0
 80154b0:	f000 80c4 	beq.w	801563c <_dtoa_r+0x8cc>
 80154b4:	9a05      	ldr	r2, [sp, #20]
 80154b6:	2a01      	cmp	r2, #1
 80154b8:	f300 80a8 	bgt.w	801560c <_dtoa_r+0x89c>
 80154bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80154be:	2a00      	cmp	r2, #0
 80154c0:	f000 80a0 	beq.w	8015604 <_dtoa_r+0x894>
 80154c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80154c8:	9e06      	ldr	r6, [sp, #24]
 80154ca:	4645      	mov	r5, r8
 80154cc:	9a04      	ldr	r2, [sp, #16]
 80154ce:	2101      	movs	r1, #1
 80154d0:	441a      	add	r2, r3
 80154d2:	4620      	mov	r0, r4
 80154d4:	4498      	add	r8, r3
 80154d6:	9204      	str	r2, [sp, #16]
 80154d8:	f001 f94e 	bl	8016778 <__i2b>
 80154dc:	4607      	mov	r7, r0
 80154de:	2d00      	cmp	r5, #0
 80154e0:	dd0b      	ble.n	80154fa <_dtoa_r+0x78a>
 80154e2:	9b04      	ldr	r3, [sp, #16]
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	dd08      	ble.n	80154fa <_dtoa_r+0x78a>
 80154e8:	42ab      	cmp	r3, r5
 80154ea:	9a04      	ldr	r2, [sp, #16]
 80154ec:	bfa8      	it	ge
 80154ee:	462b      	movge	r3, r5
 80154f0:	eba8 0803 	sub.w	r8, r8, r3
 80154f4:	1aed      	subs	r5, r5, r3
 80154f6:	1ad3      	subs	r3, r2, r3
 80154f8:	9304      	str	r3, [sp, #16]
 80154fa:	9b06      	ldr	r3, [sp, #24]
 80154fc:	b1fb      	cbz	r3, 801553e <_dtoa_r+0x7ce>
 80154fe:	9b08      	ldr	r3, [sp, #32]
 8015500:	2b00      	cmp	r3, #0
 8015502:	f000 809f 	beq.w	8015644 <_dtoa_r+0x8d4>
 8015506:	2e00      	cmp	r6, #0
 8015508:	dd11      	ble.n	801552e <_dtoa_r+0x7be>
 801550a:	4639      	mov	r1, r7
 801550c:	4632      	mov	r2, r6
 801550e:	4620      	mov	r0, r4
 8015510:	f001 f9ee 	bl	80168f0 <__pow5mult>
 8015514:	465a      	mov	r2, fp
 8015516:	4601      	mov	r1, r0
 8015518:	4607      	mov	r7, r0
 801551a:	4620      	mov	r0, r4
 801551c:	f001 f942 	bl	80167a4 <__multiply>
 8015520:	4659      	mov	r1, fp
 8015522:	9007      	str	r0, [sp, #28]
 8015524:	4620      	mov	r0, r4
 8015526:	f001 f821 	bl	801656c <_Bfree>
 801552a:	9b07      	ldr	r3, [sp, #28]
 801552c:	469b      	mov	fp, r3
 801552e:	9b06      	ldr	r3, [sp, #24]
 8015530:	1b9a      	subs	r2, r3, r6
 8015532:	d004      	beq.n	801553e <_dtoa_r+0x7ce>
 8015534:	4659      	mov	r1, fp
 8015536:	4620      	mov	r0, r4
 8015538:	f001 f9da 	bl	80168f0 <__pow5mult>
 801553c:	4683      	mov	fp, r0
 801553e:	2101      	movs	r1, #1
 8015540:	4620      	mov	r0, r4
 8015542:	f001 f919 	bl	8016778 <__i2b>
 8015546:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015548:	2b00      	cmp	r3, #0
 801554a:	4606      	mov	r6, r0
 801554c:	dd7c      	ble.n	8015648 <_dtoa_r+0x8d8>
 801554e:	461a      	mov	r2, r3
 8015550:	4601      	mov	r1, r0
 8015552:	4620      	mov	r0, r4
 8015554:	f001 f9cc 	bl	80168f0 <__pow5mult>
 8015558:	9b05      	ldr	r3, [sp, #20]
 801555a:	2b01      	cmp	r3, #1
 801555c:	4606      	mov	r6, r0
 801555e:	dd76      	ble.n	801564e <_dtoa_r+0x8de>
 8015560:	2300      	movs	r3, #0
 8015562:	9306      	str	r3, [sp, #24]
 8015564:	6933      	ldr	r3, [r6, #16]
 8015566:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801556a:	6918      	ldr	r0, [r3, #16]
 801556c:	f001 f8b4 	bl	80166d8 <__hi0bits>
 8015570:	f1c0 0020 	rsb	r0, r0, #32
 8015574:	9b04      	ldr	r3, [sp, #16]
 8015576:	4418      	add	r0, r3
 8015578:	f010 001f 	ands.w	r0, r0, #31
 801557c:	f000 8086 	beq.w	801568c <_dtoa_r+0x91c>
 8015580:	f1c0 0320 	rsb	r3, r0, #32
 8015584:	2b04      	cmp	r3, #4
 8015586:	dd7f      	ble.n	8015688 <_dtoa_r+0x918>
 8015588:	f1c0 001c 	rsb	r0, r0, #28
 801558c:	9b04      	ldr	r3, [sp, #16]
 801558e:	4403      	add	r3, r0
 8015590:	4480      	add	r8, r0
 8015592:	4405      	add	r5, r0
 8015594:	9304      	str	r3, [sp, #16]
 8015596:	f1b8 0f00 	cmp.w	r8, #0
 801559a:	dd05      	ble.n	80155a8 <_dtoa_r+0x838>
 801559c:	4659      	mov	r1, fp
 801559e:	4642      	mov	r2, r8
 80155a0:	4620      	mov	r0, r4
 80155a2:	f001 f9ff 	bl	80169a4 <__lshift>
 80155a6:	4683      	mov	fp, r0
 80155a8:	9b04      	ldr	r3, [sp, #16]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	dd05      	ble.n	80155ba <_dtoa_r+0x84a>
 80155ae:	4631      	mov	r1, r6
 80155b0:	461a      	mov	r2, r3
 80155b2:	4620      	mov	r0, r4
 80155b4:	f001 f9f6 	bl	80169a4 <__lshift>
 80155b8:	4606      	mov	r6, r0
 80155ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d069      	beq.n	8015694 <_dtoa_r+0x924>
 80155c0:	4631      	mov	r1, r6
 80155c2:	4658      	mov	r0, fp
 80155c4:	f001 fa5a 	bl	8016a7c <__mcmp>
 80155c8:	2800      	cmp	r0, #0
 80155ca:	da63      	bge.n	8015694 <_dtoa_r+0x924>
 80155cc:	2300      	movs	r3, #0
 80155ce:	4659      	mov	r1, fp
 80155d0:	220a      	movs	r2, #10
 80155d2:	4620      	mov	r0, r4
 80155d4:	f000 ffec 	bl	80165b0 <__multadd>
 80155d8:	9b08      	ldr	r3, [sp, #32]
 80155da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80155de:	4683      	mov	fp, r0
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	f000 818f 	beq.w	8015904 <_dtoa_r+0xb94>
 80155e6:	4639      	mov	r1, r7
 80155e8:	2300      	movs	r3, #0
 80155ea:	220a      	movs	r2, #10
 80155ec:	4620      	mov	r0, r4
 80155ee:	f000 ffdf 	bl	80165b0 <__multadd>
 80155f2:	f1b9 0f00 	cmp.w	r9, #0
 80155f6:	4607      	mov	r7, r0
 80155f8:	f300 808e 	bgt.w	8015718 <_dtoa_r+0x9a8>
 80155fc:	9b05      	ldr	r3, [sp, #20]
 80155fe:	2b02      	cmp	r3, #2
 8015600:	dc50      	bgt.n	80156a4 <_dtoa_r+0x934>
 8015602:	e089      	b.n	8015718 <_dtoa_r+0x9a8>
 8015604:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015606:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801560a:	e75d      	b.n	80154c8 <_dtoa_r+0x758>
 801560c:	9b01      	ldr	r3, [sp, #4]
 801560e:	1e5e      	subs	r6, r3, #1
 8015610:	9b06      	ldr	r3, [sp, #24]
 8015612:	42b3      	cmp	r3, r6
 8015614:	bfbf      	itttt	lt
 8015616:	9b06      	ldrlt	r3, [sp, #24]
 8015618:	9606      	strlt	r6, [sp, #24]
 801561a:	1af2      	sublt	r2, r6, r3
 801561c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801561e:	bfb6      	itet	lt
 8015620:	189b      	addlt	r3, r3, r2
 8015622:	1b9e      	subge	r6, r3, r6
 8015624:	930d      	strlt	r3, [sp, #52]	; 0x34
 8015626:	9b01      	ldr	r3, [sp, #4]
 8015628:	bfb8      	it	lt
 801562a:	2600      	movlt	r6, #0
 801562c:	2b00      	cmp	r3, #0
 801562e:	bfb5      	itete	lt
 8015630:	eba8 0503 	sublt.w	r5, r8, r3
 8015634:	9b01      	ldrge	r3, [sp, #4]
 8015636:	2300      	movlt	r3, #0
 8015638:	4645      	movge	r5, r8
 801563a:	e747      	b.n	80154cc <_dtoa_r+0x75c>
 801563c:	9e06      	ldr	r6, [sp, #24]
 801563e:	9f08      	ldr	r7, [sp, #32]
 8015640:	4645      	mov	r5, r8
 8015642:	e74c      	b.n	80154de <_dtoa_r+0x76e>
 8015644:	9a06      	ldr	r2, [sp, #24]
 8015646:	e775      	b.n	8015534 <_dtoa_r+0x7c4>
 8015648:	9b05      	ldr	r3, [sp, #20]
 801564a:	2b01      	cmp	r3, #1
 801564c:	dc18      	bgt.n	8015680 <_dtoa_r+0x910>
 801564e:	9b02      	ldr	r3, [sp, #8]
 8015650:	b9b3      	cbnz	r3, 8015680 <_dtoa_r+0x910>
 8015652:	9b03      	ldr	r3, [sp, #12]
 8015654:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015658:	b9a3      	cbnz	r3, 8015684 <_dtoa_r+0x914>
 801565a:	9b03      	ldr	r3, [sp, #12]
 801565c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015660:	0d1b      	lsrs	r3, r3, #20
 8015662:	051b      	lsls	r3, r3, #20
 8015664:	b12b      	cbz	r3, 8015672 <_dtoa_r+0x902>
 8015666:	9b04      	ldr	r3, [sp, #16]
 8015668:	3301      	adds	r3, #1
 801566a:	9304      	str	r3, [sp, #16]
 801566c:	f108 0801 	add.w	r8, r8, #1
 8015670:	2301      	movs	r3, #1
 8015672:	9306      	str	r3, [sp, #24]
 8015674:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015676:	2b00      	cmp	r3, #0
 8015678:	f47f af74 	bne.w	8015564 <_dtoa_r+0x7f4>
 801567c:	2001      	movs	r0, #1
 801567e:	e779      	b.n	8015574 <_dtoa_r+0x804>
 8015680:	2300      	movs	r3, #0
 8015682:	e7f6      	b.n	8015672 <_dtoa_r+0x902>
 8015684:	9b02      	ldr	r3, [sp, #8]
 8015686:	e7f4      	b.n	8015672 <_dtoa_r+0x902>
 8015688:	d085      	beq.n	8015596 <_dtoa_r+0x826>
 801568a:	4618      	mov	r0, r3
 801568c:	301c      	adds	r0, #28
 801568e:	e77d      	b.n	801558c <_dtoa_r+0x81c>
 8015690:	40240000 	.word	0x40240000
 8015694:	9b01      	ldr	r3, [sp, #4]
 8015696:	2b00      	cmp	r3, #0
 8015698:	dc38      	bgt.n	801570c <_dtoa_r+0x99c>
 801569a:	9b05      	ldr	r3, [sp, #20]
 801569c:	2b02      	cmp	r3, #2
 801569e:	dd35      	ble.n	801570c <_dtoa_r+0x99c>
 80156a0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80156a4:	f1b9 0f00 	cmp.w	r9, #0
 80156a8:	d10d      	bne.n	80156c6 <_dtoa_r+0x956>
 80156aa:	4631      	mov	r1, r6
 80156ac:	464b      	mov	r3, r9
 80156ae:	2205      	movs	r2, #5
 80156b0:	4620      	mov	r0, r4
 80156b2:	f000 ff7d 	bl	80165b0 <__multadd>
 80156b6:	4601      	mov	r1, r0
 80156b8:	4606      	mov	r6, r0
 80156ba:	4658      	mov	r0, fp
 80156bc:	f001 f9de 	bl	8016a7c <__mcmp>
 80156c0:	2800      	cmp	r0, #0
 80156c2:	f73f adbd 	bgt.w	8015240 <_dtoa_r+0x4d0>
 80156c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156c8:	9d00      	ldr	r5, [sp, #0]
 80156ca:	ea6f 0a03 	mvn.w	sl, r3
 80156ce:	f04f 0800 	mov.w	r8, #0
 80156d2:	4631      	mov	r1, r6
 80156d4:	4620      	mov	r0, r4
 80156d6:	f000 ff49 	bl	801656c <_Bfree>
 80156da:	2f00      	cmp	r7, #0
 80156dc:	f43f aeb4 	beq.w	8015448 <_dtoa_r+0x6d8>
 80156e0:	f1b8 0f00 	cmp.w	r8, #0
 80156e4:	d005      	beq.n	80156f2 <_dtoa_r+0x982>
 80156e6:	45b8      	cmp	r8, r7
 80156e8:	d003      	beq.n	80156f2 <_dtoa_r+0x982>
 80156ea:	4641      	mov	r1, r8
 80156ec:	4620      	mov	r0, r4
 80156ee:	f000 ff3d 	bl	801656c <_Bfree>
 80156f2:	4639      	mov	r1, r7
 80156f4:	4620      	mov	r0, r4
 80156f6:	f000 ff39 	bl	801656c <_Bfree>
 80156fa:	e6a5      	b.n	8015448 <_dtoa_r+0x6d8>
 80156fc:	2600      	movs	r6, #0
 80156fe:	4637      	mov	r7, r6
 8015700:	e7e1      	b.n	80156c6 <_dtoa_r+0x956>
 8015702:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8015704:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8015708:	4637      	mov	r7, r6
 801570a:	e599      	b.n	8015240 <_dtoa_r+0x4d0>
 801570c:	9b08      	ldr	r3, [sp, #32]
 801570e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8015712:	2b00      	cmp	r3, #0
 8015714:	f000 80fd 	beq.w	8015912 <_dtoa_r+0xba2>
 8015718:	2d00      	cmp	r5, #0
 801571a:	dd05      	ble.n	8015728 <_dtoa_r+0x9b8>
 801571c:	4639      	mov	r1, r7
 801571e:	462a      	mov	r2, r5
 8015720:	4620      	mov	r0, r4
 8015722:	f001 f93f 	bl	80169a4 <__lshift>
 8015726:	4607      	mov	r7, r0
 8015728:	9b06      	ldr	r3, [sp, #24]
 801572a:	2b00      	cmp	r3, #0
 801572c:	d05c      	beq.n	80157e8 <_dtoa_r+0xa78>
 801572e:	6879      	ldr	r1, [r7, #4]
 8015730:	4620      	mov	r0, r4
 8015732:	f000 fedb 	bl	80164ec <_Balloc>
 8015736:	4605      	mov	r5, r0
 8015738:	b928      	cbnz	r0, 8015746 <_dtoa_r+0x9d6>
 801573a:	4b80      	ldr	r3, [pc, #512]	; (801593c <_dtoa_r+0xbcc>)
 801573c:	4602      	mov	r2, r0
 801573e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8015742:	f7ff bb2e 	b.w	8014da2 <_dtoa_r+0x32>
 8015746:	693a      	ldr	r2, [r7, #16]
 8015748:	3202      	adds	r2, #2
 801574a:	0092      	lsls	r2, r2, #2
 801574c:	f107 010c 	add.w	r1, r7, #12
 8015750:	300c      	adds	r0, #12
 8015752:	f7fc fbb7 	bl	8011ec4 <memcpy>
 8015756:	2201      	movs	r2, #1
 8015758:	4629      	mov	r1, r5
 801575a:	4620      	mov	r0, r4
 801575c:	f001 f922 	bl	80169a4 <__lshift>
 8015760:	9b00      	ldr	r3, [sp, #0]
 8015762:	3301      	adds	r3, #1
 8015764:	9301      	str	r3, [sp, #4]
 8015766:	9b00      	ldr	r3, [sp, #0]
 8015768:	444b      	add	r3, r9
 801576a:	9307      	str	r3, [sp, #28]
 801576c:	9b02      	ldr	r3, [sp, #8]
 801576e:	f003 0301 	and.w	r3, r3, #1
 8015772:	46b8      	mov	r8, r7
 8015774:	9306      	str	r3, [sp, #24]
 8015776:	4607      	mov	r7, r0
 8015778:	9b01      	ldr	r3, [sp, #4]
 801577a:	4631      	mov	r1, r6
 801577c:	3b01      	subs	r3, #1
 801577e:	4658      	mov	r0, fp
 8015780:	9302      	str	r3, [sp, #8]
 8015782:	f7ff fa67 	bl	8014c54 <quorem>
 8015786:	4603      	mov	r3, r0
 8015788:	3330      	adds	r3, #48	; 0x30
 801578a:	9004      	str	r0, [sp, #16]
 801578c:	4641      	mov	r1, r8
 801578e:	4658      	mov	r0, fp
 8015790:	9308      	str	r3, [sp, #32]
 8015792:	f001 f973 	bl	8016a7c <__mcmp>
 8015796:	463a      	mov	r2, r7
 8015798:	4681      	mov	r9, r0
 801579a:	4631      	mov	r1, r6
 801579c:	4620      	mov	r0, r4
 801579e:	f001 f989 	bl	8016ab4 <__mdiff>
 80157a2:	68c2      	ldr	r2, [r0, #12]
 80157a4:	9b08      	ldr	r3, [sp, #32]
 80157a6:	4605      	mov	r5, r0
 80157a8:	bb02      	cbnz	r2, 80157ec <_dtoa_r+0xa7c>
 80157aa:	4601      	mov	r1, r0
 80157ac:	4658      	mov	r0, fp
 80157ae:	f001 f965 	bl	8016a7c <__mcmp>
 80157b2:	9b08      	ldr	r3, [sp, #32]
 80157b4:	4602      	mov	r2, r0
 80157b6:	4629      	mov	r1, r5
 80157b8:	4620      	mov	r0, r4
 80157ba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80157be:	f000 fed5 	bl	801656c <_Bfree>
 80157c2:	9b05      	ldr	r3, [sp, #20]
 80157c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80157c6:	9d01      	ldr	r5, [sp, #4]
 80157c8:	ea43 0102 	orr.w	r1, r3, r2
 80157cc:	9b06      	ldr	r3, [sp, #24]
 80157ce:	430b      	orrs	r3, r1
 80157d0:	9b08      	ldr	r3, [sp, #32]
 80157d2:	d10d      	bne.n	80157f0 <_dtoa_r+0xa80>
 80157d4:	2b39      	cmp	r3, #57	; 0x39
 80157d6:	d029      	beq.n	801582c <_dtoa_r+0xabc>
 80157d8:	f1b9 0f00 	cmp.w	r9, #0
 80157dc:	dd01      	ble.n	80157e2 <_dtoa_r+0xa72>
 80157de:	9b04      	ldr	r3, [sp, #16]
 80157e0:	3331      	adds	r3, #49	; 0x31
 80157e2:	9a02      	ldr	r2, [sp, #8]
 80157e4:	7013      	strb	r3, [r2, #0]
 80157e6:	e774      	b.n	80156d2 <_dtoa_r+0x962>
 80157e8:	4638      	mov	r0, r7
 80157ea:	e7b9      	b.n	8015760 <_dtoa_r+0x9f0>
 80157ec:	2201      	movs	r2, #1
 80157ee:	e7e2      	b.n	80157b6 <_dtoa_r+0xa46>
 80157f0:	f1b9 0f00 	cmp.w	r9, #0
 80157f4:	db06      	blt.n	8015804 <_dtoa_r+0xa94>
 80157f6:	9905      	ldr	r1, [sp, #20]
 80157f8:	ea41 0909 	orr.w	r9, r1, r9
 80157fc:	9906      	ldr	r1, [sp, #24]
 80157fe:	ea59 0101 	orrs.w	r1, r9, r1
 8015802:	d120      	bne.n	8015846 <_dtoa_r+0xad6>
 8015804:	2a00      	cmp	r2, #0
 8015806:	ddec      	ble.n	80157e2 <_dtoa_r+0xa72>
 8015808:	4659      	mov	r1, fp
 801580a:	2201      	movs	r2, #1
 801580c:	4620      	mov	r0, r4
 801580e:	9301      	str	r3, [sp, #4]
 8015810:	f001 f8c8 	bl	80169a4 <__lshift>
 8015814:	4631      	mov	r1, r6
 8015816:	4683      	mov	fp, r0
 8015818:	f001 f930 	bl	8016a7c <__mcmp>
 801581c:	2800      	cmp	r0, #0
 801581e:	9b01      	ldr	r3, [sp, #4]
 8015820:	dc02      	bgt.n	8015828 <_dtoa_r+0xab8>
 8015822:	d1de      	bne.n	80157e2 <_dtoa_r+0xa72>
 8015824:	07da      	lsls	r2, r3, #31
 8015826:	d5dc      	bpl.n	80157e2 <_dtoa_r+0xa72>
 8015828:	2b39      	cmp	r3, #57	; 0x39
 801582a:	d1d8      	bne.n	80157de <_dtoa_r+0xa6e>
 801582c:	9a02      	ldr	r2, [sp, #8]
 801582e:	2339      	movs	r3, #57	; 0x39
 8015830:	7013      	strb	r3, [r2, #0]
 8015832:	462b      	mov	r3, r5
 8015834:	461d      	mov	r5, r3
 8015836:	3b01      	subs	r3, #1
 8015838:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801583c:	2a39      	cmp	r2, #57	; 0x39
 801583e:	d050      	beq.n	80158e2 <_dtoa_r+0xb72>
 8015840:	3201      	adds	r2, #1
 8015842:	701a      	strb	r2, [r3, #0]
 8015844:	e745      	b.n	80156d2 <_dtoa_r+0x962>
 8015846:	2a00      	cmp	r2, #0
 8015848:	dd03      	ble.n	8015852 <_dtoa_r+0xae2>
 801584a:	2b39      	cmp	r3, #57	; 0x39
 801584c:	d0ee      	beq.n	801582c <_dtoa_r+0xabc>
 801584e:	3301      	adds	r3, #1
 8015850:	e7c7      	b.n	80157e2 <_dtoa_r+0xa72>
 8015852:	9a01      	ldr	r2, [sp, #4]
 8015854:	9907      	ldr	r1, [sp, #28]
 8015856:	f802 3c01 	strb.w	r3, [r2, #-1]
 801585a:	428a      	cmp	r2, r1
 801585c:	d02a      	beq.n	80158b4 <_dtoa_r+0xb44>
 801585e:	4659      	mov	r1, fp
 8015860:	2300      	movs	r3, #0
 8015862:	220a      	movs	r2, #10
 8015864:	4620      	mov	r0, r4
 8015866:	f000 fea3 	bl	80165b0 <__multadd>
 801586a:	45b8      	cmp	r8, r7
 801586c:	4683      	mov	fp, r0
 801586e:	f04f 0300 	mov.w	r3, #0
 8015872:	f04f 020a 	mov.w	r2, #10
 8015876:	4641      	mov	r1, r8
 8015878:	4620      	mov	r0, r4
 801587a:	d107      	bne.n	801588c <_dtoa_r+0xb1c>
 801587c:	f000 fe98 	bl	80165b0 <__multadd>
 8015880:	4680      	mov	r8, r0
 8015882:	4607      	mov	r7, r0
 8015884:	9b01      	ldr	r3, [sp, #4]
 8015886:	3301      	adds	r3, #1
 8015888:	9301      	str	r3, [sp, #4]
 801588a:	e775      	b.n	8015778 <_dtoa_r+0xa08>
 801588c:	f000 fe90 	bl	80165b0 <__multadd>
 8015890:	4639      	mov	r1, r7
 8015892:	4680      	mov	r8, r0
 8015894:	2300      	movs	r3, #0
 8015896:	220a      	movs	r2, #10
 8015898:	4620      	mov	r0, r4
 801589a:	f000 fe89 	bl	80165b0 <__multadd>
 801589e:	4607      	mov	r7, r0
 80158a0:	e7f0      	b.n	8015884 <_dtoa_r+0xb14>
 80158a2:	f1b9 0f00 	cmp.w	r9, #0
 80158a6:	9a00      	ldr	r2, [sp, #0]
 80158a8:	bfcc      	ite	gt
 80158aa:	464d      	movgt	r5, r9
 80158ac:	2501      	movle	r5, #1
 80158ae:	4415      	add	r5, r2
 80158b0:	f04f 0800 	mov.w	r8, #0
 80158b4:	4659      	mov	r1, fp
 80158b6:	2201      	movs	r2, #1
 80158b8:	4620      	mov	r0, r4
 80158ba:	9301      	str	r3, [sp, #4]
 80158bc:	f001 f872 	bl	80169a4 <__lshift>
 80158c0:	4631      	mov	r1, r6
 80158c2:	4683      	mov	fp, r0
 80158c4:	f001 f8da 	bl	8016a7c <__mcmp>
 80158c8:	2800      	cmp	r0, #0
 80158ca:	dcb2      	bgt.n	8015832 <_dtoa_r+0xac2>
 80158cc:	d102      	bne.n	80158d4 <_dtoa_r+0xb64>
 80158ce:	9b01      	ldr	r3, [sp, #4]
 80158d0:	07db      	lsls	r3, r3, #31
 80158d2:	d4ae      	bmi.n	8015832 <_dtoa_r+0xac2>
 80158d4:	462b      	mov	r3, r5
 80158d6:	461d      	mov	r5, r3
 80158d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80158dc:	2a30      	cmp	r2, #48	; 0x30
 80158de:	d0fa      	beq.n	80158d6 <_dtoa_r+0xb66>
 80158e0:	e6f7      	b.n	80156d2 <_dtoa_r+0x962>
 80158e2:	9a00      	ldr	r2, [sp, #0]
 80158e4:	429a      	cmp	r2, r3
 80158e6:	d1a5      	bne.n	8015834 <_dtoa_r+0xac4>
 80158e8:	f10a 0a01 	add.w	sl, sl, #1
 80158ec:	2331      	movs	r3, #49	; 0x31
 80158ee:	e779      	b.n	80157e4 <_dtoa_r+0xa74>
 80158f0:	4b13      	ldr	r3, [pc, #76]	; (8015940 <_dtoa_r+0xbd0>)
 80158f2:	f7ff baaf 	b.w	8014e54 <_dtoa_r+0xe4>
 80158f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	f47f aa86 	bne.w	8014e0a <_dtoa_r+0x9a>
 80158fe:	4b11      	ldr	r3, [pc, #68]	; (8015944 <_dtoa_r+0xbd4>)
 8015900:	f7ff baa8 	b.w	8014e54 <_dtoa_r+0xe4>
 8015904:	f1b9 0f00 	cmp.w	r9, #0
 8015908:	dc03      	bgt.n	8015912 <_dtoa_r+0xba2>
 801590a:	9b05      	ldr	r3, [sp, #20]
 801590c:	2b02      	cmp	r3, #2
 801590e:	f73f aec9 	bgt.w	80156a4 <_dtoa_r+0x934>
 8015912:	9d00      	ldr	r5, [sp, #0]
 8015914:	4631      	mov	r1, r6
 8015916:	4658      	mov	r0, fp
 8015918:	f7ff f99c 	bl	8014c54 <quorem>
 801591c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8015920:	f805 3b01 	strb.w	r3, [r5], #1
 8015924:	9a00      	ldr	r2, [sp, #0]
 8015926:	1aaa      	subs	r2, r5, r2
 8015928:	4591      	cmp	r9, r2
 801592a:	ddba      	ble.n	80158a2 <_dtoa_r+0xb32>
 801592c:	4659      	mov	r1, fp
 801592e:	2300      	movs	r3, #0
 8015930:	220a      	movs	r2, #10
 8015932:	4620      	mov	r0, r4
 8015934:	f000 fe3c 	bl	80165b0 <__multadd>
 8015938:	4683      	mov	fp, r0
 801593a:	e7eb      	b.n	8015914 <_dtoa_r+0xba4>
 801593c:	08019f85 	.word	0x08019f85
 8015940:	0801a189 	.word	0x0801a189
 8015944:	08019f19 	.word	0x08019f19

08015948 <__sflush_r>:
 8015948:	898a      	ldrh	r2, [r1, #12]
 801594a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801594e:	4605      	mov	r5, r0
 8015950:	0710      	lsls	r0, r2, #28
 8015952:	460c      	mov	r4, r1
 8015954:	d458      	bmi.n	8015a08 <__sflush_r+0xc0>
 8015956:	684b      	ldr	r3, [r1, #4]
 8015958:	2b00      	cmp	r3, #0
 801595a:	dc05      	bgt.n	8015968 <__sflush_r+0x20>
 801595c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801595e:	2b00      	cmp	r3, #0
 8015960:	dc02      	bgt.n	8015968 <__sflush_r+0x20>
 8015962:	2000      	movs	r0, #0
 8015964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015968:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801596a:	2e00      	cmp	r6, #0
 801596c:	d0f9      	beq.n	8015962 <__sflush_r+0x1a>
 801596e:	2300      	movs	r3, #0
 8015970:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015974:	682f      	ldr	r7, [r5, #0]
 8015976:	602b      	str	r3, [r5, #0]
 8015978:	d032      	beq.n	80159e0 <__sflush_r+0x98>
 801597a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801597c:	89a3      	ldrh	r3, [r4, #12]
 801597e:	075a      	lsls	r2, r3, #29
 8015980:	d505      	bpl.n	801598e <__sflush_r+0x46>
 8015982:	6863      	ldr	r3, [r4, #4]
 8015984:	1ac0      	subs	r0, r0, r3
 8015986:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015988:	b10b      	cbz	r3, 801598e <__sflush_r+0x46>
 801598a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801598c:	1ac0      	subs	r0, r0, r3
 801598e:	2300      	movs	r3, #0
 8015990:	4602      	mov	r2, r0
 8015992:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015994:	6a21      	ldr	r1, [r4, #32]
 8015996:	4628      	mov	r0, r5
 8015998:	47b0      	blx	r6
 801599a:	1c43      	adds	r3, r0, #1
 801599c:	89a3      	ldrh	r3, [r4, #12]
 801599e:	d106      	bne.n	80159ae <__sflush_r+0x66>
 80159a0:	6829      	ldr	r1, [r5, #0]
 80159a2:	291d      	cmp	r1, #29
 80159a4:	d82c      	bhi.n	8015a00 <__sflush_r+0xb8>
 80159a6:	4a2a      	ldr	r2, [pc, #168]	; (8015a50 <__sflush_r+0x108>)
 80159a8:	40ca      	lsrs	r2, r1
 80159aa:	07d6      	lsls	r6, r2, #31
 80159ac:	d528      	bpl.n	8015a00 <__sflush_r+0xb8>
 80159ae:	2200      	movs	r2, #0
 80159b0:	6062      	str	r2, [r4, #4]
 80159b2:	04d9      	lsls	r1, r3, #19
 80159b4:	6922      	ldr	r2, [r4, #16]
 80159b6:	6022      	str	r2, [r4, #0]
 80159b8:	d504      	bpl.n	80159c4 <__sflush_r+0x7c>
 80159ba:	1c42      	adds	r2, r0, #1
 80159bc:	d101      	bne.n	80159c2 <__sflush_r+0x7a>
 80159be:	682b      	ldr	r3, [r5, #0]
 80159c0:	b903      	cbnz	r3, 80159c4 <__sflush_r+0x7c>
 80159c2:	6560      	str	r0, [r4, #84]	; 0x54
 80159c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80159c6:	602f      	str	r7, [r5, #0]
 80159c8:	2900      	cmp	r1, #0
 80159ca:	d0ca      	beq.n	8015962 <__sflush_r+0x1a>
 80159cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80159d0:	4299      	cmp	r1, r3
 80159d2:	d002      	beq.n	80159da <__sflush_r+0x92>
 80159d4:	4628      	mov	r0, r5
 80159d6:	f7fc fd23 	bl	8012420 <_free_r>
 80159da:	2000      	movs	r0, #0
 80159dc:	6360      	str	r0, [r4, #52]	; 0x34
 80159de:	e7c1      	b.n	8015964 <__sflush_r+0x1c>
 80159e0:	6a21      	ldr	r1, [r4, #32]
 80159e2:	2301      	movs	r3, #1
 80159e4:	4628      	mov	r0, r5
 80159e6:	47b0      	blx	r6
 80159e8:	1c41      	adds	r1, r0, #1
 80159ea:	d1c7      	bne.n	801597c <__sflush_r+0x34>
 80159ec:	682b      	ldr	r3, [r5, #0]
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d0c4      	beq.n	801597c <__sflush_r+0x34>
 80159f2:	2b1d      	cmp	r3, #29
 80159f4:	d001      	beq.n	80159fa <__sflush_r+0xb2>
 80159f6:	2b16      	cmp	r3, #22
 80159f8:	d101      	bne.n	80159fe <__sflush_r+0xb6>
 80159fa:	602f      	str	r7, [r5, #0]
 80159fc:	e7b1      	b.n	8015962 <__sflush_r+0x1a>
 80159fe:	89a3      	ldrh	r3, [r4, #12]
 8015a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a04:	81a3      	strh	r3, [r4, #12]
 8015a06:	e7ad      	b.n	8015964 <__sflush_r+0x1c>
 8015a08:	690f      	ldr	r7, [r1, #16]
 8015a0a:	2f00      	cmp	r7, #0
 8015a0c:	d0a9      	beq.n	8015962 <__sflush_r+0x1a>
 8015a0e:	0793      	lsls	r3, r2, #30
 8015a10:	680e      	ldr	r6, [r1, #0]
 8015a12:	bf08      	it	eq
 8015a14:	694b      	ldreq	r3, [r1, #20]
 8015a16:	600f      	str	r7, [r1, #0]
 8015a18:	bf18      	it	ne
 8015a1a:	2300      	movne	r3, #0
 8015a1c:	eba6 0807 	sub.w	r8, r6, r7
 8015a20:	608b      	str	r3, [r1, #8]
 8015a22:	f1b8 0f00 	cmp.w	r8, #0
 8015a26:	dd9c      	ble.n	8015962 <__sflush_r+0x1a>
 8015a28:	6a21      	ldr	r1, [r4, #32]
 8015a2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015a2c:	4643      	mov	r3, r8
 8015a2e:	463a      	mov	r2, r7
 8015a30:	4628      	mov	r0, r5
 8015a32:	47b0      	blx	r6
 8015a34:	2800      	cmp	r0, #0
 8015a36:	dc06      	bgt.n	8015a46 <__sflush_r+0xfe>
 8015a38:	89a3      	ldrh	r3, [r4, #12]
 8015a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a3e:	81a3      	strh	r3, [r4, #12]
 8015a40:	f04f 30ff 	mov.w	r0, #4294967295
 8015a44:	e78e      	b.n	8015964 <__sflush_r+0x1c>
 8015a46:	4407      	add	r7, r0
 8015a48:	eba8 0800 	sub.w	r8, r8, r0
 8015a4c:	e7e9      	b.n	8015a22 <__sflush_r+0xda>
 8015a4e:	bf00      	nop
 8015a50:	20400001 	.word	0x20400001

08015a54 <_fflush_r>:
 8015a54:	b538      	push	{r3, r4, r5, lr}
 8015a56:	690b      	ldr	r3, [r1, #16]
 8015a58:	4605      	mov	r5, r0
 8015a5a:	460c      	mov	r4, r1
 8015a5c:	b913      	cbnz	r3, 8015a64 <_fflush_r+0x10>
 8015a5e:	2500      	movs	r5, #0
 8015a60:	4628      	mov	r0, r5
 8015a62:	bd38      	pop	{r3, r4, r5, pc}
 8015a64:	b118      	cbz	r0, 8015a6e <_fflush_r+0x1a>
 8015a66:	6983      	ldr	r3, [r0, #24]
 8015a68:	b90b      	cbnz	r3, 8015a6e <_fflush_r+0x1a>
 8015a6a:	f7fc f837 	bl	8011adc <__sinit>
 8015a6e:	4b14      	ldr	r3, [pc, #80]	; (8015ac0 <_fflush_r+0x6c>)
 8015a70:	429c      	cmp	r4, r3
 8015a72:	d11b      	bne.n	8015aac <_fflush_r+0x58>
 8015a74:	686c      	ldr	r4, [r5, #4]
 8015a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d0ef      	beq.n	8015a5e <_fflush_r+0xa>
 8015a7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015a80:	07d0      	lsls	r0, r2, #31
 8015a82:	d404      	bmi.n	8015a8e <_fflush_r+0x3a>
 8015a84:	0599      	lsls	r1, r3, #22
 8015a86:	d402      	bmi.n	8015a8e <_fflush_r+0x3a>
 8015a88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015a8a:	f7fc fa07 	bl	8011e9c <__retarget_lock_acquire_recursive>
 8015a8e:	4628      	mov	r0, r5
 8015a90:	4621      	mov	r1, r4
 8015a92:	f7ff ff59 	bl	8015948 <__sflush_r>
 8015a96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015a98:	07da      	lsls	r2, r3, #31
 8015a9a:	4605      	mov	r5, r0
 8015a9c:	d4e0      	bmi.n	8015a60 <_fflush_r+0xc>
 8015a9e:	89a3      	ldrh	r3, [r4, #12]
 8015aa0:	059b      	lsls	r3, r3, #22
 8015aa2:	d4dd      	bmi.n	8015a60 <_fflush_r+0xc>
 8015aa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015aa6:	f7fc f9fb 	bl	8011ea0 <__retarget_lock_release_recursive>
 8015aaa:	e7d9      	b.n	8015a60 <_fflush_r+0xc>
 8015aac:	4b05      	ldr	r3, [pc, #20]	; (8015ac4 <_fflush_r+0x70>)
 8015aae:	429c      	cmp	r4, r3
 8015ab0:	d101      	bne.n	8015ab6 <_fflush_r+0x62>
 8015ab2:	68ac      	ldr	r4, [r5, #8]
 8015ab4:	e7df      	b.n	8015a76 <_fflush_r+0x22>
 8015ab6:	4b04      	ldr	r3, [pc, #16]	; (8015ac8 <_fflush_r+0x74>)
 8015ab8:	429c      	cmp	r4, r3
 8015aba:	bf08      	it	eq
 8015abc:	68ec      	ldreq	r4, [r5, #12]
 8015abe:	e7da      	b.n	8015a76 <_fflush_r+0x22>
 8015ac0:	08019c38 	.word	0x08019c38
 8015ac4:	08019c58 	.word	0x08019c58
 8015ac8:	08019c18 	.word	0x08019c18

08015acc <fiprintf>:
 8015acc:	b40e      	push	{r1, r2, r3}
 8015ace:	b503      	push	{r0, r1, lr}
 8015ad0:	4601      	mov	r1, r0
 8015ad2:	ab03      	add	r3, sp, #12
 8015ad4:	4805      	ldr	r0, [pc, #20]	; (8015aec <fiprintf+0x20>)
 8015ad6:	f853 2b04 	ldr.w	r2, [r3], #4
 8015ada:	6800      	ldr	r0, [r0, #0]
 8015adc:	9301      	str	r3, [sp, #4]
 8015ade:	f001 fd4d 	bl	801757c <_vfiprintf_r>
 8015ae2:	b002      	add	sp, #8
 8015ae4:	f85d eb04 	ldr.w	lr, [sp], #4
 8015ae8:	b003      	add	sp, #12
 8015aea:	4770      	bx	lr
 8015aec:	20000088 	.word	0x20000088

08015af0 <rshift>:
 8015af0:	6903      	ldr	r3, [r0, #16]
 8015af2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015af6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015afa:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015afe:	f100 0414 	add.w	r4, r0, #20
 8015b02:	dd45      	ble.n	8015b90 <rshift+0xa0>
 8015b04:	f011 011f 	ands.w	r1, r1, #31
 8015b08:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015b0c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015b10:	d10c      	bne.n	8015b2c <rshift+0x3c>
 8015b12:	f100 0710 	add.w	r7, r0, #16
 8015b16:	4629      	mov	r1, r5
 8015b18:	42b1      	cmp	r1, r6
 8015b1a:	d334      	bcc.n	8015b86 <rshift+0x96>
 8015b1c:	1a9b      	subs	r3, r3, r2
 8015b1e:	009b      	lsls	r3, r3, #2
 8015b20:	1eea      	subs	r2, r5, #3
 8015b22:	4296      	cmp	r6, r2
 8015b24:	bf38      	it	cc
 8015b26:	2300      	movcc	r3, #0
 8015b28:	4423      	add	r3, r4
 8015b2a:	e015      	b.n	8015b58 <rshift+0x68>
 8015b2c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015b30:	f1c1 0820 	rsb	r8, r1, #32
 8015b34:	40cf      	lsrs	r7, r1
 8015b36:	f105 0e04 	add.w	lr, r5, #4
 8015b3a:	46a1      	mov	r9, r4
 8015b3c:	4576      	cmp	r6, lr
 8015b3e:	46f4      	mov	ip, lr
 8015b40:	d815      	bhi.n	8015b6e <rshift+0x7e>
 8015b42:	1a9b      	subs	r3, r3, r2
 8015b44:	009a      	lsls	r2, r3, #2
 8015b46:	3a04      	subs	r2, #4
 8015b48:	3501      	adds	r5, #1
 8015b4a:	42ae      	cmp	r6, r5
 8015b4c:	bf38      	it	cc
 8015b4e:	2200      	movcc	r2, #0
 8015b50:	18a3      	adds	r3, r4, r2
 8015b52:	50a7      	str	r7, [r4, r2]
 8015b54:	b107      	cbz	r7, 8015b58 <rshift+0x68>
 8015b56:	3304      	adds	r3, #4
 8015b58:	1b1a      	subs	r2, r3, r4
 8015b5a:	42a3      	cmp	r3, r4
 8015b5c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015b60:	bf08      	it	eq
 8015b62:	2300      	moveq	r3, #0
 8015b64:	6102      	str	r2, [r0, #16]
 8015b66:	bf08      	it	eq
 8015b68:	6143      	streq	r3, [r0, #20]
 8015b6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b6e:	f8dc c000 	ldr.w	ip, [ip]
 8015b72:	fa0c fc08 	lsl.w	ip, ip, r8
 8015b76:	ea4c 0707 	orr.w	r7, ip, r7
 8015b7a:	f849 7b04 	str.w	r7, [r9], #4
 8015b7e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015b82:	40cf      	lsrs	r7, r1
 8015b84:	e7da      	b.n	8015b3c <rshift+0x4c>
 8015b86:	f851 cb04 	ldr.w	ip, [r1], #4
 8015b8a:	f847 cf04 	str.w	ip, [r7, #4]!
 8015b8e:	e7c3      	b.n	8015b18 <rshift+0x28>
 8015b90:	4623      	mov	r3, r4
 8015b92:	e7e1      	b.n	8015b58 <rshift+0x68>

08015b94 <__hexdig_fun>:
 8015b94:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015b98:	2b09      	cmp	r3, #9
 8015b9a:	d802      	bhi.n	8015ba2 <__hexdig_fun+0xe>
 8015b9c:	3820      	subs	r0, #32
 8015b9e:	b2c0      	uxtb	r0, r0
 8015ba0:	4770      	bx	lr
 8015ba2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015ba6:	2b05      	cmp	r3, #5
 8015ba8:	d801      	bhi.n	8015bae <__hexdig_fun+0x1a>
 8015baa:	3847      	subs	r0, #71	; 0x47
 8015bac:	e7f7      	b.n	8015b9e <__hexdig_fun+0xa>
 8015bae:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015bb2:	2b05      	cmp	r3, #5
 8015bb4:	d801      	bhi.n	8015bba <__hexdig_fun+0x26>
 8015bb6:	3827      	subs	r0, #39	; 0x27
 8015bb8:	e7f1      	b.n	8015b9e <__hexdig_fun+0xa>
 8015bba:	2000      	movs	r0, #0
 8015bbc:	4770      	bx	lr
	...

08015bc0 <__gethex>:
 8015bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bc4:	ed2d 8b02 	vpush	{d8}
 8015bc8:	b089      	sub	sp, #36	; 0x24
 8015bca:	ee08 0a10 	vmov	s16, r0
 8015bce:	9304      	str	r3, [sp, #16]
 8015bd0:	4bbc      	ldr	r3, [pc, #752]	; (8015ec4 <__gethex+0x304>)
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	9301      	str	r3, [sp, #4]
 8015bd6:	4618      	mov	r0, r3
 8015bd8:	468b      	mov	fp, r1
 8015bda:	4690      	mov	r8, r2
 8015bdc:	f7ea fb12 	bl	8000204 <strlen>
 8015be0:	9b01      	ldr	r3, [sp, #4]
 8015be2:	f8db 2000 	ldr.w	r2, [fp]
 8015be6:	4403      	add	r3, r0
 8015be8:	4682      	mov	sl, r0
 8015bea:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015bee:	9305      	str	r3, [sp, #20]
 8015bf0:	1c93      	adds	r3, r2, #2
 8015bf2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8015bf6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8015bfa:	32fe      	adds	r2, #254	; 0xfe
 8015bfc:	18d1      	adds	r1, r2, r3
 8015bfe:	461f      	mov	r7, r3
 8015c00:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015c04:	9100      	str	r1, [sp, #0]
 8015c06:	2830      	cmp	r0, #48	; 0x30
 8015c08:	d0f8      	beq.n	8015bfc <__gethex+0x3c>
 8015c0a:	f7ff ffc3 	bl	8015b94 <__hexdig_fun>
 8015c0e:	4604      	mov	r4, r0
 8015c10:	2800      	cmp	r0, #0
 8015c12:	d13a      	bne.n	8015c8a <__gethex+0xca>
 8015c14:	9901      	ldr	r1, [sp, #4]
 8015c16:	4652      	mov	r2, sl
 8015c18:	4638      	mov	r0, r7
 8015c1a:	f7fd fd1d 	bl	8013658 <strncmp>
 8015c1e:	4605      	mov	r5, r0
 8015c20:	2800      	cmp	r0, #0
 8015c22:	d168      	bne.n	8015cf6 <__gethex+0x136>
 8015c24:	f817 000a 	ldrb.w	r0, [r7, sl]
 8015c28:	eb07 060a 	add.w	r6, r7, sl
 8015c2c:	f7ff ffb2 	bl	8015b94 <__hexdig_fun>
 8015c30:	2800      	cmp	r0, #0
 8015c32:	d062      	beq.n	8015cfa <__gethex+0x13a>
 8015c34:	4633      	mov	r3, r6
 8015c36:	7818      	ldrb	r0, [r3, #0]
 8015c38:	2830      	cmp	r0, #48	; 0x30
 8015c3a:	461f      	mov	r7, r3
 8015c3c:	f103 0301 	add.w	r3, r3, #1
 8015c40:	d0f9      	beq.n	8015c36 <__gethex+0x76>
 8015c42:	f7ff ffa7 	bl	8015b94 <__hexdig_fun>
 8015c46:	2301      	movs	r3, #1
 8015c48:	fab0 f480 	clz	r4, r0
 8015c4c:	0964      	lsrs	r4, r4, #5
 8015c4e:	4635      	mov	r5, r6
 8015c50:	9300      	str	r3, [sp, #0]
 8015c52:	463a      	mov	r2, r7
 8015c54:	4616      	mov	r6, r2
 8015c56:	3201      	adds	r2, #1
 8015c58:	7830      	ldrb	r0, [r6, #0]
 8015c5a:	f7ff ff9b 	bl	8015b94 <__hexdig_fun>
 8015c5e:	2800      	cmp	r0, #0
 8015c60:	d1f8      	bne.n	8015c54 <__gethex+0x94>
 8015c62:	9901      	ldr	r1, [sp, #4]
 8015c64:	4652      	mov	r2, sl
 8015c66:	4630      	mov	r0, r6
 8015c68:	f7fd fcf6 	bl	8013658 <strncmp>
 8015c6c:	b980      	cbnz	r0, 8015c90 <__gethex+0xd0>
 8015c6e:	b94d      	cbnz	r5, 8015c84 <__gethex+0xc4>
 8015c70:	eb06 050a 	add.w	r5, r6, sl
 8015c74:	462a      	mov	r2, r5
 8015c76:	4616      	mov	r6, r2
 8015c78:	3201      	adds	r2, #1
 8015c7a:	7830      	ldrb	r0, [r6, #0]
 8015c7c:	f7ff ff8a 	bl	8015b94 <__hexdig_fun>
 8015c80:	2800      	cmp	r0, #0
 8015c82:	d1f8      	bne.n	8015c76 <__gethex+0xb6>
 8015c84:	1bad      	subs	r5, r5, r6
 8015c86:	00ad      	lsls	r5, r5, #2
 8015c88:	e004      	b.n	8015c94 <__gethex+0xd4>
 8015c8a:	2400      	movs	r4, #0
 8015c8c:	4625      	mov	r5, r4
 8015c8e:	e7e0      	b.n	8015c52 <__gethex+0x92>
 8015c90:	2d00      	cmp	r5, #0
 8015c92:	d1f7      	bne.n	8015c84 <__gethex+0xc4>
 8015c94:	7833      	ldrb	r3, [r6, #0]
 8015c96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015c9a:	2b50      	cmp	r3, #80	; 0x50
 8015c9c:	d13b      	bne.n	8015d16 <__gethex+0x156>
 8015c9e:	7873      	ldrb	r3, [r6, #1]
 8015ca0:	2b2b      	cmp	r3, #43	; 0x2b
 8015ca2:	d02c      	beq.n	8015cfe <__gethex+0x13e>
 8015ca4:	2b2d      	cmp	r3, #45	; 0x2d
 8015ca6:	d02e      	beq.n	8015d06 <__gethex+0x146>
 8015ca8:	1c71      	adds	r1, r6, #1
 8015caa:	f04f 0900 	mov.w	r9, #0
 8015cae:	7808      	ldrb	r0, [r1, #0]
 8015cb0:	f7ff ff70 	bl	8015b94 <__hexdig_fun>
 8015cb4:	1e43      	subs	r3, r0, #1
 8015cb6:	b2db      	uxtb	r3, r3
 8015cb8:	2b18      	cmp	r3, #24
 8015cba:	d82c      	bhi.n	8015d16 <__gethex+0x156>
 8015cbc:	f1a0 0210 	sub.w	r2, r0, #16
 8015cc0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015cc4:	f7ff ff66 	bl	8015b94 <__hexdig_fun>
 8015cc8:	1e43      	subs	r3, r0, #1
 8015cca:	b2db      	uxtb	r3, r3
 8015ccc:	2b18      	cmp	r3, #24
 8015cce:	d91d      	bls.n	8015d0c <__gethex+0x14c>
 8015cd0:	f1b9 0f00 	cmp.w	r9, #0
 8015cd4:	d000      	beq.n	8015cd8 <__gethex+0x118>
 8015cd6:	4252      	negs	r2, r2
 8015cd8:	4415      	add	r5, r2
 8015cda:	f8cb 1000 	str.w	r1, [fp]
 8015cde:	b1e4      	cbz	r4, 8015d1a <__gethex+0x15a>
 8015ce0:	9b00      	ldr	r3, [sp, #0]
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	bf14      	ite	ne
 8015ce6:	2700      	movne	r7, #0
 8015ce8:	2706      	moveq	r7, #6
 8015cea:	4638      	mov	r0, r7
 8015cec:	b009      	add	sp, #36	; 0x24
 8015cee:	ecbd 8b02 	vpop	{d8}
 8015cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cf6:	463e      	mov	r6, r7
 8015cf8:	4625      	mov	r5, r4
 8015cfa:	2401      	movs	r4, #1
 8015cfc:	e7ca      	b.n	8015c94 <__gethex+0xd4>
 8015cfe:	f04f 0900 	mov.w	r9, #0
 8015d02:	1cb1      	adds	r1, r6, #2
 8015d04:	e7d3      	b.n	8015cae <__gethex+0xee>
 8015d06:	f04f 0901 	mov.w	r9, #1
 8015d0a:	e7fa      	b.n	8015d02 <__gethex+0x142>
 8015d0c:	230a      	movs	r3, #10
 8015d0e:	fb03 0202 	mla	r2, r3, r2, r0
 8015d12:	3a10      	subs	r2, #16
 8015d14:	e7d4      	b.n	8015cc0 <__gethex+0x100>
 8015d16:	4631      	mov	r1, r6
 8015d18:	e7df      	b.n	8015cda <__gethex+0x11a>
 8015d1a:	1bf3      	subs	r3, r6, r7
 8015d1c:	3b01      	subs	r3, #1
 8015d1e:	4621      	mov	r1, r4
 8015d20:	2b07      	cmp	r3, #7
 8015d22:	dc0b      	bgt.n	8015d3c <__gethex+0x17c>
 8015d24:	ee18 0a10 	vmov	r0, s16
 8015d28:	f000 fbe0 	bl	80164ec <_Balloc>
 8015d2c:	4604      	mov	r4, r0
 8015d2e:	b940      	cbnz	r0, 8015d42 <__gethex+0x182>
 8015d30:	4b65      	ldr	r3, [pc, #404]	; (8015ec8 <__gethex+0x308>)
 8015d32:	4602      	mov	r2, r0
 8015d34:	21de      	movs	r1, #222	; 0xde
 8015d36:	4865      	ldr	r0, [pc, #404]	; (8015ecc <__gethex+0x30c>)
 8015d38:	f7fe ff4a 	bl	8014bd0 <__assert_func>
 8015d3c:	3101      	adds	r1, #1
 8015d3e:	105b      	asrs	r3, r3, #1
 8015d40:	e7ee      	b.n	8015d20 <__gethex+0x160>
 8015d42:	f100 0914 	add.w	r9, r0, #20
 8015d46:	f04f 0b00 	mov.w	fp, #0
 8015d4a:	f1ca 0301 	rsb	r3, sl, #1
 8015d4e:	f8cd 9008 	str.w	r9, [sp, #8]
 8015d52:	f8cd b000 	str.w	fp, [sp]
 8015d56:	9306      	str	r3, [sp, #24]
 8015d58:	42b7      	cmp	r7, r6
 8015d5a:	d340      	bcc.n	8015dde <__gethex+0x21e>
 8015d5c:	9802      	ldr	r0, [sp, #8]
 8015d5e:	9b00      	ldr	r3, [sp, #0]
 8015d60:	f840 3b04 	str.w	r3, [r0], #4
 8015d64:	eba0 0009 	sub.w	r0, r0, r9
 8015d68:	1080      	asrs	r0, r0, #2
 8015d6a:	0146      	lsls	r6, r0, #5
 8015d6c:	6120      	str	r0, [r4, #16]
 8015d6e:	4618      	mov	r0, r3
 8015d70:	f000 fcb2 	bl	80166d8 <__hi0bits>
 8015d74:	1a30      	subs	r0, r6, r0
 8015d76:	f8d8 6000 	ldr.w	r6, [r8]
 8015d7a:	42b0      	cmp	r0, r6
 8015d7c:	dd63      	ble.n	8015e46 <__gethex+0x286>
 8015d7e:	1b87      	subs	r7, r0, r6
 8015d80:	4639      	mov	r1, r7
 8015d82:	4620      	mov	r0, r4
 8015d84:	f001 f84c 	bl	8016e20 <__any_on>
 8015d88:	4682      	mov	sl, r0
 8015d8a:	b1a8      	cbz	r0, 8015db8 <__gethex+0x1f8>
 8015d8c:	1e7b      	subs	r3, r7, #1
 8015d8e:	1159      	asrs	r1, r3, #5
 8015d90:	f003 021f 	and.w	r2, r3, #31
 8015d94:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015d98:	f04f 0a01 	mov.w	sl, #1
 8015d9c:	fa0a f202 	lsl.w	r2, sl, r2
 8015da0:	420a      	tst	r2, r1
 8015da2:	d009      	beq.n	8015db8 <__gethex+0x1f8>
 8015da4:	4553      	cmp	r3, sl
 8015da6:	dd05      	ble.n	8015db4 <__gethex+0x1f4>
 8015da8:	1eb9      	subs	r1, r7, #2
 8015daa:	4620      	mov	r0, r4
 8015dac:	f001 f838 	bl	8016e20 <__any_on>
 8015db0:	2800      	cmp	r0, #0
 8015db2:	d145      	bne.n	8015e40 <__gethex+0x280>
 8015db4:	f04f 0a02 	mov.w	sl, #2
 8015db8:	4639      	mov	r1, r7
 8015dba:	4620      	mov	r0, r4
 8015dbc:	f7ff fe98 	bl	8015af0 <rshift>
 8015dc0:	443d      	add	r5, r7
 8015dc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015dc6:	42ab      	cmp	r3, r5
 8015dc8:	da4c      	bge.n	8015e64 <__gethex+0x2a4>
 8015dca:	ee18 0a10 	vmov	r0, s16
 8015dce:	4621      	mov	r1, r4
 8015dd0:	f000 fbcc 	bl	801656c <_Bfree>
 8015dd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015dd6:	2300      	movs	r3, #0
 8015dd8:	6013      	str	r3, [r2, #0]
 8015dda:	27a3      	movs	r7, #163	; 0xa3
 8015ddc:	e785      	b.n	8015cea <__gethex+0x12a>
 8015dde:	1e73      	subs	r3, r6, #1
 8015de0:	9a05      	ldr	r2, [sp, #20]
 8015de2:	9303      	str	r3, [sp, #12]
 8015de4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015de8:	4293      	cmp	r3, r2
 8015dea:	d019      	beq.n	8015e20 <__gethex+0x260>
 8015dec:	f1bb 0f20 	cmp.w	fp, #32
 8015df0:	d107      	bne.n	8015e02 <__gethex+0x242>
 8015df2:	9b02      	ldr	r3, [sp, #8]
 8015df4:	9a00      	ldr	r2, [sp, #0]
 8015df6:	f843 2b04 	str.w	r2, [r3], #4
 8015dfa:	9302      	str	r3, [sp, #8]
 8015dfc:	2300      	movs	r3, #0
 8015dfe:	9300      	str	r3, [sp, #0]
 8015e00:	469b      	mov	fp, r3
 8015e02:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015e06:	f7ff fec5 	bl	8015b94 <__hexdig_fun>
 8015e0a:	9b00      	ldr	r3, [sp, #0]
 8015e0c:	f000 000f 	and.w	r0, r0, #15
 8015e10:	fa00 f00b 	lsl.w	r0, r0, fp
 8015e14:	4303      	orrs	r3, r0
 8015e16:	9300      	str	r3, [sp, #0]
 8015e18:	f10b 0b04 	add.w	fp, fp, #4
 8015e1c:	9b03      	ldr	r3, [sp, #12]
 8015e1e:	e00d      	b.n	8015e3c <__gethex+0x27c>
 8015e20:	9b03      	ldr	r3, [sp, #12]
 8015e22:	9a06      	ldr	r2, [sp, #24]
 8015e24:	4413      	add	r3, r2
 8015e26:	42bb      	cmp	r3, r7
 8015e28:	d3e0      	bcc.n	8015dec <__gethex+0x22c>
 8015e2a:	4618      	mov	r0, r3
 8015e2c:	9901      	ldr	r1, [sp, #4]
 8015e2e:	9307      	str	r3, [sp, #28]
 8015e30:	4652      	mov	r2, sl
 8015e32:	f7fd fc11 	bl	8013658 <strncmp>
 8015e36:	9b07      	ldr	r3, [sp, #28]
 8015e38:	2800      	cmp	r0, #0
 8015e3a:	d1d7      	bne.n	8015dec <__gethex+0x22c>
 8015e3c:	461e      	mov	r6, r3
 8015e3e:	e78b      	b.n	8015d58 <__gethex+0x198>
 8015e40:	f04f 0a03 	mov.w	sl, #3
 8015e44:	e7b8      	b.n	8015db8 <__gethex+0x1f8>
 8015e46:	da0a      	bge.n	8015e5e <__gethex+0x29e>
 8015e48:	1a37      	subs	r7, r6, r0
 8015e4a:	4621      	mov	r1, r4
 8015e4c:	ee18 0a10 	vmov	r0, s16
 8015e50:	463a      	mov	r2, r7
 8015e52:	f000 fda7 	bl	80169a4 <__lshift>
 8015e56:	1bed      	subs	r5, r5, r7
 8015e58:	4604      	mov	r4, r0
 8015e5a:	f100 0914 	add.w	r9, r0, #20
 8015e5e:	f04f 0a00 	mov.w	sl, #0
 8015e62:	e7ae      	b.n	8015dc2 <__gethex+0x202>
 8015e64:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015e68:	42a8      	cmp	r0, r5
 8015e6a:	dd72      	ble.n	8015f52 <__gethex+0x392>
 8015e6c:	1b45      	subs	r5, r0, r5
 8015e6e:	42ae      	cmp	r6, r5
 8015e70:	dc36      	bgt.n	8015ee0 <__gethex+0x320>
 8015e72:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015e76:	2b02      	cmp	r3, #2
 8015e78:	d02a      	beq.n	8015ed0 <__gethex+0x310>
 8015e7a:	2b03      	cmp	r3, #3
 8015e7c:	d02c      	beq.n	8015ed8 <__gethex+0x318>
 8015e7e:	2b01      	cmp	r3, #1
 8015e80:	d115      	bne.n	8015eae <__gethex+0x2ee>
 8015e82:	42ae      	cmp	r6, r5
 8015e84:	d113      	bne.n	8015eae <__gethex+0x2ee>
 8015e86:	2e01      	cmp	r6, #1
 8015e88:	d10b      	bne.n	8015ea2 <__gethex+0x2e2>
 8015e8a:	9a04      	ldr	r2, [sp, #16]
 8015e8c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015e90:	6013      	str	r3, [r2, #0]
 8015e92:	2301      	movs	r3, #1
 8015e94:	6123      	str	r3, [r4, #16]
 8015e96:	f8c9 3000 	str.w	r3, [r9]
 8015e9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015e9c:	2762      	movs	r7, #98	; 0x62
 8015e9e:	601c      	str	r4, [r3, #0]
 8015ea0:	e723      	b.n	8015cea <__gethex+0x12a>
 8015ea2:	1e71      	subs	r1, r6, #1
 8015ea4:	4620      	mov	r0, r4
 8015ea6:	f000 ffbb 	bl	8016e20 <__any_on>
 8015eaa:	2800      	cmp	r0, #0
 8015eac:	d1ed      	bne.n	8015e8a <__gethex+0x2ca>
 8015eae:	ee18 0a10 	vmov	r0, s16
 8015eb2:	4621      	mov	r1, r4
 8015eb4:	f000 fb5a 	bl	801656c <_Bfree>
 8015eb8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015eba:	2300      	movs	r3, #0
 8015ebc:	6013      	str	r3, [r2, #0]
 8015ebe:	2750      	movs	r7, #80	; 0x50
 8015ec0:	e713      	b.n	8015cea <__gethex+0x12a>
 8015ec2:	bf00      	nop
 8015ec4:	0801a000 	.word	0x0801a000
 8015ec8:	08019f85 	.word	0x08019f85
 8015ecc:	08019f96 	.word	0x08019f96
 8015ed0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d1eb      	bne.n	8015eae <__gethex+0x2ee>
 8015ed6:	e7d8      	b.n	8015e8a <__gethex+0x2ca>
 8015ed8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d1d5      	bne.n	8015e8a <__gethex+0x2ca>
 8015ede:	e7e6      	b.n	8015eae <__gethex+0x2ee>
 8015ee0:	1e6f      	subs	r7, r5, #1
 8015ee2:	f1ba 0f00 	cmp.w	sl, #0
 8015ee6:	d131      	bne.n	8015f4c <__gethex+0x38c>
 8015ee8:	b127      	cbz	r7, 8015ef4 <__gethex+0x334>
 8015eea:	4639      	mov	r1, r7
 8015eec:	4620      	mov	r0, r4
 8015eee:	f000 ff97 	bl	8016e20 <__any_on>
 8015ef2:	4682      	mov	sl, r0
 8015ef4:	117b      	asrs	r3, r7, #5
 8015ef6:	2101      	movs	r1, #1
 8015ef8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8015efc:	f007 071f 	and.w	r7, r7, #31
 8015f00:	fa01 f707 	lsl.w	r7, r1, r7
 8015f04:	421f      	tst	r7, r3
 8015f06:	4629      	mov	r1, r5
 8015f08:	4620      	mov	r0, r4
 8015f0a:	bf18      	it	ne
 8015f0c:	f04a 0a02 	orrne.w	sl, sl, #2
 8015f10:	1b76      	subs	r6, r6, r5
 8015f12:	f7ff fded 	bl	8015af0 <rshift>
 8015f16:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015f1a:	2702      	movs	r7, #2
 8015f1c:	f1ba 0f00 	cmp.w	sl, #0
 8015f20:	d048      	beq.n	8015fb4 <__gethex+0x3f4>
 8015f22:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015f26:	2b02      	cmp	r3, #2
 8015f28:	d015      	beq.n	8015f56 <__gethex+0x396>
 8015f2a:	2b03      	cmp	r3, #3
 8015f2c:	d017      	beq.n	8015f5e <__gethex+0x39e>
 8015f2e:	2b01      	cmp	r3, #1
 8015f30:	d109      	bne.n	8015f46 <__gethex+0x386>
 8015f32:	f01a 0f02 	tst.w	sl, #2
 8015f36:	d006      	beq.n	8015f46 <__gethex+0x386>
 8015f38:	f8d9 0000 	ldr.w	r0, [r9]
 8015f3c:	ea4a 0a00 	orr.w	sl, sl, r0
 8015f40:	f01a 0f01 	tst.w	sl, #1
 8015f44:	d10e      	bne.n	8015f64 <__gethex+0x3a4>
 8015f46:	f047 0710 	orr.w	r7, r7, #16
 8015f4a:	e033      	b.n	8015fb4 <__gethex+0x3f4>
 8015f4c:	f04f 0a01 	mov.w	sl, #1
 8015f50:	e7d0      	b.n	8015ef4 <__gethex+0x334>
 8015f52:	2701      	movs	r7, #1
 8015f54:	e7e2      	b.n	8015f1c <__gethex+0x35c>
 8015f56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015f58:	f1c3 0301 	rsb	r3, r3, #1
 8015f5c:	9315      	str	r3, [sp, #84]	; 0x54
 8015f5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d0f0      	beq.n	8015f46 <__gethex+0x386>
 8015f64:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015f68:	f104 0314 	add.w	r3, r4, #20
 8015f6c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015f70:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015f74:	f04f 0c00 	mov.w	ip, #0
 8015f78:	4618      	mov	r0, r3
 8015f7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f7e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015f82:	d01c      	beq.n	8015fbe <__gethex+0x3fe>
 8015f84:	3201      	adds	r2, #1
 8015f86:	6002      	str	r2, [r0, #0]
 8015f88:	2f02      	cmp	r7, #2
 8015f8a:	f104 0314 	add.w	r3, r4, #20
 8015f8e:	d13f      	bne.n	8016010 <__gethex+0x450>
 8015f90:	f8d8 2000 	ldr.w	r2, [r8]
 8015f94:	3a01      	subs	r2, #1
 8015f96:	42b2      	cmp	r2, r6
 8015f98:	d10a      	bne.n	8015fb0 <__gethex+0x3f0>
 8015f9a:	1171      	asrs	r1, r6, #5
 8015f9c:	2201      	movs	r2, #1
 8015f9e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015fa2:	f006 061f 	and.w	r6, r6, #31
 8015fa6:	fa02 f606 	lsl.w	r6, r2, r6
 8015faa:	421e      	tst	r6, r3
 8015fac:	bf18      	it	ne
 8015fae:	4617      	movne	r7, r2
 8015fb0:	f047 0720 	orr.w	r7, r7, #32
 8015fb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015fb6:	601c      	str	r4, [r3, #0]
 8015fb8:	9b04      	ldr	r3, [sp, #16]
 8015fba:	601d      	str	r5, [r3, #0]
 8015fbc:	e695      	b.n	8015cea <__gethex+0x12a>
 8015fbe:	4299      	cmp	r1, r3
 8015fc0:	f843 cc04 	str.w	ip, [r3, #-4]
 8015fc4:	d8d8      	bhi.n	8015f78 <__gethex+0x3b8>
 8015fc6:	68a3      	ldr	r3, [r4, #8]
 8015fc8:	459b      	cmp	fp, r3
 8015fca:	db19      	blt.n	8016000 <__gethex+0x440>
 8015fcc:	6861      	ldr	r1, [r4, #4]
 8015fce:	ee18 0a10 	vmov	r0, s16
 8015fd2:	3101      	adds	r1, #1
 8015fd4:	f000 fa8a 	bl	80164ec <_Balloc>
 8015fd8:	4681      	mov	r9, r0
 8015fda:	b918      	cbnz	r0, 8015fe4 <__gethex+0x424>
 8015fdc:	4b1a      	ldr	r3, [pc, #104]	; (8016048 <__gethex+0x488>)
 8015fde:	4602      	mov	r2, r0
 8015fe0:	2184      	movs	r1, #132	; 0x84
 8015fe2:	e6a8      	b.n	8015d36 <__gethex+0x176>
 8015fe4:	6922      	ldr	r2, [r4, #16]
 8015fe6:	3202      	adds	r2, #2
 8015fe8:	f104 010c 	add.w	r1, r4, #12
 8015fec:	0092      	lsls	r2, r2, #2
 8015fee:	300c      	adds	r0, #12
 8015ff0:	f7fb ff68 	bl	8011ec4 <memcpy>
 8015ff4:	4621      	mov	r1, r4
 8015ff6:	ee18 0a10 	vmov	r0, s16
 8015ffa:	f000 fab7 	bl	801656c <_Bfree>
 8015ffe:	464c      	mov	r4, r9
 8016000:	6923      	ldr	r3, [r4, #16]
 8016002:	1c5a      	adds	r2, r3, #1
 8016004:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016008:	6122      	str	r2, [r4, #16]
 801600a:	2201      	movs	r2, #1
 801600c:	615a      	str	r2, [r3, #20]
 801600e:	e7bb      	b.n	8015f88 <__gethex+0x3c8>
 8016010:	6922      	ldr	r2, [r4, #16]
 8016012:	455a      	cmp	r2, fp
 8016014:	dd0b      	ble.n	801602e <__gethex+0x46e>
 8016016:	2101      	movs	r1, #1
 8016018:	4620      	mov	r0, r4
 801601a:	f7ff fd69 	bl	8015af0 <rshift>
 801601e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016022:	3501      	adds	r5, #1
 8016024:	42ab      	cmp	r3, r5
 8016026:	f6ff aed0 	blt.w	8015dca <__gethex+0x20a>
 801602a:	2701      	movs	r7, #1
 801602c:	e7c0      	b.n	8015fb0 <__gethex+0x3f0>
 801602e:	f016 061f 	ands.w	r6, r6, #31
 8016032:	d0fa      	beq.n	801602a <__gethex+0x46a>
 8016034:	449a      	add	sl, r3
 8016036:	f1c6 0620 	rsb	r6, r6, #32
 801603a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801603e:	f000 fb4b 	bl	80166d8 <__hi0bits>
 8016042:	42b0      	cmp	r0, r6
 8016044:	dbe7      	blt.n	8016016 <__gethex+0x456>
 8016046:	e7f0      	b.n	801602a <__gethex+0x46a>
 8016048:	08019f85 	.word	0x08019f85

0801604c <L_shift>:
 801604c:	f1c2 0208 	rsb	r2, r2, #8
 8016050:	0092      	lsls	r2, r2, #2
 8016052:	b570      	push	{r4, r5, r6, lr}
 8016054:	f1c2 0620 	rsb	r6, r2, #32
 8016058:	6843      	ldr	r3, [r0, #4]
 801605a:	6804      	ldr	r4, [r0, #0]
 801605c:	fa03 f506 	lsl.w	r5, r3, r6
 8016060:	432c      	orrs	r4, r5
 8016062:	40d3      	lsrs	r3, r2
 8016064:	6004      	str	r4, [r0, #0]
 8016066:	f840 3f04 	str.w	r3, [r0, #4]!
 801606a:	4288      	cmp	r0, r1
 801606c:	d3f4      	bcc.n	8016058 <L_shift+0xc>
 801606e:	bd70      	pop	{r4, r5, r6, pc}

08016070 <__match>:
 8016070:	b530      	push	{r4, r5, lr}
 8016072:	6803      	ldr	r3, [r0, #0]
 8016074:	3301      	adds	r3, #1
 8016076:	f811 4b01 	ldrb.w	r4, [r1], #1
 801607a:	b914      	cbnz	r4, 8016082 <__match+0x12>
 801607c:	6003      	str	r3, [r0, #0]
 801607e:	2001      	movs	r0, #1
 8016080:	bd30      	pop	{r4, r5, pc}
 8016082:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016086:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801608a:	2d19      	cmp	r5, #25
 801608c:	bf98      	it	ls
 801608e:	3220      	addls	r2, #32
 8016090:	42a2      	cmp	r2, r4
 8016092:	d0f0      	beq.n	8016076 <__match+0x6>
 8016094:	2000      	movs	r0, #0
 8016096:	e7f3      	b.n	8016080 <__match+0x10>

08016098 <__hexnan>:
 8016098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801609c:	680b      	ldr	r3, [r1, #0]
 801609e:	6801      	ldr	r1, [r0, #0]
 80160a0:	115e      	asrs	r6, r3, #5
 80160a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80160a6:	f013 031f 	ands.w	r3, r3, #31
 80160aa:	b087      	sub	sp, #28
 80160ac:	bf18      	it	ne
 80160ae:	3604      	addne	r6, #4
 80160b0:	2500      	movs	r5, #0
 80160b2:	1f37      	subs	r7, r6, #4
 80160b4:	4682      	mov	sl, r0
 80160b6:	4690      	mov	r8, r2
 80160b8:	9301      	str	r3, [sp, #4]
 80160ba:	f846 5c04 	str.w	r5, [r6, #-4]
 80160be:	46b9      	mov	r9, r7
 80160c0:	463c      	mov	r4, r7
 80160c2:	9502      	str	r5, [sp, #8]
 80160c4:	46ab      	mov	fp, r5
 80160c6:	784a      	ldrb	r2, [r1, #1]
 80160c8:	1c4b      	adds	r3, r1, #1
 80160ca:	9303      	str	r3, [sp, #12]
 80160cc:	b342      	cbz	r2, 8016120 <__hexnan+0x88>
 80160ce:	4610      	mov	r0, r2
 80160d0:	9105      	str	r1, [sp, #20]
 80160d2:	9204      	str	r2, [sp, #16]
 80160d4:	f7ff fd5e 	bl	8015b94 <__hexdig_fun>
 80160d8:	2800      	cmp	r0, #0
 80160da:	d14f      	bne.n	801617c <__hexnan+0xe4>
 80160dc:	9a04      	ldr	r2, [sp, #16]
 80160de:	9905      	ldr	r1, [sp, #20]
 80160e0:	2a20      	cmp	r2, #32
 80160e2:	d818      	bhi.n	8016116 <__hexnan+0x7e>
 80160e4:	9b02      	ldr	r3, [sp, #8]
 80160e6:	459b      	cmp	fp, r3
 80160e8:	dd13      	ble.n	8016112 <__hexnan+0x7a>
 80160ea:	454c      	cmp	r4, r9
 80160ec:	d206      	bcs.n	80160fc <__hexnan+0x64>
 80160ee:	2d07      	cmp	r5, #7
 80160f0:	dc04      	bgt.n	80160fc <__hexnan+0x64>
 80160f2:	462a      	mov	r2, r5
 80160f4:	4649      	mov	r1, r9
 80160f6:	4620      	mov	r0, r4
 80160f8:	f7ff ffa8 	bl	801604c <L_shift>
 80160fc:	4544      	cmp	r4, r8
 80160fe:	d950      	bls.n	80161a2 <__hexnan+0x10a>
 8016100:	2300      	movs	r3, #0
 8016102:	f1a4 0904 	sub.w	r9, r4, #4
 8016106:	f844 3c04 	str.w	r3, [r4, #-4]
 801610a:	f8cd b008 	str.w	fp, [sp, #8]
 801610e:	464c      	mov	r4, r9
 8016110:	461d      	mov	r5, r3
 8016112:	9903      	ldr	r1, [sp, #12]
 8016114:	e7d7      	b.n	80160c6 <__hexnan+0x2e>
 8016116:	2a29      	cmp	r2, #41	; 0x29
 8016118:	d156      	bne.n	80161c8 <__hexnan+0x130>
 801611a:	3102      	adds	r1, #2
 801611c:	f8ca 1000 	str.w	r1, [sl]
 8016120:	f1bb 0f00 	cmp.w	fp, #0
 8016124:	d050      	beq.n	80161c8 <__hexnan+0x130>
 8016126:	454c      	cmp	r4, r9
 8016128:	d206      	bcs.n	8016138 <__hexnan+0xa0>
 801612a:	2d07      	cmp	r5, #7
 801612c:	dc04      	bgt.n	8016138 <__hexnan+0xa0>
 801612e:	462a      	mov	r2, r5
 8016130:	4649      	mov	r1, r9
 8016132:	4620      	mov	r0, r4
 8016134:	f7ff ff8a 	bl	801604c <L_shift>
 8016138:	4544      	cmp	r4, r8
 801613a:	d934      	bls.n	80161a6 <__hexnan+0x10e>
 801613c:	f1a8 0204 	sub.w	r2, r8, #4
 8016140:	4623      	mov	r3, r4
 8016142:	f853 1b04 	ldr.w	r1, [r3], #4
 8016146:	f842 1f04 	str.w	r1, [r2, #4]!
 801614a:	429f      	cmp	r7, r3
 801614c:	d2f9      	bcs.n	8016142 <__hexnan+0xaa>
 801614e:	1b3b      	subs	r3, r7, r4
 8016150:	f023 0303 	bic.w	r3, r3, #3
 8016154:	3304      	adds	r3, #4
 8016156:	3401      	adds	r4, #1
 8016158:	3e03      	subs	r6, #3
 801615a:	42b4      	cmp	r4, r6
 801615c:	bf88      	it	hi
 801615e:	2304      	movhi	r3, #4
 8016160:	4443      	add	r3, r8
 8016162:	2200      	movs	r2, #0
 8016164:	f843 2b04 	str.w	r2, [r3], #4
 8016168:	429f      	cmp	r7, r3
 801616a:	d2fb      	bcs.n	8016164 <__hexnan+0xcc>
 801616c:	683b      	ldr	r3, [r7, #0]
 801616e:	b91b      	cbnz	r3, 8016178 <__hexnan+0xe0>
 8016170:	4547      	cmp	r7, r8
 8016172:	d127      	bne.n	80161c4 <__hexnan+0x12c>
 8016174:	2301      	movs	r3, #1
 8016176:	603b      	str	r3, [r7, #0]
 8016178:	2005      	movs	r0, #5
 801617a:	e026      	b.n	80161ca <__hexnan+0x132>
 801617c:	3501      	adds	r5, #1
 801617e:	2d08      	cmp	r5, #8
 8016180:	f10b 0b01 	add.w	fp, fp, #1
 8016184:	dd06      	ble.n	8016194 <__hexnan+0xfc>
 8016186:	4544      	cmp	r4, r8
 8016188:	d9c3      	bls.n	8016112 <__hexnan+0x7a>
 801618a:	2300      	movs	r3, #0
 801618c:	f844 3c04 	str.w	r3, [r4, #-4]
 8016190:	2501      	movs	r5, #1
 8016192:	3c04      	subs	r4, #4
 8016194:	6822      	ldr	r2, [r4, #0]
 8016196:	f000 000f 	and.w	r0, r0, #15
 801619a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801619e:	6022      	str	r2, [r4, #0]
 80161a0:	e7b7      	b.n	8016112 <__hexnan+0x7a>
 80161a2:	2508      	movs	r5, #8
 80161a4:	e7b5      	b.n	8016112 <__hexnan+0x7a>
 80161a6:	9b01      	ldr	r3, [sp, #4]
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d0df      	beq.n	801616c <__hexnan+0xd4>
 80161ac:	f04f 32ff 	mov.w	r2, #4294967295
 80161b0:	f1c3 0320 	rsb	r3, r3, #32
 80161b4:	fa22 f303 	lsr.w	r3, r2, r3
 80161b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80161bc:	401a      	ands	r2, r3
 80161be:	f846 2c04 	str.w	r2, [r6, #-4]
 80161c2:	e7d3      	b.n	801616c <__hexnan+0xd4>
 80161c4:	3f04      	subs	r7, #4
 80161c6:	e7d1      	b.n	801616c <__hexnan+0xd4>
 80161c8:	2004      	movs	r0, #4
 80161ca:	b007      	add	sp, #28
 80161cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080161d0 <_findenv_r>:
 80161d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161d4:	4607      	mov	r7, r0
 80161d6:	4689      	mov	r9, r1
 80161d8:	4616      	mov	r6, r2
 80161da:	f001 fcdf 	bl	8017b9c <__env_lock>
 80161de:	4b18      	ldr	r3, [pc, #96]	; (8016240 <_findenv_r+0x70>)
 80161e0:	681c      	ldr	r4, [r3, #0]
 80161e2:	469a      	mov	sl, r3
 80161e4:	b134      	cbz	r4, 80161f4 <_findenv_r+0x24>
 80161e6:	464b      	mov	r3, r9
 80161e8:	4698      	mov	r8, r3
 80161ea:	f813 1b01 	ldrb.w	r1, [r3], #1
 80161ee:	b139      	cbz	r1, 8016200 <_findenv_r+0x30>
 80161f0:	293d      	cmp	r1, #61	; 0x3d
 80161f2:	d1f9      	bne.n	80161e8 <_findenv_r+0x18>
 80161f4:	4638      	mov	r0, r7
 80161f6:	f001 fcd7 	bl	8017ba8 <__env_unlock>
 80161fa:	2000      	movs	r0, #0
 80161fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016200:	eba8 0809 	sub.w	r8, r8, r9
 8016204:	46a3      	mov	fp, r4
 8016206:	f854 0b04 	ldr.w	r0, [r4], #4
 801620a:	2800      	cmp	r0, #0
 801620c:	d0f2      	beq.n	80161f4 <_findenv_r+0x24>
 801620e:	4642      	mov	r2, r8
 8016210:	4649      	mov	r1, r9
 8016212:	f7fd fa21 	bl	8013658 <strncmp>
 8016216:	2800      	cmp	r0, #0
 8016218:	d1f4      	bne.n	8016204 <_findenv_r+0x34>
 801621a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801621e:	eb03 0508 	add.w	r5, r3, r8
 8016222:	f813 3008 	ldrb.w	r3, [r3, r8]
 8016226:	2b3d      	cmp	r3, #61	; 0x3d
 8016228:	d1ec      	bne.n	8016204 <_findenv_r+0x34>
 801622a:	f8da 3000 	ldr.w	r3, [sl]
 801622e:	ebab 0303 	sub.w	r3, fp, r3
 8016232:	109b      	asrs	r3, r3, #2
 8016234:	4638      	mov	r0, r7
 8016236:	6033      	str	r3, [r6, #0]
 8016238:	f001 fcb6 	bl	8017ba8 <__env_unlock>
 801623c:	1c68      	adds	r0, r5, #1
 801623e:	e7dd      	b.n	80161fc <_findenv_r+0x2c>
 8016240:	200002c0 	.word	0x200002c0

08016244 <_getenv_r>:
 8016244:	b507      	push	{r0, r1, r2, lr}
 8016246:	aa01      	add	r2, sp, #4
 8016248:	f7ff ffc2 	bl	80161d0 <_findenv_r>
 801624c:	b003      	add	sp, #12
 801624e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08016254 <__gettzinfo>:
 8016254:	4800      	ldr	r0, [pc, #0]	; (8016258 <__gettzinfo+0x4>)
 8016256:	4770      	bx	lr
 8016258:	200000f8 	.word	0x200000f8

0801625c <gmtime_r>:
 801625c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016260:	e9d0 6700 	ldrd	r6, r7, [r0]
 8016264:	460c      	mov	r4, r1
 8016266:	4a51      	ldr	r2, [pc, #324]	; (80163ac <gmtime_r+0x150>)
 8016268:	2300      	movs	r3, #0
 801626a:	4630      	mov	r0, r6
 801626c:	4639      	mov	r1, r7
 801626e:	f7ea fd2b 	bl	8000cc8 <__aeabi_ldivmod>
 8016272:	4639      	mov	r1, r7
 8016274:	4605      	mov	r5, r0
 8016276:	4a4d      	ldr	r2, [pc, #308]	; (80163ac <gmtime_r+0x150>)
 8016278:	4630      	mov	r0, r6
 801627a:	2300      	movs	r3, #0
 801627c:	f7ea fd24 	bl	8000cc8 <__aeabi_ldivmod>
 8016280:	2a00      	cmp	r2, #0
 8016282:	bfbc      	itt	lt
 8016284:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8016288:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 801628c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8016290:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8016294:	fbb2 f3f1 	udiv	r3, r2, r1
 8016298:	fb01 2213 	mls	r2, r1, r3, r2
 801629c:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80162a0:	bfac      	ite	ge
 80162a2:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 80162a6:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 80162aa:	60a3      	str	r3, [r4, #8]
 80162ac:	fbb2 f3f1 	udiv	r3, r2, r1
 80162b0:	fb01 2213 	mls	r2, r1, r3, r2
 80162b4:	6063      	str	r3, [r4, #4]
 80162b6:	6022      	str	r2, [r4, #0]
 80162b8:	1cc3      	adds	r3, r0, #3
 80162ba:	2207      	movs	r2, #7
 80162bc:	fb93 f2f2 	sdiv	r2, r3, r2
 80162c0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80162c4:	1a9b      	subs	r3, r3, r2
 80162c6:	bf48      	it	mi
 80162c8:	3307      	addmi	r3, #7
 80162ca:	2800      	cmp	r0, #0
 80162cc:	61a3      	str	r3, [r4, #24]
 80162ce:	bfb8      	it	lt
 80162d0:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 80162d4:	4936      	ldr	r1, [pc, #216]	; (80163b0 <gmtime_r+0x154>)
 80162d6:	bfae      	itee	ge
 80162d8:	fb90 f1f1 	sdivge	r1, r0, r1
 80162dc:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 80162e0:	fb93 f1f1 	sdivlt	r1, r3, r1
 80162e4:	4b33      	ldr	r3, [pc, #204]	; (80163b4 <gmtime_r+0x158>)
 80162e6:	fb03 0001 	mla	r0, r3, r1, r0
 80162ea:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80162ee:	fbb0 f2f2 	udiv	r2, r0, r2
 80162f2:	4402      	add	r2, r0
 80162f4:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 80162f8:	fbb0 f3fc 	udiv	r3, r0, ip
 80162fc:	1ad2      	subs	r2, r2, r3
 80162fe:	f240 176d 	movw	r7, #365	; 0x16d
 8016302:	4b2d      	ldr	r3, [pc, #180]	; (80163b8 <gmtime_r+0x15c>)
 8016304:	fbb0 f3f3 	udiv	r3, r0, r3
 8016308:	2664      	movs	r6, #100	; 0x64
 801630a:	1ad3      	subs	r3, r2, r3
 801630c:	fbb3 f5f7 	udiv	r5, r3, r7
 8016310:	fbb3 f3fc 	udiv	r3, r3, ip
 8016314:	fbb5 f2f6 	udiv	r2, r5, r6
 8016318:	1ad3      	subs	r3, r2, r3
 801631a:	4403      	add	r3, r0
 801631c:	fb07 3315 	mls	r3, r7, r5, r3
 8016320:	2099      	movs	r0, #153	; 0x99
 8016322:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8016326:	f10c 0c02 	add.w	ip, ip, #2
 801632a:	f103 0e01 	add.w	lr, r3, #1
 801632e:	fbbc f7f0 	udiv	r7, ip, r0
 8016332:	4378      	muls	r0, r7
 8016334:	3002      	adds	r0, #2
 8016336:	f04f 0805 	mov.w	r8, #5
 801633a:	fbb0 f0f8 	udiv	r0, r0, r8
 801633e:	ebae 0000 	sub.w	r0, lr, r0
 8016342:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 8016346:	45f4      	cmp	ip, lr
 8016348:	bf94      	ite	ls
 801634a:	f04f 0c02 	movls.w	ip, #2
 801634e:	f06f 0c09 	mvnhi.w	ip, #9
 8016352:	4467      	add	r7, ip
 8016354:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8016358:	fb0c 5101 	mla	r1, ip, r1, r5
 801635c:	2f01      	cmp	r7, #1
 801635e:	bf98      	it	ls
 8016360:	3101      	addls	r1, #1
 8016362:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8016366:	d30c      	bcc.n	8016382 <gmtime_r+0x126>
 8016368:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 801636c:	61e3      	str	r3, [r4, #28]
 801636e:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 8016372:	2300      	movs	r3, #0
 8016374:	60e0      	str	r0, [r4, #12]
 8016376:	e9c4 7104 	strd	r7, r1, [r4, #16]
 801637a:	6223      	str	r3, [r4, #32]
 801637c:	4620      	mov	r0, r4
 801637e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016382:	f015 0f03 	tst.w	r5, #3
 8016386:	d102      	bne.n	801638e <gmtime_r+0x132>
 8016388:	fb06 5212 	mls	r2, r6, r2, r5
 801638c:	b95a      	cbnz	r2, 80163a6 <gmtime_r+0x14a>
 801638e:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8016392:	fbb5 f2f6 	udiv	r2, r5, r6
 8016396:	fb06 5212 	mls	r2, r6, r2, r5
 801639a:	fab2 f282 	clz	r2, r2
 801639e:	0952      	lsrs	r2, r2, #5
 80163a0:	333b      	adds	r3, #59	; 0x3b
 80163a2:	4413      	add	r3, r2
 80163a4:	e7e2      	b.n	801636c <gmtime_r+0x110>
 80163a6:	2201      	movs	r2, #1
 80163a8:	e7fa      	b.n	80163a0 <gmtime_r+0x144>
 80163aa:	bf00      	nop
 80163ac:	00015180 	.word	0x00015180
 80163b0:	00023ab1 	.word	0x00023ab1
 80163b4:	fffdc54f 	.word	0xfffdc54f
 80163b8:	00023ab0 	.word	0x00023ab0

080163bc <_localeconv_r>:
 80163bc:	4800      	ldr	r0, [pc, #0]	; (80163c0 <_localeconv_r+0x4>)
 80163be:	4770      	bx	lr
 80163c0:	20000244 	.word	0x20000244

080163c4 <_lseek_r>:
 80163c4:	b538      	push	{r3, r4, r5, lr}
 80163c6:	4d07      	ldr	r5, [pc, #28]	; (80163e4 <_lseek_r+0x20>)
 80163c8:	4604      	mov	r4, r0
 80163ca:	4608      	mov	r0, r1
 80163cc:	4611      	mov	r1, r2
 80163ce:	2200      	movs	r2, #0
 80163d0:	602a      	str	r2, [r5, #0]
 80163d2:	461a      	mov	r2, r3
 80163d4:	f001 fc40 	bl	8017c58 <_lseek>
 80163d8:	1c43      	adds	r3, r0, #1
 80163da:	d102      	bne.n	80163e2 <_lseek_r+0x1e>
 80163dc:	682b      	ldr	r3, [r5, #0]
 80163de:	b103      	cbz	r3, 80163e2 <_lseek_r+0x1e>
 80163e0:	6023      	str	r3, [r4, #0]
 80163e2:	bd38      	pop	{r3, r4, r5, pc}
 80163e4:	20006484 	.word	0x20006484

080163e8 <__swhatbuf_r>:
 80163e8:	b570      	push	{r4, r5, r6, lr}
 80163ea:	460e      	mov	r6, r1
 80163ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163f0:	2900      	cmp	r1, #0
 80163f2:	b096      	sub	sp, #88	; 0x58
 80163f4:	4614      	mov	r4, r2
 80163f6:	461d      	mov	r5, r3
 80163f8:	da07      	bge.n	801640a <__swhatbuf_r+0x22>
 80163fa:	2300      	movs	r3, #0
 80163fc:	602b      	str	r3, [r5, #0]
 80163fe:	89b3      	ldrh	r3, [r6, #12]
 8016400:	061a      	lsls	r2, r3, #24
 8016402:	d410      	bmi.n	8016426 <__swhatbuf_r+0x3e>
 8016404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016408:	e00e      	b.n	8016428 <__swhatbuf_r+0x40>
 801640a:	466a      	mov	r2, sp
 801640c:	f001 fbd2 	bl	8017bb4 <_fstat_r>
 8016410:	2800      	cmp	r0, #0
 8016412:	dbf2      	blt.n	80163fa <__swhatbuf_r+0x12>
 8016414:	9a01      	ldr	r2, [sp, #4]
 8016416:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801641a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801641e:	425a      	negs	r2, r3
 8016420:	415a      	adcs	r2, r3
 8016422:	602a      	str	r2, [r5, #0]
 8016424:	e7ee      	b.n	8016404 <__swhatbuf_r+0x1c>
 8016426:	2340      	movs	r3, #64	; 0x40
 8016428:	2000      	movs	r0, #0
 801642a:	6023      	str	r3, [r4, #0]
 801642c:	b016      	add	sp, #88	; 0x58
 801642e:	bd70      	pop	{r4, r5, r6, pc}

08016430 <__smakebuf_r>:
 8016430:	898b      	ldrh	r3, [r1, #12]
 8016432:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016434:	079d      	lsls	r5, r3, #30
 8016436:	4606      	mov	r6, r0
 8016438:	460c      	mov	r4, r1
 801643a:	d507      	bpl.n	801644c <__smakebuf_r+0x1c>
 801643c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016440:	6023      	str	r3, [r4, #0]
 8016442:	6123      	str	r3, [r4, #16]
 8016444:	2301      	movs	r3, #1
 8016446:	6163      	str	r3, [r4, #20]
 8016448:	b002      	add	sp, #8
 801644a:	bd70      	pop	{r4, r5, r6, pc}
 801644c:	ab01      	add	r3, sp, #4
 801644e:	466a      	mov	r2, sp
 8016450:	f7ff ffca 	bl	80163e8 <__swhatbuf_r>
 8016454:	9900      	ldr	r1, [sp, #0]
 8016456:	4605      	mov	r5, r0
 8016458:	4630      	mov	r0, r6
 801645a:	f7fc f831 	bl	80124c0 <_malloc_r>
 801645e:	b948      	cbnz	r0, 8016474 <__smakebuf_r+0x44>
 8016460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016464:	059a      	lsls	r2, r3, #22
 8016466:	d4ef      	bmi.n	8016448 <__smakebuf_r+0x18>
 8016468:	f023 0303 	bic.w	r3, r3, #3
 801646c:	f043 0302 	orr.w	r3, r3, #2
 8016470:	81a3      	strh	r3, [r4, #12]
 8016472:	e7e3      	b.n	801643c <__smakebuf_r+0xc>
 8016474:	4b0d      	ldr	r3, [pc, #52]	; (80164ac <__smakebuf_r+0x7c>)
 8016476:	62b3      	str	r3, [r6, #40]	; 0x28
 8016478:	89a3      	ldrh	r3, [r4, #12]
 801647a:	6020      	str	r0, [r4, #0]
 801647c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016480:	81a3      	strh	r3, [r4, #12]
 8016482:	9b00      	ldr	r3, [sp, #0]
 8016484:	6163      	str	r3, [r4, #20]
 8016486:	9b01      	ldr	r3, [sp, #4]
 8016488:	6120      	str	r0, [r4, #16]
 801648a:	b15b      	cbz	r3, 80164a4 <__smakebuf_r+0x74>
 801648c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016490:	4630      	mov	r0, r6
 8016492:	f001 fba1 	bl	8017bd8 <_isatty_r>
 8016496:	b128      	cbz	r0, 80164a4 <__smakebuf_r+0x74>
 8016498:	89a3      	ldrh	r3, [r4, #12]
 801649a:	f023 0303 	bic.w	r3, r3, #3
 801649e:	f043 0301 	orr.w	r3, r3, #1
 80164a2:	81a3      	strh	r3, [r4, #12]
 80164a4:	89a0      	ldrh	r0, [r4, #12]
 80164a6:	4305      	orrs	r5, r0
 80164a8:	81a5      	strh	r5, [r4, #12]
 80164aa:	e7cd      	b.n	8016448 <__smakebuf_r+0x18>
 80164ac:	08011a75 	.word	0x08011a75

080164b0 <__ascii_mbtowc>:
 80164b0:	b082      	sub	sp, #8
 80164b2:	b901      	cbnz	r1, 80164b6 <__ascii_mbtowc+0x6>
 80164b4:	a901      	add	r1, sp, #4
 80164b6:	b142      	cbz	r2, 80164ca <__ascii_mbtowc+0x1a>
 80164b8:	b14b      	cbz	r3, 80164ce <__ascii_mbtowc+0x1e>
 80164ba:	7813      	ldrb	r3, [r2, #0]
 80164bc:	600b      	str	r3, [r1, #0]
 80164be:	7812      	ldrb	r2, [r2, #0]
 80164c0:	1e10      	subs	r0, r2, #0
 80164c2:	bf18      	it	ne
 80164c4:	2001      	movne	r0, #1
 80164c6:	b002      	add	sp, #8
 80164c8:	4770      	bx	lr
 80164ca:	4610      	mov	r0, r2
 80164cc:	e7fb      	b.n	80164c6 <__ascii_mbtowc+0x16>
 80164ce:	f06f 0001 	mvn.w	r0, #1
 80164d2:	e7f8      	b.n	80164c6 <__ascii_mbtowc+0x16>

080164d4 <__malloc_lock>:
 80164d4:	4801      	ldr	r0, [pc, #4]	; (80164dc <__malloc_lock+0x8>)
 80164d6:	f7fb bce1 	b.w	8011e9c <__retarget_lock_acquire_recursive>
 80164da:	bf00      	nop
 80164dc:	2000647c 	.word	0x2000647c

080164e0 <__malloc_unlock>:
 80164e0:	4801      	ldr	r0, [pc, #4]	; (80164e8 <__malloc_unlock+0x8>)
 80164e2:	f7fb bcdd 	b.w	8011ea0 <__retarget_lock_release_recursive>
 80164e6:	bf00      	nop
 80164e8:	2000647c 	.word	0x2000647c

080164ec <_Balloc>:
 80164ec:	b570      	push	{r4, r5, r6, lr}
 80164ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80164f0:	4604      	mov	r4, r0
 80164f2:	460d      	mov	r5, r1
 80164f4:	b976      	cbnz	r6, 8016514 <_Balloc+0x28>
 80164f6:	2010      	movs	r0, #16
 80164f8:	f7fb fcd4 	bl	8011ea4 <malloc>
 80164fc:	4602      	mov	r2, r0
 80164fe:	6260      	str	r0, [r4, #36]	; 0x24
 8016500:	b920      	cbnz	r0, 801650c <_Balloc+0x20>
 8016502:	4b18      	ldr	r3, [pc, #96]	; (8016564 <_Balloc+0x78>)
 8016504:	4818      	ldr	r0, [pc, #96]	; (8016568 <_Balloc+0x7c>)
 8016506:	2166      	movs	r1, #102	; 0x66
 8016508:	f7fe fb62 	bl	8014bd0 <__assert_func>
 801650c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016510:	6006      	str	r6, [r0, #0]
 8016512:	60c6      	str	r6, [r0, #12]
 8016514:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016516:	68f3      	ldr	r3, [r6, #12]
 8016518:	b183      	cbz	r3, 801653c <_Balloc+0x50>
 801651a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801651c:	68db      	ldr	r3, [r3, #12]
 801651e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016522:	b9b8      	cbnz	r0, 8016554 <_Balloc+0x68>
 8016524:	2101      	movs	r1, #1
 8016526:	fa01 f605 	lsl.w	r6, r1, r5
 801652a:	1d72      	adds	r2, r6, #5
 801652c:	0092      	lsls	r2, r2, #2
 801652e:	4620      	mov	r0, r4
 8016530:	f000 fc97 	bl	8016e62 <_calloc_r>
 8016534:	b160      	cbz	r0, 8016550 <_Balloc+0x64>
 8016536:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801653a:	e00e      	b.n	801655a <_Balloc+0x6e>
 801653c:	2221      	movs	r2, #33	; 0x21
 801653e:	2104      	movs	r1, #4
 8016540:	4620      	mov	r0, r4
 8016542:	f000 fc8e 	bl	8016e62 <_calloc_r>
 8016546:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016548:	60f0      	str	r0, [r6, #12]
 801654a:	68db      	ldr	r3, [r3, #12]
 801654c:	2b00      	cmp	r3, #0
 801654e:	d1e4      	bne.n	801651a <_Balloc+0x2e>
 8016550:	2000      	movs	r0, #0
 8016552:	bd70      	pop	{r4, r5, r6, pc}
 8016554:	6802      	ldr	r2, [r0, #0]
 8016556:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801655a:	2300      	movs	r3, #0
 801655c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016560:	e7f7      	b.n	8016552 <_Balloc+0x66>
 8016562:	bf00      	nop
 8016564:	08019c7c 	.word	0x08019c7c
 8016568:	0801a014 	.word	0x0801a014

0801656c <_Bfree>:
 801656c:	b570      	push	{r4, r5, r6, lr}
 801656e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016570:	4605      	mov	r5, r0
 8016572:	460c      	mov	r4, r1
 8016574:	b976      	cbnz	r6, 8016594 <_Bfree+0x28>
 8016576:	2010      	movs	r0, #16
 8016578:	f7fb fc94 	bl	8011ea4 <malloc>
 801657c:	4602      	mov	r2, r0
 801657e:	6268      	str	r0, [r5, #36]	; 0x24
 8016580:	b920      	cbnz	r0, 801658c <_Bfree+0x20>
 8016582:	4b09      	ldr	r3, [pc, #36]	; (80165a8 <_Bfree+0x3c>)
 8016584:	4809      	ldr	r0, [pc, #36]	; (80165ac <_Bfree+0x40>)
 8016586:	218a      	movs	r1, #138	; 0x8a
 8016588:	f7fe fb22 	bl	8014bd0 <__assert_func>
 801658c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016590:	6006      	str	r6, [r0, #0]
 8016592:	60c6      	str	r6, [r0, #12]
 8016594:	b13c      	cbz	r4, 80165a6 <_Bfree+0x3a>
 8016596:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016598:	6862      	ldr	r2, [r4, #4]
 801659a:	68db      	ldr	r3, [r3, #12]
 801659c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80165a0:	6021      	str	r1, [r4, #0]
 80165a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80165a6:	bd70      	pop	{r4, r5, r6, pc}
 80165a8:	08019c7c 	.word	0x08019c7c
 80165ac:	0801a014 	.word	0x0801a014

080165b0 <__multadd>:
 80165b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165b4:	690e      	ldr	r6, [r1, #16]
 80165b6:	4607      	mov	r7, r0
 80165b8:	4698      	mov	r8, r3
 80165ba:	460c      	mov	r4, r1
 80165bc:	f101 0014 	add.w	r0, r1, #20
 80165c0:	2300      	movs	r3, #0
 80165c2:	6805      	ldr	r5, [r0, #0]
 80165c4:	b2a9      	uxth	r1, r5
 80165c6:	fb02 8101 	mla	r1, r2, r1, r8
 80165ca:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80165ce:	0c2d      	lsrs	r5, r5, #16
 80165d0:	fb02 c505 	mla	r5, r2, r5, ip
 80165d4:	b289      	uxth	r1, r1
 80165d6:	3301      	adds	r3, #1
 80165d8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80165dc:	429e      	cmp	r6, r3
 80165de:	f840 1b04 	str.w	r1, [r0], #4
 80165e2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80165e6:	dcec      	bgt.n	80165c2 <__multadd+0x12>
 80165e8:	f1b8 0f00 	cmp.w	r8, #0
 80165ec:	d022      	beq.n	8016634 <__multadd+0x84>
 80165ee:	68a3      	ldr	r3, [r4, #8]
 80165f0:	42b3      	cmp	r3, r6
 80165f2:	dc19      	bgt.n	8016628 <__multadd+0x78>
 80165f4:	6861      	ldr	r1, [r4, #4]
 80165f6:	4638      	mov	r0, r7
 80165f8:	3101      	adds	r1, #1
 80165fa:	f7ff ff77 	bl	80164ec <_Balloc>
 80165fe:	4605      	mov	r5, r0
 8016600:	b928      	cbnz	r0, 801660e <__multadd+0x5e>
 8016602:	4602      	mov	r2, r0
 8016604:	4b0d      	ldr	r3, [pc, #52]	; (801663c <__multadd+0x8c>)
 8016606:	480e      	ldr	r0, [pc, #56]	; (8016640 <__multadd+0x90>)
 8016608:	21b5      	movs	r1, #181	; 0xb5
 801660a:	f7fe fae1 	bl	8014bd0 <__assert_func>
 801660e:	6922      	ldr	r2, [r4, #16]
 8016610:	3202      	adds	r2, #2
 8016612:	f104 010c 	add.w	r1, r4, #12
 8016616:	0092      	lsls	r2, r2, #2
 8016618:	300c      	adds	r0, #12
 801661a:	f7fb fc53 	bl	8011ec4 <memcpy>
 801661e:	4621      	mov	r1, r4
 8016620:	4638      	mov	r0, r7
 8016622:	f7ff ffa3 	bl	801656c <_Bfree>
 8016626:	462c      	mov	r4, r5
 8016628:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801662c:	3601      	adds	r6, #1
 801662e:	f8c3 8014 	str.w	r8, [r3, #20]
 8016632:	6126      	str	r6, [r4, #16]
 8016634:	4620      	mov	r0, r4
 8016636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801663a:	bf00      	nop
 801663c:	08019f85 	.word	0x08019f85
 8016640:	0801a014 	.word	0x0801a014

08016644 <__s2b>:
 8016644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016648:	460c      	mov	r4, r1
 801664a:	4615      	mov	r5, r2
 801664c:	461f      	mov	r7, r3
 801664e:	2209      	movs	r2, #9
 8016650:	3308      	adds	r3, #8
 8016652:	4606      	mov	r6, r0
 8016654:	fb93 f3f2 	sdiv	r3, r3, r2
 8016658:	2100      	movs	r1, #0
 801665a:	2201      	movs	r2, #1
 801665c:	429a      	cmp	r2, r3
 801665e:	db09      	blt.n	8016674 <__s2b+0x30>
 8016660:	4630      	mov	r0, r6
 8016662:	f7ff ff43 	bl	80164ec <_Balloc>
 8016666:	b940      	cbnz	r0, 801667a <__s2b+0x36>
 8016668:	4602      	mov	r2, r0
 801666a:	4b19      	ldr	r3, [pc, #100]	; (80166d0 <__s2b+0x8c>)
 801666c:	4819      	ldr	r0, [pc, #100]	; (80166d4 <__s2b+0x90>)
 801666e:	21ce      	movs	r1, #206	; 0xce
 8016670:	f7fe faae 	bl	8014bd0 <__assert_func>
 8016674:	0052      	lsls	r2, r2, #1
 8016676:	3101      	adds	r1, #1
 8016678:	e7f0      	b.n	801665c <__s2b+0x18>
 801667a:	9b08      	ldr	r3, [sp, #32]
 801667c:	6143      	str	r3, [r0, #20]
 801667e:	2d09      	cmp	r5, #9
 8016680:	f04f 0301 	mov.w	r3, #1
 8016684:	6103      	str	r3, [r0, #16]
 8016686:	dd16      	ble.n	80166b6 <__s2b+0x72>
 8016688:	f104 0909 	add.w	r9, r4, #9
 801668c:	46c8      	mov	r8, r9
 801668e:	442c      	add	r4, r5
 8016690:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016694:	4601      	mov	r1, r0
 8016696:	3b30      	subs	r3, #48	; 0x30
 8016698:	220a      	movs	r2, #10
 801669a:	4630      	mov	r0, r6
 801669c:	f7ff ff88 	bl	80165b0 <__multadd>
 80166a0:	45a0      	cmp	r8, r4
 80166a2:	d1f5      	bne.n	8016690 <__s2b+0x4c>
 80166a4:	f1a5 0408 	sub.w	r4, r5, #8
 80166a8:	444c      	add	r4, r9
 80166aa:	1b2d      	subs	r5, r5, r4
 80166ac:	1963      	adds	r3, r4, r5
 80166ae:	42bb      	cmp	r3, r7
 80166b0:	db04      	blt.n	80166bc <__s2b+0x78>
 80166b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80166b6:	340a      	adds	r4, #10
 80166b8:	2509      	movs	r5, #9
 80166ba:	e7f6      	b.n	80166aa <__s2b+0x66>
 80166bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80166c0:	4601      	mov	r1, r0
 80166c2:	3b30      	subs	r3, #48	; 0x30
 80166c4:	220a      	movs	r2, #10
 80166c6:	4630      	mov	r0, r6
 80166c8:	f7ff ff72 	bl	80165b0 <__multadd>
 80166cc:	e7ee      	b.n	80166ac <__s2b+0x68>
 80166ce:	bf00      	nop
 80166d0:	08019f85 	.word	0x08019f85
 80166d4:	0801a014 	.word	0x0801a014

080166d8 <__hi0bits>:
 80166d8:	0c03      	lsrs	r3, r0, #16
 80166da:	041b      	lsls	r3, r3, #16
 80166dc:	b9d3      	cbnz	r3, 8016714 <__hi0bits+0x3c>
 80166de:	0400      	lsls	r0, r0, #16
 80166e0:	2310      	movs	r3, #16
 80166e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80166e6:	bf04      	itt	eq
 80166e8:	0200      	lsleq	r0, r0, #8
 80166ea:	3308      	addeq	r3, #8
 80166ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80166f0:	bf04      	itt	eq
 80166f2:	0100      	lsleq	r0, r0, #4
 80166f4:	3304      	addeq	r3, #4
 80166f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80166fa:	bf04      	itt	eq
 80166fc:	0080      	lsleq	r0, r0, #2
 80166fe:	3302      	addeq	r3, #2
 8016700:	2800      	cmp	r0, #0
 8016702:	db05      	blt.n	8016710 <__hi0bits+0x38>
 8016704:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016708:	f103 0301 	add.w	r3, r3, #1
 801670c:	bf08      	it	eq
 801670e:	2320      	moveq	r3, #32
 8016710:	4618      	mov	r0, r3
 8016712:	4770      	bx	lr
 8016714:	2300      	movs	r3, #0
 8016716:	e7e4      	b.n	80166e2 <__hi0bits+0xa>

08016718 <__lo0bits>:
 8016718:	6803      	ldr	r3, [r0, #0]
 801671a:	f013 0207 	ands.w	r2, r3, #7
 801671e:	4601      	mov	r1, r0
 8016720:	d00b      	beq.n	801673a <__lo0bits+0x22>
 8016722:	07da      	lsls	r2, r3, #31
 8016724:	d424      	bmi.n	8016770 <__lo0bits+0x58>
 8016726:	0798      	lsls	r0, r3, #30
 8016728:	bf49      	itett	mi
 801672a:	085b      	lsrmi	r3, r3, #1
 801672c:	089b      	lsrpl	r3, r3, #2
 801672e:	2001      	movmi	r0, #1
 8016730:	600b      	strmi	r3, [r1, #0]
 8016732:	bf5c      	itt	pl
 8016734:	600b      	strpl	r3, [r1, #0]
 8016736:	2002      	movpl	r0, #2
 8016738:	4770      	bx	lr
 801673a:	b298      	uxth	r0, r3
 801673c:	b9b0      	cbnz	r0, 801676c <__lo0bits+0x54>
 801673e:	0c1b      	lsrs	r3, r3, #16
 8016740:	2010      	movs	r0, #16
 8016742:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016746:	bf04      	itt	eq
 8016748:	0a1b      	lsreq	r3, r3, #8
 801674a:	3008      	addeq	r0, #8
 801674c:	071a      	lsls	r2, r3, #28
 801674e:	bf04      	itt	eq
 8016750:	091b      	lsreq	r3, r3, #4
 8016752:	3004      	addeq	r0, #4
 8016754:	079a      	lsls	r2, r3, #30
 8016756:	bf04      	itt	eq
 8016758:	089b      	lsreq	r3, r3, #2
 801675a:	3002      	addeq	r0, #2
 801675c:	07da      	lsls	r2, r3, #31
 801675e:	d403      	bmi.n	8016768 <__lo0bits+0x50>
 8016760:	085b      	lsrs	r3, r3, #1
 8016762:	f100 0001 	add.w	r0, r0, #1
 8016766:	d005      	beq.n	8016774 <__lo0bits+0x5c>
 8016768:	600b      	str	r3, [r1, #0]
 801676a:	4770      	bx	lr
 801676c:	4610      	mov	r0, r2
 801676e:	e7e8      	b.n	8016742 <__lo0bits+0x2a>
 8016770:	2000      	movs	r0, #0
 8016772:	4770      	bx	lr
 8016774:	2020      	movs	r0, #32
 8016776:	4770      	bx	lr

08016778 <__i2b>:
 8016778:	b510      	push	{r4, lr}
 801677a:	460c      	mov	r4, r1
 801677c:	2101      	movs	r1, #1
 801677e:	f7ff feb5 	bl	80164ec <_Balloc>
 8016782:	4602      	mov	r2, r0
 8016784:	b928      	cbnz	r0, 8016792 <__i2b+0x1a>
 8016786:	4b05      	ldr	r3, [pc, #20]	; (801679c <__i2b+0x24>)
 8016788:	4805      	ldr	r0, [pc, #20]	; (80167a0 <__i2b+0x28>)
 801678a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801678e:	f7fe fa1f 	bl	8014bd0 <__assert_func>
 8016792:	2301      	movs	r3, #1
 8016794:	6144      	str	r4, [r0, #20]
 8016796:	6103      	str	r3, [r0, #16]
 8016798:	bd10      	pop	{r4, pc}
 801679a:	bf00      	nop
 801679c:	08019f85 	.word	0x08019f85
 80167a0:	0801a014 	.word	0x0801a014

080167a4 <__multiply>:
 80167a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167a8:	4614      	mov	r4, r2
 80167aa:	690a      	ldr	r2, [r1, #16]
 80167ac:	6923      	ldr	r3, [r4, #16]
 80167ae:	429a      	cmp	r2, r3
 80167b0:	bfb8      	it	lt
 80167b2:	460b      	movlt	r3, r1
 80167b4:	460d      	mov	r5, r1
 80167b6:	bfbc      	itt	lt
 80167b8:	4625      	movlt	r5, r4
 80167ba:	461c      	movlt	r4, r3
 80167bc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80167c0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80167c4:	68ab      	ldr	r3, [r5, #8]
 80167c6:	6869      	ldr	r1, [r5, #4]
 80167c8:	eb0a 0709 	add.w	r7, sl, r9
 80167cc:	42bb      	cmp	r3, r7
 80167ce:	b085      	sub	sp, #20
 80167d0:	bfb8      	it	lt
 80167d2:	3101      	addlt	r1, #1
 80167d4:	f7ff fe8a 	bl	80164ec <_Balloc>
 80167d8:	b930      	cbnz	r0, 80167e8 <__multiply+0x44>
 80167da:	4602      	mov	r2, r0
 80167dc:	4b42      	ldr	r3, [pc, #264]	; (80168e8 <__multiply+0x144>)
 80167de:	4843      	ldr	r0, [pc, #268]	; (80168ec <__multiply+0x148>)
 80167e0:	f240 115d 	movw	r1, #349	; 0x15d
 80167e4:	f7fe f9f4 	bl	8014bd0 <__assert_func>
 80167e8:	f100 0614 	add.w	r6, r0, #20
 80167ec:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80167f0:	4633      	mov	r3, r6
 80167f2:	2200      	movs	r2, #0
 80167f4:	4543      	cmp	r3, r8
 80167f6:	d31e      	bcc.n	8016836 <__multiply+0x92>
 80167f8:	f105 0c14 	add.w	ip, r5, #20
 80167fc:	f104 0314 	add.w	r3, r4, #20
 8016800:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8016804:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8016808:	9202      	str	r2, [sp, #8]
 801680a:	ebac 0205 	sub.w	r2, ip, r5
 801680e:	3a15      	subs	r2, #21
 8016810:	f022 0203 	bic.w	r2, r2, #3
 8016814:	3204      	adds	r2, #4
 8016816:	f105 0115 	add.w	r1, r5, #21
 801681a:	458c      	cmp	ip, r1
 801681c:	bf38      	it	cc
 801681e:	2204      	movcc	r2, #4
 8016820:	9201      	str	r2, [sp, #4]
 8016822:	9a02      	ldr	r2, [sp, #8]
 8016824:	9303      	str	r3, [sp, #12]
 8016826:	429a      	cmp	r2, r3
 8016828:	d808      	bhi.n	801683c <__multiply+0x98>
 801682a:	2f00      	cmp	r7, #0
 801682c:	dc55      	bgt.n	80168da <__multiply+0x136>
 801682e:	6107      	str	r7, [r0, #16]
 8016830:	b005      	add	sp, #20
 8016832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016836:	f843 2b04 	str.w	r2, [r3], #4
 801683a:	e7db      	b.n	80167f4 <__multiply+0x50>
 801683c:	f8b3 a000 	ldrh.w	sl, [r3]
 8016840:	f1ba 0f00 	cmp.w	sl, #0
 8016844:	d020      	beq.n	8016888 <__multiply+0xe4>
 8016846:	f105 0e14 	add.w	lr, r5, #20
 801684a:	46b1      	mov	r9, r6
 801684c:	2200      	movs	r2, #0
 801684e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8016852:	f8d9 b000 	ldr.w	fp, [r9]
 8016856:	b2a1      	uxth	r1, r4
 8016858:	fa1f fb8b 	uxth.w	fp, fp
 801685c:	fb0a b101 	mla	r1, sl, r1, fp
 8016860:	4411      	add	r1, r2
 8016862:	f8d9 2000 	ldr.w	r2, [r9]
 8016866:	0c24      	lsrs	r4, r4, #16
 8016868:	0c12      	lsrs	r2, r2, #16
 801686a:	fb0a 2404 	mla	r4, sl, r4, r2
 801686e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8016872:	b289      	uxth	r1, r1
 8016874:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8016878:	45f4      	cmp	ip, lr
 801687a:	f849 1b04 	str.w	r1, [r9], #4
 801687e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8016882:	d8e4      	bhi.n	801684e <__multiply+0xaa>
 8016884:	9901      	ldr	r1, [sp, #4]
 8016886:	5072      	str	r2, [r6, r1]
 8016888:	9a03      	ldr	r2, [sp, #12]
 801688a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801688e:	3304      	adds	r3, #4
 8016890:	f1b9 0f00 	cmp.w	r9, #0
 8016894:	d01f      	beq.n	80168d6 <__multiply+0x132>
 8016896:	6834      	ldr	r4, [r6, #0]
 8016898:	f105 0114 	add.w	r1, r5, #20
 801689c:	46b6      	mov	lr, r6
 801689e:	f04f 0a00 	mov.w	sl, #0
 80168a2:	880a      	ldrh	r2, [r1, #0]
 80168a4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80168a8:	fb09 b202 	mla	r2, r9, r2, fp
 80168ac:	4492      	add	sl, r2
 80168ae:	b2a4      	uxth	r4, r4
 80168b0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80168b4:	f84e 4b04 	str.w	r4, [lr], #4
 80168b8:	f851 4b04 	ldr.w	r4, [r1], #4
 80168bc:	f8be 2000 	ldrh.w	r2, [lr]
 80168c0:	0c24      	lsrs	r4, r4, #16
 80168c2:	fb09 2404 	mla	r4, r9, r4, r2
 80168c6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80168ca:	458c      	cmp	ip, r1
 80168cc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80168d0:	d8e7      	bhi.n	80168a2 <__multiply+0xfe>
 80168d2:	9a01      	ldr	r2, [sp, #4]
 80168d4:	50b4      	str	r4, [r6, r2]
 80168d6:	3604      	adds	r6, #4
 80168d8:	e7a3      	b.n	8016822 <__multiply+0x7e>
 80168da:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d1a5      	bne.n	801682e <__multiply+0x8a>
 80168e2:	3f01      	subs	r7, #1
 80168e4:	e7a1      	b.n	801682a <__multiply+0x86>
 80168e6:	bf00      	nop
 80168e8:	08019f85 	.word	0x08019f85
 80168ec:	0801a014 	.word	0x0801a014

080168f0 <__pow5mult>:
 80168f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80168f4:	4615      	mov	r5, r2
 80168f6:	f012 0203 	ands.w	r2, r2, #3
 80168fa:	4606      	mov	r6, r0
 80168fc:	460f      	mov	r7, r1
 80168fe:	d007      	beq.n	8016910 <__pow5mult+0x20>
 8016900:	4c25      	ldr	r4, [pc, #148]	; (8016998 <__pow5mult+0xa8>)
 8016902:	3a01      	subs	r2, #1
 8016904:	2300      	movs	r3, #0
 8016906:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801690a:	f7ff fe51 	bl	80165b0 <__multadd>
 801690e:	4607      	mov	r7, r0
 8016910:	10ad      	asrs	r5, r5, #2
 8016912:	d03d      	beq.n	8016990 <__pow5mult+0xa0>
 8016914:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016916:	b97c      	cbnz	r4, 8016938 <__pow5mult+0x48>
 8016918:	2010      	movs	r0, #16
 801691a:	f7fb fac3 	bl	8011ea4 <malloc>
 801691e:	4602      	mov	r2, r0
 8016920:	6270      	str	r0, [r6, #36]	; 0x24
 8016922:	b928      	cbnz	r0, 8016930 <__pow5mult+0x40>
 8016924:	4b1d      	ldr	r3, [pc, #116]	; (801699c <__pow5mult+0xac>)
 8016926:	481e      	ldr	r0, [pc, #120]	; (80169a0 <__pow5mult+0xb0>)
 8016928:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801692c:	f7fe f950 	bl	8014bd0 <__assert_func>
 8016930:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016934:	6004      	str	r4, [r0, #0]
 8016936:	60c4      	str	r4, [r0, #12]
 8016938:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801693c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016940:	b94c      	cbnz	r4, 8016956 <__pow5mult+0x66>
 8016942:	f240 2171 	movw	r1, #625	; 0x271
 8016946:	4630      	mov	r0, r6
 8016948:	f7ff ff16 	bl	8016778 <__i2b>
 801694c:	2300      	movs	r3, #0
 801694e:	f8c8 0008 	str.w	r0, [r8, #8]
 8016952:	4604      	mov	r4, r0
 8016954:	6003      	str	r3, [r0, #0]
 8016956:	f04f 0900 	mov.w	r9, #0
 801695a:	07eb      	lsls	r3, r5, #31
 801695c:	d50a      	bpl.n	8016974 <__pow5mult+0x84>
 801695e:	4639      	mov	r1, r7
 8016960:	4622      	mov	r2, r4
 8016962:	4630      	mov	r0, r6
 8016964:	f7ff ff1e 	bl	80167a4 <__multiply>
 8016968:	4639      	mov	r1, r7
 801696a:	4680      	mov	r8, r0
 801696c:	4630      	mov	r0, r6
 801696e:	f7ff fdfd 	bl	801656c <_Bfree>
 8016972:	4647      	mov	r7, r8
 8016974:	106d      	asrs	r5, r5, #1
 8016976:	d00b      	beq.n	8016990 <__pow5mult+0xa0>
 8016978:	6820      	ldr	r0, [r4, #0]
 801697a:	b938      	cbnz	r0, 801698c <__pow5mult+0x9c>
 801697c:	4622      	mov	r2, r4
 801697e:	4621      	mov	r1, r4
 8016980:	4630      	mov	r0, r6
 8016982:	f7ff ff0f 	bl	80167a4 <__multiply>
 8016986:	6020      	str	r0, [r4, #0]
 8016988:	f8c0 9000 	str.w	r9, [r0]
 801698c:	4604      	mov	r4, r0
 801698e:	e7e4      	b.n	801695a <__pow5mult+0x6a>
 8016990:	4638      	mov	r0, r7
 8016992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016996:	bf00      	nop
 8016998:	0801a168 	.word	0x0801a168
 801699c:	08019c7c 	.word	0x08019c7c
 80169a0:	0801a014 	.word	0x0801a014

080169a4 <__lshift>:
 80169a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80169a8:	460c      	mov	r4, r1
 80169aa:	6849      	ldr	r1, [r1, #4]
 80169ac:	6923      	ldr	r3, [r4, #16]
 80169ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80169b2:	68a3      	ldr	r3, [r4, #8]
 80169b4:	4607      	mov	r7, r0
 80169b6:	4691      	mov	r9, r2
 80169b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80169bc:	f108 0601 	add.w	r6, r8, #1
 80169c0:	42b3      	cmp	r3, r6
 80169c2:	db0b      	blt.n	80169dc <__lshift+0x38>
 80169c4:	4638      	mov	r0, r7
 80169c6:	f7ff fd91 	bl	80164ec <_Balloc>
 80169ca:	4605      	mov	r5, r0
 80169cc:	b948      	cbnz	r0, 80169e2 <__lshift+0x3e>
 80169ce:	4602      	mov	r2, r0
 80169d0:	4b28      	ldr	r3, [pc, #160]	; (8016a74 <__lshift+0xd0>)
 80169d2:	4829      	ldr	r0, [pc, #164]	; (8016a78 <__lshift+0xd4>)
 80169d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80169d8:	f7fe f8fa 	bl	8014bd0 <__assert_func>
 80169dc:	3101      	adds	r1, #1
 80169de:	005b      	lsls	r3, r3, #1
 80169e0:	e7ee      	b.n	80169c0 <__lshift+0x1c>
 80169e2:	2300      	movs	r3, #0
 80169e4:	f100 0114 	add.w	r1, r0, #20
 80169e8:	f100 0210 	add.w	r2, r0, #16
 80169ec:	4618      	mov	r0, r3
 80169ee:	4553      	cmp	r3, sl
 80169f0:	db33      	blt.n	8016a5a <__lshift+0xb6>
 80169f2:	6920      	ldr	r0, [r4, #16]
 80169f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80169f8:	f104 0314 	add.w	r3, r4, #20
 80169fc:	f019 091f 	ands.w	r9, r9, #31
 8016a00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016a04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016a08:	d02b      	beq.n	8016a62 <__lshift+0xbe>
 8016a0a:	f1c9 0e20 	rsb	lr, r9, #32
 8016a0e:	468a      	mov	sl, r1
 8016a10:	2200      	movs	r2, #0
 8016a12:	6818      	ldr	r0, [r3, #0]
 8016a14:	fa00 f009 	lsl.w	r0, r0, r9
 8016a18:	4302      	orrs	r2, r0
 8016a1a:	f84a 2b04 	str.w	r2, [sl], #4
 8016a1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a22:	459c      	cmp	ip, r3
 8016a24:	fa22 f20e 	lsr.w	r2, r2, lr
 8016a28:	d8f3      	bhi.n	8016a12 <__lshift+0x6e>
 8016a2a:	ebac 0304 	sub.w	r3, ip, r4
 8016a2e:	3b15      	subs	r3, #21
 8016a30:	f023 0303 	bic.w	r3, r3, #3
 8016a34:	3304      	adds	r3, #4
 8016a36:	f104 0015 	add.w	r0, r4, #21
 8016a3a:	4584      	cmp	ip, r0
 8016a3c:	bf38      	it	cc
 8016a3e:	2304      	movcc	r3, #4
 8016a40:	50ca      	str	r2, [r1, r3]
 8016a42:	b10a      	cbz	r2, 8016a48 <__lshift+0xa4>
 8016a44:	f108 0602 	add.w	r6, r8, #2
 8016a48:	3e01      	subs	r6, #1
 8016a4a:	4638      	mov	r0, r7
 8016a4c:	612e      	str	r6, [r5, #16]
 8016a4e:	4621      	mov	r1, r4
 8016a50:	f7ff fd8c 	bl	801656c <_Bfree>
 8016a54:	4628      	mov	r0, r5
 8016a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8016a5e:	3301      	adds	r3, #1
 8016a60:	e7c5      	b.n	80169ee <__lshift+0x4a>
 8016a62:	3904      	subs	r1, #4
 8016a64:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a68:	f841 2f04 	str.w	r2, [r1, #4]!
 8016a6c:	459c      	cmp	ip, r3
 8016a6e:	d8f9      	bhi.n	8016a64 <__lshift+0xc0>
 8016a70:	e7ea      	b.n	8016a48 <__lshift+0xa4>
 8016a72:	bf00      	nop
 8016a74:	08019f85 	.word	0x08019f85
 8016a78:	0801a014 	.word	0x0801a014

08016a7c <__mcmp>:
 8016a7c:	b530      	push	{r4, r5, lr}
 8016a7e:	6902      	ldr	r2, [r0, #16]
 8016a80:	690c      	ldr	r4, [r1, #16]
 8016a82:	1b12      	subs	r2, r2, r4
 8016a84:	d10e      	bne.n	8016aa4 <__mcmp+0x28>
 8016a86:	f100 0314 	add.w	r3, r0, #20
 8016a8a:	3114      	adds	r1, #20
 8016a8c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016a90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016a94:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016a98:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016a9c:	42a5      	cmp	r5, r4
 8016a9e:	d003      	beq.n	8016aa8 <__mcmp+0x2c>
 8016aa0:	d305      	bcc.n	8016aae <__mcmp+0x32>
 8016aa2:	2201      	movs	r2, #1
 8016aa4:	4610      	mov	r0, r2
 8016aa6:	bd30      	pop	{r4, r5, pc}
 8016aa8:	4283      	cmp	r3, r0
 8016aaa:	d3f3      	bcc.n	8016a94 <__mcmp+0x18>
 8016aac:	e7fa      	b.n	8016aa4 <__mcmp+0x28>
 8016aae:	f04f 32ff 	mov.w	r2, #4294967295
 8016ab2:	e7f7      	b.n	8016aa4 <__mcmp+0x28>

08016ab4 <__mdiff>:
 8016ab4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ab8:	460c      	mov	r4, r1
 8016aba:	4606      	mov	r6, r0
 8016abc:	4611      	mov	r1, r2
 8016abe:	4620      	mov	r0, r4
 8016ac0:	4617      	mov	r7, r2
 8016ac2:	f7ff ffdb 	bl	8016a7c <__mcmp>
 8016ac6:	1e05      	subs	r5, r0, #0
 8016ac8:	d110      	bne.n	8016aec <__mdiff+0x38>
 8016aca:	4629      	mov	r1, r5
 8016acc:	4630      	mov	r0, r6
 8016ace:	f7ff fd0d 	bl	80164ec <_Balloc>
 8016ad2:	b930      	cbnz	r0, 8016ae2 <__mdiff+0x2e>
 8016ad4:	4b39      	ldr	r3, [pc, #228]	; (8016bbc <__mdiff+0x108>)
 8016ad6:	4602      	mov	r2, r0
 8016ad8:	f240 2132 	movw	r1, #562	; 0x232
 8016adc:	4838      	ldr	r0, [pc, #224]	; (8016bc0 <__mdiff+0x10c>)
 8016ade:	f7fe f877 	bl	8014bd0 <__assert_func>
 8016ae2:	2301      	movs	r3, #1
 8016ae4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016ae8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016aec:	bfa4      	itt	ge
 8016aee:	463b      	movge	r3, r7
 8016af0:	4627      	movge	r7, r4
 8016af2:	4630      	mov	r0, r6
 8016af4:	6879      	ldr	r1, [r7, #4]
 8016af6:	bfa6      	itte	ge
 8016af8:	461c      	movge	r4, r3
 8016afa:	2500      	movge	r5, #0
 8016afc:	2501      	movlt	r5, #1
 8016afe:	f7ff fcf5 	bl	80164ec <_Balloc>
 8016b02:	b920      	cbnz	r0, 8016b0e <__mdiff+0x5a>
 8016b04:	4b2d      	ldr	r3, [pc, #180]	; (8016bbc <__mdiff+0x108>)
 8016b06:	4602      	mov	r2, r0
 8016b08:	f44f 7110 	mov.w	r1, #576	; 0x240
 8016b0c:	e7e6      	b.n	8016adc <__mdiff+0x28>
 8016b0e:	693e      	ldr	r6, [r7, #16]
 8016b10:	60c5      	str	r5, [r0, #12]
 8016b12:	6925      	ldr	r5, [r4, #16]
 8016b14:	f107 0114 	add.w	r1, r7, #20
 8016b18:	f104 0914 	add.w	r9, r4, #20
 8016b1c:	f100 0e14 	add.w	lr, r0, #20
 8016b20:	f107 0210 	add.w	r2, r7, #16
 8016b24:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8016b28:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8016b2c:	46f2      	mov	sl, lr
 8016b2e:	2700      	movs	r7, #0
 8016b30:	f859 3b04 	ldr.w	r3, [r9], #4
 8016b34:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016b38:	fa1f f883 	uxth.w	r8, r3
 8016b3c:	fa17 f78b 	uxtah	r7, r7, fp
 8016b40:	0c1b      	lsrs	r3, r3, #16
 8016b42:	eba7 0808 	sub.w	r8, r7, r8
 8016b46:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016b4a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016b4e:	fa1f f888 	uxth.w	r8, r8
 8016b52:	141f      	asrs	r7, r3, #16
 8016b54:	454d      	cmp	r5, r9
 8016b56:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016b5a:	f84a 3b04 	str.w	r3, [sl], #4
 8016b5e:	d8e7      	bhi.n	8016b30 <__mdiff+0x7c>
 8016b60:	1b2b      	subs	r3, r5, r4
 8016b62:	3b15      	subs	r3, #21
 8016b64:	f023 0303 	bic.w	r3, r3, #3
 8016b68:	3304      	adds	r3, #4
 8016b6a:	3415      	adds	r4, #21
 8016b6c:	42a5      	cmp	r5, r4
 8016b6e:	bf38      	it	cc
 8016b70:	2304      	movcc	r3, #4
 8016b72:	4419      	add	r1, r3
 8016b74:	4473      	add	r3, lr
 8016b76:	469e      	mov	lr, r3
 8016b78:	460d      	mov	r5, r1
 8016b7a:	4565      	cmp	r5, ip
 8016b7c:	d30e      	bcc.n	8016b9c <__mdiff+0xe8>
 8016b7e:	f10c 0203 	add.w	r2, ip, #3
 8016b82:	1a52      	subs	r2, r2, r1
 8016b84:	f022 0203 	bic.w	r2, r2, #3
 8016b88:	3903      	subs	r1, #3
 8016b8a:	458c      	cmp	ip, r1
 8016b8c:	bf38      	it	cc
 8016b8e:	2200      	movcc	r2, #0
 8016b90:	441a      	add	r2, r3
 8016b92:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8016b96:	b17b      	cbz	r3, 8016bb8 <__mdiff+0x104>
 8016b98:	6106      	str	r6, [r0, #16]
 8016b9a:	e7a5      	b.n	8016ae8 <__mdiff+0x34>
 8016b9c:	f855 8b04 	ldr.w	r8, [r5], #4
 8016ba0:	fa17 f488 	uxtah	r4, r7, r8
 8016ba4:	1422      	asrs	r2, r4, #16
 8016ba6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8016baa:	b2a4      	uxth	r4, r4
 8016bac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8016bb0:	f84e 4b04 	str.w	r4, [lr], #4
 8016bb4:	1417      	asrs	r7, r2, #16
 8016bb6:	e7e0      	b.n	8016b7a <__mdiff+0xc6>
 8016bb8:	3e01      	subs	r6, #1
 8016bba:	e7ea      	b.n	8016b92 <__mdiff+0xde>
 8016bbc:	08019f85 	.word	0x08019f85
 8016bc0:	0801a014 	.word	0x0801a014

08016bc4 <__ulp>:
 8016bc4:	b082      	sub	sp, #8
 8016bc6:	ed8d 0b00 	vstr	d0, [sp]
 8016bca:	9b01      	ldr	r3, [sp, #4]
 8016bcc:	4912      	ldr	r1, [pc, #72]	; (8016c18 <__ulp+0x54>)
 8016bce:	4019      	ands	r1, r3
 8016bd0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8016bd4:	2900      	cmp	r1, #0
 8016bd6:	dd05      	ble.n	8016be4 <__ulp+0x20>
 8016bd8:	2200      	movs	r2, #0
 8016bda:	460b      	mov	r3, r1
 8016bdc:	ec43 2b10 	vmov	d0, r2, r3
 8016be0:	b002      	add	sp, #8
 8016be2:	4770      	bx	lr
 8016be4:	4249      	negs	r1, r1
 8016be6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8016bea:	ea4f 5021 	mov.w	r0, r1, asr #20
 8016bee:	f04f 0200 	mov.w	r2, #0
 8016bf2:	f04f 0300 	mov.w	r3, #0
 8016bf6:	da04      	bge.n	8016c02 <__ulp+0x3e>
 8016bf8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8016bfc:	fa41 f300 	asr.w	r3, r1, r0
 8016c00:	e7ec      	b.n	8016bdc <__ulp+0x18>
 8016c02:	f1a0 0114 	sub.w	r1, r0, #20
 8016c06:	291e      	cmp	r1, #30
 8016c08:	bfda      	itte	le
 8016c0a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8016c0e:	fa20 f101 	lsrle.w	r1, r0, r1
 8016c12:	2101      	movgt	r1, #1
 8016c14:	460a      	mov	r2, r1
 8016c16:	e7e1      	b.n	8016bdc <__ulp+0x18>
 8016c18:	7ff00000 	.word	0x7ff00000

08016c1c <__b2d>:
 8016c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c1e:	6905      	ldr	r5, [r0, #16]
 8016c20:	f100 0714 	add.w	r7, r0, #20
 8016c24:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016c28:	1f2e      	subs	r6, r5, #4
 8016c2a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016c2e:	4620      	mov	r0, r4
 8016c30:	f7ff fd52 	bl	80166d8 <__hi0bits>
 8016c34:	f1c0 0320 	rsb	r3, r0, #32
 8016c38:	280a      	cmp	r0, #10
 8016c3a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8016cb8 <__b2d+0x9c>
 8016c3e:	600b      	str	r3, [r1, #0]
 8016c40:	dc14      	bgt.n	8016c6c <__b2d+0x50>
 8016c42:	f1c0 0e0b 	rsb	lr, r0, #11
 8016c46:	fa24 f10e 	lsr.w	r1, r4, lr
 8016c4a:	42b7      	cmp	r7, r6
 8016c4c:	ea41 030c 	orr.w	r3, r1, ip
 8016c50:	bf34      	ite	cc
 8016c52:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016c56:	2100      	movcs	r1, #0
 8016c58:	3015      	adds	r0, #21
 8016c5a:	fa04 f000 	lsl.w	r0, r4, r0
 8016c5e:	fa21 f10e 	lsr.w	r1, r1, lr
 8016c62:	ea40 0201 	orr.w	r2, r0, r1
 8016c66:	ec43 2b10 	vmov	d0, r2, r3
 8016c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c6c:	42b7      	cmp	r7, r6
 8016c6e:	bf3a      	itte	cc
 8016c70:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016c74:	f1a5 0608 	subcc.w	r6, r5, #8
 8016c78:	2100      	movcs	r1, #0
 8016c7a:	380b      	subs	r0, #11
 8016c7c:	d017      	beq.n	8016cae <__b2d+0x92>
 8016c7e:	f1c0 0c20 	rsb	ip, r0, #32
 8016c82:	fa04 f500 	lsl.w	r5, r4, r0
 8016c86:	42be      	cmp	r6, r7
 8016c88:	fa21 f40c 	lsr.w	r4, r1, ip
 8016c8c:	ea45 0504 	orr.w	r5, r5, r4
 8016c90:	bf8c      	ite	hi
 8016c92:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016c96:	2400      	movls	r4, #0
 8016c98:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8016c9c:	fa01 f000 	lsl.w	r0, r1, r0
 8016ca0:	fa24 f40c 	lsr.w	r4, r4, ip
 8016ca4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016ca8:	ea40 0204 	orr.w	r2, r0, r4
 8016cac:	e7db      	b.n	8016c66 <__b2d+0x4a>
 8016cae:	ea44 030c 	orr.w	r3, r4, ip
 8016cb2:	460a      	mov	r2, r1
 8016cb4:	e7d7      	b.n	8016c66 <__b2d+0x4a>
 8016cb6:	bf00      	nop
 8016cb8:	3ff00000 	.word	0x3ff00000

08016cbc <__d2b>:
 8016cbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016cc0:	4689      	mov	r9, r1
 8016cc2:	2101      	movs	r1, #1
 8016cc4:	ec57 6b10 	vmov	r6, r7, d0
 8016cc8:	4690      	mov	r8, r2
 8016cca:	f7ff fc0f 	bl	80164ec <_Balloc>
 8016cce:	4604      	mov	r4, r0
 8016cd0:	b930      	cbnz	r0, 8016ce0 <__d2b+0x24>
 8016cd2:	4602      	mov	r2, r0
 8016cd4:	4b25      	ldr	r3, [pc, #148]	; (8016d6c <__d2b+0xb0>)
 8016cd6:	4826      	ldr	r0, [pc, #152]	; (8016d70 <__d2b+0xb4>)
 8016cd8:	f240 310a 	movw	r1, #778	; 0x30a
 8016cdc:	f7fd ff78 	bl	8014bd0 <__assert_func>
 8016ce0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8016ce4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016ce8:	bb35      	cbnz	r5, 8016d38 <__d2b+0x7c>
 8016cea:	2e00      	cmp	r6, #0
 8016cec:	9301      	str	r3, [sp, #4]
 8016cee:	d028      	beq.n	8016d42 <__d2b+0x86>
 8016cf0:	4668      	mov	r0, sp
 8016cf2:	9600      	str	r6, [sp, #0]
 8016cf4:	f7ff fd10 	bl	8016718 <__lo0bits>
 8016cf8:	9900      	ldr	r1, [sp, #0]
 8016cfa:	b300      	cbz	r0, 8016d3e <__d2b+0x82>
 8016cfc:	9a01      	ldr	r2, [sp, #4]
 8016cfe:	f1c0 0320 	rsb	r3, r0, #32
 8016d02:	fa02 f303 	lsl.w	r3, r2, r3
 8016d06:	430b      	orrs	r3, r1
 8016d08:	40c2      	lsrs	r2, r0
 8016d0a:	6163      	str	r3, [r4, #20]
 8016d0c:	9201      	str	r2, [sp, #4]
 8016d0e:	9b01      	ldr	r3, [sp, #4]
 8016d10:	61a3      	str	r3, [r4, #24]
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	bf14      	ite	ne
 8016d16:	2202      	movne	r2, #2
 8016d18:	2201      	moveq	r2, #1
 8016d1a:	6122      	str	r2, [r4, #16]
 8016d1c:	b1d5      	cbz	r5, 8016d54 <__d2b+0x98>
 8016d1e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016d22:	4405      	add	r5, r0
 8016d24:	f8c9 5000 	str.w	r5, [r9]
 8016d28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016d2c:	f8c8 0000 	str.w	r0, [r8]
 8016d30:	4620      	mov	r0, r4
 8016d32:	b003      	add	sp, #12
 8016d34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016d3c:	e7d5      	b.n	8016cea <__d2b+0x2e>
 8016d3e:	6161      	str	r1, [r4, #20]
 8016d40:	e7e5      	b.n	8016d0e <__d2b+0x52>
 8016d42:	a801      	add	r0, sp, #4
 8016d44:	f7ff fce8 	bl	8016718 <__lo0bits>
 8016d48:	9b01      	ldr	r3, [sp, #4]
 8016d4a:	6163      	str	r3, [r4, #20]
 8016d4c:	2201      	movs	r2, #1
 8016d4e:	6122      	str	r2, [r4, #16]
 8016d50:	3020      	adds	r0, #32
 8016d52:	e7e3      	b.n	8016d1c <__d2b+0x60>
 8016d54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016d58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016d5c:	f8c9 0000 	str.w	r0, [r9]
 8016d60:	6918      	ldr	r0, [r3, #16]
 8016d62:	f7ff fcb9 	bl	80166d8 <__hi0bits>
 8016d66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016d6a:	e7df      	b.n	8016d2c <__d2b+0x70>
 8016d6c:	08019f85 	.word	0x08019f85
 8016d70:	0801a014 	.word	0x0801a014

08016d74 <__ratio>:
 8016d74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d78:	4688      	mov	r8, r1
 8016d7a:	4669      	mov	r1, sp
 8016d7c:	4681      	mov	r9, r0
 8016d7e:	f7ff ff4d 	bl	8016c1c <__b2d>
 8016d82:	a901      	add	r1, sp, #4
 8016d84:	4640      	mov	r0, r8
 8016d86:	ec55 4b10 	vmov	r4, r5, d0
 8016d8a:	f7ff ff47 	bl	8016c1c <__b2d>
 8016d8e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016d92:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016d96:	eba3 0c02 	sub.w	ip, r3, r2
 8016d9a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016d9e:	1a9b      	subs	r3, r3, r2
 8016da0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016da4:	ec51 0b10 	vmov	r0, r1, d0
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	bfd6      	itet	le
 8016dac:	460a      	movle	r2, r1
 8016dae:	462a      	movgt	r2, r5
 8016db0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016db4:	468b      	mov	fp, r1
 8016db6:	462f      	mov	r7, r5
 8016db8:	bfd4      	ite	le
 8016dba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8016dbe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8016dc2:	4620      	mov	r0, r4
 8016dc4:	ee10 2a10 	vmov	r2, s0
 8016dc8:	465b      	mov	r3, fp
 8016dca:	4639      	mov	r1, r7
 8016dcc:	f7e9 fd5e 	bl	800088c <__aeabi_ddiv>
 8016dd0:	ec41 0b10 	vmov	d0, r0, r1
 8016dd4:	b003      	add	sp, #12
 8016dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016dda <__copybits>:
 8016dda:	3901      	subs	r1, #1
 8016ddc:	b570      	push	{r4, r5, r6, lr}
 8016dde:	1149      	asrs	r1, r1, #5
 8016de0:	6914      	ldr	r4, [r2, #16]
 8016de2:	3101      	adds	r1, #1
 8016de4:	f102 0314 	add.w	r3, r2, #20
 8016de8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016dec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016df0:	1f05      	subs	r5, r0, #4
 8016df2:	42a3      	cmp	r3, r4
 8016df4:	d30c      	bcc.n	8016e10 <__copybits+0x36>
 8016df6:	1aa3      	subs	r3, r4, r2
 8016df8:	3b11      	subs	r3, #17
 8016dfa:	f023 0303 	bic.w	r3, r3, #3
 8016dfe:	3211      	adds	r2, #17
 8016e00:	42a2      	cmp	r2, r4
 8016e02:	bf88      	it	hi
 8016e04:	2300      	movhi	r3, #0
 8016e06:	4418      	add	r0, r3
 8016e08:	2300      	movs	r3, #0
 8016e0a:	4288      	cmp	r0, r1
 8016e0c:	d305      	bcc.n	8016e1a <__copybits+0x40>
 8016e0e:	bd70      	pop	{r4, r5, r6, pc}
 8016e10:	f853 6b04 	ldr.w	r6, [r3], #4
 8016e14:	f845 6f04 	str.w	r6, [r5, #4]!
 8016e18:	e7eb      	b.n	8016df2 <__copybits+0x18>
 8016e1a:	f840 3b04 	str.w	r3, [r0], #4
 8016e1e:	e7f4      	b.n	8016e0a <__copybits+0x30>

08016e20 <__any_on>:
 8016e20:	f100 0214 	add.w	r2, r0, #20
 8016e24:	6900      	ldr	r0, [r0, #16]
 8016e26:	114b      	asrs	r3, r1, #5
 8016e28:	4298      	cmp	r0, r3
 8016e2a:	b510      	push	{r4, lr}
 8016e2c:	db11      	blt.n	8016e52 <__any_on+0x32>
 8016e2e:	dd0a      	ble.n	8016e46 <__any_on+0x26>
 8016e30:	f011 011f 	ands.w	r1, r1, #31
 8016e34:	d007      	beq.n	8016e46 <__any_on+0x26>
 8016e36:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016e3a:	fa24 f001 	lsr.w	r0, r4, r1
 8016e3e:	fa00 f101 	lsl.w	r1, r0, r1
 8016e42:	428c      	cmp	r4, r1
 8016e44:	d10b      	bne.n	8016e5e <__any_on+0x3e>
 8016e46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016e4a:	4293      	cmp	r3, r2
 8016e4c:	d803      	bhi.n	8016e56 <__any_on+0x36>
 8016e4e:	2000      	movs	r0, #0
 8016e50:	bd10      	pop	{r4, pc}
 8016e52:	4603      	mov	r3, r0
 8016e54:	e7f7      	b.n	8016e46 <__any_on+0x26>
 8016e56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016e5a:	2900      	cmp	r1, #0
 8016e5c:	d0f5      	beq.n	8016e4a <__any_on+0x2a>
 8016e5e:	2001      	movs	r0, #1
 8016e60:	e7f6      	b.n	8016e50 <__any_on+0x30>

08016e62 <_calloc_r>:
 8016e62:	b513      	push	{r0, r1, r4, lr}
 8016e64:	434a      	muls	r2, r1
 8016e66:	4611      	mov	r1, r2
 8016e68:	9201      	str	r2, [sp, #4]
 8016e6a:	f7fb fb29 	bl	80124c0 <_malloc_r>
 8016e6e:	4604      	mov	r4, r0
 8016e70:	b118      	cbz	r0, 8016e7a <_calloc_r+0x18>
 8016e72:	9a01      	ldr	r2, [sp, #4]
 8016e74:	2100      	movs	r1, #0
 8016e76:	f7fb f84d 	bl	8011f14 <memset>
 8016e7a:	4620      	mov	r0, r4
 8016e7c:	b002      	add	sp, #8
 8016e7e:	bd10      	pop	{r4, pc}

08016e80 <_realloc_r>:
 8016e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e82:	4607      	mov	r7, r0
 8016e84:	4614      	mov	r4, r2
 8016e86:	460e      	mov	r6, r1
 8016e88:	b921      	cbnz	r1, 8016e94 <_realloc_r+0x14>
 8016e8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016e8e:	4611      	mov	r1, r2
 8016e90:	f7fb bb16 	b.w	80124c0 <_malloc_r>
 8016e94:	b922      	cbnz	r2, 8016ea0 <_realloc_r+0x20>
 8016e96:	f7fb fac3 	bl	8012420 <_free_r>
 8016e9a:	4625      	mov	r5, r4
 8016e9c:	4628      	mov	r0, r5
 8016e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ea0:	f000 feaa 	bl	8017bf8 <_malloc_usable_size_r>
 8016ea4:	42a0      	cmp	r0, r4
 8016ea6:	d20f      	bcs.n	8016ec8 <_realloc_r+0x48>
 8016ea8:	4621      	mov	r1, r4
 8016eaa:	4638      	mov	r0, r7
 8016eac:	f7fb fb08 	bl	80124c0 <_malloc_r>
 8016eb0:	4605      	mov	r5, r0
 8016eb2:	2800      	cmp	r0, #0
 8016eb4:	d0f2      	beq.n	8016e9c <_realloc_r+0x1c>
 8016eb6:	4631      	mov	r1, r6
 8016eb8:	4622      	mov	r2, r4
 8016eba:	f7fb f803 	bl	8011ec4 <memcpy>
 8016ebe:	4631      	mov	r1, r6
 8016ec0:	4638      	mov	r0, r7
 8016ec2:	f7fb faad 	bl	8012420 <_free_r>
 8016ec6:	e7e9      	b.n	8016e9c <_realloc_r+0x1c>
 8016ec8:	4635      	mov	r5, r6
 8016eca:	e7e7      	b.n	8016e9c <_realloc_r+0x1c>

08016ecc <__ssputs_r>:
 8016ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ed0:	688e      	ldr	r6, [r1, #8]
 8016ed2:	429e      	cmp	r6, r3
 8016ed4:	4682      	mov	sl, r0
 8016ed6:	460c      	mov	r4, r1
 8016ed8:	4690      	mov	r8, r2
 8016eda:	461f      	mov	r7, r3
 8016edc:	d838      	bhi.n	8016f50 <__ssputs_r+0x84>
 8016ede:	898a      	ldrh	r2, [r1, #12]
 8016ee0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016ee4:	d032      	beq.n	8016f4c <__ssputs_r+0x80>
 8016ee6:	6825      	ldr	r5, [r4, #0]
 8016ee8:	6909      	ldr	r1, [r1, #16]
 8016eea:	eba5 0901 	sub.w	r9, r5, r1
 8016eee:	6965      	ldr	r5, [r4, #20]
 8016ef0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016ef4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016ef8:	3301      	adds	r3, #1
 8016efa:	444b      	add	r3, r9
 8016efc:	106d      	asrs	r5, r5, #1
 8016efe:	429d      	cmp	r5, r3
 8016f00:	bf38      	it	cc
 8016f02:	461d      	movcc	r5, r3
 8016f04:	0553      	lsls	r3, r2, #21
 8016f06:	d531      	bpl.n	8016f6c <__ssputs_r+0xa0>
 8016f08:	4629      	mov	r1, r5
 8016f0a:	f7fb fad9 	bl	80124c0 <_malloc_r>
 8016f0e:	4606      	mov	r6, r0
 8016f10:	b950      	cbnz	r0, 8016f28 <__ssputs_r+0x5c>
 8016f12:	230c      	movs	r3, #12
 8016f14:	f8ca 3000 	str.w	r3, [sl]
 8016f18:	89a3      	ldrh	r3, [r4, #12]
 8016f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f1e:	81a3      	strh	r3, [r4, #12]
 8016f20:	f04f 30ff 	mov.w	r0, #4294967295
 8016f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f28:	6921      	ldr	r1, [r4, #16]
 8016f2a:	464a      	mov	r2, r9
 8016f2c:	f7fa ffca 	bl	8011ec4 <memcpy>
 8016f30:	89a3      	ldrh	r3, [r4, #12]
 8016f32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016f3a:	81a3      	strh	r3, [r4, #12]
 8016f3c:	6126      	str	r6, [r4, #16]
 8016f3e:	6165      	str	r5, [r4, #20]
 8016f40:	444e      	add	r6, r9
 8016f42:	eba5 0509 	sub.w	r5, r5, r9
 8016f46:	6026      	str	r6, [r4, #0]
 8016f48:	60a5      	str	r5, [r4, #8]
 8016f4a:	463e      	mov	r6, r7
 8016f4c:	42be      	cmp	r6, r7
 8016f4e:	d900      	bls.n	8016f52 <__ssputs_r+0x86>
 8016f50:	463e      	mov	r6, r7
 8016f52:	4632      	mov	r2, r6
 8016f54:	6820      	ldr	r0, [r4, #0]
 8016f56:	4641      	mov	r1, r8
 8016f58:	f7fa ffc2 	bl	8011ee0 <memmove>
 8016f5c:	68a3      	ldr	r3, [r4, #8]
 8016f5e:	6822      	ldr	r2, [r4, #0]
 8016f60:	1b9b      	subs	r3, r3, r6
 8016f62:	4432      	add	r2, r6
 8016f64:	60a3      	str	r3, [r4, #8]
 8016f66:	6022      	str	r2, [r4, #0]
 8016f68:	2000      	movs	r0, #0
 8016f6a:	e7db      	b.n	8016f24 <__ssputs_r+0x58>
 8016f6c:	462a      	mov	r2, r5
 8016f6e:	f7ff ff87 	bl	8016e80 <_realloc_r>
 8016f72:	4606      	mov	r6, r0
 8016f74:	2800      	cmp	r0, #0
 8016f76:	d1e1      	bne.n	8016f3c <__ssputs_r+0x70>
 8016f78:	6921      	ldr	r1, [r4, #16]
 8016f7a:	4650      	mov	r0, sl
 8016f7c:	f7fb fa50 	bl	8012420 <_free_r>
 8016f80:	e7c7      	b.n	8016f12 <__ssputs_r+0x46>
	...

08016f84 <_svfiprintf_r>:
 8016f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f88:	4698      	mov	r8, r3
 8016f8a:	898b      	ldrh	r3, [r1, #12]
 8016f8c:	061b      	lsls	r3, r3, #24
 8016f8e:	b09d      	sub	sp, #116	; 0x74
 8016f90:	4607      	mov	r7, r0
 8016f92:	460d      	mov	r5, r1
 8016f94:	4614      	mov	r4, r2
 8016f96:	d50e      	bpl.n	8016fb6 <_svfiprintf_r+0x32>
 8016f98:	690b      	ldr	r3, [r1, #16]
 8016f9a:	b963      	cbnz	r3, 8016fb6 <_svfiprintf_r+0x32>
 8016f9c:	2140      	movs	r1, #64	; 0x40
 8016f9e:	f7fb fa8f 	bl	80124c0 <_malloc_r>
 8016fa2:	6028      	str	r0, [r5, #0]
 8016fa4:	6128      	str	r0, [r5, #16]
 8016fa6:	b920      	cbnz	r0, 8016fb2 <_svfiprintf_r+0x2e>
 8016fa8:	230c      	movs	r3, #12
 8016faa:	603b      	str	r3, [r7, #0]
 8016fac:	f04f 30ff 	mov.w	r0, #4294967295
 8016fb0:	e0d1      	b.n	8017156 <_svfiprintf_r+0x1d2>
 8016fb2:	2340      	movs	r3, #64	; 0x40
 8016fb4:	616b      	str	r3, [r5, #20]
 8016fb6:	2300      	movs	r3, #0
 8016fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8016fba:	2320      	movs	r3, #32
 8016fbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016fc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8016fc4:	2330      	movs	r3, #48	; 0x30
 8016fc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017170 <_svfiprintf_r+0x1ec>
 8016fca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016fce:	f04f 0901 	mov.w	r9, #1
 8016fd2:	4623      	mov	r3, r4
 8016fd4:	469a      	mov	sl, r3
 8016fd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016fda:	b10a      	cbz	r2, 8016fe0 <_svfiprintf_r+0x5c>
 8016fdc:	2a25      	cmp	r2, #37	; 0x25
 8016fde:	d1f9      	bne.n	8016fd4 <_svfiprintf_r+0x50>
 8016fe0:	ebba 0b04 	subs.w	fp, sl, r4
 8016fe4:	d00b      	beq.n	8016ffe <_svfiprintf_r+0x7a>
 8016fe6:	465b      	mov	r3, fp
 8016fe8:	4622      	mov	r2, r4
 8016fea:	4629      	mov	r1, r5
 8016fec:	4638      	mov	r0, r7
 8016fee:	f7ff ff6d 	bl	8016ecc <__ssputs_r>
 8016ff2:	3001      	adds	r0, #1
 8016ff4:	f000 80aa 	beq.w	801714c <_svfiprintf_r+0x1c8>
 8016ff8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016ffa:	445a      	add	r2, fp
 8016ffc:	9209      	str	r2, [sp, #36]	; 0x24
 8016ffe:	f89a 3000 	ldrb.w	r3, [sl]
 8017002:	2b00      	cmp	r3, #0
 8017004:	f000 80a2 	beq.w	801714c <_svfiprintf_r+0x1c8>
 8017008:	2300      	movs	r3, #0
 801700a:	f04f 32ff 	mov.w	r2, #4294967295
 801700e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017012:	f10a 0a01 	add.w	sl, sl, #1
 8017016:	9304      	str	r3, [sp, #16]
 8017018:	9307      	str	r3, [sp, #28]
 801701a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801701e:	931a      	str	r3, [sp, #104]	; 0x68
 8017020:	4654      	mov	r4, sl
 8017022:	2205      	movs	r2, #5
 8017024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017028:	4851      	ldr	r0, [pc, #324]	; (8017170 <_svfiprintf_r+0x1ec>)
 801702a:	f7e9 f8f9 	bl	8000220 <memchr>
 801702e:	9a04      	ldr	r2, [sp, #16]
 8017030:	b9d8      	cbnz	r0, 801706a <_svfiprintf_r+0xe6>
 8017032:	06d0      	lsls	r0, r2, #27
 8017034:	bf44      	itt	mi
 8017036:	2320      	movmi	r3, #32
 8017038:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801703c:	0711      	lsls	r1, r2, #28
 801703e:	bf44      	itt	mi
 8017040:	232b      	movmi	r3, #43	; 0x2b
 8017042:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017046:	f89a 3000 	ldrb.w	r3, [sl]
 801704a:	2b2a      	cmp	r3, #42	; 0x2a
 801704c:	d015      	beq.n	801707a <_svfiprintf_r+0xf6>
 801704e:	9a07      	ldr	r2, [sp, #28]
 8017050:	4654      	mov	r4, sl
 8017052:	2000      	movs	r0, #0
 8017054:	f04f 0c0a 	mov.w	ip, #10
 8017058:	4621      	mov	r1, r4
 801705a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801705e:	3b30      	subs	r3, #48	; 0x30
 8017060:	2b09      	cmp	r3, #9
 8017062:	d94e      	bls.n	8017102 <_svfiprintf_r+0x17e>
 8017064:	b1b0      	cbz	r0, 8017094 <_svfiprintf_r+0x110>
 8017066:	9207      	str	r2, [sp, #28]
 8017068:	e014      	b.n	8017094 <_svfiprintf_r+0x110>
 801706a:	eba0 0308 	sub.w	r3, r0, r8
 801706e:	fa09 f303 	lsl.w	r3, r9, r3
 8017072:	4313      	orrs	r3, r2
 8017074:	9304      	str	r3, [sp, #16]
 8017076:	46a2      	mov	sl, r4
 8017078:	e7d2      	b.n	8017020 <_svfiprintf_r+0x9c>
 801707a:	9b03      	ldr	r3, [sp, #12]
 801707c:	1d19      	adds	r1, r3, #4
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	9103      	str	r1, [sp, #12]
 8017082:	2b00      	cmp	r3, #0
 8017084:	bfbb      	ittet	lt
 8017086:	425b      	neglt	r3, r3
 8017088:	f042 0202 	orrlt.w	r2, r2, #2
 801708c:	9307      	strge	r3, [sp, #28]
 801708e:	9307      	strlt	r3, [sp, #28]
 8017090:	bfb8      	it	lt
 8017092:	9204      	strlt	r2, [sp, #16]
 8017094:	7823      	ldrb	r3, [r4, #0]
 8017096:	2b2e      	cmp	r3, #46	; 0x2e
 8017098:	d10c      	bne.n	80170b4 <_svfiprintf_r+0x130>
 801709a:	7863      	ldrb	r3, [r4, #1]
 801709c:	2b2a      	cmp	r3, #42	; 0x2a
 801709e:	d135      	bne.n	801710c <_svfiprintf_r+0x188>
 80170a0:	9b03      	ldr	r3, [sp, #12]
 80170a2:	1d1a      	adds	r2, r3, #4
 80170a4:	681b      	ldr	r3, [r3, #0]
 80170a6:	9203      	str	r2, [sp, #12]
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	bfb8      	it	lt
 80170ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80170b0:	3402      	adds	r4, #2
 80170b2:	9305      	str	r3, [sp, #20]
 80170b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017180 <_svfiprintf_r+0x1fc>
 80170b8:	7821      	ldrb	r1, [r4, #0]
 80170ba:	2203      	movs	r2, #3
 80170bc:	4650      	mov	r0, sl
 80170be:	f7e9 f8af 	bl	8000220 <memchr>
 80170c2:	b140      	cbz	r0, 80170d6 <_svfiprintf_r+0x152>
 80170c4:	2340      	movs	r3, #64	; 0x40
 80170c6:	eba0 000a 	sub.w	r0, r0, sl
 80170ca:	fa03 f000 	lsl.w	r0, r3, r0
 80170ce:	9b04      	ldr	r3, [sp, #16]
 80170d0:	4303      	orrs	r3, r0
 80170d2:	3401      	adds	r4, #1
 80170d4:	9304      	str	r3, [sp, #16]
 80170d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80170da:	4826      	ldr	r0, [pc, #152]	; (8017174 <_svfiprintf_r+0x1f0>)
 80170dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80170e0:	2206      	movs	r2, #6
 80170e2:	f7e9 f89d 	bl	8000220 <memchr>
 80170e6:	2800      	cmp	r0, #0
 80170e8:	d038      	beq.n	801715c <_svfiprintf_r+0x1d8>
 80170ea:	4b23      	ldr	r3, [pc, #140]	; (8017178 <_svfiprintf_r+0x1f4>)
 80170ec:	bb1b      	cbnz	r3, 8017136 <_svfiprintf_r+0x1b2>
 80170ee:	9b03      	ldr	r3, [sp, #12]
 80170f0:	3307      	adds	r3, #7
 80170f2:	f023 0307 	bic.w	r3, r3, #7
 80170f6:	3308      	adds	r3, #8
 80170f8:	9303      	str	r3, [sp, #12]
 80170fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170fc:	4433      	add	r3, r6
 80170fe:	9309      	str	r3, [sp, #36]	; 0x24
 8017100:	e767      	b.n	8016fd2 <_svfiprintf_r+0x4e>
 8017102:	fb0c 3202 	mla	r2, ip, r2, r3
 8017106:	460c      	mov	r4, r1
 8017108:	2001      	movs	r0, #1
 801710a:	e7a5      	b.n	8017058 <_svfiprintf_r+0xd4>
 801710c:	2300      	movs	r3, #0
 801710e:	3401      	adds	r4, #1
 8017110:	9305      	str	r3, [sp, #20]
 8017112:	4619      	mov	r1, r3
 8017114:	f04f 0c0a 	mov.w	ip, #10
 8017118:	4620      	mov	r0, r4
 801711a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801711e:	3a30      	subs	r2, #48	; 0x30
 8017120:	2a09      	cmp	r2, #9
 8017122:	d903      	bls.n	801712c <_svfiprintf_r+0x1a8>
 8017124:	2b00      	cmp	r3, #0
 8017126:	d0c5      	beq.n	80170b4 <_svfiprintf_r+0x130>
 8017128:	9105      	str	r1, [sp, #20]
 801712a:	e7c3      	b.n	80170b4 <_svfiprintf_r+0x130>
 801712c:	fb0c 2101 	mla	r1, ip, r1, r2
 8017130:	4604      	mov	r4, r0
 8017132:	2301      	movs	r3, #1
 8017134:	e7f0      	b.n	8017118 <_svfiprintf_r+0x194>
 8017136:	ab03      	add	r3, sp, #12
 8017138:	9300      	str	r3, [sp, #0]
 801713a:	462a      	mov	r2, r5
 801713c:	4b0f      	ldr	r3, [pc, #60]	; (801717c <_svfiprintf_r+0x1f8>)
 801713e:	a904      	add	r1, sp, #16
 8017140:	4638      	mov	r0, r7
 8017142:	f7fb fab7 	bl	80126b4 <_printf_float>
 8017146:	1c42      	adds	r2, r0, #1
 8017148:	4606      	mov	r6, r0
 801714a:	d1d6      	bne.n	80170fa <_svfiprintf_r+0x176>
 801714c:	89ab      	ldrh	r3, [r5, #12]
 801714e:	065b      	lsls	r3, r3, #25
 8017150:	f53f af2c 	bmi.w	8016fac <_svfiprintf_r+0x28>
 8017154:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017156:	b01d      	add	sp, #116	; 0x74
 8017158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801715c:	ab03      	add	r3, sp, #12
 801715e:	9300      	str	r3, [sp, #0]
 8017160:	462a      	mov	r2, r5
 8017162:	4b06      	ldr	r3, [pc, #24]	; (801717c <_svfiprintf_r+0x1f8>)
 8017164:	a904      	add	r1, sp, #16
 8017166:	4638      	mov	r0, r7
 8017168:	f7fb fd48 	bl	8012bfc <_printf_i>
 801716c:	e7eb      	b.n	8017146 <_svfiprintf_r+0x1c2>
 801716e:	bf00      	nop
 8017170:	0801a174 	.word	0x0801a174
 8017174:	0801a17e 	.word	0x0801a17e
 8017178:	080126b5 	.word	0x080126b5
 801717c:	08016ecd 	.word	0x08016ecd
 8017180:	0801a17a 	.word	0x0801a17a

08017184 <_sungetc_r>:
 8017184:	b538      	push	{r3, r4, r5, lr}
 8017186:	1c4b      	adds	r3, r1, #1
 8017188:	4614      	mov	r4, r2
 801718a:	d103      	bne.n	8017194 <_sungetc_r+0x10>
 801718c:	f04f 35ff 	mov.w	r5, #4294967295
 8017190:	4628      	mov	r0, r5
 8017192:	bd38      	pop	{r3, r4, r5, pc}
 8017194:	8993      	ldrh	r3, [r2, #12]
 8017196:	f023 0320 	bic.w	r3, r3, #32
 801719a:	8193      	strh	r3, [r2, #12]
 801719c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801719e:	6852      	ldr	r2, [r2, #4]
 80171a0:	b2cd      	uxtb	r5, r1
 80171a2:	b18b      	cbz	r3, 80171c8 <_sungetc_r+0x44>
 80171a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80171a6:	4293      	cmp	r3, r2
 80171a8:	dd08      	ble.n	80171bc <_sungetc_r+0x38>
 80171aa:	6823      	ldr	r3, [r4, #0]
 80171ac:	1e5a      	subs	r2, r3, #1
 80171ae:	6022      	str	r2, [r4, #0]
 80171b0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80171b4:	6863      	ldr	r3, [r4, #4]
 80171b6:	3301      	adds	r3, #1
 80171b8:	6063      	str	r3, [r4, #4]
 80171ba:	e7e9      	b.n	8017190 <_sungetc_r+0xc>
 80171bc:	4621      	mov	r1, r4
 80171be:	f000 fca5 	bl	8017b0c <__submore>
 80171c2:	2800      	cmp	r0, #0
 80171c4:	d0f1      	beq.n	80171aa <_sungetc_r+0x26>
 80171c6:	e7e1      	b.n	801718c <_sungetc_r+0x8>
 80171c8:	6921      	ldr	r1, [r4, #16]
 80171ca:	6823      	ldr	r3, [r4, #0]
 80171cc:	b151      	cbz	r1, 80171e4 <_sungetc_r+0x60>
 80171ce:	4299      	cmp	r1, r3
 80171d0:	d208      	bcs.n	80171e4 <_sungetc_r+0x60>
 80171d2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80171d6:	42a9      	cmp	r1, r5
 80171d8:	d104      	bne.n	80171e4 <_sungetc_r+0x60>
 80171da:	3b01      	subs	r3, #1
 80171dc:	3201      	adds	r2, #1
 80171de:	6023      	str	r3, [r4, #0]
 80171e0:	6062      	str	r2, [r4, #4]
 80171e2:	e7d5      	b.n	8017190 <_sungetc_r+0xc>
 80171e4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80171e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80171ec:	6363      	str	r3, [r4, #52]	; 0x34
 80171ee:	2303      	movs	r3, #3
 80171f0:	63a3      	str	r3, [r4, #56]	; 0x38
 80171f2:	4623      	mov	r3, r4
 80171f4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80171f8:	6023      	str	r3, [r4, #0]
 80171fa:	2301      	movs	r3, #1
 80171fc:	e7dc      	b.n	80171b8 <_sungetc_r+0x34>

080171fe <__ssrefill_r>:
 80171fe:	b510      	push	{r4, lr}
 8017200:	460c      	mov	r4, r1
 8017202:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017204:	b169      	cbz	r1, 8017222 <__ssrefill_r+0x24>
 8017206:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801720a:	4299      	cmp	r1, r3
 801720c:	d001      	beq.n	8017212 <__ssrefill_r+0x14>
 801720e:	f7fb f907 	bl	8012420 <_free_r>
 8017212:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017214:	6063      	str	r3, [r4, #4]
 8017216:	2000      	movs	r0, #0
 8017218:	6360      	str	r0, [r4, #52]	; 0x34
 801721a:	b113      	cbz	r3, 8017222 <__ssrefill_r+0x24>
 801721c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801721e:	6023      	str	r3, [r4, #0]
 8017220:	bd10      	pop	{r4, pc}
 8017222:	6923      	ldr	r3, [r4, #16]
 8017224:	6023      	str	r3, [r4, #0]
 8017226:	2300      	movs	r3, #0
 8017228:	6063      	str	r3, [r4, #4]
 801722a:	89a3      	ldrh	r3, [r4, #12]
 801722c:	f043 0320 	orr.w	r3, r3, #32
 8017230:	81a3      	strh	r3, [r4, #12]
 8017232:	f04f 30ff 	mov.w	r0, #4294967295
 8017236:	e7f3      	b.n	8017220 <__ssrefill_r+0x22>

08017238 <__ssvfiscanf_r>:
 8017238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801723c:	460c      	mov	r4, r1
 801723e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8017242:	2100      	movs	r1, #0
 8017244:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8017248:	49b2      	ldr	r1, [pc, #712]	; (8017514 <__ssvfiscanf_r+0x2dc>)
 801724a:	91a0      	str	r1, [sp, #640]	; 0x280
 801724c:	f10d 0804 	add.w	r8, sp, #4
 8017250:	49b1      	ldr	r1, [pc, #708]	; (8017518 <__ssvfiscanf_r+0x2e0>)
 8017252:	4fb2      	ldr	r7, [pc, #712]	; (801751c <__ssvfiscanf_r+0x2e4>)
 8017254:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8017520 <__ssvfiscanf_r+0x2e8>
 8017258:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801725c:	4606      	mov	r6, r0
 801725e:	91a1      	str	r1, [sp, #644]	; 0x284
 8017260:	9300      	str	r3, [sp, #0]
 8017262:	f892 a000 	ldrb.w	sl, [r2]
 8017266:	f1ba 0f00 	cmp.w	sl, #0
 801726a:	f000 8151 	beq.w	8017510 <__ssvfiscanf_r+0x2d8>
 801726e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8017272:	f013 0308 	ands.w	r3, r3, #8
 8017276:	f102 0501 	add.w	r5, r2, #1
 801727a:	d019      	beq.n	80172b0 <__ssvfiscanf_r+0x78>
 801727c:	6863      	ldr	r3, [r4, #4]
 801727e:	2b00      	cmp	r3, #0
 8017280:	dd0f      	ble.n	80172a2 <__ssvfiscanf_r+0x6a>
 8017282:	6823      	ldr	r3, [r4, #0]
 8017284:	781a      	ldrb	r2, [r3, #0]
 8017286:	5cba      	ldrb	r2, [r7, r2]
 8017288:	0712      	lsls	r2, r2, #28
 801728a:	d401      	bmi.n	8017290 <__ssvfiscanf_r+0x58>
 801728c:	462a      	mov	r2, r5
 801728e:	e7e8      	b.n	8017262 <__ssvfiscanf_r+0x2a>
 8017290:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017292:	3201      	adds	r2, #1
 8017294:	9245      	str	r2, [sp, #276]	; 0x114
 8017296:	6862      	ldr	r2, [r4, #4]
 8017298:	3301      	adds	r3, #1
 801729a:	3a01      	subs	r2, #1
 801729c:	6062      	str	r2, [r4, #4]
 801729e:	6023      	str	r3, [r4, #0]
 80172a0:	e7ec      	b.n	801727c <__ssvfiscanf_r+0x44>
 80172a2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80172a4:	4621      	mov	r1, r4
 80172a6:	4630      	mov	r0, r6
 80172a8:	4798      	blx	r3
 80172aa:	2800      	cmp	r0, #0
 80172ac:	d0e9      	beq.n	8017282 <__ssvfiscanf_r+0x4a>
 80172ae:	e7ed      	b.n	801728c <__ssvfiscanf_r+0x54>
 80172b0:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80172b4:	f040 8083 	bne.w	80173be <__ssvfiscanf_r+0x186>
 80172b8:	9341      	str	r3, [sp, #260]	; 0x104
 80172ba:	9343      	str	r3, [sp, #268]	; 0x10c
 80172bc:	7853      	ldrb	r3, [r2, #1]
 80172be:	2b2a      	cmp	r3, #42	; 0x2a
 80172c0:	bf02      	ittt	eq
 80172c2:	2310      	moveq	r3, #16
 80172c4:	1c95      	addeq	r5, r2, #2
 80172c6:	9341      	streq	r3, [sp, #260]	; 0x104
 80172c8:	220a      	movs	r2, #10
 80172ca:	46ab      	mov	fp, r5
 80172cc:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80172d0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80172d4:	2b09      	cmp	r3, #9
 80172d6:	d91d      	bls.n	8017314 <__ssvfiscanf_r+0xdc>
 80172d8:	4891      	ldr	r0, [pc, #580]	; (8017520 <__ssvfiscanf_r+0x2e8>)
 80172da:	2203      	movs	r2, #3
 80172dc:	f7e8 ffa0 	bl	8000220 <memchr>
 80172e0:	b140      	cbz	r0, 80172f4 <__ssvfiscanf_r+0xbc>
 80172e2:	2301      	movs	r3, #1
 80172e4:	eba0 0009 	sub.w	r0, r0, r9
 80172e8:	fa03 f000 	lsl.w	r0, r3, r0
 80172ec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80172ee:	4318      	orrs	r0, r3
 80172f0:	9041      	str	r0, [sp, #260]	; 0x104
 80172f2:	465d      	mov	r5, fp
 80172f4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80172f8:	2b78      	cmp	r3, #120	; 0x78
 80172fa:	d806      	bhi.n	801730a <__ssvfiscanf_r+0xd2>
 80172fc:	2b57      	cmp	r3, #87	; 0x57
 80172fe:	d810      	bhi.n	8017322 <__ssvfiscanf_r+0xea>
 8017300:	2b25      	cmp	r3, #37	; 0x25
 8017302:	d05c      	beq.n	80173be <__ssvfiscanf_r+0x186>
 8017304:	d856      	bhi.n	80173b4 <__ssvfiscanf_r+0x17c>
 8017306:	2b00      	cmp	r3, #0
 8017308:	d074      	beq.n	80173f4 <__ssvfiscanf_r+0x1bc>
 801730a:	2303      	movs	r3, #3
 801730c:	9347      	str	r3, [sp, #284]	; 0x11c
 801730e:	230a      	movs	r3, #10
 8017310:	9342      	str	r3, [sp, #264]	; 0x108
 8017312:	e081      	b.n	8017418 <__ssvfiscanf_r+0x1e0>
 8017314:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017316:	fb02 1303 	mla	r3, r2, r3, r1
 801731a:	3b30      	subs	r3, #48	; 0x30
 801731c:	9343      	str	r3, [sp, #268]	; 0x10c
 801731e:	465d      	mov	r5, fp
 8017320:	e7d3      	b.n	80172ca <__ssvfiscanf_r+0x92>
 8017322:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8017326:	2a20      	cmp	r2, #32
 8017328:	d8ef      	bhi.n	801730a <__ssvfiscanf_r+0xd2>
 801732a:	a101      	add	r1, pc, #4	; (adr r1, 8017330 <__ssvfiscanf_r+0xf8>)
 801732c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017330:	08017403 	.word	0x08017403
 8017334:	0801730b 	.word	0x0801730b
 8017338:	0801730b 	.word	0x0801730b
 801733c:	08017461 	.word	0x08017461
 8017340:	0801730b 	.word	0x0801730b
 8017344:	0801730b 	.word	0x0801730b
 8017348:	0801730b 	.word	0x0801730b
 801734c:	0801730b 	.word	0x0801730b
 8017350:	0801730b 	.word	0x0801730b
 8017354:	0801730b 	.word	0x0801730b
 8017358:	0801730b 	.word	0x0801730b
 801735c:	08017477 	.word	0x08017477
 8017360:	0801744d 	.word	0x0801744d
 8017364:	080173bb 	.word	0x080173bb
 8017368:	080173bb 	.word	0x080173bb
 801736c:	080173bb 	.word	0x080173bb
 8017370:	0801730b 	.word	0x0801730b
 8017374:	08017451 	.word	0x08017451
 8017378:	0801730b 	.word	0x0801730b
 801737c:	0801730b 	.word	0x0801730b
 8017380:	0801730b 	.word	0x0801730b
 8017384:	0801730b 	.word	0x0801730b
 8017388:	08017487 	.word	0x08017487
 801738c:	08017459 	.word	0x08017459
 8017390:	080173fb 	.word	0x080173fb
 8017394:	0801730b 	.word	0x0801730b
 8017398:	0801730b 	.word	0x0801730b
 801739c:	08017483 	.word	0x08017483
 80173a0:	0801730b 	.word	0x0801730b
 80173a4:	0801744d 	.word	0x0801744d
 80173a8:	0801730b 	.word	0x0801730b
 80173ac:	0801730b 	.word	0x0801730b
 80173b0:	08017403 	.word	0x08017403
 80173b4:	3b45      	subs	r3, #69	; 0x45
 80173b6:	2b02      	cmp	r3, #2
 80173b8:	d8a7      	bhi.n	801730a <__ssvfiscanf_r+0xd2>
 80173ba:	2305      	movs	r3, #5
 80173bc:	e02b      	b.n	8017416 <__ssvfiscanf_r+0x1de>
 80173be:	6863      	ldr	r3, [r4, #4]
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	dd0d      	ble.n	80173e0 <__ssvfiscanf_r+0x1a8>
 80173c4:	6823      	ldr	r3, [r4, #0]
 80173c6:	781a      	ldrb	r2, [r3, #0]
 80173c8:	4552      	cmp	r2, sl
 80173ca:	f040 80a1 	bne.w	8017510 <__ssvfiscanf_r+0x2d8>
 80173ce:	3301      	adds	r3, #1
 80173d0:	6862      	ldr	r2, [r4, #4]
 80173d2:	6023      	str	r3, [r4, #0]
 80173d4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80173d6:	3a01      	subs	r2, #1
 80173d8:	3301      	adds	r3, #1
 80173da:	6062      	str	r2, [r4, #4]
 80173dc:	9345      	str	r3, [sp, #276]	; 0x114
 80173de:	e755      	b.n	801728c <__ssvfiscanf_r+0x54>
 80173e0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80173e2:	4621      	mov	r1, r4
 80173e4:	4630      	mov	r0, r6
 80173e6:	4798      	blx	r3
 80173e8:	2800      	cmp	r0, #0
 80173ea:	d0eb      	beq.n	80173c4 <__ssvfiscanf_r+0x18c>
 80173ec:	9844      	ldr	r0, [sp, #272]	; 0x110
 80173ee:	2800      	cmp	r0, #0
 80173f0:	f040 8084 	bne.w	80174fc <__ssvfiscanf_r+0x2c4>
 80173f4:	f04f 30ff 	mov.w	r0, #4294967295
 80173f8:	e086      	b.n	8017508 <__ssvfiscanf_r+0x2d0>
 80173fa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80173fc:	f042 0220 	orr.w	r2, r2, #32
 8017400:	9241      	str	r2, [sp, #260]	; 0x104
 8017402:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017408:	9241      	str	r2, [sp, #260]	; 0x104
 801740a:	2210      	movs	r2, #16
 801740c:	2b6f      	cmp	r3, #111	; 0x6f
 801740e:	9242      	str	r2, [sp, #264]	; 0x108
 8017410:	bf34      	ite	cc
 8017412:	2303      	movcc	r3, #3
 8017414:	2304      	movcs	r3, #4
 8017416:	9347      	str	r3, [sp, #284]	; 0x11c
 8017418:	6863      	ldr	r3, [r4, #4]
 801741a:	2b00      	cmp	r3, #0
 801741c:	dd41      	ble.n	80174a2 <__ssvfiscanf_r+0x26a>
 801741e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017420:	0659      	lsls	r1, r3, #25
 8017422:	d404      	bmi.n	801742e <__ssvfiscanf_r+0x1f6>
 8017424:	6823      	ldr	r3, [r4, #0]
 8017426:	781a      	ldrb	r2, [r3, #0]
 8017428:	5cba      	ldrb	r2, [r7, r2]
 801742a:	0712      	lsls	r2, r2, #28
 801742c:	d440      	bmi.n	80174b0 <__ssvfiscanf_r+0x278>
 801742e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8017430:	2b02      	cmp	r3, #2
 8017432:	dc4f      	bgt.n	80174d4 <__ssvfiscanf_r+0x29c>
 8017434:	466b      	mov	r3, sp
 8017436:	4622      	mov	r2, r4
 8017438:	a941      	add	r1, sp, #260	; 0x104
 801743a:	4630      	mov	r0, r6
 801743c:	f000 f9ce 	bl	80177dc <_scanf_chars>
 8017440:	2801      	cmp	r0, #1
 8017442:	d065      	beq.n	8017510 <__ssvfiscanf_r+0x2d8>
 8017444:	2802      	cmp	r0, #2
 8017446:	f47f af21 	bne.w	801728c <__ssvfiscanf_r+0x54>
 801744a:	e7cf      	b.n	80173ec <__ssvfiscanf_r+0x1b4>
 801744c:	220a      	movs	r2, #10
 801744e:	e7dd      	b.n	801740c <__ssvfiscanf_r+0x1d4>
 8017450:	2300      	movs	r3, #0
 8017452:	9342      	str	r3, [sp, #264]	; 0x108
 8017454:	2303      	movs	r3, #3
 8017456:	e7de      	b.n	8017416 <__ssvfiscanf_r+0x1de>
 8017458:	2308      	movs	r3, #8
 801745a:	9342      	str	r3, [sp, #264]	; 0x108
 801745c:	2304      	movs	r3, #4
 801745e:	e7da      	b.n	8017416 <__ssvfiscanf_r+0x1de>
 8017460:	4629      	mov	r1, r5
 8017462:	4640      	mov	r0, r8
 8017464:	f000 fb18 	bl	8017a98 <__sccl>
 8017468:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801746a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801746e:	9341      	str	r3, [sp, #260]	; 0x104
 8017470:	4605      	mov	r5, r0
 8017472:	2301      	movs	r3, #1
 8017474:	e7cf      	b.n	8017416 <__ssvfiscanf_r+0x1de>
 8017476:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801747c:	9341      	str	r3, [sp, #260]	; 0x104
 801747e:	2300      	movs	r3, #0
 8017480:	e7c9      	b.n	8017416 <__ssvfiscanf_r+0x1de>
 8017482:	2302      	movs	r3, #2
 8017484:	e7c7      	b.n	8017416 <__ssvfiscanf_r+0x1de>
 8017486:	9841      	ldr	r0, [sp, #260]	; 0x104
 8017488:	06c3      	lsls	r3, r0, #27
 801748a:	f53f aeff 	bmi.w	801728c <__ssvfiscanf_r+0x54>
 801748e:	9b00      	ldr	r3, [sp, #0]
 8017490:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017492:	1d19      	adds	r1, r3, #4
 8017494:	9100      	str	r1, [sp, #0]
 8017496:	681b      	ldr	r3, [r3, #0]
 8017498:	07c0      	lsls	r0, r0, #31
 801749a:	bf4c      	ite	mi
 801749c:	801a      	strhmi	r2, [r3, #0]
 801749e:	601a      	strpl	r2, [r3, #0]
 80174a0:	e6f4      	b.n	801728c <__ssvfiscanf_r+0x54>
 80174a2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80174a4:	4621      	mov	r1, r4
 80174a6:	4630      	mov	r0, r6
 80174a8:	4798      	blx	r3
 80174aa:	2800      	cmp	r0, #0
 80174ac:	d0b7      	beq.n	801741e <__ssvfiscanf_r+0x1e6>
 80174ae:	e79d      	b.n	80173ec <__ssvfiscanf_r+0x1b4>
 80174b0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80174b2:	3201      	adds	r2, #1
 80174b4:	9245      	str	r2, [sp, #276]	; 0x114
 80174b6:	6862      	ldr	r2, [r4, #4]
 80174b8:	3a01      	subs	r2, #1
 80174ba:	2a00      	cmp	r2, #0
 80174bc:	6062      	str	r2, [r4, #4]
 80174be:	dd02      	ble.n	80174c6 <__ssvfiscanf_r+0x28e>
 80174c0:	3301      	adds	r3, #1
 80174c2:	6023      	str	r3, [r4, #0]
 80174c4:	e7ae      	b.n	8017424 <__ssvfiscanf_r+0x1ec>
 80174c6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80174c8:	4621      	mov	r1, r4
 80174ca:	4630      	mov	r0, r6
 80174cc:	4798      	blx	r3
 80174ce:	2800      	cmp	r0, #0
 80174d0:	d0a8      	beq.n	8017424 <__ssvfiscanf_r+0x1ec>
 80174d2:	e78b      	b.n	80173ec <__ssvfiscanf_r+0x1b4>
 80174d4:	2b04      	cmp	r3, #4
 80174d6:	dc06      	bgt.n	80174e6 <__ssvfiscanf_r+0x2ae>
 80174d8:	466b      	mov	r3, sp
 80174da:	4622      	mov	r2, r4
 80174dc:	a941      	add	r1, sp, #260	; 0x104
 80174de:	4630      	mov	r0, r6
 80174e0:	f000 f9d4 	bl	801788c <_scanf_i>
 80174e4:	e7ac      	b.n	8017440 <__ssvfiscanf_r+0x208>
 80174e6:	4b0f      	ldr	r3, [pc, #60]	; (8017524 <__ssvfiscanf_r+0x2ec>)
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	f43f aecf 	beq.w	801728c <__ssvfiscanf_r+0x54>
 80174ee:	466b      	mov	r3, sp
 80174f0:	4622      	mov	r2, r4
 80174f2:	a941      	add	r1, sp, #260	; 0x104
 80174f4:	4630      	mov	r0, r6
 80174f6:	f7fb fca7 	bl	8012e48 <_scanf_float>
 80174fa:	e7a1      	b.n	8017440 <__ssvfiscanf_r+0x208>
 80174fc:	89a3      	ldrh	r3, [r4, #12]
 80174fe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8017502:	bf18      	it	ne
 8017504:	f04f 30ff 	movne.w	r0, #4294967295
 8017508:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801750c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017510:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017512:	e7f9      	b.n	8017508 <__ssvfiscanf_r+0x2d0>
 8017514:	08017185 	.word	0x08017185
 8017518:	080171ff 	.word	0x080171ff
 801751c:	08019b15 	.word	0x08019b15
 8017520:	0801a17a 	.word	0x0801a17a
 8017524:	08012e49 	.word	0x08012e49

08017528 <__sfputc_r>:
 8017528:	6893      	ldr	r3, [r2, #8]
 801752a:	3b01      	subs	r3, #1
 801752c:	2b00      	cmp	r3, #0
 801752e:	b410      	push	{r4}
 8017530:	6093      	str	r3, [r2, #8]
 8017532:	da08      	bge.n	8017546 <__sfputc_r+0x1e>
 8017534:	6994      	ldr	r4, [r2, #24]
 8017536:	42a3      	cmp	r3, r4
 8017538:	db01      	blt.n	801753e <__sfputc_r+0x16>
 801753a:	290a      	cmp	r1, #10
 801753c:	d103      	bne.n	8017546 <__sfputc_r+0x1e>
 801753e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017542:	f7fd ba73 	b.w	8014a2c <__swbuf_r>
 8017546:	6813      	ldr	r3, [r2, #0]
 8017548:	1c58      	adds	r0, r3, #1
 801754a:	6010      	str	r0, [r2, #0]
 801754c:	7019      	strb	r1, [r3, #0]
 801754e:	4608      	mov	r0, r1
 8017550:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017554:	4770      	bx	lr

08017556 <__sfputs_r>:
 8017556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017558:	4606      	mov	r6, r0
 801755a:	460f      	mov	r7, r1
 801755c:	4614      	mov	r4, r2
 801755e:	18d5      	adds	r5, r2, r3
 8017560:	42ac      	cmp	r4, r5
 8017562:	d101      	bne.n	8017568 <__sfputs_r+0x12>
 8017564:	2000      	movs	r0, #0
 8017566:	e007      	b.n	8017578 <__sfputs_r+0x22>
 8017568:	f814 1b01 	ldrb.w	r1, [r4], #1
 801756c:	463a      	mov	r2, r7
 801756e:	4630      	mov	r0, r6
 8017570:	f7ff ffda 	bl	8017528 <__sfputc_r>
 8017574:	1c43      	adds	r3, r0, #1
 8017576:	d1f3      	bne.n	8017560 <__sfputs_r+0xa>
 8017578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801757c <_vfiprintf_r>:
 801757c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017580:	460d      	mov	r5, r1
 8017582:	b09d      	sub	sp, #116	; 0x74
 8017584:	4614      	mov	r4, r2
 8017586:	4698      	mov	r8, r3
 8017588:	4606      	mov	r6, r0
 801758a:	b118      	cbz	r0, 8017594 <_vfiprintf_r+0x18>
 801758c:	6983      	ldr	r3, [r0, #24]
 801758e:	b90b      	cbnz	r3, 8017594 <_vfiprintf_r+0x18>
 8017590:	f7fa faa4 	bl	8011adc <__sinit>
 8017594:	4b89      	ldr	r3, [pc, #548]	; (80177bc <_vfiprintf_r+0x240>)
 8017596:	429d      	cmp	r5, r3
 8017598:	d11b      	bne.n	80175d2 <_vfiprintf_r+0x56>
 801759a:	6875      	ldr	r5, [r6, #4]
 801759c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801759e:	07d9      	lsls	r1, r3, #31
 80175a0:	d405      	bmi.n	80175ae <_vfiprintf_r+0x32>
 80175a2:	89ab      	ldrh	r3, [r5, #12]
 80175a4:	059a      	lsls	r2, r3, #22
 80175a6:	d402      	bmi.n	80175ae <_vfiprintf_r+0x32>
 80175a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80175aa:	f7fa fc77 	bl	8011e9c <__retarget_lock_acquire_recursive>
 80175ae:	89ab      	ldrh	r3, [r5, #12]
 80175b0:	071b      	lsls	r3, r3, #28
 80175b2:	d501      	bpl.n	80175b8 <_vfiprintf_r+0x3c>
 80175b4:	692b      	ldr	r3, [r5, #16]
 80175b6:	b9eb      	cbnz	r3, 80175f4 <_vfiprintf_r+0x78>
 80175b8:	4629      	mov	r1, r5
 80175ba:	4630      	mov	r0, r6
 80175bc:	f7fd fa9a 	bl	8014af4 <__swsetup_r>
 80175c0:	b1c0      	cbz	r0, 80175f4 <_vfiprintf_r+0x78>
 80175c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80175c4:	07dc      	lsls	r4, r3, #31
 80175c6:	d50e      	bpl.n	80175e6 <_vfiprintf_r+0x6a>
 80175c8:	f04f 30ff 	mov.w	r0, #4294967295
 80175cc:	b01d      	add	sp, #116	; 0x74
 80175ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175d2:	4b7b      	ldr	r3, [pc, #492]	; (80177c0 <_vfiprintf_r+0x244>)
 80175d4:	429d      	cmp	r5, r3
 80175d6:	d101      	bne.n	80175dc <_vfiprintf_r+0x60>
 80175d8:	68b5      	ldr	r5, [r6, #8]
 80175da:	e7df      	b.n	801759c <_vfiprintf_r+0x20>
 80175dc:	4b79      	ldr	r3, [pc, #484]	; (80177c4 <_vfiprintf_r+0x248>)
 80175de:	429d      	cmp	r5, r3
 80175e0:	bf08      	it	eq
 80175e2:	68f5      	ldreq	r5, [r6, #12]
 80175e4:	e7da      	b.n	801759c <_vfiprintf_r+0x20>
 80175e6:	89ab      	ldrh	r3, [r5, #12]
 80175e8:	0598      	lsls	r0, r3, #22
 80175ea:	d4ed      	bmi.n	80175c8 <_vfiprintf_r+0x4c>
 80175ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80175ee:	f7fa fc57 	bl	8011ea0 <__retarget_lock_release_recursive>
 80175f2:	e7e9      	b.n	80175c8 <_vfiprintf_r+0x4c>
 80175f4:	2300      	movs	r3, #0
 80175f6:	9309      	str	r3, [sp, #36]	; 0x24
 80175f8:	2320      	movs	r3, #32
 80175fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80175fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8017602:	2330      	movs	r3, #48	; 0x30
 8017604:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80177c8 <_vfiprintf_r+0x24c>
 8017608:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801760c:	f04f 0901 	mov.w	r9, #1
 8017610:	4623      	mov	r3, r4
 8017612:	469a      	mov	sl, r3
 8017614:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017618:	b10a      	cbz	r2, 801761e <_vfiprintf_r+0xa2>
 801761a:	2a25      	cmp	r2, #37	; 0x25
 801761c:	d1f9      	bne.n	8017612 <_vfiprintf_r+0x96>
 801761e:	ebba 0b04 	subs.w	fp, sl, r4
 8017622:	d00b      	beq.n	801763c <_vfiprintf_r+0xc0>
 8017624:	465b      	mov	r3, fp
 8017626:	4622      	mov	r2, r4
 8017628:	4629      	mov	r1, r5
 801762a:	4630      	mov	r0, r6
 801762c:	f7ff ff93 	bl	8017556 <__sfputs_r>
 8017630:	3001      	adds	r0, #1
 8017632:	f000 80aa 	beq.w	801778a <_vfiprintf_r+0x20e>
 8017636:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017638:	445a      	add	r2, fp
 801763a:	9209      	str	r2, [sp, #36]	; 0x24
 801763c:	f89a 3000 	ldrb.w	r3, [sl]
 8017640:	2b00      	cmp	r3, #0
 8017642:	f000 80a2 	beq.w	801778a <_vfiprintf_r+0x20e>
 8017646:	2300      	movs	r3, #0
 8017648:	f04f 32ff 	mov.w	r2, #4294967295
 801764c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017650:	f10a 0a01 	add.w	sl, sl, #1
 8017654:	9304      	str	r3, [sp, #16]
 8017656:	9307      	str	r3, [sp, #28]
 8017658:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801765c:	931a      	str	r3, [sp, #104]	; 0x68
 801765e:	4654      	mov	r4, sl
 8017660:	2205      	movs	r2, #5
 8017662:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017666:	4858      	ldr	r0, [pc, #352]	; (80177c8 <_vfiprintf_r+0x24c>)
 8017668:	f7e8 fdda 	bl	8000220 <memchr>
 801766c:	9a04      	ldr	r2, [sp, #16]
 801766e:	b9d8      	cbnz	r0, 80176a8 <_vfiprintf_r+0x12c>
 8017670:	06d1      	lsls	r1, r2, #27
 8017672:	bf44      	itt	mi
 8017674:	2320      	movmi	r3, #32
 8017676:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801767a:	0713      	lsls	r3, r2, #28
 801767c:	bf44      	itt	mi
 801767e:	232b      	movmi	r3, #43	; 0x2b
 8017680:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017684:	f89a 3000 	ldrb.w	r3, [sl]
 8017688:	2b2a      	cmp	r3, #42	; 0x2a
 801768a:	d015      	beq.n	80176b8 <_vfiprintf_r+0x13c>
 801768c:	9a07      	ldr	r2, [sp, #28]
 801768e:	4654      	mov	r4, sl
 8017690:	2000      	movs	r0, #0
 8017692:	f04f 0c0a 	mov.w	ip, #10
 8017696:	4621      	mov	r1, r4
 8017698:	f811 3b01 	ldrb.w	r3, [r1], #1
 801769c:	3b30      	subs	r3, #48	; 0x30
 801769e:	2b09      	cmp	r3, #9
 80176a0:	d94e      	bls.n	8017740 <_vfiprintf_r+0x1c4>
 80176a2:	b1b0      	cbz	r0, 80176d2 <_vfiprintf_r+0x156>
 80176a4:	9207      	str	r2, [sp, #28]
 80176a6:	e014      	b.n	80176d2 <_vfiprintf_r+0x156>
 80176a8:	eba0 0308 	sub.w	r3, r0, r8
 80176ac:	fa09 f303 	lsl.w	r3, r9, r3
 80176b0:	4313      	orrs	r3, r2
 80176b2:	9304      	str	r3, [sp, #16]
 80176b4:	46a2      	mov	sl, r4
 80176b6:	e7d2      	b.n	801765e <_vfiprintf_r+0xe2>
 80176b8:	9b03      	ldr	r3, [sp, #12]
 80176ba:	1d19      	adds	r1, r3, #4
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	9103      	str	r1, [sp, #12]
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	bfbb      	ittet	lt
 80176c4:	425b      	neglt	r3, r3
 80176c6:	f042 0202 	orrlt.w	r2, r2, #2
 80176ca:	9307      	strge	r3, [sp, #28]
 80176cc:	9307      	strlt	r3, [sp, #28]
 80176ce:	bfb8      	it	lt
 80176d0:	9204      	strlt	r2, [sp, #16]
 80176d2:	7823      	ldrb	r3, [r4, #0]
 80176d4:	2b2e      	cmp	r3, #46	; 0x2e
 80176d6:	d10c      	bne.n	80176f2 <_vfiprintf_r+0x176>
 80176d8:	7863      	ldrb	r3, [r4, #1]
 80176da:	2b2a      	cmp	r3, #42	; 0x2a
 80176dc:	d135      	bne.n	801774a <_vfiprintf_r+0x1ce>
 80176de:	9b03      	ldr	r3, [sp, #12]
 80176e0:	1d1a      	adds	r2, r3, #4
 80176e2:	681b      	ldr	r3, [r3, #0]
 80176e4:	9203      	str	r2, [sp, #12]
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	bfb8      	it	lt
 80176ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80176ee:	3402      	adds	r4, #2
 80176f0:	9305      	str	r3, [sp, #20]
 80176f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80177d8 <_vfiprintf_r+0x25c>
 80176f6:	7821      	ldrb	r1, [r4, #0]
 80176f8:	2203      	movs	r2, #3
 80176fa:	4650      	mov	r0, sl
 80176fc:	f7e8 fd90 	bl	8000220 <memchr>
 8017700:	b140      	cbz	r0, 8017714 <_vfiprintf_r+0x198>
 8017702:	2340      	movs	r3, #64	; 0x40
 8017704:	eba0 000a 	sub.w	r0, r0, sl
 8017708:	fa03 f000 	lsl.w	r0, r3, r0
 801770c:	9b04      	ldr	r3, [sp, #16]
 801770e:	4303      	orrs	r3, r0
 8017710:	3401      	adds	r4, #1
 8017712:	9304      	str	r3, [sp, #16]
 8017714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017718:	482c      	ldr	r0, [pc, #176]	; (80177cc <_vfiprintf_r+0x250>)
 801771a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801771e:	2206      	movs	r2, #6
 8017720:	f7e8 fd7e 	bl	8000220 <memchr>
 8017724:	2800      	cmp	r0, #0
 8017726:	d03f      	beq.n	80177a8 <_vfiprintf_r+0x22c>
 8017728:	4b29      	ldr	r3, [pc, #164]	; (80177d0 <_vfiprintf_r+0x254>)
 801772a:	bb1b      	cbnz	r3, 8017774 <_vfiprintf_r+0x1f8>
 801772c:	9b03      	ldr	r3, [sp, #12]
 801772e:	3307      	adds	r3, #7
 8017730:	f023 0307 	bic.w	r3, r3, #7
 8017734:	3308      	adds	r3, #8
 8017736:	9303      	str	r3, [sp, #12]
 8017738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801773a:	443b      	add	r3, r7
 801773c:	9309      	str	r3, [sp, #36]	; 0x24
 801773e:	e767      	b.n	8017610 <_vfiprintf_r+0x94>
 8017740:	fb0c 3202 	mla	r2, ip, r2, r3
 8017744:	460c      	mov	r4, r1
 8017746:	2001      	movs	r0, #1
 8017748:	e7a5      	b.n	8017696 <_vfiprintf_r+0x11a>
 801774a:	2300      	movs	r3, #0
 801774c:	3401      	adds	r4, #1
 801774e:	9305      	str	r3, [sp, #20]
 8017750:	4619      	mov	r1, r3
 8017752:	f04f 0c0a 	mov.w	ip, #10
 8017756:	4620      	mov	r0, r4
 8017758:	f810 2b01 	ldrb.w	r2, [r0], #1
 801775c:	3a30      	subs	r2, #48	; 0x30
 801775e:	2a09      	cmp	r2, #9
 8017760:	d903      	bls.n	801776a <_vfiprintf_r+0x1ee>
 8017762:	2b00      	cmp	r3, #0
 8017764:	d0c5      	beq.n	80176f2 <_vfiprintf_r+0x176>
 8017766:	9105      	str	r1, [sp, #20]
 8017768:	e7c3      	b.n	80176f2 <_vfiprintf_r+0x176>
 801776a:	fb0c 2101 	mla	r1, ip, r1, r2
 801776e:	4604      	mov	r4, r0
 8017770:	2301      	movs	r3, #1
 8017772:	e7f0      	b.n	8017756 <_vfiprintf_r+0x1da>
 8017774:	ab03      	add	r3, sp, #12
 8017776:	9300      	str	r3, [sp, #0]
 8017778:	462a      	mov	r2, r5
 801777a:	4b16      	ldr	r3, [pc, #88]	; (80177d4 <_vfiprintf_r+0x258>)
 801777c:	a904      	add	r1, sp, #16
 801777e:	4630      	mov	r0, r6
 8017780:	f7fa ff98 	bl	80126b4 <_printf_float>
 8017784:	4607      	mov	r7, r0
 8017786:	1c78      	adds	r0, r7, #1
 8017788:	d1d6      	bne.n	8017738 <_vfiprintf_r+0x1bc>
 801778a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801778c:	07d9      	lsls	r1, r3, #31
 801778e:	d405      	bmi.n	801779c <_vfiprintf_r+0x220>
 8017790:	89ab      	ldrh	r3, [r5, #12]
 8017792:	059a      	lsls	r2, r3, #22
 8017794:	d402      	bmi.n	801779c <_vfiprintf_r+0x220>
 8017796:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017798:	f7fa fb82 	bl	8011ea0 <__retarget_lock_release_recursive>
 801779c:	89ab      	ldrh	r3, [r5, #12]
 801779e:	065b      	lsls	r3, r3, #25
 80177a0:	f53f af12 	bmi.w	80175c8 <_vfiprintf_r+0x4c>
 80177a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80177a6:	e711      	b.n	80175cc <_vfiprintf_r+0x50>
 80177a8:	ab03      	add	r3, sp, #12
 80177aa:	9300      	str	r3, [sp, #0]
 80177ac:	462a      	mov	r2, r5
 80177ae:	4b09      	ldr	r3, [pc, #36]	; (80177d4 <_vfiprintf_r+0x258>)
 80177b0:	a904      	add	r1, sp, #16
 80177b2:	4630      	mov	r0, r6
 80177b4:	f7fb fa22 	bl	8012bfc <_printf_i>
 80177b8:	e7e4      	b.n	8017784 <_vfiprintf_r+0x208>
 80177ba:	bf00      	nop
 80177bc:	08019c38 	.word	0x08019c38
 80177c0:	08019c58 	.word	0x08019c58
 80177c4:	08019c18 	.word	0x08019c18
 80177c8:	0801a174 	.word	0x0801a174
 80177cc:	0801a17e 	.word	0x0801a17e
 80177d0:	080126b5 	.word	0x080126b5
 80177d4:	08017557 	.word	0x08017557
 80177d8:	0801a17a 	.word	0x0801a17a

080177dc <_scanf_chars>:
 80177dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80177e0:	4615      	mov	r5, r2
 80177e2:	688a      	ldr	r2, [r1, #8]
 80177e4:	4680      	mov	r8, r0
 80177e6:	460c      	mov	r4, r1
 80177e8:	b932      	cbnz	r2, 80177f8 <_scanf_chars+0x1c>
 80177ea:	698a      	ldr	r2, [r1, #24]
 80177ec:	2a00      	cmp	r2, #0
 80177ee:	bf0c      	ite	eq
 80177f0:	2201      	moveq	r2, #1
 80177f2:	f04f 32ff 	movne.w	r2, #4294967295
 80177f6:	608a      	str	r2, [r1, #8]
 80177f8:	6822      	ldr	r2, [r4, #0]
 80177fa:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8017888 <_scanf_chars+0xac>
 80177fe:	06d1      	lsls	r1, r2, #27
 8017800:	bf5f      	itttt	pl
 8017802:	681a      	ldrpl	r2, [r3, #0]
 8017804:	1d11      	addpl	r1, r2, #4
 8017806:	6019      	strpl	r1, [r3, #0]
 8017808:	6816      	ldrpl	r6, [r2, #0]
 801780a:	2700      	movs	r7, #0
 801780c:	69a0      	ldr	r0, [r4, #24]
 801780e:	b188      	cbz	r0, 8017834 <_scanf_chars+0x58>
 8017810:	2801      	cmp	r0, #1
 8017812:	d107      	bne.n	8017824 <_scanf_chars+0x48>
 8017814:	682b      	ldr	r3, [r5, #0]
 8017816:	781a      	ldrb	r2, [r3, #0]
 8017818:	6963      	ldr	r3, [r4, #20]
 801781a:	5c9b      	ldrb	r3, [r3, r2]
 801781c:	b953      	cbnz	r3, 8017834 <_scanf_chars+0x58>
 801781e:	bb27      	cbnz	r7, 801786a <_scanf_chars+0x8e>
 8017820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017824:	2802      	cmp	r0, #2
 8017826:	d120      	bne.n	801786a <_scanf_chars+0x8e>
 8017828:	682b      	ldr	r3, [r5, #0]
 801782a:	781b      	ldrb	r3, [r3, #0]
 801782c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8017830:	071b      	lsls	r3, r3, #28
 8017832:	d41a      	bmi.n	801786a <_scanf_chars+0x8e>
 8017834:	6823      	ldr	r3, [r4, #0]
 8017836:	06da      	lsls	r2, r3, #27
 8017838:	bf5e      	ittt	pl
 801783a:	682b      	ldrpl	r3, [r5, #0]
 801783c:	781b      	ldrbpl	r3, [r3, #0]
 801783e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8017842:	682a      	ldr	r2, [r5, #0]
 8017844:	686b      	ldr	r3, [r5, #4]
 8017846:	3201      	adds	r2, #1
 8017848:	602a      	str	r2, [r5, #0]
 801784a:	68a2      	ldr	r2, [r4, #8]
 801784c:	3b01      	subs	r3, #1
 801784e:	3a01      	subs	r2, #1
 8017850:	606b      	str	r3, [r5, #4]
 8017852:	3701      	adds	r7, #1
 8017854:	60a2      	str	r2, [r4, #8]
 8017856:	b142      	cbz	r2, 801786a <_scanf_chars+0x8e>
 8017858:	2b00      	cmp	r3, #0
 801785a:	dcd7      	bgt.n	801780c <_scanf_chars+0x30>
 801785c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017860:	4629      	mov	r1, r5
 8017862:	4640      	mov	r0, r8
 8017864:	4798      	blx	r3
 8017866:	2800      	cmp	r0, #0
 8017868:	d0d0      	beq.n	801780c <_scanf_chars+0x30>
 801786a:	6823      	ldr	r3, [r4, #0]
 801786c:	f013 0310 	ands.w	r3, r3, #16
 8017870:	d105      	bne.n	801787e <_scanf_chars+0xa2>
 8017872:	68e2      	ldr	r2, [r4, #12]
 8017874:	3201      	adds	r2, #1
 8017876:	60e2      	str	r2, [r4, #12]
 8017878:	69a2      	ldr	r2, [r4, #24]
 801787a:	b102      	cbz	r2, 801787e <_scanf_chars+0xa2>
 801787c:	7033      	strb	r3, [r6, #0]
 801787e:	6923      	ldr	r3, [r4, #16]
 8017880:	441f      	add	r7, r3
 8017882:	6127      	str	r7, [r4, #16]
 8017884:	2000      	movs	r0, #0
 8017886:	e7cb      	b.n	8017820 <_scanf_chars+0x44>
 8017888:	08019b15 	.word	0x08019b15

0801788c <_scanf_i>:
 801788c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017890:	4698      	mov	r8, r3
 8017892:	4b74      	ldr	r3, [pc, #464]	; (8017a64 <_scanf_i+0x1d8>)
 8017894:	460c      	mov	r4, r1
 8017896:	4682      	mov	sl, r0
 8017898:	4616      	mov	r6, r2
 801789a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801789e:	b087      	sub	sp, #28
 80178a0:	ab03      	add	r3, sp, #12
 80178a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80178a6:	4b70      	ldr	r3, [pc, #448]	; (8017a68 <_scanf_i+0x1dc>)
 80178a8:	69a1      	ldr	r1, [r4, #24]
 80178aa:	4a70      	ldr	r2, [pc, #448]	; (8017a6c <_scanf_i+0x1e0>)
 80178ac:	2903      	cmp	r1, #3
 80178ae:	bf18      	it	ne
 80178b0:	461a      	movne	r2, r3
 80178b2:	68a3      	ldr	r3, [r4, #8]
 80178b4:	9201      	str	r2, [sp, #4]
 80178b6:	1e5a      	subs	r2, r3, #1
 80178b8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80178bc:	bf88      	it	hi
 80178be:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80178c2:	4627      	mov	r7, r4
 80178c4:	bf82      	ittt	hi
 80178c6:	eb03 0905 	addhi.w	r9, r3, r5
 80178ca:	f240 135d 	movwhi	r3, #349	; 0x15d
 80178ce:	60a3      	strhi	r3, [r4, #8]
 80178d0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80178d4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80178d8:	bf98      	it	ls
 80178da:	f04f 0900 	movls.w	r9, #0
 80178de:	6023      	str	r3, [r4, #0]
 80178e0:	463d      	mov	r5, r7
 80178e2:	f04f 0b00 	mov.w	fp, #0
 80178e6:	6831      	ldr	r1, [r6, #0]
 80178e8:	ab03      	add	r3, sp, #12
 80178ea:	7809      	ldrb	r1, [r1, #0]
 80178ec:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80178f0:	2202      	movs	r2, #2
 80178f2:	f7e8 fc95 	bl	8000220 <memchr>
 80178f6:	b328      	cbz	r0, 8017944 <_scanf_i+0xb8>
 80178f8:	f1bb 0f01 	cmp.w	fp, #1
 80178fc:	d159      	bne.n	80179b2 <_scanf_i+0x126>
 80178fe:	6862      	ldr	r2, [r4, #4]
 8017900:	b92a      	cbnz	r2, 801790e <_scanf_i+0x82>
 8017902:	6822      	ldr	r2, [r4, #0]
 8017904:	2308      	movs	r3, #8
 8017906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801790a:	6063      	str	r3, [r4, #4]
 801790c:	6022      	str	r2, [r4, #0]
 801790e:	6822      	ldr	r2, [r4, #0]
 8017910:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017914:	6022      	str	r2, [r4, #0]
 8017916:	68a2      	ldr	r2, [r4, #8]
 8017918:	1e51      	subs	r1, r2, #1
 801791a:	60a1      	str	r1, [r4, #8]
 801791c:	b192      	cbz	r2, 8017944 <_scanf_i+0xb8>
 801791e:	6832      	ldr	r2, [r6, #0]
 8017920:	1c51      	adds	r1, r2, #1
 8017922:	6031      	str	r1, [r6, #0]
 8017924:	7812      	ldrb	r2, [r2, #0]
 8017926:	f805 2b01 	strb.w	r2, [r5], #1
 801792a:	6872      	ldr	r2, [r6, #4]
 801792c:	3a01      	subs	r2, #1
 801792e:	2a00      	cmp	r2, #0
 8017930:	6072      	str	r2, [r6, #4]
 8017932:	dc07      	bgt.n	8017944 <_scanf_i+0xb8>
 8017934:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8017938:	4631      	mov	r1, r6
 801793a:	4650      	mov	r0, sl
 801793c:	4790      	blx	r2
 801793e:	2800      	cmp	r0, #0
 8017940:	f040 8085 	bne.w	8017a4e <_scanf_i+0x1c2>
 8017944:	f10b 0b01 	add.w	fp, fp, #1
 8017948:	f1bb 0f03 	cmp.w	fp, #3
 801794c:	d1cb      	bne.n	80178e6 <_scanf_i+0x5a>
 801794e:	6863      	ldr	r3, [r4, #4]
 8017950:	b90b      	cbnz	r3, 8017956 <_scanf_i+0xca>
 8017952:	230a      	movs	r3, #10
 8017954:	6063      	str	r3, [r4, #4]
 8017956:	6863      	ldr	r3, [r4, #4]
 8017958:	4945      	ldr	r1, [pc, #276]	; (8017a70 <_scanf_i+0x1e4>)
 801795a:	6960      	ldr	r0, [r4, #20]
 801795c:	1ac9      	subs	r1, r1, r3
 801795e:	f000 f89b 	bl	8017a98 <__sccl>
 8017962:	f04f 0b00 	mov.w	fp, #0
 8017966:	68a3      	ldr	r3, [r4, #8]
 8017968:	6822      	ldr	r2, [r4, #0]
 801796a:	2b00      	cmp	r3, #0
 801796c:	d03d      	beq.n	80179ea <_scanf_i+0x15e>
 801796e:	6831      	ldr	r1, [r6, #0]
 8017970:	6960      	ldr	r0, [r4, #20]
 8017972:	f891 c000 	ldrb.w	ip, [r1]
 8017976:	f810 000c 	ldrb.w	r0, [r0, ip]
 801797a:	2800      	cmp	r0, #0
 801797c:	d035      	beq.n	80179ea <_scanf_i+0x15e>
 801797e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017982:	d124      	bne.n	80179ce <_scanf_i+0x142>
 8017984:	0510      	lsls	r0, r2, #20
 8017986:	d522      	bpl.n	80179ce <_scanf_i+0x142>
 8017988:	f10b 0b01 	add.w	fp, fp, #1
 801798c:	f1b9 0f00 	cmp.w	r9, #0
 8017990:	d003      	beq.n	801799a <_scanf_i+0x10e>
 8017992:	3301      	adds	r3, #1
 8017994:	f109 39ff 	add.w	r9, r9, #4294967295
 8017998:	60a3      	str	r3, [r4, #8]
 801799a:	6873      	ldr	r3, [r6, #4]
 801799c:	3b01      	subs	r3, #1
 801799e:	2b00      	cmp	r3, #0
 80179a0:	6073      	str	r3, [r6, #4]
 80179a2:	dd1b      	ble.n	80179dc <_scanf_i+0x150>
 80179a4:	6833      	ldr	r3, [r6, #0]
 80179a6:	3301      	adds	r3, #1
 80179a8:	6033      	str	r3, [r6, #0]
 80179aa:	68a3      	ldr	r3, [r4, #8]
 80179ac:	3b01      	subs	r3, #1
 80179ae:	60a3      	str	r3, [r4, #8]
 80179b0:	e7d9      	b.n	8017966 <_scanf_i+0xda>
 80179b2:	f1bb 0f02 	cmp.w	fp, #2
 80179b6:	d1ae      	bne.n	8017916 <_scanf_i+0x8a>
 80179b8:	6822      	ldr	r2, [r4, #0]
 80179ba:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80179be:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80179c2:	d1bf      	bne.n	8017944 <_scanf_i+0xb8>
 80179c4:	2310      	movs	r3, #16
 80179c6:	6063      	str	r3, [r4, #4]
 80179c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80179cc:	e7a2      	b.n	8017914 <_scanf_i+0x88>
 80179ce:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80179d2:	6022      	str	r2, [r4, #0]
 80179d4:	780b      	ldrb	r3, [r1, #0]
 80179d6:	f805 3b01 	strb.w	r3, [r5], #1
 80179da:	e7de      	b.n	801799a <_scanf_i+0x10e>
 80179dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80179e0:	4631      	mov	r1, r6
 80179e2:	4650      	mov	r0, sl
 80179e4:	4798      	blx	r3
 80179e6:	2800      	cmp	r0, #0
 80179e8:	d0df      	beq.n	80179aa <_scanf_i+0x11e>
 80179ea:	6823      	ldr	r3, [r4, #0]
 80179ec:	05d9      	lsls	r1, r3, #23
 80179ee:	d50d      	bpl.n	8017a0c <_scanf_i+0x180>
 80179f0:	42bd      	cmp	r5, r7
 80179f2:	d909      	bls.n	8017a08 <_scanf_i+0x17c>
 80179f4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80179f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80179fc:	4632      	mov	r2, r6
 80179fe:	4650      	mov	r0, sl
 8017a00:	4798      	blx	r3
 8017a02:	f105 39ff 	add.w	r9, r5, #4294967295
 8017a06:	464d      	mov	r5, r9
 8017a08:	42bd      	cmp	r5, r7
 8017a0a:	d028      	beq.n	8017a5e <_scanf_i+0x1d2>
 8017a0c:	6822      	ldr	r2, [r4, #0]
 8017a0e:	f012 0210 	ands.w	r2, r2, #16
 8017a12:	d113      	bne.n	8017a3c <_scanf_i+0x1b0>
 8017a14:	702a      	strb	r2, [r5, #0]
 8017a16:	6863      	ldr	r3, [r4, #4]
 8017a18:	9e01      	ldr	r6, [sp, #4]
 8017a1a:	4639      	mov	r1, r7
 8017a1c:	4650      	mov	r0, sl
 8017a1e:	47b0      	blx	r6
 8017a20:	f8d8 3000 	ldr.w	r3, [r8]
 8017a24:	6821      	ldr	r1, [r4, #0]
 8017a26:	1d1a      	adds	r2, r3, #4
 8017a28:	f8c8 2000 	str.w	r2, [r8]
 8017a2c:	f011 0f20 	tst.w	r1, #32
 8017a30:	681b      	ldr	r3, [r3, #0]
 8017a32:	d00f      	beq.n	8017a54 <_scanf_i+0x1c8>
 8017a34:	6018      	str	r0, [r3, #0]
 8017a36:	68e3      	ldr	r3, [r4, #12]
 8017a38:	3301      	adds	r3, #1
 8017a3a:	60e3      	str	r3, [r4, #12]
 8017a3c:	1bed      	subs	r5, r5, r7
 8017a3e:	44ab      	add	fp, r5
 8017a40:	6925      	ldr	r5, [r4, #16]
 8017a42:	445d      	add	r5, fp
 8017a44:	6125      	str	r5, [r4, #16]
 8017a46:	2000      	movs	r0, #0
 8017a48:	b007      	add	sp, #28
 8017a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a4e:	f04f 0b00 	mov.w	fp, #0
 8017a52:	e7ca      	b.n	80179ea <_scanf_i+0x15e>
 8017a54:	07ca      	lsls	r2, r1, #31
 8017a56:	bf4c      	ite	mi
 8017a58:	8018      	strhmi	r0, [r3, #0]
 8017a5a:	6018      	strpl	r0, [r3, #0]
 8017a5c:	e7eb      	b.n	8017a36 <_scanf_i+0x1aa>
 8017a5e:	2001      	movs	r0, #1
 8017a60:	e7f2      	b.n	8017a48 <_scanf_i+0x1bc>
 8017a62:	bf00      	nop
 8017a64:	080199bc 	.word	0x080199bc
 8017a68:	080145a9 	.word	0x080145a9
 8017a6c:	08014499 	.word	0x08014499
 8017a70:	0801a19e 	.word	0x0801a19e

08017a74 <_read_r>:
 8017a74:	b538      	push	{r3, r4, r5, lr}
 8017a76:	4d07      	ldr	r5, [pc, #28]	; (8017a94 <_read_r+0x20>)
 8017a78:	4604      	mov	r4, r0
 8017a7a:	4608      	mov	r0, r1
 8017a7c:	4611      	mov	r1, r2
 8017a7e:	2200      	movs	r2, #0
 8017a80:	602a      	str	r2, [r5, #0]
 8017a82:	461a      	mov	r2, r3
 8017a84:	f000 f8f0 	bl	8017c68 <_read>
 8017a88:	1c43      	adds	r3, r0, #1
 8017a8a:	d102      	bne.n	8017a92 <_read_r+0x1e>
 8017a8c:	682b      	ldr	r3, [r5, #0]
 8017a8e:	b103      	cbz	r3, 8017a92 <_read_r+0x1e>
 8017a90:	6023      	str	r3, [r4, #0]
 8017a92:	bd38      	pop	{r3, r4, r5, pc}
 8017a94:	20006484 	.word	0x20006484

08017a98 <__sccl>:
 8017a98:	b570      	push	{r4, r5, r6, lr}
 8017a9a:	780b      	ldrb	r3, [r1, #0]
 8017a9c:	4604      	mov	r4, r0
 8017a9e:	2b5e      	cmp	r3, #94	; 0x5e
 8017aa0:	bf0b      	itete	eq
 8017aa2:	784b      	ldrbeq	r3, [r1, #1]
 8017aa4:	1c48      	addne	r0, r1, #1
 8017aa6:	1c88      	addeq	r0, r1, #2
 8017aa8:	2200      	movne	r2, #0
 8017aaa:	bf08      	it	eq
 8017aac:	2201      	moveq	r2, #1
 8017aae:	1e61      	subs	r1, r4, #1
 8017ab0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8017ab4:	f801 2f01 	strb.w	r2, [r1, #1]!
 8017ab8:	42a9      	cmp	r1, r5
 8017aba:	d1fb      	bne.n	8017ab4 <__sccl+0x1c>
 8017abc:	b90b      	cbnz	r3, 8017ac2 <__sccl+0x2a>
 8017abe:	3801      	subs	r0, #1
 8017ac0:	bd70      	pop	{r4, r5, r6, pc}
 8017ac2:	f082 0101 	eor.w	r1, r2, #1
 8017ac6:	54e1      	strb	r1, [r4, r3]
 8017ac8:	1c42      	adds	r2, r0, #1
 8017aca:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8017ace:	2d2d      	cmp	r5, #45	; 0x2d
 8017ad0:	f102 36ff 	add.w	r6, r2, #4294967295
 8017ad4:	4610      	mov	r0, r2
 8017ad6:	d006      	beq.n	8017ae6 <__sccl+0x4e>
 8017ad8:	2d5d      	cmp	r5, #93	; 0x5d
 8017ada:	d0f1      	beq.n	8017ac0 <__sccl+0x28>
 8017adc:	b90d      	cbnz	r5, 8017ae2 <__sccl+0x4a>
 8017ade:	4630      	mov	r0, r6
 8017ae0:	e7ee      	b.n	8017ac0 <__sccl+0x28>
 8017ae2:	462b      	mov	r3, r5
 8017ae4:	e7ef      	b.n	8017ac6 <__sccl+0x2e>
 8017ae6:	7816      	ldrb	r6, [r2, #0]
 8017ae8:	2e5d      	cmp	r6, #93	; 0x5d
 8017aea:	d0fa      	beq.n	8017ae2 <__sccl+0x4a>
 8017aec:	42b3      	cmp	r3, r6
 8017aee:	dcf8      	bgt.n	8017ae2 <__sccl+0x4a>
 8017af0:	4618      	mov	r0, r3
 8017af2:	3001      	adds	r0, #1
 8017af4:	4286      	cmp	r6, r0
 8017af6:	5421      	strb	r1, [r4, r0]
 8017af8:	dcfb      	bgt.n	8017af2 <__sccl+0x5a>
 8017afa:	43d8      	mvns	r0, r3
 8017afc:	4430      	add	r0, r6
 8017afe:	1c5d      	adds	r5, r3, #1
 8017b00:	42b3      	cmp	r3, r6
 8017b02:	bfa8      	it	ge
 8017b04:	2000      	movge	r0, #0
 8017b06:	182b      	adds	r3, r5, r0
 8017b08:	3202      	adds	r2, #2
 8017b0a:	e7de      	b.n	8017aca <__sccl+0x32>

08017b0c <__submore>:
 8017b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b10:	460c      	mov	r4, r1
 8017b12:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017b14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017b18:	4299      	cmp	r1, r3
 8017b1a:	d11d      	bne.n	8017b58 <__submore+0x4c>
 8017b1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017b20:	f7fa fcce 	bl	80124c0 <_malloc_r>
 8017b24:	b918      	cbnz	r0, 8017b2e <__submore+0x22>
 8017b26:	f04f 30ff 	mov.w	r0, #4294967295
 8017b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017b32:	63a3      	str	r3, [r4, #56]	; 0x38
 8017b34:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017b38:	6360      	str	r0, [r4, #52]	; 0x34
 8017b3a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8017b3e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017b42:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8017b46:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017b4a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8017b4e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8017b52:	6020      	str	r0, [r4, #0]
 8017b54:	2000      	movs	r0, #0
 8017b56:	e7e8      	b.n	8017b2a <__submore+0x1e>
 8017b58:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017b5a:	0077      	lsls	r7, r6, #1
 8017b5c:	463a      	mov	r2, r7
 8017b5e:	f7ff f98f 	bl	8016e80 <_realloc_r>
 8017b62:	4605      	mov	r5, r0
 8017b64:	2800      	cmp	r0, #0
 8017b66:	d0de      	beq.n	8017b26 <__submore+0x1a>
 8017b68:	eb00 0806 	add.w	r8, r0, r6
 8017b6c:	4601      	mov	r1, r0
 8017b6e:	4632      	mov	r2, r6
 8017b70:	4640      	mov	r0, r8
 8017b72:	f7fa f9a7 	bl	8011ec4 <memcpy>
 8017b76:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017b7a:	f8c4 8000 	str.w	r8, [r4]
 8017b7e:	e7e9      	b.n	8017b54 <__submore+0x48>

08017b80 <__ascii_wctomb>:
 8017b80:	b149      	cbz	r1, 8017b96 <__ascii_wctomb+0x16>
 8017b82:	2aff      	cmp	r2, #255	; 0xff
 8017b84:	bf85      	ittet	hi
 8017b86:	238a      	movhi	r3, #138	; 0x8a
 8017b88:	6003      	strhi	r3, [r0, #0]
 8017b8a:	700a      	strbls	r2, [r1, #0]
 8017b8c:	f04f 30ff 	movhi.w	r0, #4294967295
 8017b90:	bf98      	it	ls
 8017b92:	2001      	movls	r0, #1
 8017b94:	4770      	bx	lr
 8017b96:	4608      	mov	r0, r1
 8017b98:	4770      	bx	lr
	...

08017b9c <__env_lock>:
 8017b9c:	4801      	ldr	r0, [pc, #4]	; (8017ba4 <__env_lock+0x8>)
 8017b9e:	f7fa b97d 	b.w	8011e9c <__retarget_lock_acquire_recursive>
 8017ba2:	bf00      	nop
 8017ba4:	2000647a 	.word	0x2000647a

08017ba8 <__env_unlock>:
 8017ba8:	4801      	ldr	r0, [pc, #4]	; (8017bb0 <__env_unlock+0x8>)
 8017baa:	f7fa b979 	b.w	8011ea0 <__retarget_lock_release_recursive>
 8017bae:	bf00      	nop
 8017bb0:	2000647a 	.word	0x2000647a

08017bb4 <_fstat_r>:
 8017bb4:	b538      	push	{r3, r4, r5, lr}
 8017bb6:	4d07      	ldr	r5, [pc, #28]	; (8017bd4 <_fstat_r+0x20>)
 8017bb8:	2300      	movs	r3, #0
 8017bba:	4604      	mov	r4, r0
 8017bbc:	4608      	mov	r0, r1
 8017bbe:	4611      	mov	r1, r2
 8017bc0:	602b      	str	r3, [r5, #0]
 8017bc2:	f000 f829 	bl	8017c18 <_fstat>
 8017bc6:	1c43      	adds	r3, r0, #1
 8017bc8:	d102      	bne.n	8017bd0 <_fstat_r+0x1c>
 8017bca:	682b      	ldr	r3, [r5, #0]
 8017bcc:	b103      	cbz	r3, 8017bd0 <_fstat_r+0x1c>
 8017bce:	6023      	str	r3, [r4, #0]
 8017bd0:	bd38      	pop	{r3, r4, r5, pc}
 8017bd2:	bf00      	nop
 8017bd4:	20006484 	.word	0x20006484

08017bd8 <_isatty_r>:
 8017bd8:	b538      	push	{r3, r4, r5, lr}
 8017bda:	4d06      	ldr	r5, [pc, #24]	; (8017bf4 <_isatty_r+0x1c>)
 8017bdc:	2300      	movs	r3, #0
 8017bde:	4604      	mov	r4, r0
 8017be0:	4608      	mov	r0, r1
 8017be2:	602b      	str	r3, [r5, #0]
 8017be4:	f000 f828 	bl	8017c38 <_isatty>
 8017be8:	1c43      	adds	r3, r0, #1
 8017bea:	d102      	bne.n	8017bf2 <_isatty_r+0x1a>
 8017bec:	682b      	ldr	r3, [r5, #0]
 8017bee:	b103      	cbz	r3, 8017bf2 <_isatty_r+0x1a>
 8017bf0:	6023      	str	r3, [r4, #0]
 8017bf2:	bd38      	pop	{r3, r4, r5, pc}
 8017bf4:	20006484 	.word	0x20006484

08017bf8 <_malloc_usable_size_r>:
 8017bf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017bfc:	1f18      	subs	r0, r3, #4
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	bfbc      	itt	lt
 8017c02:	580b      	ldrlt	r3, [r1, r0]
 8017c04:	18c0      	addlt	r0, r0, r3
 8017c06:	4770      	bx	lr

08017c08 <_close>:
 8017c08:	4b02      	ldr	r3, [pc, #8]	; (8017c14 <_close+0xc>)
 8017c0a:	2258      	movs	r2, #88	; 0x58
 8017c0c:	601a      	str	r2, [r3, #0]
 8017c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8017c12:	4770      	bx	lr
 8017c14:	20006484 	.word	0x20006484

08017c18 <_fstat>:
 8017c18:	4b02      	ldr	r3, [pc, #8]	; (8017c24 <_fstat+0xc>)
 8017c1a:	2258      	movs	r2, #88	; 0x58
 8017c1c:	601a      	str	r2, [r3, #0]
 8017c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8017c22:	4770      	bx	lr
 8017c24:	20006484 	.word	0x20006484

08017c28 <_getpid>:
 8017c28:	4b02      	ldr	r3, [pc, #8]	; (8017c34 <_getpid+0xc>)
 8017c2a:	2258      	movs	r2, #88	; 0x58
 8017c2c:	601a      	str	r2, [r3, #0]
 8017c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8017c32:	4770      	bx	lr
 8017c34:	20006484 	.word	0x20006484

08017c38 <_isatty>:
 8017c38:	4b02      	ldr	r3, [pc, #8]	; (8017c44 <_isatty+0xc>)
 8017c3a:	2258      	movs	r2, #88	; 0x58
 8017c3c:	601a      	str	r2, [r3, #0]
 8017c3e:	2000      	movs	r0, #0
 8017c40:	4770      	bx	lr
 8017c42:	bf00      	nop
 8017c44:	20006484 	.word	0x20006484

08017c48 <_kill>:
 8017c48:	4b02      	ldr	r3, [pc, #8]	; (8017c54 <_kill+0xc>)
 8017c4a:	2258      	movs	r2, #88	; 0x58
 8017c4c:	601a      	str	r2, [r3, #0]
 8017c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8017c52:	4770      	bx	lr
 8017c54:	20006484 	.word	0x20006484

08017c58 <_lseek>:
 8017c58:	4b02      	ldr	r3, [pc, #8]	; (8017c64 <_lseek+0xc>)
 8017c5a:	2258      	movs	r2, #88	; 0x58
 8017c5c:	601a      	str	r2, [r3, #0]
 8017c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8017c62:	4770      	bx	lr
 8017c64:	20006484 	.word	0x20006484

08017c68 <_read>:
 8017c68:	4b02      	ldr	r3, [pc, #8]	; (8017c74 <_read+0xc>)
 8017c6a:	2258      	movs	r2, #88	; 0x58
 8017c6c:	601a      	str	r2, [r3, #0]
 8017c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8017c72:	4770      	bx	lr
 8017c74:	20006484 	.word	0x20006484

08017c78 <_sbrk>:
 8017c78:	4b04      	ldr	r3, [pc, #16]	; (8017c8c <_sbrk+0x14>)
 8017c7a:	6819      	ldr	r1, [r3, #0]
 8017c7c:	4602      	mov	r2, r0
 8017c7e:	b909      	cbnz	r1, 8017c84 <_sbrk+0xc>
 8017c80:	4903      	ldr	r1, [pc, #12]	; (8017c90 <_sbrk+0x18>)
 8017c82:	6019      	str	r1, [r3, #0]
 8017c84:	6818      	ldr	r0, [r3, #0]
 8017c86:	4402      	add	r2, r0
 8017c88:	601a      	str	r2, [r3, #0]
 8017c8a:	4770      	bx	lr
 8017c8c:	20005a1c 	.word	0x20005a1c
 8017c90:	20006488 	.word	0x20006488

08017c94 <_write>:
 8017c94:	4b02      	ldr	r3, [pc, #8]	; (8017ca0 <_write+0xc>)
 8017c96:	2258      	movs	r2, #88	; 0x58
 8017c98:	601a      	str	r2, [r3, #0]
 8017c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8017c9e:	4770      	bx	lr
 8017ca0:	20006484 	.word	0x20006484

08017ca4 <_exit>:
 8017ca4:	e7fe      	b.n	8017ca4 <_exit>
	...

08017ca8 <_init>:
 8017ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017caa:	bf00      	nop
 8017cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017cae:	bc08      	pop	{r3}
 8017cb0:	469e      	mov	lr, r3
 8017cb2:	4770      	bx	lr

08017cb4 <_fini>:
 8017cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cb6:	bf00      	nop
 8017cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017cba:	bc08      	pop	{r3}
 8017cbc:	469e      	mov	lr, r3
 8017cbe:	4770      	bx	lr
