
FC_v2.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000183a0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002508  08018550  08018550  00028550  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801aa58  0801aa58  000302e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801aa58  0801aa58  0002aa58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801aa60  0801aa60  000302e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801aa60  0801aa60  0002aa60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801aa68  0801aa68  0002aa68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e4  20000000  0801aa6c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302e4  2**0
                  CONTENTS
 10 .bss          00006210  200002e4  200002e4  000302e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  200064f4  200064f4  000302e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00068362  00000000  00000000  00030314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009633  00000000  00000000  00098676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003660  00000000  00000000  000a1cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000033a8  00000000  00000000  000a5310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000365c2  00000000  00000000  000a86b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003f1fa  00000000  00000000  000dec7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00110d4f  00000000  00000000  0011de74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0022ebc3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0001036c  00000000  00000000  0022ec18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  0023ef84  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  0023f050  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002e4 	.word	0x200002e4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08018538 	.word	0x08018538

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002e8 	.word	0x200002e8
 80001ec:	08018538 	.word	0x08018538

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9ef 	b.w	80010c8 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a4 	b.w	80010c8 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	468c      	mov	ip, r1
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8083 	bne.w	8000f1a <__udivmoddi4+0x116>
 8000e14:	428a      	cmp	r2, r1
 8000e16:	4617      	mov	r7, r2
 8000e18:	d947      	bls.n	8000eaa <__udivmoddi4+0xa6>
 8000e1a:	fab2 f282 	clz	r2, r2
 8000e1e:	b142      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e20:	f1c2 0020 	rsb	r0, r2, #32
 8000e24:	fa24 f000 	lsr.w	r0, r4, r0
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	4097      	lsls	r7, r2
 8000e2c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e30:	4094      	lsls	r4, r2
 8000e32:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e36:	0c23      	lsrs	r3, r4, #16
 8000e38:	fbbc f6f8 	udiv	r6, ip, r8
 8000e3c:	fa1f fe87 	uxth.w	lr, r7
 8000e40:	fb08 c116 	mls	r1, r8, r6, ip
 8000e44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e48:	fb06 f10e 	mul.w	r1, r6, lr
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x60>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e56:	f080 8119 	bcs.w	800108c <__udivmoddi4+0x288>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 8116 	bls.w	800108c <__udivmoddi4+0x288>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e78:	45a6      	cmp	lr, r4
 8000e7a:	d909      	bls.n	8000e90 <__udivmoddi4+0x8c>
 8000e7c:	193c      	adds	r4, r7, r4
 8000e7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e82:	f080 8105 	bcs.w	8001090 <__udivmoddi4+0x28c>
 8000e86:	45a6      	cmp	lr, r4
 8000e88:	f240 8102 	bls.w	8001090 <__udivmoddi4+0x28c>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	443c      	add	r4, r7
 8000e90:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e94:	eba4 040e 	sub.w	r4, r4, lr
 8000e98:	2600      	movs	r6, #0
 8000e9a:	b11d      	cbz	r5, 8000ea4 <__udivmoddi4+0xa0>
 8000e9c:	40d4      	lsrs	r4, r2
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	b902      	cbnz	r2, 8000eae <__udivmoddi4+0xaa>
 8000eac:	deff      	udf	#255	; 0xff
 8000eae:	fab2 f282 	clz	r2, r2
 8000eb2:	2a00      	cmp	r2, #0
 8000eb4:	d150      	bne.n	8000f58 <__udivmoddi4+0x154>
 8000eb6:	1bcb      	subs	r3, r1, r7
 8000eb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ebc:	fa1f f887 	uxth.w	r8, r7
 8000ec0:	2601      	movs	r6, #1
 8000ec2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ec6:	0c21      	lsrs	r1, r4, #16
 8000ec8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0xe4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0xe2>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	f200 80e9 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000ee6:	4684      	mov	ip, r0
 8000ee8:	1ac9      	subs	r1, r1, r3
 8000eea:	b2a3      	uxth	r3, r4
 8000eec:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ef8:	fb08 f800 	mul.w	r8, r8, r0
 8000efc:	45a0      	cmp	r8, r4
 8000efe:	d907      	bls.n	8000f10 <__udivmoddi4+0x10c>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f06:	d202      	bcs.n	8000f0e <__udivmoddi4+0x10a>
 8000f08:	45a0      	cmp	r8, r4
 8000f0a:	f200 80d9 	bhi.w	80010c0 <__udivmoddi4+0x2bc>
 8000f0e:	4618      	mov	r0, r3
 8000f10:	eba4 0408 	sub.w	r4, r4, r8
 8000f14:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f18:	e7bf      	b.n	8000e9a <__udivmoddi4+0x96>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d909      	bls.n	8000f32 <__udivmoddi4+0x12e>
 8000f1e:	2d00      	cmp	r5, #0
 8000f20:	f000 80b1 	beq.w	8001086 <__udivmoddi4+0x282>
 8000f24:	2600      	movs	r6, #0
 8000f26:	e9c5 0100 	strd	r0, r1, [r5]
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	4631      	mov	r1, r6
 8000f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f32:	fab3 f683 	clz	r6, r3
 8000f36:	2e00      	cmp	r6, #0
 8000f38:	d14a      	bne.n	8000fd0 <__udivmoddi4+0x1cc>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d302      	bcc.n	8000f44 <__udivmoddi4+0x140>
 8000f3e:	4282      	cmp	r2, r0
 8000f40:	f200 80b8 	bhi.w	80010b4 <__udivmoddi4+0x2b0>
 8000f44:	1a84      	subs	r4, r0, r2
 8000f46:	eb61 0103 	sbc.w	r1, r1, r3
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	468c      	mov	ip, r1
 8000f4e:	2d00      	cmp	r5, #0
 8000f50:	d0a8      	beq.n	8000ea4 <__udivmoddi4+0xa0>
 8000f52:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f56:	e7a5      	b.n	8000ea4 <__udivmoddi4+0xa0>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f60:	4097      	lsls	r7, r2
 8000f62:	fa01 f002 	lsl.w	r0, r1, r2
 8000f66:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6a:	40d9      	lsrs	r1, r3
 8000f6c:	4330      	orrs	r0, r6
 8000f6e:	0c03      	lsrs	r3, r0, #16
 8000f70:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f74:	fa1f f887 	uxth.w	r8, r7
 8000f78:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f80:	fb06 f108 	mul.w	r1, r6, r8
 8000f84:	4299      	cmp	r1, r3
 8000f86:	fa04 f402 	lsl.w	r4, r4, r2
 8000f8a:	d909      	bls.n	8000fa0 <__udivmoddi4+0x19c>
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f92:	f080 808d 	bcs.w	80010b0 <__udivmoddi4+0x2ac>
 8000f96:	4299      	cmp	r1, r3
 8000f98:	f240 808a 	bls.w	80010b0 <__udivmoddi4+0x2ac>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	443b      	add	r3, r7
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b281      	uxth	r1, r0
 8000fa4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fa8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb0:	fb00 f308 	mul.w	r3, r0, r8
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	d907      	bls.n	8000fc8 <__udivmoddi4+0x1c4>
 8000fb8:	1879      	adds	r1, r7, r1
 8000fba:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fbe:	d273      	bcs.n	80010a8 <__udivmoddi4+0x2a4>
 8000fc0:	428b      	cmp	r3, r1
 8000fc2:	d971      	bls.n	80010a8 <__udivmoddi4+0x2a4>
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	4439      	add	r1, r7
 8000fc8:	1acb      	subs	r3, r1, r3
 8000fca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fce:	e778      	b.n	8000ec2 <__udivmoddi4+0xbe>
 8000fd0:	f1c6 0c20 	rsb	ip, r6, #32
 8000fd4:	fa03 f406 	lsl.w	r4, r3, r6
 8000fd8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fdc:	431c      	orrs	r4, r3
 8000fde:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fe2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fe6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fea:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fee:	431f      	orrs	r7, r3
 8000ff0:	0c3b      	lsrs	r3, r7, #16
 8000ff2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff6:	fa1f f884 	uxth.w	r8, r4
 8000ffa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001002:	fb09 fa08 	mul.w	sl, r9, r8
 8001006:	458a      	cmp	sl, r1
 8001008:	fa02 f206 	lsl.w	r2, r2, r6
 800100c:	fa00 f306 	lsl.w	r3, r0, r6
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x220>
 8001012:	1861      	adds	r1, r4, r1
 8001014:	f109 30ff 	add.w	r0, r9, #4294967295
 8001018:	d248      	bcs.n	80010ac <__udivmoddi4+0x2a8>
 800101a:	458a      	cmp	sl, r1
 800101c:	d946      	bls.n	80010ac <__udivmoddi4+0x2a8>
 800101e:	f1a9 0902 	sub.w	r9, r9, #2
 8001022:	4421      	add	r1, r4
 8001024:	eba1 010a 	sub.w	r1, r1, sl
 8001028:	b2bf      	uxth	r7, r7
 800102a:	fbb1 f0fe 	udiv	r0, r1, lr
 800102e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001032:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001036:	fb00 f808 	mul.w	r8, r0, r8
 800103a:	45b8      	cmp	r8, r7
 800103c:	d907      	bls.n	800104e <__udivmoddi4+0x24a>
 800103e:	19e7      	adds	r7, r4, r7
 8001040:	f100 31ff 	add.w	r1, r0, #4294967295
 8001044:	d22e      	bcs.n	80010a4 <__udivmoddi4+0x2a0>
 8001046:	45b8      	cmp	r8, r7
 8001048:	d92c      	bls.n	80010a4 <__udivmoddi4+0x2a0>
 800104a:	3802      	subs	r0, #2
 800104c:	4427      	add	r7, r4
 800104e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001052:	eba7 0708 	sub.w	r7, r7, r8
 8001056:	fba0 8902 	umull	r8, r9, r0, r2
 800105a:	454f      	cmp	r7, r9
 800105c:	46c6      	mov	lr, r8
 800105e:	4649      	mov	r1, r9
 8001060:	d31a      	bcc.n	8001098 <__udivmoddi4+0x294>
 8001062:	d017      	beq.n	8001094 <__udivmoddi4+0x290>
 8001064:	b15d      	cbz	r5, 800107e <__udivmoddi4+0x27a>
 8001066:	ebb3 020e 	subs.w	r2, r3, lr
 800106a:	eb67 0701 	sbc.w	r7, r7, r1
 800106e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001072:	40f2      	lsrs	r2, r6
 8001074:	ea4c 0202 	orr.w	r2, ip, r2
 8001078:	40f7      	lsrs	r7, r6
 800107a:	e9c5 2700 	strd	r2, r7, [r5]
 800107e:	2600      	movs	r6, #0
 8001080:	4631      	mov	r1, r6
 8001082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e70b      	b.n	8000ea4 <__udivmoddi4+0xa0>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e9      	b.n	8000e64 <__udivmoddi4+0x60>
 8001090:	4618      	mov	r0, r3
 8001092:	e6fd      	b.n	8000e90 <__udivmoddi4+0x8c>
 8001094:	4543      	cmp	r3, r8
 8001096:	d2e5      	bcs.n	8001064 <__udivmoddi4+0x260>
 8001098:	ebb8 0e02 	subs.w	lr, r8, r2
 800109c:	eb69 0104 	sbc.w	r1, r9, r4
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7df      	b.n	8001064 <__udivmoddi4+0x260>
 80010a4:	4608      	mov	r0, r1
 80010a6:	e7d2      	b.n	800104e <__udivmoddi4+0x24a>
 80010a8:	4660      	mov	r0, ip
 80010aa:	e78d      	b.n	8000fc8 <__udivmoddi4+0x1c4>
 80010ac:	4681      	mov	r9, r0
 80010ae:	e7b9      	b.n	8001024 <__udivmoddi4+0x220>
 80010b0:	4666      	mov	r6, ip
 80010b2:	e775      	b.n	8000fa0 <__udivmoddi4+0x19c>
 80010b4:	4630      	mov	r0, r6
 80010b6:	e74a      	b.n	8000f4e <__udivmoddi4+0x14a>
 80010b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80010bc:	4439      	add	r1, r7
 80010be:	e713      	b.n	8000ee8 <__udivmoddi4+0xe4>
 80010c0:	3802      	subs	r0, #2
 80010c2:	443c      	add	r4, r7
 80010c4:	e724      	b.n	8000f10 <__udivmoddi4+0x10c>
 80010c6:	bf00      	nop

080010c8 <__aeabi_idiv0>:
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <println>:

#include <MRT_helpers.h>
#include <MRT_setup.h>
#include <tim.h>

void println(char* s){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	#if PRINT
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff f895 	bl	8000204 <strlen>
 80010da:	4603      	mov	r3, r0
 80010dc:	b29a      	uxth	r2, r3
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4806      	ldr	r0, [pc, #24]	; (8001100 <println+0x34>)
 80010e6:	f00d fc96 	bl	800ea16 <HAL_UART_Transmit>
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	2202      	movs	r2, #2
 80010f0:	4904      	ldr	r1, [pc, #16]	; (8001104 <println+0x38>)
 80010f2:	4803      	ldr	r0, [pc, #12]	; (8001100 <println+0x34>)
 80010f4:	f00d fc8f 	bl	800ea16 <HAL_UART_Transmit>
	#endif
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20005da4 	.word	0x20005da4
 8001104:	08018550 	.word	0x08018550

08001108 <print>:

void print(char* s){
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	#if PRINT
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff f877 	bl	8000204 <strlen>
 8001116:	4603      	mov	r3, r0
 8001118:	b29a      	uxth	r2, r3
 800111a:	f04f 33ff 	mov.w	r3, #4294967295
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	4803      	ldr	r0, [pc, #12]	; (8001130 <print+0x28>)
 8001122:	f00d fc78 	bl	800ea16 <HAL_UART_Transmit>
	#endif
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20005da4 	.word	0x20005da4

08001134 <tone_freq>:
void no_print(char* s){
	//TODO Buffer function for Iridium
}

// buzz at particular frequency
void tone_freq(uint32_t duration, uint32_t repeats, uint32_t freq) {
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
		HAL_GPIO_WritePin(POWER_ON_EXT_LED_GPIO_Port, POWER_ON_EXT_LED_Pin, RESET);
		if (repeats > 1)
			HAL_Delay(duration);
	}
	#endif
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <buzz_success>:
void buzz_success(void) { tone_freq(BUZZ_SUCCESS_DURATION, BUZZ_SUCCESS_REPEATS, BUZZ_SUCCESS_FREQ); }
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
 8001150:	f240 4216 	movw	r2, #1046	; 0x416
 8001154:	2102      	movs	r1, #2
 8001156:	204b      	movs	r0, #75	; 0x4b
 8001158:	f7ff ffec 	bl	8001134 <tone_freq>
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <buzz_startup_success>:
void buzz_failure(void) { tone_freq(BUZZ_FAILURE_DURATION, BUZZ_FAILURE_REPEATS, BUZZ_FAILURE_FREQ); }
void buzz_startup_success(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8001166:	2300      	movs	r3, #0
 8001168:	71fb      	strb	r3, [r7, #7]
 800116a:	e008      	b.n	800117e <buzz_startup_success+0x1e>
		buzz_success();
 800116c:	f7ff ffee 	bl	800114c <buzz_success>
		HAL_Delay(1000);
 8001170:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001174:	f008 fbfe 	bl	8009974 <HAL_Delay>
	for (uint8_t i = 0; i < 3; i++) {
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	3301      	adds	r3, #1
 800117c:	71fb      	strb	r3, [r7, #7]
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	2b02      	cmp	r3, #2
 8001182:	d9f3      	bls.n	800116c <buzz_startup_success+0xc>
	}
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <MRT_Init>:


//**************************************************//
//PUBLIC FUNCTIONS

void MRT_Init(void){
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
	print((char*) "\r\n\r\n/********MRT Init********/\r\n");
 8001194:	4808      	ldr	r0, [pc, #32]	; (80011b8 <MRT_Init+0x28>)
 8001196:	f7ff ffb7 	bl	8001108 <print>
	print((char*) "IWDG Init...");
	MX_IWDG_Init();
	print((char*) "OK\r\n");
	#endif

	MRT_Reinitialize_Peripherals();
 800119a:	f000 f8f3 	bl	8001384 <MRT_Reinitialize_Peripherals>

	//Memory
	MRT_MEMORY_Init();
 800119e:	f002 fa5b 	bl	8003658 <MRT_MEMORY_Init>
	MRT_reset_info();
 80011a2:	f000 f819 	bl	80011d8 <MRT_reset_info>

	//RTC
	HAL_IWDG_Refresh(&hiwdg);
	MRT_rtc_Init();
 80011a6:	f001 f909 	bl	80023bc <MRT_rtc_Init>
		  checkForI2CDevices(huart8,hi2c1);
		  checkForI2CDevices(huart8,hi2c2);
		  checkForI2CDevices(huart8,hi2c3);
		#endif

		MRT_i2c_sensors_Init();
 80011aa:	f003 fa5d 	bl	8004668 <MRT_i2c_sensors_Init>
	#endif


	//Telemetry
	#if TELEMETRY_THREAD
		MRT_TELEMETRY_Init();
 80011ae:	f008 fb7d 	bl	80098ac <MRT_TELEMETRY_Init>
	#endif

	#if FORCED_EJECTION_STAGE
		   ejection_stage_flag = FORCED_STAGE;
	#endif
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	08018554 	.word	0x08018554

080011bc <MRT_Deinit>:




void MRT_Deinit(void){
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	print((char*) "\r\n\r\n/********MRT Deinit********/\r\n");
 80011c0:	4804      	ldr	r0, [pc, #16]	; (80011d4 <MRT_Deinit+0x18>)
 80011c2:	f7ff ffa1 	bl	8001108 <print>

	MRT_Reinitialize_Peripherals();
 80011c6:	f000 f8dd 	bl	8001384 <MRT_Reinitialize_Peripherals>
	#endif


	//Sensors
	#if SENSORS_THREAD
		MRT_i2c_sensors_Deinit();
 80011ca:	f003 fa7d 	bl	80046c8 <MRT_i2c_sensors_Deinit>
	#endif

    //TODO
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	08018578 	.word	0x08018578

080011d8 <MRT_reset_info>:

//**************************************************//
//PRIVATE FUNCTIONS


void MRT_reset_info(void){
 80011d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011da:	b0a9      	sub	sp, #164	; 0xa4
 80011dc:	af06      	add	r7, sp, #24

	  char buffer[100];
	  sprintf(buffer,"Reset: %i,  WU: %i,  IWDG: %i\r\nPrevious RTC time: %i:%i:%i ::%i\r\n",
 80011de:	4b51      	ldr	r3, [pc, #324]	; (8001324 <MRT_reset_info+0x14c>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	461e      	mov	r6, r3
 80011e4:	4b50      	ldr	r3, [pc, #320]	; (8001328 <MRT_reset_info+0x150>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	469c      	mov	ip, r3
 80011ea:	4b50      	ldr	r3, [pc, #320]	; (800132c <MRT_reset_info+0x154>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	4b4f      	ldr	r3, [pc, #316]	; (8001330 <MRT_reset_info+0x158>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4619      	mov	r1, r3
 80011f6:	4b4f      	ldr	r3, [pc, #316]	; (8001334 <MRT_reset_info+0x15c>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	461c      	mov	r4, r3
 80011fc:	4b4e      	ldr	r3, [pc, #312]	; (8001338 <MRT_reset_info+0x160>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461d      	mov	r5, r3
 8001202:	4b4e      	ldr	r3, [pc, #312]	; (800133c <MRT_reset_info+0x164>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800120a:	9304      	str	r3, [sp, #16]
 800120c:	9503      	str	r5, [sp, #12]
 800120e:	9402      	str	r4, [sp, #8]
 8001210:	9101      	str	r1, [sp, #4]
 8001212:	9200      	str	r2, [sp, #0]
 8001214:	4663      	mov	r3, ip
 8001216:	4632      	mov	r2, r6
 8001218:	4949      	ldr	r1, [pc, #292]	; (8001340 <MRT_reset_info+0x168>)
 800121a:	f012 fdbf 	bl	8013d9c <siprintf>
			  reset_flag, wu_flag, iwdg_flag, prev_hour, prev_min, prev_sec, prev_subsec);
	  print(buffer);
 800121e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff70 	bl	8001108 <print>

	  //Check if IWDG is being deactivated
	  if (iwdg_flag==1){
 8001228:	4b40      	ldr	r3, [pc, #256]	; (800132c <MRT_reset_info+0x154>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d119      	bne.n	8001264 <MRT_reset_info+0x8c>
		  print((char*) "Deactivating IWDG\r\n");
 8001230:	4844      	ldr	r0, [pc, #272]	; (8001344 <MRT_reset_info+0x16c>)
 8001232:	f7ff ff69 	bl	8001108 <print>

		  iwdg_flag = 0; //Flip flag
 8001236:	4b3d      	ldr	r3, [pc, #244]	; (800132c <MRT_reset_info+0x154>)
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]

		  //Write new flag to memory
		  rtc_bckp_reg_iwdg = iwdg_flag;
 800123c:	4b3b      	ldr	r3, [pc, #236]	; (800132c <MRT_reset_info+0x154>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	4b41      	ldr	r3, [pc, #260]	; (8001348 <MRT_reset_info+0x170>)
 8001244:	601a      	str	r2, [r3, #0]
		  ext_flash_iwdg = iwdg_flag;
 8001246:	4b39      	ldr	r3, [pc, #228]	; (800132c <MRT_reset_info+0x154>)
 8001248:	781a      	ldrb	r2, [r3, #0]
 800124a:	4b40      	ldr	r3, [pc, #256]	; (800134c <MRT_reset_info+0x174>)
 800124c:	701a      	strb	r2, [r3, #0]
		  MRT_saveFlagValue(FC_STATE_IWDG);
 800124e:	2002      	movs	r0, #2
 8001250:	f002 f830 	bl	80032b4 <MRT_saveFlagValue>

		  HAL_Delay(500);
 8001254:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001258:	f008 fb8c 	bl	8009974 <HAL_Delay>

		  //Go to sleep
		  MRT_StandByMode(SLEEP_TIME);
 800125c:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 8001260:	f001 f94c 	bl	80024fc <MRT_StandByMode>
	  }


	  //Check if we are after waking up (and at which wake up we are at)
	  if (wu_flag > 0){
 8001264:	4b30      	ldr	r3, [pc, #192]	; (8001328 <MRT_reset_info+0x150>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d010      	beq.n	800128e <MRT_reset_info+0xb6>
		  char buf[30];
		  sprintf(buf, "FC wake up %i\r\n", wu_flag);
 800126c:	4b2e      	ldr	r3, [pc, #184]	; (8001328 <MRT_reset_info+0x150>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	4936      	ldr	r1, [pc, #216]	; (8001350 <MRT_reset_info+0x178>)
 8001276:	4618      	mov	r0, r3
 8001278:	f012 fd90 	bl	8013d9c <siprintf>
		  print(buf);
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ff42 	bl	8001108 <print>

		  print((char*) "Resetting RTC time\r\n");
 8001284:	4833      	ldr	r0, [pc, #204]	; (8001354 <MRT_reset_info+0x17c>)
 8001286:	f7ff ff3f 	bl	8001108 <print>

		  //Clear RTC time (last recorded)
		  MRT_resetTotalTime();
 800128a:	f002 f8d3 	bl	8003434 <MRT_resetTotalTime>
	  }


	  //Check if we start from the beginning
	  if (reset_flag == 0){
 800128e:	4b25      	ldr	r3, [pc, #148]	; (8001324 <MRT_reset_info+0x14c>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d108      	bne.n	80012a8 <MRT_reset_info+0xd0>
		  print((char*) "FC restarted\r\n");
 8001296:	4830      	ldr	r0, [pc, #192]	; (8001358 <MRT_reset_info+0x180>)
 8001298:	f7ff ff36 	bl	8001108 <print>

		  reset_flag = 1; //Flip flag
 800129c:	4b21      	ldr	r3, [pc, #132]	; (8001324 <MRT_reset_info+0x14c>)
 800129e:	2201      	movs	r2, #1
 80012a0:	701a      	strb	r2, [r3, #0]

		  MRT_saveFlagValue(FC_STATE_RESET);
 80012a2:	2000      	movs	r0, #0
 80012a4:	f002 f806 	bl	80032b4 <MRT_saveFlagValue>
	  }


	  //Check if before or after apogee
	  if (apogee_flag == 0){
 80012a8:	4b2c      	ldr	r3, [pc, #176]	; (800135c <MRT_reset_info+0x184>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d103      	bne.n	80012b8 <MRT_reset_info+0xe0>
		  print((char*) "Pre-apogee\r\n");
 80012b0:	482b      	ldr	r0, [pc, #172]	; (8001360 <MRT_reset_info+0x188>)
 80012b2:	f7ff ff29 	bl	8001108 <print>
 80012b6:	e006      	b.n	80012c6 <MRT_reset_info+0xee>
	  }
	  else if(apogee_flag==1){
 80012b8:	4b28      	ldr	r3, [pc, #160]	; (800135c <MRT_reset_info+0x184>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d102      	bne.n	80012c6 <MRT_reset_info+0xee>
		  print((char*) "Post-apogee\r\n");
 80012c0:	4828      	ldr	r0, [pc, #160]	; (8001364 <MRT_reset_info+0x18c>)
 80012c2:	f7ff ff21 	bl	8001108 <print>
	  }


	  //Check ejection stage
	  print((char*)"Ejection Stage: ");
 80012c6:	4828      	ldr	r0, [pc, #160]	; (8001368 <MRT_reset_info+0x190>)
 80012c8:	f7ff ff1e 	bl	8001108 <print>
	  if (ejection_stage_flag==PAD){
 80012cc:	4b27      	ldr	r3, [pc, #156]	; (800136c <MRT_reset_info+0x194>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d103      	bne.n	80012dc <MRT_reset_info+0x104>
		  print((char*)"Pad\r\n");
 80012d4:	4826      	ldr	r0, [pc, #152]	; (8001370 <MRT_reset_info+0x198>)
 80012d6:	f7ff ff17 	bl	8001108 <print>
		  print((char*)"Main descent\r\n");
	  }
	  else if(ejection_stage_flag==LANDED){
		  print((char*)"Landed\r\n");
	  }
}
 80012da:	e01e      	b.n	800131a <MRT_reset_info+0x142>
	  else if(ejection_stage_flag==BOOST){
 80012dc:	4b23      	ldr	r3, [pc, #140]	; (800136c <MRT_reset_info+0x194>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d103      	bne.n	80012ec <MRT_reset_info+0x114>
		  print((char*)"Boost\r\n");
 80012e4:	4823      	ldr	r0, [pc, #140]	; (8001374 <MRT_reset_info+0x19c>)
 80012e6:	f7ff ff0f 	bl	8001108 <print>
}
 80012ea:	e016      	b.n	800131a <MRT_reset_info+0x142>
	  else if(ejection_stage_flag==DROGUE_DESCENT){
 80012ec:	4b1f      	ldr	r3, [pc, #124]	; (800136c <MRT_reset_info+0x194>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d103      	bne.n	80012fc <MRT_reset_info+0x124>
		  print((char*)"Drogue descent\r\n");
 80012f4:	4820      	ldr	r0, [pc, #128]	; (8001378 <MRT_reset_info+0x1a0>)
 80012f6:	f7ff ff07 	bl	8001108 <print>
}
 80012fa:	e00e      	b.n	800131a <MRT_reset_info+0x142>
	  else if(ejection_stage_flag==MAIN_DESCENT){
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <MRT_reset_info+0x194>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b03      	cmp	r3, #3
 8001302:	d103      	bne.n	800130c <MRT_reset_info+0x134>
		  print((char*)"Main descent\r\n");
 8001304:	481d      	ldr	r0, [pc, #116]	; (800137c <MRT_reset_info+0x1a4>)
 8001306:	f7ff feff 	bl	8001108 <print>
}
 800130a:	e006      	b.n	800131a <MRT_reset_info+0x142>
	  else if(ejection_stage_flag==LANDED){
 800130c:	4b17      	ldr	r3, [pc, #92]	; (800136c <MRT_reset_info+0x194>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b04      	cmp	r3, #4
 8001312:	d102      	bne.n	800131a <MRT_reset_info+0x142>
		  print((char*)"Landed\r\n");
 8001314:	481a      	ldr	r0, [pc, #104]	; (8001380 <MRT_reset_info+0x1a8>)
 8001316:	f7ff fef7 	bl	8001108 <print>
}
 800131a:	bf00      	nop
 800131c:	378c      	adds	r7, #140	; 0x8c
 800131e:	46bd      	mov	sp, r7
 8001320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001322:	bf00      	nop
 8001324:	20000380 	.word	0x20000380
 8001328:	20000381 	.word	0x20000381
 800132c:	20000382 	.word	0x20000382
 8001330:	20000385 	.word	0x20000385
 8001334:	20000386 	.word	0x20000386
 8001338:	20000387 	.word	0x20000387
 800133c:	20000388 	.word	0x20000388
 8001340:	0801859c 	.word	0x0801859c
 8001344:	080185e0 	.word	0x080185e0
 8001348:	20000350 	.word	0x20000350
 800134c:	20000370 	.word	0x20000370
 8001350:	080185f4 	.word	0x080185f4
 8001354:	08018604 	.word	0x08018604
 8001358:	0801861c 	.word	0x0801861c
 800135c:	20000383 	.word	0x20000383
 8001360:	0801862c 	.word	0x0801862c
 8001364:	0801863c 	.word	0x0801863c
 8001368:	0801864c 	.word	0x0801864c
 800136c:	20000384 	.word	0x20000384
 8001370:	08018660 	.word	0x08018660
 8001374:	08018668 	.word	0x08018668
 8001378:	08018670 	.word	0x08018670
 800137c:	08018684 	.word	0x08018684
 8001380:	08018694 	.word	0x08018694

08001384 <MRT_Reinitialize_Peripherals>:


void MRT_Reinitialize_Peripherals(void){
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
	  /*
	   * Reinitialize all peripherals
	   */

	  print((char*)"Reinitializing Peripherals...");
 8001388:	482f      	ldr	r0, [pc, #188]	; (8001448 <MRT_Reinitialize_Peripherals+0xc4>)
 800138a:	f7ff febd 	bl	8001108 <print>

	  // reset LEDs
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	2102      	movs	r1, #2
 8001392:	482e      	ldr	r0, [pc, #184]	; (800144c <MRT_Reinitialize_Peripherals+0xc8>)
 8001394:	f009 f85c 	bl	800a450 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001398:	2200      	movs	r2, #0
 800139a:	2104      	movs	r1, #4
 800139c:	482b      	ldr	r0, [pc, #172]	; (800144c <MRT_Reinitialize_Peripherals+0xc8>)
 800139e:	f009 f857 	bl	800a450 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2108      	movs	r1, #8
 80013a6:	4829      	ldr	r0, [pc, #164]	; (800144c <MRT_Reinitialize_Peripherals+0xc8>)
 80013a8:	f009 f852 	bl	800a450 <HAL_GPIO_WritePin>

	  // reset recovery pyro pins
	  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 80013ac:	2201      	movs	r2, #1
 80013ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013b2:	4827      	ldr	r0, [pc, #156]	; (8001450 <MRT_Reinitialize_Peripherals+0xcc>)
 80013b4:	f009 f84c 	bl	800a450 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 80013b8:	2200      	movs	r2, #0
 80013ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013be:	4824      	ldr	r0, [pc, #144]	; (8001450 <MRT_Reinitialize_Peripherals+0xcc>)
 80013c0:	f009 f846 	bl	800a450 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 80013c4:	2200      	movs	r2, #0
 80013c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ca:	4821      	ldr	r0, [pc, #132]	; (8001450 <MRT_Reinitialize_Peripherals+0xcc>)
 80013cc:	f009 f840 	bl	800a450 <HAL_GPIO_WritePin>

	  // reset prop pyro pins
	  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET); //PG1 ARMING_PROP
 80013d0:	2201      	movs	r2, #1
 80013d2:	2102      	movs	r1, #2
 80013d4:	481e      	ldr	r0, [pc, #120]	; (8001450 <MRT_Reinitialize_Peripherals+0xcc>)
 80013d6:	f009 f83b 	bl	800a450 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 80013da:	2200      	movs	r2, #0
 80013dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013e0:	481c      	ldr	r0, [pc, #112]	; (8001454 <MRT_Reinitialize_Peripherals+0xd0>)
 80013e2:	f009 f835 	bl	800a450 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ec:	4819      	ldr	r0, [pc, #100]	; (8001454 <MRT_Reinitialize_Peripherals+0xd0>)
 80013ee:	f009 f82f 	bl	800a450 <HAL_GPIO_WritePin>

	  // reset 12 V buck converter enable pin (disable converter)
	  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 80013f2:	2200      	movs	r2, #0
 80013f4:	2104      	movs	r1, #4
 80013f6:	4818      	ldr	r0, [pc, #96]	; (8001458 <MRT_Reinitialize_Peripherals+0xd4>)
 80013f8:	f009 f82a 	bl	800a450 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
	  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


	  // reset payload EN signal
	  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001402:	4815      	ldr	r0, [pc, #84]	; (8001458 <MRT_Reinitialize_Peripherals+0xd4>)
 8001404:	f009 f824 	bl	800a450 <HAL_GPIO_WritePin>

	  // set CS pin for thermocouple chip high
	  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

	  // set power off for VR
	  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 8001408:	2200      	movs	r2, #0
 800140a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800140e:	4810      	ldr	r0, [pc, #64]	; (8001450 <MRT_Reinitialize_Peripherals+0xcc>)
 8001410:	f009 f81e 	bl	800a450 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 8001414:	2200      	movs	r2, #0
 8001416:	2180      	movs	r1, #128	; 0x80
 8001418:	4810      	ldr	r0, [pc, #64]	; (800145c <MRT_Reinitialize_Peripherals+0xd8>)
 800141a:	f009 f819 	bl	800a450 <HAL_GPIO_WritePin>

	  // FLASH set CS, WP and IO3 pins high
	  HAL_GPIO_WritePin(OUT_FLASH_CS_GPIO_Port, OUT_FLASH_CS_Pin, SET);
 800141e:	2201      	movs	r2, #1
 8001420:	2140      	movs	r1, #64	; 0x40
 8001422:	480e      	ldr	r0, [pc, #56]	; (800145c <MRT_Reinitialize_Peripherals+0xd8>)
 8001424:	f009 f814 	bl	800a450 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_WP_GPIO_Port, OUT_FLASH_WP_Pin, SET);
 8001428:	2201      	movs	r2, #1
 800142a:	2120      	movs	r1, #32
 800142c:	480b      	ldr	r0, [pc, #44]	; (800145c <MRT_Reinitialize_Peripherals+0xd8>)
 800142e:	f009 f80f 	bl	800a450 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_IO3_GPIO_Port, OUT_FLASH_IO3_Pin, SET);
 8001432:	2201      	movs	r2, #1
 8001434:	2110      	movs	r1, #16
 8001436:	4809      	ldr	r0, [pc, #36]	; (800145c <MRT_Reinitialize_Peripherals+0xd8>)
 8001438:	f009 f80a 	bl	800a450 <HAL_GPIO_WritePin>

	  print((char*)"OK\r\n");
 800143c:	4808      	ldr	r0, [pc, #32]	; (8001460 <MRT_Reinitialize_Peripherals+0xdc>)
 800143e:	f7ff fe63 	bl	8001108 <print>
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	080186a0 	.word	0x080186a0
 800144c:	40020800 	.word	0x40020800
 8001450:	40021800 	.word	0x40021800
 8001454:	40021400 	.word	0x40021400
 8001458:	40021000 	.word	0x40021000
 800145c:	40020c00 	.word	0x40020c00
 8001460:	080186c0 	.word	0x080186c0

08001464 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800146a:	463b      	mov	r3, r7
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001476:	4b21      	ldr	r3, [pc, #132]	; (80014fc <MX_ADC1_Init+0x98>)
 8001478:	4a21      	ldr	r2, [pc, #132]	; (8001500 <MX_ADC1_Init+0x9c>)
 800147a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800147c:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <MX_ADC1_Init+0x98>)
 800147e:	2200      	movs	r2, #0
 8001480:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001482:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <MX_ADC1_Init+0x98>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001488:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <MX_ADC1_Init+0x98>)
 800148a:	2200      	movs	r2, #0
 800148c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800148e:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <MX_ADC1_Init+0x98>)
 8001490:	2200      	movs	r2, #0
 8001492:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001494:	4b19      	ldr	r3, [pc, #100]	; (80014fc <MX_ADC1_Init+0x98>)
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800149c:	4b17      	ldr	r3, [pc, #92]	; (80014fc <MX_ADC1_Init+0x98>)
 800149e:	2200      	movs	r2, #0
 80014a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014a2:	4b16      	ldr	r3, [pc, #88]	; (80014fc <MX_ADC1_Init+0x98>)
 80014a4:	4a17      	ldr	r2, [pc, #92]	; (8001504 <MX_ADC1_Init+0xa0>)
 80014a6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <MX_ADC1_Init+0x98>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014ae:	4b13      	ldr	r3, [pc, #76]	; (80014fc <MX_ADC1_Init+0x98>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <MX_ADC1_Init+0x98>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <MX_ADC1_Init+0x98>)
 80014be:	2201      	movs	r2, #1
 80014c0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014c2:	480e      	ldr	r0, [pc, #56]	; (80014fc <MX_ADC1_Init+0x98>)
 80014c4:	f008 fa7a 	bl	80099bc <HAL_ADC_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80014ce:	f000 feb1 	bl	8002234 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80014d2:	2306      	movs	r3, #6
 80014d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014d6:	2301      	movs	r3, #1
 80014d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014da:	2300      	movs	r3, #0
 80014dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014de:	463b      	mov	r3, r7
 80014e0:	4619      	mov	r1, r3
 80014e2:	4806      	ldr	r0, [pc, #24]	; (80014fc <MX_ADC1_Init+0x98>)
 80014e4:	f008 faae 	bl	8009a44 <HAL_ADC_ConfigChannel>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80014ee:	f000 fea1 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20005a8c 	.word	0x20005a8c
 8001500:	40012000 	.word	0x40012000
 8001504:	0f000001 	.word	0x0f000001

08001508 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08a      	sub	sp, #40	; 0x28
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a17      	ldr	r2, [pc, #92]	; (8001584 <HAL_ADC_MspInit+0x7c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d127      	bne.n	800157a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	4b16      	ldr	r3, [pc, #88]	; (8001588 <HAL_ADC_MspInit+0x80>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	4a15      	ldr	r2, [pc, #84]	; (8001588 <HAL_ADC_MspInit+0x80>)
 8001534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001538:	6453      	str	r3, [r2, #68]	; 0x44
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <HAL_ADC_MspInit+0x80>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <HAL_ADC_MspInit+0x80>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a0e      	ldr	r2, [pc, #56]	; (8001588 <HAL_ADC_MspInit+0x80>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <HAL_ADC_MspInit+0x80>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 8001562:	2340      	movs	r3, #64	; 0x40
 8001564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001566:	2303      	movs	r3, #3
 8001568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	; (800158c <HAL_ADC_MspInit+0x84>)
 8001576:	f008 fda7 	bl	800a0c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800157a:	bf00      	nop
 800157c:	3728      	adds	r7, #40	; 0x28
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40012000 	.word	0x40012000
 8001588:	40023800 	.word	0x40023800
 800158c:	40020000 	.word	0x40020000

08001590 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001594:	f3bf 8f4f 	dsb	sy
}
 8001598:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <__NVIC_SystemReset+0x24>)
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80015a2:	4904      	ldr	r1, [pc, #16]	; (80015b4 <__NVIC_SystemReset+0x24>)
 80015a4:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <__NVIC_SystemReset+0x28>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80015aa:	f3bf 8f4f 	dsb	sy
}
 80015ae:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <__NVIC_SystemReset+0x20>
 80015b4:	e000ed00 	.word	0xe000ed00
 80015b8:	05fa0004 	.word	0x05fa0004

080015bc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

	println("\r\nFREERTOS Init");
 80015c0:	4821      	ldr	r0, [pc, #132]	; (8001648 <MX_FREERTOS_Init+0x8c>)
 80015c2:	f7ff fd83 	bl	80010cc <println>
	print("\tInitializing the kernel...");
 80015c6:	4821      	ldr	r0, [pc, #132]	; (800164c <MX_FREERTOS_Init+0x90>)
 80015c8:	f7ff fd9e 	bl	8001108 <print>
	osKernelInitialize();
 80015cc:	f00d fe98 	bl	800f300 <osKernelInitialize>
	println("OK");
 80015d0:	481f      	ldr	r0, [pc, #124]	; (8001650 <MX_FREERTOS_Init+0x94>)
 80015d2:	f7ff fd7b 	bl	80010cc <println>

	print("\tCreating the threads...");
 80015d6:	481f      	ldr	r0, [pc, #124]	; (8001654 <MX_FREERTOS_Init+0x98>)
 80015d8:	f7ff fd96 	bl	8001108 <print>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Memory0 */
  Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 80015dc:	4a1e      	ldr	r2, [pc, #120]	; (8001658 <MX_FREERTOS_Init+0x9c>)
 80015de:	2100      	movs	r1, #0
 80015e0:	481e      	ldr	r0, [pc, #120]	; (800165c <MX_FREERTOS_Init+0xa0>)
 80015e2:	f00d fed7 	bl	800f394 <osThreadNew>
 80015e6:	4603      	mov	r3, r0
 80015e8:	4a1d      	ldr	r2, [pc, #116]	; (8001660 <MX_FREERTOS_Init+0xa4>)
 80015ea:	6013      	str	r3, [r2, #0]

  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 80015ec:	4a1d      	ldr	r2, [pc, #116]	; (8001664 <MX_FREERTOS_Init+0xa8>)
 80015ee:	2100      	movs	r1, #0
 80015f0:	481d      	ldr	r0, [pc, #116]	; (8001668 <MX_FREERTOS_Init+0xac>)
 80015f2:	f00d fecf 	bl	800f394 <osThreadNew>
 80015f6:	4603      	mov	r3, r0
 80015f8:	4a1c      	ldr	r2, [pc, #112]	; (800166c <MX_FREERTOS_Init+0xb0>)
 80015fa:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 80015fc:	4a1c      	ldr	r2, [pc, #112]	; (8001670 <MX_FREERTOS_Init+0xb4>)
 80015fe:	2100      	movs	r1, #0
 8001600:	481c      	ldr	r0, [pc, #112]	; (8001674 <MX_FREERTOS_Init+0xb8>)
 8001602:	f00d fec7 	bl	800f394 <osThreadNew>
 8001606:	4603      	mov	r3, r0
 8001608:	4a1b      	ldr	r2, [pc, #108]	; (8001678 <MX_FREERTOS_Init+0xbc>)
 800160a:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 800160c:	4a1b      	ldr	r2, [pc, #108]	; (800167c <MX_FREERTOS_Init+0xc0>)
 800160e:	2100      	movs	r1, #0
 8001610:	481b      	ldr	r0, [pc, #108]	; (8001680 <MX_FREERTOS_Init+0xc4>)
 8001612:	f00d febf 	bl	800f394 <osThreadNew>
 8001616:	4603      	mov	r3, r0
 8001618:	4a1a      	ldr	r2, [pc, #104]	; (8001684 <MX_FREERTOS_Init+0xc8>)
 800161a:	6013      	str	r3, [r2, #0]

  /* creation of WatchDog */
  WatchDogHandle = osThreadNew(StartWatchDog, NULL, &WatchDog_attributes);
 800161c:	4a1a      	ldr	r2, [pc, #104]	; (8001688 <MX_FREERTOS_Init+0xcc>)
 800161e:	2100      	movs	r1, #0
 8001620:	481a      	ldr	r0, [pc, #104]	; (800168c <MX_FREERTOS_Init+0xd0>)
 8001622:	f00d feb7 	bl	800f394 <osThreadNew>
 8001626:	4603      	mov	r3, r0
 8001628:	4a19      	ldr	r2, [pc, #100]	; (8001690 <MX_FREERTOS_Init+0xd4>)
 800162a:	6013      	str	r3, [r2, #0]

  /* creation of Propulsion4 */
  Propulsion4Handle = osThreadNew(StartPropulsion4, NULL, &Propulsion4_attributes);
 800162c:	4a19      	ldr	r2, [pc, #100]	; (8001694 <MX_FREERTOS_Init+0xd8>)
 800162e:	2100      	movs	r1, #0
 8001630:	4819      	ldr	r0, [pc, #100]	; (8001698 <MX_FREERTOS_Init+0xdc>)
 8001632:	f00d feaf 	bl	800f394 <osThreadNew>
 8001636:	4603      	mov	r3, r0
 8001638:	4a18      	ldr	r2, [pc, #96]	; (800169c <MX_FREERTOS_Init+0xe0>)
 800163a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  println("OK");
 800163c:	4804      	ldr	r0, [pc, #16]	; (8001650 <MX_FREERTOS_Init+0x94>)
 800163e:	f7ff fd45 	bl	80010cc <println>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	0801870c 	.word	0x0801870c
 800164c:	0801871c 	.word	0x0801871c
 8001650:	08018738 	.word	0x08018738
 8001654:	0801873c 	.word	0x0801873c
 8001658:	0801a284 	.word	0x0801a284
 800165c:	080016a1 	.word	0x080016a1
 8001660:	20005ad8 	.word	0x20005ad8
 8001664:	0801a2a8 	.word	0x0801a2a8
 8001668:	080016c1 	.word	0x080016c1
 800166c:	20005af0 	.word	0x20005af0
 8001670:	0801a2cc 	.word	0x0801a2cc
 8001674:	080016dd 	.word	0x080016dd
 8001678:	20005af4 	.word	0x20005af4
 800167c:	0801a2f0 	.word	0x0801a2f0
 8001680:	080017ed 	.word	0x080017ed
 8001684:	20005af8 	.word	0x20005af8
 8001688:	0801a314 	.word	0x0801a314
 800168c:	08001865 	.word	0x08001865
 8001690:	20005ad4 	.word	0x20005ad4
 8001694:	0801a338 	.word	0x0801a338
 8001698:	080019fd 	.word	0x080019fd
 800169c:	20005afc 	.word	0x20005afc

080016a0 <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMemory0 */

	//TODO UNTESTED

	//Add thread id to the list
	threadsID[0]=osThreadGetId();
 80016a8:	f00d ff06 	bl	800f4b8 <osThreadGetId>
 80016ac:	4603      	mov	r3, r0
 80016ae:	4a03      	ldr	r2, [pc, #12]	; (80016bc <StartMemory0+0x1c>)
 80016b0:	6013      	str	r3, [r2, #0]
		sd_write(&fil, msg_buffer_pr);
	}
	f_close(&fil);
	#endif

	osDelay(1000/DATA_FREQ);
 80016b2:	2064      	movs	r0, #100	; 0x64
 80016b4:	f00d ff9c 	bl	800f5f0 <osDelay>
 80016b8:	e7fb      	b.n	80016b2 <StartMemory0+0x12>
 80016ba:	bf00      	nop
 80016bc:	20005adc 	.word	0x20005adc

080016c0 <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEjection1 */

	//Add thread id to the list
	threadsID[1]=osThreadGetId();
 80016c8:	f00d fef6 	bl	800f4b8 <osThreadGetId>
 80016cc:	4603      	mov	r3, r0
 80016ce:	4a02      	ldr	r2, [pc, #8]	; (80016d8 <StartEjection1+0x18>)
 80016d0:	6053      	str	r3, [r2, #4]

	#if !EJECTION_THREAD
	osThreadExit();
 80016d2:	f00d ff5a 	bl	800f58a <osThreadExit>
 80016d6:	bf00      	nop
 80016d8:	20005adc 	.word	0x20005adc

080016dc <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b0c4      	sub	sp, #272	; 0x110
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartTelemetry2 */

	//Add thread id to the list
	threadsID[2]=osThreadGetId();
 80016e6:	f00d fee7 	bl	800f4b8 <osThreadGetId>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4a39      	ldr	r2, [pc, #228]	; (80017d4 <StartTelemetry2+0xf8>)
 80016ee:	6093      	str	r3, [r2, #8]
	#if !TELEMETRY_THREAD
	osThreadExit();
	#endif

	char radio_buffer[RADIO_BUFFER_SIZE];
	uint8_t counter = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint8_t iridium_counter = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 80016fc:	2201      	movs	r2, #1
 80016fe:	2108      	movs	r1, #8
 8001700:	4835      	ldr	r0, [pc, #212]	; (80017d8 <StartTelemetry2+0xfc>)
 8001702:	f008 fea5 	bl	800a450 <HAL_GPIO_WritePin>

	  if(apogee_flag == 0){ //Only send prop data pre-apogee
 8001706:	4b35      	ldr	r3, [pc, #212]	; (80017dc <StartTelemetry2+0x100>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d118      	bne.n	8001740 <StartTelemetry2+0x64>

		  //Send propulsion data
		  memset(radio_buffer, 0, RADIO_BUFFER_SIZE);
 800170e:	f107 030c 	add.w	r3, r7, #12
 8001712:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001716:	2100      	movs	r1, #0
 8001718:	4618      	mov	r0, r3
 800171a:	f011 f843 	bl	80127a4 <memset>
		  MRT_formatPropulsion();
 800171e:	f002 fdf9 	bl	8004314 <MRT_formatPropulsion>
		  memcpy(radio_buffer, msg_buffer_pr, strlen(msg_buffer_pr));
 8001722:	482f      	ldr	r0, [pc, #188]	; (80017e0 <StartTelemetry2+0x104>)
 8001724:	f7fe fd6e 	bl	8000204 <strlen>
 8001728:	4602      	mov	r2, r0
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	492c      	ldr	r1, [pc, #176]	; (80017e0 <StartTelemetry2+0x104>)
 8001730:	4618      	mov	r0, r3
 8001732:	f011 f80f 	bl	8012754 <memcpy>
		  MRT_radio_tx((char*) radio_buffer);
 8001736:	f107 030c 	add.w	r3, r7, #12
 800173a:	4618      	mov	r0, r3
 800173c:	f008 f898 	bl	8009870 <MRT_radio_tx>
	  }


	  if (counter == SENSORS_SEND_FREQ_DIVIDER){
 8001740:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001744:	2b0a      	cmp	r3, #10
 8001746:	d12e      	bne.n	80017a6 <StartTelemetry2+0xca>
		  counter = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		  float SEC = (uint8_t) time % 60; sprintf(&SEC,"%.0f",SEC);
		  float SUBSEC = time / 3600.0; sprintf(&SUBSEC,"%.0f",SUBSEC);
		  */

	  	  //Send sensors data
		  memset(radio_buffer, 0, RADIO_BUFFER_SIZE);
 800174e:	f107 030c 	add.w	r3, r7, #12
 8001752:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001756:	2100      	movs	r1, #0
 8001758:	4618      	mov	r0, r3
 800175a:	f011 f823 	bl	80127a4 <memset>
		  MRT_formatAvionics();
 800175e:	f001 fc73 	bl	8003048 <MRT_formatAvionics>
		  memcpy(radio_buffer, msg_buffer_av, strlen(msg_buffer_av));
 8001762:	4820      	ldr	r0, [pc, #128]	; (80017e4 <StartTelemetry2+0x108>)
 8001764:	f7fe fd4e 	bl	8000204 <strlen>
 8001768:	4602      	mov	r2, r0
 800176a:	f107 030c 	add.w	r3, r7, #12
 800176e:	491d      	ldr	r1, [pc, #116]	; (80017e4 <StartTelemetry2+0x108>)
 8001770:	4618      	mov	r0, r3
 8001772:	f010 ffef 	bl	8012754 <memcpy>
		  MRT_radio_tx((char*) radio_buffer);
 8001776:	f107 030c 	add.w	r3, r7, #12
 800177a:	4618      	mov	r0, r3
 800177c:	f008 f878 	bl	8009870 <MRT_radio_tx>


		  if(apogee_flag && iridium_counter == IRIDIUM_SEND_FREQ_DIVIDER){
 8001780:	4b16      	ldr	r3, [pc, #88]	; (80017dc <StartTelemetry2+0x100>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d009      	beq.n	800179c <StartTelemetry2+0xc0>
 8001788:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800178c:	2b05      	cmp	r3, #5
 800178e:	d105      	bne.n	800179c <StartTelemetry2+0xc0>
			  iridium_counter = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
			  #if IRIDIUM_ //Iridium send
			  hiridium.getTime(); //TODO doesn't cost anything
 8001796:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <StartTelemetry2+0x10c>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	4798      	blx	r3
			  //hiridium.sendMessage(msg); TODO IT COSTS CREDITS WATCH OUT
			  #endif
		  }
		  iridium_counter++;
 800179c:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80017a0:	3301      	adds	r3, #1
 80017a2:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	  }
	  counter++;
 80017a6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80017aa:	3301      	adds	r3, #1
 80017ac:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f


	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 80017b0:	2200      	movs	r2, #0
 80017b2:	2108      	movs	r1, #8
 80017b4:	4808      	ldr	r0, [pc, #32]	; (80017d8 <StartTelemetry2+0xfc>)
 80017b6:	f008 fe4b 	bl	800a450 <HAL_GPIO_WritePin>

	  if (apogee_flag){
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <StartTelemetry2+0x100>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <StartTelemetry2+0xee>
		  osDelay(1000/POST_APOGEE_SEND_FREQ);
 80017c2:	200a      	movs	r0, #10
 80017c4:	f00d ff14 	bl	800f5f0 <osDelay>
 80017c8:	e798      	b.n	80016fc <StartTelemetry2+0x20>
	  }
	  else{
		  osDelay(1000/PRE_APOGEE_SEND_FREQ);
 80017ca:	2014      	movs	r0, #20
 80017cc:	f00d ff10 	bl	800f5f0 <osDelay>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 80017d0:	e794      	b.n	80016fc <StartTelemetry2+0x20>
 80017d2:	bf00      	nop
 80017d4:	20005adc 	.word	0x20005adc
 80017d8:	40020800 	.word	0x40020800
 80017dc:	20000383 	.word	0x20000383
 80017e0:	20005f30 	.word	0x20005f30
 80017e4:	20005e2c 	.word	0x20005e2c
 80017e8:	200003ec 	.word	0x200003ec

080017ec <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */

	//Add thread id to the list
	threadsID[3]=osThreadGetId();
 80017f4:	f00d fe60 	bl	800f4b8 <osThreadGetId>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4a13      	ldr	r2, [pc, #76]	; (8001848 <StartSensors3+0x5c>)
 80017fc:	60d3      	str	r3, [r2, #12]


  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 80017fe:	2201      	movs	r2, #1
 8001800:	2102      	movs	r1, #2
 8001802:	4812      	ldr	r0, [pc, #72]	; (800184c <StartSensors3+0x60>)
 8001804:	f008 fe24 	bl	800a450 <HAL_GPIO_WritePin>

	  //GPS
	  hgps.pollAll();
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <StartSensors3+0x64>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	4798      	blx	r3

	  //LSM6DSR
	  hlsm6dsr.pollAll();
 800180e:	4b11      	ldr	r3, [pc, #68]	; (8001854 <StartSensors3+0x68>)
 8001810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001812:	4798      	blx	r3

	  //LPS22HH
	  hlps22hh.pollAll();
 8001814:	4b10      	ldr	r3, [pc, #64]	; (8001858 <StartSensors3+0x6c>)
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	4798      	blx	r3

	  //Gates continuity
	  gates_continuity = MRT_getContinuity();
 800181a:	f001 fbe1 	bl	8002fe0 <MRT_getContinuity>
 800181e:	4603      	mov	r3, r0
 8001820:	461a      	mov	r2, r3
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <StartSensors3+0x70>)
 8001824:	701a      	strb	r2, [r3, #0]

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 8001826:	2200      	movs	r2, #0
 8001828:	2102      	movs	r1, #2
 800182a:	4808      	ldr	r0, [pc, #32]	; (800184c <StartSensors3+0x60>)
 800182c:	f008 fe10 	bl	800a450 <HAL_GPIO_WritePin>

	  if (apogee_flag){
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <StartSensors3+0x74>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <StartSensors3+0x54>
		  osDelay(1000/POST_APOGEE_POLL_FREQ);
 8001838:	200a      	movs	r0, #10
 800183a:	f00d fed9 	bl	800f5f0 <osDelay>
 800183e:	e7de      	b.n	80017fe <StartSensors3+0x12>
	  }
	  else{
		  osDelay(1000/PRE_APOGEE_POLL_FREQ);
 8001840:	2014      	movs	r0, #20
 8001842:	f00d fed5 	bl	800f5f0 <osDelay>
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 8001846:	e7da      	b.n	80017fe <StartSensors3+0x12>
 8001848:	20005adc 	.word	0x20005adc
 800184c:	40020800 	.word	0x40020800
 8001850:	200003d4 	.word	0x200003d4
 8001854:	20000394 	.word	0x20000394
 8001858:	200003c0 	.word	0x200003c0
 800185c:	2000036d 	.word	0x2000036d
 8001860:	20000383 	.word	0x20000383

08001864 <StartWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchDog */
void StartWatchDog(void *argument)
{
 8001864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001868:	b0c6      	sub	sp, #280	; 0x118
 800186a:	af04      	add	r7, sp, #16
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	6018      	str	r0, [r3, #0]
	char buffer[WD_BUFFER_SIZE];

  /* Infinite loop */
  for(;;)
  {
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 8001870:	2201      	movs	r2, #1
 8001872:	2104      	movs	r1, #4
 8001874:	484e      	ldr	r0, [pc, #312]	; (80019b0 <StartWatchDog+0x14c>)
 8001876:	f008 fdeb 	bl	800a450 <HAL_GPIO_WritePin>

	 HAL_IWDG_Refresh(&hiwdg);

	 //Get RTC time
	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800187a:	2200      	movs	r2, #0
 800187c:	494d      	ldr	r1, [pc, #308]	; (80019b4 <StartWatchDog+0x150>)
 800187e:	484e      	ldr	r0, [pc, #312]	; (80019b8 <StartWatchDog+0x154>)
 8001880:	f00a fec6 	bl	800c610 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001884:	2200      	movs	r2, #0
 8001886:	494d      	ldr	r1, [pc, #308]	; (80019bc <StartWatchDog+0x158>)
 8001888:	484b      	ldr	r0, [pc, #300]	; (80019b8 <StartWatchDog+0x154>)
 800188a:	f00a ffc6 	bl	800c81a <HAL_RTC_GetDate>

	 //Update global variables
	 prev_hour = sTime.Hours;
 800188e:	4b49      	ldr	r3, [pc, #292]	; (80019b4 <StartWatchDog+0x150>)
 8001890:	781a      	ldrb	r2, [r3, #0]
 8001892:	4b4b      	ldr	r3, [pc, #300]	; (80019c0 <StartWatchDog+0x15c>)
 8001894:	701a      	strb	r2, [r3, #0]
	 prev_min = sTime.Minutes;
 8001896:	4b47      	ldr	r3, [pc, #284]	; (80019b4 <StartWatchDog+0x150>)
 8001898:	785a      	ldrb	r2, [r3, #1]
 800189a:	4b4a      	ldr	r3, [pc, #296]	; (80019c4 <StartWatchDog+0x160>)
 800189c:	701a      	strb	r2, [r3, #0]
	 prev_sec = sTime.Seconds;
 800189e:	4b45      	ldr	r3, [pc, #276]	; (80019b4 <StartWatchDog+0x150>)
 80018a0:	789a      	ldrb	r2, [r3, #2]
 80018a2:	4b49      	ldr	r3, [pc, #292]	; (80019c8 <StartWatchDog+0x164>)
 80018a4:	701a      	strb	r2, [r3, #0]
	 if (__HAL_RTC_SHIFT_GET_FLAG(&hrtc, RTC_FLAG_SHPF)) prev_sec++; //Adjust following the user manual
 80018a6:	4b44      	ldr	r3, [pc, #272]	; (80019b8 <StartWatchDog+0x154>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	f003 0308 	and.w	r3, r3, #8
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d005      	beq.n	80018c0 <StartWatchDog+0x5c>
 80018b4:	4b44      	ldr	r3, [pc, #272]	; (80019c8 <StartWatchDog+0x164>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	3301      	adds	r3, #1
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	4b42      	ldr	r3, [pc, #264]	; (80019c8 <StartWatchDog+0x164>)
 80018be:	701a      	strb	r2, [r3, #0]
	 prev_subsec = sTime.SubSeconds;
 80018c0:	4b3c      	ldr	r3, [pc, #240]	; (80019b4 <StartWatchDog+0x150>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	4a41      	ldr	r2, [pc, #260]	; (80019cc <StartWatchDog+0x168>)
 80018c6:	6013      	str	r3, [r2, #0]

	 //Save the time
	 MRT_saveTotalTime();
 80018c8:	f001 fd80 	bl	80033cc <MRT_saveTotalTime>

	 //TODO remove for comp
	 memset(buffer, 0, WD_BUFFER_SIZE);
 80018cc:	f107 0308 	add.w	r3, r7, #8
 80018d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018d4:	2100      	movs	r1, #0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f010 ff64 	bl	80127a4 <memset>
	 sprintf(buffer, "Time: %i:%i:%i ::%lu	Altitude: \r\n %f\r\n", prev_hour,prev_min,prev_sec,prev_subsec , altitude_m);
 80018dc:	4b38      	ldr	r3, [pc, #224]	; (80019c0 <StartWatchDog+0x15c>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	461e      	mov	r6, r3
 80018e2:	4b38      	ldr	r3, [pc, #224]	; (80019c4 <StartWatchDog+0x160>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	4698      	mov	r8, r3
 80018e8:	4b37      	ldr	r3, [pc, #220]	; (80019c8 <StartWatchDog+0x164>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	461d      	mov	r5, r3
 80018ee:	4b37      	ldr	r3, [pc, #220]	; (80019cc <StartWatchDog+0x168>)
 80018f0:	681c      	ldr	r4, [r3, #0]
 80018f2:	4b37      	ldr	r3, [pc, #220]	; (80019d0 <StartWatchDog+0x16c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fe46 	bl	8000588 <__aeabi_f2d>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	f107 0008 	add.w	r0, r7, #8
 8001904:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001908:	9401      	str	r4, [sp, #4]
 800190a:	9500      	str	r5, [sp, #0]
 800190c:	4643      	mov	r3, r8
 800190e:	4632      	mov	r2, r6
 8001910:	4930      	ldr	r1, [pc, #192]	; (80019d4 <StartWatchDog+0x170>)
 8001912:	f012 fa43 	bl	8013d9c <siprintf>
	 println((char*) buffer);
 8001916:	f107 0308 	add.w	r3, r7, #8
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fbd6 	bl	80010cc <println>


	 //Check if new ejection stage to save on external flash
	 if(wd_ejection_flag == 1){
 8001920:	4b2d      	ldr	r3, [pc, #180]	; (80019d8 <StartWatchDog+0x174>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d121      	bne.n	800196c <StartWatchDog+0x108>

		wd_ejection_flag = 0;
 8001928:	4b2b      	ldr	r3, [pc, #172]	; (80019d8 <StartWatchDog+0x174>)
 800192a:	2200      	movs	r2, #0
 800192c:	701a      	strb	r2, [r3, #0]

		//Update ejection stage flag and save it
		rtc_bckp_reg_ejection_stage = ejection_stage_flag;
 800192e:	4b2b      	ldr	r3, [pc, #172]	; (80019dc <StartWatchDog+0x178>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	4b2a      	ldr	r3, [pc, #168]	; (80019e0 <StartWatchDog+0x17c>)
 8001936:	601a      	str	r2, [r3, #0]
		ext_flash_ejection_stage = ejection_stage_flag;
 8001938:	4b28      	ldr	r3, [pc, #160]	; (80019dc <StartWatchDog+0x178>)
 800193a:	781a      	ldrb	r2, [r3, #0]
 800193c:	4b29      	ldr	r3, [pc, #164]	; (80019e4 <StartWatchDog+0x180>)
 800193e:	701a      	strb	r2, [r3, #0]
		MRT_saveFlagValue(FC_STATE_FLIGHT);
 8001940:	2004      	movs	r0, #4
 8001942:	f001 fcb7 	bl	80032b4 <MRT_saveFlagValue>

		//If applicable, update apogee flag
		if (ejection_stage_flag >= DROGUE_DESCENT){
 8001946:	4b25      	ldr	r3, [pc, #148]	; (80019dc <StartWatchDog+0x178>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d90e      	bls.n	800196c <StartWatchDog+0x108>
			apogee_flag = 1;
 800194e:	4b26      	ldr	r3, [pc, #152]	; (80019e8 <StartWatchDog+0x184>)
 8001950:	2201      	movs	r2, #1
 8001952:	701a      	strb	r2, [r3, #0]
			rtc_bckp_reg_apogee = apogee_flag;
 8001954:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <StartWatchDog+0x184>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	461a      	mov	r2, r3
 800195a:	4b24      	ldr	r3, [pc, #144]	; (80019ec <StartWatchDog+0x188>)
 800195c:	601a      	str	r2, [r3, #0]
			ext_flash_apogee = apogee_flag;
 800195e:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <StartWatchDog+0x184>)
 8001960:	781a      	ldrb	r2, [r3, #0]
 8001962:	4b23      	ldr	r3, [pc, #140]	; (80019f0 <StartWatchDog+0x18c>)
 8001964:	701a      	strb	r2, [r3, #0]
			MRT_saveFlagValue(FC_STATE_APOGEE);
 8001966:	2003      	movs	r0, #3
 8001968:	f001 fca4 	bl	80032b4 <MRT_saveFlagValue>
		}
	 }

	  //Check if it's sleep time
	  if (flagA==1){
 800196c:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <StartWatchDog+0x190>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d110      	bne.n	8001996 <StartWatchDog+0x132>
		//Update iwdg_flag
		iwdg_flag = 1;
 8001974:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <StartWatchDog+0x194>)
 8001976:	2201      	movs	r2, #1
 8001978:	701a      	strb	r2, [r3, #0]
		rtc_bckp_reg_apogee = iwdg_flag;
 800197a:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <StartWatchDog+0x194>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	461a      	mov	r2, r3
 8001980:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <StartWatchDog+0x188>)
 8001982:	601a      	str	r2, [r3, #0]
		ext_flash_apogee = iwdg_flag;
 8001984:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <StartWatchDog+0x194>)
 8001986:	781a      	ldrb	r2, [r3, #0]
 8001988:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <StartWatchDog+0x18c>)
 800198a:	701a      	strb	r2, [r3, #0]
		MRT_saveFlagValue(FC_STATE_IWDG);
 800198c:	2002      	movs	r0, #2
 800198e:	f001 fc91 	bl	80032b4 <MRT_saveFlagValue>

		//Reset to deactivate IWDG
		NVIC_SystemReset();
 8001992:	f7ff fdfd 	bl	8001590 <__NVIC_SystemReset>
	  }

	  MRT_checkThreadStates();
 8001996:	f000 f83f 	bl	8001a18 <MRT_checkThreadStates>

	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 800199a:	2200      	movs	r2, #0
 800199c:	2104      	movs	r1, #4
 800199e:	4804      	ldr	r0, [pc, #16]	; (80019b0 <StartWatchDog+0x14c>)
 80019a0:	f008 fd56 	bl	800a450 <HAL_GPIO_WritePin>

	  osDelay(1000/WD_FREQ);
 80019a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019a8:	f00d fe22 	bl	800f5f0 <osDelay>
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 80019ac:	e760      	b.n	8001870 <StartWatchDog+0xc>
 80019ae:	bf00      	nop
 80019b0:	40020800 	.word	0x40020800
 80019b4:	20000308 	.word	0x20000308
 80019b8:	20005ba8 	.word	0x20005ba8
 80019bc:	2000031c 	.word	0x2000031c
 80019c0:	20000385 	.word	0x20000385
 80019c4:	20000386 	.word	0x20000386
 80019c8:	20000387 	.word	0x20000387
 80019cc:	20000388 	.word	0x20000388
 80019d0:	20000300 	.word	0x20000300
 80019d4:	08018758 	.word	0x08018758
 80019d8:	20000304 	.word	0x20000304
 80019dc:	20000384 	.word	0x20000384
 80019e0:	20000358 	.word	0x20000358
 80019e4:	20000372 	.word	0x20000372
 80019e8:	20000383 	.word	0x20000383
 80019ec:	20000354 	.word	0x20000354
 80019f0:	20000371 	.word	0x20000371
 80019f4:	2000036c 	.word	0x2000036c
 80019f8:	20000382 	.word	0x20000382

080019fc <StartPropulsion4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPropulsion4 */
void StartPropulsion4(void *argument)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPropulsion4 */

	//Add thread id to the list
	threadsID[4]=osThreadGetId();
 8001a04:	f00d fd58 	bl	800f4b8 <osThreadGetId>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	4a02      	ldr	r2, [pc, #8]	; (8001a14 <StartPropulsion4+0x18>)
 8001a0c:	6113      	str	r3, [r2, #16]

	#if !PROPULSION_THREAD
	osThreadExit();
 8001a0e:	f00d fdbc 	bl	800f58a <osThreadExit>
 8001a12:	bf00      	nop
 8001a14:	20005adc 	.word	0x20005adc

08001a18 <MRT_checkThreadStates>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

//TODO private functions

void MRT_checkThreadStates(void){
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
	  //Check each thread state
	  #if THREAD_KEEPER

	  osThreadState_t thread_state;

	  for (int i=0; i < NUMBER_OF_THREADS;i++){
 8001a1e:	2300      	movs	r3, #0
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	e055      	b.n	8001ad0 <MRT_checkThreadStates+0xb8>

		  thread_state = osThreadGetState(threadsID[i]);
 8001a24:	4a2e      	ldr	r2, [pc, #184]	; (8001ae0 <MRT_checkThreadStates+0xc8>)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f00d fd4f 	bl	800f4d0 <osThreadGetState>
 8001a32:	6038      	str	r0, [r7, #0]

		  if (thread_state == osThreadInactive ||
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d005      	beq.n	8001a46 <MRT_checkThreadStates+0x2e>
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d002      	beq.n	8001a46 <MRT_checkThreadStates+0x2e>
			  thread_state == osThreadBlocked  ||
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	d128      	bne.n	8001a98 <MRT_checkThreadStates+0x80>
			  thread_state == osThreadTerminated){

			  //Ejection thread
			  if (i==1 && ejection_stage_flag < LANDED){
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d10a      	bne.n	8001a62 <MRT_checkThreadStates+0x4a>
 8001a4c:	4b25      	ldr	r3, [pc, #148]	; (8001ae4 <MRT_checkThreadStates+0xcc>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	d806      	bhi.n	8001a62 <MRT_checkThreadStates+0x4a>
				 osThreadResume(threadsID[i]);
 8001a54:	4a22      	ldr	r2, [pc, #136]	; (8001ae0 <MRT_checkThreadStates+0xc8>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f00d fd73 	bl	800f548 <osThreadResume>
			  }

			  //Propulsion thread
			  if (i==4 && (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT)){
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d10f      	bne.n	8001a88 <MRT_checkThreadStates+0x70>
 8001a68:	4b1f      	ldr	r3, [pc, #124]	; (8001ae8 <MRT_checkThreadStates+0xd0>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d103      	bne.n	8001a78 <MRT_checkThreadStates+0x60>
 8001a70:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <MRT_checkThreadStates+0xcc>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d907      	bls.n	8001a88 <MRT_checkThreadStates+0x70>
				  osThreadTerminate(threadsID[i]);
 8001a78:	4a19      	ldr	r2, [pc, #100]	; (8001ae0 <MRT_checkThreadStates+0xc8>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f00d fd88 	bl	800f596 <osThreadTerminate>
				  continue;
 8001a86:	e020      	b.n	8001aca <MRT_checkThreadStates+0xb2>
			  }
			  else {
				 //Resume otherwise
				 osThreadResume(threadsID[i]);
 8001a88:	4a15      	ldr	r2, [pc, #84]	; (8001ae0 <MRT_checkThreadStates+0xc8>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f00d fd59 	bl	800f548 <osThreadResume>
			  if (i==4 && (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT)){
 8001a96:	e018      	b.n	8001aca <MRT_checkThreadStates+0xb2>
			  }
		  }

		  else if (thread_state == osThreadError){
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a9e:	d114      	bne.n	8001aca <MRT_checkThreadStates+0xb2>
			  //If it's the propulsion thread
			  if (i==4 && (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT)){
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d10f      	bne.n	8001ac6 <MRT_checkThreadStates+0xae>
 8001aa6:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <MRT_checkThreadStates+0xd0>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d103      	bne.n	8001ab6 <MRT_checkThreadStates+0x9e>
 8001aae:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <MRT_checkThreadStates+0xcc>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d907      	bls.n	8001ac6 <MRT_checkThreadStates+0xae>
				  osThreadTerminate(threadsID[i]);
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <MRT_checkThreadStates+0xc8>)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f00d fd69 	bl	800f596 <osThreadTerminate>
				  continue;
 8001ac4:	e001      	b.n	8001aca <MRT_checkThreadStates+0xb2>
			  }
			  else{
				 //Reset otherwise
				 NVIC_SystemReset();
 8001ac6:	f7ff fd63 	bl	8001590 <__NVIC_SystemReset>
	  for (int i=0; i < NUMBER_OF_THREADS;i++){
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3301      	adds	r3, #1
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	dda6      	ble.n	8001a24 <MRT_checkThreadStates+0xc>
		  else if (thread_state == osThreadReserved){ TODO not sure what is this state
		  }
		  */
	  }
	  #endif
}
 8001ad6:	bf00      	nop
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20005adc 	.word	0x20005adc
 8001ae4:	20000384 	.word	0x20000384
 8001ae8:	20000383 	.word	0x20000383

08001aec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08e      	sub	sp, #56	; 0x38
 8001af0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	609a      	str	r2, [r3, #8]
 8001afe:	60da      	str	r2, [r3, #12]
 8001b00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	623b      	str	r3, [r7, #32]
 8001b06:	4bb5      	ldr	r3, [pc, #724]	; (8001ddc <MX_GPIO_Init+0x2f0>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4ab4      	ldr	r2, [pc, #720]	; (8001ddc <MX_GPIO_Init+0x2f0>)
 8001b0c:	f043 0310 	orr.w	r3, r3, #16
 8001b10:	6313      	str	r3, [r2, #48]	; 0x30
 8001b12:	4bb2      	ldr	r3, [pc, #712]	; (8001ddc <MX_GPIO_Init+0x2f0>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	f003 0310 	and.w	r3, r3, #16
 8001b1a:	623b      	str	r3, [r7, #32]
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
 8001b22:	4bae      	ldr	r3, [pc, #696]	; (8001ddc <MX_GPIO_Init+0x2f0>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4aad      	ldr	r2, [pc, #692]	; (8001ddc <MX_GPIO_Init+0x2f0>)
 8001b28:	f043 0304 	orr.w	r3, r3, #4
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4bab      	ldr	r3, [pc, #684]	; (8001ddc <MX_GPIO_Init+0x2f0>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	61fb      	str	r3, [r7, #28]
 8001b38:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61bb      	str	r3, [r7, #24]
 8001b3e:	4ba7      	ldr	r3, [pc, #668]	; (8001ddc <MX_GPIO_Init+0x2f0>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	4aa6      	ldr	r2, [pc, #664]	; (8001ddc <MX_GPIO_Init+0x2f0>)
 8001b44:	f043 0320 	orr.w	r3, r3, #32
 8001b48:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4a:	4ba4      	ldr	r3, [pc, #656]	; (8001ddc <MX_GPIO_Init+0x2f0>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	f003 0320 	and.w	r3, r3, #32
 8001b52:	61bb      	str	r3, [r7, #24]
 8001b54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	4ba0      	ldr	r3, [pc, #640]	; (8001ddc <MX_GPIO_Init+0x2f0>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	4a9f      	ldr	r2, [pc, #636]	; (8001ddc <MX_GPIO_Init+0x2f0>)
 8001b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b64:	6313      	str	r3, [r2, #48]	; 0x30
 8001b66:	4b9d      	ldr	r3, [pc, #628]	; (8001ddc <MX_GPIO_Init+0x2f0>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	4b99      	ldr	r3, [pc, #612]	; (8001ddc <MX_GPIO_Init+0x2f0>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a98      	ldr	r2, [pc, #608]	; (8001ddc <MX_GPIO_Init+0x2f0>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b96      	ldr	r3, [pc, #600]	; (8001ddc <MX_GPIO_Init+0x2f0>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	4b92      	ldr	r3, [pc, #584]	; (8001ddc <MX_GPIO_Init+0x2f0>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	4a91      	ldr	r2, [pc, #580]	; (8001ddc <MX_GPIO_Init+0x2f0>)
 8001b98:	f043 0302 	orr.w	r3, r3, #2
 8001b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9e:	4b8f      	ldr	r3, [pc, #572]	; (8001ddc <MX_GPIO_Init+0x2f0>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	4b8b      	ldr	r3, [pc, #556]	; (8001ddc <MX_GPIO_Init+0x2f0>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4a8a      	ldr	r2, [pc, #552]	; (8001ddc <MX_GPIO_Init+0x2f0>)
 8001bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b88      	ldr	r3, [pc, #544]	; (8001ddc <MX_GPIO_Init+0x2f0>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	4b84      	ldr	r3, [pc, #528]	; (8001ddc <MX_GPIO_Init+0x2f0>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	4a83      	ldr	r2, [pc, #524]	; (8001ddc <MX_GPIO_Init+0x2f0>)
 8001bd0:	f043 0308 	orr.w	r3, r3, #8
 8001bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd6:	4b81      	ldr	r3, [pc, #516]	; (8001ddc <MX_GPIO_Init+0x2f0>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	607b      	str	r3, [r7, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 8001be2:	2200      	movs	r2, #0
 8001be4:	f248 4184 	movw	r1, #33924	; 0x8484
 8001be8:	487d      	ldr	r0, [pc, #500]	; (8001de0 <MX_GPIO_Init+0x2f4>)
 8001bea:	f008 fc31 	bl	800a450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8001bf4:	487b      	ldr	r0, [pc, #492]	; (8001de4 <MX_GPIO_Init+0x2f8>)
 8001bf6:	f008 fc2b 	bl	800a450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001c00:	4879      	ldr	r0, [pc, #484]	; (8001de8 <MX_GPIO_Init+0x2fc>)
 8001c02:	f008 fc25 	bl	800a450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2108      	movs	r1, #8
 8001c0a:	4878      	ldr	r0, [pc, #480]	; (8001dec <MX_GPIO_Init+0x300>)
 8001c0c:	f008 fc20 	bl	800a450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 8001c10:	2200      	movs	r2, #0
 8001c12:	f645 2126 	movw	r1, #23078	; 0x5a26
 8001c16:	4876      	ldr	r0, [pc, #472]	; (8001df0 <MX_GPIO_Init+0x304>)
 8001c18:	f008 fc1a 	bl	800a450 <HAL_GPIO_WritePin>
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin, GPIO_PIN_RESET);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8001c22:	4874      	ldr	r0, [pc, #464]	; (8001df4 <MX_GPIO_Init+0x308>)
 8001c24:	f008 fc14 	bl	800a450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 8001c2e:	4872      	ldr	r0, [pc, #456]	; (8001df8 <MX_GPIO_Init+0x30c>)
 8001c30:	f008 fc0e 	bl	800a450 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 8001c34:	f248 4384 	movw	r3, #33924	; 0x8484
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2300      	movs	r3, #0
 8001c44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4864      	ldr	r0, [pc, #400]	; (8001de0 <MX_GPIO_Init+0x2f4>)
 8001c4e:	f008 fa3b 	bl	800a0c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001c52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c60:	2300      	movs	r3, #0
 8001c62:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c68:	4619      	mov	r1, r3
 8001c6a:	485e      	ldr	r0, [pc, #376]	; (8001de4 <MX_GPIO_Init+0x2f8>)
 8001c6c:	f008 fa2c 	bl	800a0c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 8001c70:	2301      	movs	r3, #1
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c74:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 8001c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c82:	4619      	mov	r1, r3
 8001c84:	4858      	ldr	r0, [pc, #352]	; (8001de8 <MX_GPIO_Init+0x2fc>)
 8001c86:	f008 fa1f 	bl	800a0c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 8001c8a:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c90:	2301      	movs	r3, #1
 8001c92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4851      	ldr	r0, [pc, #324]	; (8001de8 <MX_GPIO_Init+0x2fc>)
 8001ca4:	f008 fa10 	bl	800a0c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 8001ca8:	2308      	movs	r3, #8
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cac:	2301      	movs	r3, #1
 8001cae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 8001cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	484b      	ldr	r0, [pc, #300]	; (8001dec <MX_GPIO_Init+0x300>)
 8001cc0:	f008 fa02 	bl	800a0c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8001cc4:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4843      	ldr	r0, [pc, #268]	; (8001de8 <MX_GPIO_Init+0x2fc>)
 8001cda:	f008 f9f5 	bl	800a0c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 8001cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4840      	ldr	r0, [pc, #256]	; (8001df4 <MX_GPIO_Init+0x308>)
 8001cf2:	f008 f9e9 	bl	800a0c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 8001cf6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 8001d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4836      	ldr	r0, [pc, #216]	; (8001de4 <MX_GPIO_Init+0x2f8>)
 8001d0c:	f008 f9dc 	bl	800a0c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 8001d10:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d16:	2301      	movs	r3, #1
 8001d18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d26:	4619      	mov	r1, r3
 8001d28:	482e      	ldr	r0, [pc, #184]	; (8001de4 <MX_GPIO_Init+0x2f8>)
 8001d2a:	f008 f9cd 	bl	800a0c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|IN_EJ_Main_Cont_Pin
 8001d2e:	f242 4319 	movw	r3, #9241	; 0x2419
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24
                          |IN_EJ_Drogue_Cont_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d34:	2300      	movs	r3, #0
 8001d36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d40:	4619      	mov	r1, r3
 8001d42:	482b      	ldr	r0, [pc, #172]	; (8001df0 <MX_GPIO_Init+0x304>)
 8001d44:	f008 f9c0 	bl	800a0c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 8001d48:	f645 2326 	movw	r3, #23078	; 0x5a26
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d56:	2300      	movs	r3, #0
 8001d58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4823      	ldr	r0, [pc, #140]	; (8001df0 <MX_GPIO_Init+0x304>)
 8001d62:	f008 f9b1 	bl	800a0c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 8001d66:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4819      	ldr	r0, [pc, #100]	; (8001de0 <MX_GPIO_Init+0x2f4>)
 8001d7c:	f008 f9a4 	bl	800a0c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB8 PBPin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin;
 8001d80:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d86:	2301      	movs	r3, #1
 8001d88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d96:	4619      	mov	r1, r3
 8001d98:	4816      	ldr	r0, [pc, #88]	; (8001df4 <MX_GPIO_Init+0x308>)
 8001d9a:	f008 f995 	bl	800a0c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8001d9e:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da4:	2301      	movs	r3, #1
 8001da6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2300      	movs	r3, #0
 8001dae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db4:	4619      	mov	r1, r3
 8001db6:	4810      	ldr	r0, [pc, #64]	; (8001df8 <MX_GPIO_Init+0x30c>)
 8001db8:	f008 f986 	bl	800a0c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 8001dbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8001dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4809      	ldr	r0, [pc, #36]	; (8001df8 <MX_GPIO_Init+0x30c>)
 8001dd2:	f008 f979 	bl	800a0c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 8001dd6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001dda:	e00f      	b.n	8001dfc <MX_GPIO_Init+0x310>
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40021400 	.word	0x40021400
 8001de8:	40020800 	.word	0x40020800
 8001dec:	40020000 	.word	0x40020000
 8001df0:	40021800 	.word	0x40021800
 8001df4:	40020400 	.word	0x40020400
 8001df8:	40020c00 	.word	0x40020c00
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dfe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4807      	ldr	r0, [pc, #28]	; (8001e2c <MX_GPIO_Init+0x340>)
 8001e10:	f008 f95a 	bl	800a0c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001e14:	2200      	movs	r2, #0
 8001e16:	2105      	movs	r1, #5
 8001e18:	2006      	movs	r0, #6
 8001e1a:	f008 f91d 	bl	800a058 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001e1e:	2006      	movs	r0, #6
 8001e20:	f008 f936 	bl	800a090 <HAL_NVIC_EnableIRQ>

}
 8001e24:	bf00      	nop
 8001e26:	3738      	adds	r7, #56	; 0x38
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40021800 	.word	0x40021800

08001e30 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001e34:	4b1b      	ldr	r3, [pc, #108]	; (8001ea4 <MX_I2C2_Init+0x74>)
 8001e36:	4a1c      	ldr	r2, [pc, #112]	; (8001ea8 <MX_I2C2_Init+0x78>)
 8001e38:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001e3a:	4b1a      	ldr	r3, [pc, #104]	; (8001ea4 <MX_I2C2_Init+0x74>)
 8001e3c:	4a1b      	ldr	r2, [pc, #108]	; (8001eac <MX_I2C2_Init+0x7c>)
 8001e3e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e40:	4b18      	ldr	r3, [pc, #96]	; (8001ea4 <MX_I2C2_Init+0x74>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001e46:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <MX_I2C2_Init+0x74>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e4c:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <MX_I2C2_Init+0x74>)
 8001e4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e52:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e54:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <MX_I2C2_Init+0x74>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001e5a:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <MX_I2C2_Init+0x74>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e60:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <MX_I2C2_Init+0x74>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e66:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <MX_I2C2_Init+0x74>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e6c:	480d      	ldr	r0, [pc, #52]	; (8001ea4 <MX_I2C2_Init+0x74>)
 8001e6e:	f008 fb21 	bl	800a4b4 <HAL_I2C_Init>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001e78:	f000 f9dc 	bl	8002234 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4809      	ldr	r0, [pc, #36]	; (8001ea4 <MX_I2C2_Init+0x74>)
 8001e80:	f009 fb0d 	bl	800b49e <HAL_I2CEx_ConfigAnalogFilter>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001e8a:	f000 f9d3 	bl	8002234 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4804      	ldr	r0, [pc, #16]	; (8001ea4 <MX_I2C2_Init+0x74>)
 8001e92:	f009 fb40 	bl	800b516 <HAL_I2CEx_ConfigDigitalFilter>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001e9c:	f000 f9ca 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20005b54 	.word	0x20005b54
 8001ea8:	40005800 	.word	0x40005800
 8001eac:	000186a0 	.word	0x000186a0

08001eb0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001eb4:	4b1b      	ldr	r3, [pc, #108]	; (8001f24 <MX_I2C3_Init+0x74>)
 8001eb6:	4a1c      	ldr	r2, [pc, #112]	; (8001f28 <MX_I2C3_Init+0x78>)
 8001eb8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001eba:	4b1a      	ldr	r3, [pc, #104]	; (8001f24 <MX_I2C3_Init+0x74>)
 8001ebc:	4a1b      	ldr	r2, [pc, #108]	; (8001f2c <MX_I2C3_Init+0x7c>)
 8001ebe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ec0:	4b18      	ldr	r3, [pc, #96]	; (8001f24 <MX_I2C3_Init+0x74>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001ec6:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <MX_I2C3_Init+0x74>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ecc:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <MX_I2C3_Init+0x74>)
 8001ece:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ed2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ed4:	4b13      	ldr	r3, [pc, #76]	; (8001f24 <MX_I2C3_Init+0x74>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001eda:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <MX_I2C3_Init+0x74>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ee0:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <MX_I2C3_Init+0x74>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ee6:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <MX_I2C3_Init+0x74>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001eec:	480d      	ldr	r0, [pc, #52]	; (8001f24 <MX_I2C3_Init+0x74>)
 8001eee:	f008 fae1 	bl	800a4b4 <HAL_I2C_Init>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001ef8:	f000 f99c 	bl	8002234 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001efc:	2100      	movs	r1, #0
 8001efe:	4809      	ldr	r0, [pc, #36]	; (8001f24 <MX_I2C3_Init+0x74>)
 8001f00:	f009 facd 	bl	800b49e <HAL_I2CEx_ConfigAnalogFilter>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001f0a:	f000 f993 	bl	8002234 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4804      	ldr	r0, [pc, #16]	; (8001f24 <MX_I2C3_Init+0x74>)
 8001f12:	f009 fb00 	bl	800b516 <HAL_I2CEx_ConfigDigitalFilter>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001f1c:	f000 f98a 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20005b00 	.word	0x20005b00
 8001f28:	40005c00 	.word	0x40005c00
 8001f2c:	000186a0 	.word	0x000186a0

08001f30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08c      	sub	sp, #48	; 0x30
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	f107 031c 	add.w	r3, r7, #28
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a42      	ldr	r2, [pc, #264]	; (8002058 <HAL_I2C_MspInit+0x128>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d12d      	bne.n	8001fae <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	61bb      	str	r3, [r7, #24]
 8001f56:	4b41      	ldr	r3, [pc, #260]	; (800205c <HAL_I2C_MspInit+0x12c>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a40      	ldr	r2, [pc, #256]	; (800205c <HAL_I2C_MspInit+0x12c>)
 8001f5c:	f043 0302 	orr.w	r3, r3, #2
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b3e      	ldr	r3, [pc, #248]	; (800205c <HAL_I2C_MspInit+0x12c>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	61bb      	str	r3, [r7, #24]
 8001f6c:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f6e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f74:	2312      	movs	r3, #18
 8001f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f80:	2304      	movs	r3, #4
 8001f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f84:	f107 031c 	add.w	r3, r7, #28
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4835      	ldr	r0, [pc, #212]	; (8002060 <HAL_I2C_MspInit+0x130>)
 8001f8c:	f008 f89c 	bl	800a0c8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	4b31      	ldr	r3, [pc, #196]	; (800205c <HAL_I2C_MspInit+0x12c>)
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	4a30      	ldr	r2, [pc, #192]	; (800205c <HAL_I2C_MspInit+0x12c>)
 8001f9a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa0:	4b2e      	ldr	r3, [pc, #184]	; (800205c <HAL_I2C_MspInit+0x12c>)
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001fac:	e050      	b.n	8002050 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a2c      	ldr	r2, [pc, #176]	; (8002064 <HAL_I2C_MspInit+0x134>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d14b      	bne.n	8002050 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb8:	2300      	movs	r3, #0
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	4b27      	ldr	r3, [pc, #156]	; (800205c <HAL_I2C_MspInit+0x12c>)
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc0:	4a26      	ldr	r2, [pc, #152]	; (800205c <HAL_I2C_MspInit+0x12c>)
 8001fc2:	f043 0304 	orr.w	r3, r3, #4
 8001fc6:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc8:	4b24      	ldr	r3, [pc, #144]	; (800205c <HAL_I2C_MspInit+0x12c>)
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	4b20      	ldr	r3, [pc, #128]	; (800205c <HAL_I2C_MspInit+0x12c>)
 8001fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fdc:	4a1f      	ldr	r2, [pc, #124]	; (800205c <HAL_I2C_MspInit+0x12c>)
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe4:	4b1d      	ldr	r3, [pc, #116]	; (800205c <HAL_I2C_MspInit+0x12c>)
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ff0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ff6:	2312      	movs	r3, #18
 8001ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffe:	2303      	movs	r3, #3
 8002000:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002002:	2304      	movs	r3, #4
 8002004:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002006:	f107 031c 	add.w	r3, r7, #28
 800200a:	4619      	mov	r1, r3
 800200c:	4816      	ldr	r0, [pc, #88]	; (8002068 <HAL_I2C_MspInit+0x138>)
 800200e:	f008 f85b 	bl	800a0c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002012:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002018:	2312      	movs	r3, #18
 800201a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800201c:	2301      	movs	r3, #1
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002020:	2303      	movs	r3, #3
 8002022:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002024:	2304      	movs	r3, #4
 8002026:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002028:	f107 031c 	add.w	r3, r7, #28
 800202c:	4619      	mov	r1, r3
 800202e:	480f      	ldr	r0, [pc, #60]	; (800206c <HAL_I2C_MspInit+0x13c>)
 8002030:	f008 f84a 	bl	800a0c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002034:	2300      	movs	r3, #0
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	4b08      	ldr	r3, [pc, #32]	; (800205c <HAL_I2C_MspInit+0x12c>)
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	4a07      	ldr	r2, [pc, #28]	; (800205c <HAL_I2C_MspInit+0x12c>)
 800203e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002042:	6413      	str	r3, [r2, #64]	; 0x40
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <HAL_I2C_MspInit+0x12c>)
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	68bb      	ldr	r3, [r7, #8]
}
 8002050:	bf00      	nop
 8002052:	3730      	adds	r7, #48	; 0x30
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40005800 	.word	0x40005800
 800205c:	40023800 	.word	0x40023800
 8002060:	40020400 	.word	0x40020400
 8002064:	40005c00 	.word	0x40005c00
 8002068:	40020800 	.word	0x40020800
 800206c:	40020000 	.word	0x40020000

08002070 <main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int main(void){
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
	MRT_STM_Init();
 8002074:	f000 f894 	bl	80021a0 <MRT_STM_Init>
	println("\r\n\r\nSTM Init...OK");
 8002078:	480c      	ldr	r0, [pc, #48]	; (80020ac <main+0x3c>)
 800207a:	f7ff f827 	bl	80010cc <println>

	MRT_Init();
 800207e:	f7ff f887 	bl	8001190 <MRT_Init>

	println("\r\n\r\n/****Starting FC****/\r\n\r\n");
 8002082:	480b      	ldr	r0, [pc, #44]	; (80020b0 <main+0x40>)
 8002084:	f7ff f822 	bl	80010cc <println>
	HAL_IWDG_Refresh(&hiwdg);
	buzz_startup_success();
 8002088:	f7ff f86a 	bl	8001160 <buzz_startup_success>

	MRT_waitForLaunch();
 800208c:	f000 f8aa 	bl	80021e4 <MRT_waitForLaunch>
	//if (DEBUG) TESTING_LOOP(); //TODO remove

	//TODO I2C SENSORS (lsm and lps) SOMETIMES DON'T WANT TO WORK ANYMORE -> NEED TO RESET THE POWER (Enter quick standByMode?)

	//Initialize the os
	MX_FREERTOS_Init();
 8002090:	f7ff fa94 	bl	80015bc <MX_FREERTOS_Init>

	//Starting the os
	println("\r\n/****Starting the OS****/\r\n");
 8002094:	4807      	ldr	r0, [pc, #28]	; (80020b4 <main+0x44>)
 8002096:	f7ff f819 	bl	80010cc <println>
	osKernelStart();
 800209a:	f00d f955 	bl	800f348 <osKernelStart>

	println("SOMETHING WENT HORRIBLY WRONG, WAITING FOR WATCH DOG RESET");
 800209e:	4806      	ldr	r0, [pc, #24]	; (80020b8 <main+0x48>)
 80020a0:	f7ff f814 	bl	80010cc <println>
	HAL_IWDG_Refresh(&hiwdg);
	MRT_Deinit();
 80020a4:	f7ff f88a 	bl	80011bc <MRT_Deinit>
	while (1){}
 80020a8:	e7fe      	b.n	80020a8 <main+0x38>
 80020aa:	bf00      	nop
 80020ac:	08018780 	.word	0x08018780
 80020b0:	08018794 	.word	0x08018794
 80020b4:	080187b4 	.word	0x080187b4
 80020b8:	080187d4 	.word	0x080187d4

080020bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b094      	sub	sp, #80	; 0x50
 80020c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020c2:	f107 0320 	add.w	r3, r7, #32
 80020c6:	2230      	movs	r2, #48	; 0x30
 80020c8:	2100      	movs	r1, #0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f010 fb6a 	bl	80127a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020d0:	f107 030c 	add.w	r3, r7, #12
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020e0:	2300      	movs	r3, #0
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	4b2c      	ldr	r3, [pc, #176]	; (8002198 <SystemClock_Config+0xdc>)
 80020e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e8:	4a2b      	ldr	r2, [pc, #172]	; (8002198 <SystemClock_Config+0xdc>)
 80020ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ee:	6413      	str	r3, [r2, #64]	; 0x40
 80020f0:	4b29      	ldr	r3, [pc, #164]	; (8002198 <SystemClock_Config+0xdc>)
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020fc:	2300      	movs	r3, #0
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	4b26      	ldr	r3, [pc, #152]	; (800219c <SystemClock_Config+0xe0>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a25      	ldr	r2, [pc, #148]	; (800219c <SystemClock_Config+0xe0>)
 8002106:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	4b23      	ldr	r3, [pc, #140]	; (800219c <SystemClock_Config+0xe0>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002114:	607b      	str	r3, [r7, #4]
 8002116:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002118:	2309      	movs	r3, #9
 800211a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800211c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002122:	2301      	movs	r3, #1
 8002124:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002126:	2302      	movs	r3, #2
 8002128:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800212a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800212e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002130:	2308      	movs	r3, #8
 8002132:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002134:	23b4      	movs	r3, #180	; 0xb4
 8002136:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002138:	2302      	movs	r3, #2
 800213a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800213c:	2303      	movs	r3, #3
 800213e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002140:	f107 0320 	add.w	r3, r7, #32
 8002144:	4618      	mov	r0, r3
 8002146:	f009 fab3 	bl	800b6b0 <HAL_RCC_OscConfig>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002150:	f000 f870 	bl	8002234 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002154:	f009 fa5c 	bl	800b610 <HAL_PWREx_EnableOverDrive>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800215e:	f000 f869 	bl	8002234 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002162:	230f      	movs	r3, #15
 8002164:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002166:	2302      	movs	r3, #2
 8002168:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800216e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002172:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002174:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002178:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800217a:	f107 030c 	add.w	r3, r7, #12
 800217e:	2105      	movs	r1, #5
 8002180:	4618      	mov	r0, r3
 8002182:	f009 fd0d 	bl	800bba0 <HAL_RCC_ClockConfig>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800218c:	f000 f852 	bl	8002234 <Error_Handler>
  }
}
 8002190:	bf00      	nop
 8002192:	3750      	adds	r7, #80	; 0x50
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40023800 	.word	0x40023800
 800219c:	40007000 	.word	0x40007000

080021a0 <MRT_STM_Init>:

/* USER CODE BEGIN 4 */

void MRT_STM_Init(void){
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
	HAL_Init();
 80021a4:	f007 fba4 	bl	80098f0 <HAL_Init>
	SystemClock_Config();
 80021a8:	f7ff ff88 	bl	80020bc <SystemClock_Config>

	MX_GPIO_Init();
 80021ac:	f7ff fc9e 	bl	8001aec <MX_GPIO_Init>
	MX_ADC1_Init();
 80021b0:	f7ff f958 	bl	8001464 <MX_ADC1_Init>
	MX_I2C2_Init();
 80021b4:	f7ff fe3c 	bl	8001e30 <MX_I2C2_Init>
	MX_I2C3_Init();
 80021b8:	f7ff fe7a 	bl	8001eb0 <MX_I2C3_Init>
	MX_SPI2_Init();
 80021bc:	f000 fab8 	bl	8002730 <MX_SPI2_Init>
	MX_SPI4_Init();
 80021c0:	f000 faec 	bl	800279c <MX_SPI4_Init>
	MX_SPI5_Init();
 80021c4:	f000 fb20 	bl	8002808 <MX_SPI5_Init>
	MX_TIM2_Init();
 80021c8:	f000 fce0 	bl	8002b8c <MX_TIM2_Init>
	MX_UART8_Init();
 80021cc:	f000 fdac 	bl	8002d28 <MX_UART8_Init>
	MX_USART3_UART_Init();
 80021d0:	f000 fdd4 	bl	8002d7c <MX_USART3_UART_Init>
	MX_USART6_UART_Init();
 80021d4:	f000 fdfc 	bl	8002dd0 <MX_USART6_UART_Init>
	MX_RTC_Init();
 80021d8:	f000 f832 	bl	8002240 <MX_RTC_Init>
	//MX_IWDG_Init(); TODO ADDED IN MRT_Init()
	MX_FATFS_Init();
 80021dc:	f00c ff86 	bl	800f0ec <MX_FATFS_Init>
}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <MRT_waitForLaunch>:

void MRT_waitForLaunch(void){
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b0c2      	sub	sp, #264	; 0x108
 80021e8:	af00      	add	r7, sp, #0

	println("Waiting for launch command from ground station\r\n");
 80021ea:	4807      	ldr	r0, [pc, #28]	; (8002208 <MRT_waitForLaunch+0x24>)
 80021ec:	f7fe ff6e 	bl	80010cc <println>

	char radio_buffer[RADIO_BUFFER_SIZE];
	radio_command cmd = -1;
 80021f0:	23ff      	movs	r3, #255	; 0xff
 80021f2:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

	//Poll propulsion until launch command sent
	while((XTEND_ || SRADIO_) && ejection_stage_flag == PAD && wu_flag == 0){
 80021f6:	bf00      	nop
		HAL_Delay(1000/PRE_APOGEE_SEND_FREQ);
	}


	//Send acknowledgement
	MRT_radio_tx((char*) "LAUNCH COMMAND RECEIVED"); //TODO CHECK AT WHAT JASPER DID
 80021f8:	4804      	ldr	r0, [pc, #16]	; (800220c <MRT_waitForLaunch+0x28>)
 80021fa:	f007 fb39 	bl	8009870 <MRT_radio_tx>
}
 80021fe:	bf00      	nop
 8002200:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	08018810 	.word	0x08018810
 800220c:	08018844 	.word	0x08018844

08002210 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a04      	ldr	r2, [pc, #16]	; (8002230 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d101      	bne.n	8002226 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002222:	f007 fb87 	bl	8009934 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40001000 	.word	0x40001000

08002234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002238:	b672      	cpsid	i
}
 800223a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800223c:	e7fe      	b.n	800223c <Error_Handler+0x8>
	...

08002240 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b090      	sub	sp, #64	; 0x40
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002246:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	605a      	str	r2, [r3, #4]
 8002250:	609a      	str	r2, [r3, #8]
 8002252:	60da      	str	r2, [r3, #12]
 8002254:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002256:	2300      	movs	r3, #0
 8002258:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800225a:	463b      	mov	r3, r7
 800225c:	2228      	movs	r2, #40	; 0x28
 800225e:	2100      	movs	r1, #0
 8002260:	4618      	mov	r0, r3
 8002262:	f010 fa9f 	bl	80127a4 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002266:	4b3a      	ldr	r3, [pc, #232]	; (8002350 <MX_RTC_Init+0x110>)
 8002268:	4a3a      	ldr	r2, [pc, #232]	; (8002354 <MX_RTC_Init+0x114>)
 800226a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800226c:	4b38      	ldr	r3, [pc, #224]	; (8002350 <MX_RTC_Init+0x110>)
 800226e:	2200      	movs	r2, #0
 8002270:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002272:	4b37      	ldr	r3, [pc, #220]	; (8002350 <MX_RTC_Init+0x110>)
 8002274:	227f      	movs	r2, #127	; 0x7f
 8002276:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002278:	4b35      	ldr	r3, [pc, #212]	; (8002350 <MX_RTC_Init+0x110>)
 800227a:	22ff      	movs	r2, #255	; 0xff
 800227c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800227e:	4b34      	ldr	r3, [pc, #208]	; (8002350 <MX_RTC_Init+0x110>)
 8002280:	2200      	movs	r2, #0
 8002282:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002284:	4b32      	ldr	r3, [pc, #200]	; (8002350 <MX_RTC_Init+0x110>)
 8002286:	2200      	movs	r2, #0
 8002288:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800228a:	4b31      	ldr	r3, [pc, #196]	; (8002350 <MX_RTC_Init+0x110>)
 800228c:	2200      	movs	r2, #0
 800228e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002290:	482f      	ldr	r0, [pc, #188]	; (8002350 <MX_RTC_Init+0x110>)
 8002292:	f00a f86f 	bl	800c374 <HAL_RTC_Init>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800229c:	f7ff ffca 	bl	8002234 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80022b2:	2300      	movs	r3, #0
 80022b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80022b6:	2300      	movs	r3, #0
 80022b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80022ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022be:	2201      	movs	r2, #1
 80022c0:	4619      	mov	r1, r3
 80022c2:	4823      	ldr	r0, [pc, #140]	; (8002350 <MX_RTC_Init+0x110>)
 80022c4:	f00a f8e7 	bl	800c496 <HAL_RTC_SetTime>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80022ce:	f7ff ffb1 	bl	8002234 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80022d2:	2301      	movs	r3, #1
 80022d4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80022d8:	2301      	movs	r3, #1
 80022da:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80022de:	2301      	movs	r3, #1
 80022e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80022ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022ee:	2201      	movs	r2, #1
 80022f0:	4619      	mov	r1, r3
 80022f2:	4817      	ldr	r0, [pc, #92]	; (8002350 <MX_RTC_Init+0x110>)
 80022f4:	f00a f9ea 	bl	800c6cc <HAL_RTC_SetDate>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80022fe:	f7ff ff99 	bl	8002234 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002302:	2300      	movs	r3, #0
 8002304:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8002306:	2301      	movs	r3, #1
 8002308:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800230a:	2300      	movs	r3, #0
 800230c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800230e:	2300      	movs	r3, #0
 8002310:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002316:	2300      	movs	r3, #0
 8002318:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800231e:	2300      	movs	r3, #0
 8002320:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002322:	2300      	movs	r3, #0
 8002324:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002326:	2301      	movs	r3, #1
 8002328:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800232c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002332:	463b      	mov	r3, r7
 8002334:	2201      	movs	r2, #1
 8002336:	4619      	mov	r1, r3
 8002338:	4805      	ldr	r0, [pc, #20]	; (8002350 <MX_RTC_Init+0x110>)
 800233a:	f00a fabd 	bl	800c8b8 <HAL_RTC_SetAlarm_IT>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002344:	f7ff ff76 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002348:	bf00      	nop
 800234a:	3740      	adds	r7, #64	; 0x40
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20005ba8 	.word	0x20005ba8
 8002354:	40002800 	.word	0x40002800

08002358 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08e      	sub	sp, #56	; 0x38
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002360:	f107 0308 	add.w	r3, r7, #8
 8002364:	2230      	movs	r2, #48	; 0x30
 8002366:	2100      	movs	r1, #0
 8002368:	4618      	mov	r0, r3
 800236a:	f010 fa1b 	bl	80127a4 <memset>
  if(rtcHandle->Instance==RTC)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a10      	ldr	r2, [pc, #64]	; (80023b4 <HAL_RTC_MspInit+0x5c>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d119      	bne.n	80023ac <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002378:	2320      	movs	r3, #32
 800237a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800237c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002380:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002382:	f107 0308 	add.w	r3, r7, #8
 8002386:	4618      	mov	r0, r3
 8002388:	f009 fe36 	bl	800bff8 <HAL_RCCEx_PeriphCLKConfig>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002392:	f7ff ff4f 	bl	8002234 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002396:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <HAL_RTC_MspInit+0x60>)
 8002398:	2201      	movs	r2, #1
 800239a:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 800239c:	2200      	movs	r2, #0
 800239e:	2105      	movs	r1, #5
 80023a0:	2029      	movs	r0, #41	; 0x29
 80023a2:	f007 fe59 	bl	800a058 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80023a6:	2029      	movs	r0, #41	; 0x29
 80023a8:	f007 fe72 	bl	800a090 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80023ac:	bf00      	nop
 80023ae:	3738      	adds	r7, #56	; 0x38
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40002800 	.word	0x40002800
 80023b8:	42470e3c 	.word	0x42470e3c

080023bc <MRT_rtc_Init>:


//**************************************************//
//FUNCTIONS

void MRT_rtc_Init(void){
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
	println("\r\nMRT RTC Init");
 80023c0:	4816      	ldr	r0, [pc, #88]	; (800241c <MRT_rtc_Init+0x60>)
 80023c2:	f7fe fe83 	bl	80010cc <println>

	print("\tSetting RTC to previous time...");
 80023c6:	4816      	ldr	r0, [pc, #88]	; (8002420 <MRT_rtc_Init+0x64>)
 80023c8:	f7fe fe9e 	bl	8001108 <print>
	MRT_set_rtc(prev_hour,prev_min,prev_sec);
 80023cc:	4b15      	ldr	r3, [pc, #84]	; (8002424 <MRT_rtc_Init+0x68>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	4a15      	ldr	r2, [pc, #84]	; (8002428 <MRT_rtc_Init+0x6c>)
 80023d2:	7811      	ldrb	r1, [r2, #0]
 80023d4:	4a15      	ldr	r2, [pc, #84]	; (800242c <MRT_rtc_Init+0x70>)
 80023d6:	7812      	ldrb	r2, [r2, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 f8c3 	bl	8002564 <MRT_set_rtc>
	println("OK");
 80023de:	4814      	ldr	r0, [pc, #80]	; (8002430 <MRT_rtc_Init+0x74>)
 80023e0:	f7fe fe74 	bl	80010cc <println>

	#if ALARM_A_ACTIVE
		print("\tSetting alarmA...");
 80023e4:	4813      	ldr	r0, [pc, #76]	; (8002434 <MRT_rtc_Init+0x78>)
 80023e6:	f7fe fe8f 	bl	8001108 <print>
		HAL_Delay(2000); //To make sure that when you set the Alarm it doesn't go off automatically
 80023ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80023ee:	f007 fac1 	bl	8009974 <HAL_Delay>
		if (wu_flag == 0){
 80023f2:	4b11      	ldr	r3, [pc, #68]	; (8002438 <MRT_rtc_Init+0x7c>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d105      	bne.n	8002406 <MRT_rtc_Init+0x4a>
			MRT_set_alarmA(PRE_WHEN_SLEEP_TIME_HOURS, PRE_WHEN_SLEEP_TIME_MIN, PRE_WHEN_SLEEP_TIME_SEC);
 80023fa:	2200      	movs	r2, #0
 80023fc:	211e      	movs	r1, #30
 80023fe:	2004      	movs	r0, #4
 8002400:	f000 f8f6 	bl	80025f0 <MRT_set_alarmA>
 8002404:	e004      	b.n	8002410 <MRT_rtc_Init+0x54>
		}
		else{
			MRT_set_alarmA(POST_WHEN_SLEEP_TIME_HOURS, POST_WHEN_SLEEP_TIME_MIN, POST_WHEN_SLEEP_TIME_SEC);
 8002406:	2200      	movs	r2, #0
 8002408:	2100      	movs	r1, #0
 800240a:	200e      	movs	r0, #14
 800240c:	f000 f8f0 	bl	80025f0 <MRT_set_alarmA>
		}
		println("OK");
 8002410:	4807      	ldr	r0, [pc, #28]	; (8002430 <MRT_rtc_Init+0x74>)
 8002412:	f7fe fe5b 	bl	80010cc <println>
	#endif
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	0801885c 	.word	0x0801885c
 8002420:	0801886c 	.word	0x0801886c
 8002424:	20000385 	.word	0x20000385
 8002428:	20000386 	.word	0x20000386
 800242c:	20000387 	.word	0x20000387
 8002430:	08018890 	.word	0x08018890
 8002434:	08018894 	.word	0x08018894
 8002438:	20000381 	.word	0x20000381

0800243c <MRT_clear_alarms_flags>:



void MRT_clear_alarms_flags(void){
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	print("Clearing the flags\r\n");
 8002440:	482a      	ldr	r0, [pc, #168]	; (80024ec <MRT_clear_alarms_flags+0xb0>)
 8002442:	f7fe fe61 	bl	8001108 <print>

	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002446:	4b2a      	ldr	r3, [pc, #168]	; (80024f0 <MRT_clear_alarms_flags+0xb4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	22ca      	movs	r2, #202	; 0xca
 800244c:	625a      	str	r2, [r3, #36]	; 0x24
 800244e:	4b28      	ldr	r3, [pc, #160]	; (80024f0 <MRT_clear_alarms_flags+0xb4>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2253      	movs	r2, #83	; 0x53
 8002454:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8002456:	e008      	b.n	800246a <MRT_clear_alarms_flags+0x2e>
		//print("Clearing alarm A flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002458:	4b25      	ldr	r3, [pc, #148]	; (80024f0 <MRT_clear_alarms_flags+0xb4>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	b2da      	uxtb	r2, r3
 8002460:	4b23      	ldr	r3, [pc, #140]	; (80024f0 <MRT_clear_alarms_flags+0xb4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002468:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 800246a:	4b21      	ldr	r3, [pc, #132]	; (80024f0 <MRT_clear_alarms_flags+0xb4>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1ef      	bne.n	8002458 <MRT_clear_alarms_flags+0x1c>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002478:	4b1d      	ldr	r3, [pc, #116]	; (80024f0 <MRT_clear_alarms_flags+0xb4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	22ff      	movs	r2, #255	; 0xff
 800247e:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002480:	4b1c      	ldr	r3, [pc, #112]	; (80024f4 <MRT_clear_alarms_flags+0xb8>)
 8002482:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002486:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002488:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <MRT_clear_alarms_flags+0xb4>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	22ca      	movs	r2, #202	; 0xca
 800248e:	625a      	str	r2, [r3, #36]	; 0x24
 8002490:	4b17      	ldr	r3, [pc, #92]	; (80024f0 <MRT_clear_alarms_flags+0xb4>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2253      	movs	r2, #83	; 0x53
 8002496:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8002498:	e008      	b.n	80024ac <MRT_clear_alarms_flags+0x70>
		//print("Clearing alarm B flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 800249a:	4b15      	ldr	r3, [pc, #84]	; (80024f0 <MRT_clear_alarms_flags+0xb4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <MRT_clear_alarms_flags+0xb4>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f462 7220 	orn	r2, r2, #640	; 0x280
 80024aa:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 80024ac:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <MRT_clear_alarms_flags+0xb4>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1ef      	bne.n	800249a <MRT_clear_alarms_flags+0x5e>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 80024ba:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <MRT_clear_alarms_flags+0xb4>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	22ff      	movs	r2, #255	; 0xff
 80024c0:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80024c2:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <MRT_clear_alarms_flags+0xb8>)
 80024c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024c8:	615a      	str	r2, [r3, #20]

	/* Clear the WU FLAG */
	//print("Clearing wake up flag\r\n");
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80024ca:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <MRT_clear_alarms_flags+0xbc>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a0a      	ldr	r2, [pc, #40]	; (80024f8 <MRT_clear_alarms_flags+0xbc>)
 80024d0:	f043 0304 	orr.w	r3, r3, #4
 80024d4:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//print("Clearing RTC wake up flag\r\n");
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 80024d6:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <MRT_clear_alarms_flags+0xb4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	4b04      	ldr	r3, [pc, #16]	; (80024f0 <MRT_clear_alarms_flags+0xb4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80024e6:	60da      	str	r2, [r3, #12]
}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	080188a8 	.word	0x080188a8
 80024f0:	20005ba8 	.word	0x20005ba8
 80024f4:	40013c00 	.word	0x40013c00
 80024f8:	40007000 	.word	0x40007000

080024fc <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode(uint32_t seconds){
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08c      	sub	sp, #48	; 0x30
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
	print("\r\n/*****StandByMode*****/\r\n");
 8002504:	4813      	ldr	r0, [pc, #76]	; (8002554 <MRT_StandByMode+0x58>)
 8002506:	f7fe fdff 	bl	8001108 <print>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 800250a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800250e:	f009 f841 	bl	800b594 <HAL_PWR_EnableWakeUpPin>

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_clear_alarms_flags();
 8002512:	f7ff ff93 	bl	800243c <MRT_clear_alarms_flags>

	//Setup RTC wake up timer
	println("Setting up RTCW");
 8002516:	4810      	ldr	r0, [pc, #64]	; (8002558 <MRT_StandByMode+0x5c>)
 8002518:	f7fe fdd8 	bl	80010cc <println>
	  Error_Handler();
	}
	*/

	char msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds",(int) seconds);
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	f107 030c 	add.w	r3, r7, #12
 8002522:	490e      	ldr	r1, [pc, #56]	; (800255c <MRT_StandByMode+0x60>)
 8002524:	4618      	mov	r0, r3
 8002526:	f011 fc39 	bl	8013d9c <siprintf>
	println(msg);
 800252a:	f107 030c 	add.w	r3, r7, #12
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe fdcc 	bl	80010cc <println>

	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8002534:	2204      	movs	r2, #4
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	4809      	ldr	r0, [pc, #36]	; (8002560 <MRT_StandByMode+0x64>)
 800253a:	f00a fbd5 	bl	800cce8 <HAL_RTCEx_SetWakeUpTimer_IT>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MRT_StandByMode+0x4c>
	{
	  Error_Handler();
 8002544:	f7ff fe76 	bl	8002234 <Error_Handler>
	}

	HAL_PWR_EnterSTANDBYMode();
 8002548:	f009 f84a 	bl	800b5e0 <HAL_PWR_EnterSTANDBYMode>
}
 800254c:	bf00      	nop
 800254e:	3730      	adds	r7, #48	; 0x30
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	080188c0 	.word	0x080188c0
 8002558:	080188dc 	.word	0x080188dc
 800255c:	080188ec 	.word	0x080188ec
 8002560:	20005ba8 	.word	0x20005ba8

08002564 <MRT_set_rtc>:




void MRT_set_rtc(uint8_t h, uint8_t m, uint8_t s){
 8002564:	b580      	push	{r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	71fb      	strb	r3, [r7, #7]
 800256e:	460b      	mov	r3, r1
 8002570:	71bb      	strb	r3, [r7, #6]
 8002572:	4613      	mov	r3, r2
 8002574:	717b      	strb	r3, [r7, #5]
	  /** Initialize RTC and set the Time and Date
	  */
	  RTC_TimeTypeDef sTime;

	  sTime.Hours = int_to_hex_table[h];
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	4a1a      	ldr	r2, [pc, #104]	; (80025e4 <MRT_set_rtc+0x80>)
 800257a:	5cd3      	ldrb	r3, [r2, r3]
 800257c:	733b      	strb	r3, [r7, #12]
	  sTime.Minutes = int_to_hex_table[m];
 800257e:	79bb      	ldrb	r3, [r7, #6]
 8002580:	4a18      	ldr	r2, [pc, #96]	; (80025e4 <MRT_set_rtc+0x80>)
 8002582:	5cd3      	ldrb	r3, [r2, r3]
 8002584:	737b      	strb	r3, [r7, #13]
	  sTime.Seconds = int_to_hex_table[s];
 8002586:	797b      	ldrb	r3, [r7, #5]
 8002588:	4a16      	ldr	r2, [pc, #88]	; (80025e4 <MRT_set_rtc+0x80>)
 800258a:	5cd3      	ldrb	r3, [r2, r3]
 800258c:	73bb      	strb	r3, [r7, #14]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800258e:	2300      	movs	r3, #0
 8002590:	61bb      	str	r3, [r7, #24]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002596:	f107 030c 	add.w	r3, r7, #12
 800259a:	2201      	movs	r2, #1
 800259c:	4619      	mov	r1, r3
 800259e:	4812      	ldr	r0, [pc, #72]	; (80025e8 <MRT_set_rtc+0x84>)
 80025a0:	f009 ff79 	bl	800c496 <HAL_RTC_SetTime>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <MRT_set_rtc+0x4a>
	  {
	    Error_Handler();
 80025aa:	f7ff fe43 	bl	8002234 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80025ae:	4b0f      	ldr	r3, [pc, #60]	; (80025ec <MRT_set_rtc+0x88>)
 80025b0:	2201      	movs	r2, #1
 80025b2:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 80025b4:	4b0d      	ldr	r3, [pc, #52]	; (80025ec <MRT_set_rtc+0x88>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x1;
 80025ba:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <MRT_set_rtc+0x88>)
 80025bc:	2201      	movs	r2, #1
 80025be:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x0;
 80025c0:	4b0a      	ldr	r3, [pc, #40]	; (80025ec <MRT_set_rtc+0x88>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80025c6:	2201      	movs	r2, #1
 80025c8:	4908      	ldr	r1, [pc, #32]	; (80025ec <MRT_set_rtc+0x88>)
 80025ca:	4807      	ldr	r0, [pc, #28]	; (80025e8 <MRT_set_rtc+0x84>)
 80025cc:	f00a f87e 	bl	800c6cc <HAL_RTC_SetDate>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MRT_set_rtc+0x76>
	  {
	    Error_Handler();
 80025d6:	f7ff fe2d 	bl	8002234 <Error_Handler>
	  }
}
 80025da:	bf00      	nop
 80025dc:	3720      	adds	r7, #32
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000024 	.word	0x20000024
 80025e8:	20005ba8 	.word	0x20005ba8
 80025ec:	2000031c 	.word	0x2000031c

080025f0 <MRT_set_alarmA>:



void MRT_set_alarmA(uint8_t h, uint8_t m, uint8_t s){
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	71fb      	strb	r3, [r7, #7]
 80025fa:	460b      	mov	r3, r1
 80025fc:	71bb      	strb	r3, [r7, #6]
 80025fe:	4613      	mov	r3, r2
 8002600:	717b      	strb	r3, [r7, #5]
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = int_to_hex_table[h];
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	4a1a      	ldr	r2, [pc, #104]	; (8002670 <MRT_set_alarmA+0x80>)
 8002606:	5cd2      	ldrb	r2, [r2, r3]
 8002608:	4b1a      	ldr	r3, [pc, #104]	; (8002674 <MRT_set_alarmA+0x84>)
 800260a:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = int_to_hex_table[m];
 800260c:	79bb      	ldrb	r3, [r7, #6]
 800260e:	4a18      	ldr	r2, [pc, #96]	; (8002670 <MRT_set_alarmA+0x80>)
 8002610:	5cd2      	ldrb	r2, [r2, r3]
 8002612:	4b18      	ldr	r3, [pc, #96]	; (8002674 <MRT_set_alarmA+0x84>)
 8002614:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = int_to_hex_table[s];
 8002616:	797b      	ldrb	r3, [r7, #5]
 8002618:	4a15      	ldr	r2, [pc, #84]	; (8002670 <MRT_set_alarmA+0x80>)
 800261a:	5cd2      	ldrb	r2, [r2, r3]
 800261c:	4b15      	ldr	r3, [pc, #84]	; (8002674 <MRT_set_alarmA+0x84>)
 800261e:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002620:	4b14      	ldr	r3, [pc, #80]	; (8002674 <MRT_set_alarmA+0x84>)
 8002622:	2200      	movs	r2, #0
 8002624:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002626:	4b13      	ldr	r3, [pc, #76]	; (8002674 <MRT_set_alarmA+0x84>)
 8002628:	2200      	movs	r2, #0
 800262a:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800262c:	4b11      	ldr	r3, [pc, #68]	; (8002674 <MRT_set_alarmA+0x84>)
 800262e:	2200      	movs	r2, #0
 8002630:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002632:	4b10      	ldr	r3, [pc, #64]	; (8002674 <MRT_set_alarmA+0x84>)
 8002634:	2200      	movs	r2, #0
 8002636:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002638:	4b0e      	ldr	r3, [pc, #56]	; (8002674 <MRT_set_alarmA+0x84>)
 800263a:	2200      	movs	r2, #0
 800263c:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800263e:	4b0d      	ldr	r3, [pc, #52]	; (8002674 <MRT_set_alarmA+0x84>)
 8002640:	2200      	movs	r2, #0
 8002642:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 8002644:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <MRT_set_alarmA+0x84>)
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 800264c:	4b09      	ldr	r3, [pc, #36]	; (8002674 <MRT_set_alarmA+0x84>)
 800264e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002652:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002654:	2201      	movs	r2, #1
 8002656:	4907      	ldr	r1, [pc, #28]	; (8002674 <MRT_set_alarmA+0x84>)
 8002658:	4807      	ldr	r0, [pc, #28]	; (8002678 <MRT_set_alarmA+0x88>)
 800265a:	f00a f92d 	bl	800c8b8 <HAL_RTC_SetAlarm_IT>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MRT_set_alarmA+0x78>
	  {
	    Error_Handler();
 8002664:	f7ff fde6 	bl	8002234 <Error_Handler>
	  }
}
 8002668:	bf00      	nop
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	20000024 	.word	0x20000024
 8002674:	20000320 	.word	0x20000320
 8002678:	20005ba8 	.word	0x20005ba8

0800267c <MRT_RTC_backup_regs_Init>:
uint32_t* rtc_bckp_regs[NB_RTC_BCKP_REGS] = {&rtc_bckp_reg_reset, &rtc_bckp_reg_wu, &rtc_bckp_reg_iwdg, &rtc_bckp_reg_apogee, &rtc_bckp_reg_ejection_stage,
							  &rtc_bckp_reg_hour, &rtc_bckp_reg_min, &rtc_bckp_reg_sec, &rtc_bckp_reg_subsec};


//Get all the backup regs values (initialization)
void MRT_RTC_backup_regs_Init(void){
 800267c:	b590      	push	{r4, r7, lr}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_RTC_BCKP_REGS; i++){
 8002682:	2300      	movs	r3, #0
 8002684:	607b      	str	r3, [r7, #4]
 8002686:	e00d      	b.n	80026a4 <MRT_RTC_backup_regs_Init+0x28>
		*rtc_bckp_regs[i] = MRT_RTC_getBackupReg(i);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	b2da      	uxtb	r2, r3
 800268c:	4909      	ldr	r1, [pc, #36]	; (80026b4 <MRT_RTC_backup_regs_Init+0x38>)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8002694:	4610      	mov	r0, r2
 8002696:	f000 f80f 	bl	80026b8 <MRT_RTC_getBackupReg>
 800269a:	4603      	mov	r3, r0
 800269c:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < NB_RTC_BCKP_REGS; i++){
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3301      	adds	r3, #1
 80026a2:	607b      	str	r3, [r7, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	ddee      	ble.n	8002688 <MRT_RTC_backup_regs_Init+0xc>
	}
}
 80026aa:	bf00      	nop
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd90      	pop	{r4, r7, pc}
 80026b4:	20000000 	.word	0x20000000

080026b8 <MRT_RTC_getBackupReg>:
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
}

// gets the backup register value for the specified state
uint32_t MRT_RTC_getBackupReg(rtc_backup_reg state) {
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	71fb      	strb	r3, [r7, #7]
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 80026c2:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <MRT_RTC_getBackupReg+0x38>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	22ca      	movs	r2, #202	; 0xca
 80026c8:	625a      	str	r2, [r3, #36]	; 0x24
 80026ca:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <MRT_RTC_getBackupReg+0x38>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2253      	movs	r2, #83	; 0x53
 80026d0:	625a      	str	r2, [r3, #36]	; 0x24
	uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, (uint32_t) state);
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	4619      	mov	r1, r3
 80026d6:	4806      	ldr	r0, [pc, #24]	; (80026f0 <MRT_RTC_getBackupReg+0x38>)
 80026d8:	f00a fc38 	bl	800cf4c <HAL_RTCEx_BKUPRead>
 80026dc:	60f8      	str	r0, [r7, #12]
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 80026de:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <MRT_RTC_getBackupReg+0x38>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	22ff      	movs	r2, #255	; 0xff
 80026e4:	625a      	str	r2, [r3, #36]	; 0x24
	return val;
 80026e6:	68fb      	ldr	r3, [r7, #12]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	20005ba8 	.word	0x20005ba8

080026f4 <MRT_RTC_setBackupReg>:

// sets the backup register value for the specified state
void MRT_RTC_setBackupReg(rtc_backup_reg state, uint32_t value) {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	6039      	str	r1, [r7, #0]
 80026fe:	71fb      	strb	r3, [r7, #7]
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002700:	4b0a      	ldr	r3, [pc, #40]	; (800272c <MRT_RTC_setBackupReg+0x38>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	22ca      	movs	r2, #202	; 0xca
 8002706:	625a      	str	r2, [r3, #36]	; 0x24
 8002708:	4b08      	ldr	r3, [pc, #32]	; (800272c <MRT_RTC_setBackupReg+0x38>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2253      	movs	r2, #83	; 0x53
 800270e:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_RTCEx_BKUPWrite(&hrtc, (uint32_t) state, value);
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	4619      	mov	r1, r3
 8002716:	4805      	ldr	r0, [pc, #20]	; (800272c <MRT_RTC_setBackupReg+0x38>)
 8002718:	f00a fbfe 	bl	800cf18 <HAL_RTCEx_BKUPWrite>
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 800271c:	4b03      	ldr	r3, [pc, #12]	; (800272c <MRT_RTC_setBackupReg+0x38>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	22ff      	movs	r2, #255	; 0xff
 8002722:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002724:	bf00      	nop
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20005ba8 	.word	0x20005ba8

08002730 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002734:	4b17      	ldr	r3, [pc, #92]	; (8002794 <MX_SPI2_Init+0x64>)
 8002736:	4a18      	ldr	r2, [pc, #96]	; (8002798 <MX_SPI2_Init+0x68>)
 8002738:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800273a:	4b16      	ldr	r3, [pc, #88]	; (8002794 <MX_SPI2_Init+0x64>)
 800273c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002740:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002742:	4b14      	ldr	r3, [pc, #80]	; (8002794 <MX_SPI2_Init+0x64>)
 8002744:	2200      	movs	r2, #0
 8002746:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002748:	4b12      	ldr	r3, [pc, #72]	; (8002794 <MX_SPI2_Init+0x64>)
 800274a:	2200      	movs	r2, #0
 800274c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800274e:	4b11      	ldr	r3, [pc, #68]	; (8002794 <MX_SPI2_Init+0x64>)
 8002750:	2200      	movs	r2, #0
 8002752:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002754:	4b0f      	ldr	r3, [pc, #60]	; (8002794 <MX_SPI2_Init+0x64>)
 8002756:	2200      	movs	r2, #0
 8002758:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800275a:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <MX_SPI2_Init+0x64>)
 800275c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002760:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002762:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <MX_SPI2_Init+0x64>)
 8002764:	2200      	movs	r2, #0
 8002766:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002768:	4b0a      	ldr	r3, [pc, #40]	; (8002794 <MX_SPI2_Init+0x64>)
 800276a:	2200      	movs	r2, #0
 800276c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800276e:	4b09      	ldr	r3, [pc, #36]	; (8002794 <MX_SPI2_Init+0x64>)
 8002770:	2200      	movs	r2, #0
 8002772:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002774:	4b07      	ldr	r3, [pc, #28]	; (8002794 <MX_SPI2_Init+0x64>)
 8002776:	2200      	movs	r2, #0
 8002778:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800277a:	4b06      	ldr	r3, [pc, #24]	; (8002794 <MX_SPI2_Init+0x64>)
 800277c:	220a      	movs	r2, #10
 800277e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002780:	4804      	ldr	r0, [pc, #16]	; (8002794 <MX_SPI2_Init+0x64>)
 8002782:	f00a fc05 	bl	800cf90 <HAL_SPI_Init>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800278c:	f7ff fd52 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002790:	bf00      	nop
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20005bc8 	.word	0x20005bc8
 8002798:	40003800 	.word	0x40003800

0800279c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80027a0:	4b17      	ldr	r3, [pc, #92]	; (8002800 <MX_SPI4_Init+0x64>)
 80027a2:	4a18      	ldr	r2, [pc, #96]	; (8002804 <MX_SPI4_Init+0x68>)
 80027a4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80027a6:	4b16      	ldr	r3, [pc, #88]	; (8002800 <MX_SPI4_Init+0x64>)
 80027a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027ac:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80027ae:	4b14      	ldr	r3, [pc, #80]	; (8002800 <MX_SPI4_Init+0x64>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80027b4:	4b12      	ldr	r3, [pc, #72]	; (8002800 <MX_SPI4_Init+0x64>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027ba:	4b11      	ldr	r3, [pc, #68]	; (8002800 <MX_SPI4_Init+0x64>)
 80027bc:	2200      	movs	r2, #0
 80027be:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027c0:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <MX_SPI4_Init+0x64>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80027c6:	4b0e      	ldr	r3, [pc, #56]	; (8002800 <MX_SPI4_Init+0x64>)
 80027c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027cc:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027ce:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <MX_SPI4_Init+0x64>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027d4:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <MX_SPI4_Init+0x64>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80027da:	4b09      	ldr	r3, [pc, #36]	; (8002800 <MX_SPI4_Init+0x64>)
 80027dc:	2200      	movs	r2, #0
 80027de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027e0:	4b07      	ldr	r3, [pc, #28]	; (8002800 <MX_SPI4_Init+0x64>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80027e6:	4b06      	ldr	r3, [pc, #24]	; (8002800 <MX_SPI4_Init+0x64>)
 80027e8:	220a      	movs	r2, #10
 80027ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80027ec:	4804      	ldr	r0, [pc, #16]	; (8002800 <MX_SPI4_Init+0x64>)
 80027ee:	f00a fbcf 	bl	800cf90 <HAL_SPI_Init>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80027f8:	f7ff fd1c 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80027fc:	bf00      	nop
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	20005c78 	.word	0x20005c78
 8002804:	40013400 	.word	0x40013400

08002808 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 800280c:	4b17      	ldr	r3, [pc, #92]	; (800286c <MX_SPI5_Init+0x64>)
 800280e:	4a18      	ldr	r2, [pc, #96]	; (8002870 <MX_SPI5_Init+0x68>)
 8002810:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002812:	4b16      	ldr	r3, [pc, #88]	; (800286c <MX_SPI5_Init+0x64>)
 8002814:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002818:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800281a:	4b14      	ldr	r3, [pc, #80]	; (800286c <MX_SPI5_Init+0x64>)
 800281c:	2200      	movs	r2, #0
 800281e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002820:	4b12      	ldr	r3, [pc, #72]	; (800286c <MX_SPI5_Init+0x64>)
 8002822:	2200      	movs	r2, #0
 8002824:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002826:	4b11      	ldr	r3, [pc, #68]	; (800286c <MX_SPI5_Init+0x64>)
 8002828:	2200      	movs	r2, #0
 800282a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800282c:	4b0f      	ldr	r3, [pc, #60]	; (800286c <MX_SPI5_Init+0x64>)
 800282e:	2200      	movs	r2, #0
 8002830:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002832:	4b0e      	ldr	r3, [pc, #56]	; (800286c <MX_SPI5_Init+0x64>)
 8002834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002838:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800283a:	4b0c      	ldr	r3, [pc, #48]	; (800286c <MX_SPI5_Init+0x64>)
 800283c:	2200      	movs	r2, #0
 800283e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002840:	4b0a      	ldr	r3, [pc, #40]	; (800286c <MX_SPI5_Init+0x64>)
 8002842:	2200      	movs	r2, #0
 8002844:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002846:	4b09      	ldr	r3, [pc, #36]	; (800286c <MX_SPI5_Init+0x64>)
 8002848:	2200      	movs	r2, #0
 800284a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800284c:	4b07      	ldr	r3, [pc, #28]	; (800286c <MX_SPI5_Init+0x64>)
 800284e:	2200      	movs	r2, #0
 8002850:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002852:	4b06      	ldr	r3, [pc, #24]	; (800286c <MX_SPI5_Init+0x64>)
 8002854:	220a      	movs	r2, #10
 8002856:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002858:	4804      	ldr	r0, [pc, #16]	; (800286c <MX_SPI5_Init+0x64>)
 800285a:	f00a fb99 	bl	800cf90 <HAL_SPI_Init>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002864:	f7ff fce6 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002868:	bf00      	nop
 800286a:	bd80      	pop	{r7, pc}
 800286c:	20005c20 	.word	0x20005c20
 8002870:	40015000 	.word	0x40015000

08002874 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08e      	sub	sp, #56	; 0x38
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	609a      	str	r2, [r3, #8]
 8002888:	60da      	str	r2, [r3, #12]
 800288a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a4c      	ldr	r2, [pc, #304]	; (80029c4 <HAL_SPI_MspInit+0x150>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d12d      	bne.n	80028f2 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	623b      	str	r3, [r7, #32]
 800289a:	4b4b      	ldr	r3, [pc, #300]	; (80029c8 <HAL_SPI_MspInit+0x154>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	4a4a      	ldr	r2, [pc, #296]	; (80029c8 <HAL_SPI_MspInit+0x154>)
 80028a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028a4:	6413      	str	r3, [r2, #64]	; 0x40
 80028a6:	4b48      	ldr	r3, [pc, #288]	; (80029c8 <HAL_SPI_MspInit+0x154>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ae:	623b      	str	r3, [r7, #32]
 80028b0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	61fb      	str	r3, [r7, #28]
 80028b6:	4b44      	ldr	r3, [pc, #272]	; (80029c8 <HAL_SPI_MspInit+0x154>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	4a43      	ldr	r2, [pc, #268]	; (80029c8 <HAL_SPI_MspInit+0x154>)
 80028bc:	f043 0302 	orr.w	r3, r3, #2
 80028c0:	6313      	str	r3, [r2, #48]	; 0x30
 80028c2:	4b41      	ldr	r3, [pc, #260]	; (80029c8 <HAL_SPI_MspInit+0x154>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	61fb      	str	r3, [r7, #28]
 80028cc:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80028ce:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d4:	2302      	movs	r3, #2
 80028d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028dc:	2303      	movs	r3, #3
 80028de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028e0:	2305      	movs	r3, #5
 80028e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028e8:	4619      	mov	r1, r3
 80028ea:	4838      	ldr	r0, [pc, #224]	; (80029cc <HAL_SPI_MspInit+0x158>)
 80028ec:	f007 fbec 	bl	800a0c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80028f0:	e064      	b.n	80029bc <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI4)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a36      	ldr	r2, [pc, #216]	; (80029d0 <HAL_SPI_MspInit+0x15c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d12d      	bne.n	8002958 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80028fc:	2300      	movs	r3, #0
 80028fe:	61bb      	str	r3, [r7, #24]
 8002900:	4b31      	ldr	r3, [pc, #196]	; (80029c8 <HAL_SPI_MspInit+0x154>)
 8002902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002904:	4a30      	ldr	r2, [pc, #192]	; (80029c8 <HAL_SPI_MspInit+0x154>)
 8002906:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800290a:	6453      	str	r3, [r2, #68]	; 0x44
 800290c:	4b2e      	ldr	r3, [pc, #184]	; (80029c8 <HAL_SPI_MspInit+0x154>)
 800290e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002910:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002914:	61bb      	str	r3, [r7, #24]
 8002916:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	4b2a      	ldr	r3, [pc, #168]	; (80029c8 <HAL_SPI_MspInit+0x154>)
 800291e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002920:	4a29      	ldr	r2, [pc, #164]	; (80029c8 <HAL_SPI_MspInit+0x154>)
 8002922:	f043 0310 	orr.w	r3, r3, #16
 8002926:	6313      	str	r3, [r2, #48]	; 0x30
 8002928:	4b27      	ldr	r3, [pc, #156]	; (80029c8 <HAL_SPI_MspInit+0x154>)
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	f003 0310 	and.w	r3, r3, #16
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002934:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002938:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293a:	2302      	movs	r3, #2
 800293c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293e:	2300      	movs	r3, #0
 8002940:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002942:	2303      	movs	r3, #3
 8002944:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002946:	2305      	movs	r3, #5
 8002948:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800294a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800294e:	4619      	mov	r1, r3
 8002950:	4820      	ldr	r0, [pc, #128]	; (80029d4 <HAL_SPI_MspInit+0x160>)
 8002952:	f007 fbb9 	bl	800a0c8 <HAL_GPIO_Init>
}
 8002956:	e031      	b.n	80029bc <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI5)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a1e      	ldr	r2, [pc, #120]	; (80029d8 <HAL_SPI_MspInit+0x164>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d12c      	bne.n	80029bc <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	4b18      	ldr	r3, [pc, #96]	; (80029c8 <HAL_SPI_MspInit+0x154>)
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	4a17      	ldr	r2, [pc, #92]	; (80029c8 <HAL_SPI_MspInit+0x154>)
 800296c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002970:	6453      	str	r3, [r2, #68]	; 0x44
 8002972:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <HAL_SPI_MspInit+0x154>)
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800297a:	613b      	str	r3, [r7, #16]
 800297c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <HAL_SPI_MspInit+0x154>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	4a10      	ldr	r2, [pc, #64]	; (80029c8 <HAL_SPI_MspInit+0x154>)
 8002988:	f043 0320 	orr.w	r3, r3, #32
 800298c:	6313      	str	r3, [r2, #48]	; 0x30
 800298e:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <HAL_SPI_MspInit+0x154>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	f003 0320 	and.w	r3, r3, #32
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800299a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800299e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a0:	2302      	movs	r3, #2
 80029a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029a4:	2301      	movs	r3, #1
 80029a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a8:	2303      	movs	r3, #3
 80029aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80029ac:	2305      	movs	r3, #5
 80029ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b4:	4619      	mov	r1, r3
 80029b6:	4809      	ldr	r0, [pc, #36]	; (80029dc <HAL_SPI_MspInit+0x168>)
 80029b8:	f007 fb86 	bl	800a0c8 <HAL_GPIO_Init>
}
 80029bc:	bf00      	nop
 80029be:	3738      	adds	r7, #56	; 0x38
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40003800 	.word	0x40003800
 80029c8:	40023800 	.word	0x40023800
 80029cc:	40020400 	.word	0x40020400
 80029d0:	40013400 	.word	0x40013400
 80029d4:	40021000 	.word	0x40021000
 80029d8:	40015000 	.word	0x40015000
 80029dc:	40021400 	.word	0x40021400

080029e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	607b      	str	r3, [r7, #4]
 80029ea:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <HAL_MspInit+0x54>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	4a11      	ldr	r2, [pc, #68]	; (8002a34 <HAL_MspInit+0x54>)
 80029f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f4:	6453      	str	r3, [r2, #68]	; 0x44
 80029f6:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <HAL_MspInit+0x54>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029fe:	607b      	str	r3, [r7, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	603b      	str	r3, [r7, #0]
 8002a06:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <HAL_MspInit+0x54>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	4a0a      	ldr	r2, [pc, #40]	; (8002a34 <HAL_MspInit+0x54>)
 8002a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a10:	6413      	str	r3, [r2, #64]	; 0x40
 8002a12:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <HAL_MspInit+0x54>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1a:	603b      	str	r3, [r7, #0]
 8002a1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a1e:	2200      	movs	r2, #0
 8002a20:	210f      	movs	r1, #15
 8002a22:	f06f 0001 	mvn.w	r0, #1
 8002a26:	f007 fb17 	bl	800a058 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40023800 	.word	0x40023800

08002a38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08c      	sub	sp, #48	; 0x30
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002a40:	2300      	movs	r3, #0
 8002a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002a44:	2300      	movs	r3, #0
 8002a46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	2036      	movs	r0, #54	; 0x36
 8002a4e:	f007 fb03 	bl	800a058 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a52:	2036      	movs	r0, #54	; 0x36
 8002a54:	f007 fb1c 	bl	800a090 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	4b1f      	ldr	r3, [pc, #124]	; (8002adc <HAL_InitTick+0xa4>)
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	4a1e      	ldr	r2, [pc, #120]	; (8002adc <HAL_InitTick+0xa4>)
 8002a62:	f043 0310 	orr.w	r3, r3, #16
 8002a66:	6413      	str	r3, [r2, #64]	; 0x40
 8002a68:	4b1c      	ldr	r3, [pc, #112]	; (8002adc <HAL_InitTick+0xa4>)
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	f003 0310 	and.w	r3, r3, #16
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a74:	f107 0210 	add.w	r2, r7, #16
 8002a78:	f107 0314 	add.w	r3, r7, #20
 8002a7c:	4611      	mov	r1, r2
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f009 fa88 	bl	800bf94 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002a84:	f009 fa5e 	bl	800bf44 <HAL_RCC_GetPCLK1Freq>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a90:	4a13      	ldr	r2, [pc, #76]	; (8002ae0 <HAL_InitTick+0xa8>)
 8002a92:	fba2 2303 	umull	r2, r3, r2, r3
 8002a96:	0c9b      	lsrs	r3, r3, #18
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002a9c:	4b11      	ldr	r3, [pc, #68]	; (8002ae4 <HAL_InitTick+0xac>)
 8002a9e:	4a12      	ldr	r2, [pc, #72]	; (8002ae8 <HAL_InitTick+0xb0>)
 8002aa0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002aa2:	4b10      	ldr	r3, [pc, #64]	; (8002ae4 <HAL_InitTick+0xac>)
 8002aa4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002aa8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002aaa:	4a0e      	ldr	r2, [pc, #56]	; (8002ae4 <HAL_InitTick+0xac>)
 8002aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aae:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002ab0:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <HAL_InitTick+0xac>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ab6:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <HAL_InitTick+0xac>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002abc:	4809      	ldr	r0, [pc, #36]	; (8002ae4 <HAL_InitTick+0xac>)
 8002abe:	f00b f80f 	bl	800dae0 <HAL_TIM_Base_Init>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d104      	bne.n	8002ad2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002ac8:	4806      	ldr	r0, [pc, #24]	; (8002ae4 <HAL_InitTick+0xac>)
 8002aca:	f00b f859 	bl	800db80 <HAL_TIM_Base_Start_IT>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	e000      	b.n	8002ad4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3730      	adds	r7, #48	; 0x30
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	431bde83 	.word	0x431bde83
 8002ae4:	20005cd0 	.word	0x20005cd0
 8002ae8:	40001000 	.word	0x40001000

08002aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002af0:	e7fe      	b.n	8002af0 <NMI_Handler+0x4>

08002af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002af2:	b480      	push	{r7}
 8002af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002af6:	e7fe      	b.n	8002af6 <HardFault_Handler+0x4>

08002af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002afc:	e7fe      	b.n	8002afc <MemManage_Handler+0x4>

08002afe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002afe:	b480      	push	{r7}
 8002b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b02:	e7fe      	b.n	8002b02 <BusFault_Handler+0x4>

08002b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b08:	e7fe      	b.n	8002b08 <UsageFault_Handler+0x4>

08002b0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	f007 fcb1 	bl	800a484 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}
	...

08002b28 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002b2c:	4802      	ldr	r0, [pc, #8]	; (8002b38 <RTC_Alarm_IRQHandler+0x10>)
 8002b2e:	f009 fffb 	bl	800cb28 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20005ba8 	.word	0x20005ba8

08002b3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b40:	4802      	ldr	r0, [pc, #8]	; (8002b4c <TIM6_DAC_IRQHandler+0x10>)
 8002b42:	f00b f8e6 	bl	800dd12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20005cd0 	.word	0x20005cd0

08002b50 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	80fb      	strh	r3, [r7, #6]

}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b6c:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <SystemInit+0x20>)
 8002b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b72:	4a05      	ldr	r2, [pc, #20]	; (8002b88 <SystemInit+0x20>)
 8002b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	e000ed00 	.word	0xe000ed00

08002b8c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08e      	sub	sp, #56	; 0x38
 8002b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	605a      	str	r2, [r3, #4]
 8002b9c:	609a      	str	r2, [r3, #8]
 8002b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ba0:	f107 0320 	add.w	r3, r7, #32
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002baa:	1d3b      	adds	r3, r7, #4
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	60da      	str	r2, [r3, #12]
 8002bb6:	611a      	str	r2, [r3, #16]
 8002bb8:	615a      	str	r2, [r3, #20]
 8002bba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002bbc:	4b2d      	ldr	r3, [pc, #180]	; (8002c74 <MX_TIM2_Init+0xe8>)
 8002bbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8002bc4:	4b2b      	ldr	r3, [pc, #172]	; (8002c74 <MX_TIM2_Init+0xe8>)
 8002bc6:	2259      	movs	r2, #89	; 0x59
 8002bc8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bca:	4b2a      	ldr	r3, [pc, #168]	; (8002c74 <MX_TIM2_Init+0xe8>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 8002bd0:	4b28      	ldr	r3, [pc, #160]	; (8002c74 <MX_TIM2_Init+0xe8>)
 8002bd2:	f240 128f 	movw	r2, #399	; 0x18f
 8002bd6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bd8:	4b26      	ldr	r3, [pc, #152]	; (8002c74 <MX_TIM2_Init+0xe8>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bde:	4b25      	ldr	r3, [pc, #148]	; (8002c74 <MX_TIM2_Init+0xe8>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002be4:	4823      	ldr	r0, [pc, #140]	; (8002c74 <MX_TIM2_Init+0xe8>)
 8002be6:	f00a ff7b 	bl	800dae0 <HAL_TIM_Base_Init>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002bf0:	f7ff fb20 	bl	8002234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002bfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bfe:	4619      	mov	r1, r3
 8002c00:	481c      	ldr	r0, [pc, #112]	; (8002c74 <MX_TIM2_Init+0xe8>)
 8002c02:	f00b fa51 	bl	800e0a8 <HAL_TIM_ConfigClockSource>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002c0c:	f7ff fb12 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002c10:	4818      	ldr	r0, [pc, #96]	; (8002c74 <MX_TIM2_Init+0xe8>)
 8002c12:	f00b f825 	bl	800dc60 <HAL_TIM_PWM_Init>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002c1c:	f7ff fb0a 	bl	8002234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002c20:	2320      	movs	r3, #32
 8002c22:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c24:	2300      	movs	r3, #0
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c28:	f107 0320 	add.w	r3, r7, #32
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4811      	ldr	r0, [pc, #68]	; (8002c74 <MX_TIM2_Init+0xe8>)
 8002c30:	f00b fe14 	bl	800e85c <HAL_TIMEx_MasterConfigSynchronization>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002c3a:	f7ff fafb 	bl	8002234 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c3e:	2360      	movs	r3, #96	; 0x60
 8002c40:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8002c42:	2364      	movs	r3, #100	; 0x64
 8002c44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c4e:	1d3b      	adds	r3, r7, #4
 8002c50:	2208      	movs	r2, #8
 8002c52:	4619      	mov	r1, r3
 8002c54:	4807      	ldr	r0, [pc, #28]	; (8002c74 <MX_TIM2_Init+0xe8>)
 8002c56:	f00b f965 	bl	800df24 <HAL_TIM_PWM_ConfigChannel>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002c60:	f7ff fae8 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002c64:	4803      	ldr	r0, [pc, #12]	; (8002c74 <MX_TIM2_Init+0xe8>)
 8002c66:	f000 f827 	bl	8002cb8 <HAL_TIM_MspPostInit>

}
 8002c6a:	bf00      	nop
 8002c6c:	3738      	adds	r7, #56	; 0x38
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20005d18 	.word	0x20005d18

08002c78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c88:	d10d      	bne.n	8002ca6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <HAL_TIM_Base_MspInit+0x3c>)
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	4a08      	ldr	r2, [pc, #32]	; (8002cb4 <HAL_TIM_Base_MspInit+0x3c>)
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	6413      	str	r3, [r2, #64]	; 0x40
 8002c9a:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <HAL_TIM_Base_MspInit+0x3c>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002ca6:	bf00      	nop
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40023800 	.word	0x40023800

08002cb8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b088      	sub	sp, #32
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc0:	f107 030c 	add.w	r3, r7, #12
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	60da      	str	r2, [r3, #12]
 8002cce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd8:	d11d      	bne.n	8002d16 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60bb      	str	r3, [r7, #8]
 8002cde:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <HAL_TIM_MspPostInit+0x68>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	4a0f      	ldr	r2, [pc, #60]	; (8002d20 <HAL_TIM_MspPostInit+0x68>)
 8002ce4:	f043 0301 	orr.w	r3, r3, #1
 8002ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cea:	4b0d      	ldr	r3, [pc, #52]	; (8002d20 <HAL_TIM_MspPostInit+0x68>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	60bb      	str	r3, [r7, #8]
 8002cf4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8002cf6:	2304      	movs	r3, #4
 8002cf8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d02:	2300      	movs	r3, #0
 8002d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d06:	2301      	movs	r3, #1
 8002d08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8002d0a:	f107 030c 	add.w	r3, r7, #12
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4804      	ldr	r0, [pc, #16]	; (8002d24 <HAL_TIM_MspPostInit+0x6c>)
 8002d12:	f007 f9d9 	bl	800a0c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002d16:	bf00      	nop
 8002d18:	3720      	adds	r7, #32
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40023800 	.word	0x40023800
 8002d24:	40020000 	.word	0x40020000

08002d28 <MX_UART8_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART8 init function */
void MX_UART8_Init(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8002d2c:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <MX_UART8_Init+0x4c>)
 8002d2e:	4a12      	ldr	r2, [pc, #72]	; (8002d78 <MX_UART8_Init+0x50>)
 8002d30:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8002d32:	4b10      	ldr	r3, [pc, #64]	; (8002d74 <MX_UART8_Init+0x4c>)
 8002d34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d38:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <MX_UART8_Init+0x4c>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002d40:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <MX_UART8_Init+0x4c>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002d46:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <MX_UART8_Init+0x4c>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002d4c:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <MX_UART8_Init+0x4c>)
 8002d4e:	220c      	movs	r2, #12
 8002d50:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d52:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <MX_UART8_Init+0x4c>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d58:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <MX_UART8_Init+0x4c>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002d5e:	4805      	ldr	r0, [pc, #20]	; (8002d74 <MX_UART8_Init+0x4c>)
 8002d60:	f00b fe0c 	bl	800e97c <HAL_UART_Init>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8002d6a:	f7ff fa63 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002d6e:	bf00      	nop
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20005da4 	.word	0x20005da4
 8002d78:	40007c00 	.word	0x40007c00

08002d7c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002d80:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <MX_USART3_UART_Init+0x4c>)
 8002d82:	4a12      	ldr	r2, [pc, #72]	; (8002dcc <MX_USART3_UART_Init+0x50>)
 8002d84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002d86:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <MX_USART3_UART_Init+0x4c>)
 8002d88:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002d8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d8e:	4b0e      	ldr	r3, [pc, #56]	; (8002dc8 <MX_USART3_UART_Init+0x4c>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d94:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <MX_USART3_UART_Init+0x4c>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002d9a:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <MX_USART3_UART_Init+0x4c>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002da0:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <MX_USART3_UART_Init+0x4c>)
 8002da2:	220c      	movs	r2, #12
 8002da4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002da6:	4b08      	ldr	r3, [pc, #32]	; (8002dc8 <MX_USART3_UART_Init+0x4c>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dac:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <MX_USART3_UART_Init+0x4c>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002db2:	4805      	ldr	r0, [pc, #20]	; (8002dc8 <MX_USART3_UART_Init+0x4c>)
 8002db4:	f00b fde2 	bl	800e97c <HAL_UART_Init>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002dbe:	f7ff fa39 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002dc2:	bf00      	nop
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	20005d60 	.word	0x20005d60
 8002dcc:	40004800 	.word	0x40004800

08002dd0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002dd4:	4b11      	ldr	r3, [pc, #68]	; (8002e1c <MX_USART6_UART_Init+0x4c>)
 8002dd6:	4a12      	ldr	r2, [pc, #72]	; (8002e20 <MX_USART6_UART_Init+0x50>)
 8002dd8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002dda:	4b10      	ldr	r3, [pc, #64]	; (8002e1c <MX_USART6_UART_Init+0x4c>)
 8002ddc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002de0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002de2:	4b0e      	ldr	r3, [pc, #56]	; (8002e1c <MX_USART6_UART_Init+0x4c>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002de8:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <MX_USART6_UART_Init+0x4c>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002dee:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <MX_USART6_UART_Init+0x4c>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002df4:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <MX_USART6_UART_Init+0x4c>)
 8002df6:	220c      	movs	r2, #12
 8002df8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dfa:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <MX_USART6_UART_Init+0x4c>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e00:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <MX_USART6_UART_Init+0x4c>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002e06:	4805      	ldr	r0, [pc, #20]	; (8002e1c <MX_USART6_UART_Init+0x4c>)
 8002e08:	f00b fdb8 	bl	800e97c <HAL_UART_Init>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002e12:	f7ff fa0f 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20005de8 	.word	0x20005de8
 8002e20:	40011400 	.word	0x40011400

08002e24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08e      	sub	sp, #56	; 0x38
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	605a      	str	r2, [r3, #4]
 8002e36:	609a      	str	r2, [r3, #8]
 8002e38:	60da      	str	r2, [r3, #12]
 8002e3a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART8)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a4b      	ldr	r2, [pc, #300]	; (8002f70 <HAL_UART_MspInit+0x14c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d12c      	bne.n	8002ea0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	623b      	str	r3, [r7, #32]
 8002e4a:	4b4a      	ldr	r3, [pc, #296]	; (8002f74 <HAL_UART_MspInit+0x150>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	4a49      	ldr	r2, [pc, #292]	; (8002f74 <HAL_UART_MspInit+0x150>)
 8002e50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e54:	6413      	str	r3, [r2, #64]	; 0x40
 8002e56:	4b47      	ldr	r3, [pc, #284]	; (8002f74 <HAL_UART_MspInit+0x150>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e5e:	623b      	str	r3, [r7, #32]
 8002e60:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	61fb      	str	r3, [r7, #28]
 8002e66:	4b43      	ldr	r3, [pc, #268]	; (8002f74 <HAL_UART_MspInit+0x150>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	4a42      	ldr	r2, [pc, #264]	; (8002f74 <HAL_UART_MspInit+0x150>)
 8002e6c:	f043 0310 	orr.w	r3, r3, #16
 8002e70:	6313      	str	r3, [r2, #48]	; 0x30
 8002e72:	4b40      	ldr	r3, [pc, #256]	; (8002f74 <HAL_UART_MspInit+0x150>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	f003 0310 	and.w	r3, r3, #16
 8002e7a:	61fb      	str	r3, [r7, #28]
 8002e7c:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e82:	2302      	movs	r3, #2
 8002e84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002e8e:	2308      	movs	r3, #8
 8002e90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e96:	4619      	mov	r1, r3
 8002e98:	4837      	ldr	r0, [pc, #220]	; (8002f78 <HAL_UART_MspInit+0x154>)
 8002e9a:	f007 f915 	bl	800a0c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002e9e:	e063      	b.n	8002f68 <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART3)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a35      	ldr	r2, [pc, #212]	; (8002f7c <HAL_UART_MspInit+0x158>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d12d      	bne.n	8002f06 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61bb      	str	r3, [r7, #24]
 8002eae:	4b31      	ldr	r3, [pc, #196]	; (8002f74 <HAL_UART_MspInit+0x150>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	4a30      	ldr	r2, [pc, #192]	; (8002f74 <HAL_UART_MspInit+0x150>)
 8002eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eba:	4b2e      	ldr	r3, [pc, #184]	; (8002f74 <HAL_UART_MspInit+0x150>)
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ec2:	61bb      	str	r3, [r7, #24]
 8002ec4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	4b2a      	ldr	r3, [pc, #168]	; (8002f74 <HAL_UART_MspInit+0x150>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	4a29      	ldr	r2, [pc, #164]	; (8002f74 <HAL_UART_MspInit+0x150>)
 8002ed0:	f043 0308 	orr.w	r3, r3, #8
 8002ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed6:	4b27      	ldr	r3, [pc, #156]	; (8002f74 <HAL_UART_MspInit+0x150>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8002ee2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ee6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ef4:	2307      	movs	r3, #7
 8002ef6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002efc:	4619      	mov	r1, r3
 8002efe:	4820      	ldr	r0, [pc, #128]	; (8002f80 <HAL_UART_MspInit+0x15c>)
 8002f00:	f007 f8e2 	bl	800a0c8 <HAL_GPIO_Init>
}
 8002f04:	e030      	b.n	8002f68 <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART6)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a1e      	ldr	r2, [pc, #120]	; (8002f84 <HAL_UART_MspInit+0x160>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d12b      	bne.n	8002f68 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002f10:	2300      	movs	r3, #0
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	4b17      	ldr	r3, [pc, #92]	; (8002f74 <HAL_UART_MspInit+0x150>)
 8002f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f18:	4a16      	ldr	r2, [pc, #88]	; (8002f74 <HAL_UART_MspInit+0x150>)
 8002f1a:	f043 0320 	orr.w	r3, r3, #32
 8002f1e:	6453      	str	r3, [r2, #68]	; 0x44
 8002f20:	4b14      	ldr	r3, [pc, #80]	; (8002f74 <HAL_UART_MspInit+0x150>)
 8002f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f24:	f003 0320 	and.w	r3, r3, #32
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	4b10      	ldr	r3, [pc, #64]	; (8002f74 <HAL_UART_MspInit+0x150>)
 8002f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f34:	4a0f      	ldr	r2, [pc, #60]	; (8002f74 <HAL_UART_MspInit+0x150>)
 8002f36:	f043 0304 	orr.w	r3, r3, #4
 8002f3a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3c:	4b0d      	ldr	r3, [pc, #52]	; (8002f74 <HAL_UART_MspInit+0x150>)
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8002f48:	23c0      	movs	r3, #192	; 0xc0
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f54:	2303      	movs	r3, #3
 8002f56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002f58:	2308      	movs	r3, #8
 8002f5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f60:	4619      	mov	r1, r3
 8002f62:	4809      	ldr	r0, [pc, #36]	; (8002f88 <HAL_UART_MspInit+0x164>)
 8002f64:	f007 f8b0 	bl	800a0c8 <HAL_GPIO_Init>
}
 8002f68:	bf00      	nop
 8002f6a:	3738      	adds	r7, #56	; 0x38
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40007c00 	.word	0x40007c00
 8002f74:	40023800 	.word	0x40023800
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	40004800 	.word	0x40004800
 8002f80:	40020c00 	.word	0x40020c00
 8002f84:	40011400 	.word	0x40011400
 8002f88:	40020800 	.word	0x40020800

08002f8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fc4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f92:	e003      	b.n	8002f9c <LoopCopyDataInit>

08002f94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f94:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f9a:	3104      	adds	r1, #4

08002f9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f9c:	480b      	ldr	r0, [pc, #44]	; (8002fcc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002f9e:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002fa0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002fa2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002fa4:	d3f6      	bcc.n	8002f94 <CopyDataInit>
  ldr  r2, =_sbss
 8002fa6:	4a0b      	ldr	r2, [pc, #44]	; (8002fd4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002fa8:	e002      	b.n	8002fb0 <LoopFillZerobss>

08002faa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002faa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002fac:	f842 3b04 	str.w	r3, [r2], #4

08002fb0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002fb0:	4b09      	ldr	r3, [pc, #36]	; (8002fd8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002fb2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002fb4:	d3f9      	bcc.n	8002faa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002fb6:	f7ff fdd7 	bl	8002b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fba:	f00f fa75 	bl	80124a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fbe:	f7ff f857 	bl	8002070 <main>
  bx  lr    
 8002fc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002fc4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002fc8:	0801aa6c 	.word	0x0801aa6c
  ldr  r0, =_sdata
 8002fcc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002fd0:	200002e4 	.word	0x200002e4
  ldr  r2, =_sbss
 8002fd4:	200002e4 	.word	0x200002e4
  ldr  r3, = _ebss
 8002fd8:	200064f4 	.word	0x200064f4

08002fdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fdc:	e7fe      	b.n	8002fdc <ADC_IRQHandler>
	...

08002fe0 <MRT_getContinuity>:
 * Checks the continuity of the gates
 *
 * returns a binary number in its decimal form. Each bit is the state of a gate.
 * bit3 bit2 bit1 bit0 = drogue1 drogue2 prop1 prop2
 */
uint8_t MRT_getContinuity(void){
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
	uint8_t drogue1 = HAL_GPIO_ReadPin(IN_EJ_Drogue_Cont_GPIO_Port, IN_EJ_Drogue_Cont_Pin);
 8002fe6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fea:	4815      	ldr	r0, [pc, #84]	; (8003040 <MRT_getContinuity+0x60>)
 8002fec:	f007 fa18 	bl	800a420 <HAL_GPIO_ReadPin>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	71fb      	strb	r3, [r7, #7]
	uint8_t drogue2 = HAL_GPIO_ReadPin(IN_EJ_Main_Cont_GPIO_Port, IN_EJ_Main_Cont_Pin);
 8002ff4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ff8:	4811      	ldr	r0, [pc, #68]	; (8003040 <MRT_getContinuity+0x60>)
 8002ffa:	f007 fa11 	bl	800a420 <HAL_GPIO_ReadPin>
 8002ffe:	4603      	mov	r3, r0
 8003000:	71bb      	strb	r3, [r7, #6]
	uint8_t prop1 = HAL_GPIO_ReadPin(IN_PyroValve_Cont_1_GPIO_Port, IN_PyroValve_Cont_1_Pin);
 8003002:	2101      	movs	r1, #1
 8003004:	480e      	ldr	r0, [pc, #56]	; (8003040 <MRT_getContinuity+0x60>)
 8003006:	f007 fa0b 	bl	800a420 <HAL_GPIO_ReadPin>
 800300a:	4603      	mov	r3, r0
 800300c:	717b      	strb	r3, [r7, #5]
	uint8_t prop2 = HAL_GPIO_ReadPin(IN_PyroValve_Cont_2_GPIO_Port, IN_PyroValve_Cont_2_Pin);
 800300e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003012:	480c      	ldr	r0, [pc, #48]	; (8003044 <MRT_getContinuity+0x64>)
 8003014:	f007 fa04 	bl	800a420 <HAL_GPIO_ReadPin>
 8003018:	4603      	mov	r3, r0
 800301a:	713b      	strb	r3, [r7, #4]
	uint8_t continuity = 8*drogue1 + 4*drogue2 + 2*prop1 + prop2;
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	005a      	lsls	r2, r3, #1
 8003020:	79bb      	ldrb	r3, [r7, #6]
 8003022:	4413      	add	r3, r2
 8003024:	005a      	lsls	r2, r3, #1
 8003026:	797b      	ldrb	r3, [r7, #5]
 8003028:	4413      	add	r3, r2
 800302a:	b2db      	uxtb	r3, r3
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	b2da      	uxtb	r2, r3
 8003030:	793b      	ldrb	r3, [r7, #4]
 8003032:	4413      	add	r3, r2
 8003034:	70fb      	strb	r3, [r7, #3]
	return continuity;
 8003036:	78fb      	ldrb	r3, [r7, #3]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40021800 	.word	0x40021800
 8003044:	40021400 	.word	0x40021400

08003048 <MRT_formatAvionics>:


// formats avionics telemetry string using sprintf
void MRT_formatAvionics(void) {
 8003048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800304c:	b0a3      	sub	sp, #140	; 0x8c
 800304e:	af16      	add	r7, sp, #88	; 0x58
	memset(msg_buffer_av, 0, 200);
 8003050:	22c8      	movs	r2, #200	; 0xc8
 8003052:	2100      	movs	r1, #0
 8003054:	483c      	ldr	r0, [pc, #240]	; (8003148 <MRT_formatAvionics+0x100>)
 8003056:	f00f fba5 	bl	80127a4 <memset>
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
		hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 800305a:	4b3c      	ldr	r3, [pc, #240]	; (800314c <MRT_formatAvionics+0x104>)
 800305c:	681b      	ldr	r3, [r3, #0]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 800305e:	4618      	mov	r0, r3
 8003060:	f7fd fa92 	bl	8000588 <__aeabi_f2d>
 8003064:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
		hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 8003068:	4b38      	ldr	r3, [pc, #224]	; (800314c <MRT_formatAvionics+0x104>)
 800306a:	685b      	ldr	r3, [r3, #4]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 800306c:	4618      	mov	r0, r3
 800306e:	f7fd fa8b 	bl	8000588 <__aeabi_f2d>
 8003072:	e9c7 0108 	strd	r0, r1, [r7, #32]
		hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 8003076:	4b35      	ldr	r3, [pc, #212]	; (800314c <MRT_formatAvionics+0x104>)
 8003078:	689b      	ldr	r3, [r3, #8]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 800307a:	4618      	mov	r0, r3
 800307c:	f7fd fa84 	bl	8000588 <__aeabi_f2d>
 8003080:	e9c7 0106 	strd	r0, r1, [r7, #24]
		hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 8003084:	4b31      	ldr	r3, [pc, #196]	; (800314c <MRT_formatAvionics+0x104>)
 8003086:	68db      	ldr	r3, [r3, #12]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 8003088:	4618      	mov	r0, r3
 800308a:	f7fd fa7d 	bl	8000588 <__aeabi_f2d>
 800308e:	e9c7 0104 	strd	r0, r1, [r7, #16]
		hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 8003092:	4b2e      	ldr	r3, [pc, #184]	; (800314c <MRT_formatAvionics+0x104>)
 8003094:	691b      	ldr	r3, [r3, #16]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 8003096:	4618      	mov	r0, r3
 8003098:	f7fd fa76 	bl	8000588 <__aeabi_f2d>
 800309c:	e9c7 0102 	strd	r0, r1, [r7, #8]
		hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 80030a0:	4b2a      	ldr	r3, [pc, #168]	; (800314c <MRT_formatAvionics+0x104>)
 80030a2:	695b      	ldr	r3, [r3, #20]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7fd fa6f 	bl	8000588 <__aeabi_f2d>
 80030aa:	e9c7 0100 	strd	r0, r1, [r7]
		hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 80030ae:	4b28      	ldr	r3, [pc, #160]	; (8003150 <MRT_formatAvionics+0x108>)
 80030b0:	681b      	ldr	r3, [r3, #0]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fd fa68 	bl	8000588 <__aeabi_f2d>
 80030b8:	4682      	mov	sl, r0
 80030ba:	468b      	mov	fp, r1
		hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 80030bc:	4b25      	ldr	r3, [pc, #148]	; (8003154 <MRT_formatAvionics+0x10c>)
 80030be:	681b      	ldr	r3, [r3, #0]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fd fa61 	bl	8000588 <__aeabi_f2d>
 80030c6:	4680      	mov	r8, r0
 80030c8:	4689      	mov	r9, r1
		hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 80030ca:	4b22      	ldr	r3, [pc, #136]	; (8003154 <MRT_formatAvionics+0x10c>)
 80030cc:	685b      	ldr	r3, [r3, #4]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fd fa5a 	bl	8000588 <__aeabi_f2d>
 80030d4:	4604      	mov	r4, r0
 80030d6:	460d      	mov	r5, r1
 80030d8:	4b1f      	ldr	r3, [pc, #124]	; (8003158 <MRT_formatAvionics+0x110>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	461e      	mov	r6, r3
 80030de:	4b1f      	ldr	r3, [pc, #124]	; (800315c <MRT_formatAvionics+0x114>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	4b1e      	ldr	r3, [pc, #120]	; (8003160 <MRT_formatAvionics+0x118>)
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	4b1e      	ldr	r3, [pc, #120]	; (8003164 <MRT_formatAvionics+0x11c>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	4619      	mov	r1, r3
 80030ee:	4b1e      	ldr	r3, [pc, #120]	; (8003168 <MRT_formatAvionics+0x120>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	9314      	str	r3, [sp, #80]	; 0x50
 80030f4:	9113      	str	r1, [sp, #76]	; 0x4c
 80030f6:	9212      	str	r2, [sp, #72]	; 0x48
 80030f8:	9011      	str	r0, [sp, #68]	; 0x44
 80030fa:	9610      	str	r6, [sp, #64]	; 0x40
 80030fc:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8003100:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8003104:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8003108:	ed97 7b00 	vldr	d7, [r7]
 800310c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003110:	ed97 7b02 	vldr	d7, [r7, #8]
 8003114:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003118:	ed97 7b04 	vldr	d7, [r7, #16]
 800311c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003120:	ed97 7b06 	vldr	d7, [r7, #24]
 8003124:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003128:	ed97 7b08 	vldr	d7, [r7, #32]
 800312c:	ed8d 7b00 	vstr	d7, [sp]
 8003130:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003134:	490d      	ldr	r1, [pc, #52]	; (800316c <MRT_formatAvionics+0x124>)
 8003136:	4804      	ldr	r0, [pc, #16]	; (8003148 <MRT_formatAvionics+0x100>)
 8003138:	f010 fe30 	bl	8013d9c <siprintf>
		prev_min, prev_sec, prev_subsec,
		gates_continuity,	ejection_stage_flag);
}
 800313c:	bf00      	nop
 800313e:	3734      	adds	r7, #52	; 0x34
 8003140:	46bd      	mov	sp, r7
 8003142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003146:	bf00      	nop
 8003148:	20005e2c 	.word	0x20005e2c
 800314c:	20000394 	.word	0x20000394
 8003150:	200003c0 	.word	0x200003c0
 8003154:	200003d4 	.word	0x200003d4
 8003158:	20000386 	.word	0x20000386
 800315c:	20000387 	.word	0x20000387
 8003160:	20000388 	.word	0x20000388
 8003164:	2000036d 	.word	0x2000036d
 8003168:	20000384 	.word	0x20000384
 800316c:	0801890c 	.word	0x0801890c

08003170 <MRT_external_flash_Init>:


//**************************************************//
//FUNCTIONS

void MRT_external_flash_Init(void){
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0

	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003176:	2300      	movs	r3, #0
 8003178:	607b      	str	r3, [r7, #4]
 800317a:	e007      	b.n	800318c <MRT_external_flash_Init+0x1c>
		FLAGS_NULL_BUFFER[i] = 0; //Setup the flags null buffer for the correct number of values
 800317c:	4a13      	ldr	r2, [pc, #76]	; (80031cc <MRT_external_flash_Init+0x5c>)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4413      	add	r3, r2
 8003182:	2200      	movs	r2, #0
 8003184:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3301      	adds	r3, #1
 800318a:	607b      	str	r3, [r7, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b04      	cmp	r3, #4
 8003190:	ddf4      	ble.n	800317c <MRT_external_flash_Init+0xc>
	}

	if (!W25qxx_Init()) {
 8003192:	f000 fc69 	bl	8003a68 <W25qxx_Init>
 8003196:	4603      	mov	r3, r0
 8003198:	f083 0301 	eor.w	r3, r3, #1
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <MRT_external_flash_Init+0x36>
		Error_Handler(); // hangs and blinks LEDF
 80031a2:	f7ff f847 	bl	8002234 <Error_Handler>
	}

	//Retrieve flags
	W25qxx_ReadSector(ext_flash_flags_buffer, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 80031a6:	2305      	movs	r3, #5
 80031a8:	2200      	movs	r2, #0
 80031aa:	2101      	movs	r1, #1
 80031ac:	4808      	ldr	r0, [pc, #32]	; (80031d0 <MRT_external_flash_Init+0x60>)
 80031ae:	f001 f835 	bl	800421c <W25qxx_ReadSector>

	//Retrieve RTC time (last recorded)
	W25qxx_ReadSector(ext_flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 80031b2:	2304      	movs	r3, #4
 80031b4:	2200      	movs	r2, #0
 80031b6:	2102      	movs	r1, #2
 80031b8:	4806      	ldr	r0, [pc, #24]	; (80031d4 <MRT_external_flash_Init+0x64>)
 80031ba:	f001 f82f 	bl	800421c <W25qxx_ReadSector>

	//Assign each value read to their variable
	MRT_updateExternalFlashValues();
 80031be:	f000 f843 	bl	8003248 <MRT_updateExternalFlashValues>
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20005ef4 	.word	0x20005ef4
 80031d0:	20005f00 	.word	0x20005f00
 80031d4:	20005efc 	.word	0x20005efc

080031d8 <MRT_updateExternalFlashBuffers>:


void MRT_updateExternalFlashBuffers(void){
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 80031de:	2300      	movs	r3, #0
 80031e0:	607b      	str	r3, [r7, #4]
 80031e2:	e00c      	b.n	80031fe <MRT_updateExternalFlashBuffers+0x26>
		ext_flash_flags_buffer[i] = *ext_flash_flags[i];
 80031e4:	4a14      	ldr	r2, [pc, #80]	; (8003238 <MRT_updateExternalFlashBuffers+0x60>)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ec:	7819      	ldrb	r1, [r3, #0]
 80031ee:	4a13      	ldr	r2, [pc, #76]	; (800323c <MRT_updateExternalFlashBuffers+0x64>)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4413      	add	r3, r2
 80031f4:	460a      	mov	r2, r1
 80031f6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3301      	adds	r3, #1
 80031fc:	607b      	str	r3, [r7, #4]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b04      	cmp	r3, #4
 8003202:	ddef      	ble.n	80031e4 <MRT_updateExternalFlashBuffers+0xc>
	}
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003204:	2300      	movs	r3, #0
 8003206:	603b      	str	r3, [r7, #0]
 8003208:	e00c      	b.n	8003224 <MRT_updateExternalFlashBuffers+0x4c>
		ext_flash_time_buffer[i] = *ext_flash_time[i];
 800320a:	4a0d      	ldr	r2, [pc, #52]	; (8003240 <MRT_updateExternalFlashBuffers+0x68>)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003212:	7819      	ldrb	r1, [r3, #0]
 8003214:	4a0b      	ldr	r2, [pc, #44]	; (8003244 <MRT_updateExternalFlashBuffers+0x6c>)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	4413      	add	r3, r2
 800321a:	460a      	mov	r2, r1
 800321c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	3301      	adds	r3, #1
 8003222:	603b      	str	r3, [r7, #0]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	2b03      	cmp	r3, #3
 8003228:	ddef      	ble.n	800320a <MRT_updateExternalFlashBuffers+0x32>
	}
}
 800322a:	bf00      	nop
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	20000064 	.word	0x20000064
 800323c:	20005f00 	.word	0x20005f00
 8003240:	20000078 	.word	0x20000078
 8003244:	20005efc 	.word	0x20005efc

08003248 <MRT_updateExternalFlashValues>:


void MRT_updateExternalFlashValues(void){
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 800324e:	2300      	movs	r3, #0
 8003250:	607b      	str	r3, [r7, #4]
 8003252:	e00b      	b.n	800326c <MRT_updateExternalFlashValues+0x24>
		*ext_flash_flags[i] = ext_flash_flags_buffer[i];
 8003254:	4a13      	ldr	r2, [pc, #76]	; (80032a4 <MRT_updateExternalFlashValues+0x5c>)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800325c:	4912      	ldr	r1, [pc, #72]	; (80032a8 <MRT_updateExternalFlashValues+0x60>)
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	440a      	add	r2, r1
 8003262:	7812      	ldrb	r2, [r2, #0]
 8003264:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	3301      	adds	r3, #1
 800326a:	607b      	str	r3, [r7, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b04      	cmp	r3, #4
 8003270:	ddf0      	ble.n	8003254 <MRT_updateExternalFlashValues+0xc>
	}
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003272:	2300      	movs	r3, #0
 8003274:	603b      	str	r3, [r7, #0]
 8003276:	e00b      	b.n	8003290 <MRT_updateExternalFlashValues+0x48>
		*ext_flash_time[i] = ext_flash_time_buffer[i];
 8003278:	4a0c      	ldr	r2, [pc, #48]	; (80032ac <MRT_updateExternalFlashValues+0x64>)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003280:	490b      	ldr	r1, [pc, #44]	; (80032b0 <MRT_updateExternalFlashValues+0x68>)
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	440a      	add	r2, r1
 8003286:	7812      	ldrb	r2, [r2, #0]
 8003288:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	3301      	adds	r3, #1
 800328e:	603b      	str	r3, [r7, #0]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	2b03      	cmp	r3, #3
 8003294:	ddf0      	ble.n	8003278 <MRT_updateExternalFlashValues+0x30>
	}
}
 8003296:	bf00      	nop
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	20000064 	.word	0x20000064
 80032a8:	20005f00 	.word	0x20005f00
 80032ac:	20000078 	.word	0x20000078
 80032b0:	20005efc 	.word	0x20005efc

080032b4 <MRT_saveFlagValue>:
//Public functions

/*
 * Save a flag value (value updated outside the function)
 */
void MRT_saveFlagValue(rtc_backup_reg state){
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	4603      	mov	r3, r0
 80032bc:	71fb      	strb	r3, [r7, #7]
	//Write new flags to flash memory
	MRT_updateExternalFlashBuffers();
 80032be:	f7ff ff8b 	bl	80031d8 <MRT_updateExternalFlashBuffers>
	W25qxx_EraseSector(FLAGS_SECTOR);
 80032c2:	2001      	movs	r0, #1
 80032c4:	f000 fd22 	bl	8003d0c <W25qxx_EraseSector>
	W25qxx_WriteSector(ext_flash_flags_buffer, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 80032c8:	2305      	movs	r3, #5
 80032ca:	2200      	movs	r2, #0
 80032cc:	2101      	movs	r1, #1
 80032ce:	4808      	ldr	r0, [pc, #32]	; (80032f0 <MRT_saveFlagValue+0x3c>)
 80032d0:	f000 fe66 	bl	8003fa0 <W25qxx_WriteSector>

	//Write new flag to RTC backup register
	MRT_RTC_setBackupReg(state, *rtc_bckp_regs[state]);
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	4a07      	ldr	r2, [pc, #28]	; (80032f4 <MRT_saveFlagValue+0x40>)
 80032d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	79fb      	ldrb	r3, [r7, #7]
 80032e0:	4611      	mov	r1, r2
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff fa06 	bl	80026f4 <MRT_RTC_setBackupReg>
}
 80032e8:	bf00      	nop
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	20005f00 	.word	0x20005f00
 80032f4:	20000000 	.word	0x20000000

080032f8 <MRT_checkFlagsValues>:


/*
 * Check for memory issues
 */
uint8_t MRT_checkFlagsValues(rtc_backup_reg val_index, uint32_t max_val){
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	6039      	str	r1, [r7, #0]
 8003302:	71fb      	strb	r3, [r7, #7]

	uint8_t ret = true;
 8003304:	2301      	movs	r3, #1
 8003306:	73fb      	strb	r3, [r7, #15]

	//Check for a random value (unsigned int so can't be negative)
	if (*rtc_bckp_regs[val_index] > max_val){
 8003308:	79fb      	ldrb	r3, [r7, #7]
 800330a:	4a2e      	ldr	r2, [pc, #184]	; (80033c4 <MRT_checkFlagsValues+0xcc>)
 800330c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	429a      	cmp	r2, r3
 8003316:	d207      	bcs.n	8003328 <MRT_checkFlagsValues+0x30>
		*rtc_bckp_regs[val_index] = 0;
 8003318:	79fb      	ldrb	r3, [r7, #7]
 800331a:	4a2a      	ldr	r2, [pc, #168]	; (80033c4 <MRT_checkFlagsValues+0xcc>)
 800331c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
		ret = false;
 8003324:	2300      	movs	r3, #0
 8003326:	73fb      	strb	r3, [r7, #15]
	}
	if (*ext_flash_flags[val_index] > max_val){
 8003328:	79fb      	ldrb	r3, [r7, #7]
 800332a:	4a27      	ldr	r2, [pc, #156]	; (80033c8 <MRT_checkFlagsValues+0xd0>)
 800332c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	461a      	mov	r2, r3
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	4293      	cmp	r3, r2
 8003338:	d207      	bcs.n	800334a <MRT_checkFlagsValues+0x52>
		*ext_flash_flags[val_index] = 0;
 800333a:	79fb      	ldrb	r3, [r7, #7]
 800333c:	4a22      	ldr	r2, [pc, #136]	; (80033c8 <MRT_checkFlagsValues+0xd0>)
 800333e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003342:	2200      	movs	r2, #0
 8003344:	701a      	strb	r2, [r3, #0]
		ret = false;
 8003346:	2300      	movs	r3, #0
 8003348:	73fb      	strb	r3, [r7, #15]
	}

	if (*rtc_bckp_regs[val_index] != *ext_flash_flags[val_index]){
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	4a1d      	ldr	r2, [pc, #116]	; (80033c4 <MRT_checkFlagsValues+0xcc>)
 800334e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	79fa      	ldrb	r2, [r7, #7]
 8003356:	491c      	ldr	r1, [pc, #112]	; (80033c8 <MRT_checkFlagsValues+0xd0>)
 8003358:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800335c:	7812      	ldrb	r2, [r2, #0]
 800335e:	4293      	cmp	r3, r2
 8003360:	d028      	beq.n	80033b4 <MRT_checkFlagsValues+0xbc>
		*rtc_bckp_regs[val_index] = MAX(*rtc_bckp_regs[val_index], *ext_flash_flags[val_index]);
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	4a18      	ldr	r2, [pc, #96]	; (80033c8 <MRT_checkFlagsValues+0xd0>)
 8003366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	4618      	mov	r0, r3
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	4a14      	ldr	r2, [pc, #80]	; (80033c4 <MRT_checkFlagsValues+0xcc>)
 8003372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	79fb      	ldrb	r3, [r7, #7]
 800337a:	4912      	ldr	r1, [pc, #72]	; (80033c4 <MRT_checkFlagsValues+0xcc>)
 800337c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003380:	4282      	cmp	r2, r0
 8003382:	bf38      	it	cc
 8003384:	4602      	movcc	r2, r0
 8003386:	601a      	str	r2, [r3, #0]
		*ext_flash_flags[val_index] = MAX(*rtc_bckp_regs[val_index], *ext_flash_flags[val_index]);
 8003388:	79fb      	ldrb	r3, [r7, #7]
 800338a:	4a0f      	ldr	r2, [pc, #60]	; (80033c8 <MRT_checkFlagsValues+0xd0>)
 800338c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	4619      	mov	r1, r3
 8003394:	79fb      	ldrb	r3, [r7, #7]
 8003396:	4a0b      	ldr	r2, [pc, #44]	; (80033c4 <MRT_checkFlagsValues+0xcc>)
 8003398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4299      	cmp	r1, r3
 80033a0:	bf38      	it	cc
 80033a2:	4619      	movcc	r1, r3
 80033a4:	79fb      	ldrb	r3, [r7, #7]
 80033a6:	4a08      	ldr	r2, [pc, #32]	; (80033c8 <MRT_checkFlagsValues+0xd0>)
 80033a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ac:	b2ca      	uxtb	r2, r1
 80033ae:	701a      	strb	r2, [r3, #0]
		ret = false;
 80033b0:	2300      	movs	r3, #0
 80033b2:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	20000000 	.word	0x20000000
 80033c8:	20000064 	.word	0x20000064

080033cc <MRT_saveTotalTime>:
//Public functions

/*
 * Update every time values in memory
 */
void MRT_saveTotalTime(void){
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0

	//Update variables
	MRT_updateTimeValues();
 80033d0:	f000 f890 	bl	80034f4 <MRT_updateTimeValues>

	//Write new RTC time to external flash
	MRT_updateExternalFlashBuffers();
 80033d4:	f7ff ff00 	bl	80031d8 <MRT_updateExternalFlashBuffers>
	W25qxx_EraseSector(RTC_SECTOR);
 80033d8:	2002      	movs	r0, #2
 80033da:	f000 fc97 	bl	8003d0c <W25qxx_EraseSector>
	W25qxx_WriteSector(ext_flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 80033de:	2304      	movs	r3, #4
 80033e0:	2200      	movs	r2, #0
 80033e2:	2102      	movs	r1, #2
 80033e4:	480e      	ldr	r0, [pc, #56]	; (8003420 <MRT_saveTotalTime+0x54>)
 80033e6:	f000 fddb 	bl	8003fa0 <W25qxx_WriteSector>

	//Write new RTC time to backup registers
	MRT_RTC_setBackupReg(RTC_HOUR, rtc_bckp_reg_hour);
 80033ea:	4b0e      	ldr	r3, [pc, #56]	; (8003424 <MRT_saveTotalTime+0x58>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4619      	mov	r1, r3
 80033f0:	2005      	movs	r0, #5
 80033f2:	f7ff f97f 	bl	80026f4 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_MINUTE, rtc_bckp_reg_min);
 80033f6:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <MRT_saveTotalTime+0x5c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4619      	mov	r1, r3
 80033fc:	2006      	movs	r0, #6
 80033fe:	f7ff f979 	bl	80026f4 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_SECOND, rtc_bckp_reg_sec);
 8003402:	4b0a      	ldr	r3, [pc, #40]	; (800342c <MRT_saveTotalTime+0x60>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4619      	mov	r1, r3
 8003408:	2007      	movs	r0, #7
 800340a:	f7ff f973 	bl	80026f4 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_SUBSEC, rtc_bckp_reg_subsec);
 800340e:	4b08      	ldr	r3, [pc, #32]	; (8003430 <MRT_saveTotalTime+0x64>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4619      	mov	r1, r3
 8003414:	2008      	movs	r0, #8
 8003416:	f7ff f96d 	bl	80026f4 <MRT_RTC_setBackupReg>
}
 800341a:	bf00      	nop
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	20005efc 	.word	0x20005efc
 8003424:	2000035c 	.word	0x2000035c
 8003428:	20000360 	.word	0x20000360
 800342c:	20000364 	.word	0x20000364
 8003430:	20000368 	.word	0x20000368

08003434 <MRT_resetTotalTime>:


void MRT_resetTotalTime(void){
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0

	//Clear RTC time (last recorded) in external flash
	W25qxx_EraseSector(RTC_SECTOR);
 800343a:	2002      	movs	r0, #2
 800343c:	f000 fc66 	bl	8003d0c <W25qxx_EraseSector>
	W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003440:	2304      	movs	r3, #4
 8003442:	2200      	movs	r2, #0
 8003444:	2102      	movs	r1, #2
 8003446:	4817      	ldr	r0, [pc, #92]	; (80034a4 <MRT_resetTotalTime+0x70>)
 8003448:	f000 fdaa 	bl	8003fa0 <W25qxx_WriteSector>

	//Clear RTC time in backup registers
	MRT_RTC_setBackupReg(RTC_HOUR, 0);
 800344c:	2100      	movs	r1, #0
 800344e:	2005      	movs	r0, #5
 8003450:	f7ff f950 	bl	80026f4 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_MINUTE, 0);
 8003454:	2100      	movs	r1, #0
 8003456:	2006      	movs	r0, #6
 8003458:	f7ff f94c 	bl	80026f4 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_SECOND, 0);
 800345c:	2100      	movs	r1, #0
 800345e:	2007      	movs	r0, #7
 8003460:	f7ff f948 	bl	80026f4 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_SUBSEC, 0);
 8003464:	2100      	movs	r1, #0
 8003466:	2008      	movs	r0, #8
 8003468:	f7ff f944 	bl	80026f4 <MRT_RTC_setBackupReg>

	//Update variables (to 0)
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 800346c:	2300      	movs	r3, #0
 800346e:	607b      	str	r3, [r7, #4]
 8003470:	e00f      	b.n	8003492 <MRT_resetTotalTime+0x5e>
	  *ext_flash_time[i] = 0x0;
 8003472:	4a0d      	ldr	r2, [pc, #52]	; (80034a8 <MRT_resetTotalTime+0x74>)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800347a:	2200      	movs	r2, #0
 800347c:	701a      	strb	r2, [r3, #0]
	  *rtc_bckp_regs[i + NB_OF_FLAGS] = 0x0;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3305      	adds	r3, #5
 8003482:	4a0a      	ldr	r2, [pc, #40]	; (80034ac <MRT_resetTotalTime+0x78>)
 8003484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3301      	adds	r3, #1
 8003490:	607b      	str	r3, [r7, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b03      	cmp	r3, #3
 8003496:	ddec      	ble.n	8003472 <MRT_resetTotalTime+0x3e>
	}
}
 8003498:	bf00      	nop
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	2000037c 	.word	0x2000037c
 80034a8:	20000078 	.word	0x20000078
 80034ac:	20000000 	.word	0x20000000

080034b0 <MRT_saveTimeValue>:
//Private functions

/*
 * Save an RTC value (value updated outside the function)
 */
void MRT_saveTimeValue(rtc_backup_reg state){
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	4603      	mov	r3, r0
 80034b8:	71fb      	strb	r3, [r7, #7]

	//Write new RTC time to flash memory
	MRT_updateExternalFlashBuffers();
 80034ba:	f7ff fe8d 	bl	80031d8 <MRT_updateExternalFlashBuffers>
	W25qxx_EraseSector(RTC_SECTOR);
 80034be:	2002      	movs	r0, #2
 80034c0:	f000 fc24 	bl	8003d0c <W25qxx_EraseSector>
	W25qxx_WriteSector(ext_flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 80034c4:	2304      	movs	r3, #4
 80034c6:	2200      	movs	r2, #0
 80034c8:	2102      	movs	r1, #2
 80034ca:	4808      	ldr	r0, [pc, #32]	; (80034ec <MRT_saveTimeValue+0x3c>)
 80034cc:	f000 fd68 	bl	8003fa0 <W25qxx_WriteSector>

	//Write new RTC time to backup registers
	MRT_RTC_setBackupReg(state, *rtc_bckp_regs[state]);
 80034d0:	79fb      	ldrb	r3, [r7, #7]
 80034d2:	4a07      	ldr	r2, [pc, #28]	; (80034f0 <MRT_saveTimeValue+0x40>)
 80034d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	79fb      	ldrb	r3, [r7, #7]
 80034dc:	4611      	mov	r1, r2
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff f908 	bl	80026f4 <MRT_RTC_setBackupReg>
}
 80034e4:	bf00      	nop
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	20005efc 	.word	0x20005efc
 80034f0:	20000000 	.word	0x20000000

080034f4 <MRT_updateTimeValues>:


/*
 * Update all time values
 */
void MRT_updateTimeValues(void){
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
	//External Flash
	ext_flash_hour = prev_hour;
 80034f8:	4b13      	ldr	r3, [pc, #76]	; (8003548 <MRT_updateTimeValues+0x54>)
 80034fa:	781a      	ldrb	r2, [r3, #0]
 80034fc:	4b13      	ldr	r3, [pc, #76]	; (800354c <MRT_updateTimeValues+0x58>)
 80034fe:	701a      	strb	r2, [r3, #0]
	ext_flash_min = prev_min;
 8003500:	4b13      	ldr	r3, [pc, #76]	; (8003550 <MRT_updateTimeValues+0x5c>)
 8003502:	781a      	ldrb	r2, [r3, #0]
 8003504:	4b13      	ldr	r3, [pc, #76]	; (8003554 <MRT_updateTimeValues+0x60>)
 8003506:	701a      	strb	r2, [r3, #0]
	ext_flash_sec = prev_sec;
 8003508:	4b13      	ldr	r3, [pc, #76]	; (8003558 <MRT_updateTimeValues+0x64>)
 800350a:	781a      	ldrb	r2, [r3, #0]
 800350c:	4b13      	ldr	r3, [pc, #76]	; (800355c <MRT_updateTimeValues+0x68>)
 800350e:	701a      	strb	r2, [r3, #0]
	ext_flash_subsec = prev_subsec;
 8003510:	4b13      	ldr	r3, [pc, #76]	; (8003560 <MRT_updateTimeValues+0x6c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a13      	ldr	r2, [pc, #76]	; (8003564 <MRT_updateTimeValues+0x70>)
 8003516:	6013      	str	r3, [r2, #0]

	//RTC backup registers
	rtc_bckp_reg_hour = prev_hour;
 8003518:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <MRT_updateTimeValues+0x54>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	461a      	mov	r2, r3
 800351e:	4b12      	ldr	r3, [pc, #72]	; (8003568 <MRT_updateTimeValues+0x74>)
 8003520:	601a      	str	r2, [r3, #0]
	rtc_bckp_reg_min = prev_min;
 8003522:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <MRT_updateTimeValues+0x5c>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	4b10      	ldr	r3, [pc, #64]	; (800356c <MRT_updateTimeValues+0x78>)
 800352a:	601a      	str	r2, [r3, #0]
	rtc_bckp_reg_sec = prev_sec;
 800352c:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <MRT_updateTimeValues+0x64>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	461a      	mov	r2, r3
 8003532:	4b0f      	ldr	r3, [pc, #60]	; (8003570 <MRT_updateTimeValues+0x7c>)
 8003534:	601a      	str	r2, [r3, #0]
	rtc_bckp_reg_subsec = prev_subsec;
 8003536:	4b0a      	ldr	r3, [pc, #40]	; (8003560 <MRT_updateTimeValues+0x6c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a0e      	ldr	r2, [pc, #56]	; (8003574 <MRT_updateTimeValues+0x80>)
 800353c:	6013      	str	r3, [r2, #0]
}
 800353e:	bf00      	nop
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	20000385 	.word	0x20000385
 800354c:	20000373 	.word	0x20000373
 8003550:	20000386 	.word	0x20000386
 8003554:	20000374 	.word	0x20000374
 8003558:	20000387 	.word	0x20000387
 800355c:	20000375 	.word	0x20000375
 8003560:	20000388 	.word	0x20000388
 8003564:	20000378 	.word	0x20000378
 8003568:	2000035c 	.word	0x2000035c
 800356c:	20000360 	.word	0x20000360
 8003570:	20000364 	.word	0x20000364
 8003574:	20000368 	.word	0x20000368

08003578 <MRT_checkTimeValues>:


/*
 * Check for memory issues
 */
uint8_t MRT_checkTimeValues(rtc_backup_reg val_index, uint32_t max_val){
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	4603      	mov	r3, r0
 8003580:	6039      	str	r1, [r7, #0]
 8003582:	71fb      	strb	r3, [r7, #7]

	uint8_t ret = true;
 8003584:	2301      	movs	r3, #1
 8003586:	73fb      	strb	r3, [r7, #15]

	//Check for a random value (unsigned int so can't be negative)
	if (*rtc_bckp_regs[val_index] > max_val){
 8003588:	79fb      	ldrb	r3, [r7, #7]
 800358a:	4a31      	ldr	r2, [pc, #196]	; (8003650 <MRT_checkTimeValues+0xd8>)
 800358c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	429a      	cmp	r2, r3
 8003596:	d207      	bcs.n	80035a8 <MRT_checkTimeValues+0x30>
		*rtc_bckp_regs[val_index] = 0;
 8003598:	79fb      	ldrb	r3, [r7, #7]
 800359a:	4a2d      	ldr	r2, [pc, #180]	; (8003650 <MRT_checkTimeValues+0xd8>)
 800359c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
		ret = false;
 80035a4:	2300      	movs	r3, #0
 80035a6:	73fb      	strb	r3, [r7, #15]
	}
	if (*ext_flash_time[val_index - NB_OF_FLAGS] > max_val){
 80035a8:	79fb      	ldrb	r3, [r7, #7]
 80035aa:	3b05      	subs	r3, #5
 80035ac:	4a29      	ldr	r2, [pc, #164]	; (8003654 <MRT_checkTimeValues+0xdc>)
 80035ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	461a      	mov	r2, r3
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d208      	bcs.n	80035ce <MRT_checkTimeValues+0x56>
		*ext_flash_time[val_index - NB_OF_FLAGS] = 0;
 80035bc:	79fb      	ldrb	r3, [r7, #7]
 80035be:	3b05      	subs	r3, #5
 80035c0:	4a24      	ldr	r2, [pc, #144]	; (8003654 <MRT_checkTimeValues+0xdc>)
 80035c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035c6:	2200      	movs	r2, #0
 80035c8:	701a      	strb	r2, [r3, #0]
		ret = false;
 80035ca:	2300      	movs	r3, #0
 80035cc:	73fb      	strb	r3, [r7, #15]
	}

	if (*rtc_bckp_regs[val_index] != *ext_flash_time[val_index - NB_OF_FLAGS]){
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	4a1f      	ldr	r2, [pc, #124]	; (8003650 <MRT_checkTimeValues+0xd8>)
 80035d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	79fa      	ldrb	r2, [r7, #7]
 80035da:	3a05      	subs	r2, #5
 80035dc:	491d      	ldr	r1, [pc, #116]	; (8003654 <MRT_checkTimeValues+0xdc>)
 80035de:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80035e2:	7812      	ldrb	r2, [r2, #0]
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d02b      	beq.n	8003640 <MRT_checkTimeValues+0xc8>
		*rtc_bckp_regs[val_index] = MAX(*rtc_bckp_regs[val_index], *ext_flash_time[val_index - NB_OF_FLAGS]);
 80035e8:	79fb      	ldrb	r3, [r7, #7]
 80035ea:	3b05      	subs	r3, #5
 80035ec:	4a19      	ldr	r2, [pc, #100]	; (8003654 <MRT_checkTimeValues+0xdc>)
 80035ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	79fb      	ldrb	r3, [r7, #7]
 80035f8:	4a15      	ldr	r2, [pc, #84]	; (8003650 <MRT_checkTimeValues+0xd8>)
 80035fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	79fb      	ldrb	r3, [r7, #7]
 8003602:	4913      	ldr	r1, [pc, #76]	; (8003650 <MRT_checkTimeValues+0xd8>)
 8003604:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003608:	4282      	cmp	r2, r0
 800360a:	bf38      	it	cc
 800360c:	4602      	movcc	r2, r0
 800360e:	601a      	str	r2, [r3, #0]
		*ext_flash_time[val_index - NB_OF_FLAGS] = MAX(*rtc_bckp_regs[val_index], *ext_flash_time[val_index - NB_OF_FLAGS]);
 8003610:	79fb      	ldrb	r3, [r7, #7]
 8003612:	3b05      	subs	r3, #5
 8003614:	4a0f      	ldr	r2, [pc, #60]	; (8003654 <MRT_checkTimeValues+0xdc>)
 8003616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	4619      	mov	r1, r3
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	4a0b      	ldr	r2, [pc, #44]	; (8003650 <MRT_checkTimeValues+0xd8>)
 8003622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4299      	cmp	r1, r3
 800362a:	bf38      	it	cc
 800362c:	4619      	movcc	r1, r3
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	3b05      	subs	r3, #5
 8003632:	4a08      	ldr	r2, [pc, #32]	; (8003654 <MRT_checkTimeValues+0xdc>)
 8003634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003638:	b2ca      	uxtb	r2, r1
 800363a:	701a      	strb	r2, [r3, #0]
		ret = false;
 800363c:	2300      	movs	r3, #0
 800363e:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8003640:	7bfb      	ldrb	r3, [r7, #15]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	20000000 	.word	0x20000000
 8003654:	20000078 	.word	0x20000078

08003658 <MRT_MEMORY_Init>:
//**************************************************//
//MISC


//Public
void MRT_MEMORY_Init(void){
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0

	//External flash
	MRT_external_flash_Init();
 800365c:	f7ff fd88 	bl	8003170 <MRT_external_flash_Init>

	//Backup registers
	MRT_RTC_backup_regs_Init();
 8003660:	f7ff f80c 	bl	800267c <MRT_RTC_backup_regs_Init>

	//Get the previous flags and rtc time from memory
	MRT_stateRestoration();
 8003664:	f000 f802 	bl	800366c <MRT_stateRestoration>
			else {
			  Error_Handler();
			}
		#endif
	#endif
}
 8003668:	bf00      	nop
 800366a:	bd80      	pop	{r7, pc}

0800366c <MRT_stateRestoration>:


//Private

//Get the flags values and RTC time
void MRT_stateRestoration(void){
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0

	//Check for a wakeup
	MRT_checkWakeUp();
 8003670:	f000 f8ca 	bl	8003808 <MRT_checkWakeUp>

	//If RTC detected a wake up, update the flash memory and the backup registers
	if (wu_flag == 1){
 8003674:	4b51      	ldr	r3, [pc, #324]	; (80037bc <MRT_stateRestoration+0x150>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d111      	bne.n	80036a0 <MRT_stateRestoration+0x34>

		//Update values
		ext_flash_wu += 1;
 800367c:	4b50      	ldr	r3, [pc, #320]	; (80037c0 <MRT_stateRestoration+0x154>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	3301      	adds	r3, #1
 8003682:	b2da      	uxtb	r2, r3
 8003684:	4b4e      	ldr	r3, [pc, #312]	; (80037c0 <MRT_stateRestoration+0x154>)
 8003686:	701a      	strb	r2, [r3, #0]
		rtc_bckp_reg_wu += 1;
 8003688:	4b4e      	ldr	r3, [pc, #312]	; (80037c4 <MRT_stateRestoration+0x158>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	3301      	adds	r3, #1
 800368e:	4a4d      	ldr	r2, [pc, #308]	; (80037c4 <MRT_stateRestoration+0x158>)
 8003690:	6013      	str	r3, [r2, #0]

		//Check for memory issues¸
		MRT_checkFlagsValues(FC_STATE_WU, 2);
 8003692:	2102      	movs	r1, #2
 8003694:	2001      	movs	r0, #1
 8003696:	f7ff fe2f 	bl	80032f8 <MRT_checkFlagsValues>

		//Update memory
		MRT_saveFlagValue(FC_STATE_WU);
 800369a:	2001      	movs	r0, #1
 800369c:	f7ff fe0a 	bl	80032b4 <MRT_saveFlagValue>
	}
	//Update the wu_flag value
	wu_flag = rtc_bckp_reg_wu;
 80036a0:	4b48      	ldr	r3, [pc, #288]	; (80037c4 <MRT_stateRestoration+0x158>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	4b45      	ldr	r3, [pc, #276]	; (80037bc <MRT_stateRestoration+0x150>)
 80036a8:	701a      	strb	r2, [r3, #0]


	//Check flags values

	//Reset flag
	if(MRT_checkFlagsValues(FC_STATE_RESET, 1) == false)	MRT_saveFlagValue(FC_STATE_RESET);
 80036aa:	2101      	movs	r1, #1
 80036ac:	2000      	movs	r0, #0
 80036ae:	f7ff fe23 	bl	80032f8 <MRT_checkFlagsValues>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d102      	bne.n	80036be <MRT_stateRestoration+0x52>
 80036b8:	2000      	movs	r0, #0
 80036ba:	f7ff fdfb 	bl	80032b4 <MRT_saveFlagValue>
	reset_flag = rtc_bckp_reg_reset;
 80036be:	4b42      	ldr	r3, [pc, #264]	; (80037c8 <MRT_stateRestoration+0x15c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	4b41      	ldr	r3, [pc, #260]	; (80037cc <MRT_stateRestoration+0x160>)
 80036c6:	701a      	strb	r2, [r3, #0]

	//Wake up flag (TODO double check??)
	if(MRT_checkFlagsValues(FC_STATE_WU, 1) == false)	MRT_saveFlagValue(FC_STATE_WU);
 80036c8:	2101      	movs	r1, #1
 80036ca:	2001      	movs	r0, #1
 80036cc:	f7ff fe14 	bl	80032f8 <MRT_checkFlagsValues>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d102      	bne.n	80036dc <MRT_stateRestoration+0x70>
 80036d6:	2001      	movs	r0, #1
 80036d8:	f7ff fdec 	bl	80032b4 <MRT_saveFlagValue>
	wu_flag = rtc_bckp_reg_wu;
 80036dc:	4b39      	ldr	r3, [pc, #228]	; (80037c4 <MRT_stateRestoration+0x158>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	4b36      	ldr	r3, [pc, #216]	; (80037bc <MRT_stateRestoration+0x150>)
 80036e4:	701a      	strb	r2, [r3, #0]

	//IWDG flag
	if(MRT_checkFlagsValues(FC_STATE_IWDG, 1) == false)	MRT_saveFlagValue(FC_STATE_IWDG);
 80036e6:	2101      	movs	r1, #1
 80036e8:	2002      	movs	r0, #2
 80036ea:	f7ff fe05 	bl	80032f8 <MRT_checkFlagsValues>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d102      	bne.n	80036fa <MRT_stateRestoration+0x8e>
 80036f4:	2002      	movs	r0, #2
 80036f6:	f7ff fddd 	bl	80032b4 <MRT_saveFlagValue>
	iwdg_flag = rtc_bckp_reg_iwdg;
 80036fa:	4b35      	ldr	r3, [pc, #212]	; (80037d0 <MRT_stateRestoration+0x164>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	4b34      	ldr	r3, [pc, #208]	; (80037d4 <MRT_stateRestoration+0x168>)
 8003702:	701a      	strb	r2, [r3, #0]

	//Apogee flag
	if(MRT_checkFlagsValues(FC_STATE_APOGEE, 1) == false)	MRT_saveFlagValue(FC_STATE_APOGEE);
 8003704:	2101      	movs	r1, #1
 8003706:	2003      	movs	r0, #3
 8003708:	f7ff fdf6 	bl	80032f8 <MRT_checkFlagsValues>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d102      	bne.n	8003718 <MRT_stateRestoration+0xac>
 8003712:	2003      	movs	r0, #3
 8003714:	f7ff fdce 	bl	80032b4 <MRT_saveFlagValue>
	apogee_flag = rtc_bckp_reg_apogee;
 8003718:	4b2f      	ldr	r3, [pc, #188]	; (80037d8 <MRT_stateRestoration+0x16c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	b2da      	uxtb	r2, r3
 800371e:	4b2f      	ldr	r3, [pc, #188]	; (80037dc <MRT_stateRestoration+0x170>)
 8003720:	701a      	strb	r2, [r3, #0]

	//Ejection state flag
	if(MRT_checkFlagsValues(FC_STATE_FLIGHT, 4) == false)	MRT_saveFlagValue(FC_STATE_FLIGHT);
 8003722:	2104      	movs	r1, #4
 8003724:	2004      	movs	r0, #4
 8003726:	f7ff fde7 	bl	80032f8 <MRT_checkFlagsValues>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d102      	bne.n	8003736 <MRT_stateRestoration+0xca>
 8003730:	2004      	movs	r0, #4
 8003732:	f7ff fdbf 	bl	80032b4 <MRT_saveFlagValue>
	ejection_stage_flag = rtc_bckp_reg_ejection_stage;
 8003736:	4b2a      	ldr	r3, [pc, #168]	; (80037e0 <MRT_stateRestoration+0x174>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	b2da      	uxtb	r2, r3
 800373c:	4b29      	ldr	r3, [pc, #164]	; (80037e4 <MRT_stateRestoration+0x178>)
 800373e:	701a      	strb	r2, [r3, #0]


	//Check RTC time values
	//Hours
	if(MRT_checkTimeValues(RTC_HOUR, 23) == false)	MRT_saveTimeValue(RTC_HOUR);
 8003740:	2117      	movs	r1, #23
 8003742:	2005      	movs	r0, #5
 8003744:	f7ff ff18 	bl	8003578 <MRT_checkTimeValues>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d102      	bne.n	8003754 <MRT_stateRestoration+0xe8>
 800374e:	2005      	movs	r0, #5
 8003750:	f7ff feae 	bl	80034b0 <MRT_saveTimeValue>
	prev_hour = rtc_bckp_reg_hour;
 8003754:	4b24      	ldr	r3, [pc, #144]	; (80037e8 <MRT_stateRestoration+0x17c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	b2da      	uxtb	r2, r3
 800375a:	4b24      	ldr	r3, [pc, #144]	; (80037ec <MRT_stateRestoration+0x180>)
 800375c:	701a      	strb	r2, [r3, #0]

	//Minutes
	if(MRT_checkTimeValues(RTC_MINUTE, 59) == false)	MRT_saveTimeValue(RTC_MINUTE);
 800375e:	213b      	movs	r1, #59	; 0x3b
 8003760:	2006      	movs	r0, #6
 8003762:	f7ff ff09 	bl	8003578 <MRT_checkTimeValues>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d102      	bne.n	8003772 <MRT_stateRestoration+0x106>
 800376c:	2006      	movs	r0, #6
 800376e:	f7ff fe9f 	bl	80034b0 <MRT_saveTimeValue>
	prev_min = rtc_bckp_reg_min;
 8003772:	4b1f      	ldr	r3, [pc, #124]	; (80037f0 <MRT_stateRestoration+0x184>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	b2da      	uxtb	r2, r3
 8003778:	4b1e      	ldr	r3, [pc, #120]	; (80037f4 <MRT_stateRestoration+0x188>)
 800377a:	701a      	strb	r2, [r3, #0]

	//Seconds
	if(MRT_checkTimeValues(RTC_SECOND, 59) == false)	MRT_saveTimeValue(RTC_SECOND);
 800377c:	213b      	movs	r1, #59	; 0x3b
 800377e:	2007      	movs	r0, #7
 8003780:	f7ff fefa 	bl	8003578 <MRT_checkTimeValues>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d102      	bne.n	8003790 <MRT_stateRestoration+0x124>
 800378a:	2007      	movs	r0, #7
 800378c:	f7ff fe90 	bl	80034b0 <MRT_saveTimeValue>
	prev_sec = rtc_bckp_reg_sec;
 8003790:	4b19      	ldr	r3, [pc, #100]	; (80037f8 <MRT_stateRestoration+0x18c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	b2da      	uxtb	r2, r3
 8003796:	4b19      	ldr	r3, [pc, #100]	; (80037fc <MRT_stateRestoration+0x190>)
 8003798:	701a      	strb	r2, [r3, #0]

	//Sub-Seconds
	if(MRT_checkTimeValues(RTC_SUBSEC, 999) == false)	MRT_saveTimeValue(RTC_SUBSEC);
 800379a:	f240 31e7 	movw	r1, #999	; 0x3e7
 800379e:	2008      	movs	r0, #8
 80037a0:	f7ff feea 	bl	8003578 <MRT_checkTimeValues>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d102      	bne.n	80037b0 <MRT_stateRestoration+0x144>
 80037aa:	2008      	movs	r0, #8
 80037ac:	f7ff fe80 	bl	80034b0 <MRT_saveTimeValue>
	prev_subsec = rtc_bckp_reg_subsec;
 80037b0:	4b13      	ldr	r3, [pc, #76]	; (8003800 <MRT_stateRestoration+0x194>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a13      	ldr	r2, [pc, #76]	; (8003804 <MRT_stateRestoration+0x198>)
 80037b6:	6013      	str	r3, [r2, #0]
}
 80037b8:	bf00      	nop
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	20000381 	.word	0x20000381
 80037c0:	2000036f 	.word	0x2000036f
 80037c4:	2000034c 	.word	0x2000034c
 80037c8:	20000348 	.word	0x20000348
 80037cc:	20000380 	.word	0x20000380
 80037d0:	20000350 	.word	0x20000350
 80037d4:	20000382 	.word	0x20000382
 80037d8:	20000354 	.word	0x20000354
 80037dc:	20000383 	.word	0x20000383
 80037e0:	20000358 	.word	0x20000358
 80037e4:	20000384 	.word	0x20000384
 80037e8:	2000035c 	.word	0x2000035c
 80037ec:	20000385 	.word	0x20000385
 80037f0:	20000360 	.word	0x20000360
 80037f4:	20000386 	.word	0x20000386
 80037f8:	20000364 	.word	0x20000364
 80037fc:	20000387 	.word	0x20000387
 8003800:	20000368 	.word	0x20000368
 8003804:	20000388 	.word	0x20000388

08003808 <MRT_checkWakeUp>:


/*
 * Check if FC is back from wakeup
 */
void MRT_checkWakeUp(void){
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 800380c:	4b0e      	ldr	r3, [pc, #56]	; (8003848 <MRT_checkWakeUp+0x40>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b02      	cmp	r3, #2
 8003816:	d112      	bne.n	800383e <MRT_checkWakeUp+0x36>
	{

		wu_flag = 1;
 8003818:	4b0c      	ldr	r3, [pc, #48]	; (800384c <MRT_checkWakeUp+0x44>)
 800381a:	2201      	movs	r2, #1
 800381c:	701a      	strb	r2, [r3, #0]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 800381e:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <MRT_checkWakeUp+0x40>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a09      	ldr	r2, [pc, #36]	; (8003848 <MRT_checkWakeUp+0x40>)
 8003824:	f043 0308 	orr.w	r3, r3, #8
 8003828:	6013      	str	r3, [r2, #0]

		println("Wakeup from STANDBY MODE");
 800382a:	4809      	ldr	r0, [pc, #36]	; (8003850 <MRT_checkWakeUp+0x48>)
 800382c:	f7fd fc4e 	bl	80010cc <println>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8003830:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003834:	f007 fec0 	bl	800b5b8 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8003838:	4806      	ldr	r0, [pc, #24]	; (8003854 <MRT_checkWakeUp+0x4c>)
 800383a:	f009 fb15 	bl	800ce68 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_clear_alarms_flags();
 800383e:	f7fe fdfd 	bl	800243c <MRT_clear_alarms_flags>
}
 8003842:	bf00      	nop
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40007000 	.word	0x40007000
 800384c:	20000381 	.word	0x20000381
 8003850:	08018964 	.word	0x08018964
 8003854:	20005ba8 	.word	0x20005ba8

08003858 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af02      	add	r7, sp, #8
 800385e:	4603      	mov	r3, r0
 8003860:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8003862:	f107 020f 	add.w	r2, r7, #15
 8003866:	1df9      	adds	r1, r7, #7
 8003868:	2364      	movs	r3, #100	; 0x64
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	2301      	movs	r3, #1
 800386e:	4804      	ldr	r0, [pc, #16]	; (8003880 <W25qxx_Spi+0x28>)
 8003870:	f009 fe64 	bl	800d53c <HAL_SPI_TransmitReceive>
	return ret;
 8003874:	7bfb      	ldrb	r3, [r7, #15]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	20005c20 	.word	0x20005c20

08003884 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	2300      	movs	r3, #0
 8003890:	60bb      	str	r3, [r7, #8]
 8003892:	2300      	movs	r3, #0
 8003894:	607b      	str	r3, [r7, #4]
 8003896:	2300      	movs	r3, #0
 8003898:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800389a:	2200      	movs	r2, #0
 800389c:	2140      	movs	r1, #64	; 0x40
 800389e:	4813      	ldr	r0, [pc, #76]	; (80038ec <W25qxx_ReadID+0x68>)
 80038a0:	f006 fdd6 	bl	800a450 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 80038a4:	209f      	movs	r0, #159	; 0x9f
 80038a6:	f7ff ffd7 	bl	8003858 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80038aa:	20a5      	movs	r0, #165	; 0xa5
 80038ac:	f7ff ffd4 	bl	8003858 <W25qxx_Spi>
 80038b0:	4603      	mov	r3, r0
 80038b2:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80038b4:	20a5      	movs	r0, #165	; 0xa5
 80038b6:	f7ff ffcf 	bl	8003858 <W25qxx_Spi>
 80038ba:	4603      	mov	r3, r0
 80038bc:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80038be:	20a5      	movs	r0, #165	; 0xa5
 80038c0:	f7ff ffca 	bl	8003858 <W25qxx_Spi>
 80038c4:	4603      	mov	r3, r0
 80038c6:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80038c8:	2201      	movs	r2, #1
 80038ca:	2140      	movs	r1, #64	; 0x40
 80038cc:	4807      	ldr	r0, [pc, #28]	; (80038ec <W25qxx_ReadID+0x68>)
 80038ce:	f006 fdbf 	bl	800a450 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	041a      	lsls	r2, r3, #16
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	021b      	lsls	r3, r3, #8
 80038da:	4313      	orrs	r3, r2
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]
	return Temp;
 80038e2:	68fb      	ldr	r3, [r7, #12]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	40020c00 	.word	0x40020c00

080038f0 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 80038f0:	b590      	push	{r4, r7, lr}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80038f6:	2200      	movs	r2, #0
 80038f8:	2140      	movs	r1, #64	; 0x40
 80038fa:	4816      	ldr	r0, [pc, #88]	; (8003954 <W25qxx_ReadUniqID+0x64>)
 80038fc:	f006 fda8 	bl	800a450 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8003900:	204b      	movs	r0, #75	; 0x4b
 8003902:	f7ff ffa9 	bl	8003858 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003906:	2300      	movs	r3, #0
 8003908:	71fb      	strb	r3, [r7, #7]
 800390a:	e005      	b.n	8003918 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800390c:	20a5      	movs	r0, #165	; 0xa5
 800390e:	f7ff ffa3 	bl	8003858 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003912:	79fb      	ldrb	r3, [r7, #7]
 8003914:	3301      	adds	r3, #1
 8003916:	71fb      	strb	r3, [r7, #7]
 8003918:	79fb      	ldrb	r3, [r7, #7]
 800391a:	2b03      	cmp	r3, #3
 800391c:	d9f6      	bls.n	800390c <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 800391e:	2300      	movs	r3, #0
 8003920:	71bb      	strb	r3, [r7, #6]
 8003922:	e00b      	b.n	800393c <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003924:	79bc      	ldrb	r4, [r7, #6]
 8003926:	20a5      	movs	r0, #165	; 0xa5
 8003928:	f7ff ff96 	bl	8003858 <W25qxx_Spi>
 800392c:	4603      	mov	r3, r0
 800392e:	461a      	mov	r2, r3
 8003930:	4b09      	ldr	r3, [pc, #36]	; (8003958 <W25qxx_ReadUniqID+0x68>)
 8003932:	4423      	add	r3, r4
 8003934:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8003936:	79bb      	ldrb	r3, [r7, #6]
 8003938:	3301      	adds	r3, #1
 800393a:	71bb      	strb	r3, [r7, #6]
 800393c:	79bb      	ldrb	r3, [r7, #6]
 800393e:	2b07      	cmp	r3, #7
 8003940:	d9f0      	bls.n	8003924 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003942:	2201      	movs	r2, #1
 8003944:	2140      	movs	r1, #64	; 0x40
 8003946:	4803      	ldr	r0, [pc, #12]	; (8003954 <W25qxx_ReadUniqID+0x64>)
 8003948:	f006 fd82 	bl	800a450 <HAL_GPIO_WritePin>
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	bd90      	pop	{r4, r7, pc}
 8003954:	40020c00 	.word	0x40020c00
 8003958:	20005f08 	.word	0x20005f08

0800395c <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003960:	2200      	movs	r2, #0
 8003962:	2140      	movs	r1, #64	; 0x40
 8003964:	4807      	ldr	r0, [pc, #28]	; (8003984 <W25qxx_WriteEnable+0x28>)
 8003966:	f006 fd73 	bl	800a450 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 800396a:	2006      	movs	r0, #6
 800396c:	f7ff ff74 	bl	8003858 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003970:	2201      	movs	r2, #1
 8003972:	2140      	movs	r1, #64	; 0x40
 8003974:	4803      	ldr	r0, [pc, #12]	; (8003984 <W25qxx_WriteEnable+0x28>)
 8003976:	f006 fd6b 	bl	800a450 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 800397a:	2001      	movs	r0, #1
 800397c:	f00b fe38 	bl	800f5f0 <osDelay>
}
 8003980:	bf00      	nop
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40020c00 	.word	0x40020c00

08003988 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8003992:	2300      	movs	r3, #0
 8003994:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003996:	2200      	movs	r2, #0
 8003998:	2140      	movs	r1, #64	; 0x40
 800399a:	481c      	ldr	r0, [pc, #112]	; (8003a0c <W25qxx_ReadStatusRegister+0x84>)
 800399c:	f006 fd58 	bl	800a450 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 80039a0:	79fb      	ldrb	r3, [r7, #7]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d10c      	bne.n	80039c0 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 80039a6:	2005      	movs	r0, #5
 80039a8:	f7ff ff56 	bl	8003858 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80039ac:	20a5      	movs	r0, #165	; 0xa5
 80039ae:	f7ff ff53 	bl	8003858 <W25qxx_Spi>
 80039b2:	4603      	mov	r3, r0
 80039b4:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 80039b6:	4a16      	ldr	r2, [pc, #88]	; (8003a10 <W25qxx_ReadStatusRegister+0x88>)
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
 80039ba:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80039be:	e01b      	b.n	80039f8 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 80039c0:	79fb      	ldrb	r3, [r7, #7]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d10c      	bne.n	80039e0 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 80039c6:	2035      	movs	r0, #53	; 0x35
 80039c8:	f7ff ff46 	bl	8003858 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80039cc:	20a5      	movs	r0, #165	; 0xa5
 80039ce:	f7ff ff43 	bl	8003858 <W25qxx_Spi>
 80039d2:	4603      	mov	r3, r0
 80039d4:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 80039d6:	4a0e      	ldr	r2, [pc, #56]	; (8003a10 <W25qxx_ReadStatusRegister+0x88>)
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
 80039da:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 80039de:	e00b      	b.n	80039f8 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 80039e0:	2015      	movs	r0, #21
 80039e2:	f7ff ff39 	bl	8003858 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80039e6:	20a5      	movs	r0, #165	; 0xa5
 80039e8:	f7ff ff36 	bl	8003858 <W25qxx_Spi>
 80039ec:	4603      	mov	r3, r0
 80039ee:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 80039f0:	4a07      	ldr	r2, [pc, #28]	; (8003a10 <W25qxx_ReadStatusRegister+0x88>)
 80039f2:	7bfb      	ldrb	r3, [r7, #15]
 80039f4:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80039f8:	2201      	movs	r2, #1
 80039fa:	2140      	movs	r1, #64	; 0x40
 80039fc:	4803      	ldr	r0, [pc, #12]	; (8003a0c <W25qxx_ReadStatusRegister+0x84>)
 80039fe:	f006 fd27 	bl	800a450 <HAL_GPIO_WritePin>
	return status;
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40020c00 	.word	0x40020c00
 8003a10:	20005f08 	.word	0x20005f08

08003a14 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8003a18:	2001      	movs	r0, #1
 8003a1a:	f00b fde9 	bl	800f5f0 <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003a1e:	2200      	movs	r2, #0
 8003a20:	2140      	movs	r1, #64	; 0x40
 8003a22:	480f      	ldr	r0, [pc, #60]	; (8003a60 <W25qxx_WaitForWriteEnd+0x4c>)
 8003a24:	f006 fd14 	bl	800a450 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8003a28:	2005      	movs	r0, #5
 8003a2a:	f7ff ff15 	bl	8003858 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003a2e:	20a5      	movs	r0, #165	; 0xa5
 8003a30:	f7ff ff12 	bl	8003858 <W25qxx_Spi>
 8003a34:	4603      	mov	r3, r0
 8003a36:	461a      	mov	r2, r3
 8003a38:	4b0a      	ldr	r3, [pc, #40]	; (8003a64 <W25qxx_WaitForWriteEnd+0x50>)
 8003a3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8003a3e:	2001      	movs	r0, #1
 8003a40:	f00b fdd6 	bl	800f5f0 <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8003a44:	4b07      	ldr	r3, [pc, #28]	; (8003a64 <W25qxx_WaitForWriteEnd+0x50>)
 8003a46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1ed      	bne.n	8003a2e <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003a52:	2201      	movs	r2, #1
 8003a54:	2140      	movs	r1, #64	; 0x40
 8003a56:	4802      	ldr	r0, [pc, #8]	; (8003a60 <W25qxx_WaitForWriteEnd+0x4c>)
 8003a58:	f006 fcfa 	bl	800a450 <HAL_GPIO_WritePin>
}
 8003a5c:	bf00      	nop
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40020c00 	.word	0x40020c00
 8003a64:	20005f08 	.word	0x20005f08

08003a68 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8003a6e:	4b90      	ldr	r3, [pc, #576]	; (8003cb0 <W25qxx_Init+0x248>)
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8003a76:	e002      	b.n	8003a7e <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8003a78:	2001      	movs	r0, #1
 8003a7a:	f00b fdb9 	bl	800f5f0 <osDelay>
	while (HAL_GetTick() < 100)
 8003a7e:	f005 ff6d 	bl	800995c <HAL_GetTick>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b63      	cmp	r3, #99	; 0x63
 8003a86:	d9f7      	bls.n	8003a78 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003a88:	2201      	movs	r2, #1
 8003a8a:	2140      	movs	r1, #64	; 0x40
 8003a8c:	4889      	ldr	r0, [pc, #548]	; (8003cb4 <W25qxx_Init+0x24c>)
 8003a8e:	f006 fcdf 	bl	800a450 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8003a92:	2064      	movs	r0, #100	; 0x64
 8003a94:	f00b fdac 	bl	800f5f0 <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 8003a98:	4887      	ldr	r0, [pc, #540]	; (8003cb8 <W25qxx_Init+0x250>)
 8003a9a:	f010 f8b3 	bl	8013c04 <puts>
#endif
	id = W25qxx_ReadID();
 8003a9e:	f7ff fef1 	bl	8003884 <W25qxx_ReadID>
 8003aa2:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	4885      	ldr	r0, [pc, #532]	; (8003cbc <W25qxx_Init+0x254>)
 8003aa8:	f010 f826 	bl	8013af8 <iprintf>
#endif
	switch (id & 0x000000FF)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	3b11      	subs	r3, #17
 8003ab2:	2b0f      	cmp	r3, #15
 8003ab4:	f200 808b 	bhi.w	8003bce <W25qxx_Init+0x166>
 8003ab8:	a201      	add	r2, pc, #4	; (adr r2, 8003ac0 <W25qxx_Init+0x58>)
 8003aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abe:	bf00      	nop
 8003ac0:	08003bbb 	.word	0x08003bbb
 8003ac4:	08003ba7 	.word	0x08003ba7
 8003ac8:	08003b93 	.word	0x08003b93
 8003acc:	08003b7f 	.word	0x08003b7f
 8003ad0:	08003b6b 	.word	0x08003b6b
 8003ad4:	08003b57 	.word	0x08003b57
 8003ad8:	08003b43 	.word	0x08003b43
 8003adc:	08003b2d 	.word	0x08003b2d
 8003ae0:	08003b17 	.word	0x08003b17
 8003ae4:	08003bcf 	.word	0x08003bcf
 8003ae8:	08003bcf 	.word	0x08003bcf
 8003aec:	08003bcf 	.word	0x08003bcf
 8003af0:	08003bcf 	.word	0x08003bcf
 8003af4:	08003bcf 	.word	0x08003bcf
 8003af8:	08003bcf 	.word	0x08003bcf
 8003afc:	08003b01 	.word	0x08003b01
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8003b00:	4b6b      	ldr	r3, [pc, #428]	; (8003cb0 <W25qxx_Init+0x248>)
 8003b02:	220a      	movs	r2, #10
 8003b04:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8003b06:	4b6a      	ldr	r3, [pc, #424]	; (8003cb0 <W25qxx_Init+0x248>)
 8003b08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b0c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 8003b0e:	486c      	ldr	r0, [pc, #432]	; (8003cc0 <W25qxx_Init+0x258>)
 8003b10:	f010 f878 	bl	8013c04 <puts>
#endif
		break;
 8003b14:	e064      	b.n	8003be0 <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8003b16:	4b66      	ldr	r3, [pc, #408]	; (8003cb0 <W25qxx_Init+0x248>)
 8003b18:	2209      	movs	r2, #9
 8003b1a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8003b1c:	4b64      	ldr	r3, [pc, #400]	; (8003cb0 <W25qxx_Init+0x248>)
 8003b1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b22:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 8003b24:	4867      	ldr	r0, [pc, #412]	; (8003cc4 <W25qxx_Init+0x25c>)
 8003b26:	f010 f86d 	bl	8013c04 <puts>
#endif
		break;
 8003b2a:	e059      	b.n	8003be0 <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8003b2c:	4b60      	ldr	r3, [pc, #384]	; (8003cb0 <W25qxx_Init+0x248>)
 8003b2e:	2208      	movs	r2, #8
 8003b30:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8003b32:	4b5f      	ldr	r3, [pc, #380]	; (8003cb0 <W25qxx_Init+0x248>)
 8003b34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b38:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 8003b3a:	4863      	ldr	r0, [pc, #396]	; (8003cc8 <W25qxx_Init+0x260>)
 8003b3c:	f010 f862 	bl	8013c04 <puts>
#endif
		break;
 8003b40:	e04e      	b.n	8003be0 <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8003b42:	4b5b      	ldr	r3, [pc, #364]	; (8003cb0 <W25qxx_Init+0x248>)
 8003b44:	2207      	movs	r2, #7
 8003b46:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8003b48:	4b59      	ldr	r3, [pc, #356]	; (8003cb0 <W25qxx_Init+0x248>)
 8003b4a:	2280      	movs	r2, #128	; 0x80
 8003b4c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 8003b4e:	485f      	ldr	r0, [pc, #380]	; (8003ccc <W25qxx_Init+0x264>)
 8003b50:	f010 f858 	bl	8013c04 <puts>
#endif
		break;
 8003b54:	e044      	b.n	8003be0 <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8003b56:	4b56      	ldr	r3, [pc, #344]	; (8003cb0 <W25qxx_Init+0x248>)
 8003b58:	2206      	movs	r2, #6
 8003b5a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8003b5c:	4b54      	ldr	r3, [pc, #336]	; (8003cb0 <W25qxx_Init+0x248>)
 8003b5e:	2240      	movs	r2, #64	; 0x40
 8003b60:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 8003b62:	485b      	ldr	r0, [pc, #364]	; (8003cd0 <W25qxx_Init+0x268>)
 8003b64:	f010 f84e 	bl	8013c04 <puts>
#endif
		break;
 8003b68:	e03a      	b.n	8003be0 <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8003b6a:	4b51      	ldr	r3, [pc, #324]	; (8003cb0 <W25qxx_Init+0x248>)
 8003b6c:	2205      	movs	r2, #5
 8003b6e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8003b70:	4b4f      	ldr	r3, [pc, #316]	; (8003cb0 <W25qxx_Init+0x248>)
 8003b72:	2220      	movs	r2, #32
 8003b74:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 8003b76:	4857      	ldr	r0, [pc, #348]	; (8003cd4 <W25qxx_Init+0x26c>)
 8003b78:	f010 f844 	bl	8013c04 <puts>
#endif
		break;
 8003b7c:	e030      	b.n	8003be0 <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8003b7e:	4b4c      	ldr	r3, [pc, #304]	; (8003cb0 <W25qxx_Init+0x248>)
 8003b80:	2204      	movs	r2, #4
 8003b82:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8003b84:	4b4a      	ldr	r3, [pc, #296]	; (8003cb0 <W25qxx_Init+0x248>)
 8003b86:	2210      	movs	r2, #16
 8003b88:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 8003b8a:	4853      	ldr	r0, [pc, #332]	; (8003cd8 <W25qxx_Init+0x270>)
 8003b8c:	f010 f83a 	bl	8013c04 <puts>
#endif
		break;
 8003b90:	e026      	b.n	8003be0 <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8003b92:	4b47      	ldr	r3, [pc, #284]	; (8003cb0 <W25qxx_Init+0x248>)
 8003b94:	2203      	movs	r2, #3
 8003b96:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8003b98:	4b45      	ldr	r3, [pc, #276]	; (8003cb0 <W25qxx_Init+0x248>)
 8003b9a:	2208      	movs	r2, #8
 8003b9c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 8003b9e:	484f      	ldr	r0, [pc, #316]	; (8003cdc <W25qxx_Init+0x274>)
 8003ba0:	f010 f830 	bl	8013c04 <puts>
#endif
		break;
 8003ba4:	e01c      	b.n	8003be0 <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8003ba6:	4b42      	ldr	r3, [pc, #264]	; (8003cb0 <W25qxx_Init+0x248>)
 8003ba8:	2202      	movs	r2, #2
 8003baa:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8003bac:	4b40      	ldr	r3, [pc, #256]	; (8003cb0 <W25qxx_Init+0x248>)
 8003bae:	2204      	movs	r2, #4
 8003bb0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 8003bb2:	484b      	ldr	r0, [pc, #300]	; (8003ce0 <W25qxx_Init+0x278>)
 8003bb4:	f010 f826 	bl	8013c04 <puts>
#endif
		break;
 8003bb8:	e012      	b.n	8003be0 <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8003bba:	4b3d      	ldr	r3, [pc, #244]	; (8003cb0 <W25qxx_Init+0x248>)
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8003bc0:	4b3b      	ldr	r3, [pc, #236]	; (8003cb0 <W25qxx_Init+0x248>)
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 8003bc6:	4847      	ldr	r0, [pc, #284]	; (8003ce4 <W25qxx_Init+0x27c>)
 8003bc8:	f010 f81c 	bl	8013c04 <puts>
#endif
		break;
 8003bcc:	e008      	b.n	8003be0 <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 8003bce:	4846      	ldr	r0, [pc, #280]	; (8003ce8 <W25qxx_Init+0x280>)
 8003bd0:	f010 f818 	bl	8013c04 <puts>
#endif
		w25qxx.Lock = 0;
 8003bd4:	4b36      	ldr	r3, [pc, #216]	; (8003cb0 <W25qxx_Init+0x248>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	e063      	b.n	8003ca8 <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 8003be0:	4b33      	ldr	r3, [pc, #204]	; (8003cb0 <W25qxx_Init+0x248>)
 8003be2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003be6:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8003be8:	4b31      	ldr	r3, [pc, #196]	; (8003cb0 <W25qxx_Init+0x248>)
 8003bea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003bee:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8003bf0:	4b2f      	ldr	r3, [pc, #188]	; (8003cb0 <W25qxx_Init+0x248>)
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	011b      	lsls	r3, r3, #4
 8003bf6:	4a2e      	ldr	r2, [pc, #184]	; (8003cb0 <W25qxx_Init+0x248>)
 8003bf8:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8003bfa:	4b2d      	ldr	r3, [pc, #180]	; (8003cb0 <W25qxx_Init+0x248>)
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	4a2c      	ldr	r2, [pc, #176]	; (8003cb0 <W25qxx_Init+0x248>)
 8003c00:	6912      	ldr	r2, [r2, #16]
 8003c02:	fb02 f303 	mul.w	r3, r2, r3
 8003c06:	4a2a      	ldr	r2, [pc, #168]	; (8003cb0 <W25qxx_Init+0x248>)
 8003c08:	8952      	ldrh	r2, [r2, #10]
 8003c0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c0e:	4a28      	ldr	r2, [pc, #160]	; (8003cb0 <W25qxx_Init+0x248>)
 8003c10:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8003c12:	4b27      	ldr	r3, [pc, #156]	; (8003cb0 <W25qxx_Init+0x248>)
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	4a25      	ldr	r2, [pc, #148]	; (8003cb0 <W25qxx_Init+0x248>)
 8003c1a:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8003c1c:	4b24      	ldr	r3, [pc, #144]	; (8003cb0 <W25qxx_Init+0x248>)
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	4a23      	ldr	r2, [pc, #140]	; (8003cb0 <W25qxx_Init+0x248>)
 8003c22:	6912      	ldr	r2, [r2, #16]
 8003c24:	fb02 f303 	mul.w	r3, r2, r3
 8003c28:	0a9b      	lsrs	r3, r3, #10
 8003c2a:	4a21      	ldr	r2, [pc, #132]	; (8003cb0 <W25qxx_Init+0x248>)
 8003c2c:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8003c2e:	f7ff fe5f 	bl	80038f0 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8003c32:	2001      	movs	r0, #1
 8003c34:	f7ff fea8 	bl	8003988 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8003c38:	2002      	movs	r0, #2
 8003c3a:	f7ff fea5 	bl	8003988 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8003c3e:	2003      	movs	r0, #3
 8003c40:	f7ff fea2 	bl	8003988 <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 8003c44:	4b1a      	ldr	r3, [pc, #104]	; (8003cb0 <W25qxx_Init+0x248>)
 8003c46:	895b      	ldrh	r3, [r3, #10]
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4828      	ldr	r0, [pc, #160]	; (8003cec <W25qxx_Init+0x284>)
 8003c4c:	f00f ff54 	bl	8013af8 <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 8003c50:	4b17      	ldr	r3, [pc, #92]	; (8003cb0 <W25qxx_Init+0x248>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	4619      	mov	r1, r3
 8003c56:	4826      	ldr	r0, [pc, #152]	; (8003cf0 <W25qxx_Init+0x288>)
 8003c58:	f00f ff4e 	bl	8013af8 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 8003c5c:	4b14      	ldr	r3, [pc, #80]	; (8003cb0 <W25qxx_Init+0x248>)
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	4619      	mov	r1, r3
 8003c62:	4824      	ldr	r0, [pc, #144]	; (8003cf4 <W25qxx_Init+0x28c>)
 8003c64:	f00f ff48 	bl	8013af8 <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 8003c68:	4b11      	ldr	r3, [pc, #68]	; (8003cb0 <W25qxx_Init+0x248>)
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4822      	ldr	r0, [pc, #136]	; (8003cf8 <W25qxx_Init+0x290>)
 8003c70:	f00f ff42 	bl	8013af8 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 8003c74:	4b0e      	ldr	r3, [pc, #56]	; (8003cb0 <W25qxx_Init+0x248>)
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4820      	ldr	r0, [pc, #128]	; (8003cfc <W25qxx_Init+0x294>)
 8003c7c:	f00f ff3c 	bl	8013af8 <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 8003c80:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <W25qxx_Init+0x248>)
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	4619      	mov	r1, r3
 8003c86:	481e      	ldr	r0, [pc, #120]	; (8003d00 <W25qxx_Init+0x298>)
 8003c88:	f00f ff36 	bl	8013af8 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 8003c8c:	4b08      	ldr	r3, [pc, #32]	; (8003cb0 <W25qxx_Init+0x248>)
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	4619      	mov	r1, r3
 8003c92:	481c      	ldr	r0, [pc, #112]	; (8003d04 <W25qxx_Init+0x29c>)
 8003c94:	f00f ff30 	bl	8013af8 <iprintf>
	printf("w25qxx Init Done\r\n");
 8003c98:	481b      	ldr	r0, [pc, #108]	; (8003d08 <W25qxx_Init+0x2a0>)
 8003c9a:	f00f ffb3 	bl	8013c04 <puts>
#endif
	w25qxx.Lock = 0;
 8003c9e:	4b04      	ldr	r3, [pc, #16]	; (8003cb0 <W25qxx_Init+0x248>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8003ca6:	2301      	movs	r3, #1
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	20005f08 	.word	0x20005f08
 8003cb4:	40020c00 	.word	0x40020c00
 8003cb8:	08018980 	.word	0x08018980
 8003cbc:	08018998 	.word	0x08018998
 8003cc0:	080189ac 	.word	0x080189ac
 8003cc4:	080189c4 	.word	0x080189c4
 8003cc8:	080189dc 	.word	0x080189dc
 8003ccc:	080189f4 	.word	0x080189f4
 8003cd0:	08018a0c 	.word	0x08018a0c
 8003cd4:	08018a24 	.word	0x08018a24
 8003cd8:	08018a3c 	.word	0x08018a3c
 8003cdc:	08018a54 	.word	0x08018a54
 8003ce0:	08018a6c 	.word	0x08018a6c
 8003ce4:	08018a84 	.word	0x08018a84
 8003ce8:	08018a9c 	.word	0x08018a9c
 8003cec:	08018ab0 	.word	0x08018ab0
 8003cf0:	08018ad0 	.word	0x08018ad0
 8003cf4:	08018ae8 	.word	0x08018ae8
 8003cf8:	08018b08 	.word	0x08018b08
 8003cfc:	08018b24 	.word	0x08018b24
 8003d00:	08018b44 	.word	0x08018b44
 8003d04:	08018b60 	.word	0x08018b60
 8003d08:	08018b80 	.word	0x08018b80

08003d0c <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8003d14:	e002      	b.n	8003d1c <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8003d16:	2001      	movs	r0, #1
 8003d18:	f00b fc6a 	bl	800f5f0 <osDelay>
	while (w25qxx.Lock == 1)
 8003d1c:	4b2d      	ldr	r3, [pc, #180]	; (8003dd4 <W25qxx_EraseSector+0xc8>)
 8003d1e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d0f7      	beq.n	8003d16 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8003d26:	4b2b      	ldr	r3, [pc, #172]	; (8003dd4 <W25qxx_EraseSector+0xc8>)
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 8003d2e:	f005 fe15 	bl	800995c <HAL_GetTick>
 8003d32:	60f8      	str	r0, [r7, #12]
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	4828      	ldr	r0, [pc, #160]	; (8003dd8 <W25qxx_EraseSector+0xcc>)
 8003d38:	f00f fede 	bl	8013af8 <iprintf>
#endif
	W25qxx_WaitForWriteEnd();
 8003d3c:	f7ff fe6a 	bl	8003a14 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8003d40:	4b24      	ldr	r3, [pc, #144]	; (8003dd4 <W25qxx_EraseSector+0xc8>)
 8003d42:	691a      	ldr	r2, [r3, #16]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	fb02 f303 	mul.w	r3, r2, r3
 8003d4a:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8003d4c:	f7ff fe06 	bl	800395c <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003d50:	2200      	movs	r2, #0
 8003d52:	2140      	movs	r1, #64	; 0x40
 8003d54:	4821      	ldr	r0, [pc, #132]	; (8003ddc <W25qxx_EraseSector+0xd0>)
 8003d56:	f006 fb7b 	bl	800a450 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8003d5a:	4b1e      	ldr	r3, [pc, #120]	; (8003dd4 <W25qxx_EraseSector+0xc8>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b08      	cmp	r3, #8
 8003d60:	d909      	bls.n	8003d76 <W25qxx_EraseSector+0x6a>
	{
		W25qxx_Spi(0x21);
 8003d62:	2021      	movs	r0, #33	; 0x21
 8003d64:	f7ff fd78 	bl	8003858 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	0e1b      	lsrs	r3, r3, #24
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff fd72 	bl	8003858 <W25qxx_Spi>
 8003d74:	e002      	b.n	8003d7c <W25qxx_EraseSector+0x70>
	}
	else
	{
		W25qxx_Spi(0x20);
 8003d76:	2020      	movs	r0, #32
 8003d78:	f7ff fd6e 	bl	8003858 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	0c1b      	lsrs	r3, r3, #16
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff fd68 	bl	8003858 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	0a1b      	lsrs	r3, r3, #8
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff fd62 	bl	8003858 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff fd5d 	bl	8003858 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003d9e:	2201      	movs	r2, #1
 8003da0:	2140      	movs	r1, #64	; 0x40
 8003da2:	480e      	ldr	r0, [pc, #56]	; (8003ddc <W25qxx_EraseSector+0xd0>)
 8003da4:	f006 fb54 	bl	800a450 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8003da8:	f7ff fe34 	bl	8003a14 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
 8003dac:	f005 fdd6 	bl	800995c <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	4619      	mov	r1, r3
 8003db8:	4809      	ldr	r0, [pc, #36]	; (8003de0 <W25qxx_EraseSector+0xd4>)
 8003dba:	f00f fe9d 	bl	8013af8 <iprintf>
#endif
	W25qxx_Delay(1);
 8003dbe:	2001      	movs	r0, #1
 8003dc0:	f00b fc16 	bl	800f5f0 <osDelay>
	w25qxx.Lock = 0;
 8003dc4:	4b03      	ldr	r3, [pc, #12]	; (8003dd4 <W25qxx_EraseSector+0xc8>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003dcc:	bf00      	nop
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	20005f08 	.word	0x20005f08
 8003dd8:	08018bd8 	.word	0x08018bd8
 8003ddc:	40020c00 	.word	0x40020c00
 8003de0:	08018bfc 	.word	0x08018bfc

08003de4 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8003dec:	4b07      	ldr	r3, [pc, #28]	; (8003e0c <W25qxx_SectorToPage+0x28>)
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	fb02 f303 	mul.w	r3, r2, r3
 8003df6:	4a05      	ldr	r2, [pc, #20]	; (8003e0c <W25qxx_SectorToPage+0x28>)
 8003df8:	8952      	ldrh	r2, [r2, #10]
 8003dfa:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	20005f08 	.word	0x20005f08

08003e10 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8003e1e:	e002      	b.n	8003e26 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8003e20:	2001      	movs	r0, #1
 8003e22:	f00b fbe5 	bl	800f5f0 <osDelay>
	while (w25qxx.Lock == 1)
 8003e26:	4b57      	ldr	r3, [pc, #348]	; (8003f84 <W25qxx_WritePage+0x174>)
 8003e28:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d0f7      	beq.n	8003e20 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8003e30:	4b54      	ldr	r3, [pc, #336]	; (8003f84 <W25qxx_WritePage+0x174>)
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	4a51      	ldr	r2, [pc, #324]	; (8003f84 <W25qxx_WritePage+0x174>)
 8003e40:	8952      	ldrh	r2, [r2, #10]
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d802      	bhi.n	8003e4c <W25qxx_WritePage+0x3c>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d105      	bne.n	8003e58 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003e4c:	4b4d      	ldr	r3, [pc, #308]	; (8003f84 <W25qxx_WritePage+0x174>)
 8003e4e:	895b      	ldrh	r3, [r3, #10]
 8003e50:	461a      	mov	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	4a49      	ldr	r2, [pc, #292]	; (8003f84 <W25qxx_WritePage+0x174>)
 8003e60:	8952      	ldrh	r2, [r2, #10]
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d905      	bls.n	8003e72 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003e66:	4b47      	ldr	r3, [pc, #284]	; (8003f84 <W25qxx_WritePage+0x174>)
 8003e68:	895b      	ldrh	r3, [r3, #10]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	68b9      	ldr	r1, [r7, #8]
 8003e78:	4843      	ldr	r0, [pc, #268]	; (8003f88 <W25qxx_WritePage+0x178>)
 8003e7a:	f00f fe3d 	bl	8013af8 <iprintf>
	W25qxx_Delay(100);
 8003e7e:	2064      	movs	r0, #100	; 0x64
 8003e80:	f00b fbb6 	bl	800f5f0 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8003e84:	f005 fd6a 	bl	800995c <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 8003e8a:	f7ff fdc3 	bl	8003a14 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8003e8e:	f7ff fd65 	bl	800395c <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003e92:	2200      	movs	r2, #0
 8003e94:	2140      	movs	r1, #64	; 0x40
 8003e96:	483d      	ldr	r0, [pc, #244]	; (8003f8c <W25qxx_WritePage+0x17c>)
 8003e98:	f006 fada 	bl	800a450 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8003e9c:	4b39      	ldr	r3, [pc, #228]	; (8003f84 <W25qxx_WritePage+0x174>)
 8003e9e:	895b      	ldrh	r3, [r3, #10]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	fb03 f302 	mul.w	r3, r3, r2
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	4413      	add	r3, r2
 8003eac:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8003eae:	4b35      	ldr	r3, [pc, #212]	; (8003f84 <W25qxx_WritePage+0x174>)
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2b08      	cmp	r3, #8
 8003eb4:	d909      	bls.n	8003eca <W25qxx_WritePage+0xba>
	{
		W25qxx_Spi(0x12);
 8003eb6:	2012      	movs	r0, #18
 8003eb8:	f7ff fcce 	bl	8003858 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	0e1b      	lsrs	r3, r3, #24
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff fcc8 	bl	8003858 <W25qxx_Spi>
 8003ec8:	e002      	b.n	8003ed0 <W25qxx_WritePage+0xc0>
	}
	else
	{
		W25qxx_Spi(0x02);
 8003eca:	2002      	movs	r0, #2
 8003ecc:	f7ff fcc4 	bl	8003858 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	0c1b      	lsrs	r3, r3, #16
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7ff fcbe 	bl	8003858 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	0a1b      	lsrs	r3, r3, #8
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff fcb8 	bl	8003858 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff fcb3 	bl	8003858 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	2364      	movs	r3, #100	; 0x64
 8003ef8:	68f9      	ldr	r1, [r7, #12]
 8003efa:	4825      	ldr	r0, [pc, #148]	; (8003f90 <W25qxx_WritePage+0x180>)
 8003efc:	f009 f8d1 	bl	800d0a2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003f00:	2201      	movs	r2, #1
 8003f02:	2140      	movs	r1, #64	; 0x40
 8003f04:	4821      	ldr	r0, [pc, #132]	; (8003f8c <W25qxx_WritePage+0x17c>)
 8003f06:	f006 faa3 	bl	800a450 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8003f0a:	f7ff fd83 	bl	8003a14 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8003f0e:	f005 fd25 	bl	800995c <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	617b      	str	r3, [r7, #20]
 8003f1e:	e018      	b.n	8003f52 <W25qxx_WritePage+0x142>
	{
		if ((i % 8 == 0) && (i > 2))
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d108      	bne.n	8003f3c <W25qxx_WritePage+0x12c>
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d905      	bls.n	8003f3c <W25qxx_WritePage+0x12c>
		{
			printf("\r\n");
 8003f30:	4818      	ldr	r0, [pc, #96]	; (8003f94 <W25qxx_WritePage+0x184>)
 8003f32:	f00f fe67 	bl	8013c04 <puts>
			W25qxx_Delay(10);
 8003f36:	200a      	movs	r0, #10
 8003f38:	f00b fb5a 	bl	800f5f0 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	4413      	add	r3, r2
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	4619      	mov	r1, r3
 8003f46:	4814      	ldr	r0, [pc, #80]	; (8003f98 <W25qxx_WritePage+0x188>)
 8003f48:	f00f fdd6 	bl	8013af8 <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	617b      	str	r3, [r7, #20]
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d3e2      	bcc.n	8003f20 <W25qxx_WritePage+0x110>
	}
	printf("\r\n");
 8003f5a:	480e      	ldr	r0, [pc, #56]	; (8003f94 <W25qxx_WritePage+0x184>)
 8003f5c:	f00f fe52 	bl	8013c04 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 8003f60:	6939      	ldr	r1, [r7, #16]
 8003f62:	480e      	ldr	r0, [pc, #56]	; (8003f9c <W25qxx_WritePage+0x18c>)
 8003f64:	f00f fdc8 	bl	8013af8 <iprintf>
	W25qxx_Delay(100);
 8003f68:	2064      	movs	r0, #100	; 0x64
 8003f6a:	f00b fb41 	bl	800f5f0 <osDelay>
#endif
	W25qxx_Delay(1);
 8003f6e:	2001      	movs	r0, #1
 8003f70:	f00b fb3e 	bl	800f5f0 <osDelay>
	w25qxx.Lock = 0;
 8003f74:	4b03      	ldr	r3, [pc, #12]	; (8003f84 <W25qxx_WritePage+0x174>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003f7c:	bf00      	nop
 8003f7e:	3718      	adds	r7, #24
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	20005f08 	.word	0x20005f08
 8003f88:	08018e60 	.word	0x08018e60
 8003f8c:	40020c00 	.word	0x40020c00
 8003f90:	20005c20 	.word	0x20005c20
 8003f94:	08018e9c 	.word	0x08018e9c
 8003f98:	08018ea0 	.word	0x08018ea0
 8003f9c:	08018ea8 	.word	0x08018ea8

08003fa0 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b088      	sub	sp, #32
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
 8003fac:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8003fae:	4b36      	ldr	r3, [pc, #216]	; (8004088 <W25qxx_WriteSector+0xe8>)
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d802      	bhi.n	8003fbe <W25qxx_WriteSector+0x1e>
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d102      	bne.n	8003fc4 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8003fbe:	4b32      	ldr	r3, [pc, #200]	; (8004088 <W25qxx_WriteSector+0xe8>)
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	68b9      	ldr	r1, [r7, #8]
 8003fca:	4830      	ldr	r0, [pc, #192]	; (800408c <W25qxx_WriteSector+0xec>)
 8003fcc:	f00f fd94 	bl	8013af8 <iprintf>
	W25qxx_Delay(100);
 8003fd0:	2064      	movs	r0, #100	; 0x64
 8003fd2:	f00b fb0d 	bl	800f5f0 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8003fd6:	4b2c      	ldr	r3, [pc, #176]	; (8004088 <W25qxx_WriteSector+0xe8>)
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d306      	bcc.n	8003fee <W25qxx_WriteSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
 8003fe0:	482b      	ldr	r0, [pc, #172]	; (8004090 <W25qxx_WriteSector+0xf0>)
 8003fe2:	f00f fe0f 	bl	8013c04 <puts>
		W25qxx_Delay(100);
 8003fe6:	2064      	movs	r0, #100	; 0x64
 8003fe8:	f00b fb02 	bl	800f5f0 <osDelay>
#endif
		return;
 8003fec:	e048      	b.n	8004080 <W25qxx_WriteSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	441a      	add	r2, r3
 8003ff4:	4b24      	ldr	r3, [pc, #144]	; (8004088 <W25qxx_WriteSector+0xe8>)
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d905      	bls.n	8004008 <W25qxx_WriteSector+0x68>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8003ffc:	4b22      	ldr	r3, [pc, #136]	; (8004088 <W25qxx_WriteSector+0xe8>)
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	61bb      	str	r3, [r7, #24]
 8004006:	e001      	b.n	800400c <W25qxx_WriteSector+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 800400c:	68b8      	ldr	r0, [r7, #8]
 800400e:	f7ff fee9 	bl	8003de4 <W25qxx_SectorToPage>
 8004012:	4602      	mov	r2, r0
 8004014:	4b1c      	ldr	r3, [pc, #112]	; (8004088 <W25qxx_WriteSector+0xe8>)
 8004016:	895b      	ldrh	r3, [r3, #10]
 8004018:	4619      	mov	r1, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004020:	4413      	add	r3, r2
 8004022:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004024:	4b18      	ldr	r3, [pc, #96]	; (8004088 <W25qxx_WriteSector+0xe8>)
 8004026:	895b      	ldrh	r3, [r3, #10]
 8004028:	461a      	mov	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004030:	fb02 f201 	mul.w	r2, r2, r1
 8004034:	1a9b      	subs	r3, r3, r2
 8004036:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	69f9      	ldr	r1, [r7, #28]
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f7ff fee6 	bl	8003e10 <W25qxx_WritePage>
		StartPage++;
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	3301      	adds	r3, #1
 8004048:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 800404a:	4b0f      	ldr	r3, [pc, #60]	; (8004088 <W25qxx_WriteSector+0xe8>)
 800404c:	895b      	ldrh	r3, [r3, #10]
 800404e:	461a      	mov	r2, r3
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	1a9a      	subs	r2, r3, r2
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	4413      	add	r3, r2
 8004058:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800405a:	4b0b      	ldr	r3, [pc, #44]	; (8004088 <W25qxx_WriteSector+0xe8>)
 800405c:	895b      	ldrh	r3, [r3, #10]
 800405e:	461a      	mov	r2, r3
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	4413      	add	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800406a:	2300      	movs	r3, #0
 800406c:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	2b00      	cmp	r3, #0
 8004072:	dce1      	bgt.n	8004038 <W25qxx_WriteSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
 8004074:	4807      	ldr	r0, [pc, #28]	; (8004094 <W25qxx_WriteSector+0xf4>)
 8004076:	f00f fdc5 	bl	8013c04 <puts>
	W25qxx_Delay(100);
 800407a:	2064      	movs	r0, #100	; 0x64
 800407c:	f00b fab8 	bl	800f5f0 <osDelay>
#endif
}
 8004080:	3720      	adds	r7, #32
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	20005f08 	.word	0x20005f08
 800408c:	08018ecc 	.word	0x08018ecc
 8004090:	08018f0c 	.word	0x08018f0c
 8004094:	08018f2c 	.word	0x08018f2c

08004098 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
 80040a4:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80040a6:	e002      	b.n	80040ae <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 80040a8:	2001      	movs	r0, #1
 80040aa:	f00b faa1 	bl	800f5f0 <osDelay>
	while (w25qxx.Lock == 1)
 80040ae:	4b54      	ldr	r3, [pc, #336]	; (8004200 <W25qxx_ReadPage+0x168>)
 80040b0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d0f7      	beq.n	80040a8 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 80040b8:	4b51      	ldr	r3, [pc, #324]	; (8004200 <W25qxx_ReadPage+0x168>)
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 80040c0:	4b4f      	ldr	r3, [pc, #316]	; (8004200 <W25qxx_ReadPage+0x168>)
 80040c2:	895b      	ldrh	r3, [r3, #10]
 80040c4:	461a      	mov	r2, r3
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d802      	bhi.n	80040d2 <W25qxx_ReadPage+0x3a>
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d102      	bne.n	80040d8 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 80040d2:	4b4b      	ldr	r3, [pc, #300]	; (8004200 <W25qxx_ReadPage+0x168>)
 80040d4:	895b      	ldrh	r3, [r3, #10]
 80040d6:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	4413      	add	r3, r2
 80040de:	4a48      	ldr	r2, [pc, #288]	; (8004200 <W25qxx_ReadPage+0x168>)
 80040e0:	8952      	ldrh	r2, [r2, #10]
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d905      	bls.n	80040f2 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80040e6:	4b46      	ldr	r3, [pc, #280]	; (8004200 <W25qxx_ReadPage+0x168>)
 80040e8:	895b      	ldrh	r3, [r3, #10]
 80040ea:	461a      	mov	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	68b9      	ldr	r1, [r7, #8]
 80040f8:	4842      	ldr	r0, [pc, #264]	; (8004204 <W25qxx_ReadPage+0x16c>)
 80040fa:	f00f fcfd 	bl	8013af8 <iprintf>
	W25qxx_Delay(100);
 80040fe:	2064      	movs	r0, #100	; 0x64
 8004100:	f00b fa76 	bl	800f5f0 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8004104:	f005 fc2a 	bl	800995c <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800410a:	4b3d      	ldr	r3, [pc, #244]	; (8004200 <W25qxx_ReadPage+0x168>)
 800410c:	895b      	ldrh	r3, [r3, #10]
 800410e:	461a      	mov	r2, r3
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	fb03 f302 	mul.w	r3, r3, r2
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	4413      	add	r3, r2
 800411a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800411c:	2200      	movs	r2, #0
 800411e:	2140      	movs	r1, #64	; 0x40
 8004120:	4839      	ldr	r0, [pc, #228]	; (8004208 <W25qxx_ReadPage+0x170>)
 8004122:	f006 f995 	bl	800a450 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004126:	4b36      	ldr	r3, [pc, #216]	; (8004200 <W25qxx_ReadPage+0x168>)
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2b08      	cmp	r3, #8
 800412c:	d909      	bls.n	8004142 <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 800412e:	200c      	movs	r0, #12
 8004130:	f7ff fb92 	bl	8003858 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	0e1b      	lsrs	r3, r3, #24
 8004138:	b2db      	uxtb	r3, r3
 800413a:	4618      	mov	r0, r3
 800413c:	f7ff fb8c 	bl	8003858 <W25qxx_Spi>
 8004140:	e002      	b.n	8004148 <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8004142:	200b      	movs	r0, #11
 8004144:	f7ff fb88 	bl	8003858 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	0c1b      	lsrs	r3, r3, #16
 800414c:	b2db      	uxtb	r3, r3
 800414e:	4618      	mov	r0, r3
 8004150:	f7ff fb82 	bl	8003858 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	0a1b      	lsrs	r3, r3, #8
 8004158:	b2db      	uxtb	r3, r3
 800415a:	4618      	mov	r0, r3
 800415c:	f7ff fb7c 	bl	8003858 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	4618      	mov	r0, r3
 8004166:	f7ff fb77 	bl	8003858 <W25qxx_Spi>
	W25qxx_Spi(0);
 800416a:	2000      	movs	r0, #0
 800416c:	f7ff fb74 	bl	8003858 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	b29a      	uxth	r2, r3
 8004174:	2364      	movs	r3, #100	; 0x64
 8004176:	68f9      	ldr	r1, [r7, #12]
 8004178:	4824      	ldr	r0, [pc, #144]	; (800420c <W25qxx_ReadPage+0x174>)
 800417a:	f009 f8ce 	bl	800d31a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800417e:	2201      	movs	r2, #1
 8004180:	2140      	movs	r1, #64	; 0x40
 8004182:	4821      	ldr	r0, [pc, #132]	; (8004208 <W25qxx_ReadPage+0x170>)
 8004184:	f006 f964 	bl	800a450 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8004188:	f005 fbe8 	bl	800995c <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8004194:	2300      	movs	r3, #0
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	e018      	b.n	80041cc <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f003 0307 	and.w	r3, r3, #7
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d108      	bne.n	80041b6 <W25qxx_ReadPage+0x11e>
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d905      	bls.n	80041b6 <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 80041aa:	4819      	ldr	r0, [pc, #100]	; (8004210 <W25qxx_ReadPage+0x178>)
 80041ac:	f00f fd2a 	bl	8013c04 <puts>
			W25qxx_Delay(10);
 80041b0:	200a      	movs	r0, #10
 80041b2:	f00b fa1d 	bl	800f5f0 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	4413      	add	r3, r2
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	4619      	mov	r1, r3
 80041c0:	4814      	ldr	r0, [pc, #80]	; (8004214 <W25qxx_ReadPage+0x17c>)
 80041c2:	f00f fc99 	bl	8013af8 <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	3301      	adds	r3, #1
 80041ca:	617b      	str	r3, [r7, #20]
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d3e2      	bcc.n	800419a <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 80041d4:	480e      	ldr	r0, [pc, #56]	; (8004210 <W25qxx_ReadPage+0x178>)
 80041d6:	f00f fd15 	bl	8013c04 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 80041da:	6939      	ldr	r1, [r7, #16]
 80041dc:	480e      	ldr	r0, [pc, #56]	; (8004218 <W25qxx_ReadPage+0x180>)
 80041de:	f00f fc8b 	bl	8013af8 <iprintf>
	W25qxx_Delay(100);
 80041e2:	2064      	movs	r0, #100	; 0x64
 80041e4:	f00b fa04 	bl	800f5f0 <osDelay>
#endif
	W25qxx_Delay(1);
 80041e8:	2001      	movs	r0, #1
 80041ea:	f00b fa01 	bl	800f5f0 <osDelay>
	w25qxx.Lock = 0;
 80041ee:	4b04      	ldr	r3, [pc, #16]	; (8004200 <W25qxx_ReadPage+0x168>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80041f6:	bf00      	nop
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	20005f08 	.word	0x20005f08
 8004204:	08019078 	.word	0x08019078
 8004208:	40020c00 	.word	0x40020c00
 800420c:	20005c20 	.word	0x20005c20
 8004210:	08018e9c 	.word	0x08018e9c
 8004214:	08018ea0 	.word	0x08018ea0
 8004218:	080190b4 	.word	0x080190b4

0800421c <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b088      	sub	sp, #32
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
 8004228:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 800422a:	4b36      	ldr	r3, [pc, #216]	; (8004304 <W25qxx_ReadSector+0xe8>)
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d802      	bhi.n	800423a <W25qxx_ReadSector+0x1e>
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d102      	bne.n	8004240 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 800423a:	4b32      	ldr	r3, [pc, #200]	; (8004304 <W25qxx_ReadSector+0xe8>)
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	68b9      	ldr	r1, [r7, #8]
 8004246:	4830      	ldr	r0, [pc, #192]	; (8004308 <W25qxx_ReadSector+0xec>)
 8004248:	f00f fc56 	bl	8013af8 <iprintf>
	W25qxx_Delay(100);
 800424c:	2064      	movs	r0, #100	; 0x64
 800424e:	f00b f9cf 	bl	800f5f0 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8004252:	4b2c      	ldr	r3, [pc, #176]	; (8004304 <W25qxx_ReadSector+0xe8>)
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	429a      	cmp	r2, r3
 800425a:	d306      	bcc.n	800426a <W25qxx_ReadSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
 800425c:	482b      	ldr	r0, [pc, #172]	; (800430c <W25qxx_ReadSector+0xf0>)
 800425e:	f00f fcd1 	bl	8013c04 <puts>
		W25qxx_Delay(100);
 8004262:	2064      	movs	r0, #100	; 0x64
 8004264:	f00b f9c4 	bl	800f5f0 <osDelay>
#endif
		return;
 8004268:	e048      	b.n	80042fc <W25qxx_ReadSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	441a      	add	r2, r3
 8004270:	4b24      	ldr	r3, [pc, #144]	; (8004304 <W25qxx_ReadSector+0xe8>)
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	429a      	cmp	r2, r3
 8004276:	d905      	bls.n	8004284 <W25qxx_ReadSector+0x68>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8004278:	4b22      	ldr	r3, [pc, #136]	; (8004304 <W25qxx_ReadSector+0xe8>)
 800427a:	691a      	ldr	r2, [r3, #16]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	61bb      	str	r3, [r7, #24]
 8004282:	e001      	b.n	8004288 <W25qxx_ReadSector+0x6c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004288:	68b8      	ldr	r0, [r7, #8]
 800428a:	f7ff fdab 	bl	8003de4 <W25qxx_SectorToPage>
 800428e:	4602      	mov	r2, r0
 8004290:	4b1c      	ldr	r3, [pc, #112]	; (8004304 <W25qxx_ReadSector+0xe8>)
 8004292:	895b      	ldrh	r3, [r3, #10]
 8004294:	4619      	mov	r1, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	fbb3 f3f1 	udiv	r3, r3, r1
 800429c:	4413      	add	r3, r2
 800429e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80042a0:	4b18      	ldr	r3, [pc, #96]	; (8004304 <W25qxx_ReadSector+0xe8>)
 80042a2:	895b      	ldrh	r3, [r3, #10]
 80042a4:	461a      	mov	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80042ac:	fb02 f201 	mul.w	r2, r2, r1
 80042b0:	1a9b      	subs	r3, r3, r2
 80042b2:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	69f9      	ldr	r1, [r7, #28]
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f7ff feec 	bl	8004098 <W25qxx_ReadPage>
		StartPage++;
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	3301      	adds	r3, #1
 80042c4:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 80042c6:	4b0f      	ldr	r3, [pc, #60]	; (8004304 <W25qxx_ReadSector+0xe8>)
 80042c8:	895b      	ldrh	r3, [r3, #10]
 80042ca:	461a      	mov	r2, r3
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	1a9a      	subs	r2, r3, r2
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	4413      	add	r3, r2
 80042d4:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80042d6:	4b0b      	ldr	r3, [pc, #44]	; (8004304 <W25qxx_ReadSector+0xe8>)
 80042d8:	895b      	ldrh	r3, [r3, #10]
 80042da:	461a      	mov	r2, r3
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	4413      	add	r3, r2
 80042e4:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80042e6:	2300      	movs	r3, #0
 80042e8:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	dce1      	bgt.n	80042b4 <W25qxx_ReadSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
 80042f0:	4807      	ldr	r0, [pc, #28]	; (8004310 <W25qxx_ReadSector+0xf4>)
 80042f2:	f00f fc87 	bl	8013c04 <puts>
	W25qxx_Delay(100);
 80042f6:	2064      	movs	r0, #100	; 0x64
 80042f8:	f00b f97a 	bl	800f5f0 <osDelay>
#endif
}
 80042fc:	3720      	adds	r7, #32
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	20005f08 	.word	0x20005f08
 8004308:	080190d8 	.word	0x080190d8
 800430c:	08019118 	.word	0x08019118
 8004310:	08019138 	.word	0x08019138

08004314 <MRT_formatPropulsion>:
void MRT_getValveStatus(void){
	valve_status = HAL_GPIO_ReadPin(IN_Prop_ActuatedVent_Feedback_GPIO_Port,IN_Prop_ActuatedVent_Feedback_Pin);
}

// formats propulsion telemetry string using sprintf
void MRT_formatPropulsion(void) {
 8004314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004316:	b089      	sub	sp, #36	; 0x24
 8004318:	af06      	add	r7, sp, #24
	memset(msg_buffer_pr, 0, 50);
 800431a:	2232      	movs	r2, #50	; 0x32
 800431c:	2100      	movs	r1, #0
 800431e:	4816      	ldr	r0, [pc, #88]	; (8004378 <MRT_formatPropulsion+0x64>)
 8004320:	f00e fa40 	bl	80127a4 <memset>
	//tank_pressure = convert_prop_tank_pressure(); // convert buffered readings to voltage TODO??
	sprintf(msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 8004324:	4b15      	ldr	r3, [pc, #84]	; (800437c <MRT_formatPropulsion+0x68>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f7fc f92d 	bl	8000588 <__aeabi_f2d>
 800432e:	4604      	mov	r4, r0
 8004330:	460d      	mov	r5, r1
 8004332:	4b13      	ldr	r3, [pc, #76]	; (8004380 <MRT_formatPropulsion+0x6c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f7fc f926 	bl	8000588 <__aeabi_f2d>
 800433c:	4602      	mov	r2, r0
 800433e:	460b      	mov	r3, r1
 8004340:	4910      	ldr	r1, [pc, #64]	; (8004384 <MRT_formatPropulsion+0x70>)
 8004342:	7809      	ldrb	r1, [r1, #0]
 8004344:	4608      	mov	r0, r1
 8004346:	4910      	ldr	r1, [pc, #64]	; (8004388 <MRT_formatPropulsion+0x74>)
 8004348:	7809      	ldrb	r1, [r1, #0]
 800434a:	460e      	mov	r6, r1
 800434c:	490f      	ldr	r1, [pc, #60]	; (800438c <MRT_formatPropulsion+0x78>)
 800434e:	7809      	ldrb	r1, [r1, #0]
 8004350:	6079      	str	r1, [r7, #4]
 8004352:	490f      	ldr	r1, [pc, #60]	; (8004390 <MRT_formatPropulsion+0x7c>)
 8004354:	6809      	ldr	r1, [r1, #0]
 8004356:	9105      	str	r1, [sp, #20]
 8004358:	6879      	ldr	r1, [r7, #4]
 800435a:	9104      	str	r1, [sp, #16]
 800435c:	9603      	str	r6, [sp, #12]
 800435e:	9002      	str	r0, [sp, #8]
 8004360:	e9cd 2300 	strd	r2, r3, [sp]
 8004364:	4622      	mov	r2, r4
 8004366:	462b      	mov	r3, r5
 8004368:	490a      	ldr	r1, [pc, #40]	; (8004394 <MRT_formatPropulsion+0x80>)
 800436a:	4803      	ldr	r0, [pc, #12]	; (8004378 <MRT_formatPropulsion+0x64>)
 800436c:	f00f fd16 	bl	8013d9c <siprintf>
			transducer_voltage, thermocouple_temperature, valve_status,
			prev_min, prev_sec, prev_subsec);
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004378:	20005f30 	.word	0x20005f30
 800437c:	20005f68 	.word	0x20005f68
 8004380:	20005f64 	.word	0x20005f64
 8004384:	20005f62 	.word	0x20005f62
 8004388:	20000386 	.word	0x20000386
 800438c:	20000387 	.word	0x20000387
 8004390:	20000388 	.word	0x20000388
 8004394:	080191cc 	.word	0x080191cc

08004398 <MRT_LSM6DSR_Constructor>:


//**************************************************//
/*****LSM6DSR STATIC FUNCTIONS*****/

void MRT_LSM6DSR_Constructor(){
 8004398:	b598      	push	{r3, r4, r7, lr}
 800439a:	af00      	add	r7, sp, #0
	if (lsm6dsr==NULL){
 800439c:	4b08      	ldr	r3, [pc, #32]	; (80043c0 <MRT_LSM6DSR_Constructor+0x28>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10b      	bne.n	80043bc <MRT_LSM6DSR_Constructor+0x24>
		lsm6dsr = new LSM6DSR(&LSM6DSR_I2C, (uint8_t) MRT_LSM6DSR_ADDRESS);
 80043a4:	203c      	movs	r0, #60	; 0x3c
 80043a6:	f00d ff39 	bl	801221c <_Znwj>
 80043aa:	4603      	mov	r3, r0
 80043ac:	461c      	mov	r4, r3
 80043ae:	226a      	movs	r2, #106	; 0x6a
 80043b0:	4904      	ldr	r1, [pc, #16]	; (80043c4 <MRT_LSM6DSR_Constructor+0x2c>)
 80043b2:	4620      	mov	r0, r4
 80043b4:	f000 f990 	bl	80046d8 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh>
 80043b8:	4b01      	ldr	r3, [pc, #4]	; (80043c0 <MRT_LSM6DSR_Constructor+0x28>)
 80043ba:	601c      	str	r4, [r3, #0]
	}
}
 80043bc:	bf00      	nop
 80043be:	bd98      	pop	{r3, r4, r7, pc}
 80043c0:	2000038c 	.word	0x2000038c
 80043c4:	20005b00 	.word	0x20005b00

080043c8 <MRT_LSM6DSR_Destructor>:

void MRT_LSM6DSR_Destructor(){
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
	if (lsm6dsr!=NULL){
 80043cc:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <MRT_LSM6DSR_Destructor+0x1c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d002      	beq.n	80043da <MRT_LSM6DSR_Destructor+0x12>
		lsm6dsr = NULL;
 80043d4:	4b03      	ldr	r3, [pc, #12]	; (80043e4 <MRT_LSM6DSR_Destructor+0x1c>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
	}
}
 80043da:	bf00      	nop
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	2000038c 	.word	0x2000038c

080043e8 <MRT_LSM6DSR_getAcceleration>:

void MRT_LSM6DSR_getAcceleration(void){
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
	float* temp_array = lsm6dsr->getAcceleration();
 80043ee:	4b0b      	ldr	r3, [pc, #44]	; (800441c <MRT_LSM6DSR_getAcceleration+0x34>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 fa1c 	bl	8004830 <_ZN7LSM6DSR15getAccelerationEv>
 80043f8:	6078      	str	r0, [r7, #4]
	hlsm6dsr.acceleration_mg[0] = temp_array[0];
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a08      	ldr	r2, [pc, #32]	; (8004420 <MRT_LSM6DSR_getAcceleration+0x38>)
 8004400:	6013      	str	r3, [r2, #0]
	hlsm6dsr.acceleration_mg[1] = temp_array[1];
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	4a06      	ldr	r2, [pc, #24]	; (8004420 <MRT_LSM6DSR_getAcceleration+0x38>)
 8004408:	6053      	str	r3, [r2, #4]
	hlsm6dsr.acceleration_mg[2] = temp_array[2];
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	4a04      	ldr	r2, [pc, #16]	; (8004420 <MRT_LSM6DSR_getAcceleration+0x38>)
 8004410:	6093      	str	r3, [r2, #8]
}
 8004412:	bf00      	nop
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	2000038c 	.word	0x2000038c
 8004420:	20000394 	.word	0x20000394

08004424 <MRT_LSM6DSR_getAngularRate>:
void MRT_LSM6DSR_getAngularRate(void){
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
	float* temp_array = lsm6dsr->getAngularRate();
 800442a:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <MRT_LSM6DSR_getAngularRate+0x34>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4618      	mov	r0, r3
 8004430:	f000 fa7c 	bl	800492c <_ZN7LSM6DSR14getAngularRateEv>
 8004434:	6078      	str	r0, [r7, #4]
	hlsm6dsr.angular_rate_mdps[0] = temp_array[0];
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a08      	ldr	r2, [pc, #32]	; (800445c <MRT_LSM6DSR_getAngularRate+0x38>)
 800443c:	60d3      	str	r3, [r2, #12]
	hlsm6dsr.angular_rate_mdps[1] = temp_array[1];
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	4a06      	ldr	r2, [pc, #24]	; (800445c <MRT_LSM6DSR_getAngularRate+0x38>)
 8004444:	6113      	str	r3, [r2, #16]
	hlsm6dsr.angular_rate_mdps[2] = temp_array[2];
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	4a04      	ldr	r2, [pc, #16]	; (800445c <MRT_LSM6DSR_getAngularRate+0x38>)
 800444c:	6153      	str	r3, [r2, #20]
}
 800444e:	bf00      	nop
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	2000038c 	.word	0x2000038c
 800445c:	20000394 	.word	0x20000394

08004460 <MRT_LSM6DSR_getTemperature>:
void MRT_LSM6DSR_getTemperature(void){
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
	lsm6dsr->getTemperature();
 8004464:	4b05      	ldr	r3, [pc, #20]	; (800447c <MRT_LSM6DSR_getTemperature+0x1c>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4618      	mov	r0, r3
 800446a:	f000 fa29 	bl	80048c0 <_ZN7LSM6DSR14getTemperatureEv>
	hlsm6dsr.temperature_degC = lsm6dsr->temperature_degC;
 800446e:	4b03      	ldr	r3, [pc, #12]	; (800447c <MRT_LSM6DSR_getTemperature+0x1c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	4a02      	ldr	r2, [pc, #8]	; (8004480 <MRT_LSM6DSR_getTemperature+0x20>)
 8004476:	6193      	str	r3, [r2, #24]
}
 8004478:	bf00      	nop
 800447a:	bd80      	pop	{r7, pc}
 800447c:	2000038c 	.word	0x2000038c
 8004480:	20000394 	.word	0x20000394

08004484 <MRT_LSM6DSR_pollAll>:

void MRT_LSM6DSR_pollAll(void){
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
	MRT_LSM6DSR_getAcceleration();
 8004488:	f7ff ffae 	bl	80043e8 <MRT_LSM6DSR_getAcceleration>
	MRT_LSM6DSR_getAngularRate();
 800448c:	f7ff ffca 	bl	8004424 <MRT_LSM6DSR_getAngularRate>
	MRT_LSM6DSR_getTemperature();
 8004490:	f7ff ffe6 	bl	8004460 <MRT_LSM6DSR_getTemperature>
}
 8004494:	bf00      	nop
 8004496:	bd80      	pop	{r7, pc}

08004498 <MRT_LPS22HH_Constructor>:


//**************************************************//
/*****LPS22HH STATIC FUNCTIONS*****/

void MRT_LPS22HH_Constructor(){
 8004498:	b598      	push	{r3, r4, r7, lr}
 800449a:	af00      	add	r7, sp, #0
	if (lps22hh==NULL){
 800449c:	4b08      	ldr	r3, [pc, #32]	; (80044c0 <MRT_LPS22HH_Constructor+0x28>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10b      	bne.n	80044bc <MRT_LPS22HH_Constructor+0x24>
		lps22hh = new LPS22HH(&LPS22HH_I2C, (uint8_t) MRT_LPS22HH_ADDRESS);
 80044a4:	2020      	movs	r0, #32
 80044a6:	f00d feb9 	bl	801221c <_Znwj>
 80044aa:	4603      	mov	r3, r0
 80044ac:	461c      	mov	r4, r3
 80044ae:	22b3      	movs	r2, #179	; 0xb3
 80044b0:	4904      	ldr	r1, [pc, #16]	; (80044c4 <MRT_LPS22HH_Constructor+0x2c>)
 80044b2:	4620      	mov	r0, r4
 80044b4:	f000 fabe 	bl	8004a34 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh>
 80044b8:	4b01      	ldr	r3, [pc, #4]	; (80044c0 <MRT_LPS22HH_Constructor+0x28>)
 80044ba:	601c      	str	r4, [r3, #0]
	}
}
 80044bc:	bf00      	nop
 80044be:	bd98      	pop	{r3, r4, r7, pc}
 80044c0:	20000390 	.word	0x20000390
 80044c4:	20005b00 	.word	0x20005b00

080044c8 <MRT_LPS22HH_Destructor>:

void MRT_LPS22HH_Destructor(){
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
	if (lps22hh!=NULL){
 80044cc:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <MRT_LPS22HH_Destructor+0x1c>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <MRT_LPS22HH_Destructor+0x12>
		lps22hh = NULL;
 80044d4:	4b03      	ldr	r3, [pc, #12]	; (80044e4 <MRT_LPS22HH_Destructor+0x1c>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]
	}
}
 80044da:	bf00      	nop
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	20000390 	.word	0x20000390

080044e8 <MRT_LPS22HH_getPressure>:

void MRT_LPS22HH_getPressure(void){
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
	hlps22hh.pressure_hPa = lps22hh->getPressure();
 80044ec:	4b05      	ldr	r3, [pc, #20]	; (8004504 <MRT_LPS22HH_getPressure+0x1c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 fb27 	bl	8004b44 <_ZN7LPS22HH11getPressureEv>
 80044f6:	eef0 7a40 	vmov.f32	s15, s0
 80044fa:	4b03      	ldr	r3, [pc, #12]	; (8004508 <MRT_LPS22HH_getPressure+0x20>)
 80044fc:	edc3 7a00 	vstr	s15, [r3]
}
 8004500:	bf00      	nop
 8004502:	bd80      	pop	{r7, pc}
 8004504:	20000390 	.word	0x20000390
 8004508:	200003c0 	.word	0x200003c0

0800450c <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(void){
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
	hlps22hh.temperature_degC = lps22hh->getTemperature();
 8004510:	4b05      	ldr	r3, [pc, #20]	; (8004528 <MRT_LPS22HH_getTemperature+0x1c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4618      	mov	r0, r3
 8004516:	f000 fb49 	bl	8004bac <_ZN7LPS22HH14getTemperatureEv>
 800451a:	eef0 7a40 	vmov.f32	s15, s0
 800451e:	4b03      	ldr	r3, [pc, #12]	; (800452c <MRT_LPS22HH_getTemperature+0x20>)
 8004520:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8004524:	bf00      	nop
 8004526:	bd80      	pop	{r7, pc}
 8004528:	20000390 	.word	0x20000390
 800452c:	200003c0 	.word	0x200003c0

08004530 <MRT_LPS22HH_pollAll>:

void MRT_LPS22HH_pollAll(void){
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
	MRT_LPS22HH_getPressure();
 8004534:	f7ff ffd8 	bl	80044e8 <MRT_LPS22HH_getPressure>
	MRT_LPS22HH_getTemperature();
 8004538:	f7ff ffe8 	bl	800450c <MRT_LPS22HH_getTemperature>
}
 800453c:	bf00      	nop
 800453e:	bd80      	pop	{r7, pc}

08004540 <MRT_GPS_pollAll>:


//**************************************************//
/*****GPS STATIC FUNCTIONS*****/

void MRT_GPS_pollAll(void){
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
	GPS_Poll(&hgps.latitude, &hgps.longitude, &hgps.time);
 8004544:	4a03      	ldr	r2, [pc, #12]	; (8004554 <MRT_GPS_pollAll+0x14>)
 8004546:	4904      	ldr	r1, [pc, #16]	; (8004558 <MRT_GPS_pollAll+0x18>)
 8004548:	4804      	ldr	r0, [pc, #16]	; (800455c <MRT_GPS_pollAll+0x1c>)
 800454a:	f000 fb9f 	bl	8004c8c <GPS_Poll>
}
 800454e:	bf00      	nop
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	200003dc 	.word	0x200003dc
 8004558:	200003d8 	.word	0x200003d8
 800455c:	200003d4 	.word	0x200003d4

08004560 <MRT_LSM6DSR_Init>:


//**************************************************//
/*****PUBLIC STATIC FUNCTIONS*****/

HLSM6DSR MRT_LSM6DSR_Init(void){
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
	MRT_LSM6DSR_Constructor();
 8004568:	f7ff ff16 	bl	8004398 <MRT_LSM6DSR_Constructor>
	HLSM6DSR lsm6dsr_handler;
	lsm6dsr_handler.getAcceleration = &MRT_LSM6DSR_getAcceleration;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a16      	ldr	r2, [pc, #88]	; (80045c8 <MRT_LSM6DSR_Init+0x68>)
 8004570:	61da      	str	r2, [r3, #28]
	lsm6dsr_handler.getAngularRate = &MRT_LSM6DSR_getAngularRate;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a15      	ldr	r2, [pc, #84]	; (80045cc <MRT_LSM6DSR_Init+0x6c>)
 8004576:	621a      	str	r2, [r3, #32]
	lsm6dsr_handler.getTemperature = &MRT_LSM6DSR_getTemperature;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a15      	ldr	r2, [pc, #84]	; (80045d0 <MRT_LSM6DSR_Init+0x70>)
 800457c:	625a      	str	r2, [r3, #36]	; 0x24
	lsm6dsr_handler.pollAll = &MRT_LSM6DSR_pollAll;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a14      	ldr	r2, [pc, #80]	; (80045d4 <MRT_LSM6DSR_Init+0x74>)
 8004582:	629a      	str	r2, [r3, #40]	; 0x28

	lsm6dsr_handler.acceleration_mg[0] = 0;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f04f 0200 	mov.w	r2, #0
 800458a:	601a      	str	r2, [r3, #0]
	lsm6dsr_handler.acceleration_mg[1] = 0;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	605a      	str	r2, [r3, #4]
	lsm6dsr_handler.acceleration_mg[2] = 0;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f04f 0200 	mov.w	r2, #0
 800459a:	609a      	str	r2, [r3, #8]
	lsm6dsr_handler.angular_rate_mdps[0] = 0;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f04f 0200 	mov.w	r2, #0
 80045a2:	60da      	str	r2, [r3, #12]
	lsm6dsr_handler.angular_rate_mdps[1] = 0;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f04f 0200 	mov.w	r2, #0
 80045aa:	611a      	str	r2, [r3, #16]
	lsm6dsr_handler.angular_rate_mdps[2] = 0;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	615a      	str	r2, [r3, #20]
	lsm6dsr_handler.temperature_degC = 0;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f04f 0200 	mov.w	r2, #0
 80045ba:	619a      	str	r2, [r3, #24]
	return lsm6dsr_handler;
 80045bc:	bf00      	nop
}
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	080043e9 	.word	0x080043e9
 80045cc:	08004425 	.word	0x08004425
 80045d0:	08004461 	.word	0x08004461
 80045d4:	08004485 	.word	0x08004485

080045d8 <MRT_LPS22HH_Init>:

struct HLPS22HH MRT_LPS22HH_Init(void){
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
	MRT_LPS22HH_Constructor();
 80045e0:	f7ff ff5a 	bl	8004498 <MRT_LPS22HH_Constructor>
	struct HLPS22HH lps22hh_handler;
	lps22hh_handler.getPressure = &MRT_LPS22HH_getPressure;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a0a      	ldr	r2, [pc, #40]	; (8004610 <MRT_LPS22HH_Init+0x38>)
 80045e8:	609a      	str	r2, [r3, #8]
	lps22hh_handler.getTemperature = &MRT_LPS22HH_getTemperature;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a09      	ldr	r2, [pc, #36]	; (8004614 <MRT_LPS22HH_Init+0x3c>)
 80045ee:	60da      	str	r2, [r3, #12]
	lps22hh_handler.pollAll = &MRT_LPS22HH_pollAll;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a09      	ldr	r2, [pc, #36]	; (8004618 <MRT_LPS22HH_Init+0x40>)
 80045f4:	611a      	str	r2, [r3, #16]

	lps22hh_handler.pressure_hPa = 0;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f04f 0200 	mov.w	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]
	lps22hh_handler.temperature_degC = 0;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f04f 0200 	mov.w	r2, #0
 8004604:	605a      	str	r2, [r3, #4]
	return lps22hh_handler;
 8004606:	bf00      	nop
}
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	3708      	adds	r7, #8
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	080044e9 	.word	0x080044e9
 8004614:	0800450d 	.word	0x0800450d
 8004618:	08004531 	.word	0x08004531

0800461c <MRT_GPS_Init>:

struct HGPS MRT_GPS_Init(void){
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
	struct HGPS gps_handler;
	gps_handler.pollAll = &MRT_GPS_pollAll;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a0c      	ldr	r2, [pc, #48]	; (8004658 <MRT_GPS_Init+0x3c>)
 8004628:	60da      	str	r2, [r3, #12]
	GPS_Init(&GPS_UART, print, tone_freq);
 800462a:	4a0c      	ldr	r2, [pc, #48]	; (800465c <MRT_GPS_Init+0x40>)
 800462c:	490c      	ldr	r1, [pc, #48]	; (8004660 <MRT_GPS_Init+0x44>)
 800462e:	480d      	ldr	r0, [pc, #52]	; (8004664 <MRT_GPS_Init+0x48>)
 8004630:	f000 fd8c 	bl	800514c <GPS_Init>
	gps_handler.latitude = 0;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	601a      	str	r2, [r3, #0]
	gps_handler.longitude = 0;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	605a      	str	r2, [r3, #4]
	gps_handler.time = 0;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f04f 0200 	mov.w	r2, #0
 800464a:	609a      	str	r2, [r3, #8]
	return gps_handler;
 800464c:	bf00      	nop
}
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	08004541 	.word	0x08004541
 800465c:	08001135 	.word	0x08001135
 8004660:	08001109 	.word	0x08001109
 8004664:	20005de8 	.word	0x20005de8

08004668 <MRT_i2c_sensors_Init>:

void MRT_i2c_sensors_Init(void){
 8004668:	b5b0      	push	{r4, r5, r7, lr}
 800466a:	b08c      	sub	sp, #48	; 0x30
 800466c:	af00      	add	r7, sp, #0

	//LSM6DSR
	#if LSM6DSR_
	HAL_IWDG_Refresh(&hiwdg);
	hlsm6dsr = MRT_LSM6DSR_Init();
 800466e:	4c13      	ldr	r4, [pc, #76]	; (80046bc <MRT_i2c_sensors_Init+0x54>)
 8004670:	463b      	mov	r3, r7
 8004672:	4618      	mov	r0, r3
 8004674:	f7ff ff74 	bl	8004560 <MRT_LSM6DSR_Init>
 8004678:	4625      	mov	r5, r4
 800467a:	463c      	mov	r4, r7
 800467c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800467e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004680:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004682:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004684:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004688:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	#endif

	//LPS22HH
	#if LPS22HH_
	HAL_IWDG_Refresh(&hiwdg);
	hlps22hh = MRT_LPS22HH_Init();
 800468c:	4c0c      	ldr	r4, [pc, #48]	; (80046c0 <MRT_i2c_sensors_Init+0x58>)
 800468e:	463b      	mov	r3, r7
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff ffa1 	bl	80045d8 <MRT_LPS22HH_Init>
 8004696:	4625      	mov	r5, r4
 8004698:	463c      	mov	r4, r7
 800469a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800469c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	602b      	str	r3, [r5, #0]
	#endif

	//GPS
	#if GPS_
	HAL_IWDG_Refresh(&hiwdg);
	hgps = MRT_GPS_Init();
 80046a2:	4c08      	ldr	r4, [pc, #32]	; (80046c4 <MRT_i2c_sensors_Init+0x5c>)
 80046a4:	463b      	mov	r3, r7
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff ffb8 	bl	800461c <MRT_GPS_Init>
 80046ac:	463b      	mov	r3, r7
 80046ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	#endif

}
 80046b4:	bf00      	nop
 80046b6:	3730      	adds	r7, #48	; 0x30
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bdb0      	pop	{r4, r5, r7, pc}
 80046bc:	20000394 	.word	0x20000394
 80046c0:	200003c0 	.word	0x200003c0
 80046c4:	200003d4 	.word	0x200003d4

080046c8 <MRT_i2c_sensors_Deinit>:


void MRT_i2c_sensors_Deinit(void){
 80046c8:	b580      	push	{r7, lr}
 80046ca:	af00      	add	r7, sp, #0

	//LSM6DSR
	#if LSM6DSR_
	MRT_LSM6DSR_Destructor();
 80046cc:	f7ff fe7c 	bl	80043c8 <MRT_LSM6DSR_Destructor>
	#endif

	//LPS22HH
	#if LPS22HH_
	MRT_LPS22HH_Destructor();
 80046d0:	f7ff fefa 	bl	80044c8 <MRT_LPS22HH_Destructor>
	#endif

	//GPS
	//NO DEINIT NEEDED HERE
}
 80046d4:	bf00      	nop
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh>:


//**************************************************//
/*****LSM6DSR*****/

LSM6DSR::LSM6DSR(I2C_HandleTypeDef* i2c_bus, uint8_t address){
 80046d8:	b580      	push	{r7, lr}
 80046da:	b088      	sub	sp, #32
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	4613      	mov	r3, r2
 80046e4:	71fb      	strb	r3, [r7, #7]
	println((char*) "\r\nLSM6DSR Init");
 80046e6:	4848      	ldr	r0, [pc, #288]	; (8004808 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x130>)
 80046e8:	f7fc fcf0 	bl	80010cc <println>

	/* Initialize mems driver interface */
	ctx.write_reg = write;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4a47      	ldr	r2, [pc, #284]	; (800480c <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x134>)
 80046f0:	61da      	str	r2, [r3, #28]
	ctx.read_reg = read;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	4a46      	ldr	r2, [pc, #280]	; (8004810 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x138>)
 80046f6:	621a      	str	r2, [r3, #32]
	ctx.handle = i2c_bus;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait sensor boot time */
	HAL_Delay(LSM6DSR_BOOT_TIME);
 80046fe:	2064      	movs	r0, #100	; 0x64
 8004700:	f005 f938 	bl	8009974 <HAL_Delay>
	/* Check device ID */
	lsm6dsr_device_id_get(&ctx, &whoamI);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f103 021c 	add.w	r2, r3, #28
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	3338      	adds	r3, #56	; 0x38
 800470e:	4619      	mov	r1, r3
 8004710:	4610      	mov	r0, r2
 8004712:	f001 faf1 	bl	8005cf8 <lsm6dsr_device_id_get>

	print((char*) "\tChecking Sensor ID...");
 8004716:	483f      	ldr	r0, [pc, #252]	; (8004814 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x13c>)
 8004718:	f7fc fcf6 	bl	8001108 <print>
	if (whoamI != address){
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004722:	79fa      	ldrb	r2, [r7, #7]
 8004724:	429a      	cmp	r2, r3
 8004726:	d018      	beq.n	800475a <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x82>
	  println((char*) "NOT OK");
 8004728:	483b      	ldr	r0, [pc, #236]	; (8004818 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x140>)
 800472a:	f7fc fccf 	bl	80010cc <println>
	  print((char*) "\tThis Device is: ");
 800472e:	483b      	ldr	r0, [pc, #236]	; (800481c <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x144>)
 8004730:	f7fc fcea 	bl	8001108 <print>

	  char buffer[10];
	  sprintf(buffer, "%X\r\n", whoamI);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800473a:	461a      	mov	r2, r3
 800473c:	f107 0314 	add.w	r3, r7, #20
 8004740:	4937      	ldr	r1, [pc, #220]	; (8004820 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x148>)
 8004742:	4618      	mov	r0, r3
 8004744:	f00f fb2a 	bl	8013d9c <siprintf>
	  print(buffer);
 8004748:	f107 0314 	add.w	r3, r7, #20
 800474c:	4618      	mov	r0, r3
 800474e:	f7fc fcdb 	bl	8001108 <print>

	  println((char*) "\n\rProgram Terminated\n\r");
 8004752:	4834      	ldr	r0, [pc, #208]	; (8004824 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x14c>)
 8004754:	f7fc fcba 	bl	80010cc <println>
	  while(1);
 8004758:	e7fe      	b.n	8004758 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x80>
	}
	println((char*) "OK");
 800475a:	4833      	ldr	r0, [pc, #204]	; (8004828 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x150>)
 800475c:	f7fc fcb6 	bl	80010cc <println>

	/* Restore default configuration */
	print((char*) "\tRestore default configuration...");
 8004760:	4832      	ldr	r0, [pc, #200]	; (800482c <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x154>)
 8004762:	f7fc fcd1 	bl	8001108 <print>
	lsm6dsr_reset_set(&ctx, PROPERTY_ENABLE);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	331c      	adds	r3, #28
 800476a:	2101      	movs	r1, #1
 800476c:	4618      	mov	r0, r3
 800476e:	f001 fad4 	bl	8005d1a <lsm6dsr_reset_set>
	HAL_Delay(500);
 8004772:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004776:	f005 f8fd 	bl	8009974 <HAL_Delay>
	do {
	lsm6dsr_reset_get(&ctx, &rst);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f103 021c 	add.w	r2, r3, #28
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	3339      	adds	r3, #57	; 0x39
 8004784:	4619      	mov	r1, r3
 8004786:	4610      	mov	r0, r2
 8004788:	f001 faed 	bl	8005d66 <lsm6dsr_reset_get>
	} while (rst);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004792:	2b00      	cmp	r3, #0
 8004794:	d000      	beq.n	8004798 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0xc0>
	do {
 8004796:	e7f0      	b.n	800477a <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0xa2>
	println((char*) "OK");
 8004798:	4823      	ldr	r0, [pc, #140]	; (8004828 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x150>)
 800479a:	f7fc fc97 	bl	80010cc <println>

	/* Disable I3C interface */
    lsm6dsr_i3c_disable_set(&ctx, LSM6DSR_I3C_DISABLE);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	331c      	adds	r3, #28
 80047a2:	2180      	movs	r1, #128	; 0x80
 80047a4:	4618      	mov	r0, r3
 80047a6:	f001 fb55 	bl	8005e54 <lsm6dsr_i3c_disable_set>

	/* Enable Block Data Update */
	lsm6dsr_block_data_update_set(&ctx, PROPERTY_ENABLE);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	331c      	adds	r3, #28
 80047ae:	2101      	movs	r1, #1
 80047b0:	4618      	mov	r0, r3
 80047b2:	f001 f951 	bl	8005a58 <lsm6dsr_block_data_update_set>
	/* Set Output Data Rate */
	lsm6dsr_xl_data_rate_set(&ctx, LSM6DSR_XL_ODR_12Hz5);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	331c      	adds	r3, #28
 80047ba:	2101      	movs	r1, #1
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 ff2d 	bl	800561c <lsm6dsr_xl_data_rate_set>
	lsm6dsr_gy_data_rate_set(&ctx, LSM6DSR_GY_ODR_12Hz5);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	331c      	adds	r3, #28
 80047c6:	2101      	movs	r1, #1
 80047c8:	4618      	mov	r0, r3
 80047ca:	f001 f849 	bl	8005860 <lsm6dsr_gy_data_rate_set>
	/* Set full scale */
	lsm6dsr_xl_full_scale_set(&ctx, LSM6DSR_2g);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	331c      	adds	r3, #28
 80047d2:	2100      	movs	r1, #0
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 fefb 	bl	80055d0 <lsm6dsr_xl_full_scale_set>
	lsm6dsr_gy_full_scale_set(&ctx, LSM6DSR_2000dps);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	331c      	adds	r3, #28
 80047de:	210c      	movs	r1, #12
 80047e0:	4618      	mov	r0, r3
 80047e2:	f001 f817 	bl	8005814 <lsm6dsr_gy_full_scale_set>
	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsr_xl_hp_path_on_out_set(&ctx, LSM6DSR_LP_ODR_DIV_100);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	331c      	adds	r3, #28
 80047ea:	2104      	movs	r1, #4
 80047ec:	4618      	mov	r0, r3
 80047ee:	f001 faf9 	bl	8005de4 <lsm6dsr_xl_hp_path_on_out_set>
	lsm6dsr_xl_filter_lp2_set(&ctx, PROPERTY_ENABLE);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	331c      	adds	r3, #28
 80047f6:	2101      	movs	r1, #1
 80047f8:	4618      	mov	r0, r3
 80047fa:	f001 facd 	bl	8005d98 <lsm6dsr_xl_filter_lp2_set>
}
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4618      	mov	r0, r3
 8004802:	3720      	adds	r7, #32
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	080191f4 	.word	0x080191f4
 800480c:	080049bf 	.word	0x080049bf
 8004810:	080049f9 	.word	0x080049f9
 8004814:	08019204 	.word	0x08019204
 8004818:	0801921c 	.word	0x0801921c
 800481c:	08019224 	.word	0x08019224
 8004820:	08019238 	.word	0x08019238
 8004824:	08019240 	.word	0x08019240
 8004828:	08019258 	.word	0x08019258
 800482c:	0801925c 	.word	0x0801925c

08004830 <_ZN7LSM6DSR15getAccelerationEv>:


float* LSM6DSR::getAcceleration(void){
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
	lsm6dsr_xl_flag_data_ready_get(&ctx, &reg);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f103 021c 	add.w	r2, r3, #28
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	3328      	adds	r3, #40	; 0x28
 8004842:	4619      	mov	r1, r3
 8004844:	4610      	mov	r0, r2
 8004846:	f001 f92d 	bl	8005aa4 <lsm6dsr_xl_flag_data_ready_get>

	if (reg){
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004850:	2b00      	cmp	r3, #0
 8004852:	d030      	beq.n	80048b6 <_ZN7LSM6DSR15getAccelerationEv+0x86>
		// Read magnetic field data
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	332a      	adds	r3, #42	; 0x2a
 8004858:	2206      	movs	r2, #6
 800485a:	2100      	movs	r1, #0
 800485c:	4618      	mov	r0, r3
 800485e:	f00d ffa1 	bl	80127a4 <memset>
		lsm6dsr_acceleration_raw_get(&ctx, data_raw_acceleration);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f103 021c 	add.w	r2, r3, #28
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	332a      	adds	r3, #42	; 0x2a
 800486c:	4619      	mov	r1, r3
 800486e:	4610      	mov	r0, r2
 8004870:	f001 f9d1 	bl	8005c16 <lsm6dsr_acceleration_raw_get>
		acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[0]);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fe5c 	bl	8005538 <lsm6dsr_from_fs2g_to_mg>
 8004880:	eef0 7a40 	vmov.f32	s15, s0
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	edc3 7a00 	vstr	s15, [r3]
		acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[1]);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8004890:	4618      	mov	r0, r3
 8004892:	f000 fe51 	bl	8005538 <lsm6dsr_from_fs2g_to_mg>
 8004896:	eef0 7a40 	vmov.f32	s15, s0
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	edc3 7a01 	vstr	s15, [r3, #4]
		acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[2]);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 fe46 	bl	8005538 <lsm6dsr_from_fs2g_to_mg>
 80048ac:	eef0 7a40 	vmov.f32	s15, s0
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	return acceleration_mg;
 80048b6:	687b      	ldr	r3, [r7, #4]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <_ZN7LSM6DSR14getTemperatureEv>:


float LSM6DSR::getTemperature(void){
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
    lsm6dsr_temp_flag_data_ready_get(&ctx, &reg);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f103 021c 	add.w	r2, r3, #28
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	3328      	adds	r3, #40	; 0x28
 80048d2:	4619      	mov	r1, r3
 80048d4:	4610      	mov	r0, r2
 80048d6:	f001 f917 	bl	8005b08 <lsm6dsr_temp_flag_data_ready_get>

    if (reg){
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d01a      	beq.n	800491a <_ZN7LSM6DSR14getTemperatureEv+0x5a>
		// Read temperature data
		memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3336      	adds	r3, #54	; 0x36
 80048e8:	2202      	movs	r2, #2
 80048ea:	2100      	movs	r1, #0
 80048ec:	4618      	mov	r0, r3
 80048ee:	f00d ff59 	bl	80127a4 <memset>
		lsm6dsr_temperature_raw_get(&ctx, &data_raw_temperature);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f103 021c 	add.w	r2, r3, #28
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	3336      	adds	r3, #54	; 0x36
 80048fc:	4619      	mov	r1, r3
 80048fe:	4610      	mov	r0, r2
 8004900:	f001 f91b 	bl	8005b3a <lsm6dsr_temperature_raw_get>
		temperature_degC = lsm6dsr_from_lsb_to_celsius(data_raw_temperature);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800490a:	4618      	mov	r0, r3
 800490c:	f000 fe44 	bl	8005598 <lsm6dsr_from_lsb_to_celsius>
 8004910:	eef0 7a40 	vmov.f32	s15, s0
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	edc3 7a06 	vstr	s15, [r3, #24]
	}
    return temperature_degC;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	ee07 3a90 	vmov	s15, r3
}
 8004922:	eeb0 0a67 	vmov.f32	s0, s15
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <_ZN7LSM6DSR14getAngularRateEv>:


float* LSM6DSR::getAngularRate(void){
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
    lsm6dsr_gy_flag_data_ready_get(&ctx, &reg);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f103 021c 	add.w	r2, r3, #28
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	3328      	adds	r3, #40	; 0x28
 800493e:	4619      	mov	r1, r3
 8004940:	4610      	mov	r0, r2
 8004942:	f001 f8c8 	bl	8005ad6 <lsm6dsr_gy_flag_data_ready_get>

    if (reg){
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800494c:	2b00      	cmp	r3, #0
 800494e:	d030      	beq.n	80049b2 <_ZN7LSM6DSR14getAngularRateEv+0x86>
		// Read magnetic field data
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	3330      	adds	r3, #48	; 0x30
 8004954:	2206      	movs	r2, #6
 8004956:	2100      	movs	r1, #0
 8004958:	4618      	mov	r0, r3
 800495a:	f00d ff23 	bl	80127a4 <memset>
		lsm6dsr_angular_rate_raw_get(&ctx, data_raw_angular_rate);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f103 021c 	add.w	r2, r3, #28
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	3330      	adds	r3, #48	; 0x30
 8004968:	4619      	mov	r1, r3
 800496a:	4610      	mov	r0, r2
 800496c:	f001 f908 	bl	8005b80 <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fdf6 	bl	8005568 <lsm6dsr_from_fs2000dps_to_mdps>
 800497c:	eef0 7a40 	vmov.f32	s15, s0
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	edc3 7a03 	vstr	s15, [r3, #12]
		angular_rate_mdps[1] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800498c:	4618      	mov	r0, r3
 800498e:	f000 fdeb 	bl	8005568 <lsm6dsr_from_fs2000dps_to_mdps>
 8004992:	eef0 7a40 	vmov.f32	s15, s0
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	edc3 7a04 	vstr	s15, [r3, #16]
		angular_rate_mdps[2] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fde0 	bl	8005568 <lsm6dsr_from_fs2000dps_to_mdps>
 80049a8:	eef0 7a40 	vmov.f32	s15, s0
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	edc3 7a05 	vstr	s15, [r3, #20]
		fs500dps_to_mdps
		fs1000dps_to_mdps
		fs2000dps_to_mdps
		*/
	}
    return angular_rate_mdps;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	330c      	adds	r3, #12
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <_ZN7LSM6DSR5writeEPvhPKht>:


int32_t LSM6DSR::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 80049be:	b580      	push	{r7, lr}
 80049c0:	b088      	sub	sp, #32
 80049c2:	af04      	add	r7, sp, #16
 80049c4:	60f8      	str	r0, [r7, #12]
 80049c6:	607a      	str	r2, [r7, #4]
 80049c8:	461a      	mov	r2, r3
 80049ca:	460b      	mov	r3, r1
 80049cc:	72fb      	strb	r3, [r7, #11]
 80049ce:	4613      	mov	r3, r2
 80049d0:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 80049d2:	7afb      	ldrb	r3, [r7, #11]
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049da:	9302      	str	r3, [sp, #8]
 80049dc:	893b      	ldrh	r3, [r7, #8]
 80049de:	9301      	str	r3, [sp, #4]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	2301      	movs	r3, #1
 80049e6:	21d5      	movs	r1, #213	; 0xd5
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f005 fea7 	bl	800a73c <HAL_I2C_Mem_Write>
  return 0;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <_ZN7LSM6DSR4readEPvhPht>:

int32_t LSM6DSR::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b088      	sub	sp, #32
 80049fc:	af04      	add	r7, sp, #16
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	607a      	str	r2, [r7, #4]
 8004a02:	461a      	mov	r2, r3
 8004a04:	460b      	mov	r3, r1
 8004a06:	72fb      	strb	r3, [r7, #11]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8004a0c:	7afb      	ldrb	r3, [r7, #11]
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a14:	9302      	str	r3, [sp, #8]
 8004a16:	893b      	ldrh	r3, [r7, #8]
 8004a18:	9301      	str	r3, [sp, #4]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	2301      	movs	r3, #1
 8004a20:	21d5      	movs	r1, #213	; 0xd5
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f005 ff84 	bl	800a930 <HAL_I2C_Mem_Read>
  return 0;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
	...

08004a34 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh>:

//**************************************************//
/*****LPS22HH*****/


LPS22HH::LPS22HH(I2C_HandleTypeDef* i2c_bus, uint8_t address){
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b088      	sub	sp, #32
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	71fb      	strb	r3, [r7, #7]
	println((char*) "\r\nLPS22HH Init");
 8004a42:	4836      	ldr	r0, [pc, #216]	; (8004b1c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xe8>)
 8004a44:	f7fc fb42 	bl	80010cc <println>

	/* Initialize mems driver interface */
	ctx.write_reg = write;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4a35      	ldr	r2, [pc, #212]	; (8004b20 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xec>)
 8004a4c:	609a      	str	r2, [r3, #8]
	ctx.read_reg = read;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	4a34      	ldr	r2, [pc, #208]	; (8004b24 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf0>)
 8004a52:	60da      	str	r2, [r3, #12]
	ctx.handle = i2c_bus;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	611a      	str	r2, [r3, #16]
	/* Wait sensor boot time */
	HAL_Delay(LPS22HH_BOOT_TIME);
 8004a5a:	2064      	movs	r0, #100	; 0x64
 8004a5c:	f004 ff8a 	bl	8009974 <HAL_Delay>
	/* Check device ID */
	whoamI = 0;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	779a      	strb	r2, [r3, #30]
	lps22hh_device_id_get(&ctx, &whoamI);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f103 0208 	add.w	r2, r3, #8
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	331e      	adds	r3, #30
 8004a70:	4619      	mov	r1, r3
 8004a72:	4610      	mov	r0, r2
 8004a74:	f000 fce0 	bl	8005438 <lps22hh_device_id_get>


	print((char*) "\tChecking Sensor ID...");
 8004a78:	482b      	ldr	r0, [pc, #172]	; (8004b28 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf4>)
 8004a7a:	f7fc fb45 	bl	8001108 <print>
	if ( whoamI != address ){
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	7f9b      	ldrb	r3, [r3, #30]
 8004a82:	79fa      	ldrb	r2, [r7, #7]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d017      	beq.n	8004ab8 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x84>
	  println((char*) "NOT OK");
 8004a88:	4828      	ldr	r0, [pc, #160]	; (8004b2c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf8>)
 8004a8a:	f7fc fb1f 	bl	80010cc <println>
	  print((char*) "\tThis Device is: ");
 8004a8e:	4828      	ldr	r0, [pc, #160]	; (8004b30 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xfc>)
 8004a90:	f7fc fb3a 	bl	8001108 <print>

	  char buffer[10];
	  sprintf(buffer, "%X\r\n", whoamI);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	7f9b      	ldrb	r3, [r3, #30]
 8004a98:	461a      	mov	r2, r3
 8004a9a:	f107 0314 	add.w	r3, r7, #20
 8004a9e:	4925      	ldr	r1, [pc, #148]	; (8004b34 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x100>)
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f00f f97b 	bl	8013d9c <siprintf>
	  print(buffer);
 8004aa6:	f107 0314 	add.w	r3, r7, #20
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7fc fb2c 	bl	8001108 <print>

	  println((char*) "\n\rProgram Terminated\n\r");
 8004ab0:	4821      	ldr	r0, [pc, #132]	; (8004b38 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x104>)
 8004ab2:	f7fc fb0b 	bl	80010cc <println>
	  while(1);
 8004ab6:	e7fe      	b.n	8004ab6 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x82>
	}
	println((char*) "OK");
 8004ab8:	4820      	ldr	r0, [pc, #128]	; (8004b3c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x108>)
 8004aba:	f7fc fb07 	bl	80010cc <println>

	/* Restore default configuration */
	print((char*) "\tRestore default configuration...");
 8004abe:	4820      	ldr	r0, [pc, #128]	; (8004b40 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x10c>)
 8004ac0:	f7fc fb22 	bl	8001108 <print>
	lps22hh_reset_set(&ctx, PROPERTY_ENABLE);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	3308      	adds	r3, #8
 8004ac8:	2101      	movs	r1, #1
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 fcc5 	bl	800545a <lps22hh_reset_set>
	HAL_Delay(500);
 8004ad0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004ad4:	f004 ff4e 	bl	8009974 <HAL_Delay>
	do {
	lps22hh_reset_get(&ctx, &rst);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f103 0208 	add.w	r2, r3, #8
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	331f      	adds	r3, #31
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	4610      	mov	r0, r2
 8004ae6:	f000 fcde 	bl	80054a6 <lps22hh_reset_get>
	} while (rst);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	7fdb      	ldrb	r3, [r3, #31]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d000      	beq.n	8004af4 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xc0>
	do {
 8004af2:	e7f1      	b.n	8004ad8 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xa4>
	println((char*) "OK");
 8004af4:	4811      	ldr	r0, [pc, #68]	; (8004b3c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x108>)
 8004af6:	f7fc fae9 	bl	80010cc <println>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&ctx, PROPERTY_ENABLE);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	3308      	adds	r3, #8
 8004afe:	2101      	movs	r1, #1
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fba7 	bl	8005254 <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&ctx, LPS22HH_75_Hz_LOW_NOISE);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	3308      	adds	r3, #8
 8004b0a:	2115      	movs	r1, #21
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f000 fbc7 	bl	80052a0 <lps22hh_data_rate_set>
}
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	4618      	mov	r0, r3
 8004b16:	3720      	adds	r7, #32
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	08019280 	.word	0x08019280
 8004b20:	08004c17 	.word	0x08004c17
 8004b24:	08004c51 	.word	0x08004c51
 8004b28:	08019204 	.word	0x08019204
 8004b2c:	0801921c 	.word	0x0801921c
 8004b30:	08019224 	.word	0x08019224
 8004b34:	08019238 	.word	0x08019238
 8004b38:	08019240 	.word	0x08019240
 8004b3c:	08019258 	.word	0x08019258
 8004b40:	0801925c 	.word	0x0801925c

08004b44 <_ZN7LPS22HH11getPressureEv>:



float LPS22HH::getPressure(void){
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
	/* Read output only if new value is available */
	lps22hh_press_flag_data_ready_get(&ctx, &reg);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f103 0208 	add.w	r2, r3, #8
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	3314      	adds	r3, #20
 8004b56:	4619      	mov	r1, r3
 8004b58:	4610      	mov	r0, r2
 8004b5a:	f000 fbef 	bl	800533c <lps22hh_press_flag_data_ready_get>

	if (reg) {
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	7d1b      	ldrb	r3, [r3, #20]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d019      	beq.n	8004b9a <_ZN7LPS22HH11getPressureEv+0x56>
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	3318      	adds	r3, #24
 8004b6a:	2204      	movs	r2, #4
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f00d fe18 	bl	80127a4 <memset>
	  lps22hh_pressure_raw_get(&ctx, &data_raw_pressure);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f103 0208 	add.w	r2, r3, #8
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	3318      	adds	r3, #24
 8004b7e:	4619      	mov	r1, r3
 8004b80:	4610      	mov	r0, r2
 8004b82:	f000 fc0d 	bl	80053a0 <lps22hh_pressure_raw_get>
	  pressure_hPa = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 fb30 	bl	80051f0 <lps22hh_from_lsb_to_hpa>
 8004b90:	eef0 7a40 	vmov.f32	s15, s0
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	edc3 7a00 	vstr	s15, [r3]
	}
	return pressure_hPa;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	ee07 3a90 	vmov	s15, r3
}
 8004ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <_ZN7LPS22HH14getTemperatureEv>:


float LPS22HH::getTemperature(void){
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
	/* Read output only if new value is available */
	lps22hh_temp_flag_data_ready_get(&ctx, &reg);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f103 0208 	add.w	r2, r3, #8
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	3314      	adds	r3, #20
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	f000 fbd4 	bl	800536e <lps22hh_temp_flag_data_ready_get>

	if (reg) {
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	7d1b      	ldrb	r3, [r3, #20]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d01a      	beq.n	8004c04 <_ZN7LPS22HH14getTemperatureEv+0x58>
	  memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	331c      	adds	r3, #28
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f00d fde4 	bl	80127a4 <memset>
	  lps22hh_temperature_raw_get(&ctx, &data_raw_temperature);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f103 0208 	add.w	r2, r3, #8
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	331c      	adds	r3, #28
 8004be6:	4619      	mov	r1, r3
 8004be8:	4610      	mov	r0, r2
 8004bea:	f000 fc02 	bl	80053f2 <lps22hh_temperature_raw_get>
	  temperature_degC = lps22hh_from_lsb_to_celsius(data_raw_temperature);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 fb13 	bl	8005220 <lps22hh_from_lsb_to_celsius>
 8004bfa:	eef0 7a40 	vmov.f32	s15, s0
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	return temperature_degC;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	ee07 3a90 	vmov	s15, r3
}
 8004c0c:	eeb0 0a67 	vmov.f32	s0, s15
 8004c10:	3708      	adds	r7, #8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <_ZN7LPS22HH5writeEPvhPKht>:



int32_t LPS22HH::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b088      	sub	sp, #32
 8004c1a:	af04      	add	r7, sp, #16
 8004c1c:	60f8      	str	r0, [r7, #12]
 8004c1e:	607a      	str	r2, [r7, #4]
 8004c20:	461a      	mov	r2, r3
 8004c22:	460b      	mov	r3, r1
 8004c24:	72fb      	strb	r3, [r7, #11]
 8004c26:	4613      	mov	r3, r2
 8004c28:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8004c2a:	7afb      	ldrb	r3, [r7, #11]
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c32:	9302      	str	r3, [sp, #8]
 8004c34:	893b      	ldrh	r3, [r7, #8]
 8004c36:	9301      	str	r3, [sp, #4]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	21b9      	movs	r1, #185	; 0xb9
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f005 fd7b 	bl	800a73c <HAL_I2C_Mem_Write>
  return 0;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <_ZN7LPS22HH4readEPvhPht>:

int32_t LPS22HH::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b088      	sub	sp, #32
 8004c54:	af04      	add	r7, sp, #16
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	607a      	str	r2, [r7, #4]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	72fb      	strb	r3, [r7, #11]
 8004c60:	4613      	mov	r3, r2
 8004c62:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8004c64:	7afb      	ldrb	r3, [r7, #11]
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c6c:	9302      	str	r3, [sp, #8]
 8004c6e:	893b      	ldrh	r3, [r7, #8]
 8004c70:	9301      	str	r3, [sp, #4]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	2301      	movs	r3, #1
 8004c78:	21b9      	movs	r1, #185	; 0xb9
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f005 fe58 	bl	800a930 <HAL_I2C_Mem_Read>
  return 0;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
	...

08004c8c <GPS_Poll>:
#define LED3_GPIO_Port	((GPIO_TypeDef *) ((0x40000000UL + 0x00020000UL) + 0x0800UL))//OUT_LED3_GPIO_Port
#define LED3_Pin	(uint16_t)0x0008//OUT_LED3_Pin


void GPS_Poll(float *latitude, float *longitude, float *time)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b08c      	sub	sp, #48	; 0x30
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 8004c98:	2364      	movs	r3, #100	; 0x64
 8004c9a:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 8004ca4:	e073      	b.n	8004d8e <GPS_Poll+0x102>
		HAL_UART_Receive(GPS.uart, (uint8_t*)&rx_current, 1, 100);
 8004ca6:	4b3f      	ldr	r3, [pc, #252]	; (8004da4 <GPS_Poll+0x118>)
 8004ca8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8004caa:	2364      	movs	r3, #100	; 0x64
 8004cac:	2201      	movs	r2, #1
 8004cae:	493e      	ldr	r1, [pc, #248]	; (8004da8 <GPS_Poll+0x11c>)
 8004cb0:	f009 ff43 	bl	800eb3a <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 8004cb4:	4b3c      	ldr	r3, [pc, #240]	; (8004da8 <GPS_Poll+0x11c>)
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	2b0a      	cmp	r3, #10
 8004cba:	d00f      	beq.n	8004cdc <GPS_Poll+0x50>
 8004cbc:	4b3b      	ldr	r3, [pc, #236]	; (8004dac <GPS_Poll+0x120>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	2b63      	cmp	r3, #99	; 0x63
 8004cc2:	d80b      	bhi.n	8004cdc <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 8004cc4:	4b39      	ldr	r3, [pc, #228]	; (8004dac <GPS_Poll+0x120>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	b2d1      	uxtb	r1, r2
 8004ccc:	4a37      	ldr	r2, [pc, #220]	; (8004dac <GPS_Poll+0x120>)
 8004cce:	7011      	strb	r1, [r2, #0]
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	4b35      	ldr	r3, [pc, #212]	; (8004da8 <GPS_Poll+0x11c>)
 8004cd4:	7819      	ldrb	r1, [r3, #0]
 8004cd6:	4b36      	ldr	r3, [pc, #216]	; (8004db0 <GPS_Poll+0x124>)
 8004cd8:	5499      	strb	r1, [r3, r2]
 8004cda:	e021      	b.n	8004d20 <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 8004cdc:	4834      	ldr	r0, [pc, #208]	; (8004db0 <GPS_Poll+0x124>)
 8004cde:	f000 f869 	bl	8004db4 <GPS_validate>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d013      	beq.n	8004d10 <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 8004ce8:	4831      	ldr	r0, [pc, #196]	; (8004db0 <GPS_Poll+0x124>)
 8004cea:	f000 f8c5 	bl	8004e78 <GPS_parse>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00d      	beq.n	8004d10 <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 8004cf4:	4b2b      	ldr	r3, [pc, #172]	; (8004da4 <GPS_Poll+0x118>)
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 8004cfc:	4b29      	ldr	r3, [pc, #164]	; (8004da4 <GPS_Poll+0x118>)
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 8004d04:	4b27      	ldr	r3, [pc, #156]	; (8004da4 <GPS_Poll+0x118>)
 8004d06:	695a      	ldr	r2, [r3, #20]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	601a      	str	r2, [r3, #0]
					done = 1;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 8004d10:	4b26      	ldr	r3, [pc, #152]	; (8004dac <GPS_Poll+0x120>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 8004d16:	2264      	movs	r2, #100	; 0x64
 8004d18:	2100      	movs	r1, #0
 8004d1a:	4825      	ldr	r0, [pc, #148]	; (8004db0 <GPS_Poll+0x124>)
 8004d1c:	f00d fd42 	bl	80127a4 <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS.uart);
 8004d20:	2300      	movs	r3, #0
 8004d22:	623b      	str	r3, [r7, #32]
 8004d24:	4b1f      	ldr	r3, [pc, #124]	; (8004da4 <GPS_Poll+0x118>)
 8004d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	623b      	str	r3, [r7, #32]
 8004d2e:	4b1d      	ldr	r3, [pc, #116]	; (8004da4 <GPS_Poll+0x118>)
 8004d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	623b      	str	r3, [r7, #32]
 8004d38:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS.uart);
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	61fb      	str	r3, [r7, #28]
 8004d3e:	4b19      	ldr	r3, [pc, #100]	; (8004da4 <GPS_Poll+0x118>)
 8004d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	61fb      	str	r3, [r7, #28]
 8004d48:	4b16      	ldr	r3, [pc, #88]	; (8004da4 <GPS_Poll+0x118>)
 8004d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	61fb      	str	r3, [r7, #28]
 8004d52:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS.uart);
 8004d54:	2300      	movs	r3, #0
 8004d56:	61bb      	str	r3, [r7, #24]
 8004d58:	4b12      	ldr	r3, [pc, #72]	; (8004da4 <GPS_Poll+0x118>)
 8004d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	61bb      	str	r3, [r7, #24]
 8004d62:	4b10      	ldr	r3, [pc, #64]	; (8004da4 <GPS_Poll+0x118>)
 8004d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	61bb      	str	r3, [r7, #24]
 8004d6c:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS.uart);
 8004d6e:	2300      	movs	r3, #0
 8004d70:	617b      	str	r3, [r7, #20]
 8004d72:	4b0c      	ldr	r3, [pc, #48]	; (8004da4 <GPS_Poll+0x118>)
 8004d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	617b      	str	r3, [r7, #20]
 8004d7c:	4b09      	ldr	r3, [pc, #36]	; (8004da4 <GPS_Poll+0x118>)
 8004d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	617b      	str	r3, [r7, #20]
 8004d86:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 8004d88:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 8004d8e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004d90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d202      	bcs.n	8004d9c <GPS_Poll+0x110>
 8004d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d084      	beq.n	8004ca6 <GPS_Poll+0x1a>
	}
}
 8004d9c:	bf00      	nop
 8004d9e:	3730      	adds	r7, #48	; 0x30
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	20005f6c 	.word	0x20005f6c
 8004da8:	200003e4 	.word	0x200003e4
 8004dac:	200003e5 	.word	0x200003e5
 8004db0:	20005fd0 	.word	0x20005fd0

08004db4 <GPS_validate>:

int GPS_validate(char *nmeastr){
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	4413      	add	r3, r2
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b24      	cmp	r3, #36	; 0x24
 8004dce:	d103      	bne.n	8004dd8 <GPS_validate+0x24>
        i++;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8004dd6:	e00c      	b.n	8004df2 <GPS_validate+0x3e>
        return 0;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	e047      	b.n	8004e6c <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	4413      	add	r3, r2
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	461a      	mov	r2, r3
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	4053      	eors	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]
        i++;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	3301      	adds	r3, #1
 8004df0:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	4413      	add	r3, r2
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d008      	beq.n	8004e10 <GPS_validate+0x5c>
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	4413      	add	r3, r2
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	2b2a      	cmp	r3, #42	; 0x2a
 8004e08:	d002      	beq.n	8004e10 <GPS_validate+0x5c>
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2b4a      	cmp	r3, #74	; 0x4a
 8004e0e:	dde5      	ble.n	8004ddc <GPS_validate+0x28>
    }

    if(i >= 75){
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2b4a      	cmp	r3, #74	; 0x4a
 8004e14:	dd01      	ble.n	8004e1a <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 8004e16:	2300      	movs	r3, #0
 8004e18:	e028      	b.n	8004e6c <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	4413      	add	r3, r2
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	2b2a      	cmp	r3, #42	; 0x2a
 8004e24:	d119      	bne.n	8004e5a <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	3302      	adds	r3, #2
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	4413      	add	r3, r2
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8004e42:	f107 0308 	add.w	r3, r7, #8
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	490a      	ldr	r1, [pc, #40]	; (8004e74 <GPS_validate+0xc0>)
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f00e ffa6 	bl	8013d9c <siprintf>
    return((checkcalcstr[0] == check[0])
 8004e50:	7a3a      	ldrb	r2, [r7, #8]
 8004e52:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d108      	bne.n	8004e6a <GPS_validate+0xb6>
 8004e58:	e001      	b.n	8004e5e <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	e006      	b.n	8004e6c <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8004e5e:	7a7a      	ldrb	r2, [r7, #9]
 8004e60:	7b7b      	ldrb	r3, [r7, #13]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d101      	bne.n	8004e6a <GPS_validate+0xb6>
 8004e66:	2301      	movs	r3, #1
 8004e68:	e000      	b.n	8004e6c <GPS_validate+0xb8>
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3718      	adds	r7, #24
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	08019290 	.word	0x08019290

08004e78 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b08a      	sub	sp, #40	; 0x28
 8004e7c:	af08      	add	r7, sp, #32
 8004e7e:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 8004e80:	2206      	movs	r2, #6
 8004e82:	496d      	ldr	r1, [pc, #436]	; (8005038 <GPS_parse+0x1c0>)
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f00f f82f 	bl	8013ee8 <strncmp>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d139      	bne.n	8004f04 <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8004e90:	4b6a      	ldr	r3, [pc, #424]	; (800503c <GPS_parse+0x1c4>)
 8004e92:	9307      	str	r3, [sp, #28]
 8004e94:	4b6a      	ldr	r3, [pc, #424]	; (8005040 <GPS_parse+0x1c8>)
 8004e96:	9306      	str	r3, [sp, #24]
 8004e98:	4b6a      	ldr	r3, [pc, #424]	; (8005044 <GPS_parse+0x1cc>)
 8004e9a:	9305      	str	r3, [sp, #20]
 8004e9c:	4b6a      	ldr	r3, [pc, #424]	; (8005048 <GPS_parse+0x1d0>)
 8004e9e:	9304      	str	r3, [sp, #16]
 8004ea0:	4b6a      	ldr	r3, [pc, #424]	; (800504c <GPS_parse+0x1d4>)
 8004ea2:	9303      	str	r3, [sp, #12]
 8004ea4:	4b6a      	ldr	r3, [pc, #424]	; (8005050 <GPS_parse+0x1d8>)
 8004ea6:	9302      	str	r3, [sp, #8]
 8004ea8:	4b6a      	ldr	r3, [pc, #424]	; (8005054 <GPS_parse+0x1dc>)
 8004eaa:	9301      	str	r3, [sp, #4]
 8004eac:	4b6a      	ldr	r3, [pc, #424]	; (8005058 <GPS_parse+0x1e0>)
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	4b6a      	ldr	r3, [pc, #424]	; (800505c <GPS_parse+0x1e4>)
 8004eb2:	4a6b      	ldr	r2, [pc, #428]	; (8005060 <GPS_parse+0x1e8>)
 8004eb4:	496b      	ldr	r1, [pc, #428]	; (8005064 <GPS_parse+0x1ec>)
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f00e ff90 	bl	8013ddc <siscanf>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f340 80b5 	ble.w	800502e <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8004ec4:	4b68      	ldr	r3, [pc, #416]	; (8005068 <GPS_parse+0x1f0>)
 8004ec6:	edd3 7a04 	vldr	s15, [r3, #16]
 8004eca:	4b67      	ldr	r3, [pc, #412]	; (8005068 <GPS_parse+0x1f0>)
 8004ecc:	7e1b      	ldrb	r3, [r3, #24]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8004ed4:	f000 f8ec 	bl	80050b0 <GPS_nmea_to_dec>
 8004ed8:	eef0 7a40 	vmov.f32	s15, s0
 8004edc:	4b62      	ldr	r3, [pc, #392]	; (8005068 <GPS_parse+0x1f0>)
 8004ede:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8004ee2:	4b61      	ldr	r3, [pc, #388]	; (8005068 <GPS_parse+0x1f0>)
 8004ee4:	edd3 7a03 	vldr	s15, [r3, #12]
 8004ee8:	4b5f      	ldr	r3, [pc, #380]	; (8005068 <GPS_parse+0x1f0>)
 8004eea:	7e5b      	ldrb	r3, [r3, #25]
 8004eec:	4618      	mov	r0, r3
 8004eee:	eeb0 0a67 	vmov.f32	s0, s15
 8004ef2:	f000 f8dd 	bl	80050b0 <GPS_nmea_to_dec>
 8004ef6:	eef0 7a40 	vmov.f32	s15, s0
 8004efa:	4b5b      	ldr	r3, [pc, #364]	; (8005068 <GPS_parse+0x1f0>)
 8004efc:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e095      	b.n	8005030 <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 8004f04:	2206      	movs	r2, #6
 8004f06:	4959      	ldr	r1, [pc, #356]	; (800506c <GPS_parse+0x1f4>)
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f00e ffed 	bl	8013ee8 <strncmp>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d134      	bne.n	8004f7e <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 8004f14:	4b56      	ldr	r3, [pc, #344]	; (8005070 <GPS_parse+0x1f8>)
 8004f16:	9305      	str	r3, [sp, #20]
 8004f18:	4b56      	ldr	r3, [pc, #344]	; (8005074 <GPS_parse+0x1fc>)
 8004f1a:	9304      	str	r3, [sp, #16]
 8004f1c:	4b56      	ldr	r3, [pc, #344]	; (8005078 <GPS_parse+0x200>)
 8004f1e:	9303      	str	r3, [sp, #12]
 8004f20:	4b4b      	ldr	r3, [pc, #300]	; (8005050 <GPS_parse+0x1d8>)
 8004f22:	9302      	str	r3, [sp, #8]
 8004f24:	4b4b      	ldr	r3, [pc, #300]	; (8005054 <GPS_parse+0x1dc>)
 8004f26:	9301      	str	r3, [sp, #4]
 8004f28:	4b4b      	ldr	r3, [pc, #300]	; (8005058 <GPS_parse+0x1e0>)
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	4b4b      	ldr	r3, [pc, #300]	; (800505c <GPS_parse+0x1e4>)
 8004f2e:	4a4c      	ldr	r2, [pc, #304]	; (8005060 <GPS_parse+0x1e8>)
 8004f30:	4952      	ldr	r1, [pc, #328]	; (800507c <GPS_parse+0x204>)
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f00e ff52 	bl	8013ddc <siscanf>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	dd77      	ble.n	800502e <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8004f3e:	4b4a      	ldr	r3, [pc, #296]	; (8005068 <GPS_parse+0x1f0>)
 8004f40:	edd3 7a04 	vldr	s15, [r3, #16]
 8004f44:	4b48      	ldr	r3, [pc, #288]	; (8005068 <GPS_parse+0x1f0>)
 8004f46:	7e1b      	ldrb	r3, [r3, #24]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f4e:	f000 f8af 	bl	80050b0 <GPS_nmea_to_dec>
 8004f52:	eef0 7a40 	vmov.f32	s15, s0
 8004f56:	4b44      	ldr	r3, [pc, #272]	; (8005068 <GPS_parse+0x1f0>)
 8004f58:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8004f5c:	4b42      	ldr	r3, [pc, #264]	; (8005068 <GPS_parse+0x1f0>)
 8004f5e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004f62:	4b41      	ldr	r3, [pc, #260]	; (8005068 <GPS_parse+0x1f0>)
 8004f64:	7e5b      	ldrb	r3, [r3, #25]
 8004f66:	4618      	mov	r0, r3
 8004f68:	eeb0 0a67 	vmov.f32	s0, s15
 8004f6c:	f000 f8a0 	bl	80050b0 <GPS_nmea_to_dec>
 8004f70:	eef0 7a40 	vmov.f32	s15, s0
 8004f74:	4b3c      	ldr	r3, [pc, #240]	; (8005068 <GPS_parse+0x1f0>)
 8004f76:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e058      	b.n	8005030 <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 8004f7e:	2206      	movs	r2, #6
 8004f80:	493f      	ldr	r1, [pc, #252]	; (8005080 <GPS_parse+0x208>)
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f00e ffb0 	bl	8013ee8 <strncmp>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d130      	bne.n	8004ff0 <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 8004f8e:	4b3d      	ldr	r3, [pc, #244]	; (8005084 <GPS_parse+0x20c>)
 8004f90:	9303      	str	r3, [sp, #12]
 8004f92:	4b33      	ldr	r3, [pc, #204]	; (8005060 <GPS_parse+0x1e8>)
 8004f94:	9302      	str	r3, [sp, #8]
 8004f96:	4b2e      	ldr	r3, [pc, #184]	; (8005050 <GPS_parse+0x1d8>)
 8004f98:	9301      	str	r3, [sp, #4]
 8004f9a:	4b2e      	ldr	r3, [pc, #184]	; (8005054 <GPS_parse+0x1dc>)
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	4b2e      	ldr	r3, [pc, #184]	; (8005058 <GPS_parse+0x1e0>)
 8004fa0:	4a2e      	ldr	r2, [pc, #184]	; (800505c <GPS_parse+0x1e4>)
 8004fa2:	4939      	ldr	r1, [pc, #228]	; (8005088 <GPS_parse+0x210>)
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f00e ff19 	bl	8013ddc <siscanf>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	dd3e      	ble.n	800502e <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8004fb0:	4b2d      	ldr	r3, [pc, #180]	; (8005068 <GPS_parse+0x1f0>)
 8004fb2:	edd3 7a04 	vldr	s15, [r3, #16]
 8004fb6:	4b2c      	ldr	r3, [pc, #176]	; (8005068 <GPS_parse+0x1f0>)
 8004fb8:	7e1b      	ldrb	r3, [r3, #24]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	eeb0 0a67 	vmov.f32	s0, s15
 8004fc0:	f000 f876 	bl	80050b0 <GPS_nmea_to_dec>
 8004fc4:	eef0 7a40 	vmov.f32	s15, s0
 8004fc8:	4b27      	ldr	r3, [pc, #156]	; (8005068 <GPS_parse+0x1f0>)
 8004fca:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8004fce:	4b26      	ldr	r3, [pc, #152]	; (8005068 <GPS_parse+0x1f0>)
 8004fd0:	edd3 7a03 	vldr	s15, [r3, #12]
 8004fd4:	4b24      	ldr	r3, [pc, #144]	; (8005068 <GPS_parse+0x1f0>)
 8004fd6:	7e5b      	ldrb	r3, [r3, #25]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	eeb0 0a67 	vmov.f32	s0, s15
 8004fde:	f000 f867 	bl	80050b0 <GPS_nmea_to_dec>
 8004fe2:	eef0 7a40 	vmov.f32	s15, s0
 8004fe6:	4b20      	ldr	r3, [pc, #128]	; (8005068 <GPS_parse+0x1f0>)
 8004fe8:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e01f      	b.n	8005030 <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 8004ff0:	2206      	movs	r2, #6
 8004ff2:	4926      	ldr	r1, [pc, #152]	; (800508c <GPS_parse+0x214>)
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f00e ff77 	bl	8013ee8 <strncmp>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d116      	bne.n	800502e <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8005000:	4b23      	ldr	r3, [pc, #140]	; (8005090 <GPS_parse+0x218>)
 8005002:	9305      	str	r3, [sp, #20]
 8005004:	4b23      	ldr	r3, [pc, #140]	; (8005094 <GPS_parse+0x21c>)
 8005006:	9304      	str	r3, [sp, #16]
 8005008:	4b23      	ldr	r3, [pc, #140]	; (8005098 <GPS_parse+0x220>)
 800500a:	9303      	str	r3, [sp, #12]
 800500c:	4b1a      	ldr	r3, [pc, #104]	; (8005078 <GPS_parse+0x200>)
 800500e:	9302      	str	r3, [sp, #8]
 8005010:	4b22      	ldr	r3, [pc, #136]	; (800509c <GPS_parse+0x224>)
 8005012:	9301      	str	r3, [sp, #4]
 8005014:	4b22      	ldr	r3, [pc, #136]	; (80050a0 <GPS_parse+0x228>)
 8005016:	9300      	str	r3, [sp, #0]
 8005018:	4b22      	ldr	r3, [pc, #136]	; (80050a4 <GPS_parse+0x22c>)
 800501a:	4a23      	ldr	r2, [pc, #140]	; (80050a8 <GPS_parse+0x230>)
 800501c:	4923      	ldr	r1, [pc, #140]	; (80050ac <GPS_parse+0x234>)
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f00e fedc 	bl	8013ddc <siscanf>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	dd01      	ble.n	800502e <GPS_parse+0x1b6>
            return 0;
 800502a:	2300      	movs	r3, #0
 800502c:	e000      	b.n	8005030 <GPS_parse+0x1b8>
    }
    return 0;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	08019298 	.word	0x08019298
 800503c:	20005f98 	.word	0x20005f98
 8005040:	20005f94 	.word	0x20005f94
 8005044:	20005f90 	.word	0x20005f90
 8005048:	20005f8c 	.word	0x20005f8c
 800504c:	20005f88 	.word	0x20005f88
 8005050:	20005f85 	.word	0x20005f85
 8005054:	20005f78 	.word	0x20005f78
 8005058:	20005f84 	.word	0x20005f84
 800505c:	20005f7c 	.word	0x20005f7c
 8005060:	20005f80 	.word	0x20005f80
 8005064:	080192a0 	.word	0x080192a0
 8005068:	20005f6c 	.word	0x20005f6c
 800506c:	080192c8 	.word	0x080192c8
 8005070:	20005fa4 	.word	0x20005fa4
 8005074:	20005fa0 	.word	0x20005fa0
 8005078:	20005f9c 	.word	0x20005f9c
 800507c:	080192d0 	.word	0x080192d0
 8005080:	080192f0 	.word	0x080192f0
 8005084:	20005fa8 	.word	0x20005fa8
 8005088:	080192f8 	.word	0x080192f8
 800508c:	08019314 	.word	0x08019314
 8005090:	20005fc0 	.word	0x20005fc0
 8005094:	20005fbc 	.word	0x20005fbc
 8005098:	20005fb9 	.word	0x20005fb9
 800509c:	20005fb8 	.word	0x20005fb8
 80050a0:	20005fb4 	.word	0x20005fb4
 80050a4:	20005fb0 	.word	0x20005fb0
 80050a8:	20005fac 	.word	0x20005fac
 80050ac:	0801931c 	.word	0x0801931c

080050b0 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 80050b0:	b480      	push	{r7}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80050ba:	4603      	mov	r3, r0
 80050bc:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 80050be:	ed97 7a01 	vldr	s14, [r7, #4]
 80050c2:	eddf 6a20 	vldr	s13, [pc, #128]	; 8005144 <GPS_nmea_to_dec+0x94>
 80050c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050ce:	ee17 3a90 	vmov	r3, s15
 80050d2:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	2264      	movs	r2, #100	; 0x64
 80050d8:	fb02 f303 	mul.w	r3, r2, r3
 80050dc:	ee07 3a90 	vmov	s15, r3
 80050e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050e4:	ed97 7a01 	vldr	s14, [r7, #4]
 80050e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050ec:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 80050f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80050f4:	eddf 6a14 	vldr	s13, [pc, #80]	; 8005148 <GPS_nmea_to_dec+0x98>
 80050f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050fc:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	ee07 3a90 	vmov	s15, r3
 8005106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800510a:	ed97 7a02 	vldr	s14, [r7, #8]
 800510e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005112:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8005116:	78fb      	ldrb	r3, [r7, #3]
 8005118:	2b53      	cmp	r3, #83	; 0x53
 800511a:	d002      	beq.n	8005122 <GPS_nmea_to_dec+0x72>
 800511c:	78fb      	ldrb	r3, [r7, #3]
 800511e:	2b57      	cmp	r3, #87	; 0x57
 8005120:	d105      	bne.n	800512e <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8005122:	edd7 7a05 	vldr	s15, [r7, #20]
 8005126:	eef1 7a67 	vneg.f32	s15, s15
 800512a:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	ee07 3a90 	vmov	s15, r3
}
 8005134:	eeb0 0a67 	vmov.f32	s0, s15
 8005138:	371c      	adds	r7, #28
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	42c80000 	.word	0x42c80000
 8005148:	42700000 	.word	0x42700000

0800514c <GPS_Init>:
	}
}


void GPS_Init(UART_HandleTypeDef* data_uart, void (*gps_print)(char*),
		void (*gps_tone_freq)(uint32_t duration, uint32_t repeats, uint32_t freq)){
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
	GPS.print = gps_print;
 8005158:	4a0a      	ldr	r2, [pc, #40]	; (8005184 <GPS_Init+0x38>)
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	65d3      	str	r3, [r2, #92]	; 0x5c
	GPS.print((char*) "\r\nGPS Init...");
 800515e:	4b09      	ldr	r3, [pc, #36]	; (8005184 <GPS_Init+0x38>)
 8005160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005162:	4809      	ldr	r0, [pc, #36]	; (8005188 <GPS_Init+0x3c>)
 8005164:	4798      	blx	r3
	GPS.uart = data_uart;
 8005166:	4a07      	ldr	r2, [pc, #28]	; (8005184 <GPS_Init+0x38>)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6593      	str	r3, [r2, #88]	; 0x58
	GPS.tone_freq = gps_tone_freq;
 800516c:	4a05      	ldr	r2, [pc, #20]	; (8005184 <GPS_Init+0x38>)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6613      	str	r3, [r2, #96]	; 0x60
	GPS.print((char*) "OK\r\n");
 8005172:	4b04      	ldr	r3, [pc, #16]	; (8005184 <GPS_Init+0x38>)
 8005174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005176:	4805      	ldr	r0, [pc, #20]	; (800518c <GPS_Init+0x40>)
 8005178:	4798      	blx	r3
}
 800517a:	bf00      	nop
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	20005f6c 	.word	0x20005f6c
 8005188:	0801933c 	.word	0x0801933c
 800518c:	0801934c 	.word	0x0801934c

08005190 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005190:	b590      	push	{r4, r7, lr}
 8005192:	b087      	sub	sp, #28
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	607a      	str	r2, [r7, #4]
 800519a:	461a      	mov	r2, r3
 800519c:	460b      	mov	r3, r1
 800519e:	72fb      	strb	r3, [r7, #11]
 80051a0:	4613      	mov	r3, r2
 80051a2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	685c      	ldr	r4, [r3, #4]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6898      	ldr	r0, [r3, #8]
 80051ac:	893b      	ldrh	r3, [r7, #8]
 80051ae:	7af9      	ldrb	r1, [r7, #11]
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	47a0      	blx	r4
 80051b4:	6178      	str	r0, [r7, #20]

  return ret;
 80051b6:	697b      	ldr	r3, [r7, #20]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	371c      	adds	r7, #28
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd90      	pop	{r4, r7, pc}

080051c0 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80051c0:	b590      	push	{r4, r7, lr}
 80051c2:	b087      	sub	sp, #28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	607a      	str	r2, [r7, #4]
 80051ca:	461a      	mov	r2, r3
 80051cc:	460b      	mov	r3, r1
 80051ce:	72fb      	strb	r3, [r7, #11]
 80051d0:	4613      	mov	r3, r2
 80051d2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681c      	ldr	r4, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6898      	ldr	r0, [r3, #8]
 80051dc:	893b      	ldrh	r3, [r7, #8]
 80051de:	7af9      	ldrb	r1, [r7, #11]
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	47a0      	blx	r4
 80051e4:	6178      	str	r0, [r7, #20]

  return ret;
 80051e6:	697b      	ldr	r3, [r7, #20]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	371c      	adds	r7, #28
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd90      	pop	{r4, r7, pc}

080051f0 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	ee07 3a90 	vmov	s15, r3
 80051fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005202:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800521c <lps22hh_from_lsb_to_hpa+0x2c>
 8005206:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800520a:	eef0 7a66 	vmov.f32	s15, s13
}
 800520e:	eeb0 0a67 	vmov.f32	s0, s15
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	49800000 	.word	0x49800000

08005220 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	4603      	mov	r3, r0
 8005228:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 800522a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800522e:	ee07 3a90 	vmov	s15, r3
 8005232:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005236:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005250 <lps22hh_from_lsb_to_celsius+0x30>
 800523a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800523e:	eef0 7a66 	vmov.f32	s15, s13
}
 8005242:	eeb0 0a67 	vmov.f32	s0, s15
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	42c80000 	.word	0x42c80000

08005254 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	460b      	mov	r3, r1
 800525e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005260:	f107 0208 	add.w	r2, r7, #8
 8005264:	2301      	movs	r3, #1
 8005266:	2110      	movs	r1, #16
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f7ff ff91 	bl	8005190 <lps22hh_read_reg>
 800526e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10f      	bne.n	8005296 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005276:	78fb      	ldrb	r3, [r7, #3]
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	b2da      	uxtb	r2, r3
 800527e:	7a3b      	ldrb	r3, [r7, #8]
 8005280:	f362 0341 	bfi	r3, r2, #1, #1
 8005284:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005286:	f107 0208 	add.w	r2, r7, #8
 800528a:	2301      	movs	r3, #1
 800528c:	2110      	movs	r1, #16
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7ff ff96 	bl	80051c0 <lps22hh_write_reg>
 8005294:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005296:	68fb      	ldr	r3, [r7, #12]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	460b      	mov	r3, r1
 80052aa:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80052ac:	f107 0210 	add.w	r2, r7, #16
 80052b0:	2301      	movs	r3, #1
 80052b2:	2110      	movs	r1, #16
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f7ff ff6b 	bl	8005190 <lps22hh_read_reg>
 80052ba:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d107      	bne.n	80052d2 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80052c2:	f107 020c 	add.w	r2, r7, #12
 80052c6:	2301      	movs	r3, #1
 80052c8:	2111      	movs	r1, #17
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7ff ff60 	bl	8005190 <lps22hh_read_reg>
 80052d0:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10f      	bne.n	80052f8 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80052d8:	78fb      	ldrb	r3, [r7, #3]
 80052da:	f003 0307 	and.w	r3, r3, #7
 80052de:	b2da      	uxtb	r2, r3
 80052e0:	7c3b      	ldrb	r3, [r7, #16]
 80052e2:	f362 1306 	bfi	r3, r2, #4, #3
 80052e6:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80052e8:	f107 0210 	add.w	r2, r7, #16
 80052ec:	2301      	movs	r3, #1
 80052ee:	2110      	movs	r1, #16
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7ff ff65 	bl	80051c0 <lps22hh_write_reg>
 80052f6:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d119      	bne.n	8005332 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 80052fe:	78fb      	ldrb	r3, [r7, #3]
 8005300:	091b      	lsrs	r3, r3, #4
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	b2da      	uxtb	r2, r3
 8005308:	7b3b      	ldrb	r3, [r7, #12]
 800530a:	f362 0341 	bfi	r3, r2, #1, #1
 800530e:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8005310:	78fb      	ldrb	r3, [r7, #3]
 8005312:	08db      	lsrs	r3, r3, #3
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	b2da      	uxtb	r2, r3
 800531a:	7b3b      	ldrb	r3, [r7, #12]
 800531c:	f362 0300 	bfi	r3, r2, #0, #1
 8005320:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005322:	f107 020c 	add.w	r2, r7, #12
 8005326:	2301      	movs	r3, #1
 8005328:	2111      	movs	r1, #17
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7ff ff48 	bl	80051c0 <lps22hh_write_reg>
 8005330:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8005332:	697b      	ldr	r3, [r7, #20]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3718      	adds	r7, #24
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <lps22hh_press_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_press_flag_data_ready_get(stmdev_ctx_t *ctx,
                                          uint8_t *val)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8005346:	f107 0208 	add.w	r2, r7, #8
 800534a:	2301      	movs	r3, #1
 800534c:	2127      	movs	r1, #39	; 0x27
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7ff ff1e 	bl	8005190 <lps22hh_read_reg>
 8005354:	60f8      	str	r0, [r7, #12]
  *val = reg.p_da;
 8005356:	7a3b      	ldrb	r3, [r7, #8]
 8005358:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800535c:	b2db      	uxtb	r3, r3
 800535e:	461a      	mov	r2, r3
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	701a      	strb	r2, [r3, #0]

  return ret;
 8005364:	68fb      	ldr	r3, [r7, #12]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b084      	sub	sp, #16
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8005378:	f107 0208 	add.w	r2, r7, #8
 800537c:	2301      	movs	r3, #1
 800537e:	2127      	movs	r1, #39	; 0x27
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f7ff ff05 	bl	8005190 <lps22hh_read_reg>
 8005386:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 8005388:	7a3b      	ldrb	r3, [r7, #8]
 800538a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800538e:	b2db      	uxtb	r3, r3
 8005390:	461a      	mov	r2, r3
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	701a      	strb	r2, [r3, #0]

  return ret;
 8005396:	68fb      	ldr	r3, [r7, #12]
}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 80053aa:	f107 0208 	add.w	r2, r7, #8
 80053ae:	2303      	movs	r3, #3
 80053b0:	2128      	movs	r1, #40	; 0x28
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7ff feec 	bl	8005190 <lps22hh_read_reg>
 80053b8:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 80053ba:	7abb      	ldrb	r3, [r7, #10]
 80053bc:	461a      	mov	r2, r3
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	021b      	lsls	r3, r3, #8
 80053c8:	7a7a      	ldrb	r2, [r7, #9]
 80053ca:	441a      	add	r2, r3
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	021b      	lsls	r3, r3, #8
 80053d6:	7a3a      	ldrb	r2, [r7, #8]
 80053d8:	441a      	add	r2, r3
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	021a      	lsls	r2, r3, #8
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	601a      	str	r2, [r3, #0]

  return ret;
 80053e8:	68fb      	ldr	r3, [r7, #12]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b084      	sub	sp, #16
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
 80053fa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 80053fc:	f107 0208 	add.w	r2, r7, #8
 8005400:	2302      	movs	r3, #2
 8005402:	212b      	movs	r1, #43	; 0x2b
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f7ff fec3 	bl	8005190 <lps22hh_read_reg>
 800540a:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 800540c:	7a7b      	ldrb	r3, [r7, #9]
 800540e:	b21a      	sxth	r2, r3
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	f9b3 3000 	ldrsh.w	r3, [r3]
 800541a:	b29b      	uxth	r3, r3
 800541c:	021b      	lsls	r3, r3, #8
 800541e:	b29a      	uxth	r2, r3
 8005420:	7a3b      	ldrb	r3, [r7, #8]
 8005422:	b29b      	uxth	r3, r3
 8005424:	4413      	add	r3, r2
 8005426:	b29b      	uxth	r3, r3
 8005428:	b21a      	sxth	r2, r3
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	801a      	strh	r2, [r3, #0]

  return ret;
 800542e:	68fb      	ldr	r3, [r7, #12]
}
 8005430:	4618      	mov	r0, r3
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8005442:	2301      	movs	r3, #1
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	210f      	movs	r1, #15
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f7ff fea1 	bl	8005190 <lps22hh_read_reg>
 800544e:	60f8      	str	r0, [r7, #12]

  return ret;
 8005450:	68fb      	ldr	r3, [r7, #12]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b084      	sub	sp, #16
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	460b      	mov	r3, r1
 8005464:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005466:	f107 0208 	add.w	r2, r7, #8
 800546a:	2301      	movs	r3, #1
 800546c:	2111      	movs	r1, #17
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7ff fe8e 	bl	8005190 <lps22hh_read_reg>
 8005474:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10f      	bne.n	800549c <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 800547c:	78fb      	ldrb	r3, [r7, #3]
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	b2da      	uxtb	r2, r3
 8005484:	7a3b      	ldrb	r3, [r7, #8]
 8005486:	f362 0382 	bfi	r3, r2, #2, #1
 800548a:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800548c:	f107 0208 	add.w	r2, r7, #8
 8005490:	2301      	movs	r3, #1
 8005492:	2111      	movs	r1, #17
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f7ff fe93 	bl	80051c0 <lps22hh_write_reg>
 800549a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800549c:	68fb      	ldr	r3, [r7, #12]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b084      	sub	sp, #16
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
 80054ae:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80054b0:	f107 0208 	add.w	r2, r7, #8
 80054b4:	2301      	movs	r3, #1
 80054b6:	2111      	movs	r1, #17
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f7ff fe69 	bl	8005190 <lps22hh_read_reg>
 80054be:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 80054c0:	7a3b      	ldrb	r3, [r7, #8]
 80054c2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	461a      	mov	r2, r3
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	701a      	strb	r2, [r3, #0]

  return ret;
 80054ce:	68fb      	ldr	r3, [r7, #12]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80054d8:	b590      	push	{r4, r7, lr}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	607a      	str	r2, [r7, #4]
 80054e2:	461a      	mov	r2, r3
 80054e4:	460b      	mov	r3, r1
 80054e6:	72fb      	strb	r3, [r7, #11]
 80054e8:	4613      	mov	r3, r2
 80054ea:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	685c      	ldr	r4, [r3, #4]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6898      	ldr	r0, [r3, #8]
 80054f4:	893b      	ldrh	r3, [r7, #8]
 80054f6:	7af9      	ldrb	r1, [r7, #11]
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	47a0      	blx	r4
 80054fc:	6178      	str	r0, [r7, #20]

  return ret;
 80054fe:	697b      	ldr	r3, [r7, #20]
}
 8005500:	4618      	mov	r0, r3
 8005502:	371c      	adds	r7, #28
 8005504:	46bd      	mov	sp, r7
 8005506:	bd90      	pop	{r4, r7, pc}

08005508 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005508:	b590      	push	{r4, r7, lr}
 800550a:	b087      	sub	sp, #28
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	607a      	str	r2, [r7, #4]
 8005512:	461a      	mov	r2, r3
 8005514:	460b      	mov	r3, r1
 8005516:	72fb      	strb	r3, [r7, #11]
 8005518:	4613      	mov	r3, r2
 800551a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681c      	ldr	r4, [r3, #0]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6898      	ldr	r0, [r3, #8]
 8005524:	893b      	ldrh	r3, [r7, #8]
 8005526:	7af9      	ldrb	r1, [r7, #11]
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	47a0      	blx	r4
 800552c:	6178      	str	r0, [r7, #20]

  return ret;
 800552e:	697b      	ldr	r3, [r7, #20]
}
 8005530:	4618      	mov	r0, r3
 8005532:	371c      	adds	r7, #28
 8005534:	46bd      	mov	sp, r7
 8005536:	bd90      	pop	{r4, r7, pc}

08005538 <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	4603      	mov	r3, r0
 8005540:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8005542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005546:	ee07 3a90 	vmov	s15, r3
 800554a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800554e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005564 <lsm6dsr_from_fs2g_to_mg+0x2c>
 8005552:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8005556:	eeb0 0a67 	vmov.f32	s0, s15
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr
 8005564:	3d79db23 	.word	0x3d79db23

08005568 <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	4603      	mov	r3, r0
 8005570:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8005572:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005576:	ee07 3a90 	vmov	s15, r3
 800557a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800557e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005594 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 8005582:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8005586:	eeb0 0a67 	vmov.f32	s0, s15
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	428c0000 	.word	0x428c0000

08005598 <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	4603      	mov	r3, r0
 80055a0:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 80055a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055a6:	ee07 3a90 	vmov	s15, r3
 80055aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055ae:	eddf 6a07 	vldr	s13, [pc, #28]	; 80055cc <lsm6dsr_from_lsb_to_celsius+0x34>
 80055b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055b6:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80055ba:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80055be:	eeb0 0a67 	vmov.f32	s0, s15
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr
 80055cc:	43800000 	.word	0x43800000

080055d0 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	460b      	mov	r3, r1
 80055da:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80055dc:	f107 0208 	add.w	r2, r7, #8
 80055e0:	2301      	movs	r3, #1
 80055e2:	2110      	movs	r1, #16
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7ff ff77 	bl	80054d8 <lsm6dsr_read_reg>
 80055ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10f      	bne.n	8005612 <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 80055f2:	78fb      	ldrb	r3, [r7, #3]
 80055f4:	f003 0303 	and.w	r3, r3, #3
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	7a3b      	ldrb	r3, [r7, #8]
 80055fc:	f362 0383 	bfi	r3, r2, #2, #2
 8005600:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8005602:	f107 0208 	add.w	r2, r7, #8
 8005606:	2301      	movs	r3, #1
 8005608:	2110      	movs	r1, #16
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7ff ff7c 	bl	8005508 <lsm6dsr_write_reg>
 8005610:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8005612:	68fb      	ldr	r3, [r7, #12]
}
 8005614:	4618      	mov	r0, r3
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b086      	sub	sp, #24
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	460b      	mov	r3, r1
 8005626:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8005628:	78fb      	ldrb	r3, [r7, #3]
 800562a:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 800562c:	f107 030c 	add.w	r3, r7, #12
 8005630:	4619      	mov	r1, r3
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 fc54 	bl	8005ee0 <lsm6dsr_fsm_enable_get>
 8005638:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	2b00      	cmp	r3, #0
 800563e:	f040 80c4 	bne.w	80057ca <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005642:	7b3b      	ldrb	r3, [r7, #12]
 8005644:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005648:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800564a:	7b3b      	ldrb	r3, [r7, #12]
 800564c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005650:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005652:	4313      	orrs	r3, r2
 8005654:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005656:	7b3b      	ldrb	r3, [r7, #12]
 8005658:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800565c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800565e:	4313      	orrs	r3, r2
 8005660:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005662:	7b3b      	ldrb	r3, [r7, #12]
 8005664:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005668:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800566a:	4313      	orrs	r3, r2
 800566c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800566e:	7b3b      	ldrb	r3, [r7, #12]
 8005670:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005674:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005676:	4313      	orrs	r3, r2
 8005678:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800567a:	7b3b      	ldrb	r3, [r7, #12]
 800567c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005680:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005682:	4313      	orrs	r3, r2
 8005684:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005686:	7b3b      	ldrb	r3, [r7, #12]
 8005688:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800568c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800568e:	4313      	orrs	r3, r2
 8005690:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005692:	7b3b      	ldrb	r3, [r7, #12]
 8005694:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005698:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800569a:	4313      	orrs	r3, r2
 800569c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800569e:	7b7b      	ldrb	r3, [r7, #13]
 80056a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80056a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80056a6:	4313      	orrs	r3, r2
 80056a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80056aa:	7b7b      	ldrb	r3, [r7, #13]
 80056ac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80056b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80056b2:	4313      	orrs	r3, r2
 80056b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80056b6:	7b7b      	ldrb	r3, [r7, #13]
 80056b8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80056bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80056be:	4313      	orrs	r3, r2
 80056c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80056c2:	7b7b      	ldrb	r3, [r7, #13]
 80056c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80056c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80056ca:	4313      	orrs	r3, r2
 80056cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80056ce:	7b7b      	ldrb	r3, [r7, #13]
 80056d0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80056d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80056d6:	4313      	orrs	r3, r2
 80056d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80056da:	7b7b      	ldrb	r3, [r7, #13]
 80056dc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80056e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80056e2:	4313      	orrs	r3, r2
 80056e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80056e6:	7b7b      	ldrb	r3, [r7, #13]
 80056e8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80056ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80056ee:	4313      	orrs	r3, r2
 80056f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80056f2:	7b7b      	ldrb	r3, [r7, #13]
 80056f4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80056f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80056fa:	4313      	orrs	r3, r2
 80056fc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d163      	bne.n	80057ca <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8005702:	f107 030b 	add.w	r3, r7, #11
 8005706:	4619      	mov	r1, r3
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 fc15 	bl	8005f38 <lsm6dsr_fsm_data_rate_get>
 800570e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d159      	bne.n	80057ca <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8005716:	7afb      	ldrb	r3, [r7, #11]
 8005718:	2b03      	cmp	r3, #3
 800571a:	d853      	bhi.n	80057c4 <lsm6dsr_xl_data_rate_set+0x1a8>
 800571c:	a201      	add	r2, pc, #4	; (adr r2, 8005724 <lsm6dsr_xl_data_rate_set+0x108>)
 800571e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005722:	bf00      	nop
 8005724:	08005735 	.word	0x08005735
 8005728:	08005747 	.word	0x08005747
 800572c:	08005765 	.word	0x08005765
 8005730:	0800578f 	.word	0x0800578f
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8005734:	78fb      	ldrb	r3, [r7, #3]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d102      	bne.n	8005740 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 800573a:	2301      	movs	r3, #1
 800573c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800573e:	e045      	b.n	80057cc <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005740:	78fb      	ldrb	r3, [r7, #3]
 8005742:	75fb      	strb	r3, [r7, #23]
            break;
 8005744:	e042      	b.n	80057cc <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8005746:	78fb      	ldrb	r3, [r7, #3]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d102      	bne.n	8005752 <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 800574c:	2302      	movs	r3, #2
 800574e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005750:	e03c      	b.n	80057cc <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8005752:	78fb      	ldrb	r3, [r7, #3]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d102      	bne.n	800575e <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8005758:	2302      	movs	r3, #2
 800575a:	75fb      	strb	r3, [r7, #23]
            break;
 800575c:	e036      	b.n	80057cc <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800575e:	78fb      	ldrb	r3, [r7, #3]
 8005760:	75fb      	strb	r3, [r7, #23]
            break;
 8005762:	e033      	b.n	80057cc <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8005764:	78fb      	ldrb	r3, [r7, #3]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d102      	bne.n	8005770 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800576a:	2303      	movs	r3, #3
 800576c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800576e:	e02d      	b.n	80057cc <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8005770:	78fb      	ldrb	r3, [r7, #3]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d102      	bne.n	800577c <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8005776:	2303      	movs	r3, #3
 8005778:	75fb      	strb	r3, [r7, #23]
            break;
 800577a:	e027      	b.n	80057cc <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 800577c:	78fb      	ldrb	r3, [r7, #3]
 800577e:	2b02      	cmp	r3, #2
 8005780:	d102      	bne.n	8005788 <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8005782:	2303      	movs	r3, #3
 8005784:	75fb      	strb	r3, [r7, #23]
            break;
 8005786:	e021      	b.n	80057cc <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005788:	78fb      	ldrb	r3, [r7, #3]
 800578a:	75fb      	strb	r3, [r7, #23]
            break;
 800578c:	e01e      	b.n	80057cc <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 800578e:	78fb      	ldrb	r3, [r7, #3]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d102      	bne.n	800579a <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8005794:	2304      	movs	r3, #4
 8005796:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005798:	e018      	b.n	80057cc <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 800579a:	78fb      	ldrb	r3, [r7, #3]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d102      	bne.n	80057a6 <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80057a0:	2304      	movs	r3, #4
 80057a2:	75fb      	strb	r3, [r7, #23]
            break;
 80057a4:	e012      	b.n	80057cc <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 80057a6:	78fb      	ldrb	r3, [r7, #3]
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d102      	bne.n	80057b2 <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80057ac:	2304      	movs	r3, #4
 80057ae:	75fb      	strb	r3, [r7, #23]
            break;
 80057b0:	e00c      	b.n	80057cc <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 80057b2:	78fb      	ldrb	r3, [r7, #3]
 80057b4:	2b03      	cmp	r3, #3
 80057b6:	d102      	bne.n	80057be <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80057b8:	2304      	movs	r3, #4
 80057ba:	75fb      	strb	r3, [r7, #23]
            break;
 80057bc:	e006      	b.n	80057cc <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80057be:	78fb      	ldrb	r3, [r7, #3]
 80057c0:	75fb      	strb	r3, [r7, #23]
            break;
 80057c2:	e003      	b.n	80057cc <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 80057c4:	78fb      	ldrb	r3, [r7, #3]
 80057c6:	75fb      	strb	r3, [r7, #23]
            break;
 80057c8:	e000      	b.n	80057cc <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 80057ca:	bf00      	nop
    }
  }

  if (ret == 0)
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d107      	bne.n	80057e2 <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80057d2:	f107 0208 	add.w	r2, r7, #8
 80057d6:	2301      	movs	r3, #1
 80057d8:	2110      	movs	r1, #16
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7ff fe7c 	bl	80054d8 <lsm6dsr_read_reg>
 80057e0:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10f      	bne.n	8005808 <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 80057e8:	7dfb      	ldrb	r3, [r7, #23]
 80057ea:	f003 030f 	and.w	r3, r3, #15
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	7a3b      	ldrb	r3, [r7, #8]
 80057f2:	f362 1307 	bfi	r3, r2, #4, #4
 80057f6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 80057f8:	f107 0208 	add.w	r2, r7, #8
 80057fc:	2301      	movs	r3, #1
 80057fe:	2110      	movs	r1, #16
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f7ff fe81 	bl	8005508 <lsm6dsr_write_reg>
 8005806:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8005808:	693b      	ldr	r3, [r7, #16]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3718      	adds	r7, #24
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop

08005814 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	460b      	mov	r3, r1
 800581e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005820:	f107 0208 	add.w	r2, r7, #8
 8005824:	2301      	movs	r3, #1
 8005826:	2111      	movs	r1, #17
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7ff fe55 	bl	80054d8 <lsm6dsr_read_reg>
 800582e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10f      	bne.n	8005856 <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8005836:	78fb      	ldrb	r3, [r7, #3]
 8005838:	f003 030f 	and.w	r3, r3, #15
 800583c:	b2da      	uxtb	r2, r3
 800583e:	7a3b      	ldrb	r3, [r7, #8]
 8005840:	f362 0303 	bfi	r3, r2, #0, #4
 8005844:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005846:	f107 0208 	add.w	r2, r7, #8
 800584a:	2301      	movs	r3, #1
 800584c:	2111      	movs	r1, #17
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7ff fe5a 	bl	8005508 <lsm6dsr_write_reg>
 8005854:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005856:	68fb      	ldr	r3, [r7, #12]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b086      	sub	sp, #24
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	460b      	mov	r3, r1
 800586a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 800586c:	78fb      	ldrb	r3, [r7, #3]
 800586e:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8005870:	f107 030c 	add.w	r3, r7, #12
 8005874:	4619      	mov	r1, r3
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 fb32 	bl	8005ee0 <lsm6dsr_fsm_enable_get>
 800587c:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	2b00      	cmp	r3, #0
 8005882:	f040 80c4 	bne.w	8005a0e <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005886:	7b3b      	ldrb	r3, [r7, #12]
 8005888:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800588c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800588e:	7b3b      	ldrb	r3, [r7, #12]
 8005890:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005894:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005896:	4313      	orrs	r3, r2
 8005898:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800589a:	7b3b      	ldrb	r3, [r7, #12]
 800589c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80058a0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80058a2:	4313      	orrs	r3, r2
 80058a4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80058a6:	7b3b      	ldrb	r3, [r7, #12]
 80058a8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80058ac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80058ae:	4313      	orrs	r3, r2
 80058b0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80058b2:	7b3b      	ldrb	r3, [r7, #12]
 80058b4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80058b8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80058ba:	4313      	orrs	r3, r2
 80058bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80058be:	7b3b      	ldrb	r3, [r7, #12]
 80058c0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80058c4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80058c6:	4313      	orrs	r3, r2
 80058c8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80058ca:	7b3b      	ldrb	r3, [r7, #12]
 80058cc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80058d0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80058d2:	4313      	orrs	r3, r2
 80058d4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80058d6:	7b3b      	ldrb	r3, [r7, #12]
 80058d8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80058dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80058de:	4313      	orrs	r3, r2
 80058e0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80058e2:	7b7b      	ldrb	r3, [r7, #13]
 80058e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80058e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80058ea:	4313      	orrs	r3, r2
 80058ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80058ee:	7b7b      	ldrb	r3, [r7, #13]
 80058f0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80058f4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80058f6:	4313      	orrs	r3, r2
 80058f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80058fa:	7b7b      	ldrb	r3, [r7, #13]
 80058fc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005900:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005902:	4313      	orrs	r3, r2
 8005904:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005906:	7b7b      	ldrb	r3, [r7, #13]
 8005908:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800590c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800590e:	4313      	orrs	r3, r2
 8005910:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005912:	7b7b      	ldrb	r3, [r7, #13]
 8005914:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005918:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800591a:	4313      	orrs	r3, r2
 800591c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800591e:	7b7b      	ldrb	r3, [r7, #13]
 8005920:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005924:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005926:	4313      	orrs	r3, r2
 8005928:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800592a:	7b7b      	ldrb	r3, [r7, #13]
 800592c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005930:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005932:	4313      	orrs	r3, r2
 8005934:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005936:	7b7b      	ldrb	r3, [r7, #13]
 8005938:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800593c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800593e:	4313      	orrs	r3, r2
 8005940:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005942:	2b01      	cmp	r3, #1
 8005944:	d163      	bne.n	8005a0e <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8005946:	f107 030b 	add.w	r3, r7, #11
 800594a:	4619      	mov	r1, r3
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 faf3 	bl	8005f38 <lsm6dsr_fsm_data_rate_get>
 8005952:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d159      	bne.n	8005a0e <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800595a:	7afb      	ldrb	r3, [r7, #11]
 800595c:	2b03      	cmp	r3, #3
 800595e:	d853      	bhi.n	8005a08 <lsm6dsr_gy_data_rate_set+0x1a8>
 8005960:	a201      	add	r2, pc, #4	; (adr r2, 8005968 <lsm6dsr_gy_data_rate_set+0x108>)
 8005962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005966:	bf00      	nop
 8005968:	08005979 	.word	0x08005979
 800596c:	0800598b 	.word	0x0800598b
 8005970:	080059a9 	.word	0x080059a9
 8005974:	080059d3 	.word	0x080059d3
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 8005978:	78fb      	ldrb	r3, [r7, #3]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d102      	bne.n	8005984 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 800597e:	2301      	movs	r3, #1
 8005980:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005982:	e045      	b.n	8005a10 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005984:	78fb      	ldrb	r3, [r7, #3]
 8005986:	75fb      	strb	r3, [r7, #23]
            break;
 8005988:	e042      	b.n	8005a10 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800598a:	78fb      	ldrb	r3, [r7, #3]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d102      	bne.n	8005996 <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8005990:	2302      	movs	r3, #2
 8005992:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005994:	e03c      	b.n	8005a10 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8005996:	78fb      	ldrb	r3, [r7, #3]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d102      	bne.n	80059a2 <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 800599c:	2302      	movs	r3, #2
 800599e:	75fb      	strb	r3, [r7, #23]
            break;
 80059a0:	e036      	b.n	8005a10 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80059a2:	78fb      	ldrb	r3, [r7, #3]
 80059a4:	75fb      	strb	r3, [r7, #23]
            break;
 80059a6:	e033      	b.n	8005a10 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80059a8:	78fb      	ldrb	r3, [r7, #3]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d102      	bne.n	80059b4 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80059ae:	2303      	movs	r3, #3
 80059b0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80059b2:	e02d      	b.n	8005a10 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80059b4:	78fb      	ldrb	r3, [r7, #3]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d102      	bne.n	80059c0 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80059ba:	2303      	movs	r3, #3
 80059bc:	75fb      	strb	r3, [r7, #23]
            break;
 80059be:	e027      	b.n	8005a10 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 80059c0:	78fb      	ldrb	r3, [r7, #3]
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d102      	bne.n	80059cc <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80059c6:	2303      	movs	r3, #3
 80059c8:	75fb      	strb	r3, [r7, #23]
            break;
 80059ca:	e021      	b.n	8005a10 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80059cc:	78fb      	ldrb	r3, [r7, #3]
 80059ce:	75fb      	strb	r3, [r7, #23]
            break;
 80059d0:	e01e      	b.n	8005a10 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80059d2:	78fb      	ldrb	r3, [r7, #3]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d102      	bne.n	80059de <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80059d8:	2304      	movs	r3, #4
 80059da:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80059dc:	e018      	b.n	8005a10 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80059de:	78fb      	ldrb	r3, [r7, #3]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d102      	bne.n	80059ea <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80059e4:	2304      	movs	r3, #4
 80059e6:	75fb      	strb	r3, [r7, #23]
            break;
 80059e8:	e012      	b.n	8005a10 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 80059ea:	78fb      	ldrb	r3, [r7, #3]
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d102      	bne.n	80059f6 <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80059f0:	2304      	movs	r3, #4
 80059f2:	75fb      	strb	r3, [r7, #23]
            break;
 80059f4:	e00c      	b.n	8005a10 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 80059f6:	78fb      	ldrb	r3, [r7, #3]
 80059f8:	2b03      	cmp	r3, #3
 80059fa:	d102      	bne.n	8005a02 <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80059fc:	2304      	movs	r3, #4
 80059fe:	75fb      	strb	r3, [r7, #23]
            break;
 8005a00:	e006      	b.n	8005a10 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005a02:	78fb      	ldrb	r3, [r7, #3]
 8005a04:	75fb      	strb	r3, [r7, #23]
            break;
 8005a06:	e003      	b.n	8005a10 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8005a08:	78fb      	ldrb	r3, [r7, #3]
 8005a0a:	75fb      	strb	r3, [r7, #23]
            break;
 8005a0c:	e000      	b.n	8005a10 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 8005a0e:	bf00      	nop
    }
  }

  if (ret == 0)
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d107      	bne.n	8005a26 <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005a16:	f107 0208 	add.w	r2, r7, #8
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	2111      	movs	r1, #17
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7ff fd5a 	bl	80054d8 <lsm6dsr_read_reg>
 8005a24:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10f      	bne.n	8005a4c <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8005a2c:	7dfb      	ldrb	r3, [r7, #23]
 8005a2e:	f003 030f 	and.w	r3, r3, #15
 8005a32:	b2da      	uxtb	r2, r3
 8005a34:	7a3b      	ldrb	r3, [r7, #8]
 8005a36:	f362 1307 	bfi	r3, r2, #4, #4
 8005a3a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005a3c:	f107 0208 	add.w	r2, r7, #8
 8005a40:	2301      	movs	r3, #1
 8005a42:	2111      	movs	r1, #17
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7ff fd5f 	bl	8005508 <lsm6dsr_write_reg>
 8005a4a:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8005a4c:	693b      	ldr	r3, [r7, #16]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop

08005a58 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	460b      	mov	r3, r1
 8005a62:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005a64:	f107 0208 	add.w	r2, r7, #8
 8005a68:	2301      	movs	r3, #1
 8005a6a:	2112      	movs	r1, #18
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7ff fd33 	bl	80054d8 <lsm6dsr_read_reg>
 8005a72:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10f      	bne.n	8005a9a <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 8005a7a:	78fb      	ldrb	r3, [r7, #3]
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	b2da      	uxtb	r2, r3
 8005a82:	7a3b      	ldrb	r3, [r7, #8]
 8005a84:	f362 1386 	bfi	r3, r2, #6, #1
 8005a88:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005a8a:	f107 0208 	add.w	r2, r7, #8
 8005a8e:	2301      	movs	r3, #1
 8005a90:	2112      	movs	r1, #18
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7ff fd38 	bl	8005508 <lsm6dsr_write_reg>
 8005a98:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8005aae:	f107 0208 	add.w	r2, r7, #8
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	211e      	movs	r1, #30
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7ff fd0e 	bl	80054d8 <lsm6dsr_read_reg>
 8005abc:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 8005abe:	7a3b      	ldrb	r3, [r7, #8]
 8005ac0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	701a      	strb	r2, [r3, #0]

  return ret;
 8005acc:	68fb      	ldr	r3, [r7, #12]
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b084      	sub	sp, #16
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
 8005ade:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8005ae0:	f107 0208 	add.w	r2, r7, #8
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	211e      	movs	r1, #30
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f7ff fcf5 	bl	80054d8 <lsm6dsr_read_reg>
 8005aee:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8005af0:	7a3b      	ldrb	r3, [r7, #8]
 8005af2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	461a      	mov	r2, r3
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	701a      	strb	r2, [r3, #0]

  return ret;
 8005afe:	68fb      	ldr	r3, [r7, #12]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8005b12:	f107 0208 	add.w	r2, r7, #8
 8005b16:	2301      	movs	r3, #1
 8005b18:	211e      	movs	r1, #30
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7ff fcdc 	bl	80054d8 <lsm6dsr_read_reg>
 8005b20:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 8005b22:	7a3b      	ldrb	r3, [r7, #8]
 8005b24:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	701a      	strb	r2, [r3, #0]

  return ret;
 8005b30:	68fb      	ldr	r3, [r7, #12]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b084      	sub	sp, #16
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 8005b44:	f107 0208 	add.w	r2, r7, #8
 8005b48:	2302      	movs	r3, #2
 8005b4a:	2120      	movs	r1, #32
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f7ff fcc3 	bl	80054d8 <lsm6dsr_read_reg>
 8005b52:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 8005b54:	7a7b      	ldrb	r3, [r7, #9]
 8005b56:	b21a      	sxth	r2, r3
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	021b      	lsls	r3, r3, #8
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	7a3b      	ldrb	r3, [r7, #8]
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	4413      	add	r3, r2
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	b21a      	sxth	r2, r3
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	801a      	strh	r2, [r3, #0]

  return ret;
 8005b76:	68fb      	ldr	r3, [r7, #12]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 8005b8a:	f107 020c 	add.w	r2, r7, #12
 8005b8e:	2306      	movs	r3, #6
 8005b90:	2122      	movs	r1, #34	; 0x22
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7ff fca0 	bl	80054d8 <lsm6dsr_read_reg>
 8005b98:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005b9a:	7b7b      	ldrb	r3, [r7, #13]
 8005b9c:	b21a      	sxth	r2, r3
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	021b      	lsls	r3, r3, #8
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	7b3b      	ldrb	r3, [r7, #12]
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	4413      	add	r3, r2
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	b21a      	sxth	r2, r3
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005bbc:	7bfa      	ldrb	r2, [r7, #15]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	3302      	adds	r3, #2
 8005bc2:	b212      	sxth	r2, r2
 8005bc4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	3302      	adds	r3, #2
 8005bca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	021b      	lsls	r3, r3, #8
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	7bbb      	ldrb	r3, [r7, #14]
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	4413      	add	r3, r2
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	3302      	adds	r3, #2
 8005be0:	b212      	sxth	r2, r2
 8005be2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005be4:	7c7a      	ldrb	r2, [r7, #17]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	3304      	adds	r3, #4
 8005bea:	b212      	sxth	r2, r2
 8005bec:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	3304      	adds	r3, #4
 8005bf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	021b      	lsls	r3, r3, #8
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	7c3b      	ldrb	r3, [r7, #16]
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	4413      	add	r3, r2
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	3304      	adds	r3, #4
 8005c08:	b212      	sxth	r2, r2
 8005c0a:	801a      	strh	r2, [r3, #0]

  return ret;
 8005c0c:	697b      	ldr	r3, [r7, #20]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3718      	adds	r7, #24
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b086      	sub	sp, #24
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
 8005c1e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 8005c20:	f107 020c 	add.w	r2, r7, #12
 8005c24:	2306      	movs	r3, #6
 8005c26:	2128      	movs	r1, #40	; 0x28
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7ff fc55 	bl	80054d8 <lsm6dsr_read_reg>
 8005c2e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005c30:	7b7b      	ldrb	r3, [r7, #13]
 8005c32:	b21a      	sxth	r2, r3
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	021b      	lsls	r3, r3, #8
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	7b3b      	ldrb	r3, [r7, #12]
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	4413      	add	r3, r2
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	b21a      	sxth	r2, r3
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005c52:	7bfa      	ldrb	r2, [r7, #15]
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	3302      	adds	r3, #2
 8005c58:	b212      	sxth	r2, r2
 8005c5a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	3302      	adds	r3, #2
 8005c60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	021b      	lsls	r3, r3, #8
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	7bbb      	ldrb	r3, [r7, #14]
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	4413      	add	r3, r2
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	3302      	adds	r3, #2
 8005c76:	b212      	sxth	r2, r2
 8005c78:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005c7a:	7c7a      	ldrb	r2, [r7, #17]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	3304      	adds	r3, #4
 8005c80:	b212      	sxth	r2, r2
 8005c82:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	3304      	adds	r3, #4
 8005c88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	021b      	lsls	r3, r3, #8
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	7c3b      	ldrb	r3, [r7, #16]
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	4413      	add	r3, r2
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	b212      	sxth	r2, r2
 8005ca0:	801a      	strh	r2, [r3, #0]

  return ret;
 8005ca2:	697b      	ldr	r3, [r7, #20]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3718      	adds	r7, #24
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8005cb8:	f107 0208 	add.w	r2, r7, #8
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	2101      	movs	r1, #1
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f7ff fc09 	bl	80054d8 <lsm6dsr_read_reg>
 8005cc6:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10f      	bne.n	8005cee <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 8005cce:	78fb      	ldrb	r3, [r7, #3]
 8005cd0:	f003 0303 	and.w	r3, r3, #3
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	7a3b      	ldrb	r3, [r7, #8]
 8005cd8:	f362 1387 	bfi	r3, r2, #6, #2
 8005cdc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8005cde:	f107 0208 	add.w	r2, r7, #8
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	2101      	movs	r1, #1
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7ff fc0e 	bl	8005508 <lsm6dsr_write_reg>
 8005cec:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8005cee:	68fb      	ldr	r3, [r7, #12]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 8005d02:	2301      	movs	r3, #1
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	210f      	movs	r1, #15
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f7ff fbe5 	bl	80054d8 <lsm6dsr_read_reg>
 8005d0e:	60f8      	str	r0, [r7, #12]

  return ret;
 8005d10:	68fb      	ldr	r3, [r7, #12]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b084      	sub	sp, #16
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
 8005d22:	460b      	mov	r3, r1
 8005d24:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005d26:	f107 0208 	add.w	r2, r7, #8
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	2112      	movs	r1, #18
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7ff fbd2 	bl	80054d8 <lsm6dsr_read_reg>
 8005d34:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d10f      	bne.n	8005d5c <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8005d3c:	78fb      	ldrb	r3, [r7, #3]
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	b2da      	uxtb	r2, r3
 8005d44:	7a3b      	ldrb	r3, [r7, #8]
 8005d46:	f362 0300 	bfi	r3, r2, #0, #1
 8005d4a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005d4c:	f107 0208 	add.w	r2, r7, #8
 8005d50:	2301      	movs	r3, #1
 8005d52:	2112      	movs	r1, #18
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f7ff fbd7 	bl	8005508 <lsm6dsr_write_reg>
 8005d5a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b084      	sub	sp, #16
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005d70:	f107 0208 	add.w	r2, r7, #8
 8005d74:	2301      	movs	r3, #1
 8005d76:	2112      	movs	r1, #18
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7ff fbad 	bl	80054d8 <lsm6dsr_read_reg>
 8005d7e:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8005d80:	7a3b      	ldrb	r3, [r7, #8]
 8005d82:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	461a      	mov	r2, r3
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	701a      	strb	r2, [r3, #0]

  return ret;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <lsm6dsr_xl_filter_lp2_set>:
  * @param  val    Change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	460b      	mov	r3, r1
 8005da2:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005da4:	f107 0208 	add.w	r2, r7, #8
 8005da8:	2301      	movs	r3, #1
 8005daa:	2110      	movs	r1, #16
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f7ff fb93 	bl	80054d8 <lsm6dsr_read_reg>
 8005db2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10f      	bne.n	8005dda <lsm6dsr_xl_filter_lp2_set+0x42>
  {
    ctrl1_xl.lpf2_xl_en = (uint8_t)val;
 8005dba:	78fb      	ldrb	r3, [r7, #3]
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	7a3b      	ldrb	r3, [r7, #8]
 8005dc4:	f362 0341 	bfi	r3, r2, #1, #1
 8005dc8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8005dca:	f107 0208 	add.w	r2, r7, #8
 8005dce:	2301      	movs	r3, #1
 8005dd0:	2110      	movs	r1, #16
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7ff fb98 	bl	8005508 <lsm6dsr_write_reg>
 8005dd8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8005dda:	68fb      	ldr	r3, [r7, #12]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <lsm6dsr_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dsr_hp_slope_xl_en_t val)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	460b      	mov	r3, r1
 8005dee:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8005df0:	f107 0208 	add.w	r2, r7, #8
 8005df4:	2301      	movs	r3, #1
 8005df6:	2117      	movs	r1, #23
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f7ff fb6d 	bl	80054d8 <lsm6dsr_read_reg>
 8005dfe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d121      	bne.n	8005e4a <lsm6dsr_xl_hp_path_on_out_set+0x66>
  {
    ctrl8_xl.hp_slope_xl_en = (((uint8_t)val & 0x10U) >> 4);
 8005e06:	78fb      	ldrb	r3, [r7, #3]
 8005e08:	091b      	lsrs	r3, r3, #4
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	7a3b      	ldrb	r3, [r7, #8]
 8005e12:	f362 0382 	bfi	r3, r2, #2, #1
 8005e16:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_ref_mode_xl = (((uint8_t)val & 0x20U) >> 5);
 8005e18:	78fb      	ldrb	r3, [r7, #3]
 8005e1a:	095b      	lsrs	r3, r3, #5
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	7a3b      	ldrb	r3, [r7, #8]
 8005e24:	f362 1304 	bfi	r3, r2, #4, #1
 8005e28:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 8005e2a:	78fb      	ldrb	r3, [r7, #3]
 8005e2c:	f003 0307 	and.w	r3, r3, #7
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	7a3b      	ldrb	r3, [r7, #8]
 8005e34:	f362 1347 	bfi	r3, r2, #5, #3
 8005e38:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL8_XL,
 8005e3a:	f107 0208 	add.w	r2, r7, #8
 8005e3e:	2301      	movs	r3, #1
 8005e40:	2117      	movs	r1, #23
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7ff fb60 	bl	8005508 <lsm6dsr_write_reg>
 8005e48:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <lsm6dsr_i3c_disable_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dsr_i3c_disable_t val)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl9_xl_t ctrl9_xl;
  lsm6dsr_i3c_bus_avb_t i3c_bus_avb;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8005e60:	f107 0210 	add.w	r2, r7, #16
 8005e64:	2301      	movs	r3, #1
 8005e66:	2118      	movs	r1, #24
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f7ff fb35 	bl	80054d8 <lsm6dsr_read_reg>
 8005e6e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d111      	bne.n	8005e9a <lsm6dsr_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8005e76:	78fb      	ldrb	r3, [r7, #3]
 8005e78:	09db      	lsrs	r3, r3, #7
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	f003 0301 	and.w	r3, r3, #1
 8005e80:	b2da      	uxtb	r2, r3
 8005e82:	7c3b      	ldrb	r3, [r7, #16]
 8005e84:	f362 0341 	bfi	r3, r2, #1, #1
 8005e88:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL9_XL,
 8005e8a:	f107 0210 	add.w	r2, r7, #16
 8005e8e:	2301      	movs	r3, #1
 8005e90:	2118      	movs	r1, #24
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7ff fb38 	bl	8005508 <lsm6dsr_write_reg>
 8005e98:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0)
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d107      	bne.n	8005eb0 <lsm6dsr_i3c_disable_set+0x5c>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8005ea0:	f107 020c 	add.w	r2, r7, #12
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	2162      	movs	r1, #98	; 0x62
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7ff fb15 	bl	80054d8 <lsm6dsr_read_reg>
 8005eae:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10f      	bne.n	8005ed6 <lsm6dsr_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8005eb6:	78fb      	ldrb	r3, [r7, #3]
 8005eb8:	f003 0303 	and.w	r3, r3, #3
 8005ebc:	b2da      	uxtb	r2, r3
 8005ebe:	7b3b      	ldrb	r3, [r7, #12]
 8005ec0:	f362 03c4 	bfi	r3, r2, #3, #2
 8005ec4:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8005ec6:	f107 020c 	add.w	r2, r7, #12
 8005eca:	2301      	movs	r3, #1
 8005ecc:	2162      	movs	r1, #98	; 0x62
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f7ff fb1a 	bl	8005508 <lsm6dsr_write_reg>
 8005ed4:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8005ed6:	697b      	ldr	r3, [r7, #20]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3718      	adds	r7, #24
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8005eea:	2102      	movs	r1, #2
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f7ff fedd 	bl	8005cac <lsm6dsr_mem_bank_set>
 8005ef2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d106      	bne.n	8005f08 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 8005efa:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 8005efc:	2301      	movs	r3, #1
 8005efe:	2146      	movs	r1, #70	; 0x46
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f7ff fae9 	bl	80054d8 <lsm6dsr_read_reg>
 8005f06:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d107      	bne.n	8005f1e <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 8005f12:	2301      	movs	r3, #1
 8005f14:	2147      	movs	r1, #71	; 0x47
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7ff fade 	bl	80054d8 <lsm6dsr_read_reg>
 8005f1c:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d104      	bne.n	8005f2e <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8005f24:	2100      	movs	r1, #0
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7ff fec0 	bl	8005cac <lsm6dsr_mem_bank_set>
 8005f2c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8005f42:	2102      	movs	r1, #2
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f7ff feb1 	bl	8005cac <lsm6dsr_mem_bank_set>
 8005f4a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d107      	bne.n	8005f62 <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 8005f52:	f107 0208 	add.w	r2, r7, #8
 8005f56:	2301      	movs	r3, #1
 8005f58:	215f      	movs	r1, #95	; 0x5f
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7ff fabc 	bl	80054d8 <lsm6dsr_read_reg>
 8005f60:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d104      	bne.n	8005f72 <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8005f68:	2100      	movs	r1, #0
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7ff fe9e 	bl	8005cac <lsm6dsr_mem_bank_set>
 8005f70:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 8005f72:	7a3b      	ldrb	r3, [r7, #8]
 8005f74:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b03      	cmp	r3, #3
 8005f7c:	d81a      	bhi.n	8005fb4 <lsm6dsr_fsm_data_rate_get+0x7c>
 8005f7e:	a201      	add	r2, pc, #4	; (adr r2, 8005f84 <lsm6dsr_fsm_data_rate_get+0x4c>)
 8005f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f84:	08005f95 	.word	0x08005f95
 8005f88:	08005f9d 	.word	0x08005f9d
 8005f8c:	08005fa5 	.word	0x08005fa5
 8005f90:	08005fad 	.word	0x08005fad
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	2200      	movs	r2, #0
 8005f98:	701a      	strb	r2, [r3, #0]
      break;
 8005f9a:	e00f      	b.n	8005fbc <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	701a      	strb	r2, [r3, #0]
      break;
 8005fa2:	e00b      	b.n	8005fbc <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	701a      	strb	r2, [r3, #0]
      break;
 8005faa:	e007      	b.n	8005fbc <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	2203      	movs	r2, #3
 8005fb0:	701a      	strb	r2, [r3, #0]
      break;
 8005fb2:	e003      	b.n	8005fbc <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	701a      	strb	r2, [r3, #0]
      break;
 8005fba:	bf00      	nop
  }

  return ret;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop

08005fc8 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	b2d2      	uxtb	r2, r2
 8005fdc:	4611      	mov	r1, r2
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	4798      	blx	r3
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3708      	adds	r7, #8
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <_Z12ISBDCallbackv>:

bool ISBDCallback() __attribute__((weak));
void ISBDConsoleCallback(IridiumSBD *device, char c) __attribute__((weak));
void ISBDDiagsCallback(IridiumSBD *device, char c) __attribute__((weak));

bool ISBDCallback() { return true; }
 8005fec:	b480      	push	{r7}
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <_Z19ISBDConsoleCallbackP10IridiumSBDc>:
void ISBDConsoleCallback(IridiumSBD *device, char c) { }
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	460b      	mov	r3, r1
 8006006:	70fb      	strb	r3, [r7, #3]
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <_Z17ISBDDiagsCallbackP10IridiumSBDc>:
void ISBDDiagsCallback(IridiumSBD *device, char c) { }
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	460b      	mov	r3, r1
 800601e:	70fb      	strb	r3, [r7, #3]
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <_ZN10IridiumSBD5beginEv>:



// Power on the RockBLOCK or return from sleep
int IridiumSBD::begin()
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800603a:	2b00      	cmp	r3, #0
 800603c:	d001      	beq.n	8006042 <_ZN10IridiumSBD5beginEv+0x16>
      return ISBD_REENTRANT;
 800603e:	2309      	movs	r3, #9
 8006040:	e01a      	b.n	8006078 <_ZN10IridiumSBD5beginEv+0x4c>

   this->reentrant = true;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalBegin();
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 faf6 	bl	800663c <_ZN10IridiumSBD13internalBeginEv>
 8006050:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

   // Absent a successful startup, keep the device turned off
   if (ret != ISBD_SUCCESS)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00a      	beq.n	8006076 <_ZN10IridiumSBD5beginEv+0x4a>
   {
      if (this->useSerial)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	7c5b      	ldrb	r3, [r3, #17]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d002      	beq.n	800606e <_ZN10IridiumSBD5beginEv+0x42>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f001 fc2b 	bl	80078c4 <_ZN10IridiumSBD13endSerialPortEv>
      power(false);
 800606e:	2100      	movs	r1, #0
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f001 fb79 	bl	8007768 <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 8006076:	68fb      	ldr	r3, [r7, #12]
}
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <_ZN10IridiumSBD11sendSBDTextEPKc>:
   return ret;
}

// Transmit a text message
int IridiumSBD::sendSBDText(const char *message)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af02      	add	r7, sp, #8
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
   if (this->reentrant)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8006090:	2b00      	cmp	r3, #0
 8006092:	d001      	beq.n	8006098 <_ZN10IridiumSBD11sendSBDTextEPKc+0x18>
      return ISBD_REENTRANT;
 8006094:	2309      	movs	r3, #9
 8006096:	e013      	b.n	80060c0 <_ZN10IridiumSBD11sendSBDTextEPKc+0x40>

   this->reentrant = true;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalSendReceiveSBD(message, NULL, 0, NULL, NULL);
 80060a0:	2300      	movs	r3, #0
 80060a2:	9301      	str	r3, [sp, #4]
 80060a4:	2300      	movs	r3, #0
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	2300      	movs	r3, #0
 80060aa:	2200      	movs	r2, #0
 80060ac:	6839      	ldr	r1, [r7, #0]
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fc4c 	bl	800694c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj>
 80060b4:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 80060be:	68fb      	ldr	r3, [r7, #12]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <_ZN10IridiumSBD16getSignalQualityERi>:
   return ret;
}

// High-level wrapper for AT+CSQ
int IridiumSBD::getSignalQuality(int &quality)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
   if (this->reentrant)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d001      	beq.n	80060e0 <_ZN10IridiumSBD16getSignalQualityERi+0x18>
      return ISBD_REENTRANT;
 80060dc:	2309      	movs	r3, #9
 80060de:	e00d      	b.n	80060fc <_ZN10IridiumSBD16getSignalQualityERi+0x34>

   this->reentrant = true;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalGetSignalQuality(quality);
 80060e8:	6839      	ldr	r1, [r7, #0]
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 feea 	bl	8006ec4 <_ZN10IridiumSBD24internalGetSignalQualityERi>
 80060f0:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 80060fa:	68fb      	ldr	r3, [r7, #12]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <_ZN10IridiumSBD15adjustATTimeoutEi>:
   }
}

// Tweak AT timeout
void IridiumSBD::adjustATTimeout(int seconds)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
   this->atTimeout = seconds;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	683a      	ldr	r2, [r7, #0]
 8006112:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <_ZN10IridiumSBD16enableRingAlertsEb>:
{
   this->msstmWorkaroundRequested = useWorkAround;
}

void IridiumSBD::enableRingAlerts(bool enable) // true to enable SBDRING alerts and RING signal pin
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	460b      	mov	r3, r1
 800612a:	70fb      	strb	r3, [r7, #3]
   this->ringAlertsEnabled = enable;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	78fa      	ldrb	r2, [r7, #3]
 8006130:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
   if (enable)
 8006134:	78fb      	ldrb	r3, [r7, #3]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00d      	beq.n	8006156 <_ZN10IridiumSBD16enableRingAlertsEb+0x36>
   {
      this->ringAsserted = false;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
      if (!this->useSerial) // If we are using I2C, clear the ring indicator flag
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	7c5b      	ldrb	r3, [r3, #17]
 8006146:	f083 0301 	eor.w	r3, r3, #1
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	d002      	beq.n	8006156 <_ZN10IridiumSBD16enableRingAlertsEb+0x36>
      {
        clearRingIndicator();
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 f9b3 	bl	80064bc <_ZN10IridiumSBD18clearRingIndicatorEv>
      }
   }
}
 8006156:	bf00      	nop
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
	...

08006160 <_ZN10IridiumSBD13getSystemTimeER2tm>:

   return ret;
}

int IridiumSBD::getSystemTime(struct tm &tm)
{
 8006160:	b5b0      	push	{r4, r5, r7, lr}
 8006162:	b09c      	sub	sp, #112	; 0x70
 8006164:	af02      	add	r7, sp, #8
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
   char msstmResponseBuf[24];

   send(F("AT-MSSTM\r"));
 800616a:	2301      	movs	r3, #1
 800616c:	2201      	movs	r2, #1
 800616e:	493f      	ldr	r1, [pc, #252]	; (800626c <_ZN10IridiumSBD13getSystemTimeER2tm+0x10c>)
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f001 fbb5 	bl	80078e0 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(msstmResponseBuf, sizeof(msstmResponseBuf), "-MSSTM: "))
 8006176:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800617a:	4b3d      	ldr	r3, [pc, #244]	; (8006270 <_ZN10IridiumSBD13getSystemTimeER2tm+0x110>)
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	4b3d      	ldr	r3, [pc, #244]	; (8006274 <_ZN10IridiumSBD13getSystemTimeER2tm+0x114>)
 8006180:	2218      	movs	r2, #24
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 ff4a 	bl	800701c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006188:	4603      	mov	r3, r0
 800618a:	f083 0301 	eor.w	r3, r3, #1
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b00      	cmp	r3, #0
 8006192:	d009      	beq.n	80061a8 <_ZN10IridiumSBD13getSystemTimeER2tm+0x48>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 ffff 	bl	8007198 <_ZN10IridiumSBD9cancelledEv>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d001      	beq.n	80061a4 <_ZN10IridiumSBD13getSystemTimeER2tm+0x44>
 80061a0:	2304      	movs	r3, #4
 80061a2:	e05e      	b.n	8006262 <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>
 80061a4:	2303      	movs	r3, #3
 80061a6:	e05c      	b.n	8006262 <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>

   if (!isxdigit(msstmResponseBuf[0]))
 80061a8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80061ac:	4618      	mov	r0, r3
 80061ae:	f00c f99f 	bl	80124f0 <isxdigit>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d101      	bne.n	80061bc <_ZN10IridiumSBD13getSystemTimeER2tm+0x5c>
      return ISBD_NO_NETWORK;
 80061b8:	230c      	movs	r3, #12
 80061ba:	e052      	b.n	8006262 <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>

   // Latest epoch began at May 11, 2014, at 14:23:55 UTC.
   struct tm epoch_start;
   epoch_start.tm_year = 2014 - 1900;
 80061bc:	2372      	movs	r3, #114	; 0x72
 80061be:	62bb      	str	r3, [r7, #40]	; 0x28
   epoch_start.tm_mon = 5 - 1;
 80061c0:	2304      	movs	r3, #4
 80061c2:	627b      	str	r3, [r7, #36]	; 0x24
   epoch_start.tm_mday = 11;
 80061c4:	230b      	movs	r3, #11
 80061c6:	623b      	str	r3, [r7, #32]
   epoch_start.tm_hour = 14;
 80061c8:	230e      	movs	r3, #14
 80061ca:	61fb      	str	r3, [r7, #28]
   epoch_start.tm_min = 23;
 80061cc:	2317      	movs	r3, #23
 80061ce:	61bb      	str	r3, [r7, #24]
   epoch_start.tm_sec = 55;
 80061d0:	2337      	movs	r3, #55	; 0x37
 80061d2:	617b      	str	r3, [r7, #20]

   unsigned long ticks_since_epoch = strtoul(msstmResponseBuf, NULL, 16);
 80061d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80061d8:	2210      	movs	r2, #16
 80061da:	2100      	movs	r1, #0
 80061dc:	4618      	mov	r0, r3
 80061de:	f00e fe2d 	bl	8014e3c <strtoul>
 80061e2:	6678      	str	r0, [r7, #100]	; 0x64
      seconds less than the equivalent ticks_since_epoch. Subtract that away and
      we'll be left with a small number that won't overflow when we scale by 90/1000.

      Many thanks to Scott Weldon for this suggestion.
   */
   unsigned long secs_since_epoch = (ticks_since_epoch / 1000) * 90;
 80061e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061e6:	4a24      	ldr	r2, [pc, #144]	; (8006278 <_ZN10IridiumSBD13getSystemTimeER2tm+0x118>)
 80061e8:	fba2 2303 	umull	r2, r3, r2, r3
 80061ec:	099b      	lsrs	r3, r3, #6
 80061ee:	225a      	movs	r2, #90	; 0x5a
 80061f0:	fb02 f303 	mul.w	r3, r2, r3
 80061f4:	663b      	str	r3, [r7, #96]	; 0x60
   unsigned long small_ticks = ticks_since_epoch - (secs_since_epoch / 90) * 1000;
 80061f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061f8:	085b      	lsrs	r3, r3, #1
 80061fa:	4a20      	ldr	r2, [pc, #128]	; (800627c <_ZN10IridiumSBD13getSystemTimeER2tm+0x11c>)
 80061fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006200:	095b      	lsrs	r3, r3, #5
 8006202:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006206:	fb02 f303 	mul.w	r3, r2, r3
 800620a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	65fb      	str	r3, [r7, #92]	; 0x5c
   secs_since_epoch += small_ticks * 90 / 1000;
 8006210:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006212:	225a      	movs	r2, #90	; 0x5a
 8006214:	fb02 f303 	mul.w	r3, r2, r3
 8006218:	4a17      	ldr	r2, [pc, #92]	; (8006278 <_ZN10IridiumSBD13getSystemTimeER2tm+0x118>)
 800621a:	fba2 2303 	umull	r2, r3, r2, r3
 800621e:	099b      	lsrs	r3, r3, #6
 8006220:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006222:	4413      	add	r3, r2
 8006224:	663b      	str	r3, [r7, #96]	; 0x60

   time_t epoch_time = mktime(&epoch_start);
 8006226:	f107 0314 	add.w	r3, r7, #20
 800622a:	4618      	mov	r0, r3
 800622c:	f00c fb9a 	bl	8012964 <mktime>
 8006230:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
   time_t now = epoch_time + secs_since_epoch;
 8006234:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006236:	4618      	mov	r0, r3
 8006238:	f04f 0100 	mov.w	r1, #0
 800623c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006240:	1884      	adds	r4, r0, r2
 8006242:	eb41 0503 	adc.w	r5, r1, r3
 8006246:	e9c7 4502 	strd	r4, r5, [r7, #8]
   memcpy(&tm, localtime(&now), sizeof tm);
 800624a:	f107 0308 	add.w	r3, r7, #8
 800624e:	4618      	mov	r0, r3
 8006250:	f00c f956 	bl	8012500 <localtime>
 8006254:	4603      	mov	r3, r0
 8006256:	2224      	movs	r2, #36	; 0x24
 8006258:	4619      	mov	r1, r3
 800625a:	6838      	ldr	r0, [r7, #0]
 800625c:	f00c fa7a 	bl	8012754 <memcpy>
   return ISBD_SUCCESS;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3768      	adds	r7, #104	; 0x68
 8006266:	46bd      	mov	sp, r7
 8006268:	bdb0      	pop	{r4, r5, r7, pc}
 800626a:	bf00      	nop
 800626c:	0801937c 	.word	0x0801937c
 8006270:	08019394 	.word	0x08019394
 8006274:	08019388 	.word	0x08019388
 8006278:	10624dd3 	.word	0x10624dd3
 800627c:	b60b60b7 	.word	0xb60b60b7

08006280 <_ZN10IridiumSBD18getFirmwareVersionEPcj>:

int IridiumSBD::getFirmwareVersion(char *version, size_t bufferSize)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b086      	sub	sp, #24
 8006284:	af02      	add	r7, sp, #8
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
   if (bufferSize < 8)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b07      	cmp	r3, #7
 8006290:	d801      	bhi.n	8006296 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x16>
      return ISBD_RX_OVERFLOW;
 8006292:	2308      	movs	r3, #8
 8006294:	e01e      	b.n	80062d4 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   send(F("AT+CGMR\r"));
 8006296:	2301      	movs	r3, #1
 8006298:	2201      	movs	r2, #1
 800629a:	4910      	ldr	r1, [pc, #64]	; (80062dc <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x5c>)
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f001 fb1f 	bl	80078e0 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(version, bufferSize, "Call Processor Version: "))
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	4b0e      	ldr	r3, [pc, #56]	; (80062e0 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x60>)
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	4b0e      	ldr	r3, [pc, #56]	; (80062e4 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x64>)
 80062aa:	68b9      	ldr	r1, [r7, #8]
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 feb5 	bl	800701c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80062b2:	4603      	mov	r3, r0
 80062b4:	f083 0301 	eor.w	r3, r3, #1
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d009      	beq.n	80062d2 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x52>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f000 ff6a 	bl	8007198 <_ZN10IridiumSBD9cancelledEv>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x4e>
 80062ca:	2304      	movs	r3, #4
 80062cc:	e002      	b.n	80062d4 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>
 80062ce:	2303      	movs	r3, #3
 80062d0:	e000      	b.n	80062d4 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   return ISBD_SUCCESS;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	0801939c 	.word	0x0801939c
 80062e0:	08019394 	.word	0x08019394
 80062e4:	080193a8 	.word	0x080193a8

080062e8 <_ZN10IridiumSBD21enableSuperCapChargerEb>:

void IridiumSBD::enableSuperCapCharger(bool enable)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	460b      	mov	r3, r1
 80062f2:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the charger manually)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	7c5b      	ldrb	r3, [r3, #17]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d004      	beq.n	8006306 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x1e>
  {
    diagprint(F("enableSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 80062fc:	4918      	ldr	r1, [pc, #96]	; (8006360 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x78>)
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f001 fc6c 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8006304:	e028      	b.n	8006358 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x70>
  }

  // Enable/disable the supercapacitor charger by pulling its SHDN pin high/low
  check9603pins(); // Update IO_REGISTER
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f001 ff59 	bl	80081be <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 800630c:	78fb      	ldrb	r3, [r7, #3]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00b      	beq.n	800632a <_ZN10IridiumSBD21enableSuperCapChargerEb+0x42>
  {
    IO_REGISTER |= IO_SHDN; // Set the SHDN bit
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800631e:	4313      	orrs	r3, r2
 8006320:	b2da      	uxtb	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8006328:	e00f      	b.n	800634a <_ZN10IridiumSBD21enableSuperCapChargerEb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_SHDN; // Clear the SHDN bit
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8006330:	b25a      	sxtb	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006338:	b25b      	sxtb	r3, r3
 800633a:	43db      	mvns	r3, r3
 800633c:	b25b      	sxtb	r3, r3
 800633e:	4013      	ands	r3, r2
 8006340:	b25b      	sxtb	r3, r3
 8006342:	b2da      	uxtb	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
  set9603pins(IO_REGISTER); // Update the pins
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8006350:	4619      	mov	r1, r3
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f001 ff6c 	bl	8008230 <_ZN10IridiumSBD11set9603pinsEh>
}
 8006358:	3708      	adds	r7, #8
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	080193c4 	.word	0x080193c4

08006364 <_ZN10IridiumSBD20checkSuperCapChargerEv>:

bool IridiumSBD::checkSuperCapCharger()
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial (the user will have to check PGOOD manually)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	7c5b      	ldrb	r3, [r3, #17]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d005      	beq.n	8006380 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x1c>
  {
    diagprint(F("checkSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8006374:	4912      	ldr	r1, [pc, #72]	; (80063c0 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x5c>)
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f001 fc30 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return(false);
 800637c:	2300      	movs	r3, #0
 800637e:	e01a      	b.n	80063b6 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x52>
  }

  // Check the status of the supercapacitor charger PGOOD pin
  check9603pins(); // Update IO_REGISTER
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f001 ff1c 	bl	80081be <_ZN10IridiumSBD13check9603pinsEv>
  if (IO_REGISTER &= IO_PGOOD) // If the PGOOD bit is set, return true
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8006392:	4013      	ands	r3, r2
 8006394:	b2da      	uxtb	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	bf14      	ite	ne
 80063a6:	2301      	movne	r3, #1
 80063a8:	2300      	moveq	r3, #0
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d001      	beq.n	80063b4 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x50>
  {
    return(true);
 80063b0:	2301      	movs	r3, #1
 80063b2:	e000      	b.n	80063b6 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x52>
  }
  else
  {
    return(false);
 80063b4:	2300      	movs	r3, #0
  }
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3708      	adds	r7, #8
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	08019410 	.word	0x08019410

080063c4 <_ZN10IridiumSBD16enable9603NpowerEb>:

void IridiumSBD::enable9603Npower(bool enable)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	460b      	mov	r3, r1
 80063ce:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N power manually)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	7c5b      	ldrb	r3, [r3, #17]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d004      	beq.n	80063e2 <_ZN10IridiumSBD16enable9603NpowerEb+0x1e>
  {
    diagprint(F("enable9603Npower is only valid when using I2C on the Qwiic Iridium\r\n"));
 80063d8:	4918      	ldr	r1, [pc, #96]	; (800643c <_ZN10IridiumSBD16enable9603NpowerEb+0x78>)
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f001 fbfe 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 80063e0:	e028      	b.n	8006434 <_ZN10IridiumSBD16enable9603NpowerEb+0x70>
  }

  // Enable/disable power to the 9603N by pulling PWR_EN high/low
  check9603pins(); // Update IO_REGISTER
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f001 feeb 	bl	80081be <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 80063e8:	78fb      	ldrb	r3, [r7, #3]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00b      	beq.n	8006406 <_ZN10IridiumSBD16enable9603NpowerEb+0x42>
  {
    IO_REGISTER |= IO_PWR_EN; // Set the PWR_EN bit
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 80063fa:	4313      	orrs	r3, r2
 80063fc:	b2da      	uxtb	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8006404:	e00f      	b.n	8006426 <_ZN10IridiumSBD16enable9603NpowerEb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_PWR_EN; // Clear the PWR_EN bit
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800640c:	b25a      	sxtb	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8006414:	b25b      	sxtb	r3, r3
 8006416:	43db      	mvns	r3, r3
 8006418:	b25b      	sxtb	r3, r3
 800641a:	4013      	ands	r3, r2
 800641c:	b25b      	sxtb	r3, r3
 800641e:	b2da      	uxtb	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
  set9603pins(IO_REGISTER); // Update the pins
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800642c:	4619      	mov	r1, r3
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f001 fefe 	bl	8008230 <_ZN10IridiumSBD11set9603pinsEh>
}
 8006434:	3708      	adds	r7, #8
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	0801945c 	.word	0x0801945c

08006440 <_ZN10IridiumSBD10enable9603Eb>:

void IridiumSBD::enable9603(bool enable)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	460b      	mov	r3, r1
 800644a:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N manually)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	7c5b      	ldrb	r3, [r3, #17]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d004      	beq.n	800645e <_ZN10IridiumSBD10enable9603Eb+0x1e>
  {
    diagprint(F("enable9603 is only valid when using I2C on the Qwiic Iridium\r\n"));
 8006454:	4918      	ldr	r1, [pc, #96]	; (80064b8 <_ZN10IridiumSBD10enable9603Eb+0x78>)
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f001 fbc0 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 800645c:	e028      	b.n	80064b0 <_ZN10IridiumSBD10enable9603Eb+0x70>
  }

  // Enable/disable the 9603 by pulling ON_OFF high/low
  check9603pins(); // Update IO_REGISTER
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f001 fead 	bl	80081be <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8006464:	78fb      	ldrb	r3, [r7, #3]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00b      	beq.n	8006482 <_ZN10IridiumSBD10enable9603Eb+0x42>
  {
    IO_REGISTER |= IO_ON_OFF; // Set the ON_OFF bit
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8006476:	4313      	orrs	r3, r2
 8006478:	b2da      	uxtb	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8006480:	e00f      	b.n	80064a2 <_ZN10IridiumSBD10enable9603Eb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_ON_OFF; // Clear the ON_OFF bit
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8006488:	b25a      	sxtb	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8006490:	b25b      	sxtb	r3, r3
 8006492:	43db      	mvns	r3, r3
 8006494:	b25b      	sxtb	r3, r3
 8006496:	4013      	ands	r3, r2
 8006498:	b25b      	sxtb	r3, r3
 800649a:	b2da      	uxtb	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
  set9603pins(IO_REGISTER); // Update the pins
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80064a8:	4619      	mov	r1, r3
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f001 fec0 	bl	8008230 <_ZN10IridiumSBD11set9603pinsEh>
}
 80064b0:	3708      	adds	r7, #8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	080194a4 	.word	0x080194a4

080064bc <_ZN10IridiumSBD18clearRingIndicatorEv>:
    return(false);
  }
}

void IridiumSBD::clearRingIndicator()
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	7c5b      	ldrb	r3, [r3, #17]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d004      	beq.n	80064d6 <_ZN10IridiumSBD18clearRingIndicatorEv+0x1a>
  {
    diagprint(F("clearRingIndicator is only valid when using I2C on the Qwiic Iridium\r\n"));
 80064cc:	4912      	ldr	r1, [pc, #72]	; (8006518 <_ZN10IridiumSBD18clearRingIndicatorEv+0x5c>)
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f001 fb84 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 80064d4:	e01d      	b.n	8006512 <_ZN10IridiumSBD18clearRingIndicatorEv+0x56>
  }

  // Clear the 9603 RI flag
  check9603pins(); // Update IO_REGISTER
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f001 fe71 	bl	80081be <_ZN10IridiumSBD13check9603pinsEv>
  IO_REGISTER &= ~IO_RI; // Clear the RI bit
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80064e2:	b25a      	sxtb	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80064ea:	b25b      	sxtb	r3, r3
 80064ec:	43db      	mvns	r3, r3
 80064ee:	b25b      	sxtb	r3, r3
 80064f0:	4013      	ands	r3, r2
 80064f2:	b25b      	sxtb	r3, r3
 80064f4:	b2da      	uxtb	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  set9603pins(IO_REGISTER); // Update the pins
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8006502:	4619      	mov	r1, r3
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f001 fe93 	bl	8008230 <_ZN10IridiumSBD11set9603pinsEh>
  this->ringAsserted = false; // Also clear the ringAsserted flag
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
}
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	08019574 	.word	0x08019574

0800651c <_ZN10IridiumSBD21checkNetworkAvailableEv>:

bool IridiumSBD::checkNetworkAvailable()
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	7c5b      	ldrb	r3, [r3, #17]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d005      	beq.n	8006538 <_ZN10IridiumSBD21checkNetworkAvailableEv+0x1c>
  {
    diagprint(F("checkNetworkAvailable is only valid when using I2C on the Qwiic Iridium\r\n"));
 800652c:	4912      	ldr	r1, [pc, #72]	; (8006578 <_ZN10IridiumSBD21checkNetworkAvailableEv+0x5c>)
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f001 fb54 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return(false);
 8006534:	2300      	movs	r3, #0
 8006536:	e01a      	b.n	800656e <_ZN10IridiumSBD21checkNetworkAvailableEv+0x52>
  }

  // Check the status of the 9603 Network Available pin
  check9603pins(); // Update IO_REGISTER
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f001 fe40 	bl	80081be <_ZN10IridiumSBD13check9603pinsEv>
  if (IO_REGISTER &= IO_NA) // If the NA bit is set, return true
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800654a:	4013      	ands	r3, r2
 800654c:	b2da      	uxtb	r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800655a:	2b00      	cmp	r3, #0
 800655c:	bf14      	ite	ne
 800655e:	2301      	movne	r3, #1
 8006560:	2300      	moveq	r3, #0
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b00      	cmp	r3, #0
 8006566:	d001      	beq.n	800656c <_ZN10IridiumSBD21checkNetworkAvailableEv+0x50>
  {
    return(true);
 8006568:	2301      	movs	r3, #1
 800656a:	e000      	b.n	800656e <_ZN10IridiumSBD21checkNetworkAvailableEv+0x52>
  }
  else
  {
    return(false);
 800656c:	2300      	movs	r3, #0
  }
}
 800656e:	4618      	mov	r0, r3
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	080195bc 	.word	0x080195bc

0800657c <_ZN10IridiumSBD12clearBuffersEi>:

// High-level wrapper for AT+SBDD
int IridiumSBD::clearBuffers(int buffers)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
   if (this->reentrant)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800658c:	2b00      	cmp	r3, #0
 800658e:	d001      	beq.n	8006594 <_ZN10IridiumSBD12clearBuffersEi+0x18>
      return ISBD_REENTRANT;
 8006590:	2309      	movs	r3, #9
 8006592:	e00d      	b.n	80065b0 <_ZN10IridiumSBD12clearBuffersEi+0x34>

   this->reentrant = true;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalClearBuffers(buffers);
 800659c:	6839      	ldr	r1, [r7, #0]
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f001 fed0 	bl	8008344 <_ZN10IridiumSBD20internalClearBuffersEi>
 80065a4:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 80065ae:	68fb      	ldr	r3, [r7, #12]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <_ZN10IridiumSBD7getIMEIEPcj>:

// High-level wrapper for AT+CGSN
int IridiumSBD::getIMEI(char *IMEI, size_t bufferSize)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
   if (this->reentrant)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <_ZN10IridiumSBD7getIMEIEPcj+0x1a>
      return ISBD_REENTRANT;
 80065ce:	2309      	movs	r3, #9
 80065d0:	e00e      	b.n	80065f0 <_ZN10IridiumSBD7getIMEIEPcj+0x38>

   this->reentrant = true;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalGetIMEI(IMEI, bufferSize);
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	68b9      	ldr	r1, [r7, #8]
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f001 fefc 	bl	80083dc <_ZN10IridiumSBD15internalGetIMEIEPcj>
 80065e4:	6178      	str	r0, [r7, #20]
   this->reentrant = false;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 80065ee:	697b      	ldr	r3, [r7, #20]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3718      	adds	r7, #24
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <_ZN10IridiumSBD11isConnectedEv>:

//Returns true if the I2C device is connected
//Always returns true for serial
//boolean IridiumSBD::isConnected() TODO
bool IridiumSBD::isConnected()
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
   if (this->useSerial) // If we are using Serial
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	7c5b      	ldrb	r3, [r3, #17]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <_ZN10IridiumSBD11isConnectedEv+0x14>
   {
		return true;
 8006608:	2301      	movs	r3, #1
 800660a:	e012      	b.n	8006632 <_ZN10IridiumSBD11isConnectedEv+0x3a>
   }
   else
   {
		wireport->beginTransmission((uint8_t)deviceaddress);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68da      	ldr	r2, [r3, #12]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	7c1b      	ldrb	r3, [r3, #16]
 8006614:	4619      	mov	r1, r3
 8006616:	4610      	mov	r0, r2
 8006618:	f002 fce0 	bl	8008fdc <_ZN7TwoWire17beginTransmissionEh>
		return (wireport->endTransmission() == 0); // Check that the device ack's
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	4618      	mov	r0, r3
 8006622:	f002 fd25 	bl	8009070 <_ZN7TwoWire15endTransmissionEv>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	bf0c      	ite	eq
 800662c:	2301      	moveq	r3, #1
 800662e:	2300      	movne	r3, #0
 8006630:	b2db      	uxtb	r3, r3
   }
}
 8006632:	4618      	mov	r0, r3
 8006634:	3708      	adds	r7, #8
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
	...

0800663c <_ZN10IridiumSBD13internalBeginEv>:
/*
Private interface
*/

int IridiumSBD::internalBegin()
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b090      	sub	sp, #64	; 0x40
 8006640:	af02      	add	r7, sp, #8
 8006642:	6078      	str	r0, [r7, #4]
   diagprint(F("Calling internalBegin\r\n"));
 8006644:	49b0      	ldr	r1, [pc, #704]	; (8006908 <_ZN10IridiumSBD13internalBeginEv+0x2cc>)
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f001 fac8 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (!this->asleep)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8006652:	f083 0301 	eor.w	r3, r3, #1
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <_ZN10IridiumSBD13internalBeginEv+0x24>
      return ISBD_ALREADY_AWAKE;
 800665c:	2301      	movs	r3, #1
 800665e:	e14f      	b.n	8006900 <_ZN10IridiumSBD13internalBeginEv+0x2c4>

   if (!this->useSerial) // If we are using I2C
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	7c5b      	ldrb	r3, [r3, #17]
 8006664:	f083 0301 	eor.w	r3, r3, #1
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d005      	beq.n	800667a <_ZN10IridiumSBD13internalBeginEv+0x3e>
   {
      check9603pins(); // Update IO_REGISTER with the status of the 9603 pins
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f001 fda5 	bl	80081be <_ZN10IridiumSBD13check9603pinsEv>
      check9603data(); // Get any waiting 9603 serial data
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f001 fcd1 	bl	800801c <_ZN10IridiumSBD13check9603dataEv>
   }

   power(true); // power on
 800667a:	2101      	movs	r1, #1
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f001 f873 	bl	8007768 <_ZN10IridiumSBD5powerEb>

   bool modemAlive = false;
 8006682:	2300      	movs	r3, #0
 8006684:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

   unsigned long startupTime = 500; //ms
 8006688:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800668c:	62fb      	str	r3, [r7, #44]	; 0x2c
   for (unsigned long start = millis(); millis() - start < startupTime;)
 800668e:	f003 f965 	bl	800995c <HAL_GetTick>
 8006692:	62b8      	str	r0, [r7, #40]	; 0x28
 8006694:	f003 f962 	bl	800995c <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066a0:	429a      	cmp	r2, r3
 80066a2:	bf8c      	ite	hi
 80066a4:	2301      	movhi	r3, #1
 80066a6:	2300      	movls	r3, #0
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d007      	beq.n	80066be <_ZN10IridiumSBD13internalBeginEv+0x82>
      if (cancelled())
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 fd72 	bl	8007198 <_ZN10IridiumSBD9cancelledEv>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d0ec      	beq.n	8006694 <_ZN10IridiumSBD13internalBeginEv+0x58>
         return ISBD_CANCELLED;
 80066ba:	2304      	movs	r3, #4
 80066bc:	e120      	b.n	8006900 <_ZN10IridiumSBD13internalBeginEv+0x2c4>

   if (this->useSerial) // If we are using Serial
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	7c5b      	ldrb	r3, [r3, #17]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d002      	beq.n	80066cc <_ZN10IridiumSBD13internalBeginEv+0x90>
      beginSerialPort(); // Apollo3 v2.1 Serial fix - begin the Serial port 500ms after power(true)
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f001 f8ee 	bl	80078a8 <_ZN10IridiumSBD15beginSerialPortEv>

   // Turn on modem and wait for a response from "AT" command to begin
   for (unsigned long start = millis(); !modemAlive && millis() - start < 1000UL * this->startupTimeout;)
 80066cc:	f003 f946 	bl	800995c <HAL_GetTick>
 80066d0:	6278      	str	r0, [r7, #36]	; 0x24
 80066d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80066d6:	f083 0301 	eor.w	r3, r3, #1
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00f      	beq.n	8006700 <_ZN10IridiumSBD13internalBeginEv+0xc4>
 80066e0:	f003 f93c 	bl	800995c <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e8:	1ad2      	subs	r2, r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066ee:	4619      	mov	r1, r3
 80066f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80066f4:	fb03 f301 	mul.w	r3, r3, r1
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d201      	bcs.n	8006700 <_ZN10IridiumSBD13internalBeginEv+0xc4>
 80066fc:	2301      	movs	r3, #1
 80066fe:	e000      	b.n	8006702 <_ZN10IridiumSBD13internalBeginEv+0xc6>
 8006700:	2300      	movs	r3, #0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d018      	beq.n	8006738 <_ZN10IridiumSBD13internalBeginEv+0xfc>
   {
      send(F("AT\r"));
 8006706:	2301      	movs	r3, #1
 8006708:	2201      	movs	r2, #1
 800670a:	4980      	ldr	r1, [pc, #512]	; (800690c <_ZN10IridiumSBD13internalBeginEv+0x2d0>)
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f001 f8e7 	bl	80078e0 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      modemAlive = waitForATResponse();
 8006712:	4b7f      	ldr	r3, [pc, #508]	; (8006910 <_ZN10IridiumSBD13internalBeginEv+0x2d4>)
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	2300      	movs	r3, #0
 8006718:	2200      	movs	r2, #0
 800671a:	2100      	movs	r1, #0
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fc7d 	bl	800701c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006722:	4603      	mov	r3, r0
 8006724:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (cancelled())
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 fd35 	bl	8007198 <_ZN10IridiumSBD9cancelledEv>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d0ce      	beq.n	80066d2 <_ZN10IridiumSBD13internalBeginEv+0x96>
         return ISBD_CANCELLED;
 8006734:	2304      	movs	r3, #4
 8006736:	e0e3      	b.n	8006900 <_ZN10IridiumSBD13internalBeginEv+0x2c4>
   }

   if (!modemAlive)
 8006738:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800673c:	f083 0301 	eor.w	r3, r3, #1
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d005      	beq.n	8006752 <_ZN10IridiumSBD13internalBeginEv+0x116>
   {
      diagprint(F("No modem detected.\r\n"));
 8006746:	4973      	ldr	r1, [pc, #460]	; (8006914 <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f001 fa47 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      return ISBD_NO_MODEM_DETECTED;
 800674e:	2305      	movs	r3, #5
 8006750:	e0d6      	b.n	8006900 <_ZN10IridiumSBD13internalBeginEv+0x2c4>
   }

   // The usual initialization sequence
   const char *strings[3] = { "ATE1\r", "AT&D0\r", "AT&K0\r" };
 8006752:	4a71      	ldr	r2, [pc, #452]	; (8006918 <_ZN10IridiumSBD13internalBeginEv+0x2dc>)
 8006754:	f107 0310 	add.w	r3, r7, #16
 8006758:	ca07      	ldmia	r2, {r0, r1, r2}
 800675a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   for (int i=0; i<3; ++i)
 800675e:	2300      	movs	r3, #0
 8006760:	633b      	str	r3, [r7, #48]	; 0x30
 8006762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006764:	2b02      	cmp	r3, #2
 8006766:	dc26      	bgt.n	80067b6 <_ZN10IridiumSBD13internalBeginEv+0x17a>
   {
      send(strings[i]);
 8006768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006770:	4413      	add	r3, r2
 8006772:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8006776:	4619      	mov	r1, r3
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f001 f90d 	bl	8007998 <_ZN10IridiumSBD4sendEPKc>
      if (!waitForATResponse())
 800677e:	4b64      	ldr	r3, [pc, #400]	; (8006910 <_ZN10IridiumSBD13internalBeginEv+0x2d4>)
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	2300      	movs	r3, #0
 8006784:	2200      	movs	r2, #0
 8006786:	2100      	movs	r1, #0
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 fc47 	bl	800701c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 800678e:	4603      	mov	r3, r0
 8006790:	f083 0301 	eor.w	r3, r3, #1
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d009      	beq.n	80067ae <_ZN10IridiumSBD13internalBeginEv+0x172>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fcfc 	bl	8007198 <_ZN10IridiumSBD9cancelledEv>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <_ZN10IridiumSBD13internalBeginEv+0x16e>
 80067a6:	2304      	movs	r3, #4
 80067a8:	e0aa      	b.n	8006900 <_ZN10IridiumSBD13internalBeginEv+0x2c4>
 80067aa:	2303      	movs	r3, #3
 80067ac:	e0a8      	b.n	8006900 <_ZN10IridiumSBD13internalBeginEv+0x2c4>
   for (int i=0; i<3; ++i)
 80067ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b0:	3301      	adds	r3, #1
 80067b2:	633b      	str	r3, [r7, #48]	; 0x30
 80067b4:	e7d5      	b.n	8006762 <_ZN10IridiumSBD13internalBeginEv+0x126>
   }

   // Enable or disable RING alerts as requested by user
   // By default they are on if a RING pin was supplied on constructor
   diagprint(F("Ring alerts are")); diagprint(ringAlertsEnabled ? F("") : F(" NOT")); diagprint(F(" enabled.\r\n"));
 80067b6:	4959      	ldr	r1, [pc, #356]	; (800691c <_ZN10IridiumSBD13internalBeginEv+0x2e0>)
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f001 fa0f 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d001      	beq.n	80067cc <_ZN10IridiumSBD13internalBeginEv+0x190>
 80067c8:	4b55      	ldr	r3, [pc, #340]	; (8006920 <_ZN10IridiumSBD13internalBeginEv+0x2e4>)
 80067ca:	e000      	b.n	80067ce <_ZN10IridiumSBD13internalBeginEv+0x192>
 80067cc:	4b55      	ldr	r3, [pc, #340]	; (8006924 <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 80067ce:	4619      	mov	r1, r3
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f001 fa03 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 80067d6:	4954      	ldr	r1, [pc, #336]	; (8006928 <_ZN10IridiumSBD13internalBeginEv+0x2ec>)
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f001 f9ff 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (ringAlertsEnabled) enableRingAlerts(true); // This will clear ringAsserted and the Ring Indicator flag
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d004      	beq.n	80067f2 <_ZN10IridiumSBD13internalBeginEv+0x1b6>
 80067e8:	2101      	movs	r1, #1
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7ff fc98 	bl	8006120 <_ZN10IridiumSBD16enableRingAlertsEb>
 80067f0:	e009      	b.n	8006806 <_ZN10IridiumSBD13internalBeginEv+0x1ca>
   else {
	   if (!this->useSerial) clearRingIndicator(); // If ring alerts are not enabled and using I2C, make sure the Ring Indicator flag is clear
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	7c5b      	ldrb	r3, [r3, #17]
 80067f6:	f083 0301 	eor.w	r3, r3, #1
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d002      	beq.n	8006806 <_ZN10IridiumSBD13internalBeginEv+0x1ca>
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f7ff fe5b 	bl	80064bc <_ZN10IridiumSBD18clearRingIndicatorEv>
   }

   send(ringAlertsEnabled ? F("AT+SBDMTA=1\r") : F("AT+SBDMTA=0\r"));
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800680c:	2b00      	cmp	r3, #0
 800680e:	d001      	beq.n	8006814 <_ZN10IridiumSBD13internalBeginEv+0x1d8>
 8006810:	4946      	ldr	r1, [pc, #280]	; (800692c <_ZN10IridiumSBD13internalBeginEv+0x2f0>)
 8006812:	e000      	b.n	8006816 <_ZN10IridiumSBD13internalBeginEv+0x1da>
 8006814:	4946      	ldr	r1, [pc, #280]	; (8006930 <_ZN10IridiumSBD13internalBeginEv+0x2f4>)
 8006816:	2301      	movs	r3, #1
 8006818:	2201      	movs	r2, #1
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f001 f860 	bl	80078e0 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   HAL_Delay(10); //TODO Added
 8006820:	200a      	movs	r0, #10
 8006822:	f003 f8a7 	bl	8009974 <HAL_Delay>
   if (!waitForATResponse())
 8006826:	4b3a      	ldr	r3, [pc, #232]	; (8006910 <_ZN10IridiumSBD13internalBeginEv+0x2d4>)
 8006828:	9300      	str	r3, [sp, #0]
 800682a:	2300      	movs	r3, #0
 800682c:	2200      	movs	r2, #0
 800682e:	2100      	movs	r1, #0
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 fbf3 	bl	800701c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006836:	4603      	mov	r3, r0
 8006838:	f083 0301 	eor.w	r3, r3, #1
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	d009      	beq.n	8006856 <_ZN10IridiumSBD13internalBeginEv+0x21a>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fca8 	bl	8007198 <_ZN10IridiumSBD9cancelledEv>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <_ZN10IridiumSBD13internalBeginEv+0x216>
 800684e:	2304      	movs	r3, #4
 8006850:	e056      	b.n	8006900 <_ZN10IridiumSBD13internalBeginEv+0x2c4>
 8006852:	2303      	movs	r3, #3
 8006854:	e054      	b.n	8006900 <_ZN10IridiumSBD13internalBeginEv+0x2c4>

   // Decide whether the internal MSSTM workaround should be enforced on TX/RX
   // By default it is unless the firmware rev is >= TA13001
   char version[8];
   int ret = getFirmwareVersion(version, sizeof(version));
 8006856:	f107 0308 	add.w	r3, r7, #8
 800685a:	2208      	movs	r2, #8
 800685c:	4619      	mov	r1, r3
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7ff fd0e 	bl	8006280 <_ZN10IridiumSBD18getFirmwareVersionEPcj>
 8006864:	6238      	str	r0, [r7, #32]
   if (ret != ISBD_SUCCESS)
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d008      	beq.n	800687e <_ZN10IridiumSBD13internalBeginEv+0x242>
   {
      diagprint(F("Unknown FW version\r\n"));
 800686c:	4931      	ldr	r1, [pc, #196]	; (8006934 <_ZN10IridiumSBD13internalBeginEv+0x2f8>)
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f001 f9b4 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      msstmWorkaroundRequested = true;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 800687c:	e027      	b.n	80068ce <_ZN10IridiumSBD13internalBeginEv+0x292>
   }
   else
   {
      diagprint(F("Firmware version is ")); diagprint(version); diagprint(F("\r\n"));
 800687e:	492e      	ldr	r1, [pc, #184]	; (8006938 <_ZN10IridiumSBD13internalBeginEv+0x2fc>)
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f001 f9ab 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8006886:	f107 0308 	add.w	r3, r7, #8
 800688a:	4619      	mov	r1, r3
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f001 f9c3 	bl	8007c18 <_ZN10IridiumSBD9diagprintEPKc>
 8006892:	492a      	ldr	r1, [pc, #168]	; (800693c <_ZN10IridiumSBD13internalBeginEv+0x300>)
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f001 f9a1 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (version[0] == 'T' && version[1] == 'A')
 800689a:	7a3b      	ldrb	r3, [r7, #8]
 800689c:	2b54      	cmp	r3, #84	; 0x54
 800689e:	d116      	bne.n	80068ce <_ZN10IridiumSBD13internalBeginEv+0x292>
 80068a0:	7a7b      	ldrb	r3, [r7, #9]
 80068a2:	2b41      	cmp	r3, #65	; 0x41
 80068a4:	d113      	bne.n	80068ce <_ZN10IridiumSBD13internalBeginEv+0x292>
      {
         unsigned long ver = strtoul(version + 2, NULL, 10);
 80068a6:	f107 0308 	add.w	r3, r7, #8
 80068aa:	3302      	adds	r3, #2
 80068ac:	220a      	movs	r2, #10
 80068ae:	2100      	movs	r1, #0
 80068b0:	4618      	mov	r0, r3
 80068b2:	f00e fac3 	bl	8014e3c <strtoul>
 80068b6:	61f8      	str	r0, [r7, #28]
         msstmWorkaroundRequested = ver < ISBD_MSSTM_WORKAROUND_FW_VER;
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80068be:	4293      	cmp	r3, r2
 80068c0:	bf94      	ite	ls
 80068c2:	2301      	movls	r3, #1
 80068c4:	2300      	movhi	r3, #0
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
      }
   }
   diagprint(F("MSSTM workaround is")); diagprint(msstmWorkaroundRequested ? F("") : F(" NOT")); diagprint(F(" enforced.\r\n"));
 80068ce:	491c      	ldr	r1, [pc, #112]	; (8006940 <_ZN10IridiumSBD13internalBeginEv+0x304>)
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f001 f983 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d001      	beq.n	80068e4 <_ZN10IridiumSBD13internalBeginEv+0x2a8>
 80068e0:	4b0f      	ldr	r3, [pc, #60]	; (8006920 <_ZN10IridiumSBD13internalBeginEv+0x2e4>)
 80068e2:	e000      	b.n	80068e6 <_ZN10IridiumSBD13internalBeginEv+0x2aa>
 80068e4:	4b0f      	ldr	r3, [pc, #60]	; (8006924 <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 80068e6:	4619      	mov	r1, r3
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f001 f977 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 80068ee:	4915      	ldr	r1, [pc, #84]	; (8006944 <_ZN10IridiumSBD13internalBeginEv+0x308>)
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f001 f973 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   // Done!
   diagprint(F("InternalBegin: success!\r\n"));
 80068f6:	4914      	ldr	r1, [pc, #80]	; (8006948 <_ZN10IridiumSBD13internalBeginEv+0x30c>)
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f001 f96f 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   return ISBD_SUCCESS;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3738      	adds	r7, #56	; 0x38
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	08019694 	.word	0x08019694
 800690c:	080196ac 	.word	0x080196ac
 8006910:	08019394 	.word	0x08019394
 8006914:	080196b0 	.word	0x080196b0
 8006918:	08019784 	.word	0x08019784
 800691c:	080196c8 	.word	0x080196c8
 8006920:	080196d8 	.word	0x080196d8
 8006924:	080196dc 	.word	0x080196dc
 8006928:	080196e4 	.word	0x080196e4
 800692c:	080196f0 	.word	0x080196f0
 8006930:	08019700 	.word	0x08019700
 8006934:	08019710 	.word	0x08019710
 8006938:	08019728 	.word	0x08019728
 800693c:	08019740 	.word	0x08019740
 8006940:	08019744 	.word	0x08019744
 8006944:	08019758 	.word	0x08019758
 8006948:	08019768 	.word	0x08019768

0800694c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj>:

int IridiumSBD::internalSendReceiveSBD(const char *txTxtMessage, const uint8_t *txData, size_t txDataSize, uint8_t *rxBuffer, size_t *prxBufferSize)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b096      	sub	sp, #88	; 0x58
 8006950:	af04      	add	r7, sp, #16
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]
 8006958:	603b      	str	r3, [r7, #0]
   diagprint(F("internalSendReceive\r\n"));
 800695a:	49a5      	ldr	r1, [pc, #660]	; (8006bf0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2a4>)
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f001 f93d 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (this->asleep)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x24>
      return ISBD_IS_ASLEEP;
 800696c:	230a      	movs	r3, #10
 800696e:	e289      	b.n	8006e84 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

   // Binary transmission?
   if (txData && txDataSize)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	f000 8152 	beq.w	8006c1c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2d0>
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	f000 814e 	beq.w	8006c1c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2d0>
   {
      if (txDataSize > ISBD_MAX_MESSAGE_LENGTH)
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8006986:	d901      	bls.n	800698c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x40>
         return ISBD_MSG_TOO_LONG;
 8006988:	230d      	movs	r3, #13
 800698a:	e27b      	b.n	8006e84 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

      // send will use serial or wire as appropriate
      send(F("AT+SBDWB="), true, false);
 800698c:	2300      	movs	r3, #0
 800698e:	2201      	movs	r2, #1
 8006990:	4998      	ldr	r1, [pc, #608]	; (8006bf4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2a8>)
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f000 ffa4 	bl	80078e0 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      send(txDataSize);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	b29b      	uxth	r3, r3
 800699c:	4619      	mov	r1, r3
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f001 f8d6 	bl	8007b50 <_ZN10IridiumSBD4sendEt>
      send(F("\r"), false);
 80069a4:	2301      	movs	r3, #1
 80069a6:	2200      	movs	r2, #0
 80069a8:	4993      	ldr	r1, [pc, #588]	; (8006bf8 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2ac>)
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f000 ff98 	bl	80078e0 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      if (!waitForATResponse(NULL, 0, NULL, "READY\r\n"))
 80069b0:	4b92      	ldr	r3, [pc, #584]	; (8006bfc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2b0>)
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	2300      	movs	r3, #0
 80069b6:	2200      	movs	r2, #0
 80069b8:	2100      	movs	r1, #0
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f000 fb2e 	bl	800701c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80069c0:	4603      	mov	r3, r0
 80069c2:	f083 0301 	eor.w	r3, r3, #1
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d009      	beq.n	80069e0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x94>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f000 fbe3 	bl	8007198 <_ZN10IridiumSBD9cancelledEv>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d001      	beq.n	80069dc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x90>
 80069d8:	2304      	movs	r3, #4
 80069da:	e253      	b.n	8006e84 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 80069dc:	2303      	movs	r3, #3
 80069de:	e251      	b.n	8006e84 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

      uint16_t checksum = 0;
 80069e0:	2300      	movs	r3, #0
 80069e2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

      if (this->useSerial)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	7c5b      	ldrb	r3, [r3, #17]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d03a      	beq.n	8006a64 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x118>
      {
         for (size_t i=0; i<txDataSize; ++i)
 80069ee:	2300      	movs	r3, #0
 80069f0:	643b      	str	r3, [r7, #64]	; 0x40
 80069f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d21a      	bcs.n	8006a30 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0xe4>
         {
            stream->write(txData[i]);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	4618      	mov	r0, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6879      	ldr	r1, [r7, #4]
 8006a0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a0c:	440a      	add	r2, r1
 8006a0e:	7812      	ldrb	r2, [r2, #0]
 8006a10:	4611      	mov	r1, r2
 8006a12:	4798      	blx	r3
            checksum += (uint16_t)txData[i];
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a18:	4413      	add	r3, r2
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006a22:	4413      	add	r3, r2
 8006a24:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
         for (size_t i=0; i<txDataSize; ++i)
 8006a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	643b      	str	r3, [r7, #64]	; 0x40
 8006a2e:	e7e0      	b.n	80069f2 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0xa6>
         }
         stream->write((uint8_t)(checksum >> 8));
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	4618      	mov	r0, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006a42:	1212      	asrs	r2, r2, #8
 8006a44:	b2d2      	uxtb	r2, r2
 8006a46:	4611      	mov	r1, r2
 8006a48:	4798      	blx	r3
         stream->write((uint8_t)(checksum & 0xFF));
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	4618      	mov	r0, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006a5c:	b2d2      	uxtb	r2, r2
 8006a5e:	4611      	mov	r1, r2
 8006a60:	4798      	blx	r3
 8006a62:	e092      	b.n	8006b8a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x23e>
      }
      else
      {
         //lastCheck = millis(); // Update lastCheck so we enforce a full I2C_POLLING_WAIT
         // We need to make sure we don't send too much I2C data in one go (otherwise we will overflow the ATtiny841's I2C buffer)
         size_t bytes_to_send = txDataSize; // Send this many bytes in total
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	63fb      	str	r3, [r7, #60]	; 0x3c
         size_t i=0;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	63bb      	str	r3, [r7, #56]	; 0x38
         size_t nexti;
         while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 3)) // If there are too many bytes to send all in one go
 8006a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a6e:	2b1d      	cmp	r3, #29
 8006a70:	d937      	bls.n	8006ae2 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x196>
         {
            nexti = i + (TINY_I2C_BUFFER_LENGTH - 3);
 8006a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a74:	331d      	adds	r3, #29
 8006a76:	637b      	str	r3, [r7, #52]	; 0x34
            wireport->beginTransmission((uint8_t)deviceaddress);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	68da      	ldr	r2, [r3, #12]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	7c1b      	ldrb	r3, [r3, #16]
 8006a80:	4619      	mov	r1, r3
 8006a82:	4610      	mov	r0, r2
 8006a84:	f002 faaa 	bl	8008fdc <_ZN7TwoWire17beginTransmissionEh>
            wireport->write(DATA_REG); // Point to the serial data 'register'
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	21ff      	movs	r1, #255	; 0xff
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7ff fa9a 	bl	8005fc8 <_ZN7TwoWire5writeEi>
            for (; i<nexti; ++i)
 8006a94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d219      	bcs.n	8006ad0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x184>
            {
               wireport->write(txData[i]); // Write each byte
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	68d8      	ldr	r0, [r3, #12]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6879      	ldr	r1, [r7, #4]
 8006aaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006aac:	440a      	add	r2, r1
 8006aae:	7812      	ldrb	r2, [r2, #0]
 8006ab0:	4611      	mov	r1, r2
 8006ab2:	4798      	blx	r3
               checksum += (uint16_t)txData[i];
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab8:	4413      	add	r3, r2
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006ac2:	4413      	add	r3, r2
 8006ac4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            for (; i<nexti; ++i)
 8006ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aca:	3301      	adds	r3, #1
 8006acc:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ace:	e7e1      	b.n	8006a94 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x148>
            }
            bytes_to_send = bytes_to_send - (TINY_I2C_BUFFER_LENGTH - 3); // Decrease the number of bytes still to send
 8006ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad2:	3b1d      	subs	r3, #29
 8006ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
            wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	4618      	mov	r0, r3
 8006adc:	f002 fac8 	bl	8009070 <_ZN7TwoWire15endTransmissionEv>
         while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 3)) // If there are too many bytes to send all in one go
 8006ae0:	e7c4      	b.n	8006a6c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x120>
         }
         // There are now <= (TINY_I2C_BUFFER_LENGTH - 3) bytes left to send, so send them and then release the bus
         wireport->beginTransmission((uint8_t)deviceaddress);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	68da      	ldr	r2, [r3, #12]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	7c1b      	ldrb	r3, [r3, #16]
 8006aea:	4619      	mov	r1, r3
 8006aec:	4610      	mov	r0, r2
 8006aee:	f002 fa75 	bl	8008fdc <_ZN7TwoWire17beginTransmissionEh>
         wireport->write(DATA_REG); // Point to the 'serial register'
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	21ff      	movs	r1, #255	; 0xff
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7ff fa65 	bl	8005fc8 <_ZN7TwoWire5writeEi>
         for (; i<txDataSize; ++i)
 8006afe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d219      	bcs.n	8006b3a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x1ee>
         {
            wireport->write(txData[i]);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	68d8      	ldr	r0, [r3, #12]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	6879      	ldr	r1, [r7, #4]
 8006b14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b16:	440a      	add	r2, r1
 8006b18:	7812      	ldrb	r2, [r2, #0]
 8006b1a:	4611      	mov	r1, r2
 8006b1c:	4798      	blx	r3
            checksum += (uint16_t)txData[i];
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b22:	4413      	add	r3, r2
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
         for (; i<txDataSize; ++i)
 8006b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b34:	3301      	adds	r3, #1
 8006b36:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b38:	e7e1      	b.n	8006afe <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x1b2>
         }
         wireport->write((uint8_t)(checksum >> 8));
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	68d8      	ldr	r0, [r3, #12]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006b4a:	1212      	asrs	r2, r2, #8
 8006b4c:	b2d2      	uxtb	r2, r2
 8006b4e:	4611      	mov	r1, r2
 8006b50:	4798      	blx	r3
         wireport->write((uint8_t)(checksum & 0xFF));
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	68da      	ldr	r2, [r3, #12]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8006b62:	b2c9      	uxtb	r1, r1
 8006b64:	4610      	mov	r0, r2
 8006b66:	4798      	blx	r3
         if (wireport->endTransmission() != 0) //Send data and release bus
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f002 fa7f 	bl	8009070 <_ZN7TwoWire15endTransmissionEv>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	bf14      	ite	ne
 8006b78:	2301      	movne	r3, #1
 8006b7a:	2300      	moveq	r3, #0
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d003      	beq.n	8006b8a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x23e>
            diagprint(F("I2C write was not successful!\r\n"));
 8006b82:	491f      	ldr	r1, [pc, #124]	; (8006c00 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2b4>)
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f001 f829 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      }

      consoleprint(F("["));
 8006b8a:	491e      	ldr	r1, [pc, #120]	; (8006c04 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2b8>)
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f001 f87d 	bl	8007c8c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
      consoleprint((uint16_t)txDataSize);
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	4619      	mov	r1, r3
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f001 f8af 	bl	8007cfc <_ZN10IridiumSBD12consoleprintEt>
      consoleprint(F(" bytes]"));
 8006b9e:	491a      	ldr	r1, [pc, #104]	; (8006c08 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2bc>)
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f001 f873 	bl	8007c8c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

      diagprint(F("Checksum:"));
 8006ba6:	4919      	ldr	r1, [pc, #100]	; (8006c0c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2c0>)
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f001 f817 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      diagprint(checksum);
 8006bae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f001 f849 	bl	8007c4c <_ZN10IridiumSBD9diagprintEt>
      diagprint(F("\r\n"));
 8006bba:	4915      	ldr	r1, [pc, #84]	; (8006c10 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2c4>)
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f001 f80d 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

      if (!waitForATResponse(NULL, 0, NULL, "0\r\n\r\nOK\r\n"))
 8006bc2:	4b14      	ldr	r3, [pc, #80]	; (8006c14 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2c8>)
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	2200      	movs	r2, #0
 8006bca:	2100      	movs	r1, #0
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 fa25 	bl	800701c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	f083 0301 	eor.w	r3, r3, #1
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f000 8091 	beq.w	8006d02 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b6>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 fad9 	bl	8007198 <_ZN10IridiumSBD9cancelledEv>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d015      	beq.n	8006c18 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2cc>
 8006bec:	2304      	movs	r3, #4
 8006bee:	e149      	b.n	8006e84 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 8006bf0:	08019790 	.word	0x08019790
 8006bf4:	080197a8 	.word	0x080197a8
 8006bf8:	080197b4 	.word	0x080197b4
 8006bfc:	080197b8 	.word	0x080197b8
 8006c00:	080197c0 	.word	0x080197c0
 8006c04:	080197e0 	.word	0x080197e0
 8006c08:	080197e4 	.word	0x080197e4
 8006c0c:	080197ec 	.word	0x080197ec
 8006c10:	08019740 	.word	0x08019740
 8006c14:	080197f8 	.word	0x080197f8
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e133      	b.n	8006e84 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
   }

   else // Text transmission
   {
#if true // use long string implementation
      if (txTxtMessage == NULL) // It's ok to have a NULL txtTxtMessage if the transaction is RX only
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d11d      	bne.n	8006c5e <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x312>
      {
         send(F("AT+SBDWT=\r"));
 8006c22:	2301      	movs	r3, #1
 8006c24:	2201      	movs	r2, #1
 8006c26:	4999      	ldr	r1, [pc, #612]	; (8006e8c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x540>)
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f000 fe59 	bl	80078e0 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
         if (!waitForATResponse())
 8006c2e:	4b98      	ldr	r3, [pc, #608]	; (8006e90 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x544>)
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	2300      	movs	r3, #0
 8006c34:	2200      	movs	r2, #0
 8006c36:	2100      	movs	r1, #0
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f000 f9ef 	bl	800701c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	f083 0301 	eor.w	r3, r3, #1
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d05c      	beq.n	8006d04 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b8>
            return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f000 faa4 	bl	8007198 <_ZN10IridiumSBD9cancelledEv>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x30e>
 8006c56:	2304      	movs	r3, #4
 8006c58:	e114      	b.n	8006e84 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e112      	b.n	8006e84 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
      }
      else
      {
         // remove any embedded \r
         char *p = strchr(txTxtMessage, '\r');
 8006c5e:	210d      	movs	r1, #13
 8006c60:	68b8      	ldr	r0, [r7, #8]
 8006c62:	f00d f92c 	bl	8013ebe <strchr>
 8006c66:	6338      	str	r0, [r7, #48]	; 0x30
         if (p) *p = 0;
 8006c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d002      	beq.n	8006c74 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x328>
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	2200      	movs	r2, #0
 8006c72:	701a      	strb	r2, [r3, #0]
         if (strlen(txTxtMessage) > ISBD_MAX_MESSAGE_LENGTH)
 8006c74:	68b8      	ldr	r0, [r7, #8]
 8006c76:	f7f9 fac5 	bl	8000204 <strlen>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8006c80:	d901      	bls.n	8006c86 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x33a>
            return ISBD_MSG_TOO_LONG;
 8006c82:	230d      	movs	r3, #13
 8006c84:	e0fe      	b.n	8006e84 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         send(F("AT+SBDWT\r"));
 8006c86:	2301      	movs	r3, #1
 8006c88:	2201      	movs	r2, #1
 8006c8a:	4982      	ldr	r1, [pc, #520]	; (8006e94 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x548>)
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f000 fe27 	bl	80078e0 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
         if (!waitForATResponse(NULL, 0, NULL, "READY\r\n"))
 8006c92:	4b81      	ldr	r3, [pc, #516]	; (8006e98 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x54c>)
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	2300      	movs	r3, #0
 8006c98:	2200      	movs	r2, #0
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f000 f9bd 	bl	800701c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	f083 0301 	eor.w	r3, r3, #1
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d009      	beq.n	8006cc2 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x376>
            return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f000 fa72 	bl	8007198 <_ZN10IridiumSBD9cancelledEv>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d001      	beq.n	8006cbe <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x372>
 8006cba:	2304      	movs	r3, #4
 8006cbc:	e0e2      	b.n	8006e84 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e0e0      	b.n	8006e84 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         sendlong(txTxtMessage);
 8006cc2:	68b9      	ldr	r1, [r7, #8]
 8006cc4:	68f8      	ldr	r0, [r7, #12]
 8006cc6:	f000 feb3 	bl	8007a30 <_ZN10IridiumSBD8sendlongEPKc>
         send("\r");
 8006cca:	4974      	ldr	r1, [pc, #464]	; (8006e9c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x550>)
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f000 fe63 	bl	8007998 <_ZN10IridiumSBD4sendEPKc>
         if (!waitForATResponse(NULL, 0, NULL, "0\r\n\r\nOK\r\n"))
 8006cd2:	4b73      	ldr	r3, [pc, #460]	; (8006ea0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x554>)
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	2200      	movs	r2, #0
 8006cda:	2100      	movs	r1, #0
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f000 f99d 	bl	800701c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	f083 0301 	eor.w	r3, r3, #1
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00a      	beq.n	8006d04 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b8>
            return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f000 fa52 	bl	8007198 <_ZN10IridiumSBD9cancelledEv>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d001      	beq.n	8006cfe <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b2>
 8006cfa:	2304      	movs	r3, #4
 8006cfc:	e0c2      	b.n	8006e84 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e0c0      	b.n	8006e84 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006d02:	bf00      	nop
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
#endif
   }

   // Long SBDIX loop begins here
   for (unsigned long start = millis(); millis() - start < 1000UL * this->sendReceiveTimeout;)
 8006d04:	f002 fe2a 	bl	800995c <HAL_GetTick>
 8006d08:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006d0a:	f002 fe27 	bl	800995c <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d12:	1ad2      	subs	r2, r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d18:	4619      	mov	r1, r3
 8006d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d1e:	fb03 f301 	mul.w	r3, r3, r1
 8006d22:	429a      	cmp	r2, r3
 8006d24:	bf34      	ite	cc
 8006d26:	2301      	movcc	r3, #1
 8006d28:	2300      	movcs	r3, #0
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f000 80a4 	beq.w	8006e7a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x52e>
   {
      bool okToProceed = true;
 8006d32:	2301      	movs	r3, #1
 8006d34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      if (this->msstmWorkaroundRequested)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00e      	beq.n	8006d60 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x414>
      {
         okToProceed = false;
 8006d42:	2300      	movs	r3, #0
 8006d44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
         int ret = internalMSSTMWorkaround(okToProceed);
 8006d48:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f000 f902 	bl	8006f58 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb>
 8006d54:	62b8      	str	r0, [r7, #40]	; 0x28
         if (ret != ISBD_SUCCESS)
 8006d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d001      	beq.n	8006d60 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x414>
            return ret;
 8006d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5e:	e091      	b.n	8006e84 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
      }

      if (okToProceed)
 8006d60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d077      	beq.n	8006e58 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50c>
      {
         uint16_t moCode = 0, moMSN = 0, mtCode = 0, mtMSN = 0, mtLen = 0, mtRemaining = 0;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	843b      	strh	r3, [r7, #32]
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	83fb      	strh	r3, [r7, #30]
 8006d70:	2300      	movs	r3, #0
 8006d72:	83bb      	strh	r3, [r7, #28]
 8006d74:	2300      	movs	r3, #0
 8006d76:	837b      	strh	r3, [r7, #26]
 8006d78:	2300      	movs	r3, #0
 8006d7a:	833b      	strh	r3, [r7, #24]
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	82fb      	strh	r3, [r7, #22]
         int ret = doSBDIX(moCode, moMSN, mtCode, mtMSN, mtLen, mtRemaining);
 8006d80:	f107 001c 	add.w	r0, r7, #28
 8006d84:	f107 021e 	add.w	r2, r7, #30
 8006d88:	f107 0120 	add.w	r1, r7, #32
 8006d8c:	f107 0316 	add.w	r3, r7, #22
 8006d90:	9302      	str	r3, [sp, #8]
 8006d92:	f107 0318 	add.w	r3, r7, #24
 8006d96:	9301      	str	r3, [sp, #4]
 8006d98:	f107 031a 	add.w	r3, r7, #26
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	4603      	mov	r3, r0
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f000 fa29 	bl	80071f8 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_>
 8006da6:	6278      	str	r0, [r7, #36]	; 0x24
         if (ret != ISBD_SUCCESS)
 8006da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d001      	beq.n	8006db2 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x466>
            return ret;
 8006dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db0:	e068      	b.n	8006e84 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

         diagprint(F("SBDIX MO code: "));
 8006db2:	493c      	ldr	r1, [pc, #240]	; (8006ea4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x558>)
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f000 ff11 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
         diagprint(moCode);
 8006dba:	8c3b      	ldrh	r3, [r7, #32]
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	f000 ff44 	bl	8007c4c <_ZN10IridiumSBD9diagprintEt>
         diagprint(F("\r\n"));
 8006dc4:	4938      	ldr	r1, [pc, #224]	; (8006ea8 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x55c>)
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f000 ff08 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

         if (moCode <= 4) // this range indicates successful return!
 8006dcc:	8c3b      	ldrh	r3, [r7, #32]
 8006dce:	2b04      	cmp	r3, #4
 8006dd0:	d820      	bhi.n	8006e14 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4c8>
         {
            diagprint(F("SBDIX success!\r\n"));
 8006dd2:	4936      	ldr	r1, [pc, #216]	; (8006eac <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x560>)
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 ff01 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

            this->remainingMessages = mtRemaining;
 8006dda:	8afb      	ldrh	r3, [r7, #22]
 8006ddc:	461a      	mov	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	675a      	str	r2, [r3, #116]	; 0x74
            if (mtCode == 1 && rxBuffer) // retrieved 1 message
 8006de2:	8bbb      	ldrh	r3, [r7, #28]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d10d      	bne.n	8006e04 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4b8>
 8006de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00a      	beq.n	8006e04 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4b8>
            {
               diagprint(F("Incoming message!\r\n"));
 8006dee:	4930      	ldr	r1, [pc, #192]	; (8006eb0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x564>)
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f000 fef3 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
               return doSBDRB(rxBuffer, prxBufferSize);
 8006df6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006df8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 fa62 	bl	80072c4 <_ZN10IridiumSBD7doSBDRBEPhPj>
 8006e00:	4603      	mov	r3, r0
 8006e02:	e028      	b.n	8006e56 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50a>
            }

            else
            {
               // No data returned
               if (prxBufferSize)
 8006e04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d002      	beq.n	8006e10 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4c4>
                  *prxBufferSize = 0;
 8006e0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	601a      	str	r2, [r3, #0]
            }
            return ISBD_SUCCESS;
 8006e10:	2300      	movs	r3, #0
 8006e12:	e020      	b.n	8006e56 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50a>
         }

         else if (moCode == 12 || moCode == 14 || moCode == 16) // fatal failure: no retry
 8006e14:	8c3b      	ldrh	r3, [r7, #32]
 8006e16:	2b0c      	cmp	r3, #12
 8006e18:	d005      	beq.n	8006e26 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4da>
 8006e1a:	8c3b      	ldrh	r3, [r7, #32]
 8006e1c:	2b0e      	cmp	r3, #14
 8006e1e:	d002      	beq.n	8006e26 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4da>
 8006e20:	8c3b      	ldrh	r3, [r7, #32]
 8006e22:	2b10      	cmp	r3, #16
 8006e24:	d105      	bne.n	8006e32 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4e6>
         {
            diagprint(F("SBDIX fatal!\r\n"));
 8006e26:	4923      	ldr	r1, [pc, #140]	; (8006eb4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x568>)
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f000 fed7 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
            return ISBD_SBDIX_FATAL_ERROR;
 8006e2e:	2306      	movs	r3, #6
 8006e30:	e011      	b.n	8006e56 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50a>
         }

         else // retry
         {
            diagprint(F("Waiting for SBDIX retry...\r\n"));
 8006e32:	4921      	ldr	r1, [pc, #132]	; (8006eb8 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x56c>)
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f000 fed1 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
            if (!noBlockWait(sbdixInterval))
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e3e:	4619      	mov	r1, r3
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f000 f8c5 	bl	8006fd0 <_ZN10IridiumSBD11noBlockWaitEi>
 8006e46:	4603      	mov	r3, r0
 8006e48:	f083 0301 	eor.w	r3, r3, #1
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f43f af5b 	beq.w	8006d0a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3be>
               return ISBD_CANCELLED;
 8006e54:	2304      	movs	r3, #4
            return ret;
 8006e56:	e015      	b.n	8006e84 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         }
      }

      else // MSSTM check fail
      {
         diagprint(F("Waiting for MSSTM retry...\r\n"));
 8006e58:	4918      	ldr	r1, [pc, #96]	; (8006ebc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x570>)
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f000 febe 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
         if (!noBlockWait(ISBD_MSSTM_RETRY_INTERVAL))
 8006e60:	210a      	movs	r1, #10
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f000 f8b4 	bl	8006fd0 <_ZN10IridiumSBD11noBlockWaitEi>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	f083 0301 	eor.w	r3, r3, #1
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f43f af4a 	beq.w	8006d0a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3be>
            return ISBD_CANCELLED;
 8006e76:	2304      	movs	r3, #4
 8006e78:	e004      	b.n	8006e84 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
      }
   } // big wait loop

   diagprint(F("SBDIX timeout!\r\n"));
 8006e7a:	4911      	ldr	r1, [pc, #68]	; (8006ec0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x574>)
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f000 fead 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   return ISBD_SENDRECEIVE_TIMEOUT;
 8006e82:	2307      	movs	r3, #7
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3748      	adds	r7, #72	; 0x48
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	08019804 	.word	0x08019804
 8006e90:	08019394 	.word	0x08019394
 8006e94:	08019810 	.word	0x08019810
 8006e98:	080197b8 	.word	0x080197b8
 8006e9c:	080197b4 	.word	0x080197b4
 8006ea0:	080197f8 	.word	0x080197f8
 8006ea4:	0801981c 	.word	0x0801981c
 8006ea8:	08019740 	.word	0x08019740
 8006eac:	0801982c 	.word	0x0801982c
 8006eb0:	08019840 	.word	0x08019840
 8006eb4:	08019854 	.word	0x08019854
 8006eb8:	08019864 	.word	0x08019864
 8006ebc:	08019884 	.word	0x08019884
 8006ec0:	080198a4 	.word	0x080198a4

08006ec4 <_ZN10IridiumSBD24internalGetSignalQualityERi>:

int IridiumSBD::internalGetSignalQuality(int &quality)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af02      	add	r7, sp, #8
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
   if (this->asleep)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d001      	beq.n	8006edc <_ZN10IridiumSBD24internalGetSignalQualityERi+0x18>
      return ISBD_IS_ASLEEP;
 8006ed8:	230a      	movs	r3, #10
 8006eda:	e032      	b.n	8006f42 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>

   char csqResponseBuf[2];

   send(F("AT+CSQ\r"));
 8006edc:	2301      	movs	r3, #1
 8006ede:	2201      	movs	r2, #1
 8006ee0:	491a      	ldr	r1, [pc, #104]	; (8006f4c <_ZN10IridiumSBD24internalGetSignalQualityERi+0x88>)
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fcfc 	bl	80078e0 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(csqResponseBuf, sizeof(csqResponseBuf), "+CSQ:"))
 8006ee8:	f107 010c 	add.w	r1, r7, #12
 8006eec:	4b18      	ldr	r3, [pc, #96]	; (8006f50 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x8c>)
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	4b18      	ldr	r3, [pc, #96]	; (8006f54 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x90>)
 8006ef2:	2202      	movs	r2, #2
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 f891 	bl	800701c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006efa:	4603      	mov	r3, r0
 8006efc:	f083 0301 	eor.w	r3, r3, #1
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d009      	beq.n	8006f1a <_ZN10IridiumSBD24internalGetSignalQualityERi+0x56>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f946 	bl	8007198 <_ZN10IridiumSBD9cancelledEv>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x52>
 8006f12:	2304      	movs	r3, #4
 8006f14:	e015      	b.n	8006f42 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>
 8006f16:	2303      	movs	r3, #3
 8006f18:	e013      	b.n	8006f42 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>

   if (isdigit(csqResponseBuf[0]))
 8006f1a:	7b3b      	ldrb	r3, [r7, #12]
 8006f1c:	3b30      	subs	r3, #48	; 0x30
 8006f1e:	2b09      	cmp	r3, #9
 8006f20:	bf94      	ite	ls
 8006f22:	2301      	movls	r3, #1
 8006f24:	2300      	movhi	r3, #0
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d009      	beq.n	8006f40 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7c>
   {
      quality = atoi(csqResponseBuf);
 8006f2c:	f107 030c 	add.w	r3, r7, #12
 8006f30:	4618      	mov	r0, r3
 8006f32:	f00b f9b4 	bl	801229e <atoi>
 8006f36:	4602      	mov	r2, r0
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	601a      	str	r2, [r3, #0]
      return ISBD_SUCCESS;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	e000      	b.n	8006f42 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>
   }

   return ISBD_PROTOCOL_ERROR;
 8006f40:	2303      	movs	r3, #3
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	080198b8 	.word	0x080198b8
 8006f50:	08019394 	.word	0x08019394
 8006f54:	080198c0 	.word	0x080198c0

08006f58 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb>:

int IridiumSBD::internalMSSTMWorkaround(bool &okToProceed)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b08a      	sub	sp, #40	; 0x28
 8006f5c:	af02      	add	r7, sp, #8
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
   satellite. Ensuring that the received signal strength reported in response to AT command +CSQ and +CIER is above 2-3 bars
   before attempting SBD communication will protect against lockout.
   */
   char msstmResponseBuf[24];

   send(F("AT-MSSTM\r"));
 8006f62:	2301      	movs	r3, #1
 8006f64:	2201      	movs	r2, #1
 8006f66:	4917      	ldr	r1, [pc, #92]	; (8006fc4 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x6c>)
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fcb9 	bl	80078e0 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(msstmResponseBuf, sizeof(msstmResponseBuf), "-MSSTM: "))
 8006f6e:	f107 0108 	add.w	r1, r7, #8
 8006f72:	4b15      	ldr	r3, [pc, #84]	; (8006fc8 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x70>)
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	4b15      	ldr	r3, [pc, #84]	; (8006fcc <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x74>)
 8006f78:	2218      	movs	r2, #24
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f84e 	bl	800701c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006f80:	4603      	mov	r3, r0
 8006f82:	f083 0301 	eor.w	r3, r3, #1
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d009      	beq.n	8006fa0 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x48>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 f903 	bl	8007198 <_ZN10IridiumSBD9cancelledEv>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d001      	beq.n	8006f9c <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x44>
 8006f98:	2304      	movs	r3, #4
 8006f9a:	e00e      	b.n	8006fba <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x62>
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e00c      	b.n	8006fba <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x62>

   // Response buf now contains either an 8-digit number or the string "no network service"
   okToProceed = isxdigit(msstmResponseBuf[0]);
 8006fa0:	7a3b      	ldrb	r3, [r7, #8]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f00b faa4 	bl	80124f0 <isxdigit>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	bf14      	ite	ne
 8006fae:	2301      	movne	r3, #1
 8006fb0:	2300      	moveq	r3, #0
 8006fb2:	b2da      	uxtb	r2, r3
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	701a      	strb	r2, [r3, #0]
   return ISBD_SUCCESS;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3720      	adds	r7, #32
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	0801937c 	.word	0x0801937c
 8006fc8:	08019394 	.word	0x08019394
 8006fcc:	08019388 	.word	0x08019388

08006fd0 <_ZN10IridiumSBD11noBlockWaitEi>:

   return ISBD_SUCCESS;
}

bool IridiumSBD::noBlockWait(int seconds)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
   for (unsigned long start=millis(); millis() - start < 1000UL * seconds;)
 8006fda:	f002 fcbf 	bl	800995c <HAL_GetTick>
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	f002 fcbc 	bl	800995c <HAL_GetTick>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	1ad2      	subs	r2, r2, r3
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006ff0:	fb01 f303 	mul.w	r3, r1, r3
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	bf34      	ite	cc
 8006ff8:	2301      	movcc	r3, #1
 8006ffa:	2300      	movcs	r3, #0
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d007      	beq.n	8007012 <_ZN10IridiumSBD11noBlockWaitEi+0x42>
      if (cancelled())
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f8c8 	bl	8007198 <_ZN10IridiumSBD9cancelledEv>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d0e8      	beq.n	8006fe0 <_ZN10IridiumSBD11noBlockWaitEi+0x10>
         return false;
 800700e:	2300      	movs	r3, #0
 8007010:	e000      	b.n	8007014 <_ZN10IridiumSBD11noBlockWaitEi+0x44>

   return true;
 8007012:	2301      	movs	r3, #1
}
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>:

// Wait for response from previous AT command.  This process terminates when "terminator" string is seen or upon timeout.
// If "prompt" string is provided (example "+CSQ:"), then all characters following prompt up to the next CRLF are
// stored in response buffer for later parsing by caller.
bool IridiumSBD::waitForATResponse(char *response, int responseSize, const char *prompt, const char *terminator)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b08a      	sub	sp, #40	; 0x28
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
 8007028:	603b      	str	r3, [r7, #0]
   diagprint(F("Waiting for response "));
 800702a:	4959      	ldr	r1, [pc, #356]	; (8007190 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x174>)
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f000 fdd5 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   diagprint(terminator);
 8007032:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f000 fdef 	bl	8007c18 <_ZN10IridiumSBD9diagprintEPKc>
   this->print((char*) terminator); //TODO doesn't print otherwise
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007040:	4798      	blx	r3
   diagprint(F("\r\n"));
 8007042:	4954      	ldr	r1, [pc, #336]	; (8007194 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x178>)
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f000 fdc9 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (response)
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d005      	beq.n	800705c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x40>
      memset(response, 0, responseSize);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	461a      	mov	r2, r3
 8007054:	2100      	movs	r1, #0
 8007056:	68b8      	ldr	r0, [r7, #8]
 8007058:	f00b fba4 	bl	80127a4 <memset>

   int matchPromptPos = 0; // Matches chars in prompt
 800705c:	2300      	movs	r3, #0
 800705e:	627b      	str	r3, [r7, #36]	; 0x24
   int matchTerminatorPos = 0; // Matches chars in terminator
 8007060:	2300      	movs	r3, #0
 8007062:	623b      	str	r3, [r7, #32]
   enum {LOOKING_FOR_PROMPT, GATHERING_RESPONSE, LOOKING_FOR_TERMINATOR};
   int promptState = prompt ? LOOKING_FOR_PROMPT : LOOKING_FOR_TERMINATOR;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d001      	beq.n	800706e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x52>
 800706a:	2300      	movs	r3, #0
 800706c:	e000      	b.n	8007070 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x54>
 800706e:	2302      	movs	r3, #2
 8007070:	61fb      	str	r3, [r7, #28]
   //consoleprint(F("<< ")); //TODO If we comment out this it looks cleaner in the serial

   for (unsigned long start=millis(); millis() - start < 1000UL * atTimeout;)
 8007072:	f002 fc73 	bl	800995c <HAL_GetTick>
 8007076:	61b8      	str	r0, [r7, #24]
 8007078:	f002 fc70 	bl	800995c <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	1ad2      	subs	r2, r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007086:	4619      	mov	r1, r3
 8007088:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800708c:	fb03 f301 	mul.w	r3, r3, r1
 8007090:	429a      	cmp	r2, r3
 8007092:	bf34      	ite	cc
 8007094:	2301      	movcc	r3, #1
 8007096:	2300      	movcs	r3, #0
 8007098:	b2db      	uxtb	r3, r3
 800709a:	2b00      	cmp	r3, #0
 800709c:	d072      	beq.n	8007184 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x168>
   {
      if (cancelled())
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f000 f87a 	bl	8007198 <_ZN10IridiumSBD9cancelledEv>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d001      	beq.n	80070ae <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x92>
         return false;
 80070aa:	2300      	movs	r3, #0
 80070ac:	e06b      	b.n	8007186 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x16a>

      while (filteredavailable() > 0)
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f000 ff52 	bl	8007f58 <_ZN10IridiumSBD17filteredavailableEv>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	bfcc      	ite	gt
 80070ba:	2301      	movgt	r3, #1
 80070bc:	2300      	movle	r3, #0
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d0d9      	beq.n	8007078 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x5c>
      {
         char c = filteredread();
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f000 ff63 	bl	8007f90 <_ZN10IridiumSBD12filteredreadEv>
 80070ca:	4603      	mov	r3, r0
 80070cc:	75fb      	strb	r3, [r7, #23]
         if (prompt)
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d03b      	beq.n	800714c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x130>
         {
            switch (promptState)
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d003      	beq.n	80070e2 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xc6>
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d01d      	beq.n	800711c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x100>
 80070e0:	e034      	b.n	800714c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x130>
            {
            case LOOKING_FOR_PROMPT:
               if (c == prompt[matchPromptPos])
 80070e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e4:	683a      	ldr	r2, [r7, #0]
 80070e6:	4413      	add	r3, r2
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	7dfa      	ldrb	r2, [r7, #23]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d10b      	bne.n	8007108 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xec>
               {
                  ++matchPromptPos;
 80070f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f2:	3301      	adds	r3, #1
 80070f4:	627b      	str	r3, [r7, #36]	; 0x24
                  if (prompt[matchPromptPos] == '\0')
 80070f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f8:	683a      	ldr	r2, [r7, #0]
 80070fa:	4413      	add	r3, r2
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d121      	bne.n	8007146 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12a>
                     promptState = GATHERING_RESPONSE;
 8007102:	2301      	movs	r3, #1
 8007104:	61fb      	str	r3, [r7, #28]
               else
               {
                  matchPromptPos = c == prompt[0] ? 1 : 0;
               }

               break;
 8007106:	e01e      	b.n	8007146 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12a>
                  matchPromptPos = c == prompt[0] ? 1 : 0;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	7dfa      	ldrb	r2, [r7, #23]
 800710e:	429a      	cmp	r2, r3
 8007110:	d101      	bne.n	8007116 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xfa>
 8007112:	2301      	movs	r3, #1
 8007114:	e000      	b.n	8007118 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xfc>
 8007116:	2300      	movs	r3, #0
 8007118:	627b      	str	r3, [r7, #36]	; 0x24
               break;
 800711a:	e014      	b.n	8007146 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12a>
            case GATHERING_RESPONSE: // gathering response from end of prompt to first \r
               if (response)
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d013      	beq.n	800714a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12e>
               {
                  if (c == '\r' || responseSize < 2)
 8007122:	7dfb      	ldrb	r3, [r7, #23]
 8007124:	2b0d      	cmp	r3, #13
 8007126:	d002      	beq.n	800712e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x112>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b01      	cmp	r3, #1
 800712c:	dc02      	bgt.n	8007134 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x118>
                  {
                     promptState = LOOKING_FOR_TERMINATOR;
 800712e:	2302      	movs	r3, #2
 8007130:	61fb      	str	r3, [r7, #28]
                  {
                     *response++ = c;
                     responseSize--;
                  }
               }
               break;
 8007132:	e00a      	b.n	800714a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12e>
                     *response++ = c;
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	1c5a      	adds	r2, r3, #1
 8007138:	60ba      	str	r2, [r7, #8]
 800713a:	7dfa      	ldrb	r2, [r7, #23]
 800713c:	701a      	strb	r2, [r3, #0]
                     responseSize--;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	3b01      	subs	r3, #1
 8007142:	607b      	str	r3, [r7, #4]
               break;
 8007144:	e001      	b.n	800714a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12e>
               break;
 8007146:	bf00      	nop
 8007148:	e000      	b.n	800714c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x130>
               break;
 800714a:	bf00      	nop
            }
         }

         if (c == terminator[matchTerminatorPos])
 800714c:	6a3b      	ldr	r3, [r7, #32]
 800714e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007150:	4413      	add	r3, r2
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	7dfa      	ldrb	r2, [r7, #23]
 8007156:	429a      	cmp	r2, r3
 8007158:	d10a      	bne.n	8007170 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x154>
         {
            ++matchTerminatorPos;
 800715a:	6a3b      	ldr	r3, [r7, #32]
 800715c:	3301      	adds	r3, #1
 800715e:	623b      	str	r3, [r7, #32]
            if (terminator[matchTerminatorPos] == '\0')
 8007160:	6a3b      	ldr	r3, [r7, #32]
 8007162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007164:	4413      	add	r3, r2
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1a0      	bne.n	80070ae <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x92>
               return true;
 800716c:	2301      	movs	r3, #1
 800716e:	e00a      	b.n	8007186 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x16a>
         }
         else
         {
            matchTerminatorPos = c == terminator[0] ? 1 : 0;
 8007170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	7dfa      	ldrb	r2, [r7, #23]
 8007176:	429a      	cmp	r2, r3
 8007178:	d101      	bne.n	800717e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x162>
 800717a:	2301      	movs	r3, #1
 800717c:	e000      	b.n	8007180 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x164>
 800717e:	2300      	movs	r3, #0
 8007180:	623b      	str	r3, [r7, #32]
      while (filteredavailable() > 0)
 8007182:	e794      	b.n	80070ae <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x92>
         }
      } // while (filteredavailable() > 0)
   } // timer loop
   return false;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3728      	adds	r7, #40	; 0x28
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	080198c8 	.word	0x080198c8
 8007194:	08019740 	.word	0x08019740

08007198 <_ZN10IridiumSBD9cancelledEv>:

bool IridiumSBD::cancelled()
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
   if (this->useSerial)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	7c5b      	ldrb	r3, [r3, #17]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d019      	beq.n	80071dc <_ZN10IridiumSBD9cancelledEv+0x44>
   {
	   //TODO For some reason when using digitalRead here it didn't work so simply replaced with HAL function
	   //if ((ringPin != -1) && digitalRead(ringPin) == LOW)
	     if ((ringPin != -1) && HAL_GPIO_ReadPin(ringPin_GPIO_Port,ringPin_Pin) == LOW)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b2:	d008      	beq.n	80071c6 <_ZN10IridiumSBD9cancelledEv+0x2e>
 80071b4:	2110      	movs	r1, #16
 80071b6:	480e      	ldr	r0, [pc, #56]	; (80071f0 <_ZN10IridiumSBD9cancelledEv+0x58>)
 80071b8:	f003 f932 	bl	800a420 <HAL_GPIO_ReadPin>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d101      	bne.n	80071c6 <_ZN10IridiumSBD9cancelledEv+0x2e>
 80071c2:	2301      	movs	r3, #1
 80071c4:	e000      	b.n	80071c8 <_ZN10IridiumSBD9cancelledEv+0x30>
 80071c6:	2300      	movs	r3, #0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d007      	beq.n	80071dc <_ZN10IridiumSBD9cancelledEv+0x44>
	  {
         ringAsserted = true;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
		 diagprint(F("ringPin seen!\r\n"));
 80071d4:	4907      	ldr	r1, [pc, #28]	; (80071f4 <_ZN10IridiumSBD9cancelledEv+0x5c>)
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fd00 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
	  }
   }

   return !ISBDCallback();
 80071dc:	f7fe ff06 	bl	8005fec <_Z12ISBDCallbackv>
 80071e0:	4603      	mov	r3, r0
 80071e2:	f083 0301 	eor.w	r3, r3, #1
 80071e6:	b2db      	uxtb	r3, r3
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	40020800 	.word	0x40020800
 80071f4:	080198e0 	.word	0x080198e0

080071f8 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_>:

int IridiumSBD::doSBDIX(uint16_t &moCode, uint16_t &moMSN, uint16_t &mtCode, uint16_t &mtMSN, uint16_t &mtLen, uint16_t &mtRemaining)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b096      	sub	sp, #88	; 0x58
 80071fc:	af02      	add	r7, sp, #8
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
 8007204:	603b      	str	r3, [r7, #0]
   // Returns xx,xxxxx,xx,xxxxx,xx,xxx
   char sbdixResponseBuf[32];
   send(F("AT+SBDIX\r"));
 8007206:	2301      	movs	r3, #1
 8007208:	2201      	movs	r2, #1
 800720a:	492a      	ldr	r1, [pc, #168]	; (80072b4 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xbc>)
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f000 fb67 	bl	80078e0 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(sbdixResponseBuf, sizeof(sbdixResponseBuf), "+SBDIX: "))
 8007212:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8007216:	4b28      	ldr	r3, [pc, #160]	; (80072b8 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xc0>)
 8007218:	9300      	str	r3, [sp, #0]
 800721a:	4b28      	ldr	r3, [pc, #160]	; (80072bc <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xc4>)
 800721c:	2220      	movs	r2, #32
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f7ff fefc 	bl	800701c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8007224:	4603      	mov	r3, r0
 8007226:	f083 0301 	eor.w	r3, r3, #1
 800722a:	b2db      	uxtb	r3, r3
 800722c:	2b00      	cmp	r3, #0
 800722e:	d009      	beq.n	8007244 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x4c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f7ff ffb1 	bl	8007198 <_ZN10IridiumSBD9cancelledEv>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d001      	beq.n	8007240 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x48>
 800723c:	2304      	movs	r3, #4
 800723e:	e035      	b.n	80072ac <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb4>
 8007240:	2303      	movs	r3, #3
 8007242:	e033      	b.n	80072ac <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb4>

   uint16_t *values[6] = { &moCode, &moMSN, &mtCode, &mtMSN, &mtLen, &mtRemaining };
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	613b      	str	r3, [r7, #16]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	617b      	str	r3, [r7, #20]
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	61bb      	str	r3, [r7, #24]
 8007250:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007252:	61fb      	str	r3, [r7, #28]
 8007254:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007256:	623b      	str	r3, [r7, #32]
 8007258:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800725a:	627b      	str	r3, [r7, #36]	; 0x24
   for (int i=0; i<6; ++i)
 800725c:	2300      	movs	r3, #0
 800725e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007262:	2b05      	cmp	r3, #5
 8007264:	dc21      	bgt.n	80072aa <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb2>
   {
      char *p = strtok(i == 0 ? sbdixResponseBuf : NULL, ", ");
 8007266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007268:	2b00      	cmp	r3, #0
 800726a:	d102      	bne.n	8007272 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x7a>
 800726c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007270:	e000      	b.n	8007274 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x7c>
 8007272:	2300      	movs	r3, #0
 8007274:	4912      	ldr	r1, [pc, #72]	; (80072c0 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xc8>)
 8007276:	4618      	mov	r0, r3
 8007278:	f00d fc76 	bl	8014b68 <strtok>
 800727c:	64b8      	str	r0, [r7, #72]	; 0x48
      if (p == NULL)
 800727e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007280:	2b00      	cmp	r3, #0
 8007282:	d101      	bne.n	8007288 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x90>
         return ISBD_PROTOCOL_ERROR;
 8007284:	2303      	movs	r3, #3
 8007286:	e011      	b.n	80072ac <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb4>
      *values[i] = atol(p);
 8007288:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800728a:	f00b f80c 	bl	80122a6 <atol>
 800728e:	4602      	mov	r2, r0
 8007290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8007298:	440b      	add	r3, r1
 800729a:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800729e:	b292      	uxth	r2, r2
 80072a0:	801a      	strh	r2, [r3, #0]
   for (int i=0; i<6; ++i)
 80072a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072a4:	3301      	adds	r3, #1
 80072a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072a8:	e7da      	b.n	8007260 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x68>
   }
   return ISBD_SUCCESS;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3750      	adds	r7, #80	; 0x50
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	080198f0 	.word	0x080198f0
 80072b8:	08019394 	.word	0x08019394
 80072bc:	080198fc 	.word	0x080198fc
 80072c0:	08019908 	.word	0x08019908

080072c4 <_ZN10IridiumSBD7doSBDRBEPhPj>:

int IridiumSBD::doSBDRB(uint8_t *rxBuffer, size_t *prxBufferSize)
{
 80072c4:	b590      	push	{r4, r7, lr}
 80072c6:	b08b      	sub	sp, #44	; 0x2c
 80072c8:	af02      	add	r7, sp, #8
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
   bool rxOverflow = false;
 80072d0:	2300      	movs	r3, #0
 80072d2:	77fb      	strb	r3, [r7, #31]

   send(F("AT+SBDRB\r"));
 80072d4:	2301      	movs	r3, #1
 80072d6:	2201      	movs	r2, #1
 80072d8:	49a2      	ldr	r1, [pc, #648]	; (8007564 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a0>)
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f000 fb00 	bl	80078e0 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(NULL, 0, NULL, "AT+SBDRB\r")) // waits for its own echo
 80072e0:	4ba0      	ldr	r3, [pc, #640]	; (8007564 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a0>)
 80072e2:	9300      	str	r3, [sp, #0]
 80072e4:	2300      	movs	r3, #0
 80072e6:	2200      	movs	r2, #0
 80072e8:	2100      	movs	r1, #0
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f7ff fe96 	bl	800701c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80072f0:	4603      	mov	r3, r0
 80072f2:	f083 0301 	eor.w	r3, r3, #1
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d009      	beq.n	8007310 <_ZN10IridiumSBD7doSBDRBEPhPj+0x4c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f7ff ff4b 	bl	8007198 <_ZN10IridiumSBD9cancelledEv>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d001      	beq.n	800730c <_ZN10IridiumSBD7doSBDRBEPhPj+0x48>
 8007308:	2304      	movs	r3, #4
 800730a:	e223      	b.n	8007754 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
 800730c:	2303      	movs	r3, #3
 800730e:	e221      	b.n	8007754 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   if(!this->useSerial) check9603data(); // Check for any 9603 serial data
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	7c5b      	ldrb	r3, [r3, #17]
 8007314:	f083 0301 	eor.w	r3, r3, #1
 8007318:	b2db      	uxtb	r3, r3
 800731a:	2b00      	cmp	r3, #0
 800731c:	d002      	beq.n	8007324 <_ZN10IridiumSBD7doSBDRBEPhPj+0x60>
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f000 fe7c 	bl	800801c <_ZN10IridiumSBD13check9603dataEv>

   // Time to read the binary data: size[2], body[size], checksum[2]
   unsigned long start = millis();
 8007324:	f002 fb1a 	bl	800995c <HAL_GetTick>
 8007328:	6138      	str	r0, [r7, #16]
   while (millis() - start < 1000UL * atTimeout)
 800732a:	f002 fb17 	bl	800995c <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	1ad2      	subs	r2, r2, r3
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007338:	4619      	mov	r1, r3
 800733a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800733e:	fb03 f301 	mul.w	r3, r3, r1
 8007342:	429a      	cmp	r2, r3
 8007344:	bf34      	ite	cc
 8007346:	2301      	movcc	r3, #1
 8007348:	2300      	movcs	r3, #0
 800734a:	b2db      	uxtb	r3, r3
 800734c:	2b00      	cmp	r3, #0
 800734e:	d03c      	beq.n	80073ca <_ZN10IridiumSBD7doSBDRBEPhPj+0x106>
   {
      if(!this->useSerial) check9603data(); // Keep checking for new 9603 serial data
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	7c5b      	ldrb	r3, [r3, #17]
 8007354:	f083 0301 	eor.w	r3, r3, #1
 8007358:	b2db      	uxtb	r3, r3
 800735a:	2b00      	cmp	r3, #0
 800735c:	d002      	beq.n	8007364 <_ZN10IridiumSBD7doSBDRBEPhPj+0xa0>
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f000 fe5c 	bl	800801c <_ZN10IridiumSBD13check9603dataEv>
      if (cancelled())
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f7ff ff17 	bl	8007198 <_ZN10IridiumSBD9cancelledEv>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d001      	beq.n	8007374 <_ZN10IridiumSBD7doSBDRBEPhPj+0xb0>
         return ISBD_CANCELLED;
 8007370:	2304      	movs	r3, #4
 8007372:	e1ef      	b.n	8007754 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
      if (this->useSerial && (stream->available() >= 2))
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	7c5b      	ldrb	r3, [r3, #17]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00d      	beq.n	8007398 <_ZN10IridiumSBD7doSBDRBEPhPj+0xd4>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	689a      	ldr	r2, [r3, #8]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3308      	adds	r3, #8
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4610      	mov	r0, r2
 800738c:	4798      	blx	r3
 800738e:	4603      	mov	r3, r0
 8007390:	2b01      	cmp	r3, #1
 8007392:	dd01      	ble.n	8007398 <_ZN10IridiumSBD7doSBDRBEPhPj+0xd4>
 8007394:	2301      	movs	r3, #1
 8007396:	e000      	b.n	800739a <_ZN10IridiumSBD7doSBDRBEPhPj+0xd6>
 8007398:	2300      	movs	r3, #0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d112      	bne.n	80073c4 <_ZN10IridiumSBD7doSBDRBEPhPj+0x100>
         break;
      if ((!this->useSerial) && (i2cSerAvailable() >= 2))
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	7c5b      	ldrb	r3, [r3, #17]
 80073a2:	f083 0301 	eor.w	r3, r3, #1
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d007      	beq.n	80073bc <_ZN10IridiumSBD7doSBDRBEPhPj+0xf8>
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f000 ff65 	bl	800827c <_ZN10IridiumSBD15i2cSerAvailableEv>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	dd01      	ble.n	80073bc <_ZN10IridiumSBD7doSBDRBEPhPj+0xf8>
 80073b8:	2301      	movs	r3, #1
 80073ba:	e000      	b.n	80073be <_ZN10IridiumSBD7doSBDRBEPhPj+0xfa>
 80073bc:	2300      	movs	r3, #0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d102      	bne.n	80073c8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x104>
   while (millis() - start < 1000UL * atTimeout)
 80073c2:	e7b2      	b.n	800732a <_ZN10IridiumSBD7doSBDRBEPhPj+0x66>
         break;
 80073c4:	bf00      	nop
 80073c6:	e000      	b.n	80073ca <_ZN10IridiumSBD7doSBDRBEPhPj+0x106>
         break;
 80073c8:	bf00      	nop
   }

   if (this->useSerial && (stream->available() < 2))
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	7c5b      	ldrb	r3, [r3, #17]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00d      	beq.n	80073ee <_ZN10IridiumSBD7doSBDRBEPhPj+0x12a>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	689a      	ldr	r2, [r3, #8]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	3308      	adds	r3, #8
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4610      	mov	r0, r2
 80073e2:	4798      	blx	r3
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	dc01      	bgt.n	80073ee <_ZN10IridiumSBD7doSBDRBEPhPj+0x12a>
 80073ea:	2301      	movs	r3, #1
 80073ec:	e000      	b.n	80073f0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x12c>
 80073ee:	2300      	movs	r3, #0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d001      	beq.n	80073f8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x134>
      return ISBD_SENDRECEIVE_TIMEOUT;
 80073f4:	2307      	movs	r3, #7
 80073f6:	e1ad      	b.n	8007754 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
   if ((!this->useSerial) && (i2cSerAvailable() < 2))
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	7c5b      	ldrb	r3, [r3, #17]
 80073fc:	f083 0301 	eor.w	r3, r3, #1
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d007      	beq.n	8007416 <_ZN10IridiumSBD7doSBDRBEPhPj+0x152>
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f000 ff38 	bl	800827c <_ZN10IridiumSBD15i2cSerAvailableEv>
 800740c:	4603      	mov	r3, r0
 800740e:	2b01      	cmp	r3, #1
 8007410:	dc01      	bgt.n	8007416 <_ZN10IridiumSBD7doSBDRBEPhPj+0x152>
 8007412:	2301      	movs	r3, #1
 8007414:	e000      	b.n	8007418 <_ZN10IridiumSBD7doSBDRBEPhPj+0x154>
 8007416:	2300      	movs	r3, #0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d001      	beq.n	8007420 <_ZN10IridiumSBD7doSBDRBEPhPj+0x15c>
      return ISBD_SENDRECEIVE_TIMEOUT;
 800741c:	2307      	movs	r3, #7
 800741e:	e199      	b.n	8007754 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   uint16_t size;
   if (this->useSerial)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	7c5b      	ldrb	r3, [r3, #17]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d01a      	beq.n	800745e <_ZN10IridiumSBD7doSBDRBEPhPj+0x19a>
   {
      size = 256 * stream->read() + stream->read();
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	689a      	ldr	r2, [r3, #8]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	330c      	adds	r3, #12
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4610      	mov	r0, r2
 8007438:	4798      	blx	r3
 800743a:	4603      	mov	r3, r0
 800743c:	b29b      	uxth	r3, r3
 800743e:	021b      	lsls	r3, r3, #8
 8007440:	b29c      	uxth	r4, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	689a      	ldr	r2, [r3, #8]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	330c      	adds	r3, #12
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4610      	mov	r0, r2
 8007452:	4798      	blx	r3
 8007454:	4603      	mov	r3, r0
 8007456:	b29b      	uxth	r3, r3
 8007458:	4423      	add	r3, r4
 800745a:	83bb      	strh	r3, [r7, #28]
 800745c:	e00d      	b.n	800747a <_ZN10IridiumSBD7doSBDRBEPhPj+0x1b6>
   }
   else
   {
      size = 256 * i2cSerRead() + i2cSerRead();
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	f000 ff24 	bl	80082ac <_ZN10IridiumSBD10i2cSerReadEv>
 8007464:	4603      	mov	r3, r0
 8007466:	b29b      	uxth	r3, r3
 8007468:	021b      	lsls	r3, r3, #8
 800746a:	b29c      	uxth	r4, r3
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f000 ff1d 	bl	80082ac <_ZN10IridiumSBD10i2cSerReadEv>
 8007472:	4603      	mov	r3, r0
 8007474:	b29b      	uxth	r3, r3
 8007476:	4423      	add	r3, r4
 8007478:	83bb      	strh	r3, [r7, #28]
   }
   consoleprint(F("[Binary size:"));
 800747a:	493b      	ldr	r1, [pc, #236]	; (8007568 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a4>)
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f000 fc05 	bl	8007c8c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(size);
 8007482:	8bbb      	ldrh	r3, [r7, #28]
 8007484:	4619      	mov	r1, r3
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f000 fc38 	bl	8007cfc <_ZN10IridiumSBD12consoleprintEt>
   consoleprint(F("]"));
 800748c:	4937      	ldr	r1, [pc, #220]	; (800756c <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a8>)
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f000 fbfc 	bl	8007c8c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

   for (uint16_t bytesRead = 0; bytesRead < size;)
 8007494:	2300      	movs	r3, #0
 8007496:	837b      	strh	r3, [r7, #26]
 8007498:	8b7a      	ldrh	r2, [r7, #26]
 800749a:	8bbb      	ldrh	r3, [r7, #28]
 800749c:	429a      	cmp	r2, r3
 800749e:	d27f      	bcs.n	80075a0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2dc>
   {
      if (cancelled())
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f7ff fe79 	bl	8007198 <_ZN10IridiumSBD9cancelledEv>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d001      	beq.n	80074b0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x1ec>
         return ISBD_CANCELLED;
 80074ac:	2304      	movs	r3, #4
 80074ae:	e151      	b.n	8007754 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

      if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	7c5b      	ldrb	r3, [r3, #17]
 80074b4:	f083 0301 	eor.w	r3, r3, #1
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d002      	beq.n	80074c4 <_ZN10IridiumSBD7doSBDRBEPhPj+0x200>
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f000 fdac 	bl	800801c <_ZN10IridiumSBD13check9603dataEv>

      if ((this->useSerial && (stream->available())) || ((!this->useSerial) && i2cSerAvailable()))
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	7c5b      	ldrb	r3, [r3, #17]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00b      	beq.n	80074e4 <_ZN10IridiumSBD7doSBDRBEPhPj+0x220>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	689a      	ldr	r2, [r3, #8]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3308      	adds	r3, #8
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4610      	mov	r0, r2
 80074dc:	4798      	blx	r3
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d10c      	bne.n	80074fe <_ZN10IridiumSBD7doSBDRBEPhPj+0x23a>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	7c5b      	ldrb	r3, [r3, #17]
 80074e8:	f083 0301 	eor.w	r3, r3, #1
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d007      	beq.n	8007502 <_ZN10IridiumSBD7doSBDRBEPhPj+0x23e>
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f000 fec2 	bl	800827c <_ZN10IridiumSBD15i2cSerAvailableEv>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <_ZN10IridiumSBD7doSBDRBEPhPj+0x23e>
 80074fe:	2301      	movs	r3, #1
 8007500:	e000      	b.n	8007504 <_ZN10IridiumSBD7doSBDRBEPhPj+0x240>
 8007502:	2300      	movs	r3, #0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d035      	beq.n	8007574 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
      {
         uint8_t c;
         if (this->useSerial)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	7c5b      	ldrb	r3, [r3, #17]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00b      	beq.n	8007528 <_ZN10IridiumSBD7doSBDRBEPhPj+0x264>
         {
            c = stream->read();
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	689a      	ldr	r2, [r3, #8]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	330c      	adds	r3, #12
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4610      	mov	r0, r2
 8007520:	4798      	blx	r3
 8007522:	4603      	mov	r3, r0
 8007524:	767b      	strb	r3, [r7, #25]
 8007526:	e004      	b.n	8007532 <_ZN10IridiumSBD7doSBDRBEPhPj+0x26e>
         }
         else
         {
            c = i2cSerRead();
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f000 febf 	bl	80082ac <_ZN10IridiumSBD10i2cSerReadEv>
 800752e:	4603      	mov	r3, r0
 8007530:	767b      	strb	r3, [r7, #25]
         }
         bytesRead++;
 8007532:	8b7b      	ldrh	r3, [r7, #26]
 8007534:	3301      	adds	r3, #1
 8007536:	837b      	strh	r3, [r7, #26]
         if (rxBuffer && prxBufferSize)
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d01a      	beq.n	8007574 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d017      	beq.n	8007574 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
         {
            if (*prxBufferSize > 0)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d011      	beq.n	8007570 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2ac>
            {
               *rxBuffer++ = c;
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	1c5a      	adds	r2, r3, #1
 8007550:	60ba      	str	r2, [r7, #8]
 8007552:	7e7a      	ldrb	r2, [r7, #25]
 8007554:	701a      	strb	r2, [r3, #0]
               (*prxBufferSize)--;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	1e5a      	subs	r2, r3, #1
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	601a      	str	r2, [r3, #0]
 8007560:	e008      	b.n	8007574 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
 8007562:	bf00      	nop
 8007564:	0801990c 	.word	0x0801990c
 8007568:	08019918 	.word	0x08019918
 800756c:	08019928 	.word	0x08019928
            }
            else
            {
               rxOverflow = true;
 8007570:	2301      	movs	r3, #1
 8007572:	77fb      	strb	r3, [r7, #31]
            }
         }
      }

      if (millis() - start >= 1000UL * atTimeout)
 8007574:	f002 f9f2 	bl	800995c <HAL_GetTick>
 8007578:	4602      	mov	r2, r0
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	1ad2      	subs	r2, r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007582:	4619      	mov	r1, r3
 8007584:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007588:	fb03 f301 	mul.w	r3, r3, r1
 800758c:	429a      	cmp	r2, r3
 800758e:	bf2c      	ite	cs
 8007590:	2301      	movcs	r3, #1
 8007592:	2300      	movcc	r3, #0
 8007594:	b2db      	uxtb	r3, r3
 8007596:	2b00      	cmp	r3, #0
 8007598:	f43f af7e 	beq.w	8007498 <_ZN10IridiumSBD7doSBDRBEPhPj+0x1d4>
         return ISBD_SENDRECEIVE_TIMEOUT;
 800759c:	2307      	movs	r3, #7
 800759e:	e0d9      	b.n	8007754 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
   }

   while (millis() - start < 1000UL * atTimeout)
 80075a0:	f002 f9dc 	bl	800995c <HAL_GetTick>
 80075a4:	4602      	mov	r2, r0
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	1ad2      	subs	r2, r2, r3
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075ae:	4619      	mov	r1, r3
 80075b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80075b4:	fb03 f301 	mul.w	r3, r3, r1
 80075b8:	429a      	cmp	r2, r3
 80075ba:	bf34      	ite	cc
 80075bc:	2301      	movcc	r3, #1
 80075be:	2300      	movcs	r3, #0
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d03c      	beq.n	8007640 <_ZN10IridiumSBD7doSBDRBEPhPj+0x37c>
   {
      if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	7c5b      	ldrb	r3, [r3, #17]
 80075ca:	f083 0301 	eor.w	r3, r3, #1
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d002      	beq.n	80075da <_ZN10IridiumSBD7doSBDRBEPhPj+0x316>
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f000 fd21 	bl	800801c <_ZN10IridiumSBD13check9603dataEv>
      if (cancelled())
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f7ff fddc 	bl	8007198 <_ZN10IridiumSBD9cancelledEv>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d001      	beq.n	80075ea <_ZN10IridiumSBD7doSBDRBEPhPj+0x326>
         return ISBD_CANCELLED;
 80075e6:	2304      	movs	r3, #4
 80075e8:	e0b4      	b.n	8007754 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
      if (this->useSerial && (stream->available() >= 2))
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	7c5b      	ldrb	r3, [r3, #17]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00d      	beq.n	800760e <_ZN10IridiumSBD7doSBDRBEPhPj+0x34a>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	689a      	ldr	r2, [r3, #8]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	3308      	adds	r3, #8
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4610      	mov	r0, r2
 8007602:	4798      	blx	r3
 8007604:	4603      	mov	r3, r0
 8007606:	2b01      	cmp	r3, #1
 8007608:	dd01      	ble.n	800760e <_ZN10IridiumSBD7doSBDRBEPhPj+0x34a>
 800760a:	2301      	movs	r3, #1
 800760c:	e000      	b.n	8007610 <_ZN10IridiumSBD7doSBDRBEPhPj+0x34c>
 800760e:	2300      	movs	r3, #0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d112      	bne.n	800763a <_ZN10IridiumSBD7doSBDRBEPhPj+0x376>
         break;
      if ((!this->useSerial) && (i2cSerAvailable() >= 2))
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	7c5b      	ldrb	r3, [r3, #17]
 8007618:	f083 0301 	eor.w	r3, r3, #1
 800761c:	b2db      	uxtb	r3, r3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d007      	beq.n	8007632 <_ZN10IridiumSBD7doSBDRBEPhPj+0x36e>
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f000 fe2a 	bl	800827c <_ZN10IridiumSBD15i2cSerAvailableEv>
 8007628:	4603      	mov	r3, r0
 800762a:	2b01      	cmp	r3, #1
 800762c:	dd01      	ble.n	8007632 <_ZN10IridiumSBD7doSBDRBEPhPj+0x36e>
 800762e:	2301      	movs	r3, #1
 8007630:	e000      	b.n	8007634 <_ZN10IridiumSBD7doSBDRBEPhPj+0x370>
 8007632:	2300      	movs	r3, #0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d102      	bne.n	800763e <_ZN10IridiumSBD7doSBDRBEPhPj+0x37a>
   while (millis() - start < 1000UL * atTimeout)
 8007638:	e7b2      	b.n	80075a0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2dc>
         break;
 800763a:	bf00      	nop
 800763c:	e000      	b.n	8007640 <_ZN10IridiumSBD7doSBDRBEPhPj+0x37c>
         break;
 800763e:	bf00      	nop
   }

   if (this->useSerial && (stream->available() < 2))
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	7c5b      	ldrb	r3, [r3, #17]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00d      	beq.n	8007664 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3a0>
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	689a      	ldr	r2, [r3, #8]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	3308      	adds	r3, #8
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4610      	mov	r0, r2
 8007658:	4798      	blx	r3
 800765a:	4603      	mov	r3, r0
 800765c:	2b01      	cmp	r3, #1
 800765e:	dc01      	bgt.n	8007664 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3a0>
 8007660:	2301      	movs	r3, #1
 8007662:	e000      	b.n	8007666 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3a2>
 8007664:	2300      	movs	r3, #0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d001      	beq.n	800766e <_ZN10IridiumSBD7doSBDRBEPhPj+0x3aa>
      return ISBD_SENDRECEIVE_TIMEOUT;
 800766a:	2307      	movs	r3, #7
 800766c:	e072      	b.n	8007754 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
   if ((!this->useSerial) && (i2cSerAvailable() < 2))
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	7c5b      	ldrb	r3, [r3, #17]
 8007672:	f083 0301 	eor.w	r3, r3, #1
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b00      	cmp	r3, #0
 800767a:	d007      	beq.n	800768c <_ZN10IridiumSBD7doSBDRBEPhPj+0x3c8>
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f000 fdfd 	bl	800827c <_ZN10IridiumSBD15i2cSerAvailableEv>
 8007682:	4603      	mov	r3, r0
 8007684:	2b01      	cmp	r3, #1
 8007686:	dc01      	bgt.n	800768c <_ZN10IridiumSBD7doSBDRBEPhPj+0x3c8>
 8007688:	2301      	movs	r3, #1
 800768a:	e000      	b.n	800768e <_ZN10IridiumSBD7doSBDRBEPhPj+0x3ca>
 800768c:	2300      	movs	r3, #0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d001      	beq.n	8007696 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3d2>
      return ISBD_SENDRECEIVE_TIMEOUT;
 8007692:	2307      	movs	r3, #7
 8007694:	e05e      	b.n	8007754 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   uint16_t checksum;
   if (this->useSerial)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	7c5b      	ldrb	r3, [r3, #17]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d01a      	beq.n	80076d4 <_ZN10IridiumSBD7doSBDRBEPhPj+0x410>
   {
      checksum = 256 * stream->read() + stream->read();
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	689a      	ldr	r2, [r3, #8]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	330c      	adds	r3, #12
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4610      	mov	r0, r2
 80076ae:	4798      	blx	r3
 80076b0:	4603      	mov	r3, r0
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	021b      	lsls	r3, r3, #8
 80076b6:	b29c      	uxth	r4, r3
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	689a      	ldr	r2, [r3, #8]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	330c      	adds	r3, #12
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4610      	mov	r0, r2
 80076c8:	4798      	blx	r3
 80076ca:	4603      	mov	r3, r0
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	4423      	add	r3, r4
 80076d0:	82fb      	strh	r3, [r7, #22]
 80076d2:	e00d      	b.n	80076f0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x42c>
   }
   else
   {
      checksum = 256 * i2cSerRead() + i2cSerRead();
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f000 fde9 	bl	80082ac <_ZN10IridiumSBD10i2cSerReadEv>
 80076da:	4603      	mov	r3, r0
 80076dc:	b29b      	uxth	r3, r3
 80076de:	021b      	lsls	r3, r3, #8
 80076e0:	b29c      	uxth	r4, r3
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f000 fde2 	bl	80082ac <_ZN10IridiumSBD10i2cSerReadEv>
 80076e8:	4603      	mov	r3, r0
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	4423      	add	r3, r4
 80076ee:	82fb      	strh	r3, [r7, #22]
   }
   consoleprint(F("[csum:"));
 80076f0:	491a      	ldr	r1, [pc, #104]	; (800775c <_ZN10IridiumSBD7doSBDRBEPhPj+0x498>)
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f000 faca 	bl	8007c8c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(checksum);
 80076f8:	8afb      	ldrh	r3, [r7, #22]
 80076fa:	4619      	mov	r1, r3
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 fafd 	bl	8007cfc <_ZN10IridiumSBD12consoleprintEt>
   consoleprint(F("]"));
 8007702:	4917      	ldr	r1, [pc, #92]	; (8007760 <_ZN10IridiumSBD7doSBDRBEPhPj+0x49c>)
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	f000 fac1 	bl	8007c8c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

   // Return actual size of returned buffer
   if (prxBufferSize)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d002      	beq.n	8007716 <_ZN10IridiumSBD7doSBDRBEPhPj+0x452>
      *prxBufferSize = (size_t)size;
 8007710:	8bba      	ldrh	r2, [r7, #28]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	601a      	str	r2, [r3, #0]

   // Wait for final OK
   if (!waitForATResponse())
 8007716:	4b13      	ldr	r3, [pc, #76]	; (8007764 <_ZN10IridiumSBD7doSBDRBEPhPj+0x4a0>)
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	2300      	movs	r3, #0
 800771c:	2200      	movs	r2, #0
 800771e:	2100      	movs	r1, #0
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f7ff fc7b 	bl	800701c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8007726:	4603      	mov	r3, r0
 8007728:	f083 0301 	eor.w	r3, r3, #1
 800772c:	b2db      	uxtb	r3, r3
 800772e:	2b00      	cmp	r3, #0
 8007730:	d009      	beq.n	8007746 <_ZN10IridiumSBD7doSBDRBEPhPj+0x482>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f7ff fd30 	bl	8007198 <_ZN10IridiumSBD9cancelledEv>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d001      	beq.n	8007742 <_ZN10IridiumSBD7doSBDRBEPhPj+0x47e>
 800773e:	2304      	movs	r3, #4
 8007740:	e008      	b.n	8007754 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
 8007742:	2303      	movs	r3, #3
 8007744:	e006      	b.n	8007754 <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   return rxOverflow ? ISBD_RX_OVERFLOW : ISBD_SUCCESS;
 8007746:	7ffb      	ldrb	r3, [r7, #31]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <_ZN10IridiumSBD7doSBDRBEPhPj+0x48c>
 800774c:	2308      	movs	r3, #8
 800774e:	e000      	b.n	8007752 <_ZN10IridiumSBD7doSBDRBEPhPj+0x48e>
 8007750:	2300      	movs	r3, #0
 8007752:	bf00      	nop
}
 8007754:	4618      	mov	r0, r3
 8007756:	3724      	adds	r7, #36	; 0x24
 8007758:	46bd      	mov	sp, r7
 800775a:	bd90      	pop	{r4, r7, pc}
 800775c:	0801992c 	.word	0x0801992c
 8007760:	08019928 	.word	0x08019928
 8007764:	08019394 	.word	0x08019394

08007768 <_ZN10IridiumSBD5powerEb>:

void IridiumSBD::power(bool on)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	460b      	mov	r3, r1
 8007772:	70fb      	strb	r3, [r7, #3]
   this->asleep = !on;
 8007774:	78fb      	ldrb	r3, [r7, #3]
 8007776:	f083 0301 	eor.w	r3, r3, #1
 800777a:	b2da      	uxtb	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

   if (this->useSerial)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	7c5b      	ldrb	r3, [r3, #17]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d010      	beq.n	80077ac <_ZN10IridiumSBD5powerEb+0x44>
   {
      if (this->sleepPin == -1)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800778e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007792:	d04a      	beq.n	800782a <_ZN10IridiumSBD5powerEb+0xc2>
      {
         return;
      }
      else
      {
          if (this->sleepPinConfigured == false)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800779a:	2b00      	cmp	r3, #0
 800779c:	d106      	bne.n	80077ac <_ZN10IridiumSBD5powerEb+0x44>
          {
             configureSleepPin();
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f84c 	bl	800783c <_ZN10IridiumSBD17configureSleepPinEv>
             this->sleepPinConfigured = true;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          }
      }
   }

   if (on)
 80077ac:	78fb      	ldrb	r3, [r7, #3]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d017      	beq.n	80077e2 <_ZN10IridiumSBD5powerEb+0x7a>
   {
      diagprint(F("Powering on modem...\r\n"));
 80077b2:	4920      	ldr	r1, [pc, #128]	; (8007834 <_ZN10IridiumSBD5powerEb+0xcc>)
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 fa11 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	7c5b      	ldrb	r3, [r3, #17]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d004      	beq.n	80077cc <_ZN10IridiumSBD5powerEb+0x64>
      {
         setSleepPin(HIGH); // HIGH = awake
 80077c2:	2101      	movs	r1, #1
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f847 	bl	8007858 <_ZN10IridiumSBD11setSleepPinEh>
 80077ca:	e003      	b.n	80077d4 <_ZN10IridiumSBD5powerEb+0x6c>
      }
      else
      {
         enable9603(true);
 80077cc:	2101      	movs	r1, #1
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f7fe fe36 	bl	8006440 <_ZN10IridiumSBD10enable9603Eb>
      }
      lastPowerOnTime = millis();
 80077d4:	f002 f8c2 	bl	800995c <HAL_GetTick>
 80077d8:	4602      	mov	r2, r0
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80077e0:	e024      	b.n	800782c <_ZN10IridiumSBD5powerEb+0xc4>
   }
   else
   {
      // Best Practices Guide suggests waiting at least 2 seconds
      // before powering off again
      unsigned long elapsed = millis() - lastPowerOnTime;
 80077e2:	f002 f8bb 	bl	800995c <HAL_GetTick>
 80077e6:	4602      	mov	r2, r0
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	60fb      	str	r3, [r7, #12]
      if (elapsed < 2000UL)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80077f8:	d205      	bcs.n	8007806 <_ZN10IridiumSBD5powerEb+0x9e>
         //delay(2000UL - elapsed); TODO
    	  HAL_Delay(2000UL - elapsed);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 8007800:	4618      	mov	r0, r3
 8007802:	f002 f8b7 	bl	8009974 <HAL_Delay>

      diagprint(F("Powering off modem...\r\n"));
 8007806:	490c      	ldr	r1, [pc, #48]	; (8007838 <_ZN10IridiumSBD5powerEb+0xd0>)
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f9e7 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	7c5b      	ldrb	r3, [r3, #17]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d004      	beq.n	8007820 <_ZN10IridiumSBD5powerEb+0xb8>
      {
         setSleepPin(LOW); // LOW = asleep
 8007816:	2100      	movs	r1, #0
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f81d 	bl	8007858 <_ZN10IridiumSBD11setSleepPinEh>
 800781e:	e005      	b.n	800782c <_ZN10IridiumSBD5powerEb+0xc4>
      }
      else
      {
         enable9603(false);
 8007820:	2100      	movs	r1, #0
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f7fe fe0c 	bl	8006440 <_ZN10IridiumSBD10enable9603Eb>
 8007828:	e000      	b.n	800782c <_ZN10IridiumSBD5powerEb+0xc4>
         return;
 800782a:	bf00      	nop
      }
   }
}
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	08019934 	.word	0x08019934
 8007838:	0801994c 	.word	0x0801994c

0800783c <_ZN10IridiumSBD17configureSleepPinEv>:

void IridiumSBD::configureSleepPin()
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
	//pinMode(sleepPin, OUTPUT); // Make the sleep pin an output TODO (doesnt work with this)
   //pinMode(sleepPin, OUTPUT_PP); // Make the sleep pin an output
   diagprint(F("configureSleepPin: sleepPin configured\r\n"));
 8007844:	4903      	ldr	r1, [pc, #12]	; (8007854 <_ZN10IridiumSBD17configureSleepPinEv+0x18>)
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f9c8 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 800784c:	bf00      	nop
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	08019964 	.word	0x08019964

08007858 <_ZN10IridiumSBD11setSleepPinEh>:

void IridiumSBD::setSleepPin(uint8_t enable)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	460b      	mov	r3, r1
 8007862:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(sleepPin_GPIO_Port,sleepPin_Pin,GPIO_PIN_SET);
 8007864:	2201      	movs	r2, #1
 8007866:	2108      	movs	r1, #8
 8007868:	480b      	ldr	r0, [pc, #44]	; (8007898 <_ZN10IridiumSBD11setSleepPinEh+0x40>)
 800786a:	f002 fdf1 	bl	800a450 <HAL_GPIO_WritePin>
   //digitalWrite(this->sleepPin, enable); // HIGH = awake, LOW = asleep TODO
   diagprint(F("setSleepPin: sleepPin set "));
 800786e:	490b      	ldr	r1, [pc, #44]	; (800789c <_ZN10IridiumSBD11setSleepPinEh+0x44>)
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 f9b3 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   if (enable == HIGH)
 8007876:	78fb      	ldrb	r3, [r7, #3]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d104      	bne.n	8007886 <_ZN10IridiumSBD11setSleepPinEh+0x2e>
      diagprint(F("HIGH\r\n"));
 800787c:	4908      	ldr	r1, [pc, #32]	; (80078a0 <_ZN10IridiumSBD11setSleepPinEh+0x48>)
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f9ac 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   else
      diagprint(F("LOW\r\n"));
}
 8007884:	e003      	b.n	800788e <_ZN10IridiumSBD11setSleepPinEh+0x36>
      diagprint(F("LOW\r\n"));
 8007886:	4907      	ldr	r1, [pc, #28]	; (80078a4 <_ZN10IridiumSBD11setSleepPinEh+0x4c>)
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f9a7 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 800788e:	bf00      	nop
 8007890:	3708      	adds	r7, #8
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	40020800 	.word	0x40020800
 800789c:	08019990 	.word	0x08019990
 80078a0:	080199ac 	.word	0x080199ac
 80078a4:	080199b4 	.word	0x080199b4

080078a8 <_ZN10IridiumSBD15beginSerialPortEv>:

void IridiumSBD::beginSerialPort()
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::beginSerialPort\r\n"));
 80078b0:	4903      	ldr	r1, [pc, #12]	; (80078c0 <_ZN10IridiumSBD15beginSerialPortEv+0x18>)
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f992 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80078b8:	bf00      	nop
 80078ba:	3708      	adds	r7, #8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	080199bc 	.word	0x080199bc

080078c4 <_ZN10IridiumSBD13endSerialPortEv>:

void IridiumSBD::endSerialPort()
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::endSerialPort\r\n"));
 80078cc:	4903      	ldr	r1, [pc, #12]	; (80078dc <_ZN10IridiumSBD13endSerialPortEv+0x18>)
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 f984 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80078d4:	bf00      	nop
 80078d6:	3708      	adds	r7, #8
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	080199dc 	.word	0x080199dc

080078e0 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>:

void IridiumSBD::send(FlashString str, bool beginLine, bool endLine)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	4611      	mov	r1, r2
 80078ec:	461a      	mov	r2, r3
 80078ee:	460b      	mov	r3, r1
 80078f0:	71fb      	strb	r3, [r7, #7]
 80078f2:	4613      	mov	r3, r2
 80078f4:	71bb      	strb	r3, [r7, #6]
   if (beginLine)
 80078f6:	79fb      	ldrb	r3, [r7, #7]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d003      	beq.n	8007904 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x24>
      consoleprint(F(">> "));
 80078fc:	4923      	ldr	r1, [pc, #140]	; (800798c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xac>)
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f000 f9c4 	bl	8007c8c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 8007904:	68b9      	ldr	r1, [r7, #8]
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f000 f9c0 	bl	8007c8c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (endLine)
 800790c:	79bb      	ldrb	r3, [r7, #6]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d003      	beq.n	800791a <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x3a>
      consoleprint(F("\r\n"));
 8007912:	491f      	ldr	r1, [pc, #124]	; (8007990 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xb0>)
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f000 f9b9 	bl	8007c8c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	7c5b      	ldrb	r3, [r3, #17]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d006      	beq.n	8007930 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x50>
   {
      stream->print(str);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	68b9      	ldr	r1, [r7, #8]
 8007928:	4618      	mov	r0, r3
 800792a:	f001 f9e3 	bl	8008cf4 <_ZN5Print5printEPK19__FlashStringHelper>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 800792e:	e029      	b.n	8007984 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xa4>
      lastCheck = millis(); // Update lastCheck so we enforce a full I2C_POLLING_WAIT //TODO Uncommented this line
 8007930:	f002 f814 	bl	800995c <HAL_GetTick>
 8007934:	4602      	mov	r2, r0
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	66da      	str	r2, [r3, #108]	; 0x6c
      wireport->beginTransmission((uint8_t)deviceaddress);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	68da      	ldr	r2, [r3, #12]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	7c1b      	ldrb	r3, [r3, #16]
 8007942:	4619      	mov	r1, r3
 8007944:	4610      	mov	r0, r2
 8007946:	f001 fb49 	bl	8008fdc <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	21ff      	movs	r1, #255	; 0xff
 8007950:	4618      	mov	r0, r3
 8007952:	f7fe fb39 	bl	8005fc8 <_ZN7TwoWire5writeEi>
      wireport->print(str);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	68b9      	ldr	r1, [r7, #8]
 800795c:	4618      	mov	r0, r3
 800795e:	f001 f9c9 	bl	8008cf4 <_ZN5Print5printEPK19__FlashStringHelper>
      if (wireport->endTransmission() != 0) //Release bus
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	4618      	mov	r0, r3
 8007968:	f001 fb82 	bl	8009070 <_ZN7TwoWire15endTransmissionEv>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	bf14      	ite	ne
 8007972:	2301      	movne	r3, #1
 8007974:	2300      	moveq	r3, #0
 8007976:	b2db      	uxtb	r3, r3
 8007978:	2b00      	cmp	r3, #0
 800797a:	d003      	beq.n	8007984 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xa4>
         diagprint(F("I2C write was not successful!\r\n"));
 800797c:	4905      	ldr	r1, [pc, #20]	; (8007994 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xb4>)
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	f000 f92c 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8007984:	bf00      	nop
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	080199f8 	.word	0x080199f8
 8007990:	08019740 	.word	0x08019740
 8007994:	080197c0 	.word	0x080197c0

08007998 <_ZN10IridiumSBD4sendEPKc>:

void IridiumSBD::send(const char *str)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
   consoleprint(F(">> "));
 80079a2:	4920      	ldr	r1, [pc, #128]	; (8007a24 <_ZN10IridiumSBD4sendEPKc+0x8c>)
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 f971 	bl	8007c8c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 80079aa:	6839      	ldr	r1, [r7, #0]
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f98b 	bl	8007cc8 <_ZN10IridiumSBD12consoleprintEPKc>
   consoleprint(F("\r\n"));
 80079b2:	491d      	ldr	r1, [pc, #116]	; (8007a28 <_ZN10IridiumSBD4sendEPKc+0x90>)
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 f969 	bl	8007c8c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	7c5b      	ldrb	r3, [r3, #17]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d006      	beq.n	80079d0 <_ZN10IridiumSBD4sendEPKc+0x38>
   {
      stream->print(str);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	6839      	ldr	r1, [r7, #0]
 80079c8:	4618      	mov	r0, r3
 80079ca:	f001 f9a1 	bl	8008d10 <_ZN5Print5printEPKc>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 80079ce:	e024      	b.n	8007a1a <_ZN10IridiumSBD4sendEPKc+0x82>
      wireport->beginTransmission((uint8_t)deviceaddress);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	68da      	ldr	r2, [r3, #12]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	7c1b      	ldrb	r3, [r3, #16]
 80079d8:	4619      	mov	r1, r3
 80079da:	4610      	mov	r0, r2
 80079dc:	f001 fafe 	bl	8008fdc <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	21ff      	movs	r1, #255	; 0xff
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fe faee 	bl	8005fc8 <_ZN7TwoWire5writeEi>
      wireport->print(str);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f001 f98c 	bl	8008d10 <_ZN5Print5printEPKc>
      if (wireport->endTransmission() != 0) //Release bus
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	4618      	mov	r0, r3
 80079fe:	f001 fb37 	bl	8009070 <_ZN7TwoWire15endTransmissionEv>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	bf14      	ite	ne
 8007a08:	2301      	movne	r3, #1
 8007a0a:	2300      	moveq	r3, #0
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d003      	beq.n	8007a1a <_ZN10IridiumSBD4sendEPKc+0x82>
         diagprint(F("I2C write was not successful!\r\n"));
 8007a12:	4906      	ldr	r1, [pc, #24]	; (8007a2c <_ZN10IridiumSBD4sendEPKc+0x94>)
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 f8e1 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8007a1a:	bf00      	nop
 8007a1c:	3708      	adds	r7, #8
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	080199f8 	.word	0x080199f8
 8007a28:	08019740 	.word	0x08019740
 8007a2c:	080197c0 	.word	0x080197c0

08007a30 <_ZN10IridiumSBD8sendlongEPKc>:

void IridiumSBD::sendlong(const char *str)
// Send a long string that might need to be broken up for the I2C port
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
   consoleprint(F(">> "));
 8007a3a:	4942      	ldr	r1, [pc, #264]	; (8007b44 <_ZN10IridiumSBD8sendlongEPKc+0x114>)
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f925 	bl	8007c8c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   this->print((char*) str);//TODO doesn't print otherwise
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	6838      	ldr	r0, [r7, #0]
 8007a48:	4798      	blx	r3
   consoleprint(str);
 8007a4a:	6839      	ldr	r1, [r7, #0]
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f93b 	bl	8007cc8 <_ZN10IridiumSBD12consoleprintEPKc>
   consoleprint(F("\r\n"));
 8007a52:	493d      	ldr	r1, [pc, #244]	; (8007b48 <_ZN10IridiumSBD8sendlongEPKc+0x118>)
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 f919 	bl	8007c8c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

   if (this->useSerial)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	7c5b      	ldrb	r3, [r3, #17]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d006      	beq.n	8007a70 <_ZN10IridiumSBD8sendlongEPKc+0x40>
   {
      stream->print(str); // If we are using serial then send it and don't worry about the long length
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	6839      	ldr	r1, [r7, #0]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f001 f951 	bl	8008d10 <_ZN5Print5printEPKc>
         wireport->write(str[i]);
      }
      if (wireport->endTransmission() != 0) //Send data and release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8007a6e:	e065      	b.n	8007b3c <_ZN10IridiumSBD8sendlongEPKc+0x10c>
      size_t bytes_to_send = strlen(str); // Send this many bytes in total
 8007a70:	6838      	ldr	r0, [r7, #0]
 8007a72:	f7f8 fbc7 	bl	8000204 <strlen>
 8007a76:	6178      	str	r0, [r7, #20]
      size_t txDataSize = bytes_to_send;
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	60fb      	str	r3, [r7, #12]
      size_t i=0;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	613b      	str	r3, [r7, #16]
      while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 1)) // If there are too many bytes to send all in one go
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	2b1f      	cmp	r3, #31
 8007a84:	d92a      	bls.n	8007adc <_ZN10IridiumSBD8sendlongEPKc+0xac>
         nexti = i + (TINY_I2C_BUFFER_LENGTH - 1);
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	331f      	adds	r3, #31
 8007a8a:	60bb      	str	r3, [r7, #8]
         wireport->beginTransmission((uint8_t)deviceaddress);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	68da      	ldr	r2, [r3, #12]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	7c1b      	ldrb	r3, [r3, #16]
 8007a94:	4619      	mov	r1, r3
 8007a96:	4610      	mov	r0, r2
 8007a98:	f001 faa0 	bl	8008fdc <_ZN7TwoWire17beginTransmissionEh>
         wireport->write(DATA_REG); // Point to the 'serial register'
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	21ff      	movs	r1, #255	; 0xff
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7fe fa90 	bl	8005fc8 <_ZN7TwoWire5writeEi>
         for (; i<nexti; ++i)
 8007aa8:	693a      	ldr	r2, [r7, #16]
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d20c      	bcs.n	8007aca <_ZN10IridiumSBD8sendlongEPKc+0x9a>
            wireport->write(str[i]); // Write each byte
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	68d8      	ldr	r0, [r3, #12]
 8007ab4:	683a      	ldr	r2, [r7, #0]
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	4413      	add	r3, r2
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	4619      	mov	r1, r3
 8007abe:	f7fe fa83 	bl	8005fc8 <_ZN7TwoWire5writeEi>
         for (; i<nexti; ++i)
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	613b      	str	r3, [r7, #16]
 8007ac8:	e7ee      	b.n	8007aa8 <_ZN10IridiumSBD8sendlongEPKc+0x78>
         bytes_to_send = bytes_to_send - (TINY_I2C_BUFFER_LENGTH - 1); // Decrease the number of bytes still to send
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	3b1f      	subs	r3, #31
 8007ace:	617b      	str	r3, [r7, #20]
         wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f001 facb 	bl	8009070 <_ZN7TwoWire15endTransmissionEv>
      while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 1)) // If there are too many bytes to send all in one go
 8007ada:	e7d1      	b.n	8007a80 <_ZN10IridiumSBD8sendlongEPKc+0x50>
      wireport->beginTransmission((uint8_t)deviceaddress);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	68da      	ldr	r2, [r3, #12]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	7c1b      	ldrb	r3, [r3, #16]
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	4610      	mov	r0, r2
 8007ae8:	f001 fa78 	bl	8008fdc <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	21ff      	movs	r1, #255	; 0xff
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7fe fa68 	bl	8005fc8 <_ZN7TwoWire5writeEi>
      for (; i<txDataSize; ++i)
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d20c      	bcs.n	8007b1a <_ZN10IridiumSBD8sendlongEPKc+0xea>
         wireport->write(str[i]);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	68d8      	ldr	r0, [r3, #12]
 8007b04:	683a      	ldr	r2, [r7, #0]
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	4413      	add	r3, r2
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	f7fe fa5b 	bl	8005fc8 <_ZN7TwoWire5writeEi>
      for (; i<txDataSize; ++i)
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	3301      	adds	r3, #1
 8007b16:	613b      	str	r3, [r7, #16]
 8007b18:	e7ee      	b.n	8007af8 <_ZN10IridiumSBD8sendlongEPKc+0xc8>
      if (wireport->endTransmission() != 0) //Send data and release bus
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f001 faa6 	bl	8009070 <_ZN7TwoWire15endTransmissionEv>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	bf14      	ite	ne
 8007b2a:	2301      	movne	r3, #1
 8007b2c:	2300      	moveq	r3, #0
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d003      	beq.n	8007b3c <_ZN10IridiumSBD8sendlongEPKc+0x10c>
         diagprint(F("I2C write was not successful!\r\n"));
 8007b34:	4905      	ldr	r1, [pc, #20]	; (8007b4c <_ZN10IridiumSBD8sendlongEPKc+0x11c>)
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f850 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8007b3c:	bf00      	nop
 8007b3e:	3718      	adds	r7, #24
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	080199f8 	.word	0x080199f8
 8007b48:	08019740 	.word	0x08019740
 8007b4c:	080197c0 	.word	0x080197c0

08007b50 <_ZN10IridiumSBD4sendEt>:

void IridiumSBD::send(uint16_t n)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	807b      	strh	r3, [r7, #2]
   consoleprint(n);
 8007b5c:	887b      	ldrh	r3, [r7, #2]
 8007b5e:	4619      	mov	r1, r3
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 f8cb 	bl	8007cfc <_ZN10IridiumSBD12consoleprintEt>
   if (this->useSerial)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	7c5b      	ldrb	r3, [r3, #17]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d008      	beq.n	8007b80 <_ZN10IridiumSBD4sendEt+0x30>
   {
      stream->print(n);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	4618      	mov	r0, r3
 8007b74:	887b      	ldrh	r3, [r7, #2]
 8007b76:	220a      	movs	r2, #10
 8007b78:	4619      	mov	r1, r3
 8007b7a:	f001 f8e9 	bl	8008d50 <_ZN5Print5printEii>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(n);
      if (wireport->endTransmission() != 0) //Send data and release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8007b7e:	e026      	b.n	8007bce <_ZN10IridiumSBD4sendEt+0x7e>
      wireport->beginTransmission((uint8_t)deviceaddress);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	68da      	ldr	r2, [r3, #12]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	7c1b      	ldrb	r3, [r3, #16]
 8007b88:	4619      	mov	r1, r3
 8007b8a:	4610      	mov	r0, r2
 8007b8c:	f001 fa26 	bl	8008fdc <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	21ff      	movs	r1, #255	; 0xff
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7fe fa16 	bl	8005fc8 <_ZN7TwoWire5writeEi>
      wireport->print(n);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	887b      	ldrh	r3, [r7, #2]
 8007ba4:	220a      	movs	r2, #10
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	f001 f8d2 	bl	8008d50 <_ZN5Print5printEii>
      if (wireport->endTransmission() != 0) //Send data and release bus
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f001 fa5d 	bl	8009070 <_ZN7TwoWire15endTransmissionEv>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	bf14      	ite	ne
 8007bbc:	2301      	movne	r3, #1
 8007bbe:	2300      	moveq	r3, #0
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d003      	beq.n	8007bce <_ZN10IridiumSBD4sendEt+0x7e>
         diagprint(F("I2C write was not successful!\r\n"));
 8007bc6:	4904      	ldr	r1, [pc, #16]	; (8007bd8 <_ZN10IridiumSBD4sendEt+0x88>)
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 f807 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8007bce:	bf00      	nop
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	080197c0 	.word	0x080197c0

08007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>:

void IridiumSBD::diagprint(FlashString str)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	1c5a      	adds	r2, r3, #1
 8007bee:	60fa      	str	r2, [r7, #12]
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 8007bf4:	7afb      	ldrb	r3, [r7, #11]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d005      	beq.n	8007c06 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0x2a>
      ISBDDiagsCallback(this, c);
 8007bfa:	7afb      	ldrb	r3, [r7, #11]
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f7fe fa08 	bl	8006014 <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   }
 8007c04:	e7f1      	b.n	8007bea <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 8007c06:	bf00      	nop

   //TODO
   this->print((char*) str);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	6838      	ldr	r0, [r7, #0]
 8007c0e:	4798      	blx	r3
}
 8007c10:	bf00      	nop
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <_ZN10IridiumSBD9diagprintEPKc>:

void IridiumSBD::diagprint(const char *str)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
   while (*str)
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d008      	beq.n	8007c3c <_ZN10IridiumSBD9diagprintEPKc+0x24>
      ISBDDiagsCallback(this, *str++);
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	1c5a      	adds	r2, r3, #1
 8007c2e:	603a      	str	r2, [r7, #0]
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	4619      	mov	r1, r3
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f7fe f9ed 	bl	8006014 <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   while (*str)
 8007c3a:	e7f2      	b.n	8007c22 <_ZN10IridiumSBD9diagprintEPKc+0xa>

   //TODO
   this->print((char*) str);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	6838      	ldr	r0, [r7, #0]
 8007c42:	4798      	blx	r3
}
 8007c44:	bf00      	nop
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <_ZN10IridiumSBD9diagprintEt>:

void IridiumSBD::diagprint(uint16_t n)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	460b      	mov	r3, r1
 8007c56:	807b      	strh	r3, [r7, #2]
   char str[10];
   sprintf(str, "%u", n);
 8007c58:	887a      	ldrh	r2, [r7, #2]
 8007c5a:	f107 030c 	add.w	r3, r7, #12
 8007c5e:	490a      	ldr	r1, [pc, #40]	; (8007c88 <_ZN10IridiumSBD9diagprintEt+0x3c>)
 8007c60:	4618      	mov	r0, r3
 8007c62:	f00c f89b 	bl	8013d9c <siprintf>
   diagprint(str);
 8007c66:	f107 030c 	add.w	r3, r7, #12
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f7ff ffd3 	bl	8007c18 <_ZN10IridiumSBD9diagprintEPKc>

   //TODO
   this->print((char*) str);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f107 020c 	add.w	r2, r7, #12
 8007c7a:	4610      	mov	r0, r2
 8007c7c:	4798      	blx	r3
}
 8007c7e:	bf00      	nop
 8007c80:	3718      	adds	r7, #24
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	080199fc 	.word	0x080199fc

08007c8c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>:

void IridiumSBD::consoleprint(FlashString str)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	1c5a      	adds	r2, r3, #1
 8007c9e:	60fa      	str	r2, [r7, #12]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 8007ca4:	7afb      	ldrb	r3, [r7, #11]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d005      	beq.n	8007cb6 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0x2a>
      ISBDConsoleCallback(this, c);
 8007caa:	7afb      	ldrb	r3, [r7, #11]
 8007cac:	4619      	mov	r1, r3
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f7fe f9a4 	bl	8005ffc <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   }
 8007cb4:	e7f1      	b.n	8007c9a <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 8007cb6:	bf00      	nop

   //TODO
   this->print((char*) str);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	6838      	ldr	r0, [r7, #0]
 8007cbe:	4798      	blx	r3
}
 8007cc0:	bf00      	nop
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <_ZN10IridiumSBD12consoleprintEPKc>:

void IridiumSBD::consoleprint(const char *str)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
   while (*str)
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d008      	beq.n	8007cec <_ZN10IridiumSBD12consoleprintEPKc+0x24>
      ISBDConsoleCallback(this, *str++);
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	1c5a      	adds	r2, r3, #1
 8007cde:	603a      	str	r2, [r7, #0]
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f7fe f989 	bl	8005ffc <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   while (*str)
 8007cea:	e7f2      	b.n	8007cd2 <_ZN10IridiumSBD12consoleprintEPKc+0xa>

   //TODO
   this->print((char*) str);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	6838      	ldr	r0, [r7, #0]
 8007cf2:	4798      	blx	r3
}
 8007cf4:	bf00      	nop
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <_ZN10IridiumSBD12consoleprintEt>:

void IridiumSBD::consoleprint(uint16_t n)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	460b      	mov	r3, r1
 8007d06:	807b      	strh	r3, [r7, #2]
   char str[10];
   sprintf(str, "%u", n);
 8007d08:	887a      	ldrh	r2, [r7, #2]
 8007d0a:	f107 030c 	add.w	r3, r7, #12
 8007d0e:	490a      	ldr	r1, [pc, #40]	; (8007d38 <_ZN10IridiumSBD12consoleprintEt+0x3c>)
 8007d10:	4618      	mov	r0, r3
 8007d12:	f00c f843 	bl	8013d9c <siprintf>
   consoleprint(str); //TODO
 8007d16:	f107 030c 	add.w	r3, r7, #12
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f7ff ffd3 	bl	8007cc8 <_ZN10IridiumSBD12consoleprintEPKc>
   //consoleprint((const char*) str);
   this->print((char*) str);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f107 020c 	add.w	r2, r7, #12
 8007d2a:	4610      	mov	r0, r2
 8007d2c:	4798      	blx	r3
}
 8007d2e:	bf00      	nop
 8007d30:	3718      	adds	r7, #24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	080199fc 	.word	0x080199fc

08007d3c <_ZN10IridiumSBD12consoleprintEc>:

void IridiumSBD::consoleprint(char c)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	460b      	mov	r3, r1
 8007d46:	70fb      	strb	r3, [r7, #3]
   ISBDConsoleCallback(this, c);
 8007d48:	78fb      	ldrb	r3, [r7, #3]
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f7fe f955 	bl	8005ffc <_Z19ISBDConsoleCallbackP10IridiumSBDc>
}
 8007d52:	bf00      	nop
 8007d54:	3708      	adds	r7, #8
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
	...

08007d5c <_ZN10IridiumSBD11SBDRINGSeenEv>:

void IridiumSBD::SBDRINGSeen()
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
   ringAsserted = true;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
   diagprint(F("SBDRING alert seen!\r\n"));
 8007d6c:	4903      	ldr	r1, [pc, #12]	; (8007d7c <_ZN10IridiumSBD11SBDRINGSeenEv+0x20>)
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f7ff ff34 	bl	8007bdc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8007d74:	bf00      	nop
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	08019a00 	.word	0x08019a00

08007d80 <_ZN10IridiumSBD13filterSBDRINGEv>:
// Read characters until we find one that doesn't match SBDRING
// If nextChar is -1 it means we are still entertaining a possible
// match with SBDRING\r\n.  Once we find a mismatch, stuff it into
// nextChar.
void IridiumSBD::filterSBDRING()
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
   if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	7c5b      	ldrb	r3, [r3, #17]
 8007d8c:	f083 0301 	eor.w	r3, r3, #1
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d002      	beq.n	8007d9c <_ZN10IridiumSBD13filterSBDRINGEv+0x1c>
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f940 	bl	800801c <_ZN10IridiumSBD13check9603dataEv>
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	7c5b      	ldrb	r3, [r3, #17]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00b      	beq.n	8007dbc <_ZN10IridiumSBD13filterSBDRINGEv+0x3c>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	689a      	ldr	r2, [r3, #8]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	3308      	adds	r3, #8
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4610      	mov	r0, r2
 8007db4:	4798      	blx	r3
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	dc0c      	bgt.n	8007dd6 <_ZN10IridiumSBD13filterSBDRINGEv+0x56>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	7c5b      	ldrb	r3, [r3, #17]
 8007dc0:	f083 0301 	eor.w	r3, r3, #1
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00d      	beq.n	8007de6 <_ZN10IridiumSBD13filterSBDRINGEv+0x66>
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 fa56 	bl	800827c <_ZN10IridiumSBD15i2cSerAvailableEv>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	dd07      	ble.n	8007de6 <_ZN10IridiumSBD13filterSBDRINGEv+0x66>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de0:	d101      	bne.n	8007de6 <_ZN10IridiumSBD13filterSBDRINGEv+0x66>
 8007de2:	2301      	movs	r3, #1
 8007de4:	e000      	b.n	8007de8 <_ZN10IridiumSBD13filterSBDRINGEv+0x68>
 8007de6:	2300      	movs	r3, #0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f000 80af 	beq.w	8007f4c <_ZN10IridiumSBD13filterSBDRINGEv+0x1cc>
   {
      char c;
      if (this->useSerial)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	7c5b      	ldrb	r3, [r3, #17]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00b      	beq.n	8007e0e <_ZN10IridiumSBD13filterSBDRINGEv+0x8e>
      {
         c = stream->read();
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	689a      	ldr	r2, [r3, #8]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	330c      	adds	r3, #12
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4610      	mov	r0, r2
 8007e06:	4798      	blx	r3
 8007e08:	4603      	mov	r3, r0
 8007e0a:	73fb      	strb	r3, [r7, #15]
 8007e0c:	e004      	b.n	8007e18 <_ZN10IridiumSBD13filterSBDRINGEv+0x98>
      }
      else
      {
         c = i2cSerRead();
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fa4c 	bl	80082ac <_ZN10IridiumSBD10i2cSerReadEv>
 8007e14:	4603      	mov	r3, r0
 8007e16:	73fb      	strb	r3, [r7, #15]
      }
      consoleprint(c);
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f7ff ff8d 	bl	8007d3c <_ZN10IridiumSBD12consoleprintEc>
      if (*head != 0 && c == *head)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f000 8087 	beq.w	8007f3e <_ZN10IridiumSBD13filterSBDRINGEv+0x1be>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	7bfa      	ldrb	r2, [r7, #15]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d17f      	bne.n	8007f3e <_ZN10IridiumSBD13filterSBDRINGEv+0x1be>
      {
         ++head;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e44:	1c5a      	adds	r2, r3, #1
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
         if (*head == 0)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d10d      	bne.n	8007e74 <_ZN10IridiumSBD13filterSBDRINGEv+0xf4>
         {
            SBDRINGSeen();
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f7ff ff7f 	bl	8007d5c <_ZN10IridiumSBD11SBDRINGSeenEv>
            head = tail = SBDRING;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a3c      	ldr	r2, [pc, #240]	; (8007f54 <_ZN10IridiumSBD13filterSBDRINGEv+0x1d4>)
 8007e62:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
            {
               --head;
               nextChar = c;
            }
         }
 8007e72:	e069      	b.n	8007f48 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c8>
            for (unsigned long start = millis(); ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) && millis() - start < FILTERTIMEOUT; );
 8007e74:	f001 fd72 	bl	800995c <HAL_GetTick>
 8007e78:	60b8      	str	r0, [r7, #8]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	7c5b      	ldrb	r3, [r3, #17]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00b      	beq.n	8007e9a <_ZN10IridiumSBD13filterSBDRINGEv+0x11a>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	689a      	ldr	r2, [r3, #8]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	3308      	adds	r3, #8
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4610      	mov	r0, r2
 8007e92:	4798      	blx	r3
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00c      	beq.n	8007eb4 <_ZN10IridiumSBD13filterSBDRINGEv+0x134>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	7c5b      	ldrb	r3, [r3, #17]
 8007e9e:	f083 0301 	eor.w	r3, r3, #1
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00e      	beq.n	8007ec6 <_ZN10IridiumSBD13filterSBDRINGEv+0x146>
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 f9e7 	bl	800827c <_ZN10IridiumSBD15i2cSerAvailableEv>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d108      	bne.n	8007ec6 <_ZN10IridiumSBD13filterSBDRINGEv+0x146>
 8007eb4:	f001 fd52 	bl	800995c <HAL_GetTick>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	2b09      	cmp	r3, #9
 8007ec0:	d801      	bhi.n	8007ec6 <_ZN10IridiumSBD13filterSBDRINGEv+0x146>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e000      	b.n	8007ec8 <_ZN10IridiumSBD13filterSBDRINGEv+0x148>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d000      	beq.n	8007ece <_ZN10IridiumSBD13filterSBDRINGEv+0x14e>
 8007ecc:	e7d5      	b.n	8007e7a <_ZN10IridiumSBD13filterSBDRINGEv+0xfa>
            if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	7c5b      	ldrb	r3, [r3, #17]
 8007ed2:	f083 0301 	eor.w	r3, r3, #1
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d002      	beq.n	8007ee2 <_ZN10IridiumSBD13filterSBDRINGEv+0x162>
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 f89d 	bl	800801c <_ZN10IridiumSBD13check9603dataEv>
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	7c5b      	ldrb	r3, [r3, #17]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00b      	beq.n	8007f02 <_ZN10IridiumSBD13filterSBDRINGEv+0x182>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	689a      	ldr	r2, [r3, #8]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	3308      	adds	r3, #8
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4610      	mov	r0, r2
 8007efa:	4798      	blx	r3
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00c      	beq.n	8007f1c <_ZN10IridiumSBD13filterSBDRINGEv+0x19c>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	7c5b      	ldrb	r3, [r3, #17]
 8007f06:	f083 0301 	eor.w	r3, r3, #1
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d007      	beq.n	8007f20 <_ZN10IridiumSBD13filterSBDRINGEv+0x1a0>
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 f9b3 	bl	800827c <_ZN10IridiumSBD15i2cSerAvailableEv>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d101      	bne.n	8007f20 <_ZN10IridiumSBD13filterSBDRINGEv+0x1a0>
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e000      	b.n	8007f22 <_ZN10IridiumSBD13filterSBDRINGEv+0x1a2>
 8007f20:	2300      	movs	r3, #0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d010      	beq.n	8007f48 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c8>
               --head;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f2c:	1e5a      	subs	r2, r3, #1
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
               nextChar = c;
 8007f34:	7bfa      	ldrb	r2, [r7, #15]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
         }
 8007f3c:	e004      	b.n	8007f48 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c8>
      }
      else
      {
         nextChar = c;
 8007f3e:	7bfa      	ldrb	r2, [r7, #15]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8007f46:	e729      	b.n	8007d9c <_ZN10IridiumSBD13filterSBDRINGEv+0x1c>
         }
 8007f48:	bf00      	nop
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 8007f4a:	e727      	b.n	8007d9c <_ZN10IridiumSBD13filterSBDRINGEv+0x1c>
      }
   }
}
 8007f4c:	bf00      	nop
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	0801a374 	.word	0x0801a374

08007f58 <_ZN10IridiumSBD17filteredavailableEv>:

const char IridiumSBD::SBDRING[] = "SBDRING\r\n";

int IridiumSBD::filteredavailable()
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f7ff ff0d 	bl	8007d80 <_ZN10IridiumSBD13filterSBDRINGEv>
   return head - tail + (nextChar != -1 ? 1 : 0);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f72:	1ad3      	subs	r3, r2, r3
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8007f7a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007f7e:	d001      	beq.n	8007f84 <_ZN10IridiumSBD17filteredavailableEv+0x2c>
 8007f80:	2201      	movs	r2, #1
 8007f82:	e000      	b.n	8007f86 <_ZN10IridiumSBD17filteredavailableEv+0x2e>
 8007f84:	2200      	movs	r2, #0
 8007f86:	4413      	add	r3, r2
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3708      	adds	r7, #8
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <_ZN10IridiumSBD12filteredreadEv>:

int IridiumSBD::filteredread()
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f7ff fef1 	bl	8007d80 <_ZN10IridiumSBD13filterSBDRINGEv>

   // Use up the queue first
   if (head > tail)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d91c      	bls.n	8007fe8 <_ZN10IridiumSBD12filteredreadEv+0x58>
   {
      char c = *tail++;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007fb4:	1c59      	adds	r1, r3, #1
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	73bb      	strb	r3, [r7, #14]
      if (head == tail)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d109      	bne.n	8007fe4 <_ZN10IridiumSBD12filteredreadEv+0x54>
         head = tail = SBDRING;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4a11      	ldr	r2, [pc, #68]	; (8008018 <_ZN10IridiumSBD12filteredreadEv+0x88>)
 8007fd4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      return c;
 8007fe4:	7bbb      	ldrb	r3, [r7, #14]
 8007fe6:	e012      	b.n	800800e <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   // Then the "extra" char
   else if (nextChar != -1)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff2:	d00a      	beq.n	800800a <_ZN10IridiumSBD12filteredreadEv+0x7a>
   {
      char c = (char)nextChar;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ffa:	73fb      	strb	r3, [r7, #15]
      nextChar = -1;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8008002:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      return c;
 8008006:	7bfb      	ldrb	r3, [r7, #15]
 8008008:	e001      	b.n	800800e <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   return -1;
 800800a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800800e:	4618      	mov	r0, r3
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	0801a374 	.word	0x0801a374

0800801c <_ZN10IridiumSBD13check9603dataEv>:

//Checks the number of available serial bytes
//Reads the available serial bytes (if any) and stores them in i2c_ser_buffer
void IridiumSBD::check9603data()
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  if (millis() - lastCheck >= I2C_POLLING_WAIT_MS)
 8008024:	f001 fc9a 	bl	800995c <HAL_GetTick>
 8008028:	4602      	mov	r2, r0
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 8008036:	4293      	cmp	r3, r2
 8008038:	bf2c      	ite	cs
 800803a:	2301      	movcs	r3, #1
 800803c:	2300      	movcc	r3, #0
 800803e:	b2db      	uxtb	r3, r3
 8008040:	2b00      	cmp	r3, #0
 8008042:	f000 80b8 	beq.w	80081b6 <_ZN10IridiumSBD13check9603dataEv+0x19a>
  {
    //Check how many serial bytes are waiting to be read
    uint16_t bytesAvailable = 0;
 8008046:	2300      	movs	r3, #0
 8008048:	81fb      	strh	r3, [r7, #14]
    wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	68da      	ldr	r2, [r3, #12]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	7c1b      	ldrb	r3, [r3, #16]
 8008052:	4619      	mov	r1, r3
 8008054:	4610      	mov	r0, r2
 8008056:	f000 ffc1 	bl	8008fdc <_ZN7TwoWire17beginTransmissionEh>
    wireport->write(LEN_REG); // Point to the serial buffer length
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	21fd      	movs	r1, #253	; 0xfd
 8008060:	4618      	mov	r0, r3
 8008062:	f7fd ffb1 	bl	8005fc8 <_ZN7TwoWire5writeEi>
    wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	4618      	mov	r0, r3
 800806c:	f001 f800 	bl	8009070 <_ZN7TwoWire15endTransmissionEv>
    if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)2) == 2) // Request two bytes
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	68d8      	ldr	r0, [r3, #12]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	7c1b      	ldrb	r3, [r3, #16]
 8008078:	2202      	movs	r2, #2
 800807a:	4619      	mov	r1, r3
 800807c:	f000 ff9b 	bl	8008fb6 <_ZN7TwoWire11requestFromEhh>
 8008080:	4603      	mov	r3, r0
 8008082:	2b02      	cmp	r3, #2
 8008084:	bf0c      	ite	eq
 8008086:	2301      	moveq	r3, #1
 8008088:	2300      	movne	r3, #0
 800808a:	b2db      	uxtb	r3, r3
 800808c:	2b00      	cmp	r3, #0
 800808e:	d01d      	beq.n	80080cc <_ZN10IridiumSBD13check9603dataEv+0xb0>
    {
      uint8_t msb = wireport->read();
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	68da      	ldr	r2, [r3, #12]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	330c      	adds	r3, #12
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4610      	mov	r0, r2
 80080a0:	4798      	blx	r3
 80080a2:	4603      	mov	r3, r0
 80080a4:	737b      	strb	r3, [r7, #13]
      uint8_t lsb = wireport->read();
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	68da      	ldr	r2, [r3, #12]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	330c      	adds	r3, #12
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4610      	mov	r0, r2
 80080b6:	4798      	blx	r3
 80080b8:	4603      	mov	r3, r0
 80080ba:	733b      	strb	r3, [r7, #12]
      bytesAvailable = (((uint16_t)msb) << 8) | lsb;
 80080bc:	7b7b      	ldrb	r3, [r7, #13]
 80080be:	021b      	lsls	r3, r3, #8
 80080c0:	b21a      	sxth	r2, r3
 80080c2:	7b3b      	ldrb	r3, [r7, #12]
 80080c4:	b21b      	sxth	r3, r3
 80080c6:	4313      	orrs	r3, r2
 80080c8:	b21b      	sxth	r3, r3
 80080ca:	81fb      	strh	r3, [r7, #14]
    }

    //Now read the serial bytes (if any)
    if (bytesAvailable > 0)
 80080cc:	89fb      	ldrh	r3, [r7, #14]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d06c      	beq.n	80081ac <_ZN10IridiumSBD13check9603dataEv+0x190>
    {
      // Request the bytes
      // Poke them into the i2c_serial buffer
      // Release the bus afterwards
      wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	68da      	ldr	r2, [r3, #12]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	7c1b      	ldrb	r3, [r3, #16]
 80080da:	4619      	mov	r1, r3
 80080dc:	4610      	mov	r0, r2
 80080de:	f000 ff7d 	bl	8008fdc <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the serial buffer
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	21ff      	movs	r1, #255	; 0xff
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7fd ff6d 	bl	8005fc8 <_ZN7TwoWire5writeEi>
      wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	4618      	mov	r0, r3
 80080f4:	f000 ffbc 	bl	8009070 <_ZN7TwoWire15endTransmissionEv>
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 80080f8:	89fb      	ldrh	r3, [r7, #14]
 80080fa:	2b08      	cmp	r3, #8
 80080fc:	d92c      	bls.n	8008158 <_ZN10IridiumSBD13check9603dataEv+0x13c>
      {
        wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)SER_PACKET_SIZE, (uint8_t)false); // Request SER_PACKET_SIZE bytes, don't release the bus
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	68d8      	ldr	r0, [r3, #12]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	7c19      	ldrb	r1, [r3, #16]
 8008106:	2300      	movs	r3, #0
 8008108:	2208      	movs	r2, #8
 800810a:	f000 ff19 	bl	8008f40 <_ZN7TwoWire11requestFromEhhh>
        while (wireport->available())
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	68da      	ldr	r2, [r3, #12]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	3308      	adds	r3, #8
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4610      	mov	r0, r2
 800811e:	4798      	blx	r3
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	bf14      	ite	ne
 8008126:	2301      	movne	r3, #1
 8008128:	2300      	moveq	r3, #0
 800812a:	b2db      	uxtb	r3, r3
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00f      	beq.n	8008150 <_ZN10IridiumSBD13check9603dataEv+0x134>
        {
          i2cSerPoke(wireport->read()); // Read and store each byte
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	68da      	ldr	r2, [r3, #12]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	330c      	adds	r3, #12
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4610      	mov	r0, r2
 8008140:	4798      	blx	r3
 8008142:	4603      	mov	r3, r0
 8008144:	b2db      	uxtb	r3, r3
 8008146:	4619      	mov	r1, r3
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 f8d5 	bl	80082f8 <_ZN10IridiumSBD10i2cSerPokeEc>
        while (wireport->available())
 800814e:	e7de      	b.n	800810e <_ZN10IridiumSBD13check9603dataEv+0xf2>
        }
        bytesAvailable -= SER_PACKET_SIZE; // Decrease the number of bytes available by SER_PACKET_SIZE
 8008150:	89fb      	ldrh	r3, [r7, #14]
 8008152:	3b08      	subs	r3, #8
 8008154:	81fb      	strh	r3, [r7, #14]
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 8008156:	e7cf      	b.n	80080f8 <_ZN10IridiumSBD13check9603dataEv+0xdc>
      }
      wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)bytesAvailable); // Request remaining bytes, release the bus
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	68d8      	ldr	r0, [r3, #12]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	7c1b      	ldrb	r3, [r3, #16]
 8008160:	89fa      	ldrh	r2, [r7, #14]
 8008162:	b2d2      	uxtb	r2, r2
 8008164:	4619      	mov	r1, r3
 8008166:	f000 ff26 	bl	8008fb6 <_ZN7TwoWire11requestFromEhh>
      while (wireport->available())
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	68da      	ldr	r2, [r3, #12]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	3308      	adds	r3, #8
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4610      	mov	r0, r2
 800817a:	4798      	blx	r3
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	bf14      	ite	ne
 8008182:	2301      	movne	r3, #1
 8008184:	2300      	moveq	r3, #0
 8008186:	b2db      	uxtb	r3, r3
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00f      	beq.n	80081ac <_ZN10IridiumSBD13check9603dataEv+0x190>
      {
        i2cSerPoke(wireport->read()); // Read and store each byte
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	68da      	ldr	r2, [r3, #12]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	330c      	adds	r3, #12
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4610      	mov	r0, r2
 800819c:	4798      	blx	r3
 800819e:	4603      	mov	r3, r0
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	4619      	mov	r1, r3
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 f8a7 	bl	80082f8 <_ZN10IridiumSBD10i2cSerPokeEc>
      while (wireport->available())
 80081aa:	e7de      	b.n	800816a <_ZN10IridiumSBD13check9603dataEv+0x14e>
      }
    }

    lastCheck = millis(); //Put off checking to avoid excessive I2C bus traffic
 80081ac:	f001 fbd6 	bl	800995c <HAL_GetTick>
 80081b0:	4602      	mov	r2, r0
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80081b6:	bf00      	nop
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <_ZN10IridiumSBD13check9603pinsEv>:

//Reads the IO pins and update IO_REGISTER
void IridiumSBD::check9603pins()
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b082      	sub	sp, #8
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  //Read the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	68da      	ldr	r2, [r3, #12]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	7c1b      	ldrb	r3, [r3, #16]
 80081ce:	4619      	mov	r1, r3
 80081d0:	4610      	mov	r0, r2
 80081d2:	f000 ff03 	bl	8008fdc <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	2110      	movs	r1, #16
 80081dc:	4618      	mov	r0, r3
 80081de:	f7fd fef3 	bl	8005fc8 <_ZN7TwoWire5writeEi>
  wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	4618      	mov	r0, r3
 80081e8:	f000 ff42 	bl	8009070 <_ZN7TwoWire15endTransmissionEv>
  if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)1) == 1) // Request one byte from the IO register
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	68d8      	ldr	r0, [r3, #12]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	7c1b      	ldrb	r3, [r3, #16]
 80081f4:	2201      	movs	r2, #1
 80081f6:	4619      	mov	r1, r3
 80081f8:	f000 fedd 	bl	8008fb6 <_ZN7TwoWire11requestFromEhh>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b01      	cmp	r3, #1
 8008200:	bf0c      	ite	eq
 8008202:	2301      	moveq	r3, #1
 8008204:	2300      	movne	r3, #0
 8008206:	b2db      	uxtb	r3, r3
 8008208:	2b00      	cmp	r3, #0
 800820a:	d00d      	beq.n	8008228 <_ZN10IridiumSBD13check9603pinsEv+0x6a>
  {
    IO_REGISTER = wireport->read(); // Read the IO register
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	68da      	ldr	r2, [r3, #12]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	330c      	adds	r3, #12
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4610      	mov	r0, r2
 800821c:	4798      	blx	r3
 800821e:	4603      	mov	r3, r0
 8008220:	b2da      	uxtb	r2, r3
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
}
 8008228:	bf00      	nop
 800822a:	3708      	adds	r7, #8
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <_ZN10IridiumSBD11set9603pinsEh>:

//Set the IO pins
void IridiumSBD::set9603pins(uint8_t pins)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	460b      	mov	r3, r1
 800823a:	70fb      	strb	r3, [r7, #3]
  //Write to the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	68da      	ldr	r2, [r3, #12]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	7c1b      	ldrb	r3, [r3, #16]
 8008244:	4619      	mov	r1, r3
 8008246:	4610      	mov	r0, r2
 8008248:	f000 fec8 	bl	8008fdc <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	2110      	movs	r1, #16
 8008252:	4618      	mov	r0, r3
 8008254:	f7fd feb8 	bl	8005fc8 <_ZN7TwoWire5writeEi>
  wireport->write(pins); // Set the pins
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	68da      	ldr	r2, [r3, #12]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	78f9      	ldrb	r1, [r7, #3]
 8008266:	4610      	mov	r0, r2
 8008268:	4798      	blx	r3
  wireport->endTransmission(); // Send data and surrender the bus
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	4618      	mov	r0, r3
 8008270:	f000 fefe 	bl	8009070 <_ZN7TwoWire15endTransmissionEv>
}
 8008274:	bf00      	nop
 8008276:	3708      	adds	r7, #8
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <_ZN10IridiumSBD15i2cSerAvailableEv>:
    return(ISBD_SUCCESS);
}

// I2C_SER functions
int IridiumSBD::i2cSerAvailable()
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  return (i2c_ser_buffer_tail + I2C_SER_MAX_BUFF - i2c_ser_buffer_head) % I2C_SER_MAX_BUFF;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008288:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	425a      	negs	r2, r3
 8008294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008298:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800829c:	bf58      	it	pl
 800829e:	4253      	negpl	r3, r2
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <_ZN10IridiumSBD10i2cSerReadEv>:

int IridiumSBD::i2cSerRead()
{
 80082ac:	b480      	push	{r7}
 80082ae:	b085      	sub	sp, #20
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  // Empty buffer?
  if (i2c_ser_buffer_head == i2c_ser_buffer_tail)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082bc:	429a      	cmp	r2, r3
 80082be:	d102      	bne.n	80082c6 <_ZN10IridiumSBD10i2cSerReadEv+0x1a>
    return -1;
 80082c0:	f04f 33ff 	mov.w	r3, #4294967295
 80082c4:	e012      	b.n	80082ec <_ZN10IridiumSBD10i2cSerReadEv+0x40>

  // Read from "head"
  uint8_t d = i2c_ser_buffer[i2c_ser_buffer_head]; // grab next byte
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	4413      	add	r3, r2
 80082ce:	7c9b      	ldrb	r3, [r3, #18]
 80082d0:	73fb      	strb	r3, [r7, #15]
  i2c_ser_buffer_head = (i2c_ser_buffer_head + 1) % I2C_SER_MAX_BUFF; // update head
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082d6:	3301      	adds	r3, #1
 80082d8:	425a      	negs	r2, r3
 80082da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082de:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80082e2:	bf58      	it	pl
 80082e4:	4253      	negpl	r3, r2
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	6593      	str	r3, [r2, #88]	; 0x58
  return d;
 80082ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3714      	adds	r7, #20
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <_ZN10IridiumSBD10i2cSerPokeEc>:

void IridiumSBD::i2cSerPoke(char serChar)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b085      	sub	sp, #20
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	460b      	mov	r3, r1
 8008302:	70fb      	strb	r3, [r7, #3]
  // Calculate the new value for the tail
  int next = (i2c_ser_buffer_tail + 1) % I2C_SER_MAX_BUFF;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008308:	3301      	adds	r3, #1
 800830a:	425a      	negs	r2, r3
 800830c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008310:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8008314:	bf58      	it	pl
 8008316:	4253      	negpl	r3, r2
 8008318:	60fb      	str	r3, [r7, #12]
  // If the buffer is not full (i.e. we are not about to overwrite the head byte)
  // If the buffer is full, the byte is lost
  if (next != i2c_ser_buffer_head)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	429a      	cmp	r2, r3
 8008322:	d008      	beq.n	8008336 <_ZN10IridiumSBD10i2cSerPokeEc+0x3e>
  {
    // save new data in buffer: tail points to where byte goes
    i2c_ser_buffer[i2c_ser_buffer_tail] = serChar; // save new byte
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	4413      	add	r3, r2
 800832c:	78fa      	ldrb	r2, [r7, #3]
 800832e:	749a      	strb	r2, [r3, #18]
    i2c_ser_buffer_tail = next;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 8008336:	bf00      	nop
 8008338:	3714      	adds	r7, #20
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr
	...

08008344 <_ZN10IridiumSBD20internalClearBuffersEi>:

int IridiumSBD::internalClearBuffers(int buffers)
// Clear the MO/MT/Both buffers
// Defaults to clearing the MO buffer to avoid resending old messages
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af02      	add	r7, sp, #8
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
   if (this->asleep)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8008354:	2b00      	cmp	r3, #0
 8008356:	d001      	beq.n	800835c <_ZN10IridiumSBD20internalClearBuffersEi+0x18>
      return ISBD_IS_ASLEEP;
 8008358:	230a      	movs	r3, #10
 800835a:	e032      	b.n	80083c2 <_ZN10IridiumSBD20internalClearBuffersEi+0x7e>

   if (buffers == ISBD_CLEAR_MT) // Clear MT buffer
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	2b01      	cmp	r3, #1
 8008360:	d106      	bne.n	8008370 <_ZN10IridiumSBD20internalClearBuffersEi+0x2c>
   {
      send(F("AT+SBDD1\r"));
 8008362:	2301      	movs	r3, #1
 8008364:	2201      	movs	r2, #1
 8008366:	4919      	ldr	r1, [pc, #100]	; (80083cc <_ZN10IridiumSBD20internalClearBuffersEi+0x88>)
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f7ff fab9 	bl	80078e0 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
 800836e:	e00f      	b.n	8008390 <_ZN10IridiumSBD20internalClearBuffersEi+0x4c>
   }
   else if (buffers == ISBD_CLEAR_BOTH) // Clear both buffers
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	2b02      	cmp	r3, #2
 8008374:	d106      	bne.n	8008384 <_ZN10IridiumSBD20internalClearBuffersEi+0x40>
   {
      send(F("AT+SBDD2\r"));
 8008376:	2301      	movs	r3, #1
 8008378:	2201      	movs	r2, #1
 800837a:	4915      	ldr	r1, [pc, #84]	; (80083d0 <_ZN10IridiumSBD20internalClearBuffersEi+0x8c>)
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f7ff faaf 	bl	80078e0 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
 8008382:	e005      	b.n	8008390 <_ZN10IridiumSBD20internalClearBuffersEi+0x4c>
   }
   else // Clear MO buffer
   {
      send(F("AT+SBDD0\r"));
 8008384:	2301      	movs	r3, #1
 8008386:	2201      	movs	r2, #1
 8008388:	4912      	ldr	r1, [pc, #72]	; (80083d4 <_ZN10IridiumSBD20internalClearBuffersEi+0x90>)
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7ff faa8 	bl	80078e0 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   }
   if (!waitForATResponse())
 8008390:	4b11      	ldr	r3, [pc, #68]	; (80083d8 <_ZN10IridiumSBD20internalClearBuffersEi+0x94>)
 8008392:	9300      	str	r3, [sp, #0]
 8008394:	2300      	movs	r3, #0
 8008396:	2200      	movs	r2, #0
 8008398:	2100      	movs	r1, #0
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f7fe fe3e 	bl	800701c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80083a0:	4603      	mov	r3, r0
 80083a2:	f083 0301 	eor.w	r3, r3, #1
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d009      	beq.n	80083c0 <_ZN10IridiumSBD20internalClearBuffersEi+0x7c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f7fe fef3 	bl	8007198 <_ZN10IridiumSBD9cancelledEv>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d001      	beq.n	80083bc <_ZN10IridiumSBD20internalClearBuffersEi+0x78>
 80083b8:	2304      	movs	r3, #4
 80083ba:	e002      	b.n	80083c2 <_ZN10IridiumSBD20internalClearBuffersEi+0x7e>
 80083bc:	2303      	movs	r3, #3
 80083be:	e000      	b.n	80083c2 <_ZN10IridiumSBD20internalClearBuffersEi+0x7e>

   return ISBD_SUCCESS;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3708      	adds	r7, #8
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	08019a4c 	.word	0x08019a4c
 80083d0:	08019a58 	.word	0x08019a58
 80083d4:	08019a64 	.word	0x08019a64
 80083d8:	08019394 	.word	0x08019394

080083dc <_ZN10IridiumSBD15internalGetIMEIEPcj>:

int IridiumSBD::internalGetIMEI(char *IMEI, size_t bufferSize)
// Get the IMEI
// https://github.com/mikalhart/IridiumSBD/pull/21
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b086      	sub	sp, #24
 80083e0:	af02      	add	r7, sp, #8
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	607a      	str	r2, [r7, #4]
   if (this->asleep)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d001      	beq.n	80083f6 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x1a>
      return ISBD_IS_ASLEEP;
 80083f2:	230a      	movs	r3, #10
 80083f4:	e023      	b.n	800843e <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>

   if (bufferSize < 16) // IMEI is 15 digits
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2b0f      	cmp	r3, #15
 80083fa:	d801      	bhi.n	8008400 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x24>
      return ISBD_RX_OVERFLOW;
 80083fc:	2308      	movs	r3, #8
 80083fe:	e01e      	b.n	800843e <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>

   send(F("AT+CGSN\r"));
 8008400:	2301      	movs	r3, #1
 8008402:	2201      	movs	r2, #1
 8008404:	4910      	ldr	r1, [pc, #64]	; (8008448 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x6c>)
 8008406:	68f8      	ldr	r0, [r7, #12]
 8008408:	f7ff fa6a 	bl	80078e0 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(IMEI, bufferSize, "\n"))
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	4b0f      	ldr	r3, [pc, #60]	; (800844c <_ZN10IridiumSBD15internalGetIMEIEPcj+0x70>)
 8008410:	9300      	str	r3, [sp, #0]
 8008412:	4b0f      	ldr	r3, [pc, #60]	; (8008450 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x74>)
 8008414:	68b9      	ldr	r1, [r7, #8]
 8008416:	68f8      	ldr	r0, [r7, #12]
 8008418:	f7fe fe00 	bl	800701c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 800841c:	4603      	mov	r3, r0
 800841e:	f083 0301 	eor.w	r3, r3, #1
 8008422:	b2db      	uxtb	r3, r3
 8008424:	2b00      	cmp	r3, #0
 8008426:	d009      	beq.n	800843c <_ZN10IridiumSBD15internalGetIMEIEPcj+0x60>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f7fe feb5 	bl	8007198 <_ZN10IridiumSBD9cancelledEv>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d001      	beq.n	8008438 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x5c>
 8008434:	2304      	movs	r3, #4
 8008436:	e002      	b.n	800843e <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>
 8008438:	2303      	movs	r3, #3
 800843a:	e000      	b.n	800843e <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>

   return ISBD_SUCCESS;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	08019a70 	.word	0x08019a70
 800844c:	08019394 	.word	0x08019394
 8008450:	08019a7c 	.word	0x08019a7c

08008454 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE>:
}
#endif


//uint8_t IridiumSBD::MRT_Iridium_setup(UART_HandleTypeDef huart,POWERPROFILE profile){ TODO??
uint8_t IridiumSBD::MRT_Iridium_setup(uint8_t timeout, uint8_t i2c_bus, void (*iridium_print)(char*)){
 8008454:	b580      	push	{r7, lr}
 8008456:	b092      	sub	sp, #72	; 0x48
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	607b      	str	r3, [r7, #4]
 800845e:	460b      	mov	r3, r1
 8008460:	72fb      	strb	r3, [r7, #11]
 8008462:	4613      	mov	r3, r2
 8008464:	72bb      	strb	r3, [r7, #10]
	this->print = iridium_print;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	601a      	str	r2, [r3, #0]
	this->print((char*) "\r\nIridium 9603N Init\r\n");
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	485b      	ldr	r0, [pc, #364]	; (80085e0 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x18c>)
 8008472:	4798      	blx	r3

	this->print((char*) "\tSetting I2C bus...");
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	485a      	ldr	r0, [pc, #360]	; (80085e4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x190>)
 800847a:	4798      	blx	r3
	if (i2c_bus == 1){
 800847c:	7abb      	ldrb	r3, [r7, #10]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d103      	bne.n	800848a <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x36>
		this->wireport = &Wire;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	4a58      	ldr	r2, [pc, #352]	; (80085e8 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x194>)
 8008486:	60da      	str	r2, [r3, #12]
 8008488:	e00c      	b.n	80084a4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x50>
	}
	else if (i2c_bus == 2){
 800848a:	7abb      	ldrb	r3, [r7, #10]
 800848c:	2b02      	cmp	r3, #2
 800848e:	d103      	bne.n	8008498 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x44>
		this->wireport = &Wire1;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	4a56      	ldr	r2, [pc, #344]	; (80085ec <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x198>)
 8008494:	60da      	str	r2, [r3, #12]
 8008496:	e005      	b.n	80084a4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x50>
	}
	else if (i2c_bus == 3){
 8008498:	7abb      	ldrb	r3, [r7, #10]
 800849a:	2b03      	cmp	r3, #3
 800849c:	d102      	bne.n	80084a4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x50>
		this->wireport = &Wire2;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	4a53      	ldr	r2, [pc, #332]	; (80085f0 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x19c>)
 80084a2:	60da      	str	r2, [r3, #12]
	}
	this->print((char*) "OK\r\n");
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4852      	ldr	r0, [pc, #328]	; (80085f4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 80084aa:	4798      	blx	r3

	this->print((char*) "\tChecking device connection...");
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4851      	ldr	r0, [pc, #324]	; (80085f8 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a4>)
 80084b2:	4798      	blx	r3
	while(!this->isConnected()){
 80084b4:	68f8      	ldr	r0, [r7, #12]
 80084b6:	f7fe f89f 	bl	80065f8 <_ZN10IridiumSBD11isConnectedEv>
 80084ba:	4603      	mov	r3, r0
 80084bc:	f083 0301 	eor.w	r3, r3, #1
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d020      	beq.n	8008508 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0xb4>
		HAL_Delay(300);
 80084c6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80084ca:	f001 fa53 	bl	8009974 <HAL_Delay>
		this->print((char*) "\r\tChecking device connection   ");
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	484a      	ldr	r0, [pc, #296]	; (80085fc <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a8>)
 80084d4:	4798      	blx	r3
		HAL_Delay(300);
 80084d6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80084da:	f001 fa4b 	bl	8009974 <HAL_Delay>
		this->print((char*) "\r\tChecking device connection.  ");
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4847      	ldr	r0, [pc, #284]	; (8008600 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1ac>)
 80084e4:	4798      	blx	r3
		HAL_Delay(300);
 80084e6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80084ea:	f001 fa43 	bl	8009974 <HAL_Delay>
		this->print((char*) "\r\tChecking device connection.. ");
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4844      	ldr	r0, [pc, #272]	; (8008604 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1b0>)
 80084f4:	4798      	blx	r3
		HAL_Delay(300);
 80084f6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80084fa:	f001 fa3b 	bl	8009974 <HAL_Delay>
		this->print((char*) "\r\tChecking device connection...");
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4841      	ldr	r0, [pc, #260]	; (8008608 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1b4>)
 8008504:	4798      	blx	r3
	while(!this->isConnected()){
 8008506:	e7d5      	b.n	80084b4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x60>
	}
	this->print((char*) "OK\r\n");
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4839      	ldr	r0, [pc, #228]	; (80085f4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 800850e:	4798      	blx	r3

	//Activate the superchargers
	this->print((char*) "\tActivating the superchargers...");
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	483d      	ldr	r0, [pc, #244]	; (800860c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1b8>)
 8008516:	4798      	blx	r3
	this->enableSuperCapCharger(true);
 8008518:	2101      	movs	r1, #1
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f7fd fee4 	bl	80062e8 <_ZN10IridiumSBD21enableSuperCapChargerEb>
	this->print((char*) "OK\r\n");
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4833      	ldr	r0, [pc, #204]	; (80085f4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 8008526:	4798      	blx	r3


	//Wait for the supercapacitors to charge
	//int start=millis();
	this->print((char*) "\tWaiting for the supercapacitors to charge...");
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4838      	ldr	r0, [pc, #224]	; (8008610 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1bc>)
 800852e:	4798      	blx	r3
	while (!this->checkSuperCapCharger()){
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f7fd ff17 	bl	8006364 <_ZN10IridiumSBD20checkSuperCapChargerEv>
 8008536:	4603      	mov	r3, r0
 8008538:	f083 0301 	eor.w	r3, r3, #1
 800853c:	b2db      	uxtb	r3, r3
 800853e:	2b00      	cmp	r3, #0
 8008540:	d004      	beq.n	800854c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0xf8>
		HAL_Delay(333);
 8008542:	f240 104d 	movw	r0, #333	; 0x14d
 8008546:	f001 fa15 	bl	8009974 <HAL_Delay>
	while (!this->checkSuperCapCharger()){
 800854a:	e7f1      	b.n	8008530 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0xdc>
	}
	this->print((char*) "OK\r\n");
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4828      	ldr	r0, [pc, #160]	; (80085f4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 8008552:	4798      	blx	r3


	//Enable power for the 9603N
	this->print((char*) "\tEnabling 9603N power...");
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	482e      	ldr	r0, [pc, #184]	; (8008614 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1c0>)
 800855a:	4798      	blx	r3
	this->enable9603Npower(true);
 800855c:	2101      	movs	r1, #1
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	f7fd ff30 	bl	80063c4 <_ZN10IridiumSBD16enable9603NpowerEb>
	this->print((char*) "OK\r\n");
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4822      	ldr	r0, [pc, #136]	; (80085f4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 800856a:	4798      	blx	r3
	/*
	 * Begin satellite modem operation
	 */

	//Power on the rockblock
	this->print((char*) "\tStarting Modem...");
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4829      	ldr	r0, [pc, #164]	; (8008618 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1c4>)
 8008572:	4798      	blx	r3
	//this->setPowerProfile(profile);
	int err = this->begin();
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f7fd fd59 	bl	800602c <_ZN10IridiumSBD5beginEv>
 800857a:	6478      	str	r0, [r7, #68]	; 0x44
	if (err != ISBD_SUCCESS)
 800857c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00b      	beq.n	800859a <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x146>
	  {
		this->print((char*) "Failed: ");
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4825      	ldr	r0, [pc, #148]	; (800861c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1c8>)
 8008588:	4798      	blx	r3
		this->MRT_Iridium_ErrorMessage(err);
 800858a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800858c:	b2db      	uxtb	r3, r3
 800858e:	4619      	mov	r1, r3
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f000 f849 	bl	8008628 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>

	    return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e01d      	b.n	80085d6 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x182>
	  }
	this->print((char*) "OK\r\n");
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4815      	ldr	r0, [pc, #84]	; (80085f4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 80085a0:	4798      	blx	r3

	//Setup default IMEI to 000000000000000 (no IMEI)
	IMEI= (char*) "000000000000000";
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	4a1e      	ldr	r2, [pc, #120]	; (8008620 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1cc>)
 80085a6:	605a      	str	r2, [r3, #4]

	char str[50];
	sprintf(str, "\tSetting timeout of %i seconds...", timeout);
 80085a8:	7afa      	ldrb	r2, [r7, #11]
 80085aa:	f107 0310 	add.w	r3, r7, #16
 80085ae:	491d      	ldr	r1, [pc, #116]	; (8008624 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1d0>)
 80085b0:	4618      	mov	r0, r3
 80085b2:	f00b fbf3 	bl	8013d9c <siprintf>
	this->print((char*) str);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f107 0210 	add.w	r2, r7, #16
 80085be:	4610      	mov	r0, r2
 80085c0:	4798      	blx	r3
	adjustATTimeout(timeout);
 80085c2:	7afb      	ldrb	r3, [r7, #11]
 80085c4:	4619      	mov	r1, r3
 80085c6:	68f8      	ldr	r0, [r7, #12]
 80085c8:	f7fd fd9c 	bl	8006104 <_ZN10IridiumSBD15adjustATTimeoutEi>
	this->print((char*) "OK\r\n");
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4808      	ldr	r0, [pc, #32]	; (80085f4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 80085d2:	4798      	blx	r3

	return HAL_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3748      	adds	r7, #72	; 0x48
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	08019a80 	.word	0x08019a80
 80085e4:	08019a98 	.word	0x08019a98
 80085e8:	20000400 	.word	0x20000400
 80085ec:	200004b8 	.word	0x200004b8
 80085f0:	20000570 	.word	0x20000570
 80085f4:	08019394 	.word	0x08019394
 80085f8:	08019aac 	.word	0x08019aac
 80085fc:	08019acc 	.word	0x08019acc
 8008600:	08019aec 	.word	0x08019aec
 8008604:	08019b0c 	.word	0x08019b0c
 8008608:	08019b2c 	.word	0x08019b2c
 800860c:	08019b4c 	.word	0x08019b4c
 8008610:	08019b70 	.word	0x08019b70
 8008614:	08019ba0 	.word	0x08019ba0
 8008618:	08019bbc 	.word	0x08019bbc
 800861c:	08019bd0 	.word	0x08019bd0
 8008620:	08019bdc 	.word	0x08019bdc
 8008624:	08019bec 	.word	0x08019bec

08008628 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>:
	return true;
}



void IridiumSBD::MRT_Iridium_ErrorMessage(uint8_t error){
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	460b      	mov	r3, r1
 8008632:	70fb      	strb	r3, [r7, #3]
	this->print((char*) "\r\n\tError:\t");
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4834      	ldr	r0, [pc, #208]	; (800870c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xe4>)
 800863a:	4798      	blx	r3
	if (error == ISBD_ALREADY_AWAKE){
 800863c:	78fb      	ldrb	r3, [r7, #3]
 800863e:	2b01      	cmp	r3, #1
 8008640:	d104      	bne.n	800864c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x24>
		this->print((char*) "\tAlready Awake\r\n");
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4832      	ldr	r0, [pc, #200]	; (8008710 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xe8>)
 8008648:	4798      	blx	r3
		this->print((char*) "\tDEBUG LINE REACHED\r\n");
	}
	else{
		this->print((char*) "\tUNKNOWN\r\n");
	}
}
 800864a:	e05b      	b.n	8008704 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_SERIAL_FAILURE){
 800864c:	78fb      	ldrb	r3, [r7, #3]
 800864e:	2b02      	cmp	r3, #2
 8008650:	d104      	bne.n	800865c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x34>
		this->print((char*) "\tSerial Failure\r\n");
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	482f      	ldr	r0, [pc, #188]	; (8008714 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xec>)
 8008658:	4798      	blx	r3
}
 800865a:	e053      	b.n	8008704 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_PROTOCOL_ERROR){
 800865c:	78fb      	ldrb	r3, [r7, #3]
 800865e:	2b03      	cmp	r3, #3
 8008660:	d104      	bne.n	800866c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x44>
		this->print((char*) "\tProtocol Error\r\n");
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	482c      	ldr	r0, [pc, #176]	; (8008718 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf0>)
 8008668:	4798      	blx	r3
}
 800866a:	e04b      	b.n	8008704 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_CANCELLED){
 800866c:	78fb      	ldrb	r3, [r7, #3]
 800866e:	2b04      	cmp	r3, #4
 8008670:	d104      	bne.n	800867c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x54>
		this->print((char*) "\tCancelled\r\n");
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4829      	ldr	r0, [pc, #164]	; (800871c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf4>)
 8008678:	4798      	blx	r3
}
 800867a:	e043      	b.n	8008704 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_NO_MODEM_DETECTED){
 800867c:	78fb      	ldrb	r3, [r7, #3]
 800867e:	2b05      	cmp	r3, #5
 8008680:	d104      	bne.n	800868c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x64>
		this->print((char*) "\tNo modem detected: check wiring.\r\n");
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4826      	ldr	r0, [pc, #152]	; (8008720 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf8>)
 8008688:	4798      	blx	r3
}
 800868a:	e03b      	b.n	8008704 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_SBDIX_FATAL_ERROR){
 800868c:	78fb      	ldrb	r3, [r7, #3]
 800868e:	2b06      	cmp	r3, #6
 8008690:	d104      	bne.n	800869c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x74>
		this->print((char*) "\tSDBIX Fatal Error\r\n");
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4823      	ldr	r0, [pc, #140]	; (8008724 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xfc>)
 8008698:	4798      	blx	r3
}
 800869a:	e033      	b.n	8008704 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_SENDRECEIVE_TIMEOUT){
 800869c:	78fb      	ldrb	r3, [r7, #3]
 800869e:	2b07      	cmp	r3, #7
 80086a0:	d104      	bne.n	80086ac <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x84>
		this->print((char*) "\tSend-Receive Timeout\r\n");
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4820      	ldr	r0, [pc, #128]	; (8008728 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x100>)
 80086a8:	4798      	blx	r3
}
 80086aa:	e02b      	b.n	8008704 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_RX_OVERFLOW){
 80086ac:	78fb      	ldrb	r3, [r7, #3]
 80086ae:	2b08      	cmp	r3, #8
 80086b0:	d104      	bne.n	80086bc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x94>
		this->print((char*) "\tRX Overflow\r\n");
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	481d      	ldr	r0, [pc, #116]	; (800872c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x104>)
 80086b8:	4798      	blx	r3
}
 80086ba:	e023      	b.n	8008704 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_REENTRANT){
 80086bc:	78fb      	ldrb	r3, [r7, #3]
 80086be:	2b09      	cmp	r3, #9
 80086c0:	d104      	bne.n	80086cc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xa4>
		this->print((char*) "\tREENTRANT\r\n");
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	481a      	ldr	r0, [pc, #104]	; (8008730 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x108>)
 80086c8:	4798      	blx	r3
}
 80086ca:	e01b      	b.n	8008704 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_IS_ASLEEP){
 80086cc:	78fb      	ldrb	r3, [r7, #3]
 80086ce:	2b0a      	cmp	r3, #10
 80086d0:	d104      	bne.n	80086dc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xb4>
		this->print((char*) "\tIs Asleep\r\n");
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4817      	ldr	r0, [pc, #92]	; (8008734 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x10c>)
 80086d8:	4798      	blx	r3
}
 80086da:	e013      	b.n	8008704 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_NO_SLEEP_PIN){
 80086dc:	78fb      	ldrb	r3, [r7, #3]
 80086de:	2b0b      	cmp	r3, #11
 80086e0:	d104      	bne.n	80086ec <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xc4>
		this->print((char*) "\tNo Sleep Pin\r\n");
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4814      	ldr	r0, [pc, #80]	; (8008738 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x110>)
 80086e8:	4798      	blx	r3
}
 80086ea:	e00b      	b.n	8008704 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if(error == 20){
 80086ec:	78fb      	ldrb	r3, [r7, #3]
 80086ee:	2b14      	cmp	r3, #20
 80086f0:	d104      	bne.n	80086fc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xd4>
		this->print((char*) "\tDEBUG LINE REACHED\r\n");
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4811      	ldr	r0, [pc, #68]	; (800873c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x114>)
 80086f8:	4798      	blx	r3
}
 80086fa:	e003      	b.n	8008704 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
		this->print((char*) "\tUNKNOWN\r\n");
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	480f      	ldr	r0, [pc, #60]	; (8008740 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x118>)
 8008702:	4798      	blx	r3
}
 8008704:	bf00      	nop
 8008706:	3708      	adds	r7, #8
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	08019cd0 	.word	0x08019cd0
 8008710:	08019cdc 	.word	0x08019cdc
 8008714:	08019cf0 	.word	0x08019cf0
 8008718:	08019d04 	.word	0x08019d04
 800871c:	08019d18 	.word	0x08019d18
 8008720:	08019d28 	.word	0x08019d28
 8008724:	08019d4c 	.word	0x08019d4c
 8008728:	08019d64 	.word	0x08019d64
 800872c:	08019d7c 	.word	0x08019d7c
 8008730:	08019d8c 	.word	0x08019d8c
 8008734:	08019d9c 	.word	0x08019d9c
 8008738:	08019dac 	.word	0x08019dac
 800873c:	08019dbc 	.word	0x08019dbc
 8008740:	08019dd4 	.word	0x08019dd4

08008744 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv>:


/*
 * This function requests the satellite modem's IMEI number.
 */
boolean IridiumSBD::MRT_Iridium_getIMEI(void){
 8008744:	b580      	push	{r7, lr}
 8008746:	b092      	sub	sp, #72	; 0x48
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]

	//Check if we already have the IMEI
	if (strcmp(IMEI,"000000000000000")==0){
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	491f      	ldr	r1, [pc, #124]	; (80087d0 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x8c>)
 8008752:	4618      	mov	r0, r3
 8008754:	f7f7 fd4c 	bl	80001f0 <strcmp>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d124      	bne.n	80087a8 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x64>

		//Reset the IMEI
		IMEI=new char[16];
 800875e:	2010      	movs	r0, #16
 8008760:	f009 fd6d 	bl	801223e <_Znaj>
 8008764:	4603      	mov	r3, r0
 8008766:	461a      	mov	r2, r3
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	605a      	str	r2, [r3, #4]

		// Get the IMEI
		this->print((char*) "\r\nIridium: Retrieving the IMEI\r\n");
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4818      	ldr	r0, [pc, #96]	; (80087d4 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x90>)
 8008772:	4798      	blx	r3
		int err = this->getIMEI(IMEI, 16);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	2210      	movs	r2, #16
 800877a:	4619      	mov	r1, r3
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f7fd ff1b 	bl	80065b8 <_ZN10IridiumSBD7getIMEIEPcj>
 8008782:	6478      	str	r0, [r7, #68]	; 0x44
		if (err != ISBD_SUCCESS)
 8008784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00e      	beq.n	80087a8 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x64>
		{
			char str[24+sizeof(int)];
		    sprintf(str, "\tgetIMEI failed: error %i\r\n", err);
 800878a:	f107 030c 	add.w	r3, r7, #12
 800878e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008790:	4911      	ldr	r1, [pc, #68]	; (80087d8 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x94>)
 8008792:	4618      	mov	r0, r3
 8008794:	f00b fb02 	bl	8013d9c <siprintf>
		    this->print((char*) str);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f107 020c 	add.w	r2, r7, #12
 80087a0:	4610      	mov	r0, r2
 80087a2:	4798      	blx	r3
		    return false;
 80087a4:	2300      	movs	r3, #0
 80087a6:	e00e      	b.n	80087c6 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x82>
		  }
	}

	char str[28];//IMEI is 15 integers long
	sprintf(str, "\tIMEI is %s\r\n", IMEI);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	685a      	ldr	r2, [r3, #4]
 80087ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80087b0:	490a      	ldr	r1, [pc, #40]	; (80087dc <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x98>)
 80087b2:	4618      	mov	r0, r3
 80087b4:	f00b faf2 	bl	8013d9c <siprintf>
	this->print((char*) str);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80087c0:	4610      	mov	r0, r2
 80087c2:	4798      	blx	r3
	return true;
 80087c4:	2301      	movs	r3, #1
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3748      	adds	r7, #72	; 0x48
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	08019bdc 	.word	0x08019bdc
 80087d4:	08019de0 	.word	0x08019de0
 80087d8:	08019e04 	.word	0x08019e04
 80087dc:	08019e20 	.word	0x08019e20

080087e0 <_ZN10IridiumSBD15MRT_Iridium_CSQEv>:
 * This sketch checks the Iridium signal quality and returns the status
 * of the Network Available signal.
 *
 * The boolean param is if you want to check for network availability
 */
int IridiumSBD::MRT_Iridium_CSQ(){
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b09e      	sub	sp, #120	; 0x78
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
	this->print((char*) "\r\nIridium: Checking Signal Quality\r\n");
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	481c      	ldr	r0, [pc, #112]	; (8008860 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x80>)
 80087ee:	4798      	blx	r3
	int signalQuality = -1;
 80087f0:	f04f 33ff 	mov.w	r3, #4294967295
 80087f4:	673b      	str	r3, [r7, #112]	; 0x70

	this->MRT_Iridium_getIMEI();
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f7ff ffa4 	bl	8008744 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv>

	// Check the signal quality.
	// This returns a number between 0 and 5.
	// 2 or better is preferred.
	int err = this->getSignalQuality(signalQuality);
 80087fc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008800:	4619      	mov	r1, r3
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f7fd fc60 	bl	80060c8 <_ZN10IridiumSBD16getSignalQualityERi>
 8008808:	6778      	str	r0, [r7, #116]	; 0x74
	if (err != ISBD_SUCCESS)
 800880a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800880c:	2b00      	cmp	r3, #0
 800880e:	d015      	beq.n	800883c <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x5c>
	{
	  char str[34+sizeof(int)];
	  sprintf(str, "\tSignalQuality failed: error  %i\r\n", err);
 8008810:	f107 030c 	add.w	r3, r7, #12
 8008814:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008816:	4913      	ldr	r1, [pc, #76]	; (8008864 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x84>)
 8008818:	4618      	mov	r0, r3
 800881a:	f00b fabf 	bl	8013d9c <siprintf>
	  this->print((char*) str);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f107 020c 	add.w	r2, r7, #12
 8008826:	4610      	mov	r0, r2
 8008828:	4798      	blx	r3
	  this->MRT_Iridium_ErrorMessage(err);
 800882a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800882c:	b2db      	uxtb	r3, r3
 800882e:	4619      	mov	r1, r3
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f7ff fef9 	bl	8008628 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
	  return -1;
 8008836:	f04f 33ff 	mov.w	r3, #4294967295
 800883a:	e00d      	b.n	8008858 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x78>
	}

	char str[56+sizeof(int)];
	sprintf(str, "\tOn a scale of 0 to 5, signal quality is currently  %i\r\n", signalQuality);
 800883c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800883e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008842:	4909      	ldr	r1, [pc, #36]	; (8008868 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x88>)
 8008844:	4618      	mov	r0, r3
 8008846:	f00b faa9 	bl	8013d9c <siprintf>
	this->print((char*) str);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008852:	4610      	mov	r0, r2
 8008854:	4798      	blx	r3

	return signalQuality;
 8008856:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 8008858:	4618      	mov	r0, r3
 800885a:	3778      	adds	r7, #120	; 0x78
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}
 8008860:	08019e30 	.word	0x08019e30
 8008864:	08019e58 	.word	0x08019e58
 8008868:	08019e7c 	.word	0x08019e7c

0800886c <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv>:


/*
 * This function checks if a network is available
 */
boolean IridiumSBD::MRT_Iridium_NetworkAvailability(void){
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]

	// Check Network Available.
	this->print((char*) "\r\nIridium: Checking if Network is Available:\t");
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	480c      	ldr	r0, [pc, #48]	; (80088ac <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x40>)
 800887a:	4798      	blx	r3
	if (!this->checkNetworkAvailable()){
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f7fd fe4d 	bl	800651c <_ZN10IridiumSBD21checkNetworkAvailableEv>
 8008882:	4603      	mov	r3, r0
 8008884:	f083 0301 	eor.w	r3, r3, #1
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b00      	cmp	r3, #0
 800888c:	d005      	beq.n	800889a <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x2e>
		this->print((char*) "not available.\r\n");
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4807      	ldr	r0, [pc, #28]	; (80088b0 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x44>)
 8008894:	4798      	blx	r3
		//diagprint(F("(This might be because the 9603N has not yet aquired the ring channel.)\r\n"));
		return false;
 8008896:	2300      	movs	r3, #0
 8008898:	e004      	b.n	80088a4 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x38>
	}

	this->print((char*) "available.\r\n");
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4805      	ldr	r0, [pc, #20]	; (80088b4 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x48>)
 80088a0:	4798      	blx	r3
	return true;
 80088a2:	2301      	movs	r3, #1
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3708      	adds	r7, #8
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	08019eb8 	.word	0x08019eb8
 80088b0:	08019ee8 	.word	0x08019ee8
 80088b4:	08019efc 	.word	0x08019efc

080088b8 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv>:


/*
 * This function requests the time
 */
boolean IridiumSBD::MRT_Iridium_getTime(void){
 80088b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088ba:	b0a1      	sub	sp, #132	; 0x84
 80088bc:	af04      	add	r7, sp, #16
 80088be:	6078      	str	r0, [r7, #4]
	this->print((char*) "\r\nIridium: Retrieving time\r\n");
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4820      	ldr	r0, [pc, #128]	; (8008948 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x90>)
 80088c6:	4798      	blx	r3
	struct tm t; // struct tm is defined in time.h
	int err = this->getSystemTime(t); // Ask the 9603N for the system time
 80088c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80088cc:	4619      	mov	r1, r3
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7fd fc46 	bl	8006160 <_ZN10IridiumSBD13getSystemTimeER2tm>
 80088d4:	66f8      	str	r0, [r7, #108]	; 0x6c
	if (err == ISBD_SUCCESS) // Was it successful?
 80088d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d11c      	bne.n	8008916 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x5e>
	    {
		char buf[61];
		sprintf(buf, "\r\n\t<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
				t.tm_year + 1900, t.tm_mon + 1, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec);
 80088dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
		sprintf(buf, "\r\n\t<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
 80088de:	f203 756c 	addw	r5, r3, #1900	; 0x76c
				t.tm_year + 1900, t.tm_mon + 1, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec);
 80088e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		sprintf(buf, "\r\n\t<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
 80088e4:	1c5e      	adds	r6, r3, #1
 80088e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80088ea:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80088ec:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80088ee:	f107 0408 	add.w	r4, r7, #8
 80088f2:	9003      	str	r0, [sp, #12]
 80088f4:	9102      	str	r1, [sp, #8]
 80088f6:	9201      	str	r2, [sp, #4]
 80088f8:	9300      	str	r3, [sp, #0]
 80088fa:	4633      	mov	r3, r6
 80088fc:	462a      	mov	r2, r5
 80088fe:	4913      	ldr	r1, [pc, #76]	; (800894c <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x94>)
 8008900:	4620      	mov	r0, r4
 8008902:	f00b fa4b 	bl	8013d9c <siprintf>
		this->print((char*) buf);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f107 0208 	add.w	r2, r7, #8
 800890e:	4610      	mov	r0, r2
 8008910:	4798      	blx	r3
		return true;
 8008912:	2301      	movs	r3, #1
 8008914:	e013      	b.n	800893e <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x86>
	}

	else if (err == ISBD_NO_NETWORK) // Did it fail because the 9603N has not yet seen the network?
 8008916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008918:	2b0c      	cmp	r3, #12
 800891a:	d105      	bne.n	8008928 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x70>
	     {
		 this->print((char*) "\tNo network detected.\r\n");
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	480b      	ldr	r0, [pc, #44]	; (8008950 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x98>)
 8008922:	4798      	blx	r3
	   	 return false;
 8008924:	2300      	movs	r3, #0
 8008926:	e00a      	b.n	800893e <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x86>
	}

	else
	    {
		this->print((char*) "\tUnexpected Error ");
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4809      	ldr	r0, [pc, #36]	; (8008954 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x9c>)
 800892e:	4798      	blx	r3
		this->MRT_Iridium_ErrorMessage(err);
 8008930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008932:	b2db      	uxtb	r3, r3
 8008934:	4619      	mov	r1, r3
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f7ff fe76 	bl	8008628 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
		return false;
 800893c:	2300      	movs	r3, #0
	}
}
 800893e:	4618      	mov	r0, r3
 8008940:	3774      	adds	r7, #116	; 0x74
 8008942:	46bd      	mov	sp, r7
 8008944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008946:	bf00      	nop
 8008948:	08019f0c 	.word	0x08019f0c
 800894c:	08019f2c 	.word	0x08019f2c
 8008950:	08019f68 	.word	0x08019f68
 8008954:	08019f80 	.word	0x08019f80

08008958 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc>:
 * This sketch sends a "Hello, world!" message from the satellite modem.
 * If you have activated your account and have credits, this message
 * should arrive at the endpoints (delivery group) you have configured
 * (email address or HTTP POST).
 */
boolean IridiumSBD::MRT_Iridium_sendMessage(char* msg){
 8008958:	b580      	push	{r7, lr}
 800895a:	b090      	sub	sp, #64	; 0x40
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
	int temp = this->atTimeout; //Save default atTimeout
	adjustATTimeout(timeout);
*/

	// Send the message
	this->print((char*) "\r\nIridium: Trying to send the message.  This might take several minutes.\r\n");
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4828      	ldr	r0, [pc, #160]	; (8008a08 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xb0>)
 8008968:	4798      	blx	r3
	int err = this->sendSBDText((const char*) msg);
 800896a:	6839      	ldr	r1, [r7, #0]
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f7fd fb87 	bl	8006080 <_ZN10IridiumSBD11sendSBDTextEPKc>
 8008972:	63f8      	str	r0, [r7, #60]	; 0x3c
	//int err = this->sendSBDText((const char*) "Hello, world!");
	//int err = ISBD_SENDRECEIVE_TIMEOUT;

	if (err != ISBD_SUCCESS){
 8008974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008976:	2b00      	cmp	r3, #0
 8008978:	d01b      	beq.n	80089b2 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0x5a>
		char str[50];
		sprintf(str, "\tsendSBDText failed: error -> %i\r\n", err);
 800897a:	f107 0308 	add.w	r3, r7, #8
 800897e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008980:	4922      	ldr	r1, [pc, #136]	; (8008a0c <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xb4>)
 8008982:	4618      	mov	r0, r3
 8008984:	f00b fa0a 	bl	8013d9c <siprintf>
		this->print((char*) str);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f107 0208 	add.w	r2, r7, #8
 8008990:	4610      	mov	r0, r2
 8008992:	4798      	blx	r3
	    if (err == ISBD_SENDRECEIVE_TIMEOUT){
 8008994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008996:	2b07      	cmp	r3, #7
 8008998:	d103      	bne.n	80089a2 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0x4a>
	    	this->print((char*) "\tTry again with a better view of the sky.\r\n");
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	481c      	ldr	r0, [pc, #112]	; (8008a10 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xb8>)
 80089a0:	4798      	blx	r3
	    }
	    this->MRT_Iridium_ErrorMessage((uint8_t) err);
 80089a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	4619      	mov	r1, r3
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f7ff fe3d 	bl	8008628 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
	    return false;
 80089ae:	2300      	movs	r3, #0
 80089b0:	e025      	b.n	80089fe <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xa6>
	}

	else{
		this->print((char*) "\tMessage sent\r\n");
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4817      	ldr	r0, [pc, #92]	; (8008a14 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xbc>)
 80089b8:	4798      	blx	r3
	}

	// Clear the Mobile Originated message buffer
	this->print((char*) "\tClearing the MO buffer.\r\n");
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4816      	ldr	r0, [pc, #88]	; (8008a18 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xc0>)
 80089c0:	4798      	blx	r3
	err = this->clearBuffers(ISBD_CLEAR_MO); // Clear MO buffer
 80089c2:	2100      	movs	r1, #0
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f7fd fdd9 	bl	800657c <_ZN10IridiumSBD12clearBuffersEi>
 80089ca:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (err != ISBD_SUCCESS){
 80089cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d014      	beq.n	80089fc <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xa4>
		char str[50];
		sprintf(str, "clearBuffers failed: error -> %i\r\n", err);
 80089d2:	f107 0308 	add.w	r3, r7, #8
 80089d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80089d8:	4910      	ldr	r1, [pc, #64]	; (8008a1c <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xc4>)
 80089da:	4618      	mov	r0, r3
 80089dc:	f00b f9de 	bl	8013d9c <siprintf>
		this->print((char*) str);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f107 0208 	add.w	r2, r7, #8
 80089e8:	4610      	mov	r0, r2
 80089ea:	4798      	blx	r3
		this->MRT_Iridium_ErrorMessage((uint8_t) err);
 80089ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	4619      	mov	r1, r3
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f7ff fe18 	bl	8008628 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
		return false;
 80089f8:	2300      	movs	r3, #0
 80089fa:	e000      	b.n	80089fe <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xa6>
	}
	return true;
 80089fc:	2301      	movs	r3, #1
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3740      	adds	r7, #64	; 0x40
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	08019f94 	.word	0x08019f94
 8008a0c:	08019fe0 	.word	0x08019fe0
 8008a10:	0801a004 	.word	0x0801a004
 8008a14:	0801a030 	.word	0x0801a030
 8008a18:	0801a040 	.word	0x0801a040
 8008a1c:	0801a05c 	.word	0x0801a05c

08008a20 <_ZN10IridiumSBDC1ER7TwoWireh>:
      if (ringPin != -1)
         pinMode(ringPin, INPUT);
   }
   */

IridiumSBD(TwoWire &wirePort = IRIDIUM_I2C, uint8_t deviceAddress = 0x63)
 8008a20:	b480      	push	{r7}
 8008a22:	b085      	sub	sp, #20
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	71fb      	strb	r3, [r7, #7]
   {
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2200      	movs	r2, #0
 8008a32:	66da      	str	r2, [r3, #108]	; 0x6c
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2205      	movs	r2, #5
 8008a38:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2202      	movs	r2, #2
 8008a48:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2204      	movs	r2, #4
 8008a50:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2208      	movs	r2, #8
 8008a58:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2210      	movs	r2, #16
 8008a60:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2220      	movs	r2, #32
 8008a68:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2240      	movs	r2, #64	; 0x40
 8008a70:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
      useSerial = false;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2200      	movs	r2, #0
 8008a78:	745a      	strb	r2, [r3, #17]
      wireport = &wirePort;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	68ba      	ldr	r2, [r7, #8]
 8008a7e:	60da      	str	r2, [r3, #12]
      deviceaddress = deviceAddress;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	79fa      	ldrb	r2, [r7, #7]
 8008a84:	741a      	strb	r2, [r3, #16]
      sbdixInterval = ISBD_USB_SBDIX_INTERVAL;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	221e      	movs	r2, #30
 8008a8a:	65da      	str	r2, [r3, #92]	; 0x5c
      atTimeout = ISBD_DEFAULT_AT_TIMEOUT;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	221e      	movs	r2, #30
 8008a90:	661a      	str	r2, [r3, #96]	; 0x60
      sendReceiveTimeout = ISBD_DEFAULT_SENDRECEIVE_TIME;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008a98:	665a      	str	r2, [r3, #100]	; 0x64
      startupTimeout = ISBD_STARTUP_MAX_TIME;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	22f0      	movs	r2, #240	; 0xf0
 8008a9e:	669a      	str	r2, [r3, #104]	; 0x68
      remainingMessages = -1;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8008aa6:	675a      	str	r2, [r3, #116]	; 0x74
      asleep = true;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
      reentrant = false;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
      sleepPin = -1;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f04f 32ff 	mov.w	r2, #4294967295
 8008abe:	67da      	str	r2, [r3, #124]	; 0x7c
      sleepPinConfigured = false;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      ringPin = -1;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f04f 32ff 	mov.w	r2, #4294967295
 8008ace:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      msstmWorkaroundRequested = false;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
      ringAlertsEnabled = true;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2201      	movs	r2, #1
 8008ade:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
      ringAsserted = false;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
      lastPowerOnTime = 0UL;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      head = SBDRING;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	4a0c      	ldr	r2, [pc, #48]	; (8008b28 <_ZN10IridiumSBDC1ER7TwoWireh+0x108>)
 8008af6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      tail = SBDRING;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	4a0a      	ldr	r2, [pc, #40]	; (8008b28 <_ZN10IridiumSBDC1ER7TwoWireh+0x108>)
 8008afe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      nextChar = -1;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f04f 32ff 	mov.w	r2, #4294967295
 8008b08:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      i2c_ser_buffer_tail = 0;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	655a      	str	r2, [r3, #84]	; 0x54
      i2c_ser_buffer_head = 0;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2200      	movs	r2, #0
 8008b16:	659a      	str	r2, [r3, #88]	; 0x58
   }
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3714      	adds	r7, #20
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	0801a374 	.word	0x0801a374

08008b2c <MRT_Iridium_Constructor>:

//C structs
struct HIRIDIUM hiridium;


void MRT_Iridium_Constructor(){
 8008b2c:	b598      	push	{r3, r4, r7, lr}
 8008b2e:	af00      	add	r7, sp, #0
	if (E_T==NULL){
 8008b30:	4b08      	ldr	r3, [pc, #32]	; (8008b54 <MRT_Iridium_Constructor+0x28>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d10b      	bne.n	8008b50 <MRT_Iridium_Constructor+0x24>
		E_T = new IridiumSBD();
 8008b38:	20a4      	movs	r0, #164	; 0xa4
 8008b3a:	f009 fb6f 	bl	801221c <_Znwj>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	461c      	mov	r4, r3
 8008b42:	2263      	movs	r2, #99	; 0x63
 8008b44:	4904      	ldr	r1, [pc, #16]	; (8008b58 <MRT_Iridium_Constructor+0x2c>)
 8008b46:	4620      	mov	r0, r4
 8008b48:	f7ff ff6a 	bl	8008a20 <_ZN10IridiumSBDC1ER7TwoWireh>
 8008b4c:	4b01      	ldr	r3, [pc, #4]	; (8008b54 <MRT_Iridium_Constructor+0x28>)
 8008b4e:	601c      	str	r4, [r3, #0]
	}
}
 8008b50:	bf00      	nop
 8008b52:	bd98      	pop	{r3, r4, r7, pc}
 8008b54:	200003e8 	.word	0x200003e8
 8008b58:	20000400 	.word	0x20000400

08008b5c <MRT_Iridium_Init>:
		E_T = NULL;
	}
}


struct HIRIDIUM MRT_Iridium_Init(uint8_t timeout, uint8_t i2c_bus, void (*iridium_print)(char*)){
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	607b      	str	r3, [r7, #4]
 8008b66:	460b      	mov	r3, r1
 8008b68:	72fb      	strb	r3, [r7, #11]
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	72bb      	strb	r3, [r7, #10]
	MRT_Iridium_Constructor();
 8008b6e:	f7ff ffdd 	bl	8008b2c <MRT_Iridium_Constructor>
	E_T->MRT_Iridium_setup(timeout, i2c_bus, iridium_print);
 8008b72:	4b0d      	ldr	r3, [pc, #52]	; (8008ba8 <MRT_Iridium_Init+0x4c>)
 8008b74:	6818      	ldr	r0, [r3, #0]
 8008b76:	7aba      	ldrb	r2, [r7, #10]
 8008b78:	7af9      	ldrb	r1, [r7, #11]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f7ff fc6a 	bl	8008454 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE>
	HIRIDIUM iridium_handler;
	iridium_handler.CSQ = &MRT_Iridium_CSQ;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	4a0a      	ldr	r2, [pc, #40]	; (8008bac <MRT_Iridium_Init+0x50>)
 8008b84:	60da      	str	r2, [r3, #12]
	iridium_handler.getIMEI = &MRT_Iridium_getIMEI;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	4a09      	ldr	r2, [pc, #36]	; (8008bb0 <MRT_Iridium_Init+0x54>)
 8008b8a:	601a      	str	r2, [r3, #0]
	iridium_handler.getNetworkAvailability = &MRT_Iridium_NetworkAvailability;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	4a09      	ldr	r2, [pc, #36]	; (8008bb4 <MRT_Iridium_Init+0x58>)
 8008b90:	609a      	str	r2, [r3, #8]
	iridium_handler.getTime = &MRT_Iridium_getTime;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	4a08      	ldr	r2, [pc, #32]	; (8008bb8 <MRT_Iridium_Init+0x5c>)
 8008b96:	605a      	str	r2, [r3, #4]
	iridium_handler.sendMessage = &MRT_Iridium_sendMessage;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	4a08      	ldr	r2, [pc, #32]	; (8008bbc <MRT_Iridium_Init+0x60>)
 8008b9c:	611a      	str	r2, [r3, #16]
	return iridium_handler;
 8008b9e:	bf00      	nop
}
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	200003e8 	.word	0x200003e8
 8008bac:	08008be5 	.word	0x08008be5
 8008bb0:	08008bc1 	.word	0x08008bc1
 8008bb4:	08008bfd 	.word	0x08008bfd
 8008bb8:	08008c21 	.word	0x08008c21
 8008bbc:	08008c45 	.word	0x08008c45

08008bc0 <MRT_Iridium_getIMEI>:

void MRT_Iridium_ErrorMessage(uint8_t error){
	return E_T->MRT_Iridium_ErrorMessage(error);
}

bool MRT_Iridium_getIMEI(void){
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_getIMEI();
 8008bc4:	4b06      	ldr	r3, [pc, #24]	; (8008be0 <MRT_Iridium_getIMEI+0x20>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f7ff fdbb 	bl	8008744 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	bf14      	ite	ne
 8008bd4:	2301      	movne	r3, #1
 8008bd6:	2300      	moveq	r3, #0
 8008bd8:	b2db      	uxtb	r3, r3
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	200003e8 	.word	0x200003e8

08008be4 <MRT_Iridium_CSQ>:


int MRT_Iridium_CSQ(){
 8008be4:	b580      	push	{r7, lr}
 8008be6:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_CSQ();
 8008be8:	4b03      	ldr	r3, [pc, #12]	; (8008bf8 <MRT_Iridium_CSQ+0x14>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7ff fdf7 	bl	80087e0 <_ZN10IridiumSBD15MRT_Iridium_CSQEv>
 8008bf2:	4603      	mov	r3, r0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	200003e8 	.word	0x200003e8

08008bfc <MRT_Iridium_NetworkAvailability>:

bool MRT_Iridium_NetworkAvailability(){
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_NetworkAvailability();
 8008c00:	4b06      	ldr	r3, [pc, #24]	; (8008c1c <MRT_Iridium_NetworkAvailability+0x20>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7ff fe31 	bl	800886c <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	bf14      	ite	ne
 8008c10:	2301      	movne	r3, #1
 8008c12:	2300      	moveq	r3, #0
 8008c14:	b2db      	uxtb	r3, r3
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	200003e8 	.word	0x200003e8

08008c20 <MRT_Iridium_getTime>:


bool MRT_Iridium_getTime(void){
 8008c20:	b580      	push	{r7, lr}
 8008c22:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_getTime();
 8008c24:	4b06      	ldr	r3, [pc, #24]	; (8008c40 <MRT_Iridium_getTime+0x20>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f7ff fe45 	bl	80088b8 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	bf14      	ite	ne
 8008c34:	2301      	movne	r3, #1
 8008c36:	2300      	moveq	r3, #0
 8008c38:	b2db      	uxtb	r3, r3
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	200003e8 	.word	0x200003e8

08008c44 <MRT_Iridium_sendMessage>:

bool MRT_Iridium_sendMessage(char* msg){
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
	return E_T->MRT_Iridium_sendMessage(msg);
 8008c4c:	4b07      	ldr	r3, [pc, #28]	; (8008c6c <MRT_Iridium_sendMessage+0x28>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	6879      	ldr	r1, [r7, #4]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7ff fe80 	bl	8008958 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	bf14      	ite	ne
 8008c5e:	2301      	movne	r3, #1
 8008c60:	2300      	moveq	r3, #0
 8008c62:	b2db      	uxtb	r3, r3
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3708      	adds	r7, #8
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	200003e8 	.word	0x200003e8

08008c70 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8008c70:	b590      	push	{r4, r7, lr}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d101      	bne.n	8008c84 <_ZN5Print5writeEPKc+0x14>
 8008c80:	2300      	movs	r3, #0
 8008c82:	e00d      	b.n	8008ca0 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	3304      	adds	r3, #4
 8008c8a:	681c      	ldr	r4, [r3, #0]
 8008c8c:	6838      	ldr	r0, [r7, #0]
 8008c8e:	f7f7 fab9 	bl	8000204 <strlen>
 8008c92:	4603      	mov	r3, r0
 8008c94:	461a      	mov	r2, r3
 8008c96:	6839      	ldr	r1, [r7, #0]
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	47a0      	blx	r4
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	bf00      	nop
    }
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd90      	pop	{r4, r7, pc}

08008ca8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b086      	sub	sp, #24
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	617b      	str	r3, [r7, #20]
  while (size--) {
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	1e5a      	subs	r2, r3, #1
 8008cbc:	607a      	str	r2, [r7, #4]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	bf14      	ite	ne
 8008cc2:	2301      	movne	r3, #1
 8008cc4:	2300      	moveq	r3, #0
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d00e      	beq.n	8008cea <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	1c59      	adds	r1, r3, #1
 8008cd6:	60b9      	str	r1, [r7, #8]
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	4619      	mov	r1, r3
 8008cdc:	68f8      	ldr	r0, [r7, #12]
 8008cde:	4790      	blx	r2
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	617b      	str	r3, [r7, #20]
  while (size--) {
 8008ce8:	e7e6      	b.n	8008cb8 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8008cea:	697b      	ldr	r3, [r7, #20]
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3718      	adds	r7, #24
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 8008cfe:	6839      	ldr	r1, [r7, #0]
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 f805 	bl	8008d10 <_ZN5Print5printEPKc>
 8008d06:	4603      	mov	r3, r0
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3708      	adds	r7, #8
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  return write(str);
 8008d1a:	6839      	ldr	r1, [r7, #0]
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f7ff ffa7 	bl	8008c70 <_ZN5Print5writeEPKc>
 8008d22:	4603      	mov	r3, r0
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3708      	adds	r7, #8
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	460b      	mov	r3, r1
 8008d36:	70fb      	strb	r3, [r7, #3]
  return write(c);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	78fa      	ldrb	r2, [r7, #3]
 8008d40:	4611      	mov	r1, r2
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	4798      	blx	r3
 8008d46:	4603      	mov	r3, r0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3708      	adds	r7, #8
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	68b9      	ldr	r1, [r7, #8]
 8008d60:	68f8      	ldr	r0, [r7, #12]
 8008d62:	f000 f805 	bl	8008d70 <_ZN5Print5printEli>
 8008d66:	4603      	mov	r3, r0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3710      	adds	r7, #16
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b086      	sub	sp, #24
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d109      	bne.n	8008d96 <_ZN5Print5printEli+0x26>
    return write(n);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68ba      	ldr	r2, [r7, #8]
 8008d8a:	b2d2      	uxtb	r2, r2
 8008d8c:	4611      	mov	r1, r2
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	4798      	blx	r3
 8008d92:	4603      	mov	r3, r0
 8008d94:	e029      	b.n	8008dea <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2b0a      	cmp	r3, #10
 8008d9a:	d11d      	bne.n	8008dd8 <_ZN5Print5printEli+0x68>
    if (n < 0) {
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	da12      	bge.n	8008dc8 <_ZN5Print5printEli+0x58>
      int t = print('-');
 8008da2:	212d      	movs	r1, #45	; 0x2d
 8008da4:	68f8      	ldr	r0, [r7, #12]
 8008da6:	f7ff ffc1 	bl	8008d2c <_ZN5Print5printEc>
 8008daa:	4603      	mov	r3, r0
 8008dac:	617b      	str	r3, [r7, #20]
      n = -n;
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	425b      	negs	r3, r3
 8008db2:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	220a      	movs	r2, #10
 8008db8:	4619      	mov	r1, r3
 8008dba:	68f8      	ldr	r0, [r7, #12]
 8008dbc:	f000 f819 	bl	8008df2 <_ZN5Print11printNumberEmh>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	e010      	b.n	8008dea <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	220a      	movs	r2, #10
 8008dcc:	4619      	mov	r1, r3
 8008dce:	68f8      	ldr	r0, [r7, #12]
 8008dd0:	f000 f80f 	bl	8008df2 <_ZN5Print11printNumberEmh>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	e008      	b.n	8008dea <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	b2d2      	uxtb	r2, r2
 8008dde:	4619      	mov	r1, r3
 8008de0:	68f8      	ldr	r0, [r7, #12]
 8008de2:	f000 f806 	bl	8008df2 <_ZN5Print11printNumberEmh>
 8008de6:	4603      	mov	r3, r0
 8008de8:	bf00      	nop
  }
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3718      	adds	r7, #24
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b090      	sub	sp, #64	; 0x40
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	60f8      	str	r0, [r7, #12]
 8008dfa:	60b9      	str	r1, [r7, #8]
 8008dfc:	4613      	mov	r3, r2
 8008dfe:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 8008e00:	f107 0314 	add.w	r3, r7, #20
 8008e04:	3320      	adds	r3, #32
 8008e06:	63fb      	str	r3, [r7, #60]	; 0x3c

  *str = '\0';
 8008e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8008e0e:	79fb      	ldrb	r3, [r7, #7]
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d801      	bhi.n	8008e18 <_ZN5Print11printNumberEmh+0x26>
 8008e14:	230a      	movs	r3, #10
 8008e16:	71fb      	strb	r3, [r7, #7]

  do {
    unsigned long m = n;
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	63bb      	str	r3, [r7, #56]	; 0x38
    n /= base;
 8008e1c:	79fb      	ldrb	r3, [r7, #7]
 8008e1e:	68ba      	ldr	r2, [r7, #8]
 8008e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e24:	60bb      	str	r3, [r7, #8]
    char c = m - base * n;
 8008e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e28:	b2da      	uxtb	r2, r3
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	79f9      	ldrb	r1, [r7, #7]
 8008e30:	fb11 f303 	smulbb	r3, r1, r3
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	1ad3      	subs	r3, r2, r3
 8008e38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8008e3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e40:	2b09      	cmp	r3, #9
 8008e42:	d804      	bhi.n	8008e4e <_ZN5Print11printNumberEmh+0x5c>
 8008e44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e48:	3330      	adds	r3, #48	; 0x30
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	e003      	b.n	8008e56 <_ZN5Print11printNumberEmh+0x64>
 8008e4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e52:	3337      	adds	r3, #55	; 0x37
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e58:	3a01      	subs	r2, #1
 8008e5a:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008e5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e5e:	7013      	strb	r3, [r2, #0]
  } while(n);
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d000      	beq.n	8008e68 <_ZN5Print11printNumberEmh+0x76>
  do {
 8008e66:	e7d7      	b.n	8008e18 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
 8008e68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e6a:	68f8      	ldr	r0, [r7, #12]
 8008e6c:	f7ff ff00 	bl	8008c70 <_ZN5Print5writeEPKc>
 8008e70:	4603      	mov	r3, r0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3740      	adds	r7, #64	; 0x40
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
	...

08008e7c <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	4a06      	ldr	r2, [pc, #24]	; (8008ea0 <_ZN5PrintC1Ev+0x24>)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	601a      	str	r2, [r3, #0]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	605a      	str	r2, [r3, #4]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4618      	mov	r0, r3
 8008e94:	370c      	adds	r7, #12
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop
 8008ea0:	0801a388 	.word	0x0801a388

08008ea4 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7ff ffe4 	bl	8008e7c <_ZN5PrintC1Ev>
 8008eb4:	4a05      	ldr	r2, [pc, #20]	; (8008ecc <_ZN6StreamC1Ev+0x28>)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	601a      	str	r2, [r3, #0]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008ec0:	609a      	str	r2, [r3, #8]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3708      	adds	r7, #8
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	0801a3b8 	.word	0x0801a3b8

08008ed0 <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	6039      	str	r1, [r7, #0]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7ff ffe1 	bl	8008ea4 <_ZN6StreamC1Ev>
 8008ee2:	4a16      	ldr	r2, [pc, #88]	; (8008f3c <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	683a      	ldr	r2, [r7, #0]
 8008eec:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	3390      	adds	r3, #144	; 0x90
 8008ef2:	2220      	movs	r2, #32
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f009 fc54 	bl	80127a4 <memset>
  rxBufferIndex = 0;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4618      	mov	r0, r3
 8008f36:	3708      	adds	r7, #8
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	0801a398 	.word	0x0801a398

08008f40 <_ZN7TwoWire11requestFromEhhh>:
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  HAL_I2C_Init(&I2cHandle);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b086      	sub	sp, #24
 8008f44:	af02      	add	r7, sp, #8
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	4608      	mov	r0, r1
 8008f4a:	4611      	mov	r1, r2
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	4603      	mov	r3, r0
 8008f50:	70fb      	strb	r3, [r7, #3]
 8008f52:	460b      	mov	r3, r1
 8008f54:	70bb      	strb	r3, [r7, #2]
 8008f56:	4613      	mov	r3, r2
 8008f58:	707b      	strb	r3, [r7, #1]
  uint8_t ret_val;

  disableInterrupt();
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 fc24 	bl	80097a8 <_ZN7TwoWire16disableInterruptEv>

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
 8008f60:	78bb      	ldrb	r3, [r7, #2]
 8008f62:	2b20      	cmp	r3, #32
 8008f64:	d901      	bls.n	8008f6a <_ZN7TwoWire11requestFromEhhh+0x2a>
    quantity = BUFFER_LENGTH;
 8008f66:	2320      	movs	r3, #32
 8008f68:	70bb      	strb	r3, [r7, #2]
  }
  // perform blocking read into buffer
  int read = i2c_master_read((address << 1), (char *)rxBuffer, quantity, sendStop);
 8008f6a:	78fb      	ldrb	r3, [r7, #3]
 8008f6c:	005b      	lsls	r3, r3, #1
 8008f6e:	b2d9      	uxtb	r1, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8008f76:	78b8      	ldrb	r0, [r7, #2]
 8008f78:	787b      	ldrb	r3, [r7, #1]
 8008f7a:	9300      	str	r3, [sp, #0]
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 f9cf 	bl	8009322 <_ZN7TwoWire15i2c_master_readEhPchh>
 8008f84:	60b8      	str	r0, [r7, #8]

  if(read < 0)
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	da02      	bge.n	8008f92 <_ZN7TwoWire11requestFromEhhh+0x52>
  {
    ret_val = 0;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	73fb      	strb	r3, [r7, #15]
 8008f90:	e001      	b.n	8008f96 <_ZN7TwoWire11requestFromEhhh+0x56>
  }else
  {
    ret_val = read;
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	73fb      	strb	r3, [r7, #15]
  }

  // set rx buffer iterator vars
  rxBufferIndex = 0;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = ret_val;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	7bfa      	ldrb	r2, [r7, #15]
 8008fa2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

  enableInterrupt();
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 fbcc 	bl	8009744 <_ZN7TwoWire15enableInterruptEv>

  return ret_val;
 8008fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b082      	sub	sp, #8
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	70fb      	strb	r3, [r7, #3]
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	70bb      	strb	r3, [r7, #2]
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 8008fc6:	78ba      	ldrb	r2, [r7, #2]
 8008fc8:	78f9      	ldrb	r1, [r7, #3]
 8008fca:	2301      	movs	r3, #1
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f7ff ffb7 	bl	8008f40 <_ZN7TwoWire11requestFromEhhh>
 8008fd2:	4603      	mov	r3, r0
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3708      	adds	r7, #8
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <_ZN7TwoWire17beginTransmissionEh>:
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	70fb      	strb	r3, [r7, #3]
  // indicate that we are transmitting
  transmitting = 1;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2201      	movs	r2, #1
 8008fec:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  // set address of targeted slave
  txAddress = address;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	78fa      	ldrb	r2, [r7, #3]
 8008ff4:	741a      	strb	r2, [r3, #16]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8009006:	bf00      	nop
 8009008:	370c      	adds	r7, #12
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr

08009012 <_ZN7TwoWire15endTransmissionEh>:
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
 8009012:	b580      	push	{r7, lr}
 8009014:	b086      	sub	sp, #24
 8009016:	af02      	add	r7, sp, #8
 8009018:	6078      	str	r0, [r7, #4]
 800901a:	460b      	mov	r3, r1
 800901c:	70fb      	strb	r3, [r7, #3]
  // transmit buffer (blocking)
  disableInterrupt();
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fbc2 	bl	80097a8 <_ZN7TwoWire16disableInterruptEv>

  int8_t ret = i2c_master_write((txAddress << 1), (const char *)txBuffer, txBufferLength, sendStop);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	7c1b      	ldrb	r3, [r3, #16]
 8009028:	0059      	lsls	r1, r3, #1
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f103 0211 	add.w	r2, r3, #17
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009036:	4618      	mov	r0, r3
 8009038:	78fb      	ldrb	r3, [r7, #3]
 800903a:	9300      	str	r3, [sp, #0]
 800903c:	4603      	mov	r3, r0
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 fa00 	bl	8009444 <_ZN7TwoWire16i2c_master_writeEiPKcii>
 8009044:	4603      	mov	r3, r0
 8009046:	73fb      	strb	r3, [r7, #15]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  // indicate that we are done transmitting
  transmitting = 0;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  enableInterrupt();
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 fb6f 	bl	8009744 <_ZN7TwoWire15enableInterruptEv>

  return ret;
 8009066:	7bfb      	ldrb	r3, [r7, #15]
}
 8009068:	4618      	mov	r0, r3
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <_ZN7TwoWire15endTransmissionEv>:

//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  return endTransmission(true);
 8009078:	2101      	movs	r1, #1
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f7ff ffc9 	bl	8009012 <_ZN7TwoWire15endTransmissionEh>
 8009080:	4603      	mov	r3, r0
}
 8009082:	4618      	mov	r0, r3
 8009084:	3708      	adds	r7, #8
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b082      	sub	sp, #8
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	460b      	mov	r3, r1
 8009094:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800909c:	2b00      	cmp	r3, #0
 800909e:	d01d      	beq.n	80090dc <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80090a6:	2b1f      	cmp	r3, #31
 80090a8:	d901      	bls.n	80090ae <_ZN7TwoWire5writeEh+0x24>
      return 0;
 80090aa:	2300      	movs	r3, #0
 80090ac:	e028      	b.n	8009100 <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80090b4:	4619      	mov	r1, r3
 80090b6:	78fa      	ldrb	r2, [r7, #3]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	440b      	add	r3, r1
 80090bc:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80090c4:	3301      	adds	r3, #1
 80090c6:	b2da      	uxtb	r2, r3
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80090da:	e010      	b.n	80090fe <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 fb63 	bl	80097a8 <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 80090e2:	1cfb      	adds	r3, r7, #3
 80090e4:	2201      	movs	r2, #1
 80090e6:	4619      	mov	r1, r3
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 fa95 	bl	8009618 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fb28 	bl	8009744 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	333c      	adds	r3, #60	; 0x3c
 80090f8:	4618      	mov	r0, r3
 80090fa:	f001 fe3f 	bl	800ad7c <HAL_I2C_EnableListen_IT>
  }
  return 1;
 80090fe:	2301      	movs	r3, #1
}
 8009100:	4618      	mov	r0, r3
 8009102:	3708      	adds	r7, #8
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b086      	sub	sp, #24
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	607a      	str	r2, [r7, #4]
  if(transmitting){
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800911a:	2b00      	cmp	r3, #0
 800911c:	d013      	beq.n	8009146 <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 800911e:	2300      	movs	r3, #0
 8009120:	617b      	str	r3, [r7, #20]
 8009122:	697a      	ldr	r2, [r7, #20]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	429a      	cmp	r2, r3
 8009128:	d21e      	bcs.n	8009168 <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	68b9      	ldr	r1, [r7, #8]
 8009132:	697a      	ldr	r2, [r7, #20]
 8009134:	440a      	add	r2, r1
 8009136:	7812      	ldrb	r2, [r2, #0]
 8009138:	4611      	mov	r1, r2
 800913a:	68f8      	ldr	r0, [r7, #12]
 800913c:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	3301      	adds	r3, #1
 8009142:	617b      	str	r3, [r7, #20]
 8009144:	e7ed      	b.n	8009122 <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 8009146:	68f8      	ldr	r0, [r7, #12]
 8009148:	f000 fb2e 	bl	80097a8 <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	461a      	mov	r2, r3
 8009150:	68b9      	ldr	r1, [r7, #8]
 8009152:	68f8      	ldr	r0, [r7, #12]
 8009154:	f000 fa60 	bl	8009618 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8009158:	68f8      	ldr	r0, [r7, #12]
 800915a:	f000 faf3 	bl	8009744 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	333c      	adds	r3, #60	; 0x3c
 8009162:	4618      	mov	r0, r3
 8009164:	f001 fe0a 	bl	800ad7c <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 8009168:	687b      	ldr	r3, [r7, #4]
}
 800916a:	4618      	mov	r0, r3
 800916c:	3718      	adds	r7, #24
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 8009172:	b480      	push	{r7}
 8009174:	b083      	sub	sp, #12
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009180:	b2db      	uxtb	r3, r3
 8009182:	461a      	mov	r2, r3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800918a:	b2db      	uxtb	r3, r3
 800918c:	1ad3      	subs	r3, r2, r3
}
 800918e:	4618      	mov	r0, r3
 8009190:	370c      	adds	r7, #12
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr

0800919a <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 800919a:	b480      	push	{r7}
 800919c:	b085      	sub	sp, #20
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
  int value = -1;
 80091a2:	f04f 33ff 	mov.w	r3, #4294967295
 80091a6:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80091ae:	b2da      	uxtb	r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	429a      	cmp	r2, r3
 80091ba:	bf34      	ite	cc
 80091bc:	2301      	movcc	r3, #1
 80091be:	2300      	movcs	r3, #0
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d012      	beq.n	80091ec <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	461a      	mov	r2, r3
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	4413      	add	r3, r2
 80091d4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80091d8:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	3301      	adds	r3, #1
 80091e4:	b2da      	uxtb	r2, r3
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 80091ec:	68fb      	ldr	r3, [r7, #12]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3714      	adds	r7, #20
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr

080091fa <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 80091fa:	b480      	push	{r7}
 80091fc:	b085      	sub	sp, #20
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
  int value = -1;
 8009202:	f04f 33ff 	mov.w	r3, #4294967295
 8009206:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800920e:	b2da      	uxtb	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009216:	b2db      	uxtb	r3, r3
 8009218:	429a      	cmp	r2, r3
 800921a:	bf34      	ite	cc
 800921c:	2301      	movcc	r3, #1
 800921e:	2300      	movcs	r3, #0
 8009220:	b2db      	uxtb	r3, r3
 8009222:	2b00      	cmp	r3, #0
 8009224:	d009      	beq.n	800923a <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800922c:	b2db      	uxtb	r3, r3
 800922e:	461a      	mov	r2, r3
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4413      	add	r3, r2
 8009234:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8009238:	60fb      	str	r3, [r7, #12]
  }

  return value;
 800923a:	68fb      	ldr	r3, [r7, #12]
}
 800923c:	4618      	mov	r0, r3
 800923e:	3714      	adds	r7, #20
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 8009250:	bf00      	nop
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <_ZN7TwoWire16i2c_master_startEv>:
{
  user_onRequest = function;
}

int TwoWire::i2c_master_start()
{
 800925c:	b480      	push	{r7}
 800925e:	b085      	sub	sp, #20
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009268:	60bb      	str	r3, [r7, #8]

    int timeout;

    // Clear Acknowledge failure flag
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800926e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009272:	615a      	str	r2, [r3, #20]

    // Wait the STOP condition has been previously correctly sent
  // This timeout can be avoid in some specific cases by simply clearing the STOP bit
    timeout = FLAG_TIMEOUT;
 8009274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009278:	60fb      	str	r3, [r7, #12]
    while ((i2c->CR1 & I2C_CR1_STOP) == I2C_CR1_STOP) {
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009286:	bf0c      	ite	eq
 8009288:	2301      	moveq	r3, #1
 800928a:	2300      	movne	r3, #0
 800928c:	b2db      	uxtb	r3, r3
 800928e:	2b00      	cmp	r3, #0
 8009290:	d00b      	beq.n	80092aa <_ZN7TwoWire16i2c_master_startEv+0x4e>
        if ((timeout--) == 0) {
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	1e5a      	subs	r2, r3, #1
 8009296:	60fa      	str	r2, [r7, #12]
 8009298:	2b00      	cmp	r3, #0
 800929a:	bf0c      	ite	eq
 800929c:	2301      	moveq	r3, #1
 800929e:	2300      	movne	r3, #0
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d0e9      	beq.n	800927a <_ZN7TwoWire16i2c_master_startEv+0x1e>
            return 1;
 80092a6:	2301      	movs	r3, #1
 80092a8:	e021      	b.n	80092ee <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    // Generate the START condition
    i2c->CR1 |= I2C_CR1_START;
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	601a      	str	r2, [r3, #0]

    // Wait the START condition has been correctly sent
    timeout = FLAG_TIMEOUT;
 80092b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092ba:	60fb      	str	r3, [r7, #12]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092c0:	695b      	ldr	r3, [r3, #20]
 80092c2:	f003 0301 	and.w	r3, r3, #1
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	bf14      	ite	ne
 80092ca:	2301      	movne	r3, #1
 80092cc:	2300      	moveq	r3, #0
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d00b      	beq.n	80092ec <_ZN7TwoWire16i2c_master_startEv+0x90>
        if ((timeout--) == 0) {
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	1e5a      	subs	r2, r3, #1
 80092d8:	60fa      	str	r2, [r7, #12]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	bf0c      	ite	eq
 80092de:	2301      	moveq	r3, #1
 80092e0:	2300      	movne	r3, #0
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d0e9      	beq.n	80092bc <_ZN7TwoWire16i2c_master_startEv+0x60>
            return 1;
 80092e8:	2301      	movs	r3, #1
 80092ea:	e000      	b.n	80092ee <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    return 0;
 80092ec:	2300      	movs	r3, #0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3714      	adds	r7, #20
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr

080092fa <_ZN7TwoWire15i2c_master_stopEv>:

int TwoWire::i2c_master_stop()
{
 80092fa:	b480      	push	{r7}
 80092fc:	b085      	sub	sp, #20
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009306:	60fb      	str	r3, [r7, #12]

    // Generate the STOP condition
    i2c->CR1 |= I2C_CR1_STOP;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	601a      	str	r2, [r3, #0]

    return 0;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	3714      	adds	r7, #20
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr

08009322 <_ZN7TwoWire15i2c_master_readEhPchh>:

int TwoWire::i2c_master_read(uint8_t address, char *data, uint8_t length, uint8_t stop)
{
 8009322:	b580      	push	{r7, lr}
 8009324:	b08a      	sub	sp, #40	; 0x28
 8009326:	af00      	add	r7, sp, #0
 8009328:	60f8      	str	r0, [r7, #12]
 800932a:	607a      	str	r2, [r7, #4]
 800932c:	461a      	mov	r2, r3
 800932e:	460b      	mov	r3, r1
 8009330:	72fb      	strb	r3, [r7, #11]
 8009332:	4613      	mov	r3, r2
 8009334:	72bb      	strb	r3, [r7, #10]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800933a:	61fb      	str	r3, [r7, #28]
    int timeout;
    int count;
    int value;
    int ret;

    i2c_master_start();
 800933c:	68f8      	ldr	r0, [r7, #12]
 800933e:	f7ff ff8d 	bl	800925c <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 8009342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009346:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800934c:	695b      	ldr	r3, [r3, #20]
 800934e:	f003 0301 	and.w	r3, r3, #1
 8009352:	2b01      	cmp	r3, #1
 8009354:	bf14      	ite	ne
 8009356:	2301      	movne	r3, #1
 8009358:	2300      	moveq	r3, #0
 800935a:	b2db      	uxtb	r3, r3
 800935c:	2b00      	cmp	r3, #0
 800935e:	d008      	beq.n	8009372 <_ZN7TwoWire15i2c_master_readEhPchh+0x50>
        timeout--;
 8009360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009362:	3b01      	subs	r3, #1
 8009364:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 8009366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009368:	2b00      	cmp	r3, #0
 800936a:	d1ed      	bne.n	8009348 <_ZN7TwoWire15i2c_master_readEhPchh+0x26>
            return -1;
 800936c:	f04f 33ff 	mov.w	r3, #4294967295
 8009370:	e064      	b.n	800943c <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_READ(address);
 8009372:	7afb      	ldrb	r3, [r7, #11]
 8009374:	f043 0301 	orr.w	r3, r3, #1
 8009378:	b2db      	uxtb	r3, r3
 800937a:	461a      	mov	r2, r3
 800937c:	69fb      	ldr	r3, [r7, #28]
 800937e:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 8009380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009384:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800938a:	695b      	ldr	r3, [r3, #20]
 800938c:	f003 0302 	and.w	r3, r3, #2
 8009390:	2b02      	cmp	r3, #2
 8009392:	bf14      	ite	ne
 8009394:	2301      	movne	r3, #1
 8009396:	2300      	moveq	r3, #0
 8009398:	b2db      	uxtb	r3, r3
 800939a:	2b00      	cmp	r3, #0
 800939c:	d008      	beq.n	80093b0 <_ZN7TwoWire15i2c_master_readEhPchh+0x8e>
        timeout--;
 800939e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a0:	3b01      	subs	r3, #1
 80093a2:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 80093a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d1ed      	bne.n	8009386 <_ZN7TwoWire15i2c_master_readEhPchh+0x64>
            return -1;
 80093aa:	f04f 33ff 	mov.w	r3, #4294967295
 80093ae:	e045      	b.n	800943c <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 80093b0:	2300      	movs	r3, #0
 80093b2:	613b      	str	r3, [r7, #16]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093b8:	695b      	ldr	r3, [r3, #20]
 80093ba:	613b      	str	r3, [r7, #16]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093c0:	699b      	ldr	r3, [r3, #24]
 80093c2:	613b      	str	r3, [r7, #16]
 80093c4:	693b      	ldr	r3, [r7, #16]

    // Read all bytes except last one
    for (count = 0; count < (length - 1); count++) {
 80093c6:	2300      	movs	r3, #0
 80093c8:	623b      	str	r3, [r7, #32]
 80093ca:	7abb      	ldrb	r3, [r7, #10]
 80093cc:	3b01      	subs	r3, #1
 80093ce:	6a3a      	ldr	r2, [r7, #32]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	da17      	bge.n	8009404 <_ZN7TwoWire15i2c_master_readEhPchh+0xe2>
        ret = i2c_master_byte_read(&value, 0);
 80093d4:	f107 0314 	add.w	r3, r7, #20
 80093d8:	2200      	movs	r2, #0
 80093da:	4619      	mov	r1, r3
 80093dc:	68f8      	ldr	r0, [r7, #12]
 80093de:	f000 f8a4 	bl	800952a <_ZN7TwoWire20i2c_master_byte_readEPii>
 80093e2:	61b8      	str	r0, [r7, #24]
        if(ret)
 80093e4:	69bb      	ldr	r3, [r7, #24]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d002      	beq.n	80093f0 <_ZN7TwoWire15i2c_master_readEhPchh+0xce>
        {
          return -1;
 80093ea:	f04f 33ff 	mov.w	r3, #4294967295
 80093ee:	e025      	b.n	800943c <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
        data[count] = (char)value;
 80093f0:	6979      	ldr	r1, [r7, #20]
 80093f2:	6a3b      	ldr	r3, [r7, #32]
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	4413      	add	r3, r2
 80093f8:	b2ca      	uxtb	r2, r1
 80093fa:	701a      	strb	r2, [r3, #0]
    for (count = 0; count < (length - 1); count++) {
 80093fc:	6a3b      	ldr	r3, [r7, #32]
 80093fe:	3301      	adds	r3, #1
 8009400:	623b      	str	r3, [r7, #32]
 8009402:	e7e2      	b.n	80093ca <_ZN7TwoWire15i2c_master_readEhPchh+0xa8>
    }

    // If not repeated start, send stop.
    // Warning: must be done BEFORE the data is read.
    if (stop) {
 8009404:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009408:	2b00      	cmp	r3, #0
 800940a:	d002      	beq.n	8009412 <_ZN7TwoWire15i2c_master_readEhPchh+0xf0>
        i2c_master_stop();
 800940c:	68f8      	ldr	r0, [r7, #12]
 800940e:	f7ff ff74 	bl	80092fa <_ZN7TwoWire15i2c_master_stopEv>
    }

    // Read the last byte
    ret = i2c_master_byte_read(&value, 1);
 8009412:	f107 0314 	add.w	r3, r7, #20
 8009416:	2201      	movs	r2, #1
 8009418:	4619      	mov	r1, r3
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f000 f885 	bl	800952a <_ZN7TwoWire20i2c_master_byte_readEPii>
 8009420:	61b8      	str	r0, [r7, #24]
    if(ret)
 8009422:	69bb      	ldr	r3, [r7, #24]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d002      	beq.n	800942e <_ZN7TwoWire15i2c_master_readEhPchh+0x10c>
    {
      return -1;
 8009428:	f04f 33ff 	mov.w	r3, #4294967295
 800942c:	e006      	b.n	800943c <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
    }
    data[count] = (char)value;
 800942e:	6979      	ldr	r1, [r7, #20]
 8009430:	6a3b      	ldr	r3, [r7, #32]
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	4413      	add	r3, r2
 8009436:	b2ca      	uxtb	r2, r1
 8009438:	701a      	strb	r2, [r3, #0]

    return length;
 800943a:	7abb      	ldrb	r3, [r7, #10]
}
 800943c:	4618      	mov	r0, r3
 800943e:	3728      	adds	r7, #40	; 0x28
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <_ZN7TwoWire16i2c_master_writeEiPKcii>:

int TwoWire::i2c_master_write(int address, const char *data, int length, int stop)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b088      	sub	sp, #32
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	607a      	str	r2, [r7, #4]
 8009450:	603b      	str	r3, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009456:	617b      	str	r3, [r7, #20]
    int timeout;
    int count;

    i2c_master_start();
 8009458:	68f8      	ldr	r0, [r7, #12]
 800945a:	f7ff feff 	bl	800925c <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 800945e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009462:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009468:	695b      	ldr	r3, [r3, #20]
 800946a:	f003 0301 	and.w	r3, r3, #1
 800946e:	2b01      	cmp	r3, #1
 8009470:	bf14      	ite	ne
 8009472:	2301      	movne	r3, #1
 8009474:	2300      	moveq	r3, #0
 8009476:	b2db      	uxtb	r3, r3
 8009478:	2b00      	cmp	r3, #0
 800947a:	d007      	beq.n	800948c <_ZN7TwoWire16i2c_master_writeEiPKcii+0x48>
        timeout--;
 800947c:	69fb      	ldr	r3, [r7, #28]
 800947e:	3b01      	subs	r3, #1
 8009480:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d1ed      	bne.n	8009464 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x20>
            return 4;
 8009488:	2304      	movs	r3, #4
 800948a:	e04a      	b.n	8009522 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_WRITE(address);
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	b2db      	uxtb	r3, r3
 8009490:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 8009498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800949c:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094a2:	695b      	ldr	r3, [r3, #20]
 80094a4:	f003 0302 	and.w	r3, r3, #2
 80094a8:	2b02      	cmp	r3, #2
 80094aa:	bf14      	ite	ne
 80094ac:	2301      	movne	r3, #1
 80094ae:	2300      	moveq	r3, #0
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d007      	beq.n	80094c6 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x82>
        timeout--;
 80094b6:	69fb      	ldr	r3, [r7, #28]
 80094b8:	3b01      	subs	r3, #1
 80094ba:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d1ed      	bne.n	800949e <_ZN7TwoWire16i2c_master_writeEiPKcii+0x5a>
            return 2;
 80094c2:	2302      	movs	r3, #2
 80094c4:	e02d      	b.n	8009522 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 80094c6:	2300      	movs	r3, #0
 80094c8:	613b      	str	r3, [r7, #16]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ce:	695b      	ldr	r3, [r3, #20]
 80094d0:	613b      	str	r3, [r7, #16]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d6:	699b      	ldr	r3, [r3, #24]
 80094d8:	613b      	str	r3, [r7, #16]
 80094da:	693b      	ldr	r3, [r7, #16]

    for (count = 0; count < length; count++) {
 80094dc:	2300      	movs	r3, #0
 80094de:	61bb      	str	r3, [r7, #24]
 80094e0:	69ba      	ldr	r2, [r7, #24]
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	da15      	bge.n	8009514 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xd0>
        if (i2c_master_byte_write(data[count]) != 1) {
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	4413      	add	r3, r2
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	4619      	mov	r1, r3
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	f000 f85a 	bl	80095ac <_ZN7TwoWire21i2c_master_byte_writeEi>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	bf14      	ite	ne
 80094fe:	2301      	movne	r3, #1
 8009500:	2300      	moveq	r3, #0
 8009502:	b2db      	uxtb	r3, r3
 8009504:	2b00      	cmp	r3, #0
 8009506:	d001      	beq.n	800950c <_ZN7TwoWire16i2c_master_writeEiPKcii+0xc8>
            return 3;
 8009508:	2303      	movs	r3, #3
 800950a:	e00a      	b.n	8009522 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
    for (count = 0; count < length; count++) {
 800950c:	69bb      	ldr	r3, [r7, #24]
 800950e:	3301      	adds	r3, #1
 8009510:	61bb      	str	r3, [r7, #24]
 8009512:	e7e5      	b.n	80094e0 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x9c>
        }
    }

    // If not repeated start, send stop.
    if (stop) {
 8009514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009516:	2b00      	cmp	r3, #0
 8009518:	d002      	beq.n	8009520 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xdc>
        i2c_master_stop();
 800951a:	68f8      	ldr	r0, [r7, #12]
 800951c:	f7ff feed 	bl	80092fa <_ZN7TwoWire15i2c_master_stopEv>
    }

    return 0;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	3720      	adds	r7, #32
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <_ZN7TwoWire20i2c_master_byte_readEPii>:

int TwoWire::i2c_master_byte_read(int *value, int last)
{
 800952a:	b480      	push	{r7}
 800952c:	b087      	sub	sp, #28
 800952e:	af00      	add	r7, sp, #0
 8009530:	60f8      	str	r0, [r7, #12]
 8009532:	60b9      	str	r1, [r7, #8]
 8009534:	607a      	str	r2, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800953a:	613b      	str	r3, [r7, #16]
    int timeout;

    if (last) {
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d006      	beq.n	8009550 <_ZN7TwoWire20i2c_master_byte_readEPii+0x26>
        // Don't acknowledge the last byte
        i2c->CR1 &= ~I2C_CR1_ACK;
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	601a      	str	r2, [r3, #0]
 800954e:	e005      	b.n	800955c <_ZN7TwoWire20i2c_master_byte_readEPii+0x32>
    } else {
        // Acknowledge the byte
        i2c->CR1 |= I2C_CR1_ACK;
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	601a      	str	r2, [r3, #0]
    }

    // Wait until the byte is received
    timeout = FLAG_TIMEOUT;
 800955c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009560:	617b      	str	r3, [r7, #20]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_RXNE) == RESET) {
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009566:	695b      	ldr	r3, [r3, #20]
 8009568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800956c:	2b40      	cmp	r3, #64	; 0x40
 800956e:	bf14      	ite	ne
 8009570:	2301      	movne	r3, #1
 8009572:	2300      	moveq	r3, #0
 8009574:	b2db      	uxtb	r3, r3
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00c      	beq.n	8009594 <_ZN7TwoWire20i2c_master_byte_readEPii+0x6a>
        if ((timeout--) == 0) {
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	1e5a      	subs	r2, r3, #1
 800957e:	617a      	str	r2, [r7, #20]
 8009580:	2b00      	cmp	r3, #0
 8009582:	bf0c      	ite	eq
 8009584:	2301      	moveq	r3, #1
 8009586:	2300      	movne	r3, #0
 8009588:	b2db      	uxtb	r3, r3
 800958a:	2b00      	cmp	r3, #0
 800958c:	d0e9      	beq.n	8009562 <_ZN7TwoWire20i2c_master_byte_readEPii+0x38>
            return -1;
 800958e:	f04f 33ff 	mov.w	r3, #4294967295
 8009592:	e005      	b.n	80095a0 <_ZN7TwoWire20i2c_master_byte_readEPii+0x76>
        }
    }

    *value = (int)i2c->DR;
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	691b      	ldr	r3, [r3, #16]
 8009598:	461a      	mov	r2, r3
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	601a      	str	r2, [r3, #0]

    return 0;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	371c      	adds	r7, #28
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <_ZN7TwoWire21i2c_master_byte_writeEi>:

int TwoWire::i2c_master_byte_write(int data)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ba:	60bb      	str	r3, [r7, #8]
    int timeout;

    i2c->DR = (uint8_t)data;
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	461a      	mov	r2, r3
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	611a      	str	r2, [r3, #16]

    // Wait until the byte is transmitted
    timeout = FLAG_TIMEOUT;
 80095c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095ca:	60fb      	str	r3, [r7, #12]
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095d0:	695b      	ldr	r3, [r3, #20]
 80095d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095d6:	2b80      	cmp	r3, #128	; 0x80
 80095d8:	d008      	beq.n	80095ec <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
            (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == RESET)) {
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095de:	695b      	ldr	r3, [r3, #20]
 80095e0:	f003 0304 	and.w	r3, r3, #4
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 80095e4:	2b04      	cmp	r3, #4
 80095e6:	d001      	beq.n	80095ec <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
 80095e8:	2301      	movs	r3, #1
 80095ea:	e000      	b.n	80095ee <_ZN7TwoWire21i2c_master_byte_writeEi+0x42>
 80095ec:	2300      	movs	r3, #0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d00b      	beq.n	800960a <_ZN7TwoWire21i2c_master_byte_writeEi+0x5e>
        if ((timeout--) == 0) {
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	1e5a      	subs	r2, r3, #1
 80095f6:	60fa      	str	r2, [r7, #12]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	bf0c      	ite	eq
 80095fc:	2301      	moveq	r3, #1
 80095fe:	2300      	movne	r3, #0
 8009600:	b2db      	uxtb	r3, r3
 8009602:	2b00      	cmp	r3, #0
 8009604:	d0e2      	beq.n	80095cc <_ZN7TwoWire21i2c_master_byte_writeEi+0x20>
            return 0;
 8009606:	2300      	movs	r3, #0
 8009608:	e000      	b.n	800960c <_ZN7TwoWire21i2c_master_byte_writeEi+0x60>
        }
    }

    return 1;
 800960a:	2301      	movs	r3, #1
}
 800960c:	4618      	mov	r0, r3
 800960e:	3714      	adds	r7, #20
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <_ZN7TwoWire15i2c_slave_writeEPKci>:

int TwoWire::i2c_slave_write(const char *data, int length)
{
 8009618:	b480      	push	{r7}
 800961a:	b089      	sub	sp, #36	; 0x24
 800961c:	af00      	add	r7, sp, #0
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	60b9      	str	r1, [r7, #8]
 8009622:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 8009624:	2300      	movs	r3, #0
 8009626:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800962c:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2b00      	cmp	r3, #0
 8009632:	dd41      	ble.n	80096b8 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 8009634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009638:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800963e:	695b      	ldr	r3, [r3, #20]
 8009640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009644:	2b80      	cmp	r3, #128	; 0x80
 8009646:	bf14      	ite	ne
 8009648:	2301      	movne	r3, #1
 800964a:	2300      	moveq	r3, #0
 800964c:	b2db      	uxtb	r3, r3
 800964e:	2b00      	cmp	r3, #0
 8009650:	d008      	beq.n	8009664 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	3b01      	subs	r3, #1
 8009656:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d1ed      	bne.n	800963a <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 800965e:	f04f 33ff 	mov.w	r3, #4294967295
 8009662:	e068      	b.n	8009736 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	1c5a      	adds	r2, r3, #1
 8009668:	60ba      	str	r2, [r7, #8]
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	461a      	mov	r2, r3
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	611a      	str	r2, [r3, #16]
        length--;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	3b01      	subs	r3, #1
 8009676:	607b      	str	r3, [r7, #4]
        size++;
 8009678:	69bb      	ldr	r3, [r7, #24]
 800967a:	3301      	adds	r3, #1
 800967c:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009682:	695b      	ldr	r3, [r3, #20]
 8009684:	f003 0304 	and.w	r3, r3, #4
 8009688:	2b04      	cmp	r3, #4
 800968a:	d104      	bne.n	8009696 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d001      	beq.n	8009696 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8009692:	2301      	movs	r3, #1
 8009694:	e000      	b.n	8009698 <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 8009696:	2300      	movs	r3, #0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d0c8      	beq.n	800962e <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	1c5a      	adds	r2, r3, #1
 80096a0:	60ba      	str	r2, [r7, #8]
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	461a      	mov	r2, r3
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	611a      	str	r2, [r3, #16]
            length--;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	3b01      	subs	r3, #1
 80096ae:	607b      	str	r3, [r7, #4]
            size++;
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	3301      	adds	r3, #1
 80096b4:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 80096b6:	e7ba      	b.n	800962e <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 80096b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096bc:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096c2:	695b      	ldr	r3, [r3, #20]
 80096c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096cc:	bf14      	ite	ne
 80096ce:	2301      	movne	r3, #1
 80096d0:	2300      	moveq	r3, #0
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d008      	beq.n	80096ea <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	3b01      	subs	r3, #1
 80096dc:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d1ec      	bne.n	80096be <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 80096e4:	f04f 33ff 	mov.w	r3, #4294967295
 80096e8:	e025      	b.n	8009736 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80096f2:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 80096f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096f8:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096fe:	699b      	ldr	r3, [r3, #24]
 8009700:	f003 0302 	and.w	r3, r3, #2
 8009704:	2b02      	cmp	r3, #2
 8009706:	bf0c      	ite	eq
 8009708:	2301      	moveq	r3, #1
 800970a:	2300      	movne	r3, #0
 800970c:	b2db      	uxtb	r3, r3
 800970e:	2b00      	cmp	r3, #0
 8009710:	d008      	beq.n	8009724 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 8009712:	69fb      	ldr	r3, [r7, #28]
 8009714:	3b01      	subs	r3, #1
 8009716:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d1ed      	bne.n	80096fa <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 800971e:	f04f 33ff 	mov.w	r3, #4294967295
 8009722:	e008      	b.n	8009736 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2220      	movs	r2, #32
 8009728:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2200      	movs	r2, #0
 8009730:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 8009734:	69bb      	ldr	r3, [r7, #24]
}
 8009736:	4618      	mov	r0, r3
 8009738:	3724      	adds	r7, #36	; 0x24
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr
	...

08009744 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009750:	4a12      	ldr	r2, [pc, #72]	; (800979c <_ZN7TwoWire15enableInterruptEv+0x58>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d106      	bne.n	8009764 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8009756:	2049      	movs	r0, #73	; 0x49
 8009758:	f000 fc9a 	bl	800a090 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800975c:	2048      	movs	r0, #72	; 0x48
 800975e:	f000 fc97 	bl	800a090 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8009762:	e016      	b.n	8009792 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009768:	4a0d      	ldr	r2, [pc, #52]	; (80097a0 <_ZN7TwoWire15enableInterruptEv+0x5c>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d106      	bne.n	800977c <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800976e:	2022      	movs	r0, #34	; 0x22
 8009770:	f000 fc8e 	bl	800a090 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8009774:	2021      	movs	r0, #33	; 0x21
 8009776:	f000 fc8b 	bl	800a090 <HAL_NVIC_EnableIRQ>
}
 800977a:	e00a      	b.n	8009792 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009780:	4a08      	ldr	r2, [pc, #32]	; (80097a4 <_ZN7TwoWire15enableInterruptEv+0x60>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d105      	bne.n	8009792 <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8009786:	2020      	movs	r0, #32
 8009788:	f000 fc82 	bl	800a090 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800978c:	201f      	movs	r0, #31
 800978e:	f000 fc7f 	bl	800a090 <HAL_NVIC_EnableIRQ>
}
 8009792:	bf00      	nop
 8009794:	3708      	adds	r7, #8
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	40005c00 	.word	0x40005c00
 80097a0:	40005800 	.word	0x40005800
 80097a4:	40005400 	.word	0x40005400

080097a8 <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097b4:	4a12      	ldr	r2, [pc, #72]	; (8009800 <_ZN7TwoWire16disableInterruptEv+0x58>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d106      	bne.n	80097c8 <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 80097ba:	2049      	movs	r0, #73	; 0x49
 80097bc:	f000 fc76 	bl	800a0ac <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 80097c0:	2048      	movs	r0, #72	; 0x48
 80097c2:	f000 fc73 	bl	800a0ac <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 80097c6:	e016      	b.n	80097f6 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097cc:	4a0d      	ldr	r2, [pc, #52]	; (8009804 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d106      	bne.n	80097e0 <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 80097d2:	2022      	movs	r0, #34	; 0x22
 80097d4:	f000 fc6a 	bl	800a0ac <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 80097d8:	2021      	movs	r0, #33	; 0x21
 80097da:	f000 fc67 	bl	800a0ac <HAL_NVIC_DisableIRQ>
}
 80097de:	e00a      	b.n	80097f6 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097e4:	4a08      	ldr	r2, [pc, #32]	; (8009808 <_ZN7TwoWire16disableInterruptEv+0x60>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d105      	bne.n	80097f6 <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 80097ea:	2020      	movs	r0, #32
 80097ec:	f000 fc5e 	bl	800a0ac <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 80097f0:	201f      	movs	r0, #31
 80097f2:	f000 fc5b 	bl	800a0ac <HAL_NVIC_DisableIRQ>
}
 80097f6:	bf00      	nop
 80097f8:	3708      	adds	r7, #8
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	40005c00 	.word	0x40005c00
 8009804:	40005800 	.word	0x40005800
 8009808:	40005400 	.word	0x40005400

0800980c <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2b01      	cmp	r3, #1
 800981a:	d110      	bne.n	800983e <_Z41__static_initialization_and_destruction_0ii+0x32>
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009822:	4293      	cmp	r3, r2
 8009824:	d10b      	bne.n	800983e <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 8009826:	4908      	ldr	r1, [pc, #32]	; (8009848 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8009828:	4808      	ldr	r0, [pc, #32]	; (800984c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800982a:	f7ff fb51 	bl	8008ed0 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 800982e:	4908      	ldr	r1, [pc, #32]	; (8009850 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8009830:	4808      	ldr	r0, [pc, #32]	; (8009854 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8009832:	f7ff fb4d 	bl	8008ed0 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 8009836:	4908      	ldr	r1, [pc, #32]	; (8009858 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8009838:	4808      	ldr	r0, [pc, #32]	; (800985c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800983a:	f7ff fb49 	bl	8008ed0 <_ZN7TwoWireC1EP11I2C_TypeDef>
 800983e:	bf00      	nop
 8009840:	3708      	adds	r7, #8
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	40005400 	.word	0x40005400
 800984c:	20000400 	.word	0x20000400
 8009850:	40005800 	.word	0x40005800
 8009854:	200004b8 	.word	0x200004b8
 8009858:	40005c00 	.word	0x40005c00
 800985c:	20000570 	.word	0x20000570

08009860 <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 8009860:	b580      	push	{r7, lr}
 8009862:	af00      	add	r7, sp, #0
 8009864:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009868:	2001      	movs	r0, #1
 800986a:	f7ff ffcf 	bl	800980c <_Z41__static_initialization_and_destruction_0ii>
 800986e:	bd80      	pop	{r7, pc}

08009870 <MRT_radio_tx>:
#include <iwdg.h>
#include <string.h>
#include <sx126x.h>


void MRT_radio_tx(char* buffer){
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
			//sx126x_set_tx(); TODO
			TxProtocol(buffer, strlen(buffer));
		}
	#endif

	print((char*) "Radio sending:\t");
 8009878:	4804      	ldr	r0, [pc, #16]	; (800988c <MRT_radio_tx+0x1c>)
 800987a:	f7f7 fc45 	bl	8001108 <print>
	println(buffer);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f7f7 fc24 	bl	80010cc <println>
}
 8009884:	bf00      	nop
 8009886:	3708      	adds	r7, #8
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}
 800988c:	0801a210 	.word	0x0801a210

08009890 <MRT_radio_Init>:
	println(buffer);
}



void MRT_radio_Init(void){
 8009890:	b580      	push	{r7, lr}
 8009892:	af00      	add	r7, sp, #0
	println("\r\nRadio Init");
 8009894:	4803      	ldr	r0, [pc, #12]	; (80098a4 <MRT_radio_Init+0x14>)
 8009896:	f7f7 fc19 	bl	80010cc <println>
	set_NRESET_pin(SX_RST_GPIO_Port, SX_RST_Pin);
	set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
	Tx_setup();
	println("OK");
	#else
	println("\tNo radio currently in use");
 800989a:	4803      	ldr	r0, [pc, #12]	; (80098a8 <MRT_radio_Init+0x18>)
 800989c:	f7f7 fc16 	bl	80010cc <println>
	#endif
}
 80098a0:	bf00      	nop
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	0801a234 	.word	0x0801a234
 80098a8:	0801a244 	.word	0x0801a244

080098ac <MRT_TELEMETRY_Init>:


void MRT_TELEMETRY_Init(void){
 80098ac:	b5b0      	push	{r4, r5, r7, lr}
 80098ae:	b086      	sub	sp, #24
 80098b0:	af00      	add	r7, sp, #0

	MRT_radio_Init();
 80098b2:	f7ff ffed 	bl	8009890 <MRT_radio_Init>

	HAL_IWDG_Refresh(&hiwdg);

	#if IRIDIUM_
		HAL_GPIO_WritePin(Iridium_RST_GPIO_Port, Iridium_RST_Pin, SET);
 80098b6:	2201      	movs	r2, #1
 80098b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80098bc:	4809      	ldr	r0, [pc, #36]	; (80098e4 <MRT_TELEMETRY_Init+0x38>)
 80098be:	f000 fdc7 	bl	800a450 <HAL_GPIO_WritePin>
		#if IRIDIUM_INTERNAL_PRINT
		hiridium = MRT_Iridium_Init(IRIDIUM_TIMEOUT, IRIDIUM_I2C, print);
 80098c2:	4c09      	ldr	r4, [pc, #36]	; (80098e8 <MRT_TELEMETRY_Init+0x3c>)
 80098c4:	4638      	mov	r0, r7
 80098c6:	4b09      	ldr	r3, [pc, #36]	; (80098ec <MRT_TELEMETRY_Init+0x40>)
 80098c8:	2202      	movs	r2, #2
 80098ca:	2101      	movs	r1, #1
 80098cc:	f7ff f946 	bl	8008b5c <MRT_Iridium_Init>
 80098d0:	4625      	mov	r5, r4
 80098d2:	463c      	mov	r4, r7
 80098d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80098d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80098d8:	6823      	ldr	r3, [r4, #0]
 80098da:	602b      	str	r3, [r5, #0]
		#else
		hiridium = MRT_Iridium_Init(IRIDIUM_TIMEOUT, IRIDIUM_I2C, no_print); //Doesn't print the internal commands
		#endif
	#endif
}
 80098dc:	bf00      	nop
 80098de:	3718      	adds	r7, #24
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bdb0      	pop	{r4, r5, r7, pc}
 80098e4:	40021000 	.word	0x40021000
 80098e8:	200003ec 	.word	0x200003ec
 80098ec:	08001109 	.word	0x08001109

080098f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80098f4:	4b0e      	ldr	r3, [pc, #56]	; (8009930 <HAL_Init+0x40>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a0d      	ldr	r2, [pc, #52]	; (8009930 <HAL_Init+0x40>)
 80098fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80098fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009900:	4b0b      	ldr	r3, [pc, #44]	; (8009930 <HAL_Init+0x40>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a0a      	ldr	r2, [pc, #40]	; (8009930 <HAL_Init+0x40>)
 8009906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800990a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800990c:	4b08      	ldr	r3, [pc, #32]	; (8009930 <HAL_Init+0x40>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a07      	ldr	r2, [pc, #28]	; (8009930 <HAL_Init+0x40>)
 8009912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009916:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009918:	2003      	movs	r0, #3
 800991a:	f000 fb92 	bl	800a042 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800991e:	2000      	movs	r0, #0
 8009920:	f7f9 f88a 	bl	8002a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009924:	f7f9 f85c 	bl	80029e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009928:	2300      	movs	r3, #0
}
 800992a:	4618      	mov	r0, r3
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	40023c00 	.word	0x40023c00

08009934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009934:	b480      	push	{r7}
 8009936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009938:	4b06      	ldr	r3, [pc, #24]	; (8009954 <HAL_IncTick+0x20>)
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	461a      	mov	r2, r3
 800993e:	4b06      	ldr	r3, [pc, #24]	; (8009958 <HAL_IncTick+0x24>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4413      	add	r3, r2
 8009944:	4a04      	ldr	r2, [pc, #16]	; (8009958 <HAL_IncTick+0x24>)
 8009946:	6013      	str	r3, [r2, #0]
}
 8009948:	bf00      	nop
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop
 8009954:	2000008c 	.word	0x2000008c
 8009958:	20006034 	.word	0x20006034

0800995c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800995c:	b480      	push	{r7}
 800995e:	af00      	add	r7, sp, #0
  return uwTick;
 8009960:	4b03      	ldr	r3, [pc, #12]	; (8009970 <HAL_GetTick+0x14>)
 8009962:	681b      	ldr	r3, [r3, #0]
}
 8009964:	4618      	mov	r0, r3
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop
 8009970:	20006034 	.word	0x20006034

08009974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800997c:	f7ff ffee 	bl	800995c <HAL_GetTick>
 8009980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800998c:	d005      	beq.n	800999a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800998e:	4b0a      	ldr	r3, [pc, #40]	; (80099b8 <HAL_Delay+0x44>)
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	461a      	mov	r2, r3
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	4413      	add	r3, r2
 8009998:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800999a:	bf00      	nop
 800999c:	f7ff ffde 	bl	800995c <HAL_GetTick>
 80099a0:	4602      	mov	r2, r0
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	1ad3      	subs	r3, r2, r3
 80099a6:	68fa      	ldr	r2, [r7, #12]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d8f7      	bhi.n	800999c <HAL_Delay+0x28>
  {
  }
}
 80099ac:	bf00      	nop
 80099ae:	bf00      	nop
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	2000008c 	.word	0x2000008c

080099bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80099c4:	2300      	movs	r3, #0
 80099c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d101      	bne.n	80099d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80099ce:	2301      	movs	r3, #1
 80099d0:	e033      	b.n	8009a3a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d109      	bne.n	80099ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f7f7 fd94 	bl	8001508 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f2:	f003 0310 	and.w	r3, r3, #16
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d118      	bne.n	8009a2c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009a02:	f023 0302 	bic.w	r3, r3, #2
 8009a06:	f043 0202 	orr.w	r2, r3, #2
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 f94a 	bl	8009ca8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1e:	f023 0303 	bic.w	r3, r3, #3
 8009a22:	f043 0201 	orr.w	r2, r3, #1
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	641a      	str	r2, [r3, #64]	; 0x40
 8009a2a:	e001      	b.n	8009a30 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3710      	adds	r7, #16
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
	...

08009a44 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b085      	sub	sp, #20
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d101      	bne.n	8009a60 <HAL_ADC_ConfigChannel+0x1c>
 8009a5c:	2302      	movs	r3, #2
 8009a5e:	e113      	b.n	8009c88 <HAL_ADC_ConfigChannel+0x244>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2201      	movs	r2, #1
 8009a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	2b09      	cmp	r3, #9
 8009a6e:	d925      	bls.n	8009abc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	68d9      	ldr	r1, [r3, #12]
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	4613      	mov	r3, r2
 8009a80:	005b      	lsls	r3, r3, #1
 8009a82:	4413      	add	r3, r2
 8009a84:	3b1e      	subs	r3, #30
 8009a86:	2207      	movs	r2, #7
 8009a88:	fa02 f303 	lsl.w	r3, r2, r3
 8009a8c:	43da      	mvns	r2, r3
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	400a      	ands	r2, r1
 8009a94:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	68d9      	ldr	r1, [r3, #12]
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	689a      	ldr	r2, [r3, #8]
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	005b      	lsls	r3, r3, #1
 8009aac:	4403      	add	r3, r0
 8009aae:	3b1e      	subs	r3, #30
 8009ab0:	409a      	lsls	r2, r3
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	430a      	orrs	r2, r1
 8009ab8:	60da      	str	r2, [r3, #12]
 8009aba:	e022      	b.n	8009b02 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	6919      	ldr	r1, [r3, #16]
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	461a      	mov	r2, r3
 8009aca:	4613      	mov	r3, r2
 8009acc:	005b      	lsls	r3, r3, #1
 8009ace:	4413      	add	r3, r2
 8009ad0:	2207      	movs	r2, #7
 8009ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad6:	43da      	mvns	r2, r3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	400a      	ands	r2, r1
 8009ade:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	6919      	ldr	r1, [r3, #16]
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	689a      	ldr	r2, [r3, #8]
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	4618      	mov	r0, r3
 8009af2:	4603      	mov	r3, r0
 8009af4:	005b      	lsls	r3, r3, #1
 8009af6:	4403      	add	r3, r0
 8009af8:	409a      	lsls	r2, r3
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	430a      	orrs	r2, r1
 8009b00:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	2b06      	cmp	r3, #6
 8009b08:	d824      	bhi.n	8009b54 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	685a      	ldr	r2, [r3, #4]
 8009b14:	4613      	mov	r3, r2
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	4413      	add	r3, r2
 8009b1a:	3b05      	subs	r3, #5
 8009b1c:	221f      	movs	r2, #31
 8009b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b22:	43da      	mvns	r2, r3
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	400a      	ands	r2, r1
 8009b2a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	4618      	mov	r0, r3
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	685a      	ldr	r2, [r3, #4]
 8009b3e:	4613      	mov	r3, r2
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	4413      	add	r3, r2
 8009b44:	3b05      	subs	r3, #5
 8009b46:	fa00 f203 	lsl.w	r2, r0, r3
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	430a      	orrs	r2, r1
 8009b50:	635a      	str	r2, [r3, #52]	; 0x34
 8009b52:	e04c      	b.n	8009bee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	2b0c      	cmp	r3, #12
 8009b5a:	d824      	bhi.n	8009ba6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	685a      	ldr	r2, [r3, #4]
 8009b66:	4613      	mov	r3, r2
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	4413      	add	r3, r2
 8009b6c:	3b23      	subs	r3, #35	; 0x23
 8009b6e:	221f      	movs	r2, #31
 8009b70:	fa02 f303 	lsl.w	r3, r2, r3
 8009b74:	43da      	mvns	r2, r3
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	400a      	ands	r2, r1
 8009b7c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	685a      	ldr	r2, [r3, #4]
 8009b90:	4613      	mov	r3, r2
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	4413      	add	r3, r2
 8009b96:	3b23      	subs	r3, #35	; 0x23
 8009b98:	fa00 f203 	lsl.w	r2, r0, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	430a      	orrs	r2, r1
 8009ba2:	631a      	str	r2, [r3, #48]	; 0x30
 8009ba4:	e023      	b.n	8009bee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	685a      	ldr	r2, [r3, #4]
 8009bb0:	4613      	mov	r3, r2
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	4413      	add	r3, r2
 8009bb6:	3b41      	subs	r3, #65	; 0x41
 8009bb8:	221f      	movs	r2, #31
 8009bba:	fa02 f303 	lsl.w	r3, r2, r3
 8009bbe:	43da      	mvns	r2, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	400a      	ands	r2, r1
 8009bc6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	685a      	ldr	r2, [r3, #4]
 8009bda:	4613      	mov	r3, r2
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	4413      	add	r3, r2
 8009be0:	3b41      	subs	r3, #65	; 0x41
 8009be2:	fa00 f203 	lsl.w	r2, r0, r3
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	430a      	orrs	r2, r1
 8009bec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009bee:	4b29      	ldr	r3, [pc, #164]	; (8009c94 <HAL_ADC_ConfigChannel+0x250>)
 8009bf0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a28      	ldr	r2, [pc, #160]	; (8009c98 <HAL_ADC_ConfigChannel+0x254>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d10f      	bne.n	8009c1c <HAL_ADC_ConfigChannel+0x1d8>
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2b12      	cmp	r3, #18
 8009c02:	d10b      	bne.n	8009c1c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a1d      	ldr	r2, [pc, #116]	; (8009c98 <HAL_ADC_ConfigChannel+0x254>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d12b      	bne.n	8009c7e <HAL_ADC_ConfigChannel+0x23a>
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a1c      	ldr	r2, [pc, #112]	; (8009c9c <HAL_ADC_ConfigChannel+0x258>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d003      	beq.n	8009c38 <HAL_ADC_ConfigChannel+0x1f4>
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2b11      	cmp	r3, #17
 8009c36:	d122      	bne.n	8009c7e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a11      	ldr	r2, [pc, #68]	; (8009c9c <HAL_ADC_ConfigChannel+0x258>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d111      	bne.n	8009c7e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009c5a:	4b11      	ldr	r3, [pc, #68]	; (8009ca0 <HAL_ADC_ConfigChannel+0x25c>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a11      	ldr	r2, [pc, #68]	; (8009ca4 <HAL_ADC_ConfigChannel+0x260>)
 8009c60:	fba2 2303 	umull	r2, r3, r2, r3
 8009c64:	0c9a      	lsrs	r2, r3, #18
 8009c66:	4613      	mov	r3, r2
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	4413      	add	r3, r2
 8009c6c:	005b      	lsls	r3, r3, #1
 8009c6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009c70:	e002      	b.n	8009c78 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	3b01      	subs	r3, #1
 8009c76:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d1f9      	bne.n	8009c72 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009c86:	2300      	movs	r3, #0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3714      	adds	r7, #20
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr
 8009c94:	40012300 	.word	0x40012300
 8009c98:	40012000 	.word	0x40012000
 8009c9c:	10000012 	.word	0x10000012
 8009ca0:	20000060 	.word	0x20000060
 8009ca4:	431bde83 	.word	0x431bde83

08009ca8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b085      	sub	sp, #20
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009cb0:	4b79      	ldr	r3, [pc, #484]	; (8009e98 <ADC_Init+0x1f0>)
 8009cb2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	685a      	ldr	r2, [r3, #4]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	431a      	orrs	r2, r3
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	685a      	ldr	r2, [r3, #4]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009cdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	6859      	ldr	r1, [r3, #4]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	691b      	ldr	r3, [r3, #16]
 8009ce8:	021a      	lsls	r2, r3, #8
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	430a      	orrs	r2, r1
 8009cf0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	685a      	ldr	r2, [r3, #4]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009d00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	6859      	ldr	r1, [r3, #4]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	689a      	ldr	r2, [r3, #8]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	430a      	orrs	r2, r1
 8009d12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	689a      	ldr	r2, [r3, #8]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009d22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	6899      	ldr	r1, [r3, #8]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	68da      	ldr	r2, [r3, #12]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	430a      	orrs	r2, r1
 8009d34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d3a:	4a58      	ldr	r2, [pc, #352]	; (8009e9c <ADC_Init+0x1f4>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d022      	beq.n	8009d86 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	689a      	ldr	r2, [r3, #8]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009d4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	6899      	ldr	r1, [r3, #8]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	430a      	orrs	r2, r1
 8009d60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	689a      	ldr	r2, [r3, #8]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009d70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	6899      	ldr	r1, [r3, #8]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	430a      	orrs	r2, r1
 8009d82:	609a      	str	r2, [r3, #8]
 8009d84:	e00f      	b.n	8009da6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	689a      	ldr	r2, [r3, #8]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009d94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	689a      	ldr	r2, [r3, #8]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009da4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	689a      	ldr	r2, [r3, #8]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f022 0202 	bic.w	r2, r2, #2
 8009db4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	6899      	ldr	r1, [r3, #8]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	7e1b      	ldrb	r3, [r3, #24]
 8009dc0:	005a      	lsls	r2, r3, #1
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	430a      	orrs	r2, r1
 8009dc8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d01b      	beq.n	8009e0c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	685a      	ldr	r2, [r3, #4]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009de2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	685a      	ldr	r2, [r3, #4]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009df2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	6859      	ldr	r1, [r3, #4]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfe:	3b01      	subs	r3, #1
 8009e00:	035a      	lsls	r2, r3, #13
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	430a      	orrs	r2, r1
 8009e08:	605a      	str	r2, [r3, #4]
 8009e0a:	e007      	b.n	8009e1c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	685a      	ldr	r2, [r3, #4]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009e1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	69db      	ldr	r3, [r3, #28]
 8009e36:	3b01      	subs	r3, #1
 8009e38:	051a      	lsls	r2, r3, #20
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	430a      	orrs	r2, r1
 8009e40:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	689a      	ldr	r2, [r3, #8]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009e50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	6899      	ldr	r1, [r3, #8]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009e5e:	025a      	lsls	r2, r3, #9
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	430a      	orrs	r2, r1
 8009e66:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	689a      	ldr	r2, [r3, #8]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	6899      	ldr	r1, [r3, #8]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	695b      	ldr	r3, [r3, #20]
 8009e82:	029a      	lsls	r2, r3, #10
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	430a      	orrs	r2, r1
 8009e8a:	609a      	str	r2, [r3, #8]
}
 8009e8c:	bf00      	nop
 8009e8e:	3714      	adds	r7, #20
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr
 8009e98:	40012300 	.word	0x40012300
 8009e9c:	0f000001 	.word	0x0f000001

08009ea0 <__NVIC_SetPriorityGrouping>:
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f003 0307 	and.w	r3, r3, #7
 8009eae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009eb0:	4b0c      	ldr	r3, [pc, #48]	; (8009ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009eb6:	68ba      	ldr	r2, [r7, #8]
 8009eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009ed2:	4a04      	ldr	r2, [pc, #16]	; (8009ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	60d3      	str	r3, [r2, #12]
}
 8009ed8:	bf00      	nop
 8009eda:	3714      	adds	r7, #20
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr
 8009ee4:	e000ed00 	.word	0xe000ed00

08009ee8 <__NVIC_GetPriorityGrouping>:
{
 8009ee8:	b480      	push	{r7}
 8009eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009eec:	4b04      	ldr	r3, [pc, #16]	; (8009f00 <__NVIC_GetPriorityGrouping+0x18>)
 8009eee:	68db      	ldr	r3, [r3, #12]
 8009ef0:	0a1b      	lsrs	r3, r3, #8
 8009ef2:	f003 0307 	and.w	r3, r3, #7
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr
 8009f00:	e000ed00 	.word	0xe000ed00

08009f04 <__NVIC_EnableIRQ>:
{
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	db0b      	blt.n	8009f2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009f16:	79fb      	ldrb	r3, [r7, #7]
 8009f18:	f003 021f 	and.w	r2, r3, #31
 8009f1c:	4907      	ldr	r1, [pc, #28]	; (8009f3c <__NVIC_EnableIRQ+0x38>)
 8009f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f22:	095b      	lsrs	r3, r3, #5
 8009f24:	2001      	movs	r0, #1
 8009f26:	fa00 f202 	lsl.w	r2, r0, r2
 8009f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009f2e:	bf00      	nop
 8009f30:	370c      	adds	r7, #12
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr
 8009f3a:	bf00      	nop
 8009f3c:	e000e100 	.word	0xe000e100

08009f40 <__NVIC_DisableIRQ>:
{
 8009f40:	b480      	push	{r7}
 8009f42:	b083      	sub	sp, #12
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	4603      	mov	r3, r0
 8009f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	db12      	blt.n	8009f78 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009f52:	79fb      	ldrb	r3, [r7, #7]
 8009f54:	f003 021f 	and.w	r2, r3, #31
 8009f58:	490a      	ldr	r1, [pc, #40]	; (8009f84 <__NVIC_DisableIRQ+0x44>)
 8009f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f5e:	095b      	lsrs	r3, r3, #5
 8009f60:	2001      	movs	r0, #1
 8009f62:	fa00 f202 	lsl.w	r2, r0, r2
 8009f66:	3320      	adds	r3, #32
 8009f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8009f6c:	f3bf 8f4f 	dsb	sy
}
 8009f70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009f72:	f3bf 8f6f 	isb	sy
}
 8009f76:	bf00      	nop
}
 8009f78:	bf00      	nop
 8009f7a:	370c      	adds	r7, #12
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr
 8009f84:	e000e100 	.word	0xe000e100

08009f88 <__NVIC_SetPriority>:
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b083      	sub	sp, #12
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	4603      	mov	r3, r0
 8009f90:	6039      	str	r1, [r7, #0]
 8009f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	db0a      	blt.n	8009fb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	b2da      	uxtb	r2, r3
 8009fa0:	490c      	ldr	r1, [pc, #48]	; (8009fd4 <__NVIC_SetPriority+0x4c>)
 8009fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fa6:	0112      	lsls	r2, r2, #4
 8009fa8:	b2d2      	uxtb	r2, r2
 8009faa:	440b      	add	r3, r1
 8009fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009fb0:	e00a      	b.n	8009fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	b2da      	uxtb	r2, r3
 8009fb6:	4908      	ldr	r1, [pc, #32]	; (8009fd8 <__NVIC_SetPriority+0x50>)
 8009fb8:	79fb      	ldrb	r3, [r7, #7]
 8009fba:	f003 030f 	and.w	r3, r3, #15
 8009fbe:	3b04      	subs	r3, #4
 8009fc0:	0112      	lsls	r2, r2, #4
 8009fc2:	b2d2      	uxtb	r2, r2
 8009fc4:	440b      	add	r3, r1
 8009fc6:	761a      	strb	r2, [r3, #24]
}
 8009fc8:	bf00      	nop
 8009fca:	370c      	adds	r7, #12
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr
 8009fd4:	e000e100 	.word	0xe000e100
 8009fd8:	e000ed00 	.word	0xe000ed00

08009fdc <NVIC_EncodePriority>:
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b089      	sub	sp, #36	; 0x24
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f003 0307 	and.w	r3, r3, #7
 8009fee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	f1c3 0307 	rsb	r3, r3, #7
 8009ff6:	2b04      	cmp	r3, #4
 8009ff8:	bf28      	it	cs
 8009ffa:	2304      	movcs	r3, #4
 8009ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	3304      	adds	r3, #4
 800a002:	2b06      	cmp	r3, #6
 800a004:	d902      	bls.n	800a00c <NVIC_EncodePriority+0x30>
 800a006:	69fb      	ldr	r3, [r7, #28]
 800a008:	3b03      	subs	r3, #3
 800a00a:	e000      	b.n	800a00e <NVIC_EncodePriority+0x32>
 800a00c:	2300      	movs	r3, #0
 800a00e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a010:	f04f 32ff 	mov.w	r2, #4294967295
 800a014:	69bb      	ldr	r3, [r7, #24]
 800a016:	fa02 f303 	lsl.w	r3, r2, r3
 800a01a:	43da      	mvns	r2, r3
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	401a      	ands	r2, r3
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a024:	f04f 31ff 	mov.w	r1, #4294967295
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	fa01 f303 	lsl.w	r3, r1, r3
 800a02e:	43d9      	mvns	r1, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a034:	4313      	orrs	r3, r2
}
 800a036:	4618      	mov	r0, r3
 800a038:	3724      	adds	r7, #36	; 0x24
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr

0800a042 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b082      	sub	sp, #8
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f7ff ff28 	bl	8009ea0 <__NVIC_SetPriorityGrouping>
}
 800a050:	bf00      	nop
 800a052:	3708      	adds	r7, #8
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a058:	b580      	push	{r7, lr}
 800a05a:	b086      	sub	sp, #24
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	4603      	mov	r3, r0
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
 800a064:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a066:	2300      	movs	r3, #0
 800a068:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a06a:	f7ff ff3d 	bl	8009ee8 <__NVIC_GetPriorityGrouping>
 800a06e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	68b9      	ldr	r1, [r7, #8]
 800a074:	6978      	ldr	r0, [r7, #20]
 800a076:	f7ff ffb1 	bl	8009fdc <NVIC_EncodePriority>
 800a07a:	4602      	mov	r2, r0
 800a07c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a080:	4611      	mov	r1, r2
 800a082:	4618      	mov	r0, r3
 800a084:	f7ff ff80 	bl	8009f88 <__NVIC_SetPriority>
}
 800a088:	bf00      	nop
 800a08a:	3718      	adds	r7, #24
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	4603      	mov	r3, r0
 800a098:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a09a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7ff ff30 	bl	8009f04 <__NVIC_EnableIRQ>
}
 800a0a4:	bf00      	nop
 800a0a6:	3708      	adds	r7, #8
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800a0b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7ff ff40 	bl	8009f40 <__NVIC_DisableIRQ>
}
 800a0c0:	bf00      	nop
 800a0c2:	3708      	adds	r7, #8
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b089      	sub	sp, #36	; 0x24
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a0de:	2300      	movs	r3, #0
 800a0e0:	61fb      	str	r3, [r7, #28]
 800a0e2:	e177      	b.n	800a3d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	69fb      	ldr	r3, [r7, #28]
 800a0e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	697a      	ldr	r2, [r7, #20]
 800a0f4:	4013      	ands	r3, r2
 800a0f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a0f8:	693a      	ldr	r2, [r7, #16]
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	f040 8166 	bne.w	800a3ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	f003 0303 	and.w	r3, r3, #3
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d005      	beq.n	800a11a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a116:	2b02      	cmp	r3, #2
 800a118:	d130      	bne.n	800a17c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	689b      	ldr	r3, [r3, #8]
 800a11e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a120:	69fb      	ldr	r3, [r7, #28]
 800a122:	005b      	lsls	r3, r3, #1
 800a124:	2203      	movs	r2, #3
 800a126:	fa02 f303 	lsl.w	r3, r2, r3
 800a12a:	43db      	mvns	r3, r3
 800a12c:	69ba      	ldr	r2, [r7, #24]
 800a12e:	4013      	ands	r3, r2
 800a130:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	68da      	ldr	r2, [r3, #12]
 800a136:	69fb      	ldr	r3, [r7, #28]
 800a138:	005b      	lsls	r3, r3, #1
 800a13a:	fa02 f303 	lsl.w	r3, r2, r3
 800a13e:	69ba      	ldr	r2, [r7, #24]
 800a140:	4313      	orrs	r3, r2
 800a142:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	69ba      	ldr	r2, [r7, #24]
 800a148:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a150:	2201      	movs	r2, #1
 800a152:	69fb      	ldr	r3, [r7, #28]
 800a154:	fa02 f303 	lsl.w	r3, r2, r3
 800a158:	43db      	mvns	r3, r3
 800a15a:	69ba      	ldr	r2, [r7, #24]
 800a15c:	4013      	ands	r3, r2
 800a15e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	091b      	lsrs	r3, r3, #4
 800a166:	f003 0201 	and.w	r2, r3, #1
 800a16a:	69fb      	ldr	r3, [r7, #28]
 800a16c:	fa02 f303 	lsl.w	r3, r2, r3
 800a170:	69ba      	ldr	r2, [r7, #24]
 800a172:	4313      	orrs	r3, r2
 800a174:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	69ba      	ldr	r2, [r7, #24]
 800a17a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	f003 0303 	and.w	r3, r3, #3
 800a184:	2b03      	cmp	r3, #3
 800a186:	d017      	beq.n	800a1b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a18e:	69fb      	ldr	r3, [r7, #28]
 800a190:	005b      	lsls	r3, r3, #1
 800a192:	2203      	movs	r2, #3
 800a194:	fa02 f303 	lsl.w	r3, r2, r3
 800a198:	43db      	mvns	r3, r3
 800a19a:	69ba      	ldr	r2, [r7, #24]
 800a19c:	4013      	ands	r3, r2
 800a19e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	689a      	ldr	r2, [r3, #8]
 800a1a4:	69fb      	ldr	r3, [r7, #28]
 800a1a6:	005b      	lsls	r3, r3, #1
 800a1a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ac:	69ba      	ldr	r2, [r7, #24]
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	69ba      	ldr	r2, [r7, #24]
 800a1b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	f003 0303 	and.w	r3, r3, #3
 800a1c0:	2b02      	cmp	r3, #2
 800a1c2:	d123      	bne.n	800a20c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a1c4:	69fb      	ldr	r3, [r7, #28]
 800a1c6:	08da      	lsrs	r2, r3, #3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	3208      	adds	r2, #8
 800a1cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a1d2:	69fb      	ldr	r3, [r7, #28]
 800a1d4:	f003 0307 	and.w	r3, r3, #7
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	220f      	movs	r2, #15
 800a1dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a1e0:	43db      	mvns	r3, r3
 800a1e2:	69ba      	ldr	r2, [r7, #24]
 800a1e4:	4013      	ands	r3, r2
 800a1e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	691a      	ldr	r2, [r3, #16]
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	f003 0307 	and.w	r3, r3, #7
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a1f8:	69ba      	ldr	r2, [r7, #24]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	08da      	lsrs	r2, r3, #3
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	3208      	adds	r2, #8
 800a206:	69b9      	ldr	r1, [r7, #24]
 800a208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a212:	69fb      	ldr	r3, [r7, #28]
 800a214:	005b      	lsls	r3, r3, #1
 800a216:	2203      	movs	r2, #3
 800a218:	fa02 f303 	lsl.w	r3, r2, r3
 800a21c:	43db      	mvns	r3, r3
 800a21e:	69ba      	ldr	r2, [r7, #24]
 800a220:	4013      	ands	r3, r2
 800a222:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	f003 0203 	and.w	r2, r3, #3
 800a22c:	69fb      	ldr	r3, [r7, #28]
 800a22e:	005b      	lsls	r3, r3, #1
 800a230:	fa02 f303 	lsl.w	r3, r2, r3
 800a234:	69ba      	ldr	r2, [r7, #24]
 800a236:	4313      	orrs	r3, r2
 800a238:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	69ba      	ldr	r2, [r7, #24]
 800a23e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a248:	2b00      	cmp	r3, #0
 800a24a:	f000 80c0 	beq.w	800a3ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a24e:	2300      	movs	r3, #0
 800a250:	60fb      	str	r3, [r7, #12]
 800a252:	4b66      	ldr	r3, [pc, #408]	; (800a3ec <HAL_GPIO_Init+0x324>)
 800a254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a256:	4a65      	ldr	r2, [pc, #404]	; (800a3ec <HAL_GPIO_Init+0x324>)
 800a258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a25c:	6453      	str	r3, [r2, #68]	; 0x44
 800a25e:	4b63      	ldr	r3, [pc, #396]	; (800a3ec <HAL_GPIO_Init+0x324>)
 800a260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a266:	60fb      	str	r3, [r7, #12]
 800a268:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a26a:	4a61      	ldr	r2, [pc, #388]	; (800a3f0 <HAL_GPIO_Init+0x328>)
 800a26c:	69fb      	ldr	r3, [r7, #28]
 800a26e:	089b      	lsrs	r3, r3, #2
 800a270:	3302      	adds	r3, #2
 800a272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a276:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a278:	69fb      	ldr	r3, [r7, #28]
 800a27a:	f003 0303 	and.w	r3, r3, #3
 800a27e:	009b      	lsls	r3, r3, #2
 800a280:	220f      	movs	r2, #15
 800a282:	fa02 f303 	lsl.w	r3, r2, r3
 800a286:	43db      	mvns	r3, r3
 800a288:	69ba      	ldr	r2, [r7, #24]
 800a28a:	4013      	ands	r3, r2
 800a28c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	4a58      	ldr	r2, [pc, #352]	; (800a3f4 <HAL_GPIO_Init+0x32c>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d037      	beq.n	800a306 <HAL_GPIO_Init+0x23e>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	4a57      	ldr	r2, [pc, #348]	; (800a3f8 <HAL_GPIO_Init+0x330>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d031      	beq.n	800a302 <HAL_GPIO_Init+0x23a>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	4a56      	ldr	r2, [pc, #344]	; (800a3fc <HAL_GPIO_Init+0x334>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d02b      	beq.n	800a2fe <HAL_GPIO_Init+0x236>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	4a55      	ldr	r2, [pc, #340]	; (800a400 <HAL_GPIO_Init+0x338>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d025      	beq.n	800a2fa <HAL_GPIO_Init+0x232>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	4a54      	ldr	r2, [pc, #336]	; (800a404 <HAL_GPIO_Init+0x33c>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d01f      	beq.n	800a2f6 <HAL_GPIO_Init+0x22e>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	4a53      	ldr	r2, [pc, #332]	; (800a408 <HAL_GPIO_Init+0x340>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d019      	beq.n	800a2f2 <HAL_GPIO_Init+0x22a>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	4a52      	ldr	r2, [pc, #328]	; (800a40c <HAL_GPIO_Init+0x344>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d013      	beq.n	800a2ee <HAL_GPIO_Init+0x226>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	4a51      	ldr	r2, [pc, #324]	; (800a410 <HAL_GPIO_Init+0x348>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d00d      	beq.n	800a2ea <HAL_GPIO_Init+0x222>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	4a50      	ldr	r2, [pc, #320]	; (800a414 <HAL_GPIO_Init+0x34c>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d007      	beq.n	800a2e6 <HAL_GPIO_Init+0x21e>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	4a4f      	ldr	r2, [pc, #316]	; (800a418 <HAL_GPIO_Init+0x350>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d101      	bne.n	800a2e2 <HAL_GPIO_Init+0x21a>
 800a2de:	2309      	movs	r3, #9
 800a2e0:	e012      	b.n	800a308 <HAL_GPIO_Init+0x240>
 800a2e2:	230a      	movs	r3, #10
 800a2e4:	e010      	b.n	800a308 <HAL_GPIO_Init+0x240>
 800a2e6:	2308      	movs	r3, #8
 800a2e8:	e00e      	b.n	800a308 <HAL_GPIO_Init+0x240>
 800a2ea:	2307      	movs	r3, #7
 800a2ec:	e00c      	b.n	800a308 <HAL_GPIO_Init+0x240>
 800a2ee:	2306      	movs	r3, #6
 800a2f0:	e00a      	b.n	800a308 <HAL_GPIO_Init+0x240>
 800a2f2:	2305      	movs	r3, #5
 800a2f4:	e008      	b.n	800a308 <HAL_GPIO_Init+0x240>
 800a2f6:	2304      	movs	r3, #4
 800a2f8:	e006      	b.n	800a308 <HAL_GPIO_Init+0x240>
 800a2fa:	2303      	movs	r3, #3
 800a2fc:	e004      	b.n	800a308 <HAL_GPIO_Init+0x240>
 800a2fe:	2302      	movs	r3, #2
 800a300:	e002      	b.n	800a308 <HAL_GPIO_Init+0x240>
 800a302:	2301      	movs	r3, #1
 800a304:	e000      	b.n	800a308 <HAL_GPIO_Init+0x240>
 800a306:	2300      	movs	r3, #0
 800a308:	69fa      	ldr	r2, [r7, #28]
 800a30a:	f002 0203 	and.w	r2, r2, #3
 800a30e:	0092      	lsls	r2, r2, #2
 800a310:	4093      	lsls	r3, r2
 800a312:	69ba      	ldr	r2, [r7, #24]
 800a314:	4313      	orrs	r3, r2
 800a316:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a318:	4935      	ldr	r1, [pc, #212]	; (800a3f0 <HAL_GPIO_Init+0x328>)
 800a31a:	69fb      	ldr	r3, [r7, #28]
 800a31c:	089b      	lsrs	r3, r3, #2
 800a31e:	3302      	adds	r3, #2
 800a320:	69ba      	ldr	r2, [r7, #24]
 800a322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a326:	4b3d      	ldr	r3, [pc, #244]	; (800a41c <HAL_GPIO_Init+0x354>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	43db      	mvns	r3, r3
 800a330:	69ba      	ldr	r2, [r7, #24]
 800a332:	4013      	ands	r3, r2
 800a334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d003      	beq.n	800a34a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800a342:	69ba      	ldr	r2, [r7, #24]
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	4313      	orrs	r3, r2
 800a348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a34a:	4a34      	ldr	r2, [pc, #208]	; (800a41c <HAL_GPIO_Init+0x354>)
 800a34c:	69bb      	ldr	r3, [r7, #24]
 800a34e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a350:	4b32      	ldr	r3, [pc, #200]	; (800a41c <HAL_GPIO_Init+0x354>)
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	43db      	mvns	r3, r3
 800a35a:	69ba      	ldr	r2, [r7, #24]
 800a35c:	4013      	ands	r3, r2
 800a35e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d003      	beq.n	800a374 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800a36c:	69ba      	ldr	r2, [r7, #24]
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	4313      	orrs	r3, r2
 800a372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a374:	4a29      	ldr	r2, [pc, #164]	; (800a41c <HAL_GPIO_Init+0x354>)
 800a376:	69bb      	ldr	r3, [r7, #24]
 800a378:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a37a:	4b28      	ldr	r3, [pc, #160]	; (800a41c <HAL_GPIO_Init+0x354>)
 800a37c:	689b      	ldr	r3, [r3, #8]
 800a37e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	43db      	mvns	r3, r3
 800a384:	69ba      	ldr	r2, [r7, #24]
 800a386:	4013      	ands	r3, r2
 800a388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a392:	2b00      	cmp	r3, #0
 800a394:	d003      	beq.n	800a39e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800a396:	69ba      	ldr	r2, [r7, #24]
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	4313      	orrs	r3, r2
 800a39c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a39e:	4a1f      	ldr	r2, [pc, #124]	; (800a41c <HAL_GPIO_Init+0x354>)
 800a3a0:	69bb      	ldr	r3, [r7, #24]
 800a3a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a3a4:	4b1d      	ldr	r3, [pc, #116]	; (800a41c <HAL_GPIO_Init+0x354>)
 800a3a6:	68db      	ldr	r3, [r3, #12]
 800a3a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	43db      	mvns	r3, r3
 800a3ae:	69ba      	ldr	r2, [r7, #24]
 800a3b0:	4013      	ands	r3, r2
 800a3b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d003      	beq.n	800a3c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800a3c0:	69ba      	ldr	r2, [r7, #24]
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a3c8:	4a14      	ldr	r2, [pc, #80]	; (800a41c <HAL_GPIO_Init+0x354>)
 800a3ca:	69bb      	ldr	r3, [r7, #24]
 800a3cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a3ce:	69fb      	ldr	r3, [r7, #28]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	61fb      	str	r3, [r7, #28]
 800a3d4:	69fb      	ldr	r3, [r7, #28]
 800a3d6:	2b0f      	cmp	r3, #15
 800a3d8:	f67f ae84 	bls.w	800a0e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a3dc:	bf00      	nop
 800a3de:	bf00      	nop
 800a3e0:	3724      	adds	r7, #36	; 0x24
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr
 800a3ea:	bf00      	nop
 800a3ec:	40023800 	.word	0x40023800
 800a3f0:	40013800 	.word	0x40013800
 800a3f4:	40020000 	.word	0x40020000
 800a3f8:	40020400 	.word	0x40020400
 800a3fc:	40020800 	.word	0x40020800
 800a400:	40020c00 	.word	0x40020c00
 800a404:	40021000 	.word	0x40021000
 800a408:	40021400 	.word	0x40021400
 800a40c:	40021800 	.word	0x40021800
 800a410:	40021c00 	.word	0x40021c00
 800a414:	40022000 	.word	0x40022000
 800a418:	40022400 	.word	0x40022400
 800a41c:	40013c00 	.word	0x40013c00

0800a420 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a420:	b480      	push	{r7}
 800a422:	b085      	sub	sp, #20
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	460b      	mov	r3, r1
 800a42a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	691a      	ldr	r2, [r3, #16]
 800a430:	887b      	ldrh	r3, [r7, #2]
 800a432:	4013      	ands	r3, r2
 800a434:	2b00      	cmp	r3, #0
 800a436:	d002      	beq.n	800a43e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a438:	2301      	movs	r3, #1
 800a43a:	73fb      	strb	r3, [r7, #15]
 800a43c:	e001      	b.n	800a442 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a43e:	2300      	movs	r3, #0
 800a440:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a442:	7bfb      	ldrb	r3, [r7, #15]
}
 800a444:	4618      	mov	r0, r3
 800a446:	3714      	adds	r7, #20
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a450:	b480      	push	{r7}
 800a452:	b083      	sub	sp, #12
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	460b      	mov	r3, r1
 800a45a:	807b      	strh	r3, [r7, #2]
 800a45c:	4613      	mov	r3, r2
 800a45e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a460:	787b      	ldrb	r3, [r7, #1]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d003      	beq.n	800a46e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a466:	887a      	ldrh	r2, [r7, #2]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a46c:	e003      	b.n	800a476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a46e:	887b      	ldrh	r3, [r7, #2]
 800a470:	041a      	lsls	r2, r3, #16
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	619a      	str	r2, [r3, #24]
}
 800a476:	bf00      	nop
 800a478:	370c      	adds	r7, #12
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr
	...

0800a484 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b082      	sub	sp, #8
 800a488:	af00      	add	r7, sp, #0
 800a48a:	4603      	mov	r3, r0
 800a48c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800a48e:	4b08      	ldr	r3, [pc, #32]	; (800a4b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a490:	695a      	ldr	r2, [r3, #20]
 800a492:	88fb      	ldrh	r3, [r7, #6]
 800a494:	4013      	ands	r3, r2
 800a496:	2b00      	cmp	r3, #0
 800a498:	d006      	beq.n	800a4a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a49a:	4a05      	ldr	r2, [pc, #20]	; (800a4b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a49c:	88fb      	ldrh	r3, [r7, #6]
 800a49e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a4a0:	88fb      	ldrh	r3, [r7, #6]
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f7f8 fb54 	bl	8002b50 <HAL_GPIO_EXTI_Callback>
  }
}
 800a4a8:	bf00      	nop
 800a4aa:	3708      	adds	r7, #8
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}
 800a4b0:	40013c00 	.word	0x40013c00

0800a4b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d101      	bne.n	800a4c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	e12b      	b.n	800a71e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d106      	bne.n	800a4e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f7f7 fd28 	bl	8001f30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2224      	movs	r2, #36	; 0x24
 800a4e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f022 0201 	bic.w	r2, r2, #1
 800a4f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	681a      	ldr	r2, [r3, #0]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a506:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a516:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a518:	f001 fd14 	bl	800bf44 <HAL_RCC_GetPCLK1Freq>
 800a51c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	4a81      	ldr	r2, [pc, #516]	; (800a728 <HAL_I2C_Init+0x274>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d807      	bhi.n	800a538 <HAL_I2C_Init+0x84>
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	4a80      	ldr	r2, [pc, #512]	; (800a72c <HAL_I2C_Init+0x278>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	bf94      	ite	ls
 800a530:	2301      	movls	r3, #1
 800a532:	2300      	movhi	r3, #0
 800a534:	b2db      	uxtb	r3, r3
 800a536:	e006      	b.n	800a546 <HAL_I2C_Init+0x92>
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	4a7d      	ldr	r2, [pc, #500]	; (800a730 <HAL_I2C_Init+0x27c>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	bf94      	ite	ls
 800a540:	2301      	movls	r3, #1
 800a542:	2300      	movhi	r3, #0
 800a544:	b2db      	uxtb	r3, r3
 800a546:	2b00      	cmp	r3, #0
 800a548:	d001      	beq.n	800a54e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a54a:	2301      	movs	r3, #1
 800a54c:	e0e7      	b.n	800a71e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	4a78      	ldr	r2, [pc, #480]	; (800a734 <HAL_I2C_Init+0x280>)
 800a552:	fba2 2303 	umull	r2, r3, r2, r3
 800a556:	0c9b      	lsrs	r3, r3, #18
 800a558:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	68ba      	ldr	r2, [r7, #8]
 800a56a:	430a      	orrs	r2, r1
 800a56c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	6a1b      	ldr	r3, [r3, #32]
 800a574:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	4a6a      	ldr	r2, [pc, #424]	; (800a728 <HAL_I2C_Init+0x274>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d802      	bhi.n	800a588 <HAL_I2C_Init+0xd4>
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	3301      	adds	r3, #1
 800a586:	e009      	b.n	800a59c <HAL_I2C_Init+0xe8>
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a58e:	fb02 f303 	mul.w	r3, r2, r3
 800a592:	4a69      	ldr	r2, [pc, #420]	; (800a738 <HAL_I2C_Init+0x284>)
 800a594:	fba2 2303 	umull	r2, r3, r2, r3
 800a598:	099b      	lsrs	r3, r3, #6
 800a59a:	3301      	adds	r3, #1
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	6812      	ldr	r2, [r2, #0]
 800a5a0:	430b      	orrs	r3, r1
 800a5a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	69db      	ldr	r3, [r3, #28]
 800a5aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800a5ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	495c      	ldr	r1, [pc, #368]	; (800a728 <HAL_I2C_Init+0x274>)
 800a5b8:	428b      	cmp	r3, r1
 800a5ba:	d819      	bhi.n	800a5f0 <HAL_I2C_Init+0x13c>
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	1e59      	subs	r1, r3, #1
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	005b      	lsls	r3, r3, #1
 800a5c6:	fbb1 f3f3 	udiv	r3, r1, r3
 800a5ca:	1c59      	adds	r1, r3, #1
 800a5cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a5d0:	400b      	ands	r3, r1
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d00a      	beq.n	800a5ec <HAL_I2C_Init+0x138>
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	1e59      	subs	r1, r3, #1
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	005b      	lsls	r3, r3, #1
 800a5e0:	fbb1 f3f3 	udiv	r3, r1, r3
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a5ea:	e051      	b.n	800a690 <HAL_I2C_Init+0x1dc>
 800a5ec:	2304      	movs	r3, #4
 800a5ee:	e04f      	b.n	800a690 <HAL_I2C_Init+0x1dc>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d111      	bne.n	800a61c <HAL_I2C_Init+0x168>
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	1e58      	subs	r0, r3, #1
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6859      	ldr	r1, [r3, #4]
 800a600:	460b      	mov	r3, r1
 800a602:	005b      	lsls	r3, r3, #1
 800a604:	440b      	add	r3, r1
 800a606:	fbb0 f3f3 	udiv	r3, r0, r3
 800a60a:	3301      	adds	r3, #1
 800a60c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a610:	2b00      	cmp	r3, #0
 800a612:	bf0c      	ite	eq
 800a614:	2301      	moveq	r3, #1
 800a616:	2300      	movne	r3, #0
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	e012      	b.n	800a642 <HAL_I2C_Init+0x18e>
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	1e58      	subs	r0, r3, #1
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6859      	ldr	r1, [r3, #4]
 800a624:	460b      	mov	r3, r1
 800a626:	009b      	lsls	r3, r3, #2
 800a628:	440b      	add	r3, r1
 800a62a:	0099      	lsls	r1, r3, #2
 800a62c:	440b      	add	r3, r1
 800a62e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a632:	3301      	adds	r3, #1
 800a634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a638:	2b00      	cmp	r3, #0
 800a63a:	bf0c      	ite	eq
 800a63c:	2301      	moveq	r3, #1
 800a63e:	2300      	movne	r3, #0
 800a640:	b2db      	uxtb	r3, r3
 800a642:	2b00      	cmp	r3, #0
 800a644:	d001      	beq.n	800a64a <HAL_I2C_Init+0x196>
 800a646:	2301      	movs	r3, #1
 800a648:	e022      	b.n	800a690 <HAL_I2C_Init+0x1dc>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d10e      	bne.n	800a670 <HAL_I2C_Init+0x1bc>
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	1e58      	subs	r0, r3, #1
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6859      	ldr	r1, [r3, #4]
 800a65a:	460b      	mov	r3, r1
 800a65c:	005b      	lsls	r3, r3, #1
 800a65e:	440b      	add	r3, r1
 800a660:	fbb0 f3f3 	udiv	r3, r0, r3
 800a664:	3301      	adds	r3, #1
 800a666:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a66a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a66e:	e00f      	b.n	800a690 <HAL_I2C_Init+0x1dc>
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	1e58      	subs	r0, r3, #1
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6859      	ldr	r1, [r3, #4]
 800a678:	460b      	mov	r3, r1
 800a67a:	009b      	lsls	r3, r3, #2
 800a67c:	440b      	add	r3, r1
 800a67e:	0099      	lsls	r1, r3, #2
 800a680:	440b      	add	r3, r1
 800a682:	fbb0 f3f3 	udiv	r3, r0, r3
 800a686:	3301      	adds	r3, #1
 800a688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a68c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a690:	6879      	ldr	r1, [r7, #4]
 800a692:	6809      	ldr	r1, [r1, #0]
 800a694:	4313      	orrs	r3, r2
 800a696:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	69da      	ldr	r2, [r3, #28]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6a1b      	ldr	r3, [r3, #32]
 800a6aa:	431a      	orrs	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	430a      	orrs	r2, r1
 800a6b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	689b      	ldr	r3, [r3, #8]
 800a6ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a6be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	6911      	ldr	r1, [r2, #16]
 800a6c6:	687a      	ldr	r2, [r7, #4]
 800a6c8:	68d2      	ldr	r2, [r2, #12]
 800a6ca:	4311      	orrs	r1, r2
 800a6cc:	687a      	ldr	r2, [r7, #4]
 800a6ce:	6812      	ldr	r2, [r2, #0]
 800a6d0:	430b      	orrs	r3, r1
 800a6d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	68db      	ldr	r3, [r3, #12]
 800a6da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	695a      	ldr	r2, [r3, #20]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	699b      	ldr	r3, [r3, #24]
 800a6e6:	431a      	orrs	r2, r3
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	430a      	orrs	r2, r1
 800a6ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	681a      	ldr	r2, [r3, #0]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f042 0201 	orr.w	r2, r2, #1
 800a6fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2200      	movs	r2, #0
 800a704:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2220      	movs	r2, #32
 800a70a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2200      	movs	r2, #0
 800a712:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2200      	movs	r2, #0
 800a718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a71c:	2300      	movs	r3, #0
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3710      	adds	r7, #16
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	000186a0 	.word	0x000186a0
 800a72c:	001e847f 	.word	0x001e847f
 800a730:	003d08ff 	.word	0x003d08ff
 800a734:	431bde83 	.word	0x431bde83
 800a738:	10624dd3 	.word	0x10624dd3

0800a73c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b088      	sub	sp, #32
 800a740:	af02      	add	r7, sp, #8
 800a742:	60f8      	str	r0, [r7, #12]
 800a744:	4608      	mov	r0, r1
 800a746:	4611      	mov	r1, r2
 800a748:	461a      	mov	r2, r3
 800a74a:	4603      	mov	r3, r0
 800a74c:	817b      	strh	r3, [r7, #10]
 800a74e:	460b      	mov	r3, r1
 800a750:	813b      	strh	r3, [r7, #8]
 800a752:	4613      	mov	r3, r2
 800a754:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a756:	f7ff f901 	bl	800995c <HAL_GetTick>
 800a75a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a762:	b2db      	uxtb	r3, r3
 800a764:	2b20      	cmp	r3, #32
 800a766:	f040 80d9 	bne.w	800a91c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	9300      	str	r3, [sp, #0]
 800a76e:	2319      	movs	r3, #25
 800a770:	2201      	movs	r2, #1
 800a772:	496d      	ldr	r1, [pc, #436]	; (800a928 <HAL_I2C_Mem_Write+0x1ec>)
 800a774:	68f8      	ldr	r0, [r7, #12]
 800a776:	f000 fcb5 	bl	800b0e4 <I2C_WaitOnFlagUntilTimeout>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d001      	beq.n	800a784 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a780:	2302      	movs	r3, #2
 800a782:	e0cc      	b.n	800a91e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d101      	bne.n	800a792 <HAL_I2C_Mem_Write+0x56>
 800a78e:	2302      	movs	r3, #2
 800a790:	e0c5      	b.n	800a91e <HAL_I2C_Mem_Write+0x1e2>
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2201      	movs	r2, #1
 800a796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f003 0301 	and.w	r3, r3, #1
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d007      	beq.n	800a7b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f042 0201 	orr.w	r2, r2, #1
 800a7b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	681a      	ldr	r2, [r3, #0]
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a7c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2221      	movs	r2, #33	; 0x21
 800a7cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2240      	movs	r2, #64	; 0x40
 800a7d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	6a3a      	ldr	r2, [r7, #32]
 800a7e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a7e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7ee:	b29a      	uxth	r2, r3
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	4a4d      	ldr	r2, [pc, #308]	; (800a92c <HAL_I2C_Mem_Write+0x1f0>)
 800a7f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a7fa:	88f8      	ldrh	r0, [r7, #6]
 800a7fc:	893a      	ldrh	r2, [r7, #8]
 800a7fe:	8979      	ldrh	r1, [r7, #10]
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	9301      	str	r3, [sp, #4]
 800a804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a806:	9300      	str	r3, [sp, #0]
 800a808:	4603      	mov	r3, r0
 800a80a:	68f8      	ldr	r0, [r7, #12]
 800a80c:	f000 faec 	bl	800ade8 <I2C_RequestMemoryWrite>
 800a810:	4603      	mov	r3, r0
 800a812:	2b00      	cmp	r3, #0
 800a814:	d052      	beq.n	800a8bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a816:	2301      	movs	r3, #1
 800a818:	e081      	b.n	800a91e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a81a:	697a      	ldr	r2, [r7, #20]
 800a81c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a81e:	68f8      	ldr	r0, [r7, #12]
 800a820:	f000 fd36 	bl	800b290 <I2C_WaitOnTXEFlagUntilTimeout>
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	d00d      	beq.n	800a846 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a82e:	2b04      	cmp	r3, #4
 800a830:	d107      	bne.n	800a842 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	681a      	ldr	r2, [r3, #0]
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a840:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a842:	2301      	movs	r3, #1
 800a844:	e06b      	b.n	800a91e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a84a:	781a      	ldrb	r2, [r3, #0]
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a856:	1c5a      	adds	r2, r3, #1
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a860:	3b01      	subs	r3, #1
 800a862:	b29a      	uxth	r2, r3
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a86c:	b29b      	uxth	r3, r3
 800a86e:	3b01      	subs	r3, #1
 800a870:	b29a      	uxth	r2, r3
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	695b      	ldr	r3, [r3, #20]
 800a87c:	f003 0304 	and.w	r3, r3, #4
 800a880:	2b04      	cmp	r3, #4
 800a882:	d11b      	bne.n	800a8bc <HAL_I2C_Mem_Write+0x180>
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d017      	beq.n	800a8bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a890:	781a      	ldrb	r2, [r3, #0]
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a89c:	1c5a      	adds	r2, r3, #1
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8a6:	3b01      	subs	r3, #1
 800a8a8:	b29a      	uxth	r2, r3
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	3b01      	subs	r3, #1
 800a8b6:	b29a      	uxth	r2, r3
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d1aa      	bne.n	800a81a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a8c4:	697a      	ldr	r2, [r7, #20]
 800a8c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a8c8:	68f8      	ldr	r0, [r7, #12]
 800a8ca:	f000 fd22 	bl	800b312 <I2C_WaitOnBTFFlagUntilTimeout>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d00d      	beq.n	800a8f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d8:	2b04      	cmp	r3, #4
 800a8da:	d107      	bne.n	800a8ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e016      	b.n	800a91e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	681a      	ldr	r2, [r3, #0]
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2220      	movs	r2, #32
 800a904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2200      	movs	r2, #0
 800a90c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2200      	movs	r2, #0
 800a914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a918:	2300      	movs	r3, #0
 800a91a:	e000      	b.n	800a91e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a91c:	2302      	movs	r3, #2
  }
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3718      	adds	r7, #24
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
 800a926:	bf00      	nop
 800a928:	00100002 	.word	0x00100002
 800a92c:	ffff0000 	.word	0xffff0000

0800a930 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b08c      	sub	sp, #48	; 0x30
 800a934:	af02      	add	r7, sp, #8
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	4608      	mov	r0, r1
 800a93a:	4611      	mov	r1, r2
 800a93c:	461a      	mov	r2, r3
 800a93e:	4603      	mov	r3, r0
 800a940:	817b      	strh	r3, [r7, #10]
 800a942:	460b      	mov	r3, r1
 800a944:	813b      	strh	r3, [r7, #8]
 800a946:	4613      	mov	r3, r2
 800a948:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a94a:	f7ff f807 	bl	800995c <HAL_GetTick>
 800a94e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a956:	b2db      	uxtb	r3, r3
 800a958:	2b20      	cmp	r3, #32
 800a95a:	f040 8208 	bne.w	800ad6e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a960:	9300      	str	r3, [sp, #0]
 800a962:	2319      	movs	r3, #25
 800a964:	2201      	movs	r2, #1
 800a966:	497b      	ldr	r1, [pc, #492]	; (800ab54 <HAL_I2C_Mem_Read+0x224>)
 800a968:	68f8      	ldr	r0, [r7, #12]
 800a96a:	f000 fbbb 	bl	800b0e4 <I2C_WaitOnFlagUntilTimeout>
 800a96e:	4603      	mov	r3, r0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d001      	beq.n	800a978 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800a974:	2302      	movs	r3, #2
 800a976:	e1fb      	b.n	800ad70 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d101      	bne.n	800a986 <HAL_I2C_Mem_Read+0x56>
 800a982:	2302      	movs	r3, #2
 800a984:	e1f4      	b.n	800ad70 <HAL_I2C_Mem_Read+0x440>
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2201      	movs	r2, #1
 800a98a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f003 0301 	and.w	r3, r3, #1
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d007      	beq.n	800a9ac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f042 0201 	orr.w	r2, r2, #1
 800a9aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	681a      	ldr	r2, [r3, #0]
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a9ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2222      	movs	r2, #34	; 0x22
 800a9c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	2240      	movs	r2, #64	; 0x40
 800a9c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a9dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9e2:	b29a      	uxth	r2, r3
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	4a5b      	ldr	r2, [pc, #364]	; (800ab58 <HAL_I2C_Mem_Read+0x228>)
 800a9ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a9ee:	88f8      	ldrh	r0, [r7, #6]
 800a9f0:	893a      	ldrh	r2, [r7, #8]
 800a9f2:	8979      	ldrh	r1, [r7, #10]
 800a9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f6:	9301      	str	r3, [sp, #4]
 800a9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9fa:	9300      	str	r3, [sp, #0]
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	68f8      	ldr	r0, [r7, #12]
 800aa00:	f000 fa88 	bl	800af14 <I2C_RequestMemoryRead>
 800aa04:	4603      	mov	r3, r0
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d001      	beq.n	800aa0e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	e1b0      	b.n	800ad70 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d113      	bne.n	800aa3e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa16:	2300      	movs	r3, #0
 800aa18:	623b      	str	r3, [r7, #32]
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	695b      	ldr	r3, [r3, #20]
 800aa20:	623b      	str	r3, [r7, #32]
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	699b      	ldr	r3, [r3, #24]
 800aa28:	623b      	str	r3, [r7, #32]
 800aa2a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa3a:	601a      	str	r2, [r3, #0]
 800aa3c:	e184      	b.n	800ad48 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d11b      	bne.n	800aa7e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	681a      	ldr	r2, [r3, #0]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa56:	2300      	movs	r3, #0
 800aa58:	61fb      	str	r3, [r7, #28]
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	695b      	ldr	r3, [r3, #20]
 800aa60:	61fb      	str	r3, [r7, #28]
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	699b      	ldr	r3, [r3, #24]
 800aa68:	61fb      	str	r3, [r7, #28]
 800aa6a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	681a      	ldr	r2, [r3, #0]
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa7a:	601a      	str	r2, [r3, #0]
 800aa7c:	e164      	b.n	800ad48 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa82:	2b02      	cmp	r3, #2
 800aa84:	d11b      	bne.n	800aabe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa94:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aaa4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	61bb      	str	r3, [r7, #24]
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	695b      	ldr	r3, [r3, #20]
 800aab0:	61bb      	str	r3, [r7, #24]
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	699b      	ldr	r3, [r3, #24]
 800aab8:	61bb      	str	r3, [r7, #24]
 800aaba:	69bb      	ldr	r3, [r7, #24]
 800aabc:	e144      	b.n	800ad48 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aabe:	2300      	movs	r3, #0
 800aac0:	617b      	str	r3, [r7, #20]
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	695b      	ldr	r3, [r3, #20]
 800aac8:	617b      	str	r3, [r7, #20]
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	699b      	ldr	r3, [r3, #24]
 800aad0:	617b      	str	r3, [r7, #20]
 800aad2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800aad4:	e138      	b.n	800ad48 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aada:	2b03      	cmp	r3, #3
 800aadc:	f200 80f1 	bhi.w	800acc2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	d123      	bne.n	800ab30 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aaec:	68f8      	ldr	r0, [r7, #12]
 800aaee:	f000 fc51 	bl	800b394 <I2C_WaitOnRXNEFlagUntilTimeout>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d001      	beq.n	800aafc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800aaf8:	2301      	movs	r3, #1
 800aafa:	e139      	b.n	800ad70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	691a      	ldr	r2, [r3, #16]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab06:	b2d2      	uxtb	r2, r2
 800ab08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab0e:	1c5a      	adds	r2, r3, #1
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab18:	3b01      	subs	r3, #1
 800ab1a:	b29a      	uxth	r2, r3
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	3b01      	subs	r3, #1
 800ab28:	b29a      	uxth	r2, r3
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ab2e:	e10b      	b.n	800ad48 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab34:	2b02      	cmp	r3, #2
 800ab36:	d14e      	bne.n	800abd6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ab38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3a:	9300      	str	r3, [sp, #0]
 800ab3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab3e:	2200      	movs	r2, #0
 800ab40:	4906      	ldr	r1, [pc, #24]	; (800ab5c <HAL_I2C_Mem_Read+0x22c>)
 800ab42:	68f8      	ldr	r0, [r7, #12]
 800ab44:	f000 face 	bl	800b0e4 <I2C_WaitOnFlagUntilTimeout>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d008      	beq.n	800ab60 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	e10e      	b.n	800ad70 <HAL_I2C_Mem_Read+0x440>
 800ab52:	bf00      	nop
 800ab54:	00100002 	.word	0x00100002
 800ab58:	ffff0000 	.word	0xffff0000
 800ab5c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	681a      	ldr	r2, [r3, #0]
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	691a      	ldr	r2, [r3, #16]
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab7a:	b2d2      	uxtb	r2, r2
 800ab7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab82:	1c5a      	adds	r2, r3, #1
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab8c:	3b01      	subs	r3, #1
 800ab8e:	b29a      	uxth	r2, r3
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	3b01      	subs	r3, #1
 800ab9c:	b29a      	uxth	r2, r3
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	691a      	ldr	r2, [r3, #16]
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abac:	b2d2      	uxtb	r2, r2
 800abae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abb4:	1c5a      	adds	r2, r3, #1
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abbe:	3b01      	subs	r3, #1
 800abc0:	b29a      	uxth	r2, r3
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abca:	b29b      	uxth	r3, r3
 800abcc:	3b01      	subs	r3, #1
 800abce:	b29a      	uxth	r2, r3
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800abd4:	e0b8      	b.n	800ad48 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800abd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd8:	9300      	str	r3, [sp, #0]
 800abda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abdc:	2200      	movs	r2, #0
 800abde:	4966      	ldr	r1, [pc, #408]	; (800ad78 <HAL_I2C_Mem_Read+0x448>)
 800abe0:	68f8      	ldr	r0, [r7, #12]
 800abe2:	f000 fa7f 	bl	800b0e4 <I2C_WaitOnFlagUntilTimeout>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d001      	beq.n	800abf0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800abec:	2301      	movs	r3, #1
 800abee:	e0bf      	b.n	800ad70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800abfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	691a      	ldr	r2, [r3, #16]
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac0a:	b2d2      	uxtb	r2, r2
 800ac0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac12:	1c5a      	adds	r2, r3, #1
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac1c:	3b01      	subs	r3, #1
 800ac1e:	b29a      	uxth	r2, r3
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	b29a      	uxth	r2, r3
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ac32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac34:	9300      	str	r3, [sp, #0]
 800ac36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac38:	2200      	movs	r2, #0
 800ac3a:	494f      	ldr	r1, [pc, #316]	; (800ad78 <HAL_I2C_Mem_Read+0x448>)
 800ac3c:	68f8      	ldr	r0, [r7, #12]
 800ac3e:	f000 fa51 	bl	800b0e4 <I2C_WaitOnFlagUntilTimeout>
 800ac42:	4603      	mov	r3, r0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d001      	beq.n	800ac4c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e091      	b.n	800ad70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	681a      	ldr	r2, [r3, #0]
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	691a      	ldr	r2, [r3, #16]
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac66:	b2d2      	uxtb	r2, r2
 800ac68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac6e:	1c5a      	adds	r2, r3, #1
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac78:	3b01      	subs	r3, #1
 800ac7a:	b29a      	uxth	r2, r3
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	3b01      	subs	r3, #1
 800ac88:	b29a      	uxth	r2, r3
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	691a      	ldr	r2, [r3, #16]
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac98:	b2d2      	uxtb	r2, r2
 800ac9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca0:	1c5a      	adds	r2, r3, #1
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acaa:	3b01      	subs	r3, #1
 800acac:	b29a      	uxth	r2, r3
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	3b01      	subs	r3, #1
 800acba:	b29a      	uxth	r2, r3
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 800acc0:	e042      	b.n	800ad48 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800acc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acc4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800acc6:	68f8      	ldr	r0, [r7, #12]
 800acc8:	f000 fb64 	bl	800b394 <I2C_WaitOnRXNEFlagUntilTimeout>
 800accc:	4603      	mov	r3, r0
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d001      	beq.n	800acd6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800acd2:	2301      	movs	r3, #1
 800acd4:	e04c      	b.n	800ad70 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	691a      	ldr	r2, [r3, #16]
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace0:	b2d2      	uxtb	r2, r2
 800ace2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace8:	1c5a      	adds	r2, r3, #1
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acf2:	3b01      	subs	r3, #1
 800acf4:	b29a      	uxth	r2, r3
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	3b01      	subs	r3, #1
 800ad02:	b29a      	uxth	r2, r3
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	695b      	ldr	r3, [r3, #20]
 800ad0e:	f003 0304 	and.w	r3, r3, #4
 800ad12:	2b04      	cmp	r3, #4
 800ad14:	d118      	bne.n	800ad48 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	691a      	ldr	r2, [r3, #16]
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad20:	b2d2      	uxtb	r2, r2
 800ad22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad28:	1c5a      	adds	r2, r3, #1
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad32:	3b01      	subs	r3, #1
 800ad34:	b29a      	uxth	r2, r3
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad3e:	b29b      	uxth	r3, r3
 800ad40:	3b01      	subs	r3, #1
 800ad42:	b29a      	uxth	r2, r3
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	f47f aec2 	bne.w	800aad6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2220      	movs	r2, #32
 800ad56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2200      	movs	r2, #0
 800ad66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	e000      	b.n	800ad70 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800ad6e:	2302      	movs	r3, #2
  }
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3728      	adds	r7, #40	; 0x28
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}
 800ad78:	00010004 	.word	0x00010004

0800ad7c <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b083      	sub	sp, #12
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	2b20      	cmp	r3, #32
 800ad8e:	d124      	bne.n	800adda <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2228      	movs	r2, #40	; 0x28
 800ad94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f003 0301 	and.w	r3, r3, #1
 800ada2:	2b01      	cmp	r3, #1
 800ada4:	d007      	beq.n	800adb6 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	681a      	ldr	r2, [r3, #0]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f042 0201 	orr.w	r2, r2, #1
 800adb4:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800adc4:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	685a      	ldr	r2, [r3, #4]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800add4:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800add6:	2300      	movs	r3, #0
 800add8:	e000      	b.n	800addc <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800adda:	2302      	movs	r3, #2
  }
}
 800addc:	4618      	mov	r0, r3
 800adde:	370c      	adds	r7, #12
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr

0800ade8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b088      	sub	sp, #32
 800adec:	af02      	add	r7, sp, #8
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	4608      	mov	r0, r1
 800adf2:	4611      	mov	r1, r2
 800adf4:	461a      	mov	r2, r3
 800adf6:	4603      	mov	r3, r0
 800adf8:	817b      	strh	r3, [r7, #10]
 800adfa:	460b      	mov	r3, r1
 800adfc:	813b      	strh	r3, [r7, #8]
 800adfe:	4613      	mov	r3, r2
 800ae00:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ae10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ae12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae14:	9300      	str	r3, [sp, #0]
 800ae16:	6a3b      	ldr	r3, [r7, #32]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ae1e:	68f8      	ldr	r0, [r7, #12]
 800ae20:	f000 f960 	bl	800b0e4 <I2C_WaitOnFlagUntilTimeout>
 800ae24:	4603      	mov	r3, r0
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d00d      	beq.n	800ae46 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae38:	d103      	bne.n	800ae42 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ae42:	2303      	movs	r3, #3
 800ae44:	e05f      	b.n	800af06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ae46:	897b      	ldrh	r3, [r7, #10]
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ae54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ae56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae58:	6a3a      	ldr	r2, [r7, #32]
 800ae5a:	492d      	ldr	r1, [pc, #180]	; (800af10 <I2C_RequestMemoryWrite+0x128>)
 800ae5c:	68f8      	ldr	r0, [r7, #12]
 800ae5e:	f000 f998 	bl	800b192 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ae62:	4603      	mov	r3, r0
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d001      	beq.n	800ae6c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	e04c      	b.n	800af06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	617b      	str	r3, [r7, #20]
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	695b      	ldr	r3, [r3, #20]
 800ae76:	617b      	str	r3, [r7, #20]
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	699b      	ldr	r3, [r3, #24]
 800ae7e:	617b      	str	r3, [r7, #20]
 800ae80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae84:	6a39      	ldr	r1, [r7, #32]
 800ae86:	68f8      	ldr	r0, [r7, #12]
 800ae88:	f000 fa02 	bl	800b290 <I2C_WaitOnTXEFlagUntilTimeout>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d00d      	beq.n	800aeae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae96:	2b04      	cmp	r3, #4
 800ae98:	d107      	bne.n	800aeaa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aea8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800aeaa:	2301      	movs	r3, #1
 800aeac:	e02b      	b.n	800af06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aeae:	88fb      	ldrh	r3, [r7, #6]
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d105      	bne.n	800aec0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aeb4:	893b      	ldrh	r3, [r7, #8]
 800aeb6:	b2da      	uxtb	r2, r3
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	611a      	str	r2, [r3, #16]
 800aebe:	e021      	b.n	800af04 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800aec0:	893b      	ldrh	r3, [r7, #8]
 800aec2:	0a1b      	lsrs	r3, r3, #8
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	b2da      	uxtb	r2, r3
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aed0:	6a39      	ldr	r1, [r7, #32]
 800aed2:	68f8      	ldr	r0, [r7, #12]
 800aed4:	f000 f9dc 	bl	800b290 <I2C_WaitOnTXEFlagUntilTimeout>
 800aed8:	4603      	mov	r3, r0
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d00d      	beq.n	800aefa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aee2:	2b04      	cmp	r3, #4
 800aee4:	d107      	bne.n	800aef6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aef4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800aef6:	2301      	movs	r3, #1
 800aef8:	e005      	b.n	800af06 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aefa:	893b      	ldrh	r3, [r7, #8]
 800aefc:	b2da      	uxtb	r2, r3
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800af04:	2300      	movs	r3, #0
}
 800af06:	4618      	mov	r0, r3
 800af08:	3718      	adds	r7, #24
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	00010002 	.word	0x00010002

0800af14 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b088      	sub	sp, #32
 800af18:	af02      	add	r7, sp, #8
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	4608      	mov	r0, r1
 800af1e:	4611      	mov	r1, r2
 800af20:	461a      	mov	r2, r3
 800af22:	4603      	mov	r3, r0
 800af24:	817b      	strh	r3, [r7, #10]
 800af26:	460b      	mov	r3, r1
 800af28:	813b      	strh	r3, [r7, #8]
 800af2a:	4613      	mov	r3, r2
 800af2c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	681a      	ldr	r2, [r3, #0]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800af3c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800af4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af50:	9300      	str	r3, [sp, #0]
 800af52:	6a3b      	ldr	r3, [r7, #32]
 800af54:	2200      	movs	r2, #0
 800af56:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800af5a:	68f8      	ldr	r0, [r7, #12]
 800af5c:	f000 f8c2 	bl	800b0e4 <I2C_WaitOnFlagUntilTimeout>
 800af60:	4603      	mov	r3, r0
 800af62:	2b00      	cmp	r3, #0
 800af64:	d00d      	beq.n	800af82 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af74:	d103      	bne.n	800af7e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af7c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800af7e:	2303      	movs	r3, #3
 800af80:	e0aa      	b.n	800b0d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800af82:	897b      	ldrh	r3, [r7, #10]
 800af84:	b2db      	uxtb	r3, r3
 800af86:	461a      	mov	r2, r3
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800af90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800af92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af94:	6a3a      	ldr	r2, [r7, #32]
 800af96:	4952      	ldr	r1, [pc, #328]	; (800b0e0 <I2C_RequestMemoryRead+0x1cc>)
 800af98:	68f8      	ldr	r0, [r7, #12]
 800af9a:	f000 f8fa 	bl	800b192 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d001      	beq.n	800afa8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800afa4:	2301      	movs	r3, #1
 800afa6:	e097      	b.n	800b0d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800afa8:	2300      	movs	r3, #0
 800afaa:	617b      	str	r3, [r7, #20]
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	695b      	ldr	r3, [r3, #20]
 800afb2:	617b      	str	r3, [r7, #20]
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	699b      	ldr	r3, [r3, #24]
 800afba:	617b      	str	r3, [r7, #20]
 800afbc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800afbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afc0:	6a39      	ldr	r1, [r7, #32]
 800afc2:	68f8      	ldr	r0, [r7, #12]
 800afc4:	f000 f964 	bl	800b290 <I2C_WaitOnTXEFlagUntilTimeout>
 800afc8:	4603      	mov	r3, r0
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d00d      	beq.n	800afea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afd2:	2b04      	cmp	r3, #4
 800afd4:	d107      	bne.n	800afe6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800afe4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800afe6:	2301      	movs	r3, #1
 800afe8:	e076      	b.n	800b0d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800afea:	88fb      	ldrh	r3, [r7, #6]
 800afec:	2b01      	cmp	r3, #1
 800afee:	d105      	bne.n	800affc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aff0:	893b      	ldrh	r3, [r7, #8]
 800aff2:	b2da      	uxtb	r2, r3
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	611a      	str	r2, [r3, #16]
 800affa:	e021      	b.n	800b040 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800affc:	893b      	ldrh	r3, [r7, #8]
 800affe:	0a1b      	lsrs	r3, r3, #8
 800b000:	b29b      	uxth	r3, r3
 800b002:	b2da      	uxtb	r2, r3
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b00a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b00c:	6a39      	ldr	r1, [r7, #32]
 800b00e:	68f8      	ldr	r0, [r7, #12]
 800b010:	f000 f93e 	bl	800b290 <I2C_WaitOnTXEFlagUntilTimeout>
 800b014:	4603      	mov	r3, r0
 800b016:	2b00      	cmp	r3, #0
 800b018:	d00d      	beq.n	800b036 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b01e:	2b04      	cmp	r3, #4
 800b020:	d107      	bne.n	800b032 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	681a      	ldr	r2, [r3, #0]
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b030:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b032:	2301      	movs	r3, #1
 800b034:	e050      	b.n	800b0d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b036:	893b      	ldrh	r3, [r7, #8]
 800b038:	b2da      	uxtb	r2, r3
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b042:	6a39      	ldr	r1, [r7, #32]
 800b044:	68f8      	ldr	r0, [r7, #12]
 800b046:	f000 f923 	bl	800b290 <I2C_WaitOnTXEFlagUntilTimeout>
 800b04a:	4603      	mov	r3, r0
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d00d      	beq.n	800b06c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b054:	2b04      	cmp	r3, #4
 800b056:	d107      	bne.n	800b068 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b066:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b068:	2301      	movs	r3, #1
 800b06a:	e035      	b.n	800b0d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	681a      	ldr	r2, [r3, #0]
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b07a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07e:	9300      	str	r3, [sp, #0]
 800b080:	6a3b      	ldr	r3, [r7, #32]
 800b082:	2200      	movs	r2, #0
 800b084:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b088:	68f8      	ldr	r0, [r7, #12]
 800b08a:	f000 f82b 	bl	800b0e4 <I2C_WaitOnFlagUntilTimeout>
 800b08e:	4603      	mov	r3, r0
 800b090:	2b00      	cmp	r3, #0
 800b092:	d00d      	beq.n	800b0b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b09e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0a2:	d103      	bne.n	800b0ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b0aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b0ac:	2303      	movs	r3, #3
 800b0ae:	e013      	b.n	800b0d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b0b0:	897b      	ldrh	r3, [r7, #10]
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	f043 0301 	orr.w	r3, r3, #1
 800b0b8:	b2da      	uxtb	r2, r3
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c2:	6a3a      	ldr	r2, [r7, #32]
 800b0c4:	4906      	ldr	r1, [pc, #24]	; (800b0e0 <I2C_RequestMemoryRead+0x1cc>)
 800b0c6:	68f8      	ldr	r0, [r7, #12]
 800b0c8:	f000 f863 	bl	800b192 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d001      	beq.n	800b0d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e000      	b.n	800b0d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b0d6:	2300      	movs	r3, #0
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3718      	adds	r7, #24
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	00010002 	.word	0x00010002

0800b0e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b084      	sub	sp, #16
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	603b      	str	r3, [r7, #0]
 800b0f0:	4613      	mov	r3, r2
 800b0f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b0f4:	e025      	b.n	800b142 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0fc:	d021      	beq.n	800b142 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0fe:	f7fe fc2d 	bl	800995c <HAL_GetTick>
 800b102:	4602      	mov	r2, r0
 800b104:	69bb      	ldr	r3, [r7, #24]
 800b106:	1ad3      	subs	r3, r2, r3
 800b108:	683a      	ldr	r2, [r7, #0]
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d302      	bcc.n	800b114 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d116      	bne.n	800b142 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2200      	movs	r2, #0
 800b118:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2220      	movs	r2, #32
 800b11e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2200      	movs	r2, #0
 800b126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b12e:	f043 0220 	orr.w	r2, r3, #32
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2200      	movs	r2, #0
 800b13a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b13e:	2301      	movs	r3, #1
 800b140:	e023      	b.n	800b18a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	0c1b      	lsrs	r3, r3, #16
 800b146:	b2db      	uxtb	r3, r3
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d10d      	bne.n	800b168 <I2C_WaitOnFlagUntilTimeout+0x84>
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	695b      	ldr	r3, [r3, #20]
 800b152:	43da      	mvns	r2, r3
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	4013      	ands	r3, r2
 800b158:	b29b      	uxth	r3, r3
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	bf0c      	ite	eq
 800b15e:	2301      	moveq	r3, #1
 800b160:	2300      	movne	r3, #0
 800b162:	b2db      	uxtb	r3, r3
 800b164:	461a      	mov	r2, r3
 800b166:	e00c      	b.n	800b182 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	699b      	ldr	r3, [r3, #24]
 800b16e:	43da      	mvns	r2, r3
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	4013      	ands	r3, r2
 800b174:	b29b      	uxth	r3, r3
 800b176:	2b00      	cmp	r3, #0
 800b178:	bf0c      	ite	eq
 800b17a:	2301      	moveq	r3, #1
 800b17c:	2300      	movne	r3, #0
 800b17e:	b2db      	uxtb	r3, r3
 800b180:	461a      	mov	r2, r3
 800b182:	79fb      	ldrb	r3, [r7, #7]
 800b184:	429a      	cmp	r2, r3
 800b186:	d0b6      	beq.n	800b0f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b188:	2300      	movs	r3, #0
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3710      	adds	r7, #16
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}

0800b192 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b192:	b580      	push	{r7, lr}
 800b194:	b084      	sub	sp, #16
 800b196:	af00      	add	r7, sp, #0
 800b198:	60f8      	str	r0, [r7, #12]
 800b19a:	60b9      	str	r1, [r7, #8]
 800b19c:	607a      	str	r2, [r7, #4]
 800b19e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b1a0:	e051      	b.n	800b246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	695b      	ldr	r3, [r3, #20]
 800b1a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1b0:	d123      	bne.n	800b1fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	681a      	ldr	r2, [r3, #0]
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b1c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b1ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	2220      	movs	r2, #32
 800b1d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e6:	f043 0204 	orr.w	r2, r3, #4
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e046      	b.n	800b288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b200:	d021      	beq.n	800b246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b202:	f7fe fbab 	bl	800995c <HAL_GetTick>
 800b206:	4602      	mov	r2, r0
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	1ad3      	subs	r3, r2, r3
 800b20c:	687a      	ldr	r2, [r7, #4]
 800b20e:	429a      	cmp	r2, r3
 800b210:	d302      	bcc.n	800b218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d116      	bne.n	800b246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2200      	movs	r2, #0
 800b21c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2220      	movs	r2, #32
 800b222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2200      	movs	r2, #0
 800b22a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b232:	f043 0220 	orr.w	r2, r3, #32
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2200      	movs	r2, #0
 800b23e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b242:	2301      	movs	r3, #1
 800b244:	e020      	b.n	800b288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	0c1b      	lsrs	r3, r3, #16
 800b24a:	b2db      	uxtb	r3, r3
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d10c      	bne.n	800b26a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	695b      	ldr	r3, [r3, #20]
 800b256:	43da      	mvns	r2, r3
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	4013      	ands	r3, r2
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	2b00      	cmp	r3, #0
 800b260:	bf14      	ite	ne
 800b262:	2301      	movne	r3, #1
 800b264:	2300      	moveq	r3, #0
 800b266:	b2db      	uxtb	r3, r3
 800b268:	e00b      	b.n	800b282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	699b      	ldr	r3, [r3, #24]
 800b270:	43da      	mvns	r2, r3
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	4013      	ands	r3, r2
 800b276:	b29b      	uxth	r3, r3
 800b278:	2b00      	cmp	r3, #0
 800b27a:	bf14      	ite	ne
 800b27c:	2301      	movne	r3, #1
 800b27e:	2300      	moveq	r3, #0
 800b280:	b2db      	uxtb	r3, r3
 800b282:	2b00      	cmp	r3, #0
 800b284:	d18d      	bne.n	800b1a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800b286:	2300      	movs	r3, #0
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3710      	adds	r7, #16
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	60f8      	str	r0, [r7, #12]
 800b298:	60b9      	str	r1, [r7, #8]
 800b29a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b29c:	e02d      	b.n	800b2fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b29e:	68f8      	ldr	r0, [r7, #12]
 800b2a0:	f000 f8ce 	bl	800b440 <I2C_IsAcknowledgeFailed>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d001      	beq.n	800b2ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	e02d      	b.n	800b30a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2b4:	d021      	beq.n	800b2fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2b6:	f7fe fb51 	bl	800995c <HAL_GetTick>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	1ad3      	subs	r3, r2, r3
 800b2c0:	68ba      	ldr	r2, [r7, #8]
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d302      	bcc.n	800b2cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d116      	bne.n	800b2fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2220      	movs	r2, #32
 800b2d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2e6:	f043 0220 	orr.w	r2, r3, #32
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	e007      	b.n	800b30a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	695b      	ldr	r3, [r3, #20]
 800b300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b304:	2b80      	cmp	r3, #128	; 0x80
 800b306:	d1ca      	bne.n	800b29e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b308:	2300      	movs	r3, #0
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3710      	adds	r7, #16
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}

0800b312 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b312:	b580      	push	{r7, lr}
 800b314:	b084      	sub	sp, #16
 800b316:	af00      	add	r7, sp, #0
 800b318:	60f8      	str	r0, [r7, #12]
 800b31a:	60b9      	str	r1, [r7, #8]
 800b31c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b31e:	e02d      	b.n	800b37c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b320:	68f8      	ldr	r0, [r7, #12]
 800b322:	f000 f88d 	bl	800b440 <I2C_IsAcknowledgeFailed>
 800b326:	4603      	mov	r3, r0
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d001      	beq.n	800b330 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b32c:	2301      	movs	r3, #1
 800b32e:	e02d      	b.n	800b38c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b336:	d021      	beq.n	800b37c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b338:	f7fe fb10 	bl	800995c <HAL_GetTick>
 800b33c:	4602      	mov	r2, r0
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	1ad3      	subs	r3, r2, r3
 800b342:	68ba      	ldr	r2, [r7, #8]
 800b344:	429a      	cmp	r2, r3
 800b346:	d302      	bcc.n	800b34e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d116      	bne.n	800b37c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2200      	movs	r2, #0
 800b352:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2220      	movs	r2, #32
 800b358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	2200      	movs	r2, #0
 800b360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b368:	f043 0220 	orr.w	r2, r3, #32
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2200      	movs	r2, #0
 800b374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b378:	2301      	movs	r3, #1
 800b37a:	e007      	b.n	800b38c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	695b      	ldr	r3, [r3, #20]
 800b382:	f003 0304 	and.w	r3, r3, #4
 800b386:	2b04      	cmp	r3, #4
 800b388:	d1ca      	bne.n	800b320 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b38a:	2300      	movs	r3, #0
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3710      	adds	r7, #16
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	60b9      	str	r1, [r7, #8]
 800b39e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b3a0:	e042      	b.n	800b428 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	695b      	ldr	r3, [r3, #20]
 800b3a8:	f003 0310 	and.w	r3, r3, #16
 800b3ac:	2b10      	cmp	r3, #16
 800b3ae:	d119      	bne.n	800b3e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f06f 0210 	mvn.w	r2, #16
 800b3b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2220      	movs	r2, #32
 800b3c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	e029      	b.n	800b438 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b3e4:	f7fe faba 	bl	800995c <HAL_GetTick>
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	1ad3      	subs	r3, r2, r3
 800b3ee:	68ba      	ldr	r2, [r7, #8]
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	d302      	bcc.n	800b3fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d116      	bne.n	800b428 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	2220      	movs	r2, #32
 800b404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2200      	movs	r2, #0
 800b40c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b414:	f043 0220 	orr.w	r2, r3, #32
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2200      	movs	r2, #0
 800b420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b424:	2301      	movs	r3, #1
 800b426:	e007      	b.n	800b438 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	695b      	ldr	r3, [r3, #20]
 800b42e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b432:	2b40      	cmp	r3, #64	; 0x40
 800b434:	d1b5      	bne.n	800b3a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b436:	2300      	movs	r3, #0
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3710      	adds	r7, #16
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b440:	b480      	push	{r7}
 800b442:	b083      	sub	sp, #12
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	695b      	ldr	r3, [r3, #20]
 800b44e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b456:	d11b      	bne.n	800b490 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b460:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2200      	movs	r2, #0
 800b466:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2220      	movs	r2, #32
 800b46c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b47c:	f043 0204 	orr.w	r2, r3, #4
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2200      	movs	r2, #0
 800b488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b48c:	2301      	movs	r3, #1
 800b48e:	e000      	b.n	800b492 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b490:	2300      	movs	r3, #0
}
 800b492:	4618      	mov	r0, r3
 800b494:	370c      	adds	r7, #12
 800b496:	46bd      	mov	sp, r7
 800b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49c:	4770      	bx	lr

0800b49e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b49e:	b480      	push	{r7}
 800b4a0:	b083      	sub	sp, #12
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	6078      	str	r0, [r7, #4]
 800b4a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4ae:	b2db      	uxtb	r3, r3
 800b4b0:	2b20      	cmp	r3, #32
 800b4b2:	d129      	bne.n	800b508 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2224      	movs	r2, #36	; 0x24
 800b4b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f022 0201 	bic.w	r2, r2, #1
 800b4ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f022 0210 	bic.w	r2, r2, #16
 800b4da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	683a      	ldr	r2, [r7, #0]
 800b4e8:	430a      	orrs	r2, r1
 800b4ea:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	681a      	ldr	r2, [r3, #0]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f042 0201 	orr.w	r2, r2, #1
 800b4fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2220      	movs	r2, #32
 800b500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b504:	2300      	movs	r3, #0
 800b506:	e000      	b.n	800b50a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800b508:	2302      	movs	r3, #2
  }
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	370c      	adds	r7, #12
 800b50e:	46bd      	mov	sp, r7
 800b510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b514:	4770      	bx	lr

0800b516 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b516:	b480      	push	{r7}
 800b518:	b085      	sub	sp, #20
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	6078      	str	r0, [r7, #4]
 800b51e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800b520:	2300      	movs	r3, #0
 800b522:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b52a:	b2db      	uxtb	r3, r3
 800b52c:	2b20      	cmp	r3, #32
 800b52e:	d12a      	bne.n	800b586 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2224      	movs	r2, #36	; 0x24
 800b534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	681a      	ldr	r2, [r3, #0]
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f022 0201 	bic.w	r2, r2, #1
 800b546:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b54e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800b550:	89fb      	ldrh	r3, [r7, #14]
 800b552:	f023 030f 	bic.w	r3, r3, #15
 800b556:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	b29a      	uxth	r2, r3
 800b55c:	89fb      	ldrh	r3, [r7, #14]
 800b55e:	4313      	orrs	r3, r2
 800b560:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	89fa      	ldrh	r2, [r7, #14]
 800b568:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	681a      	ldr	r2, [r3, #0]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f042 0201 	orr.w	r2, r2, #1
 800b578:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2220      	movs	r2, #32
 800b57e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b582:	2300      	movs	r3, #0
 800b584:	e000      	b.n	800b588 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800b586:	2302      	movs	r3, #2
  }
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3714      	adds	r7, #20
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 800b594:	b480      	push	{r7}
 800b596:	b083      	sub	sp, #12
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 800b59c:	4b05      	ldr	r3, [pc, #20]	; (800b5b4 <HAL_PWR_EnableWakeUpPin+0x20>)
 800b59e:	685a      	ldr	r2, [r3, #4]
 800b5a0:	4904      	ldr	r1, [pc, #16]	; (800b5b4 <HAL_PWR_EnableWakeUpPin+0x20>)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	604b      	str	r3, [r1, #4]
}
 800b5a8:	bf00      	nop
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr
 800b5b4:	40007000 	.word	0x40007000

0800b5b8 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b083      	sub	sp, #12
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 800b5c0:	4b06      	ldr	r3, [pc, #24]	; (800b5dc <HAL_PWR_DisableWakeUpPin+0x24>)
 800b5c2:	685a      	ldr	r2, [r3, #4]
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	43db      	mvns	r3, r3
 800b5c8:	4904      	ldr	r1, [pc, #16]	; (800b5dc <HAL_PWR_DisableWakeUpPin+0x24>)
 800b5ca:	4013      	ands	r3, r2
 800b5cc:	604b      	str	r3, [r1, #4]
}
 800b5ce:	bf00      	nop
 800b5d0:	370c      	adds	r7, #12
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d8:	4770      	bx	lr
 800b5da:	bf00      	nop
 800b5dc:	40007000 	.word	0x40007000

0800b5e0 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800b5e4:	4b08      	ldr	r3, [pc, #32]	; (800b608 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	4a07      	ldr	r2, [pc, #28]	; (800b608 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800b5ea:	f043 0302 	orr.w	r3, r3, #2
 800b5ee:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800b5f0:	4b06      	ldr	r3, [pc, #24]	; (800b60c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800b5f2:	691b      	ldr	r3, [r3, #16]
 800b5f4:	4a05      	ldr	r2, [pc, #20]	; (800b60c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800b5f6:	f043 0304 	orr.w	r3, r3, #4
 800b5fa:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800b5fc:	bf30      	wfi
}
 800b5fe:	bf00      	nop
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr
 800b608:	40007000 	.word	0x40007000
 800b60c:	e000ed00 	.word	0xe000ed00

0800b610 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800b616:	2300      	movs	r3, #0
 800b618:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800b61a:	2300      	movs	r3, #0
 800b61c:	603b      	str	r3, [r7, #0]
 800b61e:	4b20      	ldr	r3, [pc, #128]	; (800b6a0 <HAL_PWREx_EnableOverDrive+0x90>)
 800b620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b622:	4a1f      	ldr	r2, [pc, #124]	; (800b6a0 <HAL_PWREx_EnableOverDrive+0x90>)
 800b624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b628:	6413      	str	r3, [r2, #64]	; 0x40
 800b62a:	4b1d      	ldr	r3, [pc, #116]	; (800b6a0 <HAL_PWREx_EnableOverDrive+0x90>)
 800b62c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b62e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b632:	603b      	str	r3, [r7, #0]
 800b634:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b636:	4b1b      	ldr	r3, [pc, #108]	; (800b6a4 <HAL_PWREx_EnableOverDrive+0x94>)
 800b638:	2201      	movs	r2, #1
 800b63a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b63c:	f7fe f98e 	bl	800995c <HAL_GetTick>
 800b640:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b642:	e009      	b.n	800b658 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b644:	f7fe f98a 	bl	800995c <HAL_GetTick>
 800b648:	4602      	mov	r2, r0
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	1ad3      	subs	r3, r2, r3
 800b64e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b652:	d901      	bls.n	800b658 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800b654:	2303      	movs	r3, #3
 800b656:	e01f      	b.n	800b698 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b658:	4b13      	ldr	r3, [pc, #76]	; (800b6a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800b65a:	685b      	ldr	r3, [r3, #4]
 800b65c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b664:	d1ee      	bne.n	800b644 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b666:	4b11      	ldr	r3, [pc, #68]	; (800b6ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800b668:	2201      	movs	r2, #1
 800b66a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b66c:	f7fe f976 	bl	800995c <HAL_GetTick>
 800b670:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b672:	e009      	b.n	800b688 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b674:	f7fe f972 	bl	800995c <HAL_GetTick>
 800b678:	4602      	mov	r2, r0
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	1ad3      	subs	r3, r2, r3
 800b67e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b682:	d901      	bls.n	800b688 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800b684:	2303      	movs	r3, #3
 800b686:	e007      	b.n	800b698 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b688:	4b07      	ldr	r3, [pc, #28]	; (800b6a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b690:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b694:	d1ee      	bne.n	800b674 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800b696:	2300      	movs	r3, #0
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3708      	adds	r7, #8
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}
 800b6a0:	40023800 	.word	0x40023800
 800b6a4:	420e0040 	.word	0x420e0040
 800b6a8:	40007000 	.word	0x40007000
 800b6ac:	420e0044 	.word	0x420e0044

0800b6b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b086      	sub	sp, #24
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d101      	bne.n	800b6c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b6be:	2301      	movs	r3, #1
 800b6c0:	e264      	b.n	800bb8c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f003 0301 	and.w	r3, r3, #1
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d075      	beq.n	800b7ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b6ce:	4ba3      	ldr	r3, [pc, #652]	; (800b95c <HAL_RCC_OscConfig+0x2ac>)
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	f003 030c 	and.w	r3, r3, #12
 800b6d6:	2b04      	cmp	r3, #4
 800b6d8:	d00c      	beq.n	800b6f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b6da:	4ba0      	ldr	r3, [pc, #640]	; (800b95c <HAL_RCC_OscConfig+0x2ac>)
 800b6dc:	689b      	ldr	r3, [r3, #8]
 800b6de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b6e2:	2b08      	cmp	r3, #8
 800b6e4:	d112      	bne.n	800b70c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b6e6:	4b9d      	ldr	r3, [pc, #628]	; (800b95c <HAL_RCC_OscConfig+0x2ac>)
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b6ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b6f2:	d10b      	bne.n	800b70c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b6f4:	4b99      	ldr	r3, [pc, #612]	; (800b95c <HAL_RCC_OscConfig+0x2ac>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d05b      	beq.n	800b7b8 <HAL_RCC_OscConfig+0x108>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d157      	bne.n	800b7b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b708:	2301      	movs	r3, #1
 800b70a:	e23f      	b.n	800bb8c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b714:	d106      	bne.n	800b724 <HAL_RCC_OscConfig+0x74>
 800b716:	4b91      	ldr	r3, [pc, #580]	; (800b95c <HAL_RCC_OscConfig+0x2ac>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	4a90      	ldr	r2, [pc, #576]	; (800b95c <HAL_RCC_OscConfig+0x2ac>)
 800b71c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b720:	6013      	str	r3, [r2, #0]
 800b722:	e01d      	b.n	800b760 <HAL_RCC_OscConfig+0xb0>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b72c:	d10c      	bne.n	800b748 <HAL_RCC_OscConfig+0x98>
 800b72e:	4b8b      	ldr	r3, [pc, #556]	; (800b95c <HAL_RCC_OscConfig+0x2ac>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	4a8a      	ldr	r2, [pc, #552]	; (800b95c <HAL_RCC_OscConfig+0x2ac>)
 800b734:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b738:	6013      	str	r3, [r2, #0]
 800b73a:	4b88      	ldr	r3, [pc, #544]	; (800b95c <HAL_RCC_OscConfig+0x2ac>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	4a87      	ldr	r2, [pc, #540]	; (800b95c <HAL_RCC_OscConfig+0x2ac>)
 800b740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b744:	6013      	str	r3, [r2, #0]
 800b746:	e00b      	b.n	800b760 <HAL_RCC_OscConfig+0xb0>
 800b748:	4b84      	ldr	r3, [pc, #528]	; (800b95c <HAL_RCC_OscConfig+0x2ac>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	4a83      	ldr	r2, [pc, #524]	; (800b95c <HAL_RCC_OscConfig+0x2ac>)
 800b74e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b752:	6013      	str	r3, [r2, #0]
 800b754:	4b81      	ldr	r3, [pc, #516]	; (800b95c <HAL_RCC_OscConfig+0x2ac>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4a80      	ldr	r2, [pc, #512]	; (800b95c <HAL_RCC_OscConfig+0x2ac>)
 800b75a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b75e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d013      	beq.n	800b790 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b768:	f7fe f8f8 	bl	800995c <HAL_GetTick>
 800b76c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b76e:	e008      	b.n	800b782 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b770:	f7fe f8f4 	bl	800995c <HAL_GetTick>
 800b774:	4602      	mov	r2, r0
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	1ad3      	subs	r3, r2, r3
 800b77a:	2b64      	cmp	r3, #100	; 0x64
 800b77c:	d901      	bls.n	800b782 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b77e:	2303      	movs	r3, #3
 800b780:	e204      	b.n	800bb8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b782:	4b76      	ldr	r3, [pc, #472]	; (800b95c <HAL_RCC_OscConfig+0x2ac>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d0f0      	beq.n	800b770 <HAL_RCC_OscConfig+0xc0>
 800b78e:	e014      	b.n	800b7ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b790:	f7fe f8e4 	bl	800995c <HAL_GetTick>
 800b794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b796:	e008      	b.n	800b7aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b798:	f7fe f8e0 	bl	800995c <HAL_GetTick>
 800b79c:	4602      	mov	r2, r0
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	1ad3      	subs	r3, r2, r3
 800b7a2:	2b64      	cmp	r3, #100	; 0x64
 800b7a4:	d901      	bls.n	800b7aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b7a6:	2303      	movs	r3, #3
 800b7a8:	e1f0      	b.n	800bb8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b7aa:	4b6c      	ldr	r3, [pc, #432]	; (800b95c <HAL_RCC_OscConfig+0x2ac>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d1f0      	bne.n	800b798 <HAL_RCC_OscConfig+0xe8>
 800b7b6:	e000      	b.n	800b7ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b7b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f003 0302 	and.w	r3, r3, #2
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d063      	beq.n	800b88e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b7c6:	4b65      	ldr	r3, [pc, #404]	; (800b95c <HAL_RCC_OscConfig+0x2ac>)
 800b7c8:	689b      	ldr	r3, [r3, #8]
 800b7ca:	f003 030c 	and.w	r3, r3, #12
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d00b      	beq.n	800b7ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b7d2:	4b62      	ldr	r3, [pc, #392]	; (800b95c <HAL_RCC_OscConfig+0x2ac>)
 800b7d4:	689b      	ldr	r3, [r3, #8]
 800b7d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b7da:	2b08      	cmp	r3, #8
 800b7dc:	d11c      	bne.n	800b818 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b7de:	4b5f      	ldr	r3, [pc, #380]	; (800b95c <HAL_RCC_OscConfig+0x2ac>)
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d116      	bne.n	800b818 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b7ea:	4b5c      	ldr	r3, [pc, #368]	; (800b95c <HAL_RCC_OscConfig+0x2ac>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f003 0302 	and.w	r3, r3, #2
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d005      	beq.n	800b802 <HAL_RCC_OscConfig+0x152>
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	2b01      	cmp	r3, #1
 800b7fc:	d001      	beq.n	800b802 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b7fe:	2301      	movs	r3, #1
 800b800:	e1c4      	b.n	800bb8c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b802:	4b56      	ldr	r3, [pc, #344]	; (800b95c <HAL_RCC_OscConfig+0x2ac>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	691b      	ldr	r3, [r3, #16]
 800b80e:	00db      	lsls	r3, r3, #3
 800b810:	4952      	ldr	r1, [pc, #328]	; (800b95c <HAL_RCC_OscConfig+0x2ac>)
 800b812:	4313      	orrs	r3, r2
 800b814:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b816:	e03a      	b.n	800b88e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	68db      	ldr	r3, [r3, #12]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d020      	beq.n	800b862 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b820:	4b4f      	ldr	r3, [pc, #316]	; (800b960 <HAL_RCC_OscConfig+0x2b0>)
 800b822:	2201      	movs	r2, #1
 800b824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b826:	f7fe f899 	bl	800995c <HAL_GetTick>
 800b82a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b82c:	e008      	b.n	800b840 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b82e:	f7fe f895 	bl	800995c <HAL_GetTick>
 800b832:	4602      	mov	r2, r0
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	1ad3      	subs	r3, r2, r3
 800b838:	2b02      	cmp	r3, #2
 800b83a:	d901      	bls.n	800b840 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b83c:	2303      	movs	r3, #3
 800b83e:	e1a5      	b.n	800bb8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b840:	4b46      	ldr	r3, [pc, #280]	; (800b95c <HAL_RCC_OscConfig+0x2ac>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f003 0302 	and.w	r3, r3, #2
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d0f0      	beq.n	800b82e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b84c:	4b43      	ldr	r3, [pc, #268]	; (800b95c <HAL_RCC_OscConfig+0x2ac>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	691b      	ldr	r3, [r3, #16]
 800b858:	00db      	lsls	r3, r3, #3
 800b85a:	4940      	ldr	r1, [pc, #256]	; (800b95c <HAL_RCC_OscConfig+0x2ac>)
 800b85c:	4313      	orrs	r3, r2
 800b85e:	600b      	str	r3, [r1, #0]
 800b860:	e015      	b.n	800b88e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b862:	4b3f      	ldr	r3, [pc, #252]	; (800b960 <HAL_RCC_OscConfig+0x2b0>)
 800b864:	2200      	movs	r2, #0
 800b866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b868:	f7fe f878 	bl	800995c <HAL_GetTick>
 800b86c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b86e:	e008      	b.n	800b882 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b870:	f7fe f874 	bl	800995c <HAL_GetTick>
 800b874:	4602      	mov	r2, r0
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	1ad3      	subs	r3, r2, r3
 800b87a:	2b02      	cmp	r3, #2
 800b87c:	d901      	bls.n	800b882 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b87e:	2303      	movs	r3, #3
 800b880:	e184      	b.n	800bb8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b882:	4b36      	ldr	r3, [pc, #216]	; (800b95c <HAL_RCC_OscConfig+0x2ac>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f003 0302 	and.w	r3, r3, #2
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d1f0      	bne.n	800b870 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f003 0308 	and.w	r3, r3, #8
 800b896:	2b00      	cmp	r3, #0
 800b898:	d030      	beq.n	800b8fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	695b      	ldr	r3, [r3, #20]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d016      	beq.n	800b8d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b8a2:	4b30      	ldr	r3, [pc, #192]	; (800b964 <HAL_RCC_OscConfig+0x2b4>)
 800b8a4:	2201      	movs	r2, #1
 800b8a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b8a8:	f7fe f858 	bl	800995c <HAL_GetTick>
 800b8ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b8ae:	e008      	b.n	800b8c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b8b0:	f7fe f854 	bl	800995c <HAL_GetTick>
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	1ad3      	subs	r3, r2, r3
 800b8ba:	2b02      	cmp	r3, #2
 800b8bc:	d901      	bls.n	800b8c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b8be:	2303      	movs	r3, #3
 800b8c0:	e164      	b.n	800bb8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b8c2:	4b26      	ldr	r3, [pc, #152]	; (800b95c <HAL_RCC_OscConfig+0x2ac>)
 800b8c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8c6:	f003 0302 	and.w	r3, r3, #2
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d0f0      	beq.n	800b8b0 <HAL_RCC_OscConfig+0x200>
 800b8ce:	e015      	b.n	800b8fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b8d0:	4b24      	ldr	r3, [pc, #144]	; (800b964 <HAL_RCC_OscConfig+0x2b4>)
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b8d6:	f7fe f841 	bl	800995c <HAL_GetTick>
 800b8da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b8dc:	e008      	b.n	800b8f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b8de:	f7fe f83d 	bl	800995c <HAL_GetTick>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	1ad3      	subs	r3, r2, r3
 800b8e8:	2b02      	cmp	r3, #2
 800b8ea:	d901      	bls.n	800b8f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b8ec:	2303      	movs	r3, #3
 800b8ee:	e14d      	b.n	800bb8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b8f0:	4b1a      	ldr	r3, [pc, #104]	; (800b95c <HAL_RCC_OscConfig+0x2ac>)
 800b8f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8f4:	f003 0302 	and.w	r3, r3, #2
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d1f0      	bne.n	800b8de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f003 0304 	and.w	r3, r3, #4
 800b904:	2b00      	cmp	r3, #0
 800b906:	f000 80a0 	beq.w	800ba4a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b90a:	2300      	movs	r3, #0
 800b90c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b90e:	4b13      	ldr	r3, [pc, #76]	; (800b95c <HAL_RCC_OscConfig+0x2ac>)
 800b910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b916:	2b00      	cmp	r3, #0
 800b918:	d10f      	bne.n	800b93a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b91a:	2300      	movs	r3, #0
 800b91c:	60bb      	str	r3, [r7, #8]
 800b91e:	4b0f      	ldr	r3, [pc, #60]	; (800b95c <HAL_RCC_OscConfig+0x2ac>)
 800b920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b922:	4a0e      	ldr	r2, [pc, #56]	; (800b95c <HAL_RCC_OscConfig+0x2ac>)
 800b924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b928:	6413      	str	r3, [r2, #64]	; 0x40
 800b92a:	4b0c      	ldr	r3, [pc, #48]	; (800b95c <HAL_RCC_OscConfig+0x2ac>)
 800b92c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b92e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b932:	60bb      	str	r3, [r7, #8]
 800b934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b936:	2301      	movs	r3, #1
 800b938:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b93a:	4b0b      	ldr	r3, [pc, #44]	; (800b968 <HAL_RCC_OscConfig+0x2b8>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b942:	2b00      	cmp	r3, #0
 800b944:	d121      	bne.n	800b98a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b946:	4b08      	ldr	r3, [pc, #32]	; (800b968 <HAL_RCC_OscConfig+0x2b8>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	4a07      	ldr	r2, [pc, #28]	; (800b968 <HAL_RCC_OscConfig+0x2b8>)
 800b94c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b952:	f7fe f803 	bl	800995c <HAL_GetTick>
 800b956:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b958:	e011      	b.n	800b97e <HAL_RCC_OscConfig+0x2ce>
 800b95a:	bf00      	nop
 800b95c:	40023800 	.word	0x40023800
 800b960:	42470000 	.word	0x42470000
 800b964:	42470e80 	.word	0x42470e80
 800b968:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b96c:	f7fd fff6 	bl	800995c <HAL_GetTick>
 800b970:	4602      	mov	r2, r0
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	1ad3      	subs	r3, r2, r3
 800b976:	2b02      	cmp	r3, #2
 800b978:	d901      	bls.n	800b97e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800b97a:	2303      	movs	r3, #3
 800b97c:	e106      	b.n	800bb8c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b97e:	4b85      	ldr	r3, [pc, #532]	; (800bb94 <HAL_RCC_OscConfig+0x4e4>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b986:	2b00      	cmp	r3, #0
 800b988:	d0f0      	beq.n	800b96c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	689b      	ldr	r3, [r3, #8]
 800b98e:	2b01      	cmp	r3, #1
 800b990:	d106      	bne.n	800b9a0 <HAL_RCC_OscConfig+0x2f0>
 800b992:	4b81      	ldr	r3, [pc, #516]	; (800bb98 <HAL_RCC_OscConfig+0x4e8>)
 800b994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b996:	4a80      	ldr	r2, [pc, #512]	; (800bb98 <HAL_RCC_OscConfig+0x4e8>)
 800b998:	f043 0301 	orr.w	r3, r3, #1
 800b99c:	6713      	str	r3, [r2, #112]	; 0x70
 800b99e:	e01c      	b.n	800b9da <HAL_RCC_OscConfig+0x32a>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	689b      	ldr	r3, [r3, #8]
 800b9a4:	2b05      	cmp	r3, #5
 800b9a6:	d10c      	bne.n	800b9c2 <HAL_RCC_OscConfig+0x312>
 800b9a8:	4b7b      	ldr	r3, [pc, #492]	; (800bb98 <HAL_RCC_OscConfig+0x4e8>)
 800b9aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9ac:	4a7a      	ldr	r2, [pc, #488]	; (800bb98 <HAL_RCC_OscConfig+0x4e8>)
 800b9ae:	f043 0304 	orr.w	r3, r3, #4
 800b9b2:	6713      	str	r3, [r2, #112]	; 0x70
 800b9b4:	4b78      	ldr	r3, [pc, #480]	; (800bb98 <HAL_RCC_OscConfig+0x4e8>)
 800b9b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9b8:	4a77      	ldr	r2, [pc, #476]	; (800bb98 <HAL_RCC_OscConfig+0x4e8>)
 800b9ba:	f043 0301 	orr.w	r3, r3, #1
 800b9be:	6713      	str	r3, [r2, #112]	; 0x70
 800b9c0:	e00b      	b.n	800b9da <HAL_RCC_OscConfig+0x32a>
 800b9c2:	4b75      	ldr	r3, [pc, #468]	; (800bb98 <HAL_RCC_OscConfig+0x4e8>)
 800b9c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9c6:	4a74      	ldr	r2, [pc, #464]	; (800bb98 <HAL_RCC_OscConfig+0x4e8>)
 800b9c8:	f023 0301 	bic.w	r3, r3, #1
 800b9cc:	6713      	str	r3, [r2, #112]	; 0x70
 800b9ce:	4b72      	ldr	r3, [pc, #456]	; (800bb98 <HAL_RCC_OscConfig+0x4e8>)
 800b9d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9d2:	4a71      	ldr	r2, [pc, #452]	; (800bb98 <HAL_RCC_OscConfig+0x4e8>)
 800b9d4:	f023 0304 	bic.w	r3, r3, #4
 800b9d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	689b      	ldr	r3, [r3, #8]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d015      	beq.n	800ba0e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b9e2:	f7fd ffbb 	bl	800995c <HAL_GetTick>
 800b9e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b9e8:	e00a      	b.n	800ba00 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b9ea:	f7fd ffb7 	bl	800995c <HAL_GetTick>
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	1ad3      	subs	r3, r2, r3
 800b9f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d901      	bls.n	800ba00 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800b9fc:	2303      	movs	r3, #3
 800b9fe:	e0c5      	b.n	800bb8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ba00:	4b65      	ldr	r3, [pc, #404]	; (800bb98 <HAL_RCC_OscConfig+0x4e8>)
 800ba02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba04:	f003 0302 	and.w	r3, r3, #2
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d0ee      	beq.n	800b9ea <HAL_RCC_OscConfig+0x33a>
 800ba0c:	e014      	b.n	800ba38 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ba0e:	f7fd ffa5 	bl	800995c <HAL_GetTick>
 800ba12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ba14:	e00a      	b.n	800ba2c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ba16:	f7fd ffa1 	bl	800995c <HAL_GetTick>
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	1ad3      	subs	r3, r2, r3
 800ba20:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d901      	bls.n	800ba2c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800ba28:	2303      	movs	r3, #3
 800ba2a:	e0af      	b.n	800bb8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ba2c:	4b5a      	ldr	r3, [pc, #360]	; (800bb98 <HAL_RCC_OscConfig+0x4e8>)
 800ba2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba30:	f003 0302 	and.w	r3, r3, #2
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d1ee      	bne.n	800ba16 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ba38:	7dfb      	ldrb	r3, [r7, #23]
 800ba3a:	2b01      	cmp	r3, #1
 800ba3c:	d105      	bne.n	800ba4a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ba3e:	4b56      	ldr	r3, [pc, #344]	; (800bb98 <HAL_RCC_OscConfig+0x4e8>)
 800ba40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba42:	4a55      	ldr	r2, [pc, #340]	; (800bb98 <HAL_RCC_OscConfig+0x4e8>)
 800ba44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ba48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	699b      	ldr	r3, [r3, #24]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	f000 809b 	beq.w	800bb8a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ba54:	4b50      	ldr	r3, [pc, #320]	; (800bb98 <HAL_RCC_OscConfig+0x4e8>)
 800ba56:	689b      	ldr	r3, [r3, #8]
 800ba58:	f003 030c 	and.w	r3, r3, #12
 800ba5c:	2b08      	cmp	r3, #8
 800ba5e:	d05c      	beq.n	800bb1a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	699b      	ldr	r3, [r3, #24]
 800ba64:	2b02      	cmp	r3, #2
 800ba66:	d141      	bne.n	800baec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ba68:	4b4c      	ldr	r3, [pc, #304]	; (800bb9c <HAL_RCC_OscConfig+0x4ec>)
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ba6e:	f7fd ff75 	bl	800995c <HAL_GetTick>
 800ba72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ba74:	e008      	b.n	800ba88 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ba76:	f7fd ff71 	bl	800995c <HAL_GetTick>
 800ba7a:	4602      	mov	r2, r0
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	1ad3      	subs	r3, r2, r3
 800ba80:	2b02      	cmp	r3, #2
 800ba82:	d901      	bls.n	800ba88 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800ba84:	2303      	movs	r3, #3
 800ba86:	e081      	b.n	800bb8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ba88:	4b43      	ldr	r3, [pc, #268]	; (800bb98 <HAL_RCC_OscConfig+0x4e8>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d1f0      	bne.n	800ba76 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	69da      	ldr	r2, [r3, #28]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6a1b      	ldr	r3, [r3, #32]
 800ba9c:	431a      	orrs	r2, r3
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa2:	019b      	lsls	r3, r3, #6
 800baa4:	431a      	orrs	r2, r3
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baaa:	085b      	lsrs	r3, r3, #1
 800baac:	3b01      	subs	r3, #1
 800baae:	041b      	lsls	r3, r3, #16
 800bab0:	431a      	orrs	r2, r3
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab6:	061b      	lsls	r3, r3, #24
 800bab8:	4937      	ldr	r1, [pc, #220]	; (800bb98 <HAL_RCC_OscConfig+0x4e8>)
 800baba:	4313      	orrs	r3, r2
 800babc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800babe:	4b37      	ldr	r3, [pc, #220]	; (800bb9c <HAL_RCC_OscConfig+0x4ec>)
 800bac0:	2201      	movs	r2, #1
 800bac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bac4:	f7fd ff4a 	bl	800995c <HAL_GetTick>
 800bac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800baca:	e008      	b.n	800bade <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bacc:	f7fd ff46 	bl	800995c <HAL_GetTick>
 800bad0:	4602      	mov	r2, r0
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	1ad3      	subs	r3, r2, r3
 800bad6:	2b02      	cmp	r3, #2
 800bad8:	d901      	bls.n	800bade <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800bada:	2303      	movs	r3, #3
 800badc:	e056      	b.n	800bb8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bade:	4b2e      	ldr	r3, [pc, #184]	; (800bb98 <HAL_RCC_OscConfig+0x4e8>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d0f0      	beq.n	800bacc <HAL_RCC_OscConfig+0x41c>
 800baea:	e04e      	b.n	800bb8a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800baec:	4b2b      	ldr	r3, [pc, #172]	; (800bb9c <HAL_RCC_OscConfig+0x4ec>)
 800baee:	2200      	movs	r2, #0
 800baf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800baf2:	f7fd ff33 	bl	800995c <HAL_GetTick>
 800baf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800baf8:	e008      	b.n	800bb0c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bafa:	f7fd ff2f 	bl	800995c <HAL_GetTick>
 800bafe:	4602      	mov	r2, r0
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	1ad3      	subs	r3, r2, r3
 800bb04:	2b02      	cmp	r3, #2
 800bb06:	d901      	bls.n	800bb0c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800bb08:	2303      	movs	r3, #3
 800bb0a:	e03f      	b.n	800bb8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bb0c:	4b22      	ldr	r3, [pc, #136]	; (800bb98 <HAL_RCC_OscConfig+0x4e8>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d1f0      	bne.n	800bafa <HAL_RCC_OscConfig+0x44a>
 800bb18:	e037      	b.n	800bb8a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	699b      	ldr	r3, [r3, #24]
 800bb1e:	2b01      	cmp	r3, #1
 800bb20:	d101      	bne.n	800bb26 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800bb22:	2301      	movs	r3, #1
 800bb24:	e032      	b.n	800bb8c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800bb26:	4b1c      	ldr	r3, [pc, #112]	; (800bb98 <HAL_RCC_OscConfig+0x4e8>)
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	699b      	ldr	r3, [r3, #24]
 800bb30:	2b01      	cmp	r3, #1
 800bb32:	d028      	beq.n	800bb86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d121      	bne.n	800bb86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d11a      	bne.n	800bb86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800bb50:	68fa      	ldr	r2, [r7, #12]
 800bb52:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800bb56:	4013      	ands	r3, r2
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bb5c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d111      	bne.n	800bb86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb6c:	085b      	lsrs	r3, r3, #1
 800bb6e:	3b01      	subs	r3, #1
 800bb70:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d107      	bne.n	800bb86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb80:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800bb82:	429a      	cmp	r2, r3
 800bb84:	d001      	beq.n	800bb8a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800bb86:	2301      	movs	r3, #1
 800bb88:	e000      	b.n	800bb8c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800bb8a:	2300      	movs	r3, #0
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3718      	adds	r7, #24
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}
 800bb94:	40007000 	.word	0x40007000
 800bb98:	40023800 	.word	0x40023800
 800bb9c:	42470060 	.word	0x42470060

0800bba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d101      	bne.n	800bbb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	e0cc      	b.n	800bd4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bbb4:	4b68      	ldr	r3, [pc, #416]	; (800bd58 <HAL_RCC_ClockConfig+0x1b8>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f003 030f 	and.w	r3, r3, #15
 800bbbc:	683a      	ldr	r2, [r7, #0]
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d90c      	bls.n	800bbdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bbc2:	4b65      	ldr	r3, [pc, #404]	; (800bd58 <HAL_RCC_ClockConfig+0x1b8>)
 800bbc4:	683a      	ldr	r2, [r7, #0]
 800bbc6:	b2d2      	uxtb	r2, r2
 800bbc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bbca:	4b63      	ldr	r3, [pc, #396]	; (800bd58 <HAL_RCC_ClockConfig+0x1b8>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f003 030f 	and.w	r3, r3, #15
 800bbd2:	683a      	ldr	r2, [r7, #0]
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d001      	beq.n	800bbdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800bbd8:	2301      	movs	r3, #1
 800bbda:	e0b8      	b.n	800bd4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f003 0302 	and.w	r3, r3, #2
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d020      	beq.n	800bc2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f003 0304 	and.w	r3, r3, #4
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d005      	beq.n	800bc00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bbf4:	4b59      	ldr	r3, [pc, #356]	; (800bd5c <HAL_RCC_ClockConfig+0x1bc>)
 800bbf6:	689b      	ldr	r3, [r3, #8]
 800bbf8:	4a58      	ldr	r2, [pc, #352]	; (800bd5c <HAL_RCC_ClockConfig+0x1bc>)
 800bbfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bbfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f003 0308 	and.w	r3, r3, #8
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d005      	beq.n	800bc18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bc0c:	4b53      	ldr	r3, [pc, #332]	; (800bd5c <HAL_RCC_ClockConfig+0x1bc>)
 800bc0e:	689b      	ldr	r3, [r3, #8]
 800bc10:	4a52      	ldr	r2, [pc, #328]	; (800bd5c <HAL_RCC_ClockConfig+0x1bc>)
 800bc12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bc16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bc18:	4b50      	ldr	r3, [pc, #320]	; (800bd5c <HAL_RCC_ClockConfig+0x1bc>)
 800bc1a:	689b      	ldr	r3, [r3, #8]
 800bc1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	689b      	ldr	r3, [r3, #8]
 800bc24:	494d      	ldr	r1, [pc, #308]	; (800bd5c <HAL_RCC_ClockConfig+0x1bc>)
 800bc26:	4313      	orrs	r3, r2
 800bc28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f003 0301 	and.w	r3, r3, #1
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d044      	beq.n	800bcc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	2b01      	cmp	r3, #1
 800bc3c:	d107      	bne.n	800bc4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bc3e:	4b47      	ldr	r3, [pc, #284]	; (800bd5c <HAL_RCC_ClockConfig+0x1bc>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d119      	bne.n	800bc7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	e07f      	b.n	800bd4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	685b      	ldr	r3, [r3, #4]
 800bc52:	2b02      	cmp	r3, #2
 800bc54:	d003      	beq.n	800bc5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bc5a:	2b03      	cmp	r3, #3
 800bc5c:	d107      	bne.n	800bc6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bc5e:	4b3f      	ldr	r3, [pc, #252]	; (800bd5c <HAL_RCC_ClockConfig+0x1bc>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d109      	bne.n	800bc7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	e06f      	b.n	800bd4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bc6e:	4b3b      	ldr	r3, [pc, #236]	; (800bd5c <HAL_RCC_ClockConfig+0x1bc>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f003 0302 	and.w	r3, r3, #2
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d101      	bne.n	800bc7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	e067      	b.n	800bd4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bc7e:	4b37      	ldr	r3, [pc, #220]	; (800bd5c <HAL_RCC_ClockConfig+0x1bc>)
 800bc80:	689b      	ldr	r3, [r3, #8]
 800bc82:	f023 0203 	bic.w	r2, r3, #3
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	685b      	ldr	r3, [r3, #4]
 800bc8a:	4934      	ldr	r1, [pc, #208]	; (800bd5c <HAL_RCC_ClockConfig+0x1bc>)
 800bc8c:	4313      	orrs	r3, r2
 800bc8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bc90:	f7fd fe64 	bl	800995c <HAL_GetTick>
 800bc94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bc96:	e00a      	b.n	800bcae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bc98:	f7fd fe60 	bl	800995c <HAL_GetTick>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	1ad3      	subs	r3, r2, r3
 800bca2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d901      	bls.n	800bcae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bcaa:	2303      	movs	r3, #3
 800bcac:	e04f      	b.n	800bd4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bcae:	4b2b      	ldr	r3, [pc, #172]	; (800bd5c <HAL_RCC_ClockConfig+0x1bc>)
 800bcb0:	689b      	ldr	r3, [r3, #8]
 800bcb2:	f003 020c 	and.w	r2, r3, #12
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	009b      	lsls	r3, r3, #2
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	d1eb      	bne.n	800bc98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bcc0:	4b25      	ldr	r3, [pc, #148]	; (800bd58 <HAL_RCC_ClockConfig+0x1b8>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f003 030f 	and.w	r3, r3, #15
 800bcc8:	683a      	ldr	r2, [r7, #0]
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d20c      	bcs.n	800bce8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bcce:	4b22      	ldr	r3, [pc, #136]	; (800bd58 <HAL_RCC_ClockConfig+0x1b8>)
 800bcd0:	683a      	ldr	r2, [r7, #0]
 800bcd2:	b2d2      	uxtb	r2, r2
 800bcd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bcd6:	4b20      	ldr	r3, [pc, #128]	; (800bd58 <HAL_RCC_ClockConfig+0x1b8>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f003 030f 	and.w	r3, r3, #15
 800bcde:	683a      	ldr	r2, [r7, #0]
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d001      	beq.n	800bce8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800bce4:	2301      	movs	r3, #1
 800bce6:	e032      	b.n	800bd4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f003 0304 	and.w	r3, r3, #4
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d008      	beq.n	800bd06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bcf4:	4b19      	ldr	r3, [pc, #100]	; (800bd5c <HAL_RCC_ClockConfig+0x1bc>)
 800bcf6:	689b      	ldr	r3, [r3, #8]
 800bcf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	68db      	ldr	r3, [r3, #12]
 800bd00:	4916      	ldr	r1, [pc, #88]	; (800bd5c <HAL_RCC_ClockConfig+0x1bc>)
 800bd02:	4313      	orrs	r3, r2
 800bd04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f003 0308 	and.w	r3, r3, #8
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d009      	beq.n	800bd26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bd12:	4b12      	ldr	r3, [pc, #72]	; (800bd5c <HAL_RCC_ClockConfig+0x1bc>)
 800bd14:	689b      	ldr	r3, [r3, #8]
 800bd16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	691b      	ldr	r3, [r3, #16]
 800bd1e:	00db      	lsls	r3, r3, #3
 800bd20:	490e      	ldr	r1, [pc, #56]	; (800bd5c <HAL_RCC_ClockConfig+0x1bc>)
 800bd22:	4313      	orrs	r3, r2
 800bd24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800bd26:	f000 f821 	bl	800bd6c <HAL_RCC_GetSysClockFreq>
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	4b0b      	ldr	r3, [pc, #44]	; (800bd5c <HAL_RCC_ClockConfig+0x1bc>)
 800bd2e:	689b      	ldr	r3, [r3, #8]
 800bd30:	091b      	lsrs	r3, r3, #4
 800bd32:	f003 030f 	and.w	r3, r3, #15
 800bd36:	490a      	ldr	r1, [pc, #40]	; (800bd60 <HAL_RCC_ClockConfig+0x1c0>)
 800bd38:	5ccb      	ldrb	r3, [r1, r3]
 800bd3a:	fa22 f303 	lsr.w	r3, r2, r3
 800bd3e:	4a09      	ldr	r2, [pc, #36]	; (800bd64 <HAL_RCC_ClockConfig+0x1c4>)
 800bd40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800bd42:	4b09      	ldr	r3, [pc, #36]	; (800bd68 <HAL_RCC_ClockConfig+0x1c8>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7f6 fe76 	bl	8002a38 <HAL_InitTick>

  return HAL_OK;
 800bd4c:	2300      	movs	r3, #0
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3710      	adds	r7, #16
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
 800bd56:	bf00      	nop
 800bd58:	40023c00 	.word	0x40023c00
 800bd5c:	40023800 	.word	0x40023800
 800bd60:	0801a35c 	.word	0x0801a35c
 800bd64:	20000060 	.word	0x20000060
 800bd68:	20000088 	.word	0x20000088

0800bd6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bd6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800bd70:	b084      	sub	sp, #16
 800bd72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800bd74:	2300      	movs	r3, #0
 800bd76:	607b      	str	r3, [r7, #4]
 800bd78:	2300      	movs	r3, #0
 800bd7a:	60fb      	str	r3, [r7, #12]
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800bd80:	2300      	movs	r3, #0
 800bd82:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bd84:	4b67      	ldr	r3, [pc, #412]	; (800bf24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800bd86:	689b      	ldr	r3, [r3, #8]
 800bd88:	f003 030c 	and.w	r3, r3, #12
 800bd8c:	2b08      	cmp	r3, #8
 800bd8e:	d00d      	beq.n	800bdac <HAL_RCC_GetSysClockFreq+0x40>
 800bd90:	2b08      	cmp	r3, #8
 800bd92:	f200 80bd 	bhi.w	800bf10 <HAL_RCC_GetSysClockFreq+0x1a4>
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d002      	beq.n	800bda0 <HAL_RCC_GetSysClockFreq+0x34>
 800bd9a:	2b04      	cmp	r3, #4
 800bd9c:	d003      	beq.n	800bda6 <HAL_RCC_GetSysClockFreq+0x3a>
 800bd9e:	e0b7      	b.n	800bf10 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bda0:	4b61      	ldr	r3, [pc, #388]	; (800bf28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800bda2:	60bb      	str	r3, [r7, #8]
       break;
 800bda4:	e0b7      	b.n	800bf16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bda6:	4b60      	ldr	r3, [pc, #384]	; (800bf28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800bda8:	60bb      	str	r3, [r7, #8]
      break;
 800bdaa:	e0b4      	b.n	800bf16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bdac:	4b5d      	ldr	r3, [pc, #372]	; (800bf24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bdb4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800bdb6:	4b5b      	ldr	r3, [pc, #364]	; (800bf24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800bdb8:	685b      	ldr	r3, [r3, #4]
 800bdba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d04d      	beq.n	800be5e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bdc2:	4b58      	ldr	r3, [pc, #352]	; (800bf24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	099b      	lsrs	r3, r3, #6
 800bdc8:	461a      	mov	r2, r3
 800bdca:	f04f 0300 	mov.w	r3, #0
 800bdce:	f240 10ff 	movw	r0, #511	; 0x1ff
 800bdd2:	f04f 0100 	mov.w	r1, #0
 800bdd6:	ea02 0800 	and.w	r8, r2, r0
 800bdda:	ea03 0901 	and.w	r9, r3, r1
 800bdde:	4640      	mov	r0, r8
 800bde0:	4649      	mov	r1, r9
 800bde2:	f04f 0200 	mov.w	r2, #0
 800bde6:	f04f 0300 	mov.w	r3, #0
 800bdea:	014b      	lsls	r3, r1, #5
 800bdec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800bdf0:	0142      	lsls	r2, r0, #5
 800bdf2:	4610      	mov	r0, r2
 800bdf4:	4619      	mov	r1, r3
 800bdf6:	ebb0 0008 	subs.w	r0, r0, r8
 800bdfa:	eb61 0109 	sbc.w	r1, r1, r9
 800bdfe:	f04f 0200 	mov.w	r2, #0
 800be02:	f04f 0300 	mov.w	r3, #0
 800be06:	018b      	lsls	r3, r1, #6
 800be08:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800be0c:	0182      	lsls	r2, r0, #6
 800be0e:	1a12      	subs	r2, r2, r0
 800be10:	eb63 0301 	sbc.w	r3, r3, r1
 800be14:	f04f 0000 	mov.w	r0, #0
 800be18:	f04f 0100 	mov.w	r1, #0
 800be1c:	00d9      	lsls	r1, r3, #3
 800be1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800be22:	00d0      	lsls	r0, r2, #3
 800be24:	4602      	mov	r2, r0
 800be26:	460b      	mov	r3, r1
 800be28:	eb12 0208 	adds.w	r2, r2, r8
 800be2c:	eb43 0309 	adc.w	r3, r3, r9
 800be30:	f04f 0000 	mov.w	r0, #0
 800be34:	f04f 0100 	mov.w	r1, #0
 800be38:	0299      	lsls	r1, r3, #10
 800be3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800be3e:	0290      	lsls	r0, r2, #10
 800be40:	4602      	mov	r2, r0
 800be42:	460b      	mov	r3, r1
 800be44:	4610      	mov	r0, r2
 800be46:	4619      	mov	r1, r3
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	461a      	mov	r2, r3
 800be4c:	f04f 0300 	mov.w	r3, #0
 800be50:	f7f4 ff8a 	bl	8000d68 <__aeabi_uldivmod>
 800be54:	4602      	mov	r2, r0
 800be56:	460b      	mov	r3, r1
 800be58:	4613      	mov	r3, r2
 800be5a:	60fb      	str	r3, [r7, #12]
 800be5c:	e04a      	b.n	800bef4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800be5e:	4b31      	ldr	r3, [pc, #196]	; (800bf24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800be60:	685b      	ldr	r3, [r3, #4]
 800be62:	099b      	lsrs	r3, r3, #6
 800be64:	461a      	mov	r2, r3
 800be66:	f04f 0300 	mov.w	r3, #0
 800be6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800be6e:	f04f 0100 	mov.w	r1, #0
 800be72:	ea02 0400 	and.w	r4, r2, r0
 800be76:	ea03 0501 	and.w	r5, r3, r1
 800be7a:	4620      	mov	r0, r4
 800be7c:	4629      	mov	r1, r5
 800be7e:	f04f 0200 	mov.w	r2, #0
 800be82:	f04f 0300 	mov.w	r3, #0
 800be86:	014b      	lsls	r3, r1, #5
 800be88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800be8c:	0142      	lsls	r2, r0, #5
 800be8e:	4610      	mov	r0, r2
 800be90:	4619      	mov	r1, r3
 800be92:	1b00      	subs	r0, r0, r4
 800be94:	eb61 0105 	sbc.w	r1, r1, r5
 800be98:	f04f 0200 	mov.w	r2, #0
 800be9c:	f04f 0300 	mov.w	r3, #0
 800bea0:	018b      	lsls	r3, r1, #6
 800bea2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800bea6:	0182      	lsls	r2, r0, #6
 800bea8:	1a12      	subs	r2, r2, r0
 800beaa:	eb63 0301 	sbc.w	r3, r3, r1
 800beae:	f04f 0000 	mov.w	r0, #0
 800beb2:	f04f 0100 	mov.w	r1, #0
 800beb6:	00d9      	lsls	r1, r3, #3
 800beb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bebc:	00d0      	lsls	r0, r2, #3
 800bebe:	4602      	mov	r2, r0
 800bec0:	460b      	mov	r3, r1
 800bec2:	1912      	adds	r2, r2, r4
 800bec4:	eb45 0303 	adc.w	r3, r5, r3
 800bec8:	f04f 0000 	mov.w	r0, #0
 800becc:	f04f 0100 	mov.w	r1, #0
 800bed0:	0299      	lsls	r1, r3, #10
 800bed2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800bed6:	0290      	lsls	r0, r2, #10
 800bed8:	4602      	mov	r2, r0
 800beda:	460b      	mov	r3, r1
 800bedc:	4610      	mov	r0, r2
 800bede:	4619      	mov	r1, r3
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	461a      	mov	r2, r3
 800bee4:	f04f 0300 	mov.w	r3, #0
 800bee8:	f7f4 ff3e 	bl	8000d68 <__aeabi_uldivmod>
 800beec:	4602      	mov	r2, r0
 800beee:	460b      	mov	r3, r1
 800bef0:	4613      	mov	r3, r2
 800bef2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800bef4:	4b0b      	ldr	r3, [pc, #44]	; (800bf24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	0c1b      	lsrs	r3, r3, #16
 800befa:	f003 0303 	and.w	r3, r3, #3
 800befe:	3301      	adds	r3, #1
 800bf00:	005b      	lsls	r3, r3, #1
 800bf02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800bf04:	68fa      	ldr	r2, [r7, #12]
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf0c:	60bb      	str	r3, [r7, #8]
      break;
 800bf0e:	e002      	b.n	800bf16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bf10:	4b05      	ldr	r3, [pc, #20]	; (800bf28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800bf12:	60bb      	str	r3, [r7, #8]
      break;
 800bf14:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bf16:	68bb      	ldr	r3, [r7, #8]
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3710      	adds	r7, #16
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800bf22:	bf00      	nop
 800bf24:	40023800 	.word	0x40023800
 800bf28:	00f42400 	.word	0x00f42400

0800bf2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bf30:	4b03      	ldr	r3, [pc, #12]	; (800bf40 <HAL_RCC_GetHCLKFreq+0x14>)
 800bf32:	681b      	ldr	r3, [r3, #0]
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	46bd      	mov	sp, r7
 800bf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3c:	4770      	bx	lr
 800bf3e:	bf00      	nop
 800bf40:	20000060 	.word	0x20000060

0800bf44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800bf48:	f7ff fff0 	bl	800bf2c <HAL_RCC_GetHCLKFreq>
 800bf4c:	4602      	mov	r2, r0
 800bf4e:	4b05      	ldr	r3, [pc, #20]	; (800bf64 <HAL_RCC_GetPCLK1Freq+0x20>)
 800bf50:	689b      	ldr	r3, [r3, #8]
 800bf52:	0a9b      	lsrs	r3, r3, #10
 800bf54:	f003 0307 	and.w	r3, r3, #7
 800bf58:	4903      	ldr	r1, [pc, #12]	; (800bf68 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bf5a:	5ccb      	ldrb	r3, [r1, r3]
 800bf5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	bd80      	pop	{r7, pc}
 800bf64:	40023800 	.word	0x40023800
 800bf68:	0801a36c 	.word	0x0801a36c

0800bf6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800bf70:	f7ff ffdc 	bl	800bf2c <HAL_RCC_GetHCLKFreq>
 800bf74:	4602      	mov	r2, r0
 800bf76:	4b05      	ldr	r3, [pc, #20]	; (800bf8c <HAL_RCC_GetPCLK2Freq+0x20>)
 800bf78:	689b      	ldr	r3, [r3, #8]
 800bf7a:	0b5b      	lsrs	r3, r3, #13
 800bf7c:	f003 0307 	and.w	r3, r3, #7
 800bf80:	4903      	ldr	r1, [pc, #12]	; (800bf90 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bf82:	5ccb      	ldrb	r3, [r1, r3]
 800bf84:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	bd80      	pop	{r7, pc}
 800bf8c:	40023800 	.word	0x40023800
 800bf90:	0801a36c 	.word	0x0801a36c

0800bf94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b083      	sub	sp, #12
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	220f      	movs	r2, #15
 800bfa2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800bfa4:	4b12      	ldr	r3, [pc, #72]	; (800bff0 <HAL_RCC_GetClockConfig+0x5c>)
 800bfa6:	689b      	ldr	r3, [r3, #8]
 800bfa8:	f003 0203 	and.w	r2, r3, #3
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800bfb0:	4b0f      	ldr	r3, [pc, #60]	; (800bff0 <HAL_RCC_GetClockConfig+0x5c>)
 800bfb2:	689b      	ldr	r3, [r3, #8]
 800bfb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800bfbc:	4b0c      	ldr	r3, [pc, #48]	; (800bff0 <HAL_RCC_GetClockConfig+0x5c>)
 800bfbe:	689b      	ldr	r3, [r3, #8]
 800bfc0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800bfc8:	4b09      	ldr	r3, [pc, #36]	; (800bff0 <HAL_RCC_GetClockConfig+0x5c>)
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	08db      	lsrs	r3, r3, #3
 800bfce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800bfd6:	4b07      	ldr	r3, [pc, #28]	; (800bff4 <HAL_RCC_GetClockConfig+0x60>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f003 020f 	and.w	r2, r3, #15
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	601a      	str	r2, [r3, #0]
}
 800bfe2:	bf00      	nop
 800bfe4:	370c      	adds	r7, #12
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfec:	4770      	bx	lr
 800bfee:	bf00      	nop
 800bff0:	40023800 	.word	0x40023800
 800bff4:	40023c00 	.word	0x40023c00

0800bff8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b086      	sub	sp, #24
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c000:	2300      	movs	r3, #0
 800c002:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800c004:	2300      	movs	r3, #0
 800c006:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f003 0301 	and.w	r3, r3, #1
 800c010:	2b00      	cmp	r3, #0
 800c012:	d10b      	bne.n	800c02c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d105      	bne.n	800c02c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d075      	beq.n	800c118 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c02c:	4bad      	ldr	r3, [pc, #692]	; (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800c02e:	2200      	movs	r2, #0
 800c030:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c032:	f7fd fc93 	bl	800995c <HAL_GetTick>
 800c036:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c038:	e008      	b.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c03a:	f7fd fc8f 	bl	800995c <HAL_GetTick>
 800c03e:	4602      	mov	r2, r0
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	1ad3      	subs	r3, r2, r3
 800c044:	2b02      	cmp	r3, #2
 800c046:	d901      	bls.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c048:	2303      	movs	r3, #3
 800c04a:	e18b      	b.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c04c:	4ba6      	ldr	r3, [pc, #664]	; (800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c054:	2b00      	cmp	r3, #0
 800c056:	d1f0      	bne.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f003 0301 	and.w	r3, r3, #1
 800c060:	2b00      	cmp	r3, #0
 800c062:	d009      	beq.n	800c078 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	685b      	ldr	r3, [r3, #4]
 800c068:	019a      	lsls	r2, r3, #6
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	689b      	ldr	r3, [r3, #8]
 800c06e:	071b      	lsls	r3, r3, #28
 800c070:	499d      	ldr	r1, [pc, #628]	; (800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c072:	4313      	orrs	r3, r2
 800c074:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f003 0302 	and.w	r3, r3, #2
 800c080:	2b00      	cmp	r3, #0
 800c082:	d01f      	beq.n	800c0c4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c084:	4b98      	ldr	r3, [pc, #608]	; (800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c086:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c08a:	0f1b      	lsrs	r3, r3, #28
 800c08c:	f003 0307 	and.w	r3, r3, #7
 800c090:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	685b      	ldr	r3, [r3, #4]
 800c096:	019a      	lsls	r2, r3, #6
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	68db      	ldr	r3, [r3, #12]
 800c09c:	061b      	lsls	r3, r3, #24
 800c09e:	431a      	orrs	r2, r3
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	071b      	lsls	r3, r3, #28
 800c0a4:	4990      	ldr	r1, [pc, #576]	; (800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c0ac:	4b8e      	ldr	r3, [pc, #568]	; (800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c0ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0b2:	f023 021f 	bic.w	r2, r3, #31
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	69db      	ldr	r3, [r3, #28]
 800c0ba:	3b01      	subs	r3, #1
 800c0bc:	498a      	ldr	r1, [pc, #552]	; (800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c0be:	4313      	orrs	r3, r2
 800c0c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d00d      	beq.n	800c0ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	685b      	ldr	r3, [r3, #4]
 800c0d4:	019a      	lsls	r2, r3, #6
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	68db      	ldr	r3, [r3, #12]
 800c0da:	061b      	lsls	r3, r3, #24
 800c0dc:	431a      	orrs	r2, r3
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	689b      	ldr	r3, [r3, #8]
 800c0e2:	071b      	lsls	r3, r3, #28
 800c0e4:	4980      	ldr	r1, [pc, #512]	; (800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c0e6:	4313      	orrs	r3, r2
 800c0e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c0ec:	4b7d      	ldr	r3, [pc, #500]	; (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c0f2:	f7fd fc33 	bl	800995c <HAL_GetTick>
 800c0f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c0f8:	e008      	b.n	800c10c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c0fa:	f7fd fc2f 	bl	800995c <HAL_GetTick>
 800c0fe:	4602      	mov	r2, r0
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	1ad3      	subs	r3, r2, r3
 800c104:	2b02      	cmp	r3, #2
 800c106:	d901      	bls.n	800c10c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c108:	2303      	movs	r3, #3
 800c10a:	e12b      	b.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c10c:	4b76      	ldr	r3, [pc, #472]	; (800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c114:	2b00      	cmp	r3, #0
 800c116:	d0f0      	beq.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	f003 0304 	and.w	r3, r3, #4
 800c120:	2b00      	cmp	r3, #0
 800c122:	d105      	bne.n	800c130 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d079      	beq.n	800c224 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c130:	4b6e      	ldr	r3, [pc, #440]	; (800c2ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c132:	2200      	movs	r2, #0
 800c134:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c136:	f7fd fc11 	bl	800995c <HAL_GetTick>
 800c13a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c13c:	e008      	b.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c13e:	f7fd fc0d 	bl	800995c <HAL_GetTick>
 800c142:	4602      	mov	r2, r0
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	1ad3      	subs	r3, r2, r3
 800c148:	2b02      	cmp	r3, #2
 800c14a:	d901      	bls.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c14c:	2303      	movs	r3, #3
 800c14e:	e109      	b.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c150:	4b65      	ldr	r3, [pc, #404]	; (800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c15c:	d0ef      	beq.n	800c13e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f003 0304 	and.w	r3, r3, #4
 800c166:	2b00      	cmp	r3, #0
 800c168:	d020      	beq.n	800c1ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c16a:	4b5f      	ldr	r3, [pc, #380]	; (800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c16c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c170:	0f1b      	lsrs	r3, r3, #28
 800c172:	f003 0307 	and.w	r3, r3, #7
 800c176:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	691b      	ldr	r3, [r3, #16]
 800c17c:	019a      	lsls	r2, r3, #6
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	695b      	ldr	r3, [r3, #20]
 800c182:	061b      	lsls	r3, r3, #24
 800c184:	431a      	orrs	r2, r3
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	071b      	lsls	r3, r3, #28
 800c18a:	4957      	ldr	r1, [pc, #348]	; (800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c18c:	4313      	orrs	r3, r2
 800c18e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c192:	4b55      	ldr	r3, [pc, #340]	; (800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c194:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c198:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6a1b      	ldr	r3, [r3, #32]
 800c1a0:	3b01      	subs	r3, #1
 800c1a2:	021b      	lsls	r3, r3, #8
 800c1a4:	4950      	ldr	r1, [pc, #320]	; (800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c1a6:	4313      	orrs	r3, r2
 800c1a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f003 0308 	and.w	r3, r3, #8
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d01e      	beq.n	800c1f6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c1b8:	4b4b      	ldr	r3, [pc, #300]	; (800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c1ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1be:	0e1b      	lsrs	r3, r3, #24
 800c1c0:	f003 030f 	and.w	r3, r3, #15
 800c1c4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	691b      	ldr	r3, [r3, #16]
 800c1ca:	019a      	lsls	r2, r3, #6
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	061b      	lsls	r3, r3, #24
 800c1d0:	431a      	orrs	r2, r3
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	699b      	ldr	r3, [r3, #24]
 800c1d6:	071b      	lsls	r3, r3, #28
 800c1d8:	4943      	ldr	r1, [pc, #268]	; (800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c1da:	4313      	orrs	r3, r2
 800c1dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c1e0:	4b41      	ldr	r3, [pc, #260]	; (800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c1e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ee:	493e      	ldr	r1, [pc, #248]	; (800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c1f0:	4313      	orrs	r3, r2
 800c1f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c1f6:	4b3d      	ldr	r3, [pc, #244]	; (800c2ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c1f8:	2201      	movs	r2, #1
 800c1fa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c1fc:	f7fd fbae 	bl	800995c <HAL_GetTick>
 800c200:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c202:	e008      	b.n	800c216 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c204:	f7fd fbaa 	bl	800995c <HAL_GetTick>
 800c208:	4602      	mov	r2, r0
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	1ad3      	subs	r3, r2, r3
 800c20e:	2b02      	cmp	r3, #2
 800c210:	d901      	bls.n	800c216 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c212:	2303      	movs	r3, #3
 800c214:	e0a6      	b.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c216:	4b34      	ldr	r3, [pc, #208]	; (800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c21e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c222:	d1ef      	bne.n	800c204 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f003 0320 	and.w	r3, r3, #32
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	f000 808d 	beq.w	800c34c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c232:	2300      	movs	r3, #0
 800c234:	60fb      	str	r3, [r7, #12]
 800c236:	4b2c      	ldr	r3, [pc, #176]	; (800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c23a:	4a2b      	ldr	r2, [pc, #172]	; (800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c23c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c240:	6413      	str	r3, [r2, #64]	; 0x40
 800c242:	4b29      	ldr	r3, [pc, #164]	; (800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c24a:	60fb      	str	r3, [r7, #12]
 800c24c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c24e:	4b28      	ldr	r3, [pc, #160]	; (800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	4a27      	ldr	r2, [pc, #156]	; (800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800c254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c258:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c25a:	f7fd fb7f 	bl	800995c <HAL_GetTick>
 800c25e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c260:	e008      	b.n	800c274 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c262:	f7fd fb7b 	bl	800995c <HAL_GetTick>
 800c266:	4602      	mov	r2, r0
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	1ad3      	subs	r3, r2, r3
 800c26c:	2b02      	cmp	r3, #2
 800c26e:	d901      	bls.n	800c274 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800c270:	2303      	movs	r3, #3
 800c272:	e077      	b.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c274:	4b1e      	ldr	r3, [pc, #120]	; (800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d0f0      	beq.n	800c262 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c280:	4b19      	ldr	r3, [pc, #100]	; (800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c284:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c288:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d039      	beq.n	800c304 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c294:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c298:	693a      	ldr	r2, [r7, #16]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d032      	beq.n	800c304 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c29e:	4b12      	ldr	r3, [pc, #72]	; (800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c2a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2a6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c2a8:	4b12      	ldr	r3, [pc, #72]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c2ae:	4b11      	ldr	r3, [pc, #68]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c2b4:	4a0c      	ldr	r2, [pc, #48]	; (800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c2ba:	4b0b      	ldr	r3, [pc, #44]	; (800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c2bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2be:	f003 0301 	and.w	r3, r3, #1
 800c2c2:	2b01      	cmp	r3, #1
 800c2c4:	d11e      	bne.n	800c304 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c2c6:	f7fd fb49 	bl	800995c <HAL_GetTick>
 800c2ca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c2cc:	e014      	b.n	800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c2ce:	f7fd fb45 	bl	800995c <HAL_GetTick>
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	1ad3      	subs	r3, r2, r3
 800c2d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d90b      	bls.n	800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800c2e0:	2303      	movs	r3, #3
 800c2e2:	e03f      	b.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800c2e4:	42470068 	.word	0x42470068
 800c2e8:	40023800 	.word	0x40023800
 800c2ec:	42470070 	.word	0x42470070
 800c2f0:	40007000 	.word	0x40007000
 800c2f4:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c2f8:	4b1c      	ldr	r3, [pc, #112]	; (800c36c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c2fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2fc:	f003 0302 	and.w	r3, r3, #2
 800c300:	2b00      	cmp	r3, #0
 800c302:	d0e4      	beq.n	800c2ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c308:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c30c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c310:	d10d      	bne.n	800c32e <HAL_RCCEx_PeriphCLKConfig+0x336>
 800c312:	4b16      	ldr	r3, [pc, #88]	; (800c36c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c314:	689b      	ldr	r3, [r3, #8]
 800c316:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c31e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c326:	4911      	ldr	r1, [pc, #68]	; (800c36c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c328:	4313      	orrs	r3, r2
 800c32a:	608b      	str	r3, [r1, #8]
 800c32c:	e005      	b.n	800c33a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800c32e:	4b0f      	ldr	r3, [pc, #60]	; (800c36c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c330:	689b      	ldr	r3, [r3, #8]
 800c332:	4a0e      	ldr	r2, [pc, #56]	; (800c36c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c334:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c338:	6093      	str	r3, [r2, #8]
 800c33a:	4b0c      	ldr	r3, [pc, #48]	; (800c36c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c33c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c342:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c346:	4909      	ldr	r1, [pc, #36]	; (800c36c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c348:	4313      	orrs	r3, r2
 800c34a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f003 0310 	and.w	r3, r3, #16
 800c354:	2b00      	cmp	r3, #0
 800c356:	d004      	beq.n	800c362 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800c35e:	4b04      	ldr	r3, [pc, #16]	; (800c370 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800c360:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800c362:	2300      	movs	r3, #0
}
 800c364:	4618      	mov	r0, r3
 800c366:	3718      	adds	r7, #24
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}
 800c36c:	40023800 	.word	0x40023800
 800c370:	424711e0 	.word	0x424711e0

0800c374 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b082      	sub	sp, #8
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d101      	bne.n	800c386 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800c382:	2301      	movs	r3, #1
 800c384:	e083      	b.n	800c48e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	7f5b      	ldrb	r3, [r3, #29]
 800c38a:	b2db      	uxtb	r3, r3
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d105      	bne.n	800c39c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2200      	movs	r2, #0
 800c394:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f7f5 ffde 	bl	8002358 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2202      	movs	r2, #2
 800c3a0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	22ca      	movs	r2, #202	; 0xca
 800c3a8:	625a      	str	r2, [r3, #36]	; 0x24
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	2253      	movs	r2, #83	; 0x53
 800c3b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f000 fc30 	bl	800cc18 <RTC_EnterInitMode>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d008      	beq.n	800c3d0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	22ff      	movs	r2, #255	; 0xff
 800c3c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2204      	movs	r2, #4
 800c3ca:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	e05e      	b.n	800c48e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	689b      	ldr	r3, [r3, #8]
 800c3d6:	687a      	ldr	r2, [r7, #4]
 800c3d8:	6812      	ldr	r2, [r2, #0]
 800c3da:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c3de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3e2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	6899      	ldr	r1, [r3, #8]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	685a      	ldr	r2, [r3, #4]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	691b      	ldr	r3, [r3, #16]
 800c3f2:	431a      	orrs	r2, r3
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	695b      	ldr	r3, [r3, #20]
 800c3f8:	431a      	orrs	r2, r3
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	430a      	orrs	r2, r1
 800c400:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	687a      	ldr	r2, [r7, #4]
 800c408:	68d2      	ldr	r2, [r2, #12]
 800c40a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	6919      	ldr	r1, [r3, #16]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	689b      	ldr	r3, [r3, #8]
 800c416:	041a      	lsls	r2, r3, #16
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	430a      	orrs	r2, r1
 800c41e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	68da      	ldr	r2, [r3, #12]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c42e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	689b      	ldr	r3, [r3, #8]
 800c436:	f003 0320 	and.w	r3, r3, #32
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d10e      	bne.n	800c45c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f000 fbc2 	bl	800cbc8 <HAL_RTC_WaitForSynchro>
 800c444:	4603      	mov	r3, r0
 800c446:	2b00      	cmp	r3, #0
 800c448:	d008      	beq.n	800c45c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	22ff      	movs	r2, #255	; 0xff
 800c450:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2204      	movs	r2, #4
 800c456:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800c458:	2301      	movs	r3, #1
 800c45a:	e018      	b.n	800c48e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c46a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	699a      	ldr	r2, [r3, #24]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	430a      	orrs	r2, r1
 800c47c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	22ff      	movs	r2, #255	; 0xff
 800c484:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2201      	movs	r2, #1
 800c48a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800c48c:	2300      	movs	r3, #0
  }
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3708      	adds	r7, #8
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}

0800c496 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c496:	b590      	push	{r4, r7, lr}
 800c498:	b087      	sub	sp, #28
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	60f8      	str	r0, [r7, #12]
 800c49e:	60b9      	str	r1, [r7, #8]
 800c4a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	7f1b      	ldrb	r3, [r3, #28]
 800c4aa:	2b01      	cmp	r3, #1
 800c4ac:	d101      	bne.n	800c4b2 <HAL_RTC_SetTime+0x1c>
 800c4ae:	2302      	movs	r3, #2
 800c4b0:	e0aa      	b.n	800c608 <HAL_RTC_SetTime+0x172>
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	2201      	movs	r2, #1
 800c4b6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	2202      	movs	r2, #2
 800c4bc:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d126      	bne.n	800c512 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	689b      	ldr	r3, [r3, #8]
 800c4ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d102      	bne.n	800c4d8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f000 fbc7 	bl	800cc70 <RTC_ByteToBcd2>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	785b      	ldrb	r3, [r3, #1]
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f000 fbc0 	bl	800cc70 <RTC_ByteToBcd2>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c4f4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	789b      	ldrb	r3, [r3, #2]
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f000 fbb8 	bl	800cc70 <RTC_ByteToBcd2>
 800c500:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c502:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	78db      	ldrb	r3, [r3, #3]
 800c50a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c50c:	4313      	orrs	r3, r2
 800c50e:	617b      	str	r3, [r7, #20]
 800c510:	e018      	b.n	800c544 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	689b      	ldr	r3, [r3, #8]
 800c518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d102      	bne.n	800c526 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	2200      	movs	r2, #0
 800c524:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	781b      	ldrb	r3, [r3, #0]
 800c52a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	785b      	ldrb	r3, [r3, #1]
 800c530:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c532:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800c534:	68ba      	ldr	r2, [r7, #8]
 800c536:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800c538:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	78db      	ldrb	r3, [r3, #3]
 800c53e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c540:	4313      	orrs	r3, r2
 800c542:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	22ca      	movs	r2, #202	; 0xca
 800c54a:	625a      	str	r2, [r3, #36]	; 0x24
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	2253      	movs	r2, #83	; 0x53
 800c552:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c554:	68f8      	ldr	r0, [r7, #12]
 800c556:	f000 fb5f 	bl	800cc18 <RTC_EnterInitMode>
 800c55a:	4603      	mov	r3, r0
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d00b      	beq.n	800c578 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	22ff      	movs	r2, #255	; 0xff
 800c566:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	2204      	movs	r2, #4
 800c56c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	2200      	movs	r2, #0
 800c572:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800c574:	2301      	movs	r3, #1
 800c576:	e047      	b.n	800c608 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	681a      	ldr	r2, [r3, #0]
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c582:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c586:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	689a      	ldr	r2, [r3, #8]
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c596:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	6899      	ldr	r1, [r3, #8]
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	68da      	ldr	r2, [r3, #12]
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	691b      	ldr	r3, [r3, #16]
 800c5a6:	431a      	orrs	r2, r3
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	430a      	orrs	r2, r1
 800c5ae:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	68da      	ldr	r2, [r3, #12]
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c5be:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	689b      	ldr	r3, [r3, #8]
 800c5c6:	f003 0320 	and.w	r3, r3, #32
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d111      	bne.n	800c5f2 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c5ce:	68f8      	ldr	r0, [r7, #12]
 800c5d0:	f000 fafa 	bl	800cbc8 <HAL_RTC_WaitForSynchro>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d00b      	beq.n	800c5f2 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	22ff      	movs	r2, #255	; 0xff
 800c5e0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2204      	movs	r2, #4
 800c5e6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	e00a      	b.n	800c608 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	22ff      	movs	r2, #255	; 0xff
 800c5f8:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	2201      	movs	r2, #1
 800c5fe:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	2200      	movs	r2, #0
 800c604:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800c606:	2300      	movs	r3, #0
  }
}
 800c608:	4618      	mov	r0, r3
 800c60a:	371c      	adds	r7, #28
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd90      	pop	{r4, r7, pc}

0800c610 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b086      	sub	sp, #24
 800c614:	af00      	add	r7, sp, #0
 800c616:	60f8      	str	r0, [r7, #12]
 800c618:	60b9      	str	r1, [r7, #8]
 800c61a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c61c:	2300      	movs	r3, #0
 800c61e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	691b      	ldr	r3, [r3, #16]
 800c630:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c642:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c646:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	0c1b      	lsrs	r3, r3, #16
 800c64c:	b2db      	uxtb	r3, r3
 800c64e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c652:	b2da      	uxtb	r2, r3
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	0a1b      	lsrs	r3, r3, #8
 800c65c:	b2db      	uxtb	r3, r3
 800c65e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c662:	b2da      	uxtb	r2, r3
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	b2db      	uxtb	r3, r3
 800c66c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c670:	b2da      	uxtb	r2, r3
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	0c1b      	lsrs	r3, r3, #16
 800c67a:	b2db      	uxtb	r3, r3
 800c67c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c680:	b2da      	uxtb	r2, r3
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d11a      	bne.n	800c6c2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	4618      	mov	r0, r3
 800c692:	f000 fb0b 	bl	800ccac <RTC_Bcd2ToByte>
 800c696:	4603      	mov	r3, r0
 800c698:	461a      	mov	r2, r3
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	785b      	ldrb	r3, [r3, #1]
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f000 fb02 	bl	800ccac <RTC_Bcd2ToByte>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	789b      	ldrb	r3, [r3, #2]
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f000 faf9 	bl	800ccac <RTC_Bcd2ToByte>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	461a      	mov	r2, r3
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c6c2:	2300      	movs	r3, #0
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3718      	adds	r7, #24
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}

0800c6cc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c6cc:	b590      	push	{r4, r7, lr}
 800c6ce:	b087      	sub	sp, #28
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	60f8      	str	r0, [r7, #12]
 800c6d4:	60b9      	str	r1, [r7, #8]
 800c6d6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	7f1b      	ldrb	r3, [r3, #28]
 800c6e0:	2b01      	cmp	r3, #1
 800c6e2:	d101      	bne.n	800c6e8 <HAL_RTC_SetDate+0x1c>
 800c6e4:	2302      	movs	r3, #2
 800c6e6:	e094      	b.n	800c812 <HAL_RTC_SetDate+0x146>
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	2202      	movs	r2, #2
 800c6f2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d10e      	bne.n	800c718 <HAL_RTC_SetDate+0x4c>
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	785b      	ldrb	r3, [r3, #1]
 800c6fe:	f003 0310 	and.w	r3, r3, #16
 800c702:	2b00      	cmp	r3, #0
 800c704:	d008      	beq.n	800c718 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	785b      	ldrb	r3, [r3, #1]
 800c70a:	f023 0310 	bic.w	r3, r3, #16
 800c70e:	b2db      	uxtb	r3, r3
 800c710:	330a      	adds	r3, #10
 800c712:	b2da      	uxtb	r2, r3
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d11c      	bne.n	800c758 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	78db      	ldrb	r3, [r3, #3]
 800c722:	4618      	mov	r0, r3
 800c724:	f000 faa4 	bl	800cc70 <RTC_ByteToBcd2>
 800c728:	4603      	mov	r3, r0
 800c72a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	785b      	ldrb	r3, [r3, #1]
 800c730:	4618      	mov	r0, r3
 800c732:	f000 fa9d 	bl	800cc70 <RTC_ByteToBcd2>
 800c736:	4603      	mov	r3, r0
 800c738:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c73a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	789b      	ldrb	r3, [r3, #2]
 800c740:	4618      	mov	r0, r3
 800c742:	f000 fa95 	bl	800cc70 <RTC_ByteToBcd2>
 800c746:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c748:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c752:	4313      	orrs	r3, r2
 800c754:	617b      	str	r3, [r7, #20]
 800c756:	e00e      	b.n	800c776 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	78db      	ldrb	r3, [r3, #3]
 800c75c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	785b      	ldrb	r3, [r3, #1]
 800c762:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c764:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800c766:	68ba      	ldr	r2, [r7, #8]
 800c768:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800c76a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	781b      	ldrb	r3, [r3, #0]
 800c770:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c772:	4313      	orrs	r3, r2
 800c774:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	22ca      	movs	r2, #202	; 0xca
 800c77c:	625a      	str	r2, [r3, #36]	; 0x24
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	2253      	movs	r2, #83	; 0x53
 800c784:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c786:	68f8      	ldr	r0, [r7, #12]
 800c788:	f000 fa46 	bl	800cc18 <RTC_EnterInitMode>
 800c78c:	4603      	mov	r3, r0
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d00b      	beq.n	800c7aa <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	22ff      	movs	r2, #255	; 0xff
 800c798:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	2204      	movs	r2, #4
 800c79e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	e033      	b.n	800c812 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	681a      	ldr	r2, [r3, #0]
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c7b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c7b8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	68da      	ldr	r2, [r3, #12]
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c7c8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	689b      	ldr	r3, [r3, #8]
 800c7d0:	f003 0320 	and.w	r3, r3, #32
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d111      	bne.n	800c7fc <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c7d8:	68f8      	ldr	r0, [r7, #12]
 800c7da:	f000 f9f5 	bl	800cbc8 <HAL_RTC_WaitForSynchro>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d00b      	beq.n	800c7fc <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	22ff      	movs	r2, #255	; 0xff
 800c7ea:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	2204      	movs	r2, #4
 800c7f0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	e00a      	b.n	800c812 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	22ff      	movs	r2, #255	; 0xff
 800c802:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	2201      	movs	r2, #1
 800c808:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2200      	movs	r2, #0
 800c80e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800c810:	2300      	movs	r3, #0
  }
}
 800c812:	4618      	mov	r0, r3
 800c814:	371c      	adds	r7, #28
 800c816:	46bd      	mov	sp, r7
 800c818:	bd90      	pop	{r4, r7, pc}

0800c81a <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c81a:	b580      	push	{r7, lr}
 800c81c:	b086      	sub	sp, #24
 800c81e:	af00      	add	r7, sp, #0
 800c820:	60f8      	str	r0, [r7, #12]
 800c822:	60b9      	str	r1, [r7, #8]
 800c824:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c826:	2300      	movs	r3, #0
 800c828:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c834:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c838:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	0c1b      	lsrs	r3, r3, #16
 800c83e:	b2da      	uxtb	r2, r3
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	0a1b      	lsrs	r3, r3, #8
 800c848:	b2db      	uxtb	r3, r3
 800c84a:	f003 031f 	and.w	r3, r3, #31
 800c84e:	b2da      	uxtb	r2, r3
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	b2db      	uxtb	r3, r3
 800c858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c85c:	b2da      	uxtb	r2, r3
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	0b5b      	lsrs	r3, r3, #13
 800c866:	b2db      	uxtb	r3, r3
 800c868:	f003 0307 	and.w	r3, r3, #7
 800c86c:	b2da      	uxtb	r2, r3
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d11a      	bne.n	800c8ae <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	78db      	ldrb	r3, [r3, #3]
 800c87c:	4618      	mov	r0, r3
 800c87e:	f000 fa15 	bl	800ccac <RTC_Bcd2ToByte>
 800c882:	4603      	mov	r3, r0
 800c884:	461a      	mov	r2, r3
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	785b      	ldrb	r3, [r3, #1]
 800c88e:	4618      	mov	r0, r3
 800c890:	f000 fa0c 	bl	800ccac <RTC_Bcd2ToByte>
 800c894:	4603      	mov	r3, r0
 800c896:	461a      	mov	r2, r3
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	789b      	ldrb	r3, [r3, #2]
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f000 fa03 	bl	800ccac <RTC_Bcd2ToByte>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c8ae:	2300      	movs	r3, #0
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3718      	adds	r7, #24
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}

0800c8b8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800c8b8:	b590      	push	{r4, r7, lr}
 800c8ba:	b089      	sub	sp, #36	; 0x24
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	60f8      	str	r0, [r7, #12]
 800c8c0:	60b9      	str	r1, [r7, #8]
 800c8c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	61fb      	str	r3, [r7, #28]
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800c8cc:	4b93      	ldr	r3, [pc, #588]	; (800cb1c <HAL_RTC_SetAlarm_IT+0x264>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	4a93      	ldr	r2, [pc, #588]	; (800cb20 <HAL_RTC_SetAlarm_IT+0x268>)
 800c8d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c8d6:	0adb      	lsrs	r3, r3, #11
 800c8d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c8dc:	fb02 f303 	mul.w	r3, r2, r3
 800c8e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	7f1b      	ldrb	r3, [r3, #28]
 800c8e6:	2b01      	cmp	r3, #1
 800c8e8:	d101      	bne.n	800c8ee <HAL_RTC_SetAlarm_IT+0x36>
 800c8ea:	2302      	movs	r3, #2
 800c8ec:	e111      	b.n	800cb12 <HAL_RTC_SetAlarm_IT+0x25a>
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	2201      	movs	r2, #1
 800c8f2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	2202      	movs	r2, #2
 800c8f8:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d137      	bne.n	800c970 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	689b      	ldr	r3, [r3, #8]
 800c906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d102      	bne.n	800c914 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	2200      	movs	r2, #0
 800c912:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	4618      	mov	r0, r3
 800c91a:	f000 f9a9 	bl	800cc70 <RTC_ByteToBcd2>
 800c91e:	4603      	mov	r3, r0
 800c920:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	785b      	ldrb	r3, [r3, #1]
 800c926:	4618      	mov	r0, r3
 800c928:	f000 f9a2 	bl	800cc70 <RTC_ByteToBcd2>
 800c92c:	4603      	mov	r3, r0
 800c92e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800c930:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	789b      	ldrb	r3, [r3, #2]
 800c936:	4618      	mov	r0, r3
 800c938:	f000 f99a 	bl	800cc70 <RTC_ByteToBcd2>
 800c93c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c93e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	78db      	ldrb	r3, [r3, #3]
 800c946:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800c948:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c952:	4618      	mov	r0, r3
 800c954:	f000 f98c 	bl	800cc70 <RTC_ByteToBcd2>
 800c958:	4603      	mov	r3, r0
 800c95a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c95c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c964:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800c96a:	4313      	orrs	r3, r2
 800c96c:	61fb      	str	r3, [r7, #28]
 800c96e:	e023      	b.n	800c9b8 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	689b      	ldr	r3, [r3, #8]
 800c976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d102      	bne.n	800c984 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	2200      	movs	r2, #0
 800c982:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	785b      	ldrb	r3, [r3, #1]
 800c98e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800c990:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800c992:	68ba      	ldr	r2, [r7, #8]
 800c994:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c996:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	78db      	ldrb	r3, [r3, #3]
 800c99c:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800c99e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c9a6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c9a8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c9ae:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800c9b4:	4313      	orrs	r3, r2
 800c9b6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	685a      	ldr	r2, [r3, #4]
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	699b      	ldr	r3, [r3, #24]
 800c9c0:	4313      	orrs	r3, r2
 800c9c2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	22ca      	movs	r2, #202	; 0xca
 800c9ca:	625a      	str	r2, [r3, #36]	; 0x24
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	2253      	movs	r2, #83	; 0x53
 800c9d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9dc:	d141      	bne.n	800ca62 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	689a      	ldr	r2, [r3, #8]
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c9ec:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	68db      	ldr	r3, [r3, #12]
 800c9f4:	b2da      	uxtb	r2, r3
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800c9fe:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	1e5a      	subs	r2, r3, #1
 800ca04:	617a      	str	r2, [r7, #20]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d10b      	bne.n	800ca22 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	22ff      	movs	r2, #255	; 0xff
 800ca10:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	2203      	movs	r2, #3
 800ca16:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800ca1e:	2303      	movs	r3, #3
 800ca20:	e077      	b.n	800cb12 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	68db      	ldr	r3, [r3, #12]
 800ca28:	f003 0301 	and.w	r3, r3, #1
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d0e7      	beq.n	800ca00 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	69fa      	ldr	r2, [r7, #28]
 800ca36:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	69ba      	ldr	r2, [r7, #24]
 800ca3e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	689a      	ldr	r2, [r3, #8]
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ca4e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	689a      	ldr	r2, [r3, #8]
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ca5e:	609a      	str	r2, [r3, #8]
 800ca60:	e040      	b.n	800cae4 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	689a      	ldr	r2, [r3, #8]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ca70:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	68db      	ldr	r3, [r3, #12]
 800ca78:	b2da      	uxtb	r2, r3
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f462 7220 	orn	r2, r2, #640	; 0x280
 800ca82:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	1e5a      	subs	r2, r3, #1
 800ca88:	617a      	str	r2, [r7, #20]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d10b      	bne.n	800caa6 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	22ff      	movs	r2, #255	; 0xff
 800ca94:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	2203      	movs	r2, #3
 800ca9a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800caa2:	2303      	movs	r3, #3
 800caa4:	e035      	b.n	800cb12 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	68db      	ldr	r3, [r3, #12]
 800caac:	f003 0302 	and.w	r3, r3, #2
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d0e7      	beq.n	800ca84 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	69fa      	ldr	r2, [r7, #28]
 800caba:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	69ba      	ldr	r2, [r7, #24]
 800cac2:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	689a      	ldr	r2, [r3, #8]
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cad2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	689a      	ldr	r2, [r3, #8]
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cae2:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800cae4:	4b0f      	ldr	r3, [pc, #60]	; (800cb24 <HAL_RTC_SetAlarm_IT+0x26c>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4a0e      	ldr	r2, [pc, #56]	; (800cb24 <HAL_RTC_SetAlarm_IT+0x26c>)
 800caea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800caee:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 800caf0:	4b0c      	ldr	r3, [pc, #48]	; (800cb24 <HAL_RTC_SetAlarm_IT+0x26c>)
 800caf2:	689b      	ldr	r3, [r3, #8]
 800caf4:	4a0b      	ldr	r2, [pc, #44]	; (800cb24 <HAL_RTC_SetAlarm_IT+0x26c>)
 800caf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cafa:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	22ff      	movs	r2, #255	; 0xff
 800cb02:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	2201      	movs	r2, #1
 800cb08:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800cb10:	2300      	movs	r3, #0
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3724      	adds	r7, #36	; 0x24
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd90      	pop	{r4, r7, pc}
 800cb1a:	bf00      	nop
 800cb1c:	20000060 	.word	0x20000060
 800cb20:	10624dd3 	.word	0x10624dd3
 800cb24:	40013c00 	.word	0x40013c00

0800cb28 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b082      	sub	sp, #8
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	689b      	ldr	r3, [r3, #8]
 800cb36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d012      	beq.n	800cb64 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	68db      	ldr	r3, [r3, #12]
 800cb44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d00b      	beq.n	800cb64 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f000 f831 	bl	800cbb4 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	68db      	ldr	r3, [r3, #12]
 800cb58:	b2da      	uxtb	r2, r3
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800cb62:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	689b      	ldr	r3, [r3, #8]
 800cb6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d012      	beq.n	800cb98 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	68db      	ldr	r3, [r3, #12]
 800cb78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d00b      	beq.n	800cb98 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f000 f9fb 	bl	800cf7c <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	68db      	ldr	r3, [r3, #12]
 800cb8c:	b2da      	uxtb	r2, r3
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f462 7220 	orn	r2, r2, #640	; 0x280
 800cb96:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800cb98:	4b05      	ldr	r3, [pc, #20]	; (800cbb0 <HAL_RTC_AlarmIRQHandler+0x88>)
 800cb9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800cb9e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2201      	movs	r2, #1
 800cba4:	775a      	strb	r2, [r3, #29]
}
 800cba6:	bf00      	nop
 800cba8:	3708      	adds	r7, #8
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}
 800cbae:	bf00      	nop
 800cbb0:	40013c00 	.word	0x40013c00

0800cbb4 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b083      	sub	sp, #12
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800cbbc:	bf00      	nop
 800cbbe:	370c      	adds	r7, #12
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc6:	4770      	bx	lr

0800cbc8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b084      	sub	sp, #16
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	68da      	ldr	r2, [r3, #12]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800cbe2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cbe4:	f7fc feba 	bl	800995c <HAL_GetTick>
 800cbe8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800cbea:	e009      	b.n	800cc00 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cbec:	f7fc feb6 	bl	800995c <HAL_GetTick>
 800cbf0:	4602      	mov	r2, r0
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	1ad3      	subs	r3, r2, r3
 800cbf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cbfa:	d901      	bls.n	800cc00 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800cbfc:	2303      	movs	r3, #3
 800cbfe:	e007      	b.n	800cc10 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	68db      	ldr	r3, [r3, #12]
 800cc06:	f003 0320 	and.w	r3, r3, #32
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d0ee      	beq.n	800cbec <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800cc0e:	2300      	movs	r3, #0
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	3710      	adds	r7, #16
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}

0800cc18 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b084      	sub	sp, #16
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cc20:	2300      	movs	r3, #0
 800cc22:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	68db      	ldr	r3, [r3, #12]
 800cc2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d119      	bne.n	800cc66 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f04f 32ff 	mov.w	r2, #4294967295
 800cc3a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cc3c:	f7fc fe8e 	bl	800995c <HAL_GetTick>
 800cc40:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800cc42:	e009      	b.n	800cc58 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cc44:	f7fc fe8a 	bl	800995c <HAL_GetTick>
 800cc48:	4602      	mov	r2, r0
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	1ad3      	subs	r3, r2, r3
 800cc4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cc52:	d901      	bls.n	800cc58 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800cc54:	2303      	movs	r3, #3
 800cc56:	e007      	b.n	800cc68 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	68db      	ldr	r3, [r3, #12]
 800cc5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d0ee      	beq.n	800cc44 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800cc66:	2300      	movs	r3, #0
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3710      	adds	r7, #16
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800cc70:	b480      	push	{r7}
 800cc72:	b085      	sub	sp, #20
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	4603      	mov	r3, r0
 800cc78:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800cc7e:	e005      	b.n	800cc8c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	3301      	adds	r3, #1
 800cc84:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800cc86:	79fb      	ldrb	r3, [r7, #7]
 800cc88:	3b0a      	subs	r3, #10
 800cc8a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800cc8c:	79fb      	ldrb	r3, [r7, #7]
 800cc8e:	2b09      	cmp	r3, #9
 800cc90:	d8f6      	bhi.n	800cc80 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	b2db      	uxtb	r3, r3
 800cc96:	011b      	lsls	r3, r3, #4
 800cc98:	b2da      	uxtb	r2, r3
 800cc9a:	79fb      	ldrb	r3, [r7, #7]
 800cc9c:	4313      	orrs	r3, r2
 800cc9e:	b2db      	uxtb	r3, r3
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3714      	adds	r7, #20
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr

0800ccac <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800ccac:	b480      	push	{r7}
 800ccae:	b085      	sub	sp, #20
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800ccba:	79fb      	ldrb	r3, [r7, #7]
 800ccbc:	091b      	lsrs	r3, r3, #4
 800ccbe:	b2db      	uxtb	r3, r3
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	4613      	mov	r3, r2
 800ccc4:	009b      	lsls	r3, r3, #2
 800ccc6:	4413      	add	r3, r2
 800ccc8:	005b      	lsls	r3, r3, #1
 800ccca:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800cccc:	79fb      	ldrb	r3, [r7, #7]
 800ccce:	f003 030f 	and.w	r3, r3, #15
 800ccd2:	b2da      	uxtb	r2, r3
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	b2db      	uxtb	r3, r3
 800ccd8:	4413      	add	r3, r2
 800ccda:	b2db      	uxtb	r3, r3
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3714      	adds	r7, #20
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr

0800cce8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800cce8:	b480      	push	{r7}
 800ccea:	b087      	sub	sp, #28
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	60f8      	str	r0, [r7, #12]
 800ccf0:	60b9      	str	r1, [r7, #8]
 800ccf2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	7f1b      	ldrb	r3, [r3, #28]
 800ccf8:	2b01      	cmp	r3, #1
 800ccfa:	d101      	bne.n	800cd00 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 800ccfc:	2302      	movs	r3, #2
 800ccfe:	e0a6      	b.n	800ce4e <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	2201      	movs	r2, #1
 800cd04:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	2202      	movs	r2, #2
 800cd0a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	22ca      	movs	r2, #202	; 0xca
 800cd12:	625a      	str	r2, [r3, #36]	; 0x24
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	2253      	movs	r2, #83	; 0x53
 800cd1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	689b      	ldr	r3, [r3, #8]
 800cd22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d022      	beq.n	800cd70 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800cd2a:	4b4c      	ldr	r3, [pc, #304]	; (800ce5c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	4a4c      	ldr	r2, [pc, #304]	; (800ce60 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800cd30:	fba2 2303 	umull	r2, r3, r2, r3
 800cd34:	0adb      	lsrs	r3, r3, #11
 800cd36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cd3a:	fb02 f303 	mul.w	r3, r2, r3
 800cd3e:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	1e5a      	subs	r2, r3, #1
 800cd44:	617a      	str	r2, [r7, #20]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d10b      	bne.n	800cd62 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	22ff      	movs	r2, #255	; 0xff
 800cd50:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	2203      	movs	r2, #3
 800cd56:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800cd5e:	2303      	movs	r3, #3
 800cd60:	e075      	b.n	800ce4e <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	68db      	ldr	r3, [r3, #12]
 800cd68:	f003 0304 	and.w	r3, r3, #4
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d1e7      	bne.n	800cd40 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	689a      	ldr	r2, [r3, #8]
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd7e:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800cd80:	4b36      	ldr	r3, [pc, #216]	; (800ce5c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	4a36      	ldr	r2, [pc, #216]	; (800ce60 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800cd86:	fba2 2303 	umull	r2, r3, r2, r3
 800cd8a:	0adb      	lsrs	r3, r3, #11
 800cd8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cd90:	fb02 f303 	mul.w	r3, r2, r3
 800cd94:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	1e5a      	subs	r2, r3, #1
 800cd9a:	617a      	str	r2, [r7, #20]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d10b      	bne.n	800cdb8 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	22ff      	movs	r2, #255	; 0xff
 800cda6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2203      	movs	r2, #3
 800cdac:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800cdb4:	2303      	movs	r3, #3
 800cdb6:	e04a      	b.n	800ce4e <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	68db      	ldr	r3, [r3, #12]
 800cdbe:	f003 0304 	and.w	r3, r3, #4
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d0e7      	beq.n	800cd96 <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	68ba      	ldr	r2, [r7, #8]
 800cdcc:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	689a      	ldr	r2, [r3, #8]
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f022 0207 	bic.w	r2, r2, #7
 800cddc:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	6899      	ldr	r1, [r3, #8]
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	687a      	ldr	r2, [r7, #4]
 800cdea:	430a      	orrs	r2, r1
 800cdec:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800cdee:	4b1d      	ldr	r3, [pc, #116]	; (800ce64 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	4a1c      	ldr	r2, [pc, #112]	; (800ce64 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800cdf4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cdf8:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800cdfa:	4b1a      	ldr	r3, [pc, #104]	; (800ce64 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800cdfc:	689b      	ldr	r3, [r3, #8]
 800cdfe:	4a19      	ldr	r2, [pc, #100]	; (800ce64 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800ce00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ce04:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	68db      	ldr	r3, [r3, #12]
 800ce0c:	b2da      	uxtb	r2, r3
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800ce16:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	689a      	ldr	r2, [r3, #8]
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ce26:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	689a      	ldr	r2, [r3, #8]
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ce36:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	22ff      	movs	r2, #255	; 0xff
 800ce3e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	2201      	movs	r2, #1
 800ce44:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800ce4c:	2300      	movs	r3, #0
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	371c      	adds	r7, #28
 800ce52:	46bd      	mov	sp, r7
 800ce54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce58:	4770      	bx	lr
 800ce5a:	bf00      	nop
 800ce5c:	20000060 	.word	0x20000060
 800ce60:	10624dd3 	.word	0x10624dd3
 800ce64:	40013c00 	.word	0x40013c00

0800ce68 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b084      	sub	sp, #16
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ce70:	2300      	movs	r3, #0
 800ce72:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	7f1b      	ldrb	r3, [r3, #28]
 800ce78:	2b01      	cmp	r3, #1
 800ce7a:	d101      	bne.n	800ce80 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 800ce7c:	2302      	movs	r3, #2
 800ce7e:	e047      	b.n	800cf10 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2201      	movs	r2, #1
 800ce84:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2202      	movs	r2, #2
 800ce8a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	22ca      	movs	r2, #202	; 0xca
 800ce92:	625a      	str	r2, [r3, #36]	; 0x24
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	2253      	movs	r2, #83	; 0x53
 800ce9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	689a      	ldr	r2, [r3, #8]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ceaa:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	689a      	ldr	r2, [r3, #8]
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ceba:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cebc:	f7fc fd4e 	bl	800995c <HAL_GetTick>
 800cec0:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800cec2:	e013      	b.n	800ceec <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cec4:	f7fc fd4a 	bl	800995c <HAL_GetTick>
 800cec8:	4602      	mov	r2, r0
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	1ad3      	subs	r3, r2, r3
 800cece:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ced2:	d90b      	bls.n	800ceec <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	22ff      	movs	r2, #255	; 0xff
 800ceda:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2203      	movs	r2, #3
 800cee0:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2200      	movs	r2, #0
 800cee6:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800cee8:	2303      	movs	r3, #3
 800ceea:	e011      	b.n	800cf10 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	68db      	ldr	r3, [r3, #12]
 800cef2:	f003 0304 	and.w	r3, r3, #4
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d0e4      	beq.n	800cec4 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	22ff      	movs	r2, #255	; 0xff
 800cf00:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2201      	movs	r2, #1
 800cf06:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800cf0e:	2300      	movs	r3, #0
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	3710      	adds	r7, #16
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}

0800cf18 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	b087      	sub	sp, #28
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	60f8      	str	r0, [r7, #12]
 800cf20:	60b9      	str	r1, [r7, #8]
 800cf22:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800cf24:	2300      	movs	r3, #0
 800cf26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	3350      	adds	r3, #80	; 0x50
 800cf2e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	009b      	lsls	r3, r3, #2
 800cf34:	697a      	ldr	r2, [r7, #20]
 800cf36:	4413      	add	r3, r2
 800cf38:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	687a      	ldr	r2, [r7, #4]
 800cf3e:	601a      	str	r2, [r3, #0]
}
 800cf40:	bf00      	nop
 800cf42:	371c      	adds	r7, #28
 800cf44:	46bd      	mov	sp, r7
 800cf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4a:	4770      	bx	lr

0800cf4c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b085      	sub	sp, #20
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800cf56:	2300      	movs	r3, #0
 800cf58:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	3350      	adds	r3, #80	; 0x50
 800cf60:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	009b      	lsls	r3, r3, #2
 800cf66:	68fa      	ldr	r2, [r7, #12]
 800cf68:	4413      	add	r3, r2
 800cf6a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	681b      	ldr	r3, [r3, #0]
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	3714      	adds	r7, #20
 800cf74:	46bd      	mov	sp, r7
 800cf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7a:	4770      	bx	lr

0800cf7c <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b083      	sub	sp, #12
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 800cf84:	bf00      	nop
 800cf86:	370c      	adds	r7, #12
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr

0800cf90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b082      	sub	sp, #8
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d101      	bne.n	800cfa2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	e07b      	b.n	800d09a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d108      	bne.n	800cfbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	685b      	ldr	r3, [r3, #4]
 800cfae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cfb2:	d009      	beq.n	800cfc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	61da      	str	r2, [r3, #28]
 800cfba:	e005      	b.n	800cfc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cfd4:	b2db      	uxtb	r3, r3
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d106      	bne.n	800cfe8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2200      	movs	r2, #0
 800cfde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f7f5 fc46 	bl	8002874 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2202      	movs	r2, #2
 800cfec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	681a      	ldr	r2, [r3, #0]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cffe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	685b      	ldr	r3, [r3, #4]
 800d004:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	689b      	ldr	r3, [r3, #8]
 800d00c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d010:	431a      	orrs	r2, r3
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	68db      	ldr	r3, [r3, #12]
 800d016:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d01a:	431a      	orrs	r2, r3
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	691b      	ldr	r3, [r3, #16]
 800d020:	f003 0302 	and.w	r3, r3, #2
 800d024:	431a      	orrs	r2, r3
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	695b      	ldr	r3, [r3, #20]
 800d02a:	f003 0301 	and.w	r3, r3, #1
 800d02e:	431a      	orrs	r2, r3
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	699b      	ldr	r3, [r3, #24]
 800d034:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d038:	431a      	orrs	r2, r3
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	69db      	ldr	r3, [r3, #28]
 800d03e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d042:	431a      	orrs	r2, r3
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6a1b      	ldr	r3, [r3, #32]
 800d048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d04c:	ea42 0103 	orr.w	r1, r2, r3
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d054:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	430a      	orrs	r2, r1
 800d05e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	699b      	ldr	r3, [r3, #24]
 800d064:	0c1b      	lsrs	r3, r3, #16
 800d066:	f003 0104 	and.w	r1, r3, #4
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d06e:	f003 0210 	and.w	r2, r3, #16
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	430a      	orrs	r2, r1
 800d078:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	69da      	ldr	r2, [r3, #28]
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d088:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2200      	movs	r2, #0
 800d08e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2201      	movs	r2, #1
 800d094:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800d098:	2300      	movs	r3, #0
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3708      	adds	r7, #8
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}

0800d0a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d0a2:	b580      	push	{r7, lr}
 800d0a4:	b088      	sub	sp, #32
 800d0a6:	af00      	add	r7, sp, #0
 800d0a8:	60f8      	str	r0, [r7, #12]
 800d0aa:	60b9      	str	r1, [r7, #8]
 800d0ac:	603b      	str	r3, [r7, #0]
 800d0ae:	4613      	mov	r3, r2
 800d0b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d0bc:	2b01      	cmp	r3, #1
 800d0be:	d101      	bne.n	800d0c4 <HAL_SPI_Transmit+0x22>
 800d0c0:	2302      	movs	r3, #2
 800d0c2:	e126      	b.n	800d312 <HAL_SPI_Transmit+0x270>
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d0cc:	f7fc fc46 	bl	800995c <HAL_GetTick>
 800d0d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d0d2:	88fb      	ldrh	r3, [r7, #6]
 800d0d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d0dc:	b2db      	uxtb	r3, r3
 800d0de:	2b01      	cmp	r3, #1
 800d0e0:	d002      	beq.n	800d0e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d0e2:	2302      	movs	r3, #2
 800d0e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d0e6:	e10b      	b.n	800d300 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d002      	beq.n	800d0f4 <HAL_SPI_Transmit+0x52>
 800d0ee:	88fb      	ldrh	r3, [r7, #6]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d102      	bne.n	800d0fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d0f8:	e102      	b.n	800d300 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	2203      	movs	r2, #3
 800d0fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	2200      	movs	r2, #0
 800d106:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	68ba      	ldr	r2, [r7, #8]
 800d10c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	88fa      	ldrh	r2, [r7, #6]
 800d112:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	88fa      	ldrh	r2, [r7, #6]
 800d118:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	2200      	movs	r2, #0
 800d11e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	2200      	movs	r2, #0
 800d124:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	2200      	movs	r2, #0
 800d12a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2200      	movs	r2, #0
 800d130:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2200      	movs	r2, #0
 800d136:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	689b      	ldr	r3, [r3, #8]
 800d13c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d140:	d10f      	bne.n	800d162 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	681a      	ldr	r2, [r3, #0]
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d150:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	681a      	ldr	r2, [r3, #0]
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d160:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d16c:	2b40      	cmp	r3, #64	; 0x40
 800d16e:	d007      	beq.n	800d180 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	681a      	ldr	r2, [r3, #0]
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d17e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	68db      	ldr	r3, [r3, #12]
 800d184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d188:	d14b      	bne.n	800d222 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	685b      	ldr	r3, [r3, #4]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d002      	beq.n	800d198 <HAL_SPI_Transmit+0xf6>
 800d192:	8afb      	ldrh	r3, [r7, #22]
 800d194:	2b01      	cmp	r3, #1
 800d196:	d13e      	bne.n	800d216 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d19c:	881a      	ldrh	r2, [r3, #0]
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1a8:	1c9a      	adds	r2, r3, #2
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d1b2:	b29b      	uxth	r3, r3
 800d1b4:	3b01      	subs	r3, #1
 800d1b6:	b29a      	uxth	r2, r3
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d1bc:	e02b      	b.n	800d216 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	689b      	ldr	r3, [r3, #8]
 800d1c4:	f003 0302 	and.w	r3, r3, #2
 800d1c8:	2b02      	cmp	r3, #2
 800d1ca:	d112      	bne.n	800d1f2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1d0:	881a      	ldrh	r2, [r3, #0]
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1dc:	1c9a      	adds	r2, r3, #2
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d1e6:	b29b      	uxth	r3, r3
 800d1e8:	3b01      	subs	r3, #1
 800d1ea:	b29a      	uxth	r2, r3
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	86da      	strh	r2, [r3, #54]	; 0x36
 800d1f0:	e011      	b.n	800d216 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d1f2:	f7fc fbb3 	bl	800995c <HAL_GetTick>
 800d1f6:	4602      	mov	r2, r0
 800d1f8:	69bb      	ldr	r3, [r7, #24]
 800d1fa:	1ad3      	subs	r3, r2, r3
 800d1fc:	683a      	ldr	r2, [r7, #0]
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d803      	bhi.n	800d20a <HAL_SPI_Transmit+0x168>
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d208:	d102      	bne.n	800d210 <HAL_SPI_Transmit+0x16e>
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d102      	bne.n	800d216 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800d210:	2303      	movs	r3, #3
 800d212:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d214:	e074      	b.n	800d300 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d21a:	b29b      	uxth	r3, r3
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d1ce      	bne.n	800d1be <HAL_SPI_Transmit+0x11c>
 800d220:	e04c      	b.n	800d2bc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	685b      	ldr	r3, [r3, #4]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d002      	beq.n	800d230 <HAL_SPI_Transmit+0x18e>
 800d22a:	8afb      	ldrh	r3, [r7, #22]
 800d22c:	2b01      	cmp	r3, #1
 800d22e:	d140      	bne.n	800d2b2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	330c      	adds	r3, #12
 800d23a:	7812      	ldrb	r2, [r2, #0]
 800d23c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d242:	1c5a      	adds	r2, r3, #1
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d24c:	b29b      	uxth	r3, r3
 800d24e:	3b01      	subs	r3, #1
 800d250:	b29a      	uxth	r2, r3
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800d256:	e02c      	b.n	800d2b2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	689b      	ldr	r3, [r3, #8]
 800d25e:	f003 0302 	and.w	r3, r3, #2
 800d262:	2b02      	cmp	r3, #2
 800d264:	d113      	bne.n	800d28e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	330c      	adds	r3, #12
 800d270:	7812      	ldrb	r2, [r2, #0]
 800d272:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d278:	1c5a      	adds	r2, r3, #1
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d282:	b29b      	uxth	r3, r3
 800d284:	3b01      	subs	r3, #1
 800d286:	b29a      	uxth	r2, r3
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	86da      	strh	r2, [r3, #54]	; 0x36
 800d28c:	e011      	b.n	800d2b2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d28e:	f7fc fb65 	bl	800995c <HAL_GetTick>
 800d292:	4602      	mov	r2, r0
 800d294:	69bb      	ldr	r3, [r7, #24]
 800d296:	1ad3      	subs	r3, r2, r3
 800d298:	683a      	ldr	r2, [r7, #0]
 800d29a:	429a      	cmp	r2, r3
 800d29c:	d803      	bhi.n	800d2a6 <HAL_SPI_Transmit+0x204>
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2a4:	d102      	bne.n	800d2ac <HAL_SPI_Transmit+0x20a>
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d102      	bne.n	800d2b2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800d2ac:	2303      	movs	r3, #3
 800d2ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d2b0:	e026      	b.n	800d300 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d2b6:	b29b      	uxth	r3, r3
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d1cd      	bne.n	800d258 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d2bc:	69ba      	ldr	r2, [r7, #24]
 800d2be:	6839      	ldr	r1, [r7, #0]
 800d2c0:	68f8      	ldr	r0, [r7, #12]
 800d2c2:	f000 fbcb 	bl	800da5c <SPI_EndRxTxTransaction>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d002      	beq.n	800d2d2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	2220      	movs	r2, #32
 800d2d0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	689b      	ldr	r3, [r3, #8]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d10a      	bne.n	800d2f0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d2da:	2300      	movs	r3, #0
 800d2dc:	613b      	str	r3, [r7, #16]
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	68db      	ldr	r3, [r3, #12]
 800d2e4:	613b      	str	r3, [r7, #16]
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	689b      	ldr	r3, [r3, #8]
 800d2ec:	613b      	str	r3, [r7, #16]
 800d2ee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d002      	beq.n	800d2fe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	77fb      	strb	r3, [r7, #31]
 800d2fc:	e000      	b.n	800d300 <HAL_SPI_Transmit+0x25e>
  }

error:
 800d2fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	2201      	movs	r2, #1
 800d304:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	2200      	movs	r2, #0
 800d30c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d310:	7ffb      	ldrb	r3, [r7, #31]
}
 800d312:	4618      	mov	r0, r3
 800d314:	3720      	adds	r7, #32
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}

0800d31a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d31a:	b580      	push	{r7, lr}
 800d31c:	b088      	sub	sp, #32
 800d31e:	af02      	add	r7, sp, #8
 800d320:	60f8      	str	r0, [r7, #12]
 800d322:	60b9      	str	r1, [r7, #8]
 800d324:	603b      	str	r3, [r7, #0]
 800d326:	4613      	mov	r3, r2
 800d328:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d32a:	2300      	movs	r3, #0
 800d32c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	685b      	ldr	r3, [r3, #4]
 800d332:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d336:	d112      	bne.n	800d35e <HAL_SPI_Receive+0x44>
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	689b      	ldr	r3, [r3, #8]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d10e      	bne.n	800d35e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	2204      	movs	r2, #4
 800d344:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d348:	88fa      	ldrh	r2, [r7, #6]
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	9300      	str	r3, [sp, #0]
 800d34e:	4613      	mov	r3, r2
 800d350:	68ba      	ldr	r2, [r7, #8]
 800d352:	68b9      	ldr	r1, [r7, #8]
 800d354:	68f8      	ldr	r0, [r7, #12]
 800d356:	f000 f8f1 	bl	800d53c <HAL_SPI_TransmitReceive>
 800d35a:	4603      	mov	r3, r0
 800d35c:	e0ea      	b.n	800d534 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d364:	2b01      	cmp	r3, #1
 800d366:	d101      	bne.n	800d36c <HAL_SPI_Receive+0x52>
 800d368:	2302      	movs	r3, #2
 800d36a:	e0e3      	b.n	800d534 <HAL_SPI_Receive+0x21a>
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	2201      	movs	r2, #1
 800d370:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d374:	f7fc faf2 	bl	800995c <HAL_GetTick>
 800d378:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d380:	b2db      	uxtb	r3, r3
 800d382:	2b01      	cmp	r3, #1
 800d384:	d002      	beq.n	800d38c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800d386:	2302      	movs	r3, #2
 800d388:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d38a:	e0ca      	b.n	800d522 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d002      	beq.n	800d398 <HAL_SPI_Receive+0x7e>
 800d392:	88fb      	ldrh	r3, [r7, #6]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d102      	bne.n	800d39e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800d398:	2301      	movs	r3, #1
 800d39a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d39c:	e0c1      	b.n	800d522 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	2204      	movs	r2, #4
 800d3a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	68ba      	ldr	r2, [r7, #8]
 800d3b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	88fa      	ldrh	r2, [r7, #6]
 800d3b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	88fa      	ldrh	r2, [r7, #6]
 800d3bc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	2200      	movs	r2, #0
 800d3da:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	689b      	ldr	r3, [r3, #8]
 800d3e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d3e4:	d10f      	bne.n	800d406 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	681a      	ldr	r2, [r3, #0]
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d3f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	681a      	ldr	r2, [r3, #0]
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d404:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d410:	2b40      	cmp	r3, #64	; 0x40
 800d412:	d007      	beq.n	800d424 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	681a      	ldr	r2, [r3, #0]
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d422:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	68db      	ldr	r3, [r3, #12]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d162      	bne.n	800d4f2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800d42c:	e02e      	b.n	800d48c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	689b      	ldr	r3, [r3, #8]
 800d434:	f003 0301 	and.w	r3, r3, #1
 800d438:	2b01      	cmp	r3, #1
 800d43a:	d115      	bne.n	800d468 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	f103 020c 	add.w	r2, r3, #12
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d448:	7812      	ldrb	r2, [r2, #0]
 800d44a:	b2d2      	uxtb	r2, r2
 800d44c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d452:	1c5a      	adds	r2, r3, #1
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d45c:	b29b      	uxth	r3, r3
 800d45e:	3b01      	subs	r3, #1
 800d460:	b29a      	uxth	r2, r3
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d466:	e011      	b.n	800d48c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d468:	f7fc fa78 	bl	800995c <HAL_GetTick>
 800d46c:	4602      	mov	r2, r0
 800d46e:	693b      	ldr	r3, [r7, #16]
 800d470:	1ad3      	subs	r3, r2, r3
 800d472:	683a      	ldr	r2, [r7, #0]
 800d474:	429a      	cmp	r2, r3
 800d476:	d803      	bhi.n	800d480 <HAL_SPI_Receive+0x166>
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d47e:	d102      	bne.n	800d486 <HAL_SPI_Receive+0x16c>
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d102      	bne.n	800d48c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800d486:	2303      	movs	r3, #3
 800d488:	75fb      	strb	r3, [r7, #23]
          goto error;
 800d48a:	e04a      	b.n	800d522 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d490:	b29b      	uxth	r3, r3
 800d492:	2b00      	cmp	r3, #0
 800d494:	d1cb      	bne.n	800d42e <HAL_SPI_Receive+0x114>
 800d496:	e031      	b.n	800d4fc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	689b      	ldr	r3, [r3, #8]
 800d49e:	f003 0301 	and.w	r3, r3, #1
 800d4a2:	2b01      	cmp	r3, #1
 800d4a4:	d113      	bne.n	800d4ce <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	68da      	ldr	r2, [r3, #12]
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4b0:	b292      	uxth	r2, r2
 800d4b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4b8:	1c9a      	adds	r2, r3, #2
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d4c2:	b29b      	uxth	r3, r3
 800d4c4:	3b01      	subs	r3, #1
 800d4c6:	b29a      	uxth	r2, r3
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d4cc:	e011      	b.n	800d4f2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d4ce:	f7fc fa45 	bl	800995c <HAL_GetTick>
 800d4d2:	4602      	mov	r2, r0
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	1ad3      	subs	r3, r2, r3
 800d4d8:	683a      	ldr	r2, [r7, #0]
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d803      	bhi.n	800d4e6 <HAL_SPI_Receive+0x1cc>
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4e4:	d102      	bne.n	800d4ec <HAL_SPI_Receive+0x1d2>
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d102      	bne.n	800d4f2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800d4ec:	2303      	movs	r3, #3
 800d4ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 800d4f0:	e017      	b.n	800d522 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d4f6:	b29b      	uxth	r3, r3
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d1cd      	bne.n	800d498 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d4fc:	693a      	ldr	r2, [r7, #16]
 800d4fe:	6839      	ldr	r1, [r7, #0]
 800d500:	68f8      	ldr	r0, [r7, #12]
 800d502:	f000 fa45 	bl	800d990 <SPI_EndRxTransaction>
 800d506:	4603      	mov	r3, r0
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d002      	beq.n	800d512 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	2220      	movs	r2, #32
 800d510:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d516:	2b00      	cmp	r3, #0
 800d518:	d002      	beq.n	800d520 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800d51a:	2301      	movs	r3, #1
 800d51c:	75fb      	strb	r3, [r7, #23]
 800d51e:	e000      	b.n	800d522 <HAL_SPI_Receive+0x208>
  }

error :
 800d520:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	2201      	movs	r2, #1
 800d526:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	2200      	movs	r2, #0
 800d52e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d532:	7dfb      	ldrb	r3, [r7, #23]
}
 800d534:	4618      	mov	r0, r3
 800d536:	3718      	adds	r7, #24
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}

0800d53c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b08c      	sub	sp, #48	; 0x30
 800d540:	af00      	add	r7, sp, #0
 800d542:	60f8      	str	r0, [r7, #12]
 800d544:	60b9      	str	r1, [r7, #8]
 800d546:	607a      	str	r2, [r7, #4]
 800d548:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d54a:	2301      	movs	r3, #1
 800d54c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800d54e:	2300      	movs	r3, #0
 800d550:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d55a:	2b01      	cmp	r3, #1
 800d55c:	d101      	bne.n	800d562 <HAL_SPI_TransmitReceive+0x26>
 800d55e:	2302      	movs	r3, #2
 800d560:	e18a      	b.n	800d878 <HAL_SPI_TransmitReceive+0x33c>
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	2201      	movs	r2, #1
 800d566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d56a:	f7fc f9f7 	bl	800995c <HAL_GetTick>
 800d56e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	685b      	ldr	r3, [r3, #4]
 800d57e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800d580:	887b      	ldrh	r3, [r7, #2]
 800d582:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d584:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d588:	2b01      	cmp	r3, #1
 800d58a:	d00f      	beq.n	800d5ac <HAL_SPI_TransmitReceive+0x70>
 800d58c:	69fb      	ldr	r3, [r7, #28]
 800d58e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d592:	d107      	bne.n	800d5a4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	689b      	ldr	r3, [r3, #8]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d103      	bne.n	800d5a4 <HAL_SPI_TransmitReceive+0x68>
 800d59c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d5a0:	2b04      	cmp	r3, #4
 800d5a2:	d003      	beq.n	800d5ac <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800d5a4:	2302      	movs	r3, #2
 800d5a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d5aa:	e15b      	b.n	800d864 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d005      	beq.n	800d5be <HAL_SPI_TransmitReceive+0x82>
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d002      	beq.n	800d5be <HAL_SPI_TransmitReceive+0x82>
 800d5b8:	887b      	ldrh	r3, [r7, #2]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d103      	bne.n	800d5c6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800d5be:	2301      	movs	r3, #1
 800d5c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d5c4:	e14e      	b.n	800d864 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d5cc:	b2db      	uxtb	r3, r3
 800d5ce:	2b04      	cmp	r3, #4
 800d5d0:	d003      	beq.n	800d5da <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	2205      	movs	r2, #5
 800d5d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	687a      	ldr	r2, [r7, #4]
 800d5e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	887a      	ldrh	r2, [r7, #2]
 800d5ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	887a      	ldrh	r2, [r7, #2]
 800d5f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	68ba      	ldr	r2, [r7, #8]
 800d5f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	887a      	ldrh	r2, [r7, #2]
 800d5fc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	887a      	ldrh	r2, [r7, #2]
 800d602:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	2200      	movs	r2, #0
 800d608:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	2200      	movs	r2, #0
 800d60e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d61a:	2b40      	cmp	r3, #64	; 0x40
 800d61c:	d007      	beq.n	800d62e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	681a      	ldr	r2, [r3, #0]
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d62c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	68db      	ldr	r3, [r3, #12]
 800d632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d636:	d178      	bne.n	800d72a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	685b      	ldr	r3, [r3, #4]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d002      	beq.n	800d646 <HAL_SPI_TransmitReceive+0x10a>
 800d640:	8b7b      	ldrh	r3, [r7, #26]
 800d642:	2b01      	cmp	r3, #1
 800d644:	d166      	bne.n	800d714 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d64a:	881a      	ldrh	r2, [r3, #0]
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d656:	1c9a      	adds	r2, r3, #2
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d660:	b29b      	uxth	r3, r3
 800d662:	3b01      	subs	r3, #1
 800d664:	b29a      	uxth	r2, r3
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d66a:	e053      	b.n	800d714 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	689b      	ldr	r3, [r3, #8]
 800d672:	f003 0302 	and.w	r3, r3, #2
 800d676:	2b02      	cmp	r3, #2
 800d678:	d11b      	bne.n	800d6b2 <HAL_SPI_TransmitReceive+0x176>
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d67e:	b29b      	uxth	r3, r3
 800d680:	2b00      	cmp	r3, #0
 800d682:	d016      	beq.n	800d6b2 <HAL_SPI_TransmitReceive+0x176>
 800d684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d686:	2b01      	cmp	r3, #1
 800d688:	d113      	bne.n	800d6b2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d68e:	881a      	ldrh	r2, [r3, #0]
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d69a:	1c9a      	adds	r2, r3, #2
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d6a4:	b29b      	uxth	r3, r3
 800d6a6:	3b01      	subs	r3, #1
 800d6a8:	b29a      	uxth	r2, r3
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	689b      	ldr	r3, [r3, #8]
 800d6b8:	f003 0301 	and.w	r3, r3, #1
 800d6bc:	2b01      	cmp	r3, #1
 800d6be:	d119      	bne.n	800d6f4 <HAL_SPI_TransmitReceive+0x1b8>
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d014      	beq.n	800d6f4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	68da      	ldr	r2, [r3, #12]
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6d4:	b292      	uxth	r2, r2
 800d6d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6dc:	1c9a      	adds	r2, r3, #2
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d6e6:	b29b      	uxth	r3, r3
 800d6e8:	3b01      	subs	r3, #1
 800d6ea:	b29a      	uxth	r2, r3
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d6f4:	f7fc f932 	bl	800995c <HAL_GetTick>
 800d6f8:	4602      	mov	r2, r0
 800d6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6fc:	1ad3      	subs	r3, r2, r3
 800d6fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d700:	429a      	cmp	r2, r3
 800d702:	d807      	bhi.n	800d714 <HAL_SPI_TransmitReceive+0x1d8>
 800d704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d70a:	d003      	beq.n	800d714 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800d70c:	2303      	movs	r3, #3
 800d70e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d712:	e0a7      	b.n	800d864 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d718:	b29b      	uxth	r3, r3
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d1a6      	bne.n	800d66c <HAL_SPI_TransmitReceive+0x130>
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d722:	b29b      	uxth	r3, r3
 800d724:	2b00      	cmp	r3, #0
 800d726:	d1a1      	bne.n	800d66c <HAL_SPI_TransmitReceive+0x130>
 800d728:	e07c      	b.n	800d824 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	685b      	ldr	r3, [r3, #4]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d002      	beq.n	800d738 <HAL_SPI_TransmitReceive+0x1fc>
 800d732:	8b7b      	ldrh	r3, [r7, #26]
 800d734:	2b01      	cmp	r3, #1
 800d736:	d16b      	bne.n	800d810 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	330c      	adds	r3, #12
 800d742:	7812      	ldrb	r2, [r2, #0]
 800d744:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d74a:	1c5a      	adds	r2, r3, #1
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d754:	b29b      	uxth	r3, r3
 800d756:	3b01      	subs	r3, #1
 800d758:	b29a      	uxth	r2, r3
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d75e:	e057      	b.n	800d810 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	689b      	ldr	r3, [r3, #8]
 800d766:	f003 0302 	and.w	r3, r3, #2
 800d76a:	2b02      	cmp	r3, #2
 800d76c:	d11c      	bne.n	800d7a8 <HAL_SPI_TransmitReceive+0x26c>
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d772:	b29b      	uxth	r3, r3
 800d774:	2b00      	cmp	r3, #0
 800d776:	d017      	beq.n	800d7a8 <HAL_SPI_TransmitReceive+0x26c>
 800d778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d77a:	2b01      	cmp	r3, #1
 800d77c:	d114      	bne.n	800d7a8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	330c      	adds	r3, #12
 800d788:	7812      	ldrb	r2, [r2, #0]
 800d78a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d790:	1c5a      	adds	r2, r3, #1
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d79a:	b29b      	uxth	r3, r3
 800d79c:	3b01      	subs	r3, #1
 800d79e:	b29a      	uxth	r2, r3
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	689b      	ldr	r3, [r3, #8]
 800d7ae:	f003 0301 	and.w	r3, r3, #1
 800d7b2:	2b01      	cmp	r3, #1
 800d7b4:	d119      	bne.n	800d7ea <HAL_SPI_TransmitReceive+0x2ae>
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d7ba:	b29b      	uxth	r3, r3
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d014      	beq.n	800d7ea <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	68da      	ldr	r2, [r3, #12]
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ca:	b2d2      	uxtb	r2, r2
 800d7cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7d2:	1c5a      	adds	r2, r3, #1
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d7dc:	b29b      	uxth	r3, r3
 800d7de:	3b01      	subs	r3, #1
 800d7e0:	b29a      	uxth	r2, r3
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d7ea:	f7fc f8b7 	bl	800995c <HAL_GetTick>
 800d7ee:	4602      	mov	r2, r0
 800d7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f2:	1ad3      	subs	r3, r2, r3
 800d7f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d803      	bhi.n	800d802 <HAL_SPI_TransmitReceive+0x2c6>
 800d7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d800:	d102      	bne.n	800d808 <HAL_SPI_TransmitReceive+0x2cc>
 800d802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d804:	2b00      	cmp	r3, #0
 800d806:	d103      	bne.n	800d810 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800d808:	2303      	movs	r3, #3
 800d80a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d80e:	e029      	b.n	800d864 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d814:	b29b      	uxth	r3, r3
 800d816:	2b00      	cmp	r3, #0
 800d818:	d1a2      	bne.n	800d760 <HAL_SPI_TransmitReceive+0x224>
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d81e:	b29b      	uxth	r3, r3
 800d820:	2b00      	cmp	r3, #0
 800d822:	d19d      	bne.n	800d760 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d826:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d828:	68f8      	ldr	r0, [r7, #12]
 800d82a:	f000 f917 	bl	800da5c <SPI_EndRxTxTransaction>
 800d82e:	4603      	mov	r3, r0
 800d830:	2b00      	cmp	r3, #0
 800d832:	d006      	beq.n	800d842 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800d834:	2301      	movs	r3, #1
 800d836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	2220      	movs	r2, #32
 800d83e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800d840:	e010      	b.n	800d864 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	689b      	ldr	r3, [r3, #8]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d10b      	bne.n	800d862 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d84a:	2300      	movs	r3, #0
 800d84c:	617b      	str	r3, [r7, #20]
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	68db      	ldr	r3, [r3, #12]
 800d854:	617b      	str	r3, [r7, #20]
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	689b      	ldr	r3, [r3, #8]
 800d85c:	617b      	str	r3, [r7, #20]
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	e000      	b.n	800d864 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800d862:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	2201      	movs	r2, #1
 800d868:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	2200      	movs	r2, #0
 800d870:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d874:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3730      	adds	r7, #48	; 0x30
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}

0800d880 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b088      	sub	sp, #32
 800d884:	af00      	add	r7, sp, #0
 800d886:	60f8      	str	r0, [r7, #12]
 800d888:	60b9      	str	r1, [r7, #8]
 800d88a:	603b      	str	r3, [r7, #0]
 800d88c:	4613      	mov	r3, r2
 800d88e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d890:	f7fc f864 	bl	800995c <HAL_GetTick>
 800d894:	4602      	mov	r2, r0
 800d896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d898:	1a9b      	subs	r3, r3, r2
 800d89a:	683a      	ldr	r2, [r7, #0]
 800d89c:	4413      	add	r3, r2
 800d89e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d8a0:	f7fc f85c 	bl	800995c <HAL_GetTick>
 800d8a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d8a6:	4b39      	ldr	r3, [pc, #228]	; (800d98c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	015b      	lsls	r3, r3, #5
 800d8ac:	0d1b      	lsrs	r3, r3, #20
 800d8ae:	69fa      	ldr	r2, [r7, #28]
 800d8b0:	fb02 f303 	mul.w	r3, r2, r3
 800d8b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d8b6:	e054      	b.n	800d962 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8be:	d050      	beq.n	800d962 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d8c0:	f7fc f84c 	bl	800995c <HAL_GetTick>
 800d8c4:	4602      	mov	r2, r0
 800d8c6:	69bb      	ldr	r3, [r7, #24]
 800d8c8:	1ad3      	subs	r3, r2, r3
 800d8ca:	69fa      	ldr	r2, [r7, #28]
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	d902      	bls.n	800d8d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800d8d0:	69fb      	ldr	r3, [r7, #28]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d13d      	bne.n	800d952 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	685a      	ldr	r2, [r3, #4]
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d8e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	685b      	ldr	r3, [r3, #4]
 800d8ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d8ee:	d111      	bne.n	800d914 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	689b      	ldr	r3, [r3, #8]
 800d8f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d8f8:	d004      	beq.n	800d904 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	689b      	ldr	r3, [r3, #8]
 800d8fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d902:	d107      	bne.n	800d914 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	681a      	ldr	r2, [r3, #0]
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d912:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d91c:	d10f      	bne.n	800d93e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	681a      	ldr	r2, [r3, #0]
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d92c:	601a      	str	r2, [r3, #0]
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	681a      	ldr	r2, [r3, #0]
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d93c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	2201      	movs	r2, #1
 800d942:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	2200      	movs	r2, #0
 800d94a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800d94e:	2303      	movs	r3, #3
 800d950:	e017      	b.n	800d982 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d101      	bne.n	800d95c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d958:	2300      	movs	r3, #0
 800d95a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	3b01      	subs	r3, #1
 800d960:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	689a      	ldr	r2, [r3, #8]
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	4013      	ands	r3, r2
 800d96c:	68ba      	ldr	r2, [r7, #8]
 800d96e:	429a      	cmp	r2, r3
 800d970:	bf0c      	ite	eq
 800d972:	2301      	moveq	r3, #1
 800d974:	2300      	movne	r3, #0
 800d976:	b2db      	uxtb	r3, r3
 800d978:	461a      	mov	r2, r3
 800d97a:	79fb      	ldrb	r3, [r7, #7]
 800d97c:	429a      	cmp	r2, r3
 800d97e:	d19b      	bne.n	800d8b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d980:	2300      	movs	r3, #0
}
 800d982:	4618      	mov	r0, r3
 800d984:	3720      	adds	r7, #32
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}
 800d98a:	bf00      	nop
 800d98c:	20000060 	.word	0x20000060

0800d990 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b086      	sub	sp, #24
 800d994:	af02      	add	r7, sp, #8
 800d996:	60f8      	str	r0, [r7, #12]
 800d998:	60b9      	str	r1, [r7, #8]
 800d99a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	685b      	ldr	r3, [r3, #4]
 800d9a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d9a4:	d111      	bne.n	800d9ca <SPI_EndRxTransaction+0x3a>
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	689b      	ldr	r3, [r3, #8]
 800d9aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d9ae:	d004      	beq.n	800d9ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	689b      	ldr	r3, [r3, #8]
 800d9b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d9b8:	d107      	bne.n	800d9ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	681a      	ldr	r2, [r3, #0]
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d9c8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	685b      	ldr	r3, [r3, #4]
 800d9ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d9d2:	d12a      	bne.n	800da2a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	689b      	ldr	r3, [r3, #8]
 800d9d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d9dc:	d012      	beq.n	800da04 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	9300      	str	r3, [sp, #0]
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	2180      	movs	r1, #128	; 0x80
 800d9e8:	68f8      	ldr	r0, [r7, #12]
 800d9ea:	f7ff ff49 	bl	800d880 <SPI_WaitFlagStateUntilTimeout>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d02d      	beq.n	800da50 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9f8:	f043 0220 	orr.w	r2, r3, #32
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800da00:	2303      	movs	r3, #3
 800da02:	e026      	b.n	800da52 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	9300      	str	r3, [sp, #0]
 800da08:	68bb      	ldr	r3, [r7, #8]
 800da0a:	2200      	movs	r2, #0
 800da0c:	2101      	movs	r1, #1
 800da0e:	68f8      	ldr	r0, [r7, #12]
 800da10:	f7ff ff36 	bl	800d880 <SPI_WaitFlagStateUntilTimeout>
 800da14:	4603      	mov	r3, r0
 800da16:	2b00      	cmp	r3, #0
 800da18:	d01a      	beq.n	800da50 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da1e:	f043 0220 	orr.w	r2, r3, #32
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800da26:	2303      	movs	r3, #3
 800da28:	e013      	b.n	800da52 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	9300      	str	r3, [sp, #0]
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	2200      	movs	r2, #0
 800da32:	2101      	movs	r1, #1
 800da34:	68f8      	ldr	r0, [r7, #12]
 800da36:	f7ff ff23 	bl	800d880 <SPI_WaitFlagStateUntilTimeout>
 800da3a:	4603      	mov	r3, r0
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d007      	beq.n	800da50 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da44:	f043 0220 	orr.w	r2, r3, #32
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800da4c:	2303      	movs	r3, #3
 800da4e:	e000      	b.n	800da52 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800da50:	2300      	movs	r3, #0
}
 800da52:	4618      	mov	r0, r3
 800da54:	3710      	adds	r7, #16
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}
	...

0800da5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b088      	sub	sp, #32
 800da60:	af02      	add	r7, sp, #8
 800da62:	60f8      	str	r0, [r7, #12]
 800da64:	60b9      	str	r1, [r7, #8]
 800da66:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800da68:	4b1b      	ldr	r3, [pc, #108]	; (800dad8 <SPI_EndRxTxTransaction+0x7c>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	4a1b      	ldr	r2, [pc, #108]	; (800dadc <SPI_EndRxTxTransaction+0x80>)
 800da6e:	fba2 2303 	umull	r2, r3, r2, r3
 800da72:	0d5b      	lsrs	r3, r3, #21
 800da74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800da78:	fb02 f303 	mul.w	r3, r2, r3
 800da7c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	685b      	ldr	r3, [r3, #4]
 800da82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800da86:	d112      	bne.n	800daae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	9300      	str	r3, [sp, #0]
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	2200      	movs	r2, #0
 800da90:	2180      	movs	r1, #128	; 0x80
 800da92:	68f8      	ldr	r0, [r7, #12]
 800da94:	f7ff fef4 	bl	800d880 <SPI_WaitFlagStateUntilTimeout>
 800da98:	4603      	mov	r3, r0
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d016      	beq.n	800dacc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800daa2:	f043 0220 	orr.w	r2, r3, #32
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800daaa:	2303      	movs	r3, #3
 800daac:	e00f      	b.n	800dace <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d00a      	beq.n	800daca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	3b01      	subs	r3, #1
 800dab8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	689b      	ldr	r3, [r3, #8]
 800dac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dac4:	2b80      	cmp	r3, #128	; 0x80
 800dac6:	d0f2      	beq.n	800daae <SPI_EndRxTxTransaction+0x52>
 800dac8:	e000      	b.n	800dacc <SPI_EndRxTxTransaction+0x70>
        break;
 800daca:	bf00      	nop
  }

  return HAL_OK;
 800dacc:	2300      	movs	r3, #0
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3718      	adds	r7, #24
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}
 800dad6:	bf00      	nop
 800dad8:	20000060 	.word	0x20000060
 800dadc:	165e9f81 	.word	0x165e9f81

0800dae0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b082      	sub	sp, #8
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d101      	bne.n	800daf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800daee:	2301      	movs	r3, #1
 800daf0:	e041      	b.n	800db76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800daf8:	b2db      	uxtb	r3, r3
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d106      	bne.n	800db0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2200      	movs	r2, #0
 800db02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	f7f5 f8b6 	bl	8002c78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2202      	movs	r2, #2
 800db10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681a      	ldr	r2, [r3, #0]
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	3304      	adds	r3, #4
 800db1c:	4619      	mov	r1, r3
 800db1e:	4610      	mov	r0, r2
 800db20:	f000 fbb2 	bl	800e288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2201      	movs	r2, #1
 800db28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2201      	movs	r2, #1
 800db30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2201      	movs	r2, #1
 800db38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2201      	movs	r2, #1
 800db40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2201      	movs	r2, #1
 800db48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2201      	movs	r2, #1
 800db50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2201      	movs	r2, #1
 800db58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2201      	movs	r2, #1
 800db60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2201      	movs	r2, #1
 800db68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2201      	movs	r2, #1
 800db70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800db74:	2300      	movs	r3, #0
}
 800db76:	4618      	mov	r0, r3
 800db78:	3708      	adds	r7, #8
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
	...

0800db80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800db80:	b480      	push	{r7}
 800db82:	b085      	sub	sp, #20
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db8e:	b2db      	uxtb	r3, r3
 800db90:	2b01      	cmp	r3, #1
 800db92:	d001      	beq.n	800db98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800db94:	2301      	movs	r3, #1
 800db96:	e04e      	b.n	800dc36 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2202      	movs	r2, #2
 800db9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	68da      	ldr	r2, [r3, #12]
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	f042 0201 	orr.w	r2, r2, #1
 800dbae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	4a23      	ldr	r2, [pc, #140]	; (800dc44 <HAL_TIM_Base_Start_IT+0xc4>)
 800dbb6:	4293      	cmp	r3, r2
 800dbb8:	d022      	beq.n	800dc00 <HAL_TIM_Base_Start_IT+0x80>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dbc2:	d01d      	beq.n	800dc00 <HAL_TIM_Base_Start_IT+0x80>
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	4a1f      	ldr	r2, [pc, #124]	; (800dc48 <HAL_TIM_Base_Start_IT+0xc8>)
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	d018      	beq.n	800dc00 <HAL_TIM_Base_Start_IT+0x80>
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	4a1e      	ldr	r2, [pc, #120]	; (800dc4c <HAL_TIM_Base_Start_IT+0xcc>)
 800dbd4:	4293      	cmp	r3, r2
 800dbd6:	d013      	beq.n	800dc00 <HAL_TIM_Base_Start_IT+0x80>
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	4a1c      	ldr	r2, [pc, #112]	; (800dc50 <HAL_TIM_Base_Start_IT+0xd0>)
 800dbde:	4293      	cmp	r3, r2
 800dbe0:	d00e      	beq.n	800dc00 <HAL_TIM_Base_Start_IT+0x80>
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	4a1b      	ldr	r2, [pc, #108]	; (800dc54 <HAL_TIM_Base_Start_IT+0xd4>)
 800dbe8:	4293      	cmp	r3, r2
 800dbea:	d009      	beq.n	800dc00 <HAL_TIM_Base_Start_IT+0x80>
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	4a19      	ldr	r2, [pc, #100]	; (800dc58 <HAL_TIM_Base_Start_IT+0xd8>)
 800dbf2:	4293      	cmp	r3, r2
 800dbf4:	d004      	beq.n	800dc00 <HAL_TIM_Base_Start_IT+0x80>
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	4a18      	ldr	r2, [pc, #96]	; (800dc5c <HAL_TIM_Base_Start_IT+0xdc>)
 800dbfc:	4293      	cmp	r3, r2
 800dbfe:	d111      	bne.n	800dc24 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	689b      	ldr	r3, [r3, #8]
 800dc06:	f003 0307 	and.w	r3, r3, #7
 800dc0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	2b06      	cmp	r3, #6
 800dc10:	d010      	beq.n	800dc34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	681a      	ldr	r2, [r3, #0]
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	f042 0201 	orr.w	r2, r2, #1
 800dc20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc22:	e007      	b.n	800dc34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	681a      	ldr	r2, [r3, #0]
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	f042 0201 	orr.w	r2, r2, #1
 800dc32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dc34:	2300      	movs	r3, #0
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	3714      	adds	r7, #20
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc40:	4770      	bx	lr
 800dc42:	bf00      	nop
 800dc44:	40010000 	.word	0x40010000
 800dc48:	40000400 	.word	0x40000400
 800dc4c:	40000800 	.word	0x40000800
 800dc50:	40000c00 	.word	0x40000c00
 800dc54:	40010400 	.word	0x40010400
 800dc58:	40014000 	.word	0x40014000
 800dc5c:	40001800 	.word	0x40001800

0800dc60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b082      	sub	sp, #8
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d101      	bne.n	800dc72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dc6e:	2301      	movs	r3, #1
 800dc70:	e041      	b.n	800dcf6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc78:	b2db      	uxtb	r3, r3
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d106      	bne.n	800dc8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2200      	movs	r2, #0
 800dc82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f000 f839 	bl	800dcfe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2202      	movs	r2, #2
 800dc90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681a      	ldr	r2, [r3, #0]
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	3304      	adds	r3, #4
 800dc9c:	4619      	mov	r1, r3
 800dc9e:	4610      	mov	r0, r2
 800dca0:	f000 faf2 	bl	800e288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2201      	movs	r2, #1
 800dca8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2201      	movs	r2, #1
 800dcb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2201      	movs	r2, #1
 800dcb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2201      	movs	r2, #1
 800dcc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2201      	movs	r2, #1
 800dcd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2201      	movs	r2, #1
 800dcd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2201      	movs	r2, #1
 800dce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2201      	movs	r2, #1
 800dce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2201      	movs	r2, #1
 800dcf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dcf4:	2300      	movs	r3, #0
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	3708      	adds	r7, #8
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}

0800dcfe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800dcfe:	b480      	push	{r7}
 800dd00:	b083      	sub	sp, #12
 800dd02:	af00      	add	r7, sp, #0
 800dd04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800dd06:	bf00      	nop
 800dd08:	370c      	adds	r7, #12
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd10:	4770      	bx	lr

0800dd12 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dd12:	b580      	push	{r7, lr}
 800dd14:	b082      	sub	sp, #8
 800dd16:	af00      	add	r7, sp, #0
 800dd18:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	691b      	ldr	r3, [r3, #16]
 800dd20:	f003 0302 	and.w	r3, r3, #2
 800dd24:	2b02      	cmp	r3, #2
 800dd26:	d122      	bne.n	800dd6e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	68db      	ldr	r3, [r3, #12]
 800dd2e:	f003 0302 	and.w	r3, r3, #2
 800dd32:	2b02      	cmp	r3, #2
 800dd34:	d11b      	bne.n	800dd6e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f06f 0202 	mvn.w	r2, #2
 800dd3e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2201      	movs	r2, #1
 800dd44:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	699b      	ldr	r3, [r3, #24]
 800dd4c:	f003 0303 	and.w	r3, r3, #3
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d003      	beq.n	800dd5c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f000 fa78 	bl	800e24a <HAL_TIM_IC_CaptureCallback>
 800dd5a:	e005      	b.n	800dd68 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f000 fa6a 	bl	800e236 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f000 fa7b 	bl	800e25e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	691b      	ldr	r3, [r3, #16]
 800dd74:	f003 0304 	and.w	r3, r3, #4
 800dd78:	2b04      	cmp	r3, #4
 800dd7a:	d122      	bne.n	800ddc2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	68db      	ldr	r3, [r3, #12]
 800dd82:	f003 0304 	and.w	r3, r3, #4
 800dd86:	2b04      	cmp	r3, #4
 800dd88:	d11b      	bne.n	800ddc2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	f06f 0204 	mvn.w	r2, #4
 800dd92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2202      	movs	r2, #2
 800dd98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	699b      	ldr	r3, [r3, #24]
 800dda0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d003      	beq.n	800ddb0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dda8:	6878      	ldr	r0, [r7, #4]
 800ddaa:	f000 fa4e 	bl	800e24a <HAL_TIM_IC_CaptureCallback>
 800ddae:	e005      	b.n	800ddbc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ddb0:	6878      	ldr	r0, [r7, #4]
 800ddb2:	f000 fa40 	bl	800e236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f000 fa51 	bl	800e25e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	691b      	ldr	r3, [r3, #16]
 800ddc8:	f003 0308 	and.w	r3, r3, #8
 800ddcc:	2b08      	cmp	r3, #8
 800ddce:	d122      	bne.n	800de16 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	68db      	ldr	r3, [r3, #12]
 800ddd6:	f003 0308 	and.w	r3, r3, #8
 800ddda:	2b08      	cmp	r3, #8
 800dddc:	d11b      	bne.n	800de16 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	f06f 0208 	mvn.w	r2, #8
 800dde6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2204      	movs	r2, #4
 800ddec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	69db      	ldr	r3, [r3, #28]
 800ddf4:	f003 0303 	and.w	r3, r3, #3
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d003      	beq.n	800de04 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f000 fa24 	bl	800e24a <HAL_TIM_IC_CaptureCallback>
 800de02:	e005      	b.n	800de10 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f000 fa16 	bl	800e236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f000 fa27 	bl	800e25e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2200      	movs	r2, #0
 800de14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	691b      	ldr	r3, [r3, #16]
 800de1c:	f003 0310 	and.w	r3, r3, #16
 800de20:	2b10      	cmp	r3, #16
 800de22:	d122      	bne.n	800de6a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	68db      	ldr	r3, [r3, #12]
 800de2a:	f003 0310 	and.w	r3, r3, #16
 800de2e:	2b10      	cmp	r3, #16
 800de30:	d11b      	bne.n	800de6a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	f06f 0210 	mvn.w	r2, #16
 800de3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2208      	movs	r2, #8
 800de40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	69db      	ldr	r3, [r3, #28]
 800de48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d003      	beq.n	800de58 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800de50:	6878      	ldr	r0, [r7, #4]
 800de52:	f000 f9fa 	bl	800e24a <HAL_TIM_IC_CaptureCallback>
 800de56:	e005      	b.n	800de64 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f000 f9ec 	bl	800e236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f000 f9fd 	bl	800e25e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2200      	movs	r2, #0
 800de68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	691b      	ldr	r3, [r3, #16]
 800de70:	f003 0301 	and.w	r3, r3, #1
 800de74:	2b01      	cmp	r3, #1
 800de76:	d10e      	bne.n	800de96 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	68db      	ldr	r3, [r3, #12]
 800de7e:	f003 0301 	and.w	r3, r3, #1
 800de82:	2b01      	cmp	r3, #1
 800de84:	d107      	bne.n	800de96 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	f06f 0201 	mvn.w	r2, #1
 800de8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f7f4 f9bd 	bl	8002210 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	691b      	ldr	r3, [r3, #16]
 800de9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dea0:	2b80      	cmp	r3, #128	; 0x80
 800dea2:	d10e      	bne.n	800dec2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	68db      	ldr	r3, [r3, #12]
 800deaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800deae:	2b80      	cmp	r3, #128	; 0x80
 800deb0:	d107      	bne.n	800dec2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800deba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800debc:	6878      	ldr	r0, [r7, #4]
 800debe:	f000 fd53 	bl	800e968 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	691b      	ldr	r3, [r3, #16]
 800dec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800decc:	2b40      	cmp	r3, #64	; 0x40
 800dece:	d10e      	bne.n	800deee <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	68db      	ldr	r3, [r3, #12]
 800ded6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800deda:	2b40      	cmp	r3, #64	; 0x40
 800dedc:	d107      	bne.n	800deee <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f000 f9c2 	bl	800e272 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	691b      	ldr	r3, [r3, #16]
 800def4:	f003 0320 	and.w	r3, r3, #32
 800def8:	2b20      	cmp	r3, #32
 800defa:	d10e      	bne.n	800df1a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	68db      	ldr	r3, [r3, #12]
 800df02:	f003 0320 	and.w	r3, r3, #32
 800df06:	2b20      	cmp	r3, #32
 800df08:	d107      	bne.n	800df1a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	f06f 0220 	mvn.w	r2, #32
 800df12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800df14:	6878      	ldr	r0, [r7, #4]
 800df16:	f000 fd1d 	bl	800e954 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800df1a:	bf00      	nop
 800df1c:	3708      	adds	r7, #8
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}
	...

0800df24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b086      	sub	sp, #24
 800df28:	af00      	add	r7, sp, #0
 800df2a:	60f8      	str	r0, [r7, #12]
 800df2c:	60b9      	str	r1, [r7, #8]
 800df2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800df30:	2300      	movs	r3, #0
 800df32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df3a:	2b01      	cmp	r3, #1
 800df3c:	d101      	bne.n	800df42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800df3e:	2302      	movs	r3, #2
 800df40:	e0ae      	b.n	800e0a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	2201      	movs	r2, #1
 800df46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	2b0c      	cmp	r3, #12
 800df4e:	f200 809f 	bhi.w	800e090 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800df52:	a201      	add	r2, pc, #4	; (adr r2, 800df58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800df54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df58:	0800df8d 	.word	0x0800df8d
 800df5c:	0800e091 	.word	0x0800e091
 800df60:	0800e091 	.word	0x0800e091
 800df64:	0800e091 	.word	0x0800e091
 800df68:	0800dfcd 	.word	0x0800dfcd
 800df6c:	0800e091 	.word	0x0800e091
 800df70:	0800e091 	.word	0x0800e091
 800df74:	0800e091 	.word	0x0800e091
 800df78:	0800e00f 	.word	0x0800e00f
 800df7c:	0800e091 	.word	0x0800e091
 800df80:	0800e091 	.word	0x0800e091
 800df84:	0800e091 	.word	0x0800e091
 800df88:	0800e04f 	.word	0x0800e04f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	68b9      	ldr	r1, [r7, #8]
 800df92:	4618      	mov	r0, r3
 800df94:	f000 fa18 	bl	800e3c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	699a      	ldr	r2, [r3, #24]
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	f042 0208 	orr.w	r2, r2, #8
 800dfa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	699a      	ldr	r2, [r3, #24]
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	f022 0204 	bic.w	r2, r2, #4
 800dfb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	6999      	ldr	r1, [r3, #24]
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	691a      	ldr	r2, [r3, #16]
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	430a      	orrs	r2, r1
 800dfc8:	619a      	str	r2, [r3, #24]
      break;
 800dfca:	e064      	b.n	800e096 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	68b9      	ldr	r1, [r7, #8]
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f000 fa68 	bl	800e4a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	699a      	ldr	r2, [r3, #24]
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dfe6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	699a      	ldr	r2, [r3, #24]
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dff6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	6999      	ldr	r1, [r3, #24]
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	691b      	ldr	r3, [r3, #16]
 800e002:	021a      	lsls	r2, r3, #8
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	430a      	orrs	r2, r1
 800e00a:	619a      	str	r2, [r3, #24]
      break;
 800e00c:	e043      	b.n	800e096 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	68b9      	ldr	r1, [r7, #8]
 800e014:	4618      	mov	r0, r3
 800e016:	f000 fabd 	bl	800e594 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	69da      	ldr	r2, [r3, #28]
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	f042 0208 	orr.w	r2, r2, #8
 800e028:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	69da      	ldr	r2, [r3, #28]
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	f022 0204 	bic.w	r2, r2, #4
 800e038:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	69d9      	ldr	r1, [r3, #28]
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	691a      	ldr	r2, [r3, #16]
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	430a      	orrs	r2, r1
 800e04a:	61da      	str	r2, [r3, #28]
      break;
 800e04c:	e023      	b.n	800e096 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	68b9      	ldr	r1, [r7, #8]
 800e054:	4618      	mov	r0, r3
 800e056:	f000 fb11 	bl	800e67c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	69da      	ldr	r2, [r3, #28]
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e068:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	69da      	ldr	r2, [r3, #28]
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e078:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	69d9      	ldr	r1, [r3, #28]
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	691b      	ldr	r3, [r3, #16]
 800e084:	021a      	lsls	r2, r3, #8
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	430a      	orrs	r2, r1
 800e08c:	61da      	str	r2, [r3, #28]
      break;
 800e08e:	e002      	b.n	800e096 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800e090:	2301      	movs	r3, #1
 800e092:	75fb      	strb	r3, [r7, #23]
      break;
 800e094:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	2200      	movs	r2, #0
 800e09a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e09e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	3718      	adds	r7, #24
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}

0800e0a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b084      	sub	sp, #16
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
 800e0b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e0bc:	2b01      	cmp	r3, #1
 800e0be:	d101      	bne.n	800e0c4 <HAL_TIM_ConfigClockSource+0x1c>
 800e0c0:	2302      	movs	r3, #2
 800e0c2:	e0b4      	b.n	800e22e <HAL_TIM_ConfigClockSource+0x186>
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2201      	movs	r2, #1
 800e0c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2202      	movs	r2, #2
 800e0d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	689b      	ldr	r3, [r3, #8]
 800e0da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e0dc:	68bb      	ldr	r3, [r7, #8]
 800e0de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e0e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e0e4:	68bb      	ldr	r3, [r7, #8]
 800e0e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e0ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	68ba      	ldr	r2, [r7, #8]
 800e0f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e0fc:	d03e      	beq.n	800e17c <HAL_TIM_ConfigClockSource+0xd4>
 800e0fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e102:	f200 8087 	bhi.w	800e214 <HAL_TIM_ConfigClockSource+0x16c>
 800e106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e10a:	f000 8086 	beq.w	800e21a <HAL_TIM_ConfigClockSource+0x172>
 800e10e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e112:	d87f      	bhi.n	800e214 <HAL_TIM_ConfigClockSource+0x16c>
 800e114:	2b70      	cmp	r3, #112	; 0x70
 800e116:	d01a      	beq.n	800e14e <HAL_TIM_ConfigClockSource+0xa6>
 800e118:	2b70      	cmp	r3, #112	; 0x70
 800e11a:	d87b      	bhi.n	800e214 <HAL_TIM_ConfigClockSource+0x16c>
 800e11c:	2b60      	cmp	r3, #96	; 0x60
 800e11e:	d050      	beq.n	800e1c2 <HAL_TIM_ConfigClockSource+0x11a>
 800e120:	2b60      	cmp	r3, #96	; 0x60
 800e122:	d877      	bhi.n	800e214 <HAL_TIM_ConfigClockSource+0x16c>
 800e124:	2b50      	cmp	r3, #80	; 0x50
 800e126:	d03c      	beq.n	800e1a2 <HAL_TIM_ConfigClockSource+0xfa>
 800e128:	2b50      	cmp	r3, #80	; 0x50
 800e12a:	d873      	bhi.n	800e214 <HAL_TIM_ConfigClockSource+0x16c>
 800e12c:	2b40      	cmp	r3, #64	; 0x40
 800e12e:	d058      	beq.n	800e1e2 <HAL_TIM_ConfigClockSource+0x13a>
 800e130:	2b40      	cmp	r3, #64	; 0x40
 800e132:	d86f      	bhi.n	800e214 <HAL_TIM_ConfigClockSource+0x16c>
 800e134:	2b30      	cmp	r3, #48	; 0x30
 800e136:	d064      	beq.n	800e202 <HAL_TIM_ConfigClockSource+0x15a>
 800e138:	2b30      	cmp	r3, #48	; 0x30
 800e13a:	d86b      	bhi.n	800e214 <HAL_TIM_ConfigClockSource+0x16c>
 800e13c:	2b20      	cmp	r3, #32
 800e13e:	d060      	beq.n	800e202 <HAL_TIM_ConfigClockSource+0x15a>
 800e140:	2b20      	cmp	r3, #32
 800e142:	d867      	bhi.n	800e214 <HAL_TIM_ConfigClockSource+0x16c>
 800e144:	2b00      	cmp	r3, #0
 800e146:	d05c      	beq.n	800e202 <HAL_TIM_ConfigClockSource+0x15a>
 800e148:	2b10      	cmp	r3, #16
 800e14a:	d05a      	beq.n	800e202 <HAL_TIM_ConfigClockSource+0x15a>
 800e14c:	e062      	b.n	800e214 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6818      	ldr	r0, [r3, #0]
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	6899      	ldr	r1, [r3, #8]
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	685a      	ldr	r2, [r3, #4]
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	68db      	ldr	r3, [r3, #12]
 800e15e:	f000 fb5d 	bl	800e81c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	689b      	ldr	r3, [r3, #8]
 800e168:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e16a:	68bb      	ldr	r3, [r7, #8]
 800e16c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e170:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	68ba      	ldr	r2, [r7, #8]
 800e178:	609a      	str	r2, [r3, #8]
      break;
 800e17a:	e04f      	b.n	800e21c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	6818      	ldr	r0, [r3, #0]
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	6899      	ldr	r1, [r3, #8]
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	685a      	ldr	r2, [r3, #4]
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	68db      	ldr	r3, [r3, #12]
 800e18c:	f000 fb46 	bl	800e81c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	689a      	ldr	r2, [r3, #8]
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e19e:	609a      	str	r2, [r3, #8]
      break;
 800e1a0:	e03c      	b.n	800e21c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6818      	ldr	r0, [r3, #0]
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	6859      	ldr	r1, [r3, #4]
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	68db      	ldr	r3, [r3, #12]
 800e1ae:	461a      	mov	r2, r3
 800e1b0:	f000 faba 	bl	800e728 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	2150      	movs	r1, #80	; 0x50
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f000 fb13 	bl	800e7e6 <TIM_ITRx_SetConfig>
      break;
 800e1c0:	e02c      	b.n	800e21c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	6818      	ldr	r0, [r3, #0]
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	6859      	ldr	r1, [r3, #4]
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	68db      	ldr	r3, [r3, #12]
 800e1ce:	461a      	mov	r2, r3
 800e1d0:	f000 fad9 	bl	800e786 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	2160      	movs	r1, #96	; 0x60
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f000 fb03 	bl	800e7e6 <TIM_ITRx_SetConfig>
      break;
 800e1e0:	e01c      	b.n	800e21c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6818      	ldr	r0, [r3, #0]
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	6859      	ldr	r1, [r3, #4]
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	68db      	ldr	r3, [r3, #12]
 800e1ee:	461a      	mov	r2, r3
 800e1f0:	f000 fa9a 	bl	800e728 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	2140      	movs	r1, #64	; 0x40
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f000 faf3 	bl	800e7e6 <TIM_ITRx_SetConfig>
      break;
 800e200:	e00c      	b.n	800e21c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681a      	ldr	r2, [r3, #0]
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	4619      	mov	r1, r3
 800e20c:	4610      	mov	r0, r2
 800e20e:	f000 faea 	bl	800e7e6 <TIM_ITRx_SetConfig>
      break;
 800e212:	e003      	b.n	800e21c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800e214:	2301      	movs	r3, #1
 800e216:	73fb      	strb	r3, [r7, #15]
      break;
 800e218:	e000      	b.n	800e21c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800e21a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2201      	movs	r2, #1
 800e220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	2200      	movs	r2, #0
 800e228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e22e:	4618      	mov	r0, r3
 800e230:	3710      	adds	r7, #16
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}

0800e236 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e236:	b480      	push	{r7}
 800e238:	b083      	sub	sp, #12
 800e23a:	af00      	add	r7, sp, #0
 800e23c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e23e:	bf00      	nop
 800e240:	370c      	adds	r7, #12
 800e242:	46bd      	mov	sp, r7
 800e244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e248:	4770      	bx	lr

0800e24a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e24a:	b480      	push	{r7}
 800e24c:	b083      	sub	sp, #12
 800e24e:	af00      	add	r7, sp, #0
 800e250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e252:	bf00      	nop
 800e254:	370c      	adds	r7, #12
 800e256:	46bd      	mov	sp, r7
 800e258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25c:	4770      	bx	lr

0800e25e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e25e:	b480      	push	{r7}
 800e260:	b083      	sub	sp, #12
 800e262:	af00      	add	r7, sp, #0
 800e264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e266:	bf00      	nop
 800e268:	370c      	adds	r7, #12
 800e26a:	46bd      	mov	sp, r7
 800e26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e270:	4770      	bx	lr

0800e272 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e272:	b480      	push	{r7}
 800e274:	b083      	sub	sp, #12
 800e276:	af00      	add	r7, sp, #0
 800e278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e27a:	bf00      	nop
 800e27c:	370c      	adds	r7, #12
 800e27e:	46bd      	mov	sp, r7
 800e280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e284:	4770      	bx	lr
	...

0800e288 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e288:	b480      	push	{r7}
 800e28a:	b085      	sub	sp, #20
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
 800e290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	4a40      	ldr	r2, [pc, #256]	; (800e39c <TIM_Base_SetConfig+0x114>)
 800e29c:	4293      	cmp	r3, r2
 800e29e:	d013      	beq.n	800e2c8 <TIM_Base_SetConfig+0x40>
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e2a6:	d00f      	beq.n	800e2c8 <TIM_Base_SetConfig+0x40>
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	4a3d      	ldr	r2, [pc, #244]	; (800e3a0 <TIM_Base_SetConfig+0x118>)
 800e2ac:	4293      	cmp	r3, r2
 800e2ae:	d00b      	beq.n	800e2c8 <TIM_Base_SetConfig+0x40>
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	4a3c      	ldr	r2, [pc, #240]	; (800e3a4 <TIM_Base_SetConfig+0x11c>)
 800e2b4:	4293      	cmp	r3, r2
 800e2b6:	d007      	beq.n	800e2c8 <TIM_Base_SetConfig+0x40>
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	4a3b      	ldr	r2, [pc, #236]	; (800e3a8 <TIM_Base_SetConfig+0x120>)
 800e2bc:	4293      	cmp	r3, r2
 800e2be:	d003      	beq.n	800e2c8 <TIM_Base_SetConfig+0x40>
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	4a3a      	ldr	r2, [pc, #232]	; (800e3ac <TIM_Base_SetConfig+0x124>)
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	d108      	bne.n	800e2da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e2ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	685b      	ldr	r3, [r3, #4]
 800e2d4:	68fa      	ldr	r2, [r7, #12]
 800e2d6:	4313      	orrs	r3, r2
 800e2d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	4a2f      	ldr	r2, [pc, #188]	; (800e39c <TIM_Base_SetConfig+0x114>)
 800e2de:	4293      	cmp	r3, r2
 800e2e0:	d02b      	beq.n	800e33a <TIM_Base_SetConfig+0xb2>
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e2e8:	d027      	beq.n	800e33a <TIM_Base_SetConfig+0xb2>
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	4a2c      	ldr	r2, [pc, #176]	; (800e3a0 <TIM_Base_SetConfig+0x118>)
 800e2ee:	4293      	cmp	r3, r2
 800e2f0:	d023      	beq.n	800e33a <TIM_Base_SetConfig+0xb2>
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	4a2b      	ldr	r2, [pc, #172]	; (800e3a4 <TIM_Base_SetConfig+0x11c>)
 800e2f6:	4293      	cmp	r3, r2
 800e2f8:	d01f      	beq.n	800e33a <TIM_Base_SetConfig+0xb2>
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	4a2a      	ldr	r2, [pc, #168]	; (800e3a8 <TIM_Base_SetConfig+0x120>)
 800e2fe:	4293      	cmp	r3, r2
 800e300:	d01b      	beq.n	800e33a <TIM_Base_SetConfig+0xb2>
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	4a29      	ldr	r2, [pc, #164]	; (800e3ac <TIM_Base_SetConfig+0x124>)
 800e306:	4293      	cmp	r3, r2
 800e308:	d017      	beq.n	800e33a <TIM_Base_SetConfig+0xb2>
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	4a28      	ldr	r2, [pc, #160]	; (800e3b0 <TIM_Base_SetConfig+0x128>)
 800e30e:	4293      	cmp	r3, r2
 800e310:	d013      	beq.n	800e33a <TIM_Base_SetConfig+0xb2>
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	4a27      	ldr	r2, [pc, #156]	; (800e3b4 <TIM_Base_SetConfig+0x12c>)
 800e316:	4293      	cmp	r3, r2
 800e318:	d00f      	beq.n	800e33a <TIM_Base_SetConfig+0xb2>
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	4a26      	ldr	r2, [pc, #152]	; (800e3b8 <TIM_Base_SetConfig+0x130>)
 800e31e:	4293      	cmp	r3, r2
 800e320:	d00b      	beq.n	800e33a <TIM_Base_SetConfig+0xb2>
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	4a25      	ldr	r2, [pc, #148]	; (800e3bc <TIM_Base_SetConfig+0x134>)
 800e326:	4293      	cmp	r3, r2
 800e328:	d007      	beq.n	800e33a <TIM_Base_SetConfig+0xb2>
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	4a24      	ldr	r2, [pc, #144]	; (800e3c0 <TIM_Base_SetConfig+0x138>)
 800e32e:	4293      	cmp	r3, r2
 800e330:	d003      	beq.n	800e33a <TIM_Base_SetConfig+0xb2>
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	4a23      	ldr	r2, [pc, #140]	; (800e3c4 <TIM_Base_SetConfig+0x13c>)
 800e336:	4293      	cmp	r3, r2
 800e338:	d108      	bne.n	800e34c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	68db      	ldr	r3, [r3, #12]
 800e346:	68fa      	ldr	r2, [r7, #12]
 800e348:	4313      	orrs	r3, r2
 800e34a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	695b      	ldr	r3, [r3, #20]
 800e356:	4313      	orrs	r3, r2
 800e358:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	68fa      	ldr	r2, [r7, #12]
 800e35e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	689a      	ldr	r2, [r3, #8]
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	681a      	ldr	r2, [r3, #0]
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	4a0a      	ldr	r2, [pc, #40]	; (800e39c <TIM_Base_SetConfig+0x114>)
 800e374:	4293      	cmp	r3, r2
 800e376:	d003      	beq.n	800e380 <TIM_Base_SetConfig+0xf8>
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	4a0c      	ldr	r2, [pc, #48]	; (800e3ac <TIM_Base_SetConfig+0x124>)
 800e37c:	4293      	cmp	r3, r2
 800e37e:	d103      	bne.n	800e388 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	691a      	ldr	r2, [r3, #16]
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2201      	movs	r2, #1
 800e38c:	615a      	str	r2, [r3, #20]
}
 800e38e:	bf00      	nop
 800e390:	3714      	adds	r7, #20
 800e392:	46bd      	mov	sp, r7
 800e394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e398:	4770      	bx	lr
 800e39a:	bf00      	nop
 800e39c:	40010000 	.word	0x40010000
 800e3a0:	40000400 	.word	0x40000400
 800e3a4:	40000800 	.word	0x40000800
 800e3a8:	40000c00 	.word	0x40000c00
 800e3ac:	40010400 	.word	0x40010400
 800e3b0:	40014000 	.word	0x40014000
 800e3b4:	40014400 	.word	0x40014400
 800e3b8:	40014800 	.word	0x40014800
 800e3bc:	40001800 	.word	0x40001800
 800e3c0:	40001c00 	.word	0x40001c00
 800e3c4:	40002000 	.word	0x40002000

0800e3c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b087      	sub	sp, #28
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
 800e3d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6a1b      	ldr	r3, [r3, #32]
 800e3d6:	f023 0201 	bic.w	r2, r3, #1
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6a1b      	ldr	r3, [r3, #32]
 800e3e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	685b      	ldr	r3, [r3, #4]
 800e3e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	699b      	ldr	r3, [r3, #24]
 800e3ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e3f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	f023 0303 	bic.w	r3, r3, #3
 800e3fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	68fa      	ldr	r2, [r7, #12]
 800e406:	4313      	orrs	r3, r2
 800e408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e40a:	697b      	ldr	r3, [r7, #20]
 800e40c:	f023 0302 	bic.w	r3, r3, #2
 800e410:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	689b      	ldr	r3, [r3, #8]
 800e416:	697a      	ldr	r2, [r7, #20]
 800e418:	4313      	orrs	r3, r2
 800e41a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	4a20      	ldr	r2, [pc, #128]	; (800e4a0 <TIM_OC1_SetConfig+0xd8>)
 800e420:	4293      	cmp	r3, r2
 800e422:	d003      	beq.n	800e42c <TIM_OC1_SetConfig+0x64>
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	4a1f      	ldr	r2, [pc, #124]	; (800e4a4 <TIM_OC1_SetConfig+0xdc>)
 800e428:	4293      	cmp	r3, r2
 800e42a:	d10c      	bne.n	800e446 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e42c:	697b      	ldr	r3, [r7, #20]
 800e42e:	f023 0308 	bic.w	r3, r3, #8
 800e432:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	68db      	ldr	r3, [r3, #12]
 800e438:	697a      	ldr	r2, [r7, #20]
 800e43a:	4313      	orrs	r3, r2
 800e43c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e43e:	697b      	ldr	r3, [r7, #20]
 800e440:	f023 0304 	bic.w	r3, r3, #4
 800e444:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	4a15      	ldr	r2, [pc, #84]	; (800e4a0 <TIM_OC1_SetConfig+0xd8>)
 800e44a:	4293      	cmp	r3, r2
 800e44c:	d003      	beq.n	800e456 <TIM_OC1_SetConfig+0x8e>
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	4a14      	ldr	r2, [pc, #80]	; (800e4a4 <TIM_OC1_SetConfig+0xdc>)
 800e452:	4293      	cmp	r3, r2
 800e454:	d111      	bne.n	800e47a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e456:	693b      	ldr	r3, [r7, #16]
 800e458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e45c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	695b      	ldr	r3, [r3, #20]
 800e46a:	693a      	ldr	r2, [r7, #16]
 800e46c:	4313      	orrs	r3, r2
 800e46e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	699b      	ldr	r3, [r3, #24]
 800e474:	693a      	ldr	r2, [r7, #16]
 800e476:	4313      	orrs	r3, r2
 800e478:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	693a      	ldr	r2, [r7, #16]
 800e47e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	68fa      	ldr	r2, [r7, #12]
 800e484:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	685a      	ldr	r2, [r3, #4]
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	697a      	ldr	r2, [r7, #20]
 800e492:	621a      	str	r2, [r3, #32]
}
 800e494:	bf00      	nop
 800e496:	371c      	adds	r7, #28
 800e498:	46bd      	mov	sp, r7
 800e49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49e:	4770      	bx	lr
 800e4a0:	40010000 	.word	0x40010000
 800e4a4:	40010400 	.word	0x40010400

0800e4a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e4a8:	b480      	push	{r7}
 800e4aa:	b087      	sub	sp, #28
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
 800e4b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6a1b      	ldr	r3, [r3, #32]
 800e4b6:	f023 0210 	bic.w	r2, r3, #16
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6a1b      	ldr	r3, [r3, #32]
 800e4c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	685b      	ldr	r3, [r3, #4]
 800e4c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	699b      	ldr	r3, [r3, #24]
 800e4ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e4d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e4de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	021b      	lsls	r3, r3, #8
 800e4e6:	68fa      	ldr	r2, [r7, #12]
 800e4e8:	4313      	orrs	r3, r2
 800e4ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e4ec:	697b      	ldr	r3, [r7, #20]
 800e4ee:	f023 0320 	bic.w	r3, r3, #32
 800e4f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	689b      	ldr	r3, [r3, #8]
 800e4f8:	011b      	lsls	r3, r3, #4
 800e4fa:	697a      	ldr	r2, [r7, #20]
 800e4fc:	4313      	orrs	r3, r2
 800e4fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	4a22      	ldr	r2, [pc, #136]	; (800e58c <TIM_OC2_SetConfig+0xe4>)
 800e504:	4293      	cmp	r3, r2
 800e506:	d003      	beq.n	800e510 <TIM_OC2_SetConfig+0x68>
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	4a21      	ldr	r2, [pc, #132]	; (800e590 <TIM_OC2_SetConfig+0xe8>)
 800e50c:	4293      	cmp	r3, r2
 800e50e:	d10d      	bne.n	800e52c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e510:	697b      	ldr	r3, [r7, #20]
 800e512:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e516:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	68db      	ldr	r3, [r3, #12]
 800e51c:	011b      	lsls	r3, r3, #4
 800e51e:	697a      	ldr	r2, [r7, #20]
 800e520:	4313      	orrs	r3, r2
 800e522:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e52a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	4a17      	ldr	r2, [pc, #92]	; (800e58c <TIM_OC2_SetConfig+0xe4>)
 800e530:	4293      	cmp	r3, r2
 800e532:	d003      	beq.n	800e53c <TIM_OC2_SetConfig+0x94>
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	4a16      	ldr	r2, [pc, #88]	; (800e590 <TIM_OC2_SetConfig+0xe8>)
 800e538:	4293      	cmp	r3, r2
 800e53a:	d113      	bne.n	800e564 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e53c:	693b      	ldr	r3, [r7, #16]
 800e53e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e542:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e54a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	695b      	ldr	r3, [r3, #20]
 800e550:	009b      	lsls	r3, r3, #2
 800e552:	693a      	ldr	r2, [r7, #16]
 800e554:	4313      	orrs	r3, r2
 800e556:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	699b      	ldr	r3, [r3, #24]
 800e55c:	009b      	lsls	r3, r3, #2
 800e55e:	693a      	ldr	r2, [r7, #16]
 800e560:	4313      	orrs	r3, r2
 800e562:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	693a      	ldr	r2, [r7, #16]
 800e568:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	68fa      	ldr	r2, [r7, #12]
 800e56e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	685a      	ldr	r2, [r3, #4]
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	697a      	ldr	r2, [r7, #20]
 800e57c:	621a      	str	r2, [r3, #32]
}
 800e57e:	bf00      	nop
 800e580:	371c      	adds	r7, #28
 800e582:	46bd      	mov	sp, r7
 800e584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e588:	4770      	bx	lr
 800e58a:	bf00      	nop
 800e58c:	40010000 	.word	0x40010000
 800e590:	40010400 	.word	0x40010400

0800e594 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e594:	b480      	push	{r7}
 800e596:	b087      	sub	sp, #28
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
 800e59c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6a1b      	ldr	r3, [r3, #32]
 800e5a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6a1b      	ldr	r3, [r3, #32]
 800e5ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	685b      	ldr	r3, [r3, #4]
 800e5b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	69db      	ldr	r3, [r3, #28]
 800e5ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e5c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	f023 0303 	bic.w	r3, r3, #3
 800e5ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	68fa      	ldr	r2, [r7, #12]
 800e5d2:	4313      	orrs	r3, r2
 800e5d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e5dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	689b      	ldr	r3, [r3, #8]
 800e5e2:	021b      	lsls	r3, r3, #8
 800e5e4:	697a      	ldr	r2, [r7, #20]
 800e5e6:	4313      	orrs	r3, r2
 800e5e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	4a21      	ldr	r2, [pc, #132]	; (800e674 <TIM_OC3_SetConfig+0xe0>)
 800e5ee:	4293      	cmp	r3, r2
 800e5f0:	d003      	beq.n	800e5fa <TIM_OC3_SetConfig+0x66>
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	4a20      	ldr	r2, [pc, #128]	; (800e678 <TIM_OC3_SetConfig+0xe4>)
 800e5f6:	4293      	cmp	r3, r2
 800e5f8:	d10d      	bne.n	800e616 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e600:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e602:	683b      	ldr	r3, [r7, #0]
 800e604:	68db      	ldr	r3, [r3, #12]
 800e606:	021b      	lsls	r3, r3, #8
 800e608:	697a      	ldr	r2, [r7, #20]
 800e60a:	4313      	orrs	r3, r2
 800e60c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e60e:	697b      	ldr	r3, [r7, #20]
 800e610:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e614:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	4a16      	ldr	r2, [pc, #88]	; (800e674 <TIM_OC3_SetConfig+0xe0>)
 800e61a:	4293      	cmp	r3, r2
 800e61c:	d003      	beq.n	800e626 <TIM_OC3_SetConfig+0x92>
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	4a15      	ldr	r2, [pc, #84]	; (800e678 <TIM_OC3_SetConfig+0xe4>)
 800e622:	4293      	cmp	r3, r2
 800e624:	d113      	bne.n	800e64e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e626:	693b      	ldr	r3, [r7, #16]
 800e628:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e62c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e62e:	693b      	ldr	r3, [r7, #16]
 800e630:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e634:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	695b      	ldr	r3, [r3, #20]
 800e63a:	011b      	lsls	r3, r3, #4
 800e63c:	693a      	ldr	r2, [r7, #16]
 800e63e:	4313      	orrs	r3, r2
 800e640:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	699b      	ldr	r3, [r3, #24]
 800e646:	011b      	lsls	r3, r3, #4
 800e648:	693a      	ldr	r2, [r7, #16]
 800e64a:	4313      	orrs	r3, r2
 800e64c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	693a      	ldr	r2, [r7, #16]
 800e652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	68fa      	ldr	r2, [r7, #12]
 800e658:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	685a      	ldr	r2, [r3, #4]
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	697a      	ldr	r2, [r7, #20]
 800e666:	621a      	str	r2, [r3, #32]
}
 800e668:	bf00      	nop
 800e66a:	371c      	adds	r7, #28
 800e66c:	46bd      	mov	sp, r7
 800e66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e672:	4770      	bx	lr
 800e674:	40010000 	.word	0x40010000
 800e678:	40010400 	.word	0x40010400

0800e67c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e67c:	b480      	push	{r7}
 800e67e:	b087      	sub	sp, #28
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
 800e684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6a1b      	ldr	r3, [r3, #32]
 800e68a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6a1b      	ldr	r3, [r3, #32]
 800e696:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	685b      	ldr	r3, [r3, #4]
 800e69c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	69db      	ldr	r3, [r3, #28]
 800e6a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e6aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e6b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	021b      	lsls	r3, r3, #8
 800e6ba:	68fa      	ldr	r2, [r7, #12]
 800e6bc:	4313      	orrs	r3, r2
 800e6be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e6c0:	693b      	ldr	r3, [r7, #16]
 800e6c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e6c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	689b      	ldr	r3, [r3, #8]
 800e6cc:	031b      	lsls	r3, r3, #12
 800e6ce:	693a      	ldr	r2, [r7, #16]
 800e6d0:	4313      	orrs	r3, r2
 800e6d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	4a12      	ldr	r2, [pc, #72]	; (800e720 <TIM_OC4_SetConfig+0xa4>)
 800e6d8:	4293      	cmp	r3, r2
 800e6da:	d003      	beq.n	800e6e4 <TIM_OC4_SetConfig+0x68>
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	4a11      	ldr	r2, [pc, #68]	; (800e724 <TIM_OC4_SetConfig+0xa8>)
 800e6e0:	4293      	cmp	r3, r2
 800e6e2:	d109      	bne.n	800e6f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e6e4:	697b      	ldr	r3, [r7, #20]
 800e6e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e6ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	695b      	ldr	r3, [r3, #20]
 800e6f0:	019b      	lsls	r3, r3, #6
 800e6f2:	697a      	ldr	r2, [r7, #20]
 800e6f4:	4313      	orrs	r3, r2
 800e6f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	697a      	ldr	r2, [r7, #20]
 800e6fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	68fa      	ldr	r2, [r7, #12]
 800e702:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	685a      	ldr	r2, [r3, #4]
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	693a      	ldr	r2, [r7, #16]
 800e710:	621a      	str	r2, [r3, #32]
}
 800e712:	bf00      	nop
 800e714:	371c      	adds	r7, #28
 800e716:	46bd      	mov	sp, r7
 800e718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71c:	4770      	bx	lr
 800e71e:	bf00      	nop
 800e720:	40010000 	.word	0x40010000
 800e724:	40010400 	.word	0x40010400

0800e728 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e728:	b480      	push	{r7}
 800e72a:	b087      	sub	sp, #28
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	60f8      	str	r0, [r7, #12]
 800e730:	60b9      	str	r1, [r7, #8]
 800e732:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	6a1b      	ldr	r3, [r3, #32]
 800e738:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	6a1b      	ldr	r3, [r3, #32]
 800e73e:	f023 0201 	bic.w	r2, r3, #1
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	699b      	ldr	r3, [r3, #24]
 800e74a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e74c:	693b      	ldr	r3, [r7, #16]
 800e74e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e752:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	011b      	lsls	r3, r3, #4
 800e758:	693a      	ldr	r2, [r7, #16]
 800e75a:	4313      	orrs	r3, r2
 800e75c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	f023 030a 	bic.w	r3, r3, #10
 800e764:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e766:	697a      	ldr	r2, [r7, #20]
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	4313      	orrs	r3, r2
 800e76c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	693a      	ldr	r2, [r7, #16]
 800e772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	697a      	ldr	r2, [r7, #20]
 800e778:	621a      	str	r2, [r3, #32]
}
 800e77a:	bf00      	nop
 800e77c:	371c      	adds	r7, #28
 800e77e:	46bd      	mov	sp, r7
 800e780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e784:	4770      	bx	lr

0800e786 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e786:	b480      	push	{r7}
 800e788:	b087      	sub	sp, #28
 800e78a:	af00      	add	r7, sp, #0
 800e78c:	60f8      	str	r0, [r7, #12]
 800e78e:	60b9      	str	r1, [r7, #8]
 800e790:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	6a1b      	ldr	r3, [r3, #32]
 800e796:	f023 0210 	bic.w	r2, r3, #16
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	699b      	ldr	r3, [r3, #24]
 800e7a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	6a1b      	ldr	r3, [r3, #32]
 800e7a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e7aa:	697b      	ldr	r3, [r7, #20]
 800e7ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e7b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	031b      	lsls	r3, r3, #12
 800e7b6:	697a      	ldr	r2, [r7, #20]
 800e7b8:	4313      	orrs	r3, r2
 800e7ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e7bc:	693b      	ldr	r3, [r7, #16]
 800e7be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e7c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e7c4:	68bb      	ldr	r3, [r7, #8]
 800e7c6:	011b      	lsls	r3, r3, #4
 800e7c8:	693a      	ldr	r2, [r7, #16]
 800e7ca:	4313      	orrs	r3, r2
 800e7cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	697a      	ldr	r2, [r7, #20]
 800e7d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	693a      	ldr	r2, [r7, #16]
 800e7d8:	621a      	str	r2, [r3, #32]
}
 800e7da:	bf00      	nop
 800e7dc:	371c      	adds	r7, #28
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e4:	4770      	bx	lr

0800e7e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e7e6:	b480      	push	{r7}
 800e7e8:	b085      	sub	sp, #20
 800e7ea:	af00      	add	r7, sp, #0
 800e7ec:	6078      	str	r0, [r7, #4]
 800e7ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	689b      	ldr	r3, [r3, #8]
 800e7f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e7fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e7fe:	683a      	ldr	r2, [r7, #0]
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	4313      	orrs	r3, r2
 800e804:	f043 0307 	orr.w	r3, r3, #7
 800e808:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	68fa      	ldr	r2, [r7, #12]
 800e80e:	609a      	str	r2, [r3, #8]
}
 800e810:	bf00      	nop
 800e812:	3714      	adds	r7, #20
 800e814:	46bd      	mov	sp, r7
 800e816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81a:	4770      	bx	lr

0800e81c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e81c:	b480      	push	{r7}
 800e81e:	b087      	sub	sp, #28
 800e820:	af00      	add	r7, sp, #0
 800e822:	60f8      	str	r0, [r7, #12]
 800e824:	60b9      	str	r1, [r7, #8]
 800e826:	607a      	str	r2, [r7, #4]
 800e828:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	689b      	ldr	r3, [r3, #8]
 800e82e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e830:	697b      	ldr	r3, [r7, #20]
 800e832:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e836:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	021a      	lsls	r2, r3, #8
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	431a      	orrs	r2, r3
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	4313      	orrs	r3, r2
 800e844:	697a      	ldr	r2, [r7, #20]
 800e846:	4313      	orrs	r3, r2
 800e848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	697a      	ldr	r2, [r7, #20]
 800e84e:	609a      	str	r2, [r3, #8]
}
 800e850:	bf00      	nop
 800e852:	371c      	adds	r7, #28
 800e854:	46bd      	mov	sp, r7
 800e856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85a:	4770      	bx	lr

0800e85c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e85c:	b480      	push	{r7}
 800e85e:	b085      	sub	sp, #20
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e86c:	2b01      	cmp	r3, #1
 800e86e:	d101      	bne.n	800e874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e870:	2302      	movs	r3, #2
 800e872:	e05a      	b.n	800e92a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2201      	movs	r2, #1
 800e878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2202      	movs	r2, #2
 800e880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	685b      	ldr	r3, [r3, #4]
 800e88a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	689b      	ldr	r3, [r3, #8]
 800e892:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e89a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	68fa      	ldr	r2, [r7, #12]
 800e8a2:	4313      	orrs	r3, r2
 800e8a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	68fa      	ldr	r2, [r7, #12]
 800e8ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	4a21      	ldr	r2, [pc, #132]	; (800e938 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e8b4:	4293      	cmp	r3, r2
 800e8b6:	d022      	beq.n	800e8fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e8c0:	d01d      	beq.n	800e8fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	4a1d      	ldr	r2, [pc, #116]	; (800e93c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e8c8:	4293      	cmp	r3, r2
 800e8ca:	d018      	beq.n	800e8fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	4a1b      	ldr	r2, [pc, #108]	; (800e940 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e8d2:	4293      	cmp	r3, r2
 800e8d4:	d013      	beq.n	800e8fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	4a1a      	ldr	r2, [pc, #104]	; (800e944 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e8dc:	4293      	cmp	r3, r2
 800e8de:	d00e      	beq.n	800e8fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	4a18      	ldr	r2, [pc, #96]	; (800e948 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e8e6:	4293      	cmp	r3, r2
 800e8e8:	d009      	beq.n	800e8fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	4a17      	ldr	r2, [pc, #92]	; (800e94c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e8f0:	4293      	cmp	r3, r2
 800e8f2:	d004      	beq.n	800e8fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	4a15      	ldr	r2, [pc, #84]	; (800e950 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e8fa:	4293      	cmp	r3, r2
 800e8fc:	d10c      	bne.n	800e918 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e904:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	685b      	ldr	r3, [r3, #4]
 800e90a:	68ba      	ldr	r2, [r7, #8]
 800e90c:	4313      	orrs	r3, r2
 800e90e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	68ba      	ldr	r2, [r7, #8]
 800e916:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2201      	movs	r2, #1
 800e91c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2200      	movs	r2, #0
 800e924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e928:	2300      	movs	r3, #0
}
 800e92a:	4618      	mov	r0, r3
 800e92c:	3714      	adds	r7, #20
 800e92e:	46bd      	mov	sp, r7
 800e930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e934:	4770      	bx	lr
 800e936:	bf00      	nop
 800e938:	40010000 	.word	0x40010000
 800e93c:	40000400 	.word	0x40000400
 800e940:	40000800 	.word	0x40000800
 800e944:	40000c00 	.word	0x40000c00
 800e948:	40010400 	.word	0x40010400
 800e94c:	40014000 	.word	0x40014000
 800e950:	40001800 	.word	0x40001800

0800e954 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e954:	b480      	push	{r7}
 800e956:	b083      	sub	sp, #12
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e95c:	bf00      	nop
 800e95e:	370c      	adds	r7, #12
 800e960:	46bd      	mov	sp, r7
 800e962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e966:	4770      	bx	lr

0800e968 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e968:	b480      	push	{r7}
 800e96a:	b083      	sub	sp, #12
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e970:	bf00      	nop
 800e972:	370c      	adds	r7, #12
 800e974:	46bd      	mov	sp, r7
 800e976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97a:	4770      	bx	lr

0800e97c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b082      	sub	sp, #8
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d101      	bne.n	800e98e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e98a:	2301      	movs	r3, #1
 800e98c:	e03f      	b.n	800ea0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e994:	b2db      	uxtb	r3, r3
 800e996:	2b00      	cmp	r3, #0
 800e998:	d106      	bne.n	800e9a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	2200      	movs	r2, #0
 800e99e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f7f4 fa3e 	bl	8002e24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2224      	movs	r2, #36	; 0x24
 800e9ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	68da      	ldr	r2, [r3, #12]
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e9be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e9c0:	6878      	ldr	r0, [r7, #4]
 800e9c2:	f000 f9cb 	bl	800ed5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	691a      	ldr	r2, [r3, #16]
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e9d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	695a      	ldr	r2, [r3, #20]
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e9e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	68da      	ldr	r2, [r3, #12]
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e9f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2220      	movs	r2, #32
 800ea00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	2220      	movs	r2, #32
 800ea08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ea0c:	2300      	movs	r3, #0
}
 800ea0e:	4618      	mov	r0, r3
 800ea10:	3708      	adds	r7, #8
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bd80      	pop	{r7, pc}

0800ea16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ea16:	b580      	push	{r7, lr}
 800ea18:	b08a      	sub	sp, #40	; 0x28
 800ea1a:	af02      	add	r7, sp, #8
 800ea1c:	60f8      	str	r0, [r7, #12]
 800ea1e:	60b9      	str	r1, [r7, #8]
 800ea20:	603b      	str	r3, [r7, #0]
 800ea22:	4613      	mov	r3, r2
 800ea24:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ea26:	2300      	movs	r3, #0
 800ea28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea30:	b2db      	uxtb	r3, r3
 800ea32:	2b20      	cmp	r3, #32
 800ea34:	d17c      	bne.n	800eb30 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d002      	beq.n	800ea42 <HAL_UART_Transmit+0x2c>
 800ea3c:	88fb      	ldrh	r3, [r7, #6]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d101      	bne.n	800ea46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ea42:	2301      	movs	r3, #1
 800ea44:	e075      	b.n	800eb32 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea4c:	2b01      	cmp	r3, #1
 800ea4e:	d101      	bne.n	800ea54 <HAL_UART_Transmit+0x3e>
 800ea50:	2302      	movs	r3, #2
 800ea52:	e06e      	b.n	800eb32 <HAL_UART_Transmit+0x11c>
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	2201      	movs	r2, #1
 800ea58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	2200      	movs	r2, #0
 800ea60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	2221      	movs	r2, #33	; 0x21
 800ea66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ea6a:	f7fa ff77 	bl	800995c <HAL_GetTick>
 800ea6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	88fa      	ldrh	r2, [r7, #6]
 800ea74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	88fa      	ldrh	r2, [r7, #6]
 800ea7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	689b      	ldr	r3, [r3, #8]
 800ea80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea84:	d108      	bne.n	800ea98 <HAL_UART_Transmit+0x82>
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	691b      	ldr	r3, [r3, #16]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d104      	bne.n	800ea98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800ea8e:	2300      	movs	r3, #0
 800ea90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	61bb      	str	r3, [r7, #24]
 800ea96:	e003      	b.n	800eaa0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800eaa8:	e02a      	b.n	800eb00 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	9300      	str	r3, [sp, #0]
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	2200      	movs	r2, #0
 800eab2:	2180      	movs	r1, #128	; 0x80
 800eab4:	68f8      	ldr	r0, [r7, #12]
 800eab6:	f000 f8e2 	bl	800ec7e <UART_WaitOnFlagUntilTimeout>
 800eaba:	4603      	mov	r3, r0
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d001      	beq.n	800eac4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800eac0:	2303      	movs	r3, #3
 800eac2:	e036      	b.n	800eb32 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800eac4:	69fb      	ldr	r3, [r7, #28]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d10b      	bne.n	800eae2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800eaca:	69bb      	ldr	r3, [r7, #24]
 800eacc:	881b      	ldrh	r3, [r3, #0]
 800eace:	461a      	mov	r2, r3
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ead8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800eada:	69bb      	ldr	r3, [r7, #24]
 800eadc:	3302      	adds	r3, #2
 800eade:	61bb      	str	r3, [r7, #24]
 800eae0:	e007      	b.n	800eaf2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800eae2:	69fb      	ldr	r3, [r7, #28]
 800eae4:	781a      	ldrb	r2, [r3, #0]
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800eaec:	69fb      	ldr	r3, [r7, #28]
 800eaee:	3301      	adds	r3, #1
 800eaf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800eaf6:	b29b      	uxth	r3, r3
 800eaf8:	3b01      	subs	r3, #1
 800eafa:	b29a      	uxth	r2, r3
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800eb04:	b29b      	uxth	r3, r3
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d1cf      	bne.n	800eaaa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	9300      	str	r3, [sp, #0]
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	2200      	movs	r2, #0
 800eb12:	2140      	movs	r1, #64	; 0x40
 800eb14:	68f8      	ldr	r0, [r7, #12]
 800eb16:	f000 f8b2 	bl	800ec7e <UART_WaitOnFlagUntilTimeout>
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d001      	beq.n	800eb24 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800eb20:	2303      	movs	r3, #3
 800eb22:	e006      	b.n	800eb32 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	2220      	movs	r2, #32
 800eb28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	e000      	b.n	800eb32 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800eb30:	2302      	movs	r3, #2
  }
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	3720      	adds	r7, #32
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}

0800eb3a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb3a:	b580      	push	{r7, lr}
 800eb3c:	b08a      	sub	sp, #40	; 0x28
 800eb3e:	af02      	add	r7, sp, #8
 800eb40:	60f8      	str	r0, [r7, #12]
 800eb42:	60b9      	str	r1, [r7, #8]
 800eb44:	603b      	str	r3, [r7, #0]
 800eb46:	4613      	mov	r3, r2
 800eb48:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800eb54:	b2db      	uxtb	r3, r3
 800eb56:	2b20      	cmp	r3, #32
 800eb58:	f040 808c 	bne.w	800ec74 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d002      	beq.n	800eb68 <HAL_UART_Receive+0x2e>
 800eb62:	88fb      	ldrh	r3, [r7, #6]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d101      	bne.n	800eb6c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800eb68:	2301      	movs	r3, #1
 800eb6a:	e084      	b.n	800ec76 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eb72:	2b01      	cmp	r3, #1
 800eb74:	d101      	bne.n	800eb7a <HAL_UART_Receive+0x40>
 800eb76:	2302      	movs	r3, #2
 800eb78:	e07d      	b.n	800ec76 <HAL_UART_Receive+0x13c>
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	2201      	movs	r2, #1
 800eb7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	2200      	movs	r2, #0
 800eb86:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	2222      	movs	r2, #34	; 0x22
 800eb8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	2200      	movs	r2, #0
 800eb94:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800eb96:	f7fa fee1 	bl	800995c <HAL_GetTick>
 800eb9a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	88fa      	ldrh	r2, [r7, #6]
 800eba0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	88fa      	ldrh	r2, [r7, #6]
 800eba6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	689b      	ldr	r3, [r3, #8]
 800ebac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ebb0:	d108      	bne.n	800ebc4 <HAL_UART_Receive+0x8a>
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	691b      	ldr	r3, [r3, #16]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d104      	bne.n	800ebc4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	61bb      	str	r3, [r7, #24]
 800ebc2:	e003      	b.n	800ebcc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ebc8:	2300      	movs	r3, #0
 800ebca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	2200      	movs	r2, #0
 800ebd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800ebd4:	e043      	b.n	800ec5e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	9300      	str	r3, [sp, #0]
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	2200      	movs	r2, #0
 800ebde:	2120      	movs	r1, #32
 800ebe0:	68f8      	ldr	r0, [r7, #12]
 800ebe2:	f000 f84c 	bl	800ec7e <UART_WaitOnFlagUntilTimeout>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d001      	beq.n	800ebf0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800ebec:	2303      	movs	r3, #3
 800ebee:	e042      	b.n	800ec76 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800ebf0:	69fb      	ldr	r3, [r7, #28]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d10c      	bne.n	800ec10 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	b29b      	uxth	r3, r3
 800ebfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec02:	b29a      	uxth	r2, r3
 800ec04:	69bb      	ldr	r3, [r7, #24]
 800ec06:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800ec08:	69bb      	ldr	r3, [r7, #24]
 800ec0a:	3302      	adds	r3, #2
 800ec0c:	61bb      	str	r3, [r7, #24]
 800ec0e:	e01f      	b.n	800ec50 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	689b      	ldr	r3, [r3, #8]
 800ec14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec18:	d007      	beq.n	800ec2a <HAL_UART_Receive+0xf0>
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	689b      	ldr	r3, [r3, #8]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d10a      	bne.n	800ec38 <HAL_UART_Receive+0xfe>
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	691b      	ldr	r3, [r3, #16]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d106      	bne.n	800ec38 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	685b      	ldr	r3, [r3, #4]
 800ec30:	b2da      	uxtb	r2, r3
 800ec32:	69fb      	ldr	r3, [r7, #28]
 800ec34:	701a      	strb	r2, [r3, #0]
 800ec36:	e008      	b.n	800ec4a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	685b      	ldr	r3, [r3, #4]
 800ec3e:	b2db      	uxtb	r3, r3
 800ec40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec44:	b2da      	uxtb	r2, r3
 800ec46:	69fb      	ldr	r3, [r7, #28]
 800ec48:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800ec4a:	69fb      	ldr	r3, [r7, #28]
 800ec4c:	3301      	adds	r3, #1
 800ec4e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ec54:	b29b      	uxth	r3, r3
 800ec56:	3b01      	subs	r3, #1
 800ec58:	b29a      	uxth	r2, r3
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ec62:	b29b      	uxth	r3, r3
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d1b6      	bne.n	800ebd6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	2220      	movs	r2, #32
 800ec6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800ec70:	2300      	movs	r3, #0
 800ec72:	e000      	b.n	800ec76 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800ec74:	2302      	movs	r3, #2
  }
}
 800ec76:	4618      	mov	r0, r3
 800ec78:	3720      	adds	r7, #32
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}

0800ec7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ec7e:	b580      	push	{r7, lr}
 800ec80:	b090      	sub	sp, #64	; 0x40
 800ec82:	af00      	add	r7, sp, #0
 800ec84:	60f8      	str	r0, [r7, #12]
 800ec86:	60b9      	str	r1, [r7, #8]
 800ec88:	603b      	str	r3, [r7, #0]
 800ec8a:	4613      	mov	r3, r2
 800ec8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ec8e:	e050      	b.n	800ed32 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ec90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec96:	d04c      	beq.n	800ed32 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ec98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d007      	beq.n	800ecae <UART_WaitOnFlagUntilTimeout+0x30>
 800ec9e:	f7fa fe5d 	bl	800995c <HAL_GetTick>
 800eca2:	4602      	mov	r2, r0
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	1ad3      	subs	r3, r2, r3
 800eca8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ecaa:	429a      	cmp	r2, r3
 800ecac:	d241      	bcs.n	800ed32 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	330c      	adds	r3, #12
 800ecb4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecb8:	e853 3f00 	ldrex	r3, [r3]
 800ecbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ecbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ecc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	330c      	adds	r3, #12
 800eccc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ecce:	637a      	str	r2, [r7, #52]	; 0x34
 800ecd0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ecd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ecd6:	e841 2300 	strex	r3, r2, [r1]
 800ecda:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ecdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d1e5      	bne.n	800ecae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	3314      	adds	r3, #20
 800ece8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecea:	697b      	ldr	r3, [r7, #20]
 800ecec:	e853 3f00 	ldrex	r3, [r3]
 800ecf0:	613b      	str	r3, [r7, #16]
   return(result);
 800ecf2:	693b      	ldr	r3, [r7, #16]
 800ecf4:	f023 0301 	bic.w	r3, r3, #1
 800ecf8:	63bb      	str	r3, [r7, #56]	; 0x38
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	3314      	adds	r3, #20
 800ed00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed02:	623a      	str	r2, [r7, #32]
 800ed04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed06:	69f9      	ldr	r1, [r7, #28]
 800ed08:	6a3a      	ldr	r2, [r7, #32]
 800ed0a:	e841 2300 	strex	r3, r2, [r1]
 800ed0e:	61bb      	str	r3, [r7, #24]
   return(result);
 800ed10:	69bb      	ldr	r3, [r7, #24]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d1e5      	bne.n	800ece2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	2220      	movs	r2, #32
 800ed1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	2220      	movs	r2, #32
 800ed22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	2200      	movs	r2, #0
 800ed2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ed2e:	2303      	movs	r3, #3
 800ed30:	e00f      	b.n	800ed52 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	681a      	ldr	r2, [r3, #0]
 800ed38:	68bb      	ldr	r3, [r7, #8]
 800ed3a:	4013      	ands	r3, r2
 800ed3c:	68ba      	ldr	r2, [r7, #8]
 800ed3e:	429a      	cmp	r2, r3
 800ed40:	bf0c      	ite	eq
 800ed42:	2301      	moveq	r3, #1
 800ed44:	2300      	movne	r3, #0
 800ed46:	b2db      	uxtb	r3, r3
 800ed48:	461a      	mov	r2, r3
 800ed4a:	79fb      	ldrb	r3, [r7, #7]
 800ed4c:	429a      	cmp	r2, r3
 800ed4e:	d09f      	beq.n	800ec90 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ed50:	2300      	movs	r3, #0
}
 800ed52:	4618      	mov	r0, r3
 800ed54:	3740      	adds	r7, #64	; 0x40
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}
	...

0800ed5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ed5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed60:	b09f      	sub	sp, #124	; 0x7c
 800ed62:	af00      	add	r7, sp, #0
 800ed64:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ed66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	691b      	ldr	r3, [r3, #16]
 800ed6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ed70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed72:	68d9      	ldr	r1, [r3, #12]
 800ed74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed76:	681a      	ldr	r2, [r3, #0]
 800ed78:	ea40 0301 	orr.w	r3, r0, r1
 800ed7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ed7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed80:	689a      	ldr	r2, [r3, #8]
 800ed82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed84:	691b      	ldr	r3, [r3, #16]
 800ed86:	431a      	orrs	r2, r3
 800ed88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed8a:	695b      	ldr	r3, [r3, #20]
 800ed8c:	431a      	orrs	r2, r3
 800ed8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed90:	69db      	ldr	r3, [r3, #28]
 800ed92:	4313      	orrs	r3, r2
 800ed94:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800ed96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	68db      	ldr	r3, [r3, #12]
 800ed9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800eda0:	f021 010c 	bic.w	r1, r1, #12
 800eda4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eda6:	681a      	ldr	r2, [r3, #0]
 800eda8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800edaa:	430b      	orrs	r3, r1
 800edac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800edae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	695b      	ldr	r3, [r3, #20]
 800edb4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800edb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edba:	6999      	ldr	r1, [r3, #24]
 800edbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edbe:	681a      	ldr	r2, [r3, #0]
 800edc0:	ea40 0301 	orr.w	r3, r0, r1
 800edc4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800edc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edc8:	681a      	ldr	r2, [r3, #0]
 800edca:	4bc5      	ldr	r3, [pc, #788]	; (800f0e0 <UART_SetConfig+0x384>)
 800edcc:	429a      	cmp	r2, r3
 800edce:	d004      	beq.n	800edda <UART_SetConfig+0x7e>
 800edd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edd2:	681a      	ldr	r2, [r3, #0]
 800edd4:	4bc3      	ldr	r3, [pc, #780]	; (800f0e4 <UART_SetConfig+0x388>)
 800edd6:	429a      	cmp	r2, r3
 800edd8:	d103      	bne.n	800ede2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800edda:	f7fd f8c7 	bl	800bf6c <HAL_RCC_GetPCLK2Freq>
 800edde:	6778      	str	r0, [r7, #116]	; 0x74
 800ede0:	e002      	b.n	800ede8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ede2:	f7fd f8af 	bl	800bf44 <HAL_RCC_GetPCLK1Freq>
 800ede6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ede8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edea:	69db      	ldr	r3, [r3, #28]
 800edec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800edf0:	f040 80b6 	bne.w	800ef60 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800edf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800edf6:	461c      	mov	r4, r3
 800edf8:	f04f 0500 	mov.w	r5, #0
 800edfc:	4622      	mov	r2, r4
 800edfe:	462b      	mov	r3, r5
 800ee00:	1891      	adds	r1, r2, r2
 800ee02:	6439      	str	r1, [r7, #64]	; 0x40
 800ee04:	415b      	adcs	r3, r3
 800ee06:	647b      	str	r3, [r7, #68]	; 0x44
 800ee08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ee0c:	1912      	adds	r2, r2, r4
 800ee0e:	eb45 0303 	adc.w	r3, r5, r3
 800ee12:	f04f 0000 	mov.w	r0, #0
 800ee16:	f04f 0100 	mov.w	r1, #0
 800ee1a:	00d9      	lsls	r1, r3, #3
 800ee1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ee20:	00d0      	lsls	r0, r2, #3
 800ee22:	4602      	mov	r2, r0
 800ee24:	460b      	mov	r3, r1
 800ee26:	1911      	adds	r1, r2, r4
 800ee28:	6639      	str	r1, [r7, #96]	; 0x60
 800ee2a:	416b      	adcs	r3, r5
 800ee2c:	667b      	str	r3, [r7, #100]	; 0x64
 800ee2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee30:	685b      	ldr	r3, [r3, #4]
 800ee32:	461a      	mov	r2, r3
 800ee34:	f04f 0300 	mov.w	r3, #0
 800ee38:	1891      	adds	r1, r2, r2
 800ee3a:	63b9      	str	r1, [r7, #56]	; 0x38
 800ee3c:	415b      	adcs	r3, r3
 800ee3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ee40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ee44:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800ee48:	f7f1 ff8e 	bl	8000d68 <__aeabi_uldivmod>
 800ee4c:	4602      	mov	r2, r0
 800ee4e:	460b      	mov	r3, r1
 800ee50:	4ba5      	ldr	r3, [pc, #660]	; (800f0e8 <UART_SetConfig+0x38c>)
 800ee52:	fba3 2302 	umull	r2, r3, r3, r2
 800ee56:	095b      	lsrs	r3, r3, #5
 800ee58:	011e      	lsls	r6, r3, #4
 800ee5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ee5c:	461c      	mov	r4, r3
 800ee5e:	f04f 0500 	mov.w	r5, #0
 800ee62:	4622      	mov	r2, r4
 800ee64:	462b      	mov	r3, r5
 800ee66:	1891      	adds	r1, r2, r2
 800ee68:	6339      	str	r1, [r7, #48]	; 0x30
 800ee6a:	415b      	adcs	r3, r3
 800ee6c:	637b      	str	r3, [r7, #52]	; 0x34
 800ee6e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ee72:	1912      	adds	r2, r2, r4
 800ee74:	eb45 0303 	adc.w	r3, r5, r3
 800ee78:	f04f 0000 	mov.w	r0, #0
 800ee7c:	f04f 0100 	mov.w	r1, #0
 800ee80:	00d9      	lsls	r1, r3, #3
 800ee82:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ee86:	00d0      	lsls	r0, r2, #3
 800ee88:	4602      	mov	r2, r0
 800ee8a:	460b      	mov	r3, r1
 800ee8c:	1911      	adds	r1, r2, r4
 800ee8e:	65b9      	str	r1, [r7, #88]	; 0x58
 800ee90:	416b      	adcs	r3, r5
 800ee92:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ee94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee96:	685b      	ldr	r3, [r3, #4]
 800ee98:	461a      	mov	r2, r3
 800ee9a:	f04f 0300 	mov.w	r3, #0
 800ee9e:	1891      	adds	r1, r2, r2
 800eea0:	62b9      	str	r1, [r7, #40]	; 0x28
 800eea2:	415b      	adcs	r3, r3
 800eea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eea6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800eeaa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800eeae:	f7f1 ff5b 	bl	8000d68 <__aeabi_uldivmod>
 800eeb2:	4602      	mov	r2, r0
 800eeb4:	460b      	mov	r3, r1
 800eeb6:	4b8c      	ldr	r3, [pc, #560]	; (800f0e8 <UART_SetConfig+0x38c>)
 800eeb8:	fba3 1302 	umull	r1, r3, r3, r2
 800eebc:	095b      	lsrs	r3, r3, #5
 800eebe:	2164      	movs	r1, #100	; 0x64
 800eec0:	fb01 f303 	mul.w	r3, r1, r3
 800eec4:	1ad3      	subs	r3, r2, r3
 800eec6:	00db      	lsls	r3, r3, #3
 800eec8:	3332      	adds	r3, #50	; 0x32
 800eeca:	4a87      	ldr	r2, [pc, #540]	; (800f0e8 <UART_SetConfig+0x38c>)
 800eecc:	fba2 2303 	umull	r2, r3, r2, r3
 800eed0:	095b      	lsrs	r3, r3, #5
 800eed2:	005b      	lsls	r3, r3, #1
 800eed4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800eed8:	441e      	add	r6, r3
 800eeda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eedc:	4618      	mov	r0, r3
 800eede:	f04f 0100 	mov.w	r1, #0
 800eee2:	4602      	mov	r2, r0
 800eee4:	460b      	mov	r3, r1
 800eee6:	1894      	adds	r4, r2, r2
 800eee8:	623c      	str	r4, [r7, #32]
 800eeea:	415b      	adcs	r3, r3
 800eeec:	627b      	str	r3, [r7, #36]	; 0x24
 800eeee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800eef2:	1812      	adds	r2, r2, r0
 800eef4:	eb41 0303 	adc.w	r3, r1, r3
 800eef8:	f04f 0400 	mov.w	r4, #0
 800eefc:	f04f 0500 	mov.w	r5, #0
 800ef00:	00dd      	lsls	r5, r3, #3
 800ef02:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ef06:	00d4      	lsls	r4, r2, #3
 800ef08:	4622      	mov	r2, r4
 800ef0a:	462b      	mov	r3, r5
 800ef0c:	1814      	adds	r4, r2, r0
 800ef0e:	653c      	str	r4, [r7, #80]	; 0x50
 800ef10:	414b      	adcs	r3, r1
 800ef12:	657b      	str	r3, [r7, #84]	; 0x54
 800ef14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef16:	685b      	ldr	r3, [r3, #4]
 800ef18:	461a      	mov	r2, r3
 800ef1a:	f04f 0300 	mov.w	r3, #0
 800ef1e:	1891      	adds	r1, r2, r2
 800ef20:	61b9      	str	r1, [r7, #24]
 800ef22:	415b      	adcs	r3, r3
 800ef24:	61fb      	str	r3, [r7, #28]
 800ef26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ef2a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800ef2e:	f7f1 ff1b 	bl	8000d68 <__aeabi_uldivmod>
 800ef32:	4602      	mov	r2, r0
 800ef34:	460b      	mov	r3, r1
 800ef36:	4b6c      	ldr	r3, [pc, #432]	; (800f0e8 <UART_SetConfig+0x38c>)
 800ef38:	fba3 1302 	umull	r1, r3, r3, r2
 800ef3c:	095b      	lsrs	r3, r3, #5
 800ef3e:	2164      	movs	r1, #100	; 0x64
 800ef40:	fb01 f303 	mul.w	r3, r1, r3
 800ef44:	1ad3      	subs	r3, r2, r3
 800ef46:	00db      	lsls	r3, r3, #3
 800ef48:	3332      	adds	r3, #50	; 0x32
 800ef4a:	4a67      	ldr	r2, [pc, #412]	; (800f0e8 <UART_SetConfig+0x38c>)
 800ef4c:	fba2 2303 	umull	r2, r3, r2, r3
 800ef50:	095b      	lsrs	r3, r3, #5
 800ef52:	f003 0207 	and.w	r2, r3, #7
 800ef56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	4432      	add	r2, r6
 800ef5c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ef5e:	e0b9      	b.n	800f0d4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ef60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ef62:	461c      	mov	r4, r3
 800ef64:	f04f 0500 	mov.w	r5, #0
 800ef68:	4622      	mov	r2, r4
 800ef6a:	462b      	mov	r3, r5
 800ef6c:	1891      	adds	r1, r2, r2
 800ef6e:	6139      	str	r1, [r7, #16]
 800ef70:	415b      	adcs	r3, r3
 800ef72:	617b      	str	r3, [r7, #20]
 800ef74:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ef78:	1912      	adds	r2, r2, r4
 800ef7a:	eb45 0303 	adc.w	r3, r5, r3
 800ef7e:	f04f 0000 	mov.w	r0, #0
 800ef82:	f04f 0100 	mov.w	r1, #0
 800ef86:	00d9      	lsls	r1, r3, #3
 800ef88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ef8c:	00d0      	lsls	r0, r2, #3
 800ef8e:	4602      	mov	r2, r0
 800ef90:	460b      	mov	r3, r1
 800ef92:	eb12 0804 	adds.w	r8, r2, r4
 800ef96:	eb43 0905 	adc.w	r9, r3, r5
 800ef9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef9c:	685b      	ldr	r3, [r3, #4]
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f04f 0100 	mov.w	r1, #0
 800efa4:	f04f 0200 	mov.w	r2, #0
 800efa8:	f04f 0300 	mov.w	r3, #0
 800efac:	008b      	lsls	r3, r1, #2
 800efae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800efb2:	0082      	lsls	r2, r0, #2
 800efb4:	4640      	mov	r0, r8
 800efb6:	4649      	mov	r1, r9
 800efb8:	f7f1 fed6 	bl	8000d68 <__aeabi_uldivmod>
 800efbc:	4602      	mov	r2, r0
 800efbe:	460b      	mov	r3, r1
 800efc0:	4b49      	ldr	r3, [pc, #292]	; (800f0e8 <UART_SetConfig+0x38c>)
 800efc2:	fba3 2302 	umull	r2, r3, r3, r2
 800efc6:	095b      	lsrs	r3, r3, #5
 800efc8:	011e      	lsls	r6, r3, #4
 800efca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800efcc:	4618      	mov	r0, r3
 800efce:	f04f 0100 	mov.w	r1, #0
 800efd2:	4602      	mov	r2, r0
 800efd4:	460b      	mov	r3, r1
 800efd6:	1894      	adds	r4, r2, r2
 800efd8:	60bc      	str	r4, [r7, #8]
 800efda:	415b      	adcs	r3, r3
 800efdc:	60fb      	str	r3, [r7, #12]
 800efde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800efe2:	1812      	adds	r2, r2, r0
 800efe4:	eb41 0303 	adc.w	r3, r1, r3
 800efe8:	f04f 0400 	mov.w	r4, #0
 800efec:	f04f 0500 	mov.w	r5, #0
 800eff0:	00dd      	lsls	r5, r3, #3
 800eff2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800eff6:	00d4      	lsls	r4, r2, #3
 800eff8:	4622      	mov	r2, r4
 800effa:	462b      	mov	r3, r5
 800effc:	1814      	adds	r4, r2, r0
 800effe:	64bc      	str	r4, [r7, #72]	; 0x48
 800f000:	414b      	adcs	r3, r1
 800f002:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f006:	685b      	ldr	r3, [r3, #4]
 800f008:	4618      	mov	r0, r3
 800f00a:	f04f 0100 	mov.w	r1, #0
 800f00e:	f04f 0200 	mov.w	r2, #0
 800f012:	f04f 0300 	mov.w	r3, #0
 800f016:	008b      	lsls	r3, r1, #2
 800f018:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f01c:	0082      	lsls	r2, r0, #2
 800f01e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800f022:	f7f1 fea1 	bl	8000d68 <__aeabi_uldivmod>
 800f026:	4602      	mov	r2, r0
 800f028:	460b      	mov	r3, r1
 800f02a:	4b2f      	ldr	r3, [pc, #188]	; (800f0e8 <UART_SetConfig+0x38c>)
 800f02c:	fba3 1302 	umull	r1, r3, r3, r2
 800f030:	095b      	lsrs	r3, r3, #5
 800f032:	2164      	movs	r1, #100	; 0x64
 800f034:	fb01 f303 	mul.w	r3, r1, r3
 800f038:	1ad3      	subs	r3, r2, r3
 800f03a:	011b      	lsls	r3, r3, #4
 800f03c:	3332      	adds	r3, #50	; 0x32
 800f03e:	4a2a      	ldr	r2, [pc, #168]	; (800f0e8 <UART_SetConfig+0x38c>)
 800f040:	fba2 2303 	umull	r2, r3, r2, r3
 800f044:	095b      	lsrs	r3, r3, #5
 800f046:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f04a:	441e      	add	r6, r3
 800f04c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f04e:	4618      	mov	r0, r3
 800f050:	f04f 0100 	mov.w	r1, #0
 800f054:	4602      	mov	r2, r0
 800f056:	460b      	mov	r3, r1
 800f058:	1894      	adds	r4, r2, r2
 800f05a:	603c      	str	r4, [r7, #0]
 800f05c:	415b      	adcs	r3, r3
 800f05e:	607b      	str	r3, [r7, #4]
 800f060:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f064:	1812      	adds	r2, r2, r0
 800f066:	eb41 0303 	adc.w	r3, r1, r3
 800f06a:	f04f 0400 	mov.w	r4, #0
 800f06e:	f04f 0500 	mov.w	r5, #0
 800f072:	00dd      	lsls	r5, r3, #3
 800f074:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f078:	00d4      	lsls	r4, r2, #3
 800f07a:	4622      	mov	r2, r4
 800f07c:	462b      	mov	r3, r5
 800f07e:	eb12 0a00 	adds.w	sl, r2, r0
 800f082:	eb43 0b01 	adc.w	fp, r3, r1
 800f086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f088:	685b      	ldr	r3, [r3, #4]
 800f08a:	4618      	mov	r0, r3
 800f08c:	f04f 0100 	mov.w	r1, #0
 800f090:	f04f 0200 	mov.w	r2, #0
 800f094:	f04f 0300 	mov.w	r3, #0
 800f098:	008b      	lsls	r3, r1, #2
 800f09a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f09e:	0082      	lsls	r2, r0, #2
 800f0a0:	4650      	mov	r0, sl
 800f0a2:	4659      	mov	r1, fp
 800f0a4:	f7f1 fe60 	bl	8000d68 <__aeabi_uldivmod>
 800f0a8:	4602      	mov	r2, r0
 800f0aa:	460b      	mov	r3, r1
 800f0ac:	4b0e      	ldr	r3, [pc, #56]	; (800f0e8 <UART_SetConfig+0x38c>)
 800f0ae:	fba3 1302 	umull	r1, r3, r3, r2
 800f0b2:	095b      	lsrs	r3, r3, #5
 800f0b4:	2164      	movs	r1, #100	; 0x64
 800f0b6:	fb01 f303 	mul.w	r3, r1, r3
 800f0ba:	1ad3      	subs	r3, r2, r3
 800f0bc:	011b      	lsls	r3, r3, #4
 800f0be:	3332      	adds	r3, #50	; 0x32
 800f0c0:	4a09      	ldr	r2, [pc, #36]	; (800f0e8 <UART_SetConfig+0x38c>)
 800f0c2:	fba2 2303 	umull	r2, r3, r2, r3
 800f0c6:	095b      	lsrs	r3, r3, #5
 800f0c8:	f003 020f 	and.w	r2, r3, #15
 800f0cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	4432      	add	r2, r6
 800f0d2:	609a      	str	r2, [r3, #8]
}
 800f0d4:	bf00      	nop
 800f0d6:	377c      	adds	r7, #124	; 0x7c
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0de:	bf00      	nop
 800f0e0:	40011000 	.word	0x40011000
 800f0e4:	40011400 	.word	0x40011400
 800f0e8:	51eb851f 	.word	0x51eb851f

0800f0ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800f0f0:	4904      	ldr	r1, [pc, #16]	; (800f104 <MX_FATFS_Init+0x18>)
 800f0f2:	4805      	ldr	r0, [pc, #20]	; (800f108 <MX_FATFS_Init+0x1c>)
 800f0f4:	f000 f8b0 	bl	800f258 <FATFS_LinkDriver>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	461a      	mov	r2, r3
 800f0fc:	4b03      	ldr	r3, [pc, #12]	; (800f10c <MX_FATFS_Init+0x20>)
 800f0fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f100:	bf00      	nop
 800f102:	bd80      	pop	{r7, pc}
 800f104:	20006038 	.word	0x20006038
 800f108:	20000090 	.word	0x20000090
 800f10c:	2000603c 	.word	0x2000603c

0800f110 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800f110:	b480      	push	{r7}
 800f112:	b083      	sub	sp, #12
 800f114:	af00      	add	r7, sp, #0
 800f116:	4603      	mov	r3, r0
 800f118:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800f11a:	4b06      	ldr	r3, [pc, #24]	; (800f134 <USER_initialize+0x24>)
 800f11c:	2201      	movs	r2, #1
 800f11e:	701a      	strb	r2, [r3, #0]
    return Stat;
 800f120:	4b04      	ldr	r3, [pc, #16]	; (800f134 <USER_initialize+0x24>)
 800f122:	781b      	ldrb	r3, [r3, #0]
 800f124:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800f126:	4618      	mov	r0, r3
 800f128:	370c      	adds	r7, #12
 800f12a:	46bd      	mov	sp, r7
 800f12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f130:	4770      	bx	lr
 800f132:	bf00      	nop
 800f134:	2000008d 	.word	0x2000008d

0800f138 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800f138:	b480      	push	{r7}
 800f13a:	b083      	sub	sp, #12
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	4603      	mov	r3, r0
 800f140:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800f142:	4b06      	ldr	r3, [pc, #24]	; (800f15c <USER_status+0x24>)
 800f144:	2201      	movs	r2, #1
 800f146:	701a      	strb	r2, [r3, #0]
    return Stat;
 800f148:	4b04      	ldr	r3, [pc, #16]	; (800f15c <USER_status+0x24>)
 800f14a:	781b      	ldrb	r3, [r3, #0]
 800f14c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800f14e:	4618      	mov	r0, r3
 800f150:	370c      	adds	r7, #12
 800f152:	46bd      	mov	sp, r7
 800f154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f158:	4770      	bx	lr
 800f15a:	bf00      	nop
 800f15c:	2000008d 	.word	0x2000008d

0800f160 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800f160:	b480      	push	{r7}
 800f162:	b085      	sub	sp, #20
 800f164:	af00      	add	r7, sp, #0
 800f166:	60b9      	str	r1, [r7, #8]
 800f168:	607a      	str	r2, [r7, #4]
 800f16a:	603b      	str	r3, [r7, #0]
 800f16c:	4603      	mov	r3, r0
 800f16e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800f170:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800f172:	4618      	mov	r0, r3
 800f174:	3714      	adds	r7, #20
 800f176:	46bd      	mov	sp, r7
 800f178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17c:	4770      	bx	lr

0800f17e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800f17e:	b480      	push	{r7}
 800f180:	b085      	sub	sp, #20
 800f182:	af00      	add	r7, sp, #0
 800f184:	60b9      	str	r1, [r7, #8]
 800f186:	607a      	str	r2, [r7, #4]
 800f188:	603b      	str	r3, [r7, #0]
 800f18a:	4603      	mov	r3, r0
 800f18c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800f18e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800f190:	4618      	mov	r0, r3
 800f192:	3714      	adds	r7, #20
 800f194:	46bd      	mov	sp, r7
 800f196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19a:	4770      	bx	lr

0800f19c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800f19c:	b480      	push	{r7}
 800f19e:	b085      	sub	sp, #20
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	603a      	str	r2, [r7, #0]
 800f1a6:	71fb      	strb	r3, [r7, #7]
 800f1a8:	460b      	mov	r3, r1
 800f1aa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800f1ac:	2301      	movs	r3, #1
 800f1ae:	73fb      	strb	r3, [r7, #15]
    return res;
 800f1b0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	3714      	adds	r7, #20
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1bc:	4770      	bx	lr
	...

0800f1c0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f1c0:	b480      	push	{r7}
 800f1c2:	b087      	sub	sp, #28
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	60f8      	str	r0, [r7, #12]
 800f1c8:	60b9      	str	r1, [r7, #8]
 800f1ca:	4613      	mov	r3, r2
 800f1cc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f1d6:	4b1f      	ldr	r3, [pc, #124]	; (800f254 <FATFS_LinkDriverEx+0x94>)
 800f1d8:	7a5b      	ldrb	r3, [r3, #9]
 800f1da:	b2db      	uxtb	r3, r3
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d131      	bne.n	800f244 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f1e0:	4b1c      	ldr	r3, [pc, #112]	; (800f254 <FATFS_LinkDriverEx+0x94>)
 800f1e2:	7a5b      	ldrb	r3, [r3, #9]
 800f1e4:	b2db      	uxtb	r3, r3
 800f1e6:	461a      	mov	r2, r3
 800f1e8:	4b1a      	ldr	r3, [pc, #104]	; (800f254 <FATFS_LinkDriverEx+0x94>)
 800f1ea:	2100      	movs	r1, #0
 800f1ec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f1ee:	4b19      	ldr	r3, [pc, #100]	; (800f254 <FATFS_LinkDriverEx+0x94>)
 800f1f0:	7a5b      	ldrb	r3, [r3, #9]
 800f1f2:	b2db      	uxtb	r3, r3
 800f1f4:	4a17      	ldr	r2, [pc, #92]	; (800f254 <FATFS_LinkDriverEx+0x94>)
 800f1f6:	009b      	lsls	r3, r3, #2
 800f1f8:	4413      	add	r3, r2
 800f1fa:	68fa      	ldr	r2, [r7, #12]
 800f1fc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f1fe:	4b15      	ldr	r3, [pc, #84]	; (800f254 <FATFS_LinkDriverEx+0x94>)
 800f200:	7a5b      	ldrb	r3, [r3, #9]
 800f202:	b2db      	uxtb	r3, r3
 800f204:	461a      	mov	r2, r3
 800f206:	4b13      	ldr	r3, [pc, #76]	; (800f254 <FATFS_LinkDriverEx+0x94>)
 800f208:	4413      	add	r3, r2
 800f20a:	79fa      	ldrb	r2, [r7, #7]
 800f20c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f20e:	4b11      	ldr	r3, [pc, #68]	; (800f254 <FATFS_LinkDriverEx+0x94>)
 800f210:	7a5b      	ldrb	r3, [r3, #9]
 800f212:	b2db      	uxtb	r3, r3
 800f214:	1c5a      	adds	r2, r3, #1
 800f216:	b2d1      	uxtb	r1, r2
 800f218:	4a0e      	ldr	r2, [pc, #56]	; (800f254 <FATFS_LinkDriverEx+0x94>)
 800f21a:	7251      	strb	r1, [r2, #9]
 800f21c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f21e:	7dbb      	ldrb	r3, [r7, #22]
 800f220:	3330      	adds	r3, #48	; 0x30
 800f222:	b2da      	uxtb	r2, r3
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	3301      	adds	r3, #1
 800f22c:	223a      	movs	r2, #58	; 0x3a
 800f22e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	3302      	adds	r3, #2
 800f234:	222f      	movs	r2, #47	; 0x2f
 800f236:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	3303      	adds	r3, #3
 800f23c:	2200      	movs	r2, #0
 800f23e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f240:	2300      	movs	r3, #0
 800f242:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f244:	7dfb      	ldrb	r3, [r7, #23]
}
 800f246:	4618      	mov	r0, r3
 800f248:	371c      	adds	r7, #28
 800f24a:	46bd      	mov	sp, r7
 800f24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f250:	4770      	bx	lr
 800f252:	bf00      	nop
 800f254:	20000628 	.word	0x20000628

0800f258 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b082      	sub	sp, #8
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
 800f260:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f262:	2200      	movs	r2, #0
 800f264:	6839      	ldr	r1, [r7, #0]
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f7ff ffaa 	bl	800f1c0 <FATFS_LinkDriverEx>
 800f26c:	4603      	mov	r3, r0
}
 800f26e:	4618      	mov	r0, r3
 800f270:	3708      	adds	r7, #8
 800f272:	46bd      	mov	sp, r7
 800f274:	bd80      	pop	{r7, pc}
	...

0800f278 <__NVIC_SetPriority>:
{
 800f278:	b480      	push	{r7}
 800f27a:	b083      	sub	sp, #12
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	4603      	mov	r3, r0
 800f280:	6039      	str	r1, [r7, #0]
 800f282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	db0a      	blt.n	800f2a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	b2da      	uxtb	r2, r3
 800f290:	490c      	ldr	r1, [pc, #48]	; (800f2c4 <__NVIC_SetPriority+0x4c>)
 800f292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f296:	0112      	lsls	r2, r2, #4
 800f298:	b2d2      	uxtb	r2, r2
 800f29a:	440b      	add	r3, r1
 800f29c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f2a0:	e00a      	b.n	800f2b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	b2da      	uxtb	r2, r3
 800f2a6:	4908      	ldr	r1, [pc, #32]	; (800f2c8 <__NVIC_SetPriority+0x50>)
 800f2a8:	79fb      	ldrb	r3, [r7, #7]
 800f2aa:	f003 030f 	and.w	r3, r3, #15
 800f2ae:	3b04      	subs	r3, #4
 800f2b0:	0112      	lsls	r2, r2, #4
 800f2b2:	b2d2      	uxtb	r2, r2
 800f2b4:	440b      	add	r3, r1
 800f2b6:	761a      	strb	r2, [r3, #24]
}
 800f2b8:	bf00      	nop
 800f2ba:	370c      	adds	r7, #12
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c2:	4770      	bx	lr
 800f2c4:	e000e100 	.word	0xe000e100
 800f2c8:	e000ed00 	.word	0xe000ed00

0800f2cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f2d0:	4b05      	ldr	r3, [pc, #20]	; (800f2e8 <SysTick_Handler+0x1c>)
 800f2d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f2d4:	f001 ff3c 	bl	8011150 <xTaskGetSchedulerState>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	2b01      	cmp	r3, #1
 800f2dc:	d001      	beq.n	800f2e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f2de:	f002 fd23 	bl	8011d28 <xPortSysTickHandler>
  }
}
 800f2e2:	bf00      	nop
 800f2e4:	bd80      	pop	{r7, pc}
 800f2e6:	bf00      	nop
 800f2e8:	e000e010 	.word	0xe000e010

0800f2ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f2f0:	2100      	movs	r1, #0
 800f2f2:	f06f 0004 	mvn.w	r0, #4
 800f2f6:	f7ff ffbf 	bl	800f278 <__NVIC_SetPriority>
#endif
}
 800f2fa:	bf00      	nop
 800f2fc:	bd80      	pop	{r7, pc}
	...

0800f300 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f300:	b480      	push	{r7}
 800f302:	b083      	sub	sp, #12
 800f304:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f306:	f3ef 8305 	mrs	r3, IPSR
 800f30a:	603b      	str	r3, [r7, #0]
  return(result);
 800f30c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d003      	beq.n	800f31a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f312:	f06f 0305 	mvn.w	r3, #5
 800f316:	607b      	str	r3, [r7, #4]
 800f318:	e00c      	b.n	800f334 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f31a:	4b0a      	ldr	r3, [pc, #40]	; (800f344 <osKernelInitialize+0x44>)
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d105      	bne.n	800f32e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f322:	4b08      	ldr	r3, [pc, #32]	; (800f344 <osKernelInitialize+0x44>)
 800f324:	2201      	movs	r2, #1
 800f326:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f328:	2300      	movs	r3, #0
 800f32a:	607b      	str	r3, [r7, #4]
 800f32c:	e002      	b.n	800f334 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f32e:	f04f 33ff 	mov.w	r3, #4294967295
 800f332:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f334:	687b      	ldr	r3, [r7, #4]
}
 800f336:	4618      	mov	r0, r3
 800f338:	370c      	adds	r7, #12
 800f33a:	46bd      	mov	sp, r7
 800f33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f340:	4770      	bx	lr
 800f342:	bf00      	nop
 800f344:	20000634 	.word	0x20000634

0800f348 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f348:	b580      	push	{r7, lr}
 800f34a:	b082      	sub	sp, #8
 800f34c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f34e:	f3ef 8305 	mrs	r3, IPSR
 800f352:	603b      	str	r3, [r7, #0]
  return(result);
 800f354:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f356:	2b00      	cmp	r3, #0
 800f358:	d003      	beq.n	800f362 <osKernelStart+0x1a>
    stat = osErrorISR;
 800f35a:	f06f 0305 	mvn.w	r3, #5
 800f35e:	607b      	str	r3, [r7, #4]
 800f360:	e010      	b.n	800f384 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f362:	4b0b      	ldr	r3, [pc, #44]	; (800f390 <osKernelStart+0x48>)
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	2b01      	cmp	r3, #1
 800f368:	d109      	bne.n	800f37e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f36a:	f7ff ffbf 	bl	800f2ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f36e:	4b08      	ldr	r3, [pc, #32]	; (800f390 <osKernelStart+0x48>)
 800f370:	2202      	movs	r2, #2
 800f372:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f374:	f001 fa80 	bl	8010878 <vTaskStartScheduler>
      stat = osOK;
 800f378:	2300      	movs	r3, #0
 800f37a:	607b      	str	r3, [r7, #4]
 800f37c:	e002      	b.n	800f384 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f37e:	f04f 33ff 	mov.w	r3, #4294967295
 800f382:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f384:	687b      	ldr	r3, [r7, #4]
}
 800f386:	4618      	mov	r0, r3
 800f388:	3708      	adds	r7, #8
 800f38a:	46bd      	mov	sp, r7
 800f38c:	bd80      	pop	{r7, pc}
 800f38e:	bf00      	nop
 800f390:	20000634 	.word	0x20000634

0800f394 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f394:	b580      	push	{r7, lr}
 800f396:	b08e      	sub	sp, #56	; 0x38
 800f398:	af04      	add	r7, sp, #16
 800f39a:	60f8      	str	r0, [r7, #12]
 800f39c:	60b9      	str	r1, [r7, #8]
 800f39e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f3a4:	f3ef 8305 	mrs	r3, IPSR
 800f3a8:	617b      	str	r3, [r7, #20]
  return(result);
 800f3aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d17e      	bne.n	800f4ae <osThreadNew+0x11a>
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d07b      	beq.n	800f4ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800f3b6:	2380      	movs	r3, #128	; 0x80
 800f3b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f3ba:	2318      	movs	r3, #24
 800f3bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800f3c2:	f04f 33ff 	mov.w	r3, #4294967295
 800f3c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d045      	beq.n	800f45a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d002      	beq.n	800f3dc <osThreadNew+0x48>
        name = attr->name;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	699b      	ldr	r3, [r3, #24]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d002      	beq.n	800f3ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	699b      	ldr	r3, [r3, #24]
 800f3e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f3ea:	69fb      	ldr	r3, [r7, #28]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d008      	beq.n	800f402 <osThreadNew+0x6e>
 800f3f0:	69fb      	ldr	r3, [r7, #28]
 800f3f2:	2b38      	cmp	r3, #56	; 0x38
 800f3f4:	d805      	bhi.n	800f402 <osThreadNew+0x6e>
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	685b      	ldr	r3, [r3, #4]
 800f3fa:	f003 0301 	and.w	r3, r3, #1
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d001      	beq.n	800f406 <osThreadNew+0x72>
        return (NULL);
 800f402:	2300      	movs	r3, #0
 800f404:	e054      	b.n	800f4b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	695b      	ldr	r3, [r3, #20]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d003      	beq.n	800f416 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	695b      	ldr	r3, [r3, #20]
 800f412:	089b      	lsrs	r3, r3, #2
 800f414:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	689b      	ldr	r3, [r3, #8]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d00e      	beq.n	800f43c <osThreadNew+0xa8>
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	68db      	ldr	r3, [r3, #12]
 800f422:	2bbb      	cmp	r3, #187	; 0xbb
 800f424:	d90a      	bls.n	800f43c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d006      	beq.n	800f43c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	695b      	ldr	r3, [r3, #20]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d002      	beq.n	800f43c <osThreadNew+0xa8>
        mem = 1;
 800f436:	2301      	movs	r3, #1
 800f438:	61bb      	str	r3, [r7, #24]
 800f43a:	e010      	b.n	800f45e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	689b      	ldr	r3, [r3, #8]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d10c      	bne.n	800f45e <osThreadNew+0xca>
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	68db      	ldr	r3, [r3, #12]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d108      	bne.n	800f45e <osThreadNew+0xca>
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	691b      	ldr	r3, [r3, #16]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d104      	bne.n	800f45e <osThreadNew+0xca>
          mem = 0;
 800f454:	2300      	movs	r3, #0
 800f456:	61bb      	str	r3, [r7, #24]
 800f458:	e001      	b.n	800f45e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800f45a:	2300      	movs	r3, #0
 800f45c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f45e:	69bb      	ldr	r3, [r7, #24]
 800f460:	2b01      	cmp	r3, #1
 800f462:	d110      	bne.n	800f486 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f468:	687a      	ldr	r2, [r7, #4]
 800f46a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f46c:	9202      	str	r2, [sp, #8]
 800f46e:	9301      	str	r3, [sp, #4]
 800f470:	69fb      	ldr	r3, [r7, #28]
 800f472:	9300      	str	r3, [sp, #0]
 800f474:	68bb      	ldr	r3, [r7, #8]
 800f476:	6a3a      	ldr	r2, [r7, #32]
 800f478:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f47a:	68f8      	ldr	r0, [r7, #12]
 800f47c:	f000 fea8 	bl	80101d0 <xTaskCreateStatic>
 800f480:	4603      	mov	r3, r0
 800f482:	613b      	str	r3, [r7, #16]
 800f484:	e013      	b.n	800f4ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800f486:	69bb      	ldr	r3, [r7, #24]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d110      	bne.n	800f4ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f48c:	6a3b      	ldr	r3, [r7, #32]
 800f48e:	b29a      	uxth	r2, r3
 800f490:	f107 0310 	add.w	r3, r7, #16
 800f494:	9301      	str	r3, [sp, #4]
 800f496:	69fb      	ldr	r3, [r7, #28]
 800f498:	9300      	str	r3, [sp, #0]
 800f49a:	68bb      	ldr	r3, [r7, #8]
 800f49c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f49e:	68f8      	ldr	r0, [r7, #12]
 800f4a0:	f000 fef3 	bl	801028a <xTaskCreate>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	2b01      	cmp	r3, #1
 800f4a8:	d001      	beq.n	800f4ae <osThreadNew+0x11a>
            hTask = NULL;
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f4ae:	693b      	ldr	r3, [r7, #16]
}
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	3728      	adds	r7, #40	; 0x28
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	bd80      	pop	{r7, pc}

0800f4b8 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b082      	sub	sp, #8
 800f4bc:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 800f4be:	f001 fe37 	bl	8011130 <xTaskGetCurrentTaskHandle>
 800f4c2:	6078      	str	r0, [r7, #4]

  return (id);
 800f4c4:	687b      	ldr	r3, [r7, #4]
}
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	3708      	adds	r7, #8
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	bd80      	pop	{r7, pc}
	...

0800f4d0 <osThreadGetState>:

osThreadState_t osThreadGetState (osThreadId_t thread_id) {
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b086      	sub	sp, #24
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f4dc:	f3ef 8305 	mrs	r3, IPSR
 800f4e0:	60fb      	str	r3, [r7, #12]
  return(result);
 800f4e2:	68fb      	ldr	r3, [r7, #12]
  osThreadState_t state;

  if (IS_IRQ() || (hTask == NULL)) {
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d102      	bne.n	800f4ee <osThreadGetState+0x1e>
 800f4e8:	693b      	ldr	r3, [r7, #16]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d103      	bne.n	800f4f6 <osThreadGetState+0x26>
    state = osThreadError;
 800f4ee:	f04f 33ff 	mov.w	r3, #4294967295
 800f4f2:	617b      	str	r3, [r7, #20]
 800f4f4:	e022      	b.n	800f53c <osThreadGetState+0x6c>
  }
  else {
    switch (eTaskGetState (hTask)) {
 800f4f6:	6938      	ldr	r0, [r7, #16]
 800f4f8:	f001 f8c8 	bl	801068c <eTaskGetState>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	2b04      	cmp	r3, #4
 800f500:	d818      	bhi.n	800f534 <osThreadGetState+0x64>
 800f502:	a201      	add	r2, pc, #4	; (adr r2, 800f508 <osThreadGetState+0x38>)
 800f504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f508:	0800f51d 	.word	0x0800f51d
 800f50c:	0800f523 	.word	0x0800f523
 800f510:	0800f529 	.word	0x0800f529
 800f514:	0800f529 	.word	0x0800f529
 800f518:	0800f52f 	.word	0x0800f52f
      case eRunning:   state = osThreadRunning;    break;
 800f51c:	2302      	movs	r3, #2
 800f51e:	617b      	str	r3, [r7, #20]
 800f520:	e00c      	b.n	800f53c <osThreadGetState+0x6c>
      case eReady:     state = osThreadReady;      break;
 800f522:	2301      	movs	r3, #1
 800f524:	617b      	str	r3, [r7, #20]
 800f526:	e009      	b.n	800f53c <osThreadGetState+0x6c>
      case eBlocked:
      case eSuspended: state = osThreadBlocked;    break;
 800f528:	2303      	movs	r3, #3
 800f52a:	617b      	str	r3, [r7, #20]
 800f52c:	e006      	b.n	800f53c <osThreadGetState+0x6c>
      case eDeleted:   state = osThreadTerminated; break;
 800f52e:	2304      	movs	r3, #4
 800f530:	617b      	str	r3, [r7, #20]
 800f532:	e003      	b.n	800f53c <osThreadGetState+0x6c>
      case eInvalid:
      default:         state = osThreadError;      break;
 800f534:	f04f 33ff 	mov.w	r3, #4294967295
 800f538:	617b      	str	r3, [r7, #20]
 800f53a:	bf00      	nop
    }
  }

  return (state);
 800f53c:	697b      	ldr	r3, [r7, #20]
}
 800f53e:	4618      	mov	r0, r3
 800f540:	3718      	adds	r7, #24
 800f542:	46bd      	mov	sp, r7
 800f544:	bd80      	pop	{r7, pc}
 800f546:	bf00      	nop

0800f548 <osThreadResume>:
  }

  return (stat);
}

osStatus_t osThreadResume (osThreadId_t thread_id) {
 800f548:	b580      	push	{r7, lr}
 800f54a:	b086      	sub	sp, #24
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f554:	f3ef 8305 	mrs	r3, IPSR
 800f558:	60fb      	str	r3, [r7, #12]
  return(result);
 800f55a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d003      	beq.n	800f568 <osThreadResume+0x20>
    stat = osErrorISR;
 800f560:	f06f 0305 	mvn.w	r3, #5
 800f564:	617b      	str	r3, [r7, #20]
 800f566:	e00b      	b.n	800f580 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 800f568:	693b      	ldr	r3, [r7, #16]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d103      	bne.n	800f576 <osThreadResume+0x2e>
    stat = osErrorParameter;
 800f56e:	f06f 0303 	mvn.w	r3, #3
 800f572:	617b      	str	r3, [r7, #20]
 800f574:	e004      	b.n	800f580 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 800f576:	2300      	movs	r3, #0
 800f578:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 800f57a:	6938      	ldr	r0, [r7, #16]
 800f57c:	f001 f91e 	bl	80107bc <vTaskResume>
  }

  return (stat);
 800f580:	697b      	ldr	r3, [r7, #20]
}
 800f582:	4618      	mov	r0, r3
 800f584:	3718      	adds	r7, #24
 800f586:	46bd      	mov	sp, r7
 800f588:	bd80      	pop	{r7, pc}

0800f58a <osThreadExit>:
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 800f58a:	b580      	push	{r7, lr}
 800f58c:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800f58e:	2000      	movs	r0, #0
 800f590:	f000 ffd6 	bl	8010540 <vTaskDelete>
#endif
  for (;;);
 800f594:	e7fe      	b.n	800f594 <osThreadExit+0xa>

0800f596 <osThreadTerminate>:
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 800f596:	b580      	push	{r7, lr}
 800f598:	b086      	sub	sp, #24
 800f59a:	af00      	add	r7, sp, #0
 800f59c:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f5a2:	f3ef 8305 	mrs	r3, IPSR
 800f5a6:	60bb      	str	r3, [r7, #8]
  return(result);
 800f5a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d003      	beq.n	800f5b6 <osThreadTerminate+0x20>
    stat = osErrorISR;
 800f5ae:	f06f 0305 	mvn.w	r3, #5
 800f5b2:	617b      	str	r3, [r7, #20]
 800f5b4:	e017      	b.n	800f5e6 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 800f5b6:	693b      	ldr	r3, [r7, #16]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d103      	bne.n	800f5c4 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 800f5bc:	f06f 0303 	mvn.w	r3, #3
 800f5c0:	617b      	str	r3, [r7, #20]
 800f5c2:	e010      	b.n	800f5e6 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 800f5c4:	6938      	ldr	r0, [r7, #16]
 800f5c6:	f001 f861 	bl	801068c <eTaskGetState>
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 800f5ce:	7bfb      	ldrb	r3, [r7, #15]
 800f5d0:	2b04      	cmp	r3, #4
 800f5d2:	d005      	beq.n	800f5e0 <osThreadTerminate+0x4a>
      stat = osOK;
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 800f5d8:	6938      	ldr	r0, [r7, #16]
 800f5da:	f000 ffb1 	bl	8010540 <vTaskDelete>
 800f5de:	e002      	b.n	800f5e6 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 800f5e0:	f06f 0302 	mvn.w	r3, #2
 800f5e4:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 800f5e6:	697b      	ldr	r3, [r7, #20]
}
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	3718      	adds	r7, #24
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	bd80      	pop	{r7, pc}

0800f5f0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b084      	sub	sp, #16
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f5f8:	f3ef 8305 	mrs	r3, IPSR
 800f5fc:	60bb      	str	r3, [r7, #8]
  return(result);
 800f5fe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f600:	2b00      	cmp	r3, #0
 800f602:	d003      	beq.n	800f60c <osDelay+0x1c>
    stat = osErrorISR;
 800f604:	f06f 0305 	mvn.w	r3, #5
 800f608:	60fb      	str	r3, [r7, #12]
 800f60a:	e007      	b.n	800f61c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800f60c:	2300      	movs	r3, #0
 800f60e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d002      	beq.n	800f61c <osDelay+0x2c>
      vTaskDelay(ticks);
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	f001 f804 	bl	8010624 <vTaskDelay>
    }
  }

  return (stat);
 800f61c:	68fb      	ldr	r3, [r7, #12]
}
 800f61e:	4618      	mov	r0, r3
 800f620:	3710      	adds	r7, #16
 800f622:	46bd      	mov	sp, r7
 800f624:	bd80      	pop	{r7, pc}
	...

0800f628 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f628:	b480      	push	{r7}
 800f62a:	b085      	sub	sp, #20
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	60f8      	str	r0, [r7, #12]
 800f630:	60b9      	str	r1, [r7, #8]
 800f632:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	4a07      	ldr	r2, [pc, #28]	; (800f654 <vApplicationGetIdleTaskMemory+0x2c>)
 800f638:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f63a:	68bb      	ldr	r3, [r7, #8]
 800f63c:	4a06      	ldr	r2, [pc, #24]	; (800f658 <vApplicationGetIdleTaskMemory+0x30>)
 800f63e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2280      	movs	r2, #128	; 0x80
 800f644:	601a      	str	r2, [r3, #0]
}
 800f646:	bf00      	nop
 800f648:	3714      	adds	r7, #20
 800f64a:	46bd      	mov	sp, r7
 800f64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f650:	4770      	bx	lr
 800f652:	bf00      	nop
 800f654:	20000638 	.word	0x20000638
 800f658:	200006f4 	.word	0x200006f4

0800f65c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f65c:	b480      	push	{r7}
 800f65e:	b085      	sub	sp, #20
 800f660:	af00      	add	r7, sp, #0
 800f662:	60f8      	str	r0, [r7, #12]
 800f664:	60b9      	str	r1, [r7, #8]
 800f666:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	4a07      	ldr	r2, [pc, #28]	; (800f688 <vApplicationGetTimerTaskMemory+0x2c>)
 800f66c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	4a06      	ldr	r2, [pc, #24]	; (800f68c <vApplicationGetTimerTaskMemory+0x30>)
 800f672:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f67a:	601a      	str	r2, [r3, #0]
}
 800f67c:	bf00      	nop
 800f67e:	3714      	adds	r7, #20
 800f680:	46bd      	mov	sp, r7
 800f682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f686:	4770      	bx	lr
 800f688:	200008f4 	.word	0x200008f4
 800f68c:	200009b0 	.word	0x200009b0

0800f690 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f690:	b480      	push	{r7}
 800f692:	b083      	sub	sp, #12
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f103 0208 	add.w	r2, r3, #8
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f04f 32ff 	mov.w	r2, #4294967295
 800f6a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	f103 0208 	add.w	r2, r3, #8
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	f103 0208 	add.w	r2, r3, #8
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f6c4:	bf00      	nop
 800f6c6:	370c      	adds	r7, #12
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ce:	4770      	bx	lr

0800f6d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f6d0:	b480      	push	{r7}
 800f6d2:	b083      	sub	sp, #12
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	2200      	movs	r2, #0
 800f6dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f6de:	bf00      	nop
 800f6e0:	370c      	adds	r7, #12
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e8:	4770      	bx	lr

0800f6ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f6ea:	b480      	push	{r7}
 800f6ec:	b085      	sub	sp, #20
 800f6ee:	af00      	add	r7, sp, #0
 800f6f0:	6078      	str	r0, [r7, #4]
 800f6f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	685b      	ldr	r3, [r3, #4]
 800f6f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	68fa      	ldr	r2, [r7, #12]
 800f6fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	689a      	ldr	r2, [r3, #8]
 800f704:	683b      	ldr	r3, [r7, #0]
 800f706:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	689b      	ldr	r3, [r3, #8]
 800f70c:	683a      	ldr	r2, [r7, #0]
 800f70e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	683a      	ldr	r2, [r7, #0]
 800f714:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f716:	683b      	ldr	r3, [r7, #0]
 800f718:	687a      	ldr	r2, [r7, #4]
 800f71a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	1c5a      	adds	r2, r3, #1
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	601a      	str	r2, [r3, #0]
}
 800f726:	bf00      	nop
 800f728:	3714      	adds	r7, #20
 800f72a:	46bd      	mov	sp, r7
 800f72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f730:	4770      	bx	lr

0800f732 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f732:	b480      	push	{r7}
 800f734:	b085      	sub	sp, #20
 800f736:	af00      	add	r7, sp, #0
 800f738:	6078      	str	r0, [r7, #4]
 800f73a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f73c:	683b      	ldr	r3, [r7, #0]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f742:	68bb      	ldr	r3, [r7, #8]
 800f744:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f748:	d103      	bne.n	800f752 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	691b      	ldr	r3, [r3, #16]
 800f74e:	60fb      	str	r3, [r7, #12]
 800f750:	e00c      	b.n	800f76c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	3308      	adds	r3, #8
 800f756:	60fb      	str	r3, [r7, #12]
 800f758:	e002      	b.n	800f760 <vListInsert+0x2e>
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	685b      	ldr	r3, [r3, #4]
 800f75e:	60fb      	str	r3, [r7, #12]
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	685b      	ldr	r3, [r3, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	68ba      	ldr	r2, [r7, #8]
 800f768:	429a      	cmp	r2, r3
 800f76a:	d2f6      	bcs.n	800f75a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	685a      	ldr	r2, [r3, #4]
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	685b      	ldr	r3, [r3, #4]
 800f778:	683a      	ldr	r2, [r7, #0]
 800f77a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	68fa      	ldr	r2, [r7, #12]
 800f780:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	683a      	ldr	r2, [r7, #0]
 800f786:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	687a      	ldr	r2, [r7, #4]
 800f78c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	1c5a      	adds	r2, r3, #1
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	601a      	str	r2, [r3, #0]
}
 800f798:	bf00      	nop
 800f79a:	3714      	adds	r7, #20
 800f79c:	46bd      	mov	sp, r7
 800f79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a2:	4770      	bx	lr

0800f7a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	b085      	sub	sp, #20
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	691b      	ldr	r3, [r3, #16]
 800f7b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	685b      	ldr	r3, [r3, #4]
 800f7b6:	687a      	ldr	r2, [r7, #4]
 800f7b8:	6892      	ldr	r2, [r2, #8]
 800f7ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	689b      	ldr	r3, [r3, #8]
 800f7c0:	687a      	ldr	r2, [r7, #4]
 800f7c2:	6852      	ldr	r2, [r2, #4]
 800f7c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	685b      	ldr	r3, [r3, #4]
 800f7ca:	687a      	ldr	r2, [r7, #4]
 800f7cc:	429a      	cmp	r2, r3
 800f7ce:	d103      	bne.n	800f7d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	689a      	ldr	r2, [r3, #8]
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2200      	movs	r2, #0
 800f7dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	1e5a      	subs	r2, r3, #1
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	681b      	ldr	r3, [r3, #0]
}
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	3714      	adds	r7, #20
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f6:	4770      	bx	lr

0800f7f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b084      	sub	sp, #16
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
 800f800:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d10a      	bne.n	800f822 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f810:	f383 8811 	msr	BASEPRI, r3
 800f814:	f3bf 8f6f 	isb	sy
 800f818:	f3bf 8f4f 	dsb	sy
 800f81c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f81e:	bf00      	nop
 800f820:	e7fe      	b.n	800f820 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f822:	f002 f9ef 	bl	8011c04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	681a      	ldr	r2, [r3, #0]
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f82e:	68f9      	ldr	r1, [r7, #12]
 800f830:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f832:	fb01 f303 	mul.w	r3, r1, r3
 800f836:	441a      	add	r2, r3
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	2200      	movs	r2, #0
 800f840:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	681a      	ldr	r2, [r3, #0]
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	681a      	ldr	r2, [r3, #0]
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f852:	3b01      	subs	r3, #1
 800f854:	68f9      	ldr	r1, [r7, #12]
 800f856:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f858:	fb01 f303 	mul.w	r3, r1, r3
 800f85c:	441a      	add	r2, r3
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	22ff      	movs	r2, #255	; 0xff
 800f866:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	22ff      	movs	r2, #255	; 0xff
 800f86e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d114      	bne.n	800f8a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	691b      	ldr	r3, [r3, #16]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d01a      	beq.n	800f8b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	3310      	adds	r3, #16
 800f884:	4618      	mov	r0, r3
 800f886:	f001 fa91 	bl	8010dac <xTaskRemoveFromEventList>
 800f88a:	4603      	mov	r3, r0
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d012      	beq.n	800f8b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f890:	4b0c      	ldr	r3, [pc, #48]	; (800f8c4 <xQueueGenericReset+0xcc>)
 800f892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f896:	601a      	str	r2, [r3, #0]
 800f898:	f3bf 8f4f 	dsb	sy
 800f89c:	f3bf 8f6f 	isb	sy
 800f8a0:	e009      	b.n	800f8b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	3310      	adds	r3, #16
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	f7ff fef2 	bl	800f690 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	3324      	adds	r3, #36	; 0x24
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	f7ff feed 	bl	800f690 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f8b6:	f002 f9d5 	bl	8011c64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f8ba:	2301      	movs	r3, #1
}
 800f8bc:	4618      	mov	r0, r3
 800f8be:	3710      	adds	r7, #16
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd80      	pop	{r7, pc}
 800f8c4:	e000ed04 	.word	0xe000ed04

0800f8c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b08e      	sub	sp, #56	; 0x38
 800f8cc:	af02      	add	r7, sp, #8
 800f8ce:	60f8      	str	r0, [r7, #12]
 800f8d0:	60b9      	str	r1, [r7, #8]
 800f8d2:	607a      	str	r2, [r7, #4]
 800f8d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d10a      	bne.n	800f8f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8e0:	f383 8811 	msr	BASEPRI, r3
 800f8e4:	f3bf 8f6f 	isb	sy
 800f8e8:	f3bf 8f4f 	dsb	sy
 800f8ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f8ee:	bf00      	nop
 800f8f0:	e7fe      	b.n	800f8f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d10a      	bne.n	800f90e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8fc:	f383 8811 	msr	BASEPRI, r3
 800f900:	f3bf 8f6f 	isb	sy
 800f904:	f3bf 8f4f 	dsb	sy
 800f908:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f90a:	bf00      	nop
 800f90c:	e7fe      	b.n	800f90c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d002      	beq.n	800f91a <xQueueGenericCreateStatic+0x52>
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d001      	beq.n	800f91e <xQueueGenericCreateStatic+0x56>
 800f91a:	2301      	movs	r3, #1
 800f91c:	e000      	b.n	800f920 <xQueueGenericCreateStatic+0x58>
 800f91e:	2300      	movs	r3, #0
 800f920:	2b00      	cmp	r3, #0
 800f922:	d10a      	bne.n	800f93a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f924:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f928:	f383 8811 	msr	BASEPRI, r3
 800f92c:	f3bf 8f6f 	isb	sy
 800f930:	f3bf 8f4f 	dsb	sy
 800f934:	623b      	str	r3, [r7, #32]
}
 800f936:	bf00      	nop
 800f938:	e7fe      	b.n	800f938 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d102      	bne.n	800f946 <xQueueGenericCreateStatic+0x7e>
 800f940:	68bb      	ldr	r3, [r7, #8]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d101      	bne.n	800f94a <xQueueGenericCreateStatic+0x82>
 800f946:	2301      	movs	r3, #1
 800f948:	e000      	b.n	800f94c <xQueueGenericCreateStatic+0x84>
 800f94a:	2300      	movs	r3, #0
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d10a      	bne.n	800f966 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f954:	f383 8811 	msr	BASEPRI, r3
 800f958:	f3bf 8f6f 	isb	sy
 800f95c:	f3bf 8f4f 	dsb	sy
 800f960:	61fb      	str	r3, [r7, #28]
}
 800f962:	bf00      	nop
 800f964:	e7fe      	b.n	800f964 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f966:	2350      	movs	r3, #80	; 0x50
 800f968:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	2b50      	cmp	r3, #80	; 0x50
 800f96e:	d00a      	beq.n	800f986 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800f970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f974:	f383 8811 	msr	BASEPRI, r3
 800f978:	f3bf 8f6f 	isb	sy
 800f97c:	f3bf 8f4f 	dsb	sy
 800f980:	61bb      	str	r3, [r7, #24]
}
 800f982:	bf00      	nop
 800f984:	e7fe      	b.n	800f984 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f986:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d00d      	beq.n	800f9ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f994:	2201      	movs	r2, #1
 800f996:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f99a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a0:	9300      	str	r3, [sp, #0]
 800f9a2:	4613      	mov	r3, r2
 800f9a4:	687a      	ldr	r2, [r7, #4]
 800f9a6:	68b9      	ldr	r1, [r7, #8]
 800f9a8:	68f8      	ldr	r0, [r7, #12]
 800f9aa:	f000 f805 	bl	800f9b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	3730      	adds	r7, #48	; 0x30
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	bd80      	pop	{r7, pc}

0800f9b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b084      	sub	sp, #16
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	60f8      	str	r0, [r7, #12]
 800f9c0:	60b9      	str	r1, [r7, #8]
 800f9c2:	607a      	str	r2, [r7, #4]
 800f9c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f9c6:	68bb      	ldr	r3, [r7, #8]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d103      	bne.n	800f9d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f9cc:	69bb      	ldr	r3, [r7, #24]
 800f9ce:	69ba      	ldr	r2, [r7, #24]
 800f9d0:	601a      	str	r2, [r3, #0]
 800f9d2:	e002      	b.n	800f9da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f9d4:	69bb      	ldr	r3, [r7, #24]
 800f9d6:	687a      	ldr	r2, [r7, #4]
 800f9d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f9da:	69bb      	ldr	r3, [r7, #24]
 800f9dc:	68fa      	ldr	r2, [r7, #12]
 800f9de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f9e0:	69bb      	ldr	r3, [r7, #24]
 800f9e2:	68ba      	ldr	r2, [r7, #8]
 800f9e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f9e6:	2101      	movs	r1, #1
 800f9e8:	69b8      	ldr	r0, [r7, #24]
 800f9ea:	f7ff ff05 	bl	800f7f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f9ee:	69bb      	ldr	r3, [r7, #24]
 800f9f0:	78fa      	ldrb	r2, [r7, #3]
 800f9f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f9f6:	bf00      	nop
 800f9f8:	3710      	adds	r7, #16
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bd80      	pop	{r7, pc}
	...

0800fa00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b08e      	sub	sp, #56	; 0x38
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	60f8      	str	r0, [r7, #12]
 800fa08:	60b9      	str	r1, [r7, #8]
 800fa0a:	607a      	str	r2, [r7, #4]
 800fa0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fa0e:	2300      	movs	r3, #0
 800fa10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fa16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d10a      	bne.n	800fa32 <xQueueGenericSend+0x32>
	__asm volatile
 800fa1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa20:	f383 8811 	msr	BASEPRI, r3
 800fa24:	f3bf 8f6f 	isb	sy
 800fa28:	f3bf 8f4f 	dsb	sy
 800fa2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fa2e:	bf00      	nop
 800fa30:	e7fe      	b.n	800fa30 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fa32:	68bb      	ldr	r3, [r7, #8]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d103      	bne.n	800fa40 <xQueueGenericSend+0x40>
 800fa38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d101      	bne.n	800fa44 <xQueueGenericSend+0x44>
 800fa40:	2301      	movs	r3, #1
 800fa42:	e000      	b.n	800fa46 <xQueueGenericSend+0x46>
 800fa44:	2300      	movs	r3, #0
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d10a      	bne.n	800fa60 <xQueueGenericSend+0x60>
	__asm volatile
 800fa4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa4e:	f383 8811 	msr	BASEPRI, r3
 800fa52:	f3bf 8f6f 	isb	sy
 800fa56:	f3bf 8f4f 	dsb	sy
 800fa5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fa5c:	bf00      	nop
 800fa5e:	e7fe      	b.n	800fa5e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	2b02      	cmp	r3, #2
 800fa64:	d103      	bne.n	800fa6e <xQueueGenericSend+0x6e>
 800fa66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa6a:	2b01      	cmp	r3, #1
 800fa6c:	d101      	bne.n	800fa72 <xQueueGenericSend+0x72>
 800fa6e:	2301      	movs	r3, #1
 800fa70:	e000      	b.n	800fa74 <xQueueGenericSend+0x74>
 800fa72:	2300      	movs	r3, #0
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d10a      	bne.n	800fa8e <xQueueGenericSend+0x8e>
	__asm volatile
 800fa78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa7c:	f383 8811 	msr	BASEPRI, r3
 800fa80:	f3bf 8f6f 	isb	sy
 800fa84:	f3bf 8f4f 	dsb	sy
 800fa88:	623b      	str	r3, [r7, #32]
}
 800fa8a:	bf00      	nop
 800fa8c:	e7fe      	b.n	800fa8c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fa8e:	f001 fb5f 	bl	8011150 <xTaskGetSchedulerState>
 800fa92:	4603      	mov	r3, r0
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d102      	bne.n	800fa9e <xQueueGenericSend+0x9e>
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d101      	bne.n	800faa2 <xQueueGenericSend+0xa2>
 800fa9e:	2301      	movs	r3, #1
 800faa0:	e000      	b.n	800faa4 <xQueueGenericSend+0xa4>
 800faa2:	2300      	movs	r3, #0
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d10a      	bne.n	800fabe <xQueueGenericSend+0xbe>
	__asm volatile
 800faa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faac:	f383 8811 	msr	BASEPRI, r3
 800fab0:	f3bf 8f6f 	isb	sy
 800fab4:	f3bf 8f4f 	dsb	sy
 800fab8:	61fb      	str	r3, [r7, #28]
}
 800faba:	bf00      	nop
 800fabc:	e7fe      	b.n	800fabc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fabe:	f002 f8a1 	bl	8011c04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800faca:	429a      	cmp	r2, r3
 800facc:	d302      	bcc.n	800fad4 <xQueueGenericSend+0xd4>
 800face:	683b      	ldr	r3, [r7, #0]
 800fad0:	2b02      	cmp	r3, #2
 800fad2:	d129      	bne.n	800fb28 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fad4:	683a      	ldr	r2, [r7, #0]
 800fad6:	68b9      	ldr	r1, [r7, #8]
 800fad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fada:	f000 fa0b 	bl	800fef4 <prvCopyDataToQueue>
 800fade:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d010      	beq.n	800fb0a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faea:	3324      	adds	r3, #36	; 0x24
 800faec:	4618      	mov	r0, r3
 800faee:	f001 f95d 	bl	8010dac <xTaskRemoveFromEventList>
 800faf2:	4603      	mov	r3, r0
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d013      	beq.n	800fb20 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800faf8:	4b3f      	ldr	r3, [pc, #252]	; (800fbf8 <xQueueGenericSend+0x1f8>)
 800fafa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fafe:	601a      	str	r2, [r3, #0]
 800fb00:	f3bf 8f4f 	dsb	sy
 800fb04:	f3bf 8f6f 	isb	sy
 800fb08:	e00a      	b.n	800fb20 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fb0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d007      	beq.n	800fb20 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fb10:	4b39      	ldr	r3, [pc, #228]	; (800fbf8 <xQueueGenericSend+0x1f8>)
 800fb12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb16:	601a      	str	r2, [r3, #0]
 800fb18:	f3bf 8f4f 	dsb	sy
 800fb1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fb20:	f002 f8a0 	bl	8011c64 <vPortExitCritical>
				return pdPASS;
 800fb24:	2301      	movs	r3, #1
 800fb26:	e063      	b.n	800fbf0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d103      	bne.n	800fb36 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fb2e:	f002 f899 	bl	8011c64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fb32:	2300      	movs	r3, #0
 800fb34:	e05c      	b.n	800fbf0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fb36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d106      	bne.n	800fb4a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fb3c:	f107 0314 	add.w	r3, r7, #20
 800fb40:	4618      	mov	r0, r3
 800fb42:	f001 f997 	bl	8010e74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fb46:	2301      	movs	r3, #1
 800fb48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fb4a:	f002 f88b 	bl	8011c64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fb4e:	f000 ff03 	bl	8010958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fb52:	f002 f857 	bl	8011c04 <vPortEnterCritical>
 800fb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fb5c:	b25b      	sxtb	r3, r3
 800fb5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb62:	d103      	bne.n	800fb6c <xQueueGenericSend+0x16c>
 800fb64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb66:	2200      	movs	r2, #0
 800fb68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fb6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fb72:	b25b      	sxtb	r3, r3
 800fb74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb78:	d103      	bne.n	800fb82 <xQueueGenericSend+0x182>
 800fb7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fb82:	f002 f86f 	bl	8011c64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fb86:	1d3a      	adds	r2, r7, #4
 800fb88:	f107 0314 	add.w	r3, r7, #20
 800fb8c:	4611      	mov	r1, r2
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f001 f986 	bl	8010ea0 <xTaskCheckForTimeOut>
 800fb94:	4603      	mov	r3, r0
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d124      	bne.n	800fbe4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fb9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb9c:	f000 faa2 	bl	80100e4 <prvIsQueueFull>
 800fba0:	4603      	mov	r3, r0
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d018      	beq.n	800fbd8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fba8:	3310      	adds	r3, #16
 800fbaa:	687a      	ldr	r2, [r7, #4]
 800fbac:	4611      	mov	r1, r2
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f001 f8ac 	bl	8010d0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fbb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fbb6:	f000 fa2d 	bl	8010014 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fbba:	f000 fedb 	bl	8010974 <xTaskResumeAll>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	f47f af7c 	bne.w	800fabe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800fbc6:	4b0c      	ldr	r3, [pc, #48]	; (800fbf8 <xQueueGenericSend+0x1f8>)
 800fbc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbcc:	601a      	str	r2, [r3, #0]
 800fbce:	f3bf 8f4f 	dsb	sy
 800fbd2:	f3bf 8f6f 	isb	sy
 800fbd6:	e772      	b.n	800fabe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fbd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fbda:	f000 fa1b 	bl	8010014 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fbde:	f000 fec9 	bl	8010974 <xTaskResumeAll>
 800fbe2:	e76c      	b.n	800fabe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fbe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fbe6:	f000 fa15 	bl	8010014 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fbea:	f000 fec3 	bl	8010974 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fbee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	3738      	adds	r7, #56	; 0x38
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	bd80      	pop	{r7, pc}
 800fbf8:	e000ed04 	.word	0xe000ed04

0800fbfc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b090      	sub	sp, #64	; 0x40
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	60f8      	str	r0, [r7, #12]
 800fc04:	60b9      	str	r1, [r7, #8]
 800fc06:	607a      	str	r2, [r7, #4]
 800fc08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800fc0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d10a      	bne.n	800fc2a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800fc14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc18:	f383 8811 	msr	BASEPRI, r3
 800fc1c:	f3bf 8f6f 	isb	sy
 800fc20:	f3bf 8f4f 	dsb	sy
 800fc24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fc26:	bf00      	nop
 800fc28:	e7fe      	b.n	800fc28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fc2a:	68bb      	ldr	r3, [r7, #8]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d103      	bne.n	800fc38 <xQueueGenericSendFromISR+0x3c>
 800fc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d101      	bne.n	800fc3c <xQueueGenericSendFromISR+0x40>
 800fc38:	2301      	movs	r3, #1
 800fc3a:	e000      	b.n	800fc3e <xQueueGenericSendFromISR+0x42>
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d10a      	bne.n	800fc58 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800fc42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc46:	f383 8811 	msr	BASEPRI, r3
 800fc4a:	f3bf 8f6f 	isb	sy
 800fc4e:	f3bf 8f4f 	dsb	sy
 800fc52:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fc54:	bf00      	nop
 800fc56:	e7fe      	b.n	800fc56 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fc58:	683b      	ldr	r3, [r7, #0]
 800fc5a:	2b02      	cmp	r3, #2
 800fc5c:	d103      	bne.n	800fc66 <xQueueGenericSendFromISR+0x6a>
 800fc5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc62:	2b01      	cmp	r3, #1
 800fc64:	d101      	bne.n	800fc6a <xQueueGenericSendFromISR+0x6e>
 800fc66:	2301      	movs	r3, #1
 800fc68:	e000      	b.n	800fc6c <xQueueGenericSendFromISR+0x70>
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d10a      	bne.n	800fc86 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800fc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc74:	f383 8811 	msr	BASEPRI, r3
 800fc78:	f3bf 8f6f 	isb	sy
 800fc7c:	f3bf 8f4f 	dsb	sy
 800fc80:	623b      	str	r3, [r7, #32]
}
 800fc82:	bf00      	nop
 800fc84:	e7fe      	b.n	800fc84 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fc86:	f002 f89f 	bl	8011dc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fc8a:	f3ef 8211 	mrs	r2, BASEPRI
 800fc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc92:	f383 8811 	msr	BASEPRI, r3
 800fc96:	f3bf 8f6f 	isb	sy
 800fc9a:	f3bf 8f4f 	dsb	sy
 800fc9e:	61fa      	str	r2, [r7, #28]
 800fca0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fca2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fca4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fcaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fcae:	429a      	cmp	r2, r3
 800fcb0:	d302      	bcc.n	800fcb8 <xQueueGenericSendFromISR+0xbc>
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	2b02      	cmp	r3, #2
 800fcb6:	d12f      	bne.n	800fd18 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fcb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fcbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fcc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcc6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fcc8:	683a      	ldr	r2, [r7, #0]
 800fcca:	68b9      	ldr	r1, [r7, #8]
 800fccc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fcce:	f000 f911 	bl	800fef4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fcd2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800fcd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcda:	d112      	bne.n	800fd02 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fcdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d016      	beq.n	800fd12 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fce6:	3324      	adds	r3, #36	; 0x24
 800fce8:	4618      	mov	r0, r3
 800fcea:	f001 f85f 	bl	8010dac <xTaskRemoveFromEventList>
 800fcee:	4603      	mov	r3, r0
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d00e      	beq.n	800fd12 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d00b      	beq.n	800fd12 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	2201      	movs	r2, #1
 800fcfe:	601a      	str	r2, [r3, #0]
 800fd00:	e007      	b.n	800fd12 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fd02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fd06:	3301      	adds	r3, #1
 800fd08:	b2db      	uxtb	r3, r3
 800fd0a:	b25a      	sxtb	r2, r3
 800fd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fd12:	2301      	movs	r3, #1
 800fd14:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800fd16:	e001      	b.n	800fd1c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fd18:	2300      	movs	r3, #0
 800fd1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fd1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd1e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fd20:	697b      	ldr	r3, [r7, #20]
 800fd22:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fd26:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fd28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	3740      	adds	r7, #64	; 0x40
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}
	...

0800fd34 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b08c      	sub	sp, #48	; 0x30
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	60f8      	str	r0, [r7, #12]
 800fd3c:	60b9      	str	r1, [r7, #8]
 800fd3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fd40:	2300      	movs	r3, #0
 800fd42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fd48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d10a      	bne.n	800fd64 <xQueueReceive+0x30>
	__asm volatile
 800fd4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd52:	f383 8811 	msr	BASEPRI, r3
 800fd56:	f3bf 8f6f 	isb	sy
 800fd5a:	f3bf 8f4f 	dsb	sy
 800fd5e:	623b      	str	r3, [r7, #32]
}
 800fd60:	bf00      	nop
 800fd62:	e7fe      	b.n	800fd62 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d103      	bne.n	800fd72 <xQueueReceive+0x3e>
 800fd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d101      	bne.n	800fd76 <xQueueReceive+0x42>
 800fd72:	2301      	movs	r3, #1
 800fd74:	e000      	b.n	800fd78 <xQueueReceive+0x44>
 800fd76:	2300      	movs	r3, #0
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d10a      	bne.n	800fd92 <xQueueReceive+0x5e>
	__asm volatile
 800fd7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd80:	f383 8811 	msr	BASEPRI, r3
 800fd84:	f3bf 8f6f 	isb	sy
 800fd88:	f3bf 8f4f 	dsb	sy
 800fd8c:	61fb      	str	r3, [r7, #28]
}
 800fd8e:	bf00      	nop
 800fd90:	e7fe      	b.n	800fd90 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fd92:	f001 f9dd 	bl	8011150 <xTaskGetSchedulerState>
 800fd96:	4603      	mov	r3, r0
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d102      	bne.n	800fda2 <xQueueReceive+0x6e>
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d101      	bne.n	800fda6 <xQueueReceive+0x72>
 800fda2:	2301      	movs	r3, #1
 800fda4:	e000      	b.n	800fda8 <xQueueReceive+0x74>
 800fda6:	2300      	movs	r3, #0
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d10a      	bne.n	800fdc2 <xQueueReceive+0x8e>
	__asm volatile
 800fdac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdb0:	f383 8811 	msr	BASEPRI, r3
 800fdb4:	f3bf 8f6f 	isb	sy
 800fdb8:	f3bf 8f4f 	dsb	sy
 800fdbc:	61bb      	str	r3, [r7, #24]
}
 800fdbe:	bf00      	nop
 800fdc0:	e7fe      	b.n	800fdc0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fdc2:	f001 ff1f 	bl	8011c04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fdc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fdcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d01f      	beq.n	800fe12 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fdd2:	68b9      	ldr	r1, [r7, #8]
 800fdd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fdd6:	f000 f8f7 	bl	800ffc8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fddc:	1e5a      	subs	r2, r3, #1
 800fdde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fde0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fde2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fde4:	691b      	ldr	r3, [r3, #16]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d00f      	beq.n	800fe0a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fdea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdec:	3310      	adds	r3, #16
 800fdee:	4618      	mov	r0, r3
 800fdf0:	f000 ffdc 	bl	8010dac <xTaskRemoveFromEventList>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d007      	beq.n	800fe0a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fdfa:	4b3d      	ldr	r3, [pc, #244]	; (800fef0 <xQueueReceive+0x1bc>)
 800fdfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe00:	601a      	str	r2, [r3, #0]
 800fe02:	f3bf 8f4f 	dsb	sy
 800fe06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fe0a:	f001 ff2b 	bl	8011c64 <vPortExitCritical>
				return pdPASS;
 800fe0e:	2301      	movs	r3, #1
 800fe10:	e069      	b.n	800fee6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d103      	bne.n	800fe20 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fe18:	f001 ff24 	bl	8011c64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	e062      	b.n	800fee6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fe20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d106      	bne.n	800fe34 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fe26:	f107 0310 	add.w	r3, r7, #16
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	f001 f822 	bl	8010e74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fe30:	2301      	movs	r3, #1
 800fe32:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fe34:	f001 ff16 	bl	8011c64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fe38:	f000 fd8e 	bl	8010958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fe3c:	f001 fee2 	bl	8011c04 <vPortEnterCritical>
 800fe40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fe46:	b25b      	sxtb	r3, r3
 800fe48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe4c:	d103      	bne.n	800fe56 <xQueueReceive+0x122>
 800fe4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe50:	2200      	movs	r2, #0
 800fe52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fe56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fe5c:	b25b      	sxtb	r3, r3
 800fe5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe62:	d103      	bne.n	800fe6c <xQueueReceive+0x138>
 800fe64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe66:	2200      	movs	r2, #0
 800fe68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fe6c:	f001 fefa 	bl	8011c64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fe70:	1d3a      	adds	r2, r7, #4
 800fe72:	f107 0310 	add.w	r3, r7, #16
 800fe76:	4611      	mov	r1, r2
 800fe78:	4618      	mov	r0, r3
 800fe7a:	f001 f811 	bl	8010ea0 <xTaskCheckForTimeOut>
 800fe7e:	4603      	mov	r3, r0
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d123      	bne.n	800fecc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fe84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe86:	f000 f917 	bl	80100b8 <prvIsQueueEmpty>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d017      	beq.n	800fec0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fe90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe92:	3324      	adds	r3, #36	; 0x24
 800fe94:	687a      	ldr	r2, [r7, #4]
 800fe96:	4611      	mov	r1, r2
 800fe98:	4618      	mov	r0, r3
 800fe9a:	f000 ff37 	bl	8010d0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fe9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fea0:	f000 f8b8 	bl	8010014 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fea4:	f000 fd66 	bl	8010974 <xTaskResumeAll>
 800fea8:	4603      	mov	r3, r0
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d189      	bne.n	800fdc2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800feae:	4b10      	ldr	r3, [pc, #64]	; (800fef0 <xQueueReceive+0x1bc>)
 800feb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800feb4:	601a      	str	r2, [r3, #0]
 800feb6:	f3bf 8f4f 	dsb	sy
 800feba:	f3bf 8f6f 	isb	sy
 800febe:	e780      	b.n	800fdc2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fec2:	f000 f8a7 	bl	8010014 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fec6:	f000 fd55 	bl	8010974 <xTaskResumeAll>
 800feca:	e77a      	b.n	800fdc2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fece:	f000 f8a1 	bl	8010014 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fed2:	f000 fd4f 	bl	8010974 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fed6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fed8:	f000 f8ee 	bl	80100b8 <prvIsQueueEmpty>
 800fedc:	4603      	mov	r3, r0
 800fede:	2b00      	cmp	r3, #0
 800fee0:	f43f af6f 	beq.w	800fdc2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fee4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fee6:	4618      	mov	r0, r3
 800fee8:	3730      	adds	r7, #48	; 0x30
 800feea:	46bd      	mov	sp, r7
 800feec:	bd80      	pop	{r7, pc}
 800feee:	bf00      	nop
 800fef0:	e000ed04 	.word	0xe000ed04

0800fef4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b086      	sub	sp, #24
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	60f8      	str	r0, [r7, #12]
 800fefc:	60b9      	str	r1, [r7, #8]
 800fefe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ff00:	2300      	movs	r3, #0
 800ff02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d10d      	bne.n	800ff2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d14d      	bne.n	800ffb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	689b      	ldr	r3, [r3, #8]
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f001 f934 	bl	801118c <xTaskPriorityDisinherit>
 800ff24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	2200      	movs	r2, #0
 800ff2a:	609a      	str	r2, [r3, #8]
 800ff2c:	e043      	b.n	800ffb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d119      	bne.n	800ff68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	6858      	ldr	r0, [r3, #4]
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff3c:	461a      	mov	r2, r3
 800ff3e:	68b9      	ldr	r1, [r7, #8]
 800ff40:	f002 fc08 	bl	8012754 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	685a      	ldr	r2, [r3, #4]
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff4c:	441a      	add	r2, r3
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	685a      	ldr	r2, [r3, #4]
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	689b      	ldr	r3, [r3, #8]
 800ff5a:	429a      	cmp	r2, r3
 800ff5c:	d32b      	bcc.n	800ffb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	681a      	ldr	r2, [r3, #0]
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	605a      	str	r2, [r3, #4]
 800ff66:	e026      	b.n	800ffb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	68d8      	ldr	r0, [r3, #12]
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff70:	461a      	mov	r2, r3
 800ff72:	68b9      	ldr	r1, [r7, #8]
 800ff74:	f002 fbee 	bl	8012754 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	68da      	ldr	r2, [r3, #12]
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff80:	425b      	negs	r3, r3
 800ff82:	441a      	add	r2, r3
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	68da      	ldr	r2, [r3, #12]
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	429a      	cmp	r2, r3
 800ff92:	d207      	bcs.n	800ffa4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	689a      	ldr	r2, [r3, #8]
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff9c:	425b      	negs	r3, r3
 800ff9e:	441a      	add	r2, r3
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	2b02      	cmp	r3, #2
 800ffa8:	d105      	bne.n	800ffb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ffaa:	693b      	ldr	r3, [r7, #16]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d002      	beq.n	800ffb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ffb0:	693b      	ldr	r3, [r7, #16]
 800ffb2:	3b01      	subs	r3, #1
 800ffb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ffb6:	693b      	ldr	r3, [r7, #16]
 800ffb8:	1c5a      	adds	r2, r3, #1
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ffbe:	697b      	ldr	r3, [r7, #20]
}
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	3718      	adds	r7, #24
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}

0800ffc8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b082      	sub	sp, #8
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
 800ffd0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d018      	beq.n	801000c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	68da      	ldr	r2, [r3, #12]
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffe2:	441a      	add	r2, r3
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	68da      	ldr	r2, [r3, #12]
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	689b      	ldr	r3, [r3, #8]
 800fff0:	429a      	cmp	r2, r3
 800fff2:	d303      	bcc.n	800fffc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681a      	ldr	r2, [r3, #0]
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	68d9      	ldr	r1, [r3, #12]
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010004:	461a      	mov	r2, r3
 8010006:	6838      	ldr	r0, [r7, #0]
 8010008:	f002 fba4 	bl	8012754 <memcpy>
	}
}
 801000c:	bf00      	nop
 801000e:	3708      	adds	r7, #8
 8010010:	46bd      	mov	sp, r7
 8010012:	bd80      	pop	{r7, pc}

08010014 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b084      	sub	sp, #16
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801001c:	f001 fdf2 	bl	8011c04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010026:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010028:	e011      	b.n	801004e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801002e:	2b00      	cmp	r3, #0
 8010030:	d012      	beq.n	8010058 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	3324      	adds	r3, #36	; 0x24
 8010036:	4618      	mov	r0, r3
 8010038:	f000 feb8 	bl	8010dac <xTaskRemoveFromEventList>
 801003c:	4603      	mov	r3, r0
 801003e:	2b00      	cmp	r3, #0
 8010040:	d001      	beq.n	8010046 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010042:	f000 ff8f 	bl	8010f64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010046:	7bfb      	ldrb	r3, [r7, #15]
 8010048:	3b01      	subs	r3, #1
 801004a:	b2db      	uxtb	r3, r3
 801004c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801004e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010052:	2b00      	cmp	r3, #0
 8010054:	dce9      	bgt.n	801002a <prvUnlockQueue+0x16>
 8010056:	e000      	b.n	801005a <prvUnlockQueue+0x46>
					break;
 8010058:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	22ff      	movs	r2, #255	; 0xff
 801005e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010062:	f001 fdff 	bl	8011c64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010066:	f001 fdcd 	bl	8011c04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010070:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010072:	e011      	b.n	8010098 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	691b      	ldr	r3, [r3, #16]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d012      	beq.n	80100a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	3310      	adds	r3, #16
 8010080:	4618      	mov	r0, r3
 8010082:	f000 fe93 	bl	8010dac <xTaskRemoveFromEventList>
 8010086:	4603      	mov	r3, r0
 8010088:	2b00      	cmp	r3, #0
 801008a:	d001      	beq.n	8010090 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801008c:	f000 ff6a 	bl	8010f64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010090:	7bbb      	ldrb	r3, [r7, #14]
 8010092:	3b01      	subs	r3, #1
 8010094:	b2db      	uxtb	r3, r3
 8010096:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010098:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801009c:	2b00      	cmp	r3, #0
 801009e:	dce9      	bgt.n	8010074 <prvUnlockQueue+0x60>
 80100a0:	e000      	b.n	80100a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80100a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	22ff      	movs	r2, #255	; 0xff
 80100a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80100ac:	f001 fdda 	bl	8011c64 <vPortExitCritical>
}
 80100b0:	bf00      	nop
 80100b2:	3710      	adds	r7, #16
 80100b4:	46bd      	mov	sp, r7
 80100b6:	bd80      	pop	{r7, pc}

080100b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b084      	sub	sp, #16
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80100c0:	f001 fda0 	bl	8011c04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d102      	bne.n	80100d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80100cc:	2301      	movs	r3, #1
 80100ce:	60fb      	str	r3, [r7, #12]
 80100d0:	e001      	b.n	80100d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80100d2:	2300      	movs	r3, #0
 80100d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80100d6:	f001 fdc5 	bl	8011c64 <vPortExitCritical>

	return xReturn;
 80100da:	68fb      	ldr	r3, [r7, #12]
}
 80100dc:	4618      	mov	r0, r3
 80100de:	3710      	adds	r7, #16
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bd80      	pop	{r7, pc}

080100e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b084      	sub	sp, #16
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80100ec:	f001 fd8a 	bl	8011c04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100f8:	429a      	cmp	r2, r3
 80100fa:	d102      	bne.n	8010102 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80100fc:	2301      	movs	r3, #1
 80100fe:	60fb      	str	r3, [r7, #12]
 8010100:	e001      	b.n	8010106 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010102:	2300      	movs	r3, #0
 8010104:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010106:	f001 fdad 	bl	8011c64 <vPortExitCritical>

	return xReturn;
 801010a:	68fb      	ldr	r3, [r7, #12]
}
 801010c:	4618      	mov	r0, r3
 801010e:	3710      	adds	r7, #16
 8010110:	46bd      	mov	sp, r7
 8010112:	bd80      	pop	{r7, pc}

08010114 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010114:	b480      	push	{r7}
 8010116:	b085      	sub	sp, #20
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
 801011c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801011e:	2300      	movs	r3, #0
 8010120:	60fb      	str	r3, [r7, #12]
 8010122:	e014      	b.n	801014e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010124:	4a0f      	ldr	r2, [pc, #60]	; (8010164 <vQueueAddToRegistry+0x50>)
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d10b      	bne.n	8010148 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010130:	490c      	ldr	r1, [pc, #48]	; (8010164 <vQueueAddToRegistry+0x50>)
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	683a      	ldr	r2, [r7, #0]
 8010136:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801013a:	4a0a      	ldr	r2, [pc, #40]	; (8010164 <vQueueAddToRegistry+0x50>)
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	00db      	lsls	r3, r3, #3
 8010140:	4413      	add	r3, r2
 8010142:	687a      	ldr	r2, [r7, #4]
 8010144:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010146:	e006      	b.n	8010156 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	3301      	adds	r3, #1
 801014c:	60fb      	str	r3, [r7, #12]
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	2b07      	cmp	r3, #7
 8010152:	d9e7      	bls.n	8010124 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010154:	bf00      	nop
 8010156:	bf00      	nop
 8010158:	3714      	adds	r7, #20
 801015a:	46bd      	mov	sp, r7
 801015c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010160:	4770      	bx	lr
 8010162:	bf00      	nop
 8010164:	200064a4 	.word	0x200064a4

08010168 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010168:	b580      	push	{r7, lr}
 801016a:	b086      	sub	sp, #24
 801016c:	af00      	add	r7, sp, #0
 801016e:	60f8      	str	r0, [r7, #12]
 8010170:	60b9      	str	r1, [r7, #8]
 8010172:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010178:	f001 fd44 	bl	8011c04 <vPortEnterCritical>
 801017c:	697b      	ldr	r3, [r7, #20]
 801017e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010182:	b25b      	sxtb	r3, r3
 8010184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010188:	d103      	bne.n	8010192 <vQueueWaitForMessageRestricted+0x2a>
 801018a:	697b      	ldr	r3, [r7, #20]
 801018c:	2200      	movs	r2, #0
 801018e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010192:	697b      	ldr	r3, [r7, #20]
 8010194:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010198:	b25b      	sxtb	r3, r3
 801019a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801019e:	d103      	bne.n	80101a8 <vQueueWaitForMessageRestricted+0x40>
 80101a0:	697b      	ldr	r3, [r7, #20]
 80101a2:	2200      	movs	r2, #0
 80101a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80101a8:	f001 fd5c 	bl	8011c64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80101ac:	697b      	ldr	r3, [r7, #20]
 80101ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d106      	bne.n	80101c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80101b4:	697b      	ldr	r3, [r7, #20]
 80101b6:	3324      	adds	r3, #36	; 0x24
 80101b8:	687a      	ldr	r2, [r7, #4]
 80101ba:	68b9      	ldr	r1, [r7, #8]
 80101bc:	4618      	mov	r0, r3
 80101be:	f000 fdc9 	bl	8010d54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80101c2:	6978      	ldr	r0, [r7, #20]
 80101c4:	f7ff ff26 	bl	8010014 <prvUnlockQueue>
	}
 80101c8:	bf00      	nop
 80101ca:	3718      	adds	r7, #24
 80101cc:	46bd      	mov	sp, r7
 80101ce:	bd80      	pop	{r7, pc}

080101d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b08e      	sub	sp, #56	; 0x38
 80101d4:	af04      	add	r7, sp, #16
 80101d6:	60f8      	str	r0, [r7, #12]
 80101d8:	60b9      	str	r1, [r7, #8]
 80101da:	607a      	str	r2, [r7, #4]
 80101dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80101de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d10a      	bne.n	80101fa <xTaskCreateStatic+0x2a>
	__asm volatile
 80101e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101e8:	f383 8811 	msr	BASEPRI, r3
 80101ec:	f3bf 8f6f 	isb	sy
 80101f0:	f3bf 8f4f 	dsb	sy
 80101f4:	623b      	str	r3, [r7, #32]
}
 80101f6:	bf00      	nop
 80101f8:	e7fe      	b.n	80101f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80101fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d10a      	bne.n	8010216 <xTaskCreateStatic+0x46>
	__asm volatile
 8010200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010204:	f383 8811 	msr	BASEPRI, r3
 8010208:	f3bf 8f6f 	isb	sy
 801020c:	f3bf 8f4f 	dsb	sy
 8010210:	61fb      	str	r3, [r7, #28]
}
 8010212:	bf00      	nop
 8010214:	e7fe      	b.n	8010214 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010216:	23bc      	movs	r3, #188	; 0xbc
 8010218:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801021a:	693b      	ldr	r3, [r7, #16]
 801021c:	2bbc      	cmp	r3, #188	; 0xbc
 801021e:	d00a      	beq.n	8010236 <xTaskCreateStatic+0x66>
	__asm volatile
 8010220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010224:	f383 8811 	msr	BASEPRI, r3
 8010228:	f3bf 8f6f 	isb	sy
 801022c:	f3bf 8f4f 	dsb	sy
 8010230:	61bb      	str	r3, [r7, #24]
}
 8010232:	bf00      	nop
 8010234:	e7fe      	b.n	8010234 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010236:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801023a:	2b00      	cmp	r3, #0
 801023c:	d01e      	beq.n	801027c <xTaskCreateStatic+0xac>
 801023e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010240:	2b00      	cmp	r3, #0
 8010242:	d01b      	beq.n	801027c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010246:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801024a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801024c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801024e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010250:	2202      	movs	r2, #2
 8010252:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010256:	2300      	movs	r3, #0
 8010258:	9303      	str	r3, [sp, #12]
 801025a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801025c:	9302      	str	r3, [sp, #8]
 801025e:	f107 0314 	add.w	r3, r7, #20
 8010262:	9301      	str	r3, [sp, #4]
 8010264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010266:	9300      	str	r3, [sp, #0]
 8010268:	683b      	ldr	r3, [r7, #0]
 801026a:	687a      	ldr	r2, [r7, #4]
 801026c:	68b9      	ldr	r1, [r7, #8]
 801026e:	68f8      	ldr	r0, [r7, #12]
 8010270:	f000 f850 	bl	8010314 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010274:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010276:	f000 f8f3 	bl	8010460 <prvAddNewTaskToReadyList>
 801027a:	e001      	b.n	8010280 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801027c:	2300      	movs	r3, #0
 801027e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010280:	697b      	ldr	r3, [r7, #20]
	}
 8010282:	4618      	mov	r0, r3
 8010284:	3728      	adds	r7, #40	; 0x28
 8010286:	46bd      	mov	sp, r7
 8010288:	bd80      	pop	{r7, pc}

0801028a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801028a:	b580      	push	{r7, lr}
 801028c:	b08c      	sub	sp, #48	; 0x30
 801028e:	af04      	add	r7, sp, #16
 8010290:	60f8      	str	r0, [r7, #12]
 8010292:	60b9      	str	r1, [r7, #8]
 8010294:	603b      	str	r3, [r7, #0]
 8010296:	4613      	mov	r3, r2
 8010298:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801029a:	88fb      	ldrh	r3, [r7, #6]
 801029c:	009b      	lsls	r3, r3, #2
 801029e:	4618      	mov	r0, r3
 80102a0:	f001 fdd2 	bl	8011e48 <pvPortMalloc>
 80102a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80102a6:	697b      	ldr	r3, [r7, #20]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d00e      	beq.n	80102ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80102ac:	20bc      	movs	r0, #188	; 0xbc
 80102ae:	f001 fdcb 	bl	8011e48 <pvPortMalloc>
 80102b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80102b4:	69fb      	ldr	r3, [r7, #28]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d003      	beq.n	80102c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80102ba:	69fb      	ldr	r3, [r7, #28]
 80102bc:	697a      	ldr	r2, [r7, #20]
 80102be:	631a      	str	r2, [r3, #48]	; 0x30
 80102c0:	e005      	b.n	80102ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80102c2:	6978      	ldr	r0, [r7, #20]
 80102c4:	f001 fe8c 	bl	8011fe0 <vPortFree>
 80102c8:	e001      	b.n	80102ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80102ca:	2300      	movs	r3, #0
 80102cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80102ce:	69fb      	ldr	r3, [r7, #28]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d017      	beq.n	8010304 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80102d4:	69fb      	ldr	r3, [r7, #28]
 80102d6:	2200      	movs	r2, #0
 80102d8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80102dc:	88fa      	ldrh	r2, [r7, #6]
 80102de:	2300      	movs	r3, #0
 80102e0:	9303      	str	r3, [sp, #12]
 80102e2:	69fb      	ldr	r3, [r7, #28]
 80102e4:	9302      	str	r3, [sp, #8]
 80102e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102e8:	9301      	str	r3, [sp, #4]
 80102ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ec:	9300      	str	r3, [sp, #0]
 80102ee:	683b      	ldr	r3, [r7, #0]
 80102f0:	68b9      	ldr	r1, [r7, #8]
 80102f2:	68f8      	ldr	r0, [r7, #12]
 80102f4:	f000 f80e 	bl	8010314 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80102f8:	69f8      	ldr	r0, [r7, #28]
 80102fa:	f000 f8b1 	bl	8010460 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80102fe:	2301      	movs	r3, #1
 8010300:	61bb      	str	r3, [r7, #24]
 8010302:	e002      	b.n	801030a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010304:	f04f 33ff 	mov.w	r3, #4294967295
 8010308:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801030a:	69bb      	ldr	r3, [r7, #24]
	}
 801030c:	4618      	mov	r0, r3
 801030e:	3720      	adds	r7, #32
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}

08010314 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b088      	sub	sp, #32
 8010318:	af00      	add	r7, sp, #0
 801031a:	60f8      	str	r0, [r7, #12]
 801031c:	60b9      	str	r1, [r7, #8]
 801031e:	607a      	str	r2, [r7, #4]
 8010320:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010324:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	009b      	lsls	r3, r3, #2
 801032a:	461a      	mov	r2, r3
 801032c:	21a5      	movs	r1, #165	; 0xa5
 801032e:	f002 fa39 	bl	80127a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801033c:	3b01      	subs	r3, #1
 801033e:	009b      	lsls	r3, r3, #2
 8010340:	4413      	add	r3, r2
 8010342:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010344:	69bb      	ldr	r3, [r7, #24]
 8010346:	f023 0307 	bic.w	r3, r3, #7
 801034a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801034c:	69bb      	ldr	r3, [r7, #24]
 801034e:	f003 0307 	and.w	r3, r3, #7
 8010352:	2b00      	cmp	r3, #0
 8010354:	d00a      	beq.n	801036c <prvInitialiseNewTask+0x58>
	__asm volatile
 8010356:	f04f 0350 	mov.w	r3, #80	; 0x50
 801035a:	f383 8811 	msr	BASEPRI, r3
 801035e:	f3bf 8f6f 	isb	sy
 8010362:	f3bf 8f4f 	dsb	sy
 8010366:	617b      	str	r3, [r7, #20]
}
 8010368:	bf00      	nop
 801036a:	e7fe      	b.n	801036a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801036c:	68bb      	ldr	r3, [r7, #8]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d01f      	beq.n	80103b2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010372:	2300      	movs	r3, #0
 8010374:	61fb      	str	r3, [r7, #28]
 8010376:	e012      	b.n	801039e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010378:	68ba      	ldr	r2, [r7, #8]
 801037a:	69fb      	ldr	r3, [r7, #28]
 801037c:	4413      	add	r3, r2
 801037e:	7819      	ldrb	r1, [r3, #0]
 8010380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010382:	69fb      	ldr	r3, [r7, #28]
 8010384:	4413      	add	r3, r2
 8010386:	3334      	adds	r3, #52	; 0x34
 8010388:	460a      	mov	r2, r1
 801038a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801038c:	68ba      	ldr	r2, [r7, #8]
 801038e:	69fb      	ldr	r3, [r7, #28]
 8010390:	4413      	add	r3, r2
 8010392:	781b      	ldrb	r3, [r3, #0]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d006      	beq.n	80103a6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010398:	69fb      	ldr	r3, [r7, #28]
 801039a:	3301      	adds	r3, #1
 801039c:	61fb      	str	r3, [r7, #28]
 801039e:	69fb      	ldr	r3, [r7, #28]
 80103a0:	2b0f      	cmp	r3, #15
 80103a2:	d9e9      	bls.n	8010378 <prvInitialiseNewTask+0x64>
 80103a4:	e000      	b.n	80103a8 <prvInitialiseNewTask+0x94>
			{
				break;
 80103a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80103a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103aa:	2200      	movs	r2, #0
 80103ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80103b0:	e003      	b.n	80103ba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80103b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103b4:	2200      	movs	r2, #0
 80103b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80103ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103bc:	2b37      	cmp	r3, #55	; 0x37
 80103be:	d901      	bls.n	80103c4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80103c0:	2337      	movs	r3, #55	; 0x37
 80103c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80103c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80103c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80103ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80103ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80103d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103d2:	2200      	movs	r2, #0
 80103d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80103d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103d8:	3304      	adds	r3, #4
 80103da:	4618      	mov	r0, r3
 80103dc:	f7ff f978 	bl	800f6d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80103e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103e2:	3318      	adds	r3, #24
 80103e4:	4618      	mov	r0, r3
 80103e6:	f7ff f973 	bl	800f6d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80103ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80103ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80103f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80103f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80103fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80103fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010402:	2200      	movs	r2, #0
 8010404:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801040a:	2200      	movs	r2, #0
 801040c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010412:	3354      	adds	r3, #84	; 0x54
 8010414:	2260      	movs	r2, #96	; 0x60
 8010416:	2100      	movs	r1, #0
 8010418:	4618      	mov	r0, r3
 801041a:	f002 f9c3 	bl	80127a4 <memset>
 801041e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010420:	4a0c      	ldr	r2, [pc, #48]	; (8010454 <prvInitialiseNewTask+0x140>)
 8010422:	659a      	str	r2, [r3, #88]	; 0x58
 8010424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010426:	4a0c      	ldr	r2, [pc, #48]	; (8010458 <prvInitialiseNewTask+0x144>)
 8010428:	65da      	str	r2, [r3, #92]	; 0x5c
 801042a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801042c:	4a0b      	ldr	r2, [pc, #44]	; (801045c <prvInitialiseNewTask+0x148>)
 801042e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010430:	683a      	ldr	r2, [r7, #0]
 8010432:	68f9      	ldr	r1, [r7, #12]
 8010434:	69b8      	ldr	r0, [r7, #24]
 8010436:	f001 fab9 	bl	80119ac <pxPortInitialiseStack>
 801043a:	4602      	mov	r2, r0
 801043c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801043e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010442:	2b00      	cmp	r3, #0
 8010444:	d002      	beq.n	801044c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801044a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801044c:	bf00      	nop
 801044e:	3720      	adds	r7, #32
 8010450:	46bd      	mov	sp, r7
 8010452:	bd80      	pop	{r7, pc}
 8010454:	0801a4f4 	.word	0x0801a4f4
 8010458:	0801a514 	.word	0x0801a514
 801045c:	0801a4d4 	.word	0x0801a4d4

08010460 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b082      	sub	sp, #8
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010468:	f001 fbcc 	bl	8011c04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801046c:	4b2d      	ldr	r3, [pc, #180]	; (8010524 <prvAddNewTaskToReadyList+0xc4>)
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	3301      	adds	r3, #1
 8010472:	4a2c      	ldr	r2, [pc, #176]	; (8010524 <prvAddNewTaskToReadyList+0xc4>)
 8010474:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010476:	4b2c      	ldr	r3, [pc, #176]	; (8010528 <prvAddNewTaskToReadyList+0xc8>)
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d109      	bne.n	8010492 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801047e:	4a2a      	ldr	r2, [pc, #168]	; (8010528 <prvAddNewTaskToReadyList+0xc8>)
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010484:	4b27      	ldr	r3, [pc, #156]	; (8010524 <prvAddNewTaskToReadyList+0xc4>)
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	2b01      	cmp	r3, #1
 801048a:	d110      	bne.n	80104ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801048c:	f000 fd8e 	bl	8010fac <prvInitialiseTaskLists>
 8010490:	e00d      	b.n	80104ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010492:	4b26      	ldr	r3, [pc, #152]	; (801052c <prvAddNewTaskToReadyList+0xcc>)
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d109      	bne.n	80104ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801049a:	4b23      	ldr	r3, [pc, #140]	; (8010528 <prvAddNewTaskToReadyList+0xc8>)
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104a4:	429a      	cmp	r2, r3
 80104a6:	d802      	bhi.n	80104ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80104a8:	4a1f      	ldr	r2, [pc, #124]	; (8010528 <prvAddNewTaskToReadyList+0xc8>)
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80104ae:	4b20      	ldr	r3, [pc, #128]	; (8010530 <prvAddNewTaskToReadyList+0xd0>)
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	3301      	adds	r3, #1
 80104b4:	4a1e      	ldr	r2, [pc, #120]	; (8010530 <prvAddNewTaskToReadyList+0xd0>)
 80104b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80104b8:	4b1d      	ldr	r3, [pc, #116]	; (8010530 <prvAddNewTaskToReadyList+0xd0>)
 80104ba:	681a      	ldr	r2, [r3, #0]
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104c4:	4b1b      	ldr	r3, [pc, #108]	; (8010534 <prvAddNewTaskToReadyList+0xd4>)
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	429a      	cmp	r2, r3
 80104ca:	d903      	bls.n	80104d4 <prvAddNewTaskToReadyList+0x74>
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104d0:	4a18      	ldr	r2, [pc, #96]	; (8010534 <prvAddNewTaskToReadyList+0xd4>)
 80104d2:	6013      	str	r3, [r2, #0]
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104d8:	4613      	mov	r3, r2
 80104da:	009b      	lsls	r3, r3, #2
 80104dc:	4413      	add	r3, r2
 80104de:	009b      	lsls	r3, r3, #2
 80104e0:	4a15      	ldr	r2, [pc, #84]	; (8010538 <prvAddNewTaskToReadyList+0xd8>)
 80104e2:	441a      	add	r2, r3
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	3304      	adds	r3, #4
 80104e8:	4619      	mov	r1, r3
 80104ea:	4610      	mov	r0, r2
 80104ec:	f7ff f8fd 	bl	800f6ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80104f0:	f001 fbb8 	bl	8011c64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80104f4:	4b0d      	ldr	r3, [pc, #52]	; (801052c <prvAddNewTaskToReadyList+0xcc>)
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d00e      	beq.n	801051a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80104fc:	4b0a      	ldr	r3, [pc, #40]	; (8010528 <prvAddNewTaskToReadyList+0xc8>)
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010506:	429a      	cmp	r2, r3
 8010508:	d207      	bcs.n	801051a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801050a:	4b0c      	ldr	r3, [pc, #48]	; (801053c <prvAddNewTaskToReadyList+0xdc>)
 801050c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010510:	601a      	str	r2, [r3, #0]
 8010512:	f3bf 8f4f 	dsb	sy
 8010516:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801051a:	bf00      	nop
 801051c:	3708      	adds	r7, #8
 801051e:	46bd      	mov	sp, r7
 8010520:	bd80      	pop	{r7, pc}
 8010522:	bf00      	nop
 8010524:	20001284 	.word	0x20001284
 8010528:	20000db0 	.word	0x20000db0
 801052c:	20001290 	.word	0x20001290
 8010530:	200012a0 	.word	0x200012a0
 8010534:	2000128c 	.word	0x2000128c
 8010538:	20000db4 	.word	0x20000db4
 801053c:	e000ed04 	.word	0xe000ed04

08010540 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8010540:	b580      	push	{r7, lr}
 8010542:	b084      	sub	sp, #16
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8010548:	f001 fb5c 	bl	8011c04 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d102      	bne.n	8010558 <vTaskDelete+0x18>
 8010552:	4b2c      	ldr	r3, [pc, #176]	; (8010604 <vTaskDelete+0xc4>)
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	e000      	b.n	801055a <vTaskDelete+0x1a>
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	3304      	adds	r3, #4
 8010560:	4618      	mov	r0, r3
 8010562:	f7ff f91f 	bl	800f7a4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801056a:	2b00      	cmp	r3, #0
 801056c:	d004      	beq.n	8010578 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	3318      	adds	r3, #24
 8010572:	4618      	mov	r0, r3
 8010574:	f7ff f916 	bl	800f7a4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8010578:	4b23      	ldr	r3, [pc, #140]	; (8010608 <vTaskDelete+0xc8>)
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	3301      	adds	r3, #1
 801057e:	4a22      	ldr	r2, [pc, #136]	; (8010608 <vTaskDelete+0xc8>)
 8010580:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8010582:	4b20      	ldr	r3, [pc, #128]	; (8010604 <vTaskDelete+0xc4>)
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	68fa      	ldr	r2, [r7, #12]
 8010588:	429a      	cmp	r2, r3
 801058a:	d10b      	bne.n	80105a4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	3304      	adds	r3, #4
 8010590:	4619      	mov	r1, r3
 8010592:	481e      	ldr	r0, [pc, #120]	; (801060c <vTaskDelete+0xcc>)
 8010594:	f7ff f8a9 	bl	800f6ea <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8010598:	4b1d      	ldr	r3, [pc, #116]	; (8010610 <vTaskDelete+0xd0>)
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	3301      	adds	r3, #1
 801059e:	4a1c      	ldr	r2, [pc, #112]	; (8010610 <vTaskDelete+0xd0>)
 80105a0:	6013      	str	r3, [r2, #0]
 80105a2:	e009      	b.n	80105b8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80105a4:	4b1b      	ldr	r3, [pc, #108]	; (8010614 <vTaskDelete+0xd4>)
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	3b01      	subs	r3, #1
 80105aa:	4a1a      	ldr	r2, [pc, #104]	; (8010614 <vTaskDelete+0xd4>)
 80105ac:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80105ae:	68f8      	ldr	r0, [r7, #12]
 80105b0:	f000 fd6a 	bl	8011088 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80105b4:	f000 fd9c 	bl	80110f0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80105b8:	f001 fb54 	bl	8011c64 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80105bc:	4b16      	ldr	r3, [pc, #88]	; (8010618 <vTaskDelete+0xd8>)
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d01b      	beq.n	80105fc <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 80105c4:	4b0f      	ldr	r3, [pc, #60]	; (8010604 <vTaskDelete+0xc4>)
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	68fa      	ldr	r2, [r7, #12]
 80105ca:	429a      	cmp	r2, r3
 80105cc:	d116      	bne.n	80105fc <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80105ce:	4b13      	ldr	r3, [pc, #76]	; (801061c <vTaskDelete+0xdc>)
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d00a      	beq.n	80105ec <vTaskDelete+0xac>
	__asm volatile
 80105d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105da:	f383 8811 	msr	BASEPRI, r3
 80105de:	f3bf 8f6f 	isb	sy
 80105e2:	f3bf 8f4f 	dsb	sy
 80105e6:	60bb      	str	r3, [r7, #8]
}
 80105e8:	bf00      	nop
 80105ea:	e7fe      	b.n	80105ea <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80105ec:	4b0c      	ldr	r3, [pc, #48]	; (8010620 <vTaskDelete+0xe0>)
 80105ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105f2:	601a      	str	r2, [r3, #0]
 80105f4:	f3bf 8f4f 	dsb	sy
 80105f8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80105fc:	bf00      	nop
 80105fe:	3710      	adds	r7, #16
 8010600:	46bd      	mov	sp, r7
 8010602:	bd80      	pop	{r7, pc}
 8010604:	20000db0 	.word	0x20000db0
 8010608:	200012a0 	.word	0x200012a0
 801060c:	20001258 	.word	0x20001258
 8010610:	2000126c 	.word	0x2000126c
 8010614:	20001284 	.word	0x20001284
 8010618:	20001290 	.word	0x20001290
 801061c:	200012ac 	.word	0x200012ac
 8010620:	e000ed04 	.word	0xe000ed04

08010624 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010624:	b580      	push	{r7, lr}
 8010626:	b084      	sub	sp, #16
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801062c:	2300      	movs	r3, #0
 801062e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d017      	beq.n	8010666 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010636:	4b13      	ldr	r3, [pc, #76]	; (8010684 <vTaskDelay+0x60>)
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d00a      	beq.n	8010654 <vTaskDelay+0x30>
	__asm volatile
 801063e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010642:	f383 8811 	msr	BASEPRI, r3
 8010646:	f3bf 8f6f 	isb	sy
 801064a:	f3bf 8f4f 	dsb	sy
 801064e:	60bb      	str	r3, [r7, #8]
}
 8010650:	bf00      	nop
 8010652:	e7fe      	b.n	8010652 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010654:	f000 f980 	bl	8010958 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010658:	2100      	movs	r1, #0
 801065a:	6878      	ldr	r0, [r7, #4]
 801065c:	f000 fe04 	bl	8011268 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010660:	f000 f988 	bl	8010974 <xTaskResumeAll>
 8010664:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d107      	bne.n	801067c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801066c:	4b06      	ldr	r3, [pc, #24]	; (8010688 <vTaskDelay+0x64>)
 801066e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010672:	601a      	str	r2, [r3, #0]
 8010674:	f3bf 8f4f 	dsb	sy
 8010678:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801067c:	bf00      	nop
 801067e:	3710      	adds	r7, #16
 8010680:	46bd      	mov	sp, r7
 8010682:	bd80      	pop	{r7, pc}
 8010684:	200012ac 	.word	0x200012ac
 8010688:	e000ed04 	.word	0xe000ed04

0801068c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 801068c:	b580      	push	{r7, lr}
 801068e:	b088      	sub	sp, #32
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8010698:	69bb      	ldr	r3, [r7, #24]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d10a      	bne.n	80106b4 <eTaskGetState+0x28>
	__asm volatile
 801069e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106a2:	f383 8811 	msr	BASEPRI, r3
 80106a6:	f3bf 8f6f 	isb	sy
 80106aa:	f3bf 8f4f 	dsb	sy
 80106ae:	60bb      	str	r3, [r7, #8]
}
 80106b0:	bf00      	nop
 80106b2:	e7fe      	b.n	80106b2 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80106b4:	4b23      	ldr	r3, [pc, #140]	; (8010744 <eTaskGetState+0xb8>)
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	69ba      	ldr	r2, [r7, #24]
 80106ba:	429a      	cmp	r2, r3
 80106bc:	d102      	bne.n	80106c4 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80106be:	2300      	movs	r3, #0
 80106c0:	77fb      	strb	r3, [r7, #31]
 80106c2:	e03a      	b.n	801073a <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 80106c4:	f001 fa9e 	bl	8011c04 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80106c8:	69bb      	ldr	r3, [r7, #24]
 80106ca:	695b      	ldr	r3, [r3, #20]
 80106cc:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80106ce:	4b1e      	ldr	r3, [pc, #120]	; (8010748 <eTaskGetState+0xbc>)
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80106d4:	4b1d      	ldr	r3, [pc, #116]	; (801074c <eTaskGetState+0xc0>)
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80106da:	f001 fac3 	bl	8011c64 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80106de:	697a      	ldr	r2, [r7, #20]
 80106e0:	693b      	ldr	r3, [r7, #16]
 80106e2:	429a      	cmp	r2, r3
 80106e4:	d003      	beq.n	80106ee <eTaskGetState+0x62>
 80106e6:	697a      	ldr	r2, [r7, #20]
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	429a      	cmp	r2, r3
 80106ec:	d102      	bne.n	80106f4 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80106ee:	2302      	movs	r3, #2
 80106f0:	77fb      	strb	r3, [r7, #31]
 80106f2:	e022      	b.n	801073a <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80106f4:	697b      	ldr	r3, [r7, #20]
 80106f6:	4a16      	ldr	r2, [pc, #88]	; (8010750 <eTaskGetState+0xc4>)
 80106f8:	4293      	cmp	r3, r2
 80106fa:	d112      	bne.n	8010722 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80106fc:	69bb      	ldr	r3, [r7, #24]
 80106fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010700:	2b00      	cmp	r3, #0
 8010702:	d10b      	bne.n	801071c <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8010704:	69bb      	ldr	r3, [r7, #24]
 8010706:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 801070a:	b2db      	uxtb	r3, r3
 801070c:	2b01      	cmp	r3, #1
 801070e:	d102      	bne.n	8010716 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8010710:	2302      	movs	r3, #2
 8010712:	77fb      	strb	r3, [r7, #31]
 8010714:	e011      	b.n	801073a <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8010716:	2303      	movs	r3, #3
 8010718:	77fb      	strb	r3, [r7, #31]
 801071a:	e00e      	b.n	801073a <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 801071c:	2302      	movs	r3, #2
 801071e:	77fb      	strb	r3, [r7, #31]
 8010720:	e00b      	b.n	801073a <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8010722:	697b      	ldr	r3, [r7, #20]
 8010724:	4a0b      	ldr	r2, [pc, #44]	; (8010754 <eTaskGetState+0xc8>)
 8010726:	4293      	cmp	r3, r2
 8010728:	d002      	beq.n	8010730 <eTaskGetState+0xa4>
 801072a:	697b      	ldr	r3, [r7, #20]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d102      	bne.n	8010736 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8010730:	2304      	movs	r3, #4
 8010732:	77fb      	strb	r3, [r7, #31]
 8010734:	e001      	b.n	801073a <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8010736:	2301      	movs	r3, #1
 8010738:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 801073a:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801073c:	4618      	mov	r0, r3
 801073e:	3720      	adds	r7, #32
 8010740:	46bd      	mov	sp, r7
 8010742:	bd80      	pop	{r7, pc}
 8010744:	20000db0 	.word	0x20000db0
 8010748:	2000123c 	.word	0x2000123c
 801074c:	20001240 	.word	0x20001240
 8010750:	20001270 	.word	0x20001270
 8010754:	20001258 	.word	0x20001258

08010758 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8010758:	b480      	push	{r7}
 801075a:	b087      	sub	sp, #28
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8010760:	2300      	movs	r3, #0
 8010762:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d10a      	bne.n	8010784 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 801076e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010772:	f383 8811 	msr	BASEPRI, r3
 8010776:	f3bf 8f6f 	isb	sy
 801077a:	f3bf 8f4f 	dsb	sy
 801077e:	60fb      	str	r3, [r7, #12]
}
 8010780:	bf00      	nop
 8010782:	e7fe      	b.n	8010782 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010784:	693b      	ldr	r3, [r7, #16]
 8010786:	695b      	ldr	r3, [r3, #20]
 8010788:	4a0a      	ldr	r2, [pc, #40]	; (80107b4 <prvTaskIsTaskSuspended+0x5c>)
 801078a:	4293      	cmp	r3, r2
 801078c:	d10a      	bne.n	80107a4 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 801078e:	693b      	ldr	r3, [r7, #16]
 8010790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010792:	4a09      	ldr	r2, [pc, #36]	; (80107b8 <prvTaskIsTaskSuspended+0x60>)
 8010794:	4293      	cmp	r3, r2
 8010796:	d005      	beq.n	80107a4 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8010798:	693b      	ldr	r3, [r7, #16]
 801079a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801079c:	2b00      	cmp	r3, #0
 801079e:	d101      	bne.n	80107a4 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80107a0:	2301      	movs	r3, #1
 80107a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80107a4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80107a6:	4618      	mov	r0, r3
 80107a8:	371c      	adds	r7, #28
 80107aa:	46bd      	mov	sp, r7
 80107ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b0:	4770      	bx	lr
 80107b2:	bf00      	nop
 80107b4:	20001270 	.word	0x20001270
 80107b8:	20001244 	.word	0x20001244

080107bc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b084      	sub	sp, #16
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d10a      	bne.n	80107e4 <vTaskResume+0x28>
	__asm volatile
 80107ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107d2:	f383 8811 	msr	BASEPRI, r3
 80107d6:	f3bf 8f6f 	isb	sy
 80107da:	f3bf 8f4f 	dsb	sy
 80107de:	60bb      	str	r3, [r7, #8]
}
 80107e0:	bf00      	nop
 80107e2:	e7fe      	b.n	80107e2 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80107e4:	4b20      	ldr	r3, [pc, #128]	; (8010868 <vTaskResume+0xac>)
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	68fa      	ldr	r2, [r7, #12]
 80107ea:	429a      	cmp	r2, r3
 80107ec:	d038      	beq.n	8010860 <vTaskResume+0xa4>
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d035      	beq.n	8010860 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 80107f4:	f001 fa06 	bl	8011c04 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80107f8:	68f8      	ldr	r0, [r7, #12]
 80107fa:	f7ff ffad 	bl	8010758 <prvTaskIsTaskSuspended>
 80107fe:	4603      	mov	r3, r0
 8010800:	2b00      	cmp	r3, #0
 8010802:	d02b      	beq.n	801085c <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	3304      	adds	r3, #4
 8010808:	4618      	mov	r0, r3
 801080a:	f7fe ffcb 	bl	800f7a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010812:	4b16      	ldr	r3, [pc, #88]	; (801086c <vTaskResume+0xb0>)
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	429a      	cmp	r2, r3
 8010818:	d903      	bls.n	8010822 <vTaskResume+0x66>
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801081e:	4a13      	ldr	r2, [pc, #76]	; (801086c <vTaskResume+0xb0>)
 8010820:	6013      	str	r3, [r2, #0]
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010826:	4613      	mov	r3, r2
 8010828:	009b      	lsls	r3, r3, #2
 801082a:	4413      	add	r3, r2
 801082c:	009b      	lsls	r3, r3, #2
 801082e:	4a10      	ldr	r2, [pc, #64]	; (8010870 <vTaskResume+0xb4>)
 8010830:	441a      	add	r2, r3
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	3304      	adds	r3, #4
 8010836:	4619      	mov	r1, r3
 8010838:	4610      	mov	r0, r2
 801083a:	f7fe ff56 	bl	800f6ea <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010842:	4b09      	ldr	r3, [pc, #36]	; (8010868 <vTaskResume+0xac>)
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010848:	429a      	cmp	r2, r3
 801084a:	d307      	bcc.n	801085c <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 801084c:	4b09      	ldr	r3, [pc, #36]	; (8010874 <vTaskResume+0xb8>)
 801084e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010852:	601a      	str	r2, [r3, #0]
 8010854:	f3bf 8f4f 	dsb	sy
 8010858:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 801085c:	f001 fa02 	bl	8011c64 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010860:	bf00      	nop
 8010862:	3710      	adds	r7, #16
 8010864:	46bd      	mov	sp, r7
 8010866:	bd80      	pop	{r7, pc}
 8010868:	20000db0 	.word	0x20000db0
 801086c:	2000128c 	.word	0x2000128c
 8010870:	20000db4 	.word	0x20000db4
 8010874:	e000ed04 	.word	0xe000ed04

08010878 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b08a      	sub	sp, #40	; 0x28
 801087c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801087e:	2300      	movs	r3, #0
 8010880:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010882:	2300      	movs	r3, #0
 8010884:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010886:	463a      	mov	r2, r7
 8010888:	1d39      	adds	r1, r7, #4
 801088a:	f107 0308 	add.w	r3, r7, #8
 801088e:	4618      	mov	r0, r3
 8010890:	f7fe feca 	bl	800f628 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010894:	6839      	ldr	r1, [r7, #0]
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	68ba      	ldr	r2, [r7, #8]
 801089a:	9202      	str	r2, [sp, #8]
 801089c:	9301      	str	r3, [sp, #4]
 801089e:	2300      	movs	r3, #0
 80108a0:	9300      	str	r3, [sp, #0]
 80108a2:	2300      	movs	r3, #0
 80108a4:	460a      	mov	r2, r1
 80108a6:	4924      	ldr	r1, [pc, #144]	; (8010938 <vTaskStartScheduler+0xc0>)
 80108a8:	4824      	ldr	r0, [pc, #144]	; (801093c <vTaskStartScheduler+0xc4>)
 80108aa:	f7ff fc91 	bl	80101d0 <xTaskCreateStatic>
 80108ae:	4603      	mov	r3, r0
 80108b0:	4a23      	ldr	r2, [pc, #140]	; (8010940 <vTaskStartScheduler+0xc8>)
 80108b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80108b4:	4b22      	ldr	r3, [pc, #136]	; (8010940 <vTaskStartScheduler+0xc8>)
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d002      	beq.n	80108c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80108bc:	2301      	movs	r3, #1
 80108be:	617b      	str	r3, [r7, #20]
 80108c0:	e001      	b.n	80108c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80108c2:	2300      	movs	r3, #0
 80108c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80108c6:	697b      	ldr	r3, [r7, #20]
 80108c8:	2b01      	cmp	r3, #1
 80108ca:	d102      	bne.n	80108d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80108cc:	f000 fd20 	bl	8011310 <xTimerCreateTimerTask>
 80108d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80108d2:	697b      	ldr	r3, [r7, #20]
 80108d4:	2b01      	cmp	r3, #1
 80108d6:	d11b      	bne.n	8010910 <vTaskStartScheduler+0x98>
	__asm volatile
 80108d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108dc:	f383 8811 	msr	BASEPRI, r3
 80108e0:	f3bf 8f6f 	isb	sy
 80108e4:	f3bf 8f4f 	dsb	sy
 80108e8:	613b      	str	r3, [r7, #16]
}
 80108ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80108ec:	4b15      	ldr	r3, [pc, #84]	; (8010944 <vTaskStartScheduler+0xcc>)
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	3354      	adds	r3, #84	; 0x54
 80108f2:	4a15      	ldr	r2, [pc, #84]	; (8010948 <vTaskStartScheduler+0xd0>)
 80108f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80108f6:	4b15      	ldr	r3, [pc, #84]	; (801094c <vTaskStartScheduler+0xd4>)
 80108f8:	f04f 32ff 	mov.w	r2, #4294967295
 80108fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80108fe:	4b14      	ldr	r3, [pc, #80]	; (8010950 <vTaskStartScheduler+0xd8>)
 8010900:	2201      	movs	r2, #1
 8010902:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010904:	4b13      	ldr	r3, [pc, #76]	; (8010954 <vTaskStartScheduler+0xdc>)
 8010906:	2200      	movs	r2, #0
 8010908:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801090a:	f001 f8d9 	bl	8011ac0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801090e:	e00e      	b.n	801092e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010910:	697b      	ldr	r3, [r7, #20]
 8010912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010916:	d10a      	bne.n	801092e <vTaskStartScheduler+0xb6>
	__asm volatile
 8010918:	f04f 0350 	mov.w	r3, #80	; 0x50
 801091c:	f383 8811 	msr	BASEPRI, r3
 8010920:	f3bf 8f6f 	isb	sy
 8010924:	f3bf 8f4f 	dsb	sy
 8010928:	60fb      	str	r3, [r7, #12]
}
 801092a:	bf00      	nop
 801092c:	e7fe      	b.n	801092c <vTaskStartScheduler+0xb4>
}
 801092e:	bf00      	nop
 8010930:	3718      	adds	r7, #24
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}
 8010936:	bf00      	nop
 8010938:	0801a260 	.word	0x0801a260
 801093c:	08010f7d 	.word	0x08010f7d
 8010940:	200012a8 	.word	0x200012a8
 8010944:	20000db0 	.word	0x20000db0
 8010948:	200000ac 	.word	0x200000ac
 801094c:	200012a4 	.word	0x200012a4
 8010950:	20001290 	.word	0x20001290
 8010954:	20001288 	.word	0x20001288

08010958 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010958:	b480      	push	{r7}
 801095a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801095c:	4b04      	ldr	r3, [pc, #16]	; (8010970 <vTaskSuspendAll+0x18>)
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	3301      	adds	r3, #1
 8010962:	4a03      	ldr	r2, [pc, #12]	; (8010970 <vTaskSuspendAll+0x18>)
 8010964:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010966:	bf00      	nop
 8010968:	46bd      	mov	sp, r7
 801096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096e:	4770      	bx	lr
 8010970:	200012ac 	.word	0x200012ac

08010974 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b084      	sub	sp, #16
 8010978:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801097a:	2300      	movs	r3, #0
 801097c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801097e:	2300      	movs	r3, #0
 8010980:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010982:	4b42      	ldr	r3, [pc, #264]	; (8010a8c <xTaskResumeAll+0x118>)
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d10a      	bne.n	80109a0 <xTaskResumeAll+0x2c>
	__asm volatile
 801098a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801098e:	f383 8811 	msr	BASEPRI, r3
 8010992:	f3bf 8f6f 	isb	sy
 8010996:	f3bf 8f4f 	dsb	sy
 801099a:	603b      	str	r3, [r7, #0]
}
 801099c:	bf00      	nop
 801099e:	e7fe      	b.n	801099e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80109a0:	f001 f930 	bl	8011c04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80109a4:	4b39      	ldr	r3, [pc, #228]	; (8010a8c <xTaskResumeAll+0x118>)
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	3b01      	subs	r3, #1
 80109aa:	4a38      	ldr	r2, [pc, #224]	; (8010a8c <xTaskResumeAll+0x118>)
 80109ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80109ae:	4b37      	ldr	r3, [pc, #220]	; (8010a8c <xTaskResumeAll+0x118>)
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d162      	bne.n	8010a7c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80109b6:	4b36      	ldr	r3, [pc, #216]	; (8010a90 <xTaskResumeAll+0x11c>)
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d05e      	beq.n	8010a7c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80109be:	e02f      	b.n	8010a20 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80109c0:	4b34      	ldr	r3, [pc, #208]	; (8010a94 <xTaskResumeAll+0x120>)
 80109c2:	68db      	ldr	r3, [r3, #12]
 80109c4:	68db      	ldr	r3, [r3, #12]
 80109c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	3318      	adds	r3, #24
 80109cc:	4618      	mov	r0, r3
 80109ce:	f7fe fee9 	bl	800f7a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	3304      	adds	r3, #4
 80109d6:	4618      	mov	r0, r3
 80109d8:	f7fe fee4 	bl	800f7a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109e0:	4b2d      	ldr	r3, [pc, #180]	; (8010a98 <xTaskResumeAll+0x124>)
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	429a      	cmp	r2, r3
 80109e6:	d903      	bls.n	80109f0 <xTaskResumeAll+0x7c>
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109ec:	4a2a      	ldr	r2, [pc, #168]	; (8010a98 <xTaskResumeAll+0x124>)
 80109ee:	6013      	str	r3, [r2, #0]
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109f4:	4613      	mov	r3, r2
 80109f6:	009b      	lsls	r3, r3, #2
 80109f8:	4413      	add	r3, r2
 80109fa:	009b      	lsls	r3, r3, #2
 80109fc:	4a27      	ldr	r2, [pc, #156]	; (8010a9c <xTaskResumeAll+0x128>)
 80109fe:	441a      	add	r2, r3
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	3304      	adds	r3, #4
 8010a04:	4619      	mov	r1, r3
 8010a06:	4610      	mov	r0, r2
 8010a08:	f7fe fe6f 	bl	800f6ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a10:	4b23      	ldr	r3, [pc, #140]	; (8010aa0 <xTaskResumeAll+0x12c>)
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a16:	429a      	cmp	r2, r3
 8010a18:	d302      	bcc.n	8010a20 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8010a1a:	4b22      	ldr	r3, [pc, #136]	; (8010aa4 <xTaskResumeAll+0x130>)
 8010a1c:	2201      	movs	r2, #1
 8010a1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010a20:	4b1c      	ldr	r3, [pc, #112]	; (8010a94 <xTaskResumeAll+0x120>)
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d1cb      	bne.n	80109c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d001      	beq.n	8010a32 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010a2e:	f000 fb5f 	bl	80110f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010a32:	4b1d      	ldr	r3, [pc, #116]	; (8010aa8 <xTaskResumeAll+0x134>)
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d010      	beq.n	8010a60 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010a3e:	f000 f847 	bl	8010ad0 <xTaskIncrementTick>
 8010a42:	4603      	mov	r3, r0
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d002      	beq.n	8010a4e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010a48:	4b16      	ldr	r3, [pc, #88]	; (8010aa4 <xTaskResumeAll+0x130>)
 8010a4a:	2201      	movs	r2, #1
 8010a4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	3b01      	subs	r3, #1
 8010a52:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d1f1      	bne.n	8010a3e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8010a5a:	4b13      	ldr	r3, [pc, #76]	; (8010aa8 <xTaskResumeAll+0x134>)
 8010a5c:	2200      	movs	r2, #0
 8010a5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010a60:	4b10      	ldr	r3, [pc, #64]	; (8010aa4 <xTaskResumeAll+0x130>)
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d009      	beq.n	8010a7c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010a68:	2301      	movs	r3, #1
 8010a6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010a6c:	4b0f      	ldr	r3, [pc, #60]	; (8010aac <xTaskResumeAll+0x138>)
 8010a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a72:	601a      	str	r2, [r3, #0]
 8010a74:	f3bf 8f4f 	dsb	sy
 8010a78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010a7c:	f001 f8f2 	bl	8011c64 <vPortExitCritical>

	return xAlreadyYielded;
 8010a80:	68bb      	ldr	r3, [r7, #8]
}
 8010a82:	4618      	mov	r0, r3
 8010a84:	3710      	adds	r7, #16
 8010a86:	46bd      	mov	sp, r7
 8010a88:	bd80      	pop	{r7, pc}
 8010a8a:	bf00      	nop
 8010a8c:	200012ac 	.word	0x200012ac
 8010a90:	20001284 	.word	0x20001284
 8010a94:	20001244 	.word	0x20001244
 8010a98:	2000128c 	.word	0x2000128c
 8010a9c:	20000db4 	.word	0x20000db4
 8010aa0:	20000db0 	.word	0x20000db0
 8010aa4:	20001298 	.word	0x20001298
 8010aa8:	20001294 	.word	0x20001294
 8010aac:	e000ed04 	.word	0xe000ed04

08010ab0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010ab0:	b480      	push	{r7}
 8010ab2:	b083      	sub	sp, #12
 8010ab4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010ab6:	4b05      	ldr	r3, [pc, #20]	; (8010acc <xTaskGetTickCount+0x1c>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010abc:	687b      	ldr	r3, [r7, #4]
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	370c      	adds	r7, #12
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac8:	4770      	bx	lr
 8010aca:	bf00      	nop
 8010acc:	20001288 	.word	0x20001288

08010ad0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b086      	sub	sp, #24
 8010ad4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010ada:	4b4f      	ldr	r3, [pc, #316]	; (8010c18 <xTaskIncrementTick+0x148>)
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	f040 808f 	bne.w	8010c02 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010ae4:	4b4d      	ldr	r3, [pc, #308]	; (8010c1c <xTaskIncrementTick+0x14c>)
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	3301      	adds	r3, #1
 8010aea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010aec:	4a4b      	ldr	r2, [pc, #300]	; (8010c1c <xTaskIncrementTick+0x14c>)
 8010aee:	693b      	ldr	r3, [r7, #16]
 8010af0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010af2:	693b      	ldr	r3, [r7, #16]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d120      	bne.n	8010b3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010af8:	4b49      	ldr	r3, [pc, #292]	; (8010c20 <xTaskIncrementTick+0x150>)
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d00a      	beq.n	8010b18 <xTaskIncrementTick+0x48>
	__asm volatile
 8010b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b06:	f383 8811 	msr	BASEPRI, r3
 8010b0a:	f3bf 8f6f 	isb	sy
 8010b0e:	f3bf 8f4f 	dsb	sy
 8010b12:	603b      	str	r3, [r7, #0]
}
 8010b14:	bf00      	nop
 8010b16:	e7fe      	b.n	8010b16 <xTaskIncrementTick+0x46>
 8010b18:	4b41      	ldr	r3, [pc, #260]	; (8010c20 <xTaskIncrementTick+0x150>)
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	60fb      	str	r3, [r7, #12]
 8010b1e:	4b41      	ldr	r3, [pc, #260]	; (8010c24 <xTaskIncrementTick+0x154>)
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	4a3f      	ldr	r2, [pc, #252]	; (8010c20 <xTaskIncrementTick+0x150>)
 8010b24:	6013      	str	r3, [r2, #0]
 8010b26:	4a3f      	ldr	r2, [pc, #252]	; (8010c24 <xTaskIncrementTick+0x154>)
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	6013      	str	r3, [r2, #0]
 8010b2c:	4b3e      	ldr	r3, [pc, #248]	; (8010c28 <xTaskIncrementTick+0x158>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	3301      	adds	r3, #1
 8010b32:	4a3d      	ldr	r2, [pc, #244]	; (8010c28 <xTaskIncrementTick+0x158>)
 8010b34:	6013      	str	r3, [r2, #0]
 8010b36:	f000 fadb 	bl	80110f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010b3a:	4b3c      	ldr	r3, [pc, #240]	; (8010c2c <xTaskIncrementTick+0x15c>)
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	693a      	ldr	r2, [r7, #16]
 8010b40:	429a      	cmp	r2, r3
 8010b42:	d349      	bcc.n	8010bd8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010b44:	4b36      	ldr	r3, [pc, #216]	; (8010c20 <xTaskIncrementTick+0x150>)
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d104      	bne.n	8010b58 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b4e:	4b37      	ldr	r3, [pc, #220]	; (8010c2c <xTaskIncrementTick+0x15c>)
 8010b50:	f04f 32ff 	mov.w	r2, #4294967295
 8010b54:	601a      	str	r2, [r3, #0]
					break;
 8010b56:	e03f      	b.n	8010bd8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010b58:	4b31      	ldr	r3, [pc, #196]	; (8010c20 <xTaskIncrementTick+0x150>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	68db      	ldr	r3, [r3, #12]
 8010b5e:	68db      	ldr	r3, [r3, #12]
 8010b60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010b62:	68bb      	ldr	r3, [r7, #8]
 8010b64:	685b      	ldr	r3, [r3, #4]
 8010b66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010b68:	693a      	ldr	r2, [r7, #16]
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	429a      	cmp	r2, r3
 8010b6e:	d203      	bcs.n	8010b78 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010b70:	4a2e      	ldr	r2, [pc, #184]	; (8010c2c <xTaskIncrementTick+0x15c>)
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010b76:	e02f      	b.n	8010bd8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	3304      	adds	r3, #4
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	f7fe fe11 	bl	800f7a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010b82:	68bb      	ldr	r3, [r7, #8]
 8010b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d004      	beq.n	8010b94 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010b8a:	68bb      	ldr	r3, [r7, #8]
 8010b8c:	3318      	adds	r3, #24
 8010b8e:	4618      	mov	r0, r3
 8010b90:	f7fe fe08 	bl	800f7a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010b94:	68bb      	ldr	r3, [r7, #8]
 8010b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b98:	4b25      	ldr	r3, [pc, #148]	; (8010c30 <xTaskIncrementTick+0x160>)
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	429a      	cmp	r2, r3
 8010b9e:	d903      	bls.n	8010ba8 <xTaskIncrementTick+0xd8>
 8010ba0:	68bb      	ldr	r3, [r7, #8]
 8010ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ba4:	4a22      	ldr	r2, [pc, #136]	; (8010c30 <xTaskIncrementTick+0x160>)
 8010ba6:	6013      	str	r3, [r2, #0]
 8010ba8:	68bb      	ldr	r3, [r7, #8]
 8010baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bac:	4613      	mov	r3, r2
 8010bae:	009b      	lsls	r3, r3, #2
 8010bb0:	4413      	add	r3, r2
 8010bb2:	009b      	lsls	r3, r3, #2
 8010bb4:	4a1f      	ldr	r2, [pc, #124]	; (8010c34 <xTaskIncrementTick+0x164>)
 8010bb6:	441a      	add	r2, r3
 8010bb8:	68bb      	ldr	r3, [r7, #8]
 8010bba:	3304      	adds	r3, #4
 8010bbc:	4619      	mov	r1, r3
 8010bbe:	4610      	mov	r0, r2
 8010bc0:	f7fe fd93 	bl	800f6ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010bc4:	68bb      	ldr	r3, [r7, #8]
 8010bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bc8:	4b1b      	ldr	r3, [pc, #108]	; (8010c38 <xTaskIncrementTick+0x168>)
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bce:	429a      	cmp	r2, r3
 8010bd0:	d3b8      	bcc.n	8010b44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8010bd2:	2301      	movs	r3, #1
 8010bd4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010bd6:	e7b5      	b.n	8010b44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010bd8:	4b17      	ldr	r3, [pc, #92]	; (8010c38 <xTaskIncrementTick+0x168>)
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bde:	4915      	ldr	r1, [pc, #84]	; (8010c34 <xTaskIncrementTick+0x164>)
 8010be0:	4613      	mov	r3, r2
 8010be2:	009b      	lsls	r3, r3, #2
 8010be4:	4413      	add	r3, r2
 8010be6:	009b      	lsls	r3, r3, #2
 8010be8:	440b      	add	r3, r1
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	2b01      	cmp	r3, #1
 8010bee:	d901      	bls.n	8010bf4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8010bf0:	2301      	movs	r3, #1
 8010bf2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010bf4:	4b11      	ldr	r3, [pc, #68]	; (8010c3c <xTaskIncrementTick+0x16c>)
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d007      	beq.n	8010c0c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8010bfc:	2301      	movs	r3, #1
 8010bfe:	617b      	str	r3, [r7, #20]
 8010c00:	e004      	b.n	8010c0c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010c02:	4b0f      	ldr	r3, [pc, #60]	; (8010c40 <xTaskIncrementTick+0x170>)
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	3301      	adds	r3, #1
 8010c08:	4a0d      	ldr	r2, [pc, #52]	; (8010c40 <xTaskIncrementTick+0x170>)
 8010c0a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010c0c:	697b      	ldr	r3, [r7, #20]
}
 8010c0e:	4618      	mov	r0, r3
 8010c10:	3718      	adds	r7, #24
 8010c12:	46bd      	mov	sp, r7
 8010c14:	bd80      	pop	{r7, pc}
 8010c16:	bf00      	nop
 8010c18:	200012ac 	.word	0x200012ac
 8010c1c:	20001288 	.word	0x20001288
 8010c20:	2000123c 	.word	0x2000123c
 8010c24:	20001240 	.word	0x20001240
 8010c28:	2000129c 	.word	0x2000129c
 8010c2c:	200012a4 	.word	0x200012a4
 8010c30:	2000128c 	.word	0x2000128c
 8010c34:	20000db4 	.word	0x20000db4
 8010c38:	20000db0 	.word	0x20000db0
 8010c3c:	20001298 	.word	0x20001298
 8010c40:	20001294 	.word	0x20001294

08010c44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010c44:	b480      	push	{r7}
 8010c46:	b085      	sub	sp, #20
 8010c48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010c4a:	4b2a      	ldr	r3, [pc, #168]	; (8010cf4 <vTaskSwitchContext+0xb0>)
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d003      	beq.n	8010c5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010c52:	4b29      	ldr	r3, [pc, #164]	; (8010cf8 <vTaskSwitchContext+0xb4>)
 8010c54:	2201      	movs	r2, #1
 8010c56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010c58:	e046      	b.n	8010ce8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8010c5a:	4b27      	ldr	r3, [pc, #156]	; (8010cf8 <vTaskSwitchContext+0xb4>)
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c60:	4b26      	ldr	r3, [pc, #152]	; (8010cfc <vTaskSwitchContext+0xb8>)
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	60fb      	str	r3, [r7, #12]
 8010c66:	e010      	b.n	8010c8a <vTaskSwitchContext+0x46>
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d10a      	bne.n	8010c84 <vTaskSwitchContext+0x40>
	__asm volatile
 8010c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c72:	f383 8811 	msr	BASEPRI, r3
 8010c76:	f3bf 8f6f 	isb	sy
 8010c7a:	f3bf 8f4f 	dsb	sy
 8010c7e:	607b      	str	r3, [r7, #4]
}
 8010c80:	bf00      	nop
 8010c82:	e7fe      	b.n	8010c82 <vTaskSwitchContext+0x3e>
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	3b01      	subs	r3, #1
 8010c88:	60fb      	str	r3, [r7, #12]
 8010c8a:	491d      	ldr	r1, [pc, #116]	; (8010d00 <vTaskSwitchContext+0xbc>)
 8010c8c:	68fa      	ldr	r2, [r7, #12]
 8010c8e:	4613      	mov	r3, r2
 8010c90:	009b      	lsls	r3, r3, #2
 8010c92:	4413      	add	r3, r2
 8010c94:	009b      	lsls	r3, r3, #2
 8010c96:	440b      	add	r3, r1
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d0e4      	beq.n	8010c68 <vTaskSwitchContext+0x24>
 8010c9e:	68fa      	ldr	r2, [r7, #12]
 8010ca0:	4613      	mov	r3, r2
 8010ca2:	009b      	lsls	r3, r3, #2
 8010ca4:	4413      	add	r3, r2
 8010ca6:	009b      	lsls	r3, r3, #2
 8010ca8:	4a15      	ldr	r2, [pc, #84]	; (8010d00 <vTaskSwitchContext+0xbc>)
 8010caa:	4413      	add	r3, r2
 8010cac:	60bb      	str	r3, [r7, #8]
 8010cae:	68bb      	ldr	r3, [r7, #8]
 8010cb0:	685b      	ldr	r3, [r3, #4]
 8010cb2:	685a      	ldr	r2, [r3, #4]
 8010cb4:	68bb      	ldr	r3, [r7, #8]
 8010cb6:	605a      	str	r2, [r3, #4]
 8010cb8:	68bb      	ldr	r3, [r7, #8]
 8010cba:	685a      	ldr	r2, [r3, #4]
 8010cbc:	68bb      	ldr	r3, [r7, #8]
 8010cbe:	3308      	adds	r3, #8
 8010cc0:	429a      	cmp	r2, r3
 8010cc2:	d104      	bne.n	8010cce <vTaskSwitchContext+0x8a>
 8010cc4:	68bb      	ldr	r3, [r7, #8]
 8010cc6:	685b      	ldr	r3, [r3, #4]
 8010cc8:	685a      	ldr	r2, [r3, #4]
 8010cca:	68bb      	ldr	r3, [r7, #8]
 8010ccc:	605a      	str	r2, [r3, #4]
 8010cce:	68bb      	ldr	r3, [r7, #8]
 8010cd0:	685b      	ldr	r3, [r3, #4]
 8010cd2:	68db      	ldr	r3, [r3, #12]
 8010cd4:	4a0b      	ldr	r2, [pc, #44]	; (8010d04 <vTaskSwitchContext+0xc0>)
 8010cd6:	6013      	str	r3, [r2, #0]
 8010cd8:	4a08      	ldr	r2, [pc, #32]	; (8010cfc <vTaskSwitchContext+0xb8>)
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010cde:	4b09      	ldr	r3, [pc, #36]	; (8010d04 <vTaskSwitchContext+0xc0>)
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	3354      	adds	r3, #84	; 0x54
 8010ce4:	4a08      	ldr	r2, [pc, #32]	; (8010d08 <vTaskSwitchContext+0xc4>)
 8010ce6:	6013      	str	r3, [r2, #0]
}
 8010ce8:	bf00      	nop
 8010cea:	3714      	adds	r7, #20
 8010cec:	46bd      	mov	sp, r7
 8010cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf2:	4770      	bx	lr
 8010cf4:	200012ac 	.word	0x200012ac
 8010cf8:	20001298 	.word	0x20001298
 8010cfc:	2000128c 	.word	0x2000128c
 8010d00:	20000db4 	.word	0x20000db4
 8010d04:	20000db0 	.word	0x20000db0
 8010d08:	200000ac 	.word	0x200000ac

08010d0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b084      	sub	sp, #16
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
 8010d14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d10a      	bne.n	8010d32 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8010d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d20:	f383 8811 	msr	BASEPRI, r3
 8010d24:	f3bf 8f6f 	isb	sy
 8010d28:	f3bf 8f4f 	dsb	sy
 8010d2c:	60fb      	str	r3, [r7, #12]
}
 8010d2e:	bf00      	nop
 8010d30:	e7fe      	b.n	8010d30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010d32:	4b07      	ldr	r3, [pc, #28]	; (8010d50 <vTaskPlaceOnEventList+0x44>)
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	3318      	adds	r3, #24
 8010d38:	4619      	mov	r1, r3
 8010d3a:	6878      	ldr	r0, [r7, #4]
 8010d3c:	f7fe fcf9 	bl	800f732 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010d40:	2101      	movs	r1, #1
 8010d42:	6838      	ldr	r0, [r7, #0]
 8010d44:	f000 fa90 	bl	8011268 <prvAddCurrentTaskToDelayedList>
}
 8010d48:	bf00      	nop
 8010d4a:	3710      	adds	r7, #16
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	bd80      	pop	{r7, pc}
 8010d50:	20000db0 	.word	0x20000db0

08010d54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b086      	sub	sp, #24
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	60f8      	str	r0, [r7, #12]
 8010d5c:	60b9      	str	r1, [r7, #8]
 8010d5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d10a      	bne.n	8010d7c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8010d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d6a:	f383 8811 	msr	BASEPRI, r3
 8010d6e:	f3bf 8f6f 	isb	sy
 8010d72:	f3bf 8f4f 	dsb	sy
 8010d76:	617b      	str	r3, [r7, #20]
}
 8010d78:	bf00      	nop
 8010d7a:	e7fe      	b.n	8010d7a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010d7c:	4b0a      	ldr	r3, [pc, #40]	; (8010da8 <vTaskPlaceOnEventListRestricted+0x54>)
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	3318      	adds	r3, #24
 8010d82:	4619      	mov	r1, r3
 8010d84:	68f8      	ldr	r0, [r7, #12]
 8010d86:	f7fe fcb0 	bl	800f6ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d002      	beq.n	8010d96 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8010d90:	f04f 33ff 	mov.w	r3, #4294967295
 8010d94:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010d96:	6879      	ldr	r1, [r7, #4]
 8010d98:	68b8      	ldr	r0, [r7, #8]
 8010d9a:	f000 fa65 	bl	8011268 <prvAddCurrentTaskToDelayedList>
	}
 8010d9e:	bf00      	nop
 8010da0:	3718      	adds	r7, #24
 8010da2:	46bd      	mov	sp, r7
 8010da4:	bd80      	pop	{r7, pc}
 8010da6:	bf00      	nop
 8010da8:	20000db0 	.word	0x20000db0

08010dac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b086      	sub	sp, #24
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	68db      	ldr	r3, [r3, #12]
 8010db8:	68db      	ldr	r3, [r3, #12]
 8010dba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010dbc:	693b      	ldr	r3, [r7, #16]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d10a      	bne.n	8010dd8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8010dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dc6:	f383 8811 	msr	BASEPRI, r3
 8010dca:	f3bf 8f6f 	isb	sy
 8010dce:	f3bf 8f4f 	dsb	sy
 8010dd2:	60fb      	str	r3, [r7, #12]
}
 8010dd4:	bf00      	nop
 8010dd6:	e7fe      	b.n	8010dd6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010dd8:	693b      	ldr	r3, [r7, #16]
 8010dda:	3318      	adds	r3, #24
 8010ddc:	4618      	mov	r0, r3
 8010dde:	f7fe fce1 	bl	800f7a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010de2:	4b1e      	ldr	r3, [pc, #120]	; (8010e5c <xTaskRemoveFromEventList+0xb0>)
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d11d      	bne.n	8010e26 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010dea:	693b      	ldr	r3, [r7, #16]
 8010dec:	3304      	adds	r3, #4
 8010dee:	4618      	mov	r0, r3
 8010df0:	f7fe fcd8 	bl	800f7a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010df4:	693b      	ldr	r3, [r7, #16]
 8010df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010df8:	4b19      	ldr	r3, [pc, #100]	; (8010e60 <xTaskRemoveFromEventList+0xb4>)
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	429a      	cmp	r2, r3
 8010dfe:	d903      	bls.n	8010e08 <xTaskRemoveFromEventList+0x5c>
 8010e00:	693b      	ldr	r3, [r7, #16]
 8010e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e04:	4a16      	ldr	r2, [pc, #88]	; (8010e60 <xTaskRemoveFromEventList+0xb4>)
 8010e06:	6013      	str	r3, [r2, #0]
 8010e08:	693b      	ldr	r3, [r7, #16]
 8010e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e0c:	4613      	mov	r3, r2
 8010e0e:	009b      	lsls	r3, r3, #2
 8010e10:	4413      	add	r3, r2
 8010e12:	009b      	lsls	r3, r3, #2
 8010e14:	4a13      	ldr	r2, [pc, #76]	; (8010e64 <xTaskRemoveFromEventList+0xb8>)
 8010e16:	441a      	add	r2, r3
 8010e18:	693b      	ldr	r3, [r7, #16]
 8010e1a:	3304      	adds	r3, #4
 8010e1c:	4619      	mov	r1, r3
 8010e1e:	4610      	mov	r0, r2
 8010e20:	f7fe fc63 	bl	800f6ea <vListInsertEnd>
 8010e24:	e005      	b.n	8010e32 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010e26:	693b      	ldr	r3, [r7, #16]
 8010e28:	3318      	adds	r3, #24
 8010e2a:	4619      	mov	r1, r3
 8010e2c:	480e      	ldr	r0, [pc, #56]	; (8010e68 <xTaskRemoveFromEventList+0xbc>)
 8010e2e:	f7fe fc5c 	bl	800f6ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010e32:	693b      	ldr	r3, [r7, #16]
 8010e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e36:	4b0d      	ldr	r3, [pc, #52]	; (8010e6c <xTaskRemoveFromEventList+0xc0>)
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e3c:	429a      	cmp	r2, r3
 8010e3e:	d905      	bls.n	8010e4c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010e40:	2301      	movs	r3, #1
 8010e42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010e44:	4b0a      	ldr	r3, [pc, #40]	; (8010e70 <xTaskRemoveFromEventList+0xc4>)
 8010e46:	2201      	movs	r2, #1
 8010e48:	601a      	str	r2, [r3, #0]
 8010e4a:	e001      	b.n	8010e50 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010e50:	697b      	ldr	r3, [r7, #20]
}
 8010e52:	4618      	mov	r0, r3
 8010e54:	3718      	adds	r7, #24
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd80      	pop	{r7, pc}
 8010e5a:	bf00      	nop
 8010e5c:	200012ac 	.word	0x200012ac
 8010e60:	2000128c 	.word	0x2000128c
 8010e64:	20000db4 	.word	0x20000db4
 8010e68:	20001244 	.word	0x20001244
 8010e6c:	20000db0 	.word	0x20000db0
 8010e70:	20001298 	.word	0x20001298

08010e74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010e74:	b480      	push	{r7}
 8010e76:	b083      	sub	sp, #12
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010e7c:	4b06      	ldr	r3, [pc, #24]	; (8010e98 <vTaskInternalSetTimeOutState+0x24>)
 8010e7e:	681a      	ldr	r2, [r3, #0]
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010e84:	4b05      	ldr	r3, [pc, #20]	; (8010e9c <vTaskInternalSetTimeOutState+0x28>)
 8010e86:	681a      	ldr	r2, [r3, #0]
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	605a      	str	r2, [r3, #4]
}
 8010e8c:	bf00      	nop
 8010e8e:	370c      	adds	r7, #12
 8010e90:	46bd      	mov	sp, r7
 8010e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e96:	4770      	bx	lr
 8010e98:	2000129c 	.word	0x2000129c
 8010e9c:	20001288 	.word	0x20001288

08010ea0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b088      	sub	sp, #32
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
 8010ea8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d10a      	bne.n	8010ec6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eb4:	f383 8811 	msr	BASEPRI, r3
 8010eb8:	f3bf 8f6f 	isb	sy
 8010ebc:	f3bf 8f4f 	dsb	sy
 8010ec0:	613b      	str	r3, [r7, #16]
}
 8010ec2:	bf00      	nop
 8010ec4:	e7fe      	b.n	8010ec4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010ec6:	683b      	ldr	r3, [r7, #0]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d10a      	bne.n	8010ee2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ed0:	f383 8811 	msr	BASEPRI, r3
 8010ed4:	f3bf 8f6f 	isb	sy
 8010ed8:	f3bf 8f4f 	dsb	sy
 8010edc:	60fb      	str	r3, [r7, #12]
}
 8010ede:	bf00      	nop
 8010ee0:	e7fe      	b.n	8010ee0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8010ee2:	f000 fe8f 	bl	8011c04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010ee6:	4b1d      	ldr	r3, [pc, #116]	; (8010f5c <xTaskCheckForTimeOut+0xbc>)
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	685b      	ldr	r3, [r3, #4]
 8010ef0:	69ba      	ldr	r2, [r7, #24]
 8010ef2:	1ad3      	subs	r3, r2, r3
 8010ef4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010ef6:	683b      	ldr	r3, [r7, #0]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010efe:	d102      	bne.n	8010f06 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010f00:	2300      	movs	r3, #0
 8010f02:	61fb      	str	r3, [r7, #28]
 8010f04:	e023      	b.n	8010f4e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	681a      	ldr	r2, [r3, #0]
 8010f0a:	4b15      	ldr	r3, [pc, #84]	; (8010f60 <xTaskCheckForTimeOut+0xc0>)
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	429a      	cmp	r2, r3
 8010f10:	d007      	beq.n	8010f22 <xTaskCheckForTimeOut+0x82>
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	685b      	ldr	r3, [r3, #4]
 8010f16:	69ba      	ldr	r2, [r7, #24]
 8010f18:	429a      	cmp	r2, r3
 8010f1a:	d302      	bcc.n	8010f22 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010f1c:	2301      	movs	r3, #1
 8010f1e:	61fb      	str	r3, [r7, #28]
 8010f20:	e015      	b.n	8010f4e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010f22:	683b      	ldr	r3, [r7, #0]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	697a      	ldr	r2, [r7, #20]
 8010f28:	429a      	cmp	r2, r3
 8010f2a:	d20b      	bcs.n	8010f44 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010f2c:	683b      	ldr	r3, [r7, #0]
 8010f2e:	681a      	ldr	r2, [r3, #0]
 8010f30:	697b      	ldr	r3, [r7, #20]
 8010f32:	1ad2      	subs	r2, r2, r3
 8010f34:	683b      	ldr	r3, [r7, #0]
 8010f36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010f38:	6878      	ldr	r0, [r7, #4]
 8010f3a:	f7ff ff9b 	bl	8010e74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010f3e:	2300      	movs	r3, #0
 8010f40:	61fb      	str	r3, [r7, #28]
 8010f42:	e004      	b.n	8010f4e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010f44:	683b      	ldr	r3, [r7, #0]
 8010f46:	2200      	movs	r2, #0
 8010f48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010f4a:	2301      	movs	r3, #1
 8010f4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010f4e:	f000 fe89 	bl	8011c64 <vPortExitCritical>

	return xReturn;
 8010f52:	69fb      	ldr	r3, [r7, #28]
}
 8010f54:	4618      	mov	r0, r3
 8010f56:	3720      	adds	r7, #32
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	bd80      	pop	{r7, pc}
 8010f5c:	20001288 	.word	0x20001288
 8010f60:	2000129c 	.word	0x2000129c

08010f64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010f64:	b480      	push	{r7}
 8010f66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010f68:	4b03      	ldr	r3, [pc, #12]	; (8010f78 <vTaskMissedYield+0x14>)
 8010f6a:	2201      	movs	r2, #1
 8010f6c:	601a      	str	r2, [r3, #0]
}
 8010f6e:	bf00      	nop
 8010f70:	46bd      	mov	sp, r7
 8010f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f76:	4770      	bx	lr
 8010f78:	20001298 	.word	0x20001298

08010f7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b082      	sub	sp, #8
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010f84:	f000 f852 	bl	801102c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010f88:	4b06      	ldr	r3, [pc, #24]	; (8010fa4 <prvIdleTask+0x28>)
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	2b01      	cmp	r3, #1
 8010f8e:	d9f9      	bls.n	8010f84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010f90:	4b05      	ldr	r3, [pc, #20]	; (8010fa8 <prvIdleTask+0x2c>)
 8010f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f96:	601a      	str	r2, [r3, #0]
 8010f98:	f3bf 8f4f 	dsb	sy
 8010f9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010fa0:	e7f0      	b.n	8010f84 <prvIdleTask+0x8>
 8010fa2:	bf00      	nop
 8010fa4:	20000db4 	.word	0x20000db4
 8010fa8:	e000ed04 	.word	0xe000ed04

08010fac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b082      	sub	sp, #8
 8010fb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	607b      	str	r3, [r7, #4]
 8010fb6:	e00c      	b.n	8010fd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010fb8:	687a      	ldr	r2, [r7, #4]
 8010fba:	4613      	mov	r3, r2
 8010fbc:	009b      	lsls	r3, r3, #2
 8010fbe:	4413      	add	r3, r2
 8010fc0:	009b      	lsls	r3, r3, #2
 8010fc2:	4a12      	ldr	r2, [pc, #72]	; (801100c <prvInitialiseTaskLists+0x60>)
 8010fc4:	4413      	add	r3, r2
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	f7fe fb62 	bl	800f690 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	3301      	adds	r3, #1
 8010fd0:	607b      	str	r3, [r7, #4]
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	2b37      	cmp	r3, #55	; 0x37
 8010fd6:	d9ef      	bls.n	8010fb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010fd8:	480d      	ldr	r0, [pc, #52]	; (8011010 <prvInitialiseTaskLists+0x64>)
 8010fda:	f7fe fb59 	bl	800f690 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010fde:	480d      	ldr	r0, [pc, #52]	; (8011014 <prvInitialiseTaskLists+0x68>)
 8010fe0:	f7fe fb56 	bl	800f690 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010fe4:	480c      	ldr	r0, [pc, #48]	; (8011018 <prvInitialiseTaskLists+0x6c>)
 8010fe6:	f7fe fb53 	bl	800f690 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010fea:	480c      	ldr	r0, [pc, #48]	; (801101c <prvInitialiseTaskLists+0x70>)
 8010fec:	f7fe fb50 	bl	800f690 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010ff0:	480b      	ldr	r0, [pc, #44]	; (8011020 <prvInitialiseTaskLists+0x74>)
 8010ff2:	f7fe fb4d 	bl	800f690 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010ff6:	4b0b      	ldr	r3, [pc, #44]	; (8011024 <prvInitialiseTaskLists+0x78>)
 8010ff8:	4a05      	ldr	r2, [pc, #20]	; (8011010 <prvInitialiseTaskLists+0x64>)
 8010ffa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010ffc:	4b0a      	ldr	r3, [pc, #40]	; (8011028 <prvInitialiseTaskLists+0x7c>)
 8010ffe:	4a05      	ldr	r2, [pc, #20]	; (8011014 <prvInitialiseTaskLists+0x68>)
 8011000:	601a      	str	r2, [r3, #0]
}
 8011002:	bf00      	nop
 8011004:	3708      	adds	r7, #8
 8011006:	46bd      	mov	sp, r7
 8011008:	bd80      	pop	{r7, pc}
 801100a:	bf00      	nop
 801100c:	20000db4 	.word	0x20000db4
 8011010:	20001214 	.word	0x20001214
 8011014:	20001228 	.word	0x20001228
 8011018:	20001244 	.word	0x20001244
 801101c:	20001258 	.word	0x20001258
 8011020:	20001270 	.word	0x20001270
 8011024:	2000123c 	.word	0x2000123c
 8011028:	20001240 	.word	0x20001240

0801102c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b082      	sub	sp, #8
 8011030:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011032:	e019      	b.n	8011068 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011034:	f000 fde6 	bl	8011c04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011038:	4b10      	ldr	r3, [pc, #64]	; (801107c <prvCheckTasksWaitingTermination+0x50>)
 801103a:	68db      	ldr	r3, [r3, #12]
 801103c:	68db      	ldr	r3, [r3, #12]
 801103e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	3304      	adds	r3, #4
 8011044:	4618      	mov	r0, r3
 8011046:	f7fe fbad 	bl	800f7a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801104a:	4b0d      	ldr	r3, [pc, #52]	; (8011080 <prvCheckTasksWaitingTermination+0x54>)
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	3b01      	subs	r3, #1
 8011050:	4a0b      	ldr	r2, [pc, #44]	; (8011080 <prvCheckTasksWaitingTermination+0x54>)
 8011052:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011054:	4b0b      	ldr	r3, [pc, #44]	; (8011084 <prvCheckTasksWaitingTermination+0x58>)
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	3b01      	subs	r3, #1
 801105a:	4a0a      	ldr	r2, [pc, #40]	; (8011084 <prvCheckTasksWaitingTermination+0x58>)
 801105c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801105e:	f000 fe01 	bl	8011c64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011062:	6878      	ldr	r0, [r7, #4]
 8011064:	f000 f810 	bl	8011088 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011068:	4b06      	ldr	r3, [pc, #24]	; (8011084 <prvCheckTasksWaitingTermination+0x58>)
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d1e1      	bne.n	8011034 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011070:	bf00      	nop
 8011072:	bf00      	nop
 8011074:	3708      	adds	r7, #8
 8011076:	46bd      	mov	sp, r7
 8011078:	bd80      	pop	{r7, pc}
 801107a:	bf00      	nop
 801107c:	20001258 	.word	0x20001258
 8011080:	20001284 	.word	0x20001284
 8011084:	2000126c 	.word	0x2000126c

08011088 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011088:	b580      	push	{r7, lr}
 801108a:	b084      	sub	sp, #16
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	3354      	adds	r3, #84	; 0x54
 8011094:	4618      	mov	r0, r3
 8011096:	f002 fdcb 	bl	8013c30 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d108      	bne.n	80110b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110a8:	4618      	mov	r0, r3
 80110aa:	f000 ff99 	bl	8011fe0 <vPortFree>
				vPortFree( pxTCB );
 80110ae:	6878      	ldr	r0, [r7, #4]
 80110b0:	f000 ff96 	bl	8011fe0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80110b4:	e018      	b.n	80110e8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80110bc:	2b01      	cmp	r3, #1
 80110be:	d103      	bne.n	80110c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80110c0:	6878      	ldr	r0, [r7, #4]
 80110c2:	f000 ff8d 	bl	8011fe0 <vPortFree>
	}
 80110c6:	e00f      	b.n	80110e8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80110ce:	2b02      	cmp	r3, #2
 80110d0:	d00a      	beq.n	80110e8 <prvDeleteTCB+0x60>
	__asm volatile
 80110d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110d6:	f383 8811 	msr	BASEPRI, r3
 80110da:	f3bf 8f6f 	isb	sy
 80110de:	f3bf 8f4f 	dsb	sy
 80110e2:	60fb      	str	r3, [r7, #12]
}
 80110e4:	bf00      	nop
 80110e6:	e7fe      	b.n	80110e6 <prvDeleteTCB+0x5e>
	}
 80110e8:	bf00      	nop
 80110ea:	3710      	adds	r7, #16
 80110ec:	46bd      	mov	sp, r7
 80110ee:	bd80      	pop	{r7, pc}

080110f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80110f0:	b480      	push	{r7}
 80110f2:	b083      	sub	sp, #12
 80110f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80110f6:	4b0c      	ldr	r3, [pc, #48]	; (8011128 <prvResetNextTaskUnblockTime+0x38>)
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d104      	bne.n	801110a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011100:	4b0a      	ldr	r3, [pc, #40]	; (801112c <prvResetNextTaskUnblockTime+0x3c>)
 8011102:	f04f 32ff 	mov.w	r2, #4294967295
 8011106:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011108:	e008      	b.n	801111c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801110a:	4b07      	ldr	r3, [pc, #28]	; (8011128 <prvResetNextTaskUnblockTime+0x38>)
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	68db      	ldr	r3, [r3, #12]
 8011110:	68db      	ldr	r3, [r3, #12]
 8011112:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	685b      	ldr	r3, [r3, #4]
 8011118:	4a04      	ldr	r2, [pc, #16]	; (801112c <prvResetNextTaskUnblockTime+0x3c>)
 801111a:	6013      	str	r3, [r2, #0]
}
 801111c:	bf00      	nop
 801111e:	370c      	adds	r7, #12
 8011120:	46bd      	mov	sp, r7
 8011122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011126:	4770      	bx	lr
 8011128:	2000123c 	.word	0x2000123c
 801112c:	200012a4 	.word	0x200012a4

08011130 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8011130:	b480      	push	{r7}
 8011132:	b083      	sub	sp, #12
 8011134:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8011136:	4b05      	ldr	r3, [pc, #20]	; (801114c <xTaskGetCurrentTaskHandle+0x1c>)
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	607b      	str	r3, [r7, #4]

		return xReturn;
 801113c:	687b      	ldr	r3, [r7, #4]
	}
 801113e:	4618      	mov	r0, r3
 8011140:	370c      	adds	r7, #12
 8011142:	46bd      	mov	sp, r7
 8011144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011148:	4770      	bx	lr
 801114a:	bf00      	nop
 801114c:	20000db0 	.word	0x20000db0

08011150 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011150:	b480      	push	{r7}
 8011152:	b083      	sub	sp, #12
 8011154:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011156:	4b0b      	ldr	r3, [pc, #44]	; (8011184 <xTaskGetSchedulerState+0x34>)
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d102      	bne.n	8011164 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801115e:	2301      	movs	r3, #1
 8011160:	607b      	str	r3, [r7, #4]
 8011162:	e008      	b.n	8011176 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011164:	4b08      	ldr	r3, [pc, #32]	; (8011188 <xTaskGetSchedulerState+0x38>)
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d102      	bne.n	8011172 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801116c:	2302      	movs	r3, #2
 801116e:	607b      	str	r3, [r7, #4]
 8011170:	e001      	b.n	8011176 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011172:	2300      	movs	r3, #0
 8011174:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011176:	687b      	ldr	r3, [r7, #4]
	}
 8011178:	4618      	mov	r0, r3
 801117a:	370c      	adds	r7, #12
 801117c:	46bd      	mov	sp, r7
 801117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011182:	4770      	bx	lr
 8011184:	20001290 	.word	0x20001290
 8011188:	200012ac 	.word	0x200012ac

0801118c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801118c:	b580      	push	{r7, lr}
 801118e:	b086      	sub	sp, #24
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011198:	2300      	movs	r3, #0
 801119a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d056      	beq.n	8011250 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80111a2:	4b2e      	ldr	r3, [pc, #184]	; (801125c <xTaskPriorityDisinherit+0xd0>)
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	693a      	ldr	r2, [r7, #16]
 80111a8:	429a      	cmp	r2, r3
 80111aa:	d00a      	beq.n	80111c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80111ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111b0:	f383 8811 	msr	BASEPRI, r3
 80111b4:	f3bf 8f6f 	isb	sy
 80111b8:	f3bf 8f4f 	dsb	sy
 80111bc:	60fb      	str	r3, [r7, #12]
}
 80111be:	bf00      	nop
 80111c0:	e7fe      	b.n	80111c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80111c2:	693b      	ldr	r3, [r7, #16]
 80111c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d10a      	bne.n	80111e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80111ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111ce:	f383 8811 	msr	BASEPRI, r3
 80111d2:	f3bf 8f6f 	isb	sy
 80111d6:	f3bf 8f4f 	dsb	sy
 80111da:	60bb      	str	r3, [r7, #8]
}
 80111dc:	bf00      	nop
 80111de:	e7fe      	b.n	80111de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80111e0:	693b      	ldr	r3, [r7, #16]
 80111e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80111e4:	1e5a      	subs	r2, r3, #1
 80111e6:	693b      	ldr	r3, [r7, #16]
 80111e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80111ea:	693b      	ldr	r3, [r7, #16]
 80111ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111ee:	693b      	ldr	r3, [r7, #16]
 80111f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80111f2:	429a      	cmp	r2, r3
 80111f4:	d02c      	beq.n	8011250 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80111f6:	693b      	ldr	r3, [r7, #16]
 80111f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d128      	bne.n	8011250 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80111fe:	693b      	ldr	r3, [r7, #16]
 8011200:	3304      	adds	r3, #4
 8011202:	4618      	mov	r0, r3
 8011204:	f7fe face 	bl	800f7a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011208:	693b      	ldr	r3, [r7, #16]
 801120a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801120c:	693b      	ldr	r3, [r7, #16]
 801120e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011210:	693b      	ldr	r3, [r7, #16]
 8011212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011214:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011218:	693b      	ldr	r3, [r7, #16]
 801121a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801121c:	693b      	ldr	r3, [r7, #16]
 801121e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011220:	4b0f      	ldr	r3, [pc, #60]	; (8011260 <xTaskPriorityDisinherit+0xd4>)
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	429a      	cmp	r2, r3
 8011226:	d903      	bls.n	8011230 <xTaskPriorityDisinherit+0xa4>
 8011228:	693b      	ldr	r3, [r7, #16]
 801122a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801122c:	4a0c      	ldr	r2, [pc, #48]	; (8011260 <xTaskPriorityDisinherit+0xd4>)
 801122e:	6013      	str	r3, [r2, #0]
 8011230:	693b      	ldr	r3, [r7, #16]
 8011232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011234:	4613      	mov	r3, r2
 8011236:	009b      	lsls	r3, r3, #2
 8011238:	4413      	add	r3, r2
 801123a:	009b      	lsls	r3, r3, #2
 801123c:	4a09      	ldr	r2, [pc, #36]	; (8011264 <xTaskPriorityDisinherit+0xd8>)
 801123e:	441a      	add	r2, r3
 8011240:	693b      	ldr	r3, [r7, #16]
 8011242:	3304      	adds	r3, #4
 8011244:	4619      	mov	r1, r3
 8011246:	4610      	mov	r0, r2
 8011248:	f7fe fa4f 	bl	800f6ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801124c:	2301      	movs	r3, #1
 801124e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011250:	697b      	ldr	r3, [r7, #20]
	}
 8011252:	4618      	mov	r0, r3
 8011254:	3718      	adds	r7, #24
 8011256:	46bd      	mov	sp, r7
 8011258:	bd80      	pop	{r7, pc}
 801125a:	bf00      	nop
 801125c:	20000db0 	.word	0x20000db0
 8011260:	2000128c 	.word	0x2000128c
 8011264:	20000db4 	.word	0x20000db4

08011268 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b084      	sub	sp, #16
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
 8011270:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011272:	4b21      	ldr	r3, [pc, #132]	; (80112f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011278:	4b20      	ldr	r3, [pc, #128]	; (80112fc <prvAddCurrentTaskToDelayedList+0x94>)
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	3304      	adds	r3, #4
 801127e:	4618      	mov	r0, r3
 8011280:	f7fe fa90 	bl	800f7a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	f1b3 3fff 	cmp.w	r3, #4294967295
 801128a:	d10a      	bne.n	80112a2 <prvAddCurrentTaskToDelayedList+0x3a>
 801128c:	683b      	ldr	r3, [r7, #0]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d007      	beq.n	80112a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011292:	4b1a      	ldr	r3, [pc, #104]	; (80112fc <prvAddCurrentTaskToDelayedList+0x94>)
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	3304      	adds	r3, #4
 8011298:	4619      	mov	r1, r3
 801129a:	4819      	ldr	r0, [pc, #100]	; (8011300 <prvAddCurrentTaskToDelayedList+0x98>)
 801129c:	f7fe fa25 	bl	800f6ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80112a0:	e026      	b.n	80112f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80112a2:	68fa      	ldr	r2, [r7, #12]
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	4413      	add	r3, r2
 80112a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80112aa:	4b14      	ldr	r3, [pc, #80]	; (80112fc <prvAddCurrentTaskToDelayedList+0x94>)
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	68ba      	ldr	r2, [r7, #8]
 80112b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80112b2:	68ba      	ldr	r2, [r7, #8]
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	429a      	cmp	r2, r3
 80112b8:	d209      	bcs.n	80112ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80112ba:	4b12      	ldr	r3, [pc, #72]	; (8011304 <prvAddCurrentTaskToDelayedList+0x9c>)
 80112bc:	681a      	ldr	r2, [r3, #0]
 80112be:	4b0f      	ldr	r3, [pc, #60]	; (80112fc <prvAddCurrentTaskToDelayedList+0x94>)
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	3304      	adds	r3, #4
 80112c4:	4619      	mov	r1, r3
 80112c6:	4610      	mov	r0, r2
 80112c8:	f7fe fa33 	bl	800f732 <vListInsert>
}
 80112cc:	e010      	b.n	80112f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80112ce:	4b0e      	ldr	r3, [pc, #56]	; (8011308 <prvAddCurrentTaskToDelayedList+0xa0>)
 80112d0:	681a      	ldr	r2, [r3, #0]
 80112d2:	4b0a      	ldr	r3, [pc, #40]	; (80112fc <prvAddCurrentTaskToDelayedList+0x94>)
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	3304      	adds	r3, #4
 80112d8:	4619      	mov	r1, r3
 80112da:	4610      	mov	r0, r2
 80112dc:	f7fe fa29 	bl	800f732 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80112e0:	4b0a      	ldr	r3, [pc, #40]	; (801130c <prvAddCurrentTaskToDelayedList+0xa4>)
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	68ba      	ldr	r2, [r7, #8]
 80112e6:	429a      	cmp	r2, r3
 80112e8:	d202      	bcs.n	80112f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80112ea:	4a08      	ldr	r2, [pc, #32]	; (801130c <prvAddCurrentTaskToDelayedList+0xa4>)
 80112ec:	68bb      	ldr	r3, [r7, #8]
 80112ee:	6013      	str	r3, [r2, #0]
}
 80112f0:	bf00      	nop
 80112f2:	3710      	adds	r7, #16
 80112f4:	46bd      	mov	sp, r7
 80112f6:	bd80      	pop	{r7, pc}
 80112f8:	20001288 	.word	0x20001288
 80112fc:	20000db0 	.word	0x20000db0
 8011300:	20001270 	.word	0x20001270
 8011304:	20001240 	.word	0x20001240
 8011308:	2000123c 	.word	0x2000123c
 801130c:	200012a4 	.word	0x200012a4

08011310 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b08a      	sub	sp, #40	; 0x28
 8011314:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011316:	2300      	movs	r3, #0
 8011318:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801131a:	f000 fb07 	bl	801192c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801131e:	4b1c      	ldr	r3, [pc, #112]	; (8011390 <xTimerCreateTimerTask+0x80>)
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d021      	beq.n	801136a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011326:	2300      	movs	r3, #0
 8011328:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801132a:	2300      	movs	r3, #0
 801132c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801132e:	1d3a      	adds	r2, r7, #4
 8011330:	f107 0108 	add.w	r1, r7, #8
 8011334:	f107 030c 	add.w	r3, r7, #12
 8011338:	4618      	mov	r0, r3
 801133a:	f7fe f98f 	bl	800f65c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801133e:	6879      	ldr	r1, [r7, #4]
 8011340:	68bb      	ldr	r3, [r7, #8]
 8011342:	68fa      	ldr	r2, [r7, #12]
 8011344:	9202      	str	r2, [sp, #8]
 8011346:	9301      	str	r3, [sp, #4]
 8011348:	2302      	movs	r3, #2
 801134a:	9300      	str	r3, [sp, #0]
 801134c:	2300      	movs	r3, #0
 801134e:	460a      	mov	r2, r1
 8011350:	4910      	ldr	r1, [pc, #64]	; (8011394 <xTimerCreateTimerTask+0x84>)
 8011352:	4811      	ldr	r0, [pc, #68]	; (8011398 <xTimerCreateTimerTask+0x88>)
 8011354:	f7fe ff3c 	bl	80101d0 <xTaskCreateStatic>
 8011358:	4603      	mov	r3, r0
 801135a:	4a10      	ldr	r2, [pc, #64]	; (801139c <xTimerCreateTimerTask+0x8c>)
 801135c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801135e:	4b0f      	ldr	r3, [pc, #60]	; (801139c <xTimerCreateTimerTask+0x8c>)
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d001      	beq.n	801136a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011366:	2301      	movs	r3, #1
 8011368:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801136a:	697b      	ldr	r3, [r7, #20]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d10a      	bne.n	8011386 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8011370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011374:	f383 8811 	msr	BASEPRI, r3
 8011378:	f3bf 8f6f 	isb	sy
 801137c:	f3bf 8f4f 	dsb	sy
 8011380:	613b      	str	r3, [r7, #16]
}
 8011382:	bf00      	nop
 8011384:	e7fe      	b.n	8011384 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8011386:	697b      	ldr	r3, [r7, #20]
}
 8011388:	4618      	mov	r0, r3
 801138a:	3718      	adds	r7, #24
 801138c:	46bd      	mov	sp, r7
 801138e:	bd80      	pop	{r7, pc}
 8011390:	200012e0 	.word	0x200012e0
 8011394:	0801a268 	.word	0x0801a268
 8011398:	080114d5 	.word	0x080114d5
 801139c:	200012e4 	.word	0x200012e4

080113a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b08a      	sub	sp, #40	; 0x28
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	60f8      	str	r0, [r7, #12]
 80113a8:	60b9      	str	r1, [r7, #8]
 80113aa:	607a      	str	r2, [r7, #4]
 80113ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80113ae:	2300      	movs	r3, #0
 80113b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d10a      	bne.n	80113ce <xTimerGenericCommand+0x2e>
	__asm volatile
 80113b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113bc:	f383 8811 	msr	BASEPRI, r3
 80113c0:	f3bf 8f6f 	isb	sy
 80113c4:	f3bf 8f4f 	dsb	sy
 80113c8:	623b      	str	r3, [r7, #32]
}
 80113ca:	bf00      	nop
 80113cc:	e7fe      	b.n	80113cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80113ce:	4b1a      	ldr	r3, [pc, #104]	; (8011438 <xTimerGenericCommand+0x98>)
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d02a      	beq.n	801142c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80113d6:	68bb      	ldr	r3, [r7, #8]
 80113d8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80113e2:	68bb      	ldr	r3, [r7, #8]
 80113e4:	2b05      	cmp	r3, #5
 80113e6:	dc18      	bgt.n	801141a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80113e8:	f7ff feb2 	bl	8011150 <xTaskGetSchedulerState>
 80113ec:	4603      	mov	r3, r0
 80113ee:	2b02      	cmp	r3, #2
 80113f0:	d109      	bne.n	8011406 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80113f2:	4b11      	ldr	r3, [pc, #68]	; (8011438 <xTimerGenericCommand+0x98>)
 80113f4:	6818      	ldr	r0, [r3, #0]
 80113f6:	f107 0110 	add.w	r1, r7, #16
 80113fa:	2300      	movs	r3, #0
 80113fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113fe:	f7fe faff 	bl	800fa00 <xQueueGenericSend>
 8011402:	6278      	str	r0, [r7, #36]	; 0x24
 8011404:	e012      	b.n	801142c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011406:	4b0c      	ldr	r3, [pc, #48]	; (8011438 <xTimerGenericCommand+0x98>)
 8011408:	6818      	ldr	r0, [r3, #0]
 801140a:	f107 0110 	add.w	r1, r7, #16
 801140e:	2300      	movs	r3, #0
 8011410:	2200      	movs	r2, #0
 8011412:	f7fe faf5 	bl	800fa00 <xQueueGenericSend>
 8011416:	6278      	str	r0, [r7, #36]	; 0x24
 8011418:	e008      	b.n	801142c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801141a:	4b07      	ldr	r3, [pc, #28]	; (8011438 <xTimerGenericCommand+0x98>)
 801141c:	6818      	ldr	r0, [r3, #0]
 801141e:	f107 0110 	add.w	r1, r7, #16
 8011422:	2300      	movs	r3, #0
 8011424:	683a      	ldr	r2, [r7, #0]
 8011426:	f7fe fbe9 	bl	800fbfc <xQueueGenericSendFromISR>
 801142a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801142e:	4618      	mov	r0, r3
 8011430:	3728      	adds	r7, #40	; 0x28
 8011432:	46bd      	mov	sp, r7
 8011434:	bd80      	pop	{r7, pc}
 8011436:	bf00      	nop
 8011438:	200012e0 	.word	0x200012e0

0801143c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801143c:	b580      	push	{r7, lr}
 801143e:	b088      	sub	sp, #32
 8011440:	af02      	add	r7, sp, #8
 8011442:	6078      	str	r0, [r7, #4]
 8011444:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011446:	4b22      	ldr	r3, [pc, #136]	; (80114d0 <prvProcessExpiredTimer+0x94>)
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	68db      	ldr	r3, [r3, #12]
 801144c:	68db      	ldr	r3, [r3, #12]
 801144e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011450:	697b      	ldr	r3, [r7, #20]
 8011452:	3304      	adds	r3, #4
 8011454:	4618      	mov	r0, r3
 8011456:	f7fe f9a5 	bl	800f7a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801145a:	697b      	ldr	r3, [r7, #20]
 801145c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011460:	f003 0304 	and.w	r3, r3, #4
 8011464:	2b00      	cmp	r3, #0
 8011466:	d022      	beq.n	80114ae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011468:	697b      	ldr	r3, [r7, #20]
 801146a:	699a      	ldr	r2, [r3, #24]
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	18d1      	adds	r1, r2, r3
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	683a      	ldr	r2, [r7, #0]
 8011474:	6978      	ldr	r0, [r7, #20]
 8011476:	f000 f8d1 	bl	801161c <prvInsertTimerInActiveList>
 801147a:	4603      	mov	r3, r0
 801147c:	2b00      	cmp	r3, #0
 801147e:	d01f      	beq.n	80114c0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011480:	2300      	movs	r3, #0
 8011482:	9300      	str	r3, [sp, #0]
 8011484:	2300      	movs	r3, #0
 8011486:	687a      	ldr	r2, [r7, #4]
 8011488:	2100      	movs	r1, #0
 801148a:	6978      	ldr	r0, [r7, #20]
 801148c:	f7ff ff88 	bl	80113a0 <xTimerGenericCommand>
 8011490:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011492:	693b      	ldr	r3, [r7, #16]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d113      	bne.n	80114c0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8011498:	f04f 0350 	mov.w	r3, #80	; 0x50
 801149c:	f383 8811 	msr	BASEPRI, r3
 80114a0:	f3bf 8f6f 	isb	sy
 80114a4:	f3bf 8f4f 	dsb	sy
 80114a8:	60fb      	str	r3, [r7, #12]
}
 80114aa:	bf00      	nop
 80114ac:	e7fe      	b.n	80114ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80114ae:	697b      	ldr	r3, [r7, #20]
 80114b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80114b4:	f023 0301 	bic.w	r3, r3, #1
 80114b8:	b2da      	uxtb	r2, r3
 80114ba:	697b      	ldr	r3, [r7, #20]
 80114bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80114c0:	697b      	ldr	r3, [r7, #20]
 80114c2:	6a1b      	ldr	r3, [r3, #32]
 80114c4:	6978      	ldr	r0, [r7, #20]
 80114c6:	4798      	blx	r3
}
 80114c8:	bf00      	nop
 80114ca:	3718      	adds	r7, #24
 80114cc:	46bd      	mov	sp, r7
 80114ce:	bd80      	pop	{r7, pc}
 80114d0:	200012d8 	.word	0x200012d8

080114d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80114d4:	b580      	push	{r7, lr}
 80114d6:	b084      	sub	sp, #16
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80114dc:	f107 0308 	add.w	r3, r7, #8
 80114e0:	4618      	mov	r0, r3
 80114e2:	f000 f857 	bl	8011594 <prvGetNextExpireTime>
 80114e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80114e8:	68bb      	ldr	r3, [r7, #8]
 80114ea:	4619      	mov	r1, r3
 80114ec:	68f8      	ldr	r0, [r7, #12]
 80114ee:	f000 f803 	bl	80114f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80114f2:	f000 f8d5 	bl	80116a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80114f6:	e7f1      	b.n	80114dc <prvTimerTask+0x8>

080114f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b084      	sub	sp, #16
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
 8011500:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011502:	f7ff fa29 	bl	8010958 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011506:	f107 0308 	add.w	r3, r7, #8
 801150a:	4618      	mov	r0, r3
 801150c:	f000 f866 	bl	80115dc <prvSampleTimeNow>
 8011510:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011512:	68bb      	ldr	r3, [r7, #8]
 8011514:	2b00      	cmp	r3, #0
 8011516:	d130      	bne.n	801157a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011518:	683b      	ldr	r3, [r7, #0]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d10a      	bne.n	8011534 <prvProcessTimerOrBlockTask+0x3c>
 801151e:	687a      	ldr	r2, [r7, #4]
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	429a      	cmp	r2, r3
 8011524:	d806      	bhi.n	8011534 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011526:	f7ff fa25 	bl	8010974 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801152a:	68f9      	ldr	r1, [r7, #12]
 801152c:	6878      	ldr	r0, [r7, #4]
 801152e:	f7ff ff85 	bl	801143c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011532:	e024      	b.n	801157e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011534:	683b      	ldr	r3, [r7, #0]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d008      	beq.n	801154c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801153a:	4b13      	ldr	r3, [pc, #76]	; (8011588 <prvProcessTimerOrBlockTask+0x90>)
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d101      	bne.n	8011548 <prvProcessTimerOrBlockTask+0x50>
 8011544:	2301      	movs	r3, #1
 8011546:	e000      	b.n	801154a <prvProcessTimerOrBlockTask+0x52>
 8011548:	2300      	movs	r3, #0
 801154a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801154c:	4b0f      	ldr	r3, [pc, #60]	; (801158c <prvProcessTimerOrBlockTask+0x94>)
 801154e:	6818      	ldr	r0, [r3, #0]
 8011550:	687a      	ldr	r2, [r7, #4]
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	1ad3      	subs	r3, r2, r3
 8011556:	683a      	ldr	r2, [r7, #0]
 8011558:	4619      	mov	r1, r3
 801155a:	f7fe fe05 	bl	8010168 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801155e:	f7ff fa09 	bl	8010974 <xTaskResumeAll>
 8011562:	4603      	mov	r3, r0
 8011564:	2b00      	cmp	r3, #0
 8011566:	d10a      	bne.n	801157e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011568:	4b09      	ldr	r3, [pc, #36]	; (8011590 <prvProcessTimerOrBlockTask+0x98>)
 801156a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801156e:	601a      	str	r2, [r3, #0]
 8011570:	f3bf 8f4f 	dsb	sy
 8011574:	f3bf 8f6f 	isb	sy
}
 8011578:	e001      	b.n	801157e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801157a:	f7ff f9fb 	bl	8010974 <xTaskResumeAll>
}
 801157e:	bf00      	nop
 8011580:	3710      	adds	r7, #16
 8011582:	46bd      	mov	sp, r7
 8011584:	bd80      	pop	{r7, pc}
 8011586:	bf00      	nop
 8011588:	200012dc 	.word	0x200012dc
 801158c:	200012e0 	.word	0x200012e0
 8011590:	e000ed04 	.word	0xe000ed04

08011594 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011594:	b480      	push	{r7}
 8011596:	b085      	sub	sp, #20
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801159c:	4b0e      	ldr	r3, [pc, #56]	; (80115d8 <prvGetNextExpireTime+0x44>)
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d101      	bne.n	80115aa <prvGetNextExpireTime+0x16>
 80115a6:	2201      	movs	r2, #1
 80115a8:	e000      	b.n	80115ac <prvGetNextExpireTime+0x18>
 80115aa:	2200      	movs	r2, #0
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d105      	bne.n	80115c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80115b8:	4b07      	ldr	r3, [pc, #28]	; (80115d8 <prvGetNextExpireTime+0x44>)
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	68db      	ldr	r3, [r3, #12]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	60fb      	str	r3, [r7, #12]
 80115c2:	e001      	b.n	80115c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80115c4:	2300      	movs	r3, #0
 80115c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80115c8:	68fb      	ldr	r3, [r7, #12]
}
 80115ca:	4618      	mov	r0, r3
 80115cc:	3714      	adds	r7, #20
 80115ce:	46bd      	mov	sp, r7
 80115d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d4:	4770      	bx	lr
 80115d6:	bf00      	nop
 80115d8:	200012d8 	.word	0x200012d8

080115dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80115dc:	b580      	push	{r7, lr}
 80115de:	b084      	sub	sp, #16
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80115e4:	f7ff fa64 	bl	8010ab0 <xTaskGetTickCount>
 80115e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80115ea:	4b0b      	ldr	r3, [pc, #44]	; (8011618 <prvSampleTimeNow+0x3c>)
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	68fa      	ldr	r2, [r7, #12]
 80115f0:	429a      	cmp	r2, r3
 80115f2:	d205      	bcs.n	8011600 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80115f4:	f000 f936 	bl	8011864 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	2201      	movs	r2, #1
 80115fc:	601a      	str	r2, [r3, #0]
 80115fe:	e002      	b.n	8011606 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	2200      	movs	r2, #0
 8011604:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011606:	4a04      	ldr	r2, [pc, #16]	; (8011618 <prvSampleTimeNow+0x3c>)
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801160c:	68fb      	ldr	r3, [r7, #12]
}
 801160e:	4618      	mov	r0, r3
 8011610:	3710      	adds	r7, #16
 8011612:	46bd      	mov	sp, r7
 8011614:	bd80      	pop	{r7, pc}
 8011616:	bf00      	nop
 8011618:	200012e8 	.word	0x200012e8

0801161c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801161c:	b580      	push	{r7, lr}
 801161e:	b086      	sub	sp, #24
 8011620:	af00      	add	r7, sp, #0
 8011622:	60f8      	str	r0, [r7, #12]
 8011624:	60b9      	str	r1, [r7, #8]
 8011626:	607a      	str	r2, [r7, #4]
 8011628:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801162a:	2300      	movs	r3, #0
 801162c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	68ba      	ldr	r2, [r7, #8]
 8011632:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	68fa      	ldr	r2, [r7, #12]
 8011638:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801163a:	68ba      	ldr	r2, [r7, #8]
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	429a      	cmp	r2, r3
 8011640:	d812      	bhi.n	8011668 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011642:	687a      	ldr	r2, [r7, #4]
 8011644:	683b      	ldr	r3, [r7, #0]
 8011646:	1ad2      	subs	r2, r2, r3
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	699b      	ldr	r3, [r3, #24]
 801164c:	429a      	cmp	r2, r3
 801164e:	d302      	bcc.n	8011656 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011650:	2301      	movs	r3, #1
 8011652:	617b      	str	r3, [r7, #20]
 8011654:	e01b      	b.n	801168e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011656:	4b10      	ldr	r3, [pc, #64]	; (8011698 <prvInsertTimerInActiveList+0x7c>)
 8011658:	681a      	ldr	r2, [r3, #0]
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	3304      	adds	r3, #4
 801165e:	4619      	mov	r1, r3
 8011660:	4610      	mov	r0, r2
 8011662:	f7fe f866 	bl	800f732 <vListInsert>
 8011666:	e012      	b.n	801168e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011668:	687a      	ldr	r2, [r7, #4]
 801166a:	683b      	ldr	r3, [r7, #0]
 801166c:	429a      	cmp	r2, r3
 801166e:	d206      	bcs.n	801167e <prvInsertTimerInActiveList+0x62>
 8011670:	68ba      	ldr	r2, [r7, #8]
 8011672:	683b      	ldr	r3, [r7, #0]
 8011674:	429a      	cmp	r2, r3
 8011676:	d302      	bcc.n	801167e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011678:	2301      	movs	r3, #1
 801167a:	617b      	str	r3, [r7, #20]
 801167c:	e007      	b.n	801168e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801167e:	4b07      	ldr	r3, [pc, #28]	; (801169c <prvInsertTimerInActiveList+0x80>)
 8011680:	681a      	ldr	r2, [r3, #0]
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	3304      	adds	r3, #4
 8011686:	4619      	mov	r1, r3
 8011688:	4610      	mov	r0, r2
 801168a:	f7fe f852 	bl	800f732 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801168e:	697b      	ldr	r3, [r7, #20]
}
 8011690:	4618      	mov	r0, r3
 8011692:	3718      	adds	r7, #24
 8011694:	46bd      	mov	sp, r7
 8011696:	bd80      	pop	{r7, pc}
 8011698:	200012dc 	.word	0x200012dc
 801169c:	200012d8 	.word	0x200012d8

080116a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80116a0:	b580      	push	{r7, lr}
 80116a2:	b08e      	sub	sp, #56	; 0x38
 80116a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80116a6:	e0ca      	b.n	801183e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	da18      	bge.n	80116e0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80116ae:	1d3b      	adds	r3, r7, #4
 80116b0:	3304      	adds	r3, #4
 80116b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80116b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d10a      	bne.n	80116d0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80116ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116be:	f383 8811 	msr	BASEPRI, r3
 80116c2:	f3bf 8f6f 	isb	sy
 80116c6:	f3bf 8f4f 	dsb	sy
 80116ca:	61fb      	str	r3, [r7, #28]
}
 80116cc:	bf00      	nop
 80116ce:	e7fe      	b.n	80116ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80116d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80116d6:	6850      	ldr	r0, [r2, #4]
 80116d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80116da:	6892      	ldr	r2, [r2, #8]
 80116dc:	4611      	mov	r1, r2
 80116de:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	f2c0 80aa 	blt.w	801183c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80116ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116ee:	695b      	ldr	r3, [r3, #20]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d004      	beq.n	80116fe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80116f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116f6:	3304      	adds	r3, #4
 80116f8:	4618      	mov	r0, r3
 80116fa:	f7fe f853 	bl	800f7a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80116fe:	463b      	mov	r3, r7
 8011700:	4618      	mov	r0, r3
 8011702:	f7ff ff6b 	bl	80115dc <prvSampleTimeNow>
 8011706:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	2b09      	cmp	r3, #9
 801170c:	f200 8097 	bhi.w	801183e <prvProcessReceivedCommands+0x19e>
 8011710:	a201      	add	r2, pc, #4	; (adr r2, 8011718 <prvProcessReceivedCommands+0x78>)
 8011712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011716:	bf00      	nop
 8011718:	08011741 	.word	0x08011741
 801171c:	08011741 	.word	0x08011741
 8011720:	08011741 	.word	0x08011741
 8011724:	080117b5 	.word	0x080117b5
 8011728:	080117c9 	.word	0x080117c9
 801172c:	08011813 	.word	0x08011813
 8011730:	08011741 	.word	0x08011741
 8011734:	08011741 	.word	0x08011741
 8011738:	080117b5 	.word	0x080117b5
 801173c:	080117c9 	.word	0x080117c9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011742:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011746:	f043 0301 	orr.w	r3, r3, #1
 801174a:	b2da      	uxtb	r2, r3
 801174c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801174e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011752:	68ba      	ldr	r2, [r7, #8]
 8011754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011756:	699b      	ldr	r3, [r3, #24]
 8011758:	18d1      	adds	r1, r2, r3
 801175a:	68bb      	ldr	r3, [r7, #8]
 801175c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801175e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011760:	f7ff ff5c 	bl	801161c <prvInsertTimerInActiveList>
 8011764:	4603      	mov	r3, r0
 8011766:	2b00      	cmp	r3, #0
 8011768:	d069      	beq.n	801183e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801176a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801176c:	6a1b      	ldr	r3, [r3, #32]
 801176e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011770:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011774:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011778:	f003 0304 	and.w	r3, r3, #4
 801177c:	2b00      	cmp	r3, #0
 801177e:	d05e      	beq.n	801183e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011780:	68ba      	ldr	r2, [r7, #8]
 8011782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011784:	699b      	ldr	r3, [r3, #24]
 8011786:	441a      	add	r2, r3
 8011788:	2300      	movs	r3, #0
 801178a:	9300      	str	r3, [sp, #0]
 801178c:	2300      	movs	r3, #0
 801178e:	2100      	movs	r1, #0
 8011790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011792:	f7ff fe05 	bl	80113a0 <xTimerGenericCommand>
 8011796:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011798:	6a3b      	ldr	r3, [r7, #32]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d14f      	bne.n	801183e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801179e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117a2:	f383 8811 	msr	BASEPRI, r3
 80117a6:	f3bf 8f6f 	isb	sy
 80117aa:	f3bf 8f4f 	dsb	sy
 80117ae:	61bb      	str	r3, [r7, #24]
}
 80117b0:	bf00      	nop
 80117b2:	e7fe      	b.n	80117b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80117b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80117ba:	f023 0301 	bic.w	r3, r3, #1
 80117be:	b2da      	uxtb	r2, r3
 80117c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80117c6:	e03a      	b.n	801183e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80117c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80117ce:	f043 0301 	orr.w	r3, r3, #1
 80117d2:	b2da      	uxtb	r2, r3
 80117d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80117da:	68ba      	ldr	r2, [r7, #8]
 80117dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80117e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117e2:	699b      	ldr	r3, [r3, #24]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d10a      	bne.n	80117fe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80117e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117ec:	f383 8811 	msr	BASEPRI, r3
 80117f0:	f3bf 8f6f 	isb	sy
 80117f4:	f3bf 8f4f 	dsb	sy
 80117f8:	617b      	str	r3, [r7, #20]
}
 80117fa:	bf00      	nop
 80117fc:	e7fe      	b.n	80117fc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80117fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011800:	699a      	ldr	r2, [r3, #24]
 8011802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011804:	18d1      	adds	r1, r2, r3
 8011806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801180a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801180c:	f7ff ff06 	bl	801161c <prvInsertTimerInActiveList>
					break;
 8011810:	e015      	b.n	801183e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011814:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011818:	f003 0302 	and.w	r3, r3, #2
 801181c:	2b00      	cmp	r3, #0
 801181e:	d103      	bne.n	8011828 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8011820:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011822:	f000 fbdd 	bl	8011fe0 <vPortFree>
 8011826:	e00a      	b.n	801183e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801182a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801182e:	f023 0301 	bic.w	r3, r3, #1
 8011832:	b2da      	uxtb	r2, r3
 8011834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011836:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801183a:	e000      	b.n	801183e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801183c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801183e:	4b08      	ldr	r3, [pc, #32]	; (8011860 <prvProcessReceivedCommands+0x1c0>)
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	1d39      	adds	r1, r7, #4
 8011844:	2200      	movs	r2, #0
 8011846:	4618      	mov	r0, r3
 8011848:	f7fe fa74 	bl	800fd34 <xQueueReceive>
 801184c:	4603      	mov	r3, r0
 801184e:	2b00      	cmp	r3, #0
 8011850:	f47f af2a 	bne.w	80116a8 <prvProcessReceivedCommands+0x8>
	}
}
 8011854:	bf00      	nop
 8011856:	bf00      	nop
 8011858:	3730      	adds	r7, #48	; 0x30
 801185a:	46bd      	mov	sp, r7
 801185c:	bd80      	pop	{r7, pc}
 801185e:	bf00      	nop
 8011860:	200012e0 	.word	0x200012e0

08011864 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011864:	b580      	push	{r7, lr}
 8011866:	b088      	sub	sp, #32
 8011868:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801186a:	e048      	b.n	80118fe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801186c:	4b2d      	ldr	r3, [pc, #180]	; (8011924 <prvSwitchTimerLists+0xc0>)
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	68db      	ldr	r3, [r3, #12]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011876:	4b2b      	ldr	r3, [pc, #172]	; (8011924 <prvSwitchTimerLists+0xc0>)
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	68db      	ldr	r3, [r3, #12]
 801187c:	68db      	ldr	r3, [r3, #12]
 801187e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	3304      	adds	r3, #4
 8011884:	4618      	mov	r0, r3
 8011886:	f7fd ff8d 	bl	800f7a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	6a1b      	ldr	r3, [r3, #32]
 801188e:	68f8      	ldr	r0, [r7, #12]
 8011890:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011898:	f003 0304 	and.w	r3, r3, #4
 801189c:	2b00      	cmp	r3, #0
 801189e:	d02e      	beq.n	80118fe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	699b      	ldr	r3, [r3, #24]
 80118a4:	693a      	ldr	r2, [r7, #16]
 80118a6:	4413      	add	r3, r2
 80118a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80118aa:	68ba      	ldr	r2, [r7, #8]
 80118ac:	693b      	ldr	r3, [r7, #16]
 80118ae:	429a      	cmp	r2, r3
 80118b0:	d90e      	bls.n	80118d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	68ba      	ldr	r2, [r7, #8]
 80118b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	68fa      	ldr	r2, [r7, #12]
 80118bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80118be:	4b19      	ldr	r3, [pc, #100]	; (8011924 <prvSwitchTimerLists+0xc0>)
 80118c0:	681a      	ldr	r2, [r3, #0]
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	3304      	adds	r3, #4
 80118c6:	4619      	mov	r1, r3
 80118c8:	4610      	mov	r0, r2
 80118ca:	f7fd ff32 	bl	800f732 <vListInsert>
 80118ce:	e016      	b.n	80118fe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80118d0:	2300      	movs	r3, #0
 80118d2:	9300      	str	r3, [sp, #0]
 80118d4:	2300      	movs	r3, #0
 80118d6:	693a      	ldr	r2, [r7, #16]
 80118d8:	2100      	movs	r1, #0
 80118da:	68f8      	ldr	r0, [r7, #12]
 80118dc:	f7ff fd60 	bl	80113a0 <xTimerGenericCommand>
 80118e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d10a      	bne.n	80118fe <prvSwitchTimerLists+0x9a>
	__asm volatile
 80118e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118ec:	f383 8811 	msr	BASEPRI, r3
 80118f0:	f3bf 8f6f 	isb	sy
 80118f4:	f3bf 8f4f 	dsb	sy
 80118f8:	603b      	str	r3, [r7, #0]
}
 80118fa:	bf00      	nop
 80118fc:	e7fe      	b.n	80118fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80118fe:	4b09      	ldr	r3, [pc, #36]	; (8011924 <prvSwitchTimerLists+0xc0>)
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	2b00      	cmp	r3, #0
 8011906:	d1b1      	bne.n	801186c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011908:	4b06      	ldr	r3, [pc, #24]	; (8011924 <prvSwitchTimerLists+0xc0>)
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801190e:	4b06      	ldr	r3, [pc, #24]	; (8011928 <prvSwitchTimerLists+0xc4>)
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	4a04      	ldr	r2, [pc, #16]	; (8011924 <prvSwitchTimerLists+0xc0>)
 8011914:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011916:	4a04      	ldr	r2, [pc, #16]	; (8011928 <prvSwitchTimerLists+0xc4>)
 8011918:	697b      	ldr	r3, [r7, #20]
 801191a:	6013      	str	r3, [r2, #0]
}
 801191c:	bf00      	nop
 801191e:	3718      	adds	r7, #24
 8011920:	46bd      	mov	sp, r7
 8011922:	bd80      	pop	{r7, pc}
 8011924:	200012d8 	.word	0x200012d8
 8011928:	200012dc 	.word	0x200012dc

0801192c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801192c:	b580      	push	{r7, lr}
 801192e:	b082      	sub	sp, #8
 8011930:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011932:	f000 f967 	bl	8011c04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011936:	4b15      	ldr	r3, [pc, #84]	; (801198c <prvCheckForValidListAndQueue+0x60>)
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	2b00      	cmp	r3, #0
 801193c:	d120      	bne.n	8011980 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801193e:	4814      	ldr	r0, [pc, #80]	; (8011990 <prvCheckForValidListAndQueue+0x64>)
 8011940:	f7fd fea6 	bl	800f690 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011944:	4813      	ldr	r0, [pc, #76]	; (8011994 <prvCheckForValidListAndQueue+0x68>)
 8011946:	f7fd fea3 	bl	800f690 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801194a:	4b13      	ldr	r3, [pc, #76]	; (8011998 <prvCheckForValidListAndQueue+0x6c>)
 801194c:	4a10      	ldr	r2, [pc, #64]	; (8011990 <prvCheckForValidListAndQueue+0x64>)
 801194e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011950:	4b12      	ldr	r3, [pc, #72]	; (801199c <prvCheckForValidListAndQueue+0x70>)
 8011952:	4a10      	ldr	r2, [pc, #64]	; (8011994 <prvCheckForValidListAndQueue+0x68>)
 8011954:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011956:	2300      	movs	r3, #0
 8011958:	9300      	str	r3, [sp, #0]
 801195a:	4b11      	ldr	r3, [pc, #68]	; (80119a0 <prvCheckForValidListAndQueue+0x74>)
 801195c:	4a11      	ldr	r2, [pc, #68]	; (80119a4 <prvCheckForValidListAndQueue+0x78>)
 801195e:	2110      	movs	r1, #16
 8011960:	200a      	movs	r0, #10
 8011962:	f7fd ffb1 	bl	800f8c8 <xQueueGenericCreateStatic>
 8011966:	4603      	mov	r3, r0
 8011968:	4a08      	ldr	r2, [pc, #32]	; (801198c <prvCheckForValidListAndQueue+0x60>)
 801196a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801196c:	4b07      	ldr	r3, [pc, #28]	; (801198c <prvCheckForValidListAndQueue+0x60>)
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d005      	beq.n	8011980 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011974:	4b05      	ldr	r3, [pc, #20]	; (801198c <prvCheckForValidListAndQueue+0x60>)
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	490b      	ldr	r1, [pc, #44]	; (80119a8 <prvCheckForValidListAndQueue+0x7c>)
 801197a:	4618      	mov	r0, r3
 801197c:	f7fe fbca 	bl	8010114 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011980:	f000 f970 	bl	8011c64 <vPortExitCritical>
}
 8011984:	bf00      	nop
 8011986:	46bd      	mov	sp, r7
 8011988:	bd80      	pop	{r7, pc}
 801198a:	bf00      	nop
 801198c:	200012e0 	.word	0x200012e0
 8011990:	200012b0 	.word	0x200012b0
 8011994:	200012c4 	.word	0x200012c4
 8011998:	200012d8 	.word	0x200012d8
 801199c:	200012dc 	.word	0x200012dc
 80119a0:	2000138c 	.word	0x2000138c
 80119a4:	200012ec 	.word	0x200012ec
 80119a8:	0801a270 	.word	0x0801a270

080119ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80119ac:	b480      	push	{r7}
 80119ae:	b085      	sub	sp, #20
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	60f8      	str	r0, [r7, #12]
 80119b4:	60b9      	str	r1, [r7, #8]
 80119b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	3b04      	subs	r3, #4
 80119bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80119c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	3b04      	subs	r3, #4
 80119ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80119cc:	68bb      	ldr	r3, [r7, #8]
 80119ce:	f023 0201 	bic.w	r2, r3, #1
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	3b04      	subs	r3, #4
 80119da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80119dc:	4a0c      	ldr	r2, [pc, #48]	; (8011a10 <pxPortInitialiseStack+0x64>)
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	3b14      	subs	r3, #20
 80119e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80119e8:	687a      	ldr	r2, [r7, #4]
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	3b04      	subs	r3, #4
 80119f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	f06f 0202 	mvn.w	r2, #2
 80119fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	3b20      	subs	r3, #32
 8011a00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011a02:	68fb      	ldr	r3, [r7, #12]
}
 8011a04:	4618      	mov	r0, r3
 8011a06:	3714      	adds	r7, #20
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0e:	4770      	bx	lr
 8011a10:	08011a15 	.word	0x08011a15

08011a14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011a14:	b480      	push	{r7}
 8011a16:	b085      	sub	sp, #20
 8011a18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011a1e:	4b12      	ldr	r3, [pc, #72]	; (8011a68 <prvTaskExitError+0x54>)
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a26:	d00a      	beq.n	8011a3e <prvTaskExitError+0x2a>
	__asm volatile
 8011a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a2c:	f383 8811 	msr	BASEPRI, r3
 8011a30:	f3bf 8f6f 	isb	sy
 8011a34:	f3bf 8f4f 	dsb	sy
 8011a38:	60fb      	str	r3, [r7, #12]
}
 8011a3a:	bf00      	nop
 8011a3c:	e7fe      	b.n	8011a3c <prvTaskExitError+0x28>
	__asm volatile
 8011a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a42:	f383 8811 	msr	BASEPRI, r3
 8011a46:	f3bf 8f6f 	isb	sy
 8011a4a:	f3bf 8f4f 	dsb	sy
 8011a4e:	60bb      	str	r3, [r7, #8]
}
 8011a50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011a52:	bf00      	nop
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d0fc      	beq.n	8011a54 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011a5a:	bf00      	nop
 8011a5c:	bf00      	nop
 8011a5e:	3714      	adds	r7, #20
 8011a60:	46bd      	mov	sp, r7
 8011a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a66:	4770      	bx	lr
 8011a68:	200000a4 	.word	0x200000a4
 8011a6c:	00000000 	.word	0x00000000

08011a70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011a70:	4b07      	ldr	r3, [pc, #28]	; (8011a90 <pxCurrentTCBConst2>)
 8011a72:	6819      	ldr	r1, [r3, #0]
 8011a74:	6808      	ldr	r0, [r1, #0]
 8011a76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a7a:	f380 8809 	msr	PSP, r0
 8011a7e:	f3bf 8f6f 	isb	sy
 8011a82:	f04f 0000 	mov.w	r0, #0
 8011a86:	f380 8811 	msr	BASEPRI, r0
 8011a8a:	4770      	bx	lr
 8011a8c:	f3af 8000 	nop.w

08011a90 <pxCurrentTCBConst2>:
 8011a90:	20000db0 	.word	0x20000db0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011a94:	bf00      	nop
 8011a96:	bf00      	nop

08011a98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011a98:	4808      	ldr	r0, [pc, #32]	; (8011abc <prvPortStartFirstTask+0x24>)
 8011a9a:	6800      	ldr	r0, [r0, #0]
 8011a9c:	6800      	ldr	r0, [r0, #0]
 8011a9e:	f380 8808 	msr	MSP, r0
 8011aa2:	f04f 0000 	mov.w	r0, #0
 8011aa6:	f380 8814 	msr	CONTROL, r0
 8011aaa:	b662      	cpsie	i
 8011aac:	b661      	cpsie	f
 8011aae:	f3bf 8f4f 	dsb	sy
 8011ab2:	f3bf 8f6f 	isb	sy
 8011ab6:	df00      	svc	0
 8011ab8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011aba:	bf00      	nop
 8011abc:	e000ed08 	.word	0xe000ed08

08011ac0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b086      	sub	sp, #24
 8011ac4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011ac6:	4b46      	ldr	r3, [pc, #280]	; (8011be0 <xPortStartScheduler+0x120>)
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	4a46      	ldr	r2, [pc, #280]	; (8011be4 <xPortStartScheduler+0x124>)
 8011acc:	4293      	cmp	r3, r2
 8011ace:	d10a      	bne.n	8011ae6 <xPortStartScheduler+0x26>
	__asm volatile
 8011ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ad4:	f383 8811 	msr	BASEPRI, r3
 8011ad8:	f3bf 8f6f 	isb	sy
 8011adc:	f3bf 8f4f 	dsb	sy
 8011ae0:	613b      	str	r3, [r7, #16]
}
 8011ae2:	bf00      	nop
 8011ae4:	e7fe      	b.n	8011ae4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011ae6:	4b3e      	ldr	r3, [pc, #248]	; (8011be0 <xPortStartScheduler+0x120>)
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	4a3f      	ldr	r2, [pc, #252]	; (8011be8 <xPortStartScheduler+0x128>)
 8011aec:	4293      	cmp	r3, r2
 8011aee:	d10a      	bne.n	8011b06 <xPortStartScheduler+0x46>
	__asm volatile
 8011af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011af4:	f383 8811 	msr	BASEPRI, r3
 8011af8:	f3bf 8f6f 	isb	sy
 8011afc:	f3bf 8f4f 	dsb	sy
 8011b00:	60fb      	str	r3, [r7, #12]
}
 8011b02:	bf00      	nop
 8011b04:	e7fe      	b.n	8011b04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011b06:	4b39      	ldr	r3, [pc, #228]	; (8011bec <xPortStartScheduler+0x12c>)
 8011b08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011b0a:	697b      	ldr	r3, [r7, #20]
 8011b0c:	781b      	ldrb	r3, [r3, #0]
 8011b0e:	b2db      	uxtb	r3, r3
 8011b10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011b12:	697b      	ldr	r3, [r7, #20]
 8011b14:	22ff      	movs	r2, #255	; 0xff
 8011b16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011b18:	697b      	ldr	r3, [r7, #20]
 8011b1a:	781b      	ldrb	r3, [r3, #0]
 8011b1c:	b2db      	uxtb	r3, r3
 8011b1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011b20:	78fb      	ldrb	r3, [r7, #3]
 8011b22:	b2db      	uxtb	r3, r3
 8011b24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011b28:	b2da      	uxtb	r2, r3
 8011b2a:	4b31      	ldr	r3, [pc, #196]	; (8011bf0 <xPortStartScheduler+0x130>)
 8011b2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011b2e:	4b31      	ldr	r3, [pc, #196]	; (8011bf4 <xPortStartScheduler+0x134>)
 8011b30:	2207      	movs	r2, #7
 8011b32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011b34:	e009      	b.n	8011b4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011b36:	4b2f      	ldr	r3, [pc, #188]	; (8011bf4 <xPortStartScheduler+0x134>)
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	3b01      	subs	r3, #1
 8011b3c:	4a2d      	ldr	r2, [pc, #180]	; (8011bf4 <xPortStartScheduler+0x134>)
 8011b3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011b40:	78fb      	ldrb	r3, [r7, #3]
 8011b42:	b2db      	uxtb	r3, r3
 8011b44:	005b      	lsls	r3, r3, #1
 8011b46:	b2db      	uxtb	r3, r3
 8011b48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011b4a:	78fb      	ldrb	r3, [r7, #3]
 8011b4c:	b2db      	uxtb	r3, r3
 8011b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b52:	2b80      	cmp	r3, #128	; 0x80
 8011b54:	d0ef      	beq.n	8011b36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011b56:	4b27      	ldr	r3, [pc, #156]	; (8011bf4 <xPortStartScheduler+0x134>)
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	f1c3 0307 	rsb	r3, r3, #7
 8011b5e:	2b04      	cmp	r3, #4
 8011b60:	d00a      	beq.n	8011b78 <xPortStartScheduler+0xb8>
	__asm volatile
 8011b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b66:	f383 8811 	msr	BASEPRI, r3
 8011b6a:	f3bf 8f6f 	isb	sy
 8011b6e:	f3bf 8f4f 	dsb	sy
 8011b72:	60bb      	str	r3, [r7, #8]
}
 8011b74:	bf00      	nop
 8011b76:	e7fe      	b.n	8011b76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011b78:	4b1e      	ldr	r3, [pc, #120]	; (8011bf4 <xPortStartScheduler+0x134>)
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	021b      	lsls	r3, r3, #8
 8011b7e:	4a1d      	ldr	r2, [pc, #116]	; (8011bf4 <xPortStartScheduler+0x134>)
 8011b80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011b82:	4b1c      	ldr	r3, [pc, #112]	; (8011bf4 <xPortStartScheduler+0x134>)
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011b8a:	4a1a      	ldr	r2, [pc, #104]	; (8011bf4 <xPortStartScheduler+0x134>)
 8011b8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	b2da      	uxtb	r2, r3
 8011b92:	697b      	ldr	r3, [r7, #20]
 8011b94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011b96:	4b18      	ldr	r3, [pc, #96]	; (8011bf8 <xPortStartScheduler+0x138>)
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	4a17      	ldr	r2, [pc, #92]	; (8011bf8 <xPortStartScheduler+0x138>)
 8011b9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011ba0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011ba2:	4b15      	ldr	r3, [pc, #84]	; (8011bf8 <xPortStartScheduler+0x138>)
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	4a14      	ldr	r2, [pc, #80]	; (8011bf8 <xPortStartScheduler+0x138>)
 8011ba8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011bac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011bae:	f000 f8dd 	bl	8011d6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011bb2:	4b12      	ldr	r3, [pc, #72]	; (8011bfc <xPortStartScheduler+0x13c>)
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011bb8:	f000 f8fc 	bl	8011db4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011bbc:	4b10      	ldr	r3, [pc, #64]	; (8011c00 <xPortStartScheduler+0x140>)
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	4a0f      	ldr	r2, [pc, #60]	; (8011c00 <xPortStartScheduler+0x140>)
 8011bc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011bc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011bc8:	f7ff ff66 	bl	8011a98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011bcc:	f7ff f83a 	bl	8010c44 <vTaskSwitchContext>
	prvTaskExitError();
 8011bd0:	f7ff ff20 	bl	8011a14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011bd4:	2300      	movs	r3, #0
}
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	3718      	adds	r7, #24
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	bd80      	pop	{r7, pc}
 8011bde:	bf00      	nop
 8011be0:	e000ed00 	.word	0xe000ed00
 8011be4:	410fc271 	.word	0x410fc271
 8011be8:	410fc270 	.word	0x410fc270
 8011bec:	e000e400 	.word	0xe000e400
 8011bf0:	200013dc 	.word	0x200013dc
 8011bf4:	200013e0 	.word	0x200013e0
 8011bf8:	e000ed20 	.word	0xe000ed20
 8011bfc:	200000a4 	.word	0x200000a4
 8011c00:	e000ef34 	.word	0xe000ef34

08011c04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011c04:	b480      	push	{r7}
 8011c06:	b083      	sub	sp, #12
 8011c08:	af00      	add	r7, sp, #0
	__asm volatile
 8011c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c0e:	f383 8811 	msr	BASEPRI, r3
 8011c12:	f3bf 8f6f 	isb	sy
 8011c16:	f3bf 8f4f 	dsb	sy
 8011c1a:	607b      	str	r3, [r7, #4]
}
 8011c1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011c1e:	4b0f      	ldr	r3, [pc, #60]	; (8011c5c <vPortEnterCritical+0x58>)
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	3301      	adds	r3, #1
 8011c24:	4a0d      	ldr	r2, [pc, #52]	; (8011c5c <vPortEnterCritical+0x58>)
 8011c26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011c28:	4b0c      	ldr	r3, [pc, #48]	; (8011c5c <vPortEnterCritical+0x58>)
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	2b01      	cmp	r3, #1
 8011c2e:	d10f      	bne.n	8011c50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011c30:	4b0b      	ldr	r3, [pc, #44]	; (8011c60 <vPortEnterCritical+0x5c>)
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	b2db      	uxtb	r3, r3
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d00a      	beq.n	8011c50 <vPortEnterCritical+0x4c>
	__asm volatile
 8011c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c3e:	f383 8811 	msr	BASEPRI, r3
 8011c42:	f3bf 8f6f 	isb	sy
 8011c46:	f3bf 8f4f 	dsb	sy
 8011c4a:	603b      	str	r3, [r7, #0]
}
 8011c4c:	bf00      	nop
 8011c4e:	e7fe      	b.n	8011c4e <vPortEnterCritical+0x4a>
	}
}
 8011c50:	bf00      	nop
 8011c52:	370c      	adds	r7, #12
 8011c54:	46bd      	mov	sp, r7
 8011c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5a:	4770      	bx	lr
 8011c5c:	200000a4 	.word	0x200000a4
 8011c60:	e000ed04 	.word	0xe000ed04

08011c64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011c64:	b480      	push	{r7}
 8011c66:	b083      	sub	sp, #12
 8011c68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011c6a:	4b12      	ldr	r3, [pc, #72]	; (8011cb4 <vPortExitCritical+0x50>)
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d10a      	bne.n	8011c88 <vPortExitCritical+0x24>
	__asm volatile
 8011c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c76:	f383 8811 	msr	BASEPRI, r3
 8011c7a:	f3bf 8f6f 	isb	sy
 8011c7e:	f3bf 8f4f 	dsb	sy
 8011c82:	607b      	str	r3, [r7, #4]
}
 8011c84:	bf00      	nop
 8011c86:	e7fe      	b.n	8011c86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011c88:	4b0a      	ldr	r3, [pc, #40]	; (8011cb4 <vPortExitCritical+0x50>)
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	3b01      	subs	r3, #1
 8011c8e:	4a09      	ldr	r2, [pc, #36]	; (8011cb4 <vPortExitCritical+0x50>)
 8011c90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011c92:	4b08      	ldr	r3, [pc, #32]	; (8011cb4 <vPortExitCritical+0x50>)
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d105      	bne.n	8011ca6 <vPortExitCritical+0x42>
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011c9e:	683b      	ldr	r3, [r7, #0]
 8011ca0:	f383 8811 	msr	BASEPRI, r3
}
 8011ca4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011ca6:	bf00      	nop
 8011ca8:	370c      	adds	r7, #12
 8011caa:	46bd      	mov	sp, r7
 8011cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb0:	4770      	bx	lr
 8011cb2:	bf00      	nop
 8011cb4:	200000a4 	.word	0x200000a4
	...

08011cc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011cc0:	f3ef 8009 	mrs	r0, PSP
 8011cc4:	f3bf 8f6f 	isb	sy
 8011cc8:	4b15      	ldr	r3, [pc, #84]	; (8011d20 <pxCurrentTCBConst>)
 8011cca:	681a      	ldr	r2, [r3, #0]
 8011ccc:	f01e 0f10 	tst.w	lr, #16
 8011cd0:	bf08      	it	eq
 8011cd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011cd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cda:	6010      	str	r0, [r2, #0]
 8011cdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011ce0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011ce4:	f380 8811 	msr	BASEPRI, r0
 8011ce8:	f3bf 8f4f 	dsb	sy
 8011cec:	f3bf 8f6f 	isb	sy
 8011cf0:	f7fe ffa8 	bl	8010c44 <vTaskSwitchContext>
 8011cf4:	f04f 0000 	mov.w	r0, #0
 8011cf8:	f380 8811 	msr	BASEPRI, r0
 8011cfc:	bc09      	pop	{r0, r3}
 8011cfe:	6819      	ldr	r1, [r3, #0]
 8011d00:	6808      	ldr	r0, [r1, #0]
 8011d02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d06:	f01e 0f10 	tst.w	lr, #16
 8011d0a:	bf08      	it	eq
 8011d0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011d10:	f380 8809 	msr	PSP, r0
 8011d14:	f3bf 8f6f 	isb	sy
 8011d18:	4770      	bx	lr
 8011d1a:	bf00      	nop
 8011d1c:	f3af 8000 	nop.w

08011d20 <pxCurrentTCBConst>:
 8011d20:	20000db0 	.word	0x20000db0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011d24:	bf00      	nop
 8011d26:	bf00      	nop

08011d28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b082      	sub	sp, #8
 8011d2c:	af00      	add	r7, sp, #0
	__asm volatile
 8011d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d32:	f383 8811 	msr	BASEPRI, r3
 8011d36:	f3bf 8f6f 	isb	sy
 8011d3a:	f3bf 8f4f 	dsb	sy
 8011d3e:	607b      	str	r3, [r7, #4]
}
 8011d40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011d42:	f7fe fec5 	bl	8010ad0 <xTaskIncrementTick>
 8011d46:	4603      	mov	r3, r0
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d003      	beq.n	8011d54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011d4c:	4b06      	ldr	r3, [pc, #24]	; (8011d68 <xPortSysTickHandler+0x40>)
 8011d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d52:	601a      	str	r2, [r3, #0]
 8011d54:	2300      	movs	r3, #0
 8011d56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011d58:	683b      	ldr	r3, [r7, #0]
 8011d5a:	f383 8811 	msr	BASEPRI, r3
}
 8011d5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011d60:	bf00      	nop
 8011d62:	3708      	adds	r7, #8
 8011d64:	46bd      	mov	sp, r7
 8011d66:	bd80      	pop	{r7, pc}
 8011d68:	e000ed04 	.word	0xe000ed04

08011d6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011d6c:	b480      	push	{r7}
 8011d6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011d70:	4b0b      	ldr	r3, [pc, #44]	; (8011da0 <vPortSetupTimerInterrupt+0x34>)
 8011d72:	2200      	movs	r2, #0
 8011d74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011d76:	4b0b      	ldr	r3, [pc, #44]	; (8011da4 <vPortSetupTimerInterrupt+0x38>)
 8011d78:	2200      	movs	r2, #0
 8011d7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011d7c:	4b0a      	ldr	r3, [pc, #40]	; (8011da8 <vPortSetupTimerInterrupt+0x3c>)
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	4a0a      	ldr	r2, [pc, #40]	; (8011dac <vPortSetupTimerInterrupt+0x40>)
 8011d82:	fba2 2303 	umull	r2, r3, r2, r3
 8011d86:	099b      	lsrs	r3, r3, #6
 8011d88:	4a09      	ldr	r2, [pc, #36]	; (8011db0 <vPortSetupTimerInterrupt+0x44>)
 8011d8a:	3b01      	subs	r3, #1
 8011d8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011d8e:	4b04      	ldr	r3, [pc, #16]	; (8011da0 <vPortSetupTimerInterrupt+0x34>)
 8011d90:	2207      	movs	r2, #7
 8011d92:	601a      	str	r2, [r3, #0]
}
 8011d94:	bf00      	nop
 8011d96:	46bd      	mov	sp, r7
 8011d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9c:	4770      	bx	lr
 8011d9e:	bf00      	nop
 8011da0:	e000e010 	.word	0xe000e010
 8011da4:	e000e018 	.word	0xe000e018
 8011da8:	20000060 	.word	0x20000060
 8011dac:	10624dd3 	.word	0x10624dd3
 8011db0:	e000e014 	.word	0xe000e014

08011db4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011db4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011dc4 <vPortEnableVFP+0x10>
 8011db8:	6801      	ldr	r1, [r0, #0]
 8011dba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011dbe:	6001      	str	r1, [r0, #0]
 8011dc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011dc2:	bf00      	nop
 8011dc4:	e000ed88 	.word	0xe000ed88

08011dc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011dc8:	b480      	push	{r7}
 8011dca:	b085      	sub	sp, #20
 8011dcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011dce:	f3ef 8305 	mrs	r3, IPSR
 8011dd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	2b0f      	cmp	r3, #15
 8011dd8:	d914      	bls.n	8011e04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011dda:	4a17      	ldr	r2, [pc, #92]	; (8011e38 <vPortValidateInterruptPriority+0x70>)
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	4413      	add	r3, r2
 8011de0:	781b      	ldrb	r3, [r3, #0]
 8011de2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011de4:	4b15      	ldr	r3, [pc, #84]	; (8011e3c <vPortValidateInterruptPriority+0x74>)
 8011de6:	781b      	ldrb	r3, [r3, #0]
 8011de8:	7afa      	ldrb	r2, [r7, #11]
 8011dea:	429a      	cmp	r2, r3
 8011dec:	d20a      	bcs.n	8011e04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8011dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011df2:	f383 8811 	msr	BASEPRI, r3
 8011df6:	f3bf 8f6f 	isb	sy
 8011dfa:	f3bf 8f4f 	dsb	sy
 8011dfe:	607b      	str	r3, [r7, #4]
}
 8011e00:	bf00      	nop
 8011e02:	e7fe      	b.n	8011e02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011e04:	4b0e      	ldr	r3, [pc, #56]	; (8011e40 <vPortValidateInterruptPriority+0x78>)
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011e0c:	4b0d      	ldr	r3, [pc, #52]	; (8011e44 <vPortValidateInterruptPriority+0x7c>)
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	429a      	cmp	r2, r3
 8011e12:	d90a      	bls.n	8011e2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e18:	f383 8811 	msr	BASEPRI, r3
 8011e1c:	f3bf 8f6f 	isb	sy
 8011e20:	f3bf 8f4f 	dsb	sy
 8011e24:	603b      	str	r3, [r7, #0]
}
 8011e26:	bf00      	nop
 8011e28:	e7fe      	b.n	8011e28 <vPortValidateInterruptPriority+0x60>
	}
 8011e2a:	bf00      	nop
 8011e2c:	3714      	adds	r7, #20
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e34:	4770      	bx	lr
 8011e36:	bf00      	nop
 8011e38:	e000e3f0 	.word	0xe000e3f0
 8011e3c:	200013dc 	.word	0x200013dc
 8011e40:	e000ed0c 	.word	0xe000ed0c
 8011e44:	200013e0 	.word	0x200013e0

08011e48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b08a      	sub	sp, #40	; 0x28
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011e50:	2300      	movs	r3, #0
 8011e52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011e54:	f7fe fd80 	bl	8010958 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011e58:	4b5b      	ldr	r3, [pc, #364]	; (8011fc8 <pvPortMalloc+0x180>)
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d101      	bne.n	8011e64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011e60:	f000 f920 	bl	80120a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011e64:	4b59      	ldr	r3, [pc, #356]	; (8011fcc <pvPortMalloc+0x184>)
 8011e66:	681a      	ldr	r2, [r3, #0]
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	4013      	ands	r3, r2
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	f040 8093 	bne.w	8011f98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d01d      	beq.n	8011eb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011e78:	2208      	movs	r2, #8
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	4413      	add	r3, r2
 8011e7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	f003 0307 	and.w	r3, r3, #7
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d014      	beq.n	8011eb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	f023 0307 	bic.w	r3, r3, #7
 8011e90:	3308      	adds	r3, #8
 8011e92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	f003 0307 	and.w	r3, r3, #7
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d00a      	beq.n	8011eb4 <pvPortMalloc+0x6c>
	__asm volatile
 8011e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ea2:	f383 8811 	msr	BASEPRI, r3
 8011ea6:	f3bf 8f6f 	isb	sy
 8011eaa:	f3bf 8f4f 	dsb	sy
 8011eae:	617b      	str	r3, [r7, #20]
}
 8011eb0:	bf00      	nop
 8011eb2:	e7fe      	b.n	8011eb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d06e      	beq.n	8011f98 <pvPortMalloc+0x150>
 8011eba:	4b45      	ldr	r3, [pc, #276]	; (8011fd0 <pvPortMalloc+0x188>)
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	687a      	ldr	r2, [r7, #4]
 8011ec0:	429a      	cmp	r2, r3
 8011ec2:	d869      	bhi.n	8011f98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011ec4:	4b43      	ldr	r3, [pc, #268]	; (8011fd4 <pvPortMalloc+0x18c>)
 8011ec6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011ec8:	4b42      	ldr	r3, [pc, #264]	; (8011fd4 <pvPortMalloc+0x18c>)
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011ece:	e004      	b.n	8011eda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ed2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011edc:	685b      	ldr	r3, [r3, #4]
 8011ede:	687a      	ldr	r2, [r7, #4]
 8011ee0:	429a      	cmp	r2, r3
 8011ee2:	d903      	bls.n	8011eec <pvPortMalloc+0xa4>
 8011ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d1f1      	bne.n	8011ed0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011eec:	4b36      	ldr	r3, [pc, #216]	; (8011fc8 <pvPortMalloc+0x180>)
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ef2:	429a      	cmp	r2, r3
 8011ef4:	d050      	beq.n	8011f98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011ef6:	6a3b      	ldr	r3, [r7, #32]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	2208      	movs	r2, #8
 8011efc:	4413      	add	r3, r2
 8011efe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f02:	681a      	ldr	r2, [r3, #0]
 8011f04:	6a3b      	ldr	r3, [r7, #32]
 8011f06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f0a:	685a      	ldr	r2, [r3, #4]
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	1ad2      	subs	r2, r2, r3
 8011f10:	2308      	movs	r3, #8
 8011f12:	005b      	lsls	r3, r3, #1
 8011f14:	429a      	cmp	r2, r3
 8011f16:	d91f      	bls.n	8011f58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	4413      	add	r3, r2
 8011f1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011f20:	69bb      	ldr	r3, [r7, #24]
 8011f22:	f003 0307 	and.w	r3, r3, #7
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d00a      	beq.n	8011f40 <pvPortMalloc+0xf8>
	__asm volatile
 8011f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f2e:	f383 8811 	msr	BASEPRI, r3
 8011f32:	f3bf 8f6f 	isb	sy
 8011f36:	f3bf 8f4f 	dsb	sy
 8011f3a:	613b      	str	r3, [r7, #16]
}
 8011f3c:	bf00      	nop
 8011f3e:	e7fe      	b.n	8011f3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f42:	685a      	ldr	r2, [r3, #4]
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	1ad2      	subs	r2, r2, r3
 8011f48:	69bb      	ldr	r3, [r7, #24]
 8011f4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f4e:	687a      	ldr	r2, [r7, #4]
 8011f50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011f52:	69b8      	ldr	r0, [r7, #24]
 8011f54:	f000 f908 	bl	8012168 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011f58:	4b1d      	ldr	r3, [pc, #116]	; (8011fd0 <pvPortMalloc+0x188>)
 8011f5a:	681a      	ldr	r2, [r3, #0]
 8011f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f5e:	685b      	ldr	r3, [r3, #4]
 8011f60:	1ad3      	subs	r3, r2, r3
 8011f62:	4a1b      	ldr	r2, [pc, #108]	; (8011fd0 <pvPortMalloc+0x188>)
 8011f64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011f66:	4b1a      	ldr	r3, [pc, #104]	; (8011fd0 <pvPortMalloc+0x188>)
 8011f68:	681a      	ldr	r2, [r3, #0]
 8011f6a:	4b1b      	ldr	r3, [pc, #108]	; (8011fd8 <pvPortMalloc+0x190>)
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	429a      	cmp	r2, r3
 8011f70:	d203      	bcs.n	8011f7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011f72:	4b17      	ldr	r3, [pc, #92]	; (8011fd0 <pvPortMalloc+0x188>)
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	4a18      	ldr	r2, [pc, #96]	; (8011fd8 <pvPortMalloc+0x190>)
 8011f78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f7c:	685a      	ldr	r2, [r3, #4]
 8011f7e:	4b13      	ldr	r3, [pc, #76]	; (8011fcc <pvPortMalloc+0x184>)
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	431a      	orrs	r2, r3
 8011f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f8a:	2200      	movs	r2, #0
 8011f8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011f8e:	4b13      	ldr	r3, [pc, #76]	; (8011fdc <pvPortMalloc+0x194>)
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	3301      	adds	r3, #1
 8011f94:	4a11      	ldr	r2, [pc, #68]	; (8011fdc <pvPortMalloc+0x194>)
 8011f96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011f98:	f7fe fcec 	bl	8010974 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011f9c:	69fb      	ldr	r3, [r7, #28]
 8011f9e:	f003 0307 	and.w	r3, r3, #7
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d00a      	beq.n	8011fbc <pvPortMalloc+0x174>
	__asm volatile
 8011fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011faa:	f383 8811 	msr	BASEPRI, r3
 8011fae:	f3bf 8f6f 	isb	sy
 8011fb2:	f3bf 8f4f 	dsb	sy
 8011fb6:	60fb      	str	r3, [r7, #12]
}
 8011fb8:	bf00      	nop
 8011fba:	e7fe      	b.n	8011fba <pvPortMalloc+0x172>
	return pvReturn;
 8011fbc:	69fb      	ldr	r3, [r7, #28]
}
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	3728      	adds	r7, #40	; 0x28
 8011fc2:	46bd      	mov	sp, r7
 8011fc4:	bd80      	pop	{r7, pc}
 8011fc6:	bf00      	nop
 8011fc8:	20005a3c 	.word	0x20005a3c
 8011fcc:	20005a50 	.word	0x20005a50
 8011fd0:	20005a40 	.word	0x20005a40
 8011fd4:	20005a34 	.word	0x20005a34
 8011fd8:	20005a44 	.word	0x20005a44
 8011fdc:	20005a48 	.word	0x20005a48

08011fe0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b086      	sub	sp, #24
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d04d      	beq.n	801208e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011ff2:	2308      	movs	r3, #8
 8011ff4:	425b      	negs	r3, r3
 8011ff6:	697a      	ldr	r2, [r7, #20]
 8011ff8:	4413      	add	r3, r2
 8011ffa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011ffc:	697b      	ldr	r3, [r7, #20]
 8011ffe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012000:	693b      	ldr	r3, [r7, #16]
 8012002:	685a      	ldr	r2, [r3, #4]
 8012004:	4b24      	ldr	r3, [pc, #144]	; (8012098 <vPortFree+0xb8>)
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	4013      	ands	r3, r2
 801200a:	2b00      	cmp	r3, #0
 801200c:	d10a      	bne.n	8012024 <vPortFree+0x44>
	__asm volatile
 801200e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012012:	f383 8811 	msr	BASEPRI, r3
 8012016:	f3bf 8f6f 	isb	sy
 801201a:	f3bf 8f4f 	dsb	sy
 801201e:	60fb      	str	r3, [r7, #12]
}
 8012020:	bf00      	nop
 8012022:	e7fe      	b.n	8012022 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012024:	693b      	ldr	r3, [r7, #16]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d00a      	beq.n	8012042 <vPortFree+0x62>
	__asm volatile
 801202c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012030:	f383 8811 	msr	BASEPRI, r3
 8012034:	f3bf 8f6f 	isb	sy
 8012038:	f3bf 8f4f 	dsb	sy
 801203c:	60bb      	str	r3, [r7, #8]
}
 801203e:	bf00      	nop
 8012040:	e7fe      	b.n	8012040 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012042:	693b      	ldr	r3, [r7, #16]
 8012044:	685a      	ldr	r2, [r3, #4]
 8012046:	4b14      	ldr	r3, [pc, #80]	; (8012098 <vPortFree+0xb8>)
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	4013      	ands	r3, r2
 801204c:	2b00      	cmp	r3, #0
 801204e:	d01e      	beq.n	801208e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012050:	693b      	ldr	r3, [r7, #16]
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d11a      	bne.n	801208e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012058:	693b      	ldr	r3, [r7, #16]
 801205a:	685a      	ldr	r2, [r3, #4]
 801205c:	4b0e      	ldr	r3, [pc, #56]	; (8012098 <vPortFree+0xb8>)
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	43db      	mvns	r3, r3
 8012062:	401a      	ands	r2, r3
 8012064:	693b      	ldr	r3, [r7, #16]
 8012066:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012068:	f7fe fc76 	bl	8010958 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801206c:	693b      	ldr	r3, [r7, #16]
 801206e:	685a      	ldr	r2, [r3, #4]
 8012070:	4b0a      	ldr	r3, [pc, #40]	; (801209c <vPortFree+0xbc>)
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	4413      	add	r3, r2
 8012076:	4a09      	ldr	r2, [pc, #36]	; (801209c <vPortFree+0xbc>)
 8012078:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801207a:	6938      	ldr	r0, [r7, #16]
 801207c:	f000 f874 	bl	8012168 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012080:	4b07      	ldr	r3, [pc, #28]	; (80120a0 <vPortFree+0xc0>)
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	3301      	adds	r3, #1
 8012086:	4a06      	ldr	r2, [pc, #24]	; (80120a0 <vPortFree+0xc0>)
 8012088:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801208a:	f7fe fc73 	bl	8010974 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801208e:	bf00      	nop
 8012090:	3718      	adds	r7, #24
 8012092:	46bd      	mov	sp, r7
 8012094:	bd80      	pop	{r7, pc}
 8012096:	bf00      	nop
 8012098:	20005a50 	.word	0x20005a50
 801209c:	20005a40 	.word	0x20005a40
 80120a0:	20005a4c 	.word	0x20005a4c

080120a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80120a4:	b480      	push	{r7}
 80120a6:	b085      	sub	sp, #20
 80120a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80120aa:	f244 6350 	movw	r3, #18000	; 0x4650
 80120ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80120b0:	4b27      	ldr	r3, [pc, #156]	; (8012150 <prvHeapInit+0xac>)
 80120b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	f003 0307 	and.w	r3, r3, #7
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d00c      	beq.n	80120d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	3307      	adds	r3, #7
 80120c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	f023 0307 	bic.w	r3, r3, #7
 80120ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80120cc:	68ba      	ldr	r2, [r7, #8]
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	1ad3      	subs	r3, r2, r3
 80120d2:	4a1f      	ldr	r2, [pc, #124]	; (8012150 <prvHeapInit+0xac>)
 80120d4:	4413      	add	r3, r2
 80120d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80120dc:	4a1d      	ldr	r2, [pc, #116]	; (8012154 <prvHeapInit+0xb0>)
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80120e2:	4b1c      	ldr	r3, [pc, #112]	; (8012154 <prvHeapInit+0xb0>)
 80120e4:	2200      	movs	r2, #0
 80120e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	68ba      	ldr	r2, [r7, #8]
 80120ec:	4413      	add	r3, r2
 80120ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80120f0:	2208      	movs	r2, #8
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	1a9b      	subs	r3, r3, r2
 80120f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	f023 0307 	bic.w	r3, r3, #7
 80120fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	4a15      	ldr	r2, [pc, #84]	; (8012158 <prvHeapInit+0xb4>)
 8012104:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012106:	4b14      	ldr	r3, [pc, #80]	; (8012158 <prvHeapInit+0xb4>)
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	2200      	movs	r2, #0
 801210c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801210e:	4b12      	ldr	r3, [pc, #72]	; (8012158 <prvHeapInit+0xb4>)
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	2200      	movs	r2, #0
 8012114:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801211a:	683b      	ldr	r3, [r7, #0]
 801211c:	68fa      	ldr	r2, [r7, #12]
 801211e:	1ad2      	subs	r2, r2, r3
 8012120:	683b      	ldr	r3, [r7, #0]
 8012122:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012124:	4b0c      	ldr	r3, [pc, #48]	; (8012158 <prvHeapInit+0xb4>)
 8012126:	681a      	ldr	r2, [r3, #0]
 8012128:	683b      	ldr	r3, [r7, #0]
 801212a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801212c:	683b      	ldr	r3, [r7, #0]
 801212e:	685b      	ldr	r3, [r3, #4]
 8012130:	4a0a      	ldr	r2, [pc, #40]	; (801215c <prvHeapInit+0xb8>)
 8012132:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012134:	683b      	ldr	r3, [r7, #0]
 8012136:	685b      	ldr	r3, [r3, #4]
 8012138:	4a09      	ldr	r2, [pc, #36]	; (8012160 <prvHeapInit+0xbc>)
 801213a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801213c:	4b09      	ldr	r3, [pc, #36]	; (8012164 <prvHeapInit+0xc0>)
 801213e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012142:	601a      	str	r2, [r3, #0]
}
 8012144:	bf00      	nop
 8012146:	3714      	adds	r7, #20
 8012148:	46bd      	mov	sp, r7
 801214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214e:	4770      	bx	lr
 8012150:	200013e4 	.word	0x200013e4
 8012154:	20005a34 	.word	0x20005a34
 8012158:	20005a3c 	.word	0x20005a3c
 801215c:	20005a44 	.word	0x20005a44
 8012160:	20005a40 	.word	0x20005a40
 8012164:	20005a50 	.word	0x20005a50

08012168 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012168:	b480      	push	{r7}
 801216a:	b085      	sub	sp, #20
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012170:	4b28      	ldr	r3, [pc, #160]	; (8012214 <prvInsertBlockIntoFreeList+0xac>)
 8012172:	60fb      	str	r3, [r7, #12]
 8012174:	e002      	b.n	801217c <prvInsertBlockIntoFreeList+0x14>
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	60fb      	str	r3, [r7, #12]
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	687a      	ldr	r2, [r7, #4]
 8012182:	429a      	cmp	r2, r3
 8012184:	d8f7      	bhi.n	8012176 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	685b      	ldr	r3, [r3, #4]
 801218e:	68ba      	ldr	r2, [r7, #8]
 8012190:	4413      	add	r3, r2
 8012192:	687a      	ldr	r2, [r7, #4]
 8012194:	429a      	cmp	r2, r3
 8012196:	d108      	bne.n	80121aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	685a      	ldr	r2, [r3, #4]
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	685b      	ldr	r3, [r3, #4]
 80121a0:	441a      	add	r2, r3
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	685b      	ldr	r3, [r3, #4]
 80121b2:	68ba      	ldr	r2, [r7, #8]
 80121b4:	441a      	add	r2, r3
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	429a      	cmp	r2, r3
 80121bc:	d118      	bne.n	80121f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	681a      	ldr	r2, [r3, #0]
 80121c2:	4b15      	ldr	r3, [pc, #84]	; (8012218 <prvInsertBlockIntoFreeList+0xb0>)
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	429a      	cmp	r2, r3
 80121c8:	d00d      	beq.n	80121e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	685a      	ldr	r2, [r3, #4]
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	685b      	ldr	r3, [r3, #4]
 80121d4:	441a      	add	r2, r3
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	681a      	ldr	r2, [r3, #0]
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	601a      	str	r2, [r3, #0]
 80121e4:	e008      	b.n	80121f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80121e6:	4b0c      	ldr	r3, [pc, #48]	; (8012218 <prvInsertBlockIntoFreeList+0xb0>)
 80121e8:	681a      	ldr	r2, [r3, #0]
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	601a      	str	r2, [r3, #0]
 80121ee:	e003      	b.n	80121f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	681a      	ldr	r2, [r3, #0]
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80121f8:	68fa      	ldr	r2, [r7, #12]
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	429a      	cmp	r2, r3
 80121fe:	d002      	beq.n	8012206 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	687a      	ldr	r2, [r7, #4]
 8012204:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012206:	bf00      	nop
 8012208:	3714      	adds	r7, #20
 801220a:	46bd      	mov	sp, r7
 801220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012210:	4770      	bx	lr
 8012212:	bf00      	nop
 8012214:	20005a34 	.word	0x20005a34
 8012218:	20005a3c 	.word	0x20005a3c

0801221c <_Znwj>:
 801221c:	2801      	cmp	r0, #1
 801221e:	bf38      	it	cc
 8012220:	2001      	movcc	r0, #1
 8012222:	b510      	push	{r4, lr}
 8012224:	4604      	mov	r4, r0
 8012226:	4620      	mov	r0, r4
 8012228:	f000 fa84 	bl	8012734 <malloc>
 801222c:	b930      	cbnz	r0, 801223c <_Znwj+0x20>
 801222e:	f000 f81d 	bl	801226c <_ZSt15get_new_handlerv>
 8012232:	b908      	cbnz	r0, 8012238 <_Znwj+0x1c>
 8012234:	f000 f82c 	bl	8012290 <abort>
 8012238:	4780      	blx	r0
 801223a:	e7f4      	b.n	8012226 <_Znwj+0xa>
 801223c:	bd10      	pop	{r4, pc}

0801223e <_Znaj>:
 801223e:	f7ff bfed 	b.w	801221c <_Znwj>

08012242 <__cxa_pure_virtual>:
 8012242:	b508      	push	{r3, lr}
 8012244:	f000 f80c 	bl	8012260 <_ZSt9terminatev>

08012248 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8012248:	b508      	push	{r3, lr}
 801224a:	4780      	blx	r0
 801224c:	f000 f820 	bl	8012290 <abort>

08012250 <_ZSt13get_terminatev>:
 8012250:	4b02      	ldr	r3, [pc, #8]	; (801225c <_ZSt13get_terminatev+0xc>)
 8012252:	6818      	ldr	r0, [r3, #0]
 8012254:	f3bf 8f5b 	dmb	ish
 8012258:	4770      	bx	lr
 801225a:	bf00      	nop
 801225c:	200000a8 	.word	0x200000a8

08012260 <_ZSt9terminatev>:
 8012260:	b508      	push	{r3, lr}
 8012262:	f7ff fff5 	bl	8012250 <_ZSt13get_terminatev>
 8012266:	f7ff ffef 	bl	8012248 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0801226c <_ZSt15get_new_handlerv>:
 801226c:	4b02      	ldr	r3, [pc, #8]	; (8012278 <_ZSt15get_new_handlerv+0xc>)
 801226e:	6818      	ldr	r0, [r3, #0]
 8012270:	f3bf 8f5b 	dmb	ish
 8012274:	4770      	bx	lr
 8012276:	bf00      	nop
 8012278:	20005a54 	.word	0x20005a54
 801227c:	00000000 	.word	0x00000000

08012280 <nan>:
 8012280:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012288 <nan+0x8>
 8012284:	4770      	bx	lr
 8012286:	bf00      	nop
 8012288:	00000000 	.word	0x00000000
 801228c:	7ff80000 	.word	0x7ff80000

08012290 <abort>:
 8012290:	b508      	push	{r3, lr}
 8012292:	2006      	movs	r0, #6
 8012294:	f001 fd66 	bl	8013d64 <raise>
 8012298:	2001      	movs	r0, #1
 801229a:	f006 f94b 	bl	8018534 <_exit>

0801229e <atoi>:
 801229e:	220a      	movs	r2, #10
 80122a0:	2100      	movs	r1, #0
 80122a2:	f002 bd43 	b.w	8014d2c <strtol>

080122a6 <atol>:
 80122a6:	220a      	movs	r2, #10
 80122a8:	2100      	movs	r1, #0
 80122aa:	f002 bd3f 	b.w	8014d2c <strtol>
	...

080122b0 <__errno>:
 80122b0:	4b01      	ldr	r3, [pc, #4]	; (80122b8 <__errno+0x8>)
 80122b2:	6818      	ldr	r0, [r3, #0]
 80122b4:	4770      	bx	lr
 80122b6:	bf00      	nop
 80122b8:	200000ac 	.word	0x200000ac

080122bc <std>:
 80122bc:	2300      	movs	r3, #0
 80122be:	b510      	push	{r4, lr}
 80122c0:	4604      	mov	r4, r0
 80122c2:	e9c0 3300 	strd	r3, r3, [r0]
 80122c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80122ca:	6083      	str	r3, [r0, #8]
 80122cc:	8181      	strh	r1, [r0, #12]
 80122ce:	6643      	str	r3, [r0, #100]	; 0x64
 80122d0:	81c2      	strh	r2, [r0, #14]
 80122d2:	6183      	str	r3, [r0, #24]
 80122d4:	4619      	mov	r1, r3
 80122d6:	2208      	movs	r2, #8
 80122d8:	305c      	adds	r0, #92	; 0x5c
 80122da:	f000 fa63 	bl	80127a4 <memset>
 80122de:	4b05      	ldr	r3, [pc, #20]	; (80122f4 <std+0x38>)
 80122e0:	6263      	str	r3, [r4, #36]	; 0x24
 80122e2:	4b05      	ldr	r3, [pc, #20]	; (80122f8 <std+0x3c>)
 80122e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80122e6:	4b05      	ldr	r3, [pc, #20]	; (80122fc <std+0x40>)
 80122e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80122ea:	4b05      	ldr	r3, [pc, #20]	; (8012300 <std+0x44>)
 80122ec:	6224      	str	r4, [r4, #32]
 80122ee:	6323      	str	r3, [r4, #48]	; 0x30
 80122f0:	bd10      	pop	{r4, pc}
 80122f2:	bf00      	nop
 80122f4:	08013e35 	.word	0x08013e35
 80122f8:	08013e5b 	.word	0x08013e5b
 80122fc:	08013e93 	.word	0x08013e93
 8012300:	08013eb7 	.word	0x08013eb7

08012304 <_cleanup_r>:
 8012304:	4901      	ldr	r1, [pc, #4]	; (801230c <_cleanup_r+0x8>)
 8012306:	f000 b8af 	b.w	8012468 <_fwalk_reent>
 801230a:	bf00      	nop
 801230c:	080162e5 	.word	0x080162e5

08012310 <__sfmoreglue>:
 8012310:	b570      	push	{r4, r5, r6, lr}
 8012312:	1e4a      	subs	r2, r1, #1
 8012314:	2568      	movs	r5, #104	; 0x68
 8012316:	4355      	muls	r5, r2
 8012318:	460e      	mov	r6, r1
 801231a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801231e:	f000 fd17 	bl	8012d50 <_malloc_r>
 8012322:	4604      	mov	r4, r0
 8012324:	b140      	cbz	r0, 8012338 <__sfmoreglue+0x28>
 8012326:	2100      	movs	r1, #0
 8012328:	e9c0 1600 	strd	r1, r6, [r0]
 801232c:	300c      	adds	r0, #12
 801232e:	60a0      	str	r0, [r4, #8]
 8012330:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012334:	f000 fa36 	bl	80127a4 <memset>
 8012338:	4620      	mov	r0, r4
 801233a:	bd70      	pop	{r4, r5, r6, pc}

0801233c <__sfp_lock_acquire>:
 801233c:	4801      	ldr	r0, [pc, #4]	; (8012344 <__sfp_lock_acquire+0x8>)
 801233e:	f000 b9f5 	b.w	801272c <__retarget_lock_acquire_recursive>
 8012342:	bf00      	nop
 8012344:	200064ec 	.word	0x200064ec

08012348 <__sfp_lock_release>:
 8012348:	4801      	ldr	r0, [pc, #4]	; (8012350 <__sfp_lock_release+0x8>)
 801234a:	f000 b9f1 	b.w	8012730 <__retarget_lock_release_recursive>
 801234e:	bf00      	nop
 8012350:	200064ec 	.word	0x200064ec

08012354 <__sinit_lock_acquire>:
 8012354:	4801      	ldr	r0, [pc, #4]	; (801235c <__sinit_lock_acquire+0x8>)
 8012356:	f000 b9e9 	b.w	801272c <__retarget_lock_acquire_recursive>
 801235a:	bf00      	nop
 801235c:	200064e7 	.word	0x200064e7

08012360 <__sinit_lock_release>:
 8012360:	4801      	ldr	r0, [pc, #4]	; (8012368 <__sinit_lock_release+0x8>)
 8012362:	f000 b9e5 	b.w	8012730 <__retarget_lock_release_recursive>
 8012366:	bf00      	nop
 8012368:	200064e7 	.word	0x200064e7

0801236c <__sinit>:
 801236c:	b510      	push	{r4, lr}
 801236e:	4604      	mov	r4, r0
 8012370:	f7ff fff0 	bl	8012354 <__sinit_lock_acquire>
 8012374:	69a3      	ldr	r3, [r4, #24]
 8012376:	b11b      	cbz	r3, 8012380 <__sinit+0x14>
 8012378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801237c:	f7ff bff0 	b.w	8012360 <__sinit_lock_release>
 8012380:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012384:	6523      	str	r3, [r4, #80]	; 0x50
 8012386:	4b13      	ldr	r3, [pc, #76]	; (80123d4 <__sinit+0x68>)
 8012388:	4a13      	ldr	r2, [pc, #76]	; (80123d8 <__sinit+0x6c>)
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	62a2      	str	r2, [r4, #40]	; 0x28
 801238e:	42a3      	cmp	r3, r4
 8012390:	bf04      	itt	eq
 8012392:	2301      	moveq	r3, #1
 8012394:	61a3      	streq	r3, [r4, #24]
 8012396:	4620      	mov	r0, r4
 8012398:	f000 f820 	bl	80123dc <__sfp>
 801239c:	6060      	str	r0, [r4, #4]
 801239e:	4620      	mov	r0, r4
 80123a0:	f000 f81c 	bl	80123dc <__sfp>
 80123a4:	60a0      	str	r0, [r4, #8]
 80123a6:	4620      	mov	r0, r4
 80123a8:	f000 f818 	bl	80123dc <__sfp>
 80123ac:	2200      	movs	r2, #0
 80123ae:	60e0      	str	r0, [r4, #12]
 80123b0:	2104      	movs	r1, #4
 80123b2:	6860      	ldr	r0, [r4, #4]
 80123b4:	f7ff ff82 	bl	80122bc <std>
 80123b8:	68a0      	ldr	r0, [r4, #8]
 80123ba:	2201      	movs	r2, #1
 80123bc:	2109      	movs	r1, #9
 80123be:	f7ff ff7d 	bl	80122bc <std>
 80123c2:	68e0      	ldr	r0, [r4, #12]
 80123c4:	2202      	movs	r2, #2
 80123c6:	2112      	movs	r1, #18
 80123c8:	f7ff ff78 	bl	80122bc <std>
 80123cc:	2301      	movs	r3, #1
 80123ce:	61a3      	str	r3, [r4, #24]
 80123d0:	e7d2      	b.n	8012378 <__sinit+0xc>
 80123d2:	bf00      	nop
 80123d4:	0801a534 	.word	0x0801a534
 80123d8:	08012305 	.word	0x08012305

080123dc <__sfp>:
 80123dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123de:	4607      	mov	r7, r0
 80123e0:	f7ff ffac 	bl	801233c <__sfp_lock_acquire>
 80123e4:	4b1e      	ldr	r3, [pc, #120]	; (8012460 <__sfp+0x84>)
 80123e6:	681e      	ldr	r6, [r3, #0]
 80123e8:	69b3      	ldr	r3, [r6, #24]
 80123ea:	b913      	cbnz	r3, 80123f2 <__sfp+0x16>
 80123ec:	4630      	mov	r0, r6
 80123ee:	f7ff ffbd 	bl	801236c <__sinit>
 80123f2:	3648      	adds	r6, #72	; 0x48
 80123f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80123f8:	3b01      	subs	r3, #1
 80123fa:	d503      	bpl.n	8012404 <__sfp+0x28>
 80123fc:	6833      	ldr	r3, [r6, #0]
 80123fe:	b30b      	cbz	r3, 8012444 <__sfp+0x68>
 8012400:	6836      	ldr	r6, [r6, #0]
 8012402:	e7f7      	b.n	80123f4 <__sfp+0x18>
 8012404:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012408:	b9d5      	cbnz	r5, 8012440 <__sfp+0x64>
 801240a:	4b16      	ldr	r3, [pc, #88]	; (8012464 <__sfp+0x88>)
 801240c:	60e3      	str	r3, [r4, #12]
 801240e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012412:	6665      	str	r5, [r4, #100]	; 0x64
 8012414:	f000 f988 	bl	8012728 <__retarget_lock_init_recursive>
 8012418:	f7ff ff96 	bl	8012348 <__sfp_lock_release>
 801241c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012420:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012424:	6025      	str	r5, [r4, #0]
 8012426:	61a5      	str	r5, [r4, #24]
 8012428:	2208      	movs	r2, #8
 801242a:	4629      	mov	r1, r5
 801242c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012430:	f000 f9b8 	bl	80127a4 <memset>
 8012434:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012438:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801243c:	4620      	mov	r0, r4
 801243e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012440:	3468      	adds	r4, #104	; 0x68
 8012442:	e7d9      	b.n	80123f8 <__sfp+0x1c>
 8012444:	2104      	movs	r1, #4
 8012446:	4638      	mov	r0, r7
 8012448:	f7ff ff62 	bl	8012310 <__sfmoreglue>
 801244c:	4604      	mov	r4, r0
 801244e:	6030      	str	r0, [r6, #0]
 8012450:	2800      	cmp	r0, #0
 8012452:	d1d5      	bne.n	8012400 <__sfp+0x24>
 8012454:	f7ff ff78 	bl	8012348 <__sfp_lock_release>
 8012458:	230c      	movs	r3, #12
 801245a:	603b      	str	r3, [r7, #0]
 801245c:	e7ee      	b.n	801243c <__sfp+0x60>
 801245e:	bf00      	nop
 8012460:	0801a534 	.word	0x0801a534
 8012464:	ffff0001 	.word	0xffff0001

08012468 <_fwalk_reent>:
 8012468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801246c:	4606      	mov	r6, r0
 801246e:	4688      	mov	r8, r1
 8012470:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012474:	2700      	movs	r7, #0
 8012476:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801247a:	f1b9 0901 	subs.w	r9, r9, #1
 801247e:	d505      	bpl.n	801248c <_fwalk_reent+0x24>
 8012480:	6824      	ldr	r4, [r4, #0]
 8012482:	2c00      	cmp	r4, #0
 8012484:	d1f7      	bne.n	8012476 <_fwalk_reent+0xe>
 8012486:	4638      	mov	r0, r7
 8012488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801248c:	89ab      	ldrh	r3, [r5, #12]
 801248e:	2b01      	cmp	r3, #1
 8012490:	d907      	bls.n	80124a2 <_fwalk_reent+0x3a>
 8012492:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012496:	3301      	adds	r3, #1
 8012498:	d003      	beq.n	80124a2 <_fwalk_reent+0x3a>
 801249a:	4629      	mov	r1, r5
 801249c:	4630      	mov	r0, r6
 801249e:	47c0      	blx	r8
 80124a0:	4307      	orrs	r7, r0
 80124a2:	3568      	adds	r5, #104	; 0x68
 80124a4:	e7e9      	b.n	801247a <_fwalk_reent+0x12>
	...

080124a8 <__libc_init_array>:
 80124a8:	b570      	push	{r4, r5, r6, lr}
 80124aa:	4d0d      	ldr	r5, [pc, #52]	; (80124e0 <__libc_init_array+0x38>)
 80124ac:	4c0d      	ldr	r4, [pc, #52]	; (80124e4 <__libc_init_array+0x3c>)
 80124ae:	1b64      	subs	r4, r4, r5
 80124b0:	10a4      	asrs	r4, r4, #2
 80124b2:	2600      	movs	r6, #0
 80124b4:	42a6      	cmp	r6, r4
 80124b6:	d109      	bne.n	80124cc <__libc_init_array+0x24>
 80124b8:	4d0b      	ldr	r5, [pc, #44]	; (80124e8 <__libc_init_array+0x40>)
 80124ba:	4c0c      	ldr	r4, [pc, #48]	; (80124ec <__libc_init_array+0x44>)
 80124bc:	f006 f83c 	bl	8018538 <_init>
 80124c0:	1b64      	subs	r4, r4, r5
 80124c2:	10a4      	asrs	r4, r4, #2
 80124c4:	2600      	movs	r6, #0
 80124c6:	42a6      	cmp	r6, r4
 80124c8:	d105      	bne.n	80124d6 <__libc_init_array+0x2e>
 80124ca:	bd70      	pop	{r4, r5, r6, pc}
 80124cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80124d0:	4798      	blx	r3
 80124d2:	3601      	adds	r6, #1
 80124d4:	e7ee      	b.n	80124b4 <__libc_init_array+0xc>
 80124d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80124da:	4798      	blx	r3
 80124dc:	3601      	adds	r6, #1
 80124de:	e7f2      	b.n	80124c6 <__libc_init_array+0x1e>
 80124e0:	0801aa60 	.word	0x0801aa60
 80124e4:	0801aa60 	.word	0x0801aa60
 80124e8:	0801aa60 	.word	0x0801aa60
 80124ec:	0801aa68 	.word	0x0801aa68

080124f0 <isxdigit>:
 80124f0:	4b02      	ldr	r3, [pc, #8]	; (80124fc <isxdigit+0xc>)
 80124f2:	4418      	add	r0, r3
 80124f4:	7840      	ldrb	r0, [r0, #1]
 80124f6:	f000 0044 	and.w	r0, r0, #68	; 0x44
 80124fa:	4770      	bx	lr
 80124fc:	0801a3d0 	.word	0x0801a3d0

08012500 <localtime>:
 8012500:	b538      	push	{r3, r4, r5, lr}
 8012502:	4b0b      	ldr	r3, [pc, #44]	; (8012530 <localtime+0x30>)
 8012504:	681d      	ldr	r5, [r3, #0]
 8012506:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8012508:	4604      	mov	r4, r0
 801250a:	b953      	cbnz	r3, 8012522 <localtime+0x22>
 801250c:	2024      	movs	r0, #36	; 0x24
 801250e:	f000 f911 	bl	8012734 <malloc>
 8012512:	4602      	mov	r2, r0
 8012514:	63e8      	str	r0, [r5, #60]	; 0x3c
 8012516:	b920      	cbnz	r0, 8012522 <localtime+0x22>
 8012518:	4b06      	ldr	r3, [pc, #24]	; (8012534 <localtime+0x34>)
 801251a:	4807      	ldr	r0, [pc, #28]	; (8012538 <localtime+0x38>)
 801251c:	2132      	movs	r1, #50	; 0x32
 801251e:	f002 ff9f 	bl	8015460 <__assert_func>
 8012522:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8012524:	4620      	mov	r0, r4
 8012526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801252a:	f000 b807 	b.w	801253c <localtime_r>
 801252e:	bf00      	nop
 8012530:	200000ac 	.word	0x200000ac
 8012534:	0801a538 	.word	0x0801a538
 8012538:	0801a54f 	.word	0x0801a54f

0801253c <localtime_r>:
 801253c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012540:	4607      	mov	r7, r0
 8012542:	9101      	str	r1, [sp, #4]
 8012544:	f004 face 	bl	8016ae4 <__gettzinfo>
 8012548:	9901      	ldr	r1, [sp, #4]
 801254a:	4680      	mov	r8, r0
 801254c:	4638      	mov	r0, r7
 801254e:	f004 facd 	bl	8016aec <gmtime_r>
 8012552:	6943      	ldr	r3, [r0, #20]
 8012554:	079a      	lsls	r2, r3, #30
 8012556:	4604      	mov	r4, r0
 8012558:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 801255c:	d105      	bne.n	801256a <localtime_r+0x2e>
 801255e:	2264      	movs	r2, #100	; 0x64
 8012560:	fb96 f3f2 	sdiv	r3, r6, r2
 8012564:	fb02 6313 	mls	r3, r2, r3, r6
 8012568:	bb7b      	cbnz	r3, 80125ca <localtime_r+0x8e>
 801256a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801256e:	fb96 f5f3 	sdiv	r5, r6, r3
 8012572:	fb03 6515 	mls	r5, r3, r5, r6
 8012576:	fab5 f585 	clz	r5, r5
 801257a:	096d      	lsrs	r5, r5, #5
 801257c:	4b68      	ldr	r3, [pc, #416]	; (8012720 <localtime_r+0x1e4>)
 801257e:	2230      	movs	r2, #48	; 0x30
 8012580:	fb02 3505 	mla	r5, r2, r5, r3
 8012584:	f002 fd0c 	bl	8014fa0 <__tz_lock>
 8012588:	f002 fd16 	bl	8014fb8 <_tzset_unlocked>
 801258c:	4b65      	ldr	r3, [pc, #404]	; (8012724 <localtime_r+0x1e8>)
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	b353      	cbz	r3, 80125e8 <localtime_r+0xac>
 8012592:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012596:	42b3      	cmp	r3, r6
 8012598:	d119      	bne.n	80125ce <localtime_r+0x92>
 801259a:	f8d8 1000 	ldr.w	r1, [r8]
 801259e:	e9d7 6700 	ldrd	r6, r7, [r7]
 80125a2:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 80125a6:	b9d1      	cbnz	r1, 80125de <localtime_r+0xa2>
 80125a8:	4296      	cmp	r6, r2
 80125aa:	eb77 0303 	sbcs.w	r3, r7, r3
 80125ae:	da23      	bge.n	80125f8 <localtime_r+0xbc>
 80125b0:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80125b4:	4296      	cmp	r6, r2
 80125b6:	eb77 0303 	sbcs.w	r3, r7, r3
 80125ba:	bfb4      	ite	lt
 80125bc:	2301      	movlt	r3, #1
 80125be:	2300      	movge	r3, #0
 80125c0:	6223      	str	r3, [r4, #32]
 80125c2:	db1b      	blt.n	80125fc <localtime_r+0xc0>
 80125c4:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 80125c8:	e01a      	b.n	8012600 <localtime_r+0xc4>
 80125ca:	2501      	movs	r5, #1
 80125cc:	e7d6      	b.n	801257c <localtime_r+0x40>
 80125ce:	4630      	mov	r0, r6
 80125d0:	f002 fc3e 	bl	8014e50 <__tzcalc_limits>
 80125d4:	2800      	cmp	r0, #0
 80125d6:	d1e0      	bne.n	801259a <localtime_r+0x5e>
 80125d8:	f04f 33ff 	mov.w	r3, #4294967295
 80125dc:	e004      	b.n	80125e8 <localtime_r+0xac>
 80125de:	4296      	cmp	r6, r2
 80125e0:	eb77 0303 	sbcs.w	r3, r7, r3
 80125e4:	da02      	bge.n	80125ec <localtime_r+0xb0>
 80125e6:	2300      	movs	r3, #0
 80125e8:	6223      	str	r3, [r4, #32]
 80125ea:	e7eb      	b.n	80125c4 <localtime_r+0x88>
 80125ec:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80125f0:	4296      	cmp	r6, r2
 80125f2:	eb77 0303 	sbcs.w	r3, r7, r3
 80125f6:	daf6      	bge.n	80125e6 <localtime_r+0xaa>
 80125f8:	2301      	movs	r3, #1
 80125fa:	6223      	str	r3, [r4, #32]
 80125fc:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8012600:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8012604:	203c      	movs	r0, #60	; 0x3c
 8012606:	fb91 f6f3 	sdiv	r6, r1, r3
 801260a:	fb03 1316 	mls	r3, r3, r6, r1
 801260e:	6861      	ldr	r1, [r4, #4]
 8012610:	fb93 f2f0 	sdiv	r2, r3, r0
 8012614:	fb00 3012 	mls	r0, r0, r2, r3
 8012618:	6823      	ldr	r3, [r4, #0]
 801261a:	1a89      	subs	r1, r1, r2
 801261c:	68a2      	ldr	r2, [r4, #8]
 801261e:	6061      	str	r1, [r4, #4]
 8012620:	1a1b      	subs	r3, r3, r0
 8012622:	1b92      	subs	r2, r2, r6
 8012624:	2b3b      	cmp	r3, #59	; 0x3b
 8012626:	6023      	str	r3, [r4, #0]
 8012628:	60a2      	str	r2, [r4, #8]
 801262a:	dd35      	ble.n	8012698 <localtime_r+0x15c>
 801262c:	3101      	adds	r1, #1
 801262e:	6061      	str	r1, [r4, #4]
 8012630:	3b3c      	subs	r3, #60	; 0x3c
 8012632:	6023      	str	r3, [r4, #0]
 8012634:	6863      	ldr	r3, [r4, #4]
 8012636:	2b3b      	cmp	r3, #59	; 0x3b
 8012638:	dd34      	ble.n	80126a4 <localtime_r+0x168>
 801263a:	3201      	adds	r2, #1
 801263c:	60a2      	str	r2, [r4, #8]
 801263e:	3b3c      	subs	r3, #60	; 0x3c
 8012640:	6063      	str	r3, [r4, #4]
 8012642:	68a3      	ldr	r3, [r4, #8]
 8012644:	2b17      	cmp	r3, #23
 8012646:	dd33      	ble.n	80126b0 <localtime_r+0x174>
 8012648:	69e2      	ldr	r2, [r4, #28]
 801264a:	3201      	adds	r2, #1
 801264c:	61e2      	str	r2, [r4, #28]
 801264e:	69a2      	ldr	r2, [r4, #24]
 8012650:	3201      	adds	r2, #1
 8012652:	2a06      	cmp	r2, #6
 8012654:	bfc8      	it	gt
 8012656:	2200      	movgt	r2, #0
 8012658:	61a2      	str	r2, [r4, #24]
 801265a:	68e2      	ldr	r2, [r4, #12]
 801265c:	3b18      	subs	r3, #24
 801265e:	3201      	adds	r2, #1
 8012660:	60a3      	str	r3, [r4, #8]
 8012662:	6923      	ldr	r3, [r4, #16]
 8012664:	60e2      	str	r2, [r4, #12]
 8012666:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801266a:	428a      	cmp	r2, r1
 801266c:	dd0e      	ble.n	801268c <localtime_r+0x150>
 801266e:	2b0b      	cmp	r3, #11
 8012670:	eba2 0201 	sub.w	r2, r2, r1
 8012674:	60e2      	str	r2, [r4, #12]
 8012676:	f103 0201 	add.w	r2, r3, #1
 801267a:	bf09      	itett	eq
 801267c:	6963      	ldreq	r3, [r4, #20]
 801267e:	6122      	strne	r2, [r4, #16]
 8012680:	2200      	moveq	r2, #0
 8012682:	3301      	addeq	r3, #1
 8012684:	bf02      	ittt	eq
 8012686:	6122      	streq	r2, [r4, #16]
 8012688:	6163      	streq	r3, [r4, #20]
 801268a:	61e2      	streq	r2, [r4, #28]
 801268c:	f002 fc8e 	bl	8014fac <__tz_unlock>
 8012690:	4620      	mov	r0, r4
 8012692:	b002      	add	sp, #8
 8012694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012698:	2b00      	cmp	r3, #0
 801269a:	dacb      	bge.n	8012634 <localtime_r+0xf8>
 801269c:	3901      	subs	r1, #1
 801269e:	6061      	str	r1, [r4, #4]
 80126a0:	333c      	adds	r3, #60	; 0x3c
 80126a2:	e7c6      	b.n	8012632 <localtime_r+0xf6>
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	dacc      	bge.n	8012642 <localtime_r+0x106>
 80126a8:	3a01      	subs	r2, #1
 80126aa:	60a2      	str	r2, [r4, #8]
 80126ac:	333c      	adds	r3, #60	; 0x3c
 80126ae:	e7c7      	b.n	8012640 <localtime_r+0x104>
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	daeb      	bge.n	801268c <localtime_r+0x150>
 80126b4:	69e2      	ldr	r2, [r4, #28]
 80126b6:	3a01      	subs	r2, #1
 80126b8:	61e2      	str	r2, [r4, #28]
 80126ba:	69a2      	ldr	r2, [r4, #24]
 80126bc:	3a01      	subs	r2, #1
 80126be:	bf48      	it	mi
 80126c0:	2206      	movmi	r2, #6
 80126c2:	61a2      	str	r2, [r4, #24]
 80126c4:	68e2      	ldr	r2, [r4, #12]
 80126c6:	3318      	adds	r3, #24
 80126c8:	3a01      	subs	r2, #1
 80126ca:	60e2      	str	r2, [r4, #12]
 80126cc:	60a3      	str	r3, [r4, #8]
 80126ce:	2a00      	cmp	r2, #0
 80126d0:	d1dc      	bne.n	801268c <localtime_r+0x150>
 80126d2:	6923      	ldr	r3, [r4, #16]
 80126d4:	3b01      	subs	r3, #1
 80126d6:	d405      	bmi.n	80126e4 <localtime_r+0x1a8>
 80126d8:	6123      	str	r3, [r4, #16]
 80126da:	6923      	ldr	r3, [r4, #16]
 80126dc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80126e0:	60e3      	str	r3, [r4, #12]
 80126e2:	e7d3      	b.n	801268c <localtime_r+0x150>
 80126e4:	230b      	movs	r3, #11
 80126e6:	6123      	str	r3, [r4, #16]
 80126e8:	6963      	ldr	r3, [r4, #20]
 80126ea:	1e5a      	subs	r2, r3, #1
 80126ec:	6162      	str	r2, [r4, #20]
 80126ee:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 80126f2:	0793      	lsls	r3, r2, #30
 80126f4:	d105      	bne.n	8012702 <localtime_r+0x1c6>
 80126f6:	2164      	movs	r1, #100	; 0x64
 80126f8:	fb92 f3f1 	sdiv	r3, r2, r1
 80126fc:	fb01 2313 	mls	r3, r1, r3, r2
 8012700:	b963      	cbnz	r3, 801271c <localtime_r+0x1e0>
 8012702:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8012706:	fb92 f3f1 	sdiv	r3, r2, r1
 801270a:	fb01 2313 	mls	r3, r1, r3, r2
 801270e:	fab3 f383 	clz	r3, r3
 8012712:	095b      	lsrs	r3, r3, #5
 8012714:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8012718:	61e3      	str	r3, [r4, #28]
 801271a:	e7de      	b.n	80126da <localtime_r+0x19e>
 801271c:	2301      	movs	r3, #1
 801271e:	e7f9      	b.n	8012714 <localtime_r+0x1d8>
 8012720:	0801a610 	.word	0x0801a610
 8012724:	20005a7c 	.word	0x20005a7c

08012728 <__retarget_lock_init_recursive>:
 8012728:	4770      	bx	lr

0801272a <__retarget_lock_acquire>:
 801272a:	4770      	bx	lr

0801272c <__retarget_lock_acquire_recursive>:
 801272c:	4770      	bx	lr

0801272e <__retarget_lock_release>:
 801272e:	4770      	bx	lr

08012730 <__retarget_lock_release_recursive>:
 8012730:	4770      	bx	lr
	...

08012734 <malloc>:
 8012734:	4b02      	ldr	r3, [pc, #8]	; (8012740 <malloc+0xc>)
 8012736:	4601      	mov	r1, r0
 8012738:	6818      	ldr	r0, [r3, #0]
 801273a:	f000 bb09 	b.w	8012d50 <_malloc_r>
 801273e:	bf00      	nop
 8012740:	200000ac 	.word	0x200000ac

08012744 <free>:
 8012744:	4b02      	ldr	r3, [pc, #8]	; (8012750 <free+0xc>)
 8012746:	4601      	mov	r1, r0
 8012748:	6818      	ldr	r0, [r3, #0]
 801274a:	f000 bab1 	b.w	8012cb0 <_free_r>
 801274e:	bf00      	nop
 8012750:	200000ac 	.word	0x200000ac

08012754 <memcpy>:
 8012754:	440a      	add	r2, r1
 8012756:	4291      	cmp	r1, r2
 8012758:	f100 33ff 	add.w	r3, r0, #4294967295
 801275c:	d100      	bne.n	8012760 <memcpy+0xc>
 801275e:	4770      	bx	lr
 8012760:	b510      	push	{r4, lr}
 8012762:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012766:	f803 4f01 	strb.w	r4, [r3, #1]!
 801276a:	4291      	cmp	r1, r2
 801276c:	d1f9      	bne.n	8012762 <memcpy+0xe>
 801276e:	bd10      	pop	{r4, pc}

08012770 <memmove>:
 8012770:	4288      	cmp	r0, r1
 8012772:	b510      	push	{r4, lr}
 8012774:	eb01 0402 	add.w	r4, r1, r2
 8012778:	d902      	bls.n	8012780 <memmove+0x10>
 801277a:	4284      	cmp	r4, r0
 801277c:	4623      	mov	r3, r4
 801277e:	d807      	bhi.n	8012790 <memmove+0x20>
 8012780:	1e43      	subs	r3, r0, #1
 8012782:	42a1      	cmp	r1, r4
 8012784:	d008      	beq.n	8012798 <memmove+0x28>
 8012786:	f811 2b01 	ldrb.w	r2, [r1], #1
 801278a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801278e:	e7f8      	b.n	8012782 <memmove+0x12>
 8012790:	4402      	add	r2, r0
 8012792:	4601      	mov	r1, r0
 8012794:	428a      	cmp	r2, r1
 8012796:	d100      	bne.n	801279a <memmove+0x2a>
 8012798:	bd10      	pop	{r4, pc}
 801279a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801279e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80127a2:	e7f7      	b.n	8012794 <memmove+0x24>

080127a4 <memset>:
 80127a4:	4402      	add	r2, r0
 80127a6:	4603      	mov	r3, r0
 80127a8:	4293      	cmp	r3, r2
 80127aa:	d100      	bne.n	80127ae <memset+0xa>
 80127ac:	4770      	bx	lr
 80127ae:	f803 1b01 	strb.w	r1, [r3], #1
 80127b2:	e7f9      	b.n	80127a8 <memset+0x4>

080127b4 <validate_structure>:
 80127b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80127b6:	6801      	ldr	r1, [r0, #0]
 80127b8:	293b      	cmp	r1, #59	; 0x3b
 80127ba:	4604      	mov	r4, r0
 80127bc:	d911      	bls.n	80127e2 <validate_structure+0x2e>
 80127be:	223c      	movs	r2, #60	; 0x3c
 80127c0:	4668      	mov	r0, sp
 80127c2:	f002 fe7b 	bl	80154bc <div>
 80127c6:	9a01      	ldr	r2, [sp, #4]
 80127c8:	6863      	ldr	r3, [r4, #4]
 80127ca:	9900      	ldr	r1, [sp, #0]
 80127cc:	2a00      	cmp	r2, #0
 80127ce:	440b      	add	r3, r1
 80127d0:	6063      	str	r3, [r4, #4]
 80127d2:	bfbb      	ittet	lt
 80127d4:	323c      	addlt	r2, #60	; 0x3c
 80127d6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80127da:	6022      	strge	r2, [r4, #0]
 80127dc:	6022      	strlt	r2, [r4, #0]
 80127de:	bfb8      	it	lt
 80127e0:	6063      	strlt	r3, [r4, #4]
 80127e2:	6861      	ldr	r1, [r4, #4]
 80127e4:	293b      	cmp	r1, #59	; 0x3b
 80127e6:	d911      	bls.n	801280c <validate_structure+0x58>
 80127e8:	223c      	movs	r2, #60	; 0x3c
 80127ea:	4668      	mov	r0, sp
 80127ec:	f002 fe66 	bl	80154bc <div>
 80127f0:	9a01      	ldr	r2, [sp, #4]
 80127f2:	68a3      	ldr	r3, [r4, #8]
 80127f4:	9900      	ldr	r1, [sp, #0]
 80127f6:	2a00      	cmp	r2, #0
 80127f8:	440b      	add	r3, r1
 80127fa:	60a3      	str	r3, [r4, #8]
 80127fc:	bfbb      	ittet	lt
 80127fe:	323c      	addlt	r2, #60	; 0x3c
 8012800:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8012804:	6062      	strge	r2, [r4, #4]
 8012806:	6062      	strlt	r2, [r4, #4]
 8012808:	bfb8      	it	lt
 801280a:	60a3      	strlt	r3, [r4, #8]
 801280c:	68a1      	ldr	r1, [r4, #8]
 801280e:	2917      	cmp	r1, #23
 8012810:	d911      	bls.n	8012836 <validate_structure+0x82>
 8012812:	2218      	movs	r2, #24
 8012814:	4668      	mov	r0, sp
 8012816:	f002 fe51 	bl	80154bc <div>
 801281a:	9a01      	ldr	r2, [sp, #4]
 801281c:	68e3      	ldr	r3, [r4, #12]
 801281e:	9900      	ldr	r1, [sp, #0]
 8012820:	2a00      	cmp	r2, #0
 8012822:	440b      	add	r3, r1
 8012824:	60e3      	str	r3, [r4, #12]
 8012826:	bfbb      	ittet	lt
 8012828:	3218      	addlt	r2, #24
 801282a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801282e:	60a2      	strge	r2, [r4, #8]
 8012830:	60a2      	strlt	r2, [r4, #8]
 8012832:	bfb8      	it	lt
 8012834:	60e3      	strlt	r3, [r4, #12]
 8012836:	6921      	ldr	r1, [r4, #16]
 8012838:	290b      	cmp	r1, #11
 801283a:	d911      	bls.n	8012860 <validate_structure+0xac>
 801283c:	220c      	movs	r2, #12
 801283e:	4668      	mov	r0, sp
 8012840:	f002 fe3c 	bl	80154bc <div>
 8012844:	9a01      	ldr	r2, [sp, #4]
 8012846:	6963      	ldr	r3, [r4, #20]
 8012848:	9900      	ldr	r1, [sp, #0]
 801284a:	2a00      	cmp	r2, #0
 801284c:	440b      	add	r3, r1
 801284e:	6163      	str	r3, [r4, #20]
 8012850:	bfbb      	ittet	lt
 8012852:	320c      	addlt	r2, #12
 8012854:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8012858:	6122      	strge	r2, [r4, #16]
 801285a:	6122      	strlt	r2, [r4, #16]
 801285c:	bfb8      	it	lt
 801285e:	6163      	strlt	r3, [r4, #20]
 8012860:	6963      	ldr	r3, [r4, #20]
 8012862:	0799      	lsls	r1, r3, #30
 8012864:	d120      	bne.n	80128a8 <validate_structure+0xf4>
 8012866:	2164      	movs	r1, #100	; 0x64
 8012868:	fb93 f2f1 	sdiv	r2, r3, r1
 801286c:	fb01 3212 	mls	r2, r1, r2, r3
 8012870:	b9e2      	cbnz	r2, 80128ac <validate_structure+0xf8>
 8012872:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8012876:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801287a:	fb93 f2f1 	sdiv	r2, r3, r1
 801287e:	fb01 3312 	mls	r3, r1, r2, r3
 8012882:	2b00      	cmp	r3, #0
 8012884:	bf14      	ite	ne
 8012886:	231c      	movne	r3, #28
 8012888:	231d      	moveq	r3, #29
 801288a:	68e2      	ldr	r2, [r4, #12]
 801288c:	2a00      	cmp	r2, #0
 801288e:	dc0f      	bgt.n	80128b0 <validate_structure+0xfc>
 8012890:	4f33      	ldr	r7, [pc, #204]	; (8012960 <validate_structure+0x1ac>)
 8012892:	260b      	movs	r6, #11
 8012894:	2064      	movs	r0, #100	; 0x64
 8012896:	f44f 75c8 	mov.w	r5, #400	; 0x190
 801289a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801289e:	f1bc 0f00 	cmp.w	ip, #0
 80128a2:	dd31      	ble.n	8012908 <validate_structure+0x154>
 80128a4:	b003      	add	sp, #12
 80128a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128a8:	231c      	movs	r3, #28
 80128aa:	e7ee      	b.n	801288a <validate_structure+0xd6>
 80128ac:	231d      	movs	r3, #29
 80128ae:	e7ec      	b.n	801288a <validate_structure+0xd6>
 80128b0:	4f2b      	ldr	r7, [pc, #172]	; (8012960 <validate_structure+0x1ac>)
 80128b2:	f04f 0c00 	mov.w	ip, #0
 80128b6:	2564      	movs	r5, #100	; 0x64
 80128b8:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80128bc:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 80128c0:	2a01      	cmp	r2, #1
 80128c2:	bf14      	ite	ne
 80128c4:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 80128c8:	4618      	moveq	r0, r3
 80128ca:	4281      	cmp	r1, r0
 80128cc:	ddea      	ble.n	80128a4 <validate_structure+0xf0>
 80128ce:	3201      	adds	r2, #1
 80128d0:	1a09      	subs	r1, r1, r0
 80128d2:	2a0c      	cmp	r2, #12
 80128d4:	60e1      	str	r1, [r4, #12]
 80128d6:	6122      	str	r2, [r4, #16]
 80128d8:	d1f0      	bne.n	80128bc <validate_structure+0x108>
 80128da:	6963      	ldr	r3, [r4, #20]
 80128dc:	1c5a      	adds	r2, r3, #1
 80128de:	0791      	lsls	r1, r2, #30
 80128e0:	e9c4 c204 	strd	ip, r2, [r4, #16]
 80128e4:	d137      	bne.n	8012956 <validate_structure+0x1a2>
 80128e6:	fb92 f1f5 	sdiv	r1, r2, r5
 80128ea:	fb05 2211 	mls	r2, r5, r1, r2
 80128ee:	2a00      	cmp	r2, #0
 80128f0:	d133      	bne.n	801295a <validate_structure+0x1a6>
 80128f2:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 80128f6:	fb93 f2f6 	sdiv	r2, r3, r6
 80128fa:	fb06 3312 	mls	r3, r6, r2, r3
 80128fe:	2b00      	cmp	r3, #0
 8012900:	bf14      	ite	ne
 8012902:	231c      	movne	r3, #28
 8012904:	231d      	moveq	r3, #29
 8012906:	e7d9      	b.n	80128bc <validate_structure+0x108>
 8012908:	6921      	ldr	r1, [r4, #16]
 801290a:	3901      	subs	r1, #1
 801290c:	6121      	str	r1, [r4, #16]
 801290e:	3101      	adds	r1, #1
 8012910:	d114      	bne.n	801293c <validate_structure+0x188>
 8012912:	6963      	ldr	r3, [r4, #20]
 8012914:	1e59      	subs	r1, r3, #1
 8012916:	078a      	lsls	r2, r1, #30
 8012918:	e9c4 6104 	strd	r6, r1, [r4, #16]
 801291c:	d117      	bne.n	801294e <validate_structure+0x19a>
 801291e:	fb91 f2f0 	sdiv	r2, r1, r0
 8012922:	fb00 1112 	mls	r1, r0, r2, r1
 8012926:	b9a1      	cbnz	r1, 8012952 <validate_structure+0x19e>
 8012928:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 801292c:	fb93 f2f5 	sdiv	r2, r3, r5
 8012930:	fb05 3312 	mls	r3, r5, r2, r3
 8012934:	2b00      	cmp	r3, #0
 8012936:	bf14      	ite	ne
 8012938:	231c      	movne	r3, #28
 801293a:	231d      	moveq	r3, #29
 801293c:	6922      	ldr	r2, [r4, #16]
 801293e:	2a01      	cmp	r2, #1
 8012940:	bf14      	ite	ne
 8012942:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8012946:	461a      	moveq	r2, r3
 8012948:	4462      	add	r2, ip
 801294a:	60e2      	str	r2, [r4, #12]
 801294c:	e7a5      	b.n	801289a <validate_structure+0xe6>
 801294e:	231c      	movs	r3, #28
 8012950:	e7f4      	b.n	801293c <validate_structure+0x188>
 8012952:	231d      	movs	r3, #29
 8012954:	e7f2      	b.n	801293c <validate_structure+0x188>
 8012956:	231c      	movs	r3, #28
 8012958:	e7b0      	b.n	80128bc <validate_structure+0x108>
 801295a:	231d      	movs	r3, #29
 801295c:	e7ae      	b.n	80128bc <validate_structure+0x108>
 801295e:	bf00      	nop
 8012960:	0801a5b0 	.word	0x0801a5b0

08012964 <mktime>:
 8012964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012968:	b08b      	sub	sp, #44	; 0x2c
 801296a:	4605      	mov	r5, r0
 801296c:	f004 f8ba 	bl	8016ae4 <__gettzinfo>
 8012970:	4607      	mov	r7, r0
 8012972:	4628      	mov	r0, r5
 8012974:	f7ff ff1e 	bl	80127b4 <validate_structure>
 8012978:	e9d5 2300 	ldrd	r2, r3, [r5]
 801297c:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 8012980:	68a8      	ldr	r0, [r5, #8]
 8012982:	696e      	ldr	r6, [r5, #20]
 8012984:	fb0a 2303 	mla	r3, sl, r3, r2
 8012988:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 801298c:	fb0a 3a00 	mla	sl, sl, r0, r3
 8012990:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 8012994:	4ac3      	ldr	r2, [pc, #780]	; (8012ca4 <mktime+0x340>)
 8012996:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801299a:	3c01      	subs	r4, #1
 801299c:	2b01      	cmp	r3, #1
 801299e:	4414      	add	r4, r2
 80129a0:	dd11      	ble.n	80129c6 <mktime+0x62>
 80129a2:	07b1      	lsls	r1, r6, #30
 80129a4:	d10f      	bne.n	80129c6 <mktime+0x62>
 80129a6:	2264      	movs	r2, #100	; 0x64
 80129a8:	fb96 f3f2 	sdiv	r3, r6, r2
 80129ac:	fb02 6313 	mls	r3, r2, r3, r6
 80129b0:	b943      	cbnz	r3, 80129c4 <mktime+0x60>
 80129b2:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 80129b6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80129ba:	fb91 f3f2 	sdiv	r3, r1, r2
 80129be:	fb02 1313 	mls	r3, r2, r3, r1
 80129c2:	b903      	cbnz	r3, 80129c6 <mktime+0x62>
 80129c4:	3401      	adds	r4, #1
 80129c6:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 80129ca:	3310      	adds	r3, #16
 80129cc:	f644 6220 	movw	r2, #20000	; 0x4e20
 80129d0:	4293      	cmp	r3, r2
 80129d2:	61ec      	str	r4, [r5, #28]
 80129d4:	f200 8161 	bhi.w	8012c9a <mktime+0x336>
 80129d8:	2e46      	cmp	r6, #70	; 0x46
 80129da:	dd77      	ble.n	8012acc <mktime+0x168>
 80129dc:	2346      	movs	r3, #70	; 0x46
 80129de:	f240 1e6d 	movw	lr, #365	; 0x16d
 80129e2:	2164      	movs	r1, #100	; 0x64
 80129e4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80129e8:	079a      	lsls	r2, r3, #30
 80129ea:	d169      	bne.n	8012ac0 <mktime+0x15c>
 80129ec:	fb93 f2f1 	sdiv	r2, r3, r1
 80129f0:	fb01 3212 	mls	r2, r1, r2, r3
 80129f4:	2a00      	cmp	r2, #0
 80129f6:	d166      	bne.n	8012ac6 <mktime+0x162>
 80129f8:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 80129fc:	fb9c f2f0 	sdiv	r2, ip, r0
 8012a00:	fb00 c212 	mls	r2, r0, r2, ip
 8012a04:	2a00      	cmp	r2, #0
 8012a06:	bf14      	ite	ne
 8012a08:	4672      	movne	r2, lr
 8012a0a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8012a0e:	3301      	adds	r3, #1
 8012a10:	429e      	cmp	r6, r3
 8012a12:	4414      	add	r4, r2
 8012a14:	d1e8      	bne.n	80129e8 <mktime+0x84>
 8012a16:	4ba4      	ldr	r3, [pc, #656]	; (8012ca8 <mktime+0x344>)
 8012a18:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8012a1c:	fbc3 ab04 	smlal	sl, fp, r3, r4
 8012a20:	f002 fabe 	bl	8014fa0 <__tz_lock>
 8012a24:	f002 fac8 	bl	8014fb8 <_tzset_unlocked>
 8012a28:	4ba0      	ldr	r3, [pc, #640]	; (8012cac <mktime+0x348>)
 8012a2a:	f8d3 9000 	ldr.w	r9, [r3]
 8012a2e:	f1b9 0f00 	cmp.w	r9, #0
 8012a32:	d03f      	beq.n	8012ab4 <mktime+0x150>
 8012a34:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8012a38:	6968      	ldr	r0, [r5, #20]
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	f1b9 0f01 	cmp.w	r9, #1
 8012a40:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8012a44:	46c8      	mov	r8, r9
 8012a46:	bfa8      	it	ge
 8012a48:	f04f 0801 	movge.w	r8, #1
 8012a4c:	4283      	cmp	r3, r0
 8012a4e:	d17f      	bne.n	8012b50 <mktime+0x1ec>
 8012a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a52:	4619      	mov	r1, r3
 8012a54:	17da      	asrs	r2, r3, #31
 8012a56:	e9cd 1200 	strd	r1, r2, [sp]
 8012a5a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8012a5e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8012a62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012a66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012a68:	1a80      	subs	r0, r0, r2
 8012a6a:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 8012a6e:	4582      	cmp	sl, r0
 8012a70:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012a74:	eb7b 0101 	sbcs.w	r1, fp, r1
 8012a78:	da71      	bge.n	8012b5e <mktime+0x1fa>
 8012a7a:	9800      	ldr	r0, [sp, #0]
 8012a7c:	6a39      	ldr	r1, [r7, #32]
 8012a7e:	1a09      	subs	r1, r1, r0
 8012a80:	9104      	str	r1, [sp, #16]
 8012a82:	9801      	ldr	r0, [sp, #4]
 8012a84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012a86:	eb61 0100 	sbc.w	r1, r1, r0
 8012a8a:	9105      	str	r1, [sp, #20]
 8012a8c:	6839      	ldr	r1, [r7, #0]
 8012a8e:	2900      	cmp	r1, #0
 8012a90:	d075      	beq.n	8012b7e <mktime+0x21a>
 8012a92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012a96:	4582      	cmp	sl, r0
 8012a98:	eb7b 0101 	sbcs.w	r1, fp, r1
 8012a9c:	db05      	blt.n	8012aaa <mktime+0x146>
 8012a9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012aa2:	4582      	cmp	sl, r0
 8012aa4:	eb7b 0101 	sbcs.w	r1, fp, r1
 8012aa8:	db6f      	blt.n	8012b8a <mktime+0x226>
 8012aaa:	f1b9 0f00 	cmp.w	r9, #0
 8012aae:	f04f 0900 	mov.w	r9, #0
 8012ab2:	da6f      	bge.n	8012b94 <mktime+0x230>
 8012ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ab6:	eb1a 0a03 	adds.w	sl, sl, r3
 8012aba:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8012abe:	e0ae      	b.n	8012c1e <mktime+0x2ba>
 8012ac0:	f240 126d 	movw	r2, #365	; 0x16d
 8012ac4:	e7a3      	b.n	8012a0e <mktime+0xaa>
 8012ac6:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8012aca:	e7a0      	b.n	8012a0e <mktime+0xaa>
 8012acc:	d0a3      	beq.n	8012a16 <mktime+0xb2>
 8012ace:	2345      	movs	r3, #69	; 0x45
 8012ad0:	f240 1e6d 	movw	lr, #365	; 0x16d
 8012ad4:	2164      	movs	r1, #100	; 0x64
 8012ad6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8012ada:	e012      	b.n	8012b02 <mktime+0x19e>
 8012adc:	bb62      	cbnz	r2, 8012b38 <mktime+0x1d4>
 8012ade:	fb93 f2f1 	sdiv	r2, r3, r1
 8012ae2:	fb01 3212 	mls	r2, r1, r2, r3
 8012ae6:	bb52      	cbnz	r2, 8012b3e <mktime+0x1da>
 8012ae8:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8012aec:	fb9c f2f0 	sdiv	r2, ip, r0
 8012af0:	fb00 c212 	mls	r2, r0, r2, ip
 8012af4:	2a00      	cmp	r2, #0
 8012af6:	bf14      	ite	ne
 8012af8:	4672      	movne	r2, lr
 8012afa:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8012afe:	1aa4      	subs	r4, r4, r2
 8012b00:	3b01      	subs	r3, #1
 8012b02:	429e      	cmp	r6, r3
 8012b04:	f003 0203 	and.w	r2, r3, #3
 8012b08:	dbe8      	blt.n	8012adc <mktime+0x178>
 8012b0a:	b9da      	cbnz	r2, 8012b44 <mktime+0x1e0>
 8012b0c:	2264      	movs	r2, #100	; 0x64
 8012b0e:	fb96 f3f2 	sdiv	r3, r6, r2
 8012b12:	fb02 6313 	mls	r3, r2, r3, r6
 8012b16:	b9c3      	cbnz	r3, 8012b4a <mktime+0x1e6>
 8012b18:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8012b1c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8012b20:	fb91 f3f2 	sdiv	r3, r1, r2
 8012b24:	fb02 1313 	mls	r3, r2, r3, r1
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	f240 136d 	movw	r3, #365	; 0x16d
 8012b2e:	bf08      	it	eq
 8012b30:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8012b34:	1ae4      	subs	r4, r4, r3
 8012b36:	e76e      	b.n	8012a16 <mktime+0xb2>
 8012b38:	f240 126d 	movw	r2, #365	; 0x16d
 8012b3c:	e7df      	b.n	8012afe <mktime+0x19a>
 8012b3e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8012b42:	e7dc      	b.n	8012afe <mktime+0x19a>
 8012b44:	f240 136d 	movw	r3, #365	; 0x16d
 8012b48:	e7f4      	b.n	8012b34 <mktime+0x1d0>
 8012b4a:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8012b4e:	e7f1      	b.n	8012b34 <mktime+0x1d0>
 8012b50:	f002 f97e 	bl	8014e50 <__tzcalc_limits>
 8012b54:	2800      	cmp	r0, #0
 8012b56:	f47f af7b 	bne.w	8012a50 <mktime+0xec>
 8012b5a:	46c1      	mov	r9, r8
 8012b5c:	e054      	b.n	8012c08 <mktime+0x2a4>
 8012b5e:	9800      	ldr	r0, [sp, #0]
 8012b60:	9902      	ldr	r1, [sp, #8]
 8012b62:	1a09      	subs	r1, r1, r0
 8012b64:	9108      	str	r1, [sp, #32]
 8012b66:	9801      	ldr	r0, [sp, #4]
 8012b68:	9903      	ldr	r1, [sp, #12]
 8012b6a:	eb61 0100 	sbc.w	r1, r1, r0
 8012b6e:	9109      	str	r1, [sp, #36]	; 0x24
 8012b70:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012b74:	4582      	cmp	sl, r0
 8012b76:	eb7b 0101 	sbcs.w	r1, fp, r1
 8012b7a:	dbee      	blt.n	8012b5a <mktime+0x1f6>
 8012b7c:	e77d      	b.n	8012a7a <mktime+0x116>
 8012b7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012b82:	4582      	cmp	sl, r0
 8012b84:	eb7b 0101 	sbcs.w	r1, fp, r1
 8012b88:	db89      	blt.n	8012a9e <mktime+0x13a>
 8012b8a:	f1b9 0f00 	cmp.w	r9, #0
 8012b8e:	db3f      	blt.n	8012c10 <mktime+0x2ac>
 8012b90:	f04f 0901 	mov.w	r9, #1
 8012b94:	ea88 0809 	eor.w	r8, r8, r9
 8012b98:	f1b8 0f01 	cmp.w	r8, #1
 8012b9c:	d134      	bne.n	8012c08 <mktime+0x2a4>
 8012b9e:	f1b9 0f00 	cmp.w	r9, #0
 8012ba2:	d04f      	beq.n	8012c44 <mktime+0x2e0>
 8012ba4:	1ad3      	subs	r3, r2, r3
 8012ba6:	682a      	ldr	r2, [r5, #0]
 8012ba8:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8012bac:	441a      	add	r2, r3
 8012bae:	eb1a 0a03 	adds.w	sl, sl, r3
 8012bb2:	602a      	str	r2, [r5, #0]
 8012bb4:	4628      	mov	r0, r5
 8012bb6:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8012bba:	f7ff fdfb 	bl	80127b4 <validate_structure>
 8012bbe:	68ea      	ldr	r2, [r5, #12]
 8012bc0:	ebb2 0208 	subs.w	r2, r2, r8
 8012bc4:	d020      	beq.n	8012c08 <mktime+0x2a4>
 8012bc6:	2a01      	cmp	r2, #1
 8012bc8:	dc3e      	bgt.n	8012c48 <mktime+0x2e4>
 8012bca:	1c90      	adds	r0, r2, #2
 8012bcc:	bfd8      	it	le
 8012bce:	2201      	movle	r2, #1
 8012bd0:	69eb      	ldr	r3, [r5, #28]
 8012bd2:	18d3      	adds	r3, r2, r3
 8012bd4:	4414      	add	r4, r2
 8012bd6:	d540      	bpl.n	8012c5a <mktime+0x2f6>
 8012bd8:	1e72      	subs	r2, r6, #1
 8012bda:	0791      	lsls	r1, r2, #30
 8012bdc:	d137      	bne.n	8012c4e <mktime+0x2ea>
 8012bde:	2164      	movs	r1, #100	; 0x64
 8012be0:	fb92 f3f1 	sdiv	r3, r2, r1
 8012be4:	fb01 2313 	mls	r3, r1, r3, r2
 8012be8:	bba3      	cbnz	r3, 8012c54 <mktime+0x2f0>
 8012bea:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8012bee:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8012bf2:	fb96 f3f2 	sdiv	r3, r6, r2
 8012bf6:	fb02 6613 	mls	r6, r2, r3, r6
 8012bfa:	2e00      	cmp	r6, #0
 8012bfc:	f240 136d 	movw	r3, #365	; 0x16d
 8012c00:	bf18      	it	ne
 8012c02:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8012c06:	61eb      	str	r3, [r5, #28]
 8012c08:	f1b9 0f01 	cmp.w	r9, #1
 8012c0c:	f47f af52 	bne.w	8012ab4 <mktime+0x150>
 8012c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c12:	eb1a 0a03 	adds.w	sl, sl, r3
 8012c16:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8012c1a:	f04f 0901 	mov.w	r9, #1
 8012c1e:	f002 f9c5 	bl	8014fac <__tz_unlock>
 8012c22:	3404      	adds	r4, #4
 8012c24:	2307      	movs	r3, #7
 8012c26:	fb94 f3f3 	sdiv	r3, r4, r3
 8012c2a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8012c2e:	1ae4      	subs	r4, r4, r3
 8012c30:	bf48      	it	mi
 8012c32:	3407      	addmi	r4, #7
 8012c34:	f8c5 9020 	str.w	r9, [r5, #32]
 8012c38:	61ac      	str	r4, [r5, #24]
 8012c3a:	4650      	mov	r0, sl
 8012c3c:	4659      	mov	r1, fp
 8012c3e:	b00b      	add	sp, #44	; 0x2c
 8012c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c44:	1a9b      	subs	r3, r3, r2
 8012c46:	e7ae      	b.n	8012ba6 <mktime+0x242>
 8012c48:	f04f 32ff 	mov.w	r2, #4294967295
 8012c4c:	e7c0      	b.n	8012bd0 <mktime+0x26c>
 8012c4e:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8012c52:	e7d8      	b.n	8012c06 <mktime+0x2a2>
 8012c54:	f240 136d 	movw	r3, #365	; 0x16d
 8012c58:	e7d5      	b.n	8012c06 <mktime+0x2a2>
 8012c5a:	07b2      	lsls	r2, r6, #30
 8012c5c:	d117      	bne.n	8012c8e <mktime+0x32a>
 8012c5e:	2164      	movs	r1, #100	; 0x64
 8012c60:	fb96 f2f1 	sdiv	r2, r6, r1
 8012c64:	fb01 6212 	mls	r2, r1, r2, r6
 8012c68:	b9a2      	cbnz	r2, 8012c94 <mktime+0x330>
 8012c6a:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8012c6e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8012c72:	fb96 f2f1 	sdiv	r2, r6, r1
 8012c76:	fb01 6612 	mls	r6, r1, r2, r6
 8012c7a:	2e00      	cmp	r6, #0
 8012c7c:	f240 126d 	movw	r2, #365	; 0x16d
 8012c80:	bf08      	it	eq
 8012c82:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8012c86:	4293      	cmp	r3, r2
 8012c88:	bfa8      	it	ge
 8012c8a:	1a9b      	subge	r3, r3, r2
 8012c8c:	e7bb      	b.n	8012c06 <mktime+0x2a2>
 8012c8e:	f240 126d 	movw	r2, #365	; 0x16d
 8012c92:	e7f8      	b.n	8012c86 <mktime+0x322>
 8012c94:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8012c98:	e7f5      	b.n	8012c86 <mktime+0x322>
 8012c9a:	f04f 3aff 	mov.w	sl, #4294967295
 8012c9e:	f04f 3bff 	mov.w	fp, #4294967295
 8012ca2:	e7ca      	b.n	8012c3a <mktime+0x2d6>
 8012ca4:	0801a5e0 	.word	0x0801a5e0
 8012ca8:	00015180 	.word	0x00015180
 8012cac:	20005a7c 	.word	0x20005a7c

08012cb0 <_free_r>:
 8012cb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012cb2:	2900      	cmp	r1, #0
 8012cb4:	d048      	beq.n	8012d48 <_free_r+0x98>
 8012cb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012cba:	9001      	str	r0, [sp, #4]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	f1a1 0404 	sub.w	r4, r1, #4
 8012cc2:	bfb8      	it	lt
 8012cc4:	18e4      	addlt	r4, r4, r3
 8012cc6:	f004 f84d 	bl	8016d64 <__malloc_lock>
 8012cca:	4a20      	ldr	r2, [pc, #128]	; (8012d4c <_free_r+0x9c>)
 8012ccc:	9801      	ldr	r0, [sp, #4]
 8012cce:	6813      	ldr	r3, [r2, #0]
 8012cd0:	4615      	mov	r5, r2
 8012cd2:	b933      	cbnz	r3, 8012ce2 <_free_r+0x32>
 8012cd4:	6063      	str	r3, [r4, #4]
 8012cd6:	6014      	str	r4, [r2, #0]
 8012cd8:	b003      	add	sp, #12
 8012cda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012cde:	f004 b847 	b.w	8016d70 <__malloc_unlock>
 8012ce2:	42a3      	cmp	r3, r4
 8012ce4:	d90b      	bls.n	8012cfe <_free_r+0x4e>
 8012ce6:	6821      	ldr	r1, [r4, #0]
 8012ce8:	1862      	adds	r2, r4, r1
 8012cea:	4293      	cmp	r3, r2
 8012cec:	bf04      	itt	eq
 8012cee:	681a      	ldreq	r2, [r3, #0]
 8012cf0:	685b      	ldreq	r3, [r3, #4]
 8012cf2:	6063      	str	r3, [r4, #4]
 8012cf4:	bf04      	itt	eq
 8012cf6:	1852      	addeq	r2, r2, r1
 8012cf8:	6022      	streq	r2, [r4, #0]
 8012cfa:	602c      	str	r4, [r5, #0]
 8012cfc:	e7ec      	b.n	8012cd8 <_free_r+0x28>
 8012cfe:	461a      	mov	r2, r3
 8012d00:	685b      	ldr	r3, [r3, #4]
 8012d02:	b10b      	cbz	r3, 8012d08 <_free_r+0x58>
 8012d04:	42a3      	cmp	r3, r4
 8012d06:	d9fa      	bls.n	8012cfe <_free_r+0x4e>
 8012d08:	6811      	ldr	r1, [r2, #0]
 8012d0a:	1855      	adds	r5, r2, r1
 8012d0c:	42a5      	cmp	r5, r4
 8012d0e:	d10b      	bne.n	8012d28 <_free_r+0x78>
 8012d10:	6824      	ldr	r4, [r4, #0]
 8012d12:	4421      	add	r1, r4
 8012d14:	1854      	adds	r4, r2, r1
 8012d16:	42a3      	cmp	r3, r4
 8012d18:	6011      	str	r1, [r2, #0]
 8012d1a:	d1dd      	bne.n	8012cd8 <_free_r+0x28>
 8012d1c:	681c      	ldr	r4, [r3, #0]
 8012d1e:	685b      	ldr	r3, [r3, #4]
 8012d20:	6053      	str	r3, [r2, #4]
 8012d22:	4421      	add	r1, r4
 8012d24:	6011      	str	r1, [r2, #0]
 8012d26:	e7d7      	b.n	8012cd8 <_free_r+0x28>
 8012d28:	d902      	bls.n	8012d30 <_free_r+0x80>
 8012d2a:	230c      	movs	r3, #12
 8012d2c:	6003      	str	r3, [r0, #0]
 8012d2e:	e7d3      	b.n	8012cd8 <_free_r+0x28>
 8012d30:	6825      	ldr	r5, [r4, #0]
 8012d32:	1961      	adds	r1, r4, r5
 8012d34:	428b      	cmp	r3, r1
 8012d36:	bf04      	itt	eq
 8012d38:	6819      	ldreq	r1, [r3, #0]
 8012d3a:	685b      	ldreq	r3, [r3, #4]
 8012d3c:	6063      	str	r3, [r4, #4]
 8012d3e:	bf04      	itt	eq
 8012d40:	1949      	addeq	r1, r1, r5
 8012d42:	6021      	streq	r1, [r4, #0]
 8012d44:	6054      	str	r4, [r2, #4]
 8012d46:	e7c7      	b.n	8012cd8 <_free_r+0x28>
 8012d48:	b003      	add	sp, #12
 8012d4a:	bd30      	pop	{r4, r5, pc}
 8012d4c:	20005a58 	.word	0x20005a58

08012d50 <_malloc_r>:
 8012d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d52:	1ccd      	adds	r5, r1, #3
 8012d54:	f025 0503 	bic.w	r5, r5, #3
 8012d58:	3508      	adds	r5, #8
 8012d5a:	2d0c      	cmp	r5, #12
 8012d5c:	bf38      	it	cc
 8012d5e:	250c      	movcc	r5, #12
 8012d60:	2d00      	cmp	r5, #0
 8012d62:	4606      	mov	r6, r0
 8012d64:	db01      	blt.n	8012d6a <_malloc_r+0x1a>
 8012d66:	42a9      	cmp	r1, r5
 8012d68:	d903      	bls.n	8012d72 <_malloc_r+0x22>
 8012d6a:	230c      	movs	r3, #12
 8012d6c:	6033      	str	r3, [r6, #0]
 8012d6e:	2000      	movs	r0, #0
 8012d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d72:	f003 fff7 	bl	8016d64 <__malloc_lock>
 8012d76:	4921      	ldr	r1, [pc, #132]	; (8012dfc <_malloc_r+0xac>)
 8012d78:	680a      	ldr	r2, [r1, #0]
 8012d7a:	4614      	mov	r4, r2
 8012d7c:	b99c      	cbnz	r4, 8012da6 <_malloc_r+0x56>
 8012d7e:	4f20      	ldr	r7, [pc, #128]	; (8012e00 <_malloc_r+0xb0>)
 8012d80:	683b      	ldr	r3, [r7, #0]
 8012d82:	b923      	cbnz	r3, 8012d8e <_malloc_r+0x3e>
 8012d84:	4621      	mov	r1, r4
 8012d86:	4630      	mov	r0, r6
 8012d88:	f000 ffae 	bl	8013ce8 <_sbrk_r>
 8012d8c:	6038      	str	r0, [r7, #0]
 8012d8e:	4629      	mov	r1, r5
 8012d90:	4630      	mov	r0, r6
 8012d92:	f000 ffa9 	bl	8013ce8 <_sbrk_r>
 8012d96:	1c43      	adds	r3, r0, #1
 8012d98:	d123      	bne.n	8012de2 <_malloc_r+0x92>
 8012d9a:	230c      	movs	r3, #12
 8012d9c:	6033      	str	r3, [r6, #0]
 8012d9e:	4630      	mov	r0, r6
 8012da0:	f003 ffe6 	bl	8016d70 <__malloc_unlock>
 8012da4:	e7e3      	b.n	8012d6e <_malloc_r+0x1e>
 8012da6:	6823      	ldr	r3, [r4, #0]
 8012da8:	1b5b      	subs	r3, r3, r5
 8012daa:	d417      	bmi.n	8012ddc <_malloc_r+0x8c>
 8012dac:	2b0b      	cmp	r3, #11
 8012dae:	d903      	bls.n	8012db8 <_malloc_r+0x68>
 8012db0:	6023      	str	r3, [r4, #0]
 8012db2:	441c      	add	r4, r3
 8012db4:	6025      	str	r5, [r4, #0]
 8012db6:	e004      	b.n	8012dc2 <_malloc_r+0x72>
 8012db8:	6863      	ldr	r3, [r4, #4]
 8012dba:	42a2      	cmp	r2, r4
 8012dbc:	bf0c      	ite	eq
 8012dbe:	600b      	streq	r3, [r1, #0]
 8012dc0:	6053      	strne	r3, [r2, #4]
 8012dc2:	4630      	mov	r0, r6
 8012dc4:	f003 ffd4 	bl	8016d70 <__malloc_unlock>
 8012dc8:	f104 000b 	add.w	r0, r4, #11
 8012dcc:	1d23      	adds	r3, r4, #4
 8012dce:	f020 0007 	bic.w	r0, r0, #7
 8012dd2:	1ac2      	subs	r2, r0, r3
 8012dd4:	d0cc      	beq.n	8012d70 <_malloc_r+0x20>
 8012dd6:	1a1b      	subs	r3, r3, r0
 8012dd8:	50a3      	str	r3, [r4, r2]
 8012dda:	e7c9      	b.n	8012d70 <_malloc_r+0x20>
 8012ddc:	4622      	mov	r2, r4
 8012dde:	6864      	ldr	r4, [r4, #4]
 8012de0:	e7cc      	b.n	8012d7c <_malloc_r+0x2c>
 8012de2:	1cc4      	adds	r4, r0, #3
 8012de4:	f024 0403 	bic.w	r4, r4, #3
 8012de8:	42a0      	cmp	r0, r4
 8012dea:	d0e3      	beq.n	8012db4 <_malloc_r+0x64>
 8012dec:	1a21      	subs	r1, r4, r0
 8012dee:	4630      	mov	r0, r6
 8012df0:	f000 ff7a 	bl	8013ce8 <_sbrk_r>
 8012df4:	3001      	adds	r0, #1
 8012df6:	d1dd      	bne.n	8012db4 <_malloc_r+0x64>
 8012df8:	e7cf      	b.n	8012d9a <_malloc_r+0x4a>
 8012dfa:	bf00      	nop
 8012dfc:	20005a58 	.word	0x20005a58
 8012e00:	20005a5c 	.word	0x20005a5c

08012e04 <__cvt>:
 8012e04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012e08:	ec55 4b10 	vmov	r4, r5, d0
 8012e0c:	2d00      	cmp	r5, #0
 8012e0e:	460e      	mov	r6, r1
 8012e10:	4619      	mov	r1, r3
 8012e12:	462b      	mov	r3, r5
 8012e14:	bfbb      	ittet	lt
 8012e16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012e1a:	461d      	movlt	r5, r3
 8012e1c:	2300      	movge	r3, #0
 8012e1e:	232d      	movlt	r3, #45	; 0x2d
 8012e20:	700b      	strb	r3, [r1, #0]
 8012e22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012e24:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012e28:	4691      	mov	r9, r2
 8012e2a:	f023 0820 	bic.w	r8, r3, #32
 8012e2e:	bfbc      	itt	lt
 8012e30:	4622      	movlt	r2, r4
 8012e32:	4614      	movlt	r4, r2
 8012e34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012e38:	d005      	beq.n	8012e46 <__cvt+0x42>
 8012e3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012e3e:	d100      	bne.n	8012e42 <__cvt+0x3e>
 8012e40:	3601      	adds	r6, #1
 8012e42:	2102      	movs	r1, #2
 8012e44:	e000      	b.n	8012e48 <__cvt+0x44>
 8012e46:	2103      	movs	r1, #3
 8012e48:	ab03      	add	r3, sp, #12
 8012e4a:	9301      	str	r3, [sp, #4]
 8012e4c:	ab02      	add	r3, sp, #8
 8012e4e:	9300      	str	r3, [sp, #0]
 8012e50:	ec45 4b10 	vmov	d0, r4, r5
 8012e54:	4653      	mov	r3, sl
 8012e56:	4632      	mov	r2, r6
 8012e58:	f002 fbd2 	bl	8015600 <_dtoa_r>
 8012e5c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012e60:	4607      	mov	r7, r0
 8012e62:	d102      	bne.n	8012e6a <__cvt+0x66>
 8012e64:	f019 0f01 	tst.w	r9, #1
 8012e68:	d022      	beq.n	8012eb0 <__cvt+0xac>
 8012e6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012e6e:	eb07 0906 	add.w	r9, r7, r6
 8012e72:	d110      	bne.n	8012e96 <__cvt+0x92>
 8012e74:	783b      	ldrb	r3, [r7, #0]
 8012e76:	2b30      	cmp	r3, #48	; 0x30
 8012e78:	d10a      	bne.n	8012e90 <__cvt+0x8c>
 8012e7a:	2200      	movs	r2, #0
 8012e7c:	2300      	movs	r3, #0
 8012e7e:	4620      	mov	r0, r4
 8012e80:	4629      	mov	r1, r5
 8012e82:	f7ed fe41 	bl	8000b08 <__aeabi_dcmpeq>
 8012e86:	b918      	cbnz	r0, 8012e90 <__cvt+0x8c>
 8012e88:	f1c6 0601 	rsb	r6, r6, #1
 8012e8c:	f8ca 6000 	str.w	r6, [sl]
 8012e90:	f8da 3000 	ldr.w	r3, [sl]
 8012e94:	4499      	add	r9, r3
 8012e96:	2200      	movs	r2, #0
 8012e98:	2300      	movs	r3, #0
 8012e9a:	4620      	mov	r0, r4
 8012e9c:	4629      	mov	r1, r5
 8012e9e:	f7ed fe33 	bl	8000b08 <__aeabi_dcmpeq>
 8012ea2:	b108      	cbz	r0, 8012ea8 <__cvt+0xa4>
 8012ea4:	f8cd 900c 	str.w	r9, [sp, #12]
 8012ea8:	2230      	movs	r2, #48	; 0x30
 8012eaa:	9b03      	ldr	r3, [sp, #12]
 8012eac:	454b      	cmp	r3, r9
 8012eae:	d307      	bcc.n	8012ec0 <__cvt+0xbc>
 8012eb0:	9b03      	ldr	r3, [sp, #12]
 8012eb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012eb4:	1bdb      	subs	r3, r3, r7
 8012eb6:	4638      	mov	r0, r7
 8012eb8:	6013      	str	r3, [r2, #0]
 8012eba:	b004      	add	sp, #16
 8012ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ec0:	1c59      	adds	r1, r3, #1
 8012ec2:	9103      	str	r1, [sp, #12]
 8012ec4:	701a      	strb	r2, [r3, #0]
 8012ec6:	e7f0      	b.n	8012eaa <__cvt+0xa6>

08012ec8 <__exponent>:
 8012ec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012eca:	4603      	mov	r3, r0
 8012ecc:	2900      	cmp	r1, #0
 8012ece:	bfb8      	it	lt
 8012ed0:	4249      	neglt	r1, r1
 8012ed2:	f803 2b02 	strb.w	r2, [r3], #2
 8012ed6:	bfb4      	ite	lt
 8012ed8:	222d      	movlt	r2, #45	; 0x2d
 8012eda:	222b      	movge	r2, #43	; 0x2b
 8012edc:	2909      	cmp	r1, #9
 8012ede:	7042      	strb	r2, [r0, #1]
 8012ee0:	dd2a      	ble.n	8012f38 <__exponent+0x70>
 8012ee2:	f10d 0407 	add.w	r4, sp, #7
 8012ee6:	46a4      	mov	ip, r4
 8012ee8:	270a      	movs	r7, #10
 8012eea:	46a6      	mov	lr, r4
 8012eec:	460a      	mov	r2, r1
 8012eee:	fb91 f6f7 	sdiv	r6, r1, r7
 8012ef2:	fb07 1516 	mls	r5, r7, r6, r1
 8012ef6:	3530      	adds	r5, #48	; 0x30
 8012ef8:	2a63      	cmp	r2, #99	; 0x63
 8012efa:	f104 34ff 	add.w	r4, r4, #4294967295
 8012efe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012f02:	4631      	mov	r1, r6
 8012f04:	dcf1      	bgt.n	8012eea <__exponent+0x22>
 8012f06:	3130      	adds	r1, #48	; 0x30
 8012f08:	f1ae 0502 	sub.w	r5, lr, #2
 8012f0c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012f10:	1c44      	adds	r4, r0, #1
 8012f12:	4629      	mov	r1, r5
 8012f14:	4561      	cmp	r1, ip
 8012f16:	d30a      	bcc.n	8012f2e <__exponent+0x66>
 8012f18:	f10d 0209 	add.w	r2, sp, #9
 8012f1c:	eba2 020e 	sub.w	r2, r2, lr
 8012f20:	4565      	cmp	r5, ip
 8012f22:	bf88      	it	hi
 8012f24:	2200      	movhi	r2, #0
 8012f26:	4413      	add	r3, r2
 8012f28:	1a18      	subs	r0, r3, r0
 8012f2a:	b003      	add	sp, #12
 8012f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012f32:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012f36:	e7ed      	b.n	8012f14 <__exponent+0x4c>
 8012f38:	2330      	movs	r3, #48	; 0x30
 8012f3a:	3130      	adds	r1, #48	; 0x30
 8012f3c:	7083      	strb	r3, [r0, #2]
 8012f3e:	70c1      	strb	r1, [r0, #3]
 8012f40:	1d03      	adds	r3, r0, #4
 8012f42:	e7f1      	b.n	8012f28 <__exponent+0x60>

08012f44 <_printf_float>:
 8012f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f48:	ed2d 8b02 	vpush	{d8}
 8012f4c:	b08d      	sub	sp, #52	; 0x34
 8012f4e:	460c      	mov	r4, r1
 8012f50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012f54:	4616      	mov	r6, r2
 8012f56:	461f      	mov	r7, r3
 8012f58:	4605      	mov	r5, r0
 8012f5a:	f003 fe77 	bl	8016c4c <_localeconv_r>
 8012f5e:	f8d0 a000 	ldr.w	sl, [r0]
 8012f62:	4650      	mov	r0, sl
 8012f64:	f7ed f94e 	bl	8000204 <strlen>
 8012f68:	2300      	movs	r3, #0
 8012f6a:	930a      	str	r3, [sp, #40]	; 0x28
 8012f6c:	6823      	ldr	r3, [r4, #0]
 8012f6e:	9305      	str	r3, [sp, #20]
 8012f70:	f8d8 3000 	ldr.w	r3, [r8]
 8012f74:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012f78:	3307      	adds	r3, #7
 8012f7a:	f023 0307 	bic.w	r3, r3, #7
 8012f7e:	f103 0208 	add.w	r2, r3, #8
 8012f82:	f8c8 2000 	str.w	r2, [r8]
 8012f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f8a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012f8e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012f92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012f96:	9307      	str	r3, [sp, #28]
 8012f98:	f8cd 8018 	str.w	r8, [sp, #24]
 8012f9c:	ee08 0a10 	vmov	s16, r0
 8012fa0:	4b9f      	ldr	r3, [pc, #636]	; (8013220 <_printf_float+0x2dc>)
 8012fa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8012faa:	f7ed fddf 	bl	8000b6c <__aeabi_dcmpun>
 8012fae:	bb88      	cbnz	r0, 8013014 <_printf_float+0xd0>
 8012fb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012fb4:	4b9a      	ldr	r3, [pc, #616]	; (8013220 <_printf_float+0x2dc>)
 8012fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8012fba:	f7ed fdb9 	bl	8000b30 <__aeabi_dcmple>
 8012fbe:	bb48      	cbnz	r0, 8013014 <_printf_float+0xd0>
 8012fc0:	2200      	movs	r2, #0
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	4640      	mov	r0, r8
 8012fc6:	4649      	mov	r1, r9
 8012fc8:	f7ed fda8 	bl	8000b1c <__aeabi_dcmplt>
 8012fcc:	b110      	cbz	r0, 8012fd4 <_printf_float+0x90>
 8012fce:	232d      	movs	r3, #45	; 0x2d
 8012fd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012fd4:	4b93      	ldr	r3, [pc, #588]	; (8013224 <_printf_float+0x2e0>)
 8012fd6:	4894      	ldr	r0, [pc, #592]	; (8013228 <_printf_float+0x2e4>)
 8012fd8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012fdc:	bf94      	ite	ls
 8012fde:	4698      	movls	r8, r3
 8012fe0:	4680      	movhi	r8, r0
 8012fe2:	2303      	movs	r3, #3
 8012fe4:	6123      	str	r3, [r4, #16]
 8012fe6:	9b05      	ldr	r3, [sp, #20]
 8012fe8:	f023 0204 	bic.w	r2, r3, #4
 8012fec:	6022      	str	r2, [r4, #0]
 8012fee:	f04f 0900 	mov.w	r9, #0
 8012ff2:	9700      	str	r7, [sp, #0]
 8012ff4:	4633      	mov	r3, r6
 8012ff6:	aa0b      	add	r2, sp, #44	; 0x2c
 8012ff8:	4621      	mov	r1, r4
 8012ffa:	4628      	mov	r0, r5
 8012ffc:	f000 f9d8 	bl	80133b0 <_printf_common>
 8013000:	3001      	adds	r0, #1
 8013002:	f040 8090 	bne.w	8013126 <_printf_float+0x1e2>
 8013006:	f04f 30ff 	mov.w	r0, #4294967295
 801300a:	b00d      	add	sp, #52	; 0x34
 801300c:	ecbd 8b02 	vpop	{d8}
 8013010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013014:	4642      	mov	r2, r8
 8013016:	464b      	mov	r3, r9
 8013018:	4640      	mov	r0, r8
 801301a:	4649      	mov	r1, r9
 801301c:	f7ed fda6 	bl	8000b6c <__aeabi_dcmpun>
 8013020:	b140      	cbz	r0, 8013034 <_printf_float+0xf0>
 8013022:	464b      	mov	r3, r9
 8013024:	2b00      	cmp	r3, #0
 8013026:	bfbc      	itt	lt
 8013028:	232d      	movlt	r3, #45	; 0x2d
 801302a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801302e:	487f      	ldr	r0, [pc, #508]	; (801322c <_printf_float+0x2e8>)
 8013030:	4b7f      	ldr	r3, [pc, #508]	; (8013230 <_printf_float+0x2ec>)
 8013032:	e7d1      	b.n	8012fd8 <_printf_float+0x94>
 8013034:	6863      	ldr	r3, [r4, #4]
 8013036:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801303a:	9206      	str	r2, [sp, #24]
 801303c:	1c5a      	adds	r2, r3, #1
 801303e:	d13f      	bne.n	80130c0 <_printf_float+0x17c>
 8013040:	2306      	movs	r3, #6
 8013042:	6063      	str	r3, [r4, #4]
 8013044:	9b05      	ldr	r3, [sp, #20]
 8013046:	6861      	ldr	r1, [r4, #4]
 8013048:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801304c:	2300      	movs	r3, #0
 801304e:	9303      	str	r3, [sp, #12]
 8013050:	ab0a      	add	r3, sp, #40	; 0x28
 8013052:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013056:	ab09      	add	r3, sp, #36	; 0x24
 8013058:	ec49 8b10 	vmov	d0, r8, r9
 801305c:	9300      	str	r3, [sp, #0]
 801305e:	6022      	str	r2, [r4, #0]
 8013060:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013064:	4628      	mov	r0, r5
 8013066:	f7ff fecd 	bl	8012e04 <__cvt>
 801306a:	9b06      	ldr	r3, [sp, #24]
 801306c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801306e:	2b47      	cmp	r3, #71	; 0x47
 8013070:	4680      	mov	r8, r0
 8013072:	d108      	bne.n	8013086 <_printf_float+0x142>
 8013074:	1cc8      	adds	r0, r1, #3
 8013076:	db02      	blt.n	801307e <_printf_float+0x13a>
 8013078:	6863      	ldr	r3, [r4, #4]
 801307a:	4299      	cmp	r1, r3
 801307c:	dd41      	ble.n	8013102 <_printf_float+0x1be>
 801307e:	f1ab 0b02 	sub.w	fp, fp, #2
 8013082:	fa5f fb8b 	uxtb.w	fp, fp
 8013086:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801308a:	d820      	bhi.n	80130ce <_printf_float+0x18a>
 801308c:	3901      	subs	r1, #1
 801308e:	465a      	mov	r2, fp
 8013090:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013094:	9109      	str	r1, [sp, #36]	; 0x24
 8013096:	f7ff ff17 	bl	8012ec8 <__exponent>
 801309a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801309c:	1813      	adds	r3, r2, r0
 801309e:	2a01      	cmp	r2, #1
 80130a0:	4681      	mov	r9, r0
 80130a2:	6123      	str	r3, [r4, #16]
 80130a4:	dc02      	bgt.n	80130ac <_printf_float+0x168>
 80130a6:	6822      	ldr	r2, [r4, #0]
 80130a8:	07d2      	lsls	r2, r2, #31
 80130aa:	d501      	bpl.n	80130b0 <_printf_float+0x16c>
 80130ac:	3301      	adds	r3, #1
 80130ae:	6123      	str	r3, [r4, #16]
 80130b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d09c      	beq.n	8012ff2 <_printf_float+0xae>
 80130b8:	232d      	movs	r3, #45	; 0x2d
 80130ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80130be:	e798      	b.n	8012ff2 <_printf_float+0xae>
 80130c0:	9a06      	ldr	r2, [sp, #24]
 80130c2:	2a47      	cmp	r2, #71	; 0x47
 80130c4:	d1be      	bne.n	8013044 <_printf_float+0x100>
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d1bc      	bne.n	8013044 <_printf_float+0x100>
 80130ca:	2301      	movs	r3, #1
 80130cc:	e7b9      	b.n	8013042 <_printf_float+0xfe>
 80130ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80130d2:	d118      	bne.n	8013106 <_printf_float+0x1c2>
 80130d4:	2900      	cmp	r1, #0
 80130d6:	6863      	ldr	r3, [r4, #4]
 80130d8:	dd0b      	ble.n	80130f2 <_printf_float+0x1ae>
 80130da:	6121      	str	r1, [r4, #16]
 80130dc:	b913      	cbnz	r3, 80130e4 <_printf_float+0x1a0>
 80130de:	6822      	ldr	r2, [r4, #0]
 80130e0:	07d0      	lsls	r0, r2, #31
 80130e2:	d502      	bpl.n	80130ea <_printf_float+0x1a6>
 80130e4:	3301      	adds	r3, #1
 80130e6:	440b      	add	r3, r1
 80130e8:	6123      	str	r3, [r4, #16]
 80130ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80130ec:	f04f 0900 	mov.w	r9, #0
 80130f0:	e7de      	b.n	80130b0 <_printf_float+0x16c>
 80130f2:	b913      	cbnz	r3, 80130fa <_printf_float+0x1b6>
 80130f4:	6822      	ldr	r2, [r4, #0]
 80130f6:	07d2      	lsls	r2, r2, #31
 80130f8:	d501      	bpl.n	80130fe <_printf_float+0x1ba>
 80130fa:	3302      	adds	r3, #2
 80130fc:	e7f4      	b.n	80130e8 <_printf_float+0x1a4>
 80130fe:	2301      	movs	r3, #1
 8013100:	e7f2      	b.n	80130e8 <_printf_float+0x1a4>
 8013102:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013108:	4299      	cmp	r1, r3
 801310a:	db05      	blt.n	8013118 <_printf_float+0x1d4>
 801310c:	6823      	ldr	r3, [r4, #0]
 801310e:	6121      	str	r1, [r4, #16]
 8013110:	07d8      	lsls	r0, r3, #31
 8013112:	d5ea      	bpl.n	80130ea <_printf_float+0x1a6>
 8013114:	1c4b      	adds	r3, r1, #1
 8013116:	e7e7      	b.n	80130e8 <_printf_float+0x1a4>
 8013118:	2900      	cmp	r1, #0
 801311a:	bfd4      	ite	le
 801311c:	f1c1 0202 	rsble	r2, r1, #2
 8013120:	2201      	movgt	r2, #1
 8013122:	4413      	add	r3, r2
 8013124:	e7e0      	b.n	80130e8 <_printf_float+0x1a4>
 8013126:	6823      	ldr	r3, [r4, #0]
 8013128:	055a      	lsls	r2, r3, #21
 801312a:	d407      	bmi.n	801313c <_printf_float+0x1f8>
 801312c:	6923      	ldr	r3, [r4, #16]
 801312e:	4642      	mov	r2, r8
 8013130:	4631      	mov	r1, r6
 8013132:	4628      	mov	r0, r5
 8013134:	47b8      	blx	r7
 8013136:	3001      	adds	r0, #1
 8013138:	d12c      	bne.n	8013194 <_printf_float+0x250>
 801313a:	e764      	b.n	8013006 <_printf_float+0xc2>
 801313c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013140:	f240 80e0 	bls.w	8013304 <_printf_float+0x3c0>
 8013144:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013148:	2200      	movs	r2, #0
 801314a:	2300      	movs	r3, #0
 801314c:	f7ed fcdc 	bl	8000b08 <__aeabi_dcmpeq>
 8013150:	2800      	cmp	r0, #0
 8013152:	d034      	beq.n	80131be <_printf_float+0x27a>
 8013154:	4a37      	ldr	r2, [pc, #220]	; (8013234 <_printf_float+0x2f0>)
 8013156:	2301      	movs	r3, #1
 8013158:	4631      	mov	r1, r6
 801315a:	4628      	mov	r0, r5
 801315c:	47b8      	blx	r7
 801315e:	3001      	adds	r0, #1
 8013160:	f43f af51 	beq.w	8013006 <_printf_float+0xc2>
 8013164:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013168:	429a      	cmp	r2, r3
 801316a:	db02      	blt.n	8013172 <_printf_float+0x22e>
 801316c:	6823      	ldr	r3, [r4, #0]
 801316e:	07d8      	lsls	r0, r3, #31
 8013170:	d510      	bpl.n	8013194 <_printf_float+0x250>
 8013172:	ee18 3a10 	vmov	r3, s16
 8013176:	4652      	mov	r2, sl
 8013178:	4631      	mov	r1, r6
 801317a:	4628      	mov	r0, r5
 801317c:	47b8      	blx	r7
 801317e:	3001      	adds	r0, #1
 8013180:	f43f af41 	beq.w	8013006 <_printf_float+0xc2>
 8013184:	f04f 0800 	mov.w	r8, #0
 8013188:	f104 091a 	add.w	r9, r4, #26
 801318c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801318e:	3b01      	subs	r3, #1
 8013190:	4543      	cmp	r3, r8
 8013192:	dc09      	bgt.n	80131a8 <_printf_float+0x264>
 8013194:	6823      	ldr	r3, [r4, #0]
 8013196:	079b      	lsls	r3, r3, #30
 8013198:	f100 8105 	bmi.w	80133a6 <_printf_float+0x462>
 801319c:	68e0      	ldr	r0, [r4, #12]
 801319e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80131a0:	4298      	cmp	r0, r3
 80131a2:	bfb8      	it	lt
 80131a4:	4618      	movlt	r0, r3
 80131a6:	e730      	b.n	801300a <_printf_float+0xc6>
 80131a8:	2301      	movs	r3, #1
 80131aa:	464a      	mov	r2, r9
 80131ac:	4631      	mov	r1, r6
 80131ae:	4628      	mov	r0, r5
 80131b0:	47b8      	blx	r7
 80131b2:	3001      	adds	r0, #1
 80131b4:	f43f af27 	beq.w	8013006 <_printf_float+0xc2>
 80131b8:	f108 0801 	add.w	r8, r8, #1
 80131bc:	e7e6      	b.n	801318c <_printf_float+0x248>
 80131be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	dc39      	bgt.n	8013238 <_printf_float+0x2f4>
 80131c4:	4a1b      	ldr	r2, [pc, #108]	; (8013234 <_printf_float+0x2f0>)
 80131c6:	2301      	movs	r3, #1
 80131c8:	4631      	mov	r1, r6
 80131ca:	4628      	mov	r0, r5
 80131cc:	47b8      	blx	r7
 80131ce:	3001      	adds	r0, #1
 80131d0:	f43f af19 	beq.w	8013006 <_printf_float+0xc2>
 80131d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80131d8:	4313      	orrs	r3, r2
 80131da:	d102      	bne.n	80131e2 <_printf_float+0x29e>
 80131dc:	6823      	ldr	r3, [r4, #0]
 80131de:	07d9      	lsls	r1, r3, #31
 80131e0:	d5d8      	bpl.n	8013194 <_printf_float+0x250>
 80131e2:	ee18 3a10 	vmov	r3, s16
 80131e6:	4652      	mov	r2, sl
 80131e8:	4631      	mov	r1, r6
 80131ea:	4628      	mov	r0, r5
 80131ec:	47b8      	blx	r7
 80131ee:	3001      	adds	r0, #1
 80131f0:	f43f af09 	beq.w	8013006 <_printf_float+0xc2>
 80131f4:	f04f 0900 	mov.w	r9, #0
 80131f8:	f104 0a1a 	add.w	sl, r4, #26
 80131fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131fe:	425b      	negs	r3, r3
 8013200:	454b      	cmp	r3, r9
 8013202:	dc01      	bgt.n	8013208 <_printf_float+0x2c4>
 8013204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013206:	e792      	b.n	801312e <_printf_float+0x1ea>
 8013208:	2301      	movs	r3, #1
 801320a:	4652      	mov	r2, sl
 801320c:	4631      	mov	r1, r6
 801320e:	4628      	mov	r0, r5
 8013210:	47b8      	blx	r7
 8013212:	3001      	adds	r0, #1
 8013214:	f43f aef7 	beq.w	8013006 <_printf_float+0xc2>
 8013218:	f109 0901 	add.w	r9, r9, #1
 801321c:	e7ee      	b.n	80131fc <_printf_float+0x2b8>
 801321e:	bf00      	nop
 8013220:	7fefffff 	.word	0x7fefffff
 8013224:	0801a670 	.word	0x0801a670
 8013228:	0801a674 	.word	0x0801a674
 801322c:	0801a67c 	.word	0x0801a67c
 8013230:	0801a678 	.word	0x0801a678
 8013234:	0801aa41 	.word	0x0801aa41
 8013238:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801323a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801323c:	429a      	cmp	r2, r3
 801323e:	bfa8      	it	ge
 8013240:	461a      	movge	r2, r3
 8013242:	2a00      	cmp	r2, #0
 8013244:	4691      	mov	r9, r2
 8013246:	dc37      	bgt.n	80132b8 <_printf_float+0x374>
 8013248:	f04f 0b00 	mov.w	fp, #0
 801324c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013250:	f104 021a 	add.w	r2, r4, #26
 8013254:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013256:	9305      	str	r3, [sp, #20]
 8013258:	eba3 0309 	sub.w	r3, r3, r9
 801325c:	455b      	cmp	r3, fp
 801325e:	dc33      	bgt.n	80132c8 <_printf_float+0x384>
 8013260:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013264:	429a      	cmp	r2, r3
 8013266:	db3b      	blt.n	80132e0 <_printf_float+0x39c>
 8013268:	6823      	ldr	r3, [r4, #0]
 801326a:	07da      	lsls	r2, r3, #31
 801326c:	d438      	bmi.n	80132e0 <_printf_float+0x39c>
 801326e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013270:	9b05      	ldr	r3, [sp, #20]
 8013272:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013274:	1ad3      	subs	r3, r2, r3
 8013276:	eba2 0901 	sub.w	r9, r2, r1
 801327a:	4599      	cmp	r9, r3
 801327c:	bfa8      	it	ge
 801327e:	4699      	movge	r9, r3
 8013280:	f1b9 0f00 	cmp.w	r9, #0
 8013284:	dc35      	bgt.n	80132f2 <_printf_float+0x3ae>
 8013286:	f04f 0800 	mov.w	r8, #0
 801328a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801328e:	f104 0a1a 	add.w	sl, r4, #26
 8013292:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013296:	1a9b      	subs	r3, r3, r2
 8013298:	eba3 0309 	sub.w	r3, r3, r9
 801329c:	4543      	cmp	r3, r8
 801329e:	f77f af79 	ble.w	8013194 <_printf_float+0x250>
 80132a2:	2301      	movs	r3, #1
 80132a4:	4652      	mov	r2, sl
 80132a6:	4631      	mov	r1, r6
 80132a8:	4628      	mov	r0, r5
 80132aa:	47b8      	blx	r7
 80132ac:	3001      	adds	r0, #1
 80132ae:	f43f aeaa 	beq.w	8013006 <_printf_float+0xc2>
 80132b2:	f108 0801 	add.w	r8, r8, #1
 80132b6:	e7ec      	b.n	8013292 <_printf_float+0x34e>
 80132b8:	4613      	mov	r3, r2
 80132ba:	4631      	mov	r1, r6
 80132bc:	4642      	mov	r2, r8
 80132be:	4628      	mov	r0, r5
 80132c0:	47b8      	blx	r7
 80132c2:	3001      	adds	r0, #1
 80132c4:	d1c0      	bne.n	8013248 <_printf_float+0x304>
 80132c6:	e69e      	b.n	8013006 <_printf_float+0xc2>
 80132c8:	2301      	movs	r3, #1
 80132ca:	4631      	mov	r1, r6
 80132cc:	4628      	mov	r0, r5
 80132ce:	9205      	str	r2, [sp, #20]
 80132d0:	47b8      	blx	r7
 80132d2:	3001      	adds	r0, #1
 80132d4:	f43f ae97 	beq.w	8013006 <_printf_float+0xc2>
 80132d8:	9a05      	ldr	r2, [sp, #20]
 80132da:	f10b 0b01 	add.w	fp, fp, #1
 80132de:	e7b9      	b.n	8013254 <_printf_float+0x310>
 80132e0:	ee18 3a10 	vmov	r3, s16
 80132e4:	4652      	mov	r2, sl
 80132e6:	4631      	mov	r1, r6
 80132e8:	4628      	mov	r0, r5
 80132ea:	47b8      	blx	r7
 80132ec:	3001      	adds	r0, #1
 80132ee:	d1be      	bne.n	801326e <_printf_float+0x32a>
 80132f0:	e689      	b.n	8013006 <_printf_float+0xc2>
 80132f2:	9a05      	ldr	r2, [sp, #20]
 80132f4:	464b      	mov	r3, r9
 80132f6:	4442      	add	r2, r8
 80132f8:	4631      	mov	r1, r6
 80132fa:	4628      	mov	r0, r5
 80132fc:	47b8      	blx	r7
 80132fe:	3001      	adds	r0, #1
 8013300:	d1c1      	bne.n	8013286 <_printf_float+0x342>
 8013302:	e680      	b.n	8013006 <_printf_float+0xc2>
 8013304:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013306:	2a01      	cmp	r2, #1
 8013308:	dc01      	bgt.n	801330e <_printf_float+0x3ca>
 801330a:	07db      	lsls	r3, r3, #31
 801330c:	d538      	bpl.n	8013380 <_printf_float+0x43c>
 801330e:	2301      	movs	r3, #1
 8013310:	4642      	mov	r2, r8
 8013312:	4631      	mov	r1, r6
 8013314:	4628      	mov	r0, r5
 8013316:	47b8      	blx	r7
 8013318:	3001      	adds	r0, #1
 801331a:	f43f ae74 	beq.w	8013006 <_printf_float+0xc2>
 801331e:	ee18 3a10 	vmov	r3, s16
 8013322:	4652      	mov	r2, sl
 8013324:	4631      	mov	r1, r6
 8013326:	4628      	mov	r0, r5
 8013328:	47b8      	blx	r7
 801332a:	3001      	adds	r0, #1
 801332c:	f43f ae6b 	beq.w	8013006 <_printf_float+0xc2>
 8013330:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013334:	2200      	movs	r2, #0
 8013336:	2300      	movs	r3, #0
 8013338:	f7ed fbe6 	bl	8000b08 <__aeabi_dcmpeq>
 801333c:	b9d8      	cbnz	r0, 8013376 <_printf_float+0x432>
 801333e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013340:	f108 0201 	add.w	r2, r8, #1
 8013344:	3b01      	subs	r3, #1
 8013346:	4631      	mov	r1, r6
 8013348:	4628      	mov	r0, r5
 801334a:	47b8      	blx	r7
 801334c:	3001      	adds	r0, #1
 801334e:	d10e      	bne.n	801336e <_printf_float+0x42a>
 8013350:	e659      	b.n	8013006 <_printf_float+0xc2>
 8013352:	2301      	movs	r3, #1
 8013354:	4652      	mov	r2, sl
 8013356:	4631      	mov	r1, r6
 8013358:	4628      	mov	r0, r5
 801335a:	47b8      	blx	r7
 801335c:	3001      	adds	r0, #1
 801335e:	f43f ae52 	beq.w	8013006 <_printf_float+0xc2>
 8013362:	f108 0801 	add.w	r8, r8, #1
 8013366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013368:	3b01      	subs	r3, #1
 801336a:	4543      	cmp	r3, r8
 801336c:	dcf1      	bgt.n	8013352 <_printf_float+0x40e>
 801336e:	464b      	mov	r3, r9
 8013370:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013374:	e6dc      	b.n	8013130 <_printf_float+0x1ec>
 8013376:	f04f 0800 	mov.w	r8, #0
 801337a:	f104 0a1a 	add.w	sl, r4, #26
 801337e:	e7f2      	b.n	8013366 <_printf_float+0x422>
 8013380:	2301      	movs	r3, #1
 8013382:	4642      	mov	r2, r8
 8013384:	e7df      	b.n	8013346 <_printf_float+0x402>
 8013386:	2301      	movs	r3, #1
 8013388:	464a      	mov	r2, r9
 801338a:	4631      	mov	r1, r6
 801338c:	4628      	mov	r0, r5
 801338e:	47b8      	blx	r7
 8013390:	3001      	adds	r0, #1
 8013392:	f43f ae38 	beq.w	8013006 <_printf_float+0xc2>
 8013396:	f108 0801 	add.w	r8, r8, #1
 801339a:	68e3      	ldr	r3, [r4, #12]
 801339c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801339e:	1a5b      	subs	r3, r3, r1
 80133a0:	4543      	cmp	r3, r8
 80133a2:	dcf0      	bgt.n	8013386 <_printf_float+0x442>
 80133a4:	e6fa      	b.n	801319c <_printf_float+0x258>
 80133a6:	f04f 0800 	mov.w	r8, #0
 80133aa:	f104 0919 	add.w	r9, r4, #25
 80133ae:	e7f4      	b.n	801339a <_printf_float+0x456>

080133b0 <_printf_common>:
 80133b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133b4:	4616      	mov	r6, r2
 80133b6:	4699      	mov	r9, r3
 80133b8:	688a      	ldr	r2, [r1, #8]
 80133ba:	690b      	ldr	r3, [r1, #16]
 80133bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80133c0:	4293      	cmp	r3, r2
 80133c2:	bfb8      	it	lt
 80133c4:	4613      	movlt	r3, r2
 80133c6:	6033      	str	r3, [r6, #0]
 80133c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80133cc:	4607      	mov	r7, r0
 80133ce:	460c      	mov	r4, r1
 80133d0:	b10a      	cbz	r2, 80133d6 <_printf_common+0x26>
 80133d2:	3301      	adds	r3, #1
 80133d4:	6033      	str	r3, [r6, #0]
 80133d6:	6823      	ldr	r3, [r4, #0]
 80133d8:	0699      	lsls	r1, r3, #26
 80133da:	bf42      	ittt	mi
 80133dc:	6833      	ldrmi	r3, [r6, #0]
 80133de:	3302      	addmi	r3, #2
 80133e0:	6033      	strmi	r3, [r6, #0]
 80133e2:	6825      	ldr	r5, [r4, #0]
 80133e4:	f015 0506 	ands.w	r5, r5, #6
 80133e8:	d106      	bne.n	80133f8 <_printf_common+0x48>
 80133ea:	f104 0a19 	add.w	sl, r4, #25
 80133ee:	68e3      	ldr	r3, [r4, #12]
 80133f0:	6832      	ldr	r2, [r6, #0]
 80133f2:	1a9b      	subs	r3, r3, r2
 80133f4:	42ab      	cmp	r3, r5
 80133f6:	dc26      	bgt.n	8013446 <_printf_common+0x96>
 80133f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80133fc:	1e13      	subs	r3, r2, #0
 80133fe:	6822      	ldr	r2, [r4, #0]
 8013400:	bf18      	it	ne
 8013402:	2301      	movne	r3, #1
 8013404:	0692      	lsls	r2, r2, #26
 8013406:	d42b      	bmi.n	8013460 <_printf_common+0xb0>
 8013408:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801340c:	4649      	mov	r1, r9
 801340e:	4638      	mov	r0, r7
 8013410:	47c0      	blx	r8
 8013412:	3001      	adds	r0, #1
 8013414:	d01e      	beq.n	8013454 <_printf_common+0xa4>
 8013416:	6823      	ldr	r3, [r4, #0]
 8013418:	68e5      	ldr	r5, [r4, #12]
 801341a:	6832      	ldr	r2, [r6, #0]
 801341c:	f003 0306 	and.w	r3, r3, #6
 8013420:	2b04      	cmp	r3, #4
 8013422:	bf08      	it	eq
 8013424:	1aad      	subeq	r5, r5, r2
 8013426:	68a3      	ldr	r3, [r4, #8]
 8013428:	6922      	ldr	r2, [r4, #16]
 801342a:	bf0c      	ite	eq
 801342c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013430:	2500      	movne	r5, #0
 8013432:	4293      	cmp	r3, r2
 8013434:	bfc4      	itt	gt
 8013436:	1a9b      	subgt	r3, r3, r2
 8013438:	18ed      	addgt	r5, r5, r3
 801343a:	2600      	movs	r6, #0
 801343c:	341a      	adds	r4, #26
 801343e:	42b5      	cmp	r5, r6
 8013440:	d11a      	bne.n	8013478 <_printf_common+0xc8>
 8013442:	2000      	movs	r0, #0
 8013444:	e008      	b.n	8013458 <_printf_common+0xa8>
 8013446:	2301      	movs	r3, #1
 8013448:	4652      	mov	r2, sl
 801344a:	4649      	mov	r1, r9
 801344c:	4638      	mov	r0, r7
 801344e:	47c0      	blx	r8
 8013450:	3001      	adds	r0, #1
 8013452:	d103      	bne.n	801345c <_printf_common+0xac>
 8013454:	f04f 30ff 	mov.w	r0, #4294967295
 8013458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801345c:	3501      	adds	r5, #1
 801345e:	e7c6      	b.n	80133ee <_printf_common+0x3e>
 8013460:	18e1      	adds	r1, r4, r3
 8013462:	1c5a      	adds	r2, r3, #1
 8013464:	2030      	movs	r0, #48	; 0x30
 8013466:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801346a:	4422      	add	r2, r4
 801346c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013470:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013474:	3302      	adds	r3, #2
 8013476:	e7c7      	b.n	8013408 <_printf_common+0x58>
 8013478:	2301      	movs	r3, #1
 801347a:	4622      	mov	r2, r4
 801347c:	4649      	mov	r1, r9
 801347e:	4638      	mov	r0, r7
 8013480:	47c0      	blx	r8
 8013482:	3001      	adds	r0, #1
 8013484:	d0e6      	beq.n	8013454 <_printf_common+0xa4>
 8013486:	3601      	adds	r6, #1
 8013488:	e7d9      	b.n	801343e <_printf_common+0x8e>
	...

0801348c <_printf_i>:
 801348c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013490:	460c      	mov	r4, r1
 8013492:	4691      	mov	r9, r2
 8013494:	7e27      	ldrb	r7, [r4, #24]
 8013496:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013498:	2f78      	cmp	r7, #120	; 0x78
 801349a:	4680      	mov	r8, r0
 801349c:	469a      	mov	sl, r3
 801349e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80134a2:	d807      	bhi.n	80134b4 <_printf_i+0x28>
 80134a4:	2f62      	cmp	r7, #98	; 0x62
 80134a6:	d80a      	bhi.n	80134be <_printf_i+0x32>
 80134a8:	2f00      	cmp	r7, #0
 80134aa:	f000 80d8 	beq.w	801365e <_printf_i+0x1d2>
 80134ae:	2f58      	cmp	r7, #88	; 0x58
 80134b0:	f000 80a3 	beq.w	80135fa <_printf_i+0x16e>
 80134b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80134b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80134bc:	e03a      	b.n	8013534 <_printf_i+0xa8>
 80134be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80134c2:	2b15      	cmp	r3, #21
 80134c4:	d8f6      	bhi.n	80134b4 <_printf_i+0x28>
 80134c6:	a001      	add	r0, pc, #4	; (adr r0, 80134cc <_printf_i+0x40>)
 80134c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80134cc:	08013525 	.word	0x08013525
 80134d0:	08013539 	.word	0x08013539
 80134d4:	080134b5 	.word	0x080134b5
 80134d8:	080134b5 	.word	0x080134b5
 80134dc:	080134b5 	.word	0x080134b5
 80134e0:	080134b5 	.word	0x080134b5
 80134e4:	08013539 	.word	0x08013539
 80134e8:	080134b5 	.word	0x080134b5
 80134ec:	080134b5 	.word	0x080134b5
 80134f0:	080134b5 	.word	0x080134b5
 80134f4:	080134b5 	.word	0x080134b5
 80134f8:	08013645 	.word	0x08013645
 80134fc:	08013569 	.word	0x08013569
 8013500:	08013627 	.word	0x08013627
 8013504:	080134b5 	.word	0x080134b5
 8013508:	080134b5 	.word	0x080134b5
 801350c:	08013667 	.word	0x08013667
 8013510:	080134b5 	.word	0x080134b5
 8013514:	08013569 	.word	0x08013569
 8013518:	080134b5 	.word	0x080134b5
 801351c:	080134b5 	.word	0x080134b5
 8013520:	0801362f 	.word	0x0801362f
 8013524:	680b      	ldr	r3, [r1, #0]
 8013526:	1d1a      	adds	r2, r3, #4
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	600a      	str	r2, [r1, #0]
 801352c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013530:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013534:	2301      	movs	r3, #1
 8013536:	e0a3      	b.n	8013680 <_printf_i+0x1f4>
 8013538:	6825      	ldr	r5, [r4, #0]
 801353a:	6808      	ldr	r0, [r1, #0]
 801353c:	062e      	lsls	r6, r5, #24
 801353e:	f100 0304 	add.w	r3, r0, #4
 8013542:	d50a      	bpl.n	801355a <_printf_i+0xce>
 8013544:	6805      	ldr	r5, [r0, #0]
 8013546:	600b      	str	r3, [r1, #0]
 8013548:	2d00      	cmp	r5, #0
 801354a:	da03      	bge.n	8013554 <_printf_i+0xc8>
 801354c:	232d      	movs	r3, #45	; 0x2d
 801354e:	426d      	negs	r5, r5
 8013550:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013554:	485e      	ldr	r0, [pc, #376]	; (80136d0 <_printf_i+0x244>)
 8013556:	230a      	movs	r3, #10
 8013558:	e019      	b.n	801358e <_printf_i+0x102>
 801355a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801355e:	6805      	ldr	r5, [r0, #0]
 8013560:	600b      	str	r3, [r1, #0]
 8013562:	bf18      	it	ne
 8013564:	b22d      	sxthne	r5, r5
 8013566:	e7ef      	b.n	8013548 <_printf_i+0xbc>
 8013568:	680b      	ldr	r3, [r1, #0]
 801356a:	6825      	ldr	r5, [r4, #0]
 801356c:	1d18      	adds	r0, r3, #4
 801356e:	6008      	str	r0, [r1, #0]
 8013570:	0628      	lsls	r0, r5, #24
 8013572:	d501      	bpl.n	8013578 <_printf_i+0xec>
 8013574:	681d      	ldr	r5, [r3, #0]
 8013576:	e002      	b.n	801357e <_printf_i+0xf2>
 8013578:	0669      	lsls	r1, r5, #25
 801357a:	d5fb      	bpl.n	8013574 <_printf_i+0xe8>
 801357c:	881d      	ldrh	r5, [r3, #0]
 801357e:	4854      	ldr	r0, [pc, #336]	; (80136d0 <_printf_i+0x244>)
 8013580:	2f6f      	cmp	r7, #111	; 0x6f
 8013582:	bf0c      	ite	eq
 8013584:	2308      	moveq	r3, #8
 8013586:	230a      	movne	r3, #10
 8013588:	2100      	movs	r1, #0
 801358a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801358e:	6866      	ldr	r6, [r4, #4]
 8013590:	60a6      	str	r6, [r4, #8]
 8013592:	2e00      	cmp	r6, #0
 8013594:	bfa2      	ittt	ge
 8013596:	6821      	ldrge	r1, [r4, #0]
 8013598:	f021 0104 	bicge.w	r1, r1, #4
 801359c:	6021      	strge	r1, [r4, #0]
 801359e:	b90d      	cbnz	r5, 80135a4 <_printf_i+0x118>
 80135a0:	2e00      	cmp	r6, #0
 80135a2:	d04d      	beq.n	8013640 <_printf_i+0x1b4>
 80135a4:	4616      	mov	r6, r2
 80135a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80135aa:	fb03 5711 	mls	r7, r3, r1, r5
 80135ae:	5dc7      	ldrb	r7, [r0, r7]
 80135b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80135b4:	462f      	mov	r7, r5
 80135b6:	42bb      	cmp	r3, r7
 80135b8:	460d      	mov	r5, r1
 80135ba:	d9f4      	bls.n	80135a6 <_printf_i+0x11a>
 80135bc:	2b08      	cmp	r3, #8
 80135be:	d10b      	bne.n	80135d8 <_printf_i+0x14c>
 80135c0:	6823      	ldr	r3, [r4, #0]
 80135c2:	07df      	lsls	r7, r3, #31
 80135c4:	d508      	bpl.n	80135d8 <_printf_i+0x14c>
 80135c6:	6923      	ldr	r3, [r4, #16]
 80135c8:	6861      	ldr	r1, [r4, #4]
 80135ca:	4299      	cmp	r1, r3
 80135cc:	bfde      	ittt	le
 80135ce:	2330      	movle	r3, #48	; 0x30
 80135d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80135d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80135d8:	1b92      	subs	r2, r2, r6
 80135da:	6122      	str	r2, [r4, #16]
 80135dc:	f8cd a000 	str.w	sl, [sp]
 80135e0:	464b      	mov	r3, r9
 80135e2:	aa03      	add	r2, sp, #12
 80135e4:	4621      	mov	r1, r4
 80135e6:	4640      	mov	r0, r8
 80135e8:	f7ff fee2 	bl	80133b0 <_printf_common>
 80135ec:	3001      	adds	r0, #1
 80135ee:	d14c      	bne.n	801368a <_printf_i+0x1fe>
 80135f0:	f04f 30ff 	mov.w	r0, #4294967295
 80135f4:	b004      	add	sp, #16
 80135f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135fa:	4835      	ldr	r0, [pc, #212]	; (80136d0 <_printf_i+0x244>)
 80135fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013600:	6823      	ldr	r3, [r4, #0]
 8013602:	680e      	ldr	r6, [r1, #0]
 8013604:	061f      	lsls	r7, r3, #24
 8013606:	f856 5b04 	ldr.w	r5, [r6], #4
 801360a:	600e      	str	r6, [r1, #0]
 801360c:	d514      	bpl.n	8013638 <_printf_i+0x1ac>
 801360e:	07d9      	lsls	r1, r3, #31
 8013610:	bf44      	itt	mi
 8013612:	f043 0320 	orrmi.w	r3, r3, #32
 8013616:	6023      	strmi	r3, [r4, #0]
 8013618:	b91d      	cbnz	r5, 8013622 <_printf_i+0x196>
 801361a:	6823      	ldr	r3, [r4, #0]
 801361c:	f023 0320 	bic.w	r3, r3, #32
 8013620:	6023      	str	r3, [r4, #0]
 8013622:	2310      	movs	r3, #16
 8013624:	e7b0      	b.n	8013588 <_printf_i+0xfc>
 8013626:	6823      	ldr	r3, [r4, #0]
 8013628:	f043 0320 	orr.w	r3, r3, #32
 801362c:	6023      	str	r3, [r4, #0]
 801362e:	2378      	movs	r3, #120	; 0x78
 8013630:	4828      	ldr	r0, [pc, #160]	; (80136d4 <_printf_i+0x248>)
 8013632:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013636:	e7e3      	b.n	8013600 <_printf_i+0x174>
 8013638:	065e      	lsls	r6, r3, #25
 801363a:	bf48      	it	mi
 801363c:	b2ad      	uxthmi	r5, r5
 801363e:	e7e6      	b.n	801360e <_printf_i+0x182>
 8013640:	4616      	mov	r6, r2
 8013642:	e7bb      	b.n	80135bc <_printf_i+0x130>
 8013644:	680b      	ldr	r3, [r1, #0]
 8013646:	6826      	ldr	r6, [r4, #0]
 8013648:	6960      	ldr	r0, [r4, #20]
 801364a:	1d1d      	adds	r5, r3, #4
 801364c:	600d      	str	r5, [r1, #0]
 801364e:	0635      	lsls	r5, r6, #24
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	d501      	bpl.n	8013658 <_printf_i+0x1cc>
 8013654:	6018      	str	r0, [r3, #0]
 8013656:	e002      	b.n	801365e <_printf_i+0x1d2>
 8013658:	0671      	lsls	r1, r6, #25
 801365a:	d5fb      	bpl.n	8013654 <_printf_i+0x1c8>
 801365c:	8018      	strh	r0, [r3, #0]
 801365e:	2300      	movs	r3, #0
 8013660:	6123      	str	r3, [r4, #16]
 8013662:	4616      	mov	r6, r2
 8013664:	e7ba      	b.n	80135dc <_printf_i+0x150>
 8013666:	680b      	ldr	r3, [r1, #0]
 8013668:	1d1a      	adds	r2, r3, #4
 801366a:	600a      	str	r2, [r1, #0]
 801366c:	681e      	ldr	r6, [r3, #0]
 801366e:	6862      	ldr	r2, [r4, #4]
 8013670:	2100      	movs	r1, #0
 8013672:	4630      	mov	r0, r6
 8013674:	f7ec fdd4 	bl	8000220 <memchr>
 8013678:	b108      	cbz	r0, 801367e <_printf_i+0x1f2>
 801367a:	1b80      	subs	r0, r0, r6
 801367c:	6060      	str	r0, [r4, #4]
 801367e:	6863      	ldr	r3, [r4, #4]
 8013680:	6123      	str	r3, [r4, #16]
 8013682:	2300      	movs	r3, #0
 8013684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013688:	e7a8      	b.n	80135dc <_printf_i+0x150>
 801368a:	6923      	ldr	r3, [r4, #16]
 801368c:	4632      	mov	r2, r6
 801368e:	4649      	mov	r1, r9
 8013690:	4640      	mov	r0, r8
 8013692:	47d0      	blx	sl
 8013694:	3001      	adds	r0, #1
 8013696:	d0ab      	beq.n	80135f0 <_printf_i+0x164>
 8013698:	6823      	ldr	r3, [r4, #0]
 801369a:	079b      	lsls	r3, r3, #30
 801369c:	d413      	bmi.n	80136c6 <_printf_i+0x23a>
 801369e:	68e0      	ldr	r0, [r4, #12]
 80136a0:	9b03      	ldr	r3, [sp, #12]
 80136a2:	4298      	cmp	r0, r3
 80136a4:	bfb8      	it	lt
 80136a6:	4618      	movlt	r0, r3
 80136a8:	e7a4      	b.n	80135f4 <_printf_i+0x168>
 80136aa:	2301      	movs	r3, #1
 80136ac:	4632      	mov	r2, r6
 80136ae:	4649      	mov	r1, r9
 80136b0:	4640      	mov	r0, r8
 80136b2:	47d0      	blx	sl
 80136b4:	3001      	adds	r0, #1
 80136b6:	d09b      	beq.n	80135f0 <_printf_i+0x164>
 80136b8:	3501      	adds	r5, #1
 80136ba:	68e3      	ldr	r3, [r4, #12]
 80136bc:	9903      	ldr	r1, [sp, #12]
 80136be:	1a5b      	subs	r3, r3, r1
 80136c0:	42ab      	cmp	r3, r5
 80136c2:	dcf2      	bgt.n	80136aa <_printf_i+0x21e>
 80136c4:	e7eb      	b.n	801369e <_printf_i+0x212>
 80136c6:	2500      	movs	r5, #0
 80136c8:	f104 0619 	add.w	r6, r4, #25
 80136cc:	e7f5      	b.n	80136ba <_printf_i+0x22e>
 80136ce:	bf00      	nop
 80136d0:	0801a680 	.word	0x0801a680
 80136d4:	0801a691 	.word	0x0801a691

080136d8 <_scanf_float>:
 80136d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136dc:	b087      	sub	sp, #28
 80136de:	4617      	mov	r7, r2
 80136e0:	9303      	str	r3, [sp, #12]
 80136e2:	688b      	ldr	r3, [r1, #8]
 80136e4:	1e5a      	subs	r2, r3, #1
 80136e6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80136ea:	bf83      	ittte	hi
 80136ec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80136f0:	195b      	addhi	r3, r3, r5
 80136f2:	9302      	strhi	r3, [sp, #8]
 80136f4:	2300      	movls	r3, #0
 80136f6:	bf86      	itte	hi
 80136f8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80136fc:	608b      	strhi	r3, [r1, #8]
 80136fe:	9302      	strls	r3, [sp, #8]
 8013700:	680b      	ldr	r3, [r1, #0]
 8013702:	468b      	mov	fp, r1
 8013704:	2500      	movs	r5, #0
 8013706:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801370a:	f84b 3b1c 	str.w	r3, [fp], #28
 801370e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8013712:	4680      	mov	r8, r0
 8013714:	460c      	mov	r4, r1
 8013716:	465e      	mov	r6, fp
 8013718:	46aa      	mov	sl, r5
 801371a:	46a9      	mov	r9, r5
 801371c:	9501      	str	r5, [sp, #4]
 801371e:	68a2      	ldr	r2, [r4, #8]
 8013720:	b152      	cbz	r2, 8013738 <_scanf_float+0x60>
 8013722:	683b      	ldr	r3, [r7, #0]
 8013724:	781b      	ldrb	r3, [r3, #0]
 8013726:	2b4e      	cmp	r3, #78	; 0x4e
 8013728:	d864      	bhi.n	80137f4 <_scanf_float+0x11c>
 801372a:	2b40      	cmp	r3, #64	; 0x40
 801372c:	d83c      	bhi.n	80137a8 <_scanf_float+0xd0>
 801372e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8013732:	b2c8      	uxtb	r0, r1
 8013734:	280e      	cmp	r0, #14
 8013736:	d93a      	bls.n	80137ae <_scanf_float+0xd6>
 8013738:	f1b9 0f00 	cmp.w	r9, #0
 801373c:	d003      	beq.n	8013746 <_scanf_float+0x6e>
 801373e:	6823      	ldr	r3, [r4, #0]
 8013740:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013744:	6023      	str	r3, [r4, #0]
 8013746:	f10a 3aff 	add.w	sl, sl, #4294967295
 801374a:	f1ba 0f01 	cmp.w	sl, #1
 801374e:	f200 8113 	bhi.w	8013978 <_scanf_float+0x2a0>
 8013752:	455e      	cmp	r6, fp
 8013754:	f200 8105 	bhi.w	8013962 <_scanf_float+0x28a>
 8013758:	2501      	movs	r5, #1
 801375a:	4628      	mov	r0, r5
 801375c:	b007      	add	sp, #28
 801375e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013762:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8013766:	2a0d      	cmp	r2, #13
 8013768:	d8e6      	bhi.n	8013738 <_scanf_float+0x60>
 801376a:	a101      	add	r1, pc, #4	; (adr r1, 8013770 <_scanf_float+0x98>)
 801376c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013770:	080138af 	.word	0x080138af
 8013774:	08013739 	.word	0x08013739
 8013778:	08013739 	.word	0x08013739
 801377c:	08013739 	.word	0x08013739
 8013780:	0801390f 	.word	0x0801390f
 8013784:	080138e7 	.word	0x080138e7
 8013788:	08013739 	.word	0x08013739
 801378c:	08013739 	.word	0x08013739
 8013790:	080138bd 	.word	0x080138bd
 8013794:	08013739 	.word	0x08013739
 8013798:	08013739 	.word	0x08013739
 801379c:	08013739 	.word	0x08013739
 80137a0:	08013739 	.word	0x08013739
 80137a4:	08013875 	.word	0x08013875
 80137a8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80137ac:	e7db      	b.n	8013766 <_scanf_float+0x8e>
 80137ae:	290e      	cmp	r1, #14
 80137b0:	d8c2      	bhi.n	8013738 <_scanf_float+0x60>
 80137b2:	a001      	add	r0, pc, #4	; (adr r0, 80137b8 <_scanf_float+0xe0>)
 80137b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80137b8:	08013867 	.word	0x08013867
 80137bc:	08013739 	.word	0x08013739
 80137c0:	08013867 	.word	0x08013867
 80137c4:	080138fb 	.word	0x080138fb
 80137c8:	08013739 	.word	0x08013739
 80137cc:	08013815 	.word	0x08013815
 80137d0:	08013851 	.word	0x08013851
 80137d4:	08013851 	.word	0x08013851
 80137d8:	08013851 	.word	0x08013851
 80137dc:	08013851 	.word	0x08013851
 80137e0:	08013851 	.word	0x08013851
 80137e4:	08013851 	.word	0x08013851
 80137e8:	08013851 	.word	0x08013851
 80137ec:	08013851 	.word	0x08013851
 80137f0:	08013851 	.word	0x08013851
 80137f4:	2b6e      	cmp	r3, #110	; 0x6e
 80137f6:	d809      	bhi.n	801380c <_scanf_float+0x134>
 80137f8:	2b60      	cmp	r3, #96	; 0x60
 80137fa:	d8b2      	bhi.n	8013762 <_scanf_float+0x8a>
 80137fc:	2b54      	cmp	r3, #84	; 0x54
 80137fe:	d077      	beq.n	80138f0 <_scanf_float+0x218>
 8013800:	2b59      	cmp	r3, #89	; 0x59
 8013802:	d199      	bne.n	8013738 <_scanf_float+0x60>
 8013804:	2d07      	cmp	r5, #7
 8013806:	d197      	bne.n	8013738 <_scanf_float+0x60>
 8013808:	2508      	movs	r5, #8
 801380a:	e029      	b.n	8013860 <_scanf_float+0x188>
 801380c:	2b74      	cmp	r3, #116	; 0x74
 801380e:	d06f      	beq.n	80138f0 <_scanf_float+0x218>
 8013810:	2b79      	cmp	r3, #121	; 0x79
 8013812:	e7f6      	b.n	8013802 <_scanf_float+0x12a>
 8013814:	6821      	ldr	r1, [r4, #0]
 8013816:	05c8      	lsls	r0, r1, #23
 8013818:	d51a      	bpl.n	8013850 <_scanf_float+0x178>
 801381a:	9b02      	ldr	r3, [sp, #8]
 801381c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013820:	6021      	str	r1, [r4, #0]
 8013822:	f109 0901 	add.w	r9, r9, #1
 8013826:	b11b      	cbz	r3, 8013830 <_scanf_float+0x158>
 8013828:	3b01      	subs	r3, #1
 801382a:	3201      	adds	r2, #1
 801382c:	9302      	str	r3, [sp, #8]
 801382e:	60a2      	str	r2, [r4, #8]
 8013830:	68a3      	ldr	r3, [r4, #8]
 8013832:	3b01      	subs	r3, #1
 8013834:	60a3      	str	r3, [r4, #8]
 8013836:	6923      	ldr	r3, [r4, #16]
 8013838:	3301      	adds	r3, #1
 801383a:	6123      	str	r3, [r4, #16]
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	3b01      	subs	r3, #1
 8013840:	2b00      	cmp	r3, #0
 8013842:	607b      	str	r3, [r7, #4]
 8013844:	f340 8084 	ble.w	8013950 <_scanf_float+0x278>
 8013848:	683b      	ldr	r3, [r7, #0]
 801384a:	3301      	adds	r3, #1
 801384c:	603b      	str	r3, [r7, #0]
 801384e:	e766      	b.n	801371e <_scanf_float+0x46>
 8013850:	eb1a 0f05 	cmn.w	sl, r5
 8013854:	f47f af70 	bne.w	8013738 <_scanf_float+0x60>
 8013858:	6822      	ldr	r2, [r4, #0]
 801385a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801385e:	6022      	str	r2, [r4, #0]
 8013860:	f806 3b01 	strb.w	r3, [r6], #1
 8013864:	e7e4      	b.n	8013830 <_scanf_float+0x158>
 8013866:	6822      	ldr	r2, [r4, #0]
 8013868:	0610      	lsls	r0, r2, #24
 801386a:	f57f af65 	bpl.w	8013738 <_scanf_float+0x60>
 801386e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013872:	e7f4      	b.n	801385e <_scanf_float+0x186>
 8013874:	f1ba 0f00 	cmp.w	sl, #0
 8013878:	d10e      	bne.n	8013898 <_scanf_float+0x1c0>
 801387a:	f1b9 0f00 	cmp.w	r9, #0
 801387e:	d10e      	bne.n	801389e <_scanf_float+0x1c6>
 8013880:	6822      	ldr	r2, [r4, #0]
 8013882:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013886:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801388a:	d108      	bne.n	801389e <_scanf_float+0x1c6>
 801388c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013890:	6022      	str	r2, [r4, #0]
 8013892:	f04f 0a01 	mov.w	sl, #1
 8013896:	e7e3      	b.n	8013860 <_scanf_float+0x188>
 8013898:	f1ba 0f02 	cmp.w	sl, #2
 801389c:	d055      	beq.n	801394a <_scanf_float+0x272>
 801389e:	2d01      	cmp	r5, #1
 80138a0:	d002      	beq.n	80138a8 <_scanf_float+0x1d0>
 80138a2:	2d04      	cmp	r5, #4
 80138a4:	f47f af48 	bne.w	8013738 <_scanf_float+0x60>
 80138a8:	3501      	adds	r5, #1
 80138aa:	b2ed      	uxtb	r5, r5
 80138ac:	e7d8      	b.n	8013860 <_scanf_float+0x188>
 80138ae:	f1ba 0f01 	cmp.w	sl, #1
 80138b2:	f47f af41 	bne.w	8013738 <_scanf_float+0x60>
 80138b6:	f04f 0a02 	mov.w	sl, #2
 80138ba:	e7d1      	b.n	8013860 <_scanf_float+0x188>
 80138bc:	b97d      	cbnz	r5, 80138de <_scanf_float+0x206>
 80138be:	f1b9 0f00 	cmp.w	r9, #0
 80138c2:	f47f af3c 	bne.w	801373e <_scanf_float+0x66>
 80138c6:	6822      	ldr	r2, [r4, #0]
 80138c8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80138cc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80138d0:	f47f af39 	bne.w	8013746 <_scanf_float+0x6e>
 80138d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80138d8:	6022      	str	r2, [r4, #0]
 80138da:	2501      	movs	r5, #1
 80138dc:	e7c0      	b.n	8013860 <_scanf_float+0x188>
 80138de:	2d03      	cmp	r5, #3
 80138e0:	d0e2      	beq.n	80138a8 <_scanf_float+0x1d0>
 80138e2:	2d05      	cmp	r5, #5
 80138e4:	e7de      	b.n	80138a4 <_scanf_float+0x1cc>
 80138e6:	2d02      	cmp	r5, #2
 80138e8:	f47f af26 	bne.w	8013738 <_scanf_float+0x60>
 80138ec:	2503      	movs	r5, #3
 80138ee:	e7b7      	b.n	8013860 <_scanf_float+0x188>
 80138f0:	2d06      	cmp	r5, #6
 80138f2:	f47f af21 	bne.w	8013738 <_scanf_float+0x60>
 80138f6:	2507      	movs	r5, #7
 80138f8:	e7b2      	b.n	8013860 <_scanf_float+0x188>
 80138fa:	6822      	ldr	r2, [r4, #0]
 80138fc:	0591      	lsls	r1, r2, #22
 80138fe:	f57f af1b 	bpl.w	8013738 <_scanf_float+0x60>
 8013902:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8013906:	6022      	str	r2, [r4, #0]
 8013908:	f8cd 9004 	str.w	r9, [sp, #4]
 801390c:	e7a8      	b.n	8013860 <_scanf_float+0x188>
 801390e:	6822      	ldr	r2, [r4, #0]
 8013910:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8013914:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8013918:	d006      	beq.n	8013928 <_scanf_float+0x250>
 801391a:	0550      	lsls	r0, r2, #21
 801391c:	f57f af0c 	bpl.w	8013738 <_scanf_float+0x60>
 8013920:	f1b9 0f00 	cmp.w	r9, #0
 8013924:	f43f af0f 	beq.w	8013746 <_scanf_float+0x6e>
 8013928:	0591      	lsls	r1, r2, #22
 801392a:	bf58      	it	pl
 801392c:	9901      	ldrpl	r1, [sp, #4]
 801392e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013932:	bf58      	it	pl
 8013934:	eba9 0101 	subpl.w	r1, r9, r1
 8013938:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801393c:	bf58      	it	pl
 801393e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8013942:	6022      	str	r2, [r4, #0]
 8013944:	f04f 0900 	mov.w	r9, #0
 8013948:	e78a      	b.n	8013860 <_scanf_float+0x188>
 801394a:	f04f 0a03 	mov.w	sl, #3
 801394e:	e787      	b.n	8013860 <_scanf_float+0x188>
 8013950:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013954:	4639      	mov	r1, r7
 8013956:	4640      	mov	r0, r8
 8013958:	4798      	blx	r3
 801395a:	2800      	cmp	r0, #0
 801395c:	f43f aedf 	beq.w	801371e <_scanf_float+0x46>
 8013960:	e6ea      	b.n	8013738 <_scanf_float+0x60>
 8013962:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013966:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801396a:	463a      	mov	r2, r7
 801396c:	4640      	mov	r0, r8
 801396e:	4798      	blx	r3
 8013970:	6923      	ldr	r3, [r4, #16]
 8013972:	3b01      	subs	r3, #1
 8013974:	6123      	str	r3, [r4, #16]
 8013976:	e6ec      	b.n	8013752 <_scanf_float+0x7a>
 8013978:	1e6b      	subs	r3, r5, #1
 801397a:	2b06      	cmp	r3, #6
 801397c:	d825      	bhi.n	80139ca <_scanf_float+0x2f2>
 801397e:	2d02      	cmp	r5, #2
 8013980:	d836      	bhi.n	80139f0 <_scanf_float+0x318>
 8013982:	455e      	cmp	r6, fp
 8013984:	f67f aee8 	bls.w	8013758 <_scanf_float+0x80>
 8013988:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801398c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013990:	463a      	mov	r2, r7
 8013992:	4640      	mov	r0, r8
 8013994:	4798      	blx	r3
 8013996:	6923      	ldr	r3, [r4, #16]
 8013998:	3b01      	subs	r3, #1
 801399a:	6123      	str	r3, [r4, #16]
 801399c:	e7f1      	b.n	8013982 <_scanf_float+0x2aa>
 801399e:	9802      	ldr	r0, [sp, #8]
 80139a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80139a4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80139a8:	9002      	str	r0, [sp, #8]
 80139aa:	463a      	mov	r2, r7
 80139ac:	4640      	mov	r0, r8
 80139ae:	4798      	blx	r3
 80139b0:	6923      	ldr	r3, [r4, #16]
 80139b2:	3b01      	subs	r3, #1
 80139b4:	6123      	str	r3, [r4, #16]
 80139b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80139ba:	fa5f fa8a 	uxtb.w	sl, sl
 80139be:	f1ba 0f02 	cmp.w	sl, #2
 80139c2:	d1ec      	bne.n	801399e <_scanf_float+0x2c6>
 80139c4:	3d03      	subs	r5, #3
 80139c6:	b2ed      	uxtb	r5, r5
 80139c8:	1b76      	subs	r6, r6, r5
 80139ca:	6823      	ldr	r3, [r4, #0]
 80139cc:	05da      	lsls	r2, r3, #23
 80139ce:	d52f      	bpl.n	8013a30 <_scanf_float+0x358>
 80139d0:	055b      	lsls	r3, r3, #21
 80139d2:	d510      	bpl.n	80139f6 <_scanf_float+0x31e>
 80139d4:	455e      	cmp	r6, fp
 80139d6:	f67f aebf 	bls.w	8013758 <_scanf_float+0x80>
 80139da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80139de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80139e2:	463a      	mov	r2, r7
 80139e4:	4640      	mov	r0, r8
 80139e6:	4798      	blx	r3
 80139e8:	6923      	ldr	r3, [r4, #16]
 80139ea:	3b01      	subs	r3, #1
 80139ec:	6123      	str	r3, [r4, #16]
 80139ee:	e7f1      	b.n	80139d4 <_scanf_float+0x2fc>
 80139f0:	46aa      	mov	sl, r5
 80139f2:	9602      	str	r6, [sp, #8]
 80139f4:	e7df      	b.n	80139b6 <_scanf_float+0x2de>
 80139f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80139fa:	6923      	ldr	r3, [r4, #16]
 80139fc:	2965      	cmp	r1, #101	; 0x65
 80139fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8013a02:	f106 35ff 	add.w	r5, r6, #4294967295
 8013a06:	6123      	str	r3, [r4, #16]
 8013a08:	d00c      	beq.n	8013a24 <_scanf_float+0x34c>
 8013a0a:	2945      	cmp	r1, #69	; 0x45
 8013a0c:	d00a      	beq.n	8013a24 <_scanf_float+0x34c>
 8013a0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013a12:	463a      	mov	r2, r7
 8013a14:	4640      	mov	r0, r8
 8013a16:	4798      	blx	r3
 8013a18:	6923      	ldr	r3, [r4, #16]
 8013a1a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8013a1e:	3b01      	subs	r3, #1
 8013a20:	1eb5      	subs	r5, r6, #2
 8013a22:	6123      	str	r3, [r4, #16]
 8013a24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013a28:	463a      	mov	r2, r7
 8013a2a:	4640      	mov	r0, r8
 8013a2c:	4798      	blx	r3
 8013a2e:	462e      	mov	r6, r5
 8013a30:	6825      	ldr	r5, [r4, #0]
 8013a32:	f015 0510 	ands.w	r5, r5, #16
 8013a36:	d158      	bne.n	8013aea <_scanf_float+0x412>
 8013a38:	7035      	strb	r5, [r6, #0]
 8013a3a:	6823      	ldr	r3, [r4, #0]
 8013a3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013a44:	d11c      	bne.n	8013a80 <_scanf_float+0x3a8>
 8013a46:	9b01      	ldr	r3, [sp, #4]
 8013a48:	454b      	cmp	r3, r9
 8013a4a:	eba3 0209 	sub.w	r2, r3, r9
 8013a4e:	d124      	bne.n	8013a9a <_scanf_float+0x3c2>
 8013a50:	2200      	movs	r2, #0
 8013a52:	4659      	mov	r1, fp
 8013a54:	4640      	mov	r0, r8
 8013a56:	f001 f881 	bl	8014b5c <_strtod_r>
 8013a5a:	9b03      	ldr	r3, [sp, #12]
 8013a5c:	6821      	ldr	r1, [r4, #0]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	f011 0f02 	tst.w	r1, #2
 8013a64:	ec57 6b10 	vmov	r6, r7, d0
 8013a68:	f103 0204 	add.w	r2, r3, #4
 8013a6c:	d020      	beq.n	8013ab0 <_scanf_float+0x3d8>
 8013a6e:	9903      	ldr	r1, [sp, #12]
 8013a70:	600a      	str	r2, [r1, #0]
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	e9c3 6700 	strd	r6, r7, [r3]
 8013a78:	68e3      	ldr	r3, [r4, #12]
 8013a7a:	3301      	adds	r3, #1
 8013a7c:	60e3      	str	r3, [r4, #12]
 8013a7e:	e66c      	b.n	801375a <_scanf_float+0x82>
 8013a80:	9b04      	ldr	r3, [sp, #16]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d0e4      	beq.n	8013a50 <_scanf_float+0x378>
 8013a86:	9905      	ldr	r1, [sp, #20]
 8013a88:	230a      	movs	r3, #10
 8013a8a:	462a      	mov	r2, r5
 8013a8c:	3101      	adds	r1, #1
 8013a8e:	4640      	mov	r0, r8
 8013a90:	f001 f94a 	bl	8014d28 <_strtol_r>
 8013a94:	9b04      	ldr	r3, [sp, #16]
 8013a96:	9e05      	ldr	r6, [sp, #20]
 8013a98:	1ac2      	subs	r2, r0, r3
 8013a9a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013a9e:	429e      	cmp	r6, r3
 8013aa0:	bf28      	it	cs
 8013aa2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8013aa6:	4912      	ldr	r1, [pc, #72]	; (8013af0 <_scanf_float+0x418>)
 8013aa8:	4630      	mov	r0, r6
 8013aaa:	f000 f977 	bl	8013d9c <siprintf>
 8013aae:	e7cf      	b.n	8013a50 <_scanf_float+0x378>
 8013ab0:	f011 0f04 	tst.w	r1, #4
 8013ab4:	9903      	ldr	r1, [sp, #12]
 8013ab6:	600a      	str	r2, [r1, #0]
 8013ab8:	d1db      	bne.n	8013a72 <_scanf_float+0x39a>
 8013aba:	f8d3 8000 	ldr.w	r8, [r3]
 8013abe:	ee10 2a10 	vmov	r2, s0
 8013ac2:	ee10 0a10 	vmov	r0, s0
 8013ac6:	463b      	mov	r3, r7
 8013ac8:	4639      	mov	r1, r7
 8013aca:	f7ed f84f 	bl	8000b6c <__aeabi_dcmpun>
 8013ace:	b128      	cbz	r0, 8013adc <_scanf_float+0x404>
 8013ad0:	4808      	ldr	r0, [pc, #32]	; (8013af4 <_scanf_float+0x41c>)
 8013ad2:	f000 f919 	bl	8013d08 <nanf>
 8013ad6:	ed88 0a00 	vstr	s0, [r8]
 8013ada:	e7cd      	b.n	8013a78 <_scanf_float+0x3a0>
 8013adc:	4630      	mov	r0, r6
 8013ade:	4639      	mov	r1, r7
 8013ae0:	f7ed f8a2 	bl	8000c28 <__aeabi_d2f>
 8013ae4:	f8c8 0000 	str.w	r0, [r8]
 8013ae8:	e7c6      	b.n	8013a78 <_scanf_float+0x3a0>
 8013aea:	2500      	movs	r5, #0
 8013aec:	e635      	b.n	801375a <_scanf_float+0x82>
 8013aee:	bf00      	nop
 8013af0:	0801a6a2 	.word	0x0801a6a2
 8013af4:	0801a7d0 	.word	0x0801a7d0

08013af8 <iprintf>:
 8013af8:	b40f      	push	{r0, r1, r2, r3}
 8013afa:	4b0a      	ldr	r3, [pc, #40]	; (8013b24 <iprintf+0x2c>)
 8013afc:	b513      	push	{r0, r1, r4, lr}
 8013afe:	681c      	ldr	r4, [r3, #0]
 8013b00:	b124      	cbz	r4, 8013b0c <iprintf+0x14>
 8013b02:	69a3      	ldr	r3, [r4, #24]
 8013b04:	b913      	cbnz	r3, 8013b0c <iprintf+0x14>
 8013b06:	4620      	mov	r0, r4
 8013b08:	f7fe fc30 	bl	801236c <__sinit>
 8013b0c:	ab05      	add	r3, sp, #20
 8013b0e:	9a04      	ldr	r2, [sp, #16]
 8013b10:	68a1      	ldr	r1, [r4, #8]
 8013b12:	9301      	str	r3, [sp, #4]
 8013b14:	4620      	mov	r0, r4
 8013b16:	f004 f979 	bl	8017e0c <_vfiprintf_r>
 8013b1a:	b002      	add	sp, #8
 8013b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b20:	b004      	add	sp, #16
 8013b22:	4770      	bx	lr
 8013b24:	200000ac 	.word	0x200000ac

08013b28 <_puts_r>:
 8013b28:	b570      	push	{r4, r5, r6, lr}
 8013b2a:	460e      	mov	r6, r1
 8013b2c:	4605      	mov	r5, r0
 8013b2e:	b118      	cbz	r0, 8013b38 <_puts_r+0x10>
 8013b30:	6983      	ldr	r3, [r0, #24]
 8013b32:	b90b      	cbnz	r3, 8013b38 <_puts_r+0x10>
 8013b34:	f7fe fc1a 	bl	801236c <__sinit>
 8013b38:	69ab      	ldr	r3, [r5, #24]
 8013b3a:	68ac      	ldr	r4, [r5, #8]
 8013b3c:	b913      	cbnz	r3, 8013b44 <_puts_r+0x1c>
 8013b3e:	4628      	mov	r0, r5
 8013b40:	f7fe fc14 	bl	801236c <__sinit>
 8013b44:	4b2c      	ldr	r3, [pc, #176]	; (8013bf8 <_puts_r+0xd0>)
 8013b46:	429c      	cmp	r4, r3
 8013b48:	d120      	bne.n	8013b8c <_puts_r+0x64>
 8013b4a:	686c      	ldr	r4, [r5, #4]
 8013b4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013b4e:	07db      	lsls	r3, r3, #31
 8013b50:	d405      	bmi.n	8013b5e <_puts_r+0x36>
 8013b52:	89a3      	ldrh	r3, [r4, #12]
 8013b54:	0598      	lsls	r0, r3, #22
 8013b56:	d402      	bmi.n	8013b5e <_puts_r+0x36>
 8013b58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013b5a:	f7fe fde7 	bl	801272c <__retarget_lock_acquire_recursive>
 8013b5e:	89a3      	ldrh	r3, [r4, #12]
 8013b60:	0719      	lsls	r1, r3, #28
 8013b62:	d51d      	bpl.n	8013ba0 <_puts_r+0x78>
 8013b64:	6923      	ldr	r3, [r4, #16]
 8013b66:	b1db      	cbz	r3, 8013ba0 <_puts_r+0x78>
 8013b68:	3e01      	subs	r6, #1
 8013b6a:	68a3      	ldr	r3, [r4, #8]
 8013b6c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013b70:	3b01      	subs	r3, #1
 8013b72:	60a3      	str	r3, [r4, #8]
 8013b74:	bb39      	cbnz	r1, 8013bc6 <_puts_r+0x9e>
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	da38      	bge.n	8013bec <_puts_r+0xc4>
 8013b7a:	4622      	mov	r2, r4
 8013b7c:	210a      	movs	r1, #10
 8013b7e:	4628      	mov	r0, r5
 8013b80:	f001 fb9c 	bl	80152bc <__swbuf_r>
 8013b84:	3001      	adds	r0, #1
 8013b86:	d011      	beq.n	8013bac <_puts_r+0x84>
 8013b88:	250a      	movs	r5, #10
 8013b8a:	e011      	b.n	8013bb0 <_puts_r+0x88>
 8013b8c:	4b1b      	ldr	r3, [pc, #108]	; (8013bfc <_puts_r+0xd4>)
 8013b8e:	429c      	cmp	r4, r3
 8013b90:	d101      	bne.n	8013b96 <_puts_r+0x6e>
 8013b92:	68ac      	ldr	r4, [r5, #8]
 8013b94:	e7da      	b.n	8013b4c <_puts_r+0x24>
 8013b96:	4b1a      	ldr	r3, [pc, #104]	; (8013c00 <_puts_r+0xd8>)
 8013b98:	429c      	cmp	r4, r3
 8013b9a:	bf08      	it	eq
 8013b9c:	68ec      	ldreq	r4, [r5, #12]
 8013b9e:	e7d5      	b.n	8013b4c <_puts_r+0x24>
 8013ba0:	4621      	mov	r1, r4
 8013ba2:	4628      	mov	r0, r5
 8013ba4:	f001 fbee 	bl	8015384 <__swsetup_r>
 8013ba8:	2800      	cmp	r0, #0
 8013baa:	d0dd      	beq.n	8013b68 <_puts_r+0x40>
 8013bac:	f04f 35ff 	mov.w	r5, #4294967295
 8013bb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013bb2:	07da      	lsls	r2, r3, #31
 8013bb4:	d405      	bmi.n	8013bc2 <_puts_r+0x9a>
 8013bb6:	89a3      	ldrh	r3, [r4, #12]
 8013bb8:	059b      	lsls	r3, r3, #22
 8013bba:	d402      	bmi.n	8013bc2 <_puts_r+0x9a>
 8013bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013bbe:	f7fe fdb7 	bl	8012730 <__retarget_lock_release_recursive>
 8013bc2:	4628      	mov	r0, r5
 8013bc4:	bd70      	pop	{r4, r5, r6, pc}
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	da04      	bge.n	8013bd4 <_puts_r+0xac>
 8013bca:	69a2      	ldr	r2, [r4, #24]
 8013bcc:	429a      	cmp	r2, r3
 8013bce:	dc06      	bgt.n	8013bde <_puts_r+0xb6>
 8013bd0:	290a      	cmp	r1, #10
 8013bd2:	d004      	beq.n	8013bde <_puts_r+0xb6>
 8013bd4:	6823      	ldr	r3, [r4, #0]
 8013bd6:	1c5a      	adds	r2, r3, #1
 8013bd8:	6022      	str	r2, [r4, #0]
 8013bda:	7019      	strb	r1, [r3, #0]
 8013bdc:	e7c5      	b.n	8013b6a <_puts_r+0x42>
 8013bde:	4622      	mov	r2, r4
 8013be0:	4628      	mov	r0, r5
 8013be2:	f001 fb6b 	bl	80152bc <__swbuf_r>
 8013be6:	3001      	adds	r0, #1
 8013be8:	d1bf      	bne.n	8013b6a <_puts_r+0x42>
 8013bea:	e7df      	b.n	8013bac <_puts_r+0x84>
 8013bec:	6823      	ldr	r3, [r4, #0]
 8013bee:	250a      	movs	r5, #10
 8013bf0:	1c5a      	adds	r2, r3, #1
 8013bf2:	6022      	str	r2, [r4, #0]
 8013bf4:	701d      	strb	r5, [r3, #0]
 8013bf6:	e7db      	b.n	8013bb0 <_puts_r+0x88>
 8013bf8:	0801a4f4 	.word	0x0801a4f4
 8013bfc:	0801a514 	.word	0x0801a514
 8013c00:	0801a4d4 	.word	0x0801a4d4

08013c04 <puts>:
 8013c04:	4b02      	ldr	r3, [pc, #8]	; (8013c10 <puts+0xc>)
 8013c06:	4601      	mov	r1, r0
 8013c08:	6818      	ldr	r0, [r3, #0]
 8013c0a:	f7ff bf8d 	b.w	8013b28 <_puts_r>
 8013c0e:	bf00      	nop
 8013c10:	200000ac 	.word	0x200000ac

08013c14 <cleanup_glue>:
 8013c14:	b538      	push	{r3, r4, r5, lr}
 8013c16:	460c      	mov	r4, r1
 8013c18:	6809      	ldr	r1, [r1, #0]
 8013c1a:	4605      	mov	r5, r0
 8013c1c:	b109      	cbz	r1, 8013c22 <cleanup_glue+0xe>
 8013c1e:	f7ff fff9 	bl	8013c14 <cleanup_glue>
 8013c22:	4621      	mov	r1, r4
 8013c24:	4628      	mov	r0, r5
 8013c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013c2a:	f7ff b841 	b.w	8012cb0 <_free_r>
	...

08013c30 <_reclaim_reent>:
 8013c30:	4b2c      	ldr	r3, [pc, #176]	; (8013ce4 <_reclaim_reent+0xb4>)
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	4283      	cmp	r3, r0
 8013c36:	b570      	push	{r4, r5, r6, lr}
 8013c38:	4604      	mov	r4, r0
 8013c3a:	d051      	beq.n	8013ce0 <_reclaim_reent+0xb0>
 8013c3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013c3e:	b143      	cbz	r3, 8013c52 <_reclaim_reent+0x22>
 8013c40:	68db      	ldr	r3, [r3, #12]
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d14a      	bne.n	8013cdc <_reclaim_reent+0xac>
 8013c46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013c48:	6819      	ldr	r1, [r3, #0]
 8013c4a:	b111      	cbz	r1, 8013c52 <_reclaim_reent+0x22>
 8013c4c:	4620      	mov	r0, r4
 8013c4e:	f7ff f82f 	bl	8012cb0 <_free_r>
 8013c52:	6961      	ldr	r1, [r4, #20]
 8013c54:	b111      	cbz	r1, 8013c5c <_reclaim_reent+0x2c>
 8013c56:	4620      	mov	r0, r4
 8013c58:	f7ff f82a 	bl	8012cb0 <_free_r>
 8013c5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013c5e:	b111      	cbz	r1, 8013c66 <_reclaim_reent+0x36>
 8013c60:	4620      	mov	r0, r4
 8013c62:	f7ff f825 	bl	8012cb0 <_free_r>
 8013c66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013c68:	b111      	cbz	r1, 8013c70 <_reclaim_reent+0x40>
 8013c6a:	4620      	mov	r0, r4
 8013c6c:	f7ff f820 	bl	8012cb0 <_free_r>
 8013c70:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8013c72:	b111      	cbz	r1, 8013c7a <_reclaim_reent+0x4a>
 8013c74:	4620      	mov	r0, r4
 8013c76:	f7ff f81b 	bl	8012cb0 <_free_r>
 8013c7a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8013c7c:	b111      	cbz	r1, 8013c84 <_reclaim_reent+0x54>
 8013c7e:	4620      	mov	r0, r4
 8013c80:	f7ff f816 	bl	8012cb0 <_free_r>
 8013c84:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8013c86:	b111      	cbz	r1, 8013c8e <_reclaim_reent+0x5e>
 8013c88:	4620      	mov	r0, r4
 8013c8a:	f7ff f811 	bl	8012cb0 <_free_r>
 8013c8e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8013c90:	b111      	cbz	r1, 8013c98 <_reclaim_reent+0x68>
 8013c92:	4620      	mov	r0, r4
 8013c94:	f7ff f80c 	bl	8012cb0 <_free_r>
 8013c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013c9a:	b111      	cbz	r1, 8013ca2 <_reclaim_reent+0x72>
 8013c9c:	4620      	mov	r0, r4
 8013c9e:	f7ff f807 	bl	8012cb0 <_free_r>
 8013ca2:	69a3      	ldr	r3, [r4, #24]
 8013ca4:	b1e3      	cbz	r3, 8013ce0 <_reclaim_reent+0xb0>
 8013ca6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013ca8:	4620      	mov	r0, r4
 8013caa:	4798      	blx	r3
 8013cac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8013cae:	b1b9      	cbz	r1, 8013ce0 <_reclaim_reent+0xb0>
 8013cb0:	4620      	mov	r0, r4
 8013cb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013cb6:	f7ff bfad 	b.w	8013c14 <cleanup_glue>
 8013cba:	5949      	ldr	r1, [r1, r5]
 8013cbc:	b941      	cbnz	r1, 8013cd0 <_reclaim_reent+0xa0>
 8013cbe:	3504      	adds	r5, #4
 8013cc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013cc2:	2d80      	cmp	r5, #128	; 0x80
 8013cc4:	68d9      	ldr	r1, [r3, #12]
 8013cc6:	d1f8      	bne.n	8013cba <_reclaim_reent+0x8a>
 8013cc8:	4620      	mov	r0, r4
 8013cca:	f7fe fff1 	bl	8012cb0 <_free_r>
 8013cce:	e7ba      	b.n	8013c46 <_reclaim_reent+0x16>
 8013cd0:	680e      	ldr	r6, [r1, #0]
 8013cd2:	4620      	mov	r0, r4
 8013cd4:	f7fe ffec 	bl	8012cb0 <_free_r>
 8013cd8:	4631      	mov	r1, r6
 8013cda:	e7ef      	b.n	8013cbc <_reclaim_reent+0x8c>
 8013cdc:	2500      	movs	r5, #0
 8013cde:	e7ef      	b.n	8013cc0 <_reclaim_reent+0x90>
 8013ce0:	bd70      	pop	{r4, r5, r6, pc}
 8013ce2:	bf00      	nop
 8013ce4:	200000ac 	.word	0x200000ac

08013ce8 <_sbrk_r>:
 8013ce8:	b538      	push	{r3, r4, r5, lr}
 8013cea:	4d06      	ldr	r5, [pc, #24]	; (8013d04 <_sbrk_r+0x1c>)
 8013cec:	2300      	movs	r3, #0
 8013cee:	4604      	mov	r4, r0
 8013cf0:	4608      	mov	r0, r1
 8013cf2:	602b      	str	r3, [r5, #0]
 8013cf4:	f004 fc08 	bl	8018508 <_sbrk>
 8013cf8:	1c43      	adds	r3, r0, #1
 8013cfa:	d102      	bne.n	8013d02 <_sbrk_r+0x1a>
 8013cfc:	682b      	ldr	r3, [r5, #0]
 8013cfe:	b103      	cbz	r3, 8013d02 <_sbrk_r+0x1a>
 8013d00:	6023      	str	r3, [r4, #0]
 8013d02:	bd38      	pop	{r3, r4, r5, pc}
 8013d04:	200064f0 	.word	0x200064f0

08013d08 <nanf>:
 8013d08:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013d10 <nanf+0x8>
 8013d0c:	4770      	bx	lr
 8013d0e:	bf00      	nop
 8013d10:	7fc00000 	.word	0x7fc00000

08013d14 <_raise_r>:
 8013d14:	291f      	cmp	r1, #31
 8013d16:	b538      	push	{r3, r4, r5, lr}
 8013d18:	4604      	mov	r4, r0
 8013d1a:	460d      	mov	r5, r1
 8013d1c:	d904      	bls.n	8013d28 <_raise_r+0x14>
 8013d1e:	2316      	movs	r3, #22
 8013d20:	6003      	str	r3, [r0, #0]
 8013d22:	f04f 30ff 	mov.w	r0, #4294967295
 8013d26:	bd38      	pop	{r3, r4, r5, pc}
 8013d28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013d2a:	b112      	cbz	r2, 8013d32 <_raise_r+0x1e>
 8013d2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013d30:	b94b      	cbnz	r3, 8013d46 <_raise_r+0x32>
 8013d32:	4620      	mov	r0, r4
 8013d34:	f000 f830 	bl	8013d98 <_getpid_r>
 8013d38:	462a      	mov	r2, r5
 8013d3a:	4601      	mov	r1, r0
 8013d3c:	4620      	mov	r0, r4
 8013d3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013d42:	f000 b817 	b.w	8013d74 <_kill_r>
 8013d46:	2b01      	cmp	r3, #1
 8013d48:	d00a      	beq.n	8013d60 <_raise_r+0x4c>
 8013d4a:	1c59      	adds	r1, r3, #1
 8013d4c:	d103      	bne.n	8013d56 <_raise_r+0x42>
 8013d4e:	2316      	movs	r3, #22
 8013d50:	6003      	str	r3, [r0, #0]
 8013d52:	2001      	movs	r0, #1
 8013d54:	e7e7      	b.n	8013d26 <_raise_r+0x12>
 8013d56:	2400      	movs	r4, #0
 8013d58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013d5c:	4628      	mov	r0, r5
 8013d5e:	4798      	blx	r3
 8013d60:	2000      	movs	r0, #0
 8013d62:	e7e0      	b.n	8013d26 <_raise_r+0x12>

08013d64 <raise>:
 8013d64:	4b02      	ldr	r3, [pc, #8]	; (8013d70 <raise+0xc>)
 8013d66:	4601      	mov	r1, r0
 8013d68:	6818      	ldr	r0, [r3, #0]
 8013d6a:	f7ff bfd3 	b.w	8013d14 <_raise_r>
 8013d6e:	bf00      	nop
 8013d70:	200000ac 	.word	0x200000ac

08013d74 <_kill_r>:
 8013d74:	b538      	push	{r3, r4, r5, lr}
 8013d76:	4d07      	ldr	r5, [pc, #28]	; (8013d94 <_kill_r+0x20>)
 8013d78:	2300      	movs	r3, #0
 8013d7a:	4604      	mov	r4, r0
 8013d7c:	4608      	mov	r0, r1
 8013d7e:	4611      	mov	r1, r2
 8013d80:	602b      	str	r3, [r5, #0]
 8013d82:	f004 fba9 	bl	80184d8 <_kill>
 8013d86:	1c43      	adds	r3, r0, #1
 8013d88:	d102      	bne.n	8013d90 <_kill_r+0x1c>
 8013d8a:	682b      	ldr	r3, [r5, #0]
 8013d8c:	b103      	cbz	r3, 8013d90 <_kill_r+0x1c>
 8013d8e:	6023      	str	r3, [r4, #0]
 8013d90:	bd38      	pop	{r3, r4, r5, pc}
 8013d92:	bf00      	nop
 8013d94:	200064f0 	.word	0x200064f0

08013d98 <_getpid_r>:
 8013d98:	f004 bb8e 	b.w	80184b8 <_getpid>

08013d9c <siprintf>:
 8013d9c:	b40e      	push	{r1, r2, r3}
 8013d9e:	b500      	push	{lr}
 8013da0:	b09c      	sub	sp, #112	; 0x70
 8013da2:	ab1d      	add	r3, sp, #116	; 0x74
 8013da4:	9002      	str	r0, [sp, #8]
 8013da6:	9006      	str	r0, [sp, #24]
 8013da8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013dac:	4809      	ldr	r0, [pc, #36]	; (8013dd4 <siprintf+0x38>)
 8013dae:	9107      	str	r1, [sp, #28]
 8013db0:	9104      	str	r1, [sp, #16]
 8013db2:	4909      	ldr	r1, [pc, #36]	; (8013dd8 <siprintf+0x3c>)
 8013db4:	f853 2b04 	ldr.w	r2, [r3], #4
 8013db8:	9105      	str	r1, [sp, #20]
 8013dba:	6800      	ldr	r0, [r0, #0]
 8013dbc:	9301      	str	r3, [sp, #4]
 8013dbe:	a902      	add	r1, sp, #8
 8013dc0:	f003 fd28 	bl	8017814 <_svfiprintf_r>
 8013dc4:	9b02      	ldr	r3, [sp, #8]
 8013dc6:	2200      	movs	r2, #0
 8013dc8:	701a      	strb	r2, [r3, #0]
 8013dca:	b01c      	add	sp, #112	; 0x70
 8013dcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8013dd0:	b003      	add	sp, #12
 8013dd2:	4770      	bx	lr
 8013dd4:	200000ac 	.word	0x200000ac
 8013dd8:	ffff0208 	.word	0xffff0208

08013ddc <siscanf>:
 8013ddc:	b40e      	push	{r1, r2, r3}
 8013dde:	b510      	push	{r4, lr}
 8013de0:	b09f      	sub	sp, #124	; 0x7c
 8013de2:	ac21      	add	r4, sp, #132	; 0x84
 8013de4:	f44f 7101 	mov.w	r1, #516	; 0x204
 8013de8:	f854 2b04 	ldr.w	r2, [r4], #4
 8013dec:	9201      	str	r2, [sp, #4]
 8013dee:	f8ad 101c 	strh.w	r1, [sp, #28]
 8013df2:	9004      	str	r0, [sp, #16]
 8013df4:	9008      	str	r0, [sp, #32]
 8013df6:	f7ec fa05 	bl	8000204 <strlen>
 8013dfa:	4b0c      	ldr	r3, [pc, #48]	; (8013e2c <siscanf+0x50>)
 8013dfc:	9005      	str	r0, [sp, #20]
 8013dfe:	9009      	str	r0, [sp, #36]	; 0x24
 8013e00:	930d      	str	r3, [sp, #52]	; 0x34
 8013e02:	480b      	ldr	r0, [pc, #44]	; (8013e30 <siscanf+0x54>)
 8013e04:	9a01      	ldr	r2, [sp, #4]
 8013e06:	6800      	ldr	r0, [r0, #0]
 8013e08:	9403      	str	r4, [sp, #12]
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	9311      	str	r3, [sp, #68]	; 0x44
 8013e0e:	9316      	str	r3, [sp, #88]	; 0x58
 8013e10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013e14:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013e18:	a904      	add	r1, sp, #16
 8013e1a:	4623      	mov	r3, r4
 8013e1c:	f003 fe54 	bl	8017ac8 <__ssvfiscanf_r>
 8013e20:	b01f      	add	sp, #124	; 0x7c
 8013e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e26:	b003      	add	sp, #12
 8013e28:	4770      	bx	lr
 8013e2a:	bf00      	nop
 8013e2c:	08013e57 	.word	0x08013e57
 8013e30:	200000ac 	.word	0x200000ac

08013e34 <__sread>:
 8013e34:	b510      	push	{r4, lr}
 8013e36:	460c      	mov	r4, r1
 8013e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e3c:	f004 fa62 	bl	8018304 <_read_r>
 8013e40:	2800      	cmp	r0, #0
 8013e42:	bfab      	itete	ge
 8013e44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013e46:	89a3      	ldrhlt	r3, [r4, #12]
 8013e48:	181b      	addge	r3, r3, r0
 8013e4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013e4e:	bfac      	ite	ge
 8013e50:	6563      	strge	r3, [r4, #84]	; 0x54
 8013e52:	81a3      	strhlt	r3, [r4, #12]
 8013e54:	bd10      	pop	{r4, pc}

08013e56 <__seofread>:
 8013e56:	2000      	movs	r0, #0
 8013e58:	4770      	bx	lr

08013e5a <__swrite>:
 8013e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e5e:	461f      	mov	r7, r3
 8013e60:	898b      	ldrh	r3, [r1, #12]
 8013e62:	05db      	lsls	r3, r3, #23
 8013e64:	4605      	mov	r5, r0
 8013e66:	460c      	mov	r4, r1
 8013e68:	4616      	mov	r6, r2
 8013e6a:	d505      	bpl.n	8013e78 <__swrite+0x1e>
 8013e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e70:	2302      	movs	r3, #2
 8013e72:	2200      	movs	r2, #0
 8013e74:	f002 feee 	bl	8016c54 <_lseek_r>
 8013e78:	89a3      	ldrh	r3, [r4, #12]
 8013e7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013e7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013e82:	81a3      	strh	r3, [r4, #12]
 8013e84:	4632      	mov	r2, r6
 8013e86:	463b      	mov	r3, r7
 8013e88:	4628      	mov	r0, r5
 8013e8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e8e:	f001 ba67 	b.w	8015360 <_write_r>

08013e92 <__sseek>:
 8013e92:	b510      	push	{r4, lr}
 8013e94:	460c      	mov	r4, r1
 8013e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e9a:	f002 fedb 	bl	8016c54 <_lseek_r>
 8013e9e:	1c43      	adds	r3, r0, #1
 8013ea0:	89a3      	ldrh	r3, [r4, #12]
 8013ea2:	bf15      	itete	ne
 8013ea4:	6560      	strne	r0, [r4, #84]	; 0x54
 8013ea6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013eaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013eae:	81a3      	strheq	r3, [r4, #12]
 8013eb0:	bf18      	it	ne
 8013eb2:	81a3      	strhne	r3, [r4, #12]
 8013eb4:	bd10      	pop	{r4, pc}

08013eb6 <__sclose>:
 8013eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013eba:	f001 baef 	b.w	801549c <_close_r>

08013ebe <strchr>:
 8013ebe:	b2c9      	uxtb	r1, r1
 8013ec0:	4603      	mov	r3, r0
 8013ec2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013ec6:	b11a      	cbz	r2, 8013ed0 <strchr+0x12>
 8013ec8:	428a      	cmp	r2, r1
 8013eca:	d1f9      	bne.n	8013ec0 <strchr+0x2>
 8013ecc:	4618      	mov	r0, r3
 8013ece:	4770      	bx	lr
 8013ed0:	2900      	cmp	r1, #0
 8013ed2:	bf18      	it	ne
 8013ed4:	2300      	movne	r3, #0
 8013ed6:	e7f9      	b.n	8013ecc <strchr+0xe>

08013ed8 <strcpy>:
 8013ed8:	4603      	mov	r3, r0
 8013eda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013ede:	f803 2b01 	strb.w	r2, [r3], #1
 8013ee2:	2a00      	cmp	r2, #0
 8013ee4:	d1f9      	bne.n	8013eda <strcpy+0x2>
 8013ee6:	4770      	bx	lr

08013ee8 <strncmp>:
 8013ee8:	b510      	push	{r4, lr}
 8013eea:	b16a      	cbz	r2, 8013f08 <strncmp+0x20>
 8013eec:	3901      	subs	r1, #1
 8013eee:	1884      	adds	r4, r0, r2
 8013ef0:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013ef4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013ef8:	4293      	cmp	r3, r2
 8013efa:	d103      	bne.n	8013f04 <strncmp+0x1c>
 8013efc:	42a0      	cmp	r0, r4
 8013efe:	d001      	beq.n	8013f04 <strncmp+0x1c>
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d1f5      	bne.n	8013ef0 <strncmp+0x8>
 8013f04:	1a98      	subs	r0, r3, r2
 8013f06:	bd10      	pop	{r4, pc}
 8013f08:	4610      	mov	r0, r2
 8013f0a:	e7fc      	b.n	8013f06 <strncmp+0x1e>

08013f0c <sulp>:
 8013f0c:	b570      	push	{r4, r5, r6, lr}
 8013f0e:	4604      	mov	r4, r0
 8013f10:	460d      	mov	r5, r1
 8013f12:	ec45 4b10 	vmov	d0, r4, r5
 8013f16:	4616      	mov	r6, r2
 8013f18:	f003 fa9c 	bl	8017454 <__ulp>
 8013f1c:	ec51 0b10 	vmov	r0, r1, d0
 8013f20:	b17e      	cbz	r6, 8013f42 <sulp+0x36>
 8013f22:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013f26:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	dd09      	ble.n	8013f42 <sulp+0x36>
 8013f2e:	051b      	lsls	r3, r3, #20
 8013f30:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013f34:	2400      	movs	r4, #0
 8013f36:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013f3a:	4622      	mov	r2, r4
 8013f3c:	462b      	mov	r3, r5
 8013f3e:	f7ec fb7b 	bl	8000638 <__aeabi_dmul>
 8013f42:	bd70      	pop	{r4, r5, r6, pc}
 8013f44:	0000      	movs	r0, r0
	...

08013f48 <_strtod_l>:
 8013f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f4c:	b0a3      	sub	sp, #140	; 0x8c
 8013f4e:	461f      	mov	r7, r3
 8013f50:	2300      	movs	r3, #0
 8013f52:	931e      	str	r3, [sp, #120]	; 0x78
 8013f54:	4ba4      	ldr	r3, [pc, #656]	; (80141e8 <_strtod_l+0x2a0>)
 8013f56:	9219      	str	r2, [sp, #100]	; 0x64
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	9307      	str	r3, [sp, #28]
 8013f5c:	4604      	mov	r4, r0
 8013f5e:	4618      	mov	r0, r3
 8013f60:	4688      	mov	r8, r1
 8013f62:	f7ec f94f 	bl	8000204 <strlen>
 8013f66:	f04f 0a00 	mov.w	sl, #0
 8013f6a:	4605      	mov	r5, r0
 8013f6c:	f04f 0b00 	mov.w	fp, #0
 8013f70:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8013f74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013f76:	781a      	ldrb	r2, [r3, #0]
 8013f78:	2a2b      	cmp	r2, #43	; 0x2b
 8013f7a:	d04c      	beq.n	8014016 <_strtod_l+0xce>
 8013f7c:	d839      	bhi.n	8013ff2 <_strtod_l+0xaa>
 8013f7e:	2a0d      	cmp	r2, #13
 8013f80:	d832      	bhi.n	8013fe8 <_strtod_l+0xa0>
 8013f82:	2a08      	cmp	r2, #8
 8013f84:	d832      	bhi.n	8013fec <_strtod_l+0xa4>
 8013f86:	2a00      	cmp	r2, #0
 8013f88:	d03c      	beq.n	8014004 <_strtod_l+0xbc>
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	930e      	str	r3, [sp, #56]	; 0x38
 8013f8e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8013f90:	7833      	ldrb	r3, [r6, #0]
 8013f92:	2b30      	cmp	r3, #48	; 0x30
 8013f94:	f040 80b4 	bne.w	8014100 <_strtod_l+0x1b8>
 8013f98:	7873      	ldrb	r3, [r6, #1]
 8013f9a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013f9e:	2b58      	cmp	r3, #88	; 0x58
 8013fa0:	d16c      	bne.n	801407c <_strtod_l+0x134>
 8013fa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013fa4:	9301      	str	r3, [sp, #4]
 8013fa6:	ab1e      	add	r3, sp, #120	; 0x78
 8013fa8:	9702      	str	r7, [sp, #8]
 8013faa:	9300      	str	r3, [sp, #0]
 8013fac:	4a8f      	ldr	r2, [pc, #572]	; (80141ec <_strtod_l+0x2a4>)
 8013fae:	ab1f      	add	r3, sp, #124	; 0x7c
 8013fb0:	a91d      	add	r1, sp, #116	; 0x74
 8013fb2:	4620      	mov	r0, r4
 8013fb4:	f002 fa4c 	bl	8016450 <__gethex>
 8013fb8:	f010 0707 	ands.w	r7, r0, #7
 8013fbc:	4605      	mov	r5, r0
 8013fbe:	d005      	beq.n	8013fcc <_strtod_l+0x84>
 8013fc0:	2f06      	cmp	r7, #6
 8013fc2:	d12a      	bne.n	801401a <_strtod_l+0xd2>
 8013fc4:	3601      	adds	r6, #1
 8013fc6:	2300      	movs	r3, #0
 8013fc8:	961d      	str	r6, [sp, #116]	; 0x74
 8013fca:	930e      	str	r3, [sp, #56]	; 0x38
 8013fcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	f040 8596 	bne.w	8014b00 <_strtod_l+0xbb8>
 8013fd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013fd6:	b1db      	cbz	r3, 8014010 <_strtod_l+0xc8>
 8013fd8:	4652      	mov	r2, sl
 8013fda:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013fde:	ec43 2b10 	vmov	d0, r2, r3
 8013fe2:	b023      	add	sp, #140	; 0x8c
 8013fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fe8:	2a20      	cmp	r2, #32
 8013fea:	d1ce      	bne.n	8013f8a <_strtod_l+0x42>
 8013fec:	3301      	adds	r3, #1
 8013fee:	931d      	str	r3, [sp, #116]	; 0x74
 8013ff0:	e7c0      	b.n	8013f74 <_strtod_l+0x2c>
 8013ff2:	2a2d      	cmp	r2, #45	; 0x2d
 8013ff4:	d1c9      	bne.n	8013f8a <_strtod_l+0x42>
 8013ff6:	2201      	movs	r2, #1
 8013ff8:	920e      	str	r2, [sp, #56]	; 0x38
 8013ffa:	1c5a      	adds	r2, r3, #1
 8013ffc:	921d      	str	r2, [sp, #116]	; 0x74
 8013ffe:	785b      	ldrb	r3, [r3, #1]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d1c4      	bne.n	8013f8e <_strtod_l+0x46>
 8014004:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014006:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801400a:	2b00      	cmp	r3, #0
 801400c:	f040 8576 	bne.w	8014afc <_strtod_l+0xbb4>
 8014010:	4652      	mov	r2, sl
 8014012:	465b      	mov	r3, fp
 8014014:	e7e3      	b.n	8013fde <_strtod_l+0x96>
 8014016:	2200      	movs	r2, #0
 8014018:	e7ee      	b.n	8013ff8 <_strtod_l+0xb0>
 801401a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801401c:	b13a      	cbz	r2, 801402e <_strtod_l+0xe6>
 801401e:	2135      	movs	r1, #53	; 0x35
 8014020:	a820      	add	r0, sp, #128	; 0x80
 8014022:	f003 fb22 	bl	801766a <__copybits>
 8014026:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014028:	4620      	mov	r0, r4
 801402a:	f002 fee7 	bl	8016dfc <_Bfree>
 801402e:	3f01      	subs	r7, #1
 8014030:	2f05      	cmp	r7, #5
 8014032:	d807      	bhi.n	8014044 <_strtod_l+0xfc>
 8014034:	e8df f007 	tbb	[pc, r7]
 8014038:	1d180b0e 	.word	0x1d180b0e
 801403c:	030e      	.short	0x030e
 801403e:	f04f 0b00 	mov.w	fp, #0
 8014042:	46da      	mov	sl, fp
 8014044:	0728      	lsls	r0, r5, #28
 8014046:	d5c1      	bpl.n	8013fcc <_strtod_l+0x84>
 8014048:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801404c:	e7be      	b.n	8013fcc <_strtod_l+0x84>
 801404e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8014052:	e7f7      	b.n	8014044 <_strtod_l+0xfc>
 8014054:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8014058:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801405a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801405e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014062:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8014066:	e7ed      	b.n	8014044 <_strtod_l+0xfc>
 8014068:	f8df b184 	ldr.w	fp, [pc, #388]	; 80141f0 <_strtod_l+0x2a8>
 801406c:	f04f 0a00 	mov.w	sl, #0
 8014070:	e7e8      	b.n	8014044 <_strtod_l+0xfc>
 8014072:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8014076:	f04f 3aff 	mov.w	sl, #4294967295
 801407a:	e7e3      	b.n	8014044 <_strtod_l+0xfc>
 801407c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801407e:	1c5a      	adds	r2, r3, #1
 8014080:	921d      	str	r2, [sp, #116]	; 0x74
 8014082:	785b      	ldrb	r3, [r3, #1]
 8014084:	2b30      	cmp	r3, #48	; 0x30
 8014086:	d0f9      	beq.n	801407c <_strtod_l+0x134>
 8014088:	2b00      	cmp	r3, #0
 801408a:	d09f      	beq.n	8013fcc <_strtod_l+0x84>
 801408c:	2301      	movs	r3, #1
 801408e:	f04f 0900 	mov.w	r9, #0
 8014092:	9304      	str	r3, [sp, #16]
 8014094:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014096:	930a      	str	r3, [sp, #40]	; 0x28
 8014098:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801409c:	464f      	mov	r7, r9
 801409e:	220a      	movs	r2, #10
 80140a0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80140a2:	7806      	ldrb	r6, [r0, #0]
 80140a4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80140a8:	b2d9      	uxtb	r1, r3
 80140aa:	2909      	cmp	r1, #9
 80140ac:	d92a      	bls.n	8014104 <_strtod_l+0x1bc>
 80140ae:	9907      	ldr	r1, [sp, #28]
 80140b0:	462a      	mov	r2, r5
 80140b2:	f7ff ff19 	bl	8013ee8 <strncmp>
 80140b6:	b398      	cbz	r0, 8014120 <_strtod_l+0x1d8>
 80140b8:	2000      	movs	r0, #0
 80140ba:	4633      	mov	r3, r6
 80140bc:	463d      	mov	r5, r7
 80140be:	9007      	str	r0, [sp, #28]
 80140c0:	4602      	mov	r2, r0
 80140c2:	2b65      	cmp	r3, #101	; 0x65
 80140c4:	d001      	beq.n	80140ca <_strtod_l+0x182>
 80140c6:	2b45      	cmp	r3, #69	; 0x45
 80140c8:	d118      	bne.n	80140fc <_strtod_l+0x1b4>
 80140ca:	b91d      	cbnz	r5, 80140d4 <_strtod_l+0x18c>
 80140cc:	9b04      	ldr	r3, [sp, #16]
 80140ce:	4303      	orrs	r3, r0
 80140d0:	d098      	beq.n	8014004 <_strtod_l+0xbc>
 80140d2:	2500      	movs	r5, #0
 80140d4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80140d8:	f108 0301 	add.w	r3, r8, #1
 80140dc:	931d      	str	r3, [sp, #116]	; 0x74
 80140de:	f898 3001 	ldrb.w	r3, [r8, #1]
 80140e2:	2b2b      	cmp	r3, #43	; 0x2b
 80140e4:	d075      	beq.n	80141d2 <_strtod_l+0x28a>
 80140e6:	2b2d      	cmp	r3, #45	; 0x2d
 80140e8:	d07b      	beq.n	80141e2 <_strtod_l+0x29a>
 80140ea:	f04f 0c00 	mov.w	ip, #0
 80140ee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80140f2:	2909      	cmp	r1, #9
 80140f4:	f240 8082 	bls.w	80141fc <_strtod_l+0x2b4>
 80140f8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80140fc:	2600      	movs	r6, #0
 80140fe:	e09d      	b.n	801423c <_strtod_l+0x2f4>
 8014100:	2300      	movs	r3, #0
 8014102:	e7c4      	b.n	801408e <_strtod_l+0x146>
 8014104:	2f08      	cmp	r7, #8
 8014106:	bfd8      	it	le
 8014108:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801410a:	f100 0001 	add.w	r0, r0, #1
 801410e:	bfda      	itte	le
 8014110:	fb02 3301 	mlale	r3, r2, r1, r3
 8014114:	9309      	strle	r3, [sp, #36]	; 0x24
 8014116:	fb02 3909 	mlagt	r9, r2, r9, r3
 801411a:	3701      	adds	r7, #1
 801411c:	901d      	str	r0, [sp, #116]	; 0x74
 801411e:	e7bf      	b.n	80140a0 <_strtod_l+0x158>
 8014120:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014122:	195a      	adds	r2, r3, r5
 8014124:	921d      	str	r2, [sp, #116]	; 0x74
 8014126:	5d5b      	ldrb	r3, [r3, r5]
 8014128:	2f00      	cmp	r7, #0
 801412a:	d037      	beq.n	801419c <_strtod_l+0x254>
 801412c:	9007      	str	r0, [sp, #28]
 801412e:	463d      	mov	r5, r7
 8014130:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8014134:	2a09      	cmp	r2, #9
 8014136:	d912      	bls.n	801415e <_strtod_l+0x216>
 8014138:	2201      	movs	r2, #1
 801413a:	e7c2      	b.n	80140c2 <_strtod_l+0x17a>
 801413c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801413e:	1c5a      	adds	r2, r3, #1
 8014140:	921d      	str	r2, [sp, #116]	; 0x74
 8014142:	785b      	ldrb	r3, [r3, #1]
 8014144:	3001      	adds	r0, #1
 8014146:	2b30      	cmp	r3, #48	; 0x30
 8014148:	d0f8      	beq.n	801413c <_strtod_l+0x1f4>
 801414a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801414e:	2a08      	cmp	r2, #8
 8014150:	f200 84db 	bhi.w	8014b0a <_strtod_l+0xbc2>
 8014154:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014156:	9007      	str	r0, [sp, #28]
 8014158:	2000      	movs	r0, #0
 801415a:	920a      	str	r2, [sp, #40]	; 0x28
 801415c:	4605      	mov	r5, r0
 801415e:	3b30      	subs	r3, #48	; 0x30
 8014160:	f100 0201 	add.w	r2, r0, #1
 8014164:	d014      	beq.n	8014190 <_strtod_l+0x248>
 8014166:	9907      	ldr	r1, [sp, #28]
 8014168:	4411      	add	r1, r2
 801416a:	9107      	str	r1, [sp, #28]
 801416c:	462a      	mov	r2, r5
 801416e:	eb00 0e05 	add.w	lr, r0, r5
 8014172:	210a      	movs	r1, #10
 8014174:	4572      	cmp	r2, lr
 8014176:	d113      	bne.n	80141a0 <_strtod_l+0x258>
 8014178:	182a      	adds	r2, r5, r0
 801417a:	2a08      	cmp	r2, #8
 801417c:	f105 0501 	add.w	r5, r5, #1
 8014180:	4405      	add	r5, r0
 8014182:	dc1c      	bgt.n	80141be <_strtod_l+0x276>
 8014184:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014186:	220a      	movs	r2, #10
 8014188:	fb02 3301 	mla	r3, r2, r1, r3
 801418c:	9309      	str	r3, [sp, #36]	; 0x24
 801418e:	2200      	movs	r2, #0
 8014190:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014192:	1c59      	adds	r1, r3, #1
 8014194:	911d      	str	r1, [sp, #116]	; 0x74
 8014196:	785b      	ldrb	r3, [r3, #1]
 8014198:	4610      	mov	r0, r2
 801419a:	e7c9      	b.n	8014130 <_strtod_l+0x1e8>
 801419c:	4638      	mov	r0, r7
 801419e:	e7d2      	b.n	8014146 <_strtod_l+0x1fe>
 80141a0:	2a08      	cmp	r2, #8
 80141a2:	dc04      	bgt.n	80141ae <_strtod_l+0x266>
 80141a4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80141a6:	434e      	muls	r6, r1
 80141a8:	9609      	str	r6, [sp, #36]	; 0x24
 80141aa:	3201      	adds	r2, #1
 80141ac:	e7e2      	b.n	8014174 <_strtod_l+0x22c>
 80141ae:	f102 0c01 	add.w	ip, r2, #1
 80141b2:	f1bc 0f10 	cmp.w	ip, #16
 80141b6:	bfd8      	it	le
 80141b8:	fb01 f909 	mulle.w	r9, r1, r9
 80141bc:	e7f5      	b.n	80141aa <_strtod_l+0x262>
 80141be:	2d10      	cmp	r5, #16
 80141c0:	bfdc      	itt	le
 80141c2:	220a      	movle	r2, #10
 80141c4:	fb02 3909 	mlale	r9, r2, r9, r3
 80141c8:	e7e1      	b.n	801418e <_strtod_l+0x246>
 80141ca:	2300      	movs	r3, #0
 80141cc:	9307      	str	r3, [sp, #28]
 80141ce:	2201      	movs	r2, #1
 80141d0:	e77c      	b.n	80140cc <_strtod_l+0x184>
 80141d2:	f04f 0c00 	mov.w	ip, #0
 80141d6:	f108 0302 	add.w	r3, r8, #2
 80141da:	931d      	str	r3, [sp, #116]	; 0x74
 80141dc:	f898 3002 	ldrb.w	r3, [r8, #2]
 80141e0:	e785      	b.n	80140ee <_strtod_l+0x1a6>
 80141e2:	f04f 0c01 	mov.w	ip, #1
 80141e6:	e7f6      	b.n	80141d6 <_strtod_l+0x28e>
 80141e8:	0801a8b8 	.word	0x0801a8b8
 80141ec:	0801a6a8 	.word	0x0801a6a8
 80141f0:	7ff00000 	.word	0x7ff00000
 80141f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80141f6:	1c59      	adds	r1, r3, #1
 80141f8:	911d      	str	r1, [sp, #116]	; 0x74
 80141fa:	785b      	ldrb	r3, [r3, #1]
 80141fc:	2b30      	cmp	r3, #48	; 0x30
 80141fe:	d0f9      	beq.n	80141f4 <_strtod_l+0x2ac>
 8014200:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8014204:	2908      	cmp	r1, #8
 8014206:	f63f af79 	bhi.w	80140fc <_strtod_l+0x1b4>
 801420a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801420e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014210:	9308      	str	r3, [sp, #32]
 8014212:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014214:	1c59      	adds	r1, r3, #1
 8014216:	911d      	str	r1, [sp, #116]	; 0x74
 8014218:	785b      	ldrb	r3, [r3, #1]
 801421a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801421e:	2e09      	cmp	r6, #9
 8014220:	d937      	bls.n	8014292 <_strtod_l+0x34a>
 8014222:	9e08      	ldr	r6, [sp, #32]
 8014224:	1b89      	subs	r1, r1, r6
 8014226:	2908      	cmp	r1, #8
 8014228:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801422c:	dc02      	bgt.n	8014234 <_strtod_l+0x2ec>
 801422e:	4576      	cmp	r6, lr
 8014230:	bfa8      	it	ge
 8014232:	4676      	movge	r6, lr
 8014234:	f1bc 0f00 	cmp.w	ip, #0
 8014238:	d000      	beq.n	801423c <_strtod_l+0x2f4>
 801423a:	4276      	negs	r6, r6
 801423c:	2d00      	cmp	r5, #0
 801423e:	d14f      	bne.n	80142e0 <_strtod_l+0x398>
 8014240:	9904      	ldr	r1, [sp, #16]
 8014242:	4301      	orrs	r1, r0
 8014244:	f47f aec2 	bne.w	8013fcc <_strtod_l+0x84>
 8014248:	2a00      	cmp	r2, #0
 801424a:	f47f aedb 	bne.w	8014004 <_strtod_l+0xbc>
 801424e:	2b69      	cmp	r3, #105	; 0x69
 8014250:	d027      	beq.n	80142a2 <_strtod_l+0x35a>
 8014252:	dc24      	bgt.n	801429e <_strtod_l+0x356>
 8014254:	2b49      	cmp	r3, #73	; 0x49
 8014256:	d024      	beq.n	80142a2 <_strtod_l+0x35a>
 8014258:	2b4e      	cmp	r3, #78	; 0x4e
 801425a:	f47f aed3 	bne.w	8014004 <_strtod_l+0xbc>
 801425e:	499e      	ldr	r1, [pc, #632]	; (80144d8 <_strtod_l+0x590>)
 8014260:	a81d      	add	r0, sp, #116	; 0x74
 8014262:	f002 fb4d 	bl	8016900 <__match>
 8014266:	2800      	cmp	r0, #0
 8014268:	f43f aecc 	beq.w	8014004 <_strtod_l+0xbc>
 801426c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801426e:	781b      	ldrb	r3, [r3, #0]
 8014270:	2b28      	cmp	r3, #40	; 0x28
 8014272:	d12d      	bne.n	80142d0 <_strtod_l+0x388>
 8014274:	4999      	ldr	r1, [pc, #612]	; (80144dc <_strtod_l+0x594>)
 8014276:	aa20      	add	r2, sp, #128	; 0x80
 8014278:	a81d      	add	r0, sp, #116	; 0x74
 801427a:	f002 fb55 	bl	8016928 <__hexnan>
 801427e:	2805      	cmp	r0, #5
 8014280:	d126      	bne.n	80142d0 <_strtod_l+0x388>
 8014282:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014284:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8014288:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801428c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8014290:	e69c      	b.n	8013fcc <_strtod_l+0x84>
 8014292:	210a      	movs	r1, #10
 8014294:	fb01 3e0e 	mla	lr, r1, lr, r3
 8014298:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801429c:	e7b9      	b.n	8014212 <_strtod_l+0x2ca>
 801429e:	2b6e      	cmp	r3, #110	; 0x6e
 80142a0:	e7db      	b.n	801425a <_strtod_l+0x312>
 80142a2:	498f      	ldr	r1, [pc, #572]	; (80144e0 <_strtod_l+0x598>)
 80142a4:	a81d      	add	r0, sp, #116	; 0x74
 80142a6:	f002 fb2b 	bl	8016900 <__match>
 80142aa:	2800      	cmp	r0, #0
 80142ac:	f43f aeaa 	beq.w	8014004 <_strtod_l+0xbc>
 80142b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80142b2:	498c      	ldr	r1, [pc, #560]	; (80144e4 <_strtod_l+0x59c>)
 80142b4:	3b01      	subs	r3, #1
 80142b6:	a81d      	add	r0, sp, #116	; 0x74
 80142b8:	931d      	str	r3, [sp, #116]	; 0x74
 80142ba:	f002 fb21 	bl	8016900 <__match>
 80142be:	b910      	cbnz	r0, 80142c6 <_strtod_l+0x37e>
 80142c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80142c2:	3301      	adds	r3, #1
 80142c4:	931d      	str	r3, [sp, #116]	; 0x74
 80142c6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80144f4 <_strtod_l+0x5ac>
 80142ca:	f04f 0a00 	mov.w	sl, #0
 80142ce:	e67d      	b.n	8013fcc <_strtod_l+0x84>
 80142d0:	4885      	ldr	r0, [pc, #532]	; (80144e8 <_strtod_l+0x5a0>)
 80142d2:	f7fd ffd5 	bl	8012280 <nan>
 80142d6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80142da:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80142de:	e675      	b.n	8013fcc <_strtod_l+0x84>
 80142e0:	9b07      	ldr	r3, [sp, #28]
 80142e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80142e4:	1af3      	subs	r3, r6, r3
 80142e6:	2f00      	cmp	r7, #0
 80142e8:	bf08      	it	eq
 80142ea:	462f      	moveq	r7, r5
 80142ec:	2d10      	cmp	r5, #16
 80142ee:	9308      	str	r3, [sp, #32]
 80142f0:	46a8      	mov	r8, r5
 80142f2:	bfa8      	it	ge
 80142f4:	f04f 0810 	movge.w	r8, #16
 80142f8:	f7ec f924 	bl	8000544 <__aeabi_ui2d>
 80142fc:	2d09      	cmp	r5, #9
 80142fe:	4682      	mov	sl, r0
 8014300:	468b      	mov	fp, r1
 8014302:	dd13      	ble.n	801432c <_strtod_l+0x3e4>
 8014304:	4b79      	ldr	r3, [pc, #484]	; (80144ec <_strtod_l+0x5a4>)
 8014306:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801430a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801430e:	f7ec f993 	bl	8000638 <__aeabi_dmul>
 8014312:	4682      	mov	sl, r0
 8014314:	4648      	mov	r0, r9
 8014316:	468b      	mov	fp, r1
 8014318:	f7ec f914 	bl	8000544 <__aeabi_ui2d>
 801431c:	4602      	mov	r2, r0
 801431e:	460b      	mov	r3, r1
 8014320:	4650      	mov	r0, sl
 8014322:	4659      	mov	r1, fp
 8014324:	f7eb ffd2 	bl	80002cc <__adddf3>
 8014328:	4682      	mov	sl, r0
 801432a:	468b      	mov	fp, r1
 801432c:	2d0f      	cmp	r5, #15
 801432e:	dc38      	bgt.n	80143a2 <_strtod_l+0x45a>
 8014330:	9b08      	ldr	r3, [sp, #32]
 8014332:	2b00      	cmp	r3, #0
 8014334:	f43f ae4a 	beq.w	8013fcc <_strtod_l+0x84>
 8014338:	dd24      	ble.n	8014384 <_strtod_l+0x43c>
 801433a:	2b16      	cmp	r3, #22
 801433c:	dc0b      	bgt.n	8014356 <_strtod_l+0x40e>
 801433e:	4d6b      	ldr	r5, [pc, #428]	; (80144ec <_strtod_l+0x5a4>)
 8014340:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8014344:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014348:	4652      	mov	r2, sl
 801434a:	465b      	mov	r3, fp
 801434c:	f7ec f974 	bl	8000638 <__aeabi_dmul>
 8014350:	4682      	mov	sl, r0
 8014352:	468b      	mov	fp, r1
 8014354:	e63a      	b.n	8013fcc <_strtod_l+0x84>
 8014356:	9a08      	ldr	r2, [sp, #32]
 8014358:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801435c:	4293      	cmp	r3, r2
 801435e:	db20      	blt.n	80143a2 <_strtod_l+0x45a>
 8014360:	4c62      	ldr	r4, [pc, #392]	; (80144ec <_strtod_l+0x5a4>)
 8014362:	f1c5 050f 	rsb	r5, r5, #15
 8014366:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801436a:	4652      	mov	r2, sl
 801436c:	465b      	mov	r3, fp
 801436e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014372:	f7ec f961 	bl	8000638 <__aeabi_dmul>
 8014376:	9b08      	ldr	r3, [sp, #32]
 8014378:	1b5d      	subs	r5, r3, r5
 801437a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801437e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014382:	e7e3      	b.n	801434c <_strtod_l+0x404>
 8014384:	9b08      	ldr	r3, [sp, #32]
 8014386:	3316      	adds	r3, #22
 8014388:	db0b      	blt.n	80143a2 <_strtod_l+0x45a>
 801438a:	9b07      	ldr	r3, [sp, #28]
 801438c:	4a57      	ldr	r2, [pc, #348]	; (80144ec <_strtod_l+0x5a4>)
 801438e:	1b9e      	subs	r6, r3, r6
 8014390:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8014394:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014398:	4650      	mov	r0, sl
 801439a:	4659      	mov	r1, fp
 801439c:	f7ec fa76 	bl	800088c <__aeabi_ddiv>
 80143a0:	e7d6      	b.n	8014350 <_strtod_l+0x408>
 80143a2:	9b08      	ldr	r3, [sp, #32]
 80143a4:	eba5 0808 	sub.w	r8, r5, r8
 80143a8:	4498      	add	r8, r3
 80143aa:	f1b8 0f00 	cmp.w	r8, #0
 80143ae:	dd71      	ble.n	8014494 <_strtod_l+0x54c>
 80143b0:	f018 030f 	ands.w	r3, r8, #15
 80143b4:	d00a      	beq.n	80143cc <_strtod_l+0x484>
 80143b6:	494d      	ldr	r1, [pc, #308]	; (80144ec <_strtod_l+0x5a4>)
 80143b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80143bc:	4652      	mov	r2, sl
 80143be:	465b      	mov	r3, fp
 80143c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80143c4:	f7ec f938 	bl	8000638 <__aeabi_dmul>
 80143c8:	4682      	mov	sl, r0
 80143ca:	468b      	mov	fp, r1
 80143cc:	f038 080f 	bics.w	r8, r8, #15
 80143d0:	d04d      	beq.n	801446e <_strtod_l+0x526>
 80143d2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80143d6:	dd22      	ble.n	801441e <_strtod_l+0x4d6>
 80143d8:	2500      	movs	r5, #0
 80143da:	462e      	mov	r6, r5
 80143dc:	9509      	str	r5, [sp, #36]	; 0x24
 80143de:	9507      	str	r5, [sp, #28]
 80143e0:	2322      	movs	r3, #34	; 0x22
 80143e2:	f8df b110 	ldr.w	fp, [pc, #272]	; 80144f4 <_strtod_l+0x5ac>
 80143e6:	6023      	str	r3, [r4, #0]
 80143e8:	f04f 0a00 	mov.w	sl, #0
 80143ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	f43f adec 	beq.w	8013fcc <_strtod_l+0x84>
 80143f4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80143f6:	4620      	mov	r0, r4
 80143f8:	f002 fd00 	bl	8016dfc <_Bfree>
 80143fc:	9907      	ldr	r1, [sp, #28]
 80143fe:	4620      	mov	r0, r4
 8014400:	f002 fcfc 	bl	8016dfc <_Bfree>
 8014404:	4631      	mov	r1, r6
 8014406:	4620      	mov	r0, r4
 8014408:	f002 fcf8 	bl	8016dfc <_Bfree>
 801440c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801440e:	4620      	mov	r0, r4
 8014410:	f002 fcf4 	bl	8016dfc <_Bfree>
 8014414:	4629      	mov	r1, r5
 8014416:	4620      	mov	r0, r4
 8014418:	f002 fcf0 	bl	8016dfc <_Bfree>
 801441c:	e5d6      	b.n	8013fcc <_strtod_l+0x84>
 801441e:	2300      	movs	r3, #0
 8014420:	ea4f 1828 	mov.w	r8, r8, asr #4
 8014424:	4650      	mov	r0, sl
 8014426:	4659      	mov	r1, fp
 8014428:	4699      	mov	r9, r3
 801442a:	f1b8 0f01 	cmp.w	r8, #1
 801442e:	dc21      	bgt.n	8014474 <_strtod_l+0x52c>
 8014430:	b10b      	cbz	r3, 8014436 <_strtod_l+0x4ee>
 8014432:	4682      	mov	sl, r0
 8014434:	468b      	mov	fp, r1
 8014436:	4b2e      	ldr	r3, [pc, #184]	; (80144f0 <_strtod_l+0x5a8>)
 8014438:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801443c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8014440:	4652      	mov	r2, sl
 8014442:	465b      	mov	r3, fp
 8014444:	e9d9 0100 	ldrd	r0, r1, [r9]
 8014448:	f7ec f8f6 	bl	8000638 <__aeabi_dmul>
 801444c:	4b29      	ldr	r3, [pc, #164]	; (80144f4 <_strtod_l+0x5ac>)
 801444e:	460a      	mov	r2, r1
 8014450:	400b      	ands	r3, r1
 8014452:	4929      	ldr	r1, [pc, #164]	; (80144f8 <_strtod_l+0x5b0>)
 8014454:	428b      	cmp	r3, r1
 8014456:	4682      	mov	sl, r0
 8014458:	d8be      	bhi.n	80143d8 <_strtod_l+0x490>
 801445a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801445e:	428b      	cmp	r3, r1
 8014460:	bf86      	itte	hi
 8014462:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80144fc <_strtod_l+0x5b4>
 8014466:	f04f 3aff 	movhi.w	sl, #4294967295
 801446a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801446e:	2300      	movs	r3, #0
 8014470:	9304      	str	r3, [sp, #16]
 8014472:	e081      	b.n	8014578 <_strtod_l+0x630>
 8014474:	f018 0f01 	tst.w	r8, #1
 8014478:	d007      	beq.n	801448a <_strtod_l+0x542>
 801447a:	4b1d      	ldr	r3, [pc, #116]	; (80144f0 <_strtod_l+0x5a8>)
 801447c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8014480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014484:	f7ec f8d8 	bl	8000638 <__aeabi_dmul>
 8014488:	2301      	movs	r3, #1
 801448a:	f109 0901 	add.w	r9, r9, #1
 801448e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014492:	e7ca      	b.n	801442a <_strtod_l+0x4e2>
 8014494:	d0eb      	beq.n	801446e <_strtod_l+0x526>
 8014496:	f1c8 0800 	rsb	r8, r8, #0
 801449a:	f018 020f 	ands.w	r2, r8, #15
 801449e:	d00a      	beq.n	80144b6 <_strtod_l+0x56e>
 80144a0:	4b12      	ldr	r3, [pc, #72]	; (80144ec <_strtod_l+0x5a4>)
 80144a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80144a6:	4650      	mov	r0, sl
 80144a8:	4659      	mov	r1, fp
 80144aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144ae:	f7ec f9ed 	bl	800088c <__aeabi_ddiv>
 80144b2:	4682      	mov	sl, r0
 80144b4:	468b      	mov	fp, r1
 80144b6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80144ba:	d0d8      	beq.n	801446e <_strtod_l+0x526>
 80144bc:	f1b8 0f1f 	cmp.w	r8, #31
 80144c0:	dd1e      	ble.n	8014500 <_strtod_l+0x5b8>
 80144c2:	2500      	movs	r5, #0
 80144c4:	462e      	mov	r6, r5
 80144c6:	9509      	str	r5, [sp, #36]	; 0x24
 80144c8:	9507      	str	r5, [sp, #28]
 80144ca:	2322      	movs	r3, #34	; 0x22
 80144cc:	f04f 0a00 	mov.w	sl, #0
 80144d0:	f04f 0b00 	mov.w	fp, #0
 80144d4:	6023      	str	r3, [r4, #0]
 80144d6:	e789      	b.n	80143ec <_strtod_l+0x4a4>
 80144d8:	0801a67d 	.word	0x0801a67d
 80144dc:	0801a6bc 	.word	0x0801a6bc
 80144e0:	0801a675 	.word	0x0801a675
 80144e4:	0801a7d4 	.word	0x0801a7d4
 80144e8:	0801a7d0 	.word	0x0801a7d0
 80144ec:	0801a958 	.word	0x0801a958
 80144f0:	0801a930 	.word	0x0801a930
 80144f4:	7ff00000 	.word	0x7ff00000
 80144f8:	7ca00000 	.word	0x7ca00000
 80144fc:	7fefffff 	.word	0x7fefffff
 8014500:	f018 0310 	ands.w	r3, r8, #16
 8014504:	bf18      	it	ne
 8014506:	236a      	movne	r3, #106	; 0x6a
 8014508:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80148c0 <_strtod_l+0x978>
 801450c:	9304      	str	r3, [sp, #16]
 801450e:	4650      	mov	r0, sl
 8014510:	4659      	mov	r1, fp
 8014512:	2300      	movs	r3, #0
 8014514:	f018 0f01 	tst.w	r8, #1
 8014518:	d004      	beq.n	8014524 <_strtod_l+0x5dc>
 801451a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801451e:	f7ec f88b 	bl	8000638 <__aeabi_dmul>
 8014522:	2301      	movs	r3, #1
 8014524:	ea5f 0868 	movs.w	r8, r8, asr #1
 8014528:	f109 0908 	add.w	r9, r9, #8
 801452c:	d1f2      	bne.n	8014514 <_strtod_l+0x5cc>
 801452e:	b10b      	cbz	r3, 8014534 <_strtod_l+0x5ec>
 8014530:	4682      	mov	sl, r0
 8014532:	468b      	mov	fp, r1
 8014534:	9b04      	ldr	r3, [sp, #16]
 8014536:	b1bb      	cbz	r3, 8014568 <_strtod_l+0x620>
 8014538:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801453c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014540:	2b00      	cmp	r3, #0
 8014542:	4659      	mov	r1, fp
 8014544:	dd10      	ble.n	8014568 <_strtod_l+0x620>
 8014546:	2b1f      	cmp	r3, #31
 8014548:	f340 8128 	ble.w	801479c <_strtod_l+0x854>
 801454c:	2b34      	cmp	r3, #52	; 0x34
 801454e:	bfde      	ittt	le
 8014550:	3b20      	suble	r3, #32
 8014552:	f04f 32ff 	movle.w	r2, #4294967295
 8014556:	fa02 f303 	lslle.w	r3, r2, r3
 801455a:	f04f 0a00 	mov.w	sl, #0
 801455e:	bfcc      	ite	gt
 8014560:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8014564:	ea03 0b01 	andle.w	fp, r3, r1
 8014568:	2200      	movs	r2, #0
 801456a:	2300      	movs	r3, #0
 801456c:	4650      	mov	r0, sl
 801456e:	4659      	mov	r1, fp
 8014570:	f7ec faca 	bl	8000b08 <__aeabi_dcmpeq>
 8014574:	2800      	cmp	r0, #0
 8014576:	d1a4      	bne.n	80144c2 <_strtod_l+0x57a>
 8014578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801457a:	9300      	str	r3, [sp, #0]
 801457c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801457e:	462b      	mov	r3, r5
 8014580:	463a      	mov	r2, r7
 8014582:	4620      	mov	r0, r4
 8014584:	f002 fca6 	bl	8016ed4 <__s2b>
 8014588:	9009      	str	r0, [sp, #36]	; 0x24
 801458a:	2800      	cmp	r0, #0
 801458c:	f43f af24 	beq.w	80143d8 <_strtod_l+0x490>
 8014590:	9b07      	ldr	r3, [sp, #28]
 8014592:	1b9e      	subs	r6, r3, r6
 8014594:	9b08      	ldr	r3, [sp, #32]
 8014596:	2b00      	cmp	r3, #0
 8014598:	bfb4      	ite	lt
 801459a:	4633      	movlt	r3, r6
 801459c:	2300      	movge	r3, #0
 801459e:	9310      	str	r3, [sp, #64]	; 0x40
 80145a0:	9b08      	ldr	r3, [sp, #32]
 80145a2:	2500      	movs	r5, #0
 80145a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80145a8:	9318      	str	r3, [sp, #96]	; 0x60
 80145aa:	462e      	mov	r6, r5
 80145ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145ae:	4620      	mov	r0, r4
 80145b0:	6859      	ldr	r1, [r3, #4]
 80145b2:	f002 fbe3 	bl	8016d7c <_Balloc>
 80145b6:	9007      	str	r0, [sp, #28]
 80145b8:	2800      	cmp	r0, #0
 80145ba:	f43f af11 	beq.w	80143e0 <_strtod_l+0x498>
 80145be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145c0:	691a      	ldr	r2, [r3, #16]
 80145c2:	3202      	adds	r2, #2
 80145c4:	f103 010c 	add.w	r1, r3, #12
 80145c8:	0092      	lsls	r2, r2, #2
 80145ca:	300c      	adds	r0, #12
 80145cc:	f7fe f8c2 	bl	8012754 <memcpy>
 80145d0:	ec4b ab10 	vmov	d0, sl, fp
 80145d4:	aa20      	add	r2, sp, #128	; 0x80
 80145d6:	a91f      	add	r1, sp, #124	; 0x7c
 80145d8:	4620      	mov	r0, r4
 80145da:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80145de:	f002 ffb5 	bl	801754c <__d2b>
 80145e2:	901e      	str	r0, [sp, #120]	; 0x78
 80145e4:	2800      	cmp	r0, #0
 80145e6:	f43f aefb 	beq.w	80143e0 <_strtod_l+0x498>
 80145ea:	2101      	movs	r1, #1
 80145ec:	4620      	mov	r0, r4
 80145ee:	f002 fd0b 	bl	8017008 <__i2b>
 80145f2:	4606      	mov	r6, r0
 80145f4:	2800      	cmp	r0, #0
 80145f6:	f43f aef3 	beq.w	80143e0 <_strtod_l+0x498>
 80145fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80145fc:	9904      	ldr	r1, [sp, #16]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	bfab      	itete	ge
 8014602:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8014604:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8014606:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8014608:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801460c:	bfac      	ite	ge
 801460e:	eb03 0902 	addge.w	r9, r3, r2
 8014612:	1ad7      	sublt	r7, r2, r3
 8014614:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014616:	eba3 0801 	sub.w	r8, r3, r1
 801461a:	4490      	add	r8, r2
 801461c:	4ba3      	ldr	r3, [pc, #652]	; (80148ac <_strtod_l+0x964>)
 801461e:	f108 38ff 	add.w	r8, r8, #4294967295
 8014622:	4598      	cmp	r8, r3
 8014624:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014628:	f280 80cc 	bge.w	80147c4 <_strtod_l+0x87c>
 801462c:	eba3 0308 	sub.w	r3, r3, r8
 8014630:	2b1f      	cmp	r3, #31
 8014632:	eba2 0203 	sub.w	r2, r2, r3
 8014636:	f04f 0101 	mov.w	r1, #1
 801463a:	f300 80b6 	bgt.w	80147aa <_strtod_l+0x862>
 801463e:	fa01 f303 	lsl.w	r3, r1, r3
 8014642:	9311      	str	r3, [sp, #68]	; 0x44
 8014644:	2300      	movs	r3, #0
 8014646:	930c      	str	r3, [sp, #48]	; 0x30
 8014648:	eb09 0802 	add.w	r8, r9, r2
 801464c:	9b04      	ldr	r3, [sp, #16]
 801464e:	45c1      	cmp	r9, r8
 8014650:	4417      	add	r7, r2
 8014652:	441f      	add	r7, r3
 8014654:	464b      	mov	r3, r9
 8014656:	bfa8      	it	ge
 8014658:	4643      	movge	r3, r8
 801465a:	42bb      	cmp	r3, r7
 801465c:	bfa8      	it	ge
 801465e:	463b      	movge	r3, r7
 8014660:	2b00      	cmp	r3, #0
 8014662:	bfc2      	ittt	gt
 8014664:	eba8 0803 	subgt.w	r8, r8, r3
 8014668:	1aff      	subgt	r7, r7, r3
 801466a:	eba9 0903 	subgt.w	r9, r9, r3
 801466e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014670:	2b00      	cmp	r3, #0
 8014672:	dd17      	ble.n	80146a4 <_strtod_l+0x75c>
 8014674:	4631      	mov	r1, r6
 8014676:	461a      	mov	r2, r3
 8014678:	4620      	mov	r0, r4
 801467a:	f002 fd81 	bl	8017180 <__pow5mult>
 801467e:	4606      	mov	r6, r0
 8014680:	2800      	cmp	r0, #0
 8014682:	f43f aead 	beq.w	80143e0 <_strtod_l+0x498>
 8014686:	4601      	mov	r1, r0
 8014688:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801468a:	4620      	mov	r0, r4
 801468c:	f002 fcd2 	bl	8017034 <__multiply>
 8014690:	900f      	str	r0, [sp, #60]	; 0x3c
 8014692:	2800      	cmp	r0, #0
 8014694:	f43f aea4 	beq.w	80143e0 <_strtod_l+0x498>
 8014698:	991e      	ldr	r1, [sp, #120]	; 0x78
 801469a:	4620      	mov	r0, r4
 801469c:	f002 fbae 	bl	8016dfc <_Bfree>
 80146a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80146a2:	931e      	str	r3, [sp, #120]	; 0x78
 80146a4:	f1b8 0f00 	cmp.w	r8, #0
 80146a8:	f300 8091 	bgt.w	80147ce <_strtod_l+0x886>
 80146ac:	9b08      	ldr	r3, [sp, #32]
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	dd08      	ble.n	80146c4 <_strtod_l+0x77c>
 80146b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80146b4:	9907      	ldr	r1, [sp, #28]
 80146b6:	4620      	mov	r0, r4
 80146b8:	f002 fd62 	bl	8017180 <__pow5mult>
 80146bc:	9007      	str	r0, [sp, #28]
 80146be:	2800      	cmp	r0, #0
 80146c0:	f43f ae8e 	beq.w	80143e0 <_strtod_l+0x498>
 80146c4:	2f00      	cmp	r7, #0
 80146c6:	dd08      	ble.n	80146da <_strtod_l+0x792>
 80146c8:	9907      	ldr	r1, [sp, #28]
 80146ca:	463a      	mov	r2, r7
 80146cc:	4620      	mov	r0, r4
 80146ce:	f002 fdb1 	bl	8017234 <__lshift>
 80146d2:	9007      	str	r0, [sp, #28]
 80146d4:	2800      	cmp	r0, #0
 80146d6:	f43f ae83 	beq.w	80143e0 <_strtod_l+0x498>
 80146da:	f1b9 0f00 	cmp.w	r9, #0
 80146de:	dd08      	ble.n	80146f2 <_strtod_l+0x7aa>
 80146e0:	4631      	mov	r1, r6
 80146e2:	464a      	mov	r2, r9
 80146e4:	4620      	mov	r0, r4
 80146e6:	f002 fda5 	bl	8017234 <__lshift>
 80146ea:	4606      	mov	r6, r0
 80146ec:	2800      	cmp	r0, #0
 80146ee:	f43f ae77 	beq.w	80143e0 <_strtod_l+0x498>
 80146f2:	9a07      	ldr	r2, [sp, #28]
 80146f4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80146f6:	4620      	mov	r0, r4
 80146f8:	f002 fe24 	bl	8017344 <__mdiff>
 80146fc:	4605      	mov	r5, r0
 80146fe:	2800      	cmp	r0, #0
 8014700:	f43f ae6e 	beq.w	80143e0 <_strtod_l+0x498>
 8014704:	68c3      	ldr	r3, [r0, #12]
 8014706:	930f      	str	r3, [sp, #60]	; 0x3c
 8014708:	2300      	movs	r3, #0
 801470a:	60c3      	str	r3, [r0, #12]
 801470c:	4631      	mov	r1, r6
 801470e:	f002 fdfd 	bl	801730c <__mcmp>
 8014712:	2800      	cmp	r0, #0
 8014714:	da65      	bge.n	80147e2 <_strtod_l+0x89a>
 8014716:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014718:	ea53 030a 	orrs.w	r3, r3, sl
 801471c:	f040 8087 	bne.w	801482e <_strtod_l+0x8e6>
 8014720:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014724:	2b00      	cmp	r3, #0
 8014726:	f040 8082 	bne.w	801482e <_strtod_l+0x8e6>
 801472a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801472e:	0d1b      	lsrs	r3, r3, #20
 8014730:	051b      	lsls	r3, r3, #20
 8014732:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014736:	d97a      	bls.n	801482e <_strtod_l+0x8e6>
 8014738:	696b      	ldr	r3, [r5, #20]
 801473a:	b913      	cbnz	r3, 8014742 <_strtod_l+0x7fa>
 801473c:	692b      	ldr	r3, [r5, #16]
 801473e:	2b01      	cmp	r3, #1
 8014740:	dd75      	ble.n	801482e <_strtod_l+0x8e6>
 8014742:	4629      	mov	r1, r5
 8014744:	2201      	movs	r2, #1
 8014746:	4620      	mov	r0, r4
 8014748:	f002 fd74 	bl	8017234 <__lshift>
 801474c:	4631      	mov	r1, r6
 801474e:	4605      	mov	r5, r0
 8014750:	f002 fddc 	bl	801730c <__mcmp>
 8014754:	2800      	cmp	r0, #0
 8014756:	dd6a      	ble.n	801482e <_strtod_l+0x8e6>
 8014758:	9904      	ldr	r1, [sp, #16]
 801475a:	4a55      	ldr	r2, [pc, #340]	; (80148b0 <_strtod_l+0x968>)
 801475c:	465b      	mov	r3, fp
 801475e:	2900      	cmp	r1, #0
 8014760:	f000 8085 	beq.w	801486e <_strtod_l+0x926>
 8014764:	ea02 010b 	and.w	r1, r2, fp
 8014768:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801476c:	dc7f      	bgt.n	801486e <_strtod_l+0x926>
 801476e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014772:	f77f aeaa 	ble.w	80144ca <_strtod_l+0x582>
 8014776:	4a4f      	ldr	r2, [pc, #316]	; (80148b4 <_strtod_l+0x96c>)
 8014778:	2300      	movs	r3, #0
 801477a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801477e:	4650      	mov	r0, sl
 8014780:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8014784:	4659      	mov	r1, fp
 8014786:	f7eb ff57 	bl	8000638 <__aeabi_dmul>
 801478a:	460b      	mov	r3, r1
 801478c:	4303      	orrs	r3, r0
 801478e:	bf08      	it	eq
 8014790:	2322      	moveq	r3, #34	; 0x22
 8014792:	4682      	mov	sl, r0
 8014794:	468b      	mov	fp, r1
 8014796:	bf08      	it	eq
 8014798:	6023      	streq	r3, [r4, #0]
 801479a:	e62b      	b.n	80143f4 <_strtod_l+0x4ac>
 801479c:	f04f 32ff 	mov.w	r2, #4294967295
 80147a0:	fa02 f303 	lsl.w	r3, r2, r3
 80147a4:	ea03 0a0a 	and.w	sl, r3, sl
 80147a8:	e6de      	b.n	8014568 <_strtod_l+0x620>
 80147aa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80147ae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80147b2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80147b6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80147ba:	fa01 f308 	lsl.w	r3, r1, r8
 80147be:	930c      	str	r3, [sp, #48]	; 0x30
 80147c0:	9111      	str	r1, [sp, #68]	; 0x44
 80147c2:	e741      	b.n	8014648 <_strtod_l+0x700>
 80147c4:	2300      	movs	r3, #0
 80147c6:	930c      	str	r3, [sp, #48]	; 0x30
 80147c8:	2301      	movs	r3, #1
 80147ca:	9311      	str	r3, [sp, #68]	; 0x44
 80147cc:	e73c      	b.n	8014648 <_strtod_l+0x700>
 80147ce:	991e      	ldr	r1, [sp, #120]	; 0x78
 80147d0:	4642      	mov	r2, r8
 80147d2:	4620      	mov	r0, r4
 80147d4:	f002 fd2e 	bl	8017234 <__lshift>
 80147d8:	901e      	str	r0, [sp, #120]	; 0x78
 80147da:	2800      	cmp	r0, #0
 80147dc:	f47f af66 	bne.w	80146ac <_strtod_l+0x764>
 80147e0:	e5fe      	b.n	80143e0 <_strtod_l+0x498>
 80147e2:	465f      	mov	r7, fp
 80147e4:	d16e      	bne.n	80148c4 <_strtod_l+0x97c>
 80147e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80147e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80147ec:	b342      	cbz	r2, 8014840 <_strtod_l+0x8f8>
 80147ee:	4a32      	ldr	r2, [pc, #200]	; (80148b8 <_strtod_l+0x970>)
 80147f0:	4293      	cmp	r3, r2
 80147f2:	d128      	bne.n	8014846 <_strtod_l+0x8fe>
 80147f4:	9b04      	ldr	r3, [sp, #16]
 80147f6:	4650      	mov	r0, sl
 80147f8:	b1eb      	cbz	r3, 8014836 <_strtod_l+0x8ee>
 80147fa:	4a2d      	ldr	r2, [pc, #180]	; (80148b0 <_strtod_l+0x968>)
 80147fc:	403a      	ands	r2, r7
 80147fe:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8014802:	f04f 31ff 	mov.w	r1, #4294967295
 8014806:	d819      	bhi.n	801483c <_strtod_l+0x8f4>
 8014808:	0d12      	lsrs	r2, r2, #20
 801480a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801480e:	fa01 f303 	lsl.w	r3, r1, r3
 8014812:	4298      	cmp	r0, r3
 8014814:	d117      	bne.n	8014846 <_strtod_l+0x8fe>
 8014816:	4b29      	ldr	r3, [pc, #164]	; (80148bc <_strtod_l+0x974>)
 8014818:	429f      	cmp	r7, r3
 801481a:	d102      	bne.n	8014822 <_strtod_l+0x8da>
 801481c:	3001      	adds	r0, #1
 801481e:	f43f addf 	beq.w	80143e0 <_strtod_l+0x498>
 8014822:	4b23      	ldr	r3, [pc, #140]	; (80148b0 <_strtod_l+0x968>)
 8014824:	403b      	ands	r3, r7
 8014826:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801482a:	f04f 0a00 	mov.w	sl, #0
 801482e:	9b04      	ldr	r3, [sp, #16]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d1a0      	bne.n	8014776 <_strtod_l+0x82e>
 8014834:	e5de      	b.n	80143f4 <_strtod_l+0x4ac>
 8014836:	f04f 33ff 	mov.w	r3, #4294967295
 801483a:	e7ea      	b.n	8014812 <_strtod_l+0x8ca>
 801483c:	460b      	mov	r3, r1
 801483e:	e7e8      	b.n	8014812 <_strtod_l+0x8ca>
 8014840:	ea53 030a 	orrs.w	r3, r3, sl
 8014844:	d088      	beq.n	8014758 <_strtod_l+0x810>
 8014846:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014848:	b1db      	cbz	r3, 8014882 <_strtod_l+0x93a>
 801484a:	423b      	tst	r3, r7
 801484c:	d0ef      	beq.n	801482e <_strtod_l+0x8e6>
 801484e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014850:	9a04      	ldr	r2, [sp, #16]
 8014852:	4650      	mov	r0, sl
 8014854:	4659      	mov	r1, fp
 8014856:	b1c3      	cbz	r3, 801488a <_strtod_l+0x942>
 8014858:	f7ff fb58 	bl	8013f0c <sulp>
 801485c:	4602      	mov	r2, r0
 801485e:	460b      	mov	r3, r1
 8014860:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014864:	f7eb fd32 	bl	80002cc <__adddf3>
 8014868:	4682      	mov	sl, r0
 801486a:	468b      	mov	fp, r1
 801486c:	e7df      	b.n	801482e <_strtod_l+0x8e6>
 801486e:	4013      	ands	r3, r2
 8014870:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014874:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014878:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801487c:	f04f 3aff 	mov.w	sl, #4294967295
 8014880:	e7d5      	b.n	801482e <_strtod_l+0x8e6>
 8014882:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014884:	ea13 0f0a 	tst.w	r3, sl
 8014888:	e7e0      	b.n	801484c <_strtod_l+0x904>
 801488a:	f7ff fb3f 	bl	8013f0c <sulp>
 801488e:	4602      	mov	r2, r0
 8014890:	460b      	mov	r3, r1
 8014892:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014896:	f7eb fd17 	bl	80002c8 <__aeabi_dsub>
 801489a:	2200      	movs	r2, #0
 801489c:	2300      	movs	r3, #0
 801489e:	4682      	mov	sl, r0
 80148a0:	468b      	mov	fp, r1
 80148a2:	f7ec f931 	bl	8000b08 <__aeabi_dcmpeq>
 80148a6:	2800      	cmp	r0, #0
 80148a8:	d0c1      	beq.n	801482e <_strtod_l+0x8e6>
 80148aa:	e60e      	b.n	80144ca <_strtod_l+0x582>
 80148ac:	fffffc02 	.word	0xfffffc02
 80148b0:	7ff00000 	.word	0x7ff00000
 80148b4:	39500000 	.word	0x39500000
 80148b8:	000fffff 	.word	0x000fffff
 80148bc:	7fefffff 	.word	0x7fefffff
 80148c0:	0801a6d0 	.word	0x0801a6d0
 80148c4:	4631      	mov	r1, r6
 80148c6:	4628      	mov	r0, r5
 80148c8:	f002 fe9c 	bl	8017604 <__ratio>
 80148cc:	ec59 8b10 	vmov	r8, r9, d0
 80148d0:	ee10 0a10 	vmov	r0, s0
 80148d4:	2200      	movs	r2, #0
 80148d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80148da:	4649      	mov	r1, r9
 80148dc:	f7ec f928 	bl	8000b30 <__aeabi_dcmple>
 80148e0:	2800      	cmp	r0, #0
 80148e2:	d07c      	beq.n	80149de <_strtod_l+0xa96>
 80148e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d04c      	beq.n	8014984 <_strtod_l+0xa3c>
 80148ea:	4b95      	ldr	r3, [pc, #596]	; (8014b40 <_strtod_l+0xbf8>)
 80148ec:	2200      	movs	r2, #0
 80148ee:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80148f2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8014b40 <_strtod_l+0xbf8>
 80148f6:	f04f 0800 	mov.w	r8, #0
 80148fa:	4b92      	ldr	r3, [pc, #584]	; (8014b44 <_strtod_l+0xbfc>)
 80148fc:	403b      	ands	r3, r7
 80148fe:	9311      	str	r3, [sp, #68]	; 0x44
 8014900:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014902:	4b91      	ldr	r3, [pc, #580]	; (8014b48 <_strtod_l+0xc00>)
 8014904:	429a      	cmp	r2, r3
 8014906:	f040 80b2 	bne.w	8014a6e <_strtod_l+0xb26>
 801490a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801490e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014912:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8014916:	ec4b ab10 	vmov	d0, sl, fp
 801491a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801491e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014922:	f002 fd97 	bl	8017454 <__ulp>
 8014926:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801492a:	ec53 2b10 	vmov	r2, r3, d0
 801492e:	f7eb fe83 	bl	8000638 <__aeabi_dmul>
 8014932:	4652      	mov	r2, sl
 8014934:	465b      	mov	r3, fp
 8014936:	f7eb fcc9 	bl	80002cc <__adddf3>
 801493a:	460b      	mov	r3, r1
 801493c:	4981      	ldr	r1, [pc, #516]	; (8014b44 <_strtod_l+0xbfc>)
 801493e:	4a83      	ldr	r2, [pc, #524]	; (8014b4c <_strtod_l+0xc04>)
 8014940:	4019      	ands	r1, r3
 8014942:	4291      	cmp	r1, r2
 8014944:	4682      	mov	sl, r0
 8014946:	d95e      	bls.n	8014a06 <_strtod_l+0xabe>
 8014948:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801494a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801494e:	4293      	cmp	r3, r2
 8014950:	d103      	bne.n	801495a <_strtod_l+0xa12>
 8014952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014954:	3301      	adds	r3, #1
 8014956:	f43f ad43 	beq.w	80143e0 <_strtod_l+0x498>
 801495a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8014b58 <_strtod_l+0xc10>
 801495e:	f04f 3aff 	mov.w	sl, #4294967295
 8014962:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014964:	4620      	mov	r0, r4
 8014966:	f002 fa49 	bl	8016dfc <_Bfree>
 801496a:	9907      	ldr	r1, [sp, #28]
 801496c:	4620      	mov	r0, r4
 801496e:	f002 fa45 	bl	8016dfc <_Bfree>
 8014972:	4631      	mov	r1, r6
 8014974:	4620      	mov	r0, r4
 8014976:	f002 fa41 	bl	8016dfc <_Bfree>
 801497a:	4629      	mov	r1, r5
 801497c:	4620      	mov	r0, r4
 801497e:	f002 fa3d 	bl	8016dfc <_Bfree>
 8014982:	e613      	b.n	80145ac <_strtod_l+0x664>
 8014984:	f1ba 0f00 	cmp.w	sl, #0
 8014988:	d11b      	bne.n	80149c2 <_strtod_l+0xa7a>
 801498a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801498e:	b9f3      	cbnz	r3, 80149ce <_strtod_l+0xa86>
 8014990:	4b6b      	ldr	r3, [pc, #428]	; (8014b40 <_strtod_l+0xbf8>)
 8014992:	2200      	movs	r2, #0
 8014994:	4640      	mov	r0, r8
 8014996:	4649      	mov	r1, r9
 8014998:	f7ec f8c0 	bl	8000b1c <__aeabi_dcmplt>
 801499c:	b9d0      	cbnz	r0, 80149d4 <_strtod_l+0xa8c>
 801499e:	4640      	mov	r0, r8
 80149a0:	4649      	mov	r1, r9
 80149a2:	4b6b      	ldr	r3, [pc, #428]	; (8014b50 <_strtod_l+0xc08>)
 80149a4:	2200      	movs	r2, #0
 80149a6:	f7eb fe47 	bl	8000638 <__aeabi_dmul>
 80149aa:	4680      	mov	r8, r0
 80149ac:	4689      	mov	r9, r1
 80149ae:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80149b2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80149b6:	931b      	str	r3, [sp, #108]	; 0x6c
 80149b8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80149bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80149c0:	e79b      	b.n	80148fa <_strtod_l+0x9b2>
 80149c2:	f1ba 0f01 	cmp.w	sl, #1
 80149c6:	d102      	bne.n	80149ce <_strtod_l+0xa86>
 80149c8:	2f00      	cmp	r7, #0
 80149ca:	f43f ad7e 	beq.w	80144ca <_strtod_l+0x582>
 80149ce:	4b61      	ldr	r3, [pc, #388]	; (8014b54 <_strtod_l+0xc0c>)
 80149d0:	2200      	movs	r2, #0
 80149d2:	e78c      	b.n	80148ee <_strtod_l+0x9a6>
 80149d4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8014b50 <_strtod_l+0xc08>
 80149d8:	f04f 0800 	mov.w	r8, #0
 80149dc:	e7e7      	b.n	80149ae <_strtod_l+0xa66>
 80149de:	4b5c      	ldr	r3, [pc, #368]	; (8014b50 <_strtod_l+0xc08>)
 80149e0:	4640      	mov	r0, r8
 80149e2:	4649      	mov	r1, r9
 80149e4:	2200      	movs	r2, #0
 80149e6:	f7eb fe27 	bl	8000638 <__aeabi_dmul>
 80149ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80149ec:	4680      	mov	r8, r0
 80149ee:	4689      	mov	r9, r1
 80149f0:	b933      	cbnz	r3, 8014a00 <_strtod_l+0xab8>
 80149f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80149f6:	9012      	str	r0, [sp, #72]	; 0x48
 80149f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80149fa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80149fe:	e7dd      	b.n	80149bc <_strtod_l+0xa74>
 8014a00:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8014a04:	e7f9      	b.n	80149fa <_strtod_l+0xab2>
 8014a06:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014a0a:	9b04      	ldr	r3, [sp, #16]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d1a8      	bne.n	8014962 <_strtod_l+0xa1a>
 8014a10:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014a14:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014a16:	0d1b      	lsrs	r3, r3, #20
 8014a18:	051b      	lsls	r3, r3, #20
 8014a1a:	429a      	cmp	r2, r3
 8014a1c:	d1a1      	bne.n	8014962 <_strtod_l+0xa1a>
 8014a1e:	4640      	mov	r0, r8
 8014a20:	4649      	mov	r1, r9
 8014a22:	f7ec f9b9 	bl	8000d98 <__aeabi_d2lz>
 8014a26:	f7eb fdd9 	bl	80005dc <__aeabi_l2d>
 8014a2a:	4602      	mov	r2, r0
 8014a2c:	460b      	mov	r3, r1
 8014a2e:	4640      	mov	r0, r8
 8014a30:	4649      	mov	r1, r9
 8014a32:	f7eb fc49 	bl	80002c8 <__aeabi_dsub>
 8014a36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014a38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014a3c:	ea43 030a 	orr.w	r3, r3, sl
 8014a40:	4313      	orrs	r3, r2
 8014a42:	4680      	mov	r8, r0
 8014a44:	4689      	mov	r9, r1
 8014a46:	d053      	beq.n	8014af0 <_strtod_l+0xba8>
 8014a48:	a335      	add	r3, pc, #212	; (adr r3, 8014b20 <_strtod_l+0xbd8>)
 8014a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a4e:	f7ec f865 	bl	8000b1c <__aeabi_dcmplt>
 8014a52:	2800      	cmp	r0, #0
 8014a54:	f47f acce 	bne.w	80143f4 <_strtod_l+0x4ac>
 8014a58:	a333      	add	r3, pc, #204	; (adr r3, 8014b28 <_strtod_l+0xbe0>)
 8014a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a5e:	4640      	mov	r0, r8
 8014a60:	4649      	mov	r1, r9
 8014a62:	f7ec f879 	bl	8000b58 <__aeabi_dcmpgt>
 8014a66:	2800      	cmp	r0, #0
 8014a68:	f43f af7b 	beq.w	8014962 <_strtod_l+0xa1a>
 8014a6c:	e4c2      	b.n	80143f4 <_strtod_l+0x4ac>
 8014a6e:	9b04      	ldr	r3, [sp, #16]
 8014a70:	b333      	cbz	r3, 8014ac0 <_strtod_l+0xb78>
 8014a72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014a74:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014a78:	d822      	bhi.n	8014ac0 <_strtod_l+0xb78>
 8014a7a:	a32d      	add	r3, pc, #180	; (adr r3, 8014b30 <_strtod_l+0xbe8>)
 8014a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a80:	4640      	mov	r0, r8
 8014a82:	4649      	mov	r1, r9
 8014a84:	f7ec f854 	bl	8000b30 <__aeabi_dcmple>
 8014a88:	b1a0      	cbz	r0, 8014ab4 <_strtod_l+0xb6c>
 8014a8a:	4649      	mov	r1, r9
 8014a8c:	4640      	mov	r0, r8
 8014a8e:	f7ec f8ab 	bl	8000be8 <__aeabi_d2uiz>
 8014a92:	2801      	cmp	r0, #1
 8014a94:	bf38      	it	cc
 8014a96:	2001      	movcc	r0, #1
 8014a98:	f7eb fd54 	bl	8000544 <__aeabi_ui2d>
 8014a9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a9e:	4680      	mov	r8, r0
 8014aa0:	4689      	mov	r9, r1
 8014aa2:	bb13      	cbnz	r3, 8014aea <_strtod_l+0xba2>
 8014aa4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014aa8:	9014      	str	r0, [sp, #80]	; 0x50
 8014aaa:	9315      	str	r3, [sp, #84]	; 0x54
 8014aac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014ab0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014ab4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ab6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014ab8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014abc:	1a9b      	subs	r3, r3, r2
 8014abe:	930d      	str	r3, [sp, #52]	; 0x34
 8014ac0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014ac4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8014ac8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014acc:	f002 fcc2 	bl	8017454 <__ulp>
 8014ad0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014ad4:	ec53 2b10 	vmov	r2, r3, d0
 8014ad8:	f7eb fdae 	bl	8000638 <__aeabi_dmul>
 8014adc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014ae0:	f7eb fbf4 	bl	80002cc <__adddf3>
 8014ae4:	4682      	mov	sl, r0
 8014ae6:	468b      	mov	fp, r1
 8014ae8:	e78f      	b.n	8014a0a <_strtod_l+0xac2>
 8014aea:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8014aee:	e7dd      	b.n	8014aac <_strtod_l+0xb64>
 8014af0:	a311      	add	r3, pc, #68	; (adr r3, 8014b38 <_strtod_l+0xbf0>)
 8014af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014af6:	f7ec f811 	bl	8000b1c <__aeabi_dcmplt>
 8014afa:	e7b4      	b.n	8014a66 <_strtod_l+0xb1e>
 8014afc:	2300      	movs	r3, #0
 8014afe:	930e      	str	r3, [sp, #56]	; 0x38
 8014b00:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014b02:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014b04:	6013      	str	r3, [r2, #0]
 8014b06:	f7ff ba65 	b.w	8013fd4 <_strtod_l+0x8c>
 8014b0a:	2b65      	cmp	r3, #101	; 0x65
 8014b0c:	f43f ab5d 	beq.w	80141ca <_strtod_l+0x282>
 8014b10:	2b45      	cmp	r3, #69	; 0x45
 8014b12:	f43f ab5a 	beq.w	80141ca <_strtod_l+0x282>
 8014b16:	2201      	movs	r2, #1
 8014b18:	f7ff bb92 	b.w	8014240 <_strtod_l+0x2f8>
 8014b1c:	f3af 8000 	nop.w
 8014b20:	94a03595 	.word	0x94a03595
 8014b24:	3fdfffff 	.word	0x3fdfffff
 8014b28:	35afe535 	.word	0x35afe535
 8014b2c:	3fe00000 	.word	0x3fe00000
 8014b30:	ffc00000 	.word	0xffc00000
 8014b34:	41dfffff 	.word	0x41dfffff
 8014b38:	94a03595 	.word	0x94a03595
 8014b3c:	3fcfffff 	.word	0x3fcfffff
 8014b40:	3ff00000 	.word	0x3ff00000
 8014b44:	7ff00000 	.word	0x7ff00000
 8014b48:	7fe00000 	.word	0x7fe00000
 8014b4c:	7c9fffff 	.word	0x7c9fffff
 8014b50:	3fe00000 	.word	0x3fe00000
 8014b54:	bff00000 	.word	0xbff00000
 8014b58:	7fefffff 	.word	0x7fefffff

08014b5c <_strtod_r>:
 8014b5c:	4b01      	ldr	r3, [pc, #4]	; (8014b64 <_strtod_r+0x8>)
 8014b5e:	f7ff b9f3 	b.w	8013f48 <_strtod_l>
 8014b62:	bf00      	nop
 8014b64:	20000174 	.word	0x20000174

08014b68 <strtok>:
 8014b68:	4b16      	ldr	r3, [pc, #88]	; (8014bc4 <strtok+0x5c>)
 8014b6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014b6c:	681e      	ldr	r6, [r3, #0]
 8014b6e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8014b70:	4605      	mov	r5, r0
 8014b72:	b9fc      	cbnz	r4, 8014bb4 <strtok+0x4c>
 8014b74:	2050      	movs	r0, #80	; 0x50
 8014b76:	9101      	str	r1, [sp, #4]
 8014b78:	f7fd fddc 	bl	8012734 <malloc>
 8014b7c:	9901      	ldr	r1, [sp, #4]
 8014b7e:	65b0      	str	r0, [r6, #88]	; 0x58
 8014b80:	4602      	mov	r2, r0
 8014b82:	b920      	cbnz	r0, 8014b8e <strtok+0x26>
 8014b84:	4b10      	ldr	r3, [pc, #64]	; (8014bc8 <strtok+0x60>)
 8014b86:	4811      	ldr	r0, [pc, #68]	; (8014bcc <strtok+0x64>)
 8014b88:	2157      	movs	r1, #87	; 0x57
 8014b8a:	f000 fc69 	bl	8015460 <__assert_func>
 8014b8e:	e9c0 4400 	strd	r4, r4, [r0]
 8014b92:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8014b96:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8014b9a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8014b9e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8014ba2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8014ba6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8014baa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8014bae:	6184      	str	r4, [r0, #24]
 8014bb0:	7704      	strb	r4, [r0, #28]
 8014bb2:	6244      	str	r4, [r0, #36]	; 0x24
 8014bb4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8014bb6:	2301      	movs	r3, #1
 8014bb8:	4628      	mov	r0, r5
 8014bba:	b002      	add	sp, #8
 8014bbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014bc0:	f000 b806 	b.w	8014bd0 <__strtok_r>
 8014bc4:	200000ac 	.word	0x200000ac
 8014bc8:	0801a538 	.word	0x0801a538
 8014bcc:	0801a6f8 	.word	0x0801a6f8

08014bd0 <__strtok_r>:
 8014bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014bd2:	b908      	cbnz	r0, 8014bd8 <__strtok_r+0x8>
 8014bd4:	6810      	ldr	r0, [r2, #0]
 8014bd6:	b188      	cbz	r0, 8014bfc <__strtok_r+0x2c>
 8014bd8:	4604      	mov	r4, r0
 8014bda:	4620      	mov	r0, r4
 8014bdc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8014be0:	460f      	mov	r7, r1
 8014be2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8014be6:	b91e      	cbnz	r6, 8014bf0 <__strtok_r+0x20>
 8014be8:	b965      	cbnz	r5, 8014c04 <__strtok_r+0x34>
 8014bea:	6015      	str	r5, [r2, #0]
 8014bec:	4628      	mov	r0, r5
 8014bee:	e005      	b.n	8014bfc <__strtok_r+0x2c>
 8014bf0:	42b5      	cmp	r5, r6
 8014bf2:	d1f6      	bne.n	8014be2 <__strtok_r+0x12>
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d1f0      	bne.n	8014bda <__strtok_r+0xa>
 8014bf8:	6014      	str	r4, [r2, #0]
 8014bfa:	7003      	strb	r3, [r0, #0]
 8014bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014bfe:	461c      	mov	r4, r3
 8014c00:	e00c      	b.n	8014c1c <__strtok_r+0x4c>
 8014c02:	b915      	cbnz	r5, 8014c0a <__strtok_r+0x3a>
 8014c04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014c08:	460e      	mov	r6, r1
 8014c0a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8014c0e:	42ab      	cmp	r3, r5
 8014c10:	d1f7      	bne.n	8014c02 <__strtok_r+0x32>
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d0f3      	beq.n	8014bfe <__strtok_r+0x2e>
 8014c16:	2300      	movs	r3, #0
 8014c18:	f804 3c01 	strb.w	r3, [r4, #-1]
 8014c1c:	6014      	str	r4, [r2, #0]
 8014c1e:	e7ed      	b.n	8014bfc <__strtok_r+0x2c>

08014c20 <_strtol_l.isra.0>:
 8014c20:	2b01      	cmp	r3, #1
 8014c22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c26:	d001      	beq.n	8014c2c <_strtol_l.isra.0+0xc>
 8014c28:	2b24      	cmp	r3, #36	; 0x24
 8014c2a:	d906      	bls.n	8014c3a <_strtol_l.isra.0+0x1a>
 8014c2c:	f7fd fb40 	bl	80122b0 <__errno>
 8014c30:	2316      	movs	r3, #22
 8014c32:	6003      	str	r3, [r0, #0]
 8014c34:	2000      	movs	r0, #0
 8014c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c3a:	4f3a      	ldr	r7, [pc, #232]	; (8014d24 <_strtol_l.isra.0+0x104>)
 8014c3c:	468e      	mov	lr, r1
 8014c3e:	4676      	mov	r6, lr
 8014c40:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8014c44:	5de5      	ldrb	r5, [r4, r7]
 8014c46:	f015 0508 	ands.w	r5, r5, #8
 8014c4a:	d1f8      	bne.n	8014c3e <_strtol_l.isra.0+0x1e>
 8014c4c:	2c2d      	cmp	r4, #45	; 0x2d
 8014c4e:	d134      	bne.n	8014cba <_strtol_l.isra.0+0x9a>
 8014c50:	f89e 4000 	ldrb.w	r4, [lr]
 8014c54:	f04f 0801 	mov.w	r8, #1
 8014c58:	f106 0e02 	add.w	lr, r6, #2
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d05c      	beq.n	8014d1a <_strtol_l.isra.0+0xfa>
 8014c60:	2b10      	cmp	r3, #16
 8014c62:	d10c      	bne.n	8014c7e <_strtol_l.isra.0+0x5e>
 8014c64:	2c30      	cmp	r4, #48	; 0x30
 8014c66:	d10a      	bne.n	8014c7e <_strtol_l.isra.0+0x5e>
 8014c68:	f89e 4000 	ldrb.w	r4, [lr]
 8014c6c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014c70:	2c58      	cmp	r4, #88	; 0x58
 8014c72:	d14d      	bne.n	8014d10 <_strtol_l.isra.0+0xf0>
 8014c74:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8014c78:	2310      	movs	r3, #16
 8014c7a:	f10e 0e02 	add.w	lr, lr, #2
 8014c7e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8014c82:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014c86:	2600      	movs	r6, #0
 8014c88:	fbbc f9f3 	udiv	r9, ip, r3
 8014c8c:	4635      	mov	r5, r6
 8014c8e:	fb03 ca19 	mls	sl, r3, r9, ip
 8014c92:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8014c96:	2f09      	cmp	r7, #9
 8014c98:	d818      	bhi.n	8014ccc <_strtol_l.isra.0+0xac>
 8014c9a:	463c      	mov	r4, r7
 8014c9c:	42a3      	cmp	r3, r4
 8014c9e:	dd24      	ble.n	8014cea <_strtol_l.isra.0+0xca>
 8014ca0:	2e00      	cmp	r6, #0
 8014ca2:	db1f      	blt.n	8014ce4 <_strtol_l.isra.0+0xc4>
 8014ca4:	45a9      	cmp	r9, r5
 8014ca6:	d31d      	bcc.n	8014ce4 <_strtol_l.isra.0+0xc4>
 8014ca8:	d101      	bne.n	8014cae <_strtol_l.isra.0+0x8e>
 8014caa:	45a2      	cmp	sl, r4
 8014cac:	db1a      	blt.n	8014ce4 <_strtol_l.isra.0+0xc4>
 8014cae:	fb05 4503 	mla	r5, r5, r3, r4
 8014cb2:	2601      	movs	r6, #1
 8014cb4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8014cb8:	e7eb      	b.n	8014c92 <_strtol_l.isra.0+0x72>
 8014cba:	2c2b      	cmp	r4, #43	; 0x2b
 8014cbc:	bf08      	it	eq
 8014cbe:	f89e 4000 	ldrbeq.w	r4, [lr]
 8014cc2:	46a8      	mov	r8, r5
 8014cc4:	bf08      	it	eq
 8014cc6:	f106 0e02 	addeq.w	lr, r6, #2
 8014cca:	e7c7      	b.n	8014c5c <_strtol_l.isra.0+0x3c>
 8014ccc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8014cd0:	2f19      	cmp	r7, #25
 8014cd2:	d801      	bhi.n	8014cd8 <_strtol_l.isra.0+0xb8>
 8014cd4:	3c37      	subs	r4, #55	; 0x37
 8014cd6:	e7e1      	b.n	8014c9c <_strtol_l.isra.0+0x7c>
 8014cd8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8014cdc:	2f19      	cmp	r7, #25
 8014cde:	d804      	bhi.n	8014cea <_strtol_l.isra.0+0xca>
 8014ce0:	3c57      	subs	r4, #87	; 0x57
 8014ce2:	e7db      	b.n	8014c9c <_strtol_l.isra.0+0x7c>
 8014ce4:	f04f 36ff 	mov.w	r6, #4294967295
 8014ce8:	e7e4      	b.n	8014cb4 <_strtol_l.isra.0+0x94>
 8014cea:	2e00      	cmp	r6, #0
 8014cec:	da05      	bge.n	8014cfa <_strtol_l.isra.0+0xda>
 8014cee:	2322      	movs	r3, #34	; 0x22
 8014cf0:	6003      	str	r3, [r0, #0]
 8014cf2:	4665      	mov	r5, ip
 8014cf4:	b942      	cbnz	r2, 8014d08 <_strtol_l.isra.0+0xe8>
 8014cf6:	4628      	mov	r0, r5
 8014cf8:	e79d      	b.n	8014c36 <_strtol_l.isra.0+0x16>
 8014cfa:	f1b8 0f00 	cmp.w	r8, #0
 8014cfe:	d000      	beq.n	8014d02 <_strtol_l.isra.0+0xe2>
 8014d00:	426d      	negs	r5, r5
 8014d02:	2a00      	cmp	r2, #0
 8014d04:	d0f7      	beq.n	8014cf6 <_strtol_l.isra.0+0xd6>
 8014d06:	b10e      	cbz	r6, 8014d0c <_strtol_l.isra.0+0xec>
 8014d08:	f10e 31ff 	add.w	r1, lr, #4294967295
 8014d0c:	6011      	str	r1, [r2, #0]
 8014d0e:	e7f2      	b.n	8014cf6 <_strtol_l.isra.0+0xd6>
 8014d10:	2430      	movs	r4, #48	; 0x30
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d1b3      	bne.n	8014c7e <_strtol_l.isra.0+0x5e>
 8014d16:	2308      	movs	r3, #8
 8014d18:	e7b1      	b.n	8014c7e <_strtol_l.isra.0+0x5e>
 8014d1a:	2c30      	cmp	r4, #48	; 0x30
 8014d1c:	d0a4      	beq.n	8014c68 <_strtol_l.isra.0+0x48>
 8014d1e:	230a      	movs	r3, #10
 8014d20:	e7ad      	b.n	8014c7e <_strtol_l.isra.0+0x5e>
 8014d22:	bf00      	nop
 8014d24:	0801a3d1 	.word	0x0801a3d1

08014d28 <_strtol_r>:
 8014d28:	f7ff bf7a 	b.w	8014c20 <_strtol_l.isra.0>

08014d2c <strtol>:
 8014d2c:	4613      	mov	r3, r2
 8014d2e:	460a      	mov	r2, r1
 8014d30:	4601      	mov	r1, r0
 8014d32:	4802      	ldr	r0, [pc, #8]	; (8014d3c <strtol+0x10>)
 8014d34:	6800      	ldr	r0, [r0, #0]
 8014d36:	f7ff bf73 	b.w	8014c20 <_strtol_l.isra.0>
 8014d3a:	bf00      	nop
 8014d3c:	200000ac 	.word	0x200000ac

08014d40 <_strtoul_l.isra.0>:
 8014d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014d44:	4e3b      	ldr	r6, [pc, #236]	; (8014e34 <_strtoul_l.isra.0+0xf4>)
 8014d46:	4686      	mov	lr, r0
 8014d48:	468c      	mov	ip, r1
 8014d4a:	4660      	mov	r0, ip
 8014d4c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8014d50:	5da5      	ldrb	r5, [r4, r6]
 8014d52:	f015 0508 	ands.w	r5, r5, #8
 8014d56:	d1f8      	bne.n	8014d4a <_strtoul_l.isra.0+0xa>
 8014d58:	2c2d      	cmp	r4, #45	; 0x2d
 8014d5a:	d134      	bne.n	8014dc6 <_strtoul_l.isra.0+0x86>
 8014d5c:	f89c 4000 	ldrb.w	r4, [ip]
 8014d60:	f04f 0801 	mov.w	r8, #1
 8014d64:	f100 0c02 	add.w	ip, r0, #2
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d05e      	beq.n	8014e2a <_strtoul_l.isra.0+0xea>
 8014d6c:	2b10      	cmp	r3, #16
 8014d6e:	d10c      	bne.n	8014d8a <_strtoul_l.isra.0+0x4a>
 8014d70:	2c30      	cmp	r4, #48	; 0x30
 8014d72:	d10a      	bne.n	8014d8a <_strtoul_l.isra.0+0x4a>
 8014d74:	f89c 0000 	ldrb.w	r0, [ip]
 8014d78:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8014d7c:	2858      	cmp	r0, #88	; 0x58
 8014d7e:	d14f      	bne.n	8014e20 <_strtoul_l.isra.0+0xe0>
 8014d80:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8014d84:	2310      	movs	r3, #16
 8014d86:	f10c 0c02 	add.w	ip, ip, #2
 8014d8a:	f04f 37ff 	mov.w	r7, #4294967295
 8014d8e:	2500      	movs	r5, #0
 8014d90:	fbb7 f7f3 	udiv	r7, r7, r3
 8014d94:	fb03 f907 	mul.w	r9, r3, r7
 8014d98:	ea6f 0909 	mvn.w	r9, r9
 8014d9c:	4628      	mov	r0, r5
 8014d9e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8014da2:	2e09      	cmp	r6, #9
 8014da4:	d818      	bhi.n	8014dd8 <_strtoul_l.isra.0+0x98>
 8014da6:	4634      	mov	r4, r6
 8014da8:	42a3      	cmp	r3, r4
 8014daa:	dd24      	ble.n	8014df6 <_strtoul_l.isra.0+0xb6>
 8014dac:	2d00      	cmp	r5, #0
 8014dae:	db1f      	blt.n	8014df0 <_strtoul_l.isra.0+0xb0>
 8014db0:	4287      	cmp	r7, r0
 8014db2:	d31d      	bcc.n	8014df0 <_strtoul_l.isra.0+0xb0>
 8014db4:	d101      	bne.n	8014dba <_strtoul_l.isra.0+0x7a>
 8014db6:	45a1      	cmp	r9, r4
 8014db8:	db1a      	blt.n	8014df0 <_strtoul_l.isra.0+0xb0>
 8014dba:	fb00 4003 	mla	r0, r0, r3, r4
 8014dbe:	2501      	movs	r5, #1
 8014dc0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8014dc4:	e7eb      	b.n	8014d9e <_strtoul_l.isra.0+0x5e>
 8014dc6:	2c2b      	cmp	r4, #43	; 0x2b
 8014dc8:	bf08      	it	eq
 8014dca:	f89c 4000 	ldrbeq.w	r4, [ip]
 8014dce:	46a8      	mov	r8, r5
 8014dd0:	bf08      	it	eq
 8014dd2:	f100 0c02 	addeq.w	ip, r0, #2
 8014dd6:	e7c7      	b.n	8014d68 <_strtoul_l.isra.0+0x28>
 8014dd8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8014ddc:	2e19      	cmp	r6, #25
 8014dde:	d801      	bhi.n	8014de4 <_strtoul_l.isra.0+0xa4>
 8014de0:	3c37      	subs	r4, #55	; 0x37
 8014de2:	e7e1      	b.n	8014da8 <_strtoul_l.isra.0+0x68>
 8014de4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8014de8:	2e19      	cmp	r6, #25
 8014dea:	d804      	bhi.n	8014df6 <_strtoul_l.isra.0+0xb6>
 8014dec:	3c57      	subs	r4, #87	; 0x57
 8014dee:	e7db      	b.n	8014da8 <_strtoul_l.isra.0+0x68>
 8014df0:	f04f 35ff 	mov.w	r5, #4294967295
 8014df4:	e7e4      	b.n	8014dc0 <_strtoul_l.isra.0+0x80>
 8014df6:	2d00      	cmp	r5, #0
 8014df8:	da07      	bge.n	8014e0a <_strtoul_l.isra.0+0xca>
 8014dfa:	2322      	movs	r3, #34	; 0x22
 8014dfc:	f8ce 3000 	str.w	r3, [lr]
 8014e00:	f04f 30ff 	mov.w	r0, #4294967295
 8014e04:	b942      	cbnz	r2, 8014e18 <_strtoul_l.isra.0+0xd8>
 8014e06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e0a:	f1b8 0f00 	cmp.w	r8, #0
 8014e0e:	d000      	beq.n	8014e12 <_strtoul_l.isra.0+0xd2>
 8014e10:	4240      	negs	r0, r0
 8014e12:	2a00      	cmp	r2, #0
 8014e14:	d0f7      	beq.n	8014e06 <_strtoul_l.isra.0+0xc6>
 8014e16:	b10d      	cbz	r5, 8014e1c <_strtoul_l.isra.0+0xdc>
 8014e18:	f10c 31ff 	add.w	r1, ip, #4294967295
 8014e1c:	6011      	str	r1, [r2, #0]
 8014e1e:	e7f2      	b.n	8014e06 <_strtoul_l.isra.0+0xc6>
 8014e20:	2430      	movs	r4, #48	; 0x30
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d1b1      	bne.n	8014d8a <_strtoul_l.isra.0+0x4a>
 8014e26:	2308      	movs	r3, #8
 8014e28:	e7af      	b.n	8014d8a <_strtoul_l.isra.0+0x4a>
 8014e2a:	2c30      	cmp	r4, #48	; 0x30
 8014e2c:	d0a2      	beq.n	8014d74 <_strtoul_l.isra.0+0x34>
 8014e2e:	230a      	movs	r3, #10
 8014e30:	e7ab      	b.n	8014d8a <_strtoul_l.isra.0+0x4a>
 8014e32:	bf00      	nop
 8014e34:	0801a3d1 	.word	0x0801a3d1

08014e38 <_strtoul_r>:
 8014e38:	f7ff bf82 	b.w	8014d40 <_strtoul_l.isra.0>

08014e3c <strtoul>:
 8014e3c:	4613      	mov	r3, r2
 8014e3e:	460a      	mov	r2, r1
 8014e40:	4601      	mov	r1, r0
 8014e42:	4802      	ldr	r0, [pc, #8]	; (8014e4c <strtoul+0x10>)
 8014e44:	6800      	ldr	r0, [r0, #0]
 8014e46:	f7ff bf7b 	b.w	8014d40 <_strtoul_l.isra.0>
 8014e4a:	bf00      	nop
 8014e4c:	200000ac 	.word	0x200000ac

08014e50 <__tzcalc_limits>:
 8014e50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e54:	4680      	mov	r8, r0
 8014e56:	f001 fe45 	bl	8016ae4 <__gettzinfo>
 8014e5a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8014e5e:	4598      	cmp	r8, r3
 8014e60:	f340 8098 	ble.w	8014f94 <__tzcalc_limits+0x144>
 8014e64:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8014e68:	4443      	add	r3, r8
 8014e6a:	109b      	asrs	r3, r3, #2
 8014e6c:	f240 126d 	movw	r2, #365	; 0x16d
 8014e70:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8014e74:	fb02 3505 	mla	r5, r2, r5, r3
 8014e78:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8014e7c:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8014e80:	fb93 f3f2 	sdiv	r3, r3, r2
 8014e84:	441d      	add	r5, r3
 8014e86:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8014e8a:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8014e8e:	fb98 f7f3 	sdiv	r7, r8, r3
 8014e92:	fb03 8717 	mls	r7, r3, r7, r8
 8014e96:	4442      	add	r2, r8
 8014e98:	fab7 fc87 	clz	ip, r7
 8014e9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8014ea0:	f008 0303 	and.w	r3, r8, #3
 8014ea4:	4415      	add	r5, r2
 8014ea6:	2264      	movs	r2, #100	; 0x64
 8014ea8:	f8c0 8004 	str.w	r8, [r0, #4]
 8014eac:	fb98 f6f2 	sdiv	r6, r8, r2
 8014eb0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8014eb4:	fb02 8616 	mls	r6, r2, r6, r8
 8014eb8:	4604      	mov	r4, r0
 8014eba:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8014ebe:	9300      	str	r3, [sp, #0]
 8014ec0:	f04f 0e07 	mov.w	lr, #7
 8014ec4:	7a22      	ldrb	r2, [r4, #8]
 8014ec6:	6963      	ldr	r3, [r4, #20]
 8014ec8:	2a4a      	cmp	r2, #74	; 0x4a
 8014eca:	d128      	bne.n	8014f1e <__tzcalc_limits+0xce>
 8014ecc:	9900      	ldr	r1, [sp, #0]
 8014ece:	18ea      	adds	r2, r5, r3
 8014ed0:	b901      	cbnz	r1, 8014ed4 <__tzcalc_limits+0x84>
 8014ed2:	b906      	cbnz	r6, 8014ed6 <__tzcalc_limits+0x86>
 8014ed4:	bb0f      	cbnz	r7, 8014f1a <__tzcalc_limits+0xca>
 8014ed6:	2b3b      	cmp	r3, #59	; 0x3b
 8014ed8:	bfd4      	ite	le
 8014eda:	2300      	movle	r3, #0
 8014edc:	2301      	movgt	r3, #1
 8014ede:	4413      	add	r3, r2
 8014ee0:	1e5a      	subs	r2, r3, #1
 8014ee2:	69a3      	ldr	r3, [r4, #24]
 8014ee4:	492c      	ldr	r1, [pc, #176]	; (8014f98 <__tzcalc_limits+0x148>)
 8014ee6:	fb01 3202 	mla	r2, r1, r2, r3
 8014eea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014eec:	4413      	add	r3, r2
 8014eee:	461a      	mov	r2, r3
 8014ef0:	17db      	asrs	r3, r3, #31
 8014ef2:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8014ef6:	3428      	adds	r4, #40	; 0x28
 8014ef8:	45a3      	cmp	fp, r4
 8014efa:	d1e3      	bne.n	8014ec4 <__tzcalc_limits+0x74>
 8014efc:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8014f00:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8014f04:	4294      	cmp	r4, r2
 8014f06:	eb75 0303 	sbcs.w	r3, r5, r3
 8014f0a:	bfb4      	ite	lt
 8014f0c:	2301      	movlt	r3, #1
 8014f0e:	2300      	movge	r3, #0
 8014f10:	6003      	str	r3, [r0, #0]
 8014f12:	2001      	movs	r0, #1
 8014f14:	b003      	add	sp, #12
 8014f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f1a:	2300      	movs	r3, #0
 8014f1c:	e7df      	b.n	8014ede <__tzcalc_limits+0x8e>
 8014f1e:	2a44      	cmp	r2, #68	; 0x44
 8014f20:	d101      	bne.n	8014f26 <__tzcalc_limits+0xd6>
 8014f22:	18ea      	adds	r2, r5, r3
 8014f24:	e7dd      	b.n	8014ee2 <__tzcalc_limits+0x92>
 8014f26:	9a00      	ldr	r2, [sp, #0]
 8014f28:	bb72      	cbnz	r2, 8014f88 <__tzcalc_limits+0x138>
 8014f2a:	2e00      	cmp	r6, #0
 8014f2c:	bf0c      	ite	eq
 8014f2e:	46e0      	moveq	r8, ip
 8014f30:	f04f 0801 	movne.w	r8, #1
 8014f34:	4919      	ldr	r1, [pc, #100]	; (8014f9c <__tzcalc_limits+0x14c>)
 8014f36:	68e2      	ldr	r2, [r4, #12]
 8014f38:	9201      	str	r2, [sp, #4]
 8014f3a:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8014f3e:	fb0a 1808 	mla	r8, sl, r8, r1
 8014f42:	462a      	mov	r2, r5
 8014f44:	f04f 0900 	mov.w	r9, #0
 8014f48:	f1a8 0804 	sub.w	r8, r8, #4
 8014f4c:	9901      	ldr	r1, [sp, #4]
 8014f4e:	f109 0901 	add.w	r9, r9, #1
 8014f52:	4549      	cmp	r1, r9
 8014f54:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8014f58:	dc18      	bgt.n	8014f8c <__tzcalc_limits+0x13c>
 8014f5a:	f102 0804 	add.w	r8, r2, #4
 8014f5e:	fb98 f9fe 	sdiv	r9, r8, lr
 8014f62:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8014f66:	eba8 0909 	sub.w	r9, r8, r9
 8014f6a:	ebb3 0909 	subs.w	r9, r3, r9
 8014f6e:	6923      	ldr	r3, [r4, #16]
 8014f70:	f103 33ff 	add.w	r3, r3, #4294967295
 8014f74:	bf48      	it	mi
 8014f76:	f109 0907 	addmi.w	r9, r9, #7
 8014f7a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8014f7e:	444b      	add	r3, r9
 8014f80:	4553      	cmp	r3, sl
 8014f82:	da05      	bge.n	8014f90 <__tzcalc_limits+0x140>
 8014f84:	441a      	add	r2, r3
 8014f86:	e7ac      	b.n	8014ee2 <__tzcalc_limits+0x92>
 8014f88:	46e0      	mov	r8, ip
 8014f8a:	e7d3      	b.n	8014f34 <__tzcalc_limits+0xe4>
 8014f8c:	4452      	add	r2, sl
 8014f8e:	e7dd      	b.n	8014f4c <__tzcalc_limits+0xfc>
 8014f90:	3b07      	subs	r3, #7
 8014f92:	e7f5      	b.n	8014f80 <__tzcalc_limits+0x130>
 8014f94:	2000      	movs	r0, #0
 8014f96:	e7bd      	b.n	8014f14 <__tzcalc_limits+0xc4>
 8014f98:	00015180 	.word	0x00015180
 8014f9c:	0801a610 	.word	0x0801a610

08014fa0 <__tz_lock>:
 8014fa0:	4801      	ldr	r0, [pc, #4]	; (8014fa8 <__tz_lock+0x8>)
 8014fa2:	f7fd bbc2 	b.w	801272a <__retarget_lock_acquire>
 8014fa6:	bf00      	nop
 8014fa8:	200064eb 	.word	0x200064eb

08014fac <__tz_unlock>:
 8014fac:	4801      	ldr	r0, [pc, #4]	; (8014fb4 <__tz_unlock+0x8>)
 8014fae:	f7fd bbbe 	b.w	801272e <__retarget_lock_release>
 8014fb2:	bf00      	nop
 8014fb4:	200064eb 	.word	0x200064eb

08014fb8 <_tzset_unlocked>:
 8014fb8:	4b01      	ldr	r3, [pc, #4]	; (8014fc0 <_tzset_unlocked+0x8>)
 8014fba:	6818      	ldr	r0, [r3, #0]
 8014fbc:	f000 b802 	b.w	8014fc4 <_tzset_unlocked_r>
 8014fc0:	200000ac 	.word	0x200000ac

08014fc4 <_tzset_unlocked_r>:
 8014fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fc8:	b08d      	sub	sp, #52	; 0x34
 8014fca:	4607      	mov	r7, r0
 8014fcc:	f001 fd8a 	bl	8016ae4 <__gettzinfo>
 8014fd0:	49ae      	ldr	r1, [pc, #696]	; (801528c <_tzset_unlocked_r+0x2c8>)
 8014fd2:	4eaf      	ldr	r6, [pc, #700]	; (8015290 <_tzset_unlocked_r+0x2cc>)
 8014fd4:	4605      	mov	r5, r0
 8014fd6:	4638      	mov	r0, r7
 8014fd8:	f001 fd7c 	bl	8016ad4 <_getenv_r>
 8014fdc:	4604      	mov	r4, r0
 8014fde:	b970      	cbnz	r0, 8014ffe <_tzset_unlocked_r+0x3a>
 8014fe0:	4bac      	ldr	r3, [pc, #688]	; (8015294 <_tzset_unlocked_r+0x2d0>)
 8014fe2:	4aad      	ldr	r2, [pc, #692]	; (8015298 <_tzset_unlocked_r+0x2d4>)
 8014fe4:	6018      	str	r0, [r3, #0]
 8014fe6:	4bad      	ldr	r3, [pc, #692]	; (801529c <_tzset_unlocked_r+0x2d8>)
 8014fe8:	6018      	str	r0, [r3, #0]
 8014fea:	4bad      	ldr	r3, [pc, #692]	; (80152a0 <_tzset_unlocked_r+0x2dc>)
 8014fec:	6830      	ldr	r0, [r6, #0]
 8014fee:	e9c3 2200 	strd	r2, r2, [r3]
 8014ff2:	f7fd fba7 	bl	8012744 <free>
 8014ff6:	6034      	str	r4, [r6, #0]
 8014ff8:	b00d      	add	sp, #52	; 0x34
 8014ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ffe:	6831      	ldr	r1, [r6, #0]
 8015000:	2900      	cmp	r1, #0
 8015002:	d15f      	bne.n	80150c4 <_tzset_unlocked_r+0x100>
 8015004:	6830      	ldr	r0, [r6, #0]
 8015006:	f7fd fb9d 	bl	8012744 <free>
 801500a:	4620      	mov	r0, r4
 801500c:	f7eb f8fa 	bl	8000204 <strlen>
 8015010:	1c41      	adds	r1, r0, #1
 8015012:	4638      	mov	r0, r7
 8015014:	f7fd fe9c 	bl	8012d50 <_malloc_r>
 8015018:	6030      	str	r0, [r6, #0]
 801501a:	2800      	cmp	r0, #0
 801501c:	d157      	bne.n	80150ce <_tzset_unlocked_r+0x10a>
 801501e:	7823      	ldrb	r3, [r4, #0]
 8015020:	4aa0      	ldr	r2, [pc, #640]	; (80152a4 <_tzset_unlocked_r+0x2e0>)
 8015022:	49a1      	ldr	r1, [pc, #644]	; (80152a8 <_tzset_unlocked_r+0x2e4>)
 8015024:	2b3a      	cmp	r3, #58	; 0x3a
 8015026:	bf08      	it	eq
 8015028:	3401      	addeq	r4, #1
 801502a:	ae0a      	add	r6, sp, #40	; 0x28
 801502c:	4633      	mov	r3, r6
 801502e:	4620      	mov	r0, r4
 8015030:	f7fe fed4 	bl	8013ddc <siscanf>
 8015034:	2800      	cmp	r0, #0
 8015036:	dddf      	ble.n	8014ff8 <_tzset_unlocked_r+0x34>
 8015038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801503a:	18e7      	adds	r7, r4, r3
 801503c:	5ce3      	ldrb	r3, [r4, r3]
 801503e:	2b2d      	cmp	r3, #45	; 0x2d
 8015040:	d149      	bne.n	80150d6 <_tzset_unlocked_r+0x112>
 8015042:	3701      	adds	r7, #1
 8015044:	f04f 34ff 	mov.w	r4, #4294967295
 8015048:	f10d 0a20 	add.w	sl, sp, #32
 801504c:	f10d 0b1e 	add.w	fp, sp, #30
 8015050:	f04f 0800 	mov.w	r8, #0
 8015054:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8015058:	4994      	ldr	r1, [pc, #592]	; (80152ac <_tzset_unlocked_r+0x2e8>)
 801505a:	9603      	str	r6, [sp, #12]
 801505c:	f8cd b000 	str.w	fp, [sp]
 8015060:	4633      	mov	r3, r6
 8015062:	aa07      	add	r2, sp, #28
 8015064:	4638      	mov	r0, r7
 8015066:	f8ad 801e 	strh.w	r8, [sp, #30]
 801506a:	f8ad 8020 	strh.w	r8, [sp, #32]
 801506e:	f7fe feb5 	bl	8013ddc <siscanf>
 8015072:	4540      	cmp	r0, r8
 8015074:	ddc0      	ble.n	8014ff8 <_tzset_unlocked_r+0x34>
 8015076:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801507a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801507e:	f8df 9238 	ldr.w	r9, [pc, #568]	; 80152b8 <_tzset_unlocked_r+0x2f4>
 8015082:	213c      	movs	r1, #60	; 0x3c
 8015084:	fb01 2203 	mla	r2, r1, r3, r2
 8015088:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801508c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8015090:	fb01 2303 	mla	r3, r1, r3, r2
 8015094:	435c      	muls	r4, r3
 8015096:	62ac      	str	r4, [r5, #40]	; 0x28
 8015098:	4c81      	ldr	r4, [pc, #516]	; (80152a0 <_tzset_unlocked_r+0x2dc>)
 801509a:	4b82      	ldr	r3, [pc, #520]	; (80152a4 <_tzset_unlocked_r+0x2e0>)
 801509c:	6023      	str	r3, [r4, #0]
 801509e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150a0:	4981      	ldr	r1, [pc, #516]	; (80152a8 <_tzset_unlocked_r+0x2e4>)
 80150a2:	441f      	add	r7, r3
 80150a4:	464a      	mov	r2, r9
 80150a6:	4633      	mov	r3, r6
 80150a8:	4638      	mov	r0, r7
 80150aa:	f7fe fe97 	bl	8013ddc <siscanf>
 80150ae:	4540      	cmp	r0, r8
 80150b0:	dc16      	bgt.n	80150e0 <_tzset_unlocked_r+0x11c>
 80150b2:	6823      	ldr	r3, [r4, #0]
 80150b4:	6063      	str	r3, [r4, #4]
 80150b6:	4b77      	ldr	r3, [pc, #476]	; (8015294 <_tzset_unlocked_r+0x2d0>)
 80150b8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80150ba:	601a      	str	r2, [r3, #0]
 80150bc:	4b77      	ldr	r3, [pc, #476]	; (801529c <_tzset_unlocked_r+0x2d8>)
 80150be:	f8c3 8000 	str.w	r8, [r3]
 80150c2:	e799      	b.n	8014ff8 <_tzset_unlocked_r+0x34>
 80150c4:	f7eb f894 	bl	80001f0 <strcmp>
 80150c8:	2800      	cmp	r0, #0
 80150ca:	d19b      	bne.n	8015004 <_tzset_unlocked_r+0x40>
 80150cc:	e794      	b.n	8014ff8 <_tzset_unlocked_r+0x34>
 80150ce:	4621      	mov	r1, r4
 80150d0:	f7fe ff02 	bl	8013ed8 <strcpy>
 80150d4:	e7a3      	b.n	801501e <_tzset_unlocked_r+0x5a>
 80150d6:	2b2b      	cmp	r3, #43	; 0x2b
 80150d8:	bf08      	it	eq
 80150da:	3701      	addeq	r7, #1
 80150dc:	2401      	movs	r4, #1
 80150de:	e7b3      	b.n	8015048 <_tzset_unlocked_r+0x84>
 80150e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150e2:	f8c4 9004 	str.w	r9, [r4, #4]
 80150e6:	18fc      	adds	r4, r7, r3
 80150e8:	5cfb      	ldrb	r3, [r7, r3]
 80150ea:	2b2d      	cmp	r3, #45	; 0x2d
 80150ec:	f040 808b 	bne.w	8015206 <_tzset_unlocked_r+0x242>
 80150f0:	3401      	adds	r4, #1
 80150f2:	f04f 37ff 	mov.w	r7, #4294967295
 80150f6:	2300      	movs	r3, #0
 80150f8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80150fc:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015100:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015104:	930a      	str	r3, [sp, #40]	; 0x28
 8015106:	e9cd a602 	strd	sl, r6, [sp, #8]
 801510a:	e9cd b600 	strd	fp, r6, [sp]
 801510e:	4967      	ldr	r1, [pc, #412]	; (80152ac <_tzset_unlocked_r+0x2e8>)
 8015110:	4633      	mov	r3, r6
 8015112:	aa07      	add	r2, sp, #28
 8015114:	4620      	mov	r0, r4
 8015116:	f7fe fe61 	bl	8013ddc <siscanf>
 801511a:	2800      	cmp	r0, #0
 801511c:	dc78      	bgt.n	8015210 <_tzset_unlocked_r+0x24c>
 801511e:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8015120:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8015124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015126:	652f      	str	r7, [r5, #80]	; 0x50
 8015128:	441c      	add	r4, r3
 801512a:	462f      	mov	r7, r5
 801512c:	f04f 0900 	mov.w	r9, #0
 8015130:	7823      	ldrb	r3, [r4, #0]
 8015132:	2b2c      	cmp	r3, #44	; 0x2c
 8015134:	bf08      	it	eq
 8015136:	3401      	addeq	r4, #1
 8015138:	f894 8000 	ldrb.w	r8, [r4]
 801513c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8015140:	d178      	bne.n	8015234 <_tzset_unlocked_r+0x270>
 8015142:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8015146:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801514a:	ab09      	add	r3, sp, #36	; 0x24
 801514c:	9300      	str	r3, [sp, #0]
 801514e:	4958      	ldr	r1, [pc, #352]	; (80152b0 <_tzset_unlocked_r+0x2ec>)
 8015150:	9603      	str	r6, [sp, #12]
 8015152:	4633      	mov	r3, r6
 8015154:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8015158:	4620      	mov	r0, r4
 801515a:	f7fe fe3f 	bl	8013ddc <siscanf>
 801515e:	2803      	cmp	r0, #3
 8015160:	f47f af4a 	bne.w	8014ff8 <_tzset_unlocked_r+0x34>
 8015164:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8015168:	1e4b      	subs	r3, r1, #1
 801516a:	2b0b      	cmp	r3, #11
 801516c:	f63f af44 	bhi.w	8014ff8 <_tzset_unlocked_r+0x34>
 8015170:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8015174:	1e53      	subs	r3, r2, #1
 8015176:	2b04      	cmp	r3, #4
 8015178:	f63f af3e 	bhi.w	8014ff8 <_tzset_unlocked_r+0x34>
 801517c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8015180:	2b06      	cmp	r3, #6
 8015182:	f63f af39 	bhi.w	8014ff8 <_tzset_unlocked_r+0x34>
 8015186:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801518a:	f887 8008 	strb.w	r8, [r7, #8]
 801518e:	617b      	str	r3, [r7, #20]
 8015190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015192:	eb04 0803 	add.w	r8, r4, r3
 8015196:	2302      	movs	r3, #2
 8015198:	f8ad 301c 	strh.w	r3, [sp, #28]
 801519c:	2300      	movs	r3, #0
 801519e:	f8ad 301e 	strh.w	r3, [sp, #30]
 80151a2:	f8ad 3020 	strh.w	r3, [sp, #32]
 80151a6:	930a      	str	r3, [sp, #40]	; 0x28
 80151a8:	f898 3000 	ldrb.w	r3, [r8]
 80151ac:	2b2f      	cmp	r3, #47	; 0x2f
 80151ae:	d109      	bne.n	80151c4 <_tzset_unlocked_r+0x200>
 80151b0:	e9cd a602 	strd	sl, r6, [sp, #8]
 80151b4:	e9cd b600 	strd	fp, r6, [sp]
 80151b8:	493e      	ldr	r1, [pc, #248]	; (80152b4 <_tzset_unlocked_r+0x2f0>)
 80151ba:	4633      	mov	r3, r6
 80151bc:	aa07      	add	r2, sp, #28
 80151be:	4640      	mov	r0, r8
 80151c0:	f7fe fe0c 	bl	8013ddc <siscanf>
 80151c4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80151c8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80151cc:	213c      	movs	r1, #60	; 0x3c
 80151ce:	fb01 2203 	mla	r2, r1, r3, r2
 80151d2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80151d6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80151da:	fb01 2303 	mla	r3, r1, r3, r2
 80151de:	61bb      	str	r3, [r7, #24]
 80151e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80151e2:	3728      	adds	r7, #40	; 0x28
 80151e4:	4444      	add	r4, r8
 80151e6:	f1b9 0f00 	cmp.w	r9, #0
 80151ea:	d020      	beq.n	801522e <_tzset_unlocked_r+0x26a>
 80151ec:	6868      	ldr	r0, [r5, #4]
 80151ee:	f7ff fe2f 	bl	8014e50 <__tzcalc_limits>
 80151f2:	4b28      	ldr	r3, [pc, #160]	; (8015294 <_tzset_unlocked_r+0x2d0>)
 80151f4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80151f6:	601a      	str	r2, [r3, #0]
 80151f8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80151fa:	1a9b      	subs	r3, r3, r2
 80151fc:	4a27      	ldr	r2, [pc, #156]	; (801529c <_tzset_unlocked_r+0x2d8>)
 80151fe:	bf18      	it	ne
 8015200:	2301      	movne	r3, #1
 8015202:	6013      	str	r3, [r2, #0]
 8015204:	e6f8      	b.n	8014ff8 <_tzset_unlocked_r+0x34>
 8015206:	2b2b      	cmp	r3, #43	; 0x2b
 8015208:	bf08      	it	eq
 801520a:	3401      	addeq	r4, #1
 801520c:	2701      	movs	r7, #1
 801520e:	e772      	b.n	80150f6 <_tzset_unlocked_r+0x132>
 8015210:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8015214:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8015218:	213c      	movs	r1, #60	; 0x3c
 801521a:	fb01 2203 	mla	r2, r1, r3, r2
 801521e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8015222:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8015226:	fb01 2303 	mla	r3, r1, r3, r2
 801522a:	435f      	muls	r7, r3
 801522c:	e77a      	b.n	8015124 <_tzset_unlocked_r+0x160>
 801522e:	f04f 0901 	mov.w	r9, #1
 8015232:	e77d      	b.n	8015130 <_tzset_unlocked_r+0x16c>
 8015234:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8015238:	bf06      	itte	eq
 801523a:	3401      	addeq	r4, #1
 801523c:	4643      	moveq	r3, r8
 801523e:	2344      	movne	r3, #68	; 0x44
 8015240:	220a      	movs	r2, #10
 8015242:	a90b      	add	r1, sp, #44	; 0x2c
 8015244:	4620      	mov	r0, r4
 8015246:	9305      	str	r3, [sp, #20]
 8015248:	f7ff fdf8 	bl	8014e3c <strtoul>
 801524c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8015250:	9b05      	ldr	r3, [sp, #20]
 8015252:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8015256:	45a0      	cmp	r8, r4
 8015258:	d114      	bne.n	8015284 <_tzset_unlocked_r+0x2c0>
 801525a:	234d      	movs	r3, #77	; 0x4d
 801525c:	f1b9 0f00 	cmp.w	r9, #0
 8015260:	d107      	bne.n	8015272 <_tzset_unlocked_r+0x2ae>
 8015262:	722b      	strb	r3, [r5, #8]
 8015264:	2103      	movs	r1, #3
 8015266:	2302      	movs	r3, #2
 8015268:	e9c5 1303 	strd	r1, r3, [r5, #12]
 801526c:	f8c5 9014 	str.w	r9, [r5, #20]
 8015270:	e791      	b.n	8015196 <_tzset_unlocked_r+0x1d2>
 8015272:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8015276:	220b      	movs	r2, #11
 8015278:	2301      	movs	r3, #1
 801527a:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 801527e:	2300      	movs	r3, #0
 8015280:	63eb      	str	r3, [r5, #60]	; 0x3c
 8015282:	e788      	b.n	8015196 <_tzset_unlocked_r+0x1d2>
 8015284:	b280      	uxth	r0, r0
 8015286:	723b      	strb	r3, [r7, #8]
 8015288:	6178      	str	r0, [r7, #20]
 801528a:	e784      	b.n	8015196 <_tzset_unlocked_r+0x1d2>
 801528c:	0801a759 	.word	0x0801a759
 8015290:	20005a78 	.word	0x20005a78
 8015294:	20005a80 	.word	0x20005a80
 8015298:	0801a75c 	.word	0x0801a75c
 801529c:	20005a7c 	.word	0x20005a7c
 80152a0:	20000110 	.word	0x20000110
 80152a4:	20005a6b 	.word	0x20005a6b
 80152a8:	0801a760 	.word	0x0801a760
 80152ac:	0801a783 	.word	0x0801a783
 80152b0:	0801a76f 	.word	0x0801a76f
 80152b4:	0801a782 	.word	0x0801a782
 80152b8:	20005a60 	.word	0x20005a60

080152bc <__swbuf_r>:
 80152bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152be:	460e      	mov	r6, r1
 80152c0:	4614      	mov	r4, r2
 80152c2:	4605      	mov	r5, r0
 80152c4:	b118      	cbz	r0, 80152ce <__swbuf_r+0x12>
 80152c6:	6983      	ldr	r3, [r0, #24]
 80152c8:	b90b      	cbnz	r3, 80152ce <__swbuf_r+0x12>
 80152ca:	f7fd f84f 	bl	801236c <__sinit>
 80152ce:	4b21      	ldr	r3, [pc, #132]	; (8015354 <__swbuf_r+0x98>)
 80152d0:	429c      	cmp	r4, r3
 80152d2:	d12b      	bne.n	801532c <__swbuf_r+0x70>
 80152d4:	686c      	ldr	r4, [r5, #4]
 80152d6:	69a3      	ldr	r3, [r4, #24]
 80152d8:	60a3      	str	r3, [r4, #8]
 80152da:	89a3      	ldrh	r3, [r4, #12]
 80152dc:	071a      	lsls	r2, r3, #28
 80152de:	d52f      	bpl.n	8015340 <__swbuf_r+0x84>
 80152e0:	6923      	ldr	r3, [r4, #16]
 80152e2:	b36b      	cbz	r3, 8015340 <__swbuf_r+0x84>
 80152e4:	6923      	ldr	r3, [r4, #16]
 80152e6:	6820      	ldr	r0, [r4, #0]
 80152e8:	1ac0      	subs	r0, r0, r3
 80152ea:	6963      	ldr	r3, [r4, #20]
 80152ec:	b2f6      	uxtb	r6, r6
 80152ee:	4283      	cmp	r3, r0
 80152f0:	4637      	mov	r7, r6
 80152f2:	dc04      	bgt.n	80152fe <__swbuf_r+0x42>
 80152f4:	4621      	mov	r1, r4
 80152f6:	4628      	mov	r0, r5
 80152f8:	f000 fff4 	bl	80162e4 <_fflush_r>
 80152fc:	bb30      	cbnz	r0, 801534c <__swbuf_r+0x90>
 80152fe:	68a3      	ldr	r3, [r4, #8]
 8015300:	3b01      	subs	r3, #1
 8015302:	60a3      	str	r3, [r4, #8]
 8015304:	6823      	ldr	r3, [r4, #0]
 8015306:	1c5a      	adds	r2, r3, #1
 8015308:	6022      	str	r2, [r4, #0]
 801530a:	701e      	strb	r6, [r3, #0]
 801530c:	6963      	ldr	r3, [r4, #20]
 801530e:	3001      	adds	r0, #1
 8015310:	4283      	cmp	r3, r0
 8015312:	d004      	beq.n	801531e <__swbuf_r+0x62>
 8015314:	89a3      	ldrh	r3, [r4, #12]
 8015316:	07db      	lsls	r3, r3, #31
 8015318:	d506      	bpl.n	8015328 <__swbuf_r+0x6c>
 801531a:	2e0a      	cmp	r6, #10
 801531c:	d104      	bne.n	8015328 <__swbuf_r+0x6c>
 801531e:	4621      	mov	r1, r4
 8015320:	4628      	mov	r0, r5
 8015322:	f000 ffdf 	bl	80162e4 <_fflush_r>
 8015326:	b988      	cbnz	r0, 801534c <__swbuf_r+0x90>
 8015328:	4638      	mov	r0, r7
 801532a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801532c:	4b0a      	ldr	r3, [pc, #40]	; (8015358 <__swbuf_r+0x9c>)
 801532e:	429c      	cmp	r4, r3
 8015330:	d101      	bne.n	8015336 <__swbuf_r+0x7a>
 8015332:	68ac      	ldr	r4, [r5, #8]
 8015334:	e7cf      	b.n	80152d6 <__swbuf_r+0x1a>
 8015336:	4b09      	ldr	r3, [pc, #36]	; (801535c <__swbuf_r+0xa0>)
 8015338:	429c      	cmp	r4, r3
 801533a:	bf08      	it	eq
 801533c:	68ec      	ldreq	r4, [r5, #12]
 801533e:	e7ca      	b.n	80152d6 <__swbuf_r+0x1a>
 8015340:	4621      	mov	r1, r4
 8015342:	4628      	mov	r0, r5
 8015344:	f000 f81e 	bl	8015384 <__swsetup_r>
 8015348:	2800      	cmp	r0, #0
 801534a:	d0cb      	beq.n	80152e4 <__swbuf_r+0x28>
 801534c:	f04f 37ff 	mov.w	r7, #4294967295
 8015350:	e7ea      	b.n	8015328 <__swbuf_r+0x6c>
 8015352:	bf00      	nop
 8015354:	0801a4f4 	.word	0x0801a4f4
 8015358:	0801a514 	.word	0x0801a514
 801535c:	0801a4d4 	.word	0x0801a4d4

08015360 <_write_r>:
 8015360:	b538      	push	{r3, r4, r5, lr}
 8015362:	4d07      	ldr	r5, [pc, #28]	; (8015380 <_write_r+0x20>)
 8015364:	4604      	mov	r4, r0
 8015366:	4608      	mov	r0, r1
 8015368:	4611      	mov	r1, r2
 801536a:	2200      	movs	r2, #0
 801536c:	602a      	str	r2, [r5, #0]
 801536e:	461a      	mov	r2, r3
 8015370:	f003 f8d8 	bl	8018524 <_write>
 8015374:	1c43      	adds	r3, r0, #1
 8015376:	d102      	bne.n	801537e <_write_r+0x1e>
 8015378:	682b      	ldr	r3, [r5, #0]
 801537a:	b103      	cbz	r3, 801537e <_write_r+0x1e>
 801537c:	6023      	str	r3, [r4, #0]
 801537e:	bd38      	pop	{r3, r4, r5, pc}
 8015380:	200064f0 	.word	0x200064f0

08015384 <__swsetup_r>:
 8015384:	4b32      	ldr	r3, [pc, #200]	; (8015450 <__swsetup_r+0xcc>)
 8015386:	b570      	push	{r4, r5, r6, lr}
 8015388:	681d      	ldr	r5, [r3, #0]
 801538a:	4606      	mov	r6, r0
 801538c:	460c      	mov	r4, r1
 801538e:	b125      	cbz	r5, 801539a <__swsetup_r+0x16>
 8015390:	69ab      	ldr	r3, [r5, #24]
 8015392:	b913      	cbnz	r3, 801539a <__swsetup_r+0x16>
 8015394:	4628      	mov	r0, r5
 8015396:	f7fc ffe9 	bl	801236c <__sinit>
 801539a:	4b2e      	ldr	r3, [pc, #184]	; (8015454 <__swsetup_r+0xd0>)
 801539c:	429c      	cmp	r4, r3
 801539e:	d10f      	bne.n	80153c0 <__swsetup_r+0x3c>
 80153a0:	686c      	ldr	r4, [r5, #4]
 80153a2:	89a3      	ldrh	r3, [r4, #12]
 80153a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80153a8:	0719      	lsls	r1, r3, #28
 80153aa:	d42c      	bmi.n	8015406 <__swsetup_r+0x82>
 80153ac:	06dd      	lsls	r5, r3, #27
 80153ae:	d411      	bmi.n	80153d4 <__swsetup_r+0x50>
 80153b0:	2309      	movs	r3, #9
 80153b2:	6033      	str	r3, [r6, #0]
 80153b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80153b8:	81a3      	strh	r3, [r4, #12]
 80153ba:	f04f 30ff 	mov.w	r0, #4294967295
 80153be:	e03e      	b.n	801543e <__swsetup_r+0xba>
 80153c0:	4b25      	ldr	r3, [pc, #148]	; (8015458 <__swsetup_r+0xd4>)
 80153c2:	429c      	cmp	r4, r3
 80153c4:	d101      	bne.n	80153ca <__swsetup_r+0x46>
 80153c6:	68ac      	ldr	r4, [r5, #8]
 80153c8:	e7eb      	b.n	80153a2 <__swsetup_r+0x1e>
 80153ca:	4b24      	ldr	r3, [pc, #144]	; (801545c <__swsetup_r+0xd8>)
 80153cc:	429c      	cmp	r4, r3
 80153ce:	bf08      	it	eq
 80153d0:	68ec      	ldreq	r4, [r5, #12]
 80153d2:	e7e6      	b.n	80153a2 <__swsetup_r+0x1e>
 80153d4:	0758      	lsls	r0, r3, #29
 80153d6:	d512      	bpl.n	80153fe <__swsetup_r+0x7a>
 80153d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80153da:	b141      	cbz	r1, 80153ee <__swsetup_r+0x6a>
 80153dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80153e0:	4299      	cmp	r1, r3
 80153e2:	d002      	beq.n	80153ea <__swsetup_r+0x66>
 80153e4:	4630      	mov	r0, r6
 80153e6:	f7fd fc63 	bl	8012cb0 <_free_r>
 80153ea:	2300      	movs	r3, #0
 80153ec:	6363      	str	r3, [r4, #52]	; 0x34
 80153ee:	89a3      	ldrh	r3, [r4, #12]
 80153f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80153f4:	81a3      	strh	r3, [r4, #12]
 80153f6:	2300      	movs	r3, #0
 80153f8:	6063      	str	r3, [r4, #4]
 80153fa:	6923      	ldr	r3, [r4, #16]
 80153fc:	6023      	str	r3, [r4, #0]
 80153fe:	89a3      	ldrh	r3, [r4, #12]
 8015400:	f043 0308 	orr.w	r3, r3, #8
 8015404:	81a3      	strh	r3, [r4, #12]
 8015406:	6923      	ldr	r3, [r4, #16]
 8015408:	b94b      	cbnz	r3, 801541e <__swsetup_r+0x9a>
 801540a:	89a3      	ldrh	r3, [r4, #12]
 801540c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015414:	d003      	beq.n	801541e <__swsetup_r+0x9a>
 8015416:	4621      	mov	r1, r4
 8015418:	4630      	mov	r0, r6
 801541a:	f001 fc51 	bl	8016cc0 <__smakebuf_r>
 801541e:	89a0      	ldrh	r0, [r4, #12]
 8015420:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015424:	f010 0301 	ands.w	r3, r0, #1
 8015428:	d00a      	beq.n	8015440 <__swsetup_r+0xbc>
 801542a:	2300      	movs	r3, #0
 801542c:	60a3      	str	r3, [r4, #8]
 801542e:	6963      	ldr	r3, [r4, #20]
 8015430:	425b      	negs	r3, r3
 8015432:	61a3      	str	r3, [r4, #24]
 8015434:	6923      	ldr	r3, [r4, #16]
 8015436:	b943      	cbnz	r3, 801544a <__swsetup_r+0xc6>
 8015438:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801543c:	d1ba      	bne.n	80153b4 <__swsetup_r+0x30>
 801543e:	bd70      	pop	{r4, r5, r6, pc}
 8015440:	0781      	lsls	r1, r0, #30
 8015442:	bf58      	it	pl
 8015444:	6963      	ldrpl	r3, [r4, #20]
 8015446:	60a3      	str	r3, [r4, #8]
 8015448:	e7f4      	b.n	8015434 <__swsetup_r+0xb0>
 801544a:	2000      	movs	r0, #0
 801544c:	e7f7      	b.n	801543e <__swsetup_r+0xba>
 801544e:	bf00      	nop
 8015450:	200000ac 	.word	0x200000ac
 8015454:	0801a4f4 	.word	0x0801a4f4
 8015458:	0801a514 	.word	0x0801a514
 801545c:	0801a4d4 	.word	0x0801a4d4

08015460 <__assert_func>:
 8015460:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015462:	4614      	mov	r4, r2
 8015464:	461a      	mov	r2, r3
 8015466:	4b09      	ldr	r3, [pc, #36]	; (801548c <__assert_func+0x2c>)
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	4605      	mov	r5, r0
 801546c:	68d8      	ldr	r0, [r3, #12]
 801546e:	b14c      	cbz	r4, 8015484 <__assert_func+0x24>
 8015470:	4b07      	ldr	r3, [pc, #28]	; (8015490 <__assert_func+0x30>)
 8015472:	9100      	str	r1, [sp, #0]
 8015474:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015478:	4906      	ldr	r1, [pc, #24]	; (8015494 <__assert_func+0x34>)
 801547a:	462b      	mov	r3, r5
 801547c:	f000 ff6e 	bl	801635c <fiprintf>
 8015480:	f7fc ff06 	bl	8012290 <abort>
 8015484:	4b04      	ldr	r3, [pc, #16]	; (8015498 <__assert_func+0x38>)
 8015486:	461c      	mov	r4, r3
 8015488:	e7f3      	b.n	8015472 <__assert_func+0x12>
 801548a:	bf00      	nop
 801548c:	200000ac 	.word	0x200000ac
 8015490:	0801a795 	.word	0x0801a795
 8015494:	0801a7a2 	.word	0x0801a7a2
 8015498:	0801a7d0 	.word	0x0801a7d0

0801549c <_close_r>:
 801549c:	b538      	push	{r3, r4, r5, lr}
 801549e:	4d06      	ldr	r5, [pc, #24]	; (80154b8 <_close_r+0x1c>)
 80154a0:	2300      	movs	r3, #0
 80154a2:	4604      	mov	r4, r0
 80154a4:	4608      	mov	r0, r1
 80154a6:	602b      	str	r3, [r5, #0]
 80154a8:	f002 fff6 	bl	8018498 <_close>
 80154ac:	1c43      	adds	r3, r0, #1
 80154ae:	d102      	bne.n	80154b6 <_close_r+0x1a>
 80154b0:	682b      	ldr	r3, [r5, #0]
 80154b2:	b103      	cbz	r3, 80154b6 <_close_r+0x1a>
 80154b4:	6023      	str	r3, [r4, #0]
 80154b6:	bd38      	pop	{r3, r4, r5, pc}
 80154b8:	200064f0 	.word	0x200064f0

080154bc <div>:
 80154bc:	2900      	cmp	r1, #0
 80154be:	b510      	push	{r4, lr}
 80154c0:	fb91 f4f2 	sdiv	r4, r1, r2
 80154c4:	fb02 1314 	mls	r3, r2, r4, r1
 80154c8:	db06      	blt.n	80154d8 <div+0x1c>
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	da01      	bge.n	80154d2 <div+0x16>
 80154ce:	3401      	adds	r4, #1
 80154d0:	1a9b      	subs	r3, r3, r2
 80154d2:	e9c0 4300 	strd	r4, r3, [r0]
 80154d6:	bd10      	pop	{r4, pc}
 80154d8:	2b00      	cmp	r3, #0
 80154da:	bfc4      	itt	gt
 80154dc:	f104 34ff 	addgt.w	r4, r4, #4294967295
 80154e0:	189b      	addgt	r3, r3, r2
 80154e2:	e7f6      	b.n	80154d2 <div+0x16>

080154e4 <quorem>:
 80154e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154e8:	6903      	ldr	r3, [r0, #16]
 80154ea:	690c      	ldr	r4, [r1, #16]
 80154ec:	42a3      	cmp	r3, r4
 80154ee:	4607      	mov	r7, r0
 80154f0:	f2c0 8081 	blt.w	80155f6 <quorem+0x112>
 80154f4:	3c01      	subs	r4, #1
 80154f6:	f101 0814 	add.w	r8, r1, #20
 80154fa:	f100 0514 	add.w	r5, r0, #20
 80154fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015502:	9301      	str	r3, [sp, #4]
 8015504:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015508:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801550c:	3301      	adds	r3, #1
 801550e:	429a      	cmp	r2, r3
 8015510:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015514:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015518:	fbb2 f6f3 	udiv	r6, r2, r3
 801551c:	d331      	bcc.n	8015582 <quorem+0x9e>
 801551e:	f04f 0e00 	mov.w	lr, #0
 8015522:	4640      	mov	r0, r8
 8015524:	46ac      	mov	ip, r5
 8015526:	46f2      	mov	sl, lr
 8015528:	f850 2b04 	ldr.w	r2, [r0], #4
 801552c:	b293      	uxth	r3, r2
 801552e:	fb06 e303 	mla	r3, r6, r3, lr
 8015532:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8015536:	b29b      	uxth	r3, r3
 8015538:	ebaa 0303 	sub.w	r3, sl, r3
 801553c:	0c12      	lsrs	r2, r2, #16
 801553e:	f8dc a000 	ldr.w	sl, [ip]
 8015542:	fb06 e202 	mla	r2, r6, r2, lr
 8015546:	fa13 f38a 	uxtah	r3, r3, sl
 801554a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801554e:	fa1f fa82 	uxth.w	sl, r2
 8015552:	f8dc 2000 	ldr.w	r2, [ip]
 8015556:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801555a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801555e:	b29b      	uxth	r3, r3
 8015560:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015564:	4581      	cmp	r9, r0
 8015566:	f84c 3b04 	str.w	r3, [ip], #4
 801556a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801556e:	d2db      	bcs.n	8015528 <quorem+0x44>
 8015570:	f855 300b 	ldr.w	r3, [r5, fp]
 8015574:	b92b      	cbnz	r3, 8015582 <quorem+0x9e>
 8015576:	9b01      	ldr	r3, [sp, #4]
 8015578:	3b04      	subs	r3, #4
 801557a:	429d      	cmp	r5, r3
 801557c:	461a      	mov	r2, r3
 801557e:	d32e      	bcc.n	80155de <quorem+0xfa>
 8015580:	613c      	str	r4, [r7, #16]
 8015582:	4638      	mov	r0, r7
 8015584:	f001 fec2 	bl	801730c <__mcmp>
 8015588:	2800      	cmp	r0, #0
 801558a:	db24      	blt.n	80155d6 <quorem+0xf2>
 801558c:	3601      	adds	r6, #1
 801558e:	4628      	mov	r0, r5
 8015590:	f04f 0c00 	mov.w	ip, #0
 8015594:	f858 2b04 	ldr.w	r2, [r8], #4
 8015598:	f8d0 e000 	ldr.w	lr, [r0]
 801559c:	b293      	uxth	r3, r2
 801559e:	ebac 0303 	sub.w	r3, ip, r3
 80155a2:	0c12      	lsrs	r2, r2, #16
 80155a4:	fa13 f38e 	uxtah	r3, r3, lr
 80155a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80155ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80155b0:	b29b      	uxth	r3, r3
 80155b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80155b6:	45c1      	cmp	r9, r8
 80155b8:	f840 3b04 	str.w	r3, [r0], #4
 80155bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80155c0:	d2e8      	bcs.n	8015594 <quorem+0xb0>
 80155c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80155c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80155ca:	b922      	cbnz	r2, 80155d6 <quorem+0xf2>
 80155cc:	3b04      	subs	r3, #4
 80155ce:	429d      	cmp	r5, r3
 80155d0:	461a      	mov	r2, r3
 80155d2:	d30a      	bcc.n	80155ea <quorem+0x106>
 80155d4:	613c      	str	r4, [r7, #16]
 80155d6:	4630      	mov	r0, r6
 80155d8:	b003      	add	sp, #12
 80155da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155de:	6812      	ldr	r2, [r2, #0]
 80155e0:	3b04      	subs	r3, #4
 80155e2:	2a00      	cmp	r2, #0
 80155e4:	d1cc      	bne.n	8015580 <quorem+0x9c>
 80155e6:	3c01      	subs	r4, #1
 80155e8:	e7c7      	b.n	801557a <quorem+0x96>
 80155ea:	6812      	ldr	r2, [r2, #0]
 80155ec:	3b04      	subs	r3, #4
 80155ee:	2a00      	cmp	r2, #0
 80155f0:	d1f0      	bne.n	80155d4 <quorem+0xf0>
 80155f2:	3c01      	subs	r4, #1
 80155f4:	e7eb      	b.n	80155ce <quorem+0xea>
 80155f6:	2000      	movs	r0, #0
 80155f8:	e7ee      	b.n	80155d8 <quorem+0xf4>
 80155fa:	0000      	movs	r0, r0
 80155fc:	0000      	movs	r0, r0
	...

08015600 <_dtoa_r>:
 8015600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015604:	ed2d 8b02 	vpush	{d8}
 8015608:	ec57 6b10 	vmov	r6, r7, d0
 801560c:	b095      	sub	sp, #84	; 0x54
 801560e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015610:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015614:	9105      	str	r1, [sp, #20]
 8015616:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801561a:	4604      	mov	r4, r0
 801561c:	9209      	str	r2, [sp, #36]	; 0x24
 801561e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015620:	b975      	cbnz	r5, 8015640 <_dtoa_r+0x40>
 8015622:	2010      	movs	r0, #16
 8015624:	f7fd f886 	bl	8012734 <malloc>
 8015628:	4602      	mov	r2, r0
 801562a:	6260      	str	r0, [r4, #36]	; 0x24
 801562c:	b920      	cbnz	r0, 8015638 <_dtoa_r+0x38>
 801562e:	4bb2      	ldr	r3, [pc, #712]	; (80158f8 <_dtoa_r+0x2f8>)
 8015630:	21ea      	movs	r1, #234	; 0xea
 8015632:	48b2      	ldr	r0, [pc, #712]	; (80158fc <_dtoa_r+0x2fc>)
 8015634:	f7ff ff14 	bl	8015460 <__assert_func>
 8015638:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801563c:	6005      	str	r5, [r0, #0]
 801563e:	60c5      	str	r5, [r0, #12]
 8015640:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015642:	6819      	ldr	r1, [r3, #0]
 8015644:	b151      	cbz	r1, 801565c <_dtoa_r+0x5c>
 8015646:	685a      	ldr	r2, [r3, #4]
 8015648:	604a      	str	r2, [r1, #4]
 801564a:	2301      	movs	r3, #1
 801564c:	4093      	lsls	r3, r2
 801564e:	608b      	str	r3, [r1, #8]
 8015650:	4620      	mov	r0, r4
 8015652:	f001 fbd3 	bl	8016dfc <_Bfree>
 8015656:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015658:	2200      	movs	r2, #0
 801565a:	601a      	str	r2, [r3, #0]
 801565c:	1e3b      	subs	r3, r7, #0
 801565e:	bfb9      	ittee	lt
 8015660:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8015664:	9303      	strlt	r3, [sp, #12]
 8015666:	2300      	movge	r3, #0
 8015668:	f8c8 3000 	strge.w	r3, [r8]
 801566c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8015670:	4ba3      	ldr	r3, [pc, #652]	; (8015900 <_dtoa_r+0x300>)
 8015672:	bfbc      	itt	lt
 8015674:	2201      	movlt	r2, #1
 8015676:	f8c8 2000 	strlt.w	r2, [r8]
 801567a:	ea33 0309 	bics.w	r3, r3, r9
 801567e:	d11b      	bne.n	80156b8 <_dtoa_r+0xb8>
 8015680:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015682:	f242 730f 	movw	r3, #9999	; 0x270f
 8015686:	6013      	str	r3, [r2, #0]
 8015688:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801568c:	4333      	orrs	r3, r6
 801568e:	f000 857a 	beq.w	8016186 <_dtoa_r+0xb86>
 8015692:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015694:	b963      	cbnz	r3, 80156b0 <_dtoa_r+0xb0>
 8015696:	4b9b      	ldr	r3, [pc, #620]	; (8015904 <_dtoa_r+0x304>)
 8015698:	e024      	b.n	80156e4 <_dtoa_r+0xe4>
 801569a:	4b9b      	ldr	r3, [pc, #620]	; (8015908 <_dtoa_r+0x308>)
 801569c:	9300      	str	r3, [sp, #0]
 801569e:	3308      	adds	r3, #8
 80156a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80156a2:	6013      	str	r3, [r2, #0]
 80156a4:	9800      	ldr	r0, [sp, #0]
 80156a6:	b015      	add	sp, #84	; 0x54
 80156a8:	ecbd 8b02 	vpop	{d8}
 80156ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156b0:	4b94      	ldr	r3, [pc, #592]	; (8015904 <_dtoa_r+0x304>)
 80156b2:	9300      	str	r3, [sp, #0]
 80156b4:	3303      	adds	r3, #3
 80156b6:	e7f3      	b.n	80156a0 <_dtoa_r+0xa0>
 80156b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80156bc:	2200      	movs	r2, #0
 80156be:	ec51 0b17 	vmov	r0, r1, d7
 80156c2:	2300      	movs	r3, #0
 80156c4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80156c8:	f7eb fa1e 	bl	8000b08 <__aeabi_dcmpeq>
 80156cc:	4680      	mov	r8, r0
 80156ce:	b158      	cbz	r0, 80156e8 <_dtoa_r+0xe8>
 80156d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80156d2:	2301      	movs	r3, #1
 80156d4:	6013      	str	r3, [r2, #0]
 80156d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80156d8:	2b00      	cmp	r3, #0
 80156da:	f000 8551 	beq.w	8016180 <_dtoa_r+0xb80>
 80156de:	488b      	ldr	r0, [pc, #556]	; (801590c <_dtoa_r+0x30c>)
 80156e0:	6018      	str	r0, [r3, #0]
 80156e2:	1e43      	subs	r3, r0, #1
 80156e4:	9300      	str	r3, [sp, #0]
 80156e6:	e7dd      	b.n	80156a4 <_dtoa_r+0xa4>
 80156e8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80156ec:	aa12      	add	r2, sp, #72	; 0x48
 80156ee:	a913      	add	r1, sp, #76	; 0x4c
 80156f0:	4620      	mov	r0, r4
 80156f2:	f001 ff2b 	bl	801754c <__d2b>
 80156f6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80156fa:	4683      	mov	fp, r0
 80156fc:	2d00      	cmp	r5, #0
 80156fe:	d07c      	beq.n	80157fa <_dtoa_r+0x1fa>
 8015700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015702:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8015706:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801570a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801570e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8015712:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8015716:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801571a:	4b7d      	ldr	r3, [pc, #500]	; (8015910 <_dtoa_r+0x310>)
 801571c:	2200      	movs	r2, #0
 801571e:	4630      	mov	r0, r6
 8015720:	4639      	mov	r1, r7
 8015722:	f7ea fdd1 	bl	80002c8 <__aeabi_dsub>
 8015726:	a36e      	add	r3, pc, #440	; (adr r3, 80158e0 <_dtoa_r+0x2e0>)
 8015728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801572c:	f7ea ff84 	bl	8000638 <__aeabi_dmul>
 8015730:	a36d      	add	r3, pc, #436	; (adr r3, 80158e8 <_dtoa_r+0x2e8>)
 8015732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015736:	f7ea fdc9 	bl	80002cc <__adddf3>
 801573a:	4606      	mov	r6, r0
 801573c:	4628      	mov	r0, r5
 801573e:	460f      	mov	r7, r1
 8015740:	f7ea ff10 	bl	8000564 <__aeabi_i2d>
 8015744:	a36a      	add	r3, pc, #424	; (adr r3, 80158f0 <_dtoa_r+0x2f0>)
 8015746:	e9d3 2300 	ldrd	r2, r3, [r3]
 801574a:	f7ea ff75 	bl	8000638 <__aeabi_dmul>
 801574e:	4602      	mov	r2, r0
 8015750:	460b      	mov	r3, r1
 8015752:	4630      	mov	r0, r6
 8015754:	4639      	mov	r1, r7
 8015756:	f7ea fdb9 	bl	80002cc <__adddf3>
 801575a:	4606      	mov	r6, r0
 801575c:	460f      	mov	r7, r1
 801575e:	f7eb fa1b 	bl	8000b98 <__aeabi_d2iz>
 8015762:	2200      	movs	r2, #0
 8015764:	4682      	mov	sl, r0
 8015766:	2300      	movs	r3, #0
 8015768:	4630      	mov	r0, r6
 801576a:	4639      	mov	r1, r7
 801576c:	f7eb f9d6 	bl	8000b1c <__aeabi_dcmplt>
 8015770:	b148      	cbz	r0, 8015786 <_dtoa_r+0x186>
 8015772:	4650      	mov	r0, sl
 8015774:	f7ea fef6 	bl	8000564 <__aeabi_i2d>
 8015778:	4632      	mov	r2, r6
 801577a:	463b      	mov	r3, r7
 801577c:	f7eb f9c4 	bl	8000b08 <__aeabi_dcmpeq>
 8015780:	b908      	cbnz	r0, 8015786 <_dtoa_r+0x186>
 8015782:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015786:	f1ba 0f16 	cmp.w	sl, #22
 801578a:	d854      	bhi.n	8015836 <_dtoa_r+0x236>
 801578c:	4b61      	ldr	r3, [pc, #388]	; (8015914 <_dtoa_r+0x314>)
 801578e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015796:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801579a:	f7eb f9bf 	bl	8000b1c <__aeabi_dcmplt>
 801579e:	2800      	cmp	r0, #0
 80157a0:	d04b      	beq.n	801583a <_dtoa_r+0x23a>
 80157a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80157a6:	2300      	movs	r3, #0
 80157a8:	930e      	str	r3, [sp, #56]	; 0x38
 80157aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80157ac:	1b5d      	subs	r5, r3, r5
 80157ae:	1e6b      	subs	r3, r5, #1
 80157b0:	9304      	str	r3, [sp, #16]
 80157b2:	bf43      	ittte	mi
 80157b4:	2300      	movmi	r3, #0
 80157b6:	f1c5 0801 	rsbmi	r8, r5, #1
 80157ba:	9304      	strmi	r3, [sp, #16]
 80157bc:	f04f 0800 	movpl.w	r8, #0
 80157c0:	f1ba 0f00 	cmp.w	sl, #0
 80157c4:	db3b      	blt.n	801583e <_dtoa_r+0x23e>
 80157c6:	9b04      	ldr	r3, [sp, #16]
 80157c8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80157cc:	4453      	add	r3, sl
 80157ce:	9304      	str	r3, [sp, #16]
 80157d0:	2300      	movs	r3, #0
 80157d2:	9306      	str	r3, [sp, #24]
 80157d4:	9b05      	ldr	r3, [sp, #20]
 80157d6:	2b09      	cmp	r3, #9
 80157d8:	d869      	bhi.n	80158ae <_dtoa_r+0x2ae>
 80157da:	2b05      	cmp	r3, #5
 80157dc:	bfc4      	itt	gt
 80157de:	3b04      	subgt	r3, #4
 80157e0:	9305      	strgt	r3, [sp, #20]
 80157e2:	9b05      	ldr	r3, [sp, #20]
 80157e4:	f1a3 0302 	sub.w	r3, r3, #2
 80157e8:	bfcc      	ite	gt
 80157ea:	2500      	movgt	r5, #0
 80157ec:	2501      	movle	r5, #1
 80157ee:	2b03      	cmp	r3, #3
 80157f0:	d869      	bhi.n	80158c6 <_dtoa_r+0x2c6>
 80157f2:	e8df f003 	tbb	[pc, r3]
 80157f6:	4e2c      	.short	0x4e2c
 80157f8:	5a4c      	.short	0x5a4c
 80157fa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80157fe:	441d      	add	r5, r3
 8015800:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8015804:	2b20      	cmp	r3, #32
 8015806:	bfc1      	itttt	gt
 8015808:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801580c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8015810:	fa09 f303 	lslgt.w	r3, r9, r3
 8015814:	fa26 f000 	lsrgt.w	r0, r6, r0
 8015818:	bfda      	itte	le
 801581a:	f1c3 0320 	rsble	r3, r3, #32
 801581e:	fa06 f003 	lslle.w	r0, r6, r3
 8015822:	4318      	orrgt	r0, r3
 8015824:	f7ea fe8e 	bl	8000544 <__aeabi_ui2d>
 8015828:	2301      	movs	r3, #1
 801582a:	4606      	mov	r6, r0
 801582c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8015830:	3d01      	subs	r5, #1
 8015832:	9310      	str	r3, [sp, #64]	; 0x40
 8015834:	e771      	b.n	801571a <_dtoa_r+0x11a>
 8015836:	2301      	movs	r3, #1
 8015838:	e7b6      	b.n	80157a8 <_dtoa_r+0x1a8>
 801583a:	900e      	str	r0, [sp, #56]	; 0x38
 801583c:	e7b5      	b.n	80157aa <_dtoa_r+0x1aa>
 801583e:	f1ca 0300 	rsb	r3, sl, #0
 8015842:	9306      	str	r3, [sp, #24]
 8015844:	2300      	movs	r3, #0
 8015846:	eba8 080a 	sub.w	r8, r8, sl
 801584a:	930d      	str	r3, [sp, #52]	; 0x34
 801584c:	e7c2      	b.n	80157d4 <_dtoa_r+0x1d4>
 801584e:	2300      	movs	r3, #0
 8015850:	9308      	str	r3, [sp, #32]
 8015852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015854:	2b00      	cmp	r3, #0
 8015856:	dc39      	bgt.n	80158cc <_dtoa_r+0x2cc>
 8015858:	f04f 0901 	mov.w	r9, #1
 801585c:	f8cd 9004 	str.w	r9, [sp, #4]
 8015860:	464b      	mov	r3, r9
 8015862:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8015866:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015868:	2200      	movs	r2, #0
 801586a:	6042      	str	r2, [r0, #4]
 801586c:	2204      	movs	r2, #4
 801586e:	f102 0614 	add.w	r6, r2, #20
 8015872:	429e      	cmp	r6, r3
 8015874:	6841      	ldr	r1, [r0, #4]
 8015876:	d92f      	bls.n	80158d8 <_dtoa_r+0x2d8>
 8015878:	4620      	mov	r0, r4
 801587a:	f001 fa7f 	bl	8016d7c <_Balloc>
 801587e:	9000      	str	r0, [sp, #0]
 8015880:	2800      	cmp	r0, #0
 8015882:	d14b      	bne.n	801591c <_dtoa_r+0x31c>
 8015884:	4b24      	ldr	r3, [pc, #144]	; (8015918 <_dtoa_r+0x318>)
 8015886:	4602      	mov	r2, r0
 8015888:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801588c:	e6d1      	b.n	8015632 <_dtoa_r+0x32>
 801588e:	2301      	movs	r3, #1
 8015890:	e7de      	b.n	8015850 <_dtoa_r+0x250>
 8015892:	2300      	movs	r3, #0
 8015894:	9308      	str	r3, [sp, #32]
 8015896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015898:	eb0a 0903 	add.w	r9, sl, r3
 801589c:	f109 0301 	add.w	r3, r9, #1
 80158a0:	2b01      	cmp	r3, #1
 80158a2:	9301      	str	r3, [sp, #4]
 80158a4:	bfb8      	it	lt
 80158a6:	2301      	movlt	r3, #1
 80158a8:	e7dd      	b.n	8015866 <_dtoa_r+0x266>
 80158aa:	2301      	movs	r3, #1
 80158ac:	e7f2      	b.n	8015894 <_dtoa_r+0x294>
 80158ae:	2501      	movs	r5, #1
 80158b0:	2300      	movs	r3, #0
 80158b2:	9305      	str	r3, [sp, #20]
 80158b4:	9508      	str	r5, [sp, #32]
 80158b6:	f04f 39ff 	mov.w	r9, #4294967295
 80158ba:	2200      	movs	r2, #0
 80158bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80158c0:	2312      	movs	r3, #18
 80158c2:	9209      	str	r2, [sp, #36]	; 0x24
 80158c4:	e7cf      	b.n	8015866 <_dtoa_r+0x266>
 80158c6:	2301      	movs	r3, #1
 80158c8:	9308      	str	r3, [sp, #32]
 80158ca:	e7f4      	b.n	80158b6 <_dtoa_r+0x2b6>
 80158cc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80158d0:	f8cd 9004 	str.w	r9, [sp, #4]
 80158d4:	464b      	mov	r3, r9
 80158d6:	e7c6      	b.n	8015866 <_dtoa_r+0x266>
 80158d8:	3101      	adds	r1, #1
 80158da:	6041      	str	r1, [r0, #4]
 80158dc:	0052      	lsls	r2, r2, #1
 80158de:	e7c6      	b.n	801586e <_dtoa_r+0x26e>
 80158e0:	636f4361 	.word	0x636f4361
 80158e4:	3fd287a7 	.word	0x3fd287a7
 80158e8:	8b60c8b3 	.word	0x8b60c8b3
 80158ec:	3fc68a28 	.word	0x3fc68a28
 80158f0:	509f79fb 	.word	0x509f79fb
 80158f4:	3fd34413 	.word	0x3fd34413
 80158f8:	0801a538 	.word	0x0801a538
 80158fc:	0801a7de 	.word	0x0801a7de
 8015900:	7ff00000 	.word	0x7ff00000
 8015904:	0801a7da 	.word	0x0801a7da
 8015908:	0801a7d1 	.word	0x0801a7d1
 801590c:	0801aa42 	.word	0x0801aa42
 8015910:	3ff80000 	.word	0x3ff80000
 8015914:	0801a958 	.word	0x0801a958
 8015918:	0801a83d 	.word	0x0801a83d
 801591c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801591e:	9a00      	ldr	r2, [sp, #0]
 8015920:	601a      	str	r2, [r3, #0]
 8015922:	9b01      	ldr	r3, [sp, #4]
 8015924:	2b0e      	cmp	r3, #14
 8015926:	f200 80ad 	bhi.w	8015a84 <_dtoa_r+0x484>
 801592a:	2d00      	cmp	r5, #0
 801592c:	f000 80aa 	beq.w	8015a84 <_dtoa_r+0x484>
 8015930:	f1ba 0f00 	cmp.w	sl, #0
 8015934:	dd36      	ble.n	80159a4 <_dtoa_r+0x3a4>
 8015936:	4ac3      	ldr	r2, [pc, #780]	; (8015c44 <_dtoa_r+0x644>)
 8015938:	f00a 030f 	and.w	r3, sl, #15
 801593c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015940:	ed93 7b00 	vldr	d7, [r3]
 8015944:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8015948:	ea4f 172a 	mov.w	r7, sl, asr #4
 801594c:	eeb0 8a47 	vmov.f32	s16, s14
 8015950:	eef0 8a67 	vmov.f32	s17, s15
 8015954:	d016      	beq.n	8015984 <_dtoa_r+0x384>
 8015956:	4bbc      	ldr	r3, [pc, #752]	; (8015c48 <_dtoa_r+0x648>)
 8015958:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801595c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015960:	f7ea ff94 	bl	800088c <__aeabi_ddiv>
 8015964:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015968:	f007 070f 	and.w	r7, r7, #15
 801596c:	2503      	movs	r5, #3
 801596e:	4eb6      	ldr	r6, [pc, #728]	; (8015c48 <_dtoa_r+0x648>)
 8015970:	b957      	cbnz	r7, 8015988 <_dtoa_r+0x388>
 8015972:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015976:	ec53 2b18 	vmov	r2, r3, d8
 801597a:	f7ea ff87 	bl	800088c <__aeabi_ddiv>
 801597e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015982:	e029      	b.n	80159d8 <_dtoa_r+0x3d8>
 8015984:	2502      	movs	r5, #2
 8015986:	e7f2      	b.n	801596e <_dtoa_r+0x36e>
 8015988:	07f9      	lsls	r1, r7, #31
 801598a:	d508      	bpl.n	801599e <_dtoa_r+0x39e>
 801598c:	ec51 0b18 	vmov	r0, r1, d8
 8015990:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015994:	f7ea fe50 	bl	8000638 <__aeabi_dmul>
 8015998:	ec41 0b18 	vmov	d8, r0, r1
 801599c:	3501      	adds	r5, #1
 801599e:	107f      	asrs	r7, r7, #1
 80159a0:	3608      	adds	r6, #8
 80159a2:	e7e5      	b.n	8015970 <_dtoa_r+0x370>
 80159a4:	f000 80a6 	beq.w	8015af4 <_dtoa_r+0x4f4>
 80159a8:	f1ca 0600 	rsb	r6, sl, #0
 80159ac:	4ba5      	ldr	r3, [pc, #660]	; (8015c44 <_dtoa_r+0x644>)
 80159ae:	4fa6      	ldr	r7, [pc, #664]	; (8015c48 <_dtoa_r+0x648>)
 80159b0:	f006 020f 	and.w	r2, r6, #15
 80159b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80159b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80159c0:	f7ea fe3a 	bl	8000638 <__aeabi_dmul>
 80159c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80159c8:	1136      	asrs	r6, r6, #4
 80159ca:	2300      	movs	r3, #0
 80159cc:	2502      	movs	r5, #2
 80159ce:	2e00      	cmp	r6, #0
 80159d0:	f040 8085 	bne.w	8015ade <_dtoa_r+0x4de>
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d1d2      	bne.n	801597e <_dtoa_r+0x37e>
 80159d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80159da:	2b00      	cmp	r3, #0
 80159dc:	f000 808c 	beq.w	8015af8 <_dtoa_r+0x4f8>
 80159e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80159e4:	4b99      	ldr	r3, [pc, #612]	; (8015c4c <_dtoa_r+0x64c>)
 80159e6:	2200      	movs	r2, #0
 80159e8:	4630      	mov	r0, r6
 80159ea:	4639      	mov	r1, r7
 80159ec:	f7eb f896 	bl	8000b1c <__aeabi_dcmplt>
 80159f0:	2800      	cmp	r0, #0
 80159f2:	f000 8081 	beq.w	8015af8 <_dtoa_r+0x4f8>
 80159f6:	9b01      	ldr	r3, [sp, #4]
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d07d      	beq.n	8015af8 <_dtoa_r+0x4f8>
 80159fc:	f1b9 0f00 	cmp.w	r9, #0
 8015a00:	dd3c      	ble.n	8015a7c <_dtoa_r+0x47c>
 8015a02:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015a06:	9307      	str	r3, [sp, #28]
 8015a08:	2200      	movs	r2, #0
 8015a0a:	4b91      	ldr	r3, [pc, #580]	; (8015c50 <_dtoa_r+0x650>)
 8015a0c:	4630      	mov	r0, r6
 8015a0e:	4639      	mov	r1, r7
 8015a10:	f7ea fe12 	bl	8000638 <__aeabi_dmul>
 8015a14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015a18:	3501      	adds	r5, #1
 8015a1a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8015a1e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8015a22:	4628      	mov	r0, r5
 8015a24:	f7ea fd9e 	bl	8000564 <__aeabi_i2d>
 8015a28:	4632      	mov	r2, r6
 8015a2a:	463b      	mov	r3, r7
 8015a2c:	f7ea fe04 	bl	8000638 <__aeabi_dmul>
 8015a30:	4b88      	ldr	r3, [pc, #544]	; (8015c54 <_dtoa_r+0x654>)
 8015a32:	2200      	movs	r2, #0
 8015a34:	f7ea fc4a 	bl	80002cc <__adddf3>
 8015a38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8015a3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015a40:	9303      	str	r3, [sp, #12]
 8015a42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d15c      	bne.n	8015b02 <_dtoa_r+0x502>
 8015a48:	4b83      	ldr	r3, [pc, #524]	; (8015c58 <_dtoa_r+0x658>)
 8015a4a:	2200      	movs	r2, #0
 8015a4c:	4630      	mov	r0, r6
 8015a4e:	4639      	mov	r1, r7
 8015a50:	f7ea fc3a 	bl	80002c8 <__aeabi_dsub>
 8015a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015a58:	4606      	mov	r6, r0
 8015a5a:	460f      	mov	r7, r1
 8015a5c:	f7eb f87c 	bl	8000b58 <__aeabi_dcmpgt>
 8015a60:	2800      	cmp	r0, #0
 8015a62:	f040 8296 	bne.w	8015f92 <_dtoa_r+0x992>
 8015a66:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8015a6a:	4630      	mov	r0, r6
 8015a6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015a70:	4639      	mov	r1, r7
 8015a72:	f7eb f853 	bl	8000b1c <__aeabi_dcmplt>
 8015a76:	2800      	cmp	r0, #0
 8015a78:	f040 8288 	bne.w	8015f8c <_dtoa_r+0x98c>
 8015a7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015a80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015a84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	f2c0 8158 	blt.w	8015d3c <_dtoa_r+0x73c>
 8015a8c:	f1ba 0f0e 	cmp.w	sl, #14
 8015a90:	f300 8154 	bgt.w	8015d3c <_dtoa_r+0x73c>
 8015a94:	4b6b      	ldr	r3, [pc, #428]	; (8015c44 <_dtoa_r+0x644>)
 8015a96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015a9a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	f280 80e3 	bge.w	8015c6c <_dtoa_r+0x66c>
 8015aa6:	9b01      	ldr	r3, [sp, #4]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	f300 80df 	bgt.w	8015c6c <_dtoa_r+0x66c>
 8015aae:	f040 826d 	bne.w	8015f8c <_dtoa_r+0x98c>
 8015ab2:	4b69      	ldr	r3, [pc, #420]	; (8015c58 <_dtoa_r+0x658>)
 8015ab4:	2200      	movs	r2, #0
 8015ab6:	4640      	mov	r0, r8
 8015ab8:	4649      	mov	r1, r9
 8015aba:	f7ea fdbd 	bl	8000638 <__aeabi_dmul>
 8015abe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015ac2:	f7eb f83f 	bl	8000b44 <__aeabi_dcmpge>
 8015ac6:	9e01      	ldr	r6, [sp, #4]
 8015ac8:	4637      	mov	r7, r6
 8015aca:	2800      	cmp	r0, #0
 8015acc:	f040 8243 	bne.w	8015f56 <_dtoa_r+0x956>
 8015ad0:	9d00      	ldr	r5, [sp, #0]
 8015ad2:	2331      	movs	r3, #49	; 0x31
 8015ad4:	f805 3b01 	strb.w	r3, [r5], #1
 8015ad8:	f10a 0a01 	add.w	sl, sl, #1
 8015adc:	e23f      	b.n	8015f5e <_dtoa_r+0x95e>
 8015ade:	07f2      	lsls	r2, r6, #31
 8015ae0:	d505      	bpl.n	8015aee <_dtoa_r+0x4ee>
 8015ae2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015ae6:	f7ea fda7 	bl	8000638 <__aeabi_dmul>
 8015aea:	3501      	adds	r5, #1
 8015aec:	2301      	movs	r3, #1
 8015aee:	1076      	asrs	r6, r6, #1
 8015af0:	3708      	adds	r7, #8
 8015af2:	e76c      	b.n	80159ce <_dtoa_r+0x3ce>
 8015af4:	2502      	movs	r5, #2
 8015af6:	e76f      	b.n	80159d8 <_dtoa_r+0x3d8>
 8015af8:	9b01      	ldr	r3, [sp, #4]
 8015afa:	f8cd a01c 	str.w	sl, [sp, #28]
 8015afe:	930c      	str	r3, [sp, #48]	; 0x30
 8015b00:	e78d      	b.n	8015a1e <_dtoa_r+0x41e>
 8015b02:	9900      	ldr	r1, [sp, #0]
 8015b04:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015b06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015b08:	4b4e      	ldr	r3, [pc, #312]	; (8015c44 <_dtoa_r+0x644>)
 8015b0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015b0e:	4401      	add	r1, r0
 8015b10:	9102      	str	r1, [sp, #8]
 8015b12:	9908      	ldr	r1, [sp, #32]
 8015b14:	eeb0 8a47 	vmov.f32	s16, s14
 8015b18:	eef0 8a67 	vmov.f32	s17, s15
 8015b1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015b20:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015b24:	2900      	cmp	r1, #0
 8015b26:	d045      	beq.n	8015bb4 <_dtoa_r+0x5b4>
 8015b28:	494c      	ldr	r1, [pc, #304]	; (8015c5c <_dtoa_r+0x65c>)
 8015b2a:	2000      	movs	r0, #0
 8015b2c:	f7ea feae 	bl	800088c <__aeabi_ddiv>
 8015b30:	ec53 2b18 	vmov	r2, r3, d8
 8015b34:	f7ea fbc8 	bl	80002c8 <__aeabi_dsub>
 8015b38:	9d00      	ldr	r5, [sp, #0]
 8015b3a:	ec41 0b18 	vmov	d8, r0, r1
 8015b3e:	4639      	mov	r1, r7
 8015b40:	4630      	mov	r0, r6
 8015b42:	f7eb f829 	bl	8000b98 <__aeabi_d2iz>
 8015b46:	900c      	str	r0, [sp, #48]	; 0x30
 8015b48:	f7ea fd0c 	bl	8000564 <__aeabi_i2d>
 8015b4c:	4602      	mov	r2, r0
 8015b4e:	460b      	mov	r3, r1
 8015b50:	4630      	mov	r0, r6
 8015b52:	4639      	mov	r1, r7
 8015b54:	f7ea fbb8 	bl	80002c8 <__aeabi_dsub>
 8015b58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015b5a:	3330      	adds	r3, #48	; 0x30
 8015b5c:	f805 3b01 	strb.w	r3, [r5], #1
 8015b60:	ec53 2b18 	vmov	r2, r3, d8
 8015b64:	4606      	mov	r6, r0
 8015b66:	460f      	mov	r7, r1
 8015b68:	f7ea ffd8 	bl	8000b1c <__aeabi_dcmplt>
 8015b6c:	2800      	cmp	r0, #0
 8015b6e:	d165      	bne.n	8015c3c <_dtoa_r+0x63c>
 8015b70:	4632      	mov	r2, r6
 8015b72:	463b      	mov	r3, r7
 8015b74:	4935      	ldr	r1, [pc, #212]	; (8015c4c <_dtoa_r+0x64c>)
 8015b76:	2000      	movs	r0, #0
 8015b78:	f7ea fba6 	bl	80002c8 <__aeabi_dsub>
 8015b7c:	ec53 2b18 	vmov	r2, r3, d8
 8015b80:	f7ea ffcc 	bl	8000b1c <__aeabi_dcmplt>
 8015b84:	2800      	cmp	r0, #0
 8015b86:	f040 80b9 	bne.w	8015cfc <_dtoa_r+0x6fc>
 8015b8a:	9b02      	ldr	r3, [sp, #8]
 8015b8c:	429d      	cmp	r5, r3
 8015b8e:	f43f af75 	beq.w	8015a7c <_dtoa_r+0x47c>
 8015b92:	4b2f      	ldr	r3, [pc, #188]	; (8015c50 <_dtoa_r+0x650>)
 8015b94:	ec51 0b18 	vmov	r0, r1, d8
 8015b98:	2200      	movs	r2, #0
 8015b9a:	f7ea fd4d 	bl	8000638 <__aeabi_dmul>
 8015b9e:	4b2c      	ldr	r3, [pc, #176]	; (8015c50 <_dtoa_r+0x650>)
 8015ba0:	ec41 0b18 	vmov	d8, r0, r1
 8015ba4:	2200      	movs	r2, #0
 8015ba6:	4630      	mov	r0, r6
 8015ba8:	4639      	mov	r1, r7
 8015baa:	f7ea fd45 	bl	8000638 <__aeabi_dmul>
 8015bae:	4606      	mov	r6, r0
 8015bb0:	460f      	mov	r7, r1
 8015bb2:	e7c4      	b.n	8015b3e <_dtoa_r+0x53e>
 8015bb4:	ec51 0b17 	vmov	r0, r1, d7
 8015bb8:	f7ea fd3e 	bl	8000638 <__aeabi_dmul>
 8015bbc:	9b02      	ldr	r3, [sp, #8]
 8015bbe:	9d00      	ldr	r5, [sp, #0]
 8015bc0:	930c      	str	r3, [sp, #48]	; 0x30
 8015bc2:	ec41 0b18 	vmov	d8, r0, r1
 8015bc6:	4639      	mov	r1, r7
 8015bc8:	4630      	mov	r0, r6
 8015bca:	f7ea ffe5 	bl	8000b98 <__aeabi_d2iz>
 8015bce:	9011      	str	r0, [sp, #68]	; 0x44
 8015bd0:	f7ea fcc8 	bl	8000564 <__aeabi_i2d>
 8015bd4:	4602      	mov	r2, r0
 8015bd6:	460b      	mov	r3, r1
 8015bd8:	4630      	mov	r0, r6
 8015bda:	4639      	mov	r1, r7
 8015bdc:	f7ea fb74 	bl	80002c8 <__aeabi_dsub>
 8015be0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015be2:	3330      	adds	r3, #48	; 0x30
 8015be4:	f805 3b01 	strb.w	r3, [r5], #1
 8015be8:	9b02      	ldr	r3, [sp, #8]
 8015bea:	429d      	cmp	r5, r3
 8015bec:	4606      	mov	r6, r0
 8015bee:	460f      	mov	r7, r1
 8015bf0:	f04f 0200 	mov.w	r2, #0
 8015bf4:	d134      	bne.n	8015c60 <_dtoa_r+0x660>
 8015bf6:	4b19      	ldr	r3, [pc, #100]	; (8015c5c <_dtoa_r+0x65c>)
 8015bf8:	ec51 0b18 	vmov	r0, r1, d8
 8015bfc:	f7ea fb66 	bl	80002cc <__adddf3>
 8015c00:	4602      	mov	r2, r0
 8015c02:	460b      	mov	r3, r1
 8015c04:	4630      	mov	r0, r6
 8015c06:	4639      	mov	r1, r7
 8015c08:	f7ea ffa6 	bl	8000b58 <__aeabi_dcmpgt>
 8015c0c:	2800      	cmp	r0, #0
 8015c0e:	d175      	bne.n	8015cfc <_dtoa_r+0x6fc>
 8015c10:	ec53 2b18 	vmov	r2, r3, d8
 8015c14:	4911      	ldr	r1, [pc, #68]	; (8015c5c <_dtoa_r+0x65c>)
 8015c16:	2000      	movs	r0, #0
 8015c18:	f7ea fb56 	bl	80002c8 <__aeabi_dsub>
 8015c1c:	4602      	mov	r2, r0
 8015c1e:	460b      	mov	r3, r1
 8015c20:	4630      	mov	r0, r6
 8015c22:	4639      	mov	r1, r7
 8015c24:	f7ea ff7a 	bl	8000b1c <__aeabi_dcmplt>
 8015c28:	2800      	cmp	r0, #0
 8015c2a:	f43f af27 	beq.w	8015a7c <_dtoa_r+0x47c>
 8015c2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015c30:	1e6b      	subs	r3, r5, #1
 8015c32:	930c      	str	r3, [sp, #48]	; 0x30
 8015c34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015c38:	2b30      	cmp	r3, #48	; 0x30
 8015c3a:	d0f8      	beq.n	8015c2e <_dtoa_r+0x62e>
 8015c3c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8015c40:	e04a      	b.n	8015cd8 <_dtoa_r+0x6d8>
 8015c42:	bf00      	nop
 8015c44:	0801a958 	.word	0x0801a958
 8015c48:	0801a930 	.word	0x0801a930
 8015c4c:	3ff00000 	.word	0x3ff00000
 8015c50:	40240000 	.word	0x40240000
 8015c54:	401c0000 	.word	0x401c0000
 8015c58:	40140000 	.word	0x40140000
 8015c5c:	3fe00000 	.word	0x3fe00000
 8015c60:	4baf      	ldr	r3, [pc, #700]	; (8015f20 <_dtoa_r+0x920>)
 8015c62:	f7ea fce9 	bl	8000638 <__aeabi_dmul>
 8015c66:	4606      	mov	r6, r0
 8015c68:	460f      	mov	r7, r1
 8015c6a:	e7ac      	b.n	8015bc6 <_dtoa_r+0x5c6>
 8015c6c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8015c70:	9d00      	ldr	r5, [sp, #0]
 8015c72:	4642      	mov	r2, r8
 8015c74:	464b      	mov	r3, r9
 8015c76:	4630      	mov	r0, r6
 8015c78:	4639      	mov	r1, r7
 8015c7a:	f7ea fe07 	bl	800088c <__aeabi_ddiv>
 8015c7e:	f7ea ff8b 	bl	8000b98 <__aeabi_d2iz>
 8015c82:	9002      	str	r0, [sp, #8]
 8015c84:	f7ea fc6e 	bl	8000564 <__aeabi_i2d>
 8015c88:	4642      	mov	r2, r8
 8015c8a:	464b      	mov	r3, r9
 8015c8c:	f7ea fcd4 	bl	8000638 <__aeabi_dmul>
 8015c90:	4602      	mov	r2, r0
 8015c92:	460b      	mov	r3, r1
 8015c94:	4630      	mov	r0, r6
 8015c96:	4639      	mov	r1, r7
 8015c98:	f7ea fb16 	bl	80002c8 <__aeabi_dsub>
 8015c9c:	9e02      	ldr	r6, [sp, #8]
 8015c9e:	9f01      	ldr	r7, [sp, #4]
 8015ca0:	3630      	adds	r6, #48	; 0x30
 8015ca2:	f805 6b01 	strb.w	r6, [r5], #1
 8015ca6:	9e00      	ldr	r6, [sp, #0]
 8015ca8:	1bae      	subs	r6, r5, r6
 8015caa:	42b7      	cmp	r7, r6
 8015cac:	4602      	mov	r2, r0
 8015cae:	460b      	mov	r3, r1
 8015cb0:	d137      	bne.n	8015d22 <_dtoa_r+0x722>
 8015cb2:	f7ea fb0b 	bl	80002cc <__adddf3>
 8015cb6:	4642      	mov	r2, r8
 8015cb8:	464b      	mov	r3, r9
 8015cba:	4606      	mov	r6, r0
 8015cbc:	460f      	mov	r7, r1
 8015cbe:	f7ea ff4b 	bl	8000b58 <__aeabi_dcmpgt>
 8015cc2:	b9c8      	cbnz	r0, 8015cf8 <_dtoa_r+0x6f8>
 8015cc4:	4642      	mov	r2, r8
 8015cc6:	464b      	mov	r3, r9
 8015cc8:	4630      	mov	r0, r6
 8015cca:	4639      	mov	r1, r7
 8015ccc:	f7ea ff1c 	bl	8000b08 <__aeabi_dcmpeq>
 8015cd0:	b110      	cbz	r0, 8015cd8 <_dtoa_r+0x6d8>
 8015cd2:	9b02      	ldr	r3, [sp, #8]
 8015cd4:	07d9      	lsls	r1, r3, #31
 8015cd6:	d40f      	bmi.n	8015cf8 <_dtoa_r+0x6f8>
 8015cd8:	4620      	mov	r0, r4
 8015cda:	4659      	mov	r1, fp
 8015cdc:	f001 f88e 	bl	8016dfc <_Bfree>
 8015ce0:	2300      	movs	r3, #0
 8015ce2:	702b      	strb	r3, [r5, #0]
 8015ce4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ce6:	f10a 0001 	add.w	r0, sl, #1
 8015cea:	6018      	str	r0, [r3, #0]
 8015cec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	f43f acd8 	beq.w	80156a4 <_dtoa_r+0xa4>
 8015cf4:	601d      	str	r5, [r3, #0]
 8015cf6:	e4d5      	b.n	80156a4 <_dtoa_r+0xa4>
 8015cf8:	f8cd a01c 	str.w	sl, [sp, #28]
 8015cfc:	462b      	mov	r3, r5
 8015cfe:	461d      	mov	r5, r3
 8015d00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015d04:	2a39      	cmp	r2, #57	; 0x39
 8015d06:	d108      	bne.n	8015d1a <_dtoa_r+0x71a>
 8015d08:	9a00      	ldr	r2, [sp, #0]
 8015d0a:	429a      	cmp	r2, r3
 8015d0c:	d1f7      	bne.n	8015cfe <_dtoa_r+0x6fe>
 8015d0e:	9a07      	ldr	r2, [sp, #28]
 8015d10:	9900      	ldr	r1, [sp, #0]
 8015d12:	3201      	adds	r2, #1
 8015d14:	9207      	str	r2, [sp, #28]
 8015d16:	2230      	movs	r2, #48	; 0x30
 8015d18:	700a      	strb	r2, [r1, #0]
 8015d1a:	781a      	ldrb	r2, [r3, #0]
 8015d1c:	3201      	adds	r2, #1
 8015d1e:	701a      	strb	r2, [r3, #0]
 8015d20:	e78c      	b.n	8015c3c <_dtoa_r+0x63c>
 8015d22:	4b7f      	ldr	r3, [pc, #508]	; (8015f20 <_dtoa_r+0x920>)
 8015d24:	2200      	movs	r2, #0
 8015d26:	f7ea fc87 	bl	8000638 <__aeabi_dmul>
 8015d2a:	2200      	movs	r2, #0
 8015d2c:	2300      	movs	r3, #0
 8015d2e:	4606      	mov	r6, r0
 8015d30:	460f      	mov	r7, r1
 8015d32:	f7ea fee9 	bl	8000b08 <__aeabi_dcmpeq>
 8015d36:	2800      	cmp	r0, #0
 8015d38:	d09b      	beq.n	8015c72 <_dtoa_r+0x672>
 8015d3a:	e7cd      	b.n	8015cd8 <_dtoa_r+0x6d8>
 8015d3c:	9a08      	ldr	r2, [sp, #32]
 8015d3e:	2a00      	cmp	r2, #0
 8015d40:	f000 80c4 	beq.w	8015ecc <_dtoa_r+0x8cc>
 8015d44:	9a05      	ldr	r2, [sp, #20]
 8015d46:	2a01      	cmp	r2, #1
 8015d48:	f300 80a8 	bgt.w	8015e9c <_dtoa_r+0x89c>
 8015d4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015d4e:	2a00      	cmp	r2, #0
 8015d50:	f000 80a0 	beq.w	8015e94 <_dtoa_r+0x894>
 8015d54:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015d58:	9e06      	ldr	r6, [sp, #24]
 8015d5a:	4645      	mov	r5, r8
 8015d5c:	9a04      	ldr	r2, [sp, #16]
 8015d5e:	2101      	movs	r1, #1
 8015d60:	441a      	add	r2, r3
 8015d62:	4620      	mov	r0, r4
 8015d64:	4498      	add	r8, r3
 8015d66:	9204      	str	r2, [sp, #16]
 8015d68:	f001 f94e 	bl	8017008 <__i2b>
 8015d6c:	4607      	mov	r7, r0
 8015d6e:	2d00      	cmp	r5, #0
 8015d70:	dd0b      	ble.n	8015d8a <_dtoa_r+0x78a>
 8015d72:	9b04      	ldr	r3, [sp, #16]
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	dd08      	ble.n	8015d8a <_dtoa_r+0x78a>
 8015d78:	42ab      	cmp	r3, r5
 8015d7a:	9a04      	ldr	r2, [sp, #16]
 8015d7c:	bfa8      	it	ge
 8015d7e:	462b      	movge	r3, r5
 8015d80:	eba8 0803 	sub.w	r8, r8, r3
 8015d84:	1aed      	subs	r5, r5, r3
 8015d86:	1ad3      	subs	r3, r2, r3
 8015d88:	9304      	str	r3, [sp, #16]
 8015d8a:	9b06      	ldr	r3, [sp, #24]
 8015d8c:	b1fb      	cbz	r3, 8015dce <_dtoa_r+0x7ce>
 8015d8e:	9b08      	ldr	r3, [sp, #32]
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	f000 809f 	beq.w	8015ed4 <_dtoa_r+0x8d4>
 8015d96:	2e00      	cmp	r6, #0
 8015d98:	dd11      	ble.n	8015dbe <_dtoa_r+0x7be>
 8015d9a:	4639      	mov	r1, r7
 8015d9c:	4632      	mov	r2, r6
 8015d9e:	4620      	mov	r0, r4
 8015da0:	f001 f9ee 	bl	8017180 <__pow5mult>
 8015da4:	465a      	mov	r2, fp
 8015da6:	4601      	mov	r1, r0
 8015da8:	4607      	mov	r7, r0
 8015daa:	4620      	mov	r0, r4
 8015dac:	f001 f942 	bl	8017034 <__multiply>
 8015db0:	4659      	mov	r1, fp
 8015db2:	9007      	str	r0, [sp, #28]
 8015db4:	4620      	mov	r0, r4
 8015db6:	f001 f821 	bl	8016dfc <_Bfree>
 8015dba:	9b07      	ldr	r3, [sp, #28]
 8015dbc:	469b      	mov	fp, r3
 8015dbe:	9b06      	ldr	r3, [sp, #24]
 8015dc0:	1b9a      	subs	r2, r3, r6
 8015dc2:	d004      	beq.n	8015dce <_dtoa_r+0x7ce>
 8015dc4:	4659      	mov	r1, fp
 8015dc6:	4620      	mov	r0, r4
 8015dc8:	f001 f9da 	bl	8017180 <__pow5mult>
 8015dcc:	4683      	mov	fp, r0
 8015dce:	2101      	movs	r1, #1
 8015dd0:	4620      	mov	r0, r4
 8015dd2:	f001 f919 	bl	8017008 <__i2b>
 8015dd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	4606      	mov	r6, r0
 8015ddc:	dd7c      	ble.n	8015ed8 <_dtoa_r+0x8d8>
 8015dde:	461a      	mov	r2, r3
 8015de0:	4601      	mov	r1, r0
 8015de2:	4620      	mov	r0, r4
 8015de4:	f001 f9cc 	bl	8017180 <__pow5mult>
 8015de8:	9b05      	ldr	r3, [sp, #20]
 8015dea:	2b01      	cmp	r3, #1
 8015dec:	4606      	mov	r6, r0
 8015dee:	dd76      	ble.n	8015ede <_dtoa_r+0x8de>
 8015df0:	2300      	movs	r3, #0
 8015df2:	9306      	str	r3, [sp, #24]
 8015df4:	6933      	ldr	r3, [r6, #16]
 8015df6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015dfa:	6918      	ldr	r0, [r3, #16]
 8015dfc:	f001 f8b4 	bl	8016f68 <__hi0bits>
 8015e00:	f1c0 0020 	rsb	r0, r0, #32
 8015e04:	9b04      	ldr	r3, [sp, #16]
 8015e06:	4418      	add	r0, r3
 8015e08:	f010 001f 	ands.w	r0, r0, #31
 8015e0c:	f000 8086 	beq.w	8015f1c <_dtoa_r+0x91c>
 8015e10:	f1c0 0320 	rsb	r3, r0, #32
 8015e14:	2b04      	cmp	r3, #4
 8015e16:	dd7f      	ble.n	8015f18 <_dtoa_r+0x918>
 8015e18:	f1c0 001c 	rsb	r0, r0, #28
 8015e1c:	9b04      	ldr	r3, [sp, #16]
 8015e1e:	4403      	add	r3, r0
 8015e20:	4480      	add	r8, r0
 8015e22:	4405      	add	r5, r0
 8015e24:	9304      	str	r3, [sp, #16]
 8015e26:	f1b8 0f00 	cmp.w	r8, #0
 8015e2a:	dd05      	ble.n	8015e38 <_dtoa_r+0x838>
 8015e2c:	4659      	mov	r1, fp
 8015e2e:	4642      	mov	r2, r8
 8015e30:	4620      	mov	r0, r4
 8015e32:	f001 f9ff 	bl	8017234 <__lshift>
 8015e36:	4683      	mov	fp, r0
 8015e38:	9b04      	ldr	r3, [sp, #16]
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	dd05      	ble.n	8015e4a <_dtoa_r+0x84a>
 8015e3e:	4631      	mov	r1, r6
 8015e40:	461a      	mov	r2, r3
 8015e42:	4620      	mov	r0, r4
 8015e44:	f001 f9f6 	bl	8017234 <__lshift>
 8015e48:	4606      	mov	r6, r0
 8015e4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d069      	beq.n	8015f24 <_dtoa_r+0x924>
 8015e50:	4631      	mov	r1, r6
 8015e52:	4658      	mov	r0, fp
 8015e54:	f001 fa5a 	bl	801730c <__mcmp>
 8015e58:	2800      	cmp	r0, #0
 8015e5a:	da63      	bge.n	8015f24 <_dtoa_r+0x924>
 8015e5c:	2300      	movs	r3, #0
 8015e5e:	4659      	mov	r1, fp
 8015e60:	220a      	movs	r2, #10
 8015e62:	4620      	mov	r0, r4
 8015e64:	f000 ffec 	bl	8016e40 <__multadd>
 8015e68:	9b08      	ldr	r3, [sp, #32]
 8015e6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015e6e:	4683      	mov	fp, r0
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	f000 818f 	beq.w	8016194 <_dtoa_r+0xb94>
 8015e76:	4639      	mov	r1, r7
 8015e78:	2300      	movs	r3, #0
 8015e7a:	220a      	movs	r2, #10
 8015e7c:	4620      	mov	r0, r4
 8015e7e:	f000 ffdf 	bl	8016e40 <__multadd>
 8015e82:	f1b9 0f00 	cmp.w	r9, #0
 8015e86:	4607      	mov	r7, r0
 8015e88:	f300 808e 	bgt.w	8015fa8 <_dtoa_r+0x9a8>
 8015e8c:	9b05      	ldr	r3, [sp, #20]
 8015e8e:	2b02      	cmp	r3, #2
 8015e90:	dc50      	bgt.n	8015f34 <_dtoa_r+0x934>
 8015e92:	e089      	b.n	8015fa8 <_dtoa_r+0x9a8>
 8015e94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015e96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015e9a:	e75d      	b.n	8015d58 <_dtoa_r+0x758>
 8015e9c:	9b01      	ldr	r3, [sp, #4]
 8015e9e:	1e5e      	subs	r6, r3, #1
 8015ea0:	9b06      	ldr	r3, [sp, #24]
 8015ea2:	42b3      	cmp	r3, r6
 8015ea4:	bfbf      	itttt	lt
 8015ea6:	9b06      	ldrlt	r3, [sp, #24]
 8015ea8:	9606      	strlt	r6, [sp, #24]
 8015eaa:	1af2      	sublt	r2, r6, r3
 8015eac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8015eae:	bfb6      	itet	lt
 8015eb0:	189b      	addlt	r3, r3, r2
 8015eb2:	1b9e      	subge	r6, r3, r6
 8015eb4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8015eb6:	9b01      	ldr	r3, [sp, #4]
 8015eb8:	bfb8      	it	lt
 8015eba:	2600      	movlt	r6, #0
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	bfb5      	itete	lt
 8015ec0:	eba8 0503 	sublt.w	r5, r8, r3
 8015ec4:	9b01      	ldrge	r3, [sp, #4]
 8015ec6:	2300      	movlt	r3, #0
 8015ec8:	4645      	movge	r5, r8
 8015eca:	e747      	b.n	8015d5c <_dtoa_r+0x75c>
 8015ecc:	9e06      	ldr	r6, [sp, #24]
 8015ece:	9f08      	ldr	r7, [sp, #32]
 8015ed0:	4645      	mov	r5, r8
 8015ed2:	e74c      	b.n	8015d6e <_dtoa_r+0x76e>
 8015ed4:	9a06      	ldr	r2, [sp, #24]
 8015ed6:	e775      	b.n	8015dc4 <_dtoa_r+0x7c4>
 8015ed8:	9b05      	ldr	r3, [sp, #20]
 8015eda:	2b01      	cmp	r3, #1
 8015edc:	dc18      	bgt.n	8015f10 <_dtoa_r+0x910>
 8015ede:	9b02      	ldr	r3, [sp, #8]
 8015ee0:	b9b3      	cbnz	r3, 8015f10 <_dtoa_r+0x910>
 8015ee2:	9b03      	ldr	r3, [sp, #12]
 8015ee4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015ee8:	b9a3      	cbnz	r3, 8015f14 <_dtoa_r+0x914>
 8015eea:	9b03      	ldr	r3, [sp, #12]
 8015eec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015ef0:	0d1b      	lsrs	r3, r3, #20
 8015ef2:	051b      	lsls	r3, r3, #20
 8015ef4:	b12b      	cbz	r3, 8015f02 <_dtoa_r+0x902>
 8015ef6:	9b04      	ldr	r3, [sp, #16]
 8015ef8:	3301      	adds	r3, #1
 8015efa:	9304      	str	r3, [sp, #16]
 8015efc:	f108 0801 	add.w	r8, r8, #1
 8015f00:	2301      	movs	r3, #1
 8015f02:	9306      	str	r3, [sp, #24]
 8015f04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	f47f af74 	bne.w	8015df4 <_dtoa_r+0x7f4>
 8015f0c:	2001      	movs	r0, #1
 8015f0e:	e779      	b.n	8015e04 <_dtoa_r+0x804>
 8015f10:	2300      	movs	r3, #0
 8015f12:	e7f6      	b.n	8015f02 <_dtoa_r+0x902>
 8015f14:	9b02      	ldr	r3, [sp, #8]
 8015f16:	e7f4      	b.n	8015f02 <_dtoa_r+0x902>
 8015f18:	d085      	beq.n	8015e26 <_dtoa_r+0x826>
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	301c      	adds	r0, #28
 8015f1e:	e77d      	b.n	8015e1c <_dtoa_r+0x81c>
 8015f20:	40240000 	.word	0x40240000
 8015f24:	9b01      	ldr	r3, [sp, #4]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	dc38      	bgt.n	8015f9c <_dtoa_r+0x99c>
 8015f2a:	9b05      	ldr	r3, [sp, #20]
 8015f2c:	2b02      	cmp	r3, #2
 8015f2e:	dd35      	ble.n	8015f9c <_dtoa_r+0x99c>
 8015f30:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8015f34:	f1b9 0f00 	cmp.w	r9, #0
 8015f38:	d10d      	bne.n	8015f56 <_dtoa_r+0x956>
 8015f3a:	4631      	mov	r1, r6
 8015f3c:	464b      	mov	r3, r9
 8015f3e:	2205      	movs	r2, #5
 8015f40:	4620      	mov	r0, r4
 8015f42:	f000 ff7d 	bl	8016e40 <__multadd>
 8015f46:	4601      	mov	r1, r0
 8015f48:	4606      	mov	r6, r0
 8015f4a:	4658      	mov	r0, fp
 8015f4c:	f001 f9de 	bl	801730c <__mcmp>
 8015f50:	2800      	cmp	r0, #0
 8015f52:	f73f adbd 	bgt.w	8015ad0 <_dtoa_r+0x4d0>
 8015f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f58:	9d00      	ldr	r5, [sp, #0]
 8015f5a:	ea6f 0a03 	mvn.w	sl, r3
 8015f5e:	f04f 0800 	mov.w	r8, #0
 8015f62:	4631      	mov	r1, r6
 8015f64:	4620      	mov	r0, r4
 8015f66:	f000 ff49 	bl	8016dfc <_Bfree>
 8015f6a:	2f00      	cmp	r7, #0
 8015f6c:	f43f aeb4 	beq.w	8015cd8 <_dtoa_r+0x6d8>
 8015f70:	f1b8 0f00 	cmp.w	r8, #0
 8015f74:	d005      	beq.n	8015f82 <_dtoa_r+0x982>
 8015f76:	45b8      	cmp	r8, r7
 8015f78:	d003      	beq.n	8015f82 <_dtoa_r+0x982>
 8015f7a:	4641      	mov	r1, r8
 8015f7c:	4620      	mov	r0, r4
 8015f7e:	f000 ff3d 	bl	8016dfc <_Bfree>
 8015f82:	4639      	mov	r1, r7
 8015f84:	4620      	mov	r0, r4
 8015f86:	f000 ff39 	bl	8016dfc <_Bfree>
 8015f8a:	e6a5      	b.n	8015cd8 <_dtoa_r+0x6d8>
 8015f8c:	2600      	movs	r6, #0
 8015f8e:	4637      	mov	r7, r6
 8015f90:	e7e1      	b.n	8015f56 <_dtoa_r+0x956>
 8015f92:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8015f94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8015f98:	4637      	mov	r7, r6
 8015f9a:	e599      	b.n	8015ad0 <_dtoa_r+0x4d0>
 8015f9c:	9b08      	ldr	r3, [sp, #32]
 8015f9e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	f000 80fd 	beq.w	80161a2 <_dtoa_r+0xba2>
 8015fa8:	2d00      	cmp	r5, #0
 8015faa:	dd05      	ble.n	8015fb8 <_dtoa_r+0x9b8>
 8015fac:	4639      	mov	r1, r7
 8015fae:	462a      	mov	r2, r5
 8015fb0:	4620      	mov	r0, r4
 8015fb2:	f001 f93f 	bl	8017234 <__lshift>
 8015fb6:	4607      	mov	r7, r0
 8015fb8:	9b06      	ldr	r3, [sp, #24]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d05c      	beq.n	8016078 <_dtoa_r+0xa78>
 8015fbe:	6879      	ldr	r1, [r7, #4]
 8015fc0:	4620      	mov	r0, r4
 8015fc2:	f000 fedb 	bl	8016d7c <_Balloc>
 8015fc6:	4605      	mov	r5, r0
 8015fc8:	b928      	cbnz	r0, 8015fd6 <_dtoa_r+0x9d6>
 8015fca:	4b80      	ldr	r3, [pc, #512]	; (80161cc <_dtoa_r+0xbcc>)
 8015fcc:	4602      	mov	r2, r0
 8015fce:	f240 21ea 	movw	r1, #746	; 0x2ea
 8015fd2:	f7ff bb2e 	b.w	8015632 <_dtoa_r+0x32>
 8015fd6:	693a      	ldr	r2, [r7, #16]
 8015fd8:	3202      	adds	r2, #2
 8015fda:	0092      	lsls	r2, r2, #2
 8015fdc:	f107 010c 	add.w	r1, r7, #12
 8015fe0:	300c      	adds	r0, #12
 8015fe2:	f7fc fbb7 	bl	8012754 <memcpy>
 8015fe6:	2201      	movs	r2, #1
 8015fe8:	4629      	mov	r1, r5
 8015fea:	4620      	mov	r0, r4
 8015fec:	f001 f922 	bl	8017234 <__lshift>
 8015ff0:	9b00      	ldr	r3, [sp, #0]
 8015ff2:	3301      	adds	r3, #1
 8015ff4:	9301      	str	r3, [sp, #4]
 8015ff6:	9b00      	ldr	r3, [sp, #0]
 8015ff8:	444b      	add	r3, r9
 8015ffa:	9307      	str	r3, [sp, #28]
 8015ffc:	9b02      	ldr	r3, [sp, #8]
 8015ffe:	f003 0301 	and.w	r3, r3, #1
 8016002:	46b8      	mov	r8, r7
 8016004:	9306      	str	r3, [sp, #24]
 8016006:	4607      	mov	r7, r0
 8016008:	9b01      	ldr	r3, [sp, #4]
 801600a:	4631      	mov	r1, r6
 801600c:	3b01      	subs	r3, #1
 801600e:	4658      	mov	r0, fp
 8016010:	9302      	str	r3, [sp, #8]
 8016012:	f7ff fa67 	bl	80154e4 <quorem>
 8016016:	4603      	mov	r3, r0
 8016018:	3330      	adds	r3, #48	; 0x30
 801601a:	9004      	str	r0, [sp, #16]
 801601c:	4641      	mov	r1, r8
 801601e:	4658      	mov	r0, fp
 8016020:	9308      	str	r3, [sp, #32]
 8016022:	f001 f973 	bl	801730c <__mcmp>
 8016026:	463a      	mov	r2, r7
 8016028:	4681      	mov	r9, r0
 801602a:	4631      	mov	r1, r6
 801602c:	4620      	mov	r0, r4
 801602e:	f001 f989 	bl	8017344 <__mdiff>
 8016032:	68c2      	ldr	r2, [r0, #12]
 8016034:	9b08      	ldr	r3, [sp, #32]
 8016036:	4605      	mov	r5, r0
 8016038:	bb02      	cbnz	r2, 801607c <_dtoa_r+0xa7c>
 801603a:	4601      	mov	r1, r0
 801603c:	4658      	mov	r0, fp
 801603e:	f001 f965 	bl	801730c <__mcmp>
 8016042:	9b08      	ldr	r3, [sp, #32]
 8016044:	4602      	mov	r2, r0
 8016046:	4629      	mov	r1, r5
 8016048:	4620      	mov	r0, r4
 801604a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801604e:	f000 fed5 	bl	8016dfc <_Bfree>
 8016052:	9b05      	ldr	r3, [sp, #20]
 8016054:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016056:	9d01      	ldr	r5, [sp, #4]
 8016058:	ea43 0102 	orr.w	r1, r3, r2
 801605c:	9b06      	ldr	r3, [sp, #24]
 801605e:	430b      	orrs	r3, r1
 8016060:	9b08      	ldr	r3, [sp, #32]
 8016062:	d10d      	bne.n	8016080 <_dtoa_r+0xa80>
 8016064:	2b39      	cmp	r3, #57	; 0x39
 8016066:	d029      	beq.n	80160bc <_dtoa_r+0xabc>
 8016068:	f1b9 0f00 	cmp.w	r9, #0
 801606c:	dd01      	ble.n	8016072 <_dtoa_r+0xa72>
 801606e:	9b04      	ldr	r3, [sp, #16]
 8016070:	3331      	adds	r3, #49	; 0x31
 8016072:	9a02      	ldr	r2, [sp, #8]
 8016074:	7013      	strb	r3, [r2, #0]
 8016076:	e774      	b.n	8015f62 <_dtoa_r+0x962>
 8016078:	4638      	mov	r0, r7
 801607a:	e7b9      	b.n	8015ff0 <_dtoa_r+0x9f0>
 801607c:	2201      	movs	r2, #1
 801607e:	e7e2      	b.n	8016046 <_dtoa_r+0xa46>
 8016080:	f1b9 0f00 	cmp.w	r9, #0
 8016084:	db06      	blt.n	8016094 <_dtoa_r+0xa94>
 8016086:	9905      	ldr	r1, [sp, #20]
 8016088:	ea41 0909 	orr.w	r9, r1, r9
 801608c:	9906      	ldr	r1, [sp, #24]
 801608e:	ea59 0101 	orrs.w	r1, r9, r1
 8016092:	d120      	bne.n	80160d6 <_dtoa_r+0xad6>
 8016094:	2a00      	cmp	r2, #0
 8016096:	ddec      	ble.n	8016072 <_dtoa_r+0xa72>
 8016098:	4659      	mov	r1, fp
 801609a:	2201      	movs	r2, #1
 801609c:	4620      	mov	r0, r4
 801609e:	9301      	str	r3, [sp, #4]
 80160a0:	f001 f8c8 	bl	8017234 <__lshift>
 80160a4:	4631      	mov	r1, r6
 80160a6:	4683      	mov	fp, r0
 80160a8:	f001 f930 	bl	801730c <__mcmp>
 80160ac:	2800      	cmp	r0, #0
 80160ae:	9b01      	ldr	r3, [sp, #4]
 80160b0:	dc02      	bgt.n	80160b8 <_dtoa_r+0xab8>
 80160b2:	d1de      	bne.n	8016072 <_dtoa_r+0xa72>
 80160b4:	07da      	lsls	r2, r3, #31
 80160b6:	d5dc      	bpl.n	8016072 <_dtoa_r+0xa72>
 80160b8:	2b39      	cmp	r3, #57	; 0x39
 80160ba:	d1d8      	bne.n	801606e <_dtoa_r+0xa6e>
 80160bc:	9a02      	ldr	r2, [sp, #8]
 80160be:	2339      	movs	r3, #57	; 0x39
 80160c0:	7013      	strb	r3, [r2, #0]
 80160c2:	462b      	mov	r3, r5
 80160c4:	461d      	mov	r5, r3
 80160c6:	3b01      	subs	r3, #1
 80160c8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80160cc:	2a39      	cmp	r2, #57	; 0x39
 80160ce:	d050      	beq.n	8016172 <_dtoa_r+0xb72>
 80160d0:	3201      	adds	r2, #1
 80160d2:	701a      	strb	r2, [r3, #0]
 80160d4:	e745      	b.n	8015f62 <_dtoa_r+0x962>
 80160d6:	2a00      	cmp	r2, #0
 80160d8:	dd03      	ble.n	80160e2 <_dtoa_r+0xae2>
 80160da:	2b39      	cmp	r3, #57	; 0x39
 80160dc:	d0ee      	beq.n	80160bc <_dtoa_r+0xabc>
 80160de:	3301      	adds	r3, #1
 80160e0:	e7c7      	b.n	8016072 <_dtoa_r+0xa72>
 80160e2:	9a01      	ldr	r2, [sp, #4]
 80160e4:	9907      	ldr	r1, [sp, #28]
 80160e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80160ea:	428a      	cmp	r2, r1
 80160ec:	d02a      	beq.n	8016144 <_dtoa_r+0xb44>
 80160ee:	4659      	mov	r1, fp
 80160f0:	2300      	movs	r3, #0
 80160f2:	220a      	movs	r2, #10
 80160f4:	4620      	mov	r0, r4
 80160f6:	f000 fea3 	bl	8016e40 <__multadd>
 80160fa:	45b8      	cmp	r8, r7
 80160fc:	4683      	mov	fp, r0
 80160fe:	f04f 0300 	mov.w	r3, #0
 8016102:	f04f 020a 	mov.w	r2, #10
 8016106:	4641      	mov	r1, r8
 8016108:	4620      	mov	r0, r4
 801610a:	d107      	bne.n	801611c <_dtoa_r+0xb1c>
 801610c:	f000 fe98 	bl	8016e40 <__multadd>
 8016110:	4680      	mov	r8, r0
 8016112:	4607      	mov	r7, r0
 8016114:	9b01      	ldr	r3, [sp, #4]
 8016116:	3301      	adds	r3, #1
 8016118:	9301      	str	r3, [sp, #4]
 801611a:	e775      	b.n	8016008 <_dtoa_r+0xa08>
 801611c:	f000 fe90 	bl	8016e40 <__multadd>
 8016120:	4639      	mov	r1, r7
 8016122:	4680      	mov	r8, r0
 8016124:	2300      	movs	r3, #0
 8016126:	220a      	movs	r2, #10
 8016128:	4620      	mov	r0, r4
 801612a:	f000 fe89 	bl	8016e40 <__multadd>
 801612e:	4607      	mov	r7, r0
 8016130:	e7f0      	b.n	8016114 <_dtoa_r+0xb14>
 8016132:	f1b9 0f00 	cmp.w	r9, #0
 8016136:	9a00      	ldr	r2, [sp, #0]
 8016138:	bfcc      	ite	gt
 801613a:	464d      	movgt	r5, r9
 801613c:	2501      	movle	r5, #1
 801613e:	4415      	add	r5, r2
 8016140:	f04f 0800 	mov.w	r8, #0
 8016144:	4659      	mov	r1, fp
 8016146:	2201      	movs	r2, #1
 8016148:	4620      	mov	r0, r4
 801614a:	9301      	str	r3, [sp, #4]
 801614c:	f001 f872 	bl	8017234 <__lshift>
 8016150:	4631      	mov	r1, r6
 8016152:	4683      	mov	fp, r0
 8016154:	f001 f8da 	bl	801730c <__mcmp>
 8016158:	2800      	cmp	r0, #0
 801615a:	dcb2      	bgt.n	80160c2 <_dtoa_r+0xac2>
 801615c:	d102      	bne.n	8016164 <_dtoa_r+0xb64>
 801615e:	9b01      	ldr	r3, [sp, #4]
 8016160:	07db      	lsls	r3, r3, #31
 8016162:	d4ae      	bmi.n	80160c2 <_dtoa_r+0xac2>
 8016164:	462b      	mov	r3, r5
 8016166:	461d      	mov	r5, r3
 8016168:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801616c:	2a30      	cmp	r2, #48	; 0x30
 801616e:	d0fa      	beq.n	8016166 <_dtoa_r+0xb66>
 8016170:	e6f7      	b.n	8015f62 <_dtoa_r+0x962>
 8016172:	9a00      	ldr	r2, [sp, #0]
 8016174:	429a      	cmp	r2, r3
 8016176:	d1a5      	bne.n	80160c4 <_dtoa_r+0xac4>
 8016178:	f10a 0a01 	add.w	sl, sl, #1
 801617c:	2331      	movs	r3, #49	; 0x31
 801617e:	e779      	b.n	8016074 <_dtoa_r+0xa74>
 8016180:	4b13      	ldr	r3, [pc, #76]	; (80161d0 <_dtoa_r+0xbd0>)
 8016182:	f7ff baaf 	b.w	80156e4 <_dtoa_r+0xe4>
 8016186:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016188:	2b00      	cmp	r3, #0
 801618a:	f47f aa86 	bne.w	801569a <_dtoa_r+0x9a>
 801618e:	4b11      	ldr	r3, [pc, #68]	; (80161d4 <_dtoa_r+0xbd4>)
 8016190:	f7ff baa8 	b.w	80156e4 <_dtoa_r+0xe4>
 8016194:	f1b9 0f00 	cmp.w	r9, #0
 8016198:	dc03      	bgt.n	80161a2 <_dtoa_r+0xba2>
 801619a:	9b05      	ldr	r3, [sp, #20]
 801619c:	2b02      	cmp	r3, #2
 801619e:	f73f aec9 	bgt.w	8015f34 <_dtoa_r+0x934>
 80161a2:	9d00      	ldr	r5, [sp, #0]
 80161a4:	4631      	mov	r1, r6
 80161a6:	4658      	mov	r0, fp
 80161a8:	f7ff f99c 	bl	80154e4 <quorem>
 80161ac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80161b0:	f805 3b01 	strb.w	r3, [r5], #1
 80161b4:	9a00      	ldr	r2, [sp, #0]
 80161b6:	1aaa      	subs	r2, r5, r2
 80161b8:	4591      	cmp	r9, r2
 80161ba:	ddba      	ble.n	8016132 <_dtoa_r+0xb32>
 80161bc:	4659      	mov	r1, fp
 80161be:	2300      	movs	r3, #0
 80161c0:	220a      	movs	r2, #10
 80161c2:	4620      	mov	r0, r4
 80161c4:	f000 fe3c 	bl	8016e40 <__multadd>
 80161c8:	4683      	mov	fp, r0
 80161ca:	e7eb      	b.n	80161a4 <_dtoa_r+0xba4>
 80161cc:	0801a83d 	.word	0x0801a83d
 80161d0:	0801aa41 	.word	0x0801aa41
 80161d4:	0801a7d1 	.word	0x0801a7d1

080161d8 <__sflush_r>:
 80161d8:	898a      	ldrh	r2, [r1, #12]
 80161da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161de:	4605      	mov	r5, r0
 80161e0:	0710      	lsls	r0, r2, #28
 80161e2:	460c      	mov	r4, r1
 80161e4:	d458      	bmi.n	8016298 <__sflush_r+0xc0>
 80161e6:	684b      	ldr	r3, [r1, #4]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	dc05      	bgt.n	80161f8 <__sflush_r+0x20>
 80161ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	dc02      	bgt.n	80161f8 <__sflush_r+0x20>
 80161f2:	2000      	movs	r0, #0
 80161f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80161fa:	2e00      	cmp	r6, #0
 80161fc:	d0f9      	beq.n	80161f2 <__sflush_r+0x1a>
 80161fe:	2300      	movs	r3, #0
 8016200:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016204:	682f      	ldr	r7, [r5, #0]
 8016206:	602b      	str	r3, [r5, #0]
 8016208:	d032      	beq.n	8016270 <__sflush_r+0x98>
 801620a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801620c:	89a3      	ldrh	r3, [r4, #12]
 801620e:	075a      	lsls	r2, r3, #29
 8016210:	d505      	bpl.n	801621e <__sflush_r+0x46>
 8016212:	6863      	ldr	r3, [r4, #4]
 8016214:	1ac0      	subs	r0, r0, r3
 8016216:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016218:	b10b      	cbz	r3, 801621e <__sflush_r+0x46>
 801621a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801621c:	1ac0      	subs	r0, r0, r3
 801621e:	2300      	movs	r3, #0
 8016220:	4602      	mov	r2, r0
 8016222:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016224:	6a21      	ldr	r1, [r4, #32]
 8016226:	4628      	mov	r0, r5
 8016228:	47b0      	blx	r6
 801622a:	1c43      	adds	r3, r0, #1
 801622c:	89a3      	ldrh	r3, [r4, #12]
 801622e:	d106      	bne.n	801623e <__sflush_r+0x66>
 8016230:	6829      	ldr	r1, [r5, #0]
 8016232:	291d      	cmp	r1, #29
 8016234:	d82c      	bhi.n	8016290 <__sflush_r+0xb8>
 8016236:	4a2a      	ldr	r2, [pc, #168]	; (80162e0 <__sflush_r+0x108>)
 8016238:	40ca      	lsrs	r2, r1
 801623a:	07d6      	lsls	r6, r2, #31
 801623c:	d528      	bpl.n	8016290 <__sflush_r+0xb8>
 801623e:	2200      	movs	r2, #0
 8016240:	6062      	str	r2, [r4, #4]
 8016242:	04d9      	lsls	r1, r3, #19
 8016244:	6922      	ldr	r2, [r4, #16]
 8016246:	6022      	str	r2, [r4, #0]
 8016248:	d504      	bpl.n	8016254 <__sflush_r+0x7c>
 801624a:	1c42      	adds	r2, r0, #1
 801624c:	d101      	bne.n	8016252 <__sflush_r+0x7a>
 801624e:	682b      	ldr	r3, [r5, #0]
 8016250:	b903      	cbnz	r3, 8016254 <__sflush_r+0x7c>
 8016252:	6560      	str	r0, [r4, #84]	; 0x54
 8016254:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016256:	602f      	str	r7, [r5, #0]
 8016258:	2900      	cmp	r1, #0
 801625a:	d0ca      	beq.n	80161f2 <__sflush_r+0x1a>
 801625c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016260:	4299      	cmp	r1, r3
 8016262:	d002      	beq.n	801626a <__sflush_r+0x92>
 8016264:	4628      	mov	r0, r5
 8016266:	f7fc fd23 	bl	8012cb0 <_free_r>
 801626a:	2000      	movs	r0, #0
 801626c:	6360      	str	r0, [r4, #52]	; 0x34
 801626e:	e7c1      	b.n	80161f4 <__sflush_r+0x1c>
 8016270:	6a21      	ldr	r1, [r4, #32]
 8016272:	2301      	movs	r3, #1
 8016274:	4628      	mov	r0, r5
 8016276:	47b0      	blx	r6
 8016278:	1c41      	adds	r1, r0, #1
 801627a:	d1c7      	bne.n	801620c <__sflush_r+0x34>
 801627c:	682b      	ldr	r3, [r5, #0]
 801627e:	2b00      	cmp	r3, #0
 8016280:	d0c4      	beq.n	801620c <__sflush_r+0x34>
 8016282:	2b1d      	cmp	r3, #29
 8016284:	d001      	beq.n	801628a <__sflush_r+0xb2>
 8016286:	2b16      	cmp	r3, #22
 8016288:	d101      	bne.n	801628e <__sflush_r+0xb6>
 801628a:	602f      	str	r7, [r5, #0]
 801628c:	e7b1      	b.n	80161f2 <__sflush_r+0x1a>
 801628e:	89a3      	ldrh	r3, [r4, #12]
 8016290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016294:	81a3      	strh	r3, [r4, #12]
 8016296:	e7ad      	b.n	80161f4 <__sflush_r+0x1c>
 8016298:	690f      	ldr	r7, [r1, #16]
 801629a:	2f00      	cmp	r7, #0
 801629c:	d0a9      	beq.n	80161f2 <__sflush_r+0x1a>
 801629e:	0793      	lsls	r3, r2, #30
 80162a0:	680e      	ldr	r6, [r1, #0]
 80162a2:	bf08      	it	eq
 80162a4:	694b      	ldreq	r3, [r1, #20]
 80162a6:	600f      	str	r7, [r1, #0]
 80162a8:	bf18      	it	ne
 80162aa:	2300      	movne	r3, #0
 80162ac:	eba6 0807 	sub.w	r8, r6, r7
 80162b0:	608b      	str	r3, [r1, #8]
 80162b2:	f1b8 0f00 	cmp.w	r8, #0
 80162b6:	dd9c      	ble.n	80161f2 <__sflush_r+0x1a>
 80162b8:	6a21      	ldr	r1, [r4, #32]
 80162ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80162bc:	4643      	mov	r3, r8
 80162be:	463a      	mov	r2, r7
 80162c0:	4628      	mov	r0, r5
 80162c2:	47b0      	blx	r6
 80162c4:	2800      	cmp	r0, #0
 80162c6:	dc06      	bgt.n	80162d6 <__sflush_r+0xfe>
 80162c8:	89a3      	ldrh	r3, [r4, #12]
 80162ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80162ce:	81a3      	strh	r3, [r4, #12]
 80162d0:	f04f 30ff 	mov.w	r0, #4294967295
 80162d4:	e78e      	b.n	80161f4 <__sflush_r+0x1c>
 80162d6:	4407      	add	r7, r0
 80162d8:	eba8 0800 	sub.w	r8, r8, r0
 80162dc:	e7e9      	b.n	80162b2 <__sflush_r+0xda>
 80162de:	bf00      	nop
 80162e0:	20400001 	.word	0x20400001

080162e4 <_fflush_r>:
 80162e4:	b538      	push	{r3, r4, r5, lr}
 80162e6:	690b      	ldr	r3, [r1, #16]
 80162e8:	4605      	mov	r5, r0
 80162ea:	460c      	mov	r4, r1
 80162ec:	b913      	cbnz	r3, 80162f4 <_fflush_r+0x10>
 80162ee:	2500      	movs	r5, #0
 80162f0:	4628      	mov	r0, r5
 80162f2:	bd38      	pop	{r3, r4, r5, pc}
 80162f4:	b118      	cbz	r0, 80162fe <_fflush_r+0x1a>
 80162f6:	6983      	ldr	r3, [r0, #24]
 80162f8:	b90b      	cbnz	r3, 80162fe <_fflush_r+0x1a>
 80162fa:	f7fc f837 	bl	801236c <__sinit>
 80162fe:	4b14      	ldr	r3, [pc, #80]	; (8016350 <_fflush_r+0x6c>)
 8016300:	429c      	cmp	r4, r3
 8016302:	d11b      	bne.n	801633c <_fflush_r+0x58>
 8016304:	686c      	ldr	r4, [r5, #4]
 8016306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801630a:	2b00      	cmp	r3, #0
 801630c:	d0ef      	beq.n	80162ee <_fflush_r+0xa>
 801630e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016310:	07d0      	lsls	r0, r2, #31
 8016312:	d404      	bmi.n	801631e <_fflush_r+0x3a>
 8016314:	0599      	lsls	r1, r3, #22
 8016316:	d402      	bmi.n	801631e <_fflush_r+0x3a>
 8016318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801631a:	f7fc fa07 	bl	801272c <__retarget_lock_acquire_recursive>
 801631e:	4628      	mov	r0, r5
 8016320:	4621      	mov	r1, r4
 8016322:	f7ff ff59 	bl	80161d8 <__sflush_r>
 8016326:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016328:	07da      	lsls	r2, r3, #31
 801632a:	4605      	mov	r5, r0
 801632c:	d4e0      	bmi.n	80162f0 <_fflush_r+0xc>
 801632e:	89a3      	ldrh	r3, [r4, #12]
 8016330:	059b      	lsls	r3, r3, #22
 8016332:	d4dd      	bmi.n	80162f0 <_fflush_r+0xc>
 8016334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016336:	f7fc f9fb 	bl	8012730 <__retarget_lock_release_recursive>
 801633a:	e7d9      	b.n	80162f0 <_fflush_r+0xc>
 801633c:	4b05      	ldr	r3, [pc, #20]	; (8016354 <_fflush_r+0x70>)
 801633e:	429c      	cmp	r4, r3
 8016340:	d101      	bne.n	8016346 <_fflush_r+0x62>
 8016342:	68ac      	ldr	r4, [r5, #8]
 8016344:	e7df      	b.n	8016306 <_fflush_r+0x22>
 8016346:	4b04      	ldr	r3, [pc, #16]	; (8016358 <_fflush_r+0x74>)
 8016348:	429c      	cmp	r4, r3
 801634a:	bf08      	it	eq
 801634c:	68ec      	ldreq	r4, [r5, #12]
 801634e:	e7da      	b.n	8016306 <_fflush_r+0x22>
 8016350:	0801a4f4 	.word	0x0801a4f4
 8016354:	0801a514 	.word	0x0801a514
 8016358:	0801a4d4 	.word	0x0801a4d4

0801635c <fiprintf>:
 801635c:	b40e      	push	{r1, r2, r3}
 801635e:	b503      	push	{r0, r1, lr}
 8016360:	4601      	mov	r1, r0
 8016362:	ab03      	add	r3, sp, #12
 8016364:	4805      	ldr	r0, [pc, #20]	; (801637c <fiprintf+0x20>)
 8016366:	f853 2b04 	ldr.w	r2, [r3], #4
 801636a:	6800      	ldr	r0, [r0, #0]
 801636c:	9301      	str	r3, [sp, #4]
 801636e:	f001 fd4d 	bl	8017e0c <_vfiprintf_r>
 8016372:	b002      	add	sp, #8
 8016374:	f85d eb04 	ldr.w	lr, [sp], #4
 8016378:	b003      	add	sp, #12
 801637a:	4770      	bx	lr
 801637c:	200000ac 	.word	0x200000ac

08016380 <rshift>:
 8016380:	6903      	ldr	r3, [r0, #16]
 8016382:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016386:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801638a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801638e:	f100 0414 	add.w	r4, r0, #20
 8016392:	dd45      	ble.n	8016420 <rshift+0xa0>
 8016394:	f011 011f 	ands.w	r1, r1, #31
 8016398:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801639c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80163a0:	d10c      	bne.n	80163bc <rshift+0x3c>
 80163a2:	f100 0710 	add.w	r7, r0, #16
 80163a6:	4629      	mov	r1, r5
 80163a8:	42b1      	cmp	r1, r6
 80163aa:	d334      	bcc.n	8016416 <rshift+0x96>
 80163ac:	1a9b      	subs	r3, r3, r2
 80163ae:	009b      	lsls	r3, r3, #2
 80163b0:	1eea      	subs	r2, r5, #3
 80163b2:	4296      	cmp	r6, r2
 80163b4:	bf38      	it	cc
 80163b6:	2300      	movcc	r3, #0
 80163b8:	4423      	add	r3, r4
 80163ba:	e015      	b.n	80163e8 <rshift+0x68>
 80163bc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80163c0:	f1c1 0820 	rsb	r8, r1, #32
 80163c4:	40cf      	lsrs	r7, r1
 80163c6:	f105 0e04 	add.w	lr, r5, #4
 80163ca:	46a1      	mov	r9, r4
 80163cc:	4576      	cmp	r6, lr
 80163ce:	46f4      	mov	ip, lr
 80163d0:	d815      	bhi.n	80163fe <rshift+0x7e>
 80163d2:	1a9b      	subs	r3, r3, r2
 80163d4:	009a      	lsls	r2, r3, #2
 80163d6:	3a04      	subs	r2, #4
 80163d8:	3501      	adds	r5, #1
 80163da:	42ae      	cmp	r6, r5
 80163dc:	bf38      	it	cc
 80163de:	2200      	movcc	r2, #0
 80163e0:	18a3      	adds	r3, r4, r2
 80163e2:	50a7      	str	r7, [r4, r2]
 80163e4:	b107      	cbz	r7, 80163e8 <rshift+0x68>
 80163e6:	3304      	adds	r3, #4
 80163e8:	1b1a      	subs	r2, r3, r4
 80163ea:	42a3      	cmp	r3, r4
 80163ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80163f0:	bf08      	it	eq
 80163f2:	2300      	moveq	r3, #0
 80163f4:	6102      	str	r2, [r0, #16]
 80163f6:	bf08      	it	eq
 80163f8:	6143      	streq	r3, [r0, #20]
 80163fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80163fe:	f8dc c000 	ldr.w	ip, [ip]
 8016402:	fa0c fc08 	lsl.w	ip, ip, r8
 8016406:	ea4c 0707 	orr.w	r7, ip, r7
 801640a:	f849 7b04 	str.w	r7, [r9], #4
 801640e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016412:	40cf      	lsrs	r7, r1
 8016414:	e7da      	b.n	80163cc <rshift+0x4c>
 8016416:	f851 cb04 	ldr.w	ip, [r1], #4
 801641a:	f847 cf04 	str.w	ip, [r7, #4]!
 801641e:	e7c3      	b.n	80163a8 <rshift+0x28>
 8016420:	4623      	mov	r3, r4
 8016422:	e7e1      	b.n	80163e8 <rshift+0x68>

08016424 <__hexdig_fun>:
 8016424:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016428:	2b09      	cmp	r3, #9
 801642a:	d802      	bhi.n	8016432 <__hexdig_fun+0xe>
 801642c:	3820      	subs	r0, #32
 801642e:	b2c0      	uxtb	r0, r0
 8016430:	4770      	bx	lr
 8016432:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8016436:	2b05      	cmp	r3, #5
 8016438:	d801      	bhi.n	801643e <__hexdig_fun+0x1a>
 801643a:	3847      	subs	r0, #71	; 0x47
 801643c:	e7f7      	b.n	801642e <__hexdig_fun+0xa>
 801643e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8016442:	2b05      	cmp	r3, #5
 8016444:	d801      	bhi.n	801644a <__hexdig_fun+0x26>
 8016446:	3827      	subs	r0, #39	; 0x27
 8016448:	e7f1      	b.n	801642e <__hexdig_fun+0xa>
 801644a:	2000      	movs	r0, #0
 801644c:	4770      	bx	lr
	...

08016450 <__gethex>:
 8016450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016454:	ed2d 8b02 	vpush	{d8}
 8016458:	b089      	sub	sp, #36	; 0x24
 801645a:	ee08 0a10 	vmov	s16, r0
 801645e:	9304      	str	r3, [sp, #16]
 8016460:	4bbc      	ldr	r3, [pc, #752]	; (8016754 <__gethex+0x304>)
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	9301      	str	r3, [sp, #4]
 8016466:	4618      	mov	r0, r3
 8016468:	468b      	mov	fp, r1
 801646a:	4690      	mov	r8, r2
 801646c:	f7e9 feca 	bl	8000204 <strlen>
 8016470:	9b01      	ldr	r3, [sp, #4]
 8016472:	f8db 2000 	ldr.w	r2, [fp]
 8016476:	4403      	add	r3, r0
 8016478:	4682      	mov	sl, r0
 801647a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801647e:	9305      	str	r3, [sp, #20]
 8016480:	1c93      	adds	r3, r2, #2
 8016482:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8016486:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801648a:	32fe      	adds	r2, #254	; 0xfe
 801648c:	18d1      	adds	r1, r2, r3
 801648e:	461f      	mov	r7, r3
 8016490:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016494:	9100      	str	r1, [sp, #0]
 8016496:	2830      	cmp	r0, #48	; 0x30
 8016498:	d0f8      	beq.n	801648c <__gethex+0x3c>
 801649a:	f7ff ffc3 	bl	8016424 <__hexdig_fun>
 801649e:	4604      	mov	r4, r0
 80164a0:	2800      	cmp	r0, #0
 80164a2:	d13a      	bne.n	801651a <__gethex+0xca>
 80164a4:	9901      	ldr	r1, [sp, #4]
 80164a6:	4652      	mov	r2, sl
 80164a8:	4638      	mov	r0, r7
 80164aa:	f7fd fd1d 	bl	8013ee8 <strncmp>
 80164ae:	4605      	mov	r5, r0
 80164b0:	2800      	cmp	r0, #0
 80164b2:	d168      	bne.n	8016586 <__gethex+0x136>
 80164b4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80164b8:	eb07 060a 	add.w	r6, r7, sl
 80164bc:	f7ff ffb2 	bl	8016424 <__hexdig_fun>
 80164c0:	2800      	cmp	r0, #0
 80164c2:	d062      	beq.n	801658a <__gethex+0x13a>
 80164c4:	4633      	mov	r3, r6
 80164c6:	7818      	ldrb	r0, [r3, #0]
 80164c8:	2830      	cmp	r0, #48	; 0x30
 80164ca:	461f      	mov	r7, r3
 80164cc:	f103 0301 	add.w	r3, r3, #1
 80164d0:	d0f9      	beq.n	80164c6 <__gethex+0x76>
 80164d2:	f7ff ffa7 	bl	8016424 <__hexdig_fun>
 80164d6:	2301      	movs	r3, #1
 80164d8:	fab0 f480 	clz	r4, r0
 80164dc:	0964      	lsrs	r4, r4, #5
 80164de:	4635      	mov	r5, r6
 80164e0:	9300      	str	r3, [sp, #0]
 80164e2:	463a      	mov	r2, r7
 80164e4:	4616      	mov	r6, r2
 80164e6:	3201      	adds	r2, #1
 80164e8:	7830      	ldrb	r0, [r6, #0]
 80164ea:	f7ff ff9b 	bl	8016424 <__hexdig_fun>
 80164ee:	2800      	cmp	r0, #0
 80164f0:	d1f8      	bne.n	80164e4 <__gethex+0x94>
 80164f2:	9901      	ldr	r1, [sp, #4]
 80164f4:	4652      	mov	r2, sl
 80164f6:	4630      	mov	r0, r6
 80164f8:	f7fd fcf6 	bl	8013ee8 <strncmp>
 80164fc:	b980      	cbnz	r0, 8016520 <__gethex+0xd0>
 80164fe:	b94d      	cbnz	r5, 8016514 <__gethex+0xc4>
 8016500:	eb06 050a 	add.w	r5, r6, sl
 8016504:	462a      	mov	r2, r5
 8016506:	4616      	mov	r6, r2
 8016508:	3201      	adds	r2, #1
 801650a:	7830      	ldrb	r0, [r6, #0]
 801650c:	f7ff ff8a 	bl	8016424 <__hexdig_fun>
 8016510:	2800      	cmp	r0, #0
 8016512:	d1f8      	bne.n	8016506 <__gethex+0xb6>
 8016514:	1bad      	subs	r5, r5, r6
 8016516:	00ad      	lsls	r5, r5, #2
 8016518:	e004      	b.n	8016524 <__gethex+0xd4>
 801651a:	2400      	movs	r4, #0
 801651c:	4625      	mov	r5, r4
 801651e:	e7e0      	b.n	80164e2 <__gethex+0x92>
 8016520:	2d00      	cmp	r5, #0
 8016522:	d1f7      	bne.n	8016514 <__gethex+0xc4>
 8016524:	7833      	ldrb	r3, [r6, #0]
 8016526:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801652a:	2b50      	cmp	r3, #80	; 0x50
 801652c:	d13b      	bne.n	80165a6 <__gethex+0x156>
 801652e:	7873      	ldrb	r3, [r6, #1]
 8016530:	2b2b      	cmp	r3, #43	; 0x2b
 8016532:	d02c      	beq.n	801658e <__gethex+0x13e>
 8016534:	2b2d      	cmp	r3, #45	; 0x2d
 8016536:	d02e      	beq.n	8016596 <__gethex+0x146>
 8016538:	1c71      	adds	r1, r6, #1
 801653a:	f04f 0900 	mov.w	r9, #0
 801653e:	7808      	ldrb	r0, [r1, #0]
 8016540:	f7ff ff70 	bl	8016424 <__hexdig_fun>
 8016544:	1e43      	subs	r3, r0, #1
 8016546:	b2db      	uxtb	r3, r3
 8016548:	2b18      	cmp	r3, #24
 801654a:	d82c      	bhi.n	80165a6 <__gethex+0x156>
 801654c:	f1a0 0210 	sub.w	r2, r0, #16
 8016550:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016554:	f7ff ff66 	bl	8016424 <__hexdig_fun>
 8016558:	1e43      	subs	r3, r0, #1
 801655a:	b2db      	uxtb	r3, r3
 801655c:	2b18      	cmp	r3, #24
 801655e:	d91d      	bls.n	801659c <__gethex+0x14c>
 8016560:	f1b9 0f00 	cmp.w	r9, #0
 8016564:	d000      	beq.n	8016568 <__gethex+0x118>
 8016566:	4252      	negs	r2, r2
 8016568:	4415      	add	r5, r2
 801656a:	f8cb 1000 	str.w	r1, [fp]
 801656e:	b1e4      	cbz	r4, 80165aa <__gethex+0x15a>
 8016570:	9b00      	ldr	r3, [sp, #0]
 8016572:	2b00      	cmp	r3, #0
 8016574:	bf14      	ite	ne
 8016576:	2700      	movne	r7, #0
 8016578:	2706      	moveq	r7, #6
 801657a:	4638      	mov	r0, r7
 801657c:	b009      	add	sp, #36	; 0x24
 801657e:	ecbd 8b02 	vpop	{d8}
 8016582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016586:	463e      	mov	r6, r7
 8016588:	4625      	mov	r5, r4
 801658a:	2401      	movs	r4, #1
 801658c:	e7ca      	b.n	8016524 <__gethex+0xd4>
 801658e:	f04f 0900 	mov.w	r9, #0
 8016592:	1cb1      	adds	r1, r6, #2
 8016594:	e7d3      	b.n	801653e <__gethex+0xee>
 8016596:	f04f 0901 	mov.w	r9, #1
 801659a:	e7fa      	b.n	8016592 <__gethex+0x142>
 801659c:	230a      	movs	r3, #10
 801659e:	fb03 0202 	mla	r2, r3, r2, r0
 80165a2:	3a10      	subs	r2, #16
 80165a4:	e7d4      	b.n	8016550 <__gethex+0x100>
 80165a6:	4631      	mov	r1, r6
 80165a8:	e7df      	b.n	801656a <__gethex+0x11a>
 80165aa:	1bf3      	subs	r3, r6, r7
 80165ac:	3b01      	subs	r3, #1
 80165ae:	4621      	mov	r1, r4
 80165b0:	2b07      	cmp	r3, #7
 80165b2:	dc0b      	bgt.n	80165cc <__gethex+0x17c>
 80165b4:	ee18 0a10 	vmov	r0, s16
 80165b8:	f000 fbe0 	bl	8016d7c <_Balloc>
 80165bc:	4604      	mov	r4, r0
 80165be:	b940      	cbnz	r0, 80165d2 <__gethex+0x182>
 80165c0:	4b65      	ldr	r3, [pc, #404]	; (8016758 <__gethex+0x308>)
 80165c2:	4602      	mov	r2, r0
 80165c4:	21de      	movs	r1, #222	; 0xde
 80165c6:	4865      	ldr	r0, [pc, #404]	; (801675c <__gethex+0x30c>)
 80165c8:	f7fe ff4a 	bl	8015460 <__assert_func>
 80165cc:	3101      	adds	r1, #1
 80165ce:	105b      	asrs	r3, r3, #1
 80165d0:	e7ee      	b.n	80165b0 <__gethex+0x160>
 80165d2:	f100 0914 	add.w	r9, r0, #20
 80165d6:	f04f 0b00 	mov.w	fp, #0
 80165da:	f1ca 0301 	rsb	r3, sl, #1
 80165de:	f8cd 9008 	str.w	r9, [sp, #8]
 80165e2:	f8cd b000 	str.w	fp, [sp]
 80165e6:	9306      	str	r3, [sp, #24]
 80165e8:	42b7      	cmp	r7, r6
 80165ea:	d340      	bcc.n	801666e <__gethex+0x21e>
 80165ec:	9802      	ldr	r0, [sp, #8]
 80165ee:	9b00      	ldr	r3, [sp, #0]
 80165f0:	f840 3b04 	str.w	r3, [r0], #4
 80165f4:	eba0 0009 	sub.w	r0, r0, r9
 80165f8:	1080      	asrs	r0, r0, #2
 80165fa:	0146      	lsls	r6, r0, #5
 80165fc:	6120      	str	r0, [r4, #16]
 80165fe:	4618      	mov	r0, r3
 8016600:	f000 fcb2 	bl	8016f68 <__hi0bits>
 8016604:	1a30      	subs	r0, r6, r0
 8016606:	f8d8 6000 	ldr.w	r6, [r8]
 801660a:	42b0      	cmp	r0, r6
 801660c:	dd63      	ble.n	80166d6 <__gethex+0x286>
 801660e:	1b87      	subs	r7, r0, r6
 8016610:	4639      	mov	r1, r7
 8016612:	4620      	mov	r0, r4
 8016614:	f001 f84c 	bl	80176b0 <__any_on>
 8016618:	4682      	mov	sl, r0
 801661a:	b1a8      	cbz	r0, 8016648 <__gethex+0x1f8>
 801661c:	1e7b      	subs	r3, r7, #1
 801661e:	1159      	asrs	r1, r3, #5
 8016620:	f003 021f 	and.w	r2, r3, #31
 8016624:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8016628:	f04f 0a01 	mov.w	sl, #1
 801662c:	fa0a f202 	lsl.w	r2, sl, r2
 8016630:	420a      	tst	r2, r1
 8016632:	d009      	beq.n	8016648 <__gethex+0x1f8>
 8016634:	4553      	cmp	r3, sl
 8016636:	dd05      	ble.n	8016644 <__gethex+0x1f4>
 8016638:	1eb9      	subs	r1, r7, #2
 801663a:	4620      	mov	r0, r4
 801663c:	f001 f838 	bl	80176b0 <__any_on>
 8016640:	2800      	cmp	r0, #0
 8016642:	d145      	bne.n	80166d0 <__gethex+0x280>
 8016644:	f04f 0a02 	mov.w	sl, #2
 8016648:	4639      	mov	r1, r7
 801664a:	4620      	mov	r0, r4
 801664c:	f7ff fe98 	bl	8016380 <rshift>
 8016650:	443d      	add	r5, r7
 8016652:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016656:	42ab      	cmp	r3, r5
 8016658:	da4c      	bge.n	80166f4 <__gethex+0x2a4>
 801665a:	ee18 0a10 	vmov	r0, s16
 801665e:	4621      	mov	r1, r4
 8016660:	f000 fbcc 	bl	8016dfc <_Bfree>
 8016664:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016666:	2300      	movs	r3, #0
 8016668:	6013      	str	r3, [r2, #0]
 801666a:	27a3      	movs	r7, #163	; 0xa3
 801666c:	e785      	b.n	801657a <__gethex+0x12a>
 801666e:	1e73      	subs	r3, r6, #1
 8016670:	9a05      	ldr	r2, [sp, #20]
 8016672:	9303      	str	r3, [sp, #12]
 8016674:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016678:	4293      	cmp	r3, r2
 801667a:	d019      	beq.n	80166b0 <__gethex+0x260>
 801667c:	f1bb 0f20 	cmp.w	fp, #32
 8016680:	d107      	bne.n	8016692 <__gethex+0x242>
 8016682:	9b02      	ldr	r3, [sp, #8]
 8016684:	9a00      	ldr	r2, [sp, #0]
 8016686:	f843 2b04 	str.w	r2, [r3], #4
 801668a:	9302      	str	r3, [sp, #8]
 801668c:	2300      	movs	r3, #0
 801668e:	9300      	str	r3, [sp, #0]
 8016690:	469b      	mov	fp, r3
 8016692:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8016696:	f7ff fec5 	bl	8016424 <__hexdig_fun>
 801669a:	9b00      	ldr	r3, [sp, #0]
 801669c:	f000 000f 	and.w	r0, r0, #15
 80166a0:	fa00 f00b 	lsl.w	r0, r0, fp
 80166a4:	4303      	orrs	r3, r0
 80166a6:	9300      	str	r3, [sp, #0]
 80166a8:	f10b 0b04 	add.w	fp, fp, #4
 80166ac:	9b03      	ldr	r3, [sp, #12]
 80166ae:	e00d      	b.n	80166cc <__gethex+0x27c>
 80166b0:	9b03      	ldr	r3, [sp, #12]
 80166b2:	9a06      	ldr	r2, [sp, #24]
 80166b4:	4413      	add	r3, r2
 80166b6:	42bb      	cmp	r3, r7
 80166b8:	d3e0      	bcc.n	801667c <__gethex+0x22c>
 80166ba:	4618      	mov	r0, r3
 80166bc:	9901      	ldr	r1, [sp, #4]
 80166be:	9307      	str	r3, [sp, #28]
 80166c0:	4652      	mov	r2, sl
 80166c2:	f7fd fc11 	bl	8013ee8 <strncmp>
 80166c6:	9b07      	ldr	r3, [sp, #28]
 80166c8:	2800      	cmp	r0, #0
 80166ca:	d1d7      	bne.n	801667c <__gethex+0x22c>
 80166cc:	461e      	mov	r6, r3
 80166ce:	e78b      	b.n	80165e8 <__gethex+0x198>
 80166d0:	f04f 0a03 	mov.w	sl, #3
 80166d4:	e7b8      	b.n	8016648 <__gethex+0x1f8>
 80166d6:	da0a      	bge.n	80166ee <__gethex+0x29e>
 80166d8:	1a37      	subs	r7, r6, r0
 80166da:	4621      	mov	r1, r4
 80166dc:	ee18 0a10 	vmov	r0, s16
 80166e0:	463a      	mov	r2, r7
 80166e2:	f000 fda7 	bl	8017234 <__lshift>
 80166e6:	1bed      	subs	r5, r5, r7
 80166e8:	4604      	mov	r4, r0
 80166ea:	f100 0914 	add.w	r9, r0, #20
 80166ee:	f04f 0a00 	mov.w	sl, #0
 80166f2:	e7ae      	b.n	8016652 <__gethex+0x202>
 80166f4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80166f8:	42a8      	cmp	r0, r5
 80166fa:	dd72      	ble.n	80167e2 <__gethex+0x392>
 80166fc:	1b45      	subs	r5, r0, r5
 80166fe:	42ae      	cmp	r6, r5
 8016700:	dc36      	bgt.n	8016770 <__gethex+0x320>
 8016702:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016706:	2b02      	cmp	r3, #2
 8016708:	d02a      	beq.n	8016760 <__gethex+0x310>
 801670a:	2b03      	cmp	r3, #3
 801670c:	d02c      	beq.n	8016768 <__gethex+0x318>
 801670e:	2b01      	cmp	r3, #1
 8016710:	d115      	bne.n	801673e <__gethex+0x2ee>
 8016712:	42ae      	cmp	r6, r5
 8016714:	d113      	bne.n	801673e <__gethex+0x2ee>
 8016716:	2e01      	cmp	r6, #1
 8016718:	d10b      	bne.n	8016732 <__gethex+0x2e2>
 801671a:	9a04      	ldr	r2, [sp, #16]
 801671c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016720:	6013      	str	r3, [r2, #0]
 8016722:	2301      	movs	r3, #1
 8016724:	6123      	str	r3, [r4, #16]
 8016726:	f8c9 3000 	str.w	r3, [r9]
 801672a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801672c:	2762      	movs	r7, #98	; 0x62
 801672e:	601c      	str	r4, [r3, #0]
 8016730:	e723      	b.n	801657a <__gethex+0x12a>
 8016732:	1e71      	subs	r1, r6, #1
 8016734:	4620      	mov	r0, r4
 8016736:	f000 ffbb 	bl	80176b0 <__any_on>
 801673a:	2800      	cmp	r0, #0
 801673c:	d1ed      	bne.n	801671a <__gethex+0x2ca>
 801673e:	ee18 0a10 	vmov	r0, s16
 8016742:	4621      	mov	r1, r4
 8016744:	f000 fb5a 	bl	8016dfc <_Bfree>
 8016748:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801674a:	2300      	movs	r3, #0
 801674c:	6013      	str	r3, [r2, #0]
 801674e:	2750      	movs	r7, #80	; 0x50
 8016750:	e713      	b.n	801657a <__gethex+0x12a>
 8016752:	bf00      	nop
 8016754:	0801a8b8 	.word	0x0801a8b8
 8016758:	0801a83d 	.word	0x0801a83d
 801675c:	0801a84e 	.word	0x0801a84e
 8016760:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016762:	2b00      	cmp	r3, #0
 8016764:	d1eb      	bne.n	801673e <__gethex+0x2ee>
 8016766:	e7d8      	b.n	801671a <__gethex+0x2ca>
 8016768:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801676a:	2b00      	cmp	r3, #0
 801676c:	d1d5      	bne.n	801671a <__gethex+0x2ca>
 801676e:	e7e6      	b.n	801673e <__gethex+0x2ee>
 8016770:	1e6f      	subs	r7, r5, #1
 8016772:	f1ba 0f00 	cmp.w	sl, #0
 8016776:	d131      	bne.n	80167dc <__gethex+0x38c>
 8016778:	b127      	cbz	r7, 8016784 <__gethex+0x334>
 801677a:	4639      	mov	r1, r7
 801677c:	4620      	mov	r0, r4
 801677e:	f000 ff97 	bl	80176b0 <__any_on>
 8016782:	4682      	mov	sl, r0
 8016784:	117b      	asrs	r3, r7, #5
 8016786:	2101      	movs	r1, #1
 8016788:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801678c:	f007 071f 	and.w	r7, r7, #31
 8016790:	fa01 f707 	lsl.w	r7, r1, r7
 8016794:	421f      	tst	r7, r3
 8016796:	4629      	mov	r1, r5
 8016798:	4620      	mov	r0, r4
 801679a:	bf18      	it	ne
 801679c:	f04a 0a02 	orrne.w	sl, sl, #2
 80167a0:	1b76      	subs	r6, r6, r5
 80167a2:	f7ff fded 	bl	8016380 <rshift>
 80167a6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80167aa:	2702      	movs	r7, #2
 80167ac:	f1ba 0f00 	cmp.w	sl, #0
 80167b0:	d048      	beq.n	8016844 <__gethex+0x3f4>
 80167b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80167b6:	2b02      	cmp	r3, #2
 80167b8:	d015      	beq.n	80167e6 <__gethex+0x396>
 80167ba:	2b03      	cmp	r3, #3
 80167bc:	d017      	beq.n	80167ee <__gethex+0x39e>
 80167be:	2b01      	cmp	r3, #1
 80167c0:	d109      	bne.n	80167d6 <__gethex+0x386>
 80167c2:	f01a 0f02 	tst.w	sl, #2
 80167c6:	d006      	beq.n	80167d6 <__gethex+0x386>
 80167c8:	f8d9 0000 	ldr.w	r0, [r9]
 80167cc:	ea4a 0a00 	orr.w	sl, sl, r0
 80167d0:	f01a 0f01 	tst.w	sl, #1
 80167d4:	d10e      	bne.n	80167f4 <__gethex+0x3a4>
 80167d6:	f047 0710 	orr.w	r7, r7, #16
 80167da:	e033      	b.n	8016844 <__gethex+0x3f4>
 80167dc:	f04f 0a01 	mov.w	sl, #1
 80167e0:	e7d0      	b.n	8016784 <__gethex+0x334>
 80167e2:	2701      	movs	r7, #1
 80167e4:	e7e2      	b.n	80167ac <__gethex+0x35c>
 80167e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80167e8:	f1c3 0301 	rsb	r3, r3, #1
 80167ec:	9315      	str	r3, [sp, #84]	; 0x54
 80167ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d0f0      	beq.n	80167d6 <__gethex+0x386>
 80167f4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80167f8:	f104 0314 	add.w	r3, r4, #20
 80167fc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016800:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8016804:	f04f 0c00 	mov.w	ip, #0
 8016808:	4618      	mov	r0, r3
 801680a:	f853 2b04 	ldr.w	r2, [r3], #4
 801680e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016812:	d01c      	beq.n	801684e <__gethex+0x3fe>
 8016814:	3201      	adds	r2, #1
 8016816:	6002      	str	r2, [r0, #0]
 8016818:	2f02      	cmp	r7, #2
 801681a:	f104 0314 	add.w	r3, r4, #20
 801681e:	d13f      	bne.n	80168a0 <__gethex+0x450>
 8016820:	f8d8 2000 	ldr.w	r2, [r8]
 8016824:	3a01      	subs	r2, #1
 8016826:	42b2      	cmp	r2, r6
 8016828:	d10a      	bne.n	8016840 <__gethex+0x3f0>
 801682a:	1171      	asrs	r1, r6, #5
 801682c:	2201      	movs	r2, #1
 801682e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016832:	f006 061f 	and.w	r6, r6, #31
 8016836:	fa02 f606 	lsl.w	r6, r2, r6
 801683a:	421e      	tst	r6, r3
 801683c:	bf18      	it	ne
 801683e:	4617      	movne	r7, r2
 8016840:	f047 0720 	orr.w	r7, r7, #32
 8016844:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016846:	601c      	str	r4, [r3, #0]
 8016848:	9b04      	ldr	r3, [sp, #16]
 801684a:	601d      	str	r5, [r3, #0]
 801684c:	e695      	b.n	801657a <__gethex+0x12a>
 801684e:	4299      	cmp	r1, r3
 8016850:	f843 cc04 	str.w	ip, [r3, #-4]
 8016854:	d8d8      	bhi.n	8016808 <__gethex+0x3b8>
 8016856:	68a3      	ldr	r3, [r4, #8]
 8016858:	459b      	cmp	fp, r3
 801685a:	db19      	blt.n	8016890 <__gethex+0x440>
 801685c:	6861      	ldr	r1, [r4, #4]
 801685e:	ee18 0a10 	vmov	r0, s16
 8016862:	3101      	adds	r1, #1
 8016864:	f000 fa8a 	bl	8016d7c <_Balloc>
 8016868:	4681      	mov	r9, r0
 801686a:	b918      	cbnz	r0, 8016874 <__gethex+0x424>
 801686c:	4b1a      	ldr	r3, [pc, #104]	; (80168d8 <__gethex+0x488>)
 801686e:	4602      	mov	r2, r0
 8016870:	2184      	movs	r1, #132	; 0x84
 8016872:	e6a8      	b.n	80165c6 <__gethex+0x176>
 8016874:	6922      	ldr	r2, [r4, #16]
 8016876:	3202      	adds	r2, #2
 8016878:	f104 010c 	add.w	r1, r4, #12
 801687c:	0092      	lsls	r2, r2, #2
 801687e:	300c      	adds	r0, #12
 8016880:	f7fb ff68 	bl	8012754 <memcpy>
 8016884:	4621      	mov	r1, r4
 8016886:	ee18 0a10 	vmov	r0, s16
 801688a:	f000 fab7 	bl	8016dfc <_Bfree>
 801688e:	464c      	mov	r4, r9
 8016890:	6923      	ldr	r3, [r4, #16]
 8016892:	1c5a      	adds	r2, r3, #1
 8016894:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016898:	6122      	str	r2, [r4, #16]
 801689a:	2201      	movs	r2, #1
 801689c:	615a      	str	r2, [r3, #20]
 801689e:	e7bb      	b.n	8016818 <__gethex+0x3c8>
 80168a0:	6922      	ldr	r2, [r4, #16]
 80168a2:	455a      	cmp	r2, fp
 80168a4:	dd0b      	ble.n	80168be <__gethex+0x46e>
 80168a6:	2101      	movs	r1, #1
 80168a8:	4620      	mov	r0, r4
 80168aa:	f7ff fd69 	bl	8016380 <rshift>
 80168ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80168b2:	3501      	adds	r5, #1
 80168b4:	42ab      	cmp	r3, r5
 80168b6:	f6ff aed0 	blt.w	801665a <__gethex+0x20a>
 80168ba:	2701      	movs	r7, #1
 80168bc:	e7c0      	b.n	8016840 <__gethex+0x3f0>
 80168be:	f016 061f 	ands.w	r6, r6, #31
 80168c2:	d0fa      	beq.n	80168ba <__gethex+0x46a>
 80168c4:	449a      	add	sl, r3
 80168c6:	f1c6 0620 	rsb	r6, r6, #32
 80168ca:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80168ce:	f000 fb4b 	bl	8016f68 <__hi0bits>
 80168d2:	42b0      	cmp	r0, r6
 80168d4:	dbe7      	blt.n	80168a6 <__gethex+0x456>
 80168d6:	e7f0      	b.n	80168ba <__gethex+0x46a>
 80168d8:	0801a83d 	.word	0x0801a83d

080168dc <L_shift>:
 80168dc:	f1c2 0208 	rsb	r2, r2, #8
 80168e0:	0092      	lsls	r2, r2, #2
 80168e2:	b570      	push	{r4, r5, r6, lr}
 80168e4:	f1c2 0620 	rsb	r6, r2, #32
 80168e8:	6843      	ldr	r3, [r0, #4]
 80168ea:	6804      	ldr	r4, [r0, #0]
 80168ec:	fa03 f506 	lsl.w	r5, r3, r6
 80168f0:	432c      	orrs	r4, r5
 80168f2:	40d3      	lsrs	r3, r2
 80168f4:	6004      	str	r4, [r0, #0]
 80168f6:	f840 3f04 	str.w	r3, [r0, #4]!
 80168fa:	4288      	cmp	r0, r1
 80168fc:	d3f4      	bcc.n	80168e8 <L_shift+0xc>
 80168fe:	bd70      	pop	{r4, r5, r6, pc}

08016900 <__match>:
 8016900:	b530      	push	{r4, r5, lr}
 8016902:	6803      	ldr	r3, [r0, #0]
 8016904:	3301      	adds	r3, #1
 8016906:	f811 4b01 	ldrb.w	r4, [r1], #1
 801690a:	b914      	cbnz	r4, 8016912 <__match+0x12>
 801690c:	6003      	str	r3, [r0, #0]
 801690e:	2001      	movs	r0, #1
 8016910:	bd30      	pop	{r4, r5, pc}
 8016912:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016916:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801691a:	2d19      	cmp	r5, #25
 801691c:	bf98      	it	ls
 801691e:	3220      	addls	r2, #32
 8016920:	42a2      	cmp	r2, r4
 8016922:	d0f0      	beq.n	8016906 <__match+0x6>
 8016924:	2000      	movs	r0, #0
 8016926:	e7f3      	b.n	8016910 <__match+0x10>

08016928 <__hexnan>:
 8016928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801692c:	680b      	ldr	r3, [r1, #0]
 801692e:	6801      	ldr	r1, [r0, #0]
 8016930:	115e      	asrs	r6, r3, #5
 8016932:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016936:	f013 031f 	ands.w	r3, r3, #31
 801693a:	b087      	sub	sp, #28
 801693c:	bf18      	it	ne
 801693e:	3604      	addne	r6, #4
 8016940:	2500      	movs	r5, #0
 8016942:	1f37      	subs	r7, r6, #4
 8016944:	4682      	mov	sl, r0
 8016946:	4690      	mov	r8, r2
 8016948:	9301      	str	r3, [sp, #4]
 801694a:	f846 5c04 	str.w	r5, [r6, #-4]
 801694e:	46b9      	mov	r9, r7
 8016950:	463c      	mov	r4, r7
 8016952:	9502      	str	r5, [sp, #8]
 8016954:	46ab      	mov	fp, r5
 8016956:	784a      	ldrb	r2, [r1, #1]
 8016958:	1c4b      	adds	r3, r1, #1
 801695a:	9303      	str	r3, [sp, #12]
 801695c:	b342      	cbz	r2, 80169b0 <__hexnan+0x88>
 801695e:	4610      	mov	r0, r2
 8016960:	9105      	str	r1, [sp, #20]
 8016962:	9204      	str	r2, [sp, #16]
 8016964:	f7ff fd5e 	bl	8016424 <__hexdig_fun>
 8016968:	2800      	cmp	r0, #0
 801696a:	d14f      	bne.n	8016a0c <__hexnan+0xe4>
 801696c:	9a04      	ldr	r2, [sp, #16]
 801696e:	9905      	ldr	r1, [sp, #20]
 8016970:	2a20      	cmp	r2, #32
 8016972:	d818      	bhi.n	80169a6 <__hexnan+0x7e>
 8016974:	9b02      	ldr	r3, [sp, #8]
 8016976:	459b      	cmp	fp, r3
 8016978:	dd13      	ble.n	80169a2 <__hexnan+0x7a>
 801697a:	454c      	cmp	r4, r9
 801697c:	d206      	bcs.n	801698c <__hexnan+0x64>
 801697e:	2d07      	cmp	r5, #7
 8016980:	dc04      	bgt.n	801698c <__hexnan+0x64>
 8016982:	462a      	mov	r2, r5
 8016984:	4649      	mov	r1, r9
 8016986:	4620      	mov	r0, r4
 8016988:	f7ff ffa8 	bl	80168dc <L_shift>
 801698c:	4544      	cmp	r4, r8
 801698e:	d950      	bls.n	8016a32 <__hexnan+0x10a>
 8016990:	2300      	movs	r3, #0
 8016992:	f1a4 0904 	sub.w	r9, r4, #4
 8016996:	f844 3c04 	str.w	r3, [r4, #-4]
 801699a:	f8cd b008 	str.w	fp, [sp, #8]
 801699e:	464c      	mov	r4, r9
 80169a0:	461d      	mov	r5, r3
 80169a2:	9903      	ldr	r1, [sp, #12]
 80169a4:	e7d7      	b.n	8016956 <__hexnan+0x2e>
 80169a6:	2a29      	cmp	r2, #41	; 0x29
 80169a8:	d156      	bne.n	8016a58 <__hexnan+0x130>
 80169aa:	3102      	adds	r1, #2
 80169ac:	f8ca 1000 	str.w	r1, [sl]
 80169b0:	f1bb 0f00 	cmp.w	fp, #0
 80169b4:	d050      	beq.n	8016a58 <__hexnan+0x130>
 80169b6:	454c      	cmp	r4, r9
 80169b8:	d206      	bcs.n	80169c8 <__hexnan+0xa0>
 80169ba:	2d07      	cmp	r5, #7
 80169bc:	dc04      	bgt.n	80169c8 <__hexnan+0xa0>
 80169be:	462a      	mov	r2, r5
 80169c0:	4649      	mov	r1, r9
 80169c2:	4620      	mov	r0, r4
 80169c4:	f7ff ff8a 	bl	80168dc <L_shift>
 80169c8:	4544      	cmp	r4, r8
 80169ca:	d934      	bls.n	8016a36 <__hexnan+0x10e>
 80169cc:	f1a8 0204 	sub.w	r2, r8, #4
 80169d0:	4623      	mov	r3, r4
 80169d2:	f853 1b04 	ldr.w	r1, [r3], #4
 80169d6:	f842 1f04 	str.w	r1, [r2, #4]!
 80169da:	429f      	cmp	r7, r3
 80169dc:	d2f9      	bcs.n	80169d2 <__hexnan+0xaa>
 80169de:	1b3b      	subs	r3, r7, r4
 80169e0:	f023 0303 	bic.w	r3, r3, #3
 80169e4:	3304      	adds	r3, #4
 80169e6:	3401      	adds	r4, #1
 80169e8:	3e03      	subs	r6, #3
 80169ea:	42b4      	cmp	r4, r6
 80169ec:	bf88      	it	hi
 80169ee:	2304      	movhi	r3, #4
 80169f0:	4443      	add	r3, r8
 80169f2:	2200      	movs	r2, #0
 80169f4:	f843 2b04 	str.w	r2, [r3], #4
 80169f8:	429f      	cmp	r7, r3
 80169fa:	d2fb      	bcs.n	80169f4 <__hexnan+0xcc>
 80169fc:	683b      	ldr	r3, [r7, #0]
 80169fe:	b91b      	cbnz	r3, 8016a08 <__hexnan+0xe0>
 8016a00:	4547      	cmp	r7, r8
 8016a02:	d127      	bne.n	8016a54 <__hexnan+0x12c>
 8016a04:	2301      	movs	r3, #1
 8016a06:	603b      	str	r3, [r7, #0]
 8016a08:	2005      	movs	r0, #5
 8016a0a:	e026      	b.n	8016a5a <__hexnan+0x132>
 8016a0c:	3501      	adds	r5, #1
 8016a0e:	2d08      	cmp	r5, #8
 8016a10:	f10b 0b01 	add.w	fp, fp, #1
 8016a14:	dd06      	ble.n	8016a24 <__hexnan+0xfc>
 8016a16:	4544      	cmp	r4, r8
 8016a18:	d9c3      	bls.n	80169a2 <__hexnan+0x7a>
 8016a1a:	2300      	movs	r3, #0
 8016a1c:	f844 3c04 	str.w	r3, [r4, #-4]
 8016a20:	2501      	movs	r5, #1
 8016a22:	3c04      	subs	r4, #4
 8016a24:	6822      	ldr	r2, [r4, #0]
 8016a26:	f000 000f 	and.w	r0, r0, #15
 8016a2a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8016a2e:	6022      	str	r2, [r4, #0]
 8016a30:	e7b7      	b.n	80169a2 <__hexnan+0x7a>
 8016a32:	2508      	movs	r5, #8
 8016a34:	e7b5      	b.n	80169a2 <__hexnan+0x7a>
 8016a36:	9b01      	ldr	r3, [sp, #4]
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d0df      	beq.n	80169fc <__hexnan+0xd4>
 8016a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8016a40:	f1c3 0320 	rsb	r3, r3, #32
 8016a44:	fa22 f303 	lsr.w	r3, r2, r3
 8016a48:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016a4c:	401a      	ands	r2, r3
 8016a4e:	f846 2c04 	str.w	r2, [r6, #-4]
 8016a52:	e7d3      	b.n	80169fc <__hexnan+0xd4>
 8016a54:	3f04      	subs	r7, #4
 8016a56:	e7d1      	b.n	80169fc <__hexnan+0xd4>
 8016a58:	2004      	movs	r0, #4
 8016a5a:	b007      	add	sp, #28
 8016a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016a60 <_findenv_r>:
 8016a60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a64:	4607      	mov	r7, r0
 8016a66:	4689      	mov	r9, r1
 8016a68:	4616      	mov	r6, r2
 8016a6a:	f001 fcdf 	bl	801842c <__env_lock>
 8016a6e:	4b18      	ldr	r3, [pc, #96]	; (8016ad0 <_findenv_r+0x70>)
 8016a70:	681c      	ldr	r4, [r3, #0]
 8016a72:	469a      	mov	sl, r3
 8016a74:	b134      	cbz	r4, 8016a84 <_findenv_r+0x24>
 8016a76:	464b      	mov	r3, r9
 8016a78:	4698      	mov	r8, r3
 8016a7a:	f813 1b01 	ldrb.w	r1, [r3], #1
 8016a7e:	b139      	cbz	r1, 8016a90 <_findenv_r+0x30>
 8016a80:	293d      	cmp	r1, #61	; 0x3d
 8016a82:	d1f9      	bne.n	8016a78 <_findenv_r+0x18>
 8016a84:	4638      	mov	r0, r7
 8016a86:	f001 fcd7 	bl	8018438 <__env_unlock>
 8016a8a:	2000      	movs	r0, #0
 8016a8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a90:	eba8 0809 	sub.w	r8, r8, r9
 8016a94:	46a3      	mov	fp, r4
 8016a96:	f854 0b04 	ldr.w	r0, [r4], #4
 8016a9a:	2800      	cmp	r0, #0
 8016a9c:	d0f2      	beq.n	8016a84 <_findenv_r+0x24>
 8016a9e:	4642      	mov	r2, r8
 8016aa0:	4649      	mov	r1, r9
 8016aa2:	f7fd fa21 	bl	8013ee8 <strncmp>
 8016aa6:	2800      	cmp	r0, #0
 8016aa8:	d1f4      	bne.n	8016a94 <_findenv_r+0x34>
 8016aaa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016aae:	eb03 0508 	add.w	r5, r3, r8
 8016ab2:	f813 3008 	ldrb.w	r3, [r3, r8]
 8016ab6:	2b3d      	cmp	r3, #61	; 0x3d
 8016ab8:	d1ec      	bne.n	8016a94 <_findenv_r+0x34>
 8016aba:	f8da 3000 	ldr.w	r3, [sl]
 8016abe:	ebab 0303 	sub.w	r3, fp, r3
 8016ac2:	109b      	asrs	r3, r3, #2
 8016ac4:	4638      	mov	r0, r7
 8016ac6:	6033      	str	r3, [r6, #0]
 8016ac8:	f001 fcb6 	bl	8018438 <__env_unlock>
 8016acc:	1c68      	adds	r0, r5, #1
 8016ace:	e7dd      	b.n	8016a8c <_findenv_r+0x2c>
 8016ad0:	200002e0 	.word	0x200002e0

08016ad4 <_getenv_r>:
 8016ad4:	b507      	push	{r0, r1, r2, lr}
 8016ad6:	aa01      	add	r2, sp, #4
 8016ad8:	f7ff ffc2 	bl	8016a60 <_findenv_r>
 8016adc:	b003      	add	sp, #12
 8016ade:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08016ae4 <__gettzinfo>:
 8016ae4:	4800      	ldr	r0, [pc, #0]	; (8016ae8 <__gettzinfo+0x4>)
 8016ae6:	4770      	bx	lr
 8016ae8:	20000118 	.word	0x20000118

08016aec <gmtime_r>:
 8016aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016af0:	e9d0 6700 	ldrd	r6, r7, [r0]
 8016af4:	460c      	mov	r4, r1
 8016af6:	4a51      	ldr	r2, [pc, #324]	; (8016c3c <gmtime_r+0x150>)
 8016af8:	2300      	movs	r3, #0
 8016afa:	4630      	mov	r0, r6
 8016afc:	4639      	mov	r1, r7
 8016afe:	f7ea f8e3 	bl	8000cc8 <__aeabi_ldivmod>
 8016b02:	4639      	mov	r1, r7
 8016b04:	4605      	mov	r5, r0
 8016b06:	4a4d      	ldr	r2, [pc, #308]	; (8016c3c <gmtime_r+0x150>)
 8016b08:	4630      	mov	r0, r6
 8016b0a:	2300      	movs	r3, #0
 8016b0c:	f7ea f8dc 	bl	8000cc8 <__aeabi_ldivmod>
 8016b10:	2a00      	cmp	r2, #0
 8016b12:	bfbc      	itt	lt
 8016b14:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8016b18:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8016b1c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8016b20:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8016b24:	fbb2 f3f1 	udiv	r3, r2, r1
 8016b28:	fb01 2213 	mls	r2, r1, r3, r2
 8016b2c:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8016b30:	bfac      	ite	ge
 8016b32:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 8016b36:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 8016b3a:	60a3      	str	r3, [r4, #8]
 8016b3c:	fbb2 f3f1 	udiv	r3, r2, r1
 8016b40:	fb01 2213 	mls	r2, r1, r3, r2
 8016b44:	6063      	str	r3, [r4, #4]
 8016b46:	6022      	str	r2, [r4, #0]
 8016b48:	1cc3      	adds	r3, r0, #3
 8016b4a:	2207      	movs	r2, #7
 8016b4c:	fb93 f2f2 	sdiv	r2, r3, r2
 8016b50:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8016b54:	1a9b      	subs	r3, r3, r2
 8016b56:	bf48      	it	mi
 8016b58:	3307      	addmi	r3, #7
 8016b5a:	2800      	cmp	r0, #0
 8016b5c:	61a3      	str	r3, [r4, #24]
 8016b5e:	bfb8      	it	lt
 8016b60:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8016b64:	4936      	ldr	r1, [pc, #216]	; (8016c40 <gmtime_r+0x154>)
 8016b66:	bfae      	itee	ge
 8016b68:	fb90 f1f1 	sdivge	r1, r0, r1
 8016b6c:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8016b70:	fb93 f1f1 	sdivlt	r1, r3, r1
 8016b74:	4b33      	ldr	r3, [pc, #204]	; (8016c44 <gmtime_r+0x158>)
 8016b76:	fb03 0001 	mla	r0, r3, r1, r0
 8016b7a:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8016b7e:	fbb0 f2f2 	udiv	r2, r0, r2
 8016b82:	4402      	add	r2, r0
 8016b84:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 8016b88:	fbb0 f3fc 	udiv	r3, r0, ip
 8016b8c:	1ad2      	subs	r2, r2, r3
 8016b8e:	f240 176d 	movw	r7, #365	; 0x16d
 8016b92:	4b2d      	ldr	r3, [pc, #180]	; (8016c48 <gmtime_r+0x15c>)
 8016b94:	fbb0 f3f3 	udiv	r3, r0, r3
 8016b98:	2664      	movs	r6, #100	; 0x64
 8016b9a:	1ad3      	subs	r3, r2, r3
 8016b9c:	fbb3 f5f7 	udiv	r5, r3, r7
 8016ba0:	fbb3 f3fc 	udiv	r3, r3, ip
 8016ba4:	fbb5 f2f6 	udiv	r2, r5, r6
 8016ba8:	1ad3      	subs	r3, r2, r3
 8016baa:	4403      	add	r3, r0
 8016bac:	fb07 3315 	mls	r3, r7, r5, r3
 8016bb0:	2099      	movs	r0, #153	; 0x99
 8016bb2:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8016bb6:	f10c 0c02 	add.w	ip, ip, #2
 8016bba:	f103 0e01 	add.w	lr, r3, #1
 8016bbe:	fbbc f7f0 	udiv	r7, ip, r0
 8016bc2:	4378      	muls	r0, r7
 8016bc4:	3002      	adds	r0, #2
 8016bc6:	f04f 0805 	mov.w	r8, #5
 8016bca:	fbb0 f0f8 	udiv	r0, r0, r8
 8016bce:	ebae 0000 	sub.w	r0, lr, r0
 8016bd2:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 8016bd6:	45f4      	cmp	ip, lr
 8016bd8:	bf94      	ite	ls
 8016bda:	f04f 0c02 	movls.w	ip, #2
 8016bde:	f06f 0c09 	mvnhi.w	ip, #9
 8016be2:	4467      	add	r7, ip
 8016be4:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8016be8:	fb0c 5101 	mla	r1, ip, r1, r5
 8016bec:	2f01      	cmp	r7, #1
 8016bee:	bf98      	it	ls
 8016bf0:	3101      	addls	r1, #1
 8016bf2:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8016bf6:	d30c      	bcc.n	8016c12 <gmtime_r+0x126>
 8016bf8:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8016bfc:	61e3      	str	r3, [r4, #28]
 8016bfe:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 8016c02:	2300      	movs	r3, #0
 8016c04:	60e0      	str	r0, [r4, #12]
 8016c06:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8016c0a:	6223      	str	r3, [r4, #32]
 8016c0c:	4620      	mov	r0, r4
 8016c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c12:	f015 0f03 	tst.w	r5, #3
 8016c16:	d102      	bne.n	8016c1e <gmtime_r+0x132>
 8016c18:	fb06 5212 	mls	r2, r6, r2, r5
 8016c1c:	b95a      	cbnz	r2, 8016c36 <gmtime_r+0x14a>
 8016c1e:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8016c22:	fbb5 f2f6 	udiv	r2, r5, r6
 8016c26:	fb06 5212 	mls	r2, r6, r2, r5
 8016c2a:	fab2 f282 	clz	r2, r2
 8016c2e:	0952      	lsrs	r2, r2, #5
 8016c30:	333b      	adds	r3, #59	; 0x3b
 8016c32:	4413      	add	r3, r2
 8016c34:	e7e2      	b.n	8016bfc <gmtime_r+0x110>
 8016c36:	2201      	movs	r2, #1
 8016c38:	e7fa      	b.n	8016c30 <gmtime_r+0x144>
 8016c3a:	bf00      	nop
 8016c3c:	00015180 	.word	0x00015180
 8016c40:	00023ab1 	.word	0x00023ab1
 8016c44:	fffdc54f 	.word	0xfffdc54f
 8016c48:	00023ab0 	.word	0x00023ab0

08016c4c <_localeconv_r>:
 8016c4c:	4800      	ldr	r0, [pc, #0]	; (8016c50 <_localeconv_r+0x4>)
 8016c4e:	4770      	bx	lr
 8016c50:	20000264 	.word	0x20000264

08016c54 <_lseek_r>:
 8016c54:	b538      	push	{r3, r4, r5, lr}
 8016c56:	4d07      	ldr	r5, [pc, #28]	; (8016c74 <_lseek_r+0x20>)
 8016c58:	4604      	mov	r4, r0
 8016c5a:	4608      	mov	r0, r1
 8016c5c:	4611      	mov	r1, r2
 8016c5e:	2200      	movs	r2, #0
 8016c60:	602a      	str	r2, [r5, #0]
 8016c62:	461a      	mov	r2, r3
 8016c64:	f001 fc40 	bl	80184e8 <_lseek>
 8016c68:	1c43      	adds	r3, r0, #1
 8016c6a:	d102      	bne.n	8016c72 <_lseek_r+0x1e>
 8016c6c:	682b      	ldr	r3, [r5, #0]
 8016c6e:	b103      	cbz	r3, 8016c72 <_lseek_r+0x1e>
 8016c70:	6023      	str	r3, [r4, #0]
 8016c72:	bd38      	pop	{r3, r4, r5, pc}
 8016c74:	200064f0 	.word	0x200064f0

08016c78 <__swhatbuf_r>:
 8016c78:	b570      	push	{r4, r5, r6, lr}
 8016c7a:	460e      	mov	r6, r1
 8016c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c80:	2900      	cmp	r1, #0
 8016c82:	b096      	sub	sp, #88	; 0x58
 8016c84:	4614      	mov	r4, r2
 8016c86:	461d      	mov	r5, r3
 8016c88:	da07      	bge.n	8016c9a <__swhatbuf_r+0x22>
 8016c8a:	2300      	movs	r3, #0
 8016c8c:	602b      	str	r3, [r5, #0]
 8016c8e:	89b3      	ldrh	r3, [r6, #12]
 8016c90:	061a      	lsls	r2, r3, #24
 8016c92:	d410      	bmi.n	8016cb6 <__swhatbuf_r+0x3e>
 8016c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016c98:	e00e      	b.n	8016cb8 <__swhatbuf_r+0x40>
 8016c9a:	466a      	mov	r2, sp
 8016c9c:	f001 fbd2 	bl	8018444 <_fstat_r>
 8016ca0:	2800      	cmp	r0, #0
 8016ca2:	dbf2      	blt.n	8016c8a <__swhatbuf_r+0x12>
 8016ca4:	9a01      	ldr	r2, [sp, #4]
 8016ca6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016caa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016cae:	425a      	negs	r2, r3
 8016cb0:	415a      	adcs	r2, r3
 8016cb2:	602a      	str	r2, [r5, #0]
 8016cb4:	e7ee      	b.n	8016c94 <__swhatbuf_r+0x1c>
 8016cb6:	2340      	movs	r3, #64	; 0x40
 8016cb8:	2000      	movs	r0, #0
 8016cba:	6023      	str	r3, [r4, #0]
 8016cbc:	b016      	add	sp, #88	; 0x58
 8016cbe:	bd70      	pop	{r4, r5, r6, pc}

08016cc0 <__smakebuf_r>:
 8016cc0:	898b      	ldrh	r3, [r1, #12]
 8016cc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016cc4:	079d      	lsls	r5, r3, #30
 8016cc6:	4606      	mov	r6, r0
 8016cc8:	460c      	mov	r4, r1
 8016cca:	d507      	bpl.n	8016cdc <__smakebuf_r+0x1c>
 8016ccc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016cd0:	6023      	str	r3, [r4, #0]
 8016cd2:	6123      	str	r3, [r4, #16]
 8016cd4:	2301      	movs	r3, #1
 8016cd6:	6163      	str	r3, [r4, #20]
 8016cd8:	b002      	add	sp, #8
 8016cda:	bd70      	pop	{r4, r5, r6, pc}
 8016cdc:	ab01      	add	r3, sp, #4
 8016cde:	466a      	mov	r2, sp
 8016ce0:	f7ff ffca 	bl	8016c78 <__swhatbuf_r>
 8016ce4:	9900      	ldr	r1, [sp, #0]
 8016ce6:	4605      	mov	r5, r0
 8016ce8:	4630      	mov	r0, r6
 8016cea:	f7fc f831 	bl	8012d50 <_malloc_r>
 8016cee:	b948      	cbnz	r0, 8016d04 <__smakebuf_r+0x44>
 8016cf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016cf4:	059a      	lsls	r2, r3, #22
 8016cf6:	d4ef      	bmi.n	8016cd8 <__smakebuf_r+0x18>
 8016cf8:	f023 0303 	bic.w	r3, r3, #3
 8016cfc:	f043 0302 	orr.w	r3, r3, #2
 8016d00:	81a3      	strh	r3, [r4, #12]
 8016d02:	e7e3      	b.n	8016ccc <__smakebuf_r+0xc>
 8016d04:	4b0d      	ldr	r3, [pc, #52]	; (8016d3c <__smakebuf_r+0x7c>)
 8016d06:	62b3      	str	r3, [r6, #40]	; 0x28
 8016d08:	89a3      	ldrh	r3, [r4, #12]
 8016d0a:	6020      	str	r0, [r4, #0]
 8016d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016d10:	81a3      	strh	r3, [r4, #12]
 8016d12:	9b00      	ldr	r3, [sp, #0]
 8016d14:	6163      	str	r3, [r4, #20]
 8016d16:	9b01      	ldr	r3, [sp, #4]
 8016d18:	6120      	str	r0, [r4, #16]
 8016d1a:	b15b      	cbz	r3, 8016d34 <__smakebuf_r+0x74>
 8016d1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016d20:	4630      	mov	r0, r6
 8016d22:	f001 fba1 	bl	8018468 <_isatty_r>
 8016d26:	b128      	cbz	r0, 8016d34 <__smakebuf_r+0x74>
 8016d28:	89a3      	ldrh	r3, [r4, #12]
 8016d2a:	f023 0303 	bic.w	r3, r3, #3
 8016d2e:	f043 0301 	orr.w	r3, r3, #1
 8016d32:	81a3      	strh	r3, [r4, #12]
 8016d34:	89a0      	ldrh	r0, [r4, #12]
 8016d36:	4305      	orrs	r5, r0
 8016d38:	81a5      	strh	r5, [r4, #12]
 8016d3a:	e7cd      	b.n	8016cd8 <__smakebuf_r+0x18>
 8016d3c:	08012305 	.word	0x08012305

08016d40 <__ascii_mbtowc>:
 8016d40:	b082      	sub	sp, #8
 8016d42:	b901      	cbnz	r1, 8016d46 <__ascii_mbtowc+0x6>
 8016d44:	a901      	add	r1, sp, #4
 8016d46:	b142      	cbz	r2, 8016d5a <__ascii_mbtowc+0x1a>
 8016d48:	b14b      	cbz	r3, 8016d5e <__ascii_mbtowc+0x1e>
 8016d4a:	7813      	ldrb	r3, [r2, #0]
 8016d4c:	600b      	str	r3, [r1, #0]
 8016d4e:	7812      	ldrb	r2, [r2, #0]
 8016d50:	1e10      	subs	r0, r2, #0
 8016d52:	bf18      	it	ne
 8016d54:	2001      	movne	r0, #1
 8016d56:	b002      	add	sp, #8
 8016d58:	4770      	bx	lr
 8016d5a:	4610      	mov	r0, r2
 8016d5c:	e7fb      	b.n	8016d56 <__ascii_mbtowc+0x16>
 8016d5e:	f06f 0001 	mvn.w	r0, #1
 8016d62:	e7f8      	b.n	8016d56 <__ascii_mbtowc+0x16>

08016d64 <__malloc_lock>:
 8016d64:	4801      	ldr	r0, [pc, #4]	; (8016d6c <__malloc_lock+0x8>)
 8016d66:	f7fb bce1 	b.w	801272c <__retarget_lock_acquire_recursive>
 8016d6a:	bf00      	nop
 8016d6c:	200064e8 	.word	0x200064e8

08016d70 <__malloc_unlock>:
 8016d70:	4801      	ldr	r0, [pc, #4]	; (8016d78 <__malloc_unlock+0x8>)
 8016d72:	f7fb bcdd 	b.w	8012730 <__retarget_lock_release_recursive>
 8016d76:	bf00      	nop
 8016d78:	200064e8 	.word	0x200064e8

08016d7c <_Balloc>:
 8016d7c:	b570      	push	{r4, r5, r6, lr}
 8016d7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016d80:	4604      	mov	r4, r0
 8016d82:	460d      	mov	r5, r1
 8016d84:	b976      	cbnz	r6, 8016da4 <_Balloc+0x28>
 8016d86:	2010      	movs	r0, #16
 8016d88:	f7fb fcd4 	bl	8012734 <malloc>
 8016d8c:	4602      	mov	r2, r0
 8016d8e:	6260      	str	r0, [r4, #36]	; 0x24
 8016d90:	b920      	cbnz	r0, 8016d9c <_Balloc+0x20>
 8016d92:	4b18      	ldr	r3, [pc, #96]	; (8016df4 <_Balloc+0x78>)
 8016d94:	4818      	ldr	r0, [pc, #96]	; (8016df8 <_Balloc+0x7c>)
 8016d96:	2166      	movs	r1, #102	; 0x66
 8016d98:	f7fe fb62 	bl	8015460 <__assert_func>
 8016d9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016da0:	6006      	str	r6, [r0, #0]
 8016da2:	60c6      	str	r6, [r0, #12]
 8016da4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016da6:	68f3      	ldr	r3, [r6, #12]
 8016da8:	b183      	cbz	r3, 8016dcc <_Balloc+0x50>
 8016daa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016dac:	68db      	ldr	r3, [r3, #12]
 8016dae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016db2:	b9b8      	cbnz	r0, 8016de4 <_Balloc+0x68>
 8016db4:	2101      	movs	r1, #1
 8016db6:	fa01 f605 	lsl.w	r6, r1, r5
 8016dba:	1d72      	adds	r2, r6, #5
 8016dbc:	0092      	lsls	r2, r2, #2
 8016dbe:	4620      	mov	r0, r4
 8016dc0:	f000 fc97 	bl	80176f2 <_calloc_r>
 8016dc4:	b160      	cbz	r0, 8016de0 <_Balloc+0x64>
 8016dc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016dca:	e00e      	b.n	8016dea <_Balloc+0x6e>
 8016dcc:	2221      	movs	r2, #33	; 0x21
 8016dce:	2104      	movs	r1, #4
 8016dd0:	4620      	mov	r0, r4
 8016dd2:	f000 fc8e 	bl	80176f2 <_calloc_r>
 8016dd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016dd8:	60f0      	str	r0, [r6, #12]
 8016dda:	68db      	ldr	r3, [r3, #12]
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d1e4      	bne.n	8016daa <_Balloc+0x2e>
 8016de0:	2000      	movs	r0, #0
 8016de2:	bd70      	pop	{r4, r5, r6, pc}
 8016de4:	6802      	ldr	r2, [r0, #0]
 8016de6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016dea:	2300      	movs	r3, #0
 8016dec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016df0:	e7f7      	b.n	8016de2 <_Balloc+0x66>
 8016df2:	bf00      	nop
 8016df4:	0801a538 	.word	0x0801a538
 8016df8:	0801a8cc 	.word	0x0801a8cc

08016dfc <_Bfree>:
 8016dfc:	b570      	push	{r4, r5, r6, lr}
 8016dfe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016e00:	4605      	mov	r5, r0
 8016e02:	460c      	mov	r4, r1
 8016e04:	b976      	cbnz	r6, 8016e24 <_Bfree+0x28>
 8016e06:	2010      	movs	r0, #16
 8016e08:	f7fb fc94 	bl	8012734 <malloc>
 8016e0c:	4602      	mov	r2, r0
 8016e0e:	6268      	str	r0, [r5, #36]	; 0x24
 8016e10:	b920      	cbnz	r0, 8016e1c <_Bfree+0x20>
 8016e12:	4b09      	ldr	r3, [pc, #36]	; (8016e38 <_Bfree+0x3c>)
 8016e14:	4809      	ldr	r0, [pc, #36]	; (8016e3c <_Bfree+0x40>)
 8016e16:	218a      	movs	r1, #138	; 0x8a
 8016e18:	f7fe fb22 	bl	8015460 <__assert_func>
 8016e1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016e20:	6006      	str	r6, [r0, #0]
 8016e22:	60c6      	str	r6, [r0, #12]
 8016e24:	b13c      	cbz	r4, 8016e36 <_Bfree+0x3a>
 8016e26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016e28:	6862      	ldr	r2, [r4, #4]
 8016e2a:	68db      	ldr	r3, [r3, #12]
 8016e2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016e30:	6021      	str	r1, [r4, #0]
 8016e32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016e36:	bd70      	pop	{r4, r5, r6, pc}
 8016e38:	0801a538 	.word	0x0801a538
 8016e3c:	0801a8cc 	.word	0x0801a8cc

08016e40 <__multadd>:
 8016e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e44:	690e      	ldr	r6, [r1, #16]
 8016e46:	4607      	mov	r7, r0
 8016e48:	4698      	mov	r8, r3
 8016e4a:	460c      	mov	r4, r1
 8016e4c:	f101 0014 	add.w	r0, r1, #20
 8016e50:	2300      	movs	r3, #0
 8016e52:	6805      	ldr	r5, [r0, #0]
 8016e54:	b2a9      	uxth	r1, r5
 8016e56:	fb02 8101 	mla	r1, r2, r1, r8
 8016e5a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8016e5e:	0c2d      	lsrs	r5, r5, #16
 8016e60:	fb02 c505 	mla	r5, r2, r5, ip
 8016e64:	b289      	uxth	r1, r1
 8016e66:	3301      	adds	r3, #1
 8016e68:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8016e6c:	429e      	cmp	r6, r3
 8016e6e:	f840 1b04 	str.w	r1, [r0], #4
 8016e72:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8016e76:	dcec      	bgt.n	8016e52 <__multadd+0x12>
 8016e78:	f1b8 0f00 	cmp.w	r8, #0
 8016e7c:	d022      	beq.n	8016ec4 <__multadd+0x84>
 8016e7e:	68a3      	ldr	r3, [r4, #8]
 8016e80:	42b3      	cmp	r3, r6
 8016e82:	dc19      	bgt.n	8016eb8 <__multadd+0x78>
 8016e84:	6861      	ldr	r1, [r4, #4]
 8016e86:	4638      	mov	r0, r7
 8016e88:	3101      	adds	r1, #1
 8016e8a:	f7ff ff77 	bl	8016d7c <_Balloc>
 8016e8e:	4605      	mov	r5, r0
 8016e90:	b928      	cbnz	r0, 8016e9e <__multadd+0x5e>
 8016e92:	4602      	mov	r2, r0
 8016e94:	4b0d      	ldr	r3, [pc, #52]	; (8016ecc <__multadd+0x8c>)
 8016e96:	480e      	ldr	r0, [pc, #56]	; (8016ed0 <__multadd+0x90>)
 8016e98:	21b5      	movs	r1, #181	; 0xb5
 8016e9a:	f7fe fae1 	bl	8015460 <__assert_func>
 8016e9e:	6922      	ldr	r2, [r4, #16]
 8016ea0:	3202      	adds	r2, #2
 8016ea2:	f104 010c 	add.w	r1, r4, #12
 8016ea6:	0092      	lsls	r2, r2, #2
 8016ea8:	300c      	adds	r0, #12
 8016eaa:	f7fb fc53 	bl	8012754 <memcpy>
 8016eae:	4621      	mov	r1, r4
 8016eb0:	4638      	mov	r0, r7
 8016eb2:	f7ff ffa3 	bl	8016dfc <_Bfree>
 8016eb6:	462c      	mov	r4, r5
 8016eb8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8016ebc:	3601      	adds	r6, #1
 8016ebe:	f8c3 8014 	str.w	r8, [r3, #20]
 8016ec2:	6126      	str	r6, [r4, #16]
 8016ec4:	4620      	mov	r0, r4
 8016ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016eca:	bf00      	nop
 8016ecc:	0801a83d 	.word	0x0801a83d
 8016ed0:	0801a8cc 	.word	0x0801a8cc

08016ed4 <__s2b>:
 8016ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ed8:	460c      	mov	r4, r1
 8016eda:	4615      	mov	r5, r2
 8016edc:	461f      	mov	r7, r3
 8016ede:	2209      	movs	r2, #9
 8016ee0:	3308      	adds	r3, #8
 8016ee2:	4606      	mov	r6, r0
 8016ee4:	fb93 f3f2 	sdiv	r3, r3, r2
 8016ee8:	2100      	movs	r1, #0
 8016eea:	2201      	movs	r2, #1
 8016eec:	429a      	cmp	r2, r3
 8016eee:	db09      	blt.n	8016f04 <__s2b+0x30>
 8016ef0:	4630      	mov	r0, r6
 8016ef2:	f7ff ff43 	bl	8016d7c <_Balloc>
 8016ef6:	b940      	cbnz	r0, 8016f0a <__s2b+0x36>
 8016ef8:	4602      	mov	r2, r0
 8016efa:	4b19      	ldr	r3, [pc, #100]	; (8016f60 <__s2b+0x8c>)
 8016efc:	4819      	ldr	r0, [pc, #100]	; (8016f64 <__s2b+0x90>)
 8016efe:	21ce      	movs	r1, #206	; 0xce
 8016f00:	f7fe faae 	bl	8015460 <__assert_func>
 8016f04:	0052      	lsls	r2, r2, #1
 8016f06:	3101      	adds	r1, #1
 8016f08:	e7f0      	b.n	8016eec <__s2b+0x18>
 8016f0a:	9b08      	ldr	r3, [sp, #32]
 8016f0c:	6143      	str	r3, [r0, #20]
 8016f0e:	2d09      	cmp	r5, #9
 8016f10:	f04f 0301 	mov.w	r3, #1
 8016f14:	6103      	str	r3, [r0, #16]
 8016f16:	dd16      	ble.n	8016f46 <__s2b+0x72>
 8016f18:	f104 0909 	add.w	r9, r4, #9
 8016f1c:	46c8      	mov	r8, r9
 8016f1e:	442c      	add	r4, r5
 8016f20:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016f24:	4601      	mov	r1, r0
 8016f26:	3b30      	subs	r3, #48	; 0x30
 8016f28:	220a      	movs	r2, #10
 8016f2a:	4630      	mov	r0, r6
 8016f2c:	f7ff ff88 	bl	8016e40 <__multadd>
 8016f30:	45a0      	cmp	r8, r4
 8016f32:	d1f5      	bne.n	8016f20 <__s2b+0x4c>
 8016f34:	f1a5 0408 	sub.w	r4, r5, #8
 8016f38:	444c      	add	r4, r9
 8016f3a:	1b2d      	subs	r5, r5, r4
 8016f3c:	1963      	adds	r3, r4, r5
 8016f3e:	42bb      	cmp	r3, r7
 8016f40:	db04      	blt.n	8016f4c <__s2b+0x78>
 8016f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f46:	340a      	adds	r4, #10
 8016f48:	2509      	movs	r5, #9
 8016f4a:	e7f6      	b.n	8016f3a <__s2b+0x66>
 8016f4c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016f50:	4601      	mov	r1, r0
 8016f52:	3b30      	subs	r3, #48	; 0x30
 8016f54:	220a      	movs	r2, #10
 8016f56:	4630      	mov	r0, r6
 8016f58:	f7ff ff72 	bl	8016e40 <__multadd>
 8016f5c:	e7ee      	b.n	8016f3c <__s2b+0x68>
 8016f5e:	bf00      	nop
 8016f60:	0801a83d 	.word	0x0801a83d
 8016f64:	0801a8cc 	.word	0x0801a8cc

08016f68 <__hi0bits>:
 8016f68:	0c03      	lsrs	r3, r0, #16
 8016f6a:	041b      	lsls	r3, r3, #16
 8016f6c:	b9d3      	cbnz	r3, 8016fa4 <__hi0bits+0x3c>
 8016f6e:	0400      	lsls	r0, r0, #16
 8016f70:	2310      	movs	r3, #16
 8016f72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016f76:	bf04      	itt	eq
 8016f78:	0200      	lsleq	r0, r0, #8
 8016f7a:	3308      	addeq	r3, #8
 8016f7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016f80:	bf04      	itt	eq
 8016f82:	0100      	lsleq	r0, r0, #4
 8016f84:	3304      	addeq	r3, #4
 8016f86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016f8a:	bf04      	itt	eq
 8016f8c:	0080      	lsleq	r0, r0, #2
 8016f8e:	3302      	addeq	r3, #2
 8016f90:	2800      	cmp	r0, #0
 8016f92:	db05      	blt.n	8016fa0 <__hi0bits+0x38>
 8016f94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016f98:	f103 0301 	add.w	r3, r3, #1
 8016f9c:	bf08      	it	eq
 8016f9e:	2320      	moveq	r3, #32
 8016fa0:	4618      	mov	r0, r3
 8016fa2:	4770      	bx	lr
 8016fa4:	2300      	movs	r3, #0
 8016fa6:	e7e4      	b.n	8016f72 <__hi0bits+0xa>

08016fa8 <__lo0bits>:
 8016fa8:	6803      	ldr	r3, [r0, #0]
 8016faa:	f013 0207 	ands.w	r2, r3, #7
 8016fae:	4601      	mov	r1, r0
 8016fb0:	d00b      	beq.n	8016fca <__lo0bits+0x22>
 8016fb2:	07da      	lsls	r2, r3, #31
 8016fb4:	d424      	bmi.n	8017000 <__lo0bits+0x58>
 8016fb6:	0798      	lsls	r0, r3, #30
 8016fb8:	bf49      	itett	mi
 8016fba:	085b      	lsrmi	r3, r3, #1
 8016fbc:	089b      	lsrpl	r3, r3, #2
 8016fbe:	2001      	movmi	r0, #1
 8016fc0:	600b      	strmi	r3, [r1, #0]
 8016fc2:	bf5c      	itt	pl
 8016fc4:	600b      	strpl	r3, [r1, #0]
 8016fc6:	2002      	movpl	r0, #2
 8016fc8:	4770      	bx	lr
 8016fca:	b298      	uxth	r0, r3
 8016fcc:	b9b0      	cbnz	r0, 8016ffc <__lo0bits+0x54>
 8016fce:	0c1b      	lsrs	r3, r3, #16
 8016fd0:	2010      	movs	r0, #16
 8016fd2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016fd6:	bf04      	itt	eq
 8016fd8:	0a1b      	lsreq	r3, r3, #8
 8016fda:	3008      	addeq	r0, #8
 8016fdc:	071a      	lsls	r2, r3, #28
 8016fde:	bf04      	itt	eq
 8016fe0:	091b      	lsreq	r3, r3, #4
 8016fe2:	3004      	addeq	r0, #4
 8016fe4:	079a      	lsls	r2, r3, #30
 8016fe6:	bf04      	itt	eq
 8016fe8:	089b      	lsreq	r3, r3, #2
 8016fea:	3002      	addeq	r0, #2
 8016fec:	07da      	lsls	r2, r3, #31
 8016fee:	d403      	bmi.n	8016ff8 <__lo0bits+0x50>
 8016ff0:	085b      	lsrs	r3, r3, #1
 8016ff2:	f100 0001 	add.w	r0, r0, #1
 8016ff6:	d005      	beq.n	8017004 <__lo0bits+0x5c>
 8016ff8:	600b      	str	r3, [r1, #0]
 8016ffa:	4770      	bx	lr
 8016ffc:	4610      	mov	r0, r2
 8016ffe:	e7e8      	b.n	8016fd2 <__lo0bits+0x2a>
 8017000:	2000      	movs	r0, #0
 8017002:	4770      	bx	lr
 8017004:	2020      	movs	r0, #32
 8017006:	4770      	bx	lr

08017008 <__i2b>:
 8017008:	b510      	push	{r4, lr}
 801700a:	460c      	mov	r4, r1
 801700c:	2101      	movs	r1, #1
 801700e:	f7ff feb5 	bl	8016d7c <_Balloc>
 8017012:	4602      	mov	r2, r0
 8017014:	b928      	cbnz	r0, 8017022 <__i2b+0x1a>
 8017016:	4b05      	ldr	r3, [pc, #20]	; (801702c <__i2b+0x24>)
 8017018:	4805      	ldr	r0, [pc, #20]	; (8017030 <__i2b+0x28>)
 801701a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801701e:	f7fe fa1f 	bl	8015460 <__assert_func>
 8017022:	2301      	movs	r3, #1
 8017024:	6144      	str	r4, [r0, #20]
 8017026:	6103      	str	r3, [r0, #16]
 8017028:	bd10      	pop	{r4, pc}
 801702a:	bf00      	nop
 801702c:	0801a83d 	.word	0x0801a83d
 8017030:	0801a8cc 	.word	0x0801a8cc

08017034 <__multiply>:
 8017034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017038:	4614      	mov	r4, r2
 801703a:	690a      	ldr	r2, [r1, #16]
 801703c:	6923      	ldr	r3, [r4, #16]
 801703e:	429a      	cmp	r2, r3
 8017040:	bfb8      	it	lt
 8017042:	460b      	movlt	r3, r1
 8017044:	460d      	mov	r5, r1
 8017046:	bfbc      	itt	lt
 8017048:	4625      	movlt	r5, r4
 801704a:	461c      	movlt	r4, r3
 801704c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8017050:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8017054:	68ab      	ldr	r3, [r5, #8]
 8017056:	6869      	ldr	r1, [r5, #4]
 8017058:	eb0a 0709 	add.w	r7, sl, r9
 801705c:	42bb      	cmp	r3, r7
 801705e:	b085      	sub	sp, #20
 8017060:	bfb8      	it	lt
 8017062:	3101      	addlt	r1, #1
 8017064:	f7ff fe8a 	bl	8016d7c <_Balloc>
 8017068:	b930      	cbnz	r0, 8017078 <__multiply+0x44>
 801706a:	4602      	mov	r2, r0
 801706c:	4b42      	ldr	r3, [pc, #264]	; (8017178 <__multiply+0x144>)
 801706e:	4843      	ldr	r0, [pc, #268]	; (801717c <__multiply+0x148>)
 8017070:	f240 115d 	movw	r1, #349	; 0x15d
 8017074:	f7fe f9f4 	bl	8015460 <__assert_func>
 8017078:	f100 0614 	add.w	r6, r0, #20
 801707c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8017080:	4633      	mov	r3, r6
 8017082:	2200      	movs	r2, #0
 8017084:	4543      	cmp	r3, r8
 8017086:	d31e      	bcc.n	80170c6 <__multiply+0x92>
 8017088:	f105 0c14 	add.w	ip, r5, #20
 801708c:	f104 0314 	add.w	r3, r4, #20
 8017090:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8017094:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8017098:	9202      	str	r2, [sp, #8]
 801709a:	ebac 0205 	sub.w	r2, ip, r5
 801709e:	3a15      	subs	r2, #21
 80170a0:	f022 0203 	bic.w	r2, r2, #3
 80170a4:	3204      	adds	r2, #4
 80170a6:	f105 0115 	add.w	r1, r5, #21
 80170aa:	458c      	cmp	ip, r1
 80170ac:	bf38      	it	cc
 80170ae:	2204      	movcc	r2, #4
 80170b0:	9201      	str	r2, [sp, #4]
 80170b2:	9a02      	ldr	r2, [sp, #8]
 80170b4:	9303      	str	r3, [sp, #12]
 80170b6:	429a      	cmp	r2, r3
 80170b8:	d808      	bhi.n	80170cc <__multiply+0x98>
 80170ba:	2f00      	cmp	r7, #0
 80170bc:	dc55      	bgt.n	801716a <__multiply+0x136>
 80170be:	6107      	str	r7, [r0, #16]
 80170c0:	b005      	add	sp, #20
 80170c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170c6:	f843 2b04 	str.w	r2, [r3], #4
 80170ca:	e7db      	b.n	8017084 <__multiply+0x50>
 80170cc:	f8b3 a000 	ldrh.w	sl, [r3]
 80170d0:	f1ba 0f00 	cmp.w	sl, #0
 80170d4:	d020      	beq.n	8017118 <__multiply+0xe4>
 80170d6:	f105 0e14 	add.w	lr, r5, #20
 80170da:	46b1      	mov	r9, r6
 80170dc:	2200      	movs	r2, #0
 80170de:	f85e 4b04 	ldr.w	r4, [lr], #4
 80170e2:	f8d9 b000 	ldr.w	fp, [r9]
 80170e6:	b2a1      	uxth	r1, r4
 80170e8:	fa1f fb8b 	uxth.w	fp, fp
 80170ec:	fb0a b101 	mla	r1, sl, r1, fp
 80170f0:	4411      	add	r1, r2
 80170f2:	f8d9 2000 	ldr.w	r2, [r9]
 80170f6:	0c24      	lsrs	r4, r4, #16
 80170f8:	0c12      	lsrs	r2, r2, #16
 80170fa:	fb0a 2404 	mla	r4, sl, r4, r2
 80170fe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8017102:	b289      	uxth	r1, r1
 8017104:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8017108:	45f4      	cmp	ip, lr
 801710a:	f849 1b04 	str.w	r1, [r9], #4
 801710e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8017112:	d8e4      	bhi.n	80170de <__multiply+0xaa>
 8017114:	9901      	ldr	r1, [sp, #4]
 8017116:	5072      	str	r2, [r6, r1]
 8017118:	9a03      	ldr	r2, [sp, #12]
 801711a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801711e:	3304      	adds	r3, #4
 8017120:	f1b9 0f00 	cmp.w	r9, #0
 8017124:	d01f      	beq.n	8017166 <__multiply+0x132>
 8017126:	6834      	ldr	r4, [r6, #0]
 8017128:	f105 0114 	add.w	r1, r5, #20
 801712c:	46b6      	mov	lr, r6
 801712e:	f04f 0a00 	mov.w	sl, #0
 8017132:	880a      	ldrh	r2, [r1, #0]
 8017134:	f8be b002 	ldrh.w	fp, [lr, #2]
 8017138:	fb09 b202 	mla	r2, r9, r2, fp
 801713c:	4492      	add	sl, r2
 801713e:	b2a4      	uxth	r4, r4
 8017140:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8017144:	f84e 4b04 	str.w	r4, [lr], #4
 8017148:	f851 4b04 	ldr.w	r4, [r1], #4
 801714c:	f8be 2000 	ldrh.w	r2, [lr]
 8017150:	0c24      	lsrs	r4, r4, #16
 8017152:	fb09 2404 	mla	r4, r9, r4, r2
 8017156:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801715a:	458c      	cmp	ip, r1
 801715c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8017160:	d8e7      	bhi.n	8017132 <__multiply+0xfe>
 8017162:	9a01      	ldr	r2, [sp, #4]
 8017164:	50b4      	str	r4, [r6, r2]
 8017166:	3604      	adds	r6, #4
 8017168:	e7a3      	b.n	80170b2 <__multiply+0x7e>
 801716a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801716e:	2b00      	cmp	r3, #0
 8017170:	d1a5      	bne.n	80170be <__multiply+0x8a>
 8017172:	3f01      	subs	r7, #1
 8017174:	e7a1      	b.n	80170ba <__multiply+0x86>
 8017176:	bf00      	nop
 8017178:	0801a83d 	.word	0x0801a83d
 801717c:	0801a8cc 	.word	0x0801a8cc

08017180 <__pow5mult>:
 8017180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017184:	4615      	mov	r5, r2
 8017186:	f012 0203 	ands.w	r2, r2, #3
 801718a:	4606      	mov	r6, r0
 801718c:	460f      	mov	r7, r1
 801718e:	d007      	beq.n	80171a0 <__pow5mult+0x20>
 8017190:	4c25      	ldr	r4, [pc, #148]	; (8017228 <__pow5mult+0xa8>)
 8017192:	3a01      	subs	r2, #1
 8017194:	2300      	movs	r3, #0
 8017196:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801719a:	f7ff fe51 	bl	8016e40 <__multadd>
 801719e:	4607      	mov	r7, r0
 80171a0:	10ad      	asrs	r5, r5, #2
 80171a2:	d03d      	beq.n	8017220 <__pow5mult+0xa0>
 80171a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80171a6:	b97c      	cbnz	r4, 80171c8 <__pow5mult+0x48>
 80171a8:	2010      	movs	r0, #16
 80171aa:	f7fb fac3 	bl	8012734 <malloc>
 80171ae:	4602      	mov	r2, r0
 80171b0:	6270      	str	r0, [r6, #36]	; 0x24
 80171b2:	b928      	cbnz	r0, 80171c0 <__pow5mult+0x40>
 80171b4:	4b1d      	ldr	r3, [pc, #116]	; (801722c <__pow5mult+0xac>)
 80171b6:	481e      	ldr	r0, [pc, #120]	; (8017230 <__pow5mult+0xb0>)
 80171b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80171bc:	f7fe f950 	bl	8015460 <__assert_func>
 80171c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80171c4:	6004      	str	r4, [r0, #0]
 80171c6:	60c4      	str	r4, [r0, #12]
 80171c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80171cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80171d0:	b94c      	cbnz	r4, 80171e6 <__pow5mult+0x66>
 80171d2:	f240 2171 	movw	r1, #625	; 0x271
 80171d6:	4630      	mov	r0, r6
 80171d8:	f7ff ff16 	bl	8017008 <__i2b>
 80171dc:	2300      	movs	r3, #0
 80171de:	f8c8 0008 	str.w	r0, [r8, #8]
 80171e2:	4604      	mov	r4, r0
 80171e4:	6003      	str	r3, [r0, #0]
 80171e6:	f04f 0900 	mov.w	r9, #0
 80171ea:	07eb      	lsls	r3, r5, #31
 80171ec:	d50a      	bpl.n	8017204 <__pow5mult+0x84>
 80171ee:	4639      	mov	r1, r7
 80171f0:	4622      	mov	r2, r4
 80171f2:	4630      	mov	r0, r6
 80171f4:	f7ff ff1e 	bl	8017034 <__multiply>
 80171f8:	4639      	mov	r1, r7
 80171fa:	4680      	mov	r8, r0
 80171fc:	4630      	mov	r0, r6
 80171fe:	f7ff fdfd 	bl	8016dfc <_Bfree>
 8017202:	4647      	mov	r7, r8
 8017204:	106d      	asrs	r5, r5, #1
 8017206:	d00b      	beq.n	8017220 <__pow5mult+0xa0>
 8017208:	6820      	ldr	r0, [r4, #0]
 801720a:	b938      	cbnz	r0, 801721c <__pow5mult+0x9c>
 801720c:	4622      	mov	r2, r4
 801720e:	4621      	mov	r1, r4
 8017210:	4630      	mov	r0, r6
 8017212:	f7ff ff0f 	bl	8017034 <__multiply>
 8017216:	6020      	str	r0, [r4, #0]
 8017218:	f8c0 9000 	str.w	r9, [r0]
 801721c:	4604      	mov	r4, r0
 801721e:	e7e4      	b.n	80171ea <__pow5mult+0x6a>
 8017220:	4638      	mov	r0, r7
 8017222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017226:	bf00      	nop
 8017228:	0801aa20 	.word	0x0801aa20
 801722c:	0801a538 	.word	0x0801a538
 8017230:	0801a8cc 	.word	0x0801a8cc

08017234 <__lshift>:
 8017234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017238:	460c      	mov	r4, r1
 801723a:	6849      	ldr	r1, [r1, #4]
 801723c:	6923      	ldr	r3, [r4, #16]
 801723e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017242:	68a3      	ldr	r3, [r4, #8]
 8017244:	4607      	mov	r7, r0
 8017246:	4691      	mov	r9, r2
 8017248:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801724c:	f108 0601 	add.w	r6, r8, #1
 8017250:	42b3      	cmp	r3, r6
 8017252:	db0b      	blt.n	801726c <__lshift+0x38>
 8017254:	4638      	mov	r0, r7
 8017256:	f7ff fd91 	bl	8016d7c <_Balloc>
 801725a:	4605      	mov	r5, r0
 801725c:	b948      	cbnz	r0, 8017272 <__lshift+0x3e>
 801725e:	4602      	mov	r2, r0
 8017260:	4b28      	ldr	r3, [pc, #160]	; (8017304 <__lshift+0xd0>)
 8017262:	4829      	ldr	r0, [pc, #164]	; (8017308 <__lshift+0xd4>)
 8017264:	f240 11d9 	movw	r1, #473	; 0x1d9
 8017268:	f7fe f8fa 	bl	8015460 <__assert_func>
 801726c:	3101      	adds	r1, #1
 801726e:	005b      	lsls	r3, r3, #1
 8017270:	e7ee      	b.n	8017250 <__lshift+0x1c>
 8017272:	2300      	movs	r3, #0
 8017274:	f100 0114 	add.w	r1, r0, #20
 8017278:	f100 0210 	add.w	r2, r0, #16
 801727c:	4618      	mov	r0, r3
 801727e:	4553      	cmp	r3, sl
 8017280:	db33      	blt.n	80172ea <__lshift+0xb6>
 8017282:	6920      	ldr	r0, [r4, #16]
 8017284:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017288:	f104 0314 	add.w	r3, r4, #20
 801728c:	f019 091f 	ands.w	r9, r9, #31
 8017290:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017294:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017298:	d02b      	beq.n	80172f2 <__lshift+0xbe>
 801729a:	f1c9 0e20 	rsb	lr, r9, #32
 801729e:	468a      	mov	sl, r1
 80172a0:	2200      	movs	r2, #0
 80172a2:	6818      	ldr	r0, [r3, #0]
 80172a4:	fa00 f009 	lsl.w	r0, r0, r9
 80172a8:	4302      	orrs	r2, r0
 80172aa:	f84a 2b04 	str.w	r2, [sl], #4
 80172ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80172b2:	459c      	cmp	ip, r3
 80172b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80172b8:	d8f3      	bhi.n	80172a2 <__lshift+0x6e>
 80172ba:	ebac 0304 	sub.w	r3, ip, r4
 80172be:	3b15      	subs	r3, #21
 80172c0:	f023 0303 	bic.w	r3, r3, #3
 80172c4:	3304      	adds	r3, #4
 80172c6:	f104 0015 	add.w	r0, r4, #21
 80172ca:	4584      	cmp	ip, r0
 80172cc:	bf38      	it	cc
 80172ce:	2304      	movcc	r3, #4
 80172d0:	50ca      	str	r2, [r1, r3]
 80172d2:	b10a      	cbz	r2, 80172d8 <__lshift+0xa4>
 80172d4:	f108 0602 	add.w	r6, r8, #2
 80172d8:	3e01      	subs	r6, #1
 80172da:	4638      	mov	r0, r7
 80172dc:	612e      	str	r6, [r5, #16]
 80172de:	4621      	mov	r1, r4
 80172e0:	f7ff fd8c 	bl	8016dfc <_Bfree>
 80172e4:	4628      	mov	r0, r5
 80172e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80172ee:	3301      	adds	r3, #1
 80172f0:	e7c5      	b.n	801727e <__lshift+0x4a>
 80172f2:	3904      	subs	r1, #4
 80172f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80172f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80172fc:	459c      	cmp	ip, r3
 80172fe:	d8f9      	bhi.n	80172f4 <__lshift+0xc0>
 8017300:	e7ea      	b.n	80172d8 <__lshift+0xa4>
 8017302:	bf00      	nop
 8017304:	0801a83d 	.word	0x0801a83d
 8017308:	0801a8cc 	.word	0x0801a8cc

0801730c <__mcmp>:
 801730c:	b530      	push	{r4, r5, lr}
 801730e:	6902      	ldr	r2, [r0, #16]
 8017310:	690c      	ldr	r4, [r1, #16]
 8017312:	1b12      	subs	r2, r2, r4
 8017314:	d10e      	bne.n	8017334 <__mcmp+0x28>
 8017316:	f100 0314 	add.w	r3, r0, #20
 801731a:	3114      	adds	r1, #20
 801731c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8017320:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8017324:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8017328:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801732c:	42a5      	cmp	r5, r4
 801732e:	d003      	beq.n	8017338 <__mcmp+0x2c>
 8017330:	d305      	bcc.n	801733e <__mcmp+0x32>
 8017332:	2201      	movs	r2, #1
 8017334:	4610      	mov	r0, r2
 8017336:	bd30      	pop	{r4, r5, pc}
 8017338:	4283      	cmp	r3, r0
 801733a:	d3f3      	bcc.n	8017324 <__mcmp+0x18>
 801733c:	e7fa      	b.n	8017334 <__mcmp+0x28>
 801733e:	f04f 32ff 	mov.w	r2, #4294967295
 8017342:	e7f7      	b.n	8017334 <__mcmp+0x28>

08017344 <__mdiff>:
 8017344:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017348:	460c      	mov	r4, r1
 801734a:	4606      	mov	r6, r0
 801734c:	4611      	mov	r1, r2
 801734e:	4620      	mov	r0, r4
 8017350:	4617      	mov	r7, r2
 8017352:	f7ff ffdb 	bl	801730c <__mcmp>
 8017356:	1e05      	subs	r5, r0, #0
 8017358:	d110      	bne.n	801737c <__mdiff+0x38>
 801735a:	4629      	mov	r1, r5
 801735c:	4630      	mov	r0, r6
 801735e:	f7ff fd0d 	bl	8016d7c <_Balloc>
 8017362:	b930      	cbnz	r0, 8017372 <__mdiff+0x2e>
 8017364:	4b39      	ldr	r3, [pc, #228]	; (801744c <__mdiff+0x108>)
 8017366:	4602      	mov	r2, r0
 8017368:	f240 2132 	movw	r1, #562	; 0x232
 801736c:	4838      	ldr	r0, [pc, #224]	; (8017450 <__mdiff+0x10c>)
 801736e:	f7fe f877 	bl	8015460 <__assert_func>
 8017372:	2301      	movs	r3, #1
 8017374:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017378:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801737c:	bfa4      	itt	ge
 801737e:	463b      	movge	r3, r7
 8017380:	4627      	movge	r7, r4
 8017382:	4630      	mov	r0, r6
 8017384:	6879      	ldr	r1, [r7, #4]
 8017386:	bfa6      	itte	ge
 8017388:	461c      	movge	r4, r3
 801738a:	2500      	movge	r5, #0
 801738c:	2501      	movlt	r5, #1
 801738e:	f7ff fcf5 	bl	8016d7c <_Balloc>
 8017392:	b920      	cbnz	r0, 801739e <__mdiff+0x5a>
 8017394:	4b2d      	ldr	r3, [pc, #180]	; (801744c <__mdiff+0x108>)
 8017396:	4602      	mov	r2, r0
 8017398:	f44f 7110 	mov.w	r1, #576	; 0x240
 801739c:	e7e6      	b.n	801736c <__mdiff+0x28>
 801739e:	693e      	ldr	r6, [r7, #16]
 80173a0:	60c5      	str	r5, [r0, #12]
 80173a2:	6925      	ldr	r5, [r4, #16]
 80173a4:	f107 0114 	add.w	r1, r7, #20
 80173a8:	f104 0914 	add.w	r9, r4, #20
 80173ac:	f100 0e14 	add.w	lr, r0, #20
 80173b0:	f107 0210 	add.w	r2, r7, #16
 80173b4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80173b8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80173bc:	46f2      	mov	sl, lr
 80173be:	2700      	movs	r7, #0
 80173c0:	f859 3b04 	ldr.w	r3, [r9], #4
 80173c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80173c8:	fa1f f883 	uxth.w	r8, r3
 80173cc:	fa17 f78b 	uxtah	r7, r7, fp
 80173d0:	0c1b      	lsrs	r3, r3, #16
 80173d2:	eba7 0808 	sub.w	r8, r7, r8
 80173d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80173da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80173de:	fa1f f888 	uxth.w	r8, r8
 80173e2:	141f      	asrs	r7, r3, #16
 80173e4:	454d      	cmp	r5, r9
 80173e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80173ea:	f84a 3b04 	str.w	r3, [sl], #4
 80173ee:	d8e7      	bhi.n	80173c0 <__mdiff+0x7c>
 80173f0:	1b2b      	subs	r3, r5, r4
 80173f2:	3b15      	subs	r3, #21
 80173f4:	f023 0303 	bic.w	r3, r3, #3
 80173f8:	3304      	adds	r3, #4
 80173fa:	3415      	adds	r4, #21
 80173fc:	42a5      	cmp	r5, r4
 80173fe:	bf38      	it	cc
 8017400:	2304      	movcc	r3, #4
 8017402:	4419      	add	r1, r3
 8017404:	4473      	add	r3, lr
 8017406:	469e      	mov	lr, r3
 8017408:	460d      	mov	r5, r1
 801740a:	4565      	cmp	r5, ip
 801740c:	d30e      	bcc.n	801742c <__mdiff+0xe8>
 801740e:	f10c 0203 	add.w	r2, ip, #3
 8017412:	1a52      	subs	r2, r2, r1
 8017414:	f022 0203 	bic.w	r2, r2, #3
 8017418:	3903      	subs	r1, #3
 801741a:	458c      	cmp	ip, r1
 801741c:	bf38      	it	cc
 801741e:	2200      	movcc	r2, #0
 8017420:	441a      	add	r2, r3
 8017422:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8017426:	b17b      	cbz	r3, 8017448 <__mdiff+0x104>
 8017428:	6106      	str	r6, [r0, #16]
 801742a:	e7a5      	b.n	8017378 <__mdiff+0x34>
 801742c:	f855 8b04 	ldr.w	r8, [r5], #4
 8017430:	fa17 f488 	uxtah	r4, r7, r8
 8017434:	1422      	asrs	r2, r4, #16
 8017436:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801743a:	b2a4      	uxth	r4, r4
 801743c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8017440:	f84e 4b04 	str.w	r4, [lr], #4
 8017444:	1417      	asrs	r7, r2, #16
 8017446:	e7e0      	b.n	801740a <__mdiff+0xc6>
 8017448:	3e01      	subs	r6, #1
 801744a:	e7ea      	b.n	8017422 <__mdiff+0xde>
 801744c:	0801a83d 	.word	0x0801a83d
 8017450:	0801a8cc 	.word	0x0801a8cc

08017454 <__ulp>:
 8017454:	b082      	sub	sp, #8
 8017456:	ed8d 0b00 	vstr	d0, [sp]
 801745a:	9b01      	ldr	r3, [sp, #4]
 801745c:	4912      	ldr	r1, [pc, #72]	; (80174a8 <__ulp+0x54>)
 801745e:	4019      	ands	r1, r3
 8017460:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8017464:	2900      	cmp	r1, #0
 8017466:	dd05      	ble.n	8017474 <__ulp+0x20>
 8017468:	2200      	movs	r2, #0
 801746a:	460b      	mov	r3, r1
 801746c:	ec43 2b10 	vmov	d0, r2, r3
 8017470:	b002      	add	sp, #8
 8017472:	4770      	bx	lr
 8017474:	4249      	negs	r1, r1
 8017476:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801747a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801747e:	f04f 0200 	mov.w	r2, #0
 8017482:	f04f 0300 	mov.w	r3, #0
 8017486:	da04      	bge.n	8017492 <__ulp+0x3e>
 8017488:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801748c:	fa41 f300 	asr.w	r3, r1, r0
 8017490:	e7ec      	b.n	801746c <__ulp+0x18>
 8017492:	f1a0 0114 	sub.w	r1, r0, #20
 8017496:	291e      	cmp	r1, #30
 8017498:	bfda      	itte	le
 801749a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801749e:	fa20 f101 	lsrle.w	r1, r0, r1
 80174a2:	2101      	movgt	r1, #1
 80174a4:	460a      	mov	r2, r1
 80174a6:	e7e1      	b.n	801746c <__ulp+0x18>
 80174a8:	7ff00000 	.word	0x7ff00000

080174ac <__b2d>:
 80174ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174ae:	6905      	ldr	r5, [r0, #16]
 80174b0:	f100 0714 	add.w	r7, r0, #20
 80174b4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80174b8:	1f2e      	subs	r6, r5, #4
 80174ba:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80174be:	4620      	mov	r0, r4
 80174c0:	f7ff fd52 	bl	8016f68 <__hi0bits>
 80174c4:	f1c0 0320 	rsb	r3, r0, #32
 80174c8:	280a      	cmp	r0, #10
 80174ca:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8017548 <__b2d+0x9c>
 80174ce:	600b      	str	r3, [r1, #0]
 80174d0:	dc14      	bgt.n	80174fc <__b2d+0x50>
 80174d2:	f1c0 0e0b 	rsb	lr, r0, #11
 80174d6:	fa24 f10e 	lsr.w	r1, r4, lr
 80174da:	42b7      	cmp	r7, r6
 80174dc:	ea41 030c 	orr.w	r3, r1, ip
 80174e0:	bf34      	ite	cc
 80174e2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80174e6:	2100      	movcs	r1, #0
 80174e8:	3015      	adds	r0, #21
 80174ea:	fa04 f000 	lsl.w	r0, r4, r0
 80174ee:	fa21 f10e 	lsr.w	r1, r1, lr
 80174f2:	ea40 0201 	orr.w	r2, r0, r1
 80174f6:	ec43 2b10 	vmov	d0, r2, r3
 80174fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174fc:	42b7      	cmp	r7, r6
 80174fe:	bf3a      	itte	cc
 8017500:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017504:	f1a5 0608 	subcc.w	r6, r5, #8
 8017508:	2100      	movcs	r1, #0
 801750a:	380b      	subs	r0, #11
 801750c:	d017      	beq.n	801753e <__b2d+0x92>
 801750e:	f1c0 0c20 	rsb	ip, r0, #32
 8017512:	fa04 f500 	lsl.w	r5, r4, r0
 8017516:	42be      	cmp	r6, r7
 8017518:	fa21 f40c 	lsr.w	r4, r1, ip
 801751c:	ea45 0504 	orr.w	r5, r5, r4
 8017520:	bf8c      	ite	hi
 8017522:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8017526:	2400      	movls	r4, #0
 8017528:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801752c:	fa01 f000 	lsl.w	r0, r1, r0
 8017530:	fa24 f40c 	lsr.w	r4, r4, ip
 8017534:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8017538:	ea40 0204 	orr.w	r2, r0, r4
 801753c:	e7db      	b.n	80174f6 <__b2d+0x4a>
 801753e:	ea44 030c 	orr.w	r3, r4, ip
 8017542:	460a      	mov	r2, r1
 8017544:	e7d7      	b.n	80174f6 <__b2d+0x4a>
 8017546:	bf00      	nop
 8017548:	3ff00000 	.word	0x3ff00000

0801754c <__d2b>:
 801754c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017550:	4689      	mov	r9, r1
 8017552:	2101      	movs	r1, #1
 8017554:	ec57 6b10 	vmov	r6, r7, d0
 8017558:	4690      	mov	r8, r2
 801755a:	f7ff fc0f 	bl	8016d7c <_Balloc>
 801755e:	4604      	mov	r4, r0
 8017560:	b930      	cbnz	r0, 8017570 <__d2b+0x24>
 8017562:	4602      	mov	r2, r0
 8017564:	4b25      	ldr	r3, [pc, #148]	; (80175fc <__d2b+0xb0>)
 8017566:	4826      	ldr	r0, [pc, #152]	; (8017600 <__d2b+0xb4>)
 8017568:	f240 310a 	movw	r1, #778	; 0x30a
 801756c:	f7fd ff78 	bl	8015460 <__assert_func>
 8017570:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8017574:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017578:	bb35      	cbnz	r5, 80175c8 <__d2b+0x7c>
 801757a:	2e00      	cmp	r6, #0
 801757c:	9301      	str	r3, [sp, #4]
 801757e:	d028      	beq.n	80175d2 <__d2b+0x86>
 8017580:	4668      	mov	r0, sp
 8017582:	9600      	str	r6, [sp, #0]
 8017584:	f7ff fd10 	bl	8016fa8 <__lo0bits>
 8017588:	9900      	ldr	r1, [sp, #0]
 801758a:	b300      	cbz	r0, 80175ce <__d2b+0x82>
 801758c:	9a01      	ldr	r2, [sp, #4]
 801758e:	f1c0 0320 	rsb	r3, r0, #32
 8017592:	fa02 f303 	lsl.w	r3, r2, r3
 8017596:	430b      	orrs	r3, r1
 8017598:	40c2      	lsrs	r2, r0
 801759a:	6163      	str	r3, [r4, #20]
 801759c:	9201      	str	r2, [sp, #4]
 801759e:	9b01      	ldr	r3, [sp, #4]
 80175a0:	61a3      	str	r3, [r4, #24]
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	bf14      	ite	ne
 80175a6:	2202      	movne	r2, #2
 80175a8:	2201      	moveq	r2, #1
 80175aa:	6122      	str	r2, [r4, #16]
 80175ac:	b1d5      	cbz	r5, 80175e4 <__d2b+0x98>
 80175ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80175b2:	4405      	add	r5, r0
 80175b4:	f8c9 5000 	str.w	r5, [r9]
 80175b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80175bc:	f8c8 0000 	str.w	r0, [r8]
 80175c0:	4620      	mov	r0, r4
 80175c2:	b003      	add	sp, #12
 80175c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80175c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80175cc:	e7d5      	b.n	801757a <__d2b+0x2e>
 80175ce:	6161      	str	r1, [r4, #20]
 80175d0:	e7e5      	b.n	801759e <__d2b+0x52>
 80175d2:	a801      	add	r0, sp, #4
 80175d4:	f7ff fce8 	bl	8016fa8 <__lo0bits>
 80175d8:	9b01      	ldr	r3, [sp, #4]
 80175da:	6163      	str	r3, [r4, #20]
 80175dc:	2201      	movs	r2, #1
 80175de:	6122      	str	r2, [r4, #16]
 80175e0:	3020      	adds	r0, #32
 80175e2:	e7e3      	b.n	80175ac <__d2b+0x60>
 80175e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80175e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80175ec:	f8c9 0000 	str.w	r0, [r9]
 80175f0:	6918      	ldr	r0, [r3, #16]
 80175f2:	f7ff fcb9 	bl	8016f68 <__hi0bits>
 80175f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80175fa:	e7df      	b.n	80175bc <__d2b+0x70>
 80175fc:	0801a83d 	.word	0x0801a83d
 8017600:	0801a8cc 	.word	0x0801a8cc

08017604 <__ratio>:
 8017604:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017608:	4688      	mov	r8, r1
 801760a:	4669      	mov	r1, sp
 801760c:	4681      	mov	r9, r0
 801760e:	f7ff ff4d 	bl	80174ac <__b2d>
 8017612:	a901      	add	r1, sp, #4
 8017614:	4640      	mov	r0, r8
 8017616:	ec55 4b10 	vmov	r4, r5, d0
 801761a:	f7ff ff47 	bl	80174ac <__b2d>
 801761e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017622:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017626:	eba3 0c02 	sub.w	ip, r3, r2
 801762a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801762e:	1a9b      	subs	r3, r3, r2
 8017630:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8017634:	ec51 0b10 	vmov	r0, r1, d0
 8017638:	2b00      	cmp	r3, #0
 801763a:	bfd6      	itet	le
 801763c:	460a      	movle	r2, r1
 801763e:	462a      	movgt	r2, r5
 8017640:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017644:	468b      	mov	fp, r1
 8017646:	462f      	mov	r7, r5
 8017648:	bfd4      	ite	le
 801764a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801764e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8017652:	4620      	mov	r0, r4
 8017654:	ee10 2a10 	vmov	r2, s0
 8017658:	465b      	mov	r3, fp
 801765a:	4639      	mov	r1, r7
 801765c:	f7e9 f916 	bl	800088c <__aeabi_ddiv>
 8017660:	ec41 0b10 	vmov	d0, r0, r1
 8017664:	b003      	add	sp, #12
 8017666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801766a <__copybits>:
 801766a:	3901      	subs	r1, #1
 801766c:	b570      	push	{r4, r5, r6, lr}
 801766e:	1149      	asrs	r1, r1, #5
 8017670:	6914      	ldr	r4, [r2, #16]
 8017672:	3101      	adds	r1, #1
 8017674:	f102 0314 	add.w	r3, r2, #20
 8017678:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801767c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017680:	1f05      	subs	r5, r0, #4
 8017682:	42a3      	cmp	r3, r4
 8017684:	d30c      	bcc.n	80176a0 <__copybits+0x36>
 8017686:	1aa3      	subs	r3, r4, r2
 8017688:	3b11      	subs	r3, #17
 801768a:	f023 0303 	bic.w	r3, r3, #3
 801768e:	3211      	adds	r2, #17
 8017690:	42a2      	cmp	r2, r4
 8017692:	bf88      	it	hi
 8017694:	2300      	movhi	r3, #0
 8017696:	4418      	add	r0, r3
 8017698:	2300      	movs	r3, #0
 801769a:	4288      	cmp	r0, r1
 801769c:	d305      	bcc.n	80176aa <__copybits+0x40>
 801769e:	bd70      	pop	{r4, r5, r6, pc}
 80176a0:	f853 6b04 	ldr.w	r6, [r3], #4
 80176a4:	f845 6f04 	str.w	r6, [r5, #4]!
 80176a8:	e7eb      	b.n	8017682 <__copybits+0x18>
 80176aa:	f840 3b04 	str.w	r3, [r0], #4
 80176ae:	e7f4      	b.n	801769a <__copybits+0x30>

080176b0 <__any_on>:
 80176b0:	f100 0214 	add.w	r2, r0, #20
 80176b4:	6900      	ldr	r0, [r0, #16]
 80176b6:	114b      	asrs	r3, r1, #5
 80176b8:	4298      	cmp	r0, r3
 80176ba:	b510      	push	{r4, lr}
 80176bc:	db11      	blt.n	80176e2 <__any_on+0x32>
 80176be:	dd0a      	ble.n	80176d6 <__any_on+0x26>
 80176c0:	f011 011f 	ands.w	r1, r1, #31
 80176c4:	d007      	beq.n	80176d6 <__any_on+0x26>
 80176c6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80176ca:	fa24 f001 	lsr.w	r0, r4, r1
 80176ce:	fa00 f101 	lsl.w	r1, r0, r1
 80176d2:	428c      	cmp	r4, r1
 80176d4:	d10b      	bne.n	80176ee <__any_on+0x3e>
 80176d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80176da:	4293      	cmp	r3, r2
 80176dc:	d803      	bhi.n	80176e6 <__any_on+0x36>
 80176de:	2000      	movs	r0, #0
 80176e0:	bd10      	pop	{r4, pc}
 80176e2:	4603      	mov	r3, r0
 80176e4:	e7f7      	b.n	80176d6 <__any_on+0x26>
 80176e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80176ea:	2900      	cmp	r1, #0
 80176ec:	d0f5      	beq.n	80176da <__any_on+0x2a>
 80176ee:	2001      	movs	r0, #1
 80176f0:	e7f6      	b.n	80176e0 <__any_on+0x30>

080176f2 <_calloc_r>:
 80176f2:	b513      	push	{r0, r1, r4, lr}
 80176f4:	434a      	muls	r2, r1
 80176f6:	4611      	mov	r1, r2
 80176f8:	9201      	str	r2, [sp, #4]
 80176fa:	f7fb fb29 	bl	8012d50 <_malloc_r>
 80176fe:	4604      	mov	r4, r0
 8017700:	b118      	cbz	r0, 801770a <_calloc_r+0x18>
 8017702:	9a01      	ldr	r2, [sp, #4]
 8017704:	2100      	movs	r1, #0
 8017706:	f7fb f84d 	bl	80127a4 <memset>
 801770a:	4620      	mov	r0, r4
 801770c:	b002      	add	sp, #8
 801770e:	bd10      	pop	{r4, pc}

08017710 <_realloc_r>:
 8017710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017712:	4607      	mov	r7, r0
 8017714:	4614      	mov	r4, r2
 8017716:	460e      	mov	r6, r1
 8017718:	b921      	cbnz	r1, 8017724 <_realloc_r+0x14>
 801771a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801771e:	4611      	mov	r1, r2
 8017720:	f7fb bb16 	b.w	8012d50 <_malloc_r>
 8017724:	b922      	cbnz	r2, 8017730 <_realloc_r+0x20>
 8017726:	f7fb fac3 	bl	8012cb0 <_free_r>
 801772a:	4625      	mov	r5, r4
 801772c:	4628      	mov	r0, r5
 801772e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017730:	f000 feaa 	bl	8018488 <_malloc_usable_size_r>
 8017734:	42a0      	cmp	r0, r4
 8017736:	d20f      	bcs.n	8017758 <_realloc_r+0x48>
 8017738:	4621      	mov	r1, r4
 801773a:	4638      	mov	r0, r7
 801773c:	f7fb fb08 	bl	8012d50 <_malloc_r>
 8017740:	4605      	mov	r5, r0
 8017742:	2800      	cmp	r0, #0
 8017744:	d0f2      	beq.n	801772c <_realloc_r+0x1c>
 8017746:	4631      	mov	r1, r6
 8017748:	4622      	mov	r2, r4
 801774a:	f7fb f803 	bl	8012754 <memcpy>
 801774e:	4631      	mov	r1, r6
 8017750:	4638      	mov	r0, r7
 8017752:	f7fb faad 	bl	8012cb0 <_free_r>
 8017756:	e7e9      	b.n	801772c <_realloc_r+0x1c>
 8017758:	4635      	mov	r5, r6
 801775a:	e7e7      	b.n	801772c <_realloc_r+0x1c>

0801775c <__ssputs_r>:
 801775c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017760:	688e      	ldr	r6, [r1, #8]
 8017762:	429e      	cmp	r6, r3
 8017764:	4682      	mov	sl, r0
 8017766:	460c      	mov	r4, r1
 8017768:	4690      	mov	r8, r2
 801776a:	461f      	mov	r7, r3
 801776c:	d838      	bhi.n	80177e0 <__ssputs_r+0x84>
 801776e:	898a      	ldrh	r2, [r1, #12]
 8017770:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017774:	d032      	beq.n	80177dc <__ssputs_r+0x80>
 8017776:	6825      	ldr	r5, [r4, #0]
 8017778:	6909      	ldr	r1, [r1, #16]
 801777a:	eba5 0901 	sub.w	r9, r5, r1
 801777e:	6965      	ldr	r5, [r4, #20]
 8017780:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017784:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017788:	3301      	adds	r3, #1
 801778a:	444b      	add	r3, r9
 801778c:	106d      	asrs	r5, r5, #1
 801778e:	429d      	cmp	r5, r3
 8017790:	bf38      	it	cc
 8017792:	461d      	movcc	r5, r3
 8017794:	0553      	lsls	r3, r2, #21
 8017796:	d531      	bpl.n	80177fc <__ssputs_r+0xa0>
 8017798:	4629      	mov	r1, r5
 801779a:	f7fb fad9 	bl	8012d50 <_malloc_r>
 801779e:	4606      	mov	r6, r0
 80177a0:	b950      	cbnz	r0, 80177b8 <__ssputs_r+0x5c>
 80177a2:	230c      	movs	r3, #12
 80177a4:	f8ca 3000 	str.w	r3, [sl]
 80177a8:	89a3      	ldrh	r3, [r4, #12]
 80177aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80177ae:	81a3      	strh	r3, [r4, #12]
 80177b0:	f04f 30ff 	mov.w	r0, #4294967295
 80177b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177b8:	6921      	ldr	r1, [r4, #16]
 80177ba:	464a      	mov	r2, r9
 80177bc:	f7fa ffca 	bl	8012754 <memcpy>
 80177c0:	89a3      	ldrh	r3, [r4, #12]
 80177c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80177c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80177ca:	81a3      	strh	r3, [r4, #12]
 80177cc:	6126      	str	r6, [r4, #16]
 80177ce:	6165      	str	r5, [r4, #20]
 80177d0:	444e      	add	r6, r9
 80177d2:	eba5 0509 	sub.w	r5, r5, r9
 80177d6:	6026      	str	r6, [r4, #0]
 80177d8:	60a5      	str	r5, [r4, #8]
 80177da:	463e      	mov	r6, r7
 80177dc:	42be      	cmp	r6, r7
 80177de:	d900      	bls.n	80177e2 <__ssputs_r+0x86>
 80177e0:	463e      	mov	r6, r7
 80177e2:	4632      	mov	r2, r6
 80177e4:	6820      	ldr	r0, [r4, #0]
 80177e6:	4641      	mov	r1, r8
 80177e8:	f7fa ffc2 	bl	8012770 <memmove>
 80177ec:	68a3      	ldr	r3, [r4, #8]
 80177ee:	6822      	ldr	r2, [r4, #0]
 80177f0:	1b9b      	subs	r3, r3, r6
 80177f2:	4432      	add	r2, r6
 80177f4:	60a3      	str	r3, [r4, #8]
 80177f6:	6022      	str	r2, [r4, #0]
 80177f8:	2000      	movs	r0, #0
 80177fa:	e7db      	b.n	80177b4 <__ssputs_r+0x58>
 80177fc:	462a      	mov	r2, r5
 80177fe:	f7ff ff87 	bl	8017710 <_realloc_r>
 8017802:	4606      	mov	r6, r0
 8017804:	2800      	cmp	r0, #0
 8017806:	d1e1      	bne.n	80177cc <__ssputs_r+0x70>
 8017808:	6921      	ldr	r1, [r4, #16]
 801780a:	4650      	mov	r0, sl
 801780c:	f7fb fa50 	bl	8012cb0 <_free_r>
 8017810:	e7c7      	b.n	80177a2 <__ssputs_r+0x46>
	...

08017814 <_svfiprintf_r>:
 8017814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017818:	4698      	mov	r8, r3
 801781a:	898b      	ldrh	r3, [r1, #12]
 801781c:	061b      	lsls	r3, r3, #24
 801781e:	b09d      	sub	sp, #116	; 0x74
 8017820:	4607      	mov	r7, r0
 8017822:	460d      	mov	r5, r1
 8017824:	4614      	mov	r4, r2
 8017826:	d50e      	bpl.n	8017846 <_svfiprintf_r+0x32>
 8017828:	690b      	ldr	r3, [r1, #16]
 801782a:	b963      	cbnz	r3, 8017846 <_svfiprintf_r+0x32>
 801782c:	2140      	movs	r1, #64	; 0x40
 801782e:	f7fb fa8f 	bl	8012d50 <_malloc_r>
 8017832:	6028      	str	r0, [r5, #0]
 8017834:	6128      	str	r0, [r5, #16]
 8017836:	b920      	cbnz	r0, 8017842 <_svfiprintf_r+0x2e>
 8017838:	230c      	movs	r3, #12
 801783a:	603b      	str	r3, [r7, #0]
 801783c:	f04f 30ff 	mov.w	r0, #4294967295
 8017840:	e0d1      	b.n	80179e6 <_svfiprintf_r+0x1d2>
 8017842:	2340      	movs	r3, #64	; 0x40
 8017844:	616b      	str	r3, [r5, #20]
 8017846:	2300      	movs	r3, #0
 8017848:	9309      	str	r3, [sp, #36]	; 0x24
 801784a:	2320      	movs	r3, #32
 801784c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017850:	f8cd 800c 	str.w	r8, [sp, #12]
 8017854:	2330      	movs	r3, #48	; 0x30
 8017856:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017a00 <_svfiprintf_r+0x1ec>
 801785a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801785e:	f04f 0901 	mov.w	r9, #1
 8017862:	4623      	mov	r3, r4
 8017864:	469a      	mov	sl, r3
 8017866:	f813 2b01 	ldrb.w	r2, [r3], #1
 801786a:	b10a      	cbz	r2, 8017870 <_svfiprintf_r+0x5c>
 801786c:	2a25      	cmp	r2, #37	; 0x25
 801786e:	d1f9      	bne.n	8017864 <_svfiprintf_r+0x50>
 8017870:	ebba 0b04 	subs.w	fp, sl, r4
 8017874:	d00b      	beq.n	801788e <_svfiprintf_r+0x7a>
 8017876:	465b      	mov	r3, fp
 8017878:	4622      	mov	r2, r4
 801787a:	4629      	mov	r1, r5
 801787c:	4638      	mov	r0, r7
 801787e:	f7ff ff6d 	bl	801775c <__ssputs_r>
 8017882:	3001      	adds	r0, #1
 8017884:	f000 80aa 	beq.w	80179dc <_svfiprintf_r+0x1c8>
 8017888:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801788a:	445a      	add	r2, fp
 801788c:	9209      	str	r2, [sp, #36]	; 0x24
 801788e:	f89a 3000 	ldrb.w	r3, [sl]
 8017892:	2b00      	cmp	r3, #0
 8017894:	f000 80a2 	beq.w	80179dc <_svfiprintf_r+0x1c8>
 8017898:	2300      	movs	r3, #0
 801789a:	f04f 32ff 	mov.w	r2, #4294967295
 801789e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80178a2:	f10a 0a01 	add.w	sl, sl, #1
 80178a6:	9304      	str	r3, [sp, #16]
 80178a8:	9307      	str	r3, [sp, #28]
 80178aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80178ae:	931a      	str	r3, [sp, #104]	; 0x68
 80178b0:	4654      	mov	r4, sl
 80178b2:	2205      	movs	r2, #5
 80178b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80178b8:	4851      	ldr	r0, [pc, #324]	; (8017a00 <_svfiprintf_r+0x1ec>)
 80178ba:	f7e8 fcb1 	bl	8000220 <memchr>
 80178be:	9a04      	ldr	r2, [sp, #16]
 80178c0:	b9d8      	cbnz	r0, 80178fa <_svfiprintf_r+0xe6>
 80178c2:	06d0      	lsls	r0, r2, #27
 80178c4:	bf44      	itt	mi
 80178c6:	2320      	movmi	r3, #32
 80178c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80178cc:	0711      	lsls	r1, r2, #28
 80178ce:	bf44      	itt	mi
 80178d0:	232b      	movmi	r3, #43	; 0x2b
 80178d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80178d6:	f89a 3000 	ldrb.w	r3, [sl]
 80178da:	2b2a      	cmp	r3, #42	; 0x2a
 80178dc:	d015      	beq.n	801790a <_svfiprintf_r+0xf6>
 80178de:	9a07      	ldr	r2, [sp, #28]
 80178e0:	4654      	mov	r4, sl
 80178e2:	2000      	movs	r0, #0
 80178e4:	f04f 0c0a 	mov.w	ip, #10
 80178e8:	4621      	mov	r1, r4
 80178ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80178ee:	3b30      	subs	r3, #48	; 0x30
 80178f0:	2b09      	cmp	r3, #9
 80178f2:	d94e      	bls.n	8017992 <_svfiprintf_r+0x17e>
 80178f4:	b1b0      	cbz	r0, 8017924 <_svfiprintf_r+0x110>
 80178f6:	9207      	str	r2, [sp, #28]
 80178f8:	e014      	b.n	8017924 <_svfiprintf_r+0x110>
 80178fa:	eba0 0308 	sub.w	r3, r0, r8
 80178fe:	fa09 f303 	lsl.w	r3, r9, r3
 8017902:	4313      	orrs	r3, r2
 8017904:	9304      	str	r3, [sp, #16]
 8017906:	46a2      	mov	sl, r4
 8017908:	e7d2      	b.n	80178b0 <_svfiprintf_r+0x9c>
 801790a:	9b03      	ldr	r3, [sp, #12]
 801790c:	1d19      	adds	r1, r3, #4
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	9103      	str	r1, [sp, #12]
 8017912:	2b00      	cmp	r3, #0
 8017914:	bfbb      	ittet	lt
 8017916:	425b      	neglt	r3, r3
 8017918:	f042 0202 	orrlt.w	r2, r2, #2
 801791c:	9307      	strge	r3, [sp, #28]
 801791e:	9307      	strlt	r3, [sp, #28]
 8017920:	bfb8      	it	lt
 8017922:	9204      	strlt	r2, [sp, #16]
 8017924:	7823      	ldrb	r3, [r4, #0]
 8017926:	2b2e      	cmp	r3, #46	; 0x2e
 8017928:	d10c      	bne.n	8017944 <_svfiprintf_r+0x130>
 801792a:	7863      	ldrb	r3, [r4, #1]
 801792c:	2b2a      	cmp	r3, #42	; 0x2a
 801792e:	d135      	bne.n	801799c <_svfiprintf_r+0x188>
 8017930:	9b03      	ldr	r3, [sp, #12]
 8017932:	1d1a      	adds	r2, r3, #4
 8017934:	681b      	ldr	r3, [r3, #0]
 8017936:	9203      	str	r2, [sp, #12]
 8017938:	2b00      	cmp	r3, #0
 801793a:	bfb8      	it	lt
 801793c:	f04f 33ff 	movlt.w	r3, #4294967295
 8017940:	3402      	adds	r4, #2
 8017942:	9305      	str	r3, [sp, #20]
 8017944:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017a10 <_svfiprintf_r+0x1fc>
 8017948:	7821      	ldrb	r1, [r4, #0]
 801794a:	2203      	movs	r2, #3
 801794c:	4650      	mov	r0, sl
 801794e:	f7e8 fc67 	bl	8000220 <memchr>
 8017952:	b140      	cbz	r0, 8017966 <_svfiprintf_r+0x152>
 8017954:	2340      	movs	r3, #64	; 0x40
 8017956:	eba0 000a 	sub.w	r0, r0, sl
 801795a:	fa03 f000 	lsl.w	r0, r3, r0
 801795e:	9b04      	ldr	r3, [sp, #16]
 8017960:	4303      	orrs	r3, r0
 8017962:	3401      	adds	r4, #1
 8017964:	9304      	str	r3, [sp, #16]
 8017966:	f814 1b01 	ldrb.w	r1, [r4], #1
 801796a:	4826      	ldr	r0, [pc, #152]	; (8017a04 <_svfiprintf_r+0x1f0>)
 801796c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017970:	2206      	movs	r2, #6
 8017972:	f7e8 fc55 	bl	8000220 <memchr>
 8017976:	2800      	cmp	r0, #0
 8017978:	d038      	beq.n	80179ec <_svfiprintf_r+0x1d8>
 801797a:	4b23      	ldr	r3, [pc, #140]	; (8017a08 <_svfiprintf_r+0x1f4>)
 801797c:	bb1b      	cbnz	r3, 80179c6 <_svfiprintf_r+0x1b2>
 801797e:	9b03      	ldr	r3, [sp, #12]
 8017980:	3307      	adds	r3, #7
 8017982:	f023 0307 	bic.w	r3, r3, #7
 8017986:	3308      	adds	r3, #8
 8017988:	9303      	str	r3, [sp, #12]
 801798a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801798c:	4433      	add	r3, r6
 801798e:	9309      	str	r3, [sp, #36]	; 0x24
 8017990:	e767      	b.n	8017862 <_svfiprintf_r+0x4e>
 8017992:	fb0c 3202 	mla	r2, ip, r2, r3
 8017996:	460c      	mov	r4, r1
 8017998:	2001      	movs	r0, #1
 801799a:	e7a5      	b.n	80178e8 <_svfiprintf_r+0xd4>
 801799c:	2300      	movs	r3, #0
 801799e:	3401      	adds	r4, #1
 80179a0:	9305      	str	r3, [sp, #20]
 80179a2:	4619      	mov	r1, r3
 80179a4:	f04f 0c0a 	mov.w	ip, #10
 80179a8:	4620      	mov	r0, r4
 80179aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80179ae:	3a30      	subs	r2, #48	; 0x30
 80179b0:	2a09      	cmp	r2, #9
 80179b2:	d903      	bls.n	80179bc <_svfiprintf_r+0x1a8>
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	d0c5      	beq.n	8017944 <_svfiprintf_r+0x130>
 80179b8:	9105      	str	r1, [sp, #20]
 80179ba:	e7c3      	b.n	8017944 <_svfiprintf_r+0x130>
 80179bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80179c0:	4604      	mov	r4, r0
 80179c2:	2301      	movs	r3, #1
 80179c4:	e7f0      	b.n	80179a8 <_svfiprintf_r+0x194>
 80179c6:	ab03      	add	r3, sp, #12
 80179c8:	9300      	str	r3, [sp, #0]
 80179ca:	462a      	mov	r2, r5
 80179cc:	4b0f      	ldr	r3, [pc, #60]	; (8017a0c <_svfiprintf_r+0x1f8>)
 80179ce:	a904      	add	r1, sp, #16
 80179d0:	4638      	mov	r0, r7
 80179d2:	f7fb fab7 	bl	8012f44 <_printf_float>
 80179d6:	1c42      	adds	r2, r0, #1
 80179d8:	4606      	mov	r6, r0
 80179da:	d1d6      	bne.n	801798a <_svfiprintf_r+0x176>
 80179dc:	89ab      	ldrh	r3, [r5, #12]
 80179de:	065b      	lsls	r3, r3, #25
 80179e0:	f53f af2c 	bmi.w	801783c <_svfiprintf_r+0x28>
 80179e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80179e6:	b01d      	add	sp, #116	; 0x74
 80179e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179ec:	ab03      	add	r3, sp, #12
 80179ee:	9300      	str	r3, [sp, #0]
 80179f0:	462a      	mov	r2, r5
 80179f2:	4b06      	ldr	r3, [pc, #24]	; (8017a0c <_svfiprintf_r+0x1f8>)
 80179f4:	a904      	add	r1, sp, #16
 80179f6:	4638      	mov	r0, r7
 80179f8:	f7fb fd48 	bl	801348c <_printf_i>
 80179fc:	e7eb      	b.n	80179d6 <_svfiprintf_r+0x1c2>
 80179fe:	bf00      	nop
 8017a00:	0801aa2c 	.word	0x0801aa2c
 8017a04:	0801aa36 	.word	0x0801aa36
 8017a08:	08012f45 	.word	0x08012f45
 8017a0c:	0801775d 	.word	0x0801775d
 8017a10:	0801aa32 	.word	0x0801aa32

08017a14 <_sungetc_r>:
 8017a14:	b538      	push	{r3, r4, r5, lr}
 8017a16:	1c4b      	adds	r3, r1, #1
 8017a18:	4614      	mov	r4, r2
 8017a1a:	d103      	bne.n	8017a24 <_sungetc_r+0x10>
 8017a1c:	f04f 35ff 	mov.w	r5, #4294967295
 8017a20:	4628      	mov	r0, r5
 8017a22:	bd38      	pop	{r3, r4, r5, pc}
 8017a24:	8993      	ldrh	r3, [r2, #12]
 8017a26:	f023 0320 	bic.w	r3, r3, #32
 8017a2a:	8193      	strh	r3, [r2, #12]
 8017a2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017a2e:	6852      	ldr	r2, [r2, #4]
 8017a30:	b2cd      	uxtb	r5, r1
 8017a32:	b18b      	cbz	r3, 8017a58 <_sungetc_r+0x44>
 8017a34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017a36:	4293      	cmp	r3, r2
 8017a38:	dd08      	ble.n	8017a4c <_sungetc_r+0x38>
 8017a3a:	6823      	ldr	r3, [r4, #0]
 8017a3c:	1e5a      	subs	r2, r3, #1
 8017a3e:	6022      	str	r2, [r4, #0]
 8017a40:	f803 5c01 	strb.w	r5, [r3, #-1]
 8017a44:	6863      	ldr	r3, [r4, #4]
 8017a46:	3301      	adds	r3, #1
 8017a48:	6063      	str	r3, [r4, #4]
 8017a4a:	e7e9      	b.n	8017a20 <_sungetc_r+0xc>
 8017a4c:	4621      	mov	r1, r4
 8017a4e:	f000 fca5 	bl	801839c <__submore>
 8017a52:	2800      	cmp	r0, #0
 8017a54:	d0f1      	beq.n	8017a3a <_sungetc_r+0x26>
 8017a56:	e7e1      	b.n	8017a1c <_sungetc_r+0x8>
 8017a58:	6921      	ldr	r1, [r4, #16]
 8017a5a:	6823      	ldr	r3, [r4, #0]
 8017a5c:	b151      	cbz	r1, 8017a74 <_sungetc_r+0x60>
 8017a5e:	4299      	cmp	r1, r3
 8017a60:	d208      	bcs.n	8017a74 <_sungetc_r+0x60>
 8017a62:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8017a66:	42a9      	cmp	r1, r5
 8017a68:	d104      	bne.n	8017a74 <_sungetc_r+0x60>
 8017a6a:	3b01      	subs	r3, #1
 8017a6c:	3201      	adds	r2, #1
 8017a6e:	6023      	str	r3, [r4, #0]
 8017a70:	6062      	str	r2, [r4, #4]
 8017a72:	e7d5      	b.n	8017a20 <_sungetc_r+0xc>
 8017a74:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017a78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017a7c:	6363      	str	r3, [r4, #52]	; 0x34
 8017a7e:	2303      	movs	r3, #3
 8017a80:	63a3      	str	r3, [r4, #56]	; 0x38
 8017a82:	4623      	mov	r3, r4
 8017a84:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017a88:	6023      	str	r3, [r4, #0]
 8017a8a:	2301      	movs	r3, #1
 8017a8c:	e7dc      	b.n	8017a48 <_sungetc_r+0x34>

08017a8e <__ssrefill_r>:
 8017a8e:	b510      	push	{r4, lr}
 8017a90:	460c      	mov	r4, r1
 8017a92:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017a94:	b169      	cbz	r1, 8017ab2 <__ssrefill_r+0x24>
 8017a96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017a9a:	4299      	cmp	r1, r3
 8017a9c:	d001      	beq.n	8017aa2 <__ssrefill_r+0x14>
 8017a9e:	f7fb f907 	bl	8012cb0 <_free_r>
 8017aa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017aa4:	6063      	str	r3, [r4, #4]
 8017aa6:	2000      	movs	r0, #0
 8017aa8:	6360      	str	r0, [r4, #52]	; 0x34
 8017aaa:	b113      	cbz	r3, 8017ab2 <__ssrefill_r+0x24>
 8017aac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017aae:	6023      	str	r3, [r4, #0]
 8017ab0:	bd10      	pop	{r4, pc}
 8017ab2:	6923      	ldr	r3, [r4, #16]
 8017ab4:	6023      	str	r3, [r4, #0]
 8017ab6:	2300      	movs	r3, #0
 8017ab8:	6063      	str	r3, [r4, #4]
 8017aba:	89a3      	ldrh	r3, [r4, #12]
 8017abc:	f043 0320 	orr.w	r3, r3, #32
 8017ac0:	81a3      	strh	r3, [r4, #12]
 8017ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8017ac6:	e7f3      	b.n	8017ab0 <__ssrefill_r+0x22>

08017ac8 <__ssvfiscanf_r>:
 8017ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017acc:	460c      	mov	r4, r1
 8017ace:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8017ad2:	2100      	movs	r1, #0
 8017ad4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8017ad8:	49b2      	ldr	r1, [pc, #712]	; (8017da4 <__ssvfiscanf_r+0x2dc>)
 8017ada:	91a0      	str	r1, [sp, #640]	; 0x280
 8017adc:	f10d 0804 	add.w	r8, sp, #4
 8017ae0:	49b1      	ldr	r1, [pc, #708]	; (8017da8 <__ssvfiscanf_r+0x2e0>)
 8017ae2:	4fb2      	ldr	r7, [pc, #712]	; (8017dac <__ssvfiscanf_r+0x2e4>)
 8017ae4:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8017db0 <__ssvfiscanf_r+0x2e8>
 8017ae8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8017aec:	4606      	mov	r6, r0
 8017aee:	91a1      	str	r1, [sp, #644]	; 0x284
 8017af0:	9300      	str	r3, [sp, #0]
 8017af2:	f892 a000 	ldrb.w	sl, [r2]
 8017af6:	f1ba 0f00 	cmp.w	sl, #0
 8017afa:	f000 8151 	beq.w	8017da0 <__ssvfiscanf_r+0x2d8>
 8017afe:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8017b02:	f013 0308 	ands.w	r3, r3, #8
 8017b06:	f102 0501 	add.w	r5, r2, #1
 8017b0a:	d019      	beq.n	8017b40 <__ssvfiscanf_r+0x78>
 8017b0c:	6863      	ldr	r3, [r4, #4]
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	dd0f      	ble.n	8017b32 <__ssvfiscanf_r+0x6a>
 8017b12:	6823      	ldr	r3, [r4, #0]
 8017b14:	781a      	ldrb	r2, [r3, #0]
 8017b16:	5cba      	ldrb	r2, [r7, r2]
 8017b18:	0712      	lsls	r2, r2, #28
 8017b1a:	d401      	bmi.n	8017b20 <__ssvfiscanf_r+0x58>
 8017b1c:	462a      	mov	r2, r5
 8017b1e:	e7e8      	b.n	8017af2 <__ssvfiscanf_r+0x2a>
 8017b20:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017b22:	3201      	adds	r2, #1
 8017b24:	9245      	str	r2, [sp, #276]	; 0x114
 8017b26:	6862      	ldr	r2, [r4, #4]
 8017b28:	3301      	adds	r3, #1
 8017b2a:	3a01      	subs	r2, #1
 8017b2c:	6062      	str	r2, [r4, #4]
 8017b2e:	6023      	str	r3, [r4, #0]
 8017b30:	e7ec      	b.n	8017b0c <__ssvfiscanf_r+0x44>
 8017b32:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017b34:	4621      	mov	r1, r4
 8017b36:	4630      	mov	r0, r6
 8017b38:	4798      	blx	r3
 8017b3a:	2800      	cmp	r0, #0
 8017b3c:	d0e9      	beq.n	8017b12 <__ssvfiscanf_r+0x4a>
 8017b3e:	e7ed      	b.n	8017b1c <__ssvfiscanf_r+0x54>
 8017b40:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8017b44:	f040 8083 	bne.w	8017c4e <__ssvfiscanf_r+0x186>
 8017b48:	9341      	str	r3, [sp, #260]	; 0x104
 8017b4a:	9343      	str	r3, [sp, #268]	; 0x10c
 8017b4c:	7853      	ldrb	r3, [r2, #1]
 8017b4e:	2b2a      	cmp	r3, #42	; 0x2a
 8017b50:	bf02      	ittt	eq
 8017b52:	2310      	moveq	r3, #16
 8017b54:	1c95      	addeq	r5, r2, #2
 8017b56:	9341      	streq	r3, [sp, #260]	; 0x104
 8017b58:	220a      	movs	r2, #10
 8017b5a:	46ab      	mov	fp, r5
 8017b5c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8017b60:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8017b64:	2b09      	cmp	r3, #9
 8017b66:	d91d      	bls.n	8017ba4 <__ssvfiscanf_r+0xdc>
 8017b68:	4891      	ldr	r0, [pc, #580]	; (8017db0 <__ssvfiscanf_r+0x2e8>)
 8017b6a:	2203      	movs	r2, #3
 8017b6c:	f7e8 fb58 	bl	8000220 <memchr>
 8017b70:	b140      	cbz	r0, 8017b84 <__ssvfiscanf_r+0xbc>
 8017b72:	2301      	movs	r3, #1
 8017b74:	eba0 0009 	sub.w	r0, r0, r9
 8017b78:	fa03 f000 	lsl.w	r0, r3, r0
 8017b7c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017b7e:	4318      	orrs	r0, r3
 8017b80:	9041      	str	r0, [sp, #260]	; 0x104
 8017b82:	465d      	mov	r5, fp
 8017b84:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017b88:	2b78      	cmp	r3, #120	; 0x78
 8017b8a:	d806      	bhi.n	8017b9a <__ssvfiscanf_r+0xd2>
 8017b8c:	2b57      	cmp	r3, #87	; 0x57
 8017b8e:	d810      	bhi.n	8017bb2 <__ssvfiscanf_r+0xea>
 8017b90:	2b25      	cmp	r3, #37	; 0x25
 8017b92:	d05c      	beq.n	8017c4e <__ssvfiscanf_r+0x186>
 8017b94:	d856      	bhi.n	8017c44 <__ssvfiscanf_r+0x17c>
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d074      	beq.n	8017c84 <__ssvfiscanf_r+0x1bc>
 8017b9a:	2303      	movs	r3, #3
 8017b9c:	9347      	str	r3, [sp, #284]	; 0x11c
 8017b9e:	230a      	movs	r3, #10
 8017ba0:	9342      	str	r3, [sp, #264]	; 0x108
 8017ba2:	e081      	b.n	8017ca8 <__ssvfiscanf_r+0x1e0>
 8017ba4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017ba6:	fb02 1303 	mla	r3, r2, r3, r1
 8017baa:	3b30      	subs	r3, #48	; 0x30
 8017bac:	9343      	str	r3, [sp, #268]	; 0x10c
 8017bae:	465d      	mov	r5, fp
 8017bb0:	e7d3      	b.n	8017b5a <__ssvfiscanf_r+0x92>
 8017bb2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8017bb6:	2a20      	cmp	r2, #32
 8017bb8:	d8ef      	bhi.n	8017b9a <__ssvfiscanf_r+0xd2>
 8017bba:	a101      	add	r1, pc, #4	; (adr r1, 8017bc0 <__ssvfiscanf_r+0xf8>)
 8017bbc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017bc0:	08017c93 	.word	0x08017c93
 8017bc4:	08017b9b 	.word	0x08017b9b
 8017bc8:	08017b9b 	.word	0x08017b9b
 8017bcc:	08017cf1 	.word	0x08017cf1
 8017bd0:	08017b9b 	.word	0x08017b9b
 8017bd4:	08017b9b 	.word	0x08017b9b
 8017bd8:	08017b9b 	.word	0x08017b9b
 8017bdc:	08017b9b 	.word	0x08017b9b
 8017be0:	08017b9b 	.word	0x08017b9b
 8017be4:	08017b9b 	.word	0x08017b9b
 8017be8:	08017b9b 	.word	0x08017b9b
 8017bec:	08017d07 	.word	0x08017d07
 8017bf0:	08017cdd 	.word	0x08017cdd
 8017bf4:	08017c4b 	.word	0x08017c4b
 8017bf8:	08017c4b 	.word	0x08017c4b
 8017bfc:	08017c4b 	.word	0x08017c4b
 8017c00:	08017b9b 	.word	0x08017b9b
 8017c04:	08017ce1 	.word	0x08017ce1
 8017c08:	08017b9b 	.word	0x08017b9b
 8017c0c:	08017b9b 	.word	0x08017b9b
 8017c10:	08017b9b 	.word	0x08017b9b
 8017c14:	08017b9b 	.word	0x08017b9b
 8017c18:	08017d17 	.word	0x08017d17
 8017c1c:	08017ce9 	.word	0x08017ce9
 8017c20:	08017c8b 	.word	0x08017c8b
 8017c24:	08017b9b 	.word	0x08017b9b
 8017c28:	08017b9b 	.word	0x08017b9b
 8017c2c:	08017d13 	.word	0x08017d13
 8017c30:	08017b9b 	.word	0x08017b9b
 8017c34:	08017cdd 	.word	0x08017cdd
 8017c38:	08017b9b 	.word	0x08017b9b
 8017c3c:	08017b9b 	.word	0x08017b9b
 8017c40:	08017c93 	.word	0x08017c93
 8017c44:	3b45      	subs	r3, #69	; 0x45
 8017c46:	2b02      	cmp	r3, #2
 8017c48:	d8a7      	bhi.n	8017b9a <__ssvfiscanf_r+0xd2>
 8017c4a:	2305      	movs	r3, #5
 8017c4c:	e02b      	b.n	8017ca6 <__ssvfiscanf_r+0x1de>
 8017c4e:	6863      	ldr	r3, [r4, #4]
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	dd0d      	ble.n	8017c70 <__ssvfiscanf_r+0x1a8>
 8017c54:	6823      	ldr	r3, [r4, #0]
 8017c56:	781a      	ldrb	r2, [r3, #0]
 8017c58:	4552      	cmp	r2, sl
 8017c5a:	f040 80a1 	bne.w	8017da0 <__ssvfiscanf_r+0x2d8>
 8017c5e:	3301      	adds	r3, #1
 8017c60:	6862      	ldr	r2, [r4, #4]
 8017c62:	6023      	str	r3, [r4, #0]
 8017c64:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8017c66:	3a01      	subs	r2, #1
 8017c68:	3301      	adds	r3, #1
 8017c6a:	6062      	str	r2, [r4, #4]
 8017c6c:	9345      	str	r3, [sp, #276]	; 0x114
 8017c6e:	e755      	b.n	8017b1c <__ssvfiscanf_r+0x54>
 8017c70:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017c72:	4621      	mov	r1, r4
 8017c74:	4630      	mov	r0, r6
 8017c76:	4798      	blx	r3
 8017c78:	2800      	cmp	r0, #0
 8017c7a:	d0eb      	beq.n	8017c54 <__ssvfiscanf_r+0x18c>
 8017c7c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017c7e:	2800      	cmp	r0, #0
 8017c80:	f040 8084 	bne.w	8017d8c <__ssvfiscanf_r+0x2c4>
 8017c84:	f04f 30ff 	mov.w	r0, #4294967295
 8017c88:	e086      	b.n	8017d98 <__ssvfiscanf_r+0x2d0>
 8017c8a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017c8c:	f042 0220 	orr.w	r2, r2, #32
 8017c90:	9241      	str	r2, [sp, #260]	; 0x104
 8017c92:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017c98:	9241      	str	r2, [sp, #260]	; 0x104
 8017c9a:	2210      	movs	r2, #16
 8017c9c:	2b6f      	cmp	r3, #111	; 0x6f
 8017c9e:	9242      	str	r2, [sp, #264]	; 0x108
 8017ca0:	bf34      	ite	cc
 8017ca2:	2303      	movcc	r3, #3
 8017ca4:	2304      	movcs	r3, #4
 8017ca6:	9347      	str	r3, [sp, #284]	; 0x11c
 8017ca8:	6863      	ldr	r3, [r4, #4]
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	dd41      	ble.n	8017d32 <__ssvfiscanf_r+0x26a>
 8017cae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017cb0:	0659      	lsls	r1, r3, #25
 8017cb2:	d404      	bmi.n	8017cbe <__ssvfiscanf_r+0x1f6>
 8017cb4:	6823      	ldr	r3, [r4, #0]
 8017cb6:	781a      	ldrb	r2, [r3, #0]
 8017cb8:	5cba      	ldrb	r2, [r7, r2]
 8017cba:	0712      	lsls	r2, r2, #28
 8017cbc:	d440      	bmi.n	8017d40 <__ssvfiscanf_r+0x278>
 8017cbe:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8017cc0:	2b02      	cmp	r3, #2
 8017cc2:	dc4f      	bgt.n	8017d64 <__ssvfiscanf_r+0x29c>
 8017cc4:	466b      	mov	r3, sp
 8017cc6:	4622      	mov	r2, r4
 8017cc8:	a941      	add	r1, sp, #260	; 0x104
 8017cca:	4630      	mov	r0, r6
 8017ccc:	f000 f9ce 	bl	801806c <_scanf_chars>
 8017cd0:	2801      	cmp	r0, #1
 8017cd2:	d065      	beq.n	8017da0 <__ssvfiscanf_r+0x2d8>
 8017cd4:	2802      	cmp	r0, #2
 8017cd6:	f47f af21 	bne.w	8017b1c <__ssvfiscanf_r+0x54>
 8017cda:	e7cf      	b.n	8017c7c <__ssvfiscanf_r+0x1b4>
 8017cdc:	220a      	movs	r2, #10
 8017cde:	e7dd      	b.n	8017c9c <__ssvfiscanf_r+0x1d4>
 8017ce0:	2300      	movs	r3, #0
 8017ce2:	9342      	str	r3, [sp, #264]	; 0x108
 8017ce4:	2303      	movs	r3, #3
 8017ce6:	e7de      	b.n	8017ca6 <__ssvfiscanf_r+0x1de>
 8017ce8:	2308      	movs	r3, #8
 8017cea:	9342      	str	r3, [sp, #264]	; 0x108
 8017cec:	2304      	movs	r3, #4
 8017cee:	e7da      	b.n	8017ca6 <__ssvfiscanf_r+0x1de>
 8017cf0:	4629      	mov	r1, r5
 8017cf2:	4640      	mov	r0, r8
 8017cf4:	f000 fb18 	bl	8018328 <__sccl>
 8017cf8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017cfe:	9341      	str	r3, [sp, #260]	; 0x104
 8017d00:	4605      	mov	r5, r0
 8017d02:	2301      	movs	r3, #1
 8017d04:	e7cf      	b.n	8017ca6 <__ssvfiscanf_r+0x1de>
 8017d06:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017d0c:	9341      	str	r3, [sp, #260]	; 0x104
 8017d0e:	2300      	movs	r3, #0
 8017d10:	e7c9      	b.n	8017ca6 <__ssvfiscanf_r+0x1de>
 8017d12:	2302      	movs	r3, #2
 8017d14:	e7c7      	b.n	8017ca6 <__ssvfiscanf_r+0x1de>
 8017d16:	9841      	ldr	r0, [sp, #260]	; 0x104
 8017d18:	06c3      	lsls	r3, r0, #27
 8017d1a:	f53f aeff 	bmi.w	8017b1c <__ssvfiscanf_r+0x54>
 8017d1e:	9b00      	ldr	r3, [sp, #0]
 8017d20:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017d22:	1d19      	adds	r1, r3, #4
 8017d24:	9100      	str	r1, [sp, #0]
 8017d26:	681b      	ldr	r3, [r3, #0]
 8017d28:	07c0      	lsls	r0, r0, #31
 8017d2a:	bf4c      	ite	mi
 8017d2c:	801a      	strhmi	r2, [r3, #0]
 8017d2e:	601a      	strpl	r2, [r3, #0]
 8017d30:	e6f4      	b.n	8017b1c <__ssvfiscanf_r+0x54>
 8017d32:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017d34:	4621      	mov	r1, r4
 8017d36:	4630      	mov	r0, r6
 8017d38:	4798      	blx	r3
 8017d3a:	2800      	cmp	r0, #0
 8017d3c:	d0b7      	beq.n	8017cae <__ssvfiscanf_r+0x1e6>
 8017d3e:	e79d      	b.n	8017c7c <__ssvfiscanf_r+0x1b4>
 8017d40:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017d42:	3201      	adds	r2, #1
 8017d44:	9245      	str	r2, [sp, #276]	; 0x114
 8017d46:	6862      	ldr	r2, [r4, #4]
 8017d48:	3a01      	subs	r2, #1
 8017d4a:	2a00      	cmp	r2, #0
 8017d4c:	6062      	str	r2, [r4, #4]
 8017d4e:	dd02      	ble.n	8017d56 <__ssvfiscanf_r+0x28e>
 8017d50:	3301      	adds	r3, #1
 8017d52:	6023      	str	r3, [r4, #0]
 8017d54:	e7ae      	b.n	8017cb4 <__ssvfiscanf_r+0x1ec>
 8017d56:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017d58:	4621      	mov	r1, r4
 8017d5a:	4630      	mov	r0, r6
 8017d5c:	4798      	blx	r3
 8017d5e:	2800      	cmp	r0, #0
 8017d60:	d0a8      	beq.n	8017cb4 <__ssvfiscanf_r+0x1ec>
 8017d62:	e78b      	b.n	8017c7c <__ssvfiscanf_r+0x1b4>
 8017d64:	2b04      	cmp	r3, #4
 8017d66:	dc06      	bgt.n	8017d76 <__ssvfiscanf_r+0x2ae>
 8017d68:	466b      	mov	r3, sp
 8017d6a:	4622      	mov	r2, r4
 8017d6c:	a941      	add	r1, sp, #260	; 0x104
 8017d6e:	4630      	mov	r0, r6
 8017d70:	f000 f9d4 	bl	801811c <_scanf_i>
 8017d74:	e7ac      	b.n	8017cd0 <__ssvfiscanf_r+0x208>
 8017d76:	4b0f      	ldr	r3, [pc, #60]	; (8017db4 <__ssvfiscanf_r+0x2ec>)
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	f43f aecf 	beq.w	8017b1c <__ssvfiscanf_r+0x54>
 8017d7e:	466b      	mov	r3, sp
 8017d80:	4622      	mov	r2, r4
 8017d82:	a941      	add	r1, sp, #260	; 0x104
 8017d84:	4630      	mov	r0, r6
 8017d86:	f7fb fca7 	bl	80136d8 <_scanf_float>
 8017d8a:	e7a1      	b.n	8017cd0 <__ssvfiscanf_r+0x208>
 8017d8c:	89a3      	ldrh	r3, [r4, #12]
 8017d8e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8017d92:	bf18      	it	ne
 8017d94:	f04f 30ff 	movne.w	r0, #4294967295
 8017d98:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8017d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017da0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017da2:	e7f9      	b.n	8017d98 <__ssvfiscanf_r+0x2d0>
 8017da4:	08017a15 	.word	0x08017a15
 8017da8:	08017a8f 	.word	0x08017a8f
 8017dac:	0801a3d1 	.word	0x0801a3d1
 8017db0:	0801aa32 	.word	0x0801aa32
 8017db4:	080136d9 	.word	0x080136d9

08017db8 <__sfputc_r>:
 8017db8:	6893      	ldr	r3, [r2, #8]
 8017dba:	3b01      	subs	r3, #1
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	b410      	push	{r4}
 8017dc0:	6093      	str	r3, [r2, #8]
 8017dc2:	da08      	bge.n	8017dd6 <__sfputc_r+0x1e>
 8017dc4:	6994      	ldr	r4, [r2, #24]
 8017dc6:	42a3      	cmp	r3, r4
 8017dc8:	db01      	blt.n	8017dce <__sfputc_r+0x16>
 8017dca:	290a      	cmp	r1, #10
 8017dcc:	d103      	bne.n	8017dd6 <__sfputc_r+0x1e>
 8017dce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017dd2:	f7fd ba73 	b.w	80152bc <__swbuf_r>
 8017dd6:	6813      	ldr	r3, [r2, #0]
 8017dd8:	1c58      	adds	r0, r3, #1
 8017dda:	6010      	str	r0, [r2, #0]
 8017ddc:	7019      	strb	r1, [r3, #0]
 8017dde:	4608      	mov	r0, r1
 8017de0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017de4:	4770      	bx	lr

08017de6 <__sfputs_r>:
 8017de6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017de8:	4606      	mov	r6, r0
 8017dea:	460f      	mov	r7, r1
 8017dec:	4614      	mov	r4, r2
 8017dee:	18d5      	adds	r5, r2, r3
 8017df0:	42ac      	cmp	r4, r5
 8017df2:	d101      	bne.n	8017df8 <__sfputs_r+0x12>
 8017df4:	2000      	movs	r0, #0
 8017df6:	e007      	b.n	8017e08 <__sfputs_r+0x22>
 8017df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017dfc:	463a      	mov	r2, r7
 8017dfe:	4630      	mov	r0, r6
 8017e00:	f7ff ffda 	bl	8017db8 <__sfputc_r>
 8017e04:	1c43      	adds	r3, r0, #1
 8017e06:	d1f3      	bne.n	8017df0 <__sfputs_r+0xa>
 8017e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017e0c <_vfiprintf_r>:
 8017e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e10:	460d      	mov	r5, r1
 8017e12:	b09d      	sub	sp, #116	; 0x74
 8017e14:	4614      	mov	r4, r2
 8017e16:	4698      	mov	r8, r3
 8017e18:	4606      	mov	r6, r0
 8017e1a:	b118      	cbz	r0, 8017e24 <_vfiprintf_r+0x18>
 8017e1c:	6983      	ldr	r3, [r0, #24]
 8017e1e:	b90b      	cbnz	r3, 8017e24 <_vfiprintf_r+0x18>
 8017e20:	f7fa faa4 	bl	801236c <__sinit>
 8017e24:	4b89      	ldr	r3, [pc, #548]	; (801804c <_vfiprintf_r+0x240>)
 8017e26:	429d      	cmp	r5, r3
 8017e28:	d11b      	bne.n	8017e62 <_vfiprintf_r+0x56>
 8017e2a:	6875      	ldr	r5, [r6, #4]
 8017e2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017e2e:	07d9      	lsls	r1, r3, #31
 8017e30:	d405      	bmi.n	8017e3e <_vfiprintf_r+0x32>
 8017e32:	89ab      	ldrh	r3, [r5, #12]
 8017e34:	059a      	lsls	r2, r3, #22
 8017e36:	d402      	bmi.n	8017e3e <_vfiprintf_r+0x32>
 8017e38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017e3a:	f7fa fc77 	bl	801272c <__retarget_lock_acquire_recursive>
 8017e3e:	89ab      	ldrh	r3, [r5, #12]
 8017e40:	071b      	lsls	r3, r3, #28
 8017e42:	d501      	bpl.n	8017e48 <_vfiprintf_r+0x3c>
 8017e44:	692b      	ldr	r3, [r5, #16]
 8017e46:	b9eb      	cbnz	r3, 8017e84 <_vfiprintf_r+0x78>
 8017e48:	4629      	mov	r1, r5
 8017e4a:	4630      	mov	r0, r6
 8017e4c:	f7fd fa9a 	bl	8015384 <__swsetup_r>
 8017e50:	b1c0      	cbz	r0, 8017e84 <_vfiprintf_r+0x78>
 8017e52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017e54:	07dc      	lsls	r4, r3, #31
 8017e56:	d50e      	bpl.n	8017e76 <_vfiprintf_r+0x6a>
 8017e58:	f04f 30ff 	mov.w	r0, #4294967295
 8017e5c:	b01d      	add	sp, #116	; 0x74
 8017e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e62:	4b7b      	ldr	r3, [pc, #492]	; (8018050 <_vfiprintf_r+0x244>)
 8017e64:	429d      	cmp	r5, r3
 8017e66:	d101      	bne.n	8017e6c <_vfiprintf_r+0x60>
 8017e68:	68b5      	ldr	r5, [r6, #8]
 8017e6a:	e7df      	b.n	8017e2c <_vfiprintf_r+0x20>
 8017e6c:	4b79      	ldr	r3, [pc, #484]	; (8018054 <_vfiprintf_r+0x248>)
 8017e6e:	429d      	cmp	r5, r3
 8017e70:	bf08      	it	eq
 8017e72:	68f5      	ldreq	r5, [r6, #12]
 8017e74:	e7da      	b.n	8017e2c <_vfiprintf_r+0x20>
 8017e76:	89ab      	ldrh	r3, [r5, #12]
 8017e78:	0598      	lsls	r0, r3, #22
 8017e7a:	d4ed      	bmi.n	8017e58 <_vfiprintf_r+0x4c>
 8017e7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017e7e:	f7fa fc57 	bl	8012730 <__retarget_lock_release_recursive>
 8017e82:	e7e9      	b.n	8017e58 <_vfiprintf_r+0x4c>
 8017e84:	2300      	movs	r3, #0
 8017e86:	9309      	str	r3, [sp, #36]	; 0x24
 8017e88:	2320      	movs	r3, #32
 8017e8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017e8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017e92:	2330      	movs	r3, #48	; 0x30
 8017e94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8018058 <_vfiprintf_r+0x24c>
 8017e98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017e9c:	f04f 0901 	mov.w	r9, #1
 8017ea0:	4623      	mov	r3, r4
 8017ea2:	469a      	mov	sl, r3
 8017ea4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017ea8:	b10a      	cbz	r2, 8017eae <_vfiprintf_r+0xa2>
 8017eaa:	2a25      	cmp	r2, #37	; 0x25
 8017eac:	d1f9      	bne.n	8017ea2 <_vfiprintf_r+0x96>
 8017eae:	ebba 0b04 	subs.w	fp, sl, r4
 8017eb2:	d00b      	beq.n	8017ecc <_vfiprintf_r+0xc0>
 8017eb4:	465b      	mov	r3, fp
 8017eb6:	4622      	mov	r2, r4
 8017eb8:	4629      	mov	r1, r5
 8017eba:	4630      	mov	r0, r6
 8017ebc:	f7ff ff93 	bl	8017de6 <__sfputs_r>
 8017ec0:	3001      	adds	r0, #1
 8017ec2:	f000 80aa 	beq.w	801801a <_vfiprintf_r+0x20e>
 8017ec6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017ec8:	445a      	add	r2, fp
 8017eca:	9209      	str	r2, [sp, #36]	; 0x24
 8017ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	f000 80a2 	beq.w	801801a <_vfiprintf_r+0x20e>
 8017ed6:	2300      	movs	r3, #0
 8017ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8017edc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017ee0:	f10a 0a01 	add.w	sl, sl, #1
 8017ee4:	9304      	str	r3, [sp, #16]
 8017ee6:	9307      	str	r3, [sp, #28]
 8017ee8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017eec:	931a      	str	r3, [sp, #104]	; 0x68
 8017eee:	4654      	mov	r4, sl
 8017ef0:	2205      	movs	r2, #5
 8017ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ef6:	4858      	ldr	r0, [pc, #352]	; (8018058 <_vfiprintf_r+0x24c>)
 8017ef8:	f7e8 f992 	bl	8000220 <memchr>
 8017efc:	9a04      	ldr	r2, [sp, #16]
 8017efe:	b9d8      	cbnz	r0, 8017f38 <_vfiprintf_r+0x12c>
 8017f00:	06d1      	lsls	r1, r2, #27
 8017f02:	bf44      	itt	mi
 8017f04:	2320      	movmi	r3, #32
 8017f06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017f0a:	0713      	lsls	r3, r2, #28
 8017f0c:	bf44      	itt	mi
 8017f0e:	232b      	movmi	r3, #43	; 0x2b
 8017f10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017f14:	f89a 3000 	ldrb.w	r3, [sl]
 8017f18:	2b2a      	cmp	r3, #42	; 0x2a
 8017f1a:	d015      	beq.n	8017f48 <_vfiprintf_r+0x13c>
 8017f1c:	9a07      	ldr	r2, [sp, #28]
 8017f1e:	4654      	mov	r4, sl
 8017f20:	2000      	movs	r0, #0
 8017f22:	f04f 0c0a 	mov.w	ip, #10
 8017f26:	4621      	mov	r1, r4
 8017f28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017f2c:	3b30      	subs	r3, #48	; 0x30
 8017f2e:	2b09      	cmp	r3, #9
 8017f30:	d94e      	bls.n	8017fd0 <_vfiprintf_r+0x1c4>
 8017f32:	b1b0      	cbz	r0, 8017f62 <_vfiprintf_r+0x156>
 8017f34:	9207      	str	r2, [sp, #28]
 8017f36:	e014      	b.n	8017f62 <_vfiprintf_r+0x156>
 8017f38:	eba0 0308 	sub.w	r3, r0, r8
 8017f3c:	fa09 f303 	lsl.w	r3, r9, r3
 8017f40:	4313      	orrs	r3, r2
 8017f42:	9304      	str	r3, [sp, #16]
 8017f44:	46a2      	mov	sl, r4
 8017f46:	e7d2      	b.n	8017eee <_vfiprintf_r+0xe2>
 8017f48:	9b03      	ldr	r3, [sp, #12]
 8017f4a:	1d19      	adds	r1, r3, #4
 8017f4c:	681b      	ldr	r3, [r3, #0]
 8017f4e:	9103      	str	r1, [sp, #12]
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	bfbb      	ittet	lt
 8017f54:	425b      	neglt	r3, r3
 8017f56:	f042 0202 	orrlt.w	r2, r2, #2
 8017f5a:	9307      	strge	r3, [sp, #28]
 8017f5c:	9307      	strlt	r3, [sp, #28]
 8017f5e:	bfb8      	it	lt
 8017f60:	9204      	strlt	r2, [sp, #16]
 8017f62:	7823      	ldrb	r3, [r4, #0]
 8017f64:	2b2e      	cmp	r3, #46	; 0x2e
 8017f66:	d10c      	bne.n	8017f82 <_vfiprintf_r+0x176>
 8017f68:	7863      	ldrb	r3, [r4, #1]
 8017f6a:	2b2a      	cmp	r3, #42	; 0x2a
 8017f6c:	d135      	bne.n	8017fda <_vfiprintf_r+0x1ce>
 8017f6e:	9b03      	ldr	r3, [sp, #12]
 8017f70:	1d1a      	adds	r2, r3, #4
 8017f72:	681b      	ldr	r3, [r3, #0]
 8017f74:	9203      	str	r2, [sp, #12]
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	bfb8      	it	lt
 8017f7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8017f7e:	3402      	adds	r4, #2
 8017f80:	9305      	str	r3, [sp, #20]
 8017f82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018068 <_vfiprintf_r+0x25c>
 8017f86:	7821      	ldrb	r1, [r4, #0]
 8017f88:	2203      	movs	r2, #3
 8017f8a:	4650      	mov	r0, sl
 8017f8c:	f7e8 f948 	bl	8000220 <memchr>
 8017f90:	b140      	cbz	r0, 8017fa4 <_vfiprintf_r+0x198>
 8017f92:	2340      	movs	r3, #64	; 0x40
 8017f94:	eba0 000a 	sub.w	r0, r0, sl
 8017f98:	fa03 f000 	lsl.w	r0, r3, r0
 8017f9c:	9b04      	ldr	r3, [sp, #16]
 8017f9e:	4303      	orrs	r3, r0
 8017fa0:	3401      	adds	r4, #1
 8017fa2:	9304      	str	r3, [sp, #16]
 8017fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017fa8:	482c      	ldr	r0, [pc, #176]	; (801805c <_vfiprintf_r+0x250>)
 8017faa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017fae:	2206      	movs	r2, #6
 8017fb0:	f7e8 f936 	bl	8000220 <memchr>
 8017fb4:	2800      	cmp	r0, #0
 8017fb6:	d03f      	beq.n	8018038 <_vfiprintf_r+0x22c>
 8017fb8:	4b29      	ldr	r3, [pc, #164]	; (8018060 <_vfiprintf_r+0x254>)
 8017fba:	bb1b      	cbnz	r3, 8018004 <_vfiprintf_r+0x1f8>
 8017fbc:	9b03      	ldr	r3, [sp, #12]
 8017fbe:	3307      	adds	r3, #7
 8017fc0:	f023 0307 	bic.w	r3, r3, #7
 8017fc4:	3308      	adds	r3, #8
 8017fc6:	9303      	str	r3, [sp, #12]
 8017fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017fca:	443b      	add	r3, r7
 8017fcc:	9309      	str	r3, [sp, #36]	; 0x24
 8017fce:	e767      	b.n	8017ea0 <_vfiprintf_r+0x94>
 8017fd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8017fd4:	460c      	mov	r4, r1
 8017fd6:	2001      	movs	r0, #1
 8017fd8:	e7a5      	b.n	8017f26 <_vfiprintf_r+0x11a>
 8017fda:	2300      	movs	r3, #0
 8017fdc:	3401      	adds	r4, #1
 8017fde:	9305      	str	r3, [sp, #20]
 8017fe0:	4619      	mov	r1, r3
 8017fe2:	f04f 0c0a 	mov.w	ip, #10
 8017fe6:	4620      	mov	r0, r4
 8017fe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017fec:	3a30      	subs	r2, #48	; 0x30
 8017fee:	2a09      	cmp	r2, #9
 8017ff0:	d903      	bls.n	8017ffa <_vfiprintf_r+0x1ee>
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	d0c5      	beq.n	8017f82 <_vfiprintf_r+0x176>
 8017ff6:	9105      	str	r1, [sp, #20]
 8017ff8:	e7c3      	b.n	8017f82 <_vfiprintf_r+0x176>
 8017ffa:	fb0c 2101 	mla	r1, ip, r1, r2
 8017ffe:	4604      	mov	r4, r0
 8018000:	2301      	movs	r3, #1
 8018002:	e7f0      	b.n	8017fe6 <_vfiprintf_r+0x1da>
 8018004:	ab03      	add	r3, sp, #12
 8018006:	9300      	str	r3, [sp, #0]
 8018008:	462a      	mov	r2, r5
 801800a:	4b16      	ldr	r3, [pc, #88]	; (8018064 <_vfiprintf_r+0x258>)
 801800c:	a904      	add	r1, sp, #16
 801800e:	4630      	mov	r0, r6
 8018010:	f7fa ff98 	bl	8012f44 <_printf_float>
 8018014:	4607      	mov	r7, r0
 8018016:	1c78      	adds	r0, r7, #1
 8018018:	d1d6      	bne.n	8017fc8 <_vfiprintf_r+0x1bc>
 801801a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801801c:	07d9      	lsls	r1, r3, #31
 801801e:	d405      	bmi.n	801802c <_vfiprintf_r+0x220>
 8018020:	89ab      	ldrh	r3, [r5, #12]
 8018022:	059a      	lsls	r2, r3, #22
 8018024:	d402      	bmi.n	801802c <_vfiprintf_r+0x220>
 8018026:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018028:	f7fa fb82 	bl	8012730 <__retarget_lock_release_recursive>
 801802c:	89ab      	ldrh	r3, [r5, #12]
 801802e:	065b      	lsls	r3, r3, #25
 8018030:	f53f af12 	bmi.w	8017e58 <_vfiprintf_r+0x4c>
 8018034:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018036:	e711      	b.n	8017e5c <_vfiprintf_r+0x50>
 8018038:	ab03      	add	r3, sp, #12
 801803a:	9300      	str	r3, [sp, #0]
 801803c:	462a      	mov	r2, r5
 801803e:	4b09      	ldr	r3, [pc, #36]	; (8018064 <_vfiprintf_r+0x258>)
 8018040:	a904      	add	r1, sp, #16
 8018042:	4630      	mov	r0, r6
 8018044:	f7fb fa22 	bl	801348c <_printf_i>
 8018048:	e7e4      	b.n	8018014 <_vfiprintf_r+0x208>
 801804a:	bf00      	nop
 801804c:	0801a4f4 	.word	0x0801a4f4
 8018050:	0801a514 	.word	0x0801a514
 8018054:	0801a4d4 	.word	0x0801a4d4
 8018058:	0801aa2c 	.word	0x0801aa2c
 801805c:	0801aa36 	.word	0x0801aa36
 8018060:	08012f45 	.word	0x08012f45
 8018064:	08017de7 	.word	0x08017de7
 8018068:	0801aa32 	.word	0x0801aa32

0801806c <_scanf_chars>:
 801806c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018070:	4615      	mov	r5, r2
 8018072:	688a      	ldr	r2, [r1, #8]
 8018074:	4680      	mov	r8, r0
 8018076:	460c      	mov	r4, r1
 8018078:	b932      	cbnz	r2, 8018088 <_scanf_chars+0x1c>
 801807a:	698a      	ldr	r2, [r1, #24]
 801807c:	2a00      	cmp	r2, #0
 801807e:	bf0c      	ite	eq
 8018080:	2201      	moveq	r2, #1
 8018082:	f04f 32ff 	movne.w	r2, #4294967295
 8018086:	608a      	str	r2, [r1, #8]
 8018088:	6822      	ldr	r2, [r4, #0]
 801808a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8018118 <_scanf_chars+0xac>
 801808e:	06d1      	lsls	r1, r2, #27
 8018090:	bf5f      	itttt	pl
 8018092:	681a      	ldrpl	r2, [r3, #0]
 8018094:	1d11      	addpl	r1, r2, #4
 8018096:	6019      	strpl	r1, [r3, #0]
 8018098:	6816      	ldrpl	r6, [r2, #0]
 801809a:	2700      	movs	r7, #0
 801809c:	69a0      	ldr	r0, [r4, #24]
 801809e:	b188      	cbz	r0, 80180c4 <_scanf_chars+0x58>
 80180a0:	2801      	cmp	r0, #1
 80180a2:	d107      	bne.n	80180b4 <_scanf_chars+0x48>
 80180a4:	682b      	ldr	r3, [r5, #0]
 80180a6:	781a      	ldrb	r2, [r3, #0]
 80180a8:	6963      	ldr	r3, [r4, #20]
 80180aa:	5c9b      	ldrb	r3, [r3, r2]
 80180ac:	b953      	cbnz	r3, 80180c4 <_scanf_chars+0x58>
 80180ae:	bb27      	cbnz	r7, 80180fa <_scanf_chars+0x8e>
 80180b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80180b4:	2802      	cmp	r0, #2
 80180b6:	d120      	bne.n	80180fa <_scanf_chars+0x8e>
 80180b8:	682b      	ldr	r3, [r5, #0]
 80180ba:	781b      	ldrb	r3, [r3, #0]
 80180bc:	f813 3009 	ldrb.w	r3, [r3, r9]
 80180c0:	071b      	lsls	r3, r3, #28
 80180c2:	d41a      	bmi.n	80180fa <_scanf_chars+0x8e>
 80180c4:	6823      	ldr	r3, [r4, #0]
 80180c6:	06da      	lsls	r2, r3, #27
 80180c8:	bf5e      	ittt	pl
 80180ca:	682b      	ldrpl	r3, [r5, #0]
 80180cc:	781b      	ldrbpl	r3, [r3, #0]
 80180ce:	f806 3b01 	strbpl.w	r3, [r6], #1
 80180d2:	682a      	ldr	r2, [r5, #0]
 80180d4:	686b      	ldr	r3, [r5, #4]
 80180d6:	3201      	adds	r2, #1
 80180d8:	602a      	str	r2, [r5, #0]
 80180da:	68a2      	ldr	r2, [r4, #8]
 80180dc:	3b01      	subs	r3, #1
 80180de:	3a01      	subs	r2, #1
 80180e0:	606b      	str	r3, [r5, #4]
 80180e2:	3701      	adds	r7, #1
 80180e4:	60a2      	str	r2, [r4, #8]
 80180e6:	b142      	cbz	r2, 80180fa <_scanf_chars+0x8e>
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	dcd7      	bgt.n	801809c <_scanf_chars+0x30>
 80180ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80180f0:	4629      	mov	r1, r5
 80180f2:	4640      	mov	r0, r8
 80180f4:	4798      	blx	r3
 80180f6:	2800      	cmp	r0, #0
 80180f8:	d0d0      	beq.n	801809c <_scanf_chars+0x30>
 80180fa:	6823      	ldr	r3, [r4, #0]
 80180fc:	f013 0310 	ands.w	r3, r3, #16
 8018100:	d105      	bne.n	801810e <_scanf_chars+0xa2>
 8018102:	68e2      	ldr	r2, [r4, #12]
 8018104:	3201      	adds	r2, #1
 8018106:	60e2      	str	r2, [r4, #12]
 8018108:	69a2      	ldr	r2, [r4, #24]
 801810a:	b102      	cbz	r2, 801810e <_scanf_chars+0xa2>
 801810c:	7033      	strb	r3, [r6, #0]
 801810e:	6923      	ldr	r3, [r4, #16]
 8018110:	441f      	add	r7, r3
 8018112:	6127      	str	r7, [r4, #16]
 8018114:	2000      	movs	r0, #0
 8018116:	e7cb      	b.n	80180b0 <_scanf_chars+0x44>
 8018118:	0801a3d1 	.word	0x0801a3d1

0801811c <_scanf_i>:
 801811c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018120:	4698      	mov	r8, r3
 8018122:	4b74      	ldr	r3, [pc, #464]	; (80182f4 <_scanf_i+0x1d8>)
 8018124:	460c      	mov	r4, r1
 8018126:	4682      	mov	sl, r0
 8018128:	4616      	mov	r6, r2
 801812a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801812e:	b087      	sub	sp, #28
 8018130:	ab03      	add	r3, sp, #12
 8018132:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018136:	4b70      	ldr	r3, [pc, #448]	; (80182f8 <_scanf_i+0x1dc>)
 8018138:	69a1      	ldr	r1, [r4, #24]
 801813a:	4a70      	ldr	r2, [pc, #448]	; (80182fc <_scanf_i+0x1e0>)
 801813c:	2903      	cmp	r1, #3
 801813e:	bf18      	it	ne
 8018140:	461a      	movne	r2, r3
 8018142:	68a3      	ldr	r3, [r4, #8]
 8018144:	9201      	str	r2, [sp, #4]
 8018146:	1e5a      	subs	r2, r3, #1
 8018148:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801814c:	bf88      	it	hi
 801814e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8018152:	4627      	mov	r7, r4
 8018154:	bf82      	ittt	hi
 8018156:	eb03 0905 	addhi.w	r9, r3, r5
 801815a:	f240 135d 	movwhi	r3, #349	; 0x15d
 801815e:	60a3      	strhi	r3, [r4, #8]
 8018160:	f857 3b1c 	ldr.w	r3, [r7], #28
 8018164:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8018168:	bf98      	it	ls
 801816a:	f04f 0900 	movls.w	r9, #0
 801816e:	6023      	str	r3, [r4, #0]
 8018170:	463d      	mov	r5, r7
 8018172:	f04f 0b00 	mov.w	fp, #0
 8018176:	6831      	ldr	r1, [r6, #0]
 8018178:	ab03      	add	r3, sp, #12
 801817a:	7809      	ldrb	r1, [r1, #0]
 801817c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8018180:	2202      	movs	r2, #2
 8018182:	f7e8 f84d 	bl	8000220 <memchr>
 8018186:	b328      	cbz	r0, 80181d4 <_scanf_i+0xb8>
 8018188:	f1bb 0f01 	cmp.w	fp, #1
 801818c:	d159      	bne.n	8018242 <_scanf_i+0x126>
 801818e:	6862      	ldr	r2, [r4, #4]
 8018190:	b92a      	cbnz	r2, 801819e <_scanf_i+0x82>
 8018192:	6822      	ldr	r2, [r4, #0]
 8018194:	2308      	movs	r3, #8
 8018196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801819a:	6063      	str	r3, [r4, #4]
 801819c:	6022      	str	r2, [r4, #0]
 801819e:	6822      	ldr	r2, [r4, #0]
 80181a0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80181a4:	6022      	str	r2, [r4, #0]
 80181a6:	68a2      	ldr	r2, [r4, #8]
 80181a8:	1e51      	subs	r1, r2, #1
 80181aa:	60a1      	str	r1, [r4, #8]
 80181ac:	b192      	cbz	r2, 80181d4 <_scanf_i+0xb8>
 80181ae:	6832      	ldr	r2, [r6, #0]
 80181b0:	1c51      	adds	r1, r2, #1
 80181b2:	6031      	str	r1, [r6, #0]
 80181b4:	7812      	ldrb	r2, [r2, #0]
 80181b6:	f805 2b01 	strb.w	r2, [r5], #1
 80181ba:	6872      	ldr	r2, [r6, #4]
 80181bc:	3a01      	subs	r2, #1
 80181be:	2a00      	cmp	r2, #0
 80181c0:	6072      	str	r2, [r6, #4]
 80181c2:	dc07      	bgt.n	80181d4 <_scanf_i+0xb8>
 80181c4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80181c8:	4631      	mov	r1, r6
 80181ca:	4650      	mov	r0, sl
 80181cc:	4790      	blx	r2
 80181ce:	2800      	cmp	r0, #0
 80181d0:	f040 8085 	bne.w	80182de <_scanf_i+0x1c2>
 80181d4:	f10b 0b01 	add.w	fp, fp, #1
 80181d8:	f1bb 0f03 	cmp.w	fp, #3
 80181dc:	d1cb      	bne.n	8018176 <_scanf_i+0x5a>
 80181de:	6863      	ldr	r3, [r4, #4]
 80181e0:	b90b      	cbnz	r3, 80181e6 <_scanf_i+0xca>
 80181e2:	230a      	movs	r3, #10
 80181e4:	6063      	str	r3, [r4, #4]
 80181e6:	6863      	ldr	r3, [r4, #4]
 80181e8:	4945      	ldr	r1, [pc, #276]	; (8018300 <_scanf_i+0x1e4>)
 80181ea:	6960      	ldr	r0, [r4, #20]
 80181ec:	1ac9      	subs	r1, r1, r3
 80181ee:	f000 f89b 	bl	8018328 <__sccl>
 80181f2:	f04f 0b00 	mov.w	fp, #0
 80181f6:	68a3      	ldr	r3, [r4, #8]
 80181f8:	6822      	ldr	r2, [r4, #0]
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	d03d      	beq.n	801827a <_scanf_i+0x15e>
 80181fe:	6831      	ldr	r1, [r6, #0]
 8018200:	6960      	ldr	r0, [r4, #20]
 8018202:	f891 c000 	ldrb.w	ip, [r1]
 8018206:	f810 000c 	ldrb.w	r0, [r0, ip]
 801820a:	2800      	cmp	r0, #0
 801820c:	d035      	beq.n	801827a <_scanf_i+0x15e>
 801820e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8018212:	d124      	bne.n	801825e <_scanf_i+0x142>
 8018214:	0510      	lsls	r0, r2, #20
 8018216:	d522      	bpl.n	801825e <_scanf_i+0x142>
 8018218:	f10b 0b01 	add.w	fp, fp, #1
 801821c:	f1b9 0f00 	cmp.w	r9, #0
 8018220:	d003      	beq.n	801822a <_scanf_i+0x10e>
 8018222:	3301      	adds	r3, #1
 8018224:	f109 39ff 	add.w	r9, r9, #4294967295
 8018228:	60a3      	str	r3, [r4, #8]
 801822a:	6873      	ldr	r3, [r6, #4]
 801822c:	3b01      	subs	r3, #1
 801822e:	2b00      	cmp	r3, #0
 8018230:	6073      	str	r3, [r6, #4]
 8018232:	dd1b      	ble.n	801826c <_scanf_i+0x150>
 8018234:	6833      	ldr	r3, [r6, #0]
 8018236:	3301      	adds	r3, #1
 8018238:	6033      	str	r3, [r6, #0]
 801823a:	68a3      	ldr	r3, [r4, #8]
 801823c:	3b01      	subs	r3, #1
 801823e:	60a3      	str	r3, [r4, #8]
 8018240:	e7d9      	b.n	80181f6 <_scanf_i+0xda>
 8018242:	f1bb 0f02 	cmp.w	fp, #2
 8018246:	d1ae      	bne.n	80181a6 <_scanf_i+0x8a>
 8018248:	6822      	ldr	r2, [r4, #0]
 801824a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801824e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8018252:	d1bf      	bne.n	80181d4 <_scanf_i+0xb8>
 8018254:	2310      	movs	r3, #16
 8018256:	6063      	str	r3, [r4, #4]
 8018258:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801825c:	e7a2      	b.n	80181a4 <_scanf_i+0x88>
 801825e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8018262:	6022      	str	r2, [r4, #0]
 8018264:	780b      	ldrb	r3, [r1, #0]
 8018266:	f805 3b01 	strb.w	r3, [r5], #1
 801826a:	e7de      	b.n	801822a <_scanf_i+0x10e>
 801826c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018270:	4631      	mov	r1, r6
 8018272:	4650      	mov	r0, sl
 8018274:	4798      	blx	r3
 8018276:	2800      	cmp	r0, #0
 8018278:	d0df      	beq.n	801823a <_scanf_i+0x11e>
 801827a:	6823      	ldr	r3, [r4, #0]
 801827c:	05d9      	lsls	r1, r3, #23
 801827e:	d50d      	bpl.n	801829c <_scanf_i+0x180>
 8018280:	42bd      	cmp	r5, r7
 8018282:	d909      	bls.n	8018298 <_scanf_i+0x17c>
 8018284:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8018288:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801828c:	4632      	mov	r2, r6
 801828e:	4650      	mov	r0, sl
 8018290:	4798      	blx	r3
 8018292:	f105 39ff 	add.w	r9, r5, #4294967295
 8018296:	464d      	mov	r5, r9
 8018298:	42bd      	cmp	r5, r7
 801829a:	d028      	beq.n	80182ee <_scanf_i+0x1d2>
 801829c:	6822      	ldr	r2, [r4, #0]
 801829e:	f012 0210 	ands.w	r2, r2, #16
 80182a2:	d113      	bne.n	80182cc <_scanf_i+0x1b0>
 80182a4:	702a      	strb	r2, [r5, #0]
 80182a6:	6863      	ldr	r3, [r4, #4]
 80182a8:	9e01      	ldr	r6, [sp, #4]
 80182aa:	4639      	mov	r1, r7
 80182ac:	4650      	mov	r0, sl
 80182ae:	47b0      	blx	r6
 80182b0:	f8d8 3000 	ldr.w	r3, [r8]
 80182b4:	6821      	ldr	r1, [r4, #0]
 80182b6:	1d1a      	adds	r2, r3, #4
 80182b8:	f8c8 2000 	str.w	r2, [r8]
 80182bc:	f011 0f20 	tst.w	r1, #32
 80182c0:	681b      	ldr	r3, [r3, #0]
 80182c2:	d00f      	beq.n	80182e4 <_scanf_i+0x1c8>
 80182c4:	6018      	str	r0, [r3, #0]
 80182c6:	68e3      	ldr	r3, [r4, #12]
 80182c8:	3301      	adds	r3, #1
 80182ca:	60e3      	str	r3, [r4, #12]
 80182cc:	1bed      	subs	r5, r5, r7
 80182ce:	44ab      	add	fp, r5
 80182d0:	6925      	ldr	r5, [r4, #16]
 80182d2:	445d      	add	r5, fp
 80182d4:	6125      	str	r5, [r4, #16]
 80182d6:	2000      	movs	r0, #0
 80182d8:	b007      	add	sp, #28
 80182da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182de:	f04f 0b00 	mov.w	fp, #0
 80182e2:	e7ca      	b.n	801827a <_scanf_i+0x15e>
 80182e4:	07ca      	lsls	r2, r1, #31
 80182e6:	bf4c      	ite	mi
 80182e8:	8018      	strhmi	r0, [r3, #0]
 80182ea:	6018      	strpl	r0, [r3, #0]
 80182ec:	e7eb      	b.n	80182c6 <_scanf_i+0x1aa>
 80182ee:	2001      	movs	r0, #1
 80182f0:	e7f2      	b.n	80182d8 <_scanf_i+0x1bc>
 80182f2:	bf00      	nop
 80182f4:	0801a278 	.word	0x0801a278
 80182f8:	08014e39 	.word	0x08014e39
 80182fc:	08014d29 	.word	0x08014d29
 8018300:	0801aa56 	.word	0x0801aa56

08018304 <_read_r>:
 8018304:	b538      	push	{r3, r4, r5, lr}
 8018306:	4d07      	ldr	r5, [pc, #28]	; (8018324 <_read_r+0x20>)
 8018308:	4604      	mov	r4, r0
 801830a:	4608      	mov	r0, r1
 801830c:	4611      	mov	r1, r2
 801830e:	2200      	movs	r2, #0
 8018310:	602a      	str	r2, [r5, #0]
 8018312:	461a      	mov	r2, r3
 8018314:	f000 f8f0 	bl	80184f8 <_read>
 8018318:	1c43      	adds	r3, r0, #1
 801831a:	d102      	bne.n	8018322 <_read_r+0x1e>
 801831c:	682b      	ldr	r3, [r5, #0]
 801831e:	b103      	cbz	r3, 8018322 <_read_r+0x1e>
 8018320:	6023      	str	r3, [r4, #0]
 8018322:	bd38      	pop	{r3, r4, r5, pc}
 8018324:	200064f0 	.word	0x200064f0

08018328 <__sccl>:
 8018328:	b570      	push	{r4, r5, r6, lr}
 801832a:	780b      	ldrb	r3, [r1, #0]
 801832c:	4604      	mov	r4, r0
 801832e:	2b5e      	cmp	r3, #94	; 0x5e
 8018330:	bf0b      	itete	eq
 8018332:	784b      	ldrbeq	r3, [r1, #1]
 8018334:	1c48      	addne	r0, r1, #1
 8018336:	1c88      	addeq	r0, r1, #2
 8018338:	2200      	movne	r2, #0
 801833a:	bf08      	it	eq
 801833c:	2201      	moveq	r2, #1
 801833e:	1e61      	subs	r1, r4, #1
 8018340:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8018344:	f801 2f01 	strb.w	r2, [r1, #1]!
 8018348:	42a9      	cmp	r1, r5
 801834a:	d1fb      	bne.n	8018344 <__sccl+0x1c>
 801834c:	b90b      	cbnz	r3, 8018352 <__sccl+0x2a>
 801834e:	3801      	subs	r0, #1
 8018350:	bd70      	pop	{r4, r5, r6, pc}
 8018352:	f082 0101 	eor.w	r1, r2, #1
 8018356:	54e1      	strb	r1, [r4, r3]
 8018358:	1c42      	adds	r2, r0, #1
 801835a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801835e:	2d2d      	cmp	r5, #45	; 0x2d
 8018360:	f102 36ff 	add.w	r6, r2, #4294967295
 8018364:	4610      	mov	r0, r2
 8018366:	d006      	beq.n	8018376 <__sccl+0x4e>
 8018368:	2d5d      	cmp	r5, #93	; 0x5d
 801836a:	d0f1      	beq.n	8018350 <__sccl+0x28>
 801836c:	b90d      	cbnz	r5, 8018372 <__sccl+0x4a>
 801836e:	4630      	mov	r0, r6
 8018370:	e7ee      	b.n	8018350 <__sccl+0x28>
 8018372:	462b      	mov	r3, r5
 8018374:	e7ef      	b.n	8018356 <__sccl+0x2e>
 8018376:	7816      	ldrb	r6, [r2, #0]
 8018378:	2e5d      	cmp	r6, #93	; 0x5d
 801837a:	d0fa      	beq.n	8018372 <__sccl+0x4a>
 801837c:	42b3      	cmp	r3, r6
 801837e:	dcf8      	bgt.n	8018372 <__sccl+0x4a>
 8018380:	4618      	mov	r0, r3
 8018382:	3001      	adds	r0, #1
 8018384:	4286      	cmp	r6, r0
 8018386:	5421      	strb	r1, [r4, r0]
 8018388:	dcfb      	bgt.n	8018382 <__sccl+0x5a>
 801838a:	43d8      	mvns	r0, r3
 801838c:	4430      	add	r0, r6
 801838e:	1c5d      	adds	r5, r3, #1
 8018390:	42b3      	cmp	r3, r6
 8018392:	bfa8      	it	ge
 8018394:	2000      	movge	r0, #0
 8018396:	182b      	adds	r3, r5, r0
 8018398:	3202      	adds	r2, #2
 801839a:	e7de      	b.n	801835a <__sccl+0x32>

0801839c <__submore>:
 801839c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183a0:	460c      	mov	r4, r1
 80183a2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80183a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80183a8:	4299      	cmp	r1, r3
 80183aa:	d11d      	bne.n	80183e8 <__submore+0x4c>
 80183ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80183b0:	f7fa fcce 	bl	8012d50 <_malloc_r>
 80183b4:	b918      	cbnz	r0, 80183be <__submore+0x22>
 80183b6:	f04f 30ff 	mov.w	r0, #4294967295
 80183ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80183c2:	63a3      	str	r3, [r4, #56]	; 0x38
 80183c4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80183c8:	6360      	str	r0, [r4, #52]	; 0x34
 80183ca:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80183ce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80183d2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80183d6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80183da:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80183de:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80183e2:	6020      	str	r0, [r4, #0]
 80183e4:	2000      	movs	r0, #0
 80183e6:	e7e8      	b.n	80183ba <__submore+0x1e>
 80183e8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80183ea:	0077      	lsls	r7, r6, #1
 80183ec:	463a      	mov	r2, r7
 80183ee:	f7ff f98f 	bl	8017710 <_realloc_r>
 80183f2:	4605      	mov	r5, r0
 80183f4:	2800      	cmp	r0, #0
 80183f6:	d0de      	beq.n	80183b6 <__submore+0x1a>
 80183f8:	eb00 0806 	add.w	r8, r0, r6
 80183fc:	4601      	mov	r1, r0
 80183fe:	4632      	mov	r2, r6
 8018400:	4640      	mov	r0, r8
 8018402:	f7fa f9a7 	bl	8012754 <memcpy>
 8018406:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801840a:	f8c4 8000 	str.w	r8, [r4]
 801840e:	e7e9      	b.n	80183e4 <__submore+0x48>

08018410 <__ascii_wctomb>:
 8018410:	b149      	cbz	r1, 8018426 <__ascii_wctomb+0x16>
 8018412:	2aff      	cmp	r2, #255	; 0xff
 8018414:	bf85      	ittet	hi
 8018416:	238a      	movhi	r3, #138	; 0x8a
 8018418:	6003      	strhi	r3, [r0, #0]
 801841a:	700a      	strbls	r2, [r1, #0]
 801841c:	f04f 30ff 	movhi.w	r0, #4294967295
 8018420:	bf98      	it	ls
 8018422:	2001      	movls	r0, #1
 8018424:	4770      	bx	lr
 8018426:	4608      	mov	r0, r1
 8018428:	4770      	bx	lr
	...

0801842c <__env_lock>:
 801842c:	4801      	ldr	r0, [pc, #4]	; (8018434 <__env_lock+0x8>)
 801842e:	f7fa b97d 	b.w	801272c <__retarget_lock_acquire_recursive>
 8018432:	bf00      	nop
 8018434:	200064e6 	.word	0x200064e6

08018438 <__env_unlock>:
 8018438:	4801      	ldr	r0, [pc, #4]	; (8018440 <__env_unlock+0x8>)
 801843a:	f7fa b979 	b.w	8012730 <__retarget_lock_release_recursive>
 801843e:	bf00      	nop
 8018440:	200064e6 	.word	0x200064e6

08018444 <_fstat_r>:
 8018444:	b538      	push	{r3, r4, r5, lr}
 8018446:	4d07      	ldr	r5, [pc, #28]	; (8018464 <_fstat_r+0x20>)
 8018448:	2300      	movs	r3, #0
 801844a:	4604      	mov	r4, r0
 801844c:	4608      	mov	r0, r1
 801844e:	4611      	mov	r1, r2
 8018450:	602b      	str	r3, [r5, #0]
 8018452:	f000 f829 	bl	80184a8 <_fstat>
 8018456:	1c43      	adds	r3, r0, #1
 8018458:	d102      	bne.n	8018460 <_fstat_r+0x1c>
 801845a:	682b      	ldr	r3, [r5, #0]
 801845c:	b103      	cbz	r3, 8018460 <_fstat_r+0x1c>
 801845e:	6023      	str	r3, [r4, #0]
 8018460:	bd38      	pop	{r3, r4, r5, pc}
 8018462:	bf00      	nop
 8018464:	200064f0 	.word	0x200064f0

08018468 <_isatty_r>:
 8018468:	b538      	push	{r3, r4, r5, lr}
 801846a:	4d06      	ldr	r5, [pc, #24]	; (8018484 <_isatty_r+0x1c>)
 801846c:	2300      	movs	r3, #0
 801846e:	4604      	mov	r4, r0
 8018470:	4608      	mov	r0, r1
 8018472:	602b      	str	r3, [r5, #0]
 8018474:	f000 f828 	bl	80184c8 <_isatty>
 8018478:	1c43      	adds	r3, r0, #1
 801847a:	d102      	bne.n	8018482 <_isatty_r+0x1a>
 801847c:	682b      	ldr	r3, [r5, #0]
 801847e:	b103      	cbz	r3, 8018482 <_isatty_r+0x1a>
 8018480:	6023      	str	r3, [r4, #0]
 8018482:	bd38      	pop	{r3, r4, r5, pc}
 8018484:	200064f0 	.word	0x200064f0

08018488 <_malloc_usable_size_r>:
 8018488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801848c:	1f18      	subs	r0, r3, #4
 801848e:	2b00      	cmp	r3, #0
 8018490:	bfbc      	itt	lt
 8018492:	580b      	ldrlt	r3, [r1, r0]
 8018494:	18c0      	addlt	r0, r0, r3
 8018496:	4770      	bx	lr

08018498 <_close>:
 8018498:	4b02      	ldr	r3, [pc, #8]	; (80184a4 <_close+0xc>)
 801849a:	2258      	movs	r2, #88	; 0x58
 801849c:	601a      	str	r2, [r3, #0]
 801849e:	f04f 30ff 	mov.w	r0, #4294967295
 80184a2:	4770      	bx	lr
 80184a4:	200064f0 	.word	0x200064f0

080184a8 <_fstat>:
 80184a8:	4b02      	ldr	r3, [pc, #8]	; (80184b4 <_fstat+0xc>)
 80184aa:	2258      	movs	r2, #88	; 0x58
 80184ac:	601a      	str	r2, [r3, #0]
 80184ae:	f04f 30ff 	mov.w	r0, #4294967295
 80184b2:	4770      	bx	lr
 80184b4:	200064f0 	.word	0x200064f0

080184b8 <_getpid>:
 80184b8:	4b02      	ldr	r3, [pc, #8]	; (80184c4 <_getpid+0xc>)
 80184ba:	2258      	movs	r2, #88	; 0x58
 80184bc:	601a      	str	r2, [r3, #0]
 80184be:	f04f 30ff 	mov.w	r0, #4294967295
 80184c2:	4770      	bx	lr
 80184c4:	200064f0 	.word	0x200064f0

080184c8 <_isatty>:
 80184c8:	4b02      	ldr	r3, [pc, #8]	; (80184d4 <_isatty+0xc>)
 80184ca:	2258      	movs	r2, #88	; 0x58
 80184cc:	601a      	str	r2, [r3, #0]
 80184ce:	2000      	movs	r0, #0
 80184d0:	4770      	bx	lr
 80184d2:	bf00      	nop
 80184d4:	200064f0 	.word	0x200064f0

080184d8 <_kill>:
 80184d8:	4b02      	ldr	r3, [pc, #8]	; (80184e4 <_kill+0xc>)
 80184da:	2258      	movs	r2, #88	; 0x58
 80184dc:	601a      	str	r2, [r3, #0]
 80184de:	f04f 30ff 	mov.w	r0, #4294967295
 80184e2:	4770      	bx	lr
 80184e4:	200064f0 	.word	0x200064f0

080184e8 <_lseek>:
 80184e8:	4b02      	ldr	r3, [pc, #8]	; (80184f4 <_lseek+0xc>)
 80184ea:	2258      	movs	r2, #88	; 0x58
 80184ec:	601a      	str	r2, [r3, #0]
 80184ee:	f04f 30ff 	mov.w	r0, #4294967295
 80184f2:	4770      	bx	lr
 80184f4:	200064f0 	.word	0x200064f0

080184f8 <_read>:
 80184f8:	4b02      	ldr	r3, [pc, #8]	; (8018504 <_read+0xc>)
 80184fa:	2258      	movs	r2, #88	; 0x58
 80184fc:	601a      	str	r2, [r3, #0]
 80184fe:	f04f 30ff 	mov.w	r0, #4294967295
 8018502:	4770      	bx	lr
 8018504:	200064f0 	.word	0x200064f0

08018508 <_sbrk>:
 8018508:	4b04      	ldr	r3, [pc, #16]	; (801851c <_sbrk+0x14>)
 801850a:	6819      	ldr	r1, [r3, #0]
 801850c:	4602      	mov	r2, r0
 801850e:	b909      	cbnz	r1, 8018514 <_sbrk+0xc>
 8018510:	4903      	ldr	r1, [pc, #12]	; (8018520 <_sbrk+0x18>)
 8018512:	6019      	str	r1, [r3, #0]
 8018514:	6818      	ldr	r0, [r3, #0]
 8018516:	4402      	add	r2, r0
 8018518:	601a      	str	r2, [r3, #0]
 801851a:	4770      	bx	lr
 801851c:	20005a88 	.word	0x20005a88
 8018520:	200064f8 	.word	0x200064f8

08018524 <_write>:
 8018524:	4b02      	ldr	r3, [pc, #8]	; (8018530 <_write+0xc>)
 8018526:	2258      	movs	r2, #88	; 0x58
 8018528:	601a      	str	r2, [r3, #0]
 801852a:	f04f 30ff 	mov.w	r0, #4294967295
 801852e:	4770      	bx	lr
 8018530:	200064f0 	.word	0x200064f0

08018534 <_exit>:
 8018534:	e7fe      	b.n	8018534 <_exit>
	...

08018538 <_init>:
 8018538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801853a:	bf00      	nop
 801853c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801853e:	bc08      	pop	{r3}
 8018540:	469e      	mov	lr, r3
 8018542:	4770      	bx	lr

08018544 <_fini>:
 8018544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018546:	bf00      	nop
 8018548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801854a:	bc08      	pop	{r3}
 801854c:	469e      	mov	lr, r3
 801854e:	4770      	bx	lr
