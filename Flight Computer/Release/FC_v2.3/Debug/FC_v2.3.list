
FC_v2.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fdd0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000026e8  0801ff80  0801ff80  0002ff80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022668  08022668  00040434  2**0
                  CONTENTS
  4 .ARM          00000008  08022668  08022668  00032668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022670  08022670  00040434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08022670  08022670  00032670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022678  08022678  00032678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000434  20000000  0802267c  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040434  2**0
                  CONTENTS
 10 .bss          00008928  20000434  20000434  00040434  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  20008d5c  20008d5c  00040434  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040434  2**0
                  CONTENTS, READONLY
 13 .debug_info   000739bc  00000000  00000000  00040464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000b239  00000000  00000000  000b3e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003ee0  00000000  00000000  000bf060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003b78  00000000  00000000  000c2f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00039dca  00000000  00000000  000c6ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004c14a  00000000  00000000  00100882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00115398  00000000  00000000  0014c9cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00261d64  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00012834  00000000  00000000  00261db8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  002745ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  002746b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000434 	.word	0x20000434
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801ff68 	.word	0x0801ff68

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000438 	.word	0x20000438
 80001ec:	0801ff68 	.word	0x0801ff68

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9ef 	b.w	80010c8 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a4 	b.w	80010c8 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	468c      	mov	ip, r1
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8083 	bne.w	8000f1a <__udivmoddi4+0x116>
 8000e14:	428a      	cmp	r2, r1
 8000e16:	4617      	mov	r7, r2
 8000e18:	d947      	bls.n	8000eaa <__udivmoddi4+0xa6>
 8000e1a:	fab2 f282 	clz	r2, r2
 8000e1e:	b142      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e20:	f1c2 0020 	rsb	r0, r2, #32
 8000e24:	fa24 f000 	lsr.w	r0, r4, r0
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	4097      	lsls	r7, r2
 8000e2c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e30:	4094      	lsls	r4, r2
 8000e32:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e36:	0c23      	lsrs	r3, r4, #16
 8000e38:	fbbc f6f8 	udiv	r6, ip, r8
 8000e3c:	fa1f fe87 	uxth.w	lr, r7
 8000e40:	fb08 c116 	mls	r1, r8, r6, ip
 8000e44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e48:	fb06 f10e 	mul.w	r1, r6, lr
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x60>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e56:	f080 8119 	bcs.w	800108c <__udivmoddi4+0x288>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 8116 	bls.w	800108c <__udivmoddi4+0x288>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e78:	45a6      	cmp	lr, r4
 8000e7a:	d909      	bls.n	8000e90 <__udivmoddi4+0x8c>
 8000e7c:	193c      	adds	r4, r7, r4
 8000e7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e82:	f080 8105 	bcs.w	8001090 <__udivmoddi4+0x28c>
 8000e86:	45a6      	cmp	lr, r4
 8000e88:	f240 8102 	bls.w	8001090 <__udivmoddi4+0x28c>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	443c      	add	r4, r7
 8000e90:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e94:	eba4 040e 	sub.w	r4, r4, lr
 8000e98:	2600      	movs	r6, #0
 8000e9a:	b11d      	cbz	r5, 8000ea4 <__udivmoddi4+0xa0>
 8000e9c:	40d4      	lsrs	r4, r2
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	b902      	cbnz	r2, 8000eae <__udivmoddi4+0xaa>
 8000eac:	deff      	udf	#255	; 0xff
 8000eae:	fab2 f282 	clz	r2, r2
 8000eb2:	2a00      	cmp	r2, #0
 8000eb4:	d150      	bne.n	8000f58 <__udivmoddi4+0x154>
 8000eb6:	1bcb      	subs	r3, r1, r7
 8000eb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ebc:	fa1f f887 	uxth.w	r8, r7
 8000ec0:	2601      	movs	r6, #1
 8000ec2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ec6:	0c21      	lsrs	r1, r4, #16
 8000ec8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0xe4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0xe2>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	f200 80e9 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000ee6:	4684      	mov	ip, r0
 8000ee8:	1ac9      	subs	r1, r1, r3
 8000eea:	b2a3      	uxth	r3, r4
 8000eec:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ef8:	fb08 f800 	mul.w	r8, r8, r0
 8000efc:	45a0      	cmp	r8, r4
 8000efe:	d907      	bls.n	8000f10 <__udivmoddi4+0x10c>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f06:	d202      	bcs.n	8000f0e <__udivmoddi4+0x10a>
 8000f08:	45a0      	cmp	r8, r4
 8000f0a:	f200 80d9 	bhi.w	80010c0 <__udivmoddi4+0x2bc>
 8000f0e:	4618      	mov	r0, r3
 8000f10:	eba4 0408 	sub.w	r4, r4, r8
 8000f14:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f18:	e7bf      	b.n	8000e9a <__udivmoddi4+0x96>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d909      	bls.n	8000f32 <__udivmoddi4+0x12e>
 8000f1e:	2d00      	cmp	r5, #0
 8000f20:	f000 80b1 	beq.w	8001086 <__udivmoddi4+0x282>
 8000f24:	2600      	movs	r6, #0
 8000f26:	e9c5 0100 	strd	r0, r1, [r5]
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	4631      	mov	r1, r6
 8000f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f32:	fab3 f683 	clz	r6, r3
 8000f36:	2e00      	cmp	r6, #0
 8000f38:	d14a      	bne.n	8000fd0 <__udivmoddi4+0x1cc>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d302      	bcc.n	8000f44 <__udivmoddi4+0x140>
 8000f3e:	4282      	cmp	r2, r0
 8000f40:	f200 80b8 	bhi.w	80010b4 <__udivmoddi4+0x2b0>
 8000f44:	1a84      	subs	r4, r0, r2
 8000f46:	eb61 0103 	sbc.w	r1, r1, r3
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	468c      	mov	ip, r1
 8000f4e:	2d00      	cmp	r5, #0
 8000f50:	d0a8      	beq.n	8000ea4 <__udivmoddi4+0xa0>
 8000f52:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f56:	e7a5      	b.n	8000ea4 <__udivmoddi4+0xa0>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f60:	4097      	lsls	r7, r2
 8000f62:	fa01 f002 	lsl.w	r0, r1, r2
 8000f66:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6a:	40d9      	lsrs	r1, r3
 8000f6c:	4330      	orrs	r0, r6
 8000f6e:	0c03      	lsrs	r3, r0, #16
 8000f70:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f74:	fa1f f887 	uxth.w	r8, r7
 8000f78:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f80:	fb06 f108 	mul.w	r1, r6, r8
 8000f84:	4299      	cmp	r1, r3
 8000f86:	fa04 f402 	lsl.w	r4, r4, r2
 8000f8a:	d909      	bls.n	8000fa0 <__udivmoddi4+0x19c>
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f92:	f080 808d 	bcs.w	80010b0 <__udivmoddi4+0x2ac>
 8000f96:	4299      	cmp	r1, r3
 8000f98:	f240 808a 	bls.w	80010b0 <__udivmoddi4+0x2ac>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	443b      	add	r3, r7
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b281      	uxth	r1, r0
 8000fa4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fa8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb0:	fb00 f308 	mul.w	r3, r0, r8
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	d907      	bls.n	8000fc8 <__udivmoddi4+0x1c4>
 8000fb8:	1879      	adds	r1, r7, r1
 8000fba:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fbe:	d273      	bcs.n	80010a8 <__udivmoddi4+0x2a4>
 8000fc0:	428b      	cmp	r3, r1
 8000fc2:	d971      	bls.n	80010a8 <__udivmoddi4+0x2a4>
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	4439      	add	r1, r7
 8000fc8:	1acb      	subs	r3, r1, r3
 8000fca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fce:	e778      	b.n	8000ec2 <__udivmoddi4+0xbe>
 8000fd0:	f1c6 0c20 	rsb	ip, r6, #32
 8000fd4:	fa03 f406 	lsl.w	r4, r3, r6
 8000fd8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fdc:	431c      	orrs	r4, r3
 8000fde:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fe2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fe6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fea:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fee:	431f      	orrs	r7, r3
 8000ff0:	0c3b      	lsrs	r3, r7, #16
 8000ff2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff6:	fa1f f884 	uxth.w	r8, r4
 8000ffa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001002:	fb09 fa08 	mul.w	sl, r9, r8
 8001006:	458a      	cmp	sl, r1
 8001008:	fa02 f206 	lsl.w	r2, r2, r6
 800100c:	fa00 f306 	lsl.w	r3, r0, r6
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x220>
 8001012:	1861      	adds	r1, r4, r1
 8001014:	f109 30ff 	add.w	r0, r9, #4294967295
 8001018:	d248      	bcs.n	80010ac <__udivmoddi4+0x2a8>
 800101a:	458a      	cmp	sl, r1
 800101c:	d946      	bls.n	80010ac <__udivmoddi4+0x2a8>
 800101e:	f1a9 0902 	sub.w	r9, r9, #2
 8001022:	4421      	add	r1, r4
 8001024:	eba1 010a 	sub.w	r1, r1, sl
 8001028:	b2bf      	uxth	r7, r7
 800102a:	fbb1 f0fe 	udiv	r0, r1, lr
 800102e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001032:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001036:	fb00 f808 	mul.w	r8, r0, r8
 800103a:	45b8      	cmp	r8, r7
 800103c:	d907      	bls.n	800104e <__udivmoddi4+0x24a>
 800103e:	19e7      	adds	r7, r4, r7
 8001040:	f100 31ff 	add.w	r1, r0, #4294967295
 8001044:	d22e      	bcs.n	80010a4 <__udivmoddi4+0x2a0>
 8001046:	45b8      	cmp	r8, r7
 8001048:	d92c      	bls.n	80010a4 <__udivmoddi4+0x2a0>
 800104a:	3802      	subs	r0, #2
 800104c:	4427      	add	r7, r4
 800104e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001052:	eba7 0708 	sub.w	r7, r7, r8
 8001056:	fba0 8902 	umull	r8, r9, r0, r2
 800105a:	454f      	cmp	r7, r9
 800105c:	46c6      	mov	lr, r8
 800105e:	4649      	mov	r1, r9
 8001060:	d31a      	bcc.n	8001098 <__udivmoddi4+0x294>
 8001062:	d017      	beq.n	8001094 <__udivmoddi4+0x290>
 8001064:	b15d      	cbz	r5, 800107e <__udivmoddi4+0x27a>
 8001066:	ebb3 020e 	subs.w	r2, r3, lr
 800106a:	eb67 0701 	sbc.w	r7, r7, r1
 800106e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001072:	40f2      	lsrs	r2, r6
 8001074:	ea4c 0202 	orr.w	r2, ip, r2
 8001078:	40f7      	lsrs	r7, r6
 800107a:	e9c5 2700 	strd	r2, r7, [r5]
 800107e:	2600      	movs	r6, #0
 8001080:	4631      	mov	r1, r6
 8001082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e70b      	b.n	8000ea4 <__udivmoddi4+0xa0>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e9      	b.n	8000e64 <__udivmoddi4+0x60>
 8001090:	4618      	mov	r0, r3
 8001092:	e6fd      	b.n	8000e90 <__udivmoddi4+0x8c>
 8001094:	4543      	cmp	r3, r8
 8001096:	d2e5      	bcs.n	8001064 <__udivmoddi4+0x260>
 8001098:	ebb8 0e02 	subs.w	lr, r8, r2
 800109c:	eb69 0104 	sbc.w	r1, r9, r4
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7df      	b.n	8001064 <__udivmoddi4+0x260>
 80010a4:	4608      	mov	r0, r1
 80010a6:	e7d2      	b.n	800104e <__udivmoddi4+0x24a>
 80010a8:	4660      	mov	r0, ip
 80010aa:	e78d      	b.n	8000fc8 <__udivmoddi4+0x1c4>
 80010ac:	4681      	mov	r9, r0
 80010ae:	e7b9      	b.n	8001024 <__udivmoddi4+0x220>
 80010b0:	4666      	mov	r6, ip
 80010b2:	e775      	b.n	8000fa0 <__udivmoddi4+0x19c>
 80010b4:	4630      	mov	r0, r6
 80010b6:	e74a      	b.n	8000f4e <__udivmoddi4+0x14a>
 80010b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80010bc:	4439      	add	r1, r7
 80010be:	e713      	b.n	8000ee8 <__udivmoddi4+0xe4>
 80010c0:	3802      	subs	r0, #2
 80010c2:	443c      	add	r4, r7
 80010c4:	e724      	b.n	8000f10 <__udivmoddi4+0x10c>
 80010c6:	bf00      	nop

080010c8 <__aeabi_idiv0>:
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <println>:

#include <MRT_helpers.h>
#include <MRT_setup.h>
#include <tim.h>

void println(char* s){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff f895 	bl	8000204 <strlen>
 80010da:	4603      	mov	r3, r0
 80010dc:	b29a      	uxth	r2, r3
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4806      	ldr	r0, [pc, #24]	; (8001100 <println+0x34>)
 80010e6:	f00e faf8 	bl	800f6da <HAL_UART_Transmit>
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	2202      	movs	r2, #2
 80010f0:	4904      	ldr	r1, [pc, #16]	; (8001104 <println+0x38>)
 80010f2:	4803      	ldr	r0, [pc, #12]	; (8001100 <println+0x34>)
 80010f4:	f00e faf1 	bl	800f6da <HAL_UART_Transmit>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20006200 	.word	0x20006200
 8001104:	0801ff80 	.word	0x0801ff80

08001108 <print>:

void print(char* s){
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff f877 	bl	8000204 <strlen>
 8001116:	4603      	mov	r3, r0
 8001118:	b29a      	uxth	r2, r3
 800111a:	f04f 33ff 	mov.w	r3, #4294967295
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	4803      	ldr	r0, [pc, #12]	; (8001130 <print+0x28>)
 8001122:	f00e fada 	bl	800f6da <HAL_UART_Transmit>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20006200 	.word	0x20006200

08001134 <tone_freq>:

// buzz at particular frequency
void tone_freq(uint32_t duration, uint32_t repeats, uint32_t freq) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
	// TIM2 base frequency is 90 MHz, PSC = 90-1
	// can calculate required ARR value
	TIM2->ARR = 1000000 / freq;
 8001140:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001144:	491c      	ldr	r1, [pc, #112]	; (80011b8 <tone_freq+0x84>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	fbb1 f3f3 	udiv	r3, r1, r3
 800114c:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->EGR |= TIM_EGR_UG;
 800114e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6153      	str	r3, [r2, #20]

	for (uint32_t i = 0; i < repeats; i++) {
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
 8001162:	e01f      	b.n	80011a4 <tone_freq+0x70>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001164:	2108      	movs	r1, #8
 8001166:	4815      	ldr	r0, [pc, #84]	; (80011bc <tone_freq+0x88>)
 8001168:	f00d fad8 	bl	800e71c <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(POWER_ON_EXT_LED_GPIO_Port, POWER_ON_EXT_LED_Pin, SET);
 800116c:	2201      	movs	r2, #1
 800116e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001172:	4813      	ldr	r0, [pc, #76]	; (80011c0 <tone_freq+0x8c>)
 8001174:	f008 fe2c 	bl	8009dd0 <HAL_GPIO_WritePin>
		HAL_Delay(duration);
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	f008 f8bb 	bl	80092f4 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 800117e:	2108      	movs	r1, #8
 8001180:	480e      	ldr	r0, [pc, #56]	; (80011bc <tone_freq+0x88>)
 8001182:	f00d fb93 	bl	800e8ac <HAL_TIM_PWM_Stop>
		HAL_GPIO_WritePin(POWER_ON_EXT_LED_GPIO_Port, POWER_ON_EXT_LED_Pin, RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 7100 	mov.w	r1, #512	; 0x200
 800118c:	480c      	ldr	r0, [pc, #48]	; (80011c0 <tone_freq+0x8c>)
 800118e:	f008 fe1f 	bl	8009dd0 <HAL_GPIO_WritePin>
		if (repeats > 1)
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d902      	bls.n	800119e <tone_freq+0x6a>
			HAL_Delay(duration);
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	f008 f8ab 	bl	80092f4 <HAL_Delay>
	for (uint32_t i = 0; i < repeats; i++) {
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	3301      	adds	r3, #1
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d3db      	bcc.n	8001164 <tone_freq+0x30>
	}
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	000f4240 	.word	0x000f4240
 80011bc:	20006174 	.word	0x20006174
 80011c0:	40020400 	.word	0x40020400

080011c4 <buzz_success>:
void buzz_success(void) { tone_freq(BUZZ_SUCCESS_DURATION, BUZZ_SUCCESS_REPEATS, BUZZ_SUCCESS_FREQ); }
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	f240 4216 	movw	r2, #1046	; 0x416
 80011cc:	2102      	movs	r1, #2
 80011ce:	204b      	movs	r0, #75	; 0x4b
 80011d0:	f7ff ffb0 	bl	8001134 <tone_freq>
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <buzz_startup_success>:
void buzz_failure(void) { tone_freq(BUZZ_FAILURE_DURATION, BUZZ_FAILURE_REPEATS, BUZZ_FAILURE_FREQ); }
void buzz_startup_success(void) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 80011de:	2300      	movs	r3, #0
 80011e0:	71fb      	strb	r3, [r7, #7]
 80011e2:	e008      	b.n	80011f6 <buzz_startup_success+0x1e>
		buzz_success();
 80011e4:	f7ff ffee 	bl	80011c4 <buzz_success>
		HAL_Delay(1000);
 80011e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011ec:	f008 f882 	bl	80092f4 <HAL_Delay>
	for (uint8_t i = 0; i < 3; i++) {
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	3301      	adds	r3, #1
 80011f4:	71fb      	strb	r3, [r7, #7]
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d9f3      	bls.n	80011e4 <buzz_startup_success+0xc>
	}
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <MRT_Init>:


//**************************************************//
//PUBLIC FUNCTIONS

void MRT_Init(void){
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	print((char*) "\r\n\r\n/********MRT Init********/\r\n");
 800120c:	480a      	ldr	r0, [pc, #40]	; (8001238 <MRT_Init+0x30>)
 800120e:	f7ff ff7b 	bl	8001108 <print>
	print((char*) "IWDG Init...");
	MX_IWDG_Init();
	print((char*) "OK\r\n");
	#endif

	MRT_Reinitialize_Peripherals();
 8001212:	f000 f91f 	bl	8001454 <MRT_Reinitialize_Peripherals>
	MRT_external_flash_Init();
 8001216:	f001 fd15 	bl	8002c44 <MRT_external_flash_Init>
	MRT_reset_info();
 800121a:	f000 f823 	bl	8001264 <MRT_reset_info>

	//RTC
	HAL_IWDG_Refresh(&hiwdg);
	MRT_rtc_Init();
 800121e:	f000 ff33 	bl	8002088 <MRT_rtc_Init>
	#if MEMORY_THREAD

		//SD card
		#if SD_CARD_
			HAL_IWDG_Refresh(&hiwdg);
			sd_init_dynamic_filename("FC", "", filename);
 8001222:	4a06      	ldr	r2, [pc, #24]	; (800123c <MRT_Init+0x34>)
 8001224:	4906      	ldr	r1, [pc, #24]	; (8001240 <MRT_Init+0x38>)
 8001226:	4807      	ldr	r0, [pc, #28]	; (8001244 <MRT_Init+0x3c>)
 8001228:	f001 fe7a 	bl	8002f20 <sd_init_dynamic_filename>
		  checkForI2CDevices(huart8,hi2c1);
		  checkForI2CDevices(huart8,hi2c2);
		  checkForI2CDevices(huart8,hi2c3);
		#endif

		MRT_i2c_sensors_Init();
 800122c:	f002 ff18 	bl	8004060 <MRT_i2c_sensors_Init>
	#endif


	//Telemetry
	#if TELEMETRY_THREAD
		MRT_TELEMETRY_Init();
 8001230:	f007 fffc 	bl	800922c <MRT_TELEMETRY_Init>
	#endif

	#if FORCED_EJECTION_STAGE
		  ejection_stage_flag = FORCED_STAGE;
	#endif
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	0801ff84 	.word	0x0801ff84
 800123c:	20005eec 	.word	0x20005eec
 8001240:	0801ffa8 	.word	0x0801ffa8
 8001244:	0801ffac 	.word	0x0801ffac

08001248 <MRT_Deinit>:




void MRT_Deinit(void){
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	print((char*) "\r\n\r\n/********MRT Deinit********/\r\n");
 800124c:	4804      	ldr	r0, [pc, #16]	; (8001260 <MRT_Deinit+0x18>)
 800124e:	f7ff ff5b 	bl	8001108 <print>

	MRT_Reinitialize_Peripherals();
 8001252:	f000 f8ff 	bl	8001454 <MRT_Reinitialize_Peripherals>
	#endif


	//Sensors
	#if SENSORS_THREAD
		MRT_i2c_sensors_Deinit();
 8001256:	f002 ff33 	bl	80040c0 <MRT_i2c_sensors_Deinit>
	#endif

    //TODO
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	0801ffb0 	.word	0x0801ffb0

08001264 <MRT_reset_info>:

//**************************************************//
//PRIVATE FUNCTIONS


void MRT_reset_info(void){
 8001264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001266:	b0a7      	sub	sp, #156	; 0x9c
 8001268:	af04      	add	r7, sp, #16

	  char buffer[100];
	  sprintf(buffer,"Reset: %i,  WU: %i,  IWDG: %i\r\nPrevious RTC time: %i:%i:%i\r\n",reset_flag, wu_flag, iwdg_flag, prev_hours, prev_min, prev_sec);
 800126a:	4b62      	ldr	r3, [pc, #392]	; (80013f4 <MRT_reset_info+0x190>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	461d      	mov	r5, r3
 8001270:	4b61      	ldr	r3, [pc, #388]	; (80013f8 <MRT_reset_info+0x194>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	461e      	mov	r6, r3
 8001276:	4b61      	ldr	r3, [pc, #388]	; (80013fc <MRT_reset_info+0x198>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	4b60      	ldr	r3, [pc, #384]	; (8001400 <MRT_reset_info+0x19c>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	4619      	mov	r1, r3
 8001282:	4b60      	ldr	r3, [pc, #384]	; (8001404 <MRT_reset_info+0x1a0>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	461c      	mov	r4, r3
 8001288:	4b5f      	ldr	r3, [pc, #380]	; (8001408 <MRT_reset_info+0x1a4>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	f107 0020 	add.w	r0, r7, #32
 8001290:	9303      	str	r3, [sp, #12]
 8001292:	9402      	str	r4, [sp, #8]
 8001294:	9101      	str	r1, [sp, #4]
 8001296:	9200      	str	r2, [sp, #0]
 8001298:	4633      	mov	r3, r6
 800129a:	462a      	mov	r2, r5
 800129c:	495b      	ldr	r1, [pc, #364]	; (800140c <MRT_reset_info+0x1a8>)
 800129e:	f01a fa5d 	bl	801b75c <siprintf>
	  print(buffer);
 80012a2:	f107 0320 	add.w	r3, r7, #32
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ff2e 	bl	8001108 <print>

	  //Check if IWDG is being deactivated
	  if (iwdg_flag==1){
 80012ac:	4b53      	ldr	r3, [pc, #332]	; (80013fc <MRT_reset_info+0x198>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d11a      	bne.n	80012ea <MRT_reset_info+0x86>
		  print((char*) "Deactivating IWDG\r\n");
 80012b4:	4856      	ldr	r0, [pc, #344]	; (8001410 <MRT_reset_info+0x1ac>)
 80012b6:	f7ff ff27 	bl	8001108 <print>

		  iwdg_flag = 0; //Flip flag
 80012ba:	4b50      	ldr	r3, [pc, #320]	; (80013fc <MRT_reset_info+0x198>)
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
		  flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 80012c0:	4b4e      	ldr	r3, [pc, #312]	; (80013fc <MRT_reset_info+0x198>)
 80012c2:	781a      	ldrb	r2, [r3, #0]
 80012c4:	4b53      	ldr	r3, [pc, #332]	; (8001414 <MRT_reset_info+0x1b0>)
 80012c6:	709a      	strb	r2, [r3, #2]
		  W25qxx_EraseSector(1);
 80012c8:	2001      	movs	r0, #1
 80012ca:	f002 fa91 	bl	80037f0 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80012ce:	2305      	movs	r3, #5
 80012d0:	2200      	movs	r2, #0
 80012d2:	2101      	movs	r1, #1
 80012d4:	484f      	ldr	r0, [pc, #316]	; (8001414 <MRT_reset_info+0x1b0>)
 80012d6:	f002 fbd5 	bl	8003a84 <W25qxx_WriteSector>

		  HAL_Delay(1000);
 80012da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012de:	f008 f809 	bl	80092f4 <HAL_Delay>

		  //Go to sleep
		  MRT_StandByMode(SLEEP_TIME);
 80012e2:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 80012e6:	f000 ff97 	bl	8002218 <MRT_StandByMode>
	  }


	  //Check if we are after waking up (and at which wake up we are at)
	  if (wu_flag>0){
 80012ea:	4b43      	ldr	r3, [pc, #268]	; (80013f8 <MRT_reset_info+0x194>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d02b      	beq.n	800134a <MRT_reset_info+0xe6>
		  char buf[30];
		  sprintf(buf, "FC wake up %i\r\n", wu_flag);
 80012f2:	4b41      	ldr	r3, [pc, #260]	; (80013f8 <MRT_reset_info+0x194>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	463b      	mov	r3, r7
 80012fa:	4947      	ldr	r1, [pc, #284]	; (8001418 <MRT_reset_info+0x1b4>)
 80012fc:	4618      	mov	r0, r3
 80012fe:	f01a fa2d 	bl	801b75c <siprintf>
		  print(buf);
 8001302:	463b      	mov	r3, r7
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff feff 	bl	8001108 <print>

		  print((char*) "Resetting RTC time\r\n");
 800130a:	4844      	ldr	r0, [pc, #272]	; (800141c <MRT_reset_info+0x1b8>)
 800130c:	f7ff fefc 	bl	8001108 <print>

		  //Clear RTC time (last recorded)
		  W25qxx_EraseSector(2);
 8001310:	2002      	movs	r0, #2
 8001312:	f002 fa6d 	bl	80037f0 <W25qxx_EraseSector>
		  W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, 2, RTC_TIME_OFFSET, 3);
 8001316:	2303      	movs	r3, #3
 8001318:	2200      	movs	r2, #0
 800131a:	2102      	movs	r1, #2
 800131c:	4840      	ldr	r0, [pc, #256]	; (8001420 <MRT_reset_info+0x1bc>)
 800131e:	f002 fbb1 	bl	8003a84 <W25qxx_WriteSector>

		  //Update variables (to 0)
		  for (int i = 0; i < 3; i++){
 8001322:	2300      	movs	r3, #0
 8001324:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001328:	e00b      	b.n	8001342 <MRT_reset_info+0xde>
			  *flash_time[i] = 0x0;
 800132a:	4a3e      	ldr	r2, [pc, #248]	; (8001424 <MRT_reset_info+0x1c0>)
 800132c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 3; i++){
 8001338:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800133c:	3301      	adds	r3, #1
 800133e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001342:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001346:	2b02      	cmp	r3, #2
 8001348:	ddef      	ble.n	800132a <MRT_reset_info+0xc6>

	  }


	  //Check if we start from the beginning
	  if (reset_flag==0){
 800134a:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <MRT_reset_info+0x190>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d112      	bne.n	8001378 <MRT_reset_info+0x114>
		  print((char*) "FC restarted\r\n");
 8001352:	4835      	ldr	r0, [pc, #212]	; (8001428 <MRT_reset_info+0x1c4>)
 8001354:	f7ff fed8 	bl	8001108 <print>

		  reset_flag = 1; //Flip flag
 8001358:	4b26      	ldr	r3, [pc, #152]	; (80013f4 <MRT_reset_info+0x190>)
 800135a:	2201      	movs	r2, #1
 800135c:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
	      flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 800135e:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <MRT_reset_info+0x190>)
 8001360:	781a      	ldrb	r2, [r3, #0]
 8001362:	4b2c      	ldr	r3, [pc, #176]	; (8001414 <MRT_reset_info+0x1b0>)
 8001364:	701a      	strb	r2, [r3, #0]
		  W25qxx_EraseSector(1);
 8001366:	2001      	movs	r0, #1
 8001368:	f002 fa42 	bl	80037f0 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 800136c:	2305      	movs	r3, #5
 800136e:	2200      	movs	r2, #0
 8001370:	2101      	movs	r1, #1
 8001372:	4828      	ldr	r0, [pc, #160]	; (8001414 <MRT_reset_info+0x1b0>)
 8001374:	f002 fb86 	bl	8003a84 <W25qxx_WriteSector>
	  }


	  //Check if before or after apogee
	  if (apogee_flag == 0){
 8001378:	4b2c      	ldr	r3, [pc, #176]	; (800142c <MRT_reset_info+0x1c8>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d103      	bne.n	8001388 <MRT_reset_info+0x124>
		  print((char*) "Pre-apogee\r\n");
 8001380:	482b      	ldr	r0, [pc, #172]	; (8001430 <MRT_reset_info+0x1cc>)
 8001382:	f7ff fec1 	bl	8001108 <print>
 8001386:	e006      	b.n	8001396 <MRT_reset_info+0x132>
	  }
	  else if(apogee_flag==1){
 8001388:	4b28      	ldr	r3, [pc, #160]	; (800142c <MRT_reset_info+0x1c8>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d102      	bne.n	8001396 <MRT_reset_info+0x132>
		  print((char*) "Post-apogee\r\n");
 8001390:	4828      	ldr	r0, [pc, #160]	; (8001434 <MRT_reset_info+0x1d0>)
 8001392:	f7ff feb9 	bl	8001108 <print>
	  }


	  //Check ejection stage
	  print((char*)"Ejection Stage: ");
 8001396:	4828      	ldr	r0, [pc, #160]	; (8001438 <MRT_reset_info+0x1d4>)
 8001398:	f7ff feb6 	bl	8001108 <print>
	  if (ejection_state_flag==0){
 800139c:	4b27      	ldr	r3, [pc, #156]	; (800143c <MRT_reset_info+0x1d8>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d103      	bne.n	80013ac <MRT_reset_info+0x148>
		  print((char*)"Pad\r\n");
 80013a4:	4826      	ldr	r0, [pc, #152]	; (8001440 <MRT_reset_info+0x1dc>)
 80013a6:	f7ff feaf 	bl	8001108 <print>
		  print((char*)"Main descent\r\n");
	  }
	  else if(ejection_state_flag==4){
		  print((char*)"Landed\r\n");
	  }
}
 80013aa:	e01e      	b.n	80013ea <MRT_reset_info+0x186>
	  else if(ejection_state_flag==1){
 80013ac:	4b23      	ldr	r3, [pc, #140]	; (800143c <MRT_reset_info+0x1d8>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d103      	bne.n	80013bc <MRT_reset_info+0x158>
		  print((char*)"Boost\r\n");
 80013b4:	4823      	ldr	r0, [pc, #140]	; (8001444 <MRT_reset_info+0x1e0>)
 80013b6:	f7ff fea7 	bl	8001108 <print>
}
 80013ba:	e016      	b.n	80013ea <MRT_reset_info+0x186>
	  else if(ejection_state_flag==2){
 80013bc:	4b1f      	ldr	r3, [pc, #124]	; (800143c <MRT_reset_info+0x1d8>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d103      	bne.n	80013cc <MRT_reset_info+0x168>
		  print((char*)"Drogue descent\r\n");
 80013c4:	4820      	ldr	r0, [pc, #128]	; (8001448 <MRT_reset_info+0x1e4>)
 80013c6:	f7ff fe9f 	bl	8001108 <print>
}
 80013ca:	e00e      	b.n	80013ea <MRT_reset_info+0x186>
	  else if(ejection_state_flag==3){
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <MRT_reset_info+0x1d8>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b03      	cmp	r3, #3
 80013d2:	d103      	bne.n	80013dc <MRT_reset_info+0x178>
		  print((char*)"Main descent\r\n");
 80013d4:	481d      	ldr	r0, [pc, #116]	; (800144c <MRT_reset_info+0x1e8>)
 80013d6:	f7ff fe97 	bl	8001108 <print>
}
 80013da:	e006      	b.n	80013ea <MRT_reset_info+0x186>
	  else if(ejection_state_flag==4){
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <MRT_reset_info+0x1d8>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b04      	cmp	r3, #4
 80013e2:	d102      	bne.n	80013ea <MRT_reset_info+0x186>
		  print((char*)"Landed\r\n");
 80013e4:	481a      	ldr	r0, [pc, #104]	; (8001450 <MRT_reset_info+0x1ec>)
 80013e6:	f7ff fe8f 	bl	8001108 <print>
}
 80013ea:	bf00      	nop
 80013ec:	378c      	adds	r7, #140	; 0x8c
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f2:	bf00      	nop
 80013f4:	2000047c 	.word	0x2000047c
 80013f8:	2000047d 	.word	0x2000047d
 80013fc:	2000047e 	.word	0x2000047e
 8001400:	20000481 	.word	0x20000481
 8001404:	20000482 	.word	0x20000482
 8001408:	20000483 	.word	0x20000483
 800140c:	0801ffd4 	.word	0x0801ffd4
 8001410:	08020014 	.word	0x08020014
 8001414:	20006290 	.word	0x20006290
 8001418:	08020028 	.word	0x08020028
 800141c:	08020038 	.word	0x08020038
 8001420:	20000484 	.word	0x20000484
 8001424:	20000054 	.word	0x20000054
 8001428:	08020050 	.word	0x08020050
 800142c:	2000047f 	.word	0x2000047f
 8001430:	08020060 	.word	0x08020060
 8001434:	08020070 	.word	0x08020070
 8001438:	08020080 	.word	0x08020080
 800143c:	20000480 	.word	0x20000480
 8001440:	08020094 	.word	0x08020094
 8001444:	0802009c 	.word	0x0802009c
 8001448:	080200a4 	.word	0x080200a4
 800144c:	080200b8 	.word	0x080200b8
 8001450:	080200c8 	.word	0x080200c8

08001454 <MRT_Reinitialize_Peripherals>:


void MRT_Reinitialize_Peripherals(void){
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	  /*
	   * Reinitialize all peripherals
	   */

	  print((char*)"Reinitializing Peripherals...");
 8001458:	482f      	ldr	r0, [pc, #188]	; (8001518 <MRT_Reinitialize_Peripherals+0xc4>)
 800145a:	f7ff fe55 	bl	8001108 <print>

	  // reset LEDs
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	2102      	movs	r1, #2
 8001462:	482e      	ldr	r0, [pc, #184]	; (800151c <MRT_Reinitialize_Peripherals+0xc8>)
 8001464:	f008 fcb4 	bl	8009dd0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001468:	2200      	movs	r2, #0
 800146a:	2104      	movs	r1, #4
 800146c:	482b      	ldr	r0, [pc, #172]	; (800151c <MRT_Reinitialize_Peripherals+0xc8>)
 800146e:	f008 fcaf 	bl	8009dd0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8001472:	2200      	movs	r2, #0
 8001474:	2108      	movs	r1, #8
 8001476:	4829      	ldr	r0, [pc, #164]	; (800151c <MRT_Reinitialize_Peripherals+0xc8>)
 8001478:	f008 fcaa 	bl	8009dd0 <HAL_GPIO_WritePin>

	  // reset recovery pyro pins
	  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 800147c:	2201      	movs	r2, #1
 800147e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001482:	4827      	ldr	r0, [pc, #156]	; (8001520 <MRT_Reinitialize_Peripherals+0xcc>)
 8001484:	f008 fca4 	bl	8009dd0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 8001488:	2200      	movs	r2, #0
 800148a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800148e:	4824      	ldr	r0, [pc, #144]	; (8001520 <MRT_Reinitialize_Peripherals+0xcc>)
 8001490:	f008 fc9e 	bl	8009dd0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 8001494:	2200      	movs	r2, #0
 8001496:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800149a:	4821      	ldr	r0, [pc, #132]	; (8001520 <MRT_Reinitialize_Peripherals+0xcc>)
 800149c:	f008 fc98 	bl	8009dd0 <HAL_GPIO_WritePin>

	  // reset prop pyro pins
	  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET); //PG1 ARMING_PROP
 80014a0:	2201      	movs	r2, #1
 80014a2:	2102      	movs	r1, #2
 80014a4:	481e      	ldr	r0, [pc, #120]	; (8001520 <MRT_Reinitialize_Peripherals+0xcc>)
 80014a6:	f008 fc93 	bl	8009dd0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 80014aa:	2200      	movs	r2, #0
 80014ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014b0:	481c      	ldr	r0, [pc, #112]	; (8001524 <MRT_Reinitialize_Peripherals+0xd0>)
 80014b2:	f008 fc8d 	bl	8009dd0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 80014b6:	2200      	movs	r2, #0
 80014b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014bc:	4819      	ldr	r0, [pc, #100]	; (8001524 <MRT_Reinitialize_Peripherals+0xd0>)
 80014be:	f008 fc87 	bl	8009dd0 <HAL_GPIO_WritePin>

	  // reset 12 V buck converter enable pin (disable converter)
	  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 80014c2:	2200      	movs	r2, #0
 80014c4:	2104      	movs	r1, #4
 80014c6:	4818      	ldr	r0, [pc, #96]	; (8001528 <MRT_Reinitialize_Peripherals+0xd4>)
 80014c8:	f008 fc82 	bl	8009dd0 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
	  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


	  // reset payload EN signal
	  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 80014cc:	2200      	movs	r2, #0
 80014ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014d2:	4815      	ldr	r0, [pc, #84]	; (8001528 <MRT_Reinitialize_Peripherals+0xd4>)
 80014d4:	f008 fc7c 	bl	8009dd0 <HAL_GPIO_WritePin>

	  // set CS pin for thermocouple chip high
	  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

	  // set power off for VR
	  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 80014d8:	2200      	movs	r2, #0
 80014da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014de:	4810      	ldr	r0, [pc, #64]	; (8001520 <MRT_Reinitialize_Peripherals+0xcc>)
 80014e0:	f008 fc76 	bl	8009dd0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 80014e4:	2200      	movs	r2, #0
 80014e6:	2180      	movs	r1, #128	; 0x80
 80014e8:	4810      	ldr	r0, [pc, #64]	; (800152c <MRT_Reinitialize_Peripherals+0xd8>)
 80014ea:	f008 fc71 	bl	8009dd0 <HAL_GPIO_WritePin>

	  // FLASH set CS, WP and IO3 pins high
	  HAL_GPIO_WritePin(OUT_FLASH_CS_GPIO_Port, OUT_FLASH_CS_Pin, SET);
 80014ee:	2201      	movs	r2, #1
 80014f0:	2140      	movs	r1, #64	; 0x40
 80014f2:	480e      	ldr	r0, [pc, #56]	; (800152c <MRT_Reinitialize_Peripherals+0xd8>)
 80014f4:	f008 fc6c 	bl	8009dd0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_WP_GPIO_Port, OUT_FLASH_WP_Pin, SET);
 80014f8:	2201      	movs	r2, #1
 80014fa:	2120      	movs	r1, #32
 80014fc:	480b      	ldr	r0, [pc, #44]	; (800152c <MRT_Reinitialize_Peripherals+0xd8>)
 80014fe:	f008 fc67 	bl	8009dd0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_IO3_GPIO_Port, OUT_FLASH_IO3_Pin, SET);
 8001502:	2201      	movs	r2, #1
 8001504:	2110      	movs	r1, #16
 8001506:	4809      	ldr	r0, [pc, #36]	; (800152c <MRT_Reinitialize_Peripherals+0xd8>)
 8001508:	f008 fc62 	bl	8009dd0 <HAL_GPIO_WritePin>

	  print((char*)"OK\r\n");
 800150c:	4808      	ldr	r0, [pc, #32]	; (8001530 <MRT_Reinitialize_Peripherals+0xdc>)
 800150e:	f7ff fdfb 	bl	8001108 <print>
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	080200d4 	.word	0x080200d4
 800151c:	40020800 	.word	0x40020800
 8001520:	40021800 	.word	0x40021800
 8001524:	40021400 	.word	0x40021400
 8001528:	40021000 	.word	0x40021000
 800152c:	40020c00 	.word	0x40020c00
 8001530:	080200f4 	.word	0x080200f4

08001534 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800153a:	463b      	mov	r3, r7
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001546:	4b21      	ldr	r3, [pc, #132]	; (80015cc <MX_ADC1_Init+0x98>)
 8001548:	4a21      	ldr	r2, [pc, #132]	; (80015d0 <MX_ADC1_Init+0x9c>)
 800154a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800154c:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <MX_ADC1_Init+0x98>)
 800154e:	2200      	movs	r2, #0
 8001550:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001552:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <MX_ADC1_Init+0x98>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001558:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <MX_ADC1_Init+0x98>)
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800155e:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <MX_ADC1_Init+0x98>)
 8001560:	2200      	movs	r2, #0
 8001562:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001564:	4b19      	ldr	r3, [pc, #100]	; (80015cc <MX_ADC1_Init+0x98>)
 8001566:	2200      	movs	r2, #0
 8001568:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800156c:	4b17      	ldr	r3, [pc, #92]	; (80015cc <MX_ADC1_Init+0x98>)
 800156e:	2200      	movs	r2, #0
 8001570:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001572:	4b16      	ldr	r3, [pc, #88]	; (80015cc <MX_ADC1_Init+0x98>)
 8001574:	4a17      	ldr	r2, [pc, #92]	; (80015d4 <MX_ADC1_Init+0xa0>)
 8001576:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001578:	4b14      	ldr	r3, [pc, #80]	; (80015cc <MX_ADC1_Init+0x98>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800157e:	4b13      	ldr	r3, [pc, #76]	; (80015cc <MX_ADC1_Init+0x98>)
 8001580:	2201      	movs	r2, #1
 8001582:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <MX_ADC1_Init+0x98>)
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800158c:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <MX_ADC1_Init+0x98>)
 800158e:	2201      	movs	r2, #1
 8001590:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001592:	480e      	ldr	r0, [pc, #56]	; (80015cc <MX_ADC1_Init+0x98>)
 8001594:	f007 fed2 	bl	800933c <HAL_ADC_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800159e:	f000 fcaf 	bl	8001f00 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80015a2:	2306      	movs	r3, #6
 80015a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015a6:	2301      	movs	r3, #1
 80015a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ae:	463b      	mov	r3, r7
 80015b0:	4619      	mov	r1, r3
 80015b2:	4806      	ldr	r0, [pc, #24]	; (80015cc <MX_ADC1_Init+0x98>)
 80015b4:	f007 ff06 	bl	80093c4 <HAL_ADC_ConfigChannel>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80015be:	f000 fc9f 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20005efc 	.word	0x20005efc
 80015d0:	40012000 	.word	0x40012000
 80015d4:	0f000001 	.word	0x0f000001

080015d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a17      	ldr	r2, [pc, #92]	; (8001654 <HAL_ADC_MspInit+0x7c>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d127      	bne.n	800164a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	4b16      	ldr	r3, [pc, #88]	; (8001658 <HAL_ADC_MspInit+0x80>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	4a15      	ldr	r2, [pc, #84]	; (8001658 <HAL_ADC_MspInit+0x80>)
 8001604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001608:	6453      	str	r3, [r2, #68]	; 0x44
 800160a:	4b13      	ldr	r3, [pc, #76]	; (8001658 <HAL_ADC_MspInit+0x80>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <HAL_ADC_MspInit+0x80>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <HAL_ADC_MspInit+0x80>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <HAL_ADC_MspInit+0x80>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 8001632:	2340      	movs	r3, #64	; 0x40
 8001634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001636:	2303      	movs	r3, #3
 8001638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	4619      	mov	r1, r3
 8001644:	4805      	ldr	r0, [pc, #20]	; (800165c <HAL_ADC_MspInit+0x84>)
 8001646:	f008 f9ff 	bl	8009a48 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800164a:	bf00      	nop
 800164c:	3728      	adds	r7, #40	; 0x28
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40012000 	.word	0x40012000
 8001658:	40023800 	.word	0x40023800
 800165c:	40020000 	.word	0x40020000

08001660 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

	println("FREERTOS Init");
 8001664:	4821      	ldr	r0, [pc, #132]	; (80016ec <MX_FREERTOS_Init+0x8c>)
 8001666:	f7ff fd31 	bl	80010cc <println>
	print("\tInitializing the kernel...");
 800166a:	4821      	ldr	r0, [pc, #132]	; (80016f0 <MX_FREERTOS_Init+0x90>)
 800166c:	f7ff fd4c 	bl	8001108 <print>
	osKernelInitialize();
 8001670:	f014 fad4 	bl	8015c1c <osKernelInitialize>
	println("OK");
 8001674:	481f      	ldr	r0, [pc, #124]	; (80016f4 <MX_FREERTOS_Init+0x94>)
 8001676:	f7ff fd29 	bl	80010cc <println>

	print("\tCreating the threads...");
 800167a:	481f      	ldr	r0, [pc, #124]	; (80016f8 <MX_FREERTOS_Init+0x98>)
 800167c:	f7ff fd44 	bl	8001108 <print>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Memory0 */
  Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 8001680:	4a1e      	ldr	r2, [pc, #120]	; (80016fc <MX_FREERTOS_Init+0x9c>)
 8001682:	2100      	movs	r1, #0
 8001684:	481e      	ldr	r0, [pc, #120]	; (8001700 <MX_FREERTOS_Init+0xa0>)
 8001686:	f014 fb13 	bl	8015cb0 <osThreadNew>
 800168a:	4603      	mov	r3, r0
 800168c:	4a1d      	ldr	r2, [pc, #116]	; (8001704 <MX_FREERTOS_Init+0xa4>)
 800168e:	6013      	str	r3, [r2, #0]

  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 8001690:	4a1d      	ldr	r2, [pc, #116]	; (8001708 <MX_FREERTOS_Init+0xa8>)
 8001692:	2100      	movs	r1, #0
 8001694:	481d      	ldr	r0, [pc, #116]	; (800170c <MX_FREERTOS_Init+0xac>)
 8001696:	f014 fb0b 	bl	8015cb0 <osThreadNew>
 800169a:	4603      	mov	r3, r0
 800169c:	4a1c      	ldr	r2, [pc, #112]	; (8001710 <MX_FREERTOS_Init+0xb0>)
 800169e:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 80016a0:	4a1c      	ldr	r2, [pc, #112]	; (8001714 <MX_FREERTOS_Init+0xb4>)
 80016a2:	2100      	movs	r1, #0
 80016a4:	481c      	ldr	r0, [pc, #112]	; (8001718 <MX_FREERTOS_Init+0xb8>)
 80016a6:	f014 fb03 	bl	8015cb0 <osThreadNew>
 80016aa:	4603      	mov	r3, r0
 80016ac:	4a1b      	ldr	r2, [pc, #108]	; (800171c <MX_FREERTOS_Init+0xbc>)
 80016ae:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 80016b0:	4a1b      	ldr	r2, [pc, #108]	; (8001720 <MX_FREERTOS_Init+0xc0>)
 80016b2:	2100      	movs	r1, #0
 80016b4:	481b      	ldr	r0, [pc, #108]	; (8001724 <MX_FREERTOS_Init+0xc4>)
 80016b6:	f014 fafb 	bl	8015cb0 <osThreadNew>
 80016ba:	4603      	mov	r3, r0
 80016bc:	4a1a      	ldr	r2, [pc, #104]	; (8001728 <MX_FREERTOS_Init+0xc8>)
 80016be:	6013      	str	r3, [r2, #0]

  /* creation of WatchDog */
  WatchDogHandle = osThreadNew(StartWatchDog, NULL, &WatchDog_attributes);
 80016c0:	4a1a      	ldr	r2, [pc, #104]	; (800172c <MX_FREERTOS_Init+0xcc>)
 80016c2:	2100      	movs	r1, #0
 80016c4:	481a      	ldr	r0, [pc, #104]	; (8001730 <MX_FREERTOS_Init+0xd0>)
 80016c6:	f014 faf3 	bl	8015cb0 <osThreadNew>
 80016ca:	4603      	mov	r3, r0
 80016cc:	4a19      	ldr	r2, [pc, #100]	; (8001734 <MX_FREERTOS_Init+0xd4>)
 80016ce:	6013      	str	r3, [r2, #0]

  /* creation of Propulsion4 */
  Propulsion4Handle = osThreadNew(StartPropulsion4, NULL, &Propulsion4_attributes);
 80016d0:	4a19      	ldr	r2, [pc, #100]	; (8001738 <MX_FREERTOS_Init+0xd8>)
 80016d2:	2100      	movs	r1, #0
 80016d4:	4819      	ldr	r0, [pc, #100]	; (800173c <MX_FREERTOS_Init+0xdc>)
 80016d6:	f014 faeb 	bl	8015cb0 <osThreadNew>
 80016da:	4603      	mov	r3, r0
 80016dc:	4a18      	ldr	r2, [pc, #96]	; (8001740 <MX_FREERTOS_Init+0xe0>)
 80016de:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  println("OK");
 80016e0:	4804      	ldr	r0, [pc, #16]	; (80016f4 <MX_FREERTOS_Init+0x94>)
 80016e2:	f7ff fcf3 	bl	80010cc <println>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	08020140 	.word	0x08020140
 80016f0:	08020150 	.word	0x08020150
 80016f4:	0802016c 	.word	0x0802016c
 80016f8:	08020170 	.word	0x08020170
 80016fc:	08021e10 	.word	0x08021e10
 8001700:	08001745 	.word	0x08001745
 8001704:	20005f48 	.word	0x20005f48
 8001708:	08021e34 	.word	0x08021e34
 800170c:	08001759 	.word	0x08001759
 8001710:	20005f4c 	.word	0x20005f4c
 8001714:	08021e58 	.word	0x08021e58
 8001718:	08001769 	.word	0x08001769
 800171c:	20005f50 	.word	0x20005f50
 8001720:	08021e7c 	.word	0x08021e7c
 8001724:	08001779 	.word	0x08001779
 8001728:	20005f54 	.word	0x20005f54
 800172c:	08021ea0 	.word	0x08021ea0
 8001730:	08001789 	.word	0x08001789
 8001734:	20005f44 	.word	0x20005f44
 8001738:	08021ec4 	.word	0x08021ec4
 800173c:	08001799 	.word	0x08001799
 8001740:	20005f58 	.word	0x20005f58

08001744 <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800174c:	f017 fd46 	bl	80191dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartMemory0 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001750:	2001      	movs	r0, #1
 8001752:	f014 fb3f 	bl	8015dd4 <osDelay>
 8001756:	e7fb      	b.n	8001750 <StartMemory0+0xc>

08001758 <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEjection1 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001760:	2001      	movs	r0, #1
 8001762:	f014 fb37 	bl	8015dd4 <osDelay>
 8001766:	e7fb      	b.n	8001760 <StartEjection1+0x8>

08001768 <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemetry2 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001770:	2001      	movs	r0, #1
 8001772:	f014 fb2f 	bl	8015dd4 <osDelay>
 8001776:	e7fb      	b.n	8001770 <StartTelemetry2+0x8>

08001778 <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001780:	2001      	movs	r0, #1
 8001782:	f014 fb27 	bl	8015dd4 <osDelay>
 8001786:	e7fb      	b.n	8001780 <StartSensors3+0x8>

08001788 <StartWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchDog */
void StartWatchDog(void *argument)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	HAL_IWDG_Refresh(&hiwdg);
    osDelay(1);
 8001790:	2001      	movs	r0, #1
 8001792:	f014 fb1f 	bl	8015dd4 <osDelay>
	HAL_IWDG_Refresh(&hiwdg);
 8001796:	e7fb      	b.n	8001790 <StartWatchDog+0x8>

08001798 <StartPropulsion4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPropulsion4 */
void StartPropulsion4(void *argument)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPropulsion4 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80017a0:	2001      	movs	r0, #1
 80017a2:	f014 fb17 	bl	8015dd4 <osDelay>
 80017a6:	e7fb      	b.n	80017a0 <StartPropulsion4+0x8>

080017a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08e      	sub	sp, #56	; 0x38
 80017ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
 80017bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	623b      	str	r3, [r7, #32]
 80017c2:	4bb5      	ldr	r3, [pc, #724]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4ab4      	ldr	r2, [pc, #720]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 80017c8:	f043 0310 	orr.w	r3, r3, #16
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4bb2      	ldr	r3, [pc, #712]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0310 	and.w	r3, r3, #16
 80017d6:	623b      	str	r3, [r7, #32]
 80017d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
 80017de:	4bae      	ldr	r3, [pc, #696]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4aad      	ldr	r2, [pc, #692]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 80017e4:	f043 0304 	orr.w	r3, r3, #4
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4bab      	ldr	r3, [pc, #684]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	61fb      	str	r3, [r7, #28]
 80017f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	61bb      	str	r3, [r7, #24]
 80017fa:	4ba7      	ldr	r3, [pc, #668]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4aa6      	ldr	r2, [pc, #664]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 8001800:	f043 0320 	orr.w	r3, r3, #32
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4ba4      	ldr	r3, [pc, #656]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0320 	and.w	r3, r3, #32
 800180e:	61bb      	str	r3, [r7, #24]
 8001810:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	4ba0      	ldr	r3, [pc, #640]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a9f      	ldr	r2, [pc, #636]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 800181c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b9d      	ldr	r3, [pc, #628]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	4b99      	ldr	r3, [pc, #612]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a98      	ldr	r2, [pc, #608]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b96      	ldr	r3, [pc, #600]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	4b92      	ldr	r3, [pc, #584]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a91      	ldr	r2, [pc, #580]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b8f      	ldr	r3, [pc, #572]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	4b8b      	ldr	r3, [pc, #556]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a8a      	ldr	r2, [pc, #552]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 8001870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b88      	ldr	r3, [pc, #544]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	607b      	str	r3, [r7, #4]
 8001886:	4b84      	ldr	r3, [pc, #528]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a83      	ldr	r2, [pc, #524]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 800188c:	f043 0308 	orr.w	r3, r3, #8
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b81      	ldr	r3, [pc, #516]	; (8001a98 <MX_GPIO_Init+0x2f0>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 800189e:	2200      	movs	r2, #0
 80018a0:	f248 4184 	movw	r1, #33924	; 0x8484
 80018a4:	487d      	ldr	r0, [pc, #500]	; (8001a9c <MX_GPIO_Init+0x2f4>)
 80018a6:	f008 fa93 	bl	8009dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 80018aa:	2200      	movs	r2, #0
 80018ac:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 80018b0:	487b      	ldr	r0, [pc, #492]	; (8001aa0 <MX_GPIO_Init+0x2f8>)
 80018b2:	f008 fa8d 	bl	8009dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 80018b6:	2200      	movs	r2, #0
 80018b8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80018bc:	4879      	ldr	r0, [pc, #484]	; (8001aa4 <MX_GPIO_Init+0x2fc>)
 80018be:	f008 fa87 	bl	8009dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2108      	movs	r1, #8
 80018c6:	4878      	ldr	r0, [pc, #480]	; (8001aa8 <MX_GPIO_Init+0x300>)
 80018c8:	f008 fa82 	bl	8009dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 80018cc:	2200      	movs	r2, #0
 80018ce:	f645 2126 	movw	r1, #23078	; 0x5a26
 80018d2:	4876      	ldr	r0, [pc, #472]	; (8001aac <MX_GPIO_Init+0x304>)
 80018d4:	f008 fa7c 	bl	8009dd0 <HAL_GPIO_WritePin>
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin, GPIO_PIN_RESET);
 80018d8:	2200      	movs	r2, #0
 80018da:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 80018de:	4874      	ldr	r0, [pc, #464]	; (8001ab0 <MX_GPIO_Init+0x308>)
 80018e0:	f008 fa76 	bl	8009dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80018e4:	2200      	movs	r2, #0
 80018e6:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 80018ea:	4872      	ldr	r0, [pc, #456]	; (8001ab4 <MX_GPIO_Init+0x30c>)
 80018ec:	f008 fa70 	bl	8009dd0 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 80018f0:	f248 4384 	movw	r3, #33924	; 0x8484
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f6:	2301      	movs	r3, #1
 80018f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001906:	4619      	mov	r1, r3
 8001908:	4864      	ldr	r0, [pc, #400]	; (8001a9c <MX_GPIO_Init+0x2f4>)
 800190a:	f008 f89d 	bl	8009a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 800190e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001914:	2301      	movs	r3, #1
 8001916:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191c:	2300      	movs	r3, #0
 800191e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001924:	4619      	mov	r1, r3
 8001926:	485e      	ldr	r0, [pc, #376]	; (8001aa0 <MX_GPIO_Init+0x2f8>)
 8001928:	f008 f88e 	bl	8009a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 800192c:	2301      	movs	r3, #1
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001930:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001934:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 800193a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800193e:	4619      	mov	r1, r3
 8001940:	4858      	ldr	r0, [pc, #352]	; (8001aa4 <MX_GPIO_Init+0x2fc>)
 8001942:	f008 f881 	bl	8009a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 8001946:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194c:	2301      	movs	r3, #1
 800194e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001954:	2300      	movs	r3, #0
 8001956:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800195c:	4619      	mov	r1, r3
 800195e:	4851      	ldr	r0, [pc, #324]	; (8001aa4 <MX_GPIO_Init+0x2fc>)
 8001960:	f008 f872 	bl	8009a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 8001964:	2308      	movs	r3, #8
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001968:	2301      	movs	r3, #1
 800196a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001970:	2300      	movs	r3, #0
 8001972:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 8001974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001978:	4619      	mov	r1, r3
 800197a:	484b      	ldr	r0, [pc, #300]	; (8001aa8 <MX_GPIO_Init+0x300>)
 800197c:	f008 f864 	bl	8009a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8001980:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001986:	2300      	movs	r3, #0
 8001988:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800198e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001992:	4619      	mov	r1, r3
 8001994:	4843      	ldr	r0, [pc, #268]	; (8001aa4 <MX_GPIO_Init+0x2fc>)
 8001996:	f008 f857 	bl	8009a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 800199a:	2302      	movs	r3, #2
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800199e:	2300      	movs	r3, #0
 80019a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 80019a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019aa:	4619      	mov	r1, r3
 80019ac:	4840      	ldr	r0, [pc, #256]	; (8001ab0 <MX_GPIO_Init+0x308>)
 80019ae:	f008 f84b 	bl	8009a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 80019b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b8:	2300      	movs	r3, #0
 80019ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 80019c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c4:	4619      	mov	r1, r3
 80019c6:	4836      	ldr	r0, [pc, #216]	; (8001aa0 <MX_GPIO_Init+0x2f8>)
 80019c8:	f008 f83e 	bl	8009a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|IN_EJ_Main_Cont_Pin
 80019cc:	f242 4319 	movw	r3, #9241	; 0x2419
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
                          |IN_EJ_Drogue_Cont_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d2:	2300      	movs	r3, #0
 80019d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019de:	4619      	mov	r1, r3
 80019e0:	4832      	ldr	r0, [pc, #200]	; (8001aac <MX_GPIO_Init+0x304>)
 80019e2:	f008 f831 	bl	8009a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 80019e6:	f645 2326 	movw	r3, #23078	; 0x5a26
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ec:	2301      	movs	r3, #1
 80019ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f4:	2300      	movs	r3, #0
 80019f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fc:	4619      	mov	r1, r3
 80019fe:	482b      	ldr	r0, [pc, #172]	; (8001aac <MX_GPIO_Init+0x304>)
 8001a00:	f008 f822 	bl	8009a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 8001a04:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a16:	4619      	mov	r1, r3
 8001a18:	4820      	ldr	r0, [pc, #128]	; (8001a9c <MX_GPIO_Init+0x2f4>)
 8001a1a:	f008 f815 	bl	8009a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB8 PBPin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin;
 8001a1e:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a24:	2301      	movs	r3, #1
 8001a26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a34:	4619      	mov	r1, r3
 8001a36:	481e      	ldr	r0, [pc, #120]	; (8001ab0 <MX_GPIO_Init+0x308>)
 8001a38:	f008 f806 	bl	8009a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8001a3c:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a42:	2301      	movs	r3, #1
 8001a44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a52:	4619      	mov	r1, r3
 8001a54:	4817      	ldr	r0, [pc, #92]	; (8001ab4 <MX_GPIO_Init+0x30c>)
 8001a56:	f007 fff7 	bl	8009a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 8001a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a60:	2300      	movs	r3, #0
 8001a62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8001a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4811      	ldr	r0, [pc, #68]	; (8001ab4 <MX_GPIO_Init+0x30c>)
 8001a70:	f007 ffea 	bl	8009a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 8001a74:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a7a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4808      	ldr	r0, [pc, #32]	; (8001aac <MX_GPIO_Init+0x304>)
 8001a8c:	f007 ffdc 	bl	8009a48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001a90:	2200      	movs	r2, #0
 8001a92:	2105      	movs	r1, #5
 8001a94:	2006      	movs	r0, #6
 8001a96:	e00f      	b.n	8001ab8 <MX_GPIO_Init+0x310>
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40021400 	.word	0x40021400
 8001aa4:	40020800 	.word	0x40020800
 8001aa8:	40020000 	.word	0x40020000
 8001aac:	40021800 	.word	0x40021800
 8001ab0:	40020400 	.word	0x40020400
 8001ab4:	40020c00 	.word	0x40020c00
 8001ab8:	f007 ff8e 	bl	80099d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001abc:	2006      	movs	r0, #6
 8001abe:	f007 ffa7 	bl	8009a10 <HAL_NVIC_EnableIRQ>

}
 8001ac2:	bf00      	nop
 8001ac4:	3738      	adds	r7, #56	; 0x38
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop

08001acc <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <MX_I2C2_Init+0x74>)
 8001ad2:	4a1c      	ldr	r2, [pc, #112]	; (8001b44 <MX_I2C2_Init+0x78>)
 8001ad4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <MX_I2C2_Init+0x74>)
 8001ad8:	4a1b      	ldr	r2, [pc, #108]	; (8001b48 <MX_I2C2_Init+0x7c>)
 8001ada:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001adc:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <MX_I2C2_Init+0x74>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001ae2:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <MX_I2C2_Init+0x74>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ae8:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <MX_I2C2_Init+0x74>)
 8001aea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001af0:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <MX_I2C2_Init+0x74>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001af6:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <MX_I2C2_Init+0x74>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001afc:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <MX_I2C2_Init+0x74>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b02:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <MX_I2C2_Init+0x74>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b08:	480d      	ldr	r0, [pc, #52]	; (8001b40 <MX_I2C2_Init+0x74>)
 8001b0a:	f008 f99f 	bl	8009e4c <HAL_I2C_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b14:	f000 f9f4 	bl	8001f00 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4809      	ldr	r0, [pc, #36]	; (8001b40 <MX_I2C2_Init+0x74>)
 8001b1c:	f009 f98b 	bl	800ae36 <HAL_I2CEx_ConfigAnalogFilter>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001b26:	f000 f9eb 	bl	8001f00 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4804      	ldr	r0, [pc, #16]	; (8001b40 <MX_I2C2_Init+0x74>)
 8001b2e:	f009 f9be 	bl	800aeae <HAL_I2CEx_ConfigDigitalFilter>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001b38:	f000 f9e2 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20005fb0 	.word	0x20005fb0
 8001b44:	40005800 	.word	0x40005800
 8001b48:	000186a0 	.word	0x000186a0

08001b4c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001b50:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <MX_I2C3_Init+0x74>)
 8001b52:	4a1c      	ldr	r2, [pc, #112]	; (8001bc4 <MX_I2C3_Init+0x78>)
 8001b54:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001b56:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <MX_I2C3_Init+0x74>)
 8001b58:	4a1b      	ldr	r2, [pc, #108]	; (8001bc8 <MX_I2C3_Init+0x7c>)
 8001b5a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b5c:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <MX_I2C3_Init+0x74>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001b62:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <MX_I2C3_Init+0x74>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b68:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <MX_I2C3_Init+0x74>)
 8001b6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b6e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b70:	4b13      	ldr	r3, [pc, #76]	; (8001bc0 <MX_I2C3_Init+0x74>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001b76:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <MX_I2C3_Init+0x74>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b7c:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <MX_I2C3_Init+0x74>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b82:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <MX_I2C3_Init+0x74>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001b88:	480d      	ldr	r0, [pc, #52]	; (8001bc0 <MX_I2C3_Init+0x74>)
 8001b8a:	f008 f95f 	bl	8009e4c <HAL_I2C_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001b94:	f000 f9b4 	bl	8001f00 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4809      	ldr	r0, [pc, #36]	; (8001bc0 <MX_I2C3_Init+0x74>)
 8001b9c:	f009 f94b 	bl	800ae36 <HAL_I2CEx_ConfigAnalogFilter>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001ba6:	f000 f9ab 	bl	8001f00 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001baa:	2100      	movs	r1, #0
 8001bac:	4804      	ldr	r0, [pc, #16]	; (8001bc0 <MX_I2C3_Init+0x74>)
 8001bae:	f009 f97e 	bl	800aeae <HAL_I2CEx_ConfigDigitalFilter>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001bb8:	f000 f9a2 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20005f5c 	.word	0x20005f5c
 8001bc4:	40005c00 	.word	0x40005c00
 8001bc8:	000186a0 	.word	0x000186a0

08001bcc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08c      	sub	sp, #48	; 0x30
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 031c 	add.w	r3, r7, #28
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a42      	ldr	r2, [pc, #264]	; (8001cf4 <HAL_I2C_MspInit+0x128>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d12d      	bne.n	8001c4a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61bb      	str	r3, [r7, #24]
 8001bf2:	4b41      	ldr	r3, [pc, #260]	; (8001cf8 <HAL_I2C_MspInit+0x12c>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a40      	ldr	r2, [pc, #256]	; (8001cf8 <HAL_I2C_MspInit+0x12c>)
 8001bf8:	f043 0302 	orr.w	r3, r3, #2
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b3e      	ldr	r3, [pc, #248]	; (8001cf8 <HAL_I2C_MspInit+0x12c>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	61bb      	str	r3, [r7, #24]
 8001c08:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c0a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c10:	2312      	movs	r3, #18
 8001c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c14:	2301      	movs	r3, #1
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c20:	f107 031c 	add.w	r3, r7, #28
 8001c24:	4619      	mov	r1, r3
 8001c26:	4835      	ldr	r0, [pc, #212]	; (8001cfc <HAL_I2C_MspInit+0x130>)
 8001c28:	f007 ff0e 	bl	8009a48 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	4b31      	ldr	r3, [pc, #196]	; (8001cf8 <HAL_I2C_MspInit+0x12c>)
 8001c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c34:	4a30      	ldr	r2, [pc, #192]	; (8001cf8 <HAL_I2C_MspInit+0x12c>)
 8001c36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3c:	4b2e      	ldr	r3, [pc, #184]	; (8001cf8 <HAL_I2C_MspInit+0x12c>)
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001c48:	e050      	b.n	8001cec <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a2c      	ldr	r2, [pc, #176]	; (8001d00 <HAL_I2C_MspInit+0x134>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d14b      	bne.n	8001cec <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c54:	2300      	movs	r3, #0
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	4b27      	ldr	r3, [pc, #156]	; (8001cf8 <HAL_I2C_MspInit+0x12c>)
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5c:	4a26      	ldr	r2, [pc, #152]	; (8001cf8 <HAL_I2C_MspInit+0x12c>)
 8001c5e:	f043 0304 	orr.w	r3, r3, #4
 8001c62:	6313      	str	r3, [r2, #48]	; 0x30
 8001c64:	4b24      	ldr	r3, [pc, #144]	; (8001cf8 <HAL_I2C_MspInit+0x12c>)
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	4b20      	ldr	r3, [pc, #128]	; (8001cf8 <HAL_I2C_MspInit+0x12c>)
 8001c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c78:	4a1f      	ldr	r2, [pc, #124]	; (8001cf8 <HAL_I2C_MspInit+0x12c>)
 8001c7a:	f043 0301 	orr.w	r3, r3, #1
 8001c7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c80:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <HAL_I2C_MspInit+0x12c>)
 8001c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c92:	2312      	movs	r3, #18
 8001c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c96:	2301      	movs	r3, #1
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c9e:	2304      	movs	r3, #4
 8001ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca2:	f107 031c 	add.w	r3, r7, #28
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4816      	ldr	r0, [pc, #88]	; (8001d04 <HAL_I2C_MspInit+0x138>)
 8001caa:	f007 fecd 	bl	8009a48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cb4:	2312      	movs	r3, #18
 8001cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cc0:	2304      	movs	r3, #4
 8001cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc4:	f107 031c 	add.w	r3, r7, #28
 8001cc8:	4619      	mov	r1, r3
 8001cca:	480f      	ldr	r0, [pc, #60]	; (8001d08 <HAL_I2C_MspInit+0x13c>)
 8001ccc:	f007 febc 	bl	8009a48 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <HAL_I2C_MspInit+0x12c>)
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd8:	4a07      	ldr	r2, [pc, #28]	; (8001cf8 <HAL_I2C_MspInit+0x12c>)
 8001cda:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cde:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce0:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <HAL_I2C_MspInit+0x12c>)
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	68bb      	ldr	r3, [r7, #8]
}
 8001cec:	bf00      	nop
 8001cee:	3730      	adds	r7, #48	; 0x30
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40005800 	.word	0x40005800
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40020400 	.word	0x40020400
 8001d00:	40005c00 	.word	0x40005c00
 8001d04:	40020800 	.word	0x40020800
 8001d08:	40020000 	.word	0x40020000

08001d0c <main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int main(void){
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
	MRT_STM_Init();
 8001d10:	f000 f88e 	bl	8001e30 <MRT_STM_Init>
	println("\r\n\r\nSTM Init...OK");
 8001d14:	480c      	ldr	r0, [pc, #48]	; (8001d48 <main+0x3c>)
 8001d16:	f7ff f9d9 	bl	80010cc <println>

	MRT_Init();
 8001d1a:	f7ff fa75 	bl	8001208 <MRT_Init>

	println("\r\n\r\n/****Starting FC****/\r\n\r\n");
 8001d1e:	480b      	ldr	r0, [pc, #44]	; (8001d4c <main+0x40>)
 8001d20:	f7ff f9d4 	bl	80010cc <println>
	HAL_IWDG_Refresh(&hiwdg);
	buzz_startup_success();
 8001d24:	f7ff fa58 	bl	80011d8 <buzz_startup_success>

	MRT_waitForLaunch();
 8001d28:	f000 f8a4 	bl	8001e74 <MRT_waitForLaunch>
	//if (DEBUG) TESTING_LOOP(); //TODO remove

	//TODO I2C SENSORS SOMETIMES DON'T WANT TO WORK ANYMORE -> NEED TO RESET THE POWER (Enter quick standByMode?)

	//Initialize the os
	MX_FREERTOS_Init();
 8001d2c:	f7ff fc98 	bl	8001660 <MX_FREERTOS_Init>

	//Starting the os
	println("\r\n/****Starting the OS****/\r\n");
 8001d30:	4807      	ldr	r0, [pc, #28]	; (8001d50 <main+0x44>)
 8001d32:	f7ff f9cb 	bl	80010cc <println>
	osKernelStart();
 8001d36:	f013 ff95 	bl	8015c64 <osKernelStart>

	println("SOMETHING WENT HORRIBLY WRONG, WAITING FOR WATCH DOG RESET");
 8001d3a:	4806      	ldr	r0, [pc, #24]	; (8001d54 <main+0x48>)
 8001d3c:	f7ff f9c6 	bl	80010cc <println>
	HAL_IWDG_Refresh(&hiwdg);
	MRT_Deinit();
 8001d40:	f7ff fa82 	bl	8001248 <MRT_Deinit>
	while (1){}
 8001d44:	e7fe      	b.n	8001d44 <main+0x38>
 8001d46:	bf00      	nop
 8001d48:	0802018c 	.word	0x0802018c
 8001d4c:	080201a0 	.word	0x080201a0
 8001d50:	080201c0 	.word	0x080201c0
 8001d54:	080201e0 	.word	0x080201e0

08001d58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b094      	sub	sp, #80	; 0x50
 8001d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d5e:	f107 0320 	add.w	r3, r7, #32
 8001d62:	2230      	movs	r2, #48	; 0x30
 8001d64:	2100      	movs	r1, #0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f018 f9fc 	bl	801a164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	4b29      	ldr	r3, [pc, #164]	; (8001e28 <SystemClock_Config+0xd0>)
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	4a28      	ldr	r2, [pc, #160]	; (8001e28 <SystemClock_Config+0xd0>)
 8001d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d8a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8c:	4b26      	ldr	r3, [pc, #152]	; (8001e28 <SystemClock_Config+0xd0>)
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d98:	2300      	movs	r3, #0
 8001d9a:	607b      	str	r3, [r7, #4]
 8001d9c:	4b23      	ldr	r3, [pc, #140]	; (8001e2c <SystemClock_Config+0xd4>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001da4:	4a21      	ldr	r2, [pc, #132]	; (8001e2c <SystemClock_Config+0xd4>)
 8001da6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001daa:	6013      	str	r3, [r2, #0]
 8001dac:	4b1f      	ldr	r3, [pc, #124]	; (8001e2c <SystemClock_Config+0xd4>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001db8:	2309      	movs	r3, #9
 8001dba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001dd0:	2308      	movs	r3, #8
 8001dd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001dd4:	2348      	movs	r3, #72	; 0x48
 8001dd6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001de0:	f107 0320 	add.w	r3, r7, #32
 8001de4:	4618      	mov	r0, r3
 8001de6:	f00a fa63 	bl	800c2b0 <HAL_RCC_OscConfig>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001df0:	f000 f886 	bl	8001f00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001df4:	230f      	movs	r3, #15
 8001df6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e0a:	f107 030c 	add.w	r3, r7, #12
 8001e0e:	2100      	movs	r1, #0
 8001e10:	4618      	mov	r0, r3
 8001e12:	f00a fcc5 	bl	800c7a0 <HAL_RCC_ClockConfig>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001e1c:	f000 f870 	bl	8001f00 <Error_Handler>
  }
}
 8001e20:	bf00      	nop
 8001e22:	3750      	adds	r7, #80	; 0x50
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40007000 	.word	0x40007000

08001e30 <MRT_STM_Init>:

/* USER CODE BEGIN 4 */

void MRT_STM_Init(void){
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
	HAL_Init();
 8001e34:	f007 fa1c 	bl	8009270 <HAL_Init>
	SystemClock_Config();
 8001e38:	f7ff ff8e 	bl	8001d58 <SystemClock_Config>

	MX_GPIO_Init();
 8001e3c:	f7ff fcb4 	bl	80017a8 <MX_GPIO_Init>
	MX_ADC1_Init();
 8001e40:	f7ff fb78 	bl	8001534 <MX_ADC1_Init>
	MX_I2C2_Init();
 8001e44:	f7ff fe42 	bl	8001acc <MX_I2C2_Init>
	MX_I2C3_Init();
 8001e48:	f7ff fe80 	bl	8001b4c <MX_I2C3_Init>
	MX_SPI2_Init();
 8001e4c:	f000 faa4 	bl	8002398 <MX_SPI2_Init>
	MX_SPI4_Init();
 8001e50:	f000 fad8 	bl	8002404 <MX_SPI4_Init>
	MX_SPI5_Init();
 8001e54:	f000 fb0c 	bl	8002470 <MX_SPI5_Init>
	MX_TIM2_Init();
 8001e58:	f000 fcca 	bl	80027f0 <MX_TIM2_Init>
	MX_UART8_Init();
 8001e5c:	f000 fd96 	bl	800298c <MX_UART8_Init>
	MX_USART3_UART_Init();
 8001e60:	f000 fdbe 	bl	80029e0 <MX_USART3_UART_Init>
	MX_USART6_UART_Init();
 8001e64:	f000 fde6 	bl	8002a34 <MX_USART6_UART_Init>
	MX_RTC_Init();
 8001e68:	f000 f850 	bl	8001f0c <MX_RTC_Init>
	//MX_IWDG_Init(); TODO ADDED IN MRT_Init()
	MX_FATFS_Init();
 8001e6c:	f00f fb1a 	bl	80114a4 <MX_FATFS_Init>
}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <MRT_waitForLaunch>:

void MRT_waitForLaunch(void){
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0

	println("Waiting for launch command from ground station\r\n");
 8001e78:	4813      	ldr	r0, [pc, #76]	; (8001ec8 <MRT_waitForLaunch+0x54>)
 8001e7a:	f7ff f927 	bl	80010cc <println>

	char buffer[RADIO_BUFFER_SIZE];

	//Poll propulsion until launch command sent
	while((XTEND_ || SRADIO_) && ejection_state_flag == 0 && wu_flag == 0){
 8001e7e:	bf00      	nop
		HAL_Delay(1000/PRE_APOGEE_SEND_FREQ);
	}


	//Send acknowledgement
	MRT_radio_tx((char*) "LAUNCH COMMAND RECEIVED"); //TODO CHECK AT WHAT JASPER DID
 8001e80:	4812      	ldr	r0, [pc, #72]	; (8001ecc <MRT_waitForLaunch+0x58>)
 8001e82:	f007 f9b5 	bl	80091f0 <MRT_radio_tx>

	//Update ejection state
	if (ejection_state_flag < 1){
 8001e86:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <MRT_waitForLaunch+0x5c>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d11a      	bne.n	8001ec4 <MRT_waitForLaunch+0x50>
		ejection_state_flag = 1;
 8001e8e:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <MRT_waitForLaunch+0x5c>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	701a      	strb	r2, [r3, #0]

		flash_flags_buffer[EJECTION_STATE_FLAG_OFFSET] = ejection_state_flag;
 8001e94:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <MRT_waitForLaunch+0x5c>)
 8001e96:	781a      	ldrb	r2, [r3, #0]
 8001e98:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <MRT_waitForLaunch+0x60>)
 8001e9a:	711a      	strb	r2, [r3, #4]
		if (ejection_state_flag == 2){
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <MRT_waitForLaunch+0x5c>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d106      	bne.n	8001eb2 <MRT_waitForLaunch+0x3e>
			apogee_flag = 1;
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <MRT_waitForLaunch+0x64>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	701a      	strb	r2, [r3, #0]
			flash_flags_buffer[APOGEE_FLAG_OFFSET] = apogee_flag;
 8001eaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <MRT_waitForLaunch+0x64>)
 8001eac:	781a      	ldrb	r2, [r3, #0]
 8001eae:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <MRT_waitForLaunch+0x60>)
 8001eb0:	70da      	strb	r2, [r3, #3]
		}
		W25qxx_EraseSector(1);
 8001eb2:	2001      	movs	r0, #1
 8001eb4:	f001 fc9c 	bl	80037f0 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8001eb8:	2305      	movs	r3, #5
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	4805      	ldr	r0, [pc, #20]	; (8001ed4 <MRT_waitForLaunch+0x60>)
 8001ec0:	f001 fde0 	bl	8003a84 <W25qxx_WriteSector>
	}
}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	0802021c 	.word	0x0802021c
 8001ecc:	08020250 	.word	0x08020250
 8001ed0:	20000480 	.word	0x20000480
 8001ed4:	20006290 	.word	0x20006290
 8001ed8:	2000047f 	.word	0x2000047f

08001edc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a04      	ldr	r2, [pc, #16]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d101      	bne.n	8001ef2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001eee:	f007 f9e1 	bl	80092b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40001000 	.word	0x40001000

08001f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f04:	b672      	cpsid	i
}
 8001f06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <Error_Handler+0x8>
	...

08001f0c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b090      	sub	sp, #64	; 0x40
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001f12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	60da      	str	r2, [r3, #12]
 8001f20:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001f22:	2300      	movs	r3, #0
 8001f24:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001f26:	463b      	mov	r3, r7
 8001f28:	2228      	movs	r2, #40	; 0x28
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f018 f919 	bl	801a164 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001f32:	4b3a      	ldr	r3, [pc, #232]	; (800201c <MX_RTC_Init+0x110>)
 8001f34:	4a3a      	ldr	r2, [pc, #232]	; (8002020 <MX_RTC_Init+0x114>)
 8001f36:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001f38:	4b38      	ldr	r3, [pc, #224]	; (800201c <MX_RTC_Init+0x110>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001f3e:	4b37      	ldr	r3, [pc, #220]	; (800201c <MX_RTC_Init+0x110>)
 8001f40:	227f      	movs	r2, #127	; 0x7f
 8001f42:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001f44:	4b35      	ldr	r3, [pc, #212]	; (800201c <MX_RTC_Init+0x110>)
 8001f46:	22ff      	movs	r2, #255	; 0xff
 8001f48:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001f4a:	4b34      	ldr	r3, [pc, #208]	; (800201c <MX_RTC_Init+0x110>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001f50:	4b32      	ldr	r3, [pc, #200]	; (800201c <MX_RTC_Init+0x110>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001f56:	4b31      	ldr	r3, [pc, #196]	; (800201c <MX_RTC_Init+0x110>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f5c:	482f      	ldr	r0, [pc, #188]	; (800201c <MX_RTC_Init+0x110>)
 8001f5e:	f00b f809 	bl	800cf74 <HAL_RTC_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001f68:	f7ff ffca 	bl	8001f00 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f82:	2300      	movs	r3, #0
 8001f84:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001f86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4823      	ldr	r0, [pc, #140]	; (800201c <MX_RTC_Init+0x110>)
 8001f90:	f00b f881 	bl	800d096 <HAL_RTC_SetTime>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001f9a:	f7ff ffb1 	bl	8001f00 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001faa:	2301      	movs	r3, #1
 8001fac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001fb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fba:	2201      	movs	r2, #1
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4817      	ldr	r0, [pc, #92]	; (800201c <MX_RTC_Init+0x110>)
 8001fc0:	f00b f926 	bl	800d210 <HAL_RTC_SetDate>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001fca:	f7ff ff99 	bl	8001f00 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001ff8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001ffe:	463b      	mov	r3, r7
 8002000:	2201      	movs	r2, #1
 8002002:	4619      	mov	r1, r3
 8002004:	4805      	ldr	r0, [pc, #20]	; (800201c <MX_RTC_Init+0x110>)
 8002006:	f00b f9ab 	bl	800d360 <HAL_RTC_SetAlarm_IT>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002010:	f7ff ff76 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002014:	bf00      	nop
 8002016:	3740      	adds	r7, #64	; 0x40
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20006004 	.word	0x20006004
 8002020:	40002800 	.word	0x40002800

08002024 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08e      	sub	sp, #56	; 0x38
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800202c:	f107 0308 	add.w	r3, r7, #8
 8002030:	2230      	movs	r2, #48	; 0x30
 8002032:	2100      	movs	r1, #0
 8002034:	4618      	mov	r0, r3
 8002036:	f018 f895 	bl	801a164 <memset>
  if(rtcHandle->Instance==RTC)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a10      	ldr	r2, [pc, #64]	; (8002080 <HAL_RTC_MspInit+0x5c>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d119      	bne.n	8002078 <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002044:	2320      	movs	r3, #32
 8002046:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002048:	f44f 7300 	mov.w	r3, #512	; 0x200
 800204c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800204e:	f107 0308 	add.w	r3, r7, #8
 8002052:	4618      	mov	r0, r3
 8002054:	f00a fdd0 	bl	800cbf8 <HAL_RCCEx_PeriphCLKConfig>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800205e:	f7ff ff4f 	bl	8001f00 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002062:	4b08      	ldr	r3, [pc, #32]	; (8002084 <HAL_RTC_MspInit+0x60>)
 8002064:	2201      	movs	r2, #1
 8002066:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8002068:	2200      	movs	r2, #0
 800206a:	2105      	movs	r1, #5
 800206c:	2029      	movs	r0, #41	; 0x29
 800206e:	f007 fcb3 	bl	80099d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002072:	2029      	movs	r0, #41	; 0x29
 8002074:	f007 fccc 	bl	8009a10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002078:	bf00      	nop
 800207a:	3738      	adds	r7, #56	; 0x38
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40002800 	.word	0x40002800
 8002084:	42470e3c 	.word	0x42470e3c

08002088 <MRT_rtc_Init>:


//**************************************************//
//FUNCTIONS

void MRT_rtc_Init(void){
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
	println("\r\nMRT RTC Init");
 800208c:	4816      	ldr	r0, [pc, #88]	; (80020e8 <MRT_rtc_Init+0x60>)
 800208e:	f7ff f81d 	bl	80010cc <println>

	print("\tSetting RTC to previous time...");
 8002092:	4816      	ldr	r0, [pc, #88]	; (80020ec <MRT_rtc_Init+0x64>)
 8002094:	f7ff f838 	bl	8001108 <print>
	MRT_set_rtc(prev_hours,prev_min,prev_sec);
 8002098:	4b15      	ldr	r3, [pc, #84]	; (80020f0 <MRT_rtc_Init+0x68>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	4a15      	ldr	r2, [pc, #84]	; (80020f4 <MRT_rtc_Init+0x6c>)
 800209e:	7811      	ldrb	r1, [r2, #0]
 80020a0:	4a15      	ldr	r2, [pc, #84]	; (80020f8 <MRT_rtc_Init+0x70>)
 80020a2:	7812      	ldrb	r2, [r2, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f000 f8eb 	bl	8002280 <MRT_set_rtc>
	println("OK");
 80020aa:	4814      	ldr	r0, [pc, #80]	; (80020fc <MRT_rtc_Init+0x74>)
 80020ac:	f7ff f80e 	bl	80010cc <println>

	#if ALARM_A_ACTIVE
		print("\tSetting alarmA...");
 80020b0:	4813      	ldr	r0, [pc, #76]	; (8002100 <MRT_rtc_Init+0x78>)
 80020b2:	f7ff f829 	bl	8001108 <print>
		HAL_Delay(2000); //To make sure that when you set the Alarm it doesn't go off automatically
 80020b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80020ba:	f007 f91b 	bl	80092f4 <HAL_Delay>
		if (wu_flag == 0){
 80020be:	4b11      	ldr	r3, [pc, #68]	; (8002104 <MRT_rtc_Init+0x7c>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d105      	bne.n	80020d2 <MRT_rtc_Init+0x4a>
			MRT_set_alarmA(PRE_WHEN_SLEEP_TIME_HOURS, PRE_WHEN_SLEEP_TIME_MIN, PRE_WHEN_SLEEP_TIME_SEC);
 80020c6:	2200      	movs	r2, #0
 80020c8:	211e      	movs	r1, #30
 80020ca:	2004      	movs	r0, #4
 80020cc:	f000 f91e 	bl	800230c <MRT_set_alarmA>
 80020d0:	e004      	b.n	80020dc <MRT_rtc_Init+0x54>
		}
		else{
			MRT_set_alarmA(POST_WHEN_SLEEP_TIME_HOURS, POST_WHEN_SLEEP_TIME_MIN, POST_WHEN_SLEEP_TIME_SEC);
 80020d2:	2200      	movs	r2, #0
 80020d4:	2100      	movs	r1, #0
 80020d6:	200e      	movs	r0, #14
 80020d8:	f000 f918 	bl	800230c <MRT_set_alarmA>
		}
		println("OK");
 80020dc:	4807      	ldr	r0, [pc, #28]	; (80020fc <MRT_rtc_Init+0x74>)
 80020de:	f7fe fff5 	bl	80010cc <println>
	#endif
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	08020314 	.word	0x08020314
 80020ec:	08020324 	.word	0x08020324
 80020f0:	20000481 	.word	0x20000481
 80020f4:	20000482 	.word	0x20000482
 80020f8:	20000483 	.word	0x20000483
 80020fc:	08020348 	.word	0x08020348
 8002100:	0802034c 	.word	0x0802034c
 8002104:	2000047d 	.word	0x2000047d

08002108 <MRT_check_for_wake_up>:


void MRT_check_for_wake_up(void){
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0

	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 800210c:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <MRT_check_for_wake_up+0x40>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b02      	cmp	r3, #2
 8002116:	d112      	bne.n	800213e <MRT_check_for_wake_up+0x36>
	{

		wu_flag = 1;
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <MRT_check_for_wake_up+0x44>)
 800211a:	2201      	movs	r2, #1
 800211c:	701a      	strb	r2, [r3, #0]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 800211e:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <MRT_check_for_wake_up+0x40>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a09      	ldr	r2, [pc, #36]	; (8002148 <MRT_check_for_wake_up+0x40>)
 8002124:	f043 0308 	orr.w	r3, r3, #8
 8002128:	6013      	str	r3, [r2, #0]

		println("Wakeup from STANDBY MODE");
 800212a:	4809      	ldr	r0, [pc, #36]	; (8002150 <MRT_check_for_wake_up+0x48>)
 800212c:	f7fe ffce 	bl	80010cc <println>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8002130:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002134:	f00a f890 	bl	800c258 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc); //TODO hrtc from rtc.h (should we pass it as an argument instead?)
 8002138:	4806      	ldr	r0, [pc, #24]	; (8002154 <MRT_check_for_wake_up+0x4c>)
 800213a:	f00b fbcb 	bl	800d8d4 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_clear_alarms_flags();
 800213e:	f000 f80b 	bl	8002158 <MRT_clear_alarms_flags>
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40007000 	.word	0x40007000
 800214c:	2000047d 	.word	0x2000047d
 8002150:	08020360 	.word	0x08020360
 8002154:	20006004 	.word	0x20006004

08002158 <MRT_clear_alarms_flags>:



void MRT_clear_alarms_flags(void){
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	print("Clearing the flags\r\n");
 800215c:	482a      	ldr	r0, [pc, #168]	; (8002208 <MRT_clear_alarms_flags+0xb0>)
 800215e:	f7fe ffd3 	bl	8001108 <print>

	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002162:	4b2a      	ldr	r3, [pc, #168]	; (800220c <MRT_clear_alarms_flags+0xb4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	22ca      	movs	r2, #202	; 0xca
 8002168:	625a      	str	r2, [r3, #36]	; 0x24
 800216a:	4b28      	ldr	r3, [pc, #160]	; (800220c <MRT_clear_alarms_flags+0xb4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2253      	movs	r2, #83	; 0x53
 8002170:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8002172:	e008      	b.n	8002186 <MRT_clear_alarms_flags+0x2e>
		//print("Clearing alarm A flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002174:	4b25      	ldr	r3, [pc, #148]	; (800220c <MRT_clear_alarms_flags+0xb4>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	b2da      	uxtb	r2, r3
 800217c:	4b23      	ldr	r3, [pc, #140]	; (800220c <MRT_clear_alarms_flags+0xb4>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002184:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8002186:	4b21      	ldr	r3, [pc, #132]	; (800220c <MRT_clear_alarms_flags+0xb4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1ef      	bne.n	8002174 <MRT_clear_alarms_flags+0x1c>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002194:	4b1d      	ldr	r3, [pc, #116]	; (800220c <MRT_clear_alarms_flags+0xb4>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	22ff      	movs	r2, #255	; 0xff
 800219a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800219c:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <MRT_clear_alarms_flags+0xb8>)
 800219e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021a2:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 80021a4:	4b19      	ldr	r3, [pc, #100]	; (800220c <MRT_clear_alarms_flags+0xb4>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	22ca      	movs	r2, #202	; 0xca
 80021aa:	625a      	str	r2, [r3, #36]	; 0x24
 80021ac:	4b17      	ldr	r3, [pc, #92]	; (800220c <MRT_clear_alarms_flags+0xb4>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2253      	movs	r2, #83	; 0x53
 80021b2:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 80021b4:	e008      	b.n	80021c8 <MRT_clear_alarms_flags+0x70>
		//print("Clearing alarm B flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 80021b6:	4b15      	ldr	r3, [pc, #84]	; (800220c <MRT_clear_alarms_flags+0xb4>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	4b13      	ldr	r3, [pc, #76]	; (800220c <MRT_clear_alarms_flags+0xb4>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f462 7220 	orn	r2, r2, #640	; 0x280
 80021c6:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 80021c8:	4b10      	ldr	r3, [pc, #64]	; (800220c <MRT_clear_alarms_flags+0xb4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1ef      	bne.n	80021b6 <MRT_clear_alarms_flags+0x5e>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 80021d6:	4b0d      	ldr	r3, [pc, #52]	; (800220c <MRT_clear_alarms_flags+0xb4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	22ff      	movs	r2, #255	; 0xff
 80021dc:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80021de:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <MRT_clear_alarms_flags+0xb8>)
 80021e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021e4:	615a      	str	r2, [r3, #20]

	/* Clear the WU FLAG */
	//print("Clearing wake up flag\r\n");
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80021e6:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <MRT_clear_alarms_flags+0xbc>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a0a      	ldr	r2, [pc, #40]	; (8002214 <MRT_clear_alarms_flags+0xbc>)
 80021ec:	f043 0304 	orr.w	r3, r3, #4
 80021f0:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//print("Clearing RTC wake up flag\r\n");
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 80021f2:	4b06      	ldr	r3, [pc, #24]	; (800220c <MRT_clear_alarms_flags+0xb4>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	4b04      	ldr	r3, [pc, #16]	; (800220c <MRT_clear_alarms_flags+0xb4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002202:	60da      	str	r2, [r3, #12]
}
 8002204:	bf00      	nop
 8002206:	bd80      	pop	{r7, pc}
 8002208:	0802037c 	.word	0x0802037c
 800220c:	20006004 	.word	0x20006004
 8002210:	40013c00 	.word	0x40013c00
 8002214:	40007000 	.word	0x40007000

08002218 <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode(uint32_t seconds){
 8002218:	b580      	push	{r7, lr}
 800221a:	b08c      	sub	sp, #48	; 0x30
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
	print("\r\n/*****StandByMode*****/\r\n");
 8002220:	4813      	ldr	r0, [pc, #76]	; (8002270 <MRT_StandByMode+0x58>)
 8002222:	f7fe ff71 	bl	8001108 <print>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8002226:	f44f 7080 	mov.w	r0, #256	; 0x100
 800222a:	f00a f803 	bl	800c234 <HAL_PWR_EnableWakeUpPin>

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_clear_alarms_flags();
 800222e:	f7ff ff93 	bl	8002158 <MRT_clear_alarms_flags>

	//Setup RTC wake up timer
	println("Setting up RTCW");
 8002232:	4810      	ldr	r0, [pc, #64]	; (8002274 <MRT_StandByMode+0x5c>)
 8002234:	f7fe ff4a 	bl	80010cc <println>
	  Error_Handler();
	}
	*/

	char msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds",(int) seconds);
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	f107 030c 	add.w	r3, r7, #12
 800223e:	490e      	ldr	r1, [pc, #56]	; (8002278 <MRT_StandByMode+0x60>)
 8002240:	4618      	mov	r0, r3
 8002242:	f019 fa8b 	bl	801b75c <siprintf>
	println(msg);
 8002246:	f107 030c 	add.w	r3, r7, #12
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe ff3e 	bl	80010cc <println>

	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8002250:	2204      	movs	r2, #4
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	4809      	ldr	r0, [pc, #36]	; (800227c <MRT_StandByMode+0x64>)
 8002256:	f00b fa7d 	bl	800d754 <HAL_RTCEx_SetWakeUpTimer_IT>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MRT_StandByMode+0x4c>
	{
	  Error_Handler();
 8002260:	f7ff fe4e 	bl	8001f00 <Error_Handler>
	}

	HAL_PWR_EnterSTANDBYMode();
 8002264:	f00a f80c 	bl	800c280 <HAL_PWR_EnterSTANDBYMode>
}
 8002268:	bf00      	nop
 800226a:	3730      	adds	r7, #48	; 0x30
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	08020394 	.word	0x08020394
 8002274:	080203b0 	.word	0x080203b0
 8002278:	080203c0 	.word	0x080203c0
 800227c:	20006004 	.word	0x20006004

08002280 <MRT_set_rtc>:




void MRT_set_rtc(uint8_t h, uint8_t m, uint8_t s){
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
 800228a:	460b      	mov	r3, r1
 800228c:	71bb      	strb	r3, [r7, #6]
 800228e:	4613      	mov	r3, r2
 8002290:	717b      	strb	r3, [r7, #5]
	  /** Initialize RTC and set the Time and Date
	  */
	  RTC_TimeTypeDef sTime;

	  sTime.Hours = int_to_hex_table[h];
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	4a1a      	ldr	r2, [pc, #104]	; (8002300 <MRT_set_rtc+0x80>)
 8002296:	5cd3      	ldrb	r3, [r2, r3]
 8002298:	733b      	strb	r3, [r7, #12]
	  sTime.Minutes = int_to_hex_table[m];
 800229a:	79bb      	ldrb	r3, [r7, #6]
 800229c:	4a18      	ldr	r2, [pc, #96]	; (8002300 <MRT_set_rtc+0x80>)
 800229e:	5cd3      	ldrb	r3, [r2, r3]
 80022a0:	737b      	strb	r3, [r7, #13]
	  sTime.Seconds = int_to_hex_table[s];
 80022a2:	797b      	ldrb	r3, [r7, #5]
 80022a4:	4a16      	ldr	r2, [pc, #88]	; (8002300 <MRT_set_rtc+0x80>)
 80022a6:	5cd3      	ldrb	r3, [r2, r3]
 80022a8:	73bb      	strb	r3, [r7, #14]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61bb      	str	r3, [r7, #24]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61fb      	str	r3, [r7, #28]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80022b2:	f107 030c 	add.w	r3, r7, #12
 80022b6:	2201      	movs	r2, #1
 80022b8:	4619      	mov	r1, r3
 80022ba:	4812      	ldr	r0, [pc, #72]	; (8002304 <MRT_set_rtc+0x84>)
 80022bc:	f00a feeb 	bl	800d096 <HAL_RTC_SetTime>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MRT_set_rtc+0x4a>
	  {
	    Error_Handler();
 80022c6:	f7ff fe1b 	bl	8001f00 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80022ca:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <MRT_set_rtc+0x88>)
 80022cc:	2201      	movs	r2, #1
 80022ce:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 80022d0:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <MRT_set_rtc+0x88>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x1;
 80022d6:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <MRT_set_rtc+0x88>)
 80022d8:	2201      	movs	r2, #1
 80022da:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x0;
 80022dc:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <MRT_set_rtc+0x88>)
 80022de:	2200      	movs	r2, #0
 80022e0:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80022e2:	2201      	movs	r2, #1
 80022e4:	4908      	ldr	r1, [pc, #32]	; (8002308 <MRT_set_rtc+0x88>)
 80022e6:	4807      	ldr	r0, [pc, #28]	; (8002304 <MRT_set_rtc+0x84>)
 80022e8:	f00a ff92 	bl	800d210 <HAL_RTC_SetDate>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MRT_set_rtc+0x76>
	  {
	    Error_Handler();
 80022f2:	f7ff fe05 	bl	8001f00 <Error_Handler>
	  }
}
 80022f6:	bf00      	nop
 80022f8:	3720      	adds	r7, #32
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000000 	.word	0x20000000
 8002304:	20006004 	.word	0x20006004
 8002308:	20000450 	.word	0x20000450

0800230c <MRT_set_alarmA>:



void MRT_set_alarmA(uint8_t h, uint8_t m, uint8_t s){
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
 8002316:	460b      	mov	r3, r1
 8002318:	71bb      	strb	r3, [r7, #6]
 800231a:	4613      	mov	r3, r2
 800231c:	717b      	strb	r3, [r7, #5]
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = int_to_hex_table[h];
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	4a1a      	ldr	r2, [pc, #104]	; (800238c <MRT_set_alarmA+0x80>)
 8002322:	5cd2      	ldrb	r2, [r2, r3]
 8002324:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <MRT_set_alarmA+0x84>)
 8002326:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = int_to_hex_table[m];
 8002328:	79bb      	ldrb	r3, [r7, #6]
 800232a:	4a18      	ldr	r2, [pc, #96]	; (800238c <MRT_set_alarmA+0x80>)
 800232c:	5cd2      	ldrb	r2, [r2, r3]
 800232e:	4b18      	ldr	r3, [pc, #96]	; (8002390 <MRT_set_alarmA+0x84>)
 8002330:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = int_to_hex_table[s];
 8002332:	797b      	ldrb	r3, [r7, #5]
 8002334:	4a15      	ldr	r2, [pc, #84]	; (800238c <MRT_set_alarmA+0x80>)
 8002336:	5cd2      	ldrb	r2, [r2, r3]
 8002338:	4b15      	ldr	r3, [pc, #84]	; (8002390 <MRT_set_alarmA+0x84>)
 800233a:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 800233c:	4b14      	ldr	r3, [pc, #80]	; (8002390 <MRT_set_alarmA+0x84>)
 800233e:	2200      	movs	r2, #0
 8002340:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002342:	4b13      	ldr	r3, [pc, #76]	; (8002390 <MRT_set_alarmA+0x84>)
 8002344:	2200      	movs	r2, #0
 8002346:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002348:	4b11      	ldr	r3, [pc, #68]	; (8002390 <MRT_set_alarmA+0x84>)
 800234a:	2200      	movs	r2, #0
 800234c:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <MRT_set_alarmA+0x84>)
 8002350:	2200      	movs	r2, #0
 8002352:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002354:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <MRT_set_alarmA+0x84>)
 8002356:	2200      	movs	r2, #0
 8002358:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800235a:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <MRT_set_alarmA+0x84>)
 800235c:	2200      	movs	r2, #0
 800235e:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 8002360:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <MRT_set_alarmA+0x84>)
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 8002368:	4b09      	ldr	r3, [pc, #36]	; (8002390 <MRT_set_alarmA+0x84>)
 800236a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800236e:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002370:	2201      	movs	r2, #1
 8002372:	4907      	ldr	r1, [pc, #28]	; (8002390 <MRT_set_alarmA+0x84>)
 8002374:	4807      	ldr	r0, [pc, #28]	; (8002394 <MRT_set_alarmA+0x88>)
 8002376:	f00a fff3 	bl	800d360 <HAL_RTC_SetAlarm_IT>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MRT_set_alarmA+0x78>
	  {
	    Error_Handler();
 8002380:	f7ff fdbe 	bl	8001f00 <Error_Handler>
	  }
}
 8002384:	bf00      	nop
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20000000 	.word	0x20000000
 8002390:	20000454 	.word	0x20000454
 8002394:	20006004 	.word	0x20006004

08002398 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800239c:	4b17      	ldr	r3, [pc, #92]	; (80023fc <MX_SPI2_Init+0x64>)
 800239e:	4a18      	ldr	r2, [pc, #96]	; (8002400 <MX_SPI2_Init+0x68>)
 80023a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80023a2:	4b16      	ldr	r3, [pc, #88]	; (80023fc <MX_SPI2_Init+0x64>)
 80023a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80023aa:	4b14      	ldr	r3, [pc, #80]	; (80023fc <MX_SPI2_Init+0x64>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80023b0:	4b12      	ldr	r3, [pc, #72]	; (80023fc <MX_SPI2_Init+0x64>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023b6:	4b11      	ldr	r3, [pc, #68]	; (80023fc <MX_SPI2_Init+0x64>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023bc:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <MX_SPI2_Init+0x64>)
 80023be:	2200      	movs	r2, #0
 80023c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80023c2:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <MX_SPI2_Init+0x64>)
 80023c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023ca:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <MX_SPI2_Init+0x64>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023d0:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <MX_SPI2_Init+0x64>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80023d6:	4b09      	ldr	r3, [pc, #36]	; (80023fc <MX_SPI2_Init+0x64>)
 80023d8:	2200      	movs	r2, #0
 80023da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023dc:	4b07      	ldr	r3, [pc, #28]	; (80023fc <MX_SPI2_Init+0x64>)
 80023de:	2200      	movs	r2, #0
 80023e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80023e2:	4b06      	ldr	r3, [pc, #24]	; (80023fc <MX_SPI2_Init+0x64>)
 80023e4:	220a      	movs	r2, #10
 80023e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80023e8:	4804      	ldr	r0, [pc, #16]	; (80023fc <MX_SPI2_Init+0x64>)
 80023ea:	f00b fad5 	bl	800d998 <HAL_SPI_Init>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80023f4:	f7ff fd84 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80023f8:	bf00      	nop
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	20006024 	.word	0x20006024
 8002400:	40003800 	.word	0x40003800

08002404 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002408:	4b17      	ldr	r3, [pc, #92]	; (8002468 <MX_SPI4_Init+0x64>)
 800240a:	4a18      	ldr	r2, [pc, #96]	; (800246c <MX_SPI4_Init+0x68>)
 800240c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800240e:	4b16      	ldr	r3, [pc, #88]	; (8002468 <MX_SPI4_Init+0x64>)
 8002410:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002414:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002416:	4b14      	ldr	r3, [pc, #80]	; (8002468 <MX_SPI4_Init+0x64>)
 8002418:	2200      	movs	r2, #0
 800241a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800241c:	4b12      	ldr	r3, [pc, #72]	; (8002468 <MX_SPI4_Init+0x64>)
 800241e:	2200      	movs	r2, #0
 8002420:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002422:	4b11      	ldr	r3, [pc, #68]	; (8002468 <MX_SPI4_Init+0x64>)
 8002424:	2200      	movs	r2, #0
 8002426:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002428:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <MX_SPI4_Init+0x64>)
 800242a:	2200      	movs	r2, #0
 800242c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800242e:	4b0e      	ldr	r3, [pc, #56]	; (8002468 <MX_SPI4_Init+0x64>)
 8002430:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002434:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002436:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <MX_SPI4_Init+0x64>)
 8002438:	2200      	movs	r2, #0
 800243a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800243c:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <MX_SPI4_Init+0x64>)
 800243e:	2200      	movs	r2, #0
 8002440:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002442:	4b09      	ldr	r3, [pc, #36]	; (8002468 <MX_SPI4_Init+0x64>)
 8002444:	2200      	movs	r2, #0
 8002446:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002448:	4b07      	ldr	r3, [pc, #28]	; (8002468 <MX_SPI4_Init+0x64>)
 800244a:	2200      	movs	r2, #0
 800244c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 800244e:	4b06      	ldr	r3, [pc, #24]	; (8002468 <MX_SPI4_Init+0x64>)
 8002450:	220a      	movs	r2, #10
 8002452:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002454:	4804      	ldr	r0, [pc, #16]	; (8002468 <MX_SPI4_Init+0x64>)
 8002456:	f00b fa9f 	bl	800d998 <HAL_SPI_Init>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8002460:	f7ff fd4e 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}
 8002468:	200060d4 	.word	0x200060d4
 800246c:	40013400 	.word	0x40013400

08002470 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8002474:	4b17      	ldr	r3, [pc, #92]	; (80024d4 <MX_SPI5_Init+0x64>)
 8002476:	4a18      	ldr	r2, [pc, #96]	; (80024d8 <MX_SPI5_Init+0x68>)
 8002478:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800247a:	4b16      	ldr	r3, [pc, #88]	; (80024d4 <MX_SPI5_Init+0x64>)
 800247c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002480:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002482:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <MX_SPI5_Init+0x64>)
 8002484:	2200      	movs	r2, #0
 8002486:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002488:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <MX_SPI5_Init+0x64>)
 800248a:	2200      	movs	r2, #0
 800248c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800248e:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <MX_SPI5_Init+0x64>)
 8002490:	2200      	movs	r2, #0
 8002492:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002494:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <MX_SPI5_Init+0x64>)
 8002496:	2200      	movs	r2, #0
 8002498:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800249a:	4b0e      	ldr	r3, [pc, #56]	; (80024d4 <MX_SPI5_Init+0x64>)
 800249c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024a0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024a2:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <MX_SPI5_Init+0x64>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024a8:	4b0a      	ldr	r3, [pc, #40]	; (80024d4 <MX_SPI5_Init+0x64>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80024ae:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <MX_SPI5_Init+0x64>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024b4:	4b07      	ldr	r3, [pc, #28]	; (80024d4 <MX_SPI5_Init+0x64>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80024ba:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <MX_SPI5_Init+0x64>)
 80024bc:	220a      	movs	r2, #10
 80024be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80024c0:	4804      	ldr	r0, [pc, #16]	; (80024d4 <MX_SPI5_Init+0x64>)
 80024c2:	f00b fa69 	bl	800d998 <HAL_SPI_Init>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80024cc:	f7ff fd18 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80024d0:	bf00      	nop
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	2000607c 	.word	0x2000607c
 80024d8:	40015000 	.word	0x40015000

080024dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08e      	sub	sp, #56	; 0x38
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	60da      	str	r2, [r3, #12]
 80024f2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a4c      	ldr	r2, [pc, #304]	; (800262c <HAL_SPI_MspInit+0x150>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d12d      	bne.n	800255a <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	623b      	str	r3, [r7, #32]
 8002502:	4b4b      	ldr	r3, [pc, #300]	; (8002630 <HAL_SPI_MspInit+0x154>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	4a4a      	ldr	r2, [pc, #296]	; (8002630 <HAL_SPI_MspInit+0x154>)
 8002508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800250c:	6413      	str	r3, [r2, #64]	; 0x40
 800250e:	4b48      	ldr	r3, [pc, #288]	; (8002630 <HAL_SPI_MspInit+0x154>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002516:	623b      	str	r3, [r7, #32]
 8002518:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	61fb      	str	r3, [r7, #28]
 800251e:	4b44      	ldr	r3, [pc, #272]	; (8002630 <HAL_SPI_MspInit+0x154>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	4a43      	ldr	r2, [pc, #268]	; (8002630 <HAL_SPI_MspInit+0x154>)
 8002524:	f043 0302 	orr.w	r3, r3, #2
 8002528:	6313      	str	r3, [r2, #48]	; 0x30
 800252a:	4b41      	ldr	r3, [pc, #260]	; (8002630 <HAL_SPI_MspInit+0x154>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	61fb      	str	r3, [r7, #28]
 8002534:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002536:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253c:	2302      	movs	r3, #2
 800253e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002544:	2303      	movs	r3, #3
 8002546:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002548:	2305      	movs	r3, #5
 800254a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800254c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002550:	4619      	mov	r1, r3
 8002552:	4838      	ldr	r0, [pc, #224]	; (8002634 <HAL_SPI_MspInit+0x158>)
 8002554:	f007 fa78 	bl	8009a48 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8002558:	e064      	b.n	8002624 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI4)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a36      	ldr	r2, [pc, #216]	; (8002638 <HAL_SPI_MspInit+0x15c>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d12d      	bne.n	80025c0 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002564:	2300      	movs	r3, #0
 8002566:	61bb      	str	r3, [r7, #24]
 8002568:	4b31      	ldr	r3, [pc, #196]	; (8002630 <HAL_SPI_MspInit+0x154>)
 800256a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256c:	4a30      	ldr	r2, [pc, #192]	; (8002630 <HAL_SPI_MspInit+0x154>)
 800256e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002572:	6453      	str	r3, [r2, #68]	; 0x44
 8002574:	4b2e      	ldr	r3, [pc, #184]	; (8002630 <HAL_SPI_MspInit+0x154>)
 8002576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002578:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800257c:	61bb      	str	r3, [r7, #24]
 800257e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	4b2a      	ldr	r3, [pc, #168]	; (8002630 <HAL_SPI_MspInit+0x154>)
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002588:	4a29      	ldr	r2, [pc, #164]	; (8002630 <HAL_SPI_MspInit+0x154>)
 800258a:	f043 0310 	orr.w	r3, r3, #16
 800258e:	6313      	str	r3, [r2, #48]	; 0x30
 8002590:	4b27      	ldr	r3, [pc, #156]	; (8002630 <HAL_SPI_MspInit+0x154>)
 8002592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002594:	f003 0310 	and.w	r3, r3, #16
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800259c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a2:	2302      	movs	r3, #2
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025aa:	2303      	movs	r3, #3
 80025ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80025ae:	2305      	movs	r3, #5
 80025b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025b6:	4619      	mov	r1, r3
 80025b8:	4820      	ldr	r0, [pc, #128]	; (800263c <HAL_SPI_MspInit+0x160>)
 80025ba:	f007 fa45 	bl	8009a48 <HAL_GPIO_Init>
}
 80025be:	e031      	b.n	8002624 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI5)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a1e      	ldr	r2, [pc, #120]	; (8002640 <HAL_SPI_MspInit+0x164>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d12c      	bne.n	8002624 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	4b18      	ldr	r3, [pc, #96]	; (8002630 <HAL_SPI_MspInit+0x154>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d2:	4a17      	ldr	r2, [pc, #92]	; (8002630 <HAL_SPI_MspInit+0x154>)
 80025d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025d8:	6453      	str	r3, [r2, #68]	; 0x44
 80025da:	4b15      	ldr	r3, [pc, #84]	; (8002630 <HAL_SPI_MspInit+0x154>)
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	4b11      	ldr	r3, [pc, #68]	; (8002630 <HAL_SPI_MspInit+0x154>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	4a10      	ldr	r2, [pc, #64]	; (8002630 <HAL_SPI_MspInit+0x154>)
 80025f0:	f043 0320 	orr.w	r3, r3, #32
 80025f4:	6313      	str	r3, [r2, #48]	; 0x30
 80025f6:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <HAL_SPI_MspInit+0x154>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f003 0320 	and.w	r3, r3, #32
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002602:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002606:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002608:	2302      	movs	r3, #2
 800260a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002610:	2303      	movs	r3, #3
 8002612:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002614:	2305      	movs	r3, #5
 8002616:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800261c:	4619      	mov	r1, r3
 800261e:	4809      	ldr	r0, [pc, #36]	; (8002644 <HAL_SPI_MspInit+0x168>)
 8002620:	f007 fa12 	bl	8009a48 <HAL_GPIO_Init>
}
 8002624:	bf00      	nop
 8002626:	3738      	adds	r7, #56	; 0x38
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40003800 	.word	0x40003800
 8002630:	40023800 	.word	0x40023800
 8002634:	40020400 	.word	0x40020400
 8002638:	40013400 	.word	0x40013400
 800263c:	40021000 	.word	0x40021000
 8002640:	40015000 	.word	0x40015000
 8002644:	40021400 	.word	0x40021400

08002648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	607b      	str	r3, [r7, #4]
 8002652:	4b12      	ldr	r3, [pc, #72]	; (800269c <HAL_MspInit+0x54>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	4a11      	ldr	r2, [pc, #68]	; (800269c <HAL_MspInit+0x54>)
 8002658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800265c:	6453      	str	r3, [r2, #68]	; 0x44
 800265e:	4b0f      	ldr	r3, [pc, #60]	; (800269c <HAL_MspInit+0x54>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002666:	607b      	str	r3, [r7, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	603b      	str	r3, [r7, #0]
 800266e:	4b0b      	ldr	r3, [pc, #44]	; (800269c <HAL_MspInit+0x54>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	4a0a      	ldr	r2, [pc, #40]	; (800269c <HAL_MspInit+0x54>)
 8002674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002678:	6413      	str	r3, [r2, #64]	; 0x40
 800267a:	4b08      	ldr	r3, [pc, #32]	; (800269c <HAL_MspInit+0x54>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002682:	603b      	str	r3, [r7, #0]
 8002684:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002686:	2200      	movs	r2, #0
 8002688:	210f      	movs	r1, #15
 800268a:	f06f 0001 	mvn.w	r0, #1
 800268e:	f007 f9a3 	bl	80099d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40023800 	.word	0x40023800

080026a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08c      	sub	sp, #48	; 0x30
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80026a8:	2300      	movs	r3, #0
 80026aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80026b0:	2200      	movs	r2, #0
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	2036      	movs	r0, #54	; 0x36
 80026b6:	f007 f98f 	bl	80099d8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80026ba:	2036      	movs	r0, #54	; 0x36
 80026bc:	f007 f9a8 	bl	8009a10 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80026c0:	2300      	movs	r3, #0
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	4b1f      	ldr	r3, [pc, #124]	; (8002744 <HAL_InitTick+0xa4>)
 80026c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c8:	4a1e      	ldr	r2, [pc, #120]	; (8002744 <HAL_InitTick+0xa4>)
 80026ca:	f043 0310 	orr.w	r3, r3, #16
 80026ce:	6413      	str	r3, [r2, #64]	; 0x40
 80026d0:	4b1c      	ldr	r3, [pc, #112]	; (8002744 <HAL_InitTick+0xa4>)
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	f003 0310 	and.w	r3, r3, #16
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026dc:	f107 0210 	add.w	r2, r7, #16
 80026e0:	f107 0314 	add.w	r3, r7, #20
 80026e4:	4611      	mov	r1, r2
 80026e6:	4618      	mov	r0, r3
 80026e8:	f00a fa54 	bl	800cb94 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80026ec:	f00a fa2a 	bl	800cb44 <HAL_RCC_GetPCLK1Freq>
 80026f0:	4603      	mov	r3, r0
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80026f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f8:	4a13      	ldr	r2, [pc, #76]	; (8002748 <HAL_InitTick+0xa8>)
 80026fa:	fba2 2303 	umull	r2, r3, r2, r3
 80026fe:	0c9b      	lsrs	r3, r3, #18
 8002700:	3b01      	subs	r3, #1
 8002702:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002704:	4b11      	ldr	r3, [pc, #68]	; (800274c <HAL_InitTick+0xac>)
 8002706:	4a12      	ldr	r2, [pc, #72]	; (8002750 <HAL_InitTick+0xb0>)
 8002708:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800270a:	4b10      	ldr	r3, [pc, #64]	; (800274c <HAL_InitTick+0xac>)
 800270c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002710:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002712:	4a0e      	ldr	r2, [pc, #56]	; (800274c <HAL_InitTick+0xac>)
 8002714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002716:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002718:	4b0c      	ldr	r3, [pc, #48]	; (800274c <HAL_InitTick+0xac>)
 800271a:	2200      	movs	r2, #0
 800271c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800271e:	4b0b      	ldr	r3, [pc, #44]	; (800274c <HAL_InitTick+0xac>)
 8002720:	2200      	movs	r2, #0
 8002722:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002724:	4809      	ldr	r0, [pc, #36]	; (800274c <HAL_InitTick+0xac>)
 8002726:	f00b fedf 	bl	800e4e8 <HAL_TIM_Base_Init>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d104      	bne.n	800273a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002730:	4806      	ldr	r0, [pc, #24]	; (800274c <HAL_InitTick+0xac>)
 8002732:	f00b ff29 	bl	800e588 <HAL_TIM_Base_Start_IT>
 8002736:	4603      	mov	r3, r0
 8002738:	e000      	b.n	800273c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
}
 800273c:	4618      	mov	r0, r3
 800273e:	3730      	adds	r7, #48	; 0x30
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40023800 	.word	0x40023800
 8002748:	431bde83 	.word	0x431bde83
 800274c:	2000612c 	.word	0x2000612c
 8002750:	40001000 	.word	0x40001000

08002754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002758:	e7fe      	b.n	8002758 <NMI_Handler+0x4>

0800275a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800275e:	e7fe      	b.n	800275e <HardFault_Handler+0x4>

08002760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002764:	e7fe      	b.n	8002764 <MemManage_Handler+0x4>

08002766 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002766:	b480      	push	{r7}
 8002768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800276a:	e7fe      	b.n	800276a <BusFault_Handler+0x4>

0800276c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002770:	e7fe      	b.n	8002770 <UsageFault_Handler+0x4>

08002772 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002784:	2001      	movs	r0, #1
 8002786:	f007 fb3d 	bl	8009e04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002794:	4802      	ldr	r0, [pc, #8]	; (80027a0 <RTC_Alarm_IRQHandler+0x10>)
 8002796:	f00a ff1b 	bl	800d5d0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20006004 	.word	0x20006004

080027a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027a8:	4802      	ldr	r0, [pc, #8]	; (80027b4 <TIM6_DAC_IRQHandler+0x10>)
 80027aa:	f00c f8ef 	bl	800e98c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	2000612c 	.word	0x2000612c

080027b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80027bc:	4802      	ldr	r0, [pc, #8]	; (80027c8 <OTG_FS_IRQHandler+0x10>)
 80027be:	f008 fd05 	bl	800b1cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20008944 	.word	0x20008944

080027cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027d0:	4b06      	ldr	r3, [pc, #24]	; (80027ec <SystemInit+0x20>)
 80027d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d6:	4a05      	ldr	r2, [pc, #20]	; (80027ec <SystemInit+0x20>)
 80027d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027e0:	bf00      	nop
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08e      	sub	sp, #56	; 0x38
 80027f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	605a      	str	r2, [r3, #4]
 8002800:	609a      	str	r2, [r3, #8]
 8002802:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002804:	f107 0320 	add.w	r3, r7, #32
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800280e:	1d3b      	adds	r3, r7, #4
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	60da      	str	r2, [r3, #12]
 800281a:	611a      	str	r2, [r3, #16]
 800281c:	615a      	str	r2, [r3, #20]
 800281e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002820:	4b2d      	ldr	r3, [pc, #180]	; (80028d8 <MX_TIM2_Init+0xe8>)
 8002822:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002826:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8002828:	4b2b      	ldr	r3, [pc, #172]	; (80028d8 <MX_TIM2_Init+0xe8>)
 800282a:	2259      	movs	r2, #89	; 0x59
 800282c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800282e:	4b2a      	ldr	r3, [pc, #168]	; (80028d8 <MX_TIM2_Init+0xe8>)
 8002830:	2200      	movs	r2, #0
 8002832:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 8002834:	4b28      	ldr	r3, [pc, #160]	; (80028d8 <MX_TIM2_Init+0xe8>)
 8002836:	f240 128f 	movw	r2, #399	; 0x18f
 800283a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800283c:	4b26      	ldr	r3, [pc, #152]	; (80028d8 <MX_TIM2_Init+0xe8>)
 800283e:	2200      	movs	r2, #0
 8002840:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002842:	4b25      	ldr	r3, [pc, #148]	; (80028d8 <MX_TIM2_Init+0xe8>)
 8002844:	2200      	movs	r2, #0
 8002846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002848:	4823      	ldr	r0, [pc, #140]	; (80028d8 <MX_TIM2_Init+0xe8>)
 800284a:	f00b fe4d 	bl	800e4e8 <HAL_TIM_Base_Init>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002854:	f7ff fb54 	bl	8001f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800285c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800285e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002862:	4619      	mov	r1, r3
 8002864:	481c      	ldr	r0, [pc, #112]	; (80028d8 <MX_TIM2_Init+0xe8>)
 8002866:	f00c fa5b 	bl	800ed20 <HAL_TIM_ConfigClockSource>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002870:	f7ff fb46 	bl	8001f00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002874:	4818      	ldr	r0, [pc, #96]	; (80028d8 <MX_TIM2_Init+0xe8>)
 8002876:	f00b fef7 	bl	800e668 <HAL_TIM_PWM_Init>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002880:	f7ff fb3e 	bl	8001f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002884:	2320      	movs	r3, #32
 8002886:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002888:	2300      	movs	r3, #0
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800288c:	f107 0320 	add.w	r3, r7, #32
 8002890:	4619      	mov	r1, r3
 8002892:	4811      	ldr	r0, [pc, #68]	; (80028d8 <MX_TIM2_Init+0xe8>)
 8002894:	f00c fe44 	bl	800f520 <HAL_TIMEx_MasterConfigSynchronization>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800289e:	f7ff fb2f 	bl	8001f00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028a2:	2360      	movs	r3, #96	; 0x60
 80028a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 80028a6:	2364      	movs	r3, #100	; 0x64
 80028a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028aa:	2300      	movs	r3, #0
 80028ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028b2:	1d3b      	adds	r3, r7, #4
 80028b4:	2208      	movs	r2, #8
 80028b6:	4619      	mov	r1, r3
 80028b8:	4807      	ldr	r0, [pc, #28]	; (80028d8 <MX_TIM2_Init+0xe8>)
 80028ba:	f00c f96f 	bl	800eb9c <HAL_TIM_PWM_ConfigChannel>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80028c4:	f7ff fb1c 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80028c8:	4803      	ldr	r0, [pc, #12]	; (80028d8 <MX_TIM2_Init+0xe8>)
 80028ca:	f000 f827 	bl	800291c <HAL_TIM_MspPostInit>

}
 80028ce:	bf00      	nop
 80028d0:	3738      	adds	r7, #56	; 0x38
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20006174 	.word	0x20006174

080028dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ec:	d10d      	bne.n	800290a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	4b09      	ldr	r3, [pc, #36]	; (8002918 <HAL_TIM_Base_MspInit+0x3c>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	4a08      	ldr	r2, [pc, #32]	; (8002918 <HAL_TIM_Base_MspInit+0x3c>)
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	6413      	str	r3, [r2, #64]	; 0x40
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_TIM_Base_MspInit+0x3c>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800290a:	bf00      	nop
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	40023800 	.word	0x40023800

0800291c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	f107 030c 	add.w	r3, r7, #12
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800293c:	d11d      	bne.n	800297a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	4b10      	ldr	r3, [pc, #64]	; (8002984 <HAL_TIM_MspPostInit+0x68>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	4a0f      	ldr	r2, [pc, #60]	; (8002984 <HAL_TIM_MspPostInit+0x68>)
 8002948:	f043 0301 	orr.w	r3, r3, #1
 800294c:	6313      	str	r3, [r2, #48]	; 0x30
 800294e:	4b0d      	ldr	r3, [pc, #52]	; (8002984 <HAL_TIM_MspPostInit+0x68>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	60bb      	str	r3, [r7, #8]
 8002958:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 800295a:	2304      	movs	r3, #4
 800295c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295e:	2302      	movs	r3, #2
 8002960:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	2300      	movs	r3, #0
 8002964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002966:	2300      	movs	r3, #0
 8002968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800296a:	2301      	movs	r3, #1
 800296c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 800296e:	f107 030c 	add.w	r3, r7, #12
 8002972:	4619      	mov	r1, r3
 8002974:	4804      	ldr	r0, [pc, #16]	; (8002988 <HAL_TIM_MspPostInit+0x6c>)
 8002976:	f007 f867 	bl	8009a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800297a:	bf00      	nop
 800297c:	3720      	adds	r7, #32
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40023800 	.word	0x40023800
 8002988:	40020000 	.word	0x40020000

0800298c <MX_UART8_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART8 init function */
void MX_UART8_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8002990:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <MX_UART8_Init+0x4c>)
 8002992:	4a12      	ldr	r2, [pc, #72]	; (80029dc <MX_UART8_Init+0x50>)
 8002994:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8002996:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <MX_UART8_Init+0x4c>)
 8002998:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800299c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800299e:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <MX_UART8_Init+0x4c>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80029a4:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <MX_UART8_Init+0x4c>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80029aa:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <MX_UART8_Init+0x4c>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80029b0:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <MX_UART8_Init+0x4c>)
 80029b2:	220c      	movs	r2, #12
 80029b4:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029b6:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <MX_UART8_Init+0x4c>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80029bc:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <MX_UART8_Init+0x4c>)
 80029be:	2200      	movs	r2, #0
 80029c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80029c2:	4805      	ldr	r0, [pc, #20]	; (80029d8 <MX_UART8_Init+0x4c>)
 80029c4:	f00c fe3c 	bl	800f640 <HAL_UART_Init>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 80029ce:	f7ff fa97 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20006200 	.word	0x20006200
 80029dc:	40007c00 	.word	0x40007c00

080029e0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80029e4:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <MX_USART3_UART_Init+0x4c>)
 80029e6:	4a12      	ldr	r2, [pc, #72]	; (8002a30 <MX_USART3_UART_Init+0x50>)
 80029e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80029ea:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <MX_USART3_UART_Init+0x4c>)
 80029ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80029f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029f2:	4b0e      	ldr	r3, [pc, #56]	; (8002a2c <MX_USART3_UART_Init+0x4c>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80029f8:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <MX_USART3_UART_Init+0x4c>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80029fe:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <MX_USART3_UART_Init+0x4c>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a04:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <MX_USART3_UART_Init+0x4c>)
 8002a06:	220c      	movs	r2, #12
 8002a08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a0a:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <MX_USART3_UART_Init+0x4c>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a10:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <MX_USART3_UART_Init+0x4c>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a16:	4805      	ldr	r0, [pc, #20]	; (8002a2c <MX_USART3_UART_Init+0x4c>)
 8002a18:	f00c fe12 	bl	800f640 <HAL_UART_Init>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002a22:	f7ff fa6d 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	200061bc 	.word	0x200061bc
 8002a30:	40004800 	.word	0x40004800

08002a34 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002a38:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <MX_USART6_UART_Init+0x4c>)
 8002a3a:	4a12      	ldr	r2, [pc, #72]	; (8002a84 <MX_USART6_UART_Init+0x50>)
 8002a3c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002a3e:	4b10      	ldr	r3, [pc, #64]	; (8002a80 <MX_USART6_UART_Init+0x4c>)
 8002a40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a44:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002a46:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <MX_USART6_UART_Init+0x4c>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <MX_USART6_UART_Init+0x4c>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002a52:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <MX_USART6_UART_Init+0x4c>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002a58:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <MX_USART6_UART_Init+0x4c>)
 8002a5a:	220c      	movs	r2, #12
 8002a5c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a5e:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <MX_USART6_UART_Init+0x4c>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a64:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <MX_USART6_UART_Init+0x4c>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002a6a:	4805      	ldr	r0, [pc, #20]	; (8002a80 <MX_USART6_UART_Init+0x4c>)
 8002a6c:	f00c fde8 	bl	800f640 <HAL_UART_Init>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002a76:	f7ff fa43 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002a7a:	bf00      	nop
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20006244 	.word	0x20006244
 8002a84:	40011400 	.word	0x40011400

08002a88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08e      	sub	sp, #56	; 0x38
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	60da      	str	r2, [r3, #12]
 8002a9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART8)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a4b      	ldr	r2, [pc, #300]	; (8002bd4 <HAL_UART_MspInit+0x14c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d12c      	bne.n	8002b04 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	623b      	str	r3, [r7, #32]
 8002aae:	4b4a      	ldr	r3, [pc, #296]	; (8002bd8 <HAL_UART_MspInit+0x150>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	4a49      	ldr	r2, [pc, #292]	; (8002bd8 <HAL_UART_MspInit+0x150>)
 8002ab4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aba:	4b47      	ldr	r3, [pc, #284]	; (8002bd8 <HAL_UART_MspInit+0x150>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ac2:	623b      	str	r3, [r7, #32]
 8002ac4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
 8002aca:	4b43      	ldr	r3, [pc, #268]	; (8002bd8 <HAL_UART_MspInit+0x150>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	4a42      	ldr	r2, [pc, #264]	; (8002bd8 <HAL_UART_MspInit+0x150>)
 8002ad0:	f043 0310 	orr.w	r3, r3, #16
 8002ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad6:	4b40      	ldr	r3, [pc, #256]	; (8002bd8 <HAL_UART_MspInit+0x150>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	f003 0310 	and.w	r3, r3, #16
 8002ade:	61fb      	str	r3, [r7, #28]
 8002ae0:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aee:	2303      	movs	r3, #3
 8002af0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002af2:	2308      	movs	r3, #8
 8002af4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002afa:	4619      	mov	r1, r3
 8002afc:	4837      	ldr	r0, [pc, #220]	; (8002bdc <HAL_UART_MspInit+0x154>)
 8002afe:	f006 ffa3 	bl	8009a48 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002b02:	e063      	b.n	8002bcc <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART3)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a35      	ldr	r2, [pc, #212]	; (8002be0 <HAL_UART_MspInit+0x158>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d12d      	bne.n	8002b6a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61bb      	str	r3, [r7, #24]
 8002b12:	4b31      	ldr	r3, [pc, #196]	; (8002bd8 <HAL_UART_MspInit+0x150>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	4a30      	ldr	r2, [pc, #192]	; (8002bd8 <HAL_UART_MspInit+0x150>)
 8002b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1e:	4b2e      	ldr	r3, [pc, #184]	; (8002bd8 <HAL_UART_MspInit+0x150>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b26:	61bb      	str	r3, [r7, #24]
 8002b28:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]
 8002b2e:	4b2a      	ldr	r3, [pc, #168]	; (8002bd8 <HAL_UART_MspInit+0x150>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	4a29      	ldr	r2, [pc, #164]	; (8002bd8 <HAL_UART_MspInit+0x150>)
 8002b34:	f043 0308 	orr.w	r3, r3, #8
 8002b38:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3a:	4b27      	ldr	r3, [pc, #156]	; (8002bd8 <HAL_UART_MspInit+0x150>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8002b46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b54:	2303      	movs	r3, #3
 8002b56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b58:	2307      	movs	r3, #7
 8002b5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b60:	4619      	mov	r1, r3
 8002b62:	4820      	ldr	r0, [pc, #128]	; (8002be4 <HAL_UART_MspInit+0x15c>)
 8002b64:	f006 ff70 	bl	8009a48 <HAL_GPIO_Init>
}
 8002b68:	e030      	b.n	8002bcc <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART6)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a1e      	ldr	r2, [pc, #120]	; (8002be8 <HAL_UART_MspInit+0x160>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d12b      	bne.n	8002bcc <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002b74:	2300      	movs	r3, #0
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	4b17      	ldr	r3, [pc, #92]	; (8002bd8 <HAL_UART_MspInit+0x150>)
 8002b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7c:	4a16      	ldr	r2, [pc, #88]	; (8002bd8 <HAL_UART_MspInit+0x150>)
 8002b7e:	f043 0320 	orr.w	r3, r3, #32
 8002b82:	6453      	str	r3, [r2, #68]	; 0x44
 8002b84:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <HAL_UART_MspInit+0x150>)
 8002b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b88:	f003 0320 	and.w	r3, r3, #32
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b90:	2300      	movs	r3, #0
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <HAL_UART_MspInit+0x150>)
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	4a0f      	ldr	r2, [pc, #60]	; (8002bd8 <HAL_UART_MspInit+0x150>)
 8002b9a:	f043 0304 	orr.w	r3, r3, #4
 8002b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba0:	4b0d      	ldr	r3, [pc, #52]	; (8002bd8 <HAL_UART_MspInit+0x150>)
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8002bac:	23c0      	movs	r3, #192	; 0xc0
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002bbc:	2308      	movs	r3, #8
 8002bbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4809      	ldr	r0, [pc, #36]	; (8002bec <HAL_UART_MspInit+0x164>)
 8002bc8:	f006 ff3e 	bl	8009a48 <HAL_GPIO_Init>
}
 8002bcc:	bf00      	nop
 8002bce:	3738      	adds	r7, #56	; 0x38
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40007c00 	.word	0x40007c00
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	40004800 	.word	0x40004800
 8002be4:	40020c00 	.word	0x40020c00
 8002be8:	40011400 	.word	0x40011400
 8002bec:	40020800 	.word	0x40020800

08002bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002bf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002bf4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002bf6:	e003      	b.n	8002c00 <LoopCopyDataInit>

08002bf8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002bf8:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002bfa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002bfc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002bfe:	3104      	adds	r1, #4

08002c00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c00:	480b      	ldr	r0, [pc, #44]	; (8002c30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c02:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c08:	d3f6      	bcc.n	8002bf8 <CopyDataInit>
  ldr  r2, =_sbss
 8002c0a:	4a0b      	ldr	r2, [pc, #44]	; (8002c38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c0c:	e002      	b.n	8002c14 <LoopFillZerobss>

08002c0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c10:	f842 3b04 	str.w	r3, [r2], #4

08002c14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c14:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c18:	d3f9      	bcc.n	8002c0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c1a:	f7ff fdd7 	bl	80027cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c1e:	f017 f923 	bl	8019e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c22:	f7ff f873 	bl	8001d0c <main>
  bx  lr    
 8002c26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c28:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002c2c:	0802267c 	.word	0x0802267c
  ldr  r0, =_sdata
 8002c30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002c34:	20000434 	.word	0x20000434
  ldr  r2, =_sbss
 8002c38:	20000434 	.word	0x20000434
  ldr  r3, = _ebss
 8002c3c:	20008d5c 	.word	0x20008d5c

08002c40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c40:	e7fe      	b.n	8002c40 <ADC_IRQHandler>
	...

08002c44 <MRT_external_flash_Init>:


//**************************************************//
//FUNCTIONS

void MRT_external_flash_Init(void){
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0

	for (int i = 0; i < NB_OF_FLAGS; i++){
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	607b      	str	r3, [r7, #4]
 8002c4e:	e007      	b.n	8002c60 <MRT_external_flash_Init+0x1c>
		FLAGS_NULL_BUFFER[i] = 0; //Setup the flags null buffer for the correct number of values
 8002c50:	4a0e      	ldr	r2, [pc, #56]	; (8002c8c <MRT_external_flash_Init+0x48>)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4413      	add	r3, r2
 8002c56:	2200      	movs	r2, #0
 8002c58:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	607b      	str	r3, [r7, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	ddf4      	ble.n	8002c50 <MRT_external_flash_Init+0xc>
	}

	if (!W25qxx_Init()) {
 8002c66:	f000 fc71 	bl	800354c <W25qxx_Init>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	f083 0301 	eor.w	r3, r3, #1
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <MRT_external_flash_Init+0x36>
		Error_Handler(); // hangs and blinks LEDF
 8002c76:	f7ff f943 	bl	8001f00 <Error_Handler>
	}
	MRT_check_for_wake_up(); //Needs to be called before getFlags() and after the W25xx_Init()
 8002c7a:	f7ff fa45 	bl	8002108 <MRT_check_for_wake_up>
	MRT_get_flags();
 8002c7e:	f000 f807 	bl	8002c90 <MRT_get_flags>
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20006288 	.word	0x20006288

08002c90 <MRT_get_flags>:




void MRT_get_flags(void){
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0

	//Retrieve flags
	W25qxx_ReadSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002c94:	2305      	movs	r3, #5
 8002c96:	2200      	movs	r2, #0
 8002c98:	2101      	movs	r1, #1
 8002c9a:	486a      	ldr	r0, [pc, #424]	; (8002e44 <MRT_get_flags+0x1b4>)
 8002c9c:	f001 f830 	bl	8003d00 <W25qxx_ReadSector>

	//Retrieve RTC time (last recorded)
	W25qxx_ReadSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2102      	movs	r1, #2
 8002ca6:	4868      	ldr	r0, [pc, #416]	; (8002e48 <MRT_get_flags+0x1b8>)
 8002ca8:	f001 f82a 	bl	8003d00 <W25qxx_ReadSector>

	//If RTC detected a wake up, update the flash memory
	if (wu_flag == 1){
 8002cac:	4b67      	ldr	r3, [pc, #412]	; (8002e4c <MRT_get_flags+0x1bc>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d10e      	bne.n	8002cd2 <MRT_get_flags+0x42>
		//Write the new number of wake up to external flash
		flash_flags_buffer[WU_FLAG_OFFSET] = flash_flags_buffer[WU_FLAG_OFFSET] + 1; //Update number of wake up
 8002cb4:	4b63      	ldr	r3, [pc, #396]	; (8002e44 <MRT_get_flags+0x1b4>)
 8002cb6:	785b      	ldrb	r3, [r3, #1]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	4b61      	ldr	r3, [pc, #388]	; (8002e44 <MRT_get_flags+0x1b4>)
 8002cbe:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 8002cc0:	2001      	movs	r0, #1
 8002cc2:	f000 fd95 	bl	80037f0 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002cc6:	2305      	movs	r3, #5
 8002cc8:	2200      	movs	r2, #0
 8002cca:	2101      	movs	r1, #1
 8002ccc:	485d      	ldr	r0, [pc, #372]	; (8002e44 <MRT_get_flags+0x1b4>)
 8002cce:	f000 fed9 	bl	8003a84 <W25qxx_WriteSector>
	}

	//Assign each value read to their variable
	 MRT_update_flags_values();
 8002cd2:	f000 f8cb 	bl	8002e6c <MRT_update_flags_values>


	//Check flags values
	//Reset flag
	if (reset_flag != 0 && reset_flag !=1){ //If random value (none was written)
 8002cd6:	4b5e      	ldr	r3, [pc, #376]	; (8002e50 <MRT_get_flags+0x1c0>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d013      	beq.n	8002d06 <MRT_get_flags+0x76>
 8002cde:	4b5c      	ldr	r3, [pc, #368]	; (8002e50 <MRT_get_flags+0x1c0>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d00f      	beq.n	8002d06 <MRT_get_flags+0x76>
		reset_flag = 0;
 8002ce6:	4b5a      	ldr	r3, [pc, #360]	; (8002e50 <MRT_get_flags+0x1c0>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 8002cec:	4b58      	ldr	r3, [pc, #352]	; (8002e50 <MRT_get_flags+0x1c0>)
 8002cee:	781a      	ldrb	r2, [r3, #0]
 8002cf0:	4b54      	ldr	r3, [pc, #336]	; (8002e44 <MRT_get_flags+0x1b4>)
 8002cf2:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(1);
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	f000 fd7b 	bl	80037f0 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002cfa:	2305      	movs	r3, #5
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	2101      	movs	r1, #1
 8002d00:	4850      	ldr	r0, [pc, #320]	; (8002e44 <MRT_get_flags+0x1b4>)
 8002d02:	f000 febf 	bl	8003a84 <W25qxx_WriteSector>
	}

	//Wake up flag
	if (wu_flag != 0 && wu_flag !=1 && wu_flag !=2){ //If random value (none was written)
 8002d06:	4b51      	ldr	r3, [pc, #324]	; (8002e4c <MRT_get_flags+0x1bc>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d017      	beq.n	8002d3e <MRT_get_flags+0xae>
 8002d0e:	4b4f      	ldr	r3, [pc, #316]	; (8002e4c <MRT_get_flags+0x1bc>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d013      	beq.n	8002d3e <MRT_get_flags+0xae>
 8002d16:	4b4d      	ldr	r3, [pc, #308]	; (8002e4c <MRT_get_flags+0x1bc>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d00f      	beq.n	8002d3e <MRT_get_flags+0xae>
		wu_flag = 0;
 8002d1e:	4b4b      	ldr	r3, [pc, #300]	; (8002e4c <MRT_get_flags+0x1bc>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[WU_FLAG_OFFSET] = wu_flag;
 8002d24:	4b49      	ldr	r3, [pc, #292]	; (8002e4c <MRT_get_flags+0x1bc>)
 8002d26:	781a      	ldrb	r2, [r3, #0]
 8002d28:	4b46      	ldr	r3, [pc, #280]	; (8002e44 <MRT_get_flags+0x1b4>)
 8002d2a:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 8002d2c:	2001      	movs	r0, #1
 8002d2e:	f000 fd5f 	bl	80037f0 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002d32:	2305      	movs	r3, #5
 8002d34:	2200      	movs	r2, #0
 8002d36:	2101      	movs	r1, #1
 8002d38:	4842      	ldr	r0, [pc, #264]	; (8002e44 <MRT_get_flags+0x1b4>)
 8002d3a:	f000 fea3 	bl	8003a84 <W25qxx_WriteSector>
	}

	//IWDG flag
	if (iwdg_flag != 0 && iwdg_flag !=1){ //If random value (none was written)
 8002d3e:	4b45      	ldr	r3, [pc, #276]	; (8002e54 <MRT_get_flags+0x1c4>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d013      	beq.n	8002d6e <MRT_get_flags+0xde>
 8002d46:	4b43      	ldr	r3, [pc, #268]	; (8002e54 <MRT_get_flags+0x1c4>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d00f      	beq.n	8002d6e <MRT_get_flags+0xde>
		iwdg_flag = 0;
 8002d4e:	4b41      	ldr	r3, [pc, #260]	; (8002e54 <MRT_get_flags+0x1c4>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8002d54:	4b3f      	ldr	r3, [pc, #252]	; (8002e54 <MRT_get_flags+0x1c4>)
 8002d56:	781a      	ldrb	r2, [r3, #0]
 8002d58:	4b3a      	ldr	r3, [pc, #232]	; (8002e44 <MRT_get_flags+0x1b4>)
 8002d5a:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(1);
 8002d5c:	2001      	movs	r0, #1
 8002d5e:	f000 fd47 	bl	80037f0 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002d62:	2305      	movs	r3, #5
 8002d64:	2200      	movs	r2, #0
 8002d66:	2101      	movs	r1, #1
 8002d68:	4836      	ldr	r0, [pc, #216]	; (8002e44 <MRT_get_flags+0x1b4>)
 8002d6a:	f000 fe8b 	bl	8003a84 <W25qxx_WriteSector>
	}

	//Apogee flag
	if (apogee_flag != 0 && apogee_flag !=1){ //If random value (none was written)
 8002d6e:	4b3a      	ldr	r3, [pc, #232]	; (8002e58 <MRT_get_flags+0x1c8>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d013      	beq.n	8002d9e <MRT_get_flags+0x10e>
 8002d76:	4b38      	ldr	r3, [pc, #224]	; (8002e58 <MRT_get_flags+0x1c8>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d00f      	beq.n	8002d9e <MRT_get_flags+0x10e>
		apogee_flag = 0;
 8002d7e:	4b36      	ldr	r3, [pc, #216]	; (8002e58 <MRT_get_flags+0x1c8>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[APOGEE_FLAG_OFFSET] = apogee_flag;
 8002d84:	4b34      	ldr	r3, [pc, #208]	; (8002e58 <MRT_get_flags+0x1c8>)
 8002d86:	781a      	ldrb	r2, [r3, #0]
 8002d88:	4b2e      	ldr	r3, [pc, #184]	; (8002e44 <MRT_get_flags+0x1b4>)
 8002d8a:	70da      	strb	r2, [r3, #3]
		W25qxx_EraseSector(1);
 8002d8c:	2001      	movs	r0, #1
 8002d8e:	f000 fd2f 	bl	80037f0 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002d92:	2305      	movs	r3, #5
 8002d94:	2200      	movs	r2, #0
 8002d96:	2101      	movs	r1, #1
 8002d98:	482a      	ldr	r0, [pc, #168]	; (8002e44 <MRT_get_flags+0x1b4>)
 8002d9a:	f000 fe73 	bl	8003a84 <W25qxx_WriteSector>
	}

	//Ejection state flag
	if (!(ejection_state_flag >= 0 && ejection_state_flag <=4)){ //If random value (none was written)
 8002d9e:	4b2f      	ldr	r3, [pc, #188]	; (8002e5c <MRT_get_flags+0x1cc>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d90f      	bls.n	8002dc6 <MRT_get_flags+0x136>
		ejection_state_flag = 0;
 8002da6:	4b2d      	ldr	r3, [pc, #180]	; (8002e5c <MRT_get_flags+0x1cc>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[EJECTION_STATE_FLAG_OFFSET] = ejection_state_flag;
 8002dac:	4b2b      	ldr	r3, [pc, #172]	; (8002e5c <MRT_get_flags+0x1cc>)
 8002dae:	781a      	ldrb	r2, [r3, #0]
 8002db0:	4b24      	ldr	r3, [pc, #144]	; (8002e44 <MRT_get_flags+0x1b4>)
 8002db2:	711a      	strb	r2, [r3, #4]
		W25qxx_EraseSector(1);
 8002db4:	2001      	movs	r0, #1
 8002db6:	f000 fd1b 	bl	80037f0 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002dba:	2305      	movs	r3, #5
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	4820      	ldr	r0, [pc, #128]	; (8002e44 <MRT_get_flags+0x1b4>)
 8002dc2:	f000 fe5f 	bl	8003a84 <W25qxx_WriteSector>
	}


	//Check RTC time values
	//Hours
	if (!(prev_hours >= 0 && prev_hours < 24)){ //If random value (none was written)
 8002dc6:	4b26      	ldr	r3, [pc, #152]	; (8002e60 <MRT_get_flags+0x1d0>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b17      	cmp	r3, #23
 8002dcc:	d90f      	bls.n	8002dee <MRT_get_flags+0x15e>
		prev_hours = 0;
 8002dce:	4b24      	ldr	r3, [pc, #144]	; (8002e60 <MRT_get_flags+0x1d0>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_HOURS_OFFSET] = prev_hours;
 8002dd4:	4b22      	ldr	r3, [pc, #136]	; (8002e60 <MRT_get_flags+0x1d0>)
 8002dd6:	781a      	ldrb	r2, [r3, #0]
 8002dd8:	4b1b      	ldr	r3, [pc, #108]	; (8002e48 <MRT_get_flags+0x1b8>)
 8002dda:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(2);
 8002ddc:	2002      	movs	r0, #2
 8002dde:	f000 fd07 	bl	80037f0 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8002de2:	2303      	movs	r3, #3
 8002de4:	2200      	movs	r2, #0
 8002de6:	2102      	movs	r1, #2
 8002de8:	4817      	ldr	r0, [pc, #92]	; (8002e48 <MRT_get_flags+0x1b8>)
 8002dea:	f000 fe4b 	bl	8003a84 <W25qxx_WriteSector>
	}

	//Minutes
	if (!(prev_min >= 0 && prev_min < 60)){ //If random value (none was written)
 8002dee:	4b1d      	ldr	r3, [pc, #116]	; (8002e64 <MRT_get_flags+0x1d4>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b3b      	cmp	r3, #59	; 0x3b
 8002df4:	d90f      	bls.n	8002e16 <MRT_get_flags+0x186>
		prev_min = 0;
 8002df6:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <MRT_get_flags+0x1d4>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_MIN_OFFSET] = prev_min;
 8002dfc:	4b19      	ldr	r3, [pc, #100]	; (8002e64 <MRT_get_flags+0x1d4>)
 8002dfe:	781a      	ldrb	r2, [r3, #0]
 8002e00:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <MRT_get_flags+0x1b8>)
 8002e02:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(2);
 8002e04:	2002      	movs	r0, #2
 8002e06:	f000 fcf3 	bl	80037f0 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2102      	movs	r1, #2
 8002e10:	480d      	ldr	r0, [pc, #52]	; (8002e48 <MRT_get_flags+0x1b8>)
 8002e12:	f000 fe37 	bl	8003a84 <W25qxx_WriteSector>
	}

	//Seconds
	if (!(prev_sec >= 0 && prev_sec < 60)){ //If random value (none was written)
 8002e16:	4b14      	ldr	r3, [pc, #80]	; (8002e68 <MRT_get_flags+0x1d8>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b3b      	cmp	r3, #59	; 0x3b
 8002e1c:	d90f      	bls.n	8002e3e <MRT_get_flags+0x1ae>
		prev_sec = 0;
 8002e1e:	4b12      	ldr	r3, [pc, #72]	; (8002e68 <MRT_get_flags+0x1d8>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_SEC_OFFSET] = prev_sec;
 8002e24:	4b10      	ldr	r3, [pc, #64]	; (8002e68 <MRT_get_flags+0x1d8>)
 8002e26:	781a      	ldrb	r2, [r3, #0]
 8002e28:	4b07      	ldr	r3, [pc, #28]	; (8002e48 <MRT_get_flags+0x1b8>)
 8002e2a:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(2);
 8002e2c:	2002      	movs	r0, #2
 8002e2e:	f000 fcdf 	bl	80037f0 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8002e32:	2303      	movs	r3, #3
 8002e34:	2200      	movs	r2, #0
 8002e36:	2102      	movs	r1, #2
 8002e38:	4803      	ldr	r0, [pc, #12]	; (8002e48 <MRT_get_flags+0x1b8>)
 8002e3a:	f000 fe23 	bl	8003a84 <W25qxx_WriteSector>
	}
}
 8002e3e:	bf00      	nop
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20006290 	.word	0x20006290
 8002e48:	20006298 	.word	0x20006298
 8002e4c:	2000047d 	.word	0x2000047d
 8002e50:	2000047c 	.word	0x2000047c
 8002e54:	2000047e 	.word	0x2000047e
 8002e58:	2000047f 	.word	0x2000047f
 8002e5c:	20000480 	.word	0x20000480
 8002e60:	20000481 	.word	0x20000481
 8002e64:	20000482 	.word	0x20000482
 8002e68:	20000483 	.word	0x20000483

08002e6c <MRT_update_flags_values>:
		flash_time_buffer[i] = *flash_time[i];
	}
}


void MRT_update_flags_values(void){
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8002e72:	2300      	movs	r3, #0
 8002e74:	607b      	str	r3, [r7, #4]
 8002e76:	e00b      	b.n	8002e90 <MRT_update_flags_values+0x24>
		*flash_flags[i] = flash_flags_buffer[i];
 8002e78:	4a13      	ldr	r2, [pc, #76]	; (8002ec8 <MRT_update_flags_values+0x5c>)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e80:	4912      	ldr	r1, [pc, #72]	; (8002ecc <MRT_update_flags_values+0x60>)
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	440a      	add	r2, r1
 8002e86:	7812      	ldrb	r2, [r2, #0]
 8002e88:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	607b      	str	r3, [r7, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	ddf0      	ble.n	8002e78 <MRT_update_flags_values+0xc>
	}
	for (int i = 0; i < 3; i++){
 8002e96:	2300      	movs	r3, #0
 8002e98:	603b      	str	r3, [r7, #0]
 8002e9a:	e00b      	b.n	8002eb4 <MRT_update_flags_values+0x48>
		*flash_time[i] = flash_time_buffer[i];
 8002e9c:	4a0c      	ldr	r2, [pc, #48]	; (8002ed0 <MRT_update_flags_values+0x64>)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea4:	490b      	ldr	r1, [pc, #44]	; (8002ed4 <MRT_update_flags_values+0x68>)
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	440a      	add	r2, r1
 8002eaa:	7812      	ldrb	r2, [r2, #0]
 8002eac:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++){
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	ddf0      	ble.n	8002e9c <MRT_update_flags_values+0x30>
	}
}
 8002eba:	bf00      	nop
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	20000040 	.word	0x20000040
 8002ecc:	20006290 	.word	0x20006290
 8002ed0:	20000054 	.word	0x20000054
 8002ed4:	20006298 	.word	0x20006298

08002ed8 <myprintf>:


uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value);
void str2upper(char* string, char* upper);

void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 8002ed8:	b40f      	push	{r0, r1, r2, r3}
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b082      	sub	sp, #8
 8002ede:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8002ee0:	f107 0314 	add.w	r3, r7, #20
 8002ee4:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002eee:	480a      	ldr	r0, [pc, #40]	; (8002f18 <myprintf+0x40>)
 8002ef0:	f019 fef0 	bl	801ccd4 <vsniprintf>
  va_end(args);

  //CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
  HAL_UART_Transmit(&DEBUG_UART, (uint8_t*)buffer, strlen(buffer), -1);
 8002ef4:	4808      	ldr	r0, [pc, #32]	; (8002f18 <myprintf+0x40>)
 8002ef6:	f7fd f985 	bl	8000204 <strlen>
 8002efa:	4603      	mov	r3, r0
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	f04f 33ff 	mov.w	r3, #4294967295
 8002f02:	4905      	ldr	r1, [pc, #20]	; (8002f18 <myprintf+0x40>)
 8002f04:	4805      	ldr	r0, [pc, #20]	; (8002f1c <myprintf+0x44>)
 8002f06:	f00c fbe8 	bl	800f6da <HAL_UART_Transmit>

}
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f14:	b004      	add	sp, #16
 8002f16:	4770      	bx	lr
 8002f18:	20000488 	.word	0x20000488
 8002f1c:	20006200 	.word	0x20006200

08002f20 <sd_init_dynamic_filename>:
 * creates new file of form "[prefix][number].txt"
 * where the string composed of "[prefix][number]" is 8 characters long.
 *
 */
FRESULT sd_init_dynamic_filename(char *prefix, char *header_text, char* return_filename)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08a      	sub	sp, #40	; 0x28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
	FRESULT fres = f_mount(&FatFs, "", 1);
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	4932      	ldr	r1, [pc, #200]	; (8002ff8 <sd_init_dynamic_filename+0xd8>)
 8002f30:	4832      	ldr	r0, [pc, #200]	; (8002ffc <sd_init_dynamic_filename+0xdc>)
 8002f32:	f011 fdcd 	bl	8014ad0 <f_mount>
 8002f36:	4603      	mov	r3, r0
 8002f38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (fres != FR_OK) {
 8002f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d008      	beq.n	8002f56 <sd_init_dynamic_filename+0x36>
		myprintf("f_mount error (%i)\r\n", fres);
 8002f44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f48:	4619      	mov	r1, r3
 8002f4a:	482d      	ldr	r0, [pc, #180]	; (8003000 <sd_init_dynamic_filename+0xe0>)
 8002f4c:	f7ff ffc4 	bl	8002ed8 <myprintf>
		return fres;
 8002f50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f54:	e04b      	b.n	8002fee <sd_init_dynamic_filename+0xce>
	}

	// scan files on drive to figure out what suffix number is appropriate
	uint32_t max_used_value = 0;
 8002f56:	2300      	movs	r3, #0
 8002f58:	623b      	str	r3, [r7, #32]
	fres = scan_files("", prefix, &max_used_value);
 8002f5a:	f107 0320 	add.w	r3, r7, #32
 8002f5e:	461a      	mov	r2, r3
 8002f60:	68f9      	ldr	r1, [r7, #12]
 8002f62:	4825      	ldr	r0, [pc, #148]	; (8002ff8 <sd_init_dynamic_filename+0xd8>)
 8002f64:	f000 f884 	bl	8003070 <scan_files>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// create filename (max filename length in char array is 13 without LFN)
	char filename[13];
	sprintf(filename, "fc%06lu.txt", max_used_value + 1);
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	f107 0310 	add.w	r3, r7, #16
 8002f76:	4923      	ldr	r1, [pc, #140]	; (8003004 <sd_init_dynamic_filename+0xe4>)
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f018 fbef 	bl	801b75c <siprintf>
	return_filename = strcpy(return_filename, filename); // needed so that other functions can open the file!
 8002f7e:	f107 0310 	add.w	r3, r7, #16
 8002f82:	4619      	mov	r1, r3
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f018 fc87 	bl	801b898 <strcpy>
 8002f8a:	6078      	str	r0, [r7, #4]

	// open file (create file) on SD card
	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8002f8c:	f107 0310 	add.w	r3, r7, #16
 8002f90:	221a      	movs	r2, #26
 8002f92:	4619      	mov	r1, r3
 8002f94:	481c      	ldr	r0, [pc, #112]	; (8003008 <sd_init_dynamic_filename+0xe8>)
 8002f96:	f011 fdff 	bl	8014b98 <f_open>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (fres == FR_OK) {
 8002fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d11a      	bne.n	8002fde <sd_init_dynamic_filename+0xbe>
		myprintf("I was able to open filename.txt for writing\r\n");
 8002fa8:	4818      	ldr	r0, [pc, #96]	; (800300c <sd_init_dynamic_filename+0xec>)
 8002faa:	f7ff ff95 	bl	8002ed8 <myprintf>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
		return fres;
	}
	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8002fae:	4b16      	ldr	r3, [pc, #88]	; (8003008 <sd_init_dynamic_filename+0xe8>)
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4814      	ldr	r0, [pc, #80]	; (8003008 <sd_init_dynamic_filename+0xe8>)
 8002fb6:	f012 fa10 	bl	80153da <f_lseek>

	// save indicate start of new log session
	sprintf((char *)msg_buffer, "--- new logging session! ---\r\n");
 8002fba:	4915      	ldr	r1, [pc, #84]	; (8003010 <sd_init_dynamic_filename+0xf0>)
 8002fbc:	4815      	ldr	r0, [pc, #84]	; (8003014 <sd_init_dynamic_filename+0xf4>)
 8002fbe:	f018 fbcd 	bl	801b75c <siprintf>
	sd_write(&fil, msg_buffer);
 8002fc2:	4914      	ldr	r1, [pc, #80]	; (8003014 <sd_init_dynamic_filename+0xf4>)
 8002fc4:	4810      	ldr	r0, [pc, #64]	; (8003008 <sd_init_dynamic_filename+0xe8>)
 8002fc6:	f000 f829 	bl	800301c <sd_write>

	// save header row to indicate what the data is
	sd_write(&fil, (uint8_t *)header_text);
 8002fca:	68b9      	ldr	r1, [r7, #8]
 8002fcc:	480e      	ldr	r0, [pc, #56]	; (8003008 <sd_init_dynamic_filename+0xe8>)
 8002fce:	f000 f825 	bl	800301c <sd_write>
	f_close(&fil);
 8002fd2:	480d      	ldr	r0, [pc, #52]	; (8003008 <sd_init_dynamic_filename+0xe8>)
 8002fd4:	f012 f9d2 	bl	801537c <f_close>

	return fres;
 8002fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fdc:	e007      	b.n	8002fee <sd_init_dynamic_filename+0xce>
		myprintf("f_open error (%i)\r\n", fres);
 8002fde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	480c      	ldr	r0, [pc, #48]	; (8003018 <sd_init_dynamic_filename+0xf8>)
 8002fe6:	f7ff ff77 	bl	8002ed8 <myprintf>
		return fres;
 8002fea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3728      	adds	r7, #40	; 0x28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	080203e0 	.word	0x080203e0
 8002ffc:	2000629c 	.word	0x2000629c
 8003000:	080203e4 	.word	0x080203e4
 8003004:	08020460 	.word	0x08020460
 8003008:	20006ca4 	.word	0x20006ca4
 800300c:	080203fc 	.word	0x080203fc
 8003010:	08020440 	.word	0x08020440
 8003014:	200064d0 	.word	0x200064d0
 8003018:	0802042c 	.word	0x0802042c

0800301c <sd_write>:
 * @brief  write buffer to file on sd card.
 * @param  fp 		file to save to
 * @param  buffer	data to write to file
 */
int8_t sd_write(FIL* fp, uint8_t* buffer)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
	UINT bytesWrote;
	FRESULT fres = f_write(fp, buffer, strlen((char const *)buffer), &bytesWrote);
 8003026:	6838      	ldr	r0, [r7, #0]
 8003028:	f7fd f8ec 	bl	8000204 <strlen>
 800302c:	4602      	mov	r2, r0
 800302e:	f107 0308 	add.w	r3, r7, #8
 8003032:	6839      	ldr	r1, [r7, #0]
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f011 ff74 	bl	8014f22 <f_write>
 800303a:	4603      	mov	r3, r0
 800303c:	73fb      	strb	r3, [r7, #15]
	if (fres == FR_OK) {
 800303e:	7bfb      	ldrb	r3, [r7, #15]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d107      	bne.n	8003054 <sd_write+0x38>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	4619      	mov	r1, r3
 8003048:	4807      	ldr	r0, [pc, #28]	; (8003068 <sd_write+0x4c>)
 800304a:	f7ff ff45 	bl	8002ed8 <myprintf>
		return bytesWrote;
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	b25b      	sxtb	r3, r3
 8003052:	e004      	b.n	800305e <sd_write+0x42>
	} else {
		myprintf("f_write error (%i)\r\n");
 8003054:	4805      	ldr	r0, [pc, #20]	; (800306c <sd_write+0x50>)
 8003056:	f7ff ff3f 	bl	8002ed8 <myprintf>
		return -1;
 800305a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	0802046c 	.word	0x0802046c
 800306c:	08020490 	.word	0x08020490

08003070 <scan_files>:
FRESULT scan_files (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	char* prefix,	   /* prefix in the filename for our datafiles */
	uint32_t* max_used_value
)
{
 8003070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003072:	b099      	sub	sp, #100	; 0x64
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
 800307c:	466b      	mov	r3, sp
 800307e:	461d      	mov	r5, r3
    DIR dir;
//    UINT i;
    static FILINFO fno;

    // does not change so make it static
    uint8_t len_prefix = strlen(prefix);
 8003080:	68b8      	ldr	r0, [r7, #8]
 8003082:	f7fd f8bf 	bl	8000204 <strlen>
 8003086:	4603      	mov	r3, r0
 8003088:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    char prefix_upper[len_prefix];
 800308c:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 8003090:	4623      	mov	r3, r4
 8003092:	3b01      	subs	r3, #1
 8003094:	65bb      	str	r3, [r7, #88]	; 0x58
 8003096:	b2e0      	uxtb	r0, r4
 8003098:	f04f 0100 	mov.w	r1, #0
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	f04f 0300 	mov.w	r3, #0
 80030a4:	00cb      	lsls	r3, r1, #3
 80030a6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80030aa:	00c2      	lsls	r2, r0, #3
 80030ac:	b2e0      	uxtb	r0, r4
 80030ae:	f04f 0100 	mov.w	r1, #0
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	00cb      	lsls	r3, r1, #3
 80030bc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80030c0:	00c2      	lsls	r2, r0, #3
 80030c2:	4623      	mov	r3, r4
 80030c4:	3307      	adds	r3, #7
 80030c6:	08db      	lsrs	r3, r3, #3
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	ebad 0d03 	sub.w	sp, sp, r3
 80030ce:	466b      	mov	r3, sp
 80030d0:	3300      	adds	r3, #0
 80030d2:	657b      	str	r3, [r7, #84]	; 0x54
	str2upper(prefix, prefix_upper);
 80030d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030d6:	4619      	mov	r1, r3
 80030d8:	68b8      	ldr	r0, [r7, #8]
 80030da:	f000 f8ff 	bl	80032dc <str2upper>

	*max_used_value = 0; // initialize to known minimum value
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
	uint32_t num_files_fc = 0; // suffix on the files containing fc data already on sd card
 80030e4:	2300      	movs	r3, #0
 80030e6:	617b      	str	r3, [r7, #20]

    res = f_opendir(&dir, path);                       /* Open the directory */
 80030e8:	f107 0318 	add.w	r3, r7, #24
 80030ec:	68f9      	ldr	r1, [r7, #12]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f012 fbc6 	bl	8015880 <f_opendir>
 80030f4:	4603      	mov	r3, r0
 80030f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (res == FR_OK) {
 80030fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d16c      	bne.n	80031dc <scan_files+0x16c>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8003102:	f107 0318 	add.w	r3, r7, #24
 8003106:	4939      	ldr	r1, [pc, #228]	; (80031ec <scan_files+0x17c>)
 8003108:	4618      	mov	r0, r3
 800310a:	f012 fc5d 	bl	80159c8 <f_readdir>
 800310e:	4603      	mov	r3, r0
 8003110:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8003114:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003118:	2b00      	cmp	r3, #0
 800311a:	d15a      	bne.n	80031d2 <scan_files+0x162>
 800311c:	4b33      	ldr	r3, [pc, #204]	; (80031ec <scan_files+0x17c>)
 800311e:	7a5b      	ldrb	r3, [r3, #9]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d056      	beq.n	80031d2 <scan_files+0x162>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8003124:	4b31      	ldr	r3, [pc, #196]	; (80031ec <scan_files+0x17c>)
 8003126:	7a1b      	ldrb	r3, [r3, #8]
 8003128:	f003 0310 	and.w	r3, r3, #16
 800312c:	2b00      	cmp	r3, #0
 800312e:	d14e      	bne.n	80031ce <scan_files+0x15e>
//                i = strlen(path);
//                sprintf(&path[i], "/%s", fno.fname);
//                res = scan_files(path, prefix, max_used_value);    /* Enter the directory */
//                if (res != FR_OK) break;
//                path[i] = 0;
            } else {                                       /* It is a file. */
 8003130:	466b      	mov	r3, sp
 8003132:	461e      	mov	r6, r3
//                printf("%s/%s\n", path, fno.fname);

            	// check if filename contains parts of our standard prefix "FC000000.txt"
            	// but first convert to uppercase to make case insensitive

            	char fname_upper[strlen((char *)fno.fname)];
 8003134:	482e      	ldr	r0, [pc, #184]	; (80031f0 <scan_files+0x180>)
 8003136:	f7fd f865 	bl	8000204 <strlen>
 800313a:	4604      	mov	r4, r0
 800313c:	4623      	mov	r3, r4
 800313e:	3b01      	subs	r3, #1
 8003140:	653b      	str	r3, [r7, #80]	; 0x50
 8003142:	4620      	mov	r0, r4
 8003144:	f04f 0100 	mov.w	r1, #0
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	00cb      	lsls	r3, r1, #3
 8003152:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003156:	00c2      	lsls	r2, r0, #3
 8003158:	4620      	mov	r0, r4
 800315a:	f04f 0100 	mov.w	r1, #0
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	00cb      	lsls	r3, r1, #3
 8003168:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800316c:	00c2      	lsls	r2, r0, #3
 800316e:	1de3      	adds	r3, r4, #7
 8003170:	08db      	lsrs	r3, r3, #3
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	ebad 0d03 	sub.w	sp, sp, r3
 8003178:	466b      	mov	r3, sp
 800317a:	3300      	adds	r3, #0
 800317c:	64fb      	str	r3, [r7, #76]	; 0x4c
            	str2upper((char *)fno.fname, fname_upper);
 800317e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003180:	4619      	mov	r1, r3
 8003182:	481b      	ldr	r0, [pc, #108]	; (80031f0 <scan_files+0x180>)
 8003184:	f000 f8aa 	bl	80032dc <str2upper>

            	int8_t contains_prefix = strncmp(fno.fname, prefix_upper, len_prefix);
 8003188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800318a:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800318e:	4619      	mov	r1, r3
 8003190:	4817      	ldr	r0, [pc, #92]	; (80031f0 <scan_files+0x180>)
 8003192:	f018 fb89 	bl	801b8a8 <strncmp>
 8003196:	4603      	mov	r3, r0
 8003198:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            	if (contains_prefix == 0)
 800319c:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d112      	bne.n	80031ca <scan_files+0x15a>
            	{
            		// can do error checking with status if desired
            		uint8_t status = extract_filename_suffix(fname_upper, len_prefix, &num_files_fc);
 80031a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031a6:	f107 0214 	add.w	r2, r7, #20
 80031aa:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 f820 	bl	80031f4 <extract_filename_suffix>
 80031b4:	4603      	mov	r3, r0
 80031b6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            		if (num_files_fc > *max_used_value)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d202      	bcs.n	80031ca <scan_files+0x15a>
            		{
            			*max_used_value = num_files_fc;
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	46b5      	mov	sp, r6
 80031cc:	e799      	b.n	8003102 <scan_files+0x92>
            	continue; // don't enter directory
 80031ce:	bf00      	nop
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80031d0:	e797      	b.n	8003102 <scan_files+0x92>
            		}
            	}
            }
        }

        f_closedir(&dir);
 80031d2:	f107 0318 	add.w	r3, r7, #24
 80031d6:	4618      	mov	r0, r3
 80031d8:	f012 fbcb 	bl	8015972 <f_closedir>
    }

    return res;
 80031dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80031e0:	46ad      	mov	sp, r5
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3764      	adds	r7, #100	; 0x64
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000588 	.word	0x20000588
 80031f0:	20000591 	.word	0x20000591

080031f4 <extract_filename_suffix>:
 * which is assumed to be .txt. assumes that filename contains prefix.
 *
 * returns integer indicating success/fail: 0 = success, 1 = fail
 */
uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value)
{
 80031f4:	b5b0      	push	{r4, r5, r7, lr}
 80031f6:	b088      	sub	sp, #32
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	460b      	mov	r3, r1
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	72fb      	strb	r3, [r7, #11]
 8003202:	466b      	mov	r3, sp
 8003204:	461d      	mov	r5, r3
	uint8_t len_filename = strlen(filename);
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f7fc fffc 	bl	8000204 <strlen>
 800320c:	4603      	mov	r3, r0
 800320e:	77bb      	strb	r3, [r7, #30]

	// add characters between prefix and filename extension to buffer
	uint8_t len_buf = 8;
 8003210:	2308      	movs	r3, #8
 8003212:	777b      	strb	r3, [r7, #29]
	char buf[len_buf]; // filenames can't be longer than 8 characters total
 8003214:	7f7c      	ldrb	r4, [r7, #29]
 8003216:	4623      	mov	r3, r4
 8003218:	3b01      	subs	r3, #1
 800321a:	61bb      	str	r3, [r7, #24]
 800321c:	b2e0      	uxtb	r0, r4
 800321e:	f04f 0100 	mov.w	r1, #0
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	00cb      	lsls	r3, r1, #3
 800322c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003230:	00c2      	lsls	r2, r0, #3
 8003232:	b2e0      	uxtb	r0, r4
 8003234:	f04f 0100 	mov.w	r1, #0
 8003238:	f04f 0200 	mov.w	r2, #0
 800323c:	f04f 0300 	mov.w	r3, #0
 8003240:	00cb      	lsls	r3, r1, #3
 8003242:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003246:	00c2      	lsls	r2, r0, #3
 8003248:	4623      	mov	r3, r4
 800324a:	3307      	adds	r3, #7
 800324c:	08db      	lsrs	r3, r3, #3
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	ebad 0d03 	sub.w	sp, sp, r3
 8003254:	466b      	mov	r3, sp
 8003256:	3300      	adds	r3, #0
 8003258:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len_buf; i++)
 800325a:	2300      	movs	r3, #0
 800325c:	77fb      	strb	r3, [r7, #31]
 800325e:	e014      	b.n	800328a <extract_filename_suffix+0x96>
	{
		if (len_prefix - 1 + i < len_filename - 1) // go to end of filename
 8003260:	7afb      	ldrb	r3, [r7, #11]
 8003262:	1e5a      	subs	r2, r3, #1
 8003264:	7ffb      	ldrb	r3, [r7, #31]
 8003266:	441a      	add	r2, r3
 8003268:	7fbb      	ldrb	r3, [r7, #30]
 800326a:	3b01      	subs	r3, #1
 800326c:	429a      	cmp	r2, r3
 800326e:	da11      	bge.n	8003294 <extract_filename_suffix+0xa0>
		{
			buf[i] = filename[len_prefix + i];
 8003270:	7afa      	ldrb	r2, [r7, #11]
 8003272:	7ffb      	ldrb	r3, [r7, #31]
 8003274:	4413      	add	r3, r2
 8003276:	461a      	mov	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	441a      	add	r2, r3
 800327c:	7ffb      	ldrb	r3, [r7, #31]
 800327e:	7811      	ldrb	r1, [r2, #0]
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len_buf; i++)
 8003284:	7ffb      	ldrb	r3, [r7, #31]
 8003286:	3301      	adds	r3, #1
 8003288:	77fb      	strb	r3, [r7, #31]
 800328a:	7ffa      	ldrb	r2, [r7, #31]
 800328c:	7f7b      	ldrb	r3, [r7, #29]
 800328e:	429a      	cmp	r2, r3
 8003290:	d3e6      	bcc.n	8003260 <extract_filename_suffix+0x6c>
 8003292:	e000      	b.n	8003296 <extract_filename_suffix+0xa2>
		}
		else break;
 8003294:	bf00      	nop
	}

	// change chars to integer, strtol will strip out the .txt
	char *ptr;
	*num_value = strtol(buf, &ptr, 10);
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f107 0110 	add.w	r1, r7, #16
 800329c:	220a      	movs	r2, #10
 800329e:	4618      	mov	r0, r3
 80032a0:	f019 fa24 	bl	801c6ec <strtol>
 80032a4:	4603      	mov	r3, r0
 80032a6:	461a      	mov	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	601a      	str	r2, [r3, #0]

	if (ptr == buf || *num_value == LONG_MIN || *num_value == LONG_MAX)
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d00a      	beq.n	80032ca <extract_filename_suffix+0xd6>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032bc:	d005      	beq.n	80032ca <extract_filename_suffix+0xd6>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d101      	bne.n	80032ce <extract_filename_suffix+0xda>
	{
		return 1;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <extract_filename_suffix+0xdc>
	}

	return 0;
 80032ce:	2300      	movs	r3, #0
 80032d0:	46ad      	mov	sp, r5
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3720      	adds	r7, #32
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080032dc <str2upper>:
/**
 * assumes that upper has enough characters in the array
 * to store the uppercase version.
 */
void str2upper(char* string, char* upper)
{
 80032dc:	b590      	push	{r4, r7, lr}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 80032e6:	2300      	movs	r3, #0
 80032e8:	73fb      	strb	r3, [r7, #15]
 80032ea:	e019      	b.n	8003320 <str2upper+0x44>
	{
		upper[i] = toupper(string[i]);
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	4413      	add	r3, r2
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	73bb      	strb	r3, [r7, #14]
 80032f6:	7bbb      	ldrb	r3, [r7, #14]
 80032f8:	3301      	adds	r3, #1
 80032fa:	4a0f      	ldr	r2, [pc, #60]	; (8003338 <str2upper+0x5c>)
 80032fc:	4413      	add	r3, r2
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	f003 0303 	and.w	r3, r3, #3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d102      	bne.n	800330e <str2upper+0x32>
 8003308:	7bbb      	ldrb	r3, [r7, #14]
 800330a:	3b20      	subs	r3, #32
 800330c:	e000      	b.n	8003310 <str2upper+0x34>
 800330e:	7bbb      	ldrb	r3, [r7, #14]
 8003310:	7bfa      	ldrb	r2, [r7, #15]
 8003312:	6839      	ldr	r1, [r7, #0]
 8003314:	440a      	add	r2, r1
 8003316:	b2db      	uxtb	r3, r3
 8003318:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 800331a:	7bfb      	ldrb	r3, [r7, #15]
 800331c:	3301      	adds	r3, #1
 800331e:	73fb      	strb	r3, [r7, #15]
 8003320:	7bfc      	ldrb	r4, [r7, #15]
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7fc ff6e 	bl	8000204 <strlen>
 8003328:	4603      	mov	r3, r0
 800332a:	429c      	cmp	r4, r3
 800332c:	d3de      	bcc.n	80032ec <str2upper+0x10>
	}
}
 800332e:	bf00      	nop
 8003330:	bf00      	nop
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	bd90      	pop	{r4, r7, pc}
 8003338:	08021fdc 	.word	0x08021fdc

0800333c <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af02      	add	r7, sp, #8
 8003342:	4603      	mov	r3, r0
 8003344:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8003346:	f107 020f 	add.w	r2, r7, #15
 800334a:	1df9      	adds	r1, r7, #7
 800334c:	2364      	movs	r3, #100	; 0x64
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	2301      	movs	r3, #1
 8003352:	4804      	ldr	r0, [pc, #16]	; (8003364 <W25qxx_Spi+0x28>)
 8003354:	f00a fdf6 	bl	800df44 <HAL_SPI_TransmitReceive>
	return ret;
 8003358:	7bfb      	ldrb	r3, [r7, #15]
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	2000607c 	.word	0x2000607c

08003368 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800336e:	2300      	movs	r3, #0
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	2300      	movs	r3, #0
 8003374:	60bb      	str	r3, [r7, #8]
 8003376:	2300      	movs	r3, #0
 8003378:	607b      	str	r3, [r7, #4]
 800337a:	2300      	movs	r3, #0
 800337c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800337e:	2200      	movs	r2, #0
 8003380:	2140      	movs	r1, #64	; 0x40
 8003382:	4813      	ldr	r0, [pc, #76]	; (80033d0 <W25qxx_ReadID+0x68>)
 8003384:	f006 fd24 	bl	8009dd0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8003388:	209f      	movs	r0, #159	; 0x9f
 800338a:	f7ff ffd7 	bl	800333c <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800338e:	20a5      	movs	r0, #165	; 0xa5
 8003390:	f7ff ffd4 	bl	800333c <W25qxx_Spi>
 8003394:	4603      	mov	r3, r0
 8003396:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003398:	20a5      	movs	r0, #165	; 0xa5
 800339a:	f7ff ffcf 	bl	800333c <W25qxx_Spi>
 800339e:	4603      	mov	r3, r0
 80033a0:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80033a2:	20a5      	movs	r0, #165	; 0xa5
 80033a4:	f7ff ffca 	bl	800333c <W25qxx_Spi>
 80033a8:	4603      	mov	r3, r0
 80033aa:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80033ac:	2201      	movs	r2, #1
 80033ae:	2140      	movs	r1, #64	; 0x40
 80033b0:	4807      	ldr	r0, [pc, #28]	; (80033d0 <W25qxx_ReadID+0x68>)
 80033b2:	f006 fd0d 	bl	8009dd0 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	041a      	lsls	r2, r3, #16
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	021b      	lsls	r3, r3, #8
 80033be:	4313      	orrs	r3, r2
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]
	return Temp;
 80033c6:	68fb      	ldr	r3, [r7, #12]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40020c00 	.word	0x40020c00

080033d4 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 80033d4:	b590      	push	{r4, r7, lr}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80033da:	2200      	movs	r2, #0
 80033dc:	2140      	movs	r1, #64	; 0x40
 80033de:	4816      	ldr	r0, [pc, #88]	; (8003438 <W25qxx_ReadUniqID+0x64>)
 80033e0:	f006 fcf6 	bl	8009dd0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 80033e4:	204b      	movs	r0, #75	; 0x4b
 80033e6:	f7ff ffa9 	bl	800333c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80033ea:	2300      	movs	r3, #0
 80033ec:	71fb      	strb	r3, [r7, #7]
 80033ee:	e005      	b.n	80033fc <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80033f0:	20a5      	movs	r0, #165	; 0xa5
 80033f2:	f7ff ffa3 	bl	800333c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	3301      	adds	r3, #1
 80033fa:	71fb      	strb	r3, [r7, #7]
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	2b03      	cmp	r3, #3
 8003400:	d9f6      	bls.n	80033f0 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8003402:	2300      	movs	r3, #0
 8003404:	71bb      	strb	r3, [r7, #6]
 8003406:	e00b      	b.n	8003420 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003408:	79bc      	ldrb	r4, [r7, #6]
 800340a:	20a5      	movs	r0, #165	; 0xa5
 800340c:	f7ff ff96 	bl	800333c <W25qxx_Spi>
 8003410:	4603      	mov	r3, r0
 8003412:	461a      	mov	r2, r3
 8003414:	4b09      	ldr	r3, [pc, #36]	; (800343c <W25qxx_ReadUniqID+0x68>)
 8003416:	4423      	add	r3, r4
 8003418:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 800341a:	79bb      	ldrb	r3, [r7, #6]
 800341c:	3301      	adds	r3, #1
 800341e:	71bb      	strb	r3, [r7, #6]
 8003420:	79bb      	ldrb	r3, [r7, #6]
 8003422:	2b07      	cmp	r3, #7
 8003424:	d9f0      	bls.n	8003408 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003426:	2201      	movs	r2, #1
 8003428:	2140      	movs	r1, #64	; 0x40
 800342a:	4803      	ldr	r0, [pc, #12]	; (8003438 <W25qxx_ReadUniqID+0x64>)
 800342c:	f006 fcd0 	bl	8009dd0 <HAL_GPIO_WritePin>
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	bd90      	pop	{r4, r7, pc}
 8003438:	40020c00 	.word	0x40020c00
 800343c:	20006ed4 	.word	0x20006ed4

08003440 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003444:	2200      	movs	r2, #0
 8003446:	2140      	movs	r1, #64	; 0x40
 8003448:	4807      	ldr	r0, [pc, #28]	; (8003468 <W25qxx_WriteEnable+0x28>)
 800344a:	f006 fcc1 	bl	8009dd0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 800344e:	2006      	movs	r0, #6
 8003450:	f7ff ff74 	bl	800333c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003454:	2201      	movs	r2, #1
 8003456:	2140      	movs	r1, #64	; 0x40
 8003458:	4803      	ldr	r0, [pc, #12]	; (8003468 <W25qxx_WriteEnable+0x28>)
 800345a:	f006 fcb9 	bl	8009dd0 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 800345e:	2001      	movs	r0, #1
 8003460:	f012 fcb8 	bl	8015dd4 <osDelay>
}
 8003464:	bf00      	nop
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40020c00 	.word	0x40020c00

0800346c <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8003476:	2300      	movs	r3, #0
 8003478:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800347a:	2200      	movs	r2, #0
 800347c:	2140      	movs	r1, #64	; 0x40
 800347e:	481c      	ldr	r0, [pc, #112]	; (80034f0 <W25qxx_ReadStatusRegister+0x84>)
 8003480:	f006 fca6 	bl	8009dd0 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8003484:	79fb      	ldrb	r3, [r7, #7]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d10c      	bne.n	80034a4 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 800348a:	2005      	movs	r0, #5
 800348c:	f7ff ff56 	bl	800333c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003490:	20a5      	movs	r0, #165	; 0xa5
 8003492:	f7ff ff53 	bl	800333c <W25qxx_Spi>
 8003496:	4603      	mov	r3, r0
 8003498:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 800349a:	4a16      	ldr	r2, [pc, #88]	; (80034f4 <W25qxx_ReadStatusRegister+0x88>)
 800349c:	7bfb      	ldrb	r3, [r7, #15]
 800349e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80034a2:	e01b      	b.n	80034dc <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 80034a4:	79fb      	ldrb	r3, [r7, #7]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d10c      	bne.n	80034c4 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 80034aa:	2035      	movs	r0, #53	; 0x35
 80034ac:	f7ff ff46 	bl	800333c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80034b0:	20a5      	movs	r0, #165	; 0xa5
 80034b2:	f7ff ff43 	bl	800333c <W25qxx_Spi>
 80034b6:	4603      	mov	r3, r0
 80034b8:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 80034ba:	4a0e      	ldr	r2, [pc, #56]	; (80034f4 <W25qxx_ReadStatusRegister+0x88>)
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 80034c2:	e00b      	b.n	80034dc <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 80034c4:	2015      	movs	r0, #21
 80034c6:	f7ff ff39 	bl	800333c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80034ca:	20a5      	movs	r0, #165	; 0xa5
 80034cc:	f7ff ff36 	bl	800333c <W25qxx_Spi>
 80034d0:	4603      	mov	r3, r0
 80034d2:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 80034d4:	4a07      	ldr	r2, [pc, #28]	; (80034f4 <W25qxx_ReadStatusRegister+0x88>)
 80034d6:	7bfb      	ldrb	r3, [r7, #15]
 80034d8:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80034dc:	2201      	movs	r2, #1
 80034de:	2140      	movs	r1, #64	; 0x40
 80034e0:	4803      	ldr	r0, [pc, #12]	; (80034f0 <W25qxx_ReadStatusRegister+0x84>)
 80034e2:	f006 fc75 	bl	8009dd0 <HAL_GPIO_WritePin>
	return status;
 80034e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40020c00 	.word	0x40020c00
 80034f4:	20006ed4 	.word	0x20006ed4

080034f8 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 80034fc:	2001      	movs	r0, #1
 80034fe:	f012 fc69 	bl	8015dd4 <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003502:	2200      	movs	r2, #0
 8003504:	2140      	movs	r1, #64	; 0x40
 8003506:	480f      	ldr	r0, [pc, #60]	; (8003544 <W25qxx_WaitForWriteEnd+0x4c>)
 8003508:	f006 fc62 	bl	8009dd0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 800350c:	2005      	movs	r0, #5
 800350e:	f7ff ff15 	bl	800333c <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003512:	20a5      	movs	r0, #165	; 0xa5
 8003514:	f7ff ff12 	bl	800333c <W25qxx_Spi>
 8003518:	4603      	mov	r3, r0
 800351a:	461a      	mov	r2, r3
 800351c:	4b0a      	ldr	r3, [pc, #40]	; (8003548 <W25qxx_WaitForWriteEnd+0x50>)
 800351e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8003522:	2001      	movs	r0, #1
 8003524:	f012 fc56 	bl	8015dd4 <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8003528:	4b07      	ldr	r3, [pc, #28]	; (8003548 <W25qxx_WaitForWriteEnd+0x50>)
 800352a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1ed      	bne.n	8003512 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003536:	2201      	movs	r2, #1
 8003538:	2140      	movs	r1, #64	; 0x40
 800353a:	4802      	ldr	r0, [pc, #8]	; (8003544 <W25qxx_WaitForWriteEnd+0x4c>)
 800353c:	f006 fc48 	bl	8009dd0 <HAL_GPIO_WritePin>
}
 8003540:	bf00      	nop
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40020c00 	.word	0x40020c00
 8003548:	20006ed4 	.word	0x20006ed4

0800354c <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8003552:	4b90      	ldr	r3, [pc, #576]	; (8003794 <W25qxx_Init+0x248>)
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 800355a:	e002      	b.n	8003562 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 800355c:	2001      	movs	r0, #1
 800355e:	f012 fc39 	bl	8015dd4 <osDelay>
	while (HAL_GetTick() < 100)
 8003562:	f005 febb 	bl	80092dc <HAL_GetTick>
 8003566:	4603      	mov	r3, r0
 8003568:	2b63      	cmp	r3, #99	; 0x63
 800356a:	d9f7      	bls.n	800355c <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800356c:	2201      	movs	r2, #1
 800356e:	2140      	movs	r1, #64	; 0x40
 8003570:	4889      	ldr	r0, [pc, #548]	; (8003798 <W25qxx_Init+0x24c>)
 8003572:	f006 fc2d 	bl	8009dd0 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8003576:	2064      	movs	r0, #100	; 0x64
 8003578:	f012 fc2c 	bl	8015dd4 <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 800357c:	4887      	ldr	r0, [pc, #540]	; (800379c <W25qxx_Init+0x250>)
 800357e:	f018 f821 	bl	801b5c4 <puts>
#endif
	id = W25qxx_ReadID();
 8003582:	f7ff fef1 	bl	8003368 <W25qxx_ReadID>
 8003586:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	4885      	ldr	r0, [pc, #532]	; (80037a0 <W25qxx_Init+0x254>)
 800358c:	f017 ff94 	bl	801b4b8 <iprintf>
#endif
	switch (id & 0x000000FF)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	b2db      	uxtb	r3, r3
 8003594:	3b11      	subs	r3, #17
 8003596:	2b0f      	cmp	r3, #15
 8003598:	f200 808b 	bhi.w	80036b2 <W25qxx_Init+0x166>
 800359c:	a201      	add	r2, pc, #4	; (adr r2, 80035a4 <W25qxx_Init+0x58>)
 800359e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a2:	bf00      	nop
 80035a4:	0800369f 	.word	0x0800369f
 80035a8:	0800368b 	.word	0x0800368b
 80035ac:	08003677 	.word	0x08003677
 80035b0:	08003663 	.word	0x08003663
 80035b4:	0800364f 	.word	0x0800364f
 80035b8:	0800363b 	.word	0x0800363b
 80035bc:	08003627 	.word	0x08003627
 80035c0:	08003611 	.word	0x08003611
 80035c4:	080035fb 	.word	0x080035fb
 80035c8:	080036b3 	.word	0x080036b3
 80035cc:	080036b3 	.word	0x080036b3
 80035d0:	080036b3 	.word	0x080036b3
 80035d4:	080036b3 	.word	0x080036b3
 80035d8:	080036b3 	.word	0x080036b3
 80035dc:	080036b3 	.word	0x080036b3
 80035e0:	080035e5 	.word	0x080035e5
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 80035e4:	4b6b      	ldr	r3, [pc, #428]	; (8003794 <W25qxx_Init+0x248>)
 80035e6:	220a      	movs	r2, #10
 80035e8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 80035ea:	4b6a      	ldr	r3, [pc, #424]	; (8003794 <W25qxx_Init+0x248>)
 80035ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035f0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 80035f2:	486c      	ldr	r0, [pc, #432]	; (80037a4 <W25qxx_Init+0x258>)
 80035f4:	f017 ffe6 	bl	801b5c4 <puts>
#endif
		break;
 80035f8:	e064      	b.n	80036c4 <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 80035fa:	4b66      	ldr	r3, [pc, #408]	; (8003794 <W25qxx_Init+0x248>)
 80035fc:	2209      	movs	r2, #9
 80035fe:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8003600:	4b64      	ldr	r3, [pc, #400]	; (8003794 <W25qxx_Init+0x248>)
 8003602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003606:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 8003608:	4867      	ldr	r0, [pc, #412]	; (80037a8 <W25qxx_Init+0x25c>)
 800360a:	f017 ffdb 	bl	801b5c4 <puts>
#endif
		break;
 800360e:	e059      	b.n	80036c4 <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8003610:	4b60      	ldr	r3, [pc, #384]	; (8003794 <W25qxx_Init+0x248>)
 8003612:	2208      	movs	r2, #8
 8003614:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8003616:	4b5f      	ldr	r3, [pc, #380]	; (8003794 <W25qxx_Init+0x248>)
 8003618:	f44f 7280 	mov.w	r2, #256	; 0x100
 800361c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 800361e:	4863      	ldr	r0, [pc, #396]	; (80037ac <W25qxx_Init+0x260>)
 8003620:	f017 ffd0 	bl	801b5c4 <puts>
#endif
		break;
 8003624:	e04e      	b.n	80036c4 <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8003626:	4b5b      	ldr	r3, [pc, #364]	; (8003794 <W25qxx_Init+0x248>)
 8003628:	2207      	movs	r2, #7
 800362a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 800362c:	4b59      	ldr	r3, [pc, #356]	; (8003794 <W25qxx_Init+0x248>)
 800362e:	2280      	movs	r2, #128	; 0x80
 8003630:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 8003632:	485f      	ldr	r0, [pc, #380]	; (80037b0 <W25qxx_Init+0x264>)
 8003634:	f017 ffc6 	bl	801b5c4 <puts>
#endif
		break;
 8003638:	e044      	b.n	80036c4 <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 800363a:	4b56      	ldr	r3, [pc, #344]	; (8003794 <W25qxx_Init+0x248>)
 800363c:	2206      	movs	r2, #6
 800363e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8003640:	4b54      	ldr	r3, [pc, #336]	; (8003794 <W25qxx_Init+0x248>)
 8003642:	2240      	movs	r2, #64	; 0x40
 8003644:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 8003646:	485b      	ldr	r0, [pc, #364]	; (80037b4 <W25qxx_Init+0x268>)
 8003648:	f017 ffbc 	bl	801b5c4 <puts>
#endif
		break;
 800364c:	e03a      	b.n	80036c4 <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 800364e:	4b51      	ldr	r3, [pc, #324]	; (8003794 <W25qxx_Init+0x248>)
 8003650:	2205      	movs	r2, #5
 8003652:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8003654:	4b4f      	ldr	r3, [pc, #316]	; (8003794 <W25qxx_Init+0x248>)
 8003656:	2220      	movs	r2, #32
 8003658:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 800365a:	4857      	ldr	r0, [pc, #348]	; (80037b8 <W25qxx_Init+0x26c>)
 800365c:	f017 ffb2 	bl	801b5c4 <puts>
#endif
		break;
 8003660:	e030      	b.n	80036c4 <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8003662:	4b4c      	ldr	r3, [pc, #304]	; (8003794 <W25qxx_Init+0x248>)
 8003664:	2204      	movs	r2, #4
 8003666:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8003668:	4b4a      	ldr	r3, [pc, #296]	; (8003794 <W25qxx_Init+0x248>)
 800366a:	2210      	movs	r2, #16
 800366c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 800366e:	4853      	ldr	r0, [pc, #332]	; (80037bc <W25qxx_Init+0x270>)
 8003670:	f017 ffa8 	bl	801b5c4 <puts>
#endif
		break;
 8003674:	e026      	b.n	80036c4 <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8003676:	4b47      	ldr	r3, [pc, #284]	; (8003794 <W25qxx_Init+0x248>)
 8003678:	2203      	movs	r2, #3
 800367a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 800367c:	4b45      	ldr	r3, [pc, #276]	; (8003794 <W25qxx_Init+0x248>)
 800367e:	2208      	movs	r2, #8
 8003680:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 8003682:	484f      	ldr	r0, [pc, #316]	; (80037c0 <W25qxx_Init+0x274>)
 8003684:	f017 ff9e 	bl	801b5c4 <puts>
#endif
		break;
 8003688:	e01c      	b.n	80036c4 <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 800368a:	4b42      	ldr	r3, [pc, #264]	; (8003794 <W25qxx_Init+0x248>)
 800368c:	2202      	movs	r2, #2
 800368e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8003690:	4b40      	ldr	r3, [pc, #256]	; (8003794 <W25qxx_Init+0x248>)
 8003692:	2204      	movs	r2, #4
 8003694:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 8003696:	484b      	ldr	r0, [pc, #300]	; (80037c4 <W25qxx_Init+0x278>)
 8003698:	f017 ff94 	bl	801b5c4 <puts>
#endif
		break;
 800369c:	e012      	b.n	80036c4 <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 800369e:	4b3d      	ldr	r3, [pc, #244]	; (8003794 <W25qxx_Init+0x248>)
 80036a0:	2201      	movs	r2, #1
 80036a2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 80036a4:	4b3b      	ldr	r3, [pc, #236]	; (8003794 <W25qxx_Init+0x248>)
 80036a6:	2202      	movs	r2, #2
 80036a8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 80036aa:	4847      	ldr	r0, [pc, #284]	; (80037c8 <W25qxx_Init+0x27c>)
 80036ac:	f017 ff8a 	bl	801b5c4 <puts>
#endif
		break;
 80036b0:	e008      	b.n	80036c4 <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 80036b2:	4846      	ldr	r0, [pc, #280]	; (80037cc <W25qxx_Init+0x280>)
 80036b4:	f017 ff86 	bl	801b5c4 <puts>
#endif
		w25qxx.Lock = 0;
 80036b8:	4b36      	ldr	r3, [pc, #216]	; (8003794 <W25qxx_Init+0x248>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 80036c0:	2300      	movs	r3, #0
 80036c2:	e063      	b.n	800378c <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 80036c4:	4b33      	ldr	r3, [pc, #204]	; (8003794 <W25qxx_Init+0x248>)
 80036c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036ca:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 80036cc:	4b31      	ldr	r3, [pc, #196]	; (8003794 <W25qxx_Init+0x248>)
 80036ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036d2:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 80036d4:	4b2f      	ldr	r3, [pc, #188]	; (8003794 <W25qxx_Init+0x248>)
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	4a2e      	ldr	r2, [pc, #184]	; (8003794 <W25qxx_Init+0x248>)
 80036dc:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 80036de:	4b2d      	ldr	r3, [pc, #180]	; (8003794 <W25qxx_Init+0x248>)
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	4a2c      	ldr	r2, [pc, #176]	; (8003794 <W25qxx_Init+0x248>)
 80036e4:	6912      	ldr	r2, [r2, #16]
 80036e6:	fb02 f303 	mul.w	r3, r2, r3
 80036ea:	4a2a      	ldr	r2, [pc, #168]	; (8003794 <W25qxx_Init+0x248>)
 80036ec:	8952      	ldrh	r2, [r2, #10]
 80036ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80036f2:	4a28      	ldr	r2, [pc, #160]	; (8003794 <W25qxx_Init+0x248>)
 80036f4:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80036f6:	4b27      	ldr	r3, [pc, #156]	; (8003794 <W25qxx_Init+0x248>)
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	4a25      	ldr	r2, [pc, #148]	; (8003794 <W25qxx_Init+0x248>)
 80036fe:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8003700:	4b24      	ldr	r3, [pc, #144]	; (8003794 <W25qxx_Init+0x248>)
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	4a23      	ldr	r2, [pc, #140]	; (8003794 <W25qxx_Init+0x248>)
 8003706:	6912      	ldr	r2, [r2, #16]
 8003708:	fb02 f303 	mul.w	r3, r2, r3
 800370c:	0a9b      	lsrs	r3, r3, #10
 800370e:	4a21      	ldr	r2, [pc, #132]	; (8003794 <W25qxx_Init+0x248>)
 8003710:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8003712:	f7ff fe5f 	bl	80033d4 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8003716:	2001      	movs	r0, #1
 8003718:	f7ff fea8 	bl	800346c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 800371c:	2002      	movs	r0, #2
 800371e:	f7ff fea5 	bl	800346c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8003722:	2003      	movs	r0, #3
 8003724:	f7ff fea2 	bl	800346c <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 8003728:	4b1a      	ldr	r3, [pc, #104]	; (8003794 <W25qxx_Init+0x248>)
 800372a:	895b      	ldrh	r3, [r3, #10]
 800372c:	4619      	mov	r1, r3
 800372e:	4828      	ldr	r0, [pc, #160]	; (80037d0 <W25qxx_Init+0x284>)
 8003730:	f017 fec2 	bl	801b4b8 <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 8003734:	4b17      	ldr	r3, [pc, #92]	; (8003794 <W25qxx_Init+0x248>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	4619      	mov	r1, r3
 800373a:	4826      	ldr	r0, [pc, #152]	; (80037d4 <W25qxx_Init+0x288>)
 800373c:	f017 febc 	bl	801b4b8 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 8003740:	4b14      	ldr	r3, [pc, #80]	; (8003794 <W25qxx_Init+0x248>)
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	4619      	mov	r1, r3
 8003746:	4824      	ldr	r0, [pc, #144]	; (80037d8 <W25qxx_Init+0x28c>)
 8003748:	f017 feb6 	bl	801b4b8 <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 800374c:	4b11      	ldr	r3, [pc, #68]	; (8003794 <W25qxx_Init+0x248>)
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	4619      	mov	r1, r3
 8003752:	4822      	ldr	r0, [pc, #136]	; (80037dc <W25qxx_Init+0x290>)
 8003754:	f017 feb0 	bl	801b4b8 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 8003758:	4b0e      	ldr	r3, [pc, #56]	; (8003794 <W25qxx_Init+0x248>)
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	4619      	mov	r1, r3
 800375e:	4820      	ldr	r0, [pc, #128]	; (80037e0 <W25qxx_Init+0x294>)
 8003760:	f017 feaa 	bl	801b4b8 <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 8003764:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <W25qxx_Init+0x248>)
 8003766:	69db      	ldr	r3, [r3, #28]
 8003768:	4619      	mov	r1, r3
 800376a:	481e      	ldr	r0, [pc, #120]	; (80037e4 <W25qxx_Init+0x298>)
 800376c:	f017 fea4 	bl	801b4b8 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 8003770:	4b08      	ldr	r3, [pc, #32]	; (8003794 <W25qxx_Init+0x248>)
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	4619      	mov	r1, r3
 8003776:	481c      	ldr	r0, [pc, #112]	; (80037e8 <W25qxx_Init+0x29c>)
 8003778:	f017 fe9e 	bl	801b4b8 <iprintf>
	printf("w25qxx Init Done\r\n");
 800377c:	481b      	ldr	r0, [pc, #108]	; (80037ec <W25qxx_Init+0x2a0>)
 800377e:	f017 ff21 	bl	801b5c4 <puts>
#endif
	w25qxx.Lock = 0;
 8003782:	4b04      	ldr	r3, [pc, #16]	; (8003794 <W25qxx_Init+0x248>)
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 800378a:	2301      	movs	r3, #1
}
 800378c:	4618      	mov	r0, r3
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	20006ed4 	.word	0x20006ed4
 8003798:	40020c00 	.word	0x40020c00
 800379c:	080204a8 	.word	0x080204a8
 80037a0:	080204c0 	.word	0x080204c0
 80037a4:	080204d4 	.word	0x080204d4
 80037a8:	080204ec 	.word	0x080204ec
 80037ac:	08020504 	.word	0x08020504
 80037b0:	0802051c 	.word	0x0802051c
 80037b4:	08020534 	.word	0x08020534
 80037b8:	0802054c 	.word	0x0802054c
 80037bc:	08020564 	.word	0x08020564
 80037c0:	0802057c 	.word	0x0802057c
 80037c4:	08020594 	.word	0x08020594
 80037c8:	080205ac 	.word	0x080205ac
 80037cc:	080205c4 	.word	0x080205c4
 80037d0:	080205d8 	.word	0x080205d8
 80037d4:	080205f8 	.word	0x080205f8
 80037d8:	08020610 	.word	0x08020610
 80037dc:	08020630 	.word	0x08020630
 80037e0:	0802064c 	.word	0x0802064c
 80037e4:	0802066c 	.word	0x0802066c
 80037e8:	08020688 	.word	0x08020688
 80037ec:	080206a8 	.word	0x080206a8

080037f0 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 80037f8:	e002      	b.n	8003800 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 80037fa:	2001      	movs	r0, #1
 80037fc:	f012 faea 	bl	8015dd4 <osDelay>
	while (w25qxx.Lock == 1)
 8003800:	4b2d      	ldr	r3, [pc, #180]	; (80038b8 <W25qxx_EraseSector+0xc8>)
 8003802:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003806:	2b01      	cmp	r3, #1
 8003808:	d0f7      	beq.n	80037fa <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 800380a:	4b2b      	ldr	r3, [pc, #172]	; (80038b8 <W25qxx_EraseSector+0xc8>)
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 8003812:	f005 fd63 	bl	80092dc <HAL_GetTick>
 8003816:	60f8      	str	r0, [r7, #12]
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
 8003818:	6879      	ldr	r1, [r7, #4]
 800381a:	4828      	ldr	r0, [pc, #160]	; (80038bc <W25qxx_EraseSector+0xcc>)
 800381c:	f017 fe4c 	bl	801b4b8 <iprintf>
#endif
	W25qxx_WaitForWriteEnd();
 8003820:	f7ff fe6a 	bl	80034f8 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8003824:	4b24      	ldr	r3, [pc, #144]	; (80038b8 <W25qxx_EraseSector+0xc8>)
 8003826:	691a      	ldr	r2, [r3, #16]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	fb02 f303 	mul.w	r3, r2, r3
 800382e:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8003830:	f7ff fe06 	bl	8003440 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003834:	2200      	movs	r2, #0
 8003836:	2140      	movs	r1, #64	; 0x40
 8003838:	4821      	ldr	r0, [pc, #132]	; (80038c0 <W25qxx_EraseSector+0xd0>)
 800383a:	f006 fac9 	bl	8009dd0 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800383e:	4b1e      	ldr	r3, [pc, #120]	; (80038b8 <W25qxx_EraseSector+0xc8>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b08      	cmp	r3, #8
 8003844:	d909      	bls.n	800385a <W25qxx_EraseSector+0x6a>
	{
		W25qxx_Spi(0x21);
 8003846:	2021      	movs	r0, #33	; 0x21
 8003848:	f7ff fd78 	bl	800333c <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	0e1b      	lsrs	r3, r3, #24
 8003850:	b2db      	uxtb	r3, r3
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff fd72 	bl	800333c <W25qxx_Spi>
 8003858:	e002      	b.n	8003860 <W25qxx_EraseSector+0x70>
	}
	else
	{
		W25qxx_Spi(0x20);
 800385a:	2020      	movs	r0, #32
 800385c:	f7ff fd6e 	bl	800333c <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	0c1b      	lsrs	r3, r3, #16
 8003864:	b2db      	uxtb	r3, r3
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff fd68 	bl	800333c <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	0a1b      	lsrs	r3, r3, #8
 8003870:	b2db      	uxtb	r3, r3
 8003872:	4618      	mov	r0, r3
 8003874:	f7ff fd62 	bl	800333c <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	b2db      	uxtb	r3, r3
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff fd5d 	bl	800333c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003882:	2201      	movs	r2, #1
 8003884:	2140      	movs	r1, #64	; 0x40
 8003886:	480e      	ldr	r0, [pc, #56]	; (80038c0 <W25qxx_EraseSector+0xd0>)
 8003888:	f006 faa2 	bl	8009dd0 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800388c:	f7ff fe34 	bl	80034f8 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
 8003890:	f005 fd24 	bl	80092dc <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	4619      	mov	r1, r3
 800389c:	4809      	ldr	r0, [pc, #36]	; (80038c4 <W25qxx_EraseSector+0xd4>)
 800389e:	f017 fe0b 	bl	801b4b8 <iprintf>
#endif
	W25qxx_Delay(1);
 80038a2:	2001      	movs	r0, #1
 80038a4:	f012 fa96 	bl	8015dd4 <osDelay>
	w25qxx.Lock = 0;
 80038a8:	4b03      	ldr	r3, [pc, #12]	; (80038b8 <W25qxx_EraseSector+0xc8>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80038b0:	bf00      	nop
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	20006ed4 	.word	0x20006ed4
 80038bc:	08020700 	.word	0x08020700
 80038c0:	40020c00 	.word	0x40020c00
 80038c4:	08020724 	.word	0x08020724

080038c8 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 80038d0:	4b07      	ldr	r3, [pc, #28]	; (80038f0 <W25qxx_SectorToPage+0x28>)
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	fb02 f303 	mul.w	r3, r2, r3
 80038da:	4a05      	ldr	r2, [pc, #20]	; (80038f0 <W25qxx_SectorToPage+0x28>)
 80038dc:	8952      	ldrh	r2, [r2, #10]
 80038de:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	20006ed4 	.word	0x20006ed4

080038f4 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
 8003900:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8003902:	e002      	b.n	800390a <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8003904:	2001      	movs	r0, #1
 8003906:	f012 fa65 	bl	8015dd4 <osDelay>
	while (w25qxx.Lock == 1)
 800390a:	4b57      	ldr	r3, [pc, #348]	; (8003a68 <W25qxx_WritePage+0x174>)
 800390c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003910:	2b01      	cmp	r3, #1
 8003912:	d0f7      	beq.n	8003904 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8003914:	4b54      	ldr	r3, [pc, #336]	; (8003a68 <W25qxx_WritePage+0x174>)
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4413      	add	r3, r2
 8003922:	4a51      	ldr	r2, [pc, #324]	; (8003a68 <W25qxx_WritePage+0x174>)
 8003924:	8952      	ldrh	r2, [r2, #10]
 8003926:	4293      	cmp	r3, r2
 8003928:	d802      	bhi.n	8003930 <W25qxx_WritePage+0x3c>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d105      	bne.n	800393c <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003930:	4b4d      	ldr	r3, [pc, #308]	; (8003a68 <W25qxx_WritePage+0x174>)
 8003932:	895b      	ldrh	r3, [r3, #10]
 8003934:	461a      	mov	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	4413      	add	r3, r2
 8003942:	4a49      	ldr	r2, [pc, #292]	; (8003a68 <W25qxx_WritePage+0x174>)
 8003944:	8952      	ldrh	r2, [r2, #10]
 8003946:	4293      	cmp	r3, r2
 8003948:	d905      	bls.n	8003956 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800394a:	4b47      	ldr	r3, [pc, #284]	; (8003a68 <W25qxx_WritePage+0x174>)
 800394c:	895b      	ldrh	r3, [r3, #10]
 800394e:	461a      	mov	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	68b9      	ldr	r1, [r7, #8]
 800395c:	4843      	ldr	r0, [pc, #268]	; (8003a6c <W25qxx_WritePage+0x178>)
 800395e:	f017 fdab 	bl	801b4b8 <iprintf>
	W25qxx_Delay(100);
 8003962:	2064      	movs	r0, #100	; 0x64
 8003964:	f012 fa36 	bl	8015dd4 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8003968:	f005 fcb8 	bl	80092dc <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 800396e:	f7ff fdc3 	bl	80034f8 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8003972:	f7ff fd65 	bl	8003440 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003976:	2200      	movs	r2, #0
 8003978:	2140      	movs	r1, #64	; 0x40
 800397a:	483d      	ldr	r0, [pc, #244]	; (8003a70 <W25qxx_WritePage+0x17c>)
 800397c:	f006 fa28 	bl	8009dd0 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8003980:	4b39      	ldr	r3, [pc, #228]	; (8003a68 <W25qxx_WritePage+0x174>)
 8003982:	895b      	ldrh	r3, [r3, #10]
 8003984:	461a      	mov	r2, r3
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	fb03 f302 	mul.w	r3, r3, r2
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	4413      	add	r3, r2
 8003990:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8003992:	4b35      	ldr	r3, [pc, #212]	; (8003a68 <W25qxx_WritePage+0x174>)
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2b08      	cmp	r3, #8
 8003998:	d909      	bls.n	80039ae <W25qxx_WritePage+0xba>
	{
		W25qxx_Spi(0x12);
 800399a:	2012      	movs	r0, #18
 800399c:	f7ff fcce 	bl	800333c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	0e1b      	lsrs	r3, r3, #24
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7ff fcc8 	bl	800333c <W25qxx_Spi>
 80039ac:	e002      	b.n	80039b4 <W25qxx_WritePage+0xc0>
	}
	else
	{
		W25qxx_Spi(0x02);
 80039ae:	2002      	movs	r0, #2
 80039b0:	f7ff fcc4 	bl	800333c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	0c1b      	lsrs	r3, r3, #16
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff fcbe 	bl	800333c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	0a1b      	lsrs	r3, r3, #8
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff fcb8 	bl	800333c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff fcb3 	bl	800333c <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	b29a      	uxth	r2, r3
 80039da:	2364      	movs	r3, #100	; 0x64
 80039dc:	68f9      	ldr	r1, [r7, #12]
 80039de:	4825      	ldr	r0, [pc, #148]	; (8003a74 <W25qxx_WritePage+0x180>)
 80039e0:	f00a f863 	bl	800daaa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80039e4:	2201      	movs	r2, #1
 80039e6:	2140      	movs	r1, #64	; 0x40
 80039e8:	4821      	ldr	r0, [pc, #132]	; (8003a70 <W25qxx_WritePage+0x17c>)
 80039ea:	f006 f9f1 	bl	8009dd0 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80039ee:	f7ff fd83 	bl	80034f8 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 80039f2:	f005 fc73 	bl	80092dc <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 80039fe:	2300      	movs	r3, #0
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	e018      	b.n	8003a36 <W25qxx_WritePage+0x142>
	{
		if ((i % 8 == 0) && (i > 2))
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d108      	bne.n	8003a20 <W25qxx_WritePage+0x12c>
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d905      	bls.n	8003a20 <W25qxx_WritePage+0x12c>
		{
			printf("\r\n");
 8003a14:	4818      	ldr	r0, [pc, #96]	; (8003a78 <W25qxx_WritePage+0x184>)
 8003a16:	f017 fdd5 	bl	801b5c4 <puts>
			W25qxx_Delay(10);
 8003a1a:	200a      	movs	r0, #10
 8003a1c:	f012 f9da 	bl	8015dd4 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	4413      	add	r3, r2
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4814      	ldr	r0, [pc, #80]	; (8003a7c <W25qxx_WritePage+0x188>)
 8003a2c:	f017 fd44 	bl	801b4b8 <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	3301      	adds	r3, #1
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d3e2      	bcc.n	8003a04 <W25qxx_WritePage+0x110>
	}
	printf("\r\n");
 8003a3e:	480e      	ldr	r0, [pc, #56]	; (8003a78 <W25qxx_WritePage+0x184>)
 8003a40:	f017 fdc0 	bl	801b5c4 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 8003a44:	6939      	ldr	r1, [r7, #16]
 8003a46:	480e      	ldr	r0, [pc, #56]	; (8003a80 <W25qxx_WritePage+0x18c>)
 8003a48:	f017 fd36 	bl	801b4b8 <iprintf>
	W25qxx_Delay(100);
 8003a4c:	2064      	movs	r0, #100	; 0x64
 8003a4e:	f012 f9c1 	bl	8015dd4 <osDelay>
#endif
	W25qxx_Delay(1);
 8003a52:	2001      	movs	r0, #1
 8003a54:	f012 f9be 	bl	8015dd4 <osDelay>
	w25qxx.Lock = 0;
 8003a58:	4b03      	ldr	r3, [pc, #12]	; (8003a68 <W25qxx_WritePage+0x174>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003a60:	bf00      	nop
 8003a62:	3718      	adds	r7, #24
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	20006ed4 	.word	0x20006ed4
 8003a6c:	08020988 	.word	0x08020988
 8003a70:	40020c00 	.word	0x40020c00
 8003a74:	2000607c 	.word	0x2000607c
 8003a78:	080209c4 	.word	0x080209c4
 8003a7c:	080209c8 	.word	0x080209c8
 8003a80:	080209d0 	.word	0x080209d0

08003a84 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b088      	sub	sp, #32
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
 8003a90:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8003a92:	4b36      	ldr	r3, [pc, #216]	; (8003b6c <W25qxx_WriteSector+0xe8>)
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d802      	bhi.n	8003aa2 <W25qxx_WriteSector+0x1e>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d102      	bne.n	8003aa8 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8003aa2:	4b32      	ldr	r3, [pc, #200]	; (8003b6c <W25qxx_WriteSector+0xe8>)
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	68b9      	ldr	r1, [r7, #8]
 8003aae:	4830      	ldr	r0, [pc, #192]	; (8003b70 <W25qxx_WriteSector+0xec>)
 8003ab0:	f017 fd02 	bl	801b4b8 <iprintf>
	W25qxx_Delay(100);
 8003ab4:	2064      	movs	r0, #100	; 0x64
 8003ab6:	f012 f98d 	bl	8015dd4 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8003aba:	4b2c      	ldr	r3, [pc, #176]	; (8003b6c <W25qxx_WriteSector+0xe8>)
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d306      	bcc.n	8003ad2 <W25qxx_WriteSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
 8003ac4:	482b      	ldr	r0, [pc, #172]	; (8003b74 <W25qxx_WriteSector+0xf0>)
 8003ac6:	f017 fd7d 	bl	801b5c4 <puts>
		W25qxx_Delay(100);
 8003aca:	2064      	movs	r0, #100	; 0x64
 8003acc:	f012 f982 	bl	8015dd4 <osDelay>
#endif
		return;
 8003ad0:	e048      	b.n	8003b64 <W25qxx_WriteSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	441a      	add	r2, r3
 8003ad8:	4b24      	ldr	r3, [pc, #144]	; (8003b6c <W25qxx_WriteSector+0xe8>)
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d905      	bls.n	8003aec <W25qxx_WriteSector+0x68>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8003ae0:	4b22      	ldr	r3, [pc, #136]	; (8003b6c <W25qxx_WriteSector+0xe8>)
 8003ae2:	691a      	ldr	r2, [r3, #16]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	61bb      	str	r3, [r7, #24]
 8003aea:	e001      	b.n	8003af0 <W25qxx_WriteSector+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8003af0:	68b8      	ldr	r0, [r7, #8]
 8003af2:	f7ff fee9 	bl	80038c8 <W25qxx_SectorToPage>
 8003af6:	4602      	mov	r2, r0
 8003af8:	4b1c      	ldr	r3, [pc, #112]	; (8003b6c <W25qxx_WriteSector+0xe8>)
 8003afa:	895b      	ldrh	r3, [r3, #10]
 8003afc:	4619      	mov	r1, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b04:	4413      	add	r3, r2
 8003b06:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8003b08:	4b18      	ldr	r3, [pc, #96]	; (8003b6c <W25qxx_WriteSector+0xe8>)
 8003b0a:	895b      	ldrh	r3, [r3, #10]
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	fbb3 f1f2 	udiv	r1, r3, r2
 8003b14:	fb02 f201 	mul.w	r2, r2, r1
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	69f9      	ldr	r1, [r7, #28]
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f7ff fee6 	bl	80038f4 <W25qxx_WritePage>
		StartPage++;
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8003b2e:	4b0f      	ldr	r3, [pc, #60]	; (8003b6c <W25qxx_WriteSector+0xe8>)
 8003b30:	895b      	ldrh	r3, [r3, #10]
 8003b32:	461a      	mov	r2, r3
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	1a9a      	subs	r2, r3, r2
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8003b3e:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <W25qxx_WriteSector+0xe8>)
 8003b40:	895b      	ldrh	r3, [r3, #10]
 8003b42:	461a      	mov	r2, r3
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	dce1      	bgt.n	8003b1c <W25qxx_WriteSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
 8003b58:	4807      	ldr	r0, [pc, #28]	; (8003b78 <W25qxx_WriteSector+0xf4>)
 8003b5a:	f017 fd33 	bl	801b5c4 <puts>
	W25qxx_Delay(100);
 8003b5e:	2064      	movs	r0, #100	; 0x64
 8003b60:	f012 f938 	bl	8015dd4 <osDelay>
#endif
}
 8003b64:	3720      	adds	r7, #32
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20006ed4 	.word	0x20006ed4
 8003b70:	080209f4 	.word	0x080209f4
 8003b74:	08020a34 	.word	0x08020a34
 8003b78:	08020a54 	.word	0x08020a54

08003b7c <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
 8003b88:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8003b8a:	e002      	b.n	8003b92 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8003b8c:	2001      	movs	r0, #1
 8003b8e:	f012 f921 	bl	8015dd4 <osDelay>
	while (w25qxx.Lock == 1)
 8003b92:	4b54      	ldr	r3, [pc, #336]	; (8003ce4 <W25qxx_ReadPage+0x168>)
 8003b94:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d0f7      	beq.n	8003b8c <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8003b9c:	4b51      	ldr	r3, [pc, #324]	; (8003ce4 <W25qxx_ReadPage+0x168>)
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8003ba4:	4b4f      	ldr	r3, [pc, #316]	; (8003ce4 <W25qxx_ReadPage+0x168>)
 8003ba6:	895b      	ldrh	r3, [r3, #10]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d802      	bhi.n	8003bb6 <W25qxx_ReadPage+0x3a>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d102      	bne.n	8003bbc <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8003bb6:	4b4b      	ldr	r3, [pc, #300]	; (8003ce4 <W25qxx_ReadPage+0x168>)
 8003bb8:	895b      	ldrh	r3, [r3, #10]
 8003bba:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	4a48      	ldr	r2, [pc, #288]	; (8003ce4 <W25qxx_ReadPage+0x168>)
 8003bc4:	8952      	ldrh	r2, [r2, #10]
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d905      	bls.n	8003bd6 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003bca:	4b46      	ldr	r3, [pc, #280]	; (8003ce4 <W25qxx_ReadPage+0x168>)
 8003bcc:	895b      	ldrh	r3, [r3, #10]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	68b9      	ldr	r1, [r7, #8]
 8003bdc:	4842      	ldr	r0, [pc, #264]	; (8003ce8 <W25qxx_ReadPage+0x16c>)
 8003bde:	f017 fc6b 	bl	801b4b8 <iprintf>
	W25qxx_Delay(100);
 8003be2:	2064      	movs	r0, #100	; 0x64
 8003be4:	f012 f8f6 	bl	8015dd4 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8003be8:	f005 fb78 	bl	80092dc <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8003bee:	4b3d      	ldr	r3, [pc, #244]	; (8003ce4 <W25qxx_ReadPage+0x168>)
 8003bf0:	895b      	ldrh	r3, [r3, #10]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	fb03 f302 	mul.w	r3, r3, r2
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003c00:	2200      	movs	r2, #0
 8003c02:	2140      	movs	r1, #64	; 0x40
 8003c04:	4839      	ldr	r0, [pc, #228]	; (8003cec <W25qxx_ReadPage+0x170>)
 8003c06:	f006 f8e3 	bl	8009dd0 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8003c0a:	4b36      	ldr	r3, [pc, #216]	; (8003ce4 <W25qxx_ReadPage+0x168>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d909      	bls.n	8003c26 <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 8003c12:	200c      	movs	r0, #12
 8003c14:	f7ff fb92 	bl	800333c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	0e1b      	lsrs	r3, r3, #24
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff fb8c 	bl	800333c <W25qxx_Spi>
 8003c24:	e002      	b.n	8003c2c <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8003c26:	200b      	movs	r0, #11
 8003c28:	f7ff fb88 	bl	800333c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	0c1b      	lsrs	r3, r3, #16
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff fb82 	bl	800333c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	0a1b      	lsrs	r3, r3, #8
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff fb7c 	bl	800333c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff fb77 	bl	800333c <W25qxx_Spi>
	W25qxx_Spi(0);
 8003c4e:	2000      	movs	r0, #0
 8003c50:	f7ff fb74 	bl	800333c <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	2364      	movs	r3, #100	; 0x64
 8003c5a:	68f9      	ldr	r1, [r7, #12]
 8003c5c:	4824      	ldr	r0, [pc, #144]	; (8003cf0 <W25qxx_ReadPage+0x174>)
 8003c5e:	f00a f860 	bl	800dd22 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003c62:	2201      	movs	r2, #1
 8003c64:	2140      	movs	r1, #64	; 0x40
 8003c66:	4821      	ldr	r0, [pc, #132]	; (8003cec <W25qxx_ReadPage+0x170>)
 8003c68:	f006 f8b2 	bl	8009dd0 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8003c6c:	f005 fb36 	bl	80092dc <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8003c78:	2300      	movs	r3, #0
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	e018      	b.n	8003cb0 <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d108      	bne.n	8003c9a <W25qxx_ReadPage+0x11e>
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d905      	bls.n	8003c9a <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 8003c8e:	4819      	ldr	r0, [pc, #100]	; (8003cf4 <W25qxx_ReadPage+0x178>)
 8003c90:	f017 fc98 	bl	801b5c4 <puts>
			W25qxx_Delay(10);
 8003c94:	200a      	movs	r0, #10
 8003c96:	f012 f89d 	bl	8015dd4 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4814      	ldr	r0, [pc, #80]	; (8003cf8 <W25qxx_ReadPage+0x17c>)
 8003ca6:	f017 fc07 	bl	801b4b8 <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	3301      	adds	r3, #1
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d3e2      	bcc.n	8003c7e <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 8003cb8:	480e      	ldr	r0, [pc, #56]	; (8003cf4 <W25qxx_ReadPage+0x178>)
 8003cba:	f017 fc83 	bl	801b5c4 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 8003cbe:	6939      	ldr	r1, [r7, #16]
 8003cc0:	480e      	ldr	r0, [pc, #56]	; (8003cfc <W25qxx_ReadPage+0x180>)
 8003cc2:	f017 fbf9 	bl	801b4b8 <iprintf>
	W25qxx_Delay(100);
 8003cc6:	2064      	movs	r0, #100	; 0x64
 8003cc8:	f012 f884 	bl	8015dd4 <osDelay>
#endif
	W25qxx_Delay(1);
 8003ccc:	2001      	movs	r0, #1
 8003cce:	f012 f881 	bl	8015dd4 <osDelay>
	w25qxx.Lock = 0;
 8003cd2:	4b04      	ldr	r3, [pc, #16]	; (8003ce4 <W25qxx_ReadPage+0x168>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003cda:	bf00      	nop
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20006ed4 	.word	0x20006ed4
 8003ce8:	08020ba0 	.word	0x08020ba0
 8003cec:	40020c00 	.word	0x40020c00
 8003cf0:	2000607c 	.word	0x2000607c
 8003cf4:	080209c4 	.word	0x080209c4
 8003cf8:	080209c8 	.word	0x080209c8
 8003cfc:	08020bdc 	.word	0x08020bdc

08003d00 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b088      	sub	sp, #32
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8003d0e:	4b36      	ldr	r3, [pc, #216]	; (8003de8 <W25qxx_ReadSector+0xe8>)
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d802      	bhi.n	8003d1e <W25qxx_ReadSector+0x1e>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d102      	bne.n	8003d24 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8003d1e:	4b32      	ldr	r3, [pc, #200]	; (8003de8 <W25qxx_ReadSector+0xe8>)
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	68b9      	ldr	r1, [r7, #8]
 8003d2a:	4830      	ldr	r0, [pc, #192]	; (8003dec <W25qxx_ReadSector+0xec>)
 8003d2c:	f017 fbc4 	bl	801b4b8 <iprintf>
	W25qxx_Delay(100);
 8003d30:	2064      	movs	r0, #100	; 0x64
 8003d32:	f012 f84f 	bl	8015dd4 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8003d36:	4b2c      	ldr	r3, [pc, #176]	; (8003de8 <W25qxx_ReadSector+0xe8>)
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d306      	bcc.n	8003d4e <W25qxx_ReadSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
 8003d40:	482b      	ldr	r0, [pc, #172]	; (8003df0 <W25qxx_ReadSector+0xf0>)
 8003d42:	f017 fc3f 	bl	801b5c4 <puts>
		W25qxx_Delay(100);
 8003d46:	2064      	movs	r0, #100	; 0x64
 8003d48:	f012 f844 	bl	8015dd4 <osDelay>
#endif
		return;
 8003d4c:	e048      	b.n	8003de0 <W25qxx_ReadSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	441a      	add	r2, r3
 8003d54:	4b24      	ldr	r3, [pc, #144]	; (8003de8 <W25qxx_ReadSector+0xe8>)
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d905      	bls.n	8003d68 <W25qxx_ReadSector+0x68>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8003d5c:	4b22      	ldr	r3, [pc, #136]	; (8003de8 <W25qxx_ReadSector+0xe8>)
 8003d5e:	691a      	ldr	r2, [r3, #16]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	61bb      	str	r3, [r7, #24]
 8003d66:	e001      	b.n	8003d6c <W25qxx_ReadSector+0x6c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8003d6c:	68b8      	ldr	r0, [r7, #8]
 8003d6e:	f7ff fdab 	bl	80038c8 <W25qxx_SectorToPage>
 8003d72:	4602      	mov	r2, r0
 8003d74:	4b1c      	ldr	r3, [pc, #112]	; (8003de8 <W25qxx_ReadSector+0xe8>)
 8003d76:	895b      	ldrh	r3, [r3, #10]
 8003d78:	4619      	mov	r1, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d80:	4413      	add	r3, r2
 8003d82:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8003d84:	4b18      	ldr	r3, [pc, #96]	; (8003de8 <W25qxx_ReadSector+0xe8>)
 8003d86:	895b      	ldrh	r3, [r3, #10]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d90:	fb02 f201 	mul.w	r2, r2, r1
 8003d94:	1a9b      	subs	r3, r3, r2
 8003d96:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	69f9      	ldr	r1, [r7, #28]
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f7ff feec 	bl	8003b7c <W25qxx_ReadPage>
		StartPage++;
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	3301      	adds	r3, #1
 8003da8:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8003daa:	4b0f      	ldr	r3, [pc, #60]	; (8003de8 <W25qxx_ReadSector+0xe8>)
 8003dac:	895b      	ldrh	r3, [r3, #10]
 8003dae:	461a      	mov	r2, r3
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	1a9a      	subs	r2, r3, r2
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	4413      	add	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8003dba:	4b0b      	ldr	r3, [pc, #44]	; (8003de8 <W25qxx_ReadSector+0xe8>)
 8003dbc:	895b      	ldrh	r3, [r3, #10]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	dce1      	bgt.n	8003d98 <W25qxx_ReadSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
 8003dd4:	4807      	ldr	r0, [pc, #28]	; (8003df4 <W25qxx_ReadSector+0xf4>)
 8003dd6:	f017 fbf5 	bl	801b5c4 <puts>
	W25qxx_Delay(100);
 8003dda:	2064      	movs	r0, #100	; 0x64
 8003ddc:	f011 fffa 	bl	8015dd4 <osDelay>
#endif
}
 8003de0:	3720      	adds	r7, #32
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20006ed4 	.word	0x20006ed4
 8003dec:	08020c00 	.word	0x08020c00
 8003df0:	08020c40 	.word	0x08020c40
 8003df4:	08020c60 	.word	0x08020c60

08003df8 <MRT_LSM6DSR_Constructor>:


//**************************************************//
/*****LSM6DSR STATIC FUNCTIONS*****/

void MRT_LSM6DSR_Constructor(){
 8003df8:	b598      	push	{r3, r4, r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
	if (lsm6dsr==NULL){
 8003dfc:	4b08      	ldr	r3, [pc, #32]	; (8003e20 <MRT_LSM6DSR_Constructor+0x28>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10b      	bne.n	8003e1c <MRT_LSM6DSR_Constructor+0x24>
		lsm6dsr = new LSM6DSR(&LSM6DSR_I2C, (uint8_t) MRT_LSM6DSR_ADDRESS);
 8003e04:	203c      	movs	r0, #60	; 0x3c
 8003e06:	f015 feeb 	bl	8019be0 <_Znwj>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	461c      	mov	r4, r3
 8003e0e:	226a      	movs	r2, #106	; 0x6a
 8003e10:	4904      	ldr	r1, [pc, #16]	; (8003e24 <MRT_LSM6DSR_Constructor+0x2c>)
 8003e12:	4620      	mov	r0, r4
 8003e14:	f000 f95c 	bl	80040d0 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh>
 8003e18:	4b01      	ldr	r3, [pc, #4]	; (8003e20 <MRT_LSM6DSR_Constructor+0x28>)
 8003e1a:	601c      	str	r4, [r3, #0]
	}
}
 8003e1c:	bf00      	nop
 8003e1e:	bd98      	pop	{r3, r4, r7, pc}
 8003e20:	200005a0 	.word	0x200005a0
 8003e24:	20005f5c 	.word	0x20005f5c

08003e28 <MRT_LSM6DSR_Destructor>:

void MRT_LSM6DSR_Destructor(){
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
	if (lsm6dsr!=NULL){
 8003e2c:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <MRT_LSM6DSR_Destructor+0x1c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <MRT_LSM6DSR_Destructor+0x12>
		lsm6dsr = NULL;
 8003e34:	4b03      	ldr	r3, [pc, #12]	; (8003e44 <MRT_LSM6DSR_Destructor+0x1c>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]
	}
}
 8003e3a:	bf00      	nop
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	200005a0 	.word	0x200005a0

08003e48 <MRT_LSM6DSR_getAcceleration>:

void MRT_LSM6DSR_getAcceleration(void){
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
	lsm6dsr->getAcceleration();
 8003e4c:	4b0a      	ldr	r3, [pc, #40]	; (8003e78 <MRT_LSM6DSR_getAcceleration+0x30>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 f9e9 	bl	8004228 <_ZN7LSM6DSR15getAccelerationEv>
	hlsm6dsr.acceleration_mg[0] = lsm6dsr->acceleration_mg[0];
 8003e56:	4b08      	ldr	r3, [pc, #32]	; (8003e78 <MRT_LSM6DSR_getAcceleration+0x30>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a07      	ldr	r2, [pc, #28]	; (8003e7c <MRT_LSM6DSR_getAcceleration+0x34>)
 8003e5e:	6013      	str	r3, [r2, #0]
	hlsm6dsr.acceleration_mg[1] = lsm6dsr->acceleration_mg[1];
 8003e60:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <MRT_LSM6DSR_getAcceleration+0x30>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	4a05      	ldr	r2, [pc, #20]	; (8003e7c <MRT_LSM6DSR_getAcceleration+0x34>)
 8003e68:	6053      	str	r3, [r2, #4]
	hlsm6dsr.acceleration_mg[2] = lsm6dsr->acceleration_mg[2];
 8003e6a:	4b03      	ldr	r3, [pc, #12]	; (8003e78 <MRT_LSM6DSR_getAcceleration+0x30>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	4a02      	ldr	r2, [pc, #8]	; (8003e7c <MRT_LSM6DSR_getAcceleration+0x34>)
 8003e72:	6093      	str	r3, [r2, #8]
}
 8003e74:	bf00      	nop
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	200005a0 	.word	0x200005a0
 8003e7c:	200005a8 	.word	0x200005a8

08003e80 <MRT_LSM6DSR_getAngularRate>:
void MRT_LSM6DSR_getAngularRate(void){
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
	lsm6dsr->getAngularRate();
 8003e84:	4b0a      	ldr	r3, [pc, #40]	; (8003eb0 <MRT_LSM6DSR_getAngularRate+0x30>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 fa45 	bl	8004318 <_ZN7LSM6DSR14getAngularRateEv>
	hlsm6dsr.angular_rate_mdps[0] = lsm6dsr->angular_rate_mdps[0];
 8003e8e:	4b08      	ldr	r3, [pc, #32]	; (8003eb0 <MRT_LSM6DSR_getAngularRate+0x30>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	4a07      	ldr	r2, [pc, #28]	; (8003eb4 <MRT_LSM6DSR_getAngularRate+0x34>)
 8003e96:	60d3      	str	r3, [r2, #12]
	hlsm6dsr.angular_rate_mdps[1] = lsm6dsr->angular_rate_mdps[1];
 8003e98:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <MRT_LSM6DSR_getAngularRate+0x30>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	4a05      	ldr	r2, [pc, #20]	; (8003eb4 <MRT_LSM6DSR_getAngularRate+0x34>)
 8003ea0:	6113      	str	r3, [r2, #16]
	hlsm6dsr.angular_rate_mdps[2] = lsm6dsr->angular_rate_mdps[2];
 8003ea2:	4b03      	ldr	r3, [pc, #12]	; (8003eb0 <MRT_LSM6DSR_getAngularRate+0x30>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	4a02      	ldr	r2, [pc, #8]	; (8003eb4 <MRT_LSM6DSR_getAngularRate+0x34>)
 8003eaa:	6153      	str	r3, [r2, #20]
}
 8003eac:	bf00      	nop
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	200005a0 	.word	0x200005a0
 8003eb4:	200005a8 	.word	0x200005a8

08003eb8 <MRT_LSM6DSR_getTemperature>:
void MRT_LSM6DSR_getTemperature(void){
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
	lsm6dsr->getTemperature();
 8003ebc:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <MRT_LSM6DSR_getTemperature+0x1c>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 f9f8 	bl	80042b6 <_ZN7LSM6DSR14getTemperatureEv>
	hlsm6dsr.temperature_degC = lsm6dsr->temperature_degC;
 8003ec6:	4b03      	ldr	r3, [pc, #12]	; (8003ed4 <MRT_LSM6DSR_getTemperature+0x1c>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	4a02      	ldr	r2, [pc, #8]	; (8003ed8 <MRT_LSM6DSR_getTemperature+0x20>)
 8003ece:	6193      	str	r3, [r2, #24]
}
 8003ed0:	bf00      	nop
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	200005a0 	.word	0x200005a0
 8003ed8:	200005a8 	.word	0x200005a8

08003edc <MRT_LSM6DSR_pollAll>:

void MRT_LSM6DSR_pollAll(void){
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
	MRT_LSM6DSR_getAcceleration();
 8003ee0:	f7ff ffb2 	bl	8003e48 <MRT_LSM6DSR_getAcceleration>
	MRT_LSM6DSR_getAngularRate();
 8003ee4:	f7ff ffcc 	bl	8003e80 <MRT_LSM6DSR_getAngularRate>
	MRT_LSM6DSR_getTemperature();
 8003ee8:	f7ff ffe6 	bl	8003eb8 <MRT_LSM6DSR_getTemperature>
}
 8003eec:	bf00      	nop
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <MRT_LPS22HH_Constructor>:


//**************************************************//
/*****LPS22HH STATIC FUNCTIONS*****/

void MRT_LPS22HH_Constructor(){
 8003ef0:	b598      	push	{r3, r4, r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
	if (lps22hh==NULL){
 8003ef4:	4b08      	ldr	r3, [pc, #32]	; (8003f18 <MRT_LPS22HH_Constructor+0x28>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10b      	bne.n	8003f14 <MRT_LPS22HH_Constructor+0x24>
		lps22hh = new LPS22HH(&LPS22HH_I2C, (uint8_t) MRT_LPS22HH_ADDRESS);
 8003efc:	2020      	movs	r0, #32
 8003efe:	f015 fe6f 	bl	8019be0 <_Znwj>
 8003f02:	4603      	mov	r3, r0
 8003f04:	461c      	mov	r4, r3
 8003f06:	22b3      	movs	r2, #179	; 0xb3
 8003f08:	4904      	ldr	r1, [pc, #16]	; (8003f1c <MRT_LPS22HH_Constructor+0x2c>)
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	f000 fa86 	bl	800441c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh>
 8003f10:	4b01      	ldr	r3, [pc, #4]	; (8003f18 <MRT_LPS22HH_Constructor+0x28>)
 8003f12:	601c      	str	r4, [r3, #0]
	}
}
 8003f14:	bf00      	nop
 8003f16:	bd98      	pop	{r3, r4, r7, pc}
 8003f18:	200005a4 	.word	0x200005a4
 8003f1c:	20005f5c 	.word	0x20005f5c

08003f20 <MRT_LPS22HH_Destructor>:

void MRT_LPS22HH_Destructor(){
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
	if (lps22hh!=NULL){
 8003f24:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <MRT_LPS22HH_Destructor+0x1c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d002      	beq.n	8003f32 <MRT_LPS22HH_Destructor+0x12>
		lps22hh = NULL;
 8003f2c:	4b03      	ldr	r3, [pc, #12]	; (8003f3c <MRT_LPS22HH_Destructor+0x1c>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]
	}
}
 8003f32:	bf00      	nop
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	200005a4 	.word	0x200005a4

08003f40 <MRT_LPS22HH_getPressure>:

void MRT_LPS22HH_getPressure(void){
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
	lps22hh->getPressure();
 8003f44:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <MRT_LPS22HH_getPressure+0x1c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 faef 	bl	800452c <_ZN7LPS22HH11getPressureEv>
	hlps22hh.pressure_hPa = lps22hh->pressure_hPa;
 8003f4e:	4b03      	ldr	r3, [pc, #12]	; (8003f5c <MRT_LPS22HH_getPressure+0x1c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a02      	ldr	r2, [pc, #8]	; (8003f60 <MRT_LPS22HH_getPressure+0x20>)
 8003f56:	6013      	str	r3, [r2, #0]
}
 8003f58:	bf00      	nop
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	200005a4 	.word	0x200005a4
 8003f60:	200005d4 	.word	0x200005d4

08003f64 <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(void){
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
	lps22hh->getTemperature();
 8003f68:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <MRT_LPS22HH_getTemperature+0x1c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fb0c 	bl	800458a <_ZN7LPS22HH14getTemperatureEv>
	hlps22hh.temperature_degC = lps22hh->temperature_degC;
 8003f72:	4b03      	ldr	r3, [pc, #12]	; (8003f80 <MRT_LPS22HH_getTemperature+0x1c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	4a02      	ldr	r2, [pc, #8]	; (8003f84 <MRT_LPS22HH_getTemperature+0x20>)
 8003f7a:	6053      	str	r3, [r2, #4]
}
 8003f7c:	bf00      	nop
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	200005a4 	.word	0x200005a4
 8003f84:	200005d4 	.word	0x200005d4

08003f88 <MRT_LPS22HH_pollAll>:

void MRT_LPS22HH_pollAll(void){
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
	MRT_LPS22HH_getPressure();
 8003f8c:	f7ff ffd8 	bl	8003f40 <MRT_LPS22HH_getPressure>
	MRT_LPS22HH_getTemperature();
 8003f90:	f7ff ffe8 	bl	8003f64 <MRT_LPS22HH_getTemperature>
}
 8003f94:	bf00      	nop
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <MRT_GPS_pollAll>:


//**************************************************//
/*****GPS STATIC FUNCTIONS*****/

void MRT_GPS_pollAll(void){
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
	GPS_Poll(&hgps.latitude, &hgps.longitude, &hgps.time);
 8003f9c:	4a03      	ldr	r2, [pc, #12]	; (8003fac <MRT_GPS_pollAll+0x14>)
 8003f9e:	4904      	ldr	r1, [pc, #16]	; (8003fb0 <MRT_GPS_pollAll+0x18>)
 8003fa0:	4804      	ldr	r0, [pc, #16]	; (8003fb4 <MRT_GPS_pollAll+0x1c>)
 8003fa2:	f000 fb5d 	bl	8004660 <GPS_Poll>
}
 8003fa6:	bf00      	nop
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	200005f0 	.word	0x200005f0
 8003fb0:	200005ec 	.word	0x200005ec
 8003fb4:	200005e8 	.word	0x200005e8

08003fb8 <MRT_LSM6DSR_Init>:


//**************************************************//
/*****PUBLIC STATIC FUNCTIONS*****/

HLSM6DSR MRT_LSM6DSR_Init(void){
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
	MRT_LSM6DSR_Constructor();
 8003fc0:	f7ff ff1a 	bl	8003df8 <MRT_LSM6DSR_Constructor>
	HLSM6DSR lsm6dsr_handler;
	lsm6dsr_handler.getAcceleration = &MRT_LSM6DSR_getAcceleration;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a08      	ldr	r2, [pc, #32]	; (8003fe8 <MRT_LSM6DSR_Init+0x30>)
 8003fc8:	61da      	str	r2, [r3, #28]
	lsm6dsr_handler.getAngularRate = &MRT_LSM6DSR_getAngularRate;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a07      	ldr	r2, [pc, #28]	; (8003fec <MRT_LSM6DSR_Init+0x34>)
 8003fce:	621a      	str	r2, [r3, #32]
	lsm6dsr_handler.getTemperature = &MRT_LSM6DSR_getTemperature;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a07      	ldr	r2, [pc, #28]	; (8003ff0 <MRT_LSM6DSR_Init+0x38>)
 8003fd4:	625a      	str	r2, [r3, #36]	; 0x24
	lsm6dsr_handler.pollAll = &MRT_LSM6DSR_pollAll;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a06      	ldr	r2, [pc, #24]	; (8003ff4 <MRT_LSM6DSR_Init+0x3c>)
 8003fda:	629a      	str	r2, [r3, #40]	; 0x28
	return lsm6dsr_handler;
 8003fdc:	bf00      	nop
}
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	08003e49 	.word	0x08003e49
 8003fec:	08003e81 	.word	0x08003e81
 8003ff0:	08003eb9 	.word	0x08003eb9
 8003ff4:	08003edd 	.word	0x08003edd

08003ff8 <MRT_LPS22HH_Init>:

struct HLPS22HH MRT_LPS22HH_Init(void){
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
	MRT_LPS22HH_Constructor();
 8004000:	f7ff ff76 	bl	8003ef0 <MRT_LPS22HH_Constructor>
	struct HLPS22HH lps22hh_handler;
	lps22hh_handler.getPressure = &MRT_LPS22HH_getPressure;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a06      	ldr	r2, [pc, #24]	; (8004020 <MRT_LPS22HH_Init+0x28>)
 8004008:	609a      	str	r2, [r3, #8]
	lps22hh_handler.getTemperature = &MRT_LPS22HH_getTemperature;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a05      	ldr	r2, [pc, #20]	; (8004024 <MRT_LPS22HH_Init+0x2c>)
 800400e:	60da      	str	r2, [r3, #12]
	lps22hh_handler.pollAll = &MRT_LPS22HH_pollAll;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a05      	ldr	r2, [pc, #20]	; (8004028 <MRT_LPS22HH_Init+0x30>)
 8004014:	611a      	str	r2, [r3, #16]
	return lps22hh_handler;
 8004016:	bf00      	nop
}
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	08003f41 	.word	0x08003f41
 8004024:	08003f65 	.word	0x08003f65
 8004028:	08003f89 	.word	0x08003f89

0800402c <MRT_GPS_Init>:

struct HGPS MRT_GPS_Init(void){
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
	struct HGPS gps_handler;
	gps_handler.pollAll = &MRT_GPS_pollAll;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a06      	ldr	r2, [pc, #24]	; (8004050 <MRT_GPS_Init+0x24>)
 8004038:	60da      	str	r2, [r3, #12]
	GPS_Init(&GPS_UART, print, tone_freq);
 800403a:	4a06      	ldr	r2, [pc, #24]	; (8004054 <MRT_GPS_Init+0x28>)
 800403c:	4906      	ldr	r1, [pc, #24]	; (8004058 <MRT_GPS_Init+0x2c>)
 800403e:	4807      	ldr	r0, [pc, #28]	; (800405c <MRT_GPS_Init+0x30>)
 8004040:	f000 fd6e 	bl	8004b20 <GPS_Init>
	return gps_handler;
 8004044:	bf00      	nop
}
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	08003f99 	.word	0x08003f99
 8004054:	08001135 	.word	0x08001135
 8004058:	08001109 	.word	0x08001109
 800405c:	20006244 	.word	0x20006244

08004060 <MRT_i2c_sensors_Init>:

void MRT_i2c_sensors_Init(void){
 8004060:	b5b0      	push	{r4, r5, r7, lr}
 8004062:	b08c      	sub	sp, #48	; 0x30
 8004064:	af00      	add	r7, sp, #0

	//LSM6DSR
	#if LSM6DSR_
	HAL_IWDG_Refresh(&hiwdg);
	hlsm6dsr = MRT_LSM6DSR_Init();
 8004066:	4c13      	ldr	r4, [pc, #76]	; (80040b4 <MRT_i2c_sensors_Init+0x54>)
 8004068:	463b      	mov	r3, r7
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff ffa4 	bl	8003fb8 <MRT_LSM6DSR_Init>
 8004070:	4625      	mov	r5, r4
 8004072:	463c      	mov	r4, r7
 8004074:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004076:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004078:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800407a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800407c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004080:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	#endif

	//LPS22HH
	#if LPS22HH_
	HAL_IWDG_Refresh(&hiwdg);
	hlps22hh = MRT_LPS22HH_Init();
 8004084:	4c0c      	ldr	r4, [pc, #48]	; (80040b8 <MRT_i2c_sensors_Init+0x58>)
 8004086:	463b      	mov	r3, r7
 8004088:	4618      	mov	r0, r3
 800408a:	f7ff ffb5 	bl	8003ff8 <MRT_LPS22HH_Init>
 800408e:	4625      	mov	r5, r4
 8004090:	463c      	mov	r4, r7
 8004092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004094:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	602b      	str	r3, [r5, #0]
	#endif

	//GPS
	#if GPS_
	HAL_IWDG_Refresh(&hiwdg);
	hgps = MRT_GPS_Init();
 800409a:	4c08      	ldr	r4, [pc, #32]	; (80040bc <MRT_i2c_sensors_Init+0x5c>)
 800409c:	463b      	mov	r3, r7
 800409e:	4618      	mov	r0, r3
 80040a0:	f7ff ffc4 	bl	800402c <MRT_GPS_Init>
 80040a4:	463b      	mov	r3, r7
 80040a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	#endif

}
 80040ac:	bf00      	nop
 80040ae:	3730      	adds	r7, #48	; 0x30
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bdb0      	pop	{r4, r5, r7, pc}
 80040b4:	200005a8 	.word	0x200005a8
 80040b8:	200005d4 	.word	0x200005d4
 80040bc:	200005e8 	.word	0x200005e8

080040c0 <MRT_i2c_sensors_Deinit>:


void MRT_i2c_sensors_Deinit(void){
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0

	//LSM6DSR
	#if LSM6DSR_
	MRT_LSM6DSR_Destructor();
 80040c4:	f7ff feb0 	bl	8003e28 <MRT_LSM6DSR_Destructor>
	#endif

	//LPS22HH
	#if LPS22HH_
	MRT_LPS22HH_Destructor();
 80040c8:	f7ff ff2a 	bl	8003f20 <MRT_LPS22HH_Destructor>
	#endif

	//GPS
	//NO DEINIT NEEDED HERE
}
 80040cc:	bf00      	nop
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh>:


//**************************************************//
/*****LSM6DSR*****/

LSM6DSR::LSM6DSR(I2C_HandleTypeDef* i2c_bus, uint8_t address){
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b088      	sub	sp, #32
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	4613      	mov	r3, r2
 80040dc:	71fb      	strb	r3, [r7, #7]
	println((char*) "\r\nLSM6DSR Init");
 80040de:	4848      	ldr	r0, [pc, #288]	; (8004200 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x130>)
 80040e0:	f7fc fff4 	bl	80010cc <println>

	/* Initialize mems driver interface */
	ctx.write_reg = write;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4a47      	ldr	r2, [pc, #284]	; (8004204 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x134>)
 80040e8:	61da      	str	r2, [r3, #28]
	ctx.read_reg = read;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	4a46      	ldr	r2, [pc, #280]	; (8004208 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x138>)
 80040ee:	621a      	str	r2, [r3, #32]
	ctx.handle = i2c_bus;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait sensor boot time */
	HAL_Delay(LSM6DSR_BOOT_TIME);
 80040f6:	2064      	movs	r0, #100	; 0x64
 80040f8:	f005 f8fc 	bl	80092f4 <HAL_Delay>
	/* Check device ID */
	lsm6dsr_device_id_get(&ctx, &whoamI);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f103 021c 	add.w	r2, r3, #28
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	3338      	adds	r3, #56	; 0x38
 8004106:	4619      	mov	r1, r3
 8004108:	4610      	mov	r0, r2
 800410a:	f001 fadf 	bl	80056cc <lsm6dsr_device_id_get>

	print((char*) "\tChecking Sensor ID...");
 800410e:	483f      	ldr	r0, [pc, #252]	; (800420c <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x13c>)
 8004110:	f7fc fffa 	bl	8001108 <print>
	if (whoamI != address){
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800411a:	79fa      	ldrb	r2, [r7, #7]
 800411c:	429a      	cmp	r2, r3
 800411e:	d018      	beq.n	8004152 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x82>
	  println((char*) "NOT OK");
 8004120:	483b      	ldr	r0, [pc, #236]	; (8004210 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x140>)
 8004122:	f7fc ffd3 	bl	80010cc <println>
	  print((char*) "\tThis Device is: ");
 8004126:	483b      	ldr	r0, [pc, #236]	; (8004214 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x144>)
 8004128:	f7fc ffee 	bl	8001108 <print>

	  char buffer[10];
	  sprintf(buffer, "%X\r\n", whoamI);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004132:	461a      	mov	r2, r3
 8004134:	f107 0314 	add.w	r3, r7, #20
 8004138:	4937      	ldr	r1, [pc, #220]	; (8004218 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x148>)
 800413a:	4618      	mov	r0, r3
 800413c:	f017 fb0e 	bl	801b75c <siprintf>
	  print(buffer);
 8004140:	f107 0314 	add.w	r3, r7, #20
 8004144:	4618      	mov	r0, r3
 8004146:	f7fc ffdf 	bl	8001108 <print>

	  println((char*) "\n\rProgram Terminated\n\r");
 800414a:	4834      	ldr	r0, [pc, #208]	; (800421c <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x14c>)
 800414c:	f7fc ffbe 	bl	80010cc <println>
	  while(1);
 8004150:	e7fe      	b.n	8004150 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x80>
	}
	println((char*) "OK");
 8004152:	4833      	ldr	r0, [pc, #204]	; (8004220 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x150>)
 8004154:	f7fc ffba 	bl	80010cc <println>

	/* Restore default configuration */
	print((char*) "\tRestore default configuration...");
 8004158:	4832      	ldr	r0, [pc, #200]	; (8004224 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x154>)
 800415a:	f7fc ffd5 	bl	8001108 <print>
	lsm6dsr_reset_set(&ctx, PROPERTY_ENABLE);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	331c      	adds	r3, #28
 8004162:	2101      	movs	r1, #1
 8004164:	4618      	mov	r0, r3
 8004166:	f001 fac2 	bl	80056ee <lsm6dsr_reset_set>
	HAL_Delay(500);
 800416a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800416e:	f005 f8c1 	bl	80092f4 <HAL_Delay>
	do {
	lsm6dsr_reset_get(&ctx, &rst);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f103 021c 	add.w	r2, r3, #28
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	3339      	adds	r3, #57	; 0x39
 800417c:	4619      	mov	r1, r3
 800417e:	4610      	mov	r0, r2
 8004180:	f001 fadb 	bl	800573a <lsm6dsr_reset_get>
	} while (rst);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800418a:	2b00      	cmp	r3, #0
 800418c:	d000      	beq.n	8004190 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0xc0>
	do {
 800418e:	e7f0      	b.n	8004172 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0xa2>
	println((char*) "OK");
 8004190:	4823      	ldr	r0, [pc, #140]	; (8004220 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x150>)
 8004192:	f7fc ff9b 	bl	80010cc <println>

	/* Disable I3C interface */
    lsm6dsr_i3c_disable_set(&ctx, LSM6DSR_I3C_DISABLE);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	331c      	adds	r3, #28
 800419a:	2180      	movs	r1, #128	; 0x80
 800419c:	4618      	mov	r0, r3
 800419e:	f001 fb43 	bl	8005828 <lsm6dsr_i3c_disable_set>

	/* Enable Block Data Update */
	lsm6dsr_block_data_update_set(&ctx, PROPERTY_ENABLE);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	331c      	adds	r3, #28
 80041a6:	2101      	movs	r1, #1
 80041a8:	4618      	mov	r0, r3
 80041aa:	f001 f93f 	bl	800542c <lsm6dsr_block_data_update_set>
	/* Set Output Data Rate */
	lsm6dsr_xl_data_rate_set(&ctx, LSM6DSR_XL_ODR_12Hz5);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	331c      	adds	r3, #28
 80041b2:	2101      	movs	r1, #1
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 ff1b 	bl	8004ff0 <lsm6dsr_xl_data_rate_set>
	lsm6dsr_gy_data_rate_set(&ctx, LSM6DSR_GY_ODR_12Hz5);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	331c      	adds	r3, #28
 80041be:	2101      	movs	r1, #1
 80041c0:	4618      	mov	r0, r3
 80041c2:	f001 f837 	bl	8005234 <lsm6dsr_gy_data_rate_set>
	/* Set full scale */
	lsm6dsr_xl_full_scale_set(&ctx, LSM6DSR_2g);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	331c      	adds	r3, #28
 80041ca:	2100      	movs	r1, #0
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fee9 	bl	8004fa4 <lsm6dsr_xl_full_scale_set>
	lsm6dsr_gy_full_scale_set(&ctx, LSM6DSR_2000dps);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	331c      	adds	r3, #28
 80041d6:	210c      	movs	r1, #12
 80041d8:	4618      	mov	r0, r3
 80041da:	f001 f805 	bl	80051e8 <lsm6dsr_gy_full_scale_set>
	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsr_xl_hp_path_on_out_set(&ctx, LSM6DSR_LP_ODR_DIV_100);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	331c      	adds	r3, #28
 80041e2:	2104      	movs	r1, #4
 80041e4:	4618      	mov	r0, r3
 80041e6:	f001 fae7 	bl	80057b8 <lsm6dsr_xl_hp_path_on_out_set>
	lsm6dsr_xl_filter_lp2_set(&ctx, PROPERTY_ENABLE);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	331c      	adds	r3, #28
 80041ee:	2101      	movs	r1, #1
 80041f0:	4618      	mov	r0, r3
 80041f2:	f001 fabb 	bl	800576c <lsm6dsr_xl_filter_lp2_set>
}
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4618      	mov	r0, r3
 80041fa:	3720      	adds	r7, #32
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	08020cf4 	.word	0x08020cf4
 8004204:	080043a7 	.word	0x080043a7
 8004208:	080043e1 	.word	0x080043e1
 800420c:	08020d04 	.word	0x08020d04
 8004210:	08020d1c 	.word	0x08020d1c
 8004214:	08020d24 	.word	0x08020d24
 8004218:	08020d38 	.word	0x08020d38
 800421c:	08020d40 	.word	0x08020d40
 8004220:	08020d58 	.word	0x08020d58
 8004224:	08020d5c 	.word	0x08020d5c

08004228 <_ZN7LSM6DSR15getAccelerationEv>:


void LSM6DSR::getAcceleration(void){
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
	lsm6dsr_xl_flag_data_ready_get(&ctx, &reg);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f103 021c 	add.w	r2, r3, #28
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	3328      	adds	r3, #40	; 0x28
 800423a:	4619      	mov	r1, r3
 800423c:	4610      	mov	r0, r2
 800423e:	f001 f91b 	bl	8005478 <lsm6dsr_xl_flag_data_ready_get>

	if (reg){
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004248:	2b00      	cmp	r3, #0
 800424a:	d030      	beq.n	80042ae <_ZN7LSM6DSR15getAccelerationEv+0x86>
		// Read magnetic field data
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	332a      	adds	r3, #42	; 0x2a
 8004250:	2206      	movs	r2, #6
 8004252:	2100      	movs	r1, #0
 8004254:	4618      	mov	r0, r3
 8004256:	f015 ff85 	bl	801a164 <memset>
		lsm6dsr_acceleration_raw_get(&ctx, data_raw_acceleration);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f103 021c 	add.w	r2, r3, #28
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	332a      	adds	r3, #42	; 0x2a
 8004264:	4619      	mov	r1, r3
 8004266:	4610      	mov	r0, r2
 8004268:	f001 f9bf 	bl	80055ea <lsm6dsr_acceleration_raw_get>
		acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[0]);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fe4a 	bl	8004f0c <lsm6dsr_from_fs2g_to_mg>
 8004278:	eef0 7a40 	vmov.f32	s15, s0
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	edc3 7a00 	vstr	s15, [r3]
		acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[1]);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8004288:	4618      	mov	r0, r3
 800428a:	f000 fe3f 	bl	8004f0c <lsm6dsr_from_fs2g_to_mg>
 800428e:	eef0 7a40 	vmov.f32	s15, s0
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	edc3 7a01 	vstr	s15, [r3, #4]
		acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[2]);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 fe34 	bl	8004f0c <lsm6dsr_from_fs2g_to_mg>
 80042a4:	eef0 7a40 	vmov.f32	s15, s0
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	edc3 7a02 	vstr	s15, [r3, #8]
	}
}
 80042ae:	bf00      	nop
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <_ZN7LSM6DSR14getTemperatureEv>:


void LSM6DSR::getTemperature(void){
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b082      	sub	sp, #8
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
    lsm6dsr_temp_flag_data_ready_get(&ctx, &reg);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f103 021c 	add.w	r2, r3, #28
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3328      	adds	r3, #40	; 0x28
 80042c8:	4619      	mov	r1, r3
 80042ca:	4610      	mov	r0, r2
 80042cc:	f001 f906 	bl	80054dc <lsm6dsr_temp_flag_data_ready_get>

    if (reg){
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d01a      	beq.n	8004310 <_ZN7LSM6DSR14getTemperatureEv+0x5a>
		// Read temperature data
		memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	3336      	adds	r3, #54	; 0x36
 80042de:	2202      	movs	r2, #2
 80042e0:	2100      	movs	r1, #0
 80042e2:	4618      	mov	r0, r3
 80042e4:	f015 ff3e 	bl	801a164 <memset>
		lsm6dsr_temperature_raw_get(&ctx, &data_raw_temperature);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f103 021c 	add.w	r2, r3, #28
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	3336      	adds	r3, #54	; 0x36
 80042f2:	4619      	mov	r1, r3
 80042f4:	4610      	mov	r0, r2
 80042f6:	f001 f90a 	bl	800550e <lsm6dsr_temperature_raw_get>
		temperature_degC = lsm6dsr_from_lsb_to_celsius(data_raw_temperature);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8004300:	4618      	mov	r0, r3
 8004302:	f000 fe33 	bl	8004f6c <lsm6dsr_from_lsb_to_celsius>
 8004306:	eef0 7a40 	vmov.f32	s15, s0
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	edc3 7a06 	vstr	s15, [r3, #24]
	}
}
 8004310:	bf00      	nop
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <_ZN7LSM6DSR14getAngularRateEv>:


void LSM6DSR::getAngularRate(void){
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
    lsm6dsr_gy_flag_data_ready_get(&ctx, &reg);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f103 021c 	add.w	r2, r3, #28
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3328      	adds	r3, #40	; 0x28
 800432a:	4619      	mov	r1, r3
 800432c:	4610      	mov	r0, r2
 800432e:	f001 f8bc 	bl	80054aa <lsm6dsr_gy_flag_data_ready_get>

    if (reg){
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004338:	2b00      	cmp	r3, #0
 800433a:	d030      	beq.n	800439e <_ZN7LSM6DSR14getAngularRateEv+0x86>
		// Read magnetic field data
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3330      	adds	r3, #48	; 0x30
 8004340:	2206      	movs	r2, #6
 8004342:	2100      	movs	r1, #0
 8004344:	4618      	mov	r0, r3
 8004346:	f015 ff0d 	bl	801a164 <memset>
		lsm6dsr_angular_rate_raw_get(&ctx, data_raw_angular_rate);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f103 021c 	add.w	r2, r3, #28
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3330      	adds	r3, #48	; 0x30
 8004354:	4619      	mov	r1, r3
 8004356:	4610      	mov	r0, r2
 8004358:	f001 f8fc 	bl	8005554 <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8004362:	4618      	mov	r0, r3
 8004364:	f000 fdea 	bl	8004f3c <lsm6dsr_from_fs2000dps_to_mdps>
 8004368:	eef0 7a40 	vmov.f32	s15, s0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	edc3 7a03 	vstr	s15, [r3, #12]
		angular_rate_mdps[1] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8004378:	4618      	mov	r0, r3
 800437a:	f000 fddf 	bl	8004f3c <lsm6dsr_from_fs2000dps_to_mdps>
 800437e:	eef0 7a40 	vmov.f32	s15, s0
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	edc3 7a04 	vstr	s15, [r3, #16]
		angular_rate_mdps[2] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800438e:	4618      	mov	r0, r3
 8004390:	f000 fdd4 	bl	8004f3c <lsm6dsr_from_fs2000dps_to_mdps>
 8004394:	eef0 7a40 	vmov.f32	s15, s0
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	edc3 7a05 	vstr	s15, [r3, #20]
		fs500dps_to_mdps
		fs1000dps_to_mdps
		fs2000dps_to_mdps
		*/
	}
}
 800439e:	bf00      	nop
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <_ZN7LSM6DSR5writeEPvhPKht>:


int32_t LSM6DSR::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b088      	sub	sp, #32
 80043aa:	af04      	add	r7, sp, #16
 80043ac:	60f8      	str	r0, [r7, #12]
 80043ae:	607a      	str	r2, [r7, #4]
 80043b0:	461a      	mov	r2, r3
 80043b2:	460b      	mov	r3, r1
 80043b4:	72fb      	strb	r3, [r7, #11]
 80043b6:	4613      	mov	r3, r2
 80043b8:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 80043ba:	7afb      	ldrb	r3, [r7, #11]
 80043bc:	b29a      	uxth	r2, r3
 80043be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043c2:	9302      	str	r3, [sp, #8]
 80043c4:	893b      	ldrh	r3, [r7, #8]
 80043c6:	9301      	str	r3, [sp, #4]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	2301      	movs	r3, #1
 80043ce:	21d5      	movs	r1, #213	; 0xd5
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f005 fe7f 	bl	800a0d4 <HAL_I2C_Mem_Write>
  return 0;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <_ZN7LSM6DSR4readEPvhPht>:

int32_t LSM6DSR::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b088      	sub	sp, #32
 80043e4:	af04      	add	r7, sp, #16
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	607a      	str	r2, [r7, #4]
 80043ea:	461a      	mov	r2, r3
 80043ec:	460b      	mov	r3, r1
 80043ee:	72fb      	strb	r3, [r7, #11]
 80043f0:	4613      	mov	r3, r2
 80043f2:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80043f4:	7afb      	ldrb	r3, [r7, #11]
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043fc:	9302      	str	r3, [sp, #8]
 80043fe:	893b      	ldrh	r3, [r7, #8]
 8004400:	9301      	str	r3, [sp, #4]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	2301      	movs	r3, #1
 8004408:	21d5      	movs	r1, #213	; 0xd5
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f005 ff5c 	bl	800a2c8 <HAL_I2C_Mem_Read>
  return 0;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh>:

//**************************************************//
/*****LPS22HH*****/


LPS22HH::LPS22HH(I2C_HandleTypeDef* i2c_bus, uint8_t address){
 800441c:	b580      	push	{r7, lr}
 800441e:	b088      	sub	sp, #32
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	4613      	mov	r3, r2
 8004428:	71fb      	strb	r3, [r7, #7]
	println((char*) "\r\nLPS22HH Init");
 800442a:	4836      	ldr	r0, [pc, #216]	; (8004504 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xe8>)
 800442c:	f7fc fe4e 	bl	80010cc <println>

	/* Initialize mems driver interface */
	ctx.write_reg = write;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4a35      	ldr	r2, [pc, #212]	; (8004508 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xec>)
 8004434:	609a      	str	r2, [r3, #8]
	ctx.read_reg = read;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	4a34      	ldr	r2, [pc, #208]	; (800450c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf0>)
 800443a:	60da      	str	r2, [r3, #12]
	ctx.handle = i2c_bus;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	611a      	str	r2, [r3, #16]
	/* Wait sensor boot time */
	HAL_Delay(LPS22HH_BOOT_TIME);
 8004442:	2064      	movs	r0, #100	; 0x64
 8004444:	f004 ff56 	bl	80092f4 <HAL_Delay>
	/* Check device ID */
	whoamI = 0;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	779a      	strb	r2, [r3, #30]
	lps22hh_device_id_get(&ctx, &whoamI);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f103 0208 	add.w	r2, r3, #8
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	331e      	adds	r3, #30
 8004458:	4619      	mov	r1, r3
 800445a:	4610      	mov	r0, r2
 800445c:	f000 fcd6 	bl	8004e0c <lps22hh_device_id_get>


	print((char*) "\tChecking Sensor ID...");
 8004460:	482b      	ldr	r0, [pc, #172]	; (8004510 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf4>)
 8004462:	f7fc fe51 	bl	8001108 <print>
	if ( whoamI != address ){
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	7f9b      	ldrb	r3, [r3, #30]
 800446a:	79fa      	ldrb	r2, [r7, #7]
 800446c:	429a      	cmp	r2, r3
 800446e:	d017      	beq.n	80044a0 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x84>
	  println((char*) "NOT OK");
 8004470:	4828      	ldr	r0, [pc, #160]	; (8004514 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf8>)
 8004472:	f7fc fe2b 	bl	80010cc <println>
	  print((char*) "\tThis Device is: ");
 8004476:	4828      	ldr	r0, [pc, #160]	; (8004518 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xfc>)
 8004478:	f7fc fe46 	bl	8001108 <print>

	  char buffer[10];
	  sprintf(buffer, "%X\r\n", whoamI);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	7f9b      	ldrb	r3, [r3, #30]
 8004480:	461a      	mov	r2, r3
 8004482:	f107 0314 	add.w	r3, r7, #20
 8004486:	4925      	ldr	r1, [pc, #148]	; (800451c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x100>)
 8004488:	4618      	mov	r0, r3
 800448a:	f017 f967 	bl	801b75c <siprintf>
	  print(buffer);
 800448e:	f107 0314 	add.w	r3, r7, #20
 8004492:	4618      	mov	r0, r3
 8004494:	f7fc fe38 	bl	8001108 <print>

	  println((char*) "\n\rProgram Terminated\n\r");
 8004498:	4821      	ldr	r0, [pc, #132]	; (8004520 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x104>)
 800449a:	f7fc fe17 	bl	80010cc <println>
	  while(1);
 800449e:	e7fe      	b.n	800449e <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x82>
	}
	println((char*) "OK");
 80044a0:	4820      	ldr	r0, [pc, #128]	; (8004524 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x108>)
 80044a2:	f7fc fe13 	bl	80010cc <println>

	/* Restore default configuration */
	print((char*) "\tRestore default configuration...");
 80044a6:	4820      	ldr	r0, [pc, #128]	; (8004528 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x10c>)
 80044a8:	f7fc fe2e 	bl	8001108 <print>
	lps22hh_reset_set(&ctx, PROPERTY_ENABLE);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	3308      	adds	r3, #8
 80044b0:	2101      	movs	r1, #1
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 fcbb 	bl	8004e2e <lps22hh_reset_set>
	HAL_Delay(500);
 80044b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80044bc:	f004 ff1a 	bl	80092f4 <HAL_Delay>
	do {
	lps22hh_reset_get(&ctx, &rst);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f103 0208 	add.w	r2, r3, #8
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	331f      	adds	r3, #31
 80044ca:	4619      	mov	r1, r3
 80044cc:	4610      	mov	r0, r2
 80044ce:	f000 fcd4 	bl	8004e7a <lps22hh_reset_get>
	} while (rst);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	7fdb      	ldrb	r3, [r3, #31]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d000      	beq.n	80044dc <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xc0>
	do {
 80044da:	e7f1      	b.n	80044c0 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xa4>
	println((char*) "OK");
 80044dc:	4811      	ldr	r0, [pc, #68]	; (8004524 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x108>)
 80044de:	f7fc fdf5 	bl	80010cc <println>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&ctx, PROPERTY_ENABLE);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	3308      	adds	r3, #8
 80044e6:	2101      	movs	r1, #1
 80044e8:	4618      	mov	r0, r3
 80044ea:	f000 fb9d 	bl	8004c28 <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&ctx, LPS22HH_75_Hz_LOW_NOISE);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	3308      	adds	r3, #8
 80044f2:	2115      	movs	r1, #21
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 fbbd 	bl	8004c74 <lps22hh_data_rate_set>
}
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	4618      	mov	r0, r3
 80044fe:	3720      	adds	r7, #32
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	08020d80 	.word	0x08020d80
 8004508:	080045eb 	.word	0x080045eb
 800450c:	08004625 	.word	0x08004625
 8004510:	08020d04 	.word	0x08020d04
 8004514:	08020d1c 	.word	0x08020d1c
 8004518:	08020d24 	.word	0x08020d24
 800451c:	08020d38 	.word	0x08020d38
 8004520:	08020d40 	.word	0x08020d40
 8004524:	08020d58 	.word	0x08020d58
 8004528:	08020d5c 	.word	0x08020d5c

0800452c <_ZN7LPS22HH11getPressureEv>:



void LPS22HH::getPressure(void){
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
	/* Read output only if new value is available */
	lps22hh_press_flag_data_ready_get(&ctx, &reg);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f103 0208 	add.w	r2, r3, #8
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3314      	adds	r3, #20
 800453e:	4619      	mov	r1, r3
 8004540:	4610      	mov	r0, r2
 8004542:	f000 fbe5 	bl	8004d10 <lps22hh_press_flag_data_ready_get>

	if (reg) {
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	7d1b      	ldrb	r3, [r3, #20]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d019      	beq.n	8004582 <_ZN7LPS22HH11getPressureEv+0x56>
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3318      	adds	r3, #24
 8004552:	2204      	movs	r2, #4
 8004554:	2100      	movs	r1, #0
 8004556:	4618      	mov	r0, r3
 8004558:	f015 fe04 	bl	801a164 <memset>
	  lps22hh_pressure_raw_get(&ctx, &data_raw_pressure);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f103 0208 	add.w	r2, r3, #8
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	3318      	adds	r3, #24
 8004566:	4619      	mov	r1, r3
 8004568:	4610      	mov	r0, r2
 800456a:	f000 fc03 	bl	8004d74 <lps22hh_pressure_raw_get>
	  pressure_hPa = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fb26 	bl	8004bc4 <lps22hh_from_lsb_to_hpa>
 8004578:	eef0 7a40 	vmov.f32	s15, s0
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8004582:	bf00      	nop
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <_ZN7LPS22HH14getTemperatureEv>:


void LPS22HH::getTemperature(void){
 800458a:	b580      	push	{r7, lr}
 800458c:	b082      	sub	sp, #8
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
	/* Read output only if new value is available */
	lps22hh_temp_flag_data_ready_get(&ctx, &reg);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f103 0208 	add.w	r2, r3, #8
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3314      	adds	r3, #20
 800459c:	4619      	mov	r1, r3
 800459e:	4610      	mov	r0, r2
 80045a0:	f000 fbcf 	bl	8004d42 <lps22hh_temp_flag_data_ready_get>

	if (reg) {
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	7d1b      	ldrb	r3, [r3, #20]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d01a      	beq.n	80045e2 <_ZN7LPS22HH14getTemperatureEv+0x58>
	  memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	331c      	adds	r3, #28
 80045b0:	2202      	movs	r2, #2
 80045b2:	2100      	movs	r1, #0
 80045b4:	4618      	mov	r0, r3
 80045b6:	f015 fdd5 	bl	801a164 <memset>
	  lps22hh_temperature_raw_get(&ctx, &data_raw_temperature);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f103 0208 	add.w	r2, r3, #8
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	331c      	adds	r3, #28
 80045c4:	4619      	mov	r1, r3
 80045c6:	4610      	mov	r0, r2
 80045c8:	f000 fbfd 	bl	8004dc6 <lps22hh_temperature_raw_get>
	  temperature_degC = lps22hh_from_lsb_to_celsius(data_raw_temperature);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fb0e 	bl	8004bf4 <lps22hh_from_lsb_to_celsius>
 80045d8:	eef0 7a40 	vmov.f32	s15, s0
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	edc3 7a01 	vstr	s15, [r3, #4]
	}
}
 80045e2:	bf00      	nop
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <_ZN7LPS22HH5writeEPvhPKht>:



int32_t LPS22HH::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b088      	sub	sp, #32
 80045ee:	af04      	add	r7, sp, #16
 80045f0:	60f8      	str	r0, [r7, #12]
 80045f2:	607a      	str	r2, [r7, #4]
 80045f4:	461a      	mov	r2, r3
 80045f6:	460b      	mov	r3, r1
 80045f8:	72fb      	strb	r3, [r7, #11]
 80045fa:	4613      	mov	r3, r2
 80045fc:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 80045fe:	7afb      	ldrb	r3, [r7, #11]
 8004600:	b29a      	uxth	r2, r3
 8004602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004606:	9302      	str	r3, [sp, #8]
 8004608:	893b      	ldrh	r3, [r7, #8]
 800460a:	9301      	str	r3, [sp, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	2301      	movs	r3, #1
 8004612:	21b9      	movs	r1, #185	; 0xb9
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f005 fd5d 	bl	800a0d4 <HAL_I2C_Mem_Write>
  return 0;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <_ZN7LPS22HH4readEPvhPht>:

int32_t LPS22HH::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8004624:	b580      	push	{r7, lr}
 8004626:	b088      	sub	sp, #32
 8004628:	af04      	add	r7, sp, #16
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	607a      	str	r2, [r7, #4]
 800462e:	461a      	mov	r2, r3
 8004630:	460b      	mov	r3, r1
 8004632:	72fb      	strb	r3, [r7, #11]
 8004634:	4613      	mov	r3, r2
 8004636:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8004638:	7afb      	ldrb	r3, [r7, #11]
 800463a:	b29a      	uxth	r2, r3
 800463c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004640:	9302      	str	r3, [sp, #8]
 8004642:	893b      	ldrh	r3, [r7, #8]
 8004644:	9301      	str	r3, [sp, #4]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	2301      	movs	r3, #1
 800464c:	21b9      	movs	r1, #185	; 0xb9
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f005 fe3a 	bl	800a2c8 <HAL_I2C_Mem_Read>
  return 0;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
	...

08004660 <GPS_Poll>:
#define LED3_GPIO_Port	((GPIO_TypeDef *) ((0x40000000UL + 0x00020000UL) + 0x0800UL))//OUT_LED3_GPIO_Port
#define LED3_Pin	(uint16_t)0x0008//OUT_LED3_Pin


void GPS_Poll(float *latitude, float *longitude, float *time)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b08c      	sub	sp, #48	; 0x30
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 800466c:	2364      	movs	r3, #100	; 0x64
 800466e:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 8004670:	2300      	movs	r3, #0
 8004672:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 8004674:	2300      	movs	r3, #0
 8004676:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 8004678:	e073      	b.n	8004762 <GPS_Poll+0x102>
		HAL_UART_Receive(GPS.uart, (uint8_t*)&rx_current, 1, 100);
 800467a:	4b3f      	ldr	r3, [pc, #252]	; (8004778 <GPS_Poll+0x118>)
 800467c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800467e:	2364      	movs	r3, #100	; 0x64
 8004680:	2201      	movs	r2, #1
 8004682:	493e      	ldr	r1, [pc, #248]	; (800477c <GPS_Poll+0x11c>)
 8004684:	f00b f8bb 	bl	800f7fe <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 8004688:	4b3c      	ldr	r3, [pc, #240]	; (800477c <GPS_Poll+0x11c>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b0a      	cmp	r3, #10
 800468e:	d00f      	beq.n	80046b0 <GPS_Poll+0x50>
 8004690:	4b3b      	ldr	r3, [pc, #236]	; (8004780 <GPS_Poll+0x120>)
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	2b63      	cmp	r3, #99	; 0x63
 8004696:	d80b      	bhi.n	80046b0 <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 8004698:	4b39      	ldr	r3, [pc, #228]	; (8004780 <GPS_Poll+0x120>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	1c5a      	adds	r2, r3, #1
 800469e:	b2d1      	uxtb	r1, r2
 80046a0:	4a37      	ldr	r2, [pc, #220]	; (8004780 <GPS_Poll+0x120>)
 80046a2:	7011      	strb	r1, [r2, #0]
 80046a4:	461a      	mov	r2, r3
 80046a6:	4b35      	ldr	r3, [pc, #212]	; (800477c <GPS_Poll+0x11c>)
 80046a8:	7819      	ldrb	r1, [r3, #0]
 80046aa:	4b36      	ldr	r3, [pc, #216]	; (8004784 <GPS_Poll+0x124>)
 80046ac:	5499      	strb	r1, [r3, r2]
 80046ae:	e021      	b.n	80046f4 <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 80046b0:	4834      	ldr	r0, [pc, #208]	; (8004784 <GPS_Poll+0x124>)
 80046b2:	f000 f869 	bl	8004788 <GPS_validate>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d013      	beq.n	80046e4 <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 80046bc:	4831      	ldr	r0, [pc, #196]	; (8004784 <GPS_Poll+0x124>)
 80046be:	f000 f8c5 	bl	800484c <GPS_parse>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00d      	beq.n	80046e4 <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 80046c8:	4b2b      	ldr	r3, [pc, #172]	; (8004778 <GPS_Poll+0x118>)
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 80046d0:	4b29      	ldr	r3, [pc, #164]	; (8004778 <GPS_Poll+0x118>)
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 80046d8:	4b27      	ldr	r3, [pc, #156]	; (8004778 <GPS_Poll+0x118>)
 80046da:	695a      	ldr	r2, [r3, #20]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	601a      	str	r2, [r3, #0]
					done = 1;
 80046e0:	2301      	movs	r3, #1
 80046e2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 80046e4:	4b26      	ldr	r3, [pc, #152]	; (8004780 <GPS_Poll+0x120>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 80046ea:	2264      	movs	r2, #100	; 0x64
 80046ec:	2100      	movs	r1, #0
 80046ee:	4825      	ldr	r0, [pc, #148]	; (8004784 <GPS_Poll+0x124>)
 80046f0:	f015 fd38 	bl	801a164 <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS.uart);
 80046f4:	2300      	movs	r3, #0
 80046f6:	623b      	str	r3, [r7, #32]
 80046f8:	4b1f      	ldr	r3, [pc, #124]	; (8004778 <GPS_Poll+0x118>)
 80046fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	623b      	str	r3, [r7, #32]
 8004702:	4b1d      	ldr	r3, [pc, #116]	; (8004778 <GPS_Poll+0x118>)
 8004704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	623b      	str	r3, [r7, #32]
 800470c:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS.uart);
 800470e:	2300      	movs	r3, #0
 8004710:	61fb      	str	r3, [r7, #28]
 8004712:	4b19      	ldr	r3, [pc, #100]	; (8004778 <GPS_Poll+0x118>)
 8004714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	61fb      	str	r3, [r7, #28]
 800471c:	4b16      	ldr	r3, [pc, #88]	; (8004778 <GPS_Poll+0x118>)
 800471e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	61fb      	str	r3, [r7, #28]
 8004726:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS.uart);
 8004728:	2300      	movs	r3, #0
 800472a:	61bb      	str	r3, [r7, #24]
 800472c:	4b12      	ldr	r3, [pc, #72]	; (8004778 <GPS_Poll+0x118>)
 800472e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	61bb      	str	r3, [r7, #24]
 8004736:	4b10      	ldr	r3, [pc, #64]	; (8004778 <GPS_Poll+0x118>)
 8004738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	61bb      	str	r3, [r7, #24]
 8004740:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS.uart);
 8004742:	2300      	movs	r3, #0
 8004744:	617b      	str	r3, [r7, #20]
 8004746:	4b0c      	ldr	r3, [pc, #48]	; (8004778 <GPS_Poll+0x118>)
 8004748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	4b09      	ldr	r3, [pc, #36]	; (8004778 <GPS_Poll+0x118>)
 8004752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	617b      	str	r3, [r7, #20]
 800475a:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 800475c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800475e:	3301      	adds	r3, #1
 8004760:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 8004762:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004764:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004766:	429a      	cmp	r2, r3
 8004768:	d202      	bcs.n	8004770 <GPS_Poll+0x110>
 800476a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476c:	2b00      	cmp	r3, #0
 800476e:	d084      	beq.n	800467a <GPS_Poll+0x1a>
	}
}
 8004770:	bf00      	nop
 8004772:	3730      	adds	r7, #48	; 0x30
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	20006efc 	.word	0x20006efc
 800477c:	200005f8 	.word	0x200005f8
 8004780:	200005f9 	.word	0x200005f9
 8004784:	20006f60 	.word	0x20006f60

08004788 <GPS_validate>:

int GPS_validate(char *nmeastr){
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8004790:	2300      	movs	r3, #0
 8004792:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8004794:	2300      	movs	r3, #0
 8004796:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	4413      	add	r3, r2
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	2b24      	cmp	r3, #36	; 0x24
 80047a2:	d103      	bne.n	80047ac <GPS_validate+0x24>
        i++;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	3301      	adds	r3, #1
 80047a8:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80047aa:	e00c      	b.n	80047c6 <GPS_validate+0x3e>
        return 0;
 80047ac:	2300      	movs	r3, #0
 80047ae:	e047      	b.n	8004840 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	4413      	add	r3, r2
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	461a      	mov	r2, r3
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	4053      	eors	r3, r2
 80047be:	613b      	str	r3, [r7, #16]
        i++;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	3301      	adds	r3, #1
 80047c4:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	4413      	add	r3, r2
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d008      	beq.n	80047e4 <GPS_validate+0x5c>
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	4413      	add	r3, r2
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	2b2a      	cmp	r3, #42	; 0x2a
 80047dc:	d002      	beq.n	80047e4 <GPS_validate+0x5c>
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	2b4a      	cmp	r3, #74	; 0x4a
 80047e2:	dde5      	ble.n	80047b0 <GPS_validate+0x28>
    }

    if(i >= 75){
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	2b4a      	cmp	r3, #74	; 0x4a
 80047e8:	dd01      	ble.n	80047ee <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 80047ea:	2300      	movs	r3, #0
 80047ec:	e028      	b.n	8004840 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	4413      	add	r3, r2
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	2b2a      	cmp	r3, #42	; 0x2a
 80047f8:	d119      	bne.n	800482e <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	3301      	adds	r3, #1
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	4413      	add	r3, r2
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	3302      	adds	r3, #2
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	4413      	add	r3, r2
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8004812:	2300      	movs	r3, #0
 8004814:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8004816:	f107 0308 	add.w	r3, r7, #8
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	490a      	ldr	r1, [pc, #40]	; (8004848 <GPS_validate+0xc0>)
 800481e:	4618      	mov	r0, r3
 8004820:	f016 ff9c 	bl	801b75c <siprintf>
    return((checkcalcstr[0] == check[0])
 8004824:	7a3a      	ldrb	r2, [r7, #8]
 8004826:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8004828:	429a      	cmp	r2, r3
 800482a:	d108      	bne.n	800483e <GPS_validate+0xb6>
 800482c:	e001      	b.n	8004832 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 800482e:	2300      	movs	r3, #0
 8004830:	e006      	b.n	8004840 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8004832:	7a7a      	ldrb	r2, [r7, #9]
 8004834:	7b7b      	ldrb	r3, [r7, #13]
 8004836:	429a      	cmp	r2, r3
 8004838:	d101      	bne.n	800483e <GPS_validate+0xb6>
 800483a:	2301      	movs	r3, #1
 800483c:	e000      	b.n	8004840 <GPS_validate+0xb8>
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	08020d90 	.word	0x08020d90

0800484c <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 800484c:	b580      	push	{r7, lr}
 800484e:	b08a      	sub	sp, #40	; 0x28
 8004850:	af08      	add	r7, sp, #32
 8004852:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 8004854:	2206      	movs	r2, #6
 8004856:	496d      	ldr	r1, [pc, #436]	; (8004a0c <GPS_parse+0x1c0>)
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f017 f825 	bl	801b8a8 <strncmp>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d139      	bne.n	80048d8 <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8004864:	4b6a      	ldr	r3, [pc, #424]	; (8004a10 <GPS_parse+0x1c4>)
 8004866:	9307      	str	r3, [sp, #28]
 8004868:	4b6a      	ldr	r3, [pc, #424]	; (8004a14 <GPS_parse+0x1c8>)
 800486a:	9306      	str	r3, [sp, #24]
 800486c:	4b6a      	ldr	r3, [pc, #424]	; (8004a18 <GPS_parse+0x1cc>)
 800486e:	9305      	str	r3, [sp, #20]
 8004870:	4b6a      	ldr	r3, [pc, #424]	; (8004a1c <GPS_parse+0x1d0>)
 8004872:	9304      	str	r3, [sp, #16]
 8004874:	4b6a      	ldr	r3, [pc, #424]	; (8004a20 <GPS_parse+0x1d4>)
 8004876:	9303      	str	r3, [sp, #12]
 8004878:	4b6a      	ldr	r3, [pc, #424]	; (8004a24 <GPS_parse+0x1d8>)
 800487a:	9302      	str	r3, [sp, #8]
 800487c:	4b6a      	ldr	r3, [pc, #424]	; (8004a28 <GPS_parse+0x1dc>)
 800487e:	9301      	str	r3, [sp, #4]
 8004880:	4b6a      	ldr	r3, [pc, #424]	; (8004a2c <GPS_parse+0x1e0>)
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	4b6a      	ldr	r3, [pc, #424]	; (8004a30 <GPS_parse+0x1e4>)
 8004886:	4a6b      	ldr	r2, [pc, #428]	; (8004a34 <GPS_parse+0x1e8>)
 8004888:	496b      	ldr	r1, [pc, #428]	; (8004a38 <GPS_parse+0x1ec>)
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f016 ff86 	bl	801b79c <siscanf>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	f340 80b5 	ble.w	8004a02 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8004898:	4b68      	ldr	r3, [pc, #416]	; (8004a3c <GPS_parse+0x1f0>)
 800489a:	edd3 7a04 	vldr	s15, [r3, #16]
 800489e:	4b67      	ldr	r3, [pc, #412]	; (8004a3c <GPS_parse+0x1f0>)
 80048a0:	7e1b      	ldrb	r3, [r3, #24]
 80048a2:	4618      	mov	r0, r3
 80048a4:	eeb0 0a67 	vmov.f32	s0, s15
 80048a8:	f000 f8ec 	bl	8004a84 <GPS_nmea_to_dec>
 80048ac:	eef0 7a40 	vmov.f32	s15, s0
 80048b0:	4b62      	ldr	r3, [pc, #392]	; (8004a3c <GPS_parse+0x1f0>)
 80048b2:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80048b6:	4b61      	ldr	r3, [pc, #388]	; (8004a3c <GPS_parse+0x1f0>)
 80048b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80048bc:	4b5f      	ldr	r3, [pc, #380]	; (8004a3c <GPS_parse+0x1f0>)
 80048be:	7e5b      	ldrb	r3, [r3, #25]
 80048c0:	4618      	mov	r0, r3
 80048c2:	eeb0 0a67 	vmov.f32	s0, s15
 80048c6:	f000 f8dd 	bl	8004a84 <GPS_nmea_to_dec>
 80048ca:	eef0 7a40 	vmov.f32	s15, s0
 80048ce:	4b5b      	ldr	r3, [pc, #364]	; (8004a3c <GPS_parse+0x1f0>)
 80048d0:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e095      	b.n	8004a04 <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 80048d8:	2206      	movs	r2, #6
 80048da:	4959      	ldr	r1, [pc, #356]	; (8004a40 <GPS_parse+0x1f4>)
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f016 ffe3 	bl	801b8a8 <strncmp>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d134      	bne.n	8004952 <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 80048e8:	4b56      	ldr	r3, [pc, #344]	; (8004a44 <GPS_parse+0x1f8>)
 80048ea:	9305      	str	r3, [sp, #20]
 80048ec:	4b56      	ldr	r3, [pc, #344]	; (8004a48 <GPS_parse+0x1fc>)
 80048ee:	9304      	str	r3, [sp, #16]
 80048f0:	4b56      	ldr	r3, [pc, #344]	; (8004a4c <GPS_parse+0x200>)
 80048f2:	9303      	str	r3, [sp, #12]
 80048f4:	4b4b      	ldr	r3, [pc, #300]	; (8004a24 <GPS_parse+0x1d8>)
 80048f6:	9302      	str	r3, [sp, #8]
 80048f8:	4b4b      	ldr	r3, [pc, #300]	; (8004a28 <GPS_parse+0x1dc>)
 80048fa:	9301      	str	r3, [sp, #4]
 80048fc:	4b4b      	ldr	r3, [pc, #300]	; (8004a2c <GPS_parse+0x1e0>)
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	4b4b      	ldr	r3, [pc, #300]	; (8004a30 <GPS_parse+0x1e4>)
 8004902:	4a4c      	ldr	r2, [pc, #304]	; (8004a34 <GPS_parse+0x1e8>)
 8004904:	4952      	ldr	r1, [pc, #328]	; (8004a50 <GPS_parse+0x204>)
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f016 ff48 	bl	801b79c <siscanf>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	dd77      	ble.n	8004a02 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8004912:	4b4a      	ldr	r3, [pc, #296]	; (8004a3c <GPS_parse+0x1f0>)
 8004914:	edd3 7a04 	vldr	s15, [r3, #16]
 8004918:	4b48      	ldr	r3, [pc, #288]	; (8004a3c <GPS_parse+0x1f0>)
 800491a:	7e1b      	ldrb	r3, [r3, #24]
 800491c:	4618      	mov	r0, r3
 800491e:	eeb0 0a67 	vmov.f32	s0, s15
 8004922:	f000 f8af 	bl	8004a84 <GPS_nmea_to_dec>
 8004926:	eef0 7a40 	vmov.f32	s15, s0
 800492a:	4b44      	ldr	r3, [pc, #272]	; (8004a3c <GPS_parse+0x1f0>)
 800492c:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8004930:	4b42      	ldr	r3, [pc, #264]	; (8004a3c <GPS_parse+0x1f0>)
 8004932:	edd3 7a03 	vldr	s15, [r3, #12]
 8004936:	4b41      	ldr	r3, [pc, #260]	; (8004a3c <GPS_parse+0x1f0>)
 8004938:	7e5b      	ldrb	r3, [r3, #25]
 800493a:	4618      	mov	r0, r3
 800493c:	eeb0 0a67 	vmov.f32	s0, s15
 8004940:	f000 f8a0 	bl	8004a84 <GPS_nmea_to_dec>
 8004944:	eef0 7a40 	vmov.f32	s15, s0
 8004948:	4b3c      	ldr	r3, [pc, #240]	; (8004a3c <GPS_parse+0x1f0>)
 800494a:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 800494e:	2301      	movs	r3, #1
 8004950:	e058      	b.n	8004a04 <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 8004952:	2206      	movs	r2, #6
 8004954:	493f      	ldr	r1, [pc, #252]	; (8004a54 <GPS_parse+0x208>)
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f016 ffa6 	bl	801b8a8 <strncmp>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d130      	bne.n	80049c4 <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 8004962:	4b3d      	ldr	r3, [pc, #244]	; (8004a58 <GPS_parse+0x20c>)
 8004964:	9303      	str	r3, [sp, #12]
 8004966:	4b33      	ldr	r3, [pc, #204]	; (8004a34 <GPS_parse+0x1e8>)
 8004968:	9302      	str	r3, [sp, #8]
 800496a:	4b2e      	ldr	r3, [pc, #184]	; (8004a24 <GPS_parse+0x1d8>)
 800496c:	9301      	str	r3, [sp, #4]
 800496e:	4b2e      	ldr	r3, [pc, #184]	; (8004a28 <GPS_parse+0x1dc>)
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	4b2e      	ldr	r3, [pc, #184]	; (8004a2c <GPS_parse+0x1e0>)
 8004974:	4a2e      	ldr	r2, [pc, #184]	; (8004a30 <GPS_parse+0x1e4>)
 8004976:	4939      	ldr	r1, [pc, #228]	; (8004a5c <GPS_parse+0x210>)
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f016 ff0f 	bl	801b79c <siscanf>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	dd3e      	ble.n	8004a02 <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8004984:	4b2d      	ldr	r3, [pc, #180]	; (8004a3c <GPS_parse+0x1f0>)
 8004986:	edd3 7a04 	vldr	s15, [r3, #16]
 800498a:	4b2c      	ldr	r3, [pc, #176]	; (8004a3c <GPS_parse+0x1f0>)
 800498c:	7e1b      	ldrb	r3, [r3, #24]
 800498e:	4618      	mov	r0, r3
 8004990:	eeb0 0a67 	vmov.f32	s0, s15
 8004994:	f000 f876 	bl	8004a84 <GPS_nmea_to_dec>
 8004998:	eef0 7a40 	vmov.f32	s15, s0
 800499c:	4b27      	ldr	r3, [pc, #156]	; (8004a3c <GPS_parse+0x1f0>)
 800499e:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80049a2:	4b26      	ldr	r3, [pc, #152]	; (8004a3c <GPS_parse+0x1f0>)
 80049a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80049a8:	4b24      	ldr	r3, [pc, #144]	; (8004a3c <GPS_parse+0x1f0>)
 80049aa:	7e5b      	ldrb	r3, [r3, #25]
 80049ac:	4618      	mov	r0, r3
 80049ae:	eeb0 0a67 	vmov.f32	s0, s15
 80049b2:	f000 f867 	bl	8004a84 <GPS_nmea_to_dec>
 80049b6:	eef0 7a40 	vmov.f32	s15, s0
 80049ba:	4b20      	ldr	r3, [pc, #128]	; (8004a3c <GPS_parse+0x1f0>)
 80049bc:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e01f      	b.n	8004a04 <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 80049c4:	2206      	movs	r2, #6
 80049c6:	4926      	ldr	r1, [pc, #152]	; (8004a60 <GPS_parse+0x214>)
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f016 ff6d 	bl	801b8a8 <strncmp>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d116      	bne.n	8004a02 <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 80049d4:	4b23      	ldr	r3, [pc, #140]	; (8004a64 <GPS_parse+0x218>)
 80049d6:	9305      	str	r3, [sp, #20]
 80049d8:	4b23      	ldr	r3, [pc, #140]	; (8004a68 <GPS_parse+0x21c>)
 80049da:	9304      	str	r3, [sp, #16]
 80049dc:	4b23      	ldr	r3, [pc, #140]	; (8004a6c <GPS_parse+0x220>)
 80049de:	9303      	str	r3, [sp, #12]
 80049e0:	4b1a      	ldr	r3, [pc, #104]	; (8004a4c <GPS_parse+0x200>)
 80049e2:	9302      	str	r3, [sp, #8]
 80049e4:	4b22      	ldr	r3, [pc, #136]	; (8004a70 <GPS_parse+0x224>)
 80049e6:	9301      	str	r3, [sp, #4]
 80049e8:	4b22      	ldr	r3, [pc, #136]	; (8004a74 <GPS_parse+0x228>)
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	4b22      	ldr	r3, [pc, #136]	; (8004a78 <GPS_parse+0x22c>)
 80049ee:	4a23      	ldr	r2, [pc, #140]	; (8004a7c <GPS_parse+0x230>)
 80049f0:	4923      	ldr	r1, [pc, #140]	; (8004a80 <GPS_parse+0x234>)
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f016 fed2 	bl	801b79c <siscanf>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	dd01      	ble.n	8004a02 <GPS_parse+0x1b6>
            return 0;
 80049fe:	2300      	movs	r3, #0
 8004a00:	e000      	b.n	8004a04 <GPS_parse+0x1b8>
    }
    return 0;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	08020d98 	.word	0x08020d98
 8004a10:	20006f28 	.word	0x20006f28
 8004a14:	20006f24 	.word	0x20006f24
 8004a18:	20006f20 	.word	0x20006f20
 8004a1c:	20006f1c 	.word	0x20006f1c
 8004a20:	20006f18 	.word	0x20006f18
 8004a24:	20006f15 	.word	0x20006f15
 8004a28:	20006f08 	.word	0x20006f08
 8004a2c:	20006f14 	.word	0x20006f14
 8004a30:	20006f0c 	.word	0x20006f0c
 8004a34:	20006f10 	.word	0x20006f10
 8004a38:	08020da0 	.word	0x08020da0
 8004a3c:	20006efc 	.word	0x20006efc
 8004a40:	08020dc8 	.word	0x08020dc8
 8004a44:	20006f34 	.word	0x20006f34
 8004a48:	20006f30 	.word	0x20006f30
 8004a4c:	20006f2c 	.word	0x20006f2c
 8004a50:	08020dd0 	.word	0x08020dd0
 8004a54:	08020df0 	.word	0x08020df0
 8004a58:	20006f38 	.word	0x20006f38
 8004a5c:	08020df8 	.word	0x08020df8
 8004a60:	08020e14 	.word	0x08020e14
 8004a64:	20006f50 	.word	0x20006f50
 8004a68:	20006f4c 	.word	0x20006f4c
 8004a6c:	20006f49 	.word	0x20006f49
 8004a70:	20006f48 	.word	0x20006f48
 8004a74:	20006f44 	.word	0x20006f44
 8004a78:	20006f40 	.word	0x20006f40
 8004a7c:	20006f3c 	.word	0x20006f3c
 8004a80:	08020e1c 	.word	0x08020e1c

08004a84 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8004a84:	b480      	push	{r7}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	ed87 0a01 	vstr	s0, [r7, #4]
 8004a8e:	4603      	mov	r3, r0
 8004a90:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8004a92:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a96:	eddf 6a20 	vldr	s13, [pc, #128]	; 8004b18 <GPS_nmea_to_dec+0x94>
 8004a9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004aa2:	ee17 3a90 	vmov	r3, s15
 8004aa6:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	2264      	movs	r2, #100	; 0x64
 8004aac:	fb02 f303 	mul.w	r3, r2, r3
 8004ab0:	ee07 3a90 	vmov	s15, r3
 8004ab4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ab8:	ed97 7a01 	vldr	s14, [r7, #4]
 8004abc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ac0:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8004ac4:	ed97 7a03 	vldr	s14, [r7, #12]
 8004ac8:	eddf 6a14 	vldr	s13, [pc, #80]	; 8004b1c <GPS_nmea_to_dec+0x98>
 8004acc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ad0:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	ee07 3a90 	vmov	s15, r3
 8004ada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ade:	ed97 7a02 	vldr	s14, [r7, #8]
 8004ae2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ae6:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8004aea:	78fb      	ldrb	r3, [r7, #3]
 8004aec:	2b53      	cmp	r3, #83	; 0x53
 8004aee:	d002      	beq.n	8004af6 <GPS_nmea_to_dec+0x72>
 8004af0:	78fb      	ldrb	r3, [r7, #3]
 8004af2:	2b57      	cmp	r3, #87	; 0x57
 8004af4:	d105      	bne.n	8004b02 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8004af6:	edd7 7a05 	vldr	s15, [r7, #20]
 8004afa:	eef1 7a67 	vneg.f32	s15, s15
 8004afe:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	ee07 3a90 	vmov	s15, r3
}
 8004b08:	eeb0 0a67 	vmov.f32	s0, s15
 8004b0c:	371c      	adds	r7, #28
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	42c80000 	.word	0x42c80000
 8004b1c:	42700000 	.word	0x42700000

08004b20 <GPS_Init>:
	}
}


void GPS_Init(UART_HandleTypeDef* data_uart, void (*gps_print)(char*),
		void (*gps_tone_freq)(uint32_t duration, uint32_t repeats, uint32_t freq)){
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
	GPS.print = gps_print;
 8004b2c:	4a0a      	ldr	r2, [pc, #40]	; (8004b58 <GPS_Init+0x38>)
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	65d3      	str	r3, [r2, #92]	; 0x5c
	GPS.print((char*) "\r\nGPS Init...");
 8004b32:	4b09      	ldr	r3, [pc, #36]	; (8004b58 <GPS_Init+0x38>)
 8004b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b36:	4809      	ldr	r0, [pc, #36]	; (8004b5c <GPS_Init+0x3c>)
 8004b38:	4798      	blx	r3
	GPS.uart = data_uart;
 8004b3a:	4a07      	ldr	r2, [pc, #28]	; (8004b58 <GPS_Init+0x38>)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6593      	str	r3, [r2, #88]	; 0x58
	GPS.tone_freq = gps_tone_freq;
 8004b40:	4a05      	ldr	r2, [pc, #20]	; (8004b58 <GPS_Init+0x38>)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6613      	str	r3, [r2, #96]	; 0x60
	GPS.print((char*) "OK\r\n");
 8004b46:	4b04      	ldr	r3, [pc, #16]	; (8004b58 <GPS_Init+0x38>)
 8004b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b4a:	4805      	ldr	r0, [pc, #20]	; (8004b60 <GPS_Init+0x40>)
 8004b4c:	4798      	blx	r3
}
 8004b4e:	bf00      	nop
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	20006efc 	.word	0x20006efc
 8004b5c:	08020e3c 	.word	0x08020e3c
 8004b60:	08020e4c 	.word	0x08020e4c

08004b64 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004b64:	b590      	push	{r4, r7, lr}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	607a      	str	r2, [r7, #4]
 8004b6e:	461a      	mov	r2, r3
 8004b70:	460b      	mov	r3, r1
 8004b72:	72fb      	strb	r3, [r7, #11]
 8004b74:	4613      	mov	r3, r2
 8004b76:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	685c      	ldr	r4, [r3, #4]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6898      	ldr	r0, [r3, #8]
 8004b80:	893b      	ldrh	r3, [r7, #8]
 8004b82:	7af9      	ldrb	r1, [r7, #11]
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	47a0      	blx	r4
 8004b88:	6178      	str	r0, [r7, #20]

  return ret;
 8004b8a:	697b      	ldr	r3, [r7, #20]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	371c      	adds	r7, #28
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd90      	pop	{r4, r7, pc}

08004b94 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004b94:	b590      	push	{r4, r7, lr}
 8004b96:	b087      	sub	sp, #28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	607a      	str	r2, [r7, #4]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	72fb      	strb	r3, [r7, #11]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681c      	ldr	r4, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6898      	ldr	r0, [r3, #8]
 8004bb0:	893b      	ldrh	r3, [r7, #8]
 8004bb2:	7af9      	ldrb	r1, [r7, #11]
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	47a0      	blx	r4
 8004bb8:	6178      	str	r0, [r7, #20]

  return ret;
 8004bba:	697b      	ldr	r3, [r7, #20]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	371c      	adds	r7, #28
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd90      	pop	{r4, r7, pc}

08004bc4 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	ee07 3a90 	vmov	s15, r3
 8004bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004bf0 <lps22hh_from_lsb_to_hpa+0x2c>
 8004bda:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004bde:	eef0 7a66 	vmov.f32	s15, s13
}
 8004be2:	eeb0 0a67 	vmov.f32	s0, s15
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	49800000 	.word	0x49800000

08004bf4 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8004bfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c02:	ee07 3a90 	vmov	s15, r3
 8004c06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c0a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004c24 <lps22hh_from_lsb_to_celsius+0x30>
 8004c0e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004c12:	eef0 7a66 	vmov.f32	s15, s13
}
 8004c16:	eeb0 0a67 	vmov.f32	s0, s15
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr
 8004c24:	42c80000 	.word	0x42c80000

08004c28 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	460b      	mov	r3, r1
 8004c32:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8004c34:	f107 0208 	add.w	r2, r7, #8
 8004c38:	2301      	movs	r3, #1
 8004c3a:	2110      	movs	r1, #16
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f7ff ff91 	bl	8004b64 <lps22hh_read_reg>
 8004c42:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10f      	bne.n	8004c6a <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004c4a:	78fb      	ldrb	r3, [r7, #3]
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	7a3b      	ldrb	r3, [r7, #8]
 8004c54:	f362 0341 	bfi	r3, r2, #1, #1
 8004c58:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8004c5a:	f107 0208 	add.w	r2, r7, #8
 8004c5e:	2301      	movs	r3, #1
 8004c60:	2110      	movs	r1, #16
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7ff ff96 	bl	8004b94 <lps22hh_write_reg>
 8004c68:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004c80:	f107 0210 	add.w	r2, r7, #16
 8004c84:	2301      	movs	r3, #1
 8004c86:	2110      	movs	r1, #16
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7ff ff6b 	bl	8004b64 <lps22hh_read_reg>
 8004c8e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d107      	bne.n	8004ca6 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004c96:	f107 020c 	add.w	r2, r7, #12
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	2111      	movs	r1, #17
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7ff ff60 	bl	8004b64 <lps22hh_read_reg>
 8004ca4:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10f      	bne.n	8004ccc <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8004cac:	78fb      	ldrb	r3, [r7, #3]
 8004cae:	f003 0307 	and.w	r3, r3, #7
 8004cb2:	b2da      	uxtb	r2, r3
 8004cb4:	7c3b      	ldrb	r3, [r7, #16]
 8004cb6:	f362 1306 	bfi	r3, r2, #4, #3
 8004cba:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004cbc:	f107 0210 	add.w	r2, r7, #16
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	2110      	movs	r1, #16
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7ff ff65 	bl	8004b94 <lps22hh_write_reg>
 8004cca:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d119      	bne.n	8004d06 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8004cd2:	78fb      	ldrb	r3, [r7, #3]
 8004cd4:	091b      	lsrs	r3, r3, #4
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	b2da      	uxtb	r2, r3
 8004cdc:	7b3b      	ldrb	r3, [r7, #12]
 8004cde:	f362 0341 	bfi	r3, r2, #1, #1
 8004ce2:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8004ce4:	78fb      	ldrb	r3, [r7, #3]
 8004ce6:	08db      	lsrs	r3, r3, #3
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	7b3b      	ldrb	r3, [r7, #12]
 8004cf0:	f362 0300 	bfi	r3, r2, #0, #1
 8004cf4:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004cf6:	f107 020c 	add.w	r2, r7, #12
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	2111      	movs	r1, #17
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7ff ff48 	bl	8004b94 <lps22hh_write_reg>
 8004d04:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004d06:	697b      	ldr	r3, [r7, #20]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3718      	adds	r7, #24
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <lps22hh_press_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_press_flag_data_ready_get(stmdev_ctx_t *ctx,
                                          uint8_t *val)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8004d1a:	f107 0208 	add.w	r2, r7, #8
 8004d1e:	2301      	movs	r3, #1
 8004d20:	2127      	movs	r1, #39	; 0x27
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7ff ff1e 	bl	8004b64 <lps22hh_read_reg>
 8004d28:	60f8      	str	r0, [r7, #12]
  *val = reg.p_da;
 8004d2a:	7a3b      	ldrb	r3, [r7, #8]
 8004d2c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	461a      	mov	r2, r3
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	701a      	strb	r2, [r3, #0]

  return ret;
 8004d38:	68fb      	ldr	r3, [r7, #12]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b084      	sub	sp, #16
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
 8004d4a:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8004d4c:	f107 0208 	add.w	r2, r7, #8
 8004d50:	2301      	movs	r3, #1
 8004d52:	2127      	movs	r1, #39	; 0x27
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7ff ff05 	bl	8004b64 <lps22hh_read_reg>
 8004d5a:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 8004d5c:	7a3b      	ldrb	r3, [r7, #8]
 8004d5e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	461a      	mov	r2, r3
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	701a      	strb	r2, [r3, #0]

  return ret;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8004d7e:	f107 0208 	add.w	r2, r7, #8
 8004d82:	2303      	movs	r3, #3
 8004d84:	2128      	movs	r1, #40	; 0x28
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7ff feec 	bl	8004b64 <lps22hh_read_reg>
 8004d8c:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8004d8e:	7abb      	ldrb	r3, [r7, #10]
 8004d90:	461a      	mov	r2, r3
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	021b      	lsls	r3, r3, #8
 8004d9c:	7a7a      	ldrb	r2, [r7, #9]
 8004d9e:	441a      	add	r2, r3
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	021b      	lsls	r3, r3, #8
 8004daa:	7a3a      	ldrb	r2, [r7, #8]
 8004dac:	441a      	add	r2, r3
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	021a      	lsls	r2, r3, #8
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	601a      	str	r2, [r3, #0]

  return ret;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b084      	sub	sp, #16
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
 8004dce:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8004dd0:	f107 0208 	add.w	r2, r7, #8
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	212b      	movs	r1, #43	; 0x2b
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f7ff fec3 	bl	8004b64 <lps22hh_read_reg>
 8004dde:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8004de0:	7a7b      	ldrb	r3, [r7, #9]
 8004de2:	b21a      	sxth	r2, r3
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	021b      	lsls	r3, r3, #8
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	7a3b      	ldrb	r3, [r7, #8]
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	4413      	add	r3, r2
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	b21a      	sxth	r2, r3
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	801a      	strh	r2, [r3, #0]

  return ret;
 8004e02:	68fb      	ldr	r3, [r7, #12]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8004e16:	2301      	movs	r3, #1
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	210f      	movs	r1, #15
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f7ff fea1 	bl	8004b64 <lps22hh_read_reg>
 8004e22:	60f8      	str	r0, [r7, #12]

  return ret;
 8004e24:	68fb      	ldr	r3, [r7, #12]
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b084      	sub	sp, #16
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
 8004e36:	460b      	mov	r3, r1
 8004e38:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8004e3a:	f107 0208 	add.w	r2, r7, #8
 8004e3e:	2301      	movs	r3, #1
 8004e40:	2111      	movs	r1, #17
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7ff fe8e 	bl	8004b64 <lps22hh_read_reg>
 8004e48:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10f      	bne.n	8004e70 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8004e50:	78fb      	ldrb	r3, [r7, #3]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	b2da      	uxtb	r2, r3
 8004e58:	7a3b      	ldrb	r3, [r7, #8]
 8004e5a:	f362 0382 	bfi	r3, r2, #2, #1
 8004e5e:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8004e60:	f107 0208 	add.w	r2, r7, #8
 8004e64:	2301      	movs	r3, #1
 8004e66:	2111      	movs	r1, #17
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7ff fe93 	bl	8004b94 <lps22hh_write_reg>
 8004e6e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004e70:	68fb      	ldr	r3, [r7, #12]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b084      	sub	sp, #16
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
 8004e82:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8004e84:	f107 0208 	add.w	r2, r7, #8
 8004e88:	2301      	movs	r3, #1
 8004e8a:	2111      	movs	r1, #17
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f7ff fe69 	bl	8004b64 <lps22hh_read_reg>
 8004e92:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8004e94:	7a3b      	ldrb	r3, [r7, #8]
 8004e96:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	701a      	strb	r2, [r3, #0]

  return ret;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004eac:	b590      	push	{r4, r7, lr}
 8004eae:	b087      	sub	sp, #28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	607a      	str	r2, [r7, #4]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	460b      	mov	r3, r1
 8004eba:	72fb      	strb	r3, [r7, #11]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	685c      	ldr	r4, [r3, #4]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6898      	ldr	r0, [r3, #8]
 8004ec8:	893b      	ldrh	r3, [r7, #8]
 8004eca:	7af9      	ldrb	r1, [r7, #11]
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	47a0      	blx	r4
 8004ed0:	6178      	str	r0, [r7, #20]

  return ret;
 8004ed2:	697b      	ldr	r3, [r7, #20]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	371c      	adds	r7, #28
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd90      	pop	{r4, r7, pc}

08004edc <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004edc:	b590      	push	{r4, r7, lr}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	607a      	str	r2, [r7, #4]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	460b      	mov	r3, r1
 8004eea:	72fb      	strb	r3, [r7, #11]
 8004eec:	4613      	mov	r3, r2
 8004eee:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681c      	ldr	r4, [r3, #0]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6898      	ldr	r0, [r3, #8]
 8004ef8:	893b      	ldrh	r3, [r7, #8]
 8004efa:	7af9      	ldrb	r1, [r7, #11]
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	47a0      	blx	r4
 8004f00:	6178      	str	r0, [r7, #20]

  return ret;
 8004f02:	697b      	ldr	r3, [r7, #20]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	371c      	adds	r7, #28
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd90      	pop	{r4, r7, pc}

08004f0c <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	4603      	mov	r3, r0
 8004f14:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8004f16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f1a:	ee07 3a90 	vmov	s15, r3
 8004f1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f22:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004f38 <lsm6dsr_from_fs2g_to_mg+0x2c>
 8004f26:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004f2a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	3d79db23 	.word	0x3d79db23

08004f3c <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	4603      	mov	r3, r0
 8004f44:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8004f46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f4a:	ee07 3a90 	vmov	s15, r3
 8004f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f52:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004f68 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 8004f56:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004f5a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	428c0000 	.word	0x428c0000

08004f6c <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	4603      	mov	r3, r0
 8004f74:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8004f76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f7a:	ee07 3a90 	vmov	s15, r3
 8004f7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f82:	eddf 6a07 	vldr	s13, [pc, #28]	; 8004fa0 <lsm6dsr_from_lsb_to_celsius+0x34>
 8004f86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f8a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004f8e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8004f92:	eeb0 0a67 	vmov.f32	s0, s15
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	43800000 	.word	0x43800000

08004fa4 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	460b      	mov	r3, r1
 8004fae:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8004fb0:	f107 0208 	add.w	r2, r7, #8
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	2110      	movs	r1, #16
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f7ff ff77 	bl	8004eac <lsm6dsr_read_reg>
 8004fbe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10f      	bne.n	8004fe6 <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8004fc6:	78fb      	ldrb	r3, [r7, #3]
 8004fc8:	f003 0303 	and.w	r3, r3, #3
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	7a3b      	ldrb	r3, [r7, #8]
 8004fd0:	f362 0383 	bfi	r3, r2, #2, #2
 8004fd4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8004fd6:	f107 0208 	add.w	r2, r7, #8
 8004fda:	2301      	movs	r3, #1
 8004fdc:	2110      	movs	r1, #16
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7ff ff7c 	bl	8004edc <lsm6dsr_write_reg>
 8004fe4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8004ffc:	78fb      	ldrb	r3, [r7, #3]
 8004ffe:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8005000:	f107 030c 	add.w	r3, r7, #12
 8005004:	4619      	mov	r1, r3
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fc54 	bl	80058b4 <lsm6dsr_fsm_enable_get>
 800500c:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	2b00      	cmp	r3, #0
 8005012:	f040 80c4 	bne.w	800519e <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005016:	7b3b      	ldrb	r3, [r7, #12]
 8005018:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800501c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800501e:	7b3b      	ldrb	r3, [r7, #12]
 8005020:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005024:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005026:	4313      	orrs	r3, r2
 8005028:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800502a:	7b3b      	ldrb	r3, [r7, #12]
 800502c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005030:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005032:	4313      	orrs	r3, r2
 8005034:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005036:	7b3b      	ldrb	r3, [r7, #12]
 8005038:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800503c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800503e:	4313      	orrs	r3, r2
 8005040:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005042:	7b3b      	ldrb	r3, [r7, #12]
 8005044:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005048:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800504a:	4313      	orrs	r3, r2
 800504c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800504e:	7b3b      	ldrb	r3, [r7, #12]
 8005050:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005054:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005056:	4313      	orrs	r3, r2
 8005058:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800505a:	7b3b      	ldrb	r3, [r7, #12]
 800505c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005060:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005062:	4313      	orrs	r3, r2
 8005064:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005066:	7b3b      	ldrb	r3, [r7, #12]
 8005068:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800506c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800506e:	4313      	orrs	r3, r2
 8005070:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005072:	7b7b      	ldrb	r3, [r7, #13]
 8005074:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005078:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800507a:	4313      	orrs	r3, r2
 800507c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800507e:	7b7b      	ldrb	r3, [r7, #13]
 8005080:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005084:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005086:	4313      	orrs	r3, r2
 8005088:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800508a:	7b7b      	ldrb	r3, [r7, #13]
 800508c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005090:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005092:	4313      	orrs	r3, r2
 8005094:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005096:	7b7b      	ldrb	r3, [r7, #13]
 8005098:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800509c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800509e:	4313      	orrs	r3, r2
 80050a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80050a2:	7b7b      	ldrb	r3, [r7, #13]
 80050a4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80050a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80050aa:	4313      	orrs	r3, r2
 80050ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80050ae:	7b7b      	ldrb	r3, [r7, #13]
 80050b0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80050b4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80050b6:	4313      	orrs	r3, r2
 80050b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80050ba:	7b7b      	ldrb	r3, [r7, #13]
 80050bc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80050c0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80050c2:	4313      	orrs	r3, r2
 80050c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80050c6:	7b7b      	ldrb	r3, [r7, #13]
 80050c8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80050cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80050ce:	4313      	orrs	r3, r2
 80050d0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d163      	bne.n	800519e <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 80050d6:	f107 030b 	add.w	r3, r7, #11
 80050da:	4619      	mov	r1, r3
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 fc15 	bl	800590c <lsm6dsr_fsm_data_rate_get>
 80050e2:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d159      	bne.n	800519e <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80050ea:	7afb      	ldrb	r3, [r7, #11]
 80050ec:	2b03      	cmp	r3, #3
 80050ee:	d853      	bhi.n	8005198 <lsm6dsr_xl_data_rate_set+0x1a8>
 80050f0:	a201      	add	r2, pc, #4	; (adr r2, 80050f8 <lsm6dsr_xl_data_rate_set+0x108>)
 80050f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f6:	bf00      	nop
 80050f8:	08005109 	.word	0x08005109
 80050fc:	0800511b 	.word	0x0800511b
 8005100:	08005139 	.word	0x08005139
 8005104:	08005163 	.word	0x08005163
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8005108:	78fb      	ldrb	r3, [r7, #3]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d102      	bne.n	8005114 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 800510e:	2301      	movs	r3, #1
 8005110:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005112:	e045      	b.n	80051a0 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005114:	78fb      	ldrb	r3, [r7, #3]
 8005116:	75fb      	strb	r3, [r7, #23]
            break;
 8005118:	e042      	b.n	80051a0 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 800511a:	78fb      	ldrb	r3, [r7, #3]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d102      	bne.n	8005126 <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8005120:	2302      	movs	r3, #2
 8005122:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005124:	e03c      	b.n	80051a0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8005126:	78fb      	ldrb	r3, [r7, #3]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d102      	bne.n	8005132 <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 800512c:	2302      	movs	r3, #2
 800512e:	75fb      	strb	r3, [r7, #23]
            break;
 8005130:	e036      	b.n	80051a0 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005132:	78fb      	ldrb	r3, [r7, #3]
 8005134:	75fb      	strb	r3, [r7, #23]
            break;
 8005136:	e033      	b.n	80051a0 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8005138:	78fb      	ldrb	r3, [r7, #3]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d102      	bne.n	8005144 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800513e:	2303      	movs	r3, #3
 8005140:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005142:	e02d      	b.n	80051a0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8005144:	78fb      	ldrb	r3, [r7, #3]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d102      	bne.n	8005150 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800514a:	2303      	movs	r3, #3
 800514c:	75fb      	strb	r3, [r7, #23]
            break;
 800514e:	e027      	b.n	80051a0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8005150:	78fb      	ldrb	r3, [r7, #3]
 8005152:	2b02      	cmp	r3, #2
 8005154:	d102      	bne.n	800515c <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8005156:	2303      	movs	r3, #3
 8005158:	75fb      	strb	r3, [r7, #23]
            break;
 800515a:	e021      	b.n	80051a0 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800515c:	78fb      	ldrb	r3, [r7, #3]
 800515e:	75fb      	strb	r3, [r7, #23]
            break;
 8005160:	e01e      	b.n	80051a0 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8005162:	78fb      	ldrb	r3, [r7, #3]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d102      	bne.n	800516e <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8005168:	2304      	movs	r3, #4
 800516a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800516c:	e018      	b.n	80051a0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 800516e:	78fb      	ldrb	r3, [r7, #3]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d102      	bne.n	800517a <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8005174:	2304      	movs	r3, #4
 8005176:	75fb      	strb	r3, [r7, #23]
            break;
 8005178:	e012      	b.n	80051a0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 800517a:	78fb      	ldrb	r3, [r7, #3]
 800517c:	2b02      	cmp	r3, #2
 800517e:	d102      	bne.n	8005186 <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8005180:	2304      	movs	r3, #4
 8005182:	75fb      	strb	r3, [r7, #23]
            break;
 8005184:	e00c      	b.n	80051a0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 8005186:	78fb      	ldrb	r3, [r7, #3]
 8005188:	2b03      	cmp	r3, #3
 800518a:	d102      	bne.n	8005192 <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 800518c:	2304      	movs	r3, #4
 800518e:	75fb      	strb	r3, [r7, #23]
            break;
 8005190:	e006      	b.n	80051a0 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005192:	78fb      	ldrb	r3, [r7, #3]
 8005194:	75fb      	strb	r3, [r7, #23]
            break;
 8005196:	e003      	b.n	80051a0 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8005198:	78fb      	ldrb	r3, [r7, #3]
 800519a:	75fb      	strb	r3, [r7, #23]
            break;
 800519c:	e000      	b.n	80051a0 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 800519e:	bf00      	nop
    }
  }

  if (ret == 0)
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d107      	bne.n	80051b6 <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80051a6:	f107 0208 	add.w	r2, r7, #8
 80051aa:	2301      	movs	r3, #1
 80051ac:	2110      	movs	r1, #16
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7ff fe7c 	bl	8004eac <lsm6dsr_read_reg>
 80051b4:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10f      	bne.n	80051dc <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 80051bc:	7dfb      	ldrb	r3, [r7, #23]
 80051be:	f003 030f 	and.w	r3, r3, #15
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	7a3b      	ldrb	r3, [r7, #8]
 80051c6:	f362 1307 	bfi	r3, r2, #4, #4
 80051ca:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 80051cc:	f107 0208 	add.w	r2, r7, #8
 80051d0:	2301      	movs	r3, #1
 80051d2:	2110      	movs	r1, #16
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f7ff fe81 	bl	8004edc <lsm6dsr_write_reg>
 80051da:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80051dc:	693b      	ldr	r3, [r7, #16]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3718      	adds	r7, #24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop

080051e8 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	460b      	mov	r3, r1
 80051f2:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80051f4:	f107 0208 	add.w	r2, r7, #8
 80051f8:	2301      	movs	r3, #1
 80051fa:	2111      	movs	r1, #17
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7ff fe55 	bl	8004eac <lsm6dsr_read_reg>
 8005202:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10f      	bne.n	800522a <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 800520a:	78fb      	ldrb	r3, [r7, #3]
 800520c:	f003 030f 	and.w	r3, r3, #15
 8005210:	b2da      	uxtb	r2, r3
 8005212:	7a3b      	ldrb	r3, [r7, #8]
 8005214:	f362 0303 	bfi	r3, r2, #0, #4
 8005218:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800521a:	f107 0208 	add.w	r2, r7, #8
 800521e:	2301      	movs	r3, #1
 8005220:	2111      	movs	r1, #17
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7ff fe5a 	bl	8004edc <lsm6dsr_write_reg>
 8005228:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800522a:	68fb      	ldr	r3, [r7, #12]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	460b      	mov	r3, r1
 800523e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 8005240:	78fb      	ldrb	r3, [r7, #3]
 8005242:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8005244:	f107 030c 	add.w	r3, r7, #12
 8005248:	4619      	mov	r1, r3
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fb32 	bl	80058b4 <lsm6dsr_fsm_enable_get>
 8005250:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	2b00      	cmp	r3, #0
 8005256:	f040 80c4 	bne.w	80053e2 <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800525a:	7b3b      	ldrb	r3, [r7, #12]
 800525c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005260:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005262:	7b3b      	ldrb	r3, [r7, #12]
 8005264:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005268:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800526a:	4313      	orrs	r3, r2
 800526c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800526e:	7b3b      	ldrb	r3, [r7, #12]
 8005270:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005274:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005276:	4313      	orrs	r3, r2
 8005278:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800527a:	7b3b      	ldrb	r3, [r7, #12]
 800527c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005280:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005282:	4313      	orrs	r3, r2
 8005284:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005286:	7b3b      	ldrb	r3, [r7, #12]
 8005288:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800528c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800528e:	4313      	orrs	r3, r2
 8005290:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005292:	7b3b      	ldrb	r3, [r7, #12]
 8005294:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005298:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800529a:	4313      	orrs	r3, r2
 800529c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800529e:	7b3b      	ldrb	r3, [r7, #12]
 80052a0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80052a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80052a6:	4313      	orrs	r3, r2
 80052a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80052aa:	7b3b      	ldrb	r3, [r7, #12]
 80052ac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80052b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80052b2:	4313      	orrs	r3, r2
 80052b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80052b6:	7b7b      	ldrb	r3, [r7, #13]
 80052b8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80052bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80052be:	4313      	orrs	r3, r2
 80052c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80052c2:	7b7b      	ldrb	r3, [r7, #13]
 80052c4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80052c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80052ca:	4313      	orrs	r3, r2
 80052cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80052ce:	7b7b      	ldrb	r3, [r7, #13]
 80052d0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80052d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80052d6:	4313      	orrs	r3, r2
 80052d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80052da:	7b7b      	ldrb	r3, [r7, #13]
 80052dc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80052e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80052e2:	4313      	orrs	r3, r2
 80052e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80052e6:	7b7b      	ldrb	r3, [r7, #13]
 80052e8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80052ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80052ee:	4313      	orrs	r3, r2
 80052f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80052f2:	7b7b      	ldrb	r3, [r7, #13]
 80052f4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80052f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80052fa:	4313      	orrs	r3, r2
 80052fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80052fe:	7b7b      	ldrb	r3, [r7, #13]
 8005300:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005304:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005306:	4313      	orrs	r3, r2
 8005308:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800530a:	7b7b      	ldrb	r3, [r7, #13]
 800530c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005310:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005312:	4313      	orrs	r3, r2
 8005314:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005316:	2b01      	cmp	r3, #1
 8005318:	d163      	bne.n	80053e2 <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 800531a:	f107 030b 	add.w	r3, r7, #11
 800531e:	4619      	mov	r1, r3
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 faf3 	bl	800590c <lsm6dsr_fsm_data_rate_get>
 8005326:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d159      	bne.n	80053e2 <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800532e:	7afb      	ldrb	r3, [r7, #11]
 8005330:	2b03      	cmp	r3, #3
 8005332:	d853      	bhi.n	80053dc <lsm6dsr_gy_data_rate_set+0x1a8>
 8005334:	a201      	add	r2, pc, #4	; (adr r2, 800533c <lsm6dsr_gy_data_rate_set+0x108>)
 8005336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533a:	bf00      	nop
 800533c:	0800534d 	.word	0x0800534d
 8005340:	0800535f 	.word	0x0800535f
 8005344:	0800537d 	.word	0x0800537d
 8005348:	080053a7 	.word	0x080053a7
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 800534c:	78fb      	ldrb	r3, [r7, #3]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d102      	bne.n	8005358 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 8005352:	2301      	movs	r3, #1
 8005354:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005356:	e045      	b.n	80053e4 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005358:	78fb      	ldrb	r3, [r7, #3]
 800535a:	75fb      	strb	r3, [r7, #23]
            break;
 800535c:	e042      	b.n	80053e4 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800535e:	78fb      	ldrb	r3, [r7, #3]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d102      	bne.n	800536a <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8005364:	2302      	movs	r3, #2
 8005366:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005368:	e03c      	b.n	80053e4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 800536a:	78fb      	ldrb	r3, [r7, #3]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d102      	bne.n	8005376 <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8005370:	2302      	movs	r3, #2
 8005372:	75fb      	strb	r3, [r7, #23]
            break;
 8005374:	e036      	b.n	80053e4 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005376:	78fb      	ldrb	r3, [r7, #3]
 8005378:	75fb      	strb	r3, [r7, #23]
            break;
 800537a:	e033      	b.n	80053e4 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800537c:	78fb      	ldrb	r3, [r7, #3]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d102      	bne.n	8005388 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8005382:	2303      	movs	r3, #3
 8005384:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005386:	e02d      	b.n	80053e4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8005388:	78fb      	ldrb	r3, [r7, #3]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d102      	bne.n	8005394 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800538e:	2303      	movs	r3, #3
 8005390:	75fb      	strb	r3, [r7, #23]
            break;
 8005392:	e027      	b.n	80053e4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8005394:	78fb      	ldrb	r3, [r7, #3]
 8005396:	2b02      	cmp	r3, #2
 8005398:	d102      	bne.n	80053a0 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800539a:	2303      	movs	r3, #3
 800539c:	75fb      	strb	r3, [r7, #23]
            break;
 800539e:	e021      	b.n	80053e4 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80053a0:	78fb      	ldrb	r3, [r7, #3]
 80053a2:	75fb      	strb	r3, [r7, #23]
            break;
 80053a4:	e01e      	b.n	80053e4 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80053a6:	78fb      	ldrb	r3, [r7, #3]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d102      	bne.n	80053b2 <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80053ac:	2304      	movs	r3, #4
 80053ae:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80053b0:	e018      	b.n	80053e4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80053b2:	78fb      	ldrb	r3, [r7, #3]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d102      	bne.n	80053be <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80053b8:	2304      	movs	r3, #4
 80053ba:	75fb      	strb	r3, [r7, #23]
            break;
 80053bc:	e012      	b.n	80053e4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 80053be:	78fb      	ldrb	r3, [r7, #3]
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d102      	bne.n	80053ca <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80053c4:	2304      	movs	r3, #4
 80053c6:	75fb      	strb	r3, [r7, #23]
            break;
 80053c8:	e00c      	b.n	80053e4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 80053ca:	78fb      	ldrb	r3, [r7, #3]
 80053cc:	2b03      	cmp	r3, #3
 80053ce:	d102      	bne.n	80053d6 <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80053d0:	2304      	movs	r3, #4
 80053d2:	75fb      	strb	r3, [r7, #23]
            break;
 80053d4:	e006      	b.n	80053e4 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80053d6:	78fb      	ldrb	r3, [r7, #3]
 80053d8:	75fb      	strb	r3, [r7, #23]
            break;
 80053da:	e003      	b.n	80053e4 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 80053dc:	78fb      	ldrb	r3, [r7, #3]
 80053de:	75fb      	strb	r3, [r7, #23]
            break;
 80053e0:	e000      	b.n	80053e4 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 80053e2:	bf00      	nop
    }
  }

  if (ret == 0)
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d107      	bne.n	80053fa <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80053ea:	f107 0208 	add.w	r2, r7, #8
 80053ee:	2301      	movs	r3, #1
 80053f0:	2111      	movs	r1, #17
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7ff fd5a 	bl	8004eac <lsm6dsr_read_reg>
 80053f8:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10f      	bne.n	8005420 <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8005400:	7dfb      	ldrb	r3, [r7, #23]
 8005402:	f003 030f 	and.w	r3, r3, #15
 8005406:	b2da      	uxtb	r2, r3
 8005408:	7a3b      	ldrb	r3, [r7, #8]
 800540a:	f362 1307 	bfi	r3, r2, #4, #4
 800540e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005410:	f107 0208 	add.w	r2, r7, #8
 8005414:	2301      	movs	r3, #1
 8005416:	2111      	movs	r1, #17
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f7ff fd5f 	bl	8004edc <lsm6dsr_write_reg>
 800541e:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8005420:	693b      	ldr	r3, [r7, #16]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3718      	adds	r7, #24
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop

0800542c <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	460b      	mov	r3, r1
 8005436:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005438:	f107 0208 	add.w	r2, r7, #8
 800543c:	2301      	movs	r3, #1
 800543e:	2112      	movs	r1, #18
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7ff fd33 	bl	8004eac <lsm6dsr_read_reg>
 8005446:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10f      	bne.n	800546e <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 800544e:	78fb      	ldrb	r3, [r7, #3]
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	b2da      	uxtb	r2, r3
 8005456:	7a3b      	ldrb	r3, [r7, #8]
 8005458:	f362 1386 	bfi	r3, r2, #6, #1
 800545c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800545e:	f107 0208 	add.w	r2, r7, #8
 8005462:	2301      	movs	r3, #1
 8005464:	2112      	movs	r1, #18
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7ff fd38 	bl	8004edc <lsm6dsr_write_reg>
 800546c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800546e:	68fb      	ldr	r3, [r7, #12]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8005482:	f107 0208 	add.w	r2, r7, #8
 8005486:	2301      	movs	r3, #1
 8005488:	211e      	movs	r1, #30
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7ff fd0e 	bl	8004eac <lsm6dsr_read_reg>
 8005490:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 8005492:	7a3b      	ldrb	r3, [r7, #8]
 8005494:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005498:	b2db      	uxtb	r3, r3
 800549a:	461a      	mov	r2, r3
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	701a      	strb	r2, [r3, #0]

  return ret;
 80054a0:	68fb      	ldr	r3, [r7, #12]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b084      	sub	sp, #16
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
 80054b2:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 80054b4:	f107 0208 	add.w	r2, r7, #8
 80054b8:	2301      	movs	r3, #1
 80054ba:	211e      	movs	r1, #30
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f7ff fcf5 	bl	8004eac <lsm6dsr_read_reg>
 80054c2:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 80054c4:	7a3b      	ldrb	r3, [r7, #8]
 80054c6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	461a      	mov	r2, r3
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	701a      	strb	r2, [r3, #0]

  return ret;
 80054d2:	68fb      	ldr	r3, [r7, #12]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 80054e6:	f107 0208 	add.w	r2, r7, #8
 80054ea:	2301      	movs	r3, #1
 80054ec:	211e      	movs	r1, #30
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7ff fcdc 	bl	8004eac <lsm6dsr_read_reg>
 80054f4:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 80054f6:	7a3b      	ldrb	r3, [r7, #8]
 80054f8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	461a      	mov	r2, r3
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	701a      	strb	r2, [r3, #0]

  return ret;
 8005504:	68fb      	ldr	r3, [r7, #12]
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b084      	sub	sp, #16
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
 8005516:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 8005518:	f107 0208 	add.w	r2, r7, #8
 800551c:	2302      	movs	r3, #2
 800551e:	2120      	movs	r1, #32
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7ff fcc3 	bl	8004eac <lsm6dsr_read_reg>
 8005526:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 8005528:	7a7b      	ldrb	r3, [r7, #9]
 800552a:	b21a      	sxth	r2, r3
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005536:	b29b      	uxth	r3, r3
 8005538:	021b      	lsls	r3, r3, #8
 800553a:	b29a      	uxth	r2, r3
 800553c:	7a3b      	ldrb	r3, [r7, #8]
 800553e:	b29b      	uxth	r3, r3
 8005540:	4413      	add	r3, r2
 8005542:	b29b      	uxth	r3, r3
 8005544:	b21a      	sxth	r2, r3
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	801a      	strh	r2, [r3, #0]

  return ret;
 800554a:	68fb      	ldr	r3, [r7, #12]
}
 800554c:	4618      	mov	r0, r3
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 800555e:	f107 020c 	add.w	r2, r7, #12
 8005562:	2306      	movs	r3, #6
 8005564:	2122      	movs	r1, #34	; 0x22
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7ff fca0 	bl	8004eac <lsm6dsr_read_reg>
 800556c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800556e:	7b7b      	ldrb	r3, [r7, #13]
 8005570:	b21a      	sxth	r2, r3
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800557c:	b29b      	uxth	r3, r3
 800557e:	021b      	lsls	r3, r3, #8
 8005580:	b29a      	uxth	r2, r3
 8005582:	7b3b      	ldrb	r3, [r7, #12]
 8005584:	b29b      	uxth	r3, r3
 8005586:	4413      	add	r3, r2
 8005588:	b29b      	uxth	r3, r3
 800558a:	b21a      	sxth	r2, r3
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005590:	7bfa      	ldrb	r2, [r7, #15]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	3302      	adds	r3, #2
 8005596:	b212      	sxth	r2, r2
 8005598:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	3302      	adds	r3, #2
 800559e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	021b      	lsls	r3, r3, #8
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	7bbb      	ldrb	r3, [r7, #14]
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	4413      	add	r3, r2
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	3302      	adds	r3, #2
 80055b4:	b212      	sxth	r2, r2
 80055b6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80055b8:	7c7a      	ldrb	r2, [r7, #17]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	3304      	adds	r3, #4
 80055be:	b212      	sxth	r2, r2
 80055c0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	3304      	adds	r3, #4
 80055c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	021b      	lsls	r3, r3, #8
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	7c3b      	ldrb	r3, [r7, #16]
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	4413      	add	r3, r2
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	3304      	adds	r3, #4
 80055dc:	b212      	sxth	r2, r2
 80055de:	801a      	strh	r2, [r3, #0]

  return ret;
 80055e0:	697b      	ldr	r3, [r7, #20]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3718      	adds	r7, #24
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b086      	sub	sp, #24
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
 80055f2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 80055f4:	f107 020c 	add.w	r2, r7, #12
 80055f8:	2306      	movs	r3, #6
 80055fa:	2128      	movs	r1, #40	; 0x28
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f7ff fc55 	bl	8004eac <lsm6dsr_read_reg>
 8005602:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005604:	7b7b      	ldrb	r3, [r7, #13]
 8005606:	b21a      	sxth	r2, r3
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005612:	b29b      	uxth	r3, r3
 8005614:	021b      	lsls	r3, r3, #8
 8005616:	b29a      	uxth	r2, r3
 8005618:	7b3b      	ldrb	r3, [r7, #12]
 800561a:	b29b      	uxth	r3, r3
 800561c:	4413      	add	r3, r2
 800561e:	b29b      	uxth	r3, r3
 8005620:	b21a      	sxth	r2, r3
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005626:	7bfa      	ldrb	r2, [r7, #15]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	3302      	adds	r3, #2
 800562c:	b212      	sxth	r2, r2
 800562e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	3302      	adds	r3, #2
 8005634:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005638:	b29b      	uxth	r3, r3
 800563a:	021b      	lsls	r3, r3, #8
 800563c:	b29a      	uxth	r2, r3
 800563e:	7bbb      	ldrb	r3, [r7, #14]
 8005640:	b29b      	uxth	r3, r3
 8005642:	4413      	add	r3, r2
 8005644:	b29a      	uxth	r2, r3
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	3302      	adds	r3, #2
 800564a:	b212      	sxth	r2, r2
 800564c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800564e:	7c7a      	ldrb	r2, [r7, #17]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	3304      	adds	r3, #4
 8005654:	b212      	sxth	r2, r2
 8005656:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	3304      	adds	r3, #4
 800565c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005660:	b29b      	uxth	r3, r3
 8005662:	021b      	lsls	r3, r3, #8
 8005664:	b29a      	uxth	r2, r3
 8005666:	7c3b      	ldrb	r3, [r7, #16]
 8005668:	b29b      	uxth	r3, r3
 800566a:	4413      	add	r3, r2
 800566c:	b29a      	uxth	r2, r3
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	3304      	adds	r3, #4
 8005672:	b212      	sxth	r2, r2
 8005674:	801a      	strh	r2, [r3, #0]

  return ret;
 8005676:	697b      	ldr	r3, [r7, #20]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3718      	adds	r7, #24
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	460b      	mov	r3, r1
 800568a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 800568c:	f107 0208 	add.w	r2, r7, #8
 8005690:	2301      	movs	r3, #1
 8005692:	2101      	movs	r1, #1
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7ff fc09 	bl	8004eac <lsm6dsr_read_reg>
 800569a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10f      	bne.n	80056c2 <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 80056a2:	78fb      	ldrb	r3, [r7, #3]
 80056a4:	f003 0303 	and.w	r3, r3, #3
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	7a3b      	ldrb	r3, [r7, #8]
 80056ac:	f362 1387 	bfi	r3, r2, #6, #2
 80056b0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 80056b2:	f107 0208 	add.w	r2, r7, #8
 80056b6:	2301      	movs	r3, #1
 80056b8:	2101      	movs	r1, #1
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7ff fc0e 	bl	8004edc <lsm6dsr_write_reg>
 80056c0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 80056c2:	68fb      	ldr	r3, [r7, #12]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 80056d6:	2301      	movs	r3, #1
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	210f      	movs	r1, #15
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f7ff fbe5 	bl	8004eac <lsm6dsr_read_reg>
 80056e2:	60f8      	str	r0, [r7, #12]

  return ret;
 80056e4:	68fb      	ldr	r3, [r7, #12]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b084      	sub	sp, #16
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
 80056f6:	460b      	mov	r3, r1
 80056f8:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80056fa:	f107 0208 	add.w	r2, r7, #8
 80056fe:	2301      	movs	r3, #1
 8005700:	2112      	movs	r1, #18
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f7ff fbd2 	bl	8004eac <lsm6dsr_read_reg>
 8005708:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10f      	bne.n	8005730 <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8005710:	78fb      	ldrb	r3, [r7, #3]
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	b2da      	uxtb	r2, r3
 8005718:	7a3b      	ldrb	r3, [r7, #8]
 800571a:	f362 0300 	bfi	r3, r2, #0, #1
 800571e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005720:	f107 0208 	add.w	r2, r7, #8
 8005724:	2301      	movs	r3, #1
 8005726:	2112      	movs	r1, #18
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7ff fbd7 	bl	8004edc <lsm6dsr_write_reg>
 800572e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005730:	68fb      	ldr	r3, [r7, #12]
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b084      	sub	sp, #16
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
 8005742:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005744:	f107 0208 	add.w	r2, r7, #8
 8005748:	2301      	movs	r3, #1
 800574a:	2112      	movs	r1, #18
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f7ff fbad 	bl	8004eac <lsm6dsr_read_reg>
 8005752:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8005754:	7a3b      	ldrb	r3, [r7, #8]
 8005756:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800575a:	b2db      	uxtb	r3, r3
 800575c:	461a      	mov	r2, r3
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	701a      	strb	r2, [r3, #0]

  return ret;
 8005762:	68fb      	ldr	r3, [r7, #12]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <lsm6dsr_xl_filter_lp2_set>:
  * @param  val    Change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	460b      	mov	r3, r1
 8005776:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005778:	f107 0208 	add.w	r2, r7, #8
 800577c:	2301      	movs	r3, #1
 800577e:	2110      	movs	r1, #16
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7ff fb93 	bl	8004eac <lsm6dsr_read_reg>
 8005786:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10f      	bne.n	80057ae <lsm6dsr_xl_filter_lp2_set+0x42>
  {
    ctrl1_xl.lpf2_xl_en = (uint8_t)val;
 800578e:	78fb      	ldrb	r3, [r7, #3]
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	b2da      	uxtb	r2, r3
 8005796:	7a3b      	ldrb	r3, [r7, #8]
 8005798:	f362 0341 	bfi	r3, r2, #1, #1
 800579c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 800579e:	f107 0208 	add.w	r2, r7, #8
 80057a2:	2301      	movs	r3, #1
 80057a4:	2110      	movs	r1, #16
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7ff fb98 	bl	8004edc <lsm6dsr_write_reg>
 80057ac:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80057ae:	68fb      	ldr	r3, [r7, #12]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <lsm6dsr_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dsr_hp_slope_xl_en_t val)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	460b      	mov	r3, r1
 80057c2:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 80057c4:	f107 0208 	add.w	r2, r7, #8
 80057c8:	2301      	movs	r3, #1
 80057ca:	2117      	movs	r1, #23
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7ff fb6d 	bl	8004eac <lsm6dsr_read_reg>
 80057d2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d121      	bne.n	800581e <lsm6dsr_xl_hp_path_on_out_set+0x66>
  {
    ctrl8_xl.hp_slope_xl_en = (((uint8_t)val & 0x10U) >> 4);
 80057da:	78fb      	ldrb	r3, [r7, #3]
 80057dc:	091b      	lsrs	r3, r3, #4
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	b2da      	uxtb	r2, r3
 80057e4:	7a3b      	ldrb	r3, [r7, #8]
 80057e6:	f362 0382 	bfi	r3, r2, #2, #1
 80057ea:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_ref_mode_xl = (((uint8_t)val & 0x20U) >> 5);
 80057ec:	78fb      	ldrb	r3, [r7, #3]
 80057ee:	095b      	lsrs	r3, r3, #5
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	b2da      	uxtb	r2, r3
 80057f6:	7a3b      	ldrb	r3, [r7, #8]
 80057f8:	f362 1304 	bfi	r3, r2, #4, #1
 80057fc:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 80057fe:	78fb      	ldrb	r3, [r7, #3]
 8005800:	f003 0307 	and.w	r3, r3, #7
 8005804:	b2da      	uxtb	r2, r3
 8005806:	7a3b      	ldrb	r3, [r7, #8]
 8005808:	f362 1347 	bfi	r3, r2, #5, #3
 800580c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL8_XL,
 800580e:	f107 0208 	add.w	r2, r7, #8
 8005812:	2301      	movs	r3, #1
 8005814:	2117      	movs	r1, #23
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7ff fb60 	bl	8004edc <lsm6dsr_write_reg>
 800581c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 800581e:	68fb      	ldr	r3, [r7, #12]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <lsm6dsr_i3c_disable_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dsr_i3c_disable_t val)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	460b      	mov	r3, r1
 8005832:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl9_xl_t ctrl9_xl;
  lsm6dsr_i3c_bus_avb_t i3c_bus_avb;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8005834:	f107 0210 	add.w	r2, r7, #16
 8005838:	2301      	movs	r3, #1
 800583a:	2118      	movs	r1, #24
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f7ff fb35 	bl	8004eac <lsm6dsr_read_reg>
 8005842:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d111      	bne.n	800586e <lsm6dsr_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 800584a:	78fb      	ldrb	r3, [r7, #3]
 800584c:	09db      	lsrs	r3, r3, #7
 800584e:	b2db      	uxtb	r3, r3
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	b2da      	uxtb	r2, r3
 8005856:	7c3b      	ldrb	r3, [r7, #16]
 8005858:	f362 0341 	bfi	r3, r2, #1, #1
 800585c:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL9_XL,
 800585e:	f107 0210 	add.w	r2, r7, #16
 8005862:	2301      	movs	r3, #1
 8005864:	2118      	movs	r1, #24
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7ff fb38 	bl	8004edc <lsm6dsr_write_reg>
 800586c:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0)
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d107      	bne.n	8005884 <lsm6dsr_i3c_disable_set+0x5c>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8005874:	f107 020c 	add.w	r2, r7, #12
 8005878:	2301      	movs	r3, #1
 800587a:	2162      	movs	r1, #98	; 0x62
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f7ff fb15 	bl	8004eac <lsm6dsr_read_reg>
 8005882:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10f      	bne.n	80058aa <lsm6dsr_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 800588a:	78fb      	ldrb	r3, [r7, #3]
 800588c:	f003 0303 	and.w	r3, r3, #3
 8005890:	b2da      	uxtb	r2, r3
 8005892:	7b3b      	ldrb	r3, [r7, #12]
 8005894:	f362 03c4 	bfi	r3, r2, #3, #2
 8005898:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 800589a:	f107 020c 	add.w	r2, r7, #12
 800589e:	2301      	movs	r3, #1
 80058a0:	2162      	movs	r1, #98	; 0x62
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7ff fb1a 	bl	8004edc <lsm6dsr_write_reg>
 80058a8:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 80058aa:	697b      	ldr	r3, [r7, #20]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3718      	adds	r7, #24
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80058be:	2102      	movs	r1, #2
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f7ff fedd 	bl	8005680 <lsm6dsr_mem_bank_set>
 80058c6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d106      	bne.n	80058dc <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 80058ce:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 80058d0:	2301      	movs	r3, #1
 80058d2:	2146      	movs	r1, #70	; 0x46
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f7ff fae9 	bl	8004eac <lsm6dsr_read_reg>
 80058da:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d107      	bne.n	80058f2 <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 80058e6:	2301      	movs	r3, #1
 80058e8:	2147      	movs	r1, #71	; 0x47
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7ff fade 	bl	8004eac <lsm6dsr_read_reg>
 80058f0:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d104      	bne.n	8005902 <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 80058f8:	2100      	movs	r1, #0
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7ff fec0 	bl	8005680 <lsm6dsr_mem_bank_set>
 8005900:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005902:	68fb      	ldr	r3, [r7, #12]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8005916:	2102      	movs	r1, #2
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f7ff feb1 	bl	8005680 <lsm6dsr_mem_bank_set>
 800591e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d107      	bne.n	8005936 <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 8005926:	f107 0208 	add.w	r2, r7, #8
 800592a:	2301      	movs	r3, #1
 800592c:	215f      	movs	r1, #95	; 0x5f
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7ff fabc 	bl	8004eac <lsm6dsr_read_reg>
 8005934:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d104      	bne.n	8005946 <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 800593c:	2100      	movs	r1, #0
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7ff fe9e 	bl	8005680 <lsm6dsr_mem_bank_set>
 8005944:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 8005946:	7a3b      	ldrb	r3, [r7, #8]
 8005948:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b03      	cmp	r3, #3
 8005950:	d81a      	bhi.n	8005988 <lsm6dsr_fsm_data_rate_get+0x7c>
 8005952:	a201      	add	r2, pc, #4	; (adr r2, 8005958 <lsm6dsr_fsm_data_rate_get+0x4c>)
 8005954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005958:	08005969 	.word	0x08005969
 800595c:	08005971 	.word	0x08005971
 8005960:	08005979 	.word	0x08005979
 8005964:	08005981 	.word	0x08005981
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	2200      	movs	r2, #0
 800596c:	701a      	strb	r2, [r3, #0]
      break;
 800596e:	e00f      	b.n	8005990 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	2201      	movs	r2, #1
 8005974:	701a      	strb	r2, [r3, #0]
      break;
 8005976:	e00b      	b.n	8005990 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	2202      	movs	r2, #2
 800597c:	701a      	strb	r2, [r3, #0]
      break;
 800597e:	e007      	b.n	8005990 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	2203      	movs	r2, #3
 8005984:	701a      	strb	r2, [r3, #0]
      break;
 8005986:	e003      	b.n	8005990 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	2200      	movs	r2, #0
 800598c:	701a      	strb	r2, [r3, #0]
      break;
 800598e:	bf00      	nop
  }

  return ret;
 8005990:	68fb      	ldr	r3, [r7, #12]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop

0800599c <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	b2d2      	uxtb	r2, r2
 80059b0:	4611      	mov	r1, r2
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	4798      	blx	r3
 80059b6:	4603      	mov	r3, r0
 80059b8:	4618      	mov	r0, r3
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <_Z12ISBDCallbackv>:

bool ISBDCallback() __attribute__((weak));
void ISBDConsoleCallback(IridiumSBD *device, char c) __attribute__((weak));
void ISBDDiagsCallback(IridiumSBD *device, char c) __attribute__((weak));

bool ISBDCallback() { return true; }
 80059c0:	b480      	push	{r7}
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	2301      	movs	r3, #1
 80059c6:	4618      	mov	r0, r3
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <_Z19ISBDConsoleCallbackP10IridiumSBDc>:
void ISBDConsoleCallback(IridiumSBD *device, char c) { }
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	460b      	mov	r3, r1
 80059da:	70fb      	strb	r3, [r7, #3]
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <_Z17ISBDDiagsCallbackP10IridiumSBDc>:
void ISBDDiagsCallback(IridiumSBD *device, char c) { }
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	460b      	mov	r3, r1
 80059f2:	70fb      	strb	r3, [r7, #3]
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <_ZN10IridiumSBD5beginEv>:



// Power on the RockBLOCK or return from sleep
int IridiumSBD::begin()
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d001      	beq.n	8005a16 <_ZN10IridiumSBD5beginEv+0x16>
      return ISBD_REENTRANT;
 8005a12:	2309      	movs	r3, #9
 8005a14:	e01a      	b.n	8005a4c <_ZN10IridiumSBD5beginEv+0x4c>

   this->reentrant = true;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalBegin();
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 faf6 	bl	8006010 <_ZN10IridiumSBD13internalBeginEv>
 8005a24:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

   // Absent a successful startup, keep the device turned off
   if (ret != ISBD_SUCCESS)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00a      	beq.n	8005a4a <_ZN10IridiumSBD5beginEv+0x4a>
   {
      if (this->useSerial)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	7c5b      	ldrb	r3, [r3, #17]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <_ZN10IridiumSBD5beginEv+0x42>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f001 fc25 	bl	800728c <_ZN10IridiumSBD13endSerialPortEv>
      power(false);
 8005a42:	2100      	movs	r1, #0
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f001 fb73 	bl	8007130 <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <_ZN10IridiumSBD11sendSBDTextEPKc>:
   return ret;
}

// Transmit a text message
int IridiumSBD::sendSBDText(const char *message)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af02      	add	r7, sp, #8
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
   if (this->reentrant)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d001      	beq.n	8005a6c <_ZN10IridiumSBD11sendSBDTextEPKc+0x18>
      return ISBD_REENTRANT;
 8005a68:	2309      	movs	r3, #9
 8005a6a:	e013      	b.n	8005a94 <_ZN10IridiumSBD11sendSBDTextEPKc+0x40>

   this->reentrant = true;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalSendReceiveSBD(message, NULL, 0, NULL, NULL);
 8005a74:	2300      	movs	r3, #0
 8005a76:	9301      	str	r3, [sp, #4]
 8005a78:	2300      	movs	r3, #0
 8005a7a:	9300      	str	r3, [sp, #0]
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	2200      	movs	r2, #0
 8005a80:	6839      	ldr	r1, [r7, #0]
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fc4a 	bl	800631c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj>
 8005a88:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 8005a92:	68fb      	ldr	r3, [r7, #12]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <_ZN10IridiumSBD16getSignalQualityERi>:
   return ret;
}

// High-level wrapper for AT+CSQ
int IridiumSBD::getSignalQuality(int &quality)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
   if (this->reentrant)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d001      	beq.n	8005ab4 <_ZN10IridiumSBD16getSignalQualityERi+0x18>
      return ISBD_REENTRANT;
 8005ab0:	2309      	movs	r3, #9
 8005ab2:	e00d      	b.n	8005ad0 <_ZN10IridiumSBD16getSignalQualityERi+0x34>

   this->reentrant = true;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalGetSignalQuality(quality);
 8005abc:	6839      	ldr	r1, [r7, #0]
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fee8 	bl	8006894 <_ZN10IridiumSBD24internalGetSignalQualityERi>
 8005ac4:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 8005ace:	68fb      	ldr	r3, [r7, #12]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3710      	adds	r7, #16
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <_ZN10IridiumSBD15adjustATTimeoutEi>:
   }
}

// Tweak AT timeout
void IridiumSBD::adjustATTimeout(int seconds)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
   this->atTimeout = seconds;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <_ZN10IridiumSBD16enableRingAlertsEb>:
{
   this->msstmWorkaroundRequested = useWorkAround;
}

void IridiumSBD::enableRingAlerts(bool enable) // true to enable SBDRING alerts and RING signal pin
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	460b      	mov	r3, r1
 8005afe:	70fb      	strb	r3, [r7, #3]
   this->ringAlertsEnabled = enable;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	78fa      	ldrb	r2, [r7, #3]
 8005b04:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
   if (enable)
 8005b08:	78fb      	ldrb	r3, [r7, #3]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00d      	beq.n	8005b2a <_ZN10IridiumSBD16enableRingAlertsEb+0x36>
   {
      this->ringAsserted = false;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
      if (!this->useSerial) // If we are using I2C, clear the ring indicator flag
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	7c5b      	ldrb	r3, [r3, #17]
 8005b1a:	f083 0301 	eor.w	r3, r3, #1
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d002      	beq.n	8005b2a <_ZN10IridiumSBD16enableRingAlertsEb+0x36>
      {
        clearRingIndicator();
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 f9b3 	bl	8005e90 <_ZN10IridiumSBD18clearRingIndicatorEv>
      }
   }
}
 8005b2a:	bf00      	nop
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
	...

08005b34 <_ZN10IridiumSBD13getSystemTimeER2tm>:

   return ret;
}

int IridiumSBD::getSystemTime(struct tm &tm)
{
 8005b34:	b5b0      	push	{r4, r5, r7, lr}
 8005b36:	b09c      	sub	sp, #112	; 0x70
 8005b38:	af02      	add	r7, sp, #8
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
   char msstmResponseBuf[24];

   send(F("AT-MSSTM\r"));
 8005b3e:	2301      	movs	r3, #1
 8005b40:	2201      	movs	r2, #1
 8005b42:	493f      	ldr	r1, [pc, #252]	; (8005c40 <_ZN10IridiumSBD13getSystemTimeER2tm+0x10c>)
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f001 fbaf 	bl	80072a8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(msstmResponseBuf, sizeof(msstmResponseBuf), "-MSSTM: "))
 8005b4a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8005b4e:	4b3d      	ldr	r3, [pc, #244]	; (8005c44 <_ZN10IridiumSBD13getSystemTimeER2tm+0x110>)
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	4b3d      	ldr	r3, [pc, #244]	; (8005c48 <_ZN10IridiumSBD13getSystemTimeER2tm+0x114>)
 8005b54:	2218      	movs	r2, #24
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 ff48 	bl	80069ec <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	f083 0301 	eor.w	r3, r3, #1
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d009      	beq.n	8005b7c <_ZN10IridiumSBD13getSystemTimeER2tm+0x48>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 fff9 	bl	8006b60 <_ZN10IridiumSBD9cancelledEv>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d001      	beq.n	8005b78 <_ZN10IridiumSBD13getSystemTimeER2tm+0x44>
 8005b74:	2304      	movs	r3, #4
 8005b76:	e05e      	b.n	8005c36 <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e05c      	b.n	8005c36 <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>

   if (!isxdigit(msstmResponseBuf[0]))
 8005b7c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005b80:	4618      	mov	r0, r3
 8005b82:	f014 f995 	bl	8019eb0 <isxdigit>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d101      	bne.n	8005b90 <_ZN10IridiumSBD13getSystemTimeER2tm+0x5c>
      return ISBD_NO_NETWORK;
 8005b8c:	230c      	movs	r3, #12
 8005b8e:	e052      	b.n	8005c36 <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>

   // Latest epoch began at May 11, 2014, at 14:23:55 UTC.
   struct tm epoch_start;
   epoch_start.tm_year = 2014 - 1900;
 8005b90:	2372      	movs	r3, #114	; 0x72
 8005b92:	62bb      	str	r3, [r7, #40]	; 0x28
   epoch_start.tm_mon = 5 - 1;
 8005b94:	2304      	movs	r3, #4
 8005b96:	627b      	str	r3, [r7, #36]	; 0x24
   epoch_start.tm_mday = 11;
 8005b98:	230b      	movs	r3, #11
 8005b9a:	623b      	str	r3, [r7, #32]
   epoch_start.tm_hour = 14;
 8005b9c:	230e      	movs	r3, #14
 8005b9e:	61fb      	str	r3, [r7, #28]
   epoch_start.tm_min = 23;
 8005ba0:	2317      	movs	r3, #23
 8005ba2:	61bb      	str	r3, [r7, #24]
   epoch_start.tm_sec = 55;
 8005ba4:	2337      	movs	r3, #55	; 0x37
 8005ba6:	617b      	str	r3, [r7, #20]

   unsigned long ticks_since_epoch = strtoul(msstmResponseBuf, NULL, 16);
 8005ba8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005bac:	2210      	movs	r2, #16
 8005bae:	2100      	movs	r1, #0
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f016 fe23 	bl	801c7fc <strtoul>
 8005bb6:	6678      	str	r0, [r7, #100]	; 0x64
      seconds less than the equivalent ticks_since_epoch. Subtract that away and
      we'll be left with a small number that won't overflow when we scale by 90/1000.

      Many thanks to Scott Weldon for this suggestion.
   */
   unsigned long secs_since_epoch = (ticks_since_epoch / 1000) * 90;
 8005bb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bba:	4a24      	ldr	r2, [pc, #144]	; (8005c4c <_ZN10IridiumSBD13getSystemTimeER2tm+0x118>)
 8005bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc0:	099b      	lsrs	r3, r3, #6
 8005bc2:	225a      	movs	r2, #90	; 0x5a
 8005bc4:	fb02 f303 	mul.w	r3, r2, r3
 8005bc8:	663b      	str	r3, [r7, #96]	; 0x60
   unsigned long small_ticks = ticks_since_epoch - (secs_since_epoch / 90) * 1000;
 8005bca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bcc:	085b      	lsrs	r3, r3, #1
 8005bce:	4a20      	ldr	r2, [pc, #128]	; (8005c50 <_ZN10IridiumSBD13getSystemTimeER2tm+0x11c>)
 8005bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd4:	095b      	lsrs	r3, r3, #5
 8005bd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005bda:	fb02 f303 	mul.w	r3, r2, r3
 8005bde:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	65fb      	str	r3, [r7, #92]	; 0x5c
   secs_since_epoch += small_ticks * 90 / 1000;
 8005be4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005be6:	225a      	movs	r2, #90	; 0x5a
 8005be8:	fb02 f303 	mul.w	r3, r2, r3
 8005bec:	4a17      	ldr	r2, [pc, #92]	; (8005c4c <_ZN10IridiumSBD13getSystemTimeER2tm+0x118>)
 8005bee:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf2:	099b      	lsrs	r3, r3, #6
 8005bf4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005bf6:	4413      	add	r3, r2
 8005bf8:	663b      	str	r3, [r7, #96]	; 0x60

   time_t epoch_time = mktime(&epoch_start);
 8005bfa:	f107 0314 	add.w	r3, r7, #20
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f014 fb90 	bl	801a324 <mktime>
 8005c04:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
   time_t now = epoch_time + secs_since_epoch;
 8005c08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f04f 0100 	mov.w	r1, #0
 8005c10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c14:	1884      	adds	r4, r0, r2
 8005c16:	eb41 0503 	adc.w	r5, r1, r3
 8005c1a:	e9c7 4502 	strd	r4, r5, [r7, #8]
   memcpy(&tm, localtime(&now), sizeof tm);
 8005c1e:	f107 0308 	add.w	r3, r7, #8
 8005c22:	4618      	mov	r0, r3
 8005c24:	f014 f94c 	bl	8019ec0 <localtime>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2224      	movs	r2, #36	; 0x24
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	6838      	ldr	r0, [r7, #0]
 8005c30:	f014 fa70 	bl	801a114 <memcpy>
   return ISBD_SUCCESS;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3768      	adds	r7, #104	; 0x68
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bdb0      	pop	{r4, r5, r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	08020e7c 	.word	0x08020e7c
 8005c44:	08020e94 	.word	0x08020e94
 8005c48:	08020e88 	.word	0x08020e88
 8005c4c:	10624dd3 	.word	0x10624dd3
 8005c50:	b60b60b7 	.word	0xb60b60b7

08005c54 <_ZN10IridiumSBD18getFirmwareVersionEPcj>:

int IridiumSBD::getFirmwareVersion(char *version, size_t bufferSize)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af02      	add	r7, sp, #8
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
   if (bufferSize < 8)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b07      	cmp	r3, #7
 8005c64:	d801      	bhi.n	8005c6a <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x16>
      return ISBD_RX_OVERFLOW;
 8005c66:	2308      	movs	r3, #8
 8005c68:	e01e      	b.n	8005ca8 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   send(F("AT+CGMR\r"));
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	4910      	ldr	r1, [pc, #64]	; (8005cb0 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x5c>)
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f001 fb19 	bl	80072a8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(version, bufferSize, "Call Processor Version: "))
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	4b0e      	ldr	r3, [pc, #56]	; (8005cb4 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x60>)
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	4b0e      	ldr	r3, [pc, #56]	; (8005cb8 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x64>)
 8005c7e:	68b9      	ldr	r1, [r7, #8]
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f000 feb3 	bl	80069ec <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8005c86:	4603      	mov	r3, r0
 8005c88:	f083 0301 	eor.w	r3, r3, #1
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d009      	beq.n	8005ca6 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x52>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f000 ff64 	bl	8006b60 <_ZN10IridiumSBD9cancelledEv>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x4e>
 8005c9e:	2304      	movs	r3, #4
 8005ca0:	e002      	b.n	8005ca8 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e000      	b.n	8005ca8 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   return ISBD_SUCCESS;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	08020e9c 	.word	0x08020e9c
 8005cb4:	08020e94 	.word	0x08020e94
 8005cb8:	08020ea8 	.word	0x08020ea8

08005cbc <_ZN10IridiumSBD21enableSuperCapChargerEb>:

void IridiumSBD::enableSuperCapCharger(bool enable)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the charger manually)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	7c5b      	ldrb	r3, [r3, #17]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d004      	beq.n	8005cda <_ZN10IridiumSBD21enableSuperCapChargerEb+0x1e>
  {
    diagprint(F("enableSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8005cd0:	4918      	ldr	r1, [pc, #96]	; (8005d34 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x78>)
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f001 fc5e 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8005cd8:	e028      	b.n	8005d2c <_ZN10IridiumSBD21enableSuperCapChargerEb+0x70>
  }

  // Enable/disable the supercapacitor charger by pulling its SHDN pin high/low
  check9603pins(); // Update IO_REGISTER
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f001 ff2f 	bl	8007b3e <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8005ce0:	78fb      	ldrb	r3, [r7, #3]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00b      	beq.n	8005cfe <_ZN10IridiumSBD21enableSuperCapChargerEb+0x42>
  {
    IO_REGISTER |= IO_SHDN; // Set the SHDN bit
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8005cfc:	e00f      	b.n	8005d1e <_ZN10IridiumSBD21enableSuperCapChargerEb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_SHDN; // Clear the SHDN bit
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005d04:	b25a      	sxtb	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005d0c:	b25b      	sxtb	r3, r3
 8005d0e:	43db      	mvns	r3, r3
 8005d10:	b25b      	sxtb	r3, r3
 8005d12:	4013      	ands	r3, r2
 8005d14:	b25b      	sxtb	r3, r3
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
  set9603pins(IO_REGISTER); // Update the pins
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005d24:	4619      	mov	r1, r3
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f001 ff42 	bl	8007bb0 <_ZN10IridiumSBD11set9603pinsEh>
}
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	08020ec4 	.word	0x08020ec4

08005d38 <_ZN10IridiumSBD20checkSuperCapChargerEv>:

bool IridiumSBD::checkSuperCapCharger()
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial (the user will have to check PGOOD manually)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	7c5b      	ldrb	r3, [r3, #17]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d005      	beq.n	8005d54 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x1c>
  {
    diagprint(F("checkSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8005d48:	4912      	ldr	r1, [pc, #72]	; (8005d94 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x5c>)
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f001 fc22 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return(false);
 8005d50:	2300      	movs	r3, #0
 8005d52:	e01a      	b.n	8005d8a <_ZN10IridiumSBD20checkSuperCapChargerEv+0x52>
  }

  // Check the status of the supercapacitor charger PGOOD pin
  check9603pins(); // Update IO_REGISTER
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f001 fef2 	bl	8007b3e <_ZN10IridiumSBD13check9603pinsEv>
  if (IO_REGISTER &= IO_PGOOD) // If the PGOOD bit is set, return true
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8005d66:	4013      	ands	r3, r2
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	bf14      	ite	ne
 8005d7a:	2301      	movne	r3, #1
 8005d7c:	2300      	moveq	r3, #0
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x50>
  {
    return(true);
 8005d84:	2301      	movs	r3, #1
 8005d86:	e000      	b.n	8005d8a <_ZN10IridiumSBD20checkSuperCapChargerEv+0x52>
  }
  else
  {
    return(false);
 8005d88:	2300      	movs	r3, #0
  }
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3708      	adds	r7, #8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	08020f10 	.word	0x08020f10

08005d98 <_ZN10IridiumSBD16enable9603NpowerEb>:

void IridiumSBD::enable9603Npower(bool enable)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	460b      	mov	r3, r1
 8005da2:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N power manually)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	7c5b      	ldrb	r3, [r3, #17]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d004      	beq.n	8005db6 <_ZN10IridiumSBD16enable9603NpowerEb+0x1e>
  {
    diagprint(F("enable9603Npower is only valid when using I2C on the Qwiic Iridium\r\n"));
 8005dac:	4918      	ldr	r1, [pc, #96]	; (8005e10 <_ZN10IridiumSBD16enable9603NpowerEb+0x78>)
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f001 fbf0 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8005db4:	e028      	b.n	8005e08 <_ZN10IridiumSBD16enable9603NpowerEb+0x70>
  }

  // Enable/disable power to the 9603N by pulling PWR_EN high/low
  check9603pins(); // Update IO_REGISTER
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f001 fec1 	bl	8007b3e <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8005dbc:	78fb      	ldrb	r3, [r7, #3]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00b      	beq.n	8005dda <_ZN10IridiumSBD16enable9603NpowerEb+0x42>
  {
    IO_REGISTER |= IO_PWR_EN; // Set the PWR_EN bit
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8005dd8:	e00f      	b.n	8005dfa <_ZN10IridiumSBD16enable9603NpowerEb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_PWR_EN; // Clear the PWR_EN bit
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005de0:	b25a      	sxtb	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8005de8:	b25b      	sxtb	r3, r3
 8005dea:	43db      	mvns	r3, r3
 8005dec:	b25b      	sxtb	r3, r3
 8005dee:	4013      	ands	r3, r2
 8005df0:	b25b      	sxtb	r3, r3
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
  set9603pins(IO_REGISTER); // Update the pins
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005e00:	4619      	mov	r1, r3
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f001 fed4 	bl	8007bb0 <_ZN10IridiumSBD11set9603pinsEh>
}
 8005e08:	3708      	adds	r7, #8
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	08020f5c 	.word	0x08020f5c

08005e14 <_ZN10IridiumSBD10enable9603Eb>:

void IridiumSBD::enable9603(bool enable)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N manually)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	7c5b      	ldrb	r3, [r3, #17]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d004      	beq.n	8005e32 <_ZN10IridiumSBD10enable9603Eb+0x1e>
  {
    diagprint(F("enable9603 is only valid when using I2C on the Qwiic Iridium\r\n"));
 8005e28:	4918      	ldr	r1, [pc, #96]	; (8005e8c <_ZN10IridiumSBD10enable9603Eb+0x78>)
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f001 fbb2 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8005e30:	e028      	b.n	8005e84 <_ZN10IridiumSBD10enable9603Eb+0x70>
  }

  // Enable/disable the 9603 by pulling ON_OFF high/low
  check9603pins(); // Update IO_REGISTER
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f001 fe83 	bl	8007b3e <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8005e38:	78fb      	ldrb	r3, [r7, #3]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00b      	beq.n	8005e56 <_ZN10IridiumSBD10enable9603Eb+0x42>
  {
    IO_REGISTER |= IO_ON_OFF; // Set the ON_OFF bit
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8005e54:	e00f      	b.n	8005e76 <_ZN10IridiumSBD10enable9603Eb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_ON_OFF; // Clear the ON_OFF bit
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005e5c:	b25a      	sxtb	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8005e64:	b25b      	sxtb	r3, r3
 8005e66:	43db      	mvns	r3, r3
 8005e68:	b25b      	sxtb	r3, r3
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	b25b      	sxtb	r3, r3
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
  set9603pins(IO_REGISTER); // Update the pins
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f001 fe96 	bl	8007bb0 <_ZN10IridiumSBD11set9603pinsEh>
}
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	08020fa4 	.word	0x08020fa4

08005e90 <_ZN10IridiumSBD18clearRingIndicatorEv>:
    return(false);
  }
}

void IridiumSBD::clearRingIndicator()
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	7c5b      	ldrb	r3, [r3, #17]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d004      	beq.n	8005eaa <_ZN10IridiumSBD18clearRingIndicatorEv+0x1a>
  {
    diagprint(F("clearRingIndicator is only valid when using I2C on the Qwiic Iridium\r\n"));
 8005ea0:	4912      	ldr	r1, [pc, #72]	; (8005eec <_ZN10IridiumSBD18clearRingIndicatorEv+0x5c>)
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f001 fb76 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8005ea8:	e01d      	b.n	8005ee6 <_ZN10IridiumSBD18clearRingIndicatorEv+0x56>
  }

  // Clear the 9603 RI flag
  check9603pins(); // Update IO_REGISTER
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f001 fe47 	bl	8007b3e <_ZN10IridiumSBD13check9603pinsEv>
  IO_REGISTER &= ~IO_RI; // Clear the RI bit
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005eb6:	b25a      	sxtb	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005ebe:	b25b      	sxtb	r3, r3
 8005ec0:	43db      	mvns	r3, r3
 8005ec2:	b25b      	sxtb	r3, r3
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	b25b      	sxtb	r3, r3
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  set9603pins(IO_REGISTER); // Update the pins
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f001 fe69 	bl	8007bb0 <_ZN10IridiumSBD11set9603pinsEh>
  this->ringAsserted = false; // Also clear the ringAsserted flag
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
}
 8005ee6:	3708      	adds	r7, #8
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	08021074 	.word	0x08021074

08005ef0 <_ZN10IridiumSBD21checkNetworkAvailableEv>:

bool IridiumSBD::checkNetworkAvailable()
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	7c5b      	ldrb	r3, [r3, #17]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d005      	beq.n	8005f0c <_ZN10IridiumSBD21checkNetworkAvailableEv+0x1c>
  {
    diagprint(F("checkNetworkAvailable is only valid when using I2C on the Qwiic Iridium\r\n"));
 8005f00:	4912      	ldr	r1, [pc, #72]	; (8005f4c <_ZN10IridiumSBD21checkNetworkAvailableEv+0x5c>)
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f001 fb46 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return(false);
 8005f08:	2300      	movs	r3, #0
 8005f0a:	e01a      	b.n	8005f42 <_ZN10IridiumSBD21checkNetworkAvailableEv+0x52>
  }

  // Check the status of the 9603 Network Available pin
  check9603pins(); // Update IO_REGISTER
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f001 fe16 	bl	8007b3e <_ZN10IridiumSBD13check9603pinsEv>
  if (IO_REGISTER &= IO_NA) // If the NA bit is set, return true
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005f1e:	4013      	ands	r3, r2
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	bf14      	ite	ne
 8005f32:	2301      	movne	r3, #1
 8005f34:	2300      	moveq	r3, #0
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d001      	beq.n	8005f40 <_ZN10IridiumSBD21checkNetworkAvailableEv+0x50>
  {
    return(true);
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e000      	b.n	8005f42 <_ZN10IridiumSBD21checkNetworkAvailableEv+0x52>
  }
  else
  {
    return(false);
 8005f40:	2300      	movs	r3, #0
  }
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	080210bc 	.word	0x080210bc

08005f50 <_ZN10IridiumSBD12clearBuffersEi>:

// High-level wrapper for AT+SBDD
int IridiumSBD::clearBuffers(int buffers)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
   if (this->reentrant)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d001      	beq.n	8005f68 <_ZN10IridiumSBD12clearBuffersEi+0x18>
      return ISBD_REENTRANT;
 8005f64:	2309      	movs	r3, #9
 8005f66:	e00d      	b.n	8005f84 <_ZN10IridiumSBD12clearBuffersEi+0x34>

   this->reentrant = true;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalClearBuffers(buffers);
 8005f70:	6839      	ldr	r1, [r7, #0]
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f001 fea6 	bl	8007cc4 <_ZN10IridiumSBD20internalClearBuffersEi>
 8005f78:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 8005f82:	68fb      	ldr	r3, [r7, #12]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <_ZN10IridiumSBD7getIMEIEPcj>:

// High-level wrapper for AT+CGSN
int IridiumSBD::getIMEI(char *IMEI, size_t bufferSize)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
   if (this->reentrant)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d001      	beq.n	8005fa6 <_ZN10IridiumSBD7getIMEIEPcj+0x1a>
      return ISBD_REENTRANT;
 8005fa2:	2309      	movs	r3, #9
 8005fa4:	e00e      	b.n	8005fc4 <_ZN10IridiumSBD7getIMEIEPcj+0x38>

   this->reentrant = true;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalGetIMEI(IMEI, bufferSize);
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	68b9      	ldr	r1, [r7, #8]
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f001 fed2 	bl	8007d5c <_ZN10IridiumSBD15internalGetIMEIEPcj>
 8005fb8:	6178      	str	r0, [r7, #20]
   this->reentrant = false;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 8005fc2:	697b      	ldr	r3, [r7, #20]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3718      	adds	r7, #24
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <_ZN10IridiumSBD11isConnectedEv>:

//Returns true if the I2C device is connected
//Always returns true for serial
//boolean IridiumSBD::isConnected() TODO
bool IridiumSBD::isConnected()
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
   if (this->useSerial) // If we are using Serial
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	7c5b      	ldrb	r3, [r3, #17]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d001      	beq.n	8005fe0 <_ZN10IridiumSBD11isConnectedEv+0x14>
   {
		return true;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e012      	b.n	8006006 <_ZN10IridiumSBD11isConnectedEv+0x3a>
   }
   else
   {
		wireport->beginTransmission((uint8_t)deviceaddress);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68da      	ldr	r2, [r3, #12]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	7c1b      	ldrb	r3, [r3, #16]
 8005fe8:	4619      	mov	r1, r3
 8005fea:	4610      	mov	r0, r2
 8005fec:	f002 fcb6 	bl	800895c <_ZN7TwoWire17beginTransmissionEh>
		return (wireport->endTransmission() == 0); // Check that the device ack's
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f002 fcfb 	bl	80089f0 <_ZN7TwoWire15endTransmissionEv>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	bf0c      	ite	eq
 8006000:	2301      	moveq	r3, #1
 8006002:	2300      	movne	r3, #0
 8006004:	b2db      	uxtb	r3, r3
   }
}
 8006006:	4618      	mov	r0, r3
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
	...

08006010 <_ZN10IridiumSBD13internalBeginEv>:
/*
Private interface
*/

int IridiumSBD::internalBegin()
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b090      	sub	sp, #64	; 0x40
 8006014:	af02      	add	r7, sp, #8
 8006016:	6078      	str	r0, [r7, #4]
   diagprint(F("Calling internalBegin\r\n"));
 8006018:	49af      	ldr	r1, [pc, #700]	; (80062d8 <_ZN10IridiumSBD13internalBeginEv+0x2c8>)
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f001 faba 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (!this->asleep)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8006026:	f083 0301 	eor.w	r3, r3, #1
 800602a:	b2db      	uxtb	r3, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	d001      	beq.n	8006034 <_ZN10IridiumSBD13internalBeginEv+0x24>
      return ISBD_ALREADY_AWAKE;
 8006030:	2301      	movs	r3, #1
 8006032:	e14c      	b.n	80062ce <_ZN10IridiumSBD13internalBeginEv+0x2be>

   if (!this->useSerial) // If we are using I2C
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	7c5b      	ldrb	r3, [r3, #17]
 8006038:	f083 0301 	eor.w	r3, r3, #1
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d005      	beq.n	800604e <_ZN10IridiumSBD13internalBeginEv+0x3e>
   {
      check9603pins(); // Update IO_REGISTER with the status of the 9603 pins
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f001 fd7b 	bl	8007b3e <_ZN10IridiumSBD13check9603pinsEv>
      check9603data(); // Get any waiting 9603 serial data
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f001 fca7 	bl	800799c <_ZN10IridiumSBD13check9603dataEv>
   }

   power(true); // power on
 800604e:	2101      	movs	r1, #1
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f001 f86d 	bl	8007130 <_ZN10IridiumSBD5powerEb>

   bool modemAlive = false;
 8006056:	2300      	movs	r3, #0
 8006058:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

   unsigned long startupTime = 500; //ms
 800605c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006060:	62fb      	str	r3, [r7, #44]	; 0x2c
   for (unsigned long start = millis(); millis() - start < startupTime;)
 8006062:	f003 f93b 	bl	80092dc <HAL_GetTick>
 8006066:	62b8      	str	r0, [r7, #40]	; 0x28
 8006068:	f003 f938 	bl	80092dc <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006074:	429a      	cmp	r2, r3
 8006076:	bf8c      	ite	hi
 8006078:	2301      	movhi	r3, #1
 800607a:	2300      	movls	r3, #0
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d007      	beq.n	8006092 <_ZN10IridiumSBD13internalBeginEv+0x82>
      if (cancelled())
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 fd6c 	bl	8006b60 <_ZN10IridiumSBD9cancelledEv>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d0ec      	beq.n	8006068 <_ZN10IridiumSBD13internalBeginEv+0x58>
         return ISBD_CANCELLED;
 800608e:	2304      	movs	r3, #4
 8006090:	e11d      	b.n	80062ce <_ZN10IridiumSBD13internalBeginEv+0x2be>

   if (this->useSerial) // If we are using Serial
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	7c5b      	ldrb	r3, [r3, #17]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d002      	beq.n	80060a0 <_ZN10IridiumSBD13internalBeginEv+0x90>
      beginSerialPort(); // Apollo3 v2.1 Serial fix - begin the Serial port 500ms after power(true)
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f001 f8e8 	bl	8007270 <_ZN10IridiumSBD15beginSerialPortEv>

   // Turn on modem and wait for a response from "AT" command to begin
   for (unsigned long start = millis(); !modemAlive && millis() - start < 1000UL * this->startupTimeout;)
 80060a0:	f003 f91c 	bl	80092dc <HAL_GetTick>
 80060a4:	6278      	str	r0, [r7, #36]	; 0x24
 80060a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060aa:	f083 0301 	eor.w	r3, r3, #1
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00f      	beq.n	80060d4 <_ZN10IridiumSBD13internalBeginEv+0xc4>
 80060b4:	f003 f912 	bl	80092dc <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	1ad2      	subs	r2, r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060c2:	4619      	mov	r1, r3
 80060c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80060c8:	fb03 f301 	mul.w	r3, r3, r1
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d201      	bcs.n	80060d4 <_ZN10IridiumSBD13internalBeginEv+0xc4>
 80060d0:	2301      	movs	r3, #1
 80060d2:	e000      	b.n	80060d6 <_ZN10IridiumSBD13internalBeginEv+0xc6>
 80060d4:	2300      	movs	r3, #0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d018      	beq.n	800610c <_ZN10IridiumSBD13internalBeginEv+0xfc>
   {
      send(F("AT\r"));
 80060da:	2301      	movs	r3, #1
 80060dc:	2201      	movs	r2, #1
 80060de:	497f      	ldr	r1, [pc, #508]	; (80062dc <_ZN10IridiumSBD13internalBeginEv+0x2cc>)
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f001 f8e1 	bl	80072a8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      modemAlive = waitForATResponse();
 80060e6:	4b7e      	ldr	r3, [pc, #504]	; (80062e0 <_ZN10IridiumSBD13internalBeginEv+0x2d0>)
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	2300      	movs	r3, #0
 80060ec:	2200      	movs	r2, #0
 80060ee:	2100      	movs	r1, #0
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fc7b 	bl	80069ec <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80060f6:	4603      	mov	r3, r0
 80060f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (cancelled())
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 fd2f 	bl	8006b60 <_ZN10IridiumSBD9cancelledEv>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d0ce      	beq.n	80060a6 <_ZN10IridiumSBD13internalBeginEv+0x96>
         return ISBD_CANCELLED;
 8006108:	2304      	movs	r3, #4
 800610a:	e0e0      	b.n	80062ce <_ZN10IridiumSBD13internalBeginEv+0x2be>
   }

   if (!modemAlive)
 800610c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006110:	f083 0301 	eor.w	r3, r3, #1
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b00      	cmp	r3, #0
 8006118:	d005      	beq.n	8006126 <_ZN10IridiumSBD13internalBeginEv+0x116>
   {
      diagprint(F("No modem detected.\r\n"));
 800611a:	4972      	ldr	r1, [pc, #456]	; (80062e4 <_ZN10IridiumSBD13internalBeginEv+0x2d4>)
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f001 fa39 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      return ISBD_NO_MODEM_DETECTED;
 8006122:	2305      	movs	r3, #5
 8006124:	e0d3      	b.n	80062ce <_ZN10IridiumSBD13internalBeginEv+0x2be>
   }

   // The usual initialization sequence
   const char *strings[3] = { "ATE1\r", "AT&D0\r", "AT&K0\r" };
 8006126:	4a70      	ldr	r2, [pc, #448]	; (80062e8 <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8006128:	f107 0310 	add.w	r3, r7, #16
 800612c:	ca07      	ldmia	r2, {r0, r1, r2}
 800612e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   for (int i=0; i<3; ++i)
 8006132:	2300      	movs	r3, #0
 8006134:	633b      	str	r3, [r7, #48]	; 0x30
 8006136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006138:	2b02      	cmp	r3, #2
 800613a:	dc26      	bgt.n	800618a <_ZN10IridiumSBD13internalBeginEv+0x17a>
   {
      send(strings[i]);
 800613c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006144:	4413      	add	r3, r2
 8006146:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800614a:	4619      	mov	r1, r3
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f001 f903 	bl	8007358 <_ZN10IridiumSBD4sendEPKc>
      if (!waitForATResponse())
 8006152:	4b63      	ldr	r3, [pc, #396]	; (80062e0 <_ZN10IridiumSBD13internalBeginEv+0x2d0>)
 8006154:	9300      	str	r3, [sp, #0]
 8006156:	2300      	movs	r3, #0
 8006158:	2200      	movs	r2, #0
 800615a:	2100      	movs	r1, #0
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 fc45 	bl	80069ec <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006162:	4603      	mov	r3, r0
 8006164:	f083 0301 	eor.w	r3, r3, #1
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b00      	cmp	r3, #0
 800616c:	d009      	beq.n	8006182 <_ZN10IridiumSBD13internalBeginEv+0x172>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fcf6 	bl	8006b60 <_ZN10IridiumSBD9cancelledEv>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d001      	beq.n	800617e <_ZN10IridiumSBD13internalBeginEv+0x16e>
 800617a:	2304      	movs	r3, #4
 800617c:	e0a7      	b.n	80062ce <_ZN10IridiumSBD13internalBeginEv+0x2be>
 800617e:	2303      	movs	r3, #3
 8006180:	e0a5      	b.n	80062ce <_ZN10IridiumSBD13internalBeginEv+0x2be>
   for (int i=0; i<3; ++i)
 8006182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006184:	3301      	adds	r3, #1
 8006186:	633b      	str	r3, [r7, #48]	; 0x30
 8006188:	e7d5      	b.n	8006136 <_ZN10IridiumSBD13internalBeginEv+0x126>
   }

   // Enable or disable RING alerts as requested by user
   // By default they are on if a RING pin was supplied on constructor
   diagprint(F("Ring alerts are")); diagprint(ringAlertsEnabled ? F("") : F(" NOT")); diagprint(F(" enabled.\r\n"));
 800618a:	4958      	ldr	r1, [pc, #352]	; (80062ec <_ZN10IridiumSBD13internalBeginEv+0x2dc>)
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f001 fa01 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8006198:	2b00      	cmp	r3, #0
 800619a:	d001      	beq.n	80061a0 <_ZN10IridiumSBD13internalBeginEv+0x190>
 800619c:	4b54      	ldr	r3, [pc, #336]	; (80062f0 <_ZN10IridiumSBD13internalBeginEv+0x2e0>)
 800619e:	e000      	b.n	80061a2 <_ZN10IridiumSBD13internalBeginEv+0x192>
 80061a0:	4b54      	ldr	r3, [pc, #336]	; (80062f4 <_ZN10IridiumSBD13internalBeginEv+0x2e4>)
 80061a2:	4619      	mov	r1, r3
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f001 f9f5 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 80061aa:	4953      	ldr	r1, [pc, #332]	; (80062f8 <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f001 f9f1 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (ringAlertsEnabled) enableRingAlerts(true); // This will clear ringAsserted and the Ring Indicator flag
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d004      	beq.n	80061c6 <_ZN10IridiumSBD13internalBeginEv+0x1b6>
 80061bc:	2101      	movs	r1, #1
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7ff fc98 	bl	8005af4 <_ZN10IridiumSBD16enableRingAlertsEb>
 80061c4:	e009      	b.n	80061da <_ZN10IridiumSBD13internalBeginEv+0x1ca>
   else {
	   if (!this->useSerial) clearRingIndicator(); // If ring alerts are not enabled and using I2C, make sure the Ring Indicator flag is clear
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	7c5b      	ldrb	r3, [r3, #17]
 80061ca:	f083 0301 	eor.w	r3, r3, #1
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d002      	beq.n	80061da <_ZN10IridiumSBD13internalBeginEv+0x1ca>
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f7ff fe5b 	bl	8005e90 <_ZN10IridiumSBD18clearRingIndicatorEv>
   }

   send(ringAlertsEnabled ? F("AT+SBDMTA=1\r") : F("AT+SBDMTA=0\r"));
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d001      	beq.n	80061e8 <_ZN10IridiumSBD13internalBeginEv+0x1d8>
 80061e4:	4945      	ldr	r1, [pc, #276]	; (80062fc <_ZN10IridiumSBD13internalBeginEv+0x2ec>)
 80061e6:	e000      	b.n	80061ea <_ZN10IridiumSBD13internalBeginEv+0x1da>
 80061e8:	4945      	ldr	r1, [pc, #276]	; (8006300 <_ZN10IridiumSBD13internalBeginEv+0x2f0>)
 80061ea:	2301      	movs	r3, #1
 80061ec:	2201      	movs	r2, #1
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f001 f85a 	bl	80072a8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse())
 80061f4:	4b3a      	ldr	r3, [pc, #232]	; (80062e0 <_ZN10IridiumSBD13internalBeginEv+0x2d0>)
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	2300      	movs	r3, #0
 80061fa:	2200      	movs	r2, #0
 80061fc:	2100      	movs	r1, #0
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 fbf4 	bl	80069ec <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006204:	4603      	mov	r3, r0
 8006206:	f083 0301 	eor.w	r3, r3, #1
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b00      	cmp	r3, #0
 800620e:	d009      	beq.n	8006224 <_ZN10IridiumSBD13internalBeginEv+0x214>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 fca5 	bl	8006b60 <_ZN10IridiumSBD9cancelledEv>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d001      	beq.n	8006220 <_ZN10IridiumSBD13internalBeginEv+0x210>
 800621c:	2304      	movs	r3, #4
 800621e:	e056      	b.n	80062ce <_ZN10IridiumSBD13internalBeginEv+0x2be>
 8006220:	2303      	movs	r3, #3
 8006222:	e054      	b.n	80062ce <_ZN10IridiumSBD13internalBeginEv+0x2be>

   // Decide whether the internal MSSTM workaround should be enforced on TX/RX
   // By default it is unless the firmware rev is >= TA13001
   char version[8];
   int ret = getFirmwareVersion(version, sizeof(version));
 8006224:	f107 0308 	add.w	r3, r7, #8
 8006228:	2208      	movs	r2, #8
 800622a:	4619      	mov	r1, r3
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f7ff fd11 	bl	8005c54 <_ZN10IridiumSBD18getFirmwareVersionEPcj>
 8006232:	6238      	str	r0, [r7, #32]
   if (ret != ISBD_SUCCESS)
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d008      	beq.n	800624c <_ZN10IridiumSBD13internalBeginEv+0x23c>
   {
      diagprint(F("Unknown FW version\r\n"));
 800623a:	4932      	ldr	r1, [pc, #200]	; (8006304 <_ZN10IridiumSBD13internalBeginEv+0x2f4>)
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f001 f9a9 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      msstmWorkaroundRequested = true;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 800624a:	e027      	b.n	800629c <_ZN10IridiumSBD13internalBeginEv+0x28c>
   }
   else
   {
      diagprint(F("Firmware version is ")); diagprint(version); diagprint(F("\r\n"));
 800624c:	492e      	ldr	r1, [pc, #184]	; (8006308 <_ZN10IridiumSBD13internalBeginEv+0x2f8>)
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f001 f9a0 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8006254:	f107 0308 	add.w	r3, r7, #8
 8006258:	4619      	mov	r1, r3
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f001 f9b4 	bl	80075c8 <_ZN10IridiumSBD9diagprintEPKc>
 8006260:	492a      	ldr	r1, [pc, #168]	; (800630c <_ZN10IridiumSBD13internalBeginEv+0x2fc>)
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f001 f996 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (version[0] == 'T' && version[1] == 'A')
 8006268:	7a3b      	ldrb	r3, [r7, #8]
 800626a:	2b54      	cmp	r3, #84	; 0x54
 800626c:	d116      	bne.n	800629c <_ZN10IridiumSBD13internalBeginEv+0x28c>
 800626e:	7a7b      	ldrb	r3, [r7, #9]
 8006270:	2b41      	cmp	r3, #65	; 0x41
 8006272:	d113      	bne.n	800629c <_ZN10IridiumSBD13internalBeginEv+0x28c>
      {
         unsigned long ver = strtoul(version + 2, NULL, 10);
 8006274:	f107 0308 	add.w	r3, r7, #8
 8006278:	3302      	adds	r3, #2
 800627a:	220a      	movs	r2, #10
 800627c:	2100      	movs	r1, #0
 800627e:	4618      	mov	r0, r3
 8006280:	f016 fabc 	bl	801c7fc <strtoul>
 8006284:	61f8      	str	r0, [r7, #28]
         msstmWorkaroundRequested = ver < ISBD_MSSTM_WORKAROUND_FW_VER;
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800628c:	4293      	cmp	r3, r2
 800628e:	bf94      	ite	ls
 8006290:	2301      	movls	r3, #1
 8006292:	2300      	movhi	r3, #0
 8006294:	b2da      	uxtb	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
      }
   }
   diagprint(F("MSSTM workaround is")); diagprint(msstmWorkaroundRequested ? F("") : F(" NOT")); diagprint(F(" enforced.\r\n"));
 800629c:	491c      	ldr	r1, [pc, #112]	; (8006310 <_ZN10IridiumSBD13internalBeginEv+0x300>)
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f001 f978 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d001      	beq.n	80062b2 <_ZN10IridiumSBD13internalBeginEv+0x2a2>
 80062ae:	4b10      	ldr	r3, [pc, #64]	; (80062f0 <_ZN10IridiumSBD13internalBeginEv+0x2e0>)
 80062b0:	e000      	b.n	80062b4 <_ZN10IridiumSBD13internalBeginEv+0x2a4>
 80062b2:	4b10      	ldr	r3, [pc, #64]	; (80062f4 <_ZN10IridiumSBD13internalBeginEv+0x2e4>)
 80062b4:	4619      	mov	r1, r3
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f001 f96c 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 80062bc:	4915      	ldr	r1, [pc, #84]	; (8006314 <_ZN10IridiumSBD13internalBeginEv+0x304>)
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f001 f968 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   // Done!
   diagprint(F("InternalBegin: success!\r\n"));
 80062c4:	4914      	ldr	r1, [pc, #80]	; (8006318 <_ZN10IridiumSBD13internalBeginEv+0x308>)
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f001 f964 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   return ISBD_SUCCESS;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3738      	adds	r7, #56	; 0x38
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	08021194 	.word	0x08021194
 80062dc:	080211ac 	.word	0x080211ac
 80062e0:	08020e94 	.word	0x08020e94
 80062e4:	080211b0 	.word	0x080211b0
 80062e8:	08021284 	.word	0x08021284
 80062ec:	080211c8 	.word	0x080211c8
 80062f0:	080211d8 	.word	0x080211d8
 80062f4:	080211dc 	.word	0x080211dc
 80062f8:	080211e4 	.word	0x080211e4
 80062fc:	080211f0 	.word	0x080211f0
 8006300:	08021200 	.word	0x08021200
 8006304:	08021210 	.word	0x08021210
 8006308:	08021228 	.word	0x08021228
 800630c:	08021240 	.word	0x08021240
 8006310:	08021244 	.word	0x08021244
 8006314:	08021258 	.word	0x08021258
 8006318:	08021268 	.word	0x08021268

0800631c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj>:

int IridiumSBD::internalSendReceiveSBD(const char *txTxtMessage, const uint8_t *txData, size_t txDataSize, uint8_t *rxBuffer, size_t *prxBufferSize)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b096      	sub	sp, #88	; 0x58
 8006320:	af04      	add	r7, sp, #16
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
 8006328:	603b      	str	r3, [r7, #0]
   diagprint(F("internalSendReceive\r\n"));
 800632a:	49a5      	ldr	r1, [pc, #660]	; (80065c0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2a4>)
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f001 f931 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (this->asleep)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8006338:	2b00      	cmp	r3, #0
 800633a:	d001      	beq.n	8006340 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x24>
      return ISBD_IS_ASLEEP;
 800633c:	230a      	movs	r3, #10
 800633e:	e289      	b.n	8006854 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

   // Binary transmission?
   if (txData && txDataSize)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	f000 8152 	beq.w	80065ec <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2d0>
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	f000 814e 	beq.w	80065ec <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2d0>
   {
      if (txDataSize > ISBD_MAX_MESSAGE_LENGTH)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8006356:	d901      	bls.n	800635c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x40>
         return ISBD_MSG_TOO_LONG;
 8006358:	230d      	movs	r3, #13
 800635a:	e27b      	b.n	8006854 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

      // send will use serial or wire as appropriate
      send(F("AT+SBDWB="), true, false);
 800635c:	2300      	movs	r3, #0
 800635e:	2201      	movs	r2, #1
 8006360:	4998      	ldr	r1, [pc, #608]	; (80065c4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2a8>)
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f000 ffa0 	bl	80072a8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      send(txDataSize);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	b29b      	uxth	r3, r3
 800636c:	4619      	mov	r1, r3
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f001 f8ca 	bl	8007508 <_ZN10IridiumSBD4sendEt>
      send(F("\r"), false);
 8006374:	2301      	movs	r3, #1
 8006376:	2200      	movs	r2, #0
 8006378:	4993      	ldr	r1, [pc, #588]	; (80065c8 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2ac>)
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f000 ff94 	bl	80072a8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      if (!waitForATResponse(NULL, 0, NULL, "READY\r\n"))
 8006380:	4b92      	ldr	r3, [pc, #584]	; (80065cc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2b0>)
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	2300      	movs	r3, #0
 8006386:	2200      	movs	r2, #0
 8006388:	2100      	movs	r1, #0
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 fb2e 	bl	80069ec <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006390:	4603      	mov	r3, r0
 8006392:	f083 0301 	eor.w	r3, r3, #1
 8006396:	b2db      	uxtb	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	d009      	beq.n	80063b0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x94>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f000 fbdf 	bl	8006b60 <_ZN10IridiumSBD9cancelledEv>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d001      	beq.n	80063ac <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x90>
 80063a8:	2304      	movs	r3, #4
 80063aa:	e253      	b.n	8006854 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 80063ac:	2303      	movs	r3, #3
 80063ae:	e251      	b.n	8006854 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

      uint16_t checksum = 0;
 80063b0:	2300      	movs	r3, #0
 80063b2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

      if (this->useSerial)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	7c5b      	ldrb	r3, [r3, #17]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d03a      	beq.n	8006434 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x118>
      {
         for (size_t i=0; i<txDataSize; ++i)
 80063be:	2300      	movs	r3, #0
 80063c0:	643b      	str	r3, [r7, #64]	; 0x40
 80063c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d21a      	bcs.n	8006400 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0xe4>
         {
            stream->write(txData[i]);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	4618      	mov	r0, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6879      	ldr	r1, [r7, #4]
 80063da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063dc:	440a      	add	r2, r1
 80063de:	7812      	ldrb	r2, [r2, #0]
 80063e0:	4611      	mov	r1, r2
 80063e2:	4798      	blx	r3
            checksum += (uint16_t)txData[i];
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063e8:	4413      	add	r3, r2
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80063f2:	4413      	add	r3, r2
 80063f4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
         for (size_t i=0; i<txDataSize; ++i)
 80063f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063fa:	3301      	adds	r3, #1
 80063fc:	643b      	str	r3, [r7, #64]	; 0x40
 80063fe:	e7e0      	b.n	80063c2 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0xa6>
         }
         stream->write((uint8_t)(checksum >> 8));
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	4618      	mov	r0, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006412:	1212      	asrs	r2, r2, #8
 8006414:	b2d2      	uxtb	r2, r2
 8006416:	4611      	mov	r1, r2
 8006418:	4798      	blx	r3
         stream->write((uint8_t)(checksum & 0xFF));
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	4618      	mov	r0, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800642c:	b2d2      	uxtb	r2, r2
 800642e:	4611      	mov	r1, r2
 8006430:	4798      	blx	r3
 8006432:	e092      	b.n	800655a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x23e>
      }
      else
      {
         //lastCheck = millis(); // Update lastCheck so we enforce a full I2C_POLLING_WAIT
         // We need to make sure we don't send too much I2C data in one go (otherwise we will overflow the ATtiny841's I2C buffer)
         size_t bytes_to_send = txDataSize; // Send this many bytes in total
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	63fb      	str	r3, [r7, #60]	; 0x3c
         size_t i=0;
 8006438:	2300      	movs	r3, #0
 800643a:	63bb      	str	r3, [r7, #56]	; 0x38
         size_t nexti;
         while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 3)) // If there are too many bytes to send all in one go
 800643c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800643e:	2b1d      	cmp	r3, #29
 8006440:	d937      	bls.n	80064b2 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x196>
         {
            nexti = i + (TINY_I2C_BUFFER_LENGTH - 3);
 8006442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006444:	331d      	adds	r3, #29
 8006446:	637b      	str	r3, [r7, #52]	; 0x34
            wireport->beginTransmission((uint8_t)deviceaddress);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	68da      	ldr	r2, [r3, #12]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	7c1b      	ldrb	r3, [r3, #16]
 8006450:	4619      	mov	r1, r3
 8006452:	4610      	mov	r0, r2
 8006454:	f002 fa82 	bl	800895c <_ZN7TwoWire17beginTransmissionEh>
            wireport->write(DATA_REG); // Point to the serial data 'register'
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	21ff      	movs	r1, #255	; 0xff
 800645e:	4618      	mov	r0, r3
 8006460:	f7ff fa9c 	bl	800599c <_ZN7TwoWire5writeEi>
            for (; i<nexti; ++i)
 8006464:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006468:	429a      	cmp	r2, r3
 800646a:	d219      	bcs.n	80064a0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x184>
            {
               wireport->write(txData[i]); // Write each byte
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	68d8      	ldr	r0, [r3, #12]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	6879      	ldr	r1, [r7, #4]
 800647a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800647c:	440a      	add	r2, r1
 800647e:	7812      	ldrb	r2, [r2, #0]
 8006480:	4611      	mov	r1, r2
 8006482:	4798      	blx	r3
               checksum += (uint16_t)txData[i];
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006488:	4413      	add	r3, r2
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	b29a      	uxth	r2, r3
 800648e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006492:	4413      	add	r3, r2
 8006494:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            for (; i<nexti; ++i)
 8006498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649a:	3301      	adds	r3, #1
 800649c:	63bb      	str	r3, [r7, #56]	; 0x38
 800649e:	e7e1      	b.n	8006464 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x148>
            }
            bytes_to_send = bytes_to_send - (TINY_I2C_BUFFER_LENGTH - 3); // Decrease the number of bytes still to send
 80064a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064a2:	3b1d      	subs	r3, #29
 80064a4:	63fb      	str	r3, [r7, #60]	; 0x3c
            wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	4618      	mov	r0, r3
 80064ac:	f002 faa0 	bl	80089f0 <_ZN7TwoWire15endTransmissionEv>
         while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 3)) // If there are too many bytes to send all in one go
 80064b0:	e7c4      	b.n	800643c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x120>
         }
         // There are now <= (TINY_I2C_BUFFER_LENGTH - 3) bytes left to send, so send them and then release the bus
         wireport->beginTransmission((uint8_t)deviceaddress);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	7c1b      	ldrb	r3, [r3, #16]
 80064ba:	4619      	mov	r1, r3
 80064bc:	4610      	mov	r0, r2
 80064be:	f002 fa4d 	bl	800895c <_ZN7TwoWire17beginTransmissionEh>
         wireport->write(DATA_REG); // Point to the 'serial register'
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	21ff      	movs	r1, #255	; 0xff
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7ff fa67 	bl	800599c <_ZN7TwoWire5writeEi>
         for (; i<txDataSize; ++i)
 80064ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d219      	bcs.n	800650a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x1ee>
         {
            wireport->write(txData[i]);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	68d8      	ldr	r0, [r3, #12]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6879      	ldr	r1, [r7, #4]
 80064e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064e6:	440a      	add	r2, r1
 80064e8:	7812      	ldrb	r2, [r2, #0]
 80064ea:	4611      	mov	r1, r2
 80064ec:	4798      	blx	r3
            checksum += (uint16_t)txData[i];
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f2:	4413      	add	r3, r2
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80064fc:	4413      	add	r3, r2
 80064fe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
         for (; i<txDataSize; ++i)
 8006502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006504:	3301      	adds	r3, #1
 8006506:	63bb      	str	r3, [r7, #56]	; 0x38
 8006508:	e7e1      	b.n	80064ce <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x1b2>
         }
         wireport->write((uint8_t)(checksum >> 8));
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	68d8      	ldr	r0, [r3, #12]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800651a:	1212      	asrs	r2, r2, #8
 800651c:	b2d2      	uxtb	r2, r2
 800651e:	4611      	mov	r1, r2
 8006520:	4798      	blx	r3
         wireport->write((uint8_t)(checksum & 0xFF));
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	68da      	ldr	r2, [r3, #12]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8006532:	b2c9      	uxtb	r1, r1
 8006534:	4610      	mov	r0, r2
 8006536:	4798      	blx	r3
         if (wireport->endTransmission() != 0) //Send data and release bus
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	4618      	mov	r0, r3
 800653e:	f002 fa57 	bl	80089f0 <_ZN7TwoWire15endTransmissionEv>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	bf14      	ite	ne
 8006548:	2301      	movne	r3, #1
 800654a:	2300      	moveq	r3, #0
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x23e>
            diagprint(F("I2C write was not successful!\r\n"));
 8006552:	491f      	ldr	r1, [pc, #124]	; (80065d0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2b4>)
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f001 f81d 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      }

      consoleprint(F("["));
 800655a:	491e      	ldr	r1, [pc, #120]	; (80065d4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2b8>)
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f001 f863 	bl	8007628 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
      consoleprint((uint16_t)txDataSize);
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	b29b      	uxth	r3, r3
 8006566:	4619      	mov	r1, r3
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f001 f88d 	bl	8007688 <_ZN10IridiumSBD12consoleprintEt>
      consoleprint(F(" bytes]"));
 800656e:	491a      	ldr	r1, [pc, #104]	; (80065d8 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2bc>)
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f001 f859 	bl	8007628 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

      diagprint(F("Checksum:"));
 8006576:	4919      	ldr	r1, [pc, #100]	; (80065dc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2c0>)
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f001 f80b 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      diagprint(checksum);
 800657e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006582:	4619      	mov	r1, r3
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f001 f835 	bl	80075f4 <_ZN10IridiumSBD9diagprintEt>
      diagprint(F("\r\n"));
 800658a:	4915      	ldr	r1, [pc, #84]	; (80065e0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2c4>)
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f001 f801 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

      if (!waitForATResponse(NULL, 0, NULL, "0\r\n\r\nOK\r\n"))
 8006592:	4b14      	ldr	r3, [pc, #80]	; (80065e4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2c8>)
 8006594:	9300      	str	r3, [sp, #0]
 8006596:	2300      	movs	r3, #0
 8006598:	2200      	movs	r2, #0
 800659a:	2100      	movs	r1, #0
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 fa25 	bl	80069ec <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80065a2:	4603      	mov	r3, r0
 80065a4:	f083 0301 	eor.w	r3, r3, #1
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f000 8091 	beq.w	80066d2 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b6>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f000 fad5 	bl	8006b60 <_ZN10IridiumSBD9cancelledEv>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d015      	beq.n	80065e8 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2cc>
 80065bc:	2304      	movs	r3, #4
 80065be:	e149      	b.n	8006854 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 80065c0:	08021290 	.word	0x08021290
 80065c4:	080212a8 	.word	0x080212a8
 80065c8:	080212b4 	.word	0x080212b4
 80065cc:	080212b8 	.word	0x080212b8
 80065d0:	080212c0 	.word	0x080212c0
 80065d4:	080212e0 	.word	0x080212e0
 80065d8:	080212e4 	.word	0x080212e4
 80065dc:	080212ec 	.word	0x080212ec
 80065e0:	08021240 	.word	0x08021240
 80065e4:	080212f8 	.word	0x080212f8
 80065e8:	2303      	movs	r3, #3
 80065ea:	e133      	b.n	8006854 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
   }

   else // Text transmission
   {
#if true // use long string implementation
      if (txTxtMessage == NULL) // It's ok to have a NULL txtTxtMessage if the transaction is RX only
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d11d      	bne.n	800662e <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x312>
      {
         send(F("AT+SBDWT=\r"));
 80065f2:	2301      	movs	r3, #1
 80065f4:	2201      	movs	r2, #1
 80065f6:	4999      	ldr	r1, [pc, #612]	; (800685c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x540>)
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f000 fe55 	bl	80072a8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
         if (!waitForATResponse())
 80065fe:	4b98      	ldr	r3, [pc, #608]	; (8006860 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x544>)
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	2300      	movs	r3, #0
 8006604:	2200      	movs	r2, #0
 8006606:	2100      	movs	r1, #0
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f000 f9ef 	bl	80069ec <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 800660e:	4603      	mov	r3, r0
 8006610:	f083 0301 	eor.w	r3, r3, #1
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d05c      	beq.n	80066d4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b8>
            return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f000 faa0 	bl	8006b60 <_ZN10IridiumSBD9cancelledEv>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x30e>
 8006626:	2304      	movs	r3, #4
 8006628:	e114      	b.n	8006854 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 800662a:	2303      	movs	r3, #3
 800662c:	e112      	b.n	8006854 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
      }
      else
      {
         // remove any embedded \r
         char *p = strchr(txTxtMessage, '\r');
 800662e:	210d      	movs	r1, #13
 8006630:	68b8      	ldr	r0, [r7, #8]
 8006632:	f015 f924 	bl	801b87e <strchr>
 8006636:	6338      	str	r0, [r7, #48]	; 0x30
         if (p) *p = 0;
 8006638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663a:	2b00      	cmp	r3, #0
 800663c:	d002      	beq.n	8006644 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x328>
 800663e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006640:	2200      	movs	r2, #0
 8006642:	701a      	strb	r2, [r3, #0]
         if (strlen(txTxtMessage) > ISBD_MAX_MESSAGE_LENGTH)
 8006644:	68b8      	ldr	r0, [r7, #8]
 8006646:	f7f9 fddd 	bl	8000204 <strlen>
 800664a:	4603      	mov	r3, r0
 800664c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8006650:	d901      	bls.n	8006656 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x33a>
            return ISBD_MSG_TOO_LONG;
 8006652:	230d      	movs	r3, #13
 8006654:	e0fe      	b.n	8006854 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         send(F("AT+SBDWT\r"));
 8006656:	2301      	movs	r3, #1
 8006658:	2201      	movs	r2, #1
 800665a:	4982      	ldr	r1, [pc, #520]	; (8006864 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x548>)
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 fe23 	bl	80072a8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
         if (!waitForATResponse(NULL, 0, NULL, "READY\r\n"))
 8006662:	4b81      	ldr	r3, [pc, #516]	; (8006868 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x54c>)
 8006664:	9300      	str	r3, [sp, #0]
 8006666:	2300      	movs	r3, #0
 8006668:	2200      	movs	r2, #0
 800666a:	2100      	movs	r1, #0
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f000 f9bd 	bl	80069ec <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006672:	4603      	mov	r3, r0
 8006674:	f083 0301 	eor.w	r3, r3, #1
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b00      	cmp	r3, #0
 800667c:	d009      	beq.n	8006692 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x376>
            return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f000 fa6e 	bl	8006b60 <_ZN10IridiumSBD9cancelledEv>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d001      	beq.n	800668e <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x372>
 800668a:	2304      	movs	r3, #4
 800668c:	e0e2      	b.n	8006854 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 800668e:	2303      	movs	r3, #3
 8006690:	e0e0      	b.n	8006854 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         sendlong(txTxtMessage);
 8006692:	68b9      	ldr	r1, [r7, #8]
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f000 feab 	bl	80073f0 <_ZN10IridiumSBD8sendlongEPKc>
         send("\r");
 800669a:	4974      	ldr	r1, [pc, #464]	; (800686c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x550>)
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f000 fe5b 	bl	8007358 <_ZN10IridiumSBD4sendEPKc>
         if (!waitForATResponse(NULL, 0, NULL, "0\r\n\r\nOK\r\n"))
 80066a2:	4b73      	ldr	r3, [pc, #460]	; (8006870 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x554>)
 80066a4:	9300      	str	r3, [sp, #0]
 80066a6:	2300      	movs	r3, #0
 80066a8:	2200      	movs	r2, #0
 80066aa:	2100      	movs	r1, #0
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 f99d 	bl	80069ec <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80066b2:	4603      	mov	r3, r0
 80066b4:	f083 0301 	eor.w	r3, r3, #1
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00a      	beq.n	80066d4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b8>
            return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f000 fa4e 	bl	8006b60 <_ZN10IridiumSBD9cancelledEv>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d001      	beq.n	80066ce <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b2>
 80066ca:	2304      	movs	r3, #4
 80066cc:	e0c2      	b.n	8006854 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 80066ce:	2303      	movs	r3, #3
 80066d0:	e0c0      	b.n	8006854 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80066d2:	bf00      	nop
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
#endif
   }

   // Long SBDIX loop begins here
   for (unsigned long start = millis(); millis() - start < 1000UL * this->sendReceiveTimeout;)
 80066d4:	f002 fe02 	bl	80092dc <HAL_GetTick>
 80066d8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80066da:	f002 fdff 	bl	80092dc <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e2:	1ad2      	subs	r2, r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066e8:	4619      	mov	r1, r3
 80066ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80066ee:	fb03 f301 	mul.w	r3, r3, r1
 80066f2:	429a      	cmp	r2, r3
 80066f4:	bf34      	ite	cc
 80066f6:	2301      	movcc	r3, #1
 80066f8:	2300      	movcs	r3, #0
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 80a4 	beq.w	800684a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x52e>
   {
      bool okToProceed = true;
 8006702:	2301      	movs	r3, #1
 8006704:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      if (this->msstmWorkaroundRequested)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00e      	beq.n	8006730 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x414>
      {
         okToProceed = false;
 8006712:	2300      	movs	r3, #0
 8006714:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
         int ret = internalMSSTMWorkaround(okToProceed);
 8006718:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800671c:	4619      	mov	r1, r3
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f000 f902 	bl	8006928 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb>
 8006724:	62b8      	str	r0, [r7, #40]	; 0x28
         if (ret != ISBD_SUCCESS)
 8006726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006728:	2b00      	cmp	r3, #0
 800672a:	d001      	beq.n	8006730 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x414>
            return ret;
 800672c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672e:	e091      	b.n	8006854 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
      }

      if (okToProceed)
 8006730:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006734:	2b00      	cmp	r3, #0
 8006736:	d077      	beq.n	8006828 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50c>
      {
         uint16_t moCode = 0, moMSN = 0, mtCode = 0, mtMSN = 0, mtLen = 0, mtRemaining = 0;
 8006738:	2300      	movs	r3, #0
 800673a:	843b      	strh	r3, [r7, #32]
 800673c:	2300      	movs	r3, #0
 800673e:	83fb      	strh	r3, [r7, #30]
 8006740:	2300      	movs	r3, #0
 8006742:	83bb      	strh	r3, [r7, #28]
 8006744:	2300      	movs	r3, #0
 8006746:	837b      	strh	r3, [r7, #26]
 8006748:	2300      	movs	r3, #0
 800674a:	833b      	strh	r3, [r7, #24]
 800674c:	2300      	movs	r3, #0
 800674e:	82fb      	strh	r3, [r7, #22]
         int ret = doSBDIX(moCode, moMSN, mtCode, mtMSN, mtLen, mtRemaining);
 8006750:	f107 001c 	add.w	r0, r7, #28
 8006754:	f107 021e 	add.w	r2, r7, #30
 8006758:	f107 0120 	add.w	r1, r7, #32
 800675c:	f107 0316 	add.w	r3, r7, #22
 8006760:	9302      	str	r3, [sp, #8]
 8006762:	f107 0318 	add.w	r3, r7, #24
 8006766:	9301      	str	r3, [sp, #4]
 8006768:	f107 031a 	add.w	r3, r7, #26
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	4603      	mov	r3, r0
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f000 fa25 	bl	8006bc0 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_>
 8006776:	6278      	str	r0, [r7, #36]	; 0x24
         if (ret != ISBD_SUCCESS)
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	2b00      	cmp	r3, #0
 800677c:	d001      	beq.n	8006782 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x466>
            return ret;
 800677e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006780:	e068      	b.n	8006854 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

         diagprint(F("SBDIX MO code: "));
 8006782:	493c      	ldr	r1, [pc, #240]	; (8006874 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x558>)
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f000 ff05 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
         diagprint(moCode);
 800678a:	8c3b      	ldrh	r3, [r7, #32]
 800678c:	4619      	mov	r1, r3
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f000 ff30 	bl	80075f4 <_ZN10IridiumSBD9diagprintEt>
         diagprint(F("\r\n"));
 8006794:	4938      	ldr	r1, [pc, #224]	; (8006878 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x55c>)
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f000 fefc 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

         if (moCode <= 4) // this range indicates successful return!
 800679c:	8c3b      	ldrh	r3, [r7, #32]
 800679e:	2b04      	cmp	r3, #4
 80067a0:	d820      	bhi.n	80067e4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4c8>
         {
            diagprint(F("SBDIX success!\r\n"));
 80067a2:	4936      	ldr	r1, [pc, #216]	; (800687c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x560>)
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f000 fef5 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

            this->remainingMessages = mtRemaining;
 80067aa:	8afb      	ldrh	r3, [r7, #22]
 80067ac:	461a      	mov	r2, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	675a      	str	r2, [r3, #116]	; 0x74
            if (mtCode == 1 && rxBuffer) // retrieved 1 message
 80067b2:	8bbb      	ldrh	r3, [r7, #28]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d10d      	bne.n	80067d4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4b8>
 80067b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00a      	beq.n	80067d4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4b8>
            {
               diagprint(F("Incoming message!\r\n"));
 80067be:	4930      	ldr	r1, [pc, #192]	; (8006880 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x564>)
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f000 fee7 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
               return doSBDRB(rxBuffer, prxBufferSize);
 80067c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80067c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f000 fa5e 	bl	8006c8c <_ZN10IridiumSBD7doSBDRBEPhPj>
 80067d0:	4603      	mov	r3, r0
 80067d2:	e028      	b.n	8006826 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50a>
            }

            else
            {
               // No data returned
               if (prxBufferSize)
 80067d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d002      	beq.n	80067e0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4c4>
                  *prxBufferSize = 0;
 80067da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067dc:	2200      	movs	r2, #0
 80067de:	601a      	str	r2, [r3, #0]
            }
            return ISBD_SUCCESS;
 80067e0:	2300      	movs	r3, #0
 80067e2:	e020      	b.n	8006826 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50a>
         }

         else if (moCode == 12 || moCode == 14 || moCode == 16) // fatal failure: no retry
 80067e4:	8c3b      	ldrh	r3, [r7, #32]
 80067e6:	2b0c      	cmp	r3, #12
 80067e8:	d005      	beq.n	80067f6 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4da>
 80067ea:	8c3b      	ldrh	r3, [r7, #32]
 80067ec:	2b0e      	cmp	r3, #14
 80067ee:	d002      	beq.n	80067f6 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4da>
 80067f0:	8c3b      	ldrh	r3, [r7, #32]
 80067f2:	2b10      	cmp	r3, #16
 80067f4:	d105      	bne.n	8006802 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4e6>
         {
            diagprint(F("SBDIX fatal!\r\n"));
 80067f6:	4923      	ldr	r1, [pc, #140]	; (8006884 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x568>)
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f000 fecb 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
            return ISBD_SBDIX_FATAL_ERROR;
 80067fe:	2306      	movs	r3, #6
 8006800:	e011      	b.n	8006826 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50a>
         }

         else // retry
         {
            diagprint(F("Waiting for SBDIX retry...\r\n"));
 8006802:	4921      	ldr	r1, [pc, #132]	; (8006888 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x56c>)
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f000 fec5 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
            if (!noBlockWait(sbdixInterval))
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800680e:	4619      	mov	r1, r3
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f000 f8c5 	bl	80069a0 <_ZN10IridiumSBD11noBlockWaitEi>
 8006816:	4603      	mov	r3, r0
 8006818:	f083 0301 	eor.w	r3, r3, #1
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	f43f af5b 	beq.w	80066da <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3be>
               return ISBD_CANCELLED;
 8006824:	2304      	movs	r3, #4
            return ret;
 8006826:	e015      	b.n	8006854 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         }
      }

      else // MSSTM check fail
      {
         diagprint(F("Waiting for MSSTM retry...\r\n"));
 8006828:	4918      	ldr	r1, [pc, #96]	; (800688c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x570>)
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f000 feb2 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
         if (!noBlockWait(ISBD_MSSTM_RETRY_INTERVAL))
 8006830:	210a      	movs	r1, #10
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f000 f8b4 	bl	80069a0 <_ZN10IridiumSBD11noBlockWaitEi>
 8006838:	4603      	mov	r3, r0
 800683a:	f083 0301 	eor.w	r3, r3, #1
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b00      	cmp	r3, #0
 8006842:	f43f af4a 	beq.w	80066da <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3be>
            return ISBD_CANCELLED;
 8006846:	2304      	movs	r3, #4
 8006848:	e004      	b.n	8006854 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
      }
   } // big wait loop

   diagprint(F("SBDIX timeout!\r\n"));
 800684a:	4911      	ldr	r1, [pc, #68]	; (8006890 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x574>)
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f000 fea1 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   return ISBD_SENDRECEIVE_TIMEOUT;
 8006852:	2307      	movs	r3, #7
}
 8006854:	4618      	mov	r0, r3
 8006856:	3748      	adds	r7, #72	; 0x48
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	08021304 	.word	0x08021304
 8006860:	08020e94 	.word	0x08020e94
 8006864:	08021310 	.word	0x08021310
 8006868:	080212b8 	.word	0x080212b8
 800686c:	080212b4 	.word	0x080212b4
 8006870:	080212f8 	.word	0x080212f8
 8006874:	0802131c 	.word	0x0802131c
 8006878:	08021240 	.word	0x08021240
 800687c:	0802132c 	.word	0x0802132c
 8006880:	08021340 	.word	0x08021340
 8006884:	08021354 	.word	0x08021354
 8006888:	08021364 	.word	0x08021364
 800688c:	08021384 	.word	0x08021384
 8006890:	080213a4 	.word	0x080213a4

08006894 <_ZN10IridiumSBD24internalGetSignalQualityERi>:

int IridiumSBD::internalGetSignalQuality(int &quality)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af02      	add	r7, sp, #8
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
   if (this->asleep)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <_ZN10IridiumSBD24internalGetSignalQualityERi+0x18>
      return ISBD_IS_ASLEEP;
 80068a8:	230a      	movs	r3, #10
 80068aa:	e032      	b.n	8006912 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>

   char csqResponseBuf[2];

   send(F("AT+CSQ\r"));
 80068ac:	2301      	movs	r3, #1
 80068ae:	2201      	movs	r2, #1
 80068b0:	491a      	ldr	r1, [pc, #104]	; (800691c <_ZN10IridiumSBD24internalGetSignalQualityERi+0x88>)
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fcf8 	bl	80072a8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(csqResponseBuf, sizeof(csqResponseBuf), "+CSQ:"))
 80068b8:	f107 010c 	add.w	r1, r7, #12
 80068bc:	4b18      	ldr	r3, [pc, #96]	; (8006920 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x8c>)
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	4b18      	ldr	r3, [pc, #96]	; (8006924 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x90>)
 80068c2:	2202      	movs	r2, #2
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f891 	bl	80069ec <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80068ca:	4603      	mov	r3, r0
 80068cc:	f083 0301 	eor.w	r3, r3, #1
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d009      	beq.n	80068ea <_ZN10IridiumSBD24internalGetSignalQualityERi+0x56>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f942 	bl	8006b60 <_ZN10IridiumSBD9cancelledEv>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d001      	beq.n	80068e6 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x52>
 80068e2:	2304      	movs	r3, #4
 80068e4:	e015      	b.n	8006912 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>
 80068e6:	2303      	movs	r3, #3
 80068e8:	e013      	b.n	8006912 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>

   if (isdigit(csqResponseBuf[0]))
 80068ea:	7b3b      	ldrb	r3, [r7, #12]
 80068ec:	3b30      	subs	r3, #48	; 0x30
 80068ee:	2b09      	cmp	r3, #9
 80068f0:	bf94      	ite	ls
 80068f2:	2301      	movls	r3, #1
 80068f4:	2300      	movhi	r3, #0
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d009      	beq.n	8006910 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7c>
   {
      quality = atoi(csqResponseBuf);
 80068fc:	f107 030c 	add.w	r3, r7, #12
 8006900:	4618      	mov	r0, r3
 8006902:	f013 f9ac 	bl	8019c5e <atoi>
 8006906:	4602      	mov	r2, r0
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	601a      	str	r2, [r3, #0]
      return ISBD_SUCCESS;
 800690c:	2300      	movs	r3, #0
 800690e:	e000      	b.n	8006912 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>
   }

   return ISBD_PROTOCOL_ERROR;
 8006910:	2303      	movs	r3, #3
}
 8006912:	4618      	mov	r0, r3
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	080213b8 	.word	0x080213b8
 8006920:	08020e94 	.word	0x08020e94
 8006924:	080213c0 	.word	0x080213c0

08006928 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb>:

int IridiumSBD::internalMSSTMWorkaround(bool &okToProceed)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b08a      	sub	sp, #40	; 0x28
 800692c:	af02      	add	r7, sp, #8
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
   satellite. Ensuring that the received signal strength reported in response to AT command +CSQ and +CIER is above 2-3 bars
   before attempting SBD communication will protect against lockout.
   */
   char msstmResponseBuf[24];

   send(F("AT-MSSTM\r"));
 8006932:	2301      	movs	r3, #1
 8006934:	2201      	movs	r2, #1
 8006936:	4917      	ldr	r1, [pc, #92]	; (8006994 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x6c>)
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fcb5 	bl	80072a8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(msstmResponseBuf, sizeof(msstmResponseBuf), "-MSSTM: "))
 800693e:	f107 0108 	add.w	r1, r7, #8
 8006942:	4b15      	ldr	r3, [pc, #84]	; (8006998 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x70>)
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	4b15      	ldr	r3, [pc, #84]	; (800699c <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x74>)
 8006948:	2218      	movs	r2, #24
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f84e 	bl	80069ec <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006950:	4603      	mov	r3, r0
 8006952:	f083 0301 	eor.w	r3, r3, #1
 8006956:	b2db      	uxtb	r3, r3
 8006958:	2b00      	cmp	r3, #0
 800695a:	d009      	beq.n	8006970 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x48>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f8ff 	bl	8006b60 <_ZN10IridiumSBD9cancelledEv>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x44>
 8006968:	2304      	movs	r3, #4
 800696a:	e00e      	b.n	800698a <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x62>
 800696c:	2303      	movs	r3, #3
 800696e:	e00c      	b.n	800698a <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x62>

   // Response buf now contains either an 8-digit number or the string "no network service"
   okToProceed = isxdigit(msstmResponseBuf[0]);
 8006970:	7a3b      	ldrb	r3, [r7, #8]
 8006972:	4618      	mov	r0, r3
 8006974:	f013 fa9c 	bl	8019eb0 <isxdigit>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	bf14      	ite	ne
 800697e:	2301      	movne	r3, #1
 8006980:	2300      	moveq	r3, #0
 8006982:	b2da      	uxtb	r2, r3
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	701a      	strb	r2, [r3, #0]
   return ISBD_SUCCESS;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3720      	adds	r7, #32
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	08020e7c 	.word	0x08020e7c
 8006998:	08020e94 	.word	0x08020e94
 800699c:	08020e88 	.word	0x08020e88

080069a0 <_ZN10IridiumSBD11noBlockWaitEi>:

   return ISBD_SUCCESS;
}

bool IridiumSBD::noBlockWait(int seconds)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
   for (unsigned long start=millis(); millis() - start < 1000UL * seconds;)
 80069aa:	f002 fc97 	bl	80092dc <HAL_GetTick>
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	f002 fc94 	bl	80092dc <HAL_GetTick>
 80069b4:	4602      	mov	r2, r0
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	1ad2      	subs	r2, r2, r3
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80069c0:	fb01 f303 	mul.w	r3, r1, r3
 80069c4:	429a      	cmp	r2, r3
 80069c6:	bf34      	ite	cc
 80069c8:	2301      	movcc	r3, #1
 80069ca:	2300      	movcs	r3, #0
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d007      	beq.n	80069e2 <_ZN10IridiumSBD11noBlockWaitEi+0x42>
      if (cancelled())
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f8c4 	bl	8006b60 <_ZN10IridiumSBD9cancelledEv>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d0e8      	beq.n	80069b0 <_ZN10IridiumSBD11noBlockWaitEi+0x10>
         return false;
 80069de:	2300      	movs	r3, #0
 80069e0:	e000      	b.n	80069e4 <_ZN10IridiumSBD11noBlockWaitEi+0x44>

   return true;
 80069e2:	2301      	movs	r3, #1
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>:

// Wait for response from previous AT command.  This process terminates when "terminator" string is seen or upon timeout.
// If "prompt" string is provided (example "+CSQ:"), then all characters following prompt up to the next CRLF are
// stored in response buffer for later parsing by caller.
bool IridiumSBD::waitForATResponse(char *response, int responseSize, const char *prompt, const char *terminator)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b08a      	sub	sp, #40	; 0x28
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
 80069f8:	603b      	str	r3, [r7, #0]
   diagprint(F("Waiting for response "));
 80069fa:	4957      	ldr	r1, [pc, #348]	; (8006b58 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x16c>)
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f000 fdc9 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   diagprint(terminator);
 8006a02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f000 fddf 	bl	80075c8 <_ZN10IridiumSBD9diagprintEPKc>
   //this->print((char*) terminator); //TODO doesn't print otherwise
   diagprint(F("\r\n"));
 8006a0a:	4954      	ldr	r1, [pc, #336]	; (8006b5c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x170>)
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f000 fdc1 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (response)
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d005      	beq.n	8006a24 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x38>
      memset(response, 0, responseSize);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	68b8      	ldr	r0, [r7, #8]
 8006a20:	f013 fba0 	bl	801a164 <memset>

   int matchPromptPos = 0; // Matches chars in prompt
 8006a24:	2300      	movs	r3, #0
 8006a26:	627b      	str	r3, [r7, #36]	; 0x24
   int matchTerminatorPos = 0; // Matches chars in terminator
 8006a28:	2300      	movs	r3, #0
 8006a2a:	623b      	str	r3, [r7, #32]
   enum {LOOKING_FOR_PROMPT, GATHERING_RESPONSE, LOOKING_FOR_TERMINATOR};
   int promptState = prompt ? LOOKING_FOR_PROMPT : LOOKING_FOR_TERMINATOR;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d001      	beq.n	8006a36 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x4a>
 8006a32:	2300      	movs	r3, #0
 8006a34:	e000      	b.n	8006a38 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x4c>
 8006a36:	2302      	movs	r3, #2
 8006a38:	61fb      	str	r3, [r7, #28]
   //consoleprint(F("<< ")); //TODO If we comment out this it looks cleaner in the serial

   for (unsigned long start=millis(); millis() - start < 1000UL * atTimeout;)
 8006a3a:	f002 fc4f 	bl	80092dc <HAL_GetTick>
 8006a3e:	61b8      	str	r0, [r7, #24]
 8006a40:	f002 fc4c 	bl	80092dc <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	1ad2      	subs	r2, r2, r3
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a4e:	4619      	mov	r1, r3
 8006a50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a54:	fb03 f301 	mul.w	r3, r3, r1
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	bf34      	ite	cc
 8006a5c:	2301      	movcc	r3, #1
 8006a5e:	2300      	movcs	r3, #0
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d072      	beq.n	8006b4c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x160>
   {
      if (cancelled())
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f000 f87a 	bl	8006b60 <_ZN10IridiumSBD9cancelledEv>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x8a>
         return false;
 8006a72:	2300      	movs	r3, #0
 8006a74:	e06b      	b.n	8006b4e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x162>

      while (filteredavailable() > 0)
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f000 ff2e 	bl	80078d8 <_ZN10IridiumSBD17filteredavailableEv>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	bfcc      	ite	gt
 8006a82:	2301      	movgt	r3, #1
 8006a84:	2300      	movle	r3, #0
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d0d9      	beq.n	8006a40 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x54>
      {
         char c = filteredread();
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 ff3f 	bl	8007910 <_ZN10IridiumSBD12filteredreadEv>
 8006a92:	4603      	mov	r3, r0
 8006a94:	75fb      	strb	r3, [r7, #23]
         if (prompt)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d03b      	beq.n	8006b14 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x128>
         {
            switch (promptState)
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d003      	beq.n	8006aaa <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xbe>
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d01d      	beq.n	8006ae4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xf8>
 8006aa8:	e034      	b.n	8006b14 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x128>
            {
            case LOOKING_FOR_PROMPT:
               if (c == prompt[matchPromptPos])
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	4413      	add	r3, r2
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	7dfa      	ldrb	r2, [r7, #23]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d10b      	bne.n	8006ad0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xe4>
               {
                  ++matchPromptPos;
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	3301      	adds	r3, #1
 8006abc:	627b      	str	r3, [r7, #36]	; 0x24
                  if (prompt[matchPromptPos] == '\0')
 8006abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac0:	683a      	ldr	r2, [r7, #0]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d121      	bne.n	8006b0e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x122>
                     promptState = GATHERING_RESPONSE;
 8006aca:	2301      	movs	r3, #1
 8006acc:	61fb      	str	r3, [r7, #28]
               else
               {
                  matchPromptPos = c == prompt[0] ? 1 : 0;
               }

               break;
 8006ace:	e01e      	b.n	8006b0e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x122>
                  matchPromptPos = c == prompt[0] ? 1 : 0;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	7dfa      	ldrb	r2, [r7, #23]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d101      	bne.n	8006ade <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xf2>
 8006ada:	2301      	movs	r3, #1
 8006adc:	e000      	b.n	8006ae0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xf4>
 8006ade:	2300      	movs	r3, #0
 8006ae0:	627b      	str	r3, [r7, #36]	; 0x24
               break;
 8006ae2:	e014      	b.n	8006b0e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x122>
            case GATHERING_RESPONSE: // gathering response from end of prompt to first \r
               if (response)
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d013      	beq.n	8006b12 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x126>
               {
                  if (c == '\r' || responseSize < 2)
 8006aea:	7dfb      	ldrb	r3, [r7, #23]
 8006aec:	2b0d      	cmp	r3, #13
 8006aee:	d002      	beq.n	8006af6 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x10a>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	dc02      	bgt.n	8006afc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x110>
                  {
                     promptState = LOOKING_FOR_TERMINATOR;
 8006af6:	2302      	movs	r3, #2
 8006af8:	61fb      	str	r3, [r7, #28]
                  {
                     *response++ = c;
                     responseSize--;
                  }
               }
               break;
 8006afa:	e00a      	b.n	8006b12 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x126>
                     *response++ = c;
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	1c5a      	adds	r2, r3, #1
 8006b00:	60ba      	str	r2, [r7, #8]
 8006b02:	7dfa      	ldrb	r2, [r7, #23]
 8006b04:	701a      	strb	r2, [r3, #0]
                     responseSize--;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	607b      	str	r3, [r7, #4]
               break;
 8006b0c:	e001      	b.n	8006b12 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x126>
               break;
 8006b0e:	bf00      	nop
 8006b10:	e000      	b.n	8006b14 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x128>
               break;
 8006b12:	bf00      	nop
            }
         }

         if (c == terminator[matchTerminatorPos])
 8006b14:	6a3b      	ldr	r3, [r7, #32]
 8006b16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b18:	4413      	add	r3, r2
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	7dfa      	ldrb	r2, [r7, #23]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d10a      	bne.n	8006b38 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x14c>
         {
            ++matchTerminatorPos;
 8006b22:	6a3b      	ldr	r3, [r7, #32]
 8006b24:	3301      	adds	r3, #1
 8006b26:	623b      	str	r3, [r7, #32]
            if (terminator[matchTerminatorPos] == '\0')
 8006b28:	6a3b      	ldr	r3, [r7, #32]
 8006b2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b2c:	4413      	add	r3, r2
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1a0      	bne.n	8006a76 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x8a>
               return true;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e00a      	b.n	8006b4e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x162>
         }
         else
         {
            matchTerminatorPos = c == terminator[0] ? 1 : 0;
 8006b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	7dfa      	ldrb	r2, [r7, #23]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d101      	bne.n	8006b46 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x15a>
 8006b42:	2301      	movs	r3, #1
 8006b44:	e000      	b.n	8006b48 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x15c>
 8006b46:	2300      	movs	r3, #0
 8006b48:	623b      	str	r3, [r7, #32]
      while (filteredavailable() > 0)
 8006b4a:	e794      	b.n	8006a76 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x8a>
         }
      } // while (filteredavailable() > 0)
   } // timer loop
   return false;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3728      	adds	r7, #40	; 0x28
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	080213c8 	.word	0x080213c8
 8006b5c:	08021240 	.word	0x08021240

08006b60 <_ZN10IridiumSBD9cancelledEv>:

bool IridiumSBD::cancelled()
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
   if (this->useSerial)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	7c5b      	ldrb	r3, [r3, #17]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d019      	beq.n	8006ba4 <_ZN10IridiumSBD9cancelledEv+0x44>
   {
	   //TODO For some reason when using digitalRead here it didn't work so simply replaced with HAL function
	   //if ((ringPin != -1) && digitalRead(ringPin) == LOW)
	     if ((ringPin != -1) && HAL_GPIO_ReadPin(ringPin_GPIO_Port,ringPin_Pin) == LOW)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7a:	d008      	beq.n	8006b8e <_ZN10IridiumSBD9cancelledEv+0x2e>
 8006b7c:	2110      	movs	r1, #16
 8006b7e:	480e      	ldr	r0, [pc, #56]	; (8006bb8 <_ZN10IridiumSBD9cancelledEv+0x58>)
 8006b80:	f003 f90e 	bl	8009da0 <HAL_GPIO_ReadPin>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d101      	bne.n	8006b8e <_ZN10IridiumSBD9cancelledEv+0x2e>
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e000      	b.n	8006b90 <_ZN10IridiumSBD9cancelledEv+0x30>
 8006b8e:	2300      	movs	r3, #0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d007      	beq.n	8006ba4 <_ZN10IridiumSBD9cancelledEv+0x44>
	  {
         ringAsserted = true;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
		 diagprint(F("ringPin seen!\r\n"));
 8006b9c:	4907      	ldr	r1, [pc, #28]	; (8006bbc <_ZN10IridiumSBD9cancelledEv+0x5c>)
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fcf8 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
	  }
   }

   return !ISBDCallback();
 8006ba4:	f7fe ff0c 	bl	80059c0 <_Z12ISBDCallbackv>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	f083 0301 	eor.w	r3, r3, #1
 8006bae:	b2db      	uxtb	r3, r3
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	40020800 	.word	0x40020800
 8006bbc:	080213e0 	.word	0x080213e0

08006bc0 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_>:

int IridiumSBD::doSBDIX(uint16_t &moCode, uint16_t &moMSN, uint16_t &mtCode, uint16_t &mtMSN, uint16_t &mtLen, uint16_t &mtRemaining)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b096      	sub	sp, #88	; 0x58
 8006bc4:	af02      	add	r7, sp, #8
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
 8006bcc:	603b      	str	r3, [r7, #0]
   // Returns xx,xxxxx,xx,xxxxx,xx,xxx
   char sbdixResponseBuf[32];
   send(F("AT+SBDIX\r"));
 8006bce:	2301      	movs	r3, #1
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	492a      	ldr	r1, [pc, #168]	; (8006c7c <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xbc>)
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f000 fb67 	bl	80072a8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(sbdixResponseBuf, sizeof(sbdixResponseBuf), "+SBDIX: "))
 8006bda:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006bde:	4b28      	ldr	r3, [pc, #160]	; (8006c80 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xc0>)
 8006be0:	9300      	str	r3, [sp, #0]
 8006be2:	4b28      	ldr	r3, [pc, #160]	; (8006c84 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xc4>)
 8006be4:	2220      	movs	r2, #32
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f7ff ff00 	bl	80069ec <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006bec:	4603      	mov	r3, r0
 8006bee:	f083 0301 	eor.w	r3, r3, #1
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d009      	beq.n	8006c0c <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x4c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f7ff ffb1 	bl	8006b60 <_ZN10IridiumSBD9cancelledEv>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d001      	beq.n	8006c08 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x48>
 8006c04:	2304      	movs	r3, #4
 8006c06:	e035      	b.n	8006c74 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb4>
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e033      	b.n	8006c74 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb4>

   uint16_t *values[6] = { &moCode, &moMSN, &mtCode, &mtMSN, &mtLen, &mtRemaining };
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	613b      	str	r3, [r7, #16]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	617b      	str	r3, [r7, #20]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	61bb      	str	r3, [r7, #24]
 8006c18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c1a:	61fb      	str	r3, [r7, #28]
 8006c1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c1e:	623b      	str	r3, [r7, #32]
 8006c20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c22:	627b      	str	r3, [r7, #36]	; 0x24
   for (int i=0; i<6; ++i)
 8006c24:	2300      	movs	r3, #0
 8006c26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c2a:	2b05      	cmp	r3, #5
 8006c2c:	dc21      	bgt.n	8006c72 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb2>
   {
      char *p = strtok(i == 0 ? sbdixResponseBuf : NULL, ", ");
 8006c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d102      	bne.n	8006c3a <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x7a>
 8006c34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c38:	e000      	b.n	8006c3c <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x7c>
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	4912      	ldr	r1, [pc, #72]	; (8006c88 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xc8>)
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f015 fc72 	bl	801c528 <strtok>
 8006c44:	64b8      	str	r0, [r7, #72]	; 0x48
      if (p == NULL)
 8006c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x90>
         return ISBD_PROTOCOL_ERROR;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e011      	b.n	8006c74 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb4>
      *values[i] = atol(p);
 8006c50:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006c52:	f013 f808 	bl	8019c66 <atol>
 8006c56:	4602      	mov	r2, r0
 8006c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8006c60:	440b      	add	r3, r1
 8006c62:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8006c66:	b292      	uxth	r2, r2
 8006c68:	801a      	strh	r2, [r3, #0]
   for (int i=0; i<6; ++i)
 8006c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c70:	e7da      	b.n	8006c28 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x68>
   }
   return ISBD_SUCCESS;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3750      	adds	r7, #80	; 0x50
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	080213f0 	.word	0x080213f0
 8006c80:	08020e94 	.word	0x08020e94
 8006c84:	080213fc 	.word	0x080213fc
 8006c88:	08021408 	.word	0x08021408

08006c8c <_ZN10IridiumSBD7doSBDRBEPhPj>:

int IridiumSBD::doSBDRB(uint8_t *rxBuffer, size_t *prxBufferSize)
{
 8006c8c:	b590      	push	{r4, r7, lr}
 8006c8e:	b08b      	sub	sp, #44	; 0x2c
 8006c90:	af02      	add	r7, sp, #8
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
   bool rxOverflow = false;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	77fb      	strb	r3, [r7, #31]

   send(F("AT+SBDRB\r"));
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	49a2      	ldr	r1, [pc, #648]	; (8006f2c <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a0>)
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f000 fb00 	bl	80072a8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(NULL, 0, NULL, "AT+SBDRB\r")) // waits for its own echo
 8006ca8:	4ba0      	ldr	r3, [pc, #640]	; (8006f2c <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a0>)
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	2300      	movs	r3, #0
 8006cae:	2200      	movs	r2, #0
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f7ff fe9a 	bl	80069ec <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	f083 0301 	eor.w	r3, r3, #1
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d009      	beq.n	8006cd8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x4c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006cc4:	68f8      	ldr	r0, [r7, #12]
 8006cc6:	f7ff ff4b 	bl	8006b60 <_ZN10IridiumSBD9cancelledEv>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d001      	beq.n	8006cd4 <_ZN10IridiumSBD7doSBDRBEPhPj+0x48>
 8006cd0:	2304      	movs	r3, #4
 8006cd2:	e223      	b.n	800711c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	e221      	b.n	800711c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   if(!this->useSerial) check9603data(); // Check for any 9603 serial data
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	7c5b      	ldrb	r3, [r3, #17]
 8006cdc:	f083 0301 	eor.w	r3, r3, #1
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d002      	beq.n	8006cec <_ZN10IridiumSBD7doSBDRBEPhPj+0x60>
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f000 fe58 	bl	800799c <_ZN10IridiumSBD13check9603dataEv>

   // Time to read the binary data: size[2], body[size], checksum[2]
   unsigned long start = millis();
 8006cec:	f002 faf6 	bl	80092dc <HAL_GetTick>
 8006cf0:	6138      	str	r0, [r7, #16]
   while (millis() - start < 1000UL * atTimeout)
 8006cf2:	f002 faf3 	bl	80092dc <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	1ad2      	subs	r2, r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d00:	4619      	mov	r1, r3
 8006d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d06:	fb03 f301 	mul.w	r3, r3, r1
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	bf34      	ite	cc
 8006d0e:	2301      	movcc	r3, #1
 8006d10:	2300      	movcs	r3, #0
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d03c      	beq.n	8006d92 <_ZN10IridiumSBD7doSBDRBEPhPj+0x106>
   {
      if(!this->useSerial) check9603data(); // Keep checking for new 9603 serial data
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	7c5b      	ldrb	r3, [r3, #17]
 8006d1c:	f083 0301 	eor.w	r3, r3, #1
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d002      	beq.n	8006d2c <_ZN10IridiumSBD7doSBDRBEPhPj+0xa0>
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f000 fe38 	bl	800799c <_ZN10IridiumSBD13check9603dataEv>
      if (cancelled())
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f7ff ff17 	bl	8006b60 <_ZN10IridiumSBD9cancelledEv>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d001      	beq.n	8006d3c <_ZN10IridiumSBD7doSBDRBEPhPj+0xb0>
         return ISBD_CANCELLED;
 8006d38:	2304      	movs	r3, #4
 8006d3a:	e1ef      	b.n	800711c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
      if (this->useSerial && (stream->available() >= 2))
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	7c5b      	ldrb	r3, [r3, #17]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00d      	beq.n	8006d60 <_ZN10IridiumSBD7doSBDRBEPhPj+0xd4>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	689a      	ldr	r2, [r3, #8]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	3308      	adds	r3, #8
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4610      	mov	r0, r2
 8006d54:	4798      	blx	r3
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	dd01      	ble.n	8006d60 <_ZN10IridiumSBD7doSBDRBEPhPj+0xd4>
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e000      	b.n	8006d62 <_ZN10IridiumSBD7doSBDRBEPhPj+0xd6>
 8006d60:	2300      	movs	r3, #0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d112      	bne.n	8006d8c <_ZN10IridiumSBD7doSBDRBEPhPj+0x100>
         break;
      if ((!this->useSerial) && (i2cSerAvailable() >= 2))
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	7c5b      	ldrb	r3, [r3, #17]
 8006d6a:	f083 0301 	eor.w	r3, r3, #1
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d007      	beq.n	8006d84 <_ZN10IridiumSBD7doSBDRBEPhPj+0xf8>
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f000 ff41 	bl	8007bfc <_ZN10IridiumSBD15i2cSerAvailableEv>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	dd01      	ble.n	8006d84 <_ZN10IridiumSBD7doSBDRBEPhPj+0xf8>
 8006d80:	2301      	movs	r3, #1
 8006d82:	e000      	b.n	8006d86 <_ZN10IridiumSBD7doSBDRBEPhPj+0xfa>
 8006d84:	2300      	movs	r3, #0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d102      	bne.n	8006d90 <_ZN10IridiumSBD7doSBDRBEPhPj+0x104>
   while (millis() - start < 1000UL * atTimeout)
 8006d8a:	e7b2      	b.n	8006cf2 <_ZN10IridiumSBD7doSBDRBEPhPj+0x66>
         break;
 8006d8c:	bf00      	nop
 8006d8e:	e000      	b.n	8006d92 <_ZN10IridiumSBD7doSBDRBEPhPj+0x106>
         break;
 8006d90:	bf00      	nop
   }

   if (this->useSerial && (stream->available() < 2))
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	7c5b      	ldrb	r3, [r3, #17]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00d      	beq.n	8006db6 <_ZN10IridiumSBD7doSBDRBEPhPj+0x12a>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	689a      	ldr	r2, [r3, #8]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	3308      	adds	r3, #8
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4610      	mov	r0, r2
 8006daa:	4798      	blx	r3
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	dc01      	bgt.n	8006db6 <_ZN10IridiumSBD7doSBDRBEPhPj+0x12a>
 8006db2:	2301      	movs	r3, #1
 8006db4:	e000      	b.n	8006db8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x12c>
 8006db6:	2300      	movs	r3, #0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x134>
      return ISBD_SENDRECEIVE_TIMEOUT;
 8006dbc:	2307      	movs	r3, #7
 8006dbe:	e1ad      	b.n	800711c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
   if ((!this->useSerial) && (i2cSerAvailable() < 2))
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	7c5b      	ldrb	r3, [r3, #17]
 8006dc4:	f083 0301 	eor.w	r3, r3, #1
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d007      	beq.n	8006dde <_ZN10IridiumSBD7doSBDRBEPhPj+0x152>
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f000 ff14 	bl	8007bfc <_ZN10IridiumSBD15i2cSerAvailableEv>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	dc01      	bgt.n	8006dde <_ZN10IridiumSBD7doSBDRBEPhPj+0x152>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e000      	b.n	8006de0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x154>
 8006dde:	2300      	movs	r3, #0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d001      	beq.n	8006de8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x15c>
      return ISBD_SENDRECEIVE_TIMEOUT;
 8006de4:	2307      	movs	r3, #7
 8006de6:	e199      	b.n	800711c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   uint16_t size;
   if (this->useSerial)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	7c5b      	ldrb	r3, [r3, #17]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d01a      	beq.n	8006e26 <_ZN10IridiumSBD7doSBDRBEPhPj+0x19a>
   {
      size = 256 * stream->read() + stream->read();
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	689a      	ldr	r2, [r3, #8]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	330c      	adds	r3, #12
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4610      	mov	r0, r2
 8006e00:	4798      	blx	r3
 8006e02:	4603      	mov	r3, r0
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	021b      	lsls	r3, r3, #8
 8006e08:	b29c      	uxth	r4, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	689a      	ldr	r2, [r3, #8]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	330c      	adds	r3, #12
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4610      	mov	r0, r2
 8006e1a:	4798      	blx	r3
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	4423      	add	r3, r4
 8006e22:	83bb      	strh	r3, [r7, #28]
 8006e24:	e00d      	b.n	8006e42 <_ZN10IridiumSBD7doSBDRBEPhPj+0x1b6>
   }
   else
   {
      size = 256 * i2cSerRead() + i2cSerRead();
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f000 ff00 	bl	8007c2c <_ZN10IridiumSBD10i2cSerReadEv>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	021b      	lsls	r3, r3, #8
 8006e32:	b29c      	uxth	r4, r3
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f000 fef9 	bl	8007c2c <_ZN10IridiumSBD10i2cSerReadEv>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	4423      	add	r3, r4
 8006e40:	83bb      	strh	r3, [r7, #28]
   }
   consoleprint(F("[Binary size:"));
 8006e42:	493b      	ldr	r1, [pc, #236]	; (8006f30 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a4>)
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f000 fbef 	bl	8007628 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(size);
 8006e4a:	8bbb      	ldrh	r3, [r7, #28]
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f000 fc1a 	bl	8007688 <_ZN10IridiumSBD12consoleprintEt>
   consoleprint(F("]"));
 8006e54:	4937      	ldr	r1, [pc, #220]	; (8006f34 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a8>)
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f000 fbe6 	bl	8007628 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

   for (uint16_t bytesRead = 0; bytesRead < size;)
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	837b      	strh	r3, [r7, #26]
 8006e60:	8b7a      	ldrh	r2, [r7, #26]
 8006e62:	8bbb      	ldrh	r3, [r7, #28]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d27f      	bcs.n	8006f68 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2dc>
   {
      if (cancelled())
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f7ff fe79 	bl	8006b60 <_ZN10IridiumSBD9cancelledEv>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d001      	beq.n	8006e78 <_ZN10IridiumSBD7doSBDRBEPhPj+0x1ec>
         return ISBD_CANCELLED;
 8006e74:	2304      	movs	r3, #4
 8006e76:	e151      	b.n	800711c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

      if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	7c5b      	ldrb	r3, [r3, #17]
 8006e7c:	f083 0301 	eor.w	r3, r3, #1
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d002      	beq.n	8006e8c <_ZN10IridiumSBD7doSBDRBEPhPj+0x200>
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f000 fd88 	bl	800799c <_ZN10IridiumSBD13check9603dataEv>

      if ((this->useSerial && (stream->available())) || ((!this->useSerial) && i2cSerAvailable()))
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	7c5b      	ldrb	r3, [r3, #17]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00b      	beq.n	8006eac <_ZN10IridiumSBD7doSBDRBEPhPj+0x220>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	689a      	ldr	r2, [r3, #8]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	3308      	adds	r3, #8
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4610      	mov	r0, r2
 8006ea4:	4798      	blx	r3
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d10c      	bne.n	8006ec6 <_ZN10IridiumSBD7doSBDRBEPhPj+0x23a>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	7c5b      	ldrb	r3, [r3, #17]
 8006eb0:	f083 0301 	eor.w	r3, r3, #1
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d007      	beq.n	8006eca <_ZN10IridiumSBD7doSBDRBEPhPj+0x23e>
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f000 fe9e 	bl	8007bfc <_ZN10IridiumSBD15i2cSerAvailableEv>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d001      	beq.n	8006eca <_ZN10IridiumSBD7doSBDRBEPhPj+0x23e>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e000      	b.n	8006ecc <_ZN10IridiumSBD7doSBDRBEPhPj+0x240>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d035      	beq.n	8006f3c <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
      {
         uint8_t c;
         if (this->useSerial)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	7c5b      	ldrb	r3, [r3, #17]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00b      	beq.n	8006ef0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x264>
         {
            c = stream->read();
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	689a      	ldr	r2, [r3, #8]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	330c      	adds	r3, #12
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4610      	mov	r0, r2
 8006ee8:	4798      	blx	r3
 8006eea:	4603      	mov	r3, r0
 8006eec:	767b      	strb	r3, [r7, #25]
 8006eee:	e004      	b.n	8006efa <_ZN10IridiumSBD7doSBDRBEPhPj+0x26e>
         }
         else
         {
            c = i2cSerRead();
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f000 fe9b 	bl	8007c2c <_ZN10IridiumSBD10i2cSerReadEv>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	767b      	strb	r3, [r7, #25]
         }
         bytesRead++;
 8006efa:	8b7b      	ldrh	r3, [r7, #26]
 8006efc:	3301      	adds	r3, #1
 8006efe:	837b      	strh	r3, [r7, #26]
         if (rxBuffer && prxBufferSize)
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d01a      	beq.n	8006f3c <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d017      	beq.n	8006f3c <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
         {
            if (*prxBufferSize > 0)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d011      	beq.n	8006f38 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2ac>
            {
               *rxBuffer++ = c;
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	1c5a      	adds	r2, r3, #1
 8006f18:	60ba      	str	r2, [r7, #8]
 8006f1a:	7e7a      	ldrb	r2, [r7, #25]
 8006f1c:	701a      	strb	r2, [r3, #0]
               (*prxBufferSize)--;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	1e5a      	subs	r2, r3, #1
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	601a      	str	r2, [r3, #0]
 8006f28:	e008      	b.n	8006f3c <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
 8006f2a:	bf00      	nop
 8006f2c:	0802140c 	.word	0x0802140c
 8006f30:	08021418 	.word	0x08021418
 8006f34:	08021428 	.word	0x08021428
            }
            else
            {
               rxOverflow = true;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	77fb      	strb	r3, [r7, #31]
            }
         }
      }

      if (millis() - start >= 1000UL * atTimeout)
 8006f3c:	f002 f9ce 	bl	80092dc <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	1ad2      	subs	r2, r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f50:	fb03 f301 	mul.w	r3, r3, r1
 8006f54:	429a      	cmp	r2, r3
 8006f56:	bf2c      	ite	cs
 8006f58:	2301      	movcs	r3, #1
 8006f5a:	2300      	movcc	r3, #0
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f43f af7e 	beq.w	8006e60 <_ZN10IridiumSBD7doSBDRBEPhPj+0x1d4>
         return ISBD_SENDRECEIVE_TIMEOUT;
 8006f64:	2307      	movs	r3, #7
 8006f66:	e0d9      	b.n	800711c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
   }

   while (millis() - start < 1000UL * atTimeout)
 8006f68:	f002 f9b8 	bl	80092dc <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	1ad2      	subs	r2, r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f76:	4619      	mov	r1, r3
 8006f78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f7c:	fb03 f301 	mul.w	r3, r3, r1
 8006f80:	429a      	cmp	r2, r3
 8006f82:	bf34      	ite	cc
 8006f84:	2301      	movcc	r3, #1
 8006f86:	2300      	movcs	r3, #0
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d03c      	beq.n	8007008 <_ZN10IridiumSBD7doSBDRBEPhPj+0x37c>
   {
      if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	7c5b      	ldrb	r3, [r3, #17]
 8006f92:	f083 0301 	eor.w	r3, r3, #1
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d002      	beq.n	8006fa2 <_ZN10IridiumSBD7doSBDRBEPhPj+0x316>
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f000 fcfd 	bl	800799c <_ZN10IridiumSBD13check9603dataEv>
      if (cancelled())
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f7ff fddc 	bl	8006b60 <_ZN10IridiumSBD9cancelledEv>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d001      	beq.n	8006fb2 <_ZN10IridiumSBD7doSBDRBEPhPj+0x326>
         return ISBD_CANCELLED;
 8006fae:	2304      	movs	r3, #4
 8006fb0:	e0b4      	b.n	800711c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
      if (this->useSerial && (stream->available() >= 2))
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	7c5b      	ldrb	r3, [r3, #17]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00d      	beq.n	8006fd6 <_ZN10IridiumSBD7doSBDRBEPhPj+0x34a>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	689a      	ldr	r2, [r3, #8]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	3308      	adds	r3, #8
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4610      	mov	r0, r2
 8006fca:	4798      	blx	r3
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	dd01      	ble.n	8006fd6 <_ZN10IridiumSBD7doSBDRBEPhPj+0x34a>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e000      	b.n	8006fd8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x34c>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d112      	bne.n	8007002 <_ZN10IridiumSBD7doSBDRBEPhPj+0x376>
         break;
      if ((!this->useSerial) && (i2cSerAvailable() >= 2))
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	7c5b      	ldrb	r3, [r3, #17]
 8006fe0:	f083 0301 	eor.w	r3, r3, #1
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d007      	beq.n	8006ffa <_ZN10IridiumSBD7doSBDRBEPhPj+0x36e>
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f000 fe06 	bl	8007bfc <_ZN10IridiumSBD15i2cSerAvailableEv>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	dd01      	ble.n	8006ffa <_ZN10IridiumSBD7doSBDRBEPhPj+0x36e>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e000      	b.n	8006ffc <_ZN10IridiumSBD7doSBDRBEPhPj+0x370>
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d102      	bne.n	8007006 <_ZN10IridiumSBD7doSBDRBEPhPj+0x37a>
   while (millis() - start < 1000UL * atTimeout)
 8007000:	e7b2      	b.n	8006f68 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2dc>
         break;
 8007002:	bf00      	nop
 8007004:	e000      	b.n	8007008 <_ZN10IridiumSBD7doSBDRBEPhPj+0x37c>
         break;
 8007006:	bf00      	nop
   }

   if (this->useSerial && (stream->available() < 2))
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	7c5b      	ldrb	r3, [r3, #17]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00d      	beq.n	800702c <_ZN10IridiumSBD7doSBDRBEPhPj+0x3a0>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	689a      	ldr	r2, [r3, #8]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	3308      	adds	r3, #8
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4610      	mov	r0, r2
 8007020:	4798      	blx	r3
 8007022:	4603      	mov	r3, r0
 8007024:	2b01      	cmp	r3, #1
 8007026:	dc01      	bgt.n	800702c <_ZN10IridiumSBD7doSBDRBEPhPj+0x3a0>
 8007028:	2301      	movs	r3, #1
 800702a:	e000      	b.n	800702e <_ZN10IridiumSBD7doSBDRBEPhPj+0x3a2>
 800702c:	2300      	movs	r3, #0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3aa>
      return ISBD_SENDRECEIVE_TIMEOUT;
 8007032:	2307      	movs	r3, #7
 8007034:	e072      	b.n	800711c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
   if ((!this->useSerial) && (i2cSerAvailable() < 2))
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	7c5b      	ldrb	r3, [r3, #17]
 800703a:	f083 0301 	eor.w	r3, r3, #1
 800703e:	b2db      	uxtb	r3, r3
 8007040:	2b00      	cmp	r3, #0
 8007042:	d007      	beq.n	8007054 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3c8>
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f000 fdd9 	bl	8007bfc <_ZN10IridiumSBD15i2cSerAvailableEv>
 800704a:	4603      	mov	r3, r0
 800704c:	2b01      	cmp	r3, #1
 800704e:	dc01      	bgt.n	8007054 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3c8>
 8007050:	2301      	movs	r3, #1
 8007052:	e000      	b.n	8007056 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3ca>
 8007054:	2300      	movs	r3, #0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <_ZN10IridiumSBD7doSBDRBEPhPj+0x3d2>
      return ISBD_SENDRECEIVE_TIMEOUT;
 800705a:	2307      	movs	r3, #7
 800705c:	e05e      	b.n	800711c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   uint16_t checksum;
   if (this->useSerial)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	7c5b      	ldrb	r3, [r3, #17]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d01a      	beq.n	800709c <_ZN10IridiumSBD7doSBDRBEPhPj+0x410>
   {
      checksum = 256 * stream->read() + stream->read();
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	689a      	ldr	r2, [r3, #8]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	330c      	adds	r3, #12
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4610      	mov	r0, r2
 8007076:	4798      	blx	r3
 8007078:	4603      	mov	r3, r0
 800707a:	b29b      	uxth	r3, r3
 800707c:	021b      	lsls	r3, r3, #8
 800707e:	b29c      	uxth	r4, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	689a      	ldr	r2, [r3, #8]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	330c      	adds	r3, #12
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4610      	mov	r0, r2
 8007090:	4798      	blx	r3
 8007092:	4603      	mov	r3, r0
 8007094:	b29b      	uxth	r3, r3
 8007096:	4423      	add	r3, r4
 8007098:	82fb      	strh	r3, [r7, #22]
 800709a:	e00d      	b.n	80070b8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x42c>
   }
   else
   {
      checksum = 256 * i2cSerRead() + i2cSerRead();
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f000 fdc5 	bl	8007c2c <_ZN10IridiumSBD10i2cSerReadEv>
 80070a2:	4603      	mov	r3, r0
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	021b      	lsls	r3, r3, #8
 80070a8:	b29c      	uxth	r4, r3
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f000 fdbe 	bl	8007c2c <_ZN10IridiumSBD10i2cSerReadEv>
 80070b0:	4603      	mov	r3, r0
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	4423      	add	r3, r4
 80070b6:	82fb      	strh	r3, [r7, #22]
   }
   consoleprint(F("[csum:"));
 80070b8:	491a      	ldr	r1, [pc, #104]	; (8007124 <_ZN10IridiumSBD7doSBDRBEPhPj+0x498>)
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	f000 fab4 	bl	8007628 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(checksum);
 80070c0:	8afb      	ldrh	r3, [r7, #22]
 80070c2:	4619      	mov	r1, r3
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f000 fadf 	bl	8007688 <_ZN10IridiumSBD12consoleprintEt>
   consoleprint(F("]"));
 80070ca:	4917      	ldr	r1, [pc, #92]	; (8007128 <_ZN10IridiumSBD7doSBDRBEPhPj+0x49c>)
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f000 faab 	bl	8007628 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

   // Return actual size of returned buffer
   if (prxBufferSize)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d002      	beq.n	80070de <_ZN10IridiumSBD7doSBDRBEPhPj+0x452>
      *prxBufferSize = (size_t)size;
 80070d8:	8bba      	ldrh	r2, [r7, #28]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	601a      	str	r2, [r3, #0]

   // Wait for final OK
   if (!waitForATResponse())
 80070de:	4b13      	ldr	r3, [pc, #76]	; (800712c <_ZN10IridiumSBD7doSBDRBEPhPj+0x4a0>)
 80070e0:	9300      	str	r3, [sp, #0]
 80070e2:	2300      	movs	r3, #0
 80070e4:	2200      	movs	r2, #0
 80070e6:	2100      	movs	r1, #0
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f7ff fc7f 	bl	80069ec <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80070ee:	4603      	mov	r3, r0
 80070f0:	f083 0301 	eor.w	r3, r3, #1
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d009      	beq.n	800710e <_ZN10IridiumSBD7doSBDRBEPhPj+0x482>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f7ff fd30 	bl	8006b60 <_ZN10IridiumSBD9cancelledEv>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d001      	beq.n	800710a <_ZN10IridiumSBD7doSBDRBEPhPj+0x47e>
 8007106:	2304      	movs	r3, #4
 8007108:	e008      	b.n	800711c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
 800710a:	2303      	movs	r3, #3
 800710c:	e006      	b.n	800711c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   return rxOverflow ? ISBD_RX_OVERFLOW : ISBD_SUCCESS;
 800710e:	7ffb      	ldrb	r3, [r7, #31]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d001      	beq.n	8007118 <_ZN10IridiumSBD7doSBDRBEPhPj+0x48c>
 8007114:	2308      	movs	r3, #8
 8007116:	e000      	b.n	800711a <_ZN10IridiumSBD7doSBDRBEPhPj+0x48e>
 8007118:	2300      	movs	r3, #0
 800711a:	bf00      	nop
}
 800711c:	4618      	mov	r0, r3
 800711e:	3724      	adds	r7, #36	; 0x24
 8007120:	46bd      	mov	sp, r7
 8007122:	bd90      	pop	{r4, r7, pc}
 8007124:	0802142c 	.word	0x0802142c
 8007128:	08021428 	.word	0x08021428
 800712c:	08020e94 	.word	0x08020e94

08007130 <_ZN10IridiumSBD5powerEb>:

void IridiumSBD::power(bool on)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	460b      	mov	r3, r1
 800713a:	70fb      	strb	r3, [r7, #3]
   this->asleep = !on;
 800713c:	78fb      	ldrb	r3, [r7, #3]
 800713e:	f083 0301 	eor.w	r3, r3, #1
 8007142:	b2da      	uxtb	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

   if (this->useSerial)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	7c5b      	ldrb	r3, [r3, #17]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d010      	beq.n	8007174 <_ZN10IridiumSBD5powerEb+0x44>
   {
      if (this->sleepPin == -1)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800715a:	d04a      	beq.n	80071f2 <_ZN10IridiumSBD5powerEb+0xc2>
      {
         return;
      }
      else
      {
          if (this->sleepPinConfigured == false)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007162:	2b00      	cmp	r3, #0
 8007164:	d106      	bne.n	8007174 <_ZN10IridiumSBD5powerEb+0x44>
          {
             configureSleepPin();
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f84c 	bl	8007204 <_ZN10IridiumSBD17configureSleepPinEv>
             this->sleepPinConfigured = true;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          }
      }
   }

   if (on)
 8007174:	78fb      	ldrb	r3, [r7, #3]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d017      	beq.n	80071aa <_ZN10IridiumSBD5powerEb+0x7a>
   {
      diagprint(F("Powering on modem...\r\n"));
 800717a:	4920      	ldr	r1, [pc, #128]	; (80071fc <_ZN10IridiumSBD5powerEb+0xcc>)
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 fa09 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	7c5b      	ldrb	r3, [r3, #17]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d004      	beq.n	8007194 <_ZN10IridiumSBD5powerEb+0x64>
      {
         setSleepPin(HIGH); // HIGH = awake
 800718a:	2101      	movs	r1, #1
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 f847 	bl	8007220 <_ZN10IridiumSBD11setSleepPinEh>
 8007192:	e003      	b.n	800719c <_ZN10IridiumSBD5powerEb+0x6c>
      }
      else
      {
         enable9603(true);
 8007194:	2101      	movs	r1, #1
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f7fe fe3c 	bl	8005e14 <_ZN10IridiumSBD10enable9603Eb>
      }
      lastPowerOnTime = millis();
 800719c:	f002 f89e 	bl	80092dc <HAL_GetTick>
 80071a0:	4602      	mov	r2, r0
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80071a8:	e024      	b.n	80071f4 <_ZN10IridiumSBD5powerEb+0xc4>
   }
   else
   {
      // Best Practices Guide suggests waiting at least 2 seconds
      // before powering off again
      unsigned long elapsed = millis() - lastPowerOnTime;
 80071aa:	f002 f897 	bl	80092dc <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	60fb      	str	r3, [r7, #12]
      if (elapsed < 2000UL)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80071c0:	d205      	bcs.n	80071ce <_ZN10IridiumSBD5powerEb+0x9e>
         //delay(2000UL - elapsed); TODO
    	  HAL_Delay(2000UL - elapsed);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 80071c8:	4618      	mov	r0, r3
 80071ca:	f002 f893 	bl	80092f4 <HAL_Delay>

      diagprint(F("Powering off modem...\r\n"));
 80071ce:	490c      	ldr	r1, [pc, #48]	; (8007200 <_ZN10IridiumSBD5powerEb+0xd0>)
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f9df 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	7c5b      	ldrb	r3, [r3, #17]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d004      	beq.n	80071e8 <_ZN10IridiumSBD5powerEb+0xb8>
      {
         setSleepPin(LOW); // LOW = asleep
 80071de:	2100      	movs	r1, #0
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 f81d 	bl	8007220 <_ZN10IridiumSBD11setSleepPinEh>
 80071e6:	e005      	b.n	80071f4 <_ZN10IridiumSBD5powerEb+0xc4>
      }
      else
      {
         enable9603(false);
 80071e8:	2100      	movs	r1, #0
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f7fe fe12 	bl	8005e14 <_ZN10IridiumSBD10enable9603Eb>
 80071f0:	e000      	b.n	80071f4 <_ZN10IridiumSBD5powerEb+0xc4>
         return;
 80071f2:	bf00      	nop
      }
   }
}
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	08021434 	.word	0x08021434
 8007200:	0802144c 	.word	0x0802144c

08007204 <_ZN10IridiumSBD17configureSleepPinEv>:

void IridiumSBD::configureSleepPin()
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
	//pinMode(sleepPin, OUTPUT); // Make the sleep pin an output TODO (doesnt work with this)
   //pinMode(sleepPin, OUTPUT_PP); // Make the sleep pin an output
   diagprint(F("configureSleepPin: sleepPin configured\r\n"));
 800720c:	4903      	ldr	r1, [pc, #12]	; (800721c <_ZN10IridiumSBD17configureSleepPinEv+0x18>)
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f9c0 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8007214:	bf00      	nop
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	08021464 	.word	0x08021464

08007220 <_ZN10IridiumSBD11setSleepPinEh>:

void IridiumSBD::setSleepPin(uint8_t enable)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	460b      	mov	r3, r1
 800722a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(sleepPin_GPIO_Port,sleepPin_Pin,GPIO_PIN_SET);
 800722c:	2201      	movs	r2, #1
 800722e:	2108      	movs	r1, #8
 8007230:	480b      	ldr	r0, [pc, #44]	; (8007260 <_ZN10IridiumSBD11setSleepPinEh+0x40>)
 8007232:	f002 fdcd 	bl	8009dd0 <HAL_GPIO_WritePin>
   //digitalWrite(this->sleepPin, enable); // HIGH = awake, LOW = asleep TODO
   diagprint(F("setSleepPin: sleepPin set "));
 8007236:	490b      	ldr	r1, [pc, #44]	; (8007264 <_ZN10IridiumSBD11setSleepPinEh+0x44>)
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f9ab 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   if (enable == HIGH)
 800723e:	78fb      	ldrb	r3, [r7, #3]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d104      	bne.n	800724e <_ZN10IridiumSBD11setSleepPinEh+0x2e>
      diagprint(F("HIGH\r\n"));
 8007244:	4908      	ldr	r1, [pc, #32]	; (8007268 <_ZN10IridiumSBD11setSleepPinEh+0x48>)
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f9a4 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   else
      diagprint(F("LOW\r\n"));
}
 800724c:	e003      	b.n	8007256 <_ZN10IridiumSBD11setSleepPinEh+0x36>
      diagprint(F("LOW\r\n"));
 800724e:	4907      	ldr	r1, [pc, #28]	; (800726c <_ZN10IridiumSBD11setSleepPinEh+0x4c>)
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 f99f 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8007256:	bf00      	nop
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	40020800 	.word	0x40020800
 8007264:	08021490 	.word	0x08021490
 8007268:	080214ac 	.word	0x080214ac
 800726c:	080214b4 	.word	0x080214b4

08007270 <_ZN10IridiumSBD15beginSerialPortEv>:

void IridiumSBD::beginSerialPort()
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::beginSerialPort\r\n"));
 8007278:	4903      	ldr	r1, [pc, #12]	; (8007288 <_ZN10IridiumSBD15beginSerialPortEv+0x18>)
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f98a 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8007280:	bf00      	nop
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	080214bc 	.word	0x080214bc

0800728c <_ZN10IridiumSBD13endSerialPortEv>:

void IridiumSBD::endSerialPort()
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::endSerialPort\r\n"));
 8007294:	4903      	ldr	r1, [pc, #12]	; (80072a4 <_ZN10IridiumSBD13endSerialPortEv+0x18>)
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f97c 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 800729c:	bf00      	nop
 800729e:	3708      	adds	r7, #8
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	080214dc 	.word	0x080214dc

080072a8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>:

void IridiumSBD::send(FlashString str, bool beginLine, bool endLine)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	4611      	mov	r1, r2
 80072b4:	461a      	mov	r2, r3
 80072b6:	460b      	mov	r3, r1
 80072b8:	71fb      	strb	r3, [r7, #7]
 80072ba:	4613      	mov	r3, r2
 80072bc:	71bb      	strb	r3, [r7, #6]
   if (beginLine)
 80072be:	79fb      	ldrb	r3, [r7, #7]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d003      	beq.n	80072cc <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x24>
      consoleprint(F(">> "));
 80072c4:	4921      	ldr	r1, [pc, #132]	; (800734c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xa4>)
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f000 f9ae 	bl	8007628 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 80072cc:	68b9      	ldr	r1, [r7, #8]
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f000 f9aa 	bl	8007628 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (endLine)
 80072d4:	79bb      	ldrb	r3, [r7, #6]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d003      	beq.n	80072e2 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x3a>
      consoleprint(F("\r\n"));
 80072da:	491d      	ldr	r1, [pc, #116]	; (8007350 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xa8>)
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f000 f9a3 	bl	8007628 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	7c5b      	ldrb	r3, [r3, #17]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d006      	beq.n	80072f8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x50>
   {
      stream->print(str);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	68b9      	ldr	r1, [r7, #8]
 80072f0:	4618      	mov	r0, r3
 80072f2:	f001 f9bf 	bl	8008674 <_ZN5Print5printEPK19__FlashStringHelper>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 80072f6:	e024      	b.n	8007342 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x9a>
      wireport->beginTransmission((uint8_t)deviceaddress);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	68da      	ldr	r2, [r3, #12]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	7c1b      	ldrb	r3, [r3, #16]
 8007300:	4619      	mov	r1, r3
 8007302:	4610      	mov	r0, r2
 8007304:	f001 fb2a 	bl	800895c <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	21ff      	movs	r1, #255	; 0xff
 800730e:	4618      	mov	r0, r3
 8007310:	f7fe fb44 	bl	800599c <_ZN7TwoWire5writeEi>
      wireport->print(str);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	68b9      	ldr	r1, [r7, #8]
 800731a:	4618      	mov	r0, r3
 800731c:	f001 f9aa 	bl	8008674 <_ZN5Print5printEPK19__FlashStringHelper>
      if (wireport->endTransmission() != 0) //Release bus
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	4618      	mov	r0, r3
 8007326:	f001 fb63 	bl	80089f0 <_ZN7TwoWire15endTransmissionEv>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	bf14      	ite	ne
 8007330:	2301      	movne	r3, #1
 8007332:	2300      	moveq	r3, #0
 8007334:	b2db      	uxtb	r3, r3
 8007336:	2b00      	cmp	r3, #0
 8007338:	d003      	beq.n	8007342 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x9a>
         diagprint(F("I2C write was not successful!\r\n"));
 800733a:	4906      	ldr	r1, [pc, #24]	; (8007354 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xac>)
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f000 f929 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8007342:	bf00      	nop
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	080214f8 	.word	0x080214f8
 8007350:	08021240 	.word	0x08021240
 8007354:	080212c0 	.word	0x080212c0

08007358 <_ZN10IridiumSBD4sendEPKc>:

void IridiumSBD::send(const char *str)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
   consoleprint(F(">> "));
 8007362:	4920      	ldr	r1, [pc, #128]	; (80073e4 <_ZN10IridiumSBD4sendEPKc+0x8c>)
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 f95f 	bl	8007628 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 800736a:	6839      	ldr	r1, [r7, #0]
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f975 	bl	800765c <_ZN10IridiumSBD12consoleprintEPKc>
   consoleprint(F("\r\n"));
 8007372:	491d      	ldr	r1, [pc, #116]	; (80073e8 <_ZN10IridiumSBD4sendEPKc+0x90>)
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 f957 	bl	8007628 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	7c5b      	ldrb	r3, [r3, #17]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d006      	beq.n	8007390 <_ZN10IridiumSBD4sendEPKc+0x38>
   {
      stream->print(str);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	6839      	ldr	r1, [r7, #0]
 8007388:	4618      	mov	r0, r3
 800738a:	f001 f981 	bl	8008690 <_ZN5Print5printEPKc>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 800738e:	e024      	b.n	80073da <_ZN10IridiumSBD4sendEPKc+0x82>
      wireport->beginTransmission((uint8_t)deviceaddress);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	68da      	ldr	r2, [r3, #12]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	7c1b      	ldrb	r3, [r3, #16]
 8007398:	4619      	mov	r1, r3
 800739a:	4610      	mov	r0, r2
 800739c:	f001 fade 	bl	800895c <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	21ff      	movs	r1, #255	; 0xff
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7fe faf8 	bl	800599c <_ZN7TwoWire5writeEi>
      wireport->print(str);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	6839      	ldr	r1, [r7, #0]
 80073b2:	4618      	mov	r0, r3
 80073b4:	f001 f96c 	bl	8008690 <_ZN5Print5printEPKc>
      if (wireport->endTransmission() != 0) //Release bus
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	4618      	mov	r0, r3
 80073be:	f001 fb17 	bl	80089f0 <_ZN7TwoWire15endTransmissionEv>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	bf14      	ite	ne
 80073c8:	2301      	movne	r3, #1
 80073ca:	2300      	moveq	r3, #0
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d003      	beq.n	80073da <_ZN10IridiumSBD4sendEPKc+0x82>
         diagprint(F("I2C write was not successful!\r\n"));
 80073d2:	4906      	ldr	r1, [pc, #24]	; (80073ec <_ZN10IridiumSBD4sendEPKc+0x94>)
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 f8dd 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80073da:	bf00      	nop
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	080214f8 	.word	0x080214f8
 80073e8:	08021240 	.word	0x08021240
 80073ec:	080212c0 	.word	0x080212c0

080073f0 <_ZN10IridiumSBD8sendlongEPKc>:

void IridiumSBD::sendlong(const char *str)
// Send a long string that might need to be broken up for the I2C port
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b086      	sub	sp, #24
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
   consoleprint(F(">> "));
 80073fa:	4940      	ldr	r1, [pc, #256]	; (80074fc <_ZN10IridiumSBD8sendlongEPKc+0x10c>)
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 f913 	bl	8007628 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   //this->print((char*) str);//TODO doesn't print otherwise
   consoleprint(str);
 8007402:	6839      	ldr	r1, [r7, #0]
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 f929 	bl	800765c <_ZN10IridiumSBD12consoleprintEPKc>
   consoleprint(F("\r\n"));
 800740a:	493d      	ldr	r1, [pc, #244]	; (8007500 <_ZN10IridiumSBD8sendlongEPKc+0x110>)
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f90b 	bl	8007628 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

   if (this->useSerial)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	7c5b      	ldrb	r3, [r3, #17]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d006      	beq.n	8007428 <_ZN10IridiumSBD8sendlongEPKc+0x38>
   {
      stream->print(str); // If we are using serial then send it and don't worry about the long length
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	6839      	ldr	r1, [r7, #0]
 8007420:	4618      	mov	r0, r3
 8007422:	f001 f935 	bl	8008690 <_ZN5Print5printEPKc>
         wireport->write(str[i]);
      }
      if (wireport->endTransmission() != 0) //Send data and release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8007426:	e065      	b.n	80074f4 <_ZN10IridiumSBD8sendlongEPKc+0x104>
      size_t bytes_to_send = strlen(str); // Send this many bytes in total
 8007428:	6838      	ldr	r0, [r7, #0]
 800742a:	f7f8 feeb 	bl	8000204 <strlen>
 800742e:	6178      	str	r0, [r7, #20]
      size_t txDataSize = bytes_to_send;
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	60fb      	str	r3, [r7, #12]
      size_t i=0;
 8007434:	2300      	movs	r3, #0
 8007436:	613b      	str	r3, [r7, #16]
      while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 1)) // If there are too many bytes to send all in one go
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	2b1f      	cmp	r3, #31
 800743c:	d92a      	bls.n	8007494 <_ZN10IridiumSBD8sendlongEPKc+0xa4>
         nexti = i + (TINY_I2C_BUFFER_LENGTH - 1);
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	331f      	adds	r3, #31
 8007442:	60bb      	str	r3, [r7, #8]
         wireport->beginTransmission((uint8_t)deviceaddress);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	68da      	ldr	r2, [r3, #12]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	7c1b      	ldrb	r3, [r3, #16]
 800744c:	4619      	mov	r1, r3
 800744e:	4610      	mov	r0, r2
 8007450:	f001 fa84 	bl	800895c <_ZN7TwoWire17beginTransmissionEh>
         wireport->write(DATA_REG); // Point to the 'serial register'
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	21ff      	movs	r1, #255	; 0xff
 800745a:	4618      	mov	r0, r3
 800745c:	f7fe fa9e 	bl	800599c <_ZN7TwoWire5writeEi>
         for (; i<nexti; ++i)
 8007460:	693a      	ldr	r2, [r7, #16]
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	429a      	cmp	r2, r3
 8007466:	d20c      	bcs.n	8007482 <_ZN10IridiumSBD8sendlongEPKc+0x92>
            wireport->write(str[i]); // Write each byte
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	68d8      	ldr	r0, [r3, #12]
 800746c:	683a      	ldr	r2, [r7, #0]
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	4413      	add	r3, r2
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	4619      	mov	r1, r3
 8007476:	f7fe fa91 	bl	800599c <_ZN7TwoWire5writeEi>
         for (; i<nexti; ++i)
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	3301      	adds	r3, #1
 800747e:	613b      	str	r3, [r7, #16]
 8007480:	e7ee      	b.n	8007460 <_ZN10IridiumSBD8sendlongEPKc+0x70>
         bytes_to_send = bytes_to_send - (TINY_I2C_BUFFER_LENGTH - 1); // Decrease the number of bytes still to send
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	3b1f      	subs	r3, #31
 8007486:	617b      	str	r3, [r7, #20]
         wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	4618      	mov	r0, r3
 800748e:	f001 faaf 	bl	80089f0 <_ZN7TwoWire15endTransmissionEv>
      while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 1)) // If there are too many bytes to send all in one go
 8007492:	e7d1      	b.n	8007438 <_ZN10IridiumSBD8sendlongEPKc+0x48>
      wireport->beginTransmission((uint8_t)deviceaddress);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	68da      	ldr	r2, [r3, #12]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	7c1b      	ldrb	r3, [r3, #16]
 800749c:	4619      	mov	r1, r3
 800749e:	4610      	mov	r0, r2
 80074a0:	f001 fa5c 	bl	800895c <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	21ff      	movs	r1, #255	; 0xff
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7fe fa76 	bl	800599c <_ZN7TwoWire5writeEi>
      for (; i<txDataSize; ++i)
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d20c      	bcs.n	80074d2 <_ZN10IridiumSBD8sendlongEPKc+0xe2>
         wireport->write(str[i]);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	68d8      	ldr	r0, [r3, #12]
 80074bc:	683a      	ldr	r2, [r7, #0]
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	4413      	add	r3, r2
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	4619      	mov	r1, r3
 80074c6:	f7fe fa69 	bl	800599c <_ZN7TwoWire5writeEi>
      for (; i<txDataSize; ++i)
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	3301      	adds	r3, #1
 80074ce:	613b      	str	r3, [r7, #16]
 80074d0:	e7ee      	b.n	80074b0 <_ZN10IridiumSBD8sendlongEPKc+0xc0>
      if (wireport->endTransmission() != 0) //Send data and release bus
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	4618      	mov	r0, r3
 80074d8:	f001 fa8a 	bl	80089f0 <_ZN7TwoWire15endTransmissionEv>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	bf14      	ite	ne
 80074e2:	2301      	movne	r3, #1
 80074e4:	2300      	moveq	r3, #0
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d003      	beq.n	80074f4 <_ZN10IridiumSBD8sendlongEPKc+0x104>
         diagprint(F("I2C write was not successful!\r\n"));
 80074ec:	4905      	ldr	r1, [pc, #20]	; (8007504 <_ZN10IridiumSBD8sendlongEPKc+0x114>)
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f850 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80074f4:	bf00      	nop
 80074f6:	3718      	adds	r7, #24
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	080214f8 	.word	0x080214f8
 8007500:	08021240 	.word	0x08021240
 8007504:	080212c0 	.word	0x080212c0

08007508 <_ZN10IridiumSBD4sendEt>:

void IridiumSBD::send(uint16_t n)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	460b      	mov	r3, r1
 8007512:	807b      	strh	r3, [r7, #2]
   consoleprint(n);
 8007514:	887b      	ldrh	r3, [r7, #2]
 8007516:	4619      	mov	r1, r3
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 f8b5 	bl	8007688 <_ZN10IridiumSBD12consoleprintEt>
   if (this->useSerial)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	7c5b      	ldrb	r3, [r3, #17]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d008      	beq.n	8007538 <_ZN10IridiumSBD4sendEt+0x30>
   {
      stream->print(n);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	4618      	mov	r0, r3
 800752c:	887b      	ldrh	r3, [r7, #2]
 800752e:	220a      	movs	r2, #10
 8007530:	4619      	mov	r1, r3
 8007532:	f001 f8cd 	bl	80086d0 <_ZN5Print5printEii>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(n);
      if (wireport->endTransmission() != 0) //Send data and release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8007536:	e026      	b.n	8007586 <_ZN10IridiumSBD4sendEt+0x7e>
      wireport->beginTransmission((uint8_t)deviceaddress);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	68da      	ldr	r2, [r3, #12]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	7c1b      	ldrb	r3, [r3, #16]
 8007540:	4619      	mov	r1, r3
 8007542:	4610      	mov	r0, r2
 8007544:	f001 fa0a 	bl	800895c <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	21ff      	movs	r1, #255	; 0xff
 800754e:	4618      	mov	r0, r3
 8007550:	f7fe fa24 	bl	800599c <_ZN7TwoWire5writeEi>
      wireport->print(n);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	4618      	mov	r0, r3
 800755a:	887b      	ldrh	r3, [r7, #2]
 800755c:	220a      	movs	r2, #10
 800755e:	4619      	mov	r1, r3
 8007560:	f001 f8b6 	bl	80086d0 <_ZN5Print5printEii>
      if (wireport->endTransmission() != 0) //Send data and release bus
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	4618      	mov	r0, r3
 800756a:	f001 fa41 	bl	80089f0 <_ZN7TwoWire15endTransmissionEv>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	bf14      	ite	ne
 8007574:	2301      	movne	r3, #1
 8007576:	2300      	moveq	r3, #0
 8007578:	b2db      	uxtb	r3, r3
 800757a:	2b00      	cmp	r3, #0
 800757c:	d003      	beq.n	8007586 <_ZN10IridiumSBD4sendEt+0x7e>
         diagprint(F("I2C write was not successful!\r\n"));
 800757e:	4904      	ldr	r1, [pc, #16]	; (8007590 <_ZN10IridiumSBD4sendEt+0x88>)
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f807 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8007586:	bf00      	nop
 8007588:	3708      	adds	r7, #8
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	080212c0 	.word	0x080212c0

08007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>:

void IridiumSBD::diagprint(FlashString str)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	1c5a      	adds	r2, r3, #1
 80075a6:	60fa      	str	r2, [r7, #12]
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 80075ac:	7afb      	ldrb	r3, [r7, #11]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d005      	beq.n	80075be <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0x2a>
      ISBDDiagsCallback(this, c);
 80075b2:	7afb      	ldrb	r3, [r7, #11]
 80075b4:	4619      	mov	r1, r3
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f7fe fa16 	bl	80059e8 <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   }
 80075bc:	e7f1      	b.n	80075a2 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 80075be:	bf00      	nop

   //TODO
   //this->print((char*) str);
}
 80075c0:	bf00      	nop
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <_ZN10IridiumSBD9diagprintEPKc>:

void IridiumSBD::diagprint(const char *str)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
   while (*str)
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d008      	beq.n	80075ec <_ZN10IridiumSBD9diagprintEPKc+0x24>
      ISBDDiagsCallback(this, *str++);
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	1c5a      	adds	r2, r3, #1
 80075de:	603a      	str	r2, [r7, #0]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f7fe f9ff 	bl	80059e8 <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   while (*str)
 80075ea:	e7f2      	b.n	80075d2 <_ZN10IridiumSBD9diagprintEPKc+0xa>

   //TODO
   //this->print((char*) str);
}
 80075ec:	bf00      	nop
 80075ee:	3708      	adds	r7, #8
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <_ZN10IridiumSBD9diagprintEt>:

void IridiumSBD::diagprint(uint16_t n)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b086      	sub	sp, #24
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	460b      	mov	r3, r1
 80075fe:	807b      	strh	r3, [r7, #2]
   char str[10];
   sprintf(str, "%u", n);
 8007600:	887a      	ldrh	r2, [r7, #2]
 8007602:	f107 030c 	add.w	r3, r7, #12
 8007606:	4907      	ldr	r1, [pc, #28]	; (8007624 <_ZN10IridiumSBD9diagprintEt+0x30>)
 8007608:	4618      	mov	r0, r3
 800760a:	f014 f8a7 	bl	801b75c <siprintf>
   diagprint(str); //TODO
 800760e:	f107 030c 	add.w	r3, r7, #12
 8007612:	4619      	mov	r1, r3
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f7ff ffd7 	bl	80075c8 <_ZN10IridiumSBD9diagprintEPKc>
   //this->print((char*) str);
}
 800761a:	bf00      	nop
 800761c:	3718      	adds	r7, #24
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	080214fc 	.word	0x080214fc

08007628 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>:

void IridiumSBD::consoleprint(FlashString str)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	1c5a      	adds	r2, r3, #1
 800763a:	60fa      	str	r2, [r7, #12]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 8007640:	7afb      	ldrb	r3, [r7, #11]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d005      	beq.n	8007652 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0x2a>
      ISBDConsoleCallback(this, c);
 8007646:	7afb      	ldrb	r3, [r7, #11]
 8007648:	4619      	mov	r1, r3
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f7fe f9c0 	bl	80059d0 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   }
 8007650:	e7f1      	b.n	8007636 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 8007652:	bf00      	nop

   //TODO
   //this->print((char*) str);
}
 8007654:	bf00      	nop
 8007656:	3710      	adds	r7, #16
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <_ZN10IridiumSBD12consoleprintEPKc>:

void IridiumSBD::consoleprint(const char *str)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
   while (*str)
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d008      	beq.n	8007680 <_ZN10IridiumSBD12consoleprintEPKc+0x24>
      ISBDConsoleCallback(this, *str++);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	1c5a      	adds	r2, r3, #1
 8007672:	603a      	str	r2, [r7, #0]
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	4619      	mov	r1, r3
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f7fe f9a9 	bl	80059d0 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   while (*str)
 800767e:	e7f2      	b.n	8007666 <_ZN10IridiumSBD12consoleprintEPKc+0xa>

   //TODO
   //this->print((char*) str);
}
 8007680:	bf00      	nop
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <_ZN10IridiumSBD12consoleprintEt>:

void IridiumSBD::consoleprint(uint16_t n)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b086      	sub	sp, #24
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	460b      	mov	r3, r1
 8007692:	807b      	strh	r3, [r7, #2]
   char str[10];
   sprintf(str, "%u", n);
 8007694:	887a      	ldrh	r2, [r7, #2]
 8007696:	f107 030c 	add.w	r3, r7, #12
 800769a:	4907      	ldr	r1, [pc, #28]	; (80076b8 <_ZN10IridiumSBD12consoleprintEt+0x30>)
 800769c:	4618      	mov	r0, r3
 800769e:	f014 f85d 	bl	801b75c <siprintf>
   consoleprint(str); //TODO
 80076a2:	f107 030c 	add.w	r3, r7, #12
 80076a6:	4619      	mov	r1, r3
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f7ff ffd7 	bl	800765c <_ZN10IridiumSBD12consoleprintEPKc>
   //consoleprint((const char*) str);
   //this->print((char*) str);
}
 80076ae:	bf00      	nop
 80076b0:	3718      	adds	r7, #24
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	080214fc 	.word	0x080214fc

080076bc <_ZN10IridiumSBD12consoleprintEc>:

void IridiumSBD::consoleprint(char c)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	460b      	mov	r3, r1
 80076c6:	70fb      	strb	r3, [r7, #3]
   ISBDConsoleCallback(this, c);
 80076c8:	78fb      	ldrb	r3, [r7, #3]
 80076ca:	4619      	mov	r1, r3
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f7fe f97f 	bl	80059d0 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
}
 80076d2:	bf00      	nop
 80076d4:	3708      	adds	r7, #8
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
	...

080076dc <_ZN10IridiumSBD11SBDRINGSeenEv>:

void IridiumSBD::SBDRINGSeen()
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
   ringAsserted = true;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
   diagprint(F("SBDRING alert seen!\r\n"));
 80076ec:	4903      	ldr	r1, [pc, #12]	; (80076fc <_ZN10IridiumSBD11SBDRINGSeenEv+0x20>)
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7ff ff50 	bl	8007594 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80076f4:	bf00      	nop
 80076f6:	3708      	adds	r7, #8
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	08021500 	.word	0x08021500

08007700 <_ZN10IridiumSBD13filterSBDRINGEv>:
// Read characters until we find one that doesn't match SBDRING
// If nextChar is -1 it means we are still entertaining a possible
// match with SBDRING\r\n.  Once we find a mismatch, stuff it into
// nextChar.
void IridiumSBD::filterSBDRING()
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
   if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	7c5b      	ldrb	r3, [r3, #17]
 800770c:	f083 0301 	eor.w	r3, r3, #1
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b00      	cmp	r3, #0
 8007714:	d002      	beq.n	800771c <_ZN10IridiumSBD13filterSBDRINGEv+0x1c>
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f940 	bl	800799c <_ZN10IridiumSBD13check9603dataEv>
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	7c5b      	ldrb	r3, [r3, #17]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00b      	beq.n	800773c <_ZN10IridiumSBD13filterSBDRINGEv+0x3c>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	689a      	ldr	r2, [r3, #8]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	3308      	adds	r3, #8
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4610      	mov	r0, r2
 8007734:	4798      	blx	r3
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	dc0c      	bgt.n	8007756 <_ZN10IridiumSBD13filterSBDRINGEv+0x56>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	7c5b      	ldrb	r3, [r3, #17]
 8007740:	f083 0301 	eor.w	r3, r3, #1
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00d      	beq.n	8007766 <_ZN10IridiumSBD13filterSBDRINGEv+0x66>
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 fa56 	bl	8007bfc <_ZN10IridiumSBD15i2cSerAvailableEv>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	dd07      	ble.n	8007766 <_ZN10IridiumSBD13filterSBDRINGEv+0x66>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800775c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007760:	d101      	bne.n	8007766 <_ZN10IridiumSBD13filterSBDRINGEv+0x66>
 8007762:	2301      	movs	r3, #1
 8007764:	e000      	b.n	8007768 <_ZN10IridiumSBD13filterSBDRINGEv+0x68>
 8007766:	2300      	movs	r3, #0
 8007768:	2b00      	cmp	r3, #0
 800776a:	f000 80af 	beq.w	80078cc <_ZN10IridiumSBD13filterSBDRINGEv+0x1cc>
   {
      char c;
      if (this->useSerial)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	7c5b      	ldrb	r3, [r3, #17]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00b      	beq.n	800778e <_ZN10IridiumSBD13filterSBDRINGEv+0x8e>
      {
         c = stream->read();
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	689a      	ldr	r2, [r3, #8]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	330c      	adds	r3, #12
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4610      	mov	r0, r2
 8007786:	4798      	blx	r3
 8007788:	4603      	mov	r3, r0
 800778a:	73fb      	strb	r3, [r7, #15]
 800778c:	e004      	b.n	8007798 <_ZN10IridiumSBD13filterSBDRINGEv+0x98>
      }
      else
      {
         c = i2cSerRead();
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fa4c 	bl	8007c2c <_ZN10IridiumSBD10i2cSerReadEv>
 8007794:	4603      	mov	r3, r0
 8007796:	73fb      	strb	r3, [r7, #15]
      }
      consoleprint(c);
 8007798:	7bfb      	ldrb	r3, [r7, #15]
 800779a:	4619      	mov	r1, r3
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f7ff ff8d 	bl	80076bc <_ZN10IridiumSBD12consoleprintEc>
      if (*head != 0 && c == *head)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f000 8087 	beq.w	80078be <_ZN10IridiumSBD13filterSBDRINGEv+0x1be>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	7bfa      	ldrb	r2, [r7, #15]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d17f      	bne.n	80078be <_ZN10IridiumSBD13filterSBDRINGEv+0x1be>
      {
         ++head;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077c4:	1c5a      	adds	r2, r3, #1
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
         if (*head == 0)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d10d      	bne.n	80077f4 <_ZN10IridiumSBD13filterSBDRINGEv+0xf4>
         {
            SBDRINGSeen();
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f7ff ff7f 	bl	80076dc <_ZN10IridiumSBD11SBDRINGSeenEv>
            head = tail = SBDRING;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a3c      	ldr	r2, [pc, #240]	; (80078d4 <_ZN10IridiumSBD13filterSBDRINGEv+0x1d4>)
 80077e2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
            {
               --head;
               nextChar = c;
            }
         }
 80077f2:	e069      	b.n	80078c8 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c8>
            for (unsigned long start = millis(); ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) && millis() - start < FILTERTIMEOUT; );
 80077f4:	f001 fd72 	bl	80092dc <HAL_GetTick>
 80077f8:	60b8      	str	r0, [r7, #8]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	7c5b      	ldrb	r3, [r3, #17]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00b      	beq.n	800781a <_ZN10IridiumSBD13filterSBDRINGEv+0x11a>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	689a      	ldr	r2, [r3, #8]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	3308      	adds	r3, #8
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4610      	mov	r0, r2
 8007812:	4798      	blx	r3
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00c      	beq.n	8007834 <_ZN10IridiumSBD13filterSBDRINGEv+0x134>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	7c5b      	ldrb	r3, [r3, #17]
 800781e:	f083 0301 	eor.w	r3, r3, #1
 8007822:	b2db      	uxtb	r3, r3
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00e      	beq.n	8007846 <_ZN10IridiumSBD13filterSBDRINGEv+0x146>
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 f9e7 	bl	8007bfc <_ZN10IridiumSBD15i2cSerAvailableEv>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d108      	bne.n	8007846 <_ZN10IridiumSBD13filterSBDRINGEv+0x146>
 8007834:	f001 fd52 	bl	80092dc <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	2b09      	cmp	r3, #9
 8007840:	d801      	bhi.n	8007846 <_ZN10IridiumSBD13filterSBDRINGEv+0x146>
 8007842:	2301      	movs	r3, #1
 8007844:	e000      	b.n	8007848 <_ZN10IridiumSBD13filterSBDRINGEv+0x148>
 8007846:	2300      	movs	r3, #0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d000      	beq.n	800784e <_ZN10IridiumSBD13filterSBDRINGEv+0x14e>
 800784c:	e7d5      	b.n	80077fa <_ZN10IridiumSBD13filterSBDRINGEv+0xfa>
            if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	7c5b      	ldrb	r3, [r3, #17]
 8007852:	f083 0301 	eor.w	r3, r3, #1
 8007856:	b2db      	uxtb	r3, r3
 8007858:	2b00      	cmp	r3, #0
 800785a:	d002      	beq.n	8007862 <_ZN10IridiumSBD13filterSBDRINGEv+0x162>
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 f89d 	bl	800799c <_ZN10IridiumSBD13check9603dataEv>
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	7c5b      	ldrb	r3, [r3, #17]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00b      	beq.n	8007882 <_ZN10IridiumSBD13filterSBDRINGEv+0x182>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	689a      	ldr	r2, [r3, #8]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	3308      	adds	r3, #8
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4610      	mov	r0, r2
 800787a:	4798      	blx	r3
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00c      	beq.n	800789c <_ZN10IridiumSBD13filterSBDRINGEv+0x19c>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	7c5b      	ldrb	r3, [r3, #17]
 8007886:	f083 0301 	eor.w	r3, r3, #1
 800788a:	b2db      	uxtb	r3, r3
 800788c:	2b00      	cmp	r3, #0
 800788e:	d007      	beq.n	80078a0 <_ZN10IridiumSBD13filterSBDRINGEv+0x1a0>
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f9b3 	bl	8007bfc <_ZN10IridiumSBD15i2cSerAvailableEv>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d101      	bne.n	80078a0 <_ZN10IridiumSBD13filterSBDRINGEv+0x1a0>
 800789c:	2301      	movs	r3, #1
 800789e:	e000      	b.n	80078a2 <_ZN10IridiumSBD13filterSBDRINGEv+0x1a2>
 80078a0:	2300      	movs	r3, #0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d010      	beq.n	80078c8 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c8>
               --head;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078ac:	1e5a      	subs	r2, r3, #1
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
               nextChar = c;
 80078b4:	7bfa      	ldrb	r2, [r7, #15]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
         }
 80078bc:	e004      	b.n	80078c8 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c8>
      }
      else
      {
         nextChar = c;
 80078be:	7bfa      	ldrb	r2, [r7, #15]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80078c6:	e729      	b.n	800771c <_ZN10IridiumSBD13filterSBDRINGEv+0x1c>
         }
 80078c8:	bf00      	nop
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 80078ca:	e727      	b.n	800771c <_ZN10IridiumSBD13filterSBDRINGEv+0x1c>
      }
   }
}
 80078cc:	bf00      	nop
 80078ce:	3710      	adds	r7, #16
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	08021f00 	.word	0x08021f00

080078d8 <_ZN10IridiumSBD17filteredavailableEv>:

const char IridiumSBD::SBDRING[] = "SBDRING\r\n";

int IridiumSBD::filteredavailable()
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f7ff ff0d 	bl	8007700 <_ZN10IridiumSBD13filterSBDRINGEv>
   return head - tail + (nextChar != -1 ? 1 : 0);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 80078fa:	f1b2 3fff 	cmp.w	r2, #4294967295
 80078fe:	d001      	beq.n	8007904 <_ZN10IridiumSBD17filteredavailableEv+0x2c>
 8007900:	2201      	movs	r2, #1
 8007902:	e000      	b.n	8007906 <_ZN10IridiumSBD17filteredavailableEv+0x2e>
 8007904:	2200      	movs	r2, #0
 8007906:	4413      	add	r3, r2
}
 8007908:	4618      	mov	r0, r3
 800790a:	3708      	adds	r7, #8
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <_ZN10IridiumSBD12filteredreadEv>:

int IridiumSBD::filteredread()
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f7ff fef1 	bl	8007700 <_ZN10IridiumSBD13filterSBDRINGEv>

   // Use up the queue first
   if (head > tail)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800792a:	429a      	cmp	r2, r3
 800792c:	d91c      	bls.n	8007968 <_ZN10IridiumSBD12filteredreadEv+0x58>
   {
      char c = *tail++;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007934:	1c59      	adds	r1, r3, #1
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	73bb      	strb	r3, [r7, #14]
      if (head == tail)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800794c:	429a      	cmp	r2, r3
 800794e:	d109      	bne.n	8007964 <_ZN10IridiumSBD12filteredreadEv+0x54>
         head = tail = SBDRING;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a11      	ldr	r2, [pc, #68]	; (8007998 <_ZN10IridiumSBD12filteredreadEv+0x88>)
 8007954:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      return c;
 8007964:	7bbb      	ldrb	r3, [r7, #14]
 8007966:	e012      	b.n	800798e <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   // Then the "extra" char
   else if (nextChar != -1)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800796e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007972:	d00a      	beq.n	800798a <_ZN10IridiumSBD12filteredreadEv+0x7a>
   {
      char c = (char)nextChar;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800797a:	73fb      	strb	r3, [r7, #15]
      nextChar = -1;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f04f 32ff 	mov.w	r2, #4294967295
 8007982:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      return c;
 8007986:	7bfb      	ldrb	r3, [r7, #15]
 8007988:	e001      	b.n	800798e <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   return -1;
 800798a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	08021f00 	.word	0x08021f00

0800799c <_ZN10IridiumSBD13check9603dataEv>:

//Checks the number of available serial bytes
//Reads the available serial bytes (if any) and stores them in i2c_ser_buffer
void IridiumSBD::check9603data()
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  if (millis() - lastCheck >= I2C_POLLING_WAIT_MS)
 80079a4:	f001 fc9a 	bl	80092dc <HAL_GetTick>
 80079a8:	4602      	mov	r2, r0
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 80079b6:	4293      	cmp	r3, r2
 80079b8:	bf2c      	ite	cs
 80079ba:	2301      	movcs	r3, #1
 80079bc:	2300      	movcc	r3, #0
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f000 80b8 	beq.w	8007b36 <_ZN10IridiumSBD13check9603dataEv+0x19a>
  {
    //Check how many serial bytes are waiting to be read
    uint16_t bytesAvailable = 0;
 80079c6:	2300      	movs	r3, #0
 80079c8:	81fb      	strh	r3, [r7, #14]
    wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	68da      	ldr	r2, [r3, #12]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	7c1b      	ldrb	r3, [r3, #16]
 80079d2:	4619      	mov	r1, r3
 80079d4:	4610      	mov	r0, r2
 80079d6:	f000 ffc1 	bl	800895c <_ZN7TwoWire17beginTransmissionEh>
    wireport->write(LEN_REG); // Point to the serial buffer length
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	21fd      	movs	r1, #253	; 0xfd
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7fd ffdb 	bl	800599c <_ZN7TwoWire5writeEi>
    wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	4618      	mov	r0, r3
 80079ec:	f001 f800 	bl	80089f0 <_ZN7TwoWire15endTransmissionEv>
    if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)2) == 2) // Request two bytes
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	68d8      	ldr	r0, [r3, #12]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	7c1b      	ldrb	r3, [r3, #16]
 80079f8:	2202      	movs	r2, #2
 80079fa:	4619      	mov	r1, r3
 80079fc:	f000 ff9b 	bl	8008936 <_ZN7TwoWire11requestFromEhh>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	bf0c      	ite	eq
 8007a06:	2301      	moveq	r3, #1
 8007a08:	2300      	movne	r3, #0
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d01d      	beq.n	8007a4c <_ZN10IridiumSBD13check9603dataEv+0xb0>
    {
      uint8_t msb = wireport->read();
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	68da      	ldr	r2, [r3, #12]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	330c      	adds	r3, #12
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4610      	mov	r0, r2
 8007a20:	4798      	blx	r3
 8007a22:	4603      	mov	r3, r0
 8007a24:	737b      	strb	r3, [r7, #13]
      uint8_t lsb = wireport->read();
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	68da      	ldr	r2, [r3, #12]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	330c      	adds	r3, #12
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4610      	mov	r0, r2
 8007a36:	4798      	blx	r3
 8007a38:	4603      	mov	r3, r0
 8007a3a:	733b      	strb	r3, [r7, #12]
      bytesAvailable = (((uint16_t)msb) << 8) | lsb;
 8007a3c:	7b7b      	ldrb	r3, [r7, #13]
 8007a3e:	021b      	lsls	r3, r3, #8
 8007a40:	b21a      	sxth	r2, r3
 8007a42:	7b3b      	ldrb	r3, [r7, #12]
 8007a44:	b21b      	sxth	r3, r3
 8007a46:	4313      	orrs	r3, r2
 8007a48:	b21b      	sxth	r3, r3
 8007a4a:	81fb      	strh	r3, [r7, #14]
    }

    //Now read the serial bytes (if any)
    if (bytesAvailable > 0)
 8007a4c:	89fb      	ldrh	r3, [r7, #14]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d06c      	beq.n	8007b2c <_ZN10IridiumSBD13check9603dataEv+0x190>
    {
      // Request the bytes
      // Poke them into the i2c_serial buffer
      // Release the bus afterwards
      wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	68da      	ldr	r2, [r3, #12]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	7c1b      	ldrb	r3, [r3, #16]
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	4610      	mov	r0, r2
 8007a5e:	f000 ff7d 	bl	800895c <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the serial buffer
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	21ff      	movs	r1, #255	; 0xff
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7fd ff97 	bl	800599c <_ZN7TwoWire5writeEi>
      wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	4618      	mov	r0, r3
 8007a74:	f000 ffbc 	bl	80089f0 <_ZN7TwoWire15endTransmissionEv>
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 8007a78:	89fb      	ldrh	r3, [r7, #14]
 8007a7a:	2b08      	cmp	r3, #8
 8007a7c:	d92c      	bls.n	8007ad8 <_ZN10IridiumSBD13check9603dataEv+0x13c>
      {
        wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)SER_PACKET_SIZE, (uint8_t)false); // Request SER_PACKET_SIZE bytes, don't release the bus
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	68d8      	ldr	r0, [r3, #12]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	7c19      	ldrb	r1, [r3, #16]
 8007a86:	2300      	movs	r3, #0
 8007a88:	2208      	movs	r2, #8
 8007a8a:	f000 ff19 	bl	80088c0 <_ZN7TwoWire11requestFromEhhh>
        while (wireport->available())
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	68da      	ldr	r2, [r3, #12]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	3308      	adds	r3, #8
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	4798      	blx	r3
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	bf14      	ite	ne
 8007aa6:	2301      	movne	r3, #1
 8007aa8:	2300      	moveq	r3, #0
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00f      	beq.n	8007ad0 <_ZN10IridiumSBD13check9603dataEv+0x134>
        {
          i2cSerPoke(wireport->read()); // Read and store each byte
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	68da      	ldr	r2, [r3, #12]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	330c      	adds	r3, #12
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4610      	mov	r0, r2
 8007ac0:	4798      	blx	r3
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 f8d5 	bl	8007c78 <_ZN10IridiumSBD10i2cSerPokeEc>
        while (wireport->available())
 8007ace:	e7de      	b.n	8007a8e <_ZN10IridiumSBD13check9603dataEv+0xf2>
        }
        bytesAvailable -= SER_PACKET_SIZE; // Decrease the number of bytes available by SER_PACKET_SIZE
 8007ad0:	89fb      	ldrh	r3, [r7, #14]
 8007ad2:	3b08      	subs	r3, #8
 8007ad4:	81fb      	strh	r3, [r7, #14]
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 8007ad6:	e7cf      	b.n	8007a78 <_ZN10IridiumSBD13check9603dataEv+0xdc>
      }
      wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)bytesAvailable); // Request remaining bytes, release the bus
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	68d8      	ldr	r0, [r3, #12]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	7c1b      	ldrb	r3, [r3, #16]
 8007ae0:	89fa      	ldrh	r2, [r7, #14]
 8007ae2:	b2d2      	uxtb	r2, r2
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	f000 ff26 	bl	8008936 <_ZN7TwoWire11requestFromEhh>
      while (wireport->available())
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	68da      	ldr	r2, [r3, #12]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3308      	adds	r3, #8
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4610      	mov	r0, r2
 8007afa:	4798      	blx	r3
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	bf14      	ite	ne
 8007b02:	2301      	movne	r3, #1
 8007b04:	2300      	moveq	r3, #0
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00f      	beq.n	8007b2c <_ZN10IridiumSBD13check9603dataEv+0x190>
      {
        i2cSerPoke(wireport->read()); // Read and store each byte
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	68da      	ldr	r2, [r3, #12]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	330c      	adds	r3, #12
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4610      	mov	r0, r2
 8007b1c:	4798      	blx	r3
 8007b1e:	4603      	mov	r3, r0
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	4619      	mov	r1, r3
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 f8a7 	bl	8007c78 <_ZN10IridiumSBD10i2cSerPokeEc>
      while (wireport->available())
 8007b2a:	e7de      	b.n	8007aea <_ZN10IridiumSBD13check9603dataEv+0x14e>
      }
    }

    lastCheck = millis(); //Put off checking to avoid excessive I2C bus traffic
 8007b2c:	f001 fbd6 	bl	80092dc <HAL_GetTick>
 8007b30:	4602      	mov	r2, r0
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8007b36:	bf00      	nop
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <_ZN10IridiumSBD13check9603pinsEv>:

//Reads the IO pins and update IO_REGISTER
void IridiumSBD::check9603pins()
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b082      	sub	sp, #8
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  //Read the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68da      	ldr	r2, [r3, #12]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	7c1b      	ldrb	r3, [r3, #16]
 8007b4e:	4619      	mov	r1, r3
 8007b50:	4610      	mov	r0, r2
 8007b52:	f000 ff03 	bl	800895c <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	2110      	movs	r1, #16
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f7fd ff1d 	bl	800599c <_ZN7TwoWire5writeEi>
  wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	4618      	mov	r0, r3
 8007b68:	f000 ff42 	bl	80089f0 <_ZN7TwoWire15endTransmissionEv>
  if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)1) == 1) // Request one byte from the IO register
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	68d8      	ldr	r0, [r3, #12]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	7c1b      	ldrb	r3, [r3, #16]
 8007b74:	2201      	movs	r2, #1
 8007b76:	4619      	mov	r1, r3
 8007b78:	f000 fedd 	bl	8008936 <_ZN7TwoWire11requestFromEhh>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	bf0c      	ite	eq
 8007b82:	2301      	moveq	r3, #1
 8007b84:	2300      	movne	r3, #0
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00d      	beq.n	8007ba8 <_ZN10IridiumSBD13check9603pinsEv+0x6a>
  {
    IO_REGISTER = wireport->read(); // Read the IO register
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	68da      	ldr	r2, [r3, #12]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	330c      	adds	r3, #12
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4610      	mov	r0, r2
 8007b9c:	4798      	blx	r3
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	b2da      	uxtb	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
}
 8007ba8:	bf00      	nop
 8007baa:	3708      	adds	r7, #8
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <_ZN10IridiumSBD11set9603pinsEh>:

//Set the IO pins
void IridiumSBD::set9603pins(uint8_t pins)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	460b      	mov	r3, r1
 8007bba:	70fb      	strb	r3, [r7, #3]
  //Write to the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	68da      	ldr	r2, [r3, #12]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	7c1b      	ldrb	r3, [r3, #16]
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	4610      	mov	r0, r2
 8007bc8:	f000 fec8 	bl	800895c <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	2110      	movs	r1, #16
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7fd fee2 	bl	800599c <_ZN7TwoWire5writeEi>
  wireport->write(pins); // Set the pins
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	68da      	ldr	r2, [r3, #12]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	78f9      	ldrb	r1, [r7, #3]
 8007be6:	4610      	mov	r0, r2
 8007be8:	4798      	blx	r3
  wireport->endTransmission(); // Send data and surrender the bus
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f000 fefe 	bl	80089f0 <_ZN7TwoWire15endTransmissionEv>
}
 8007bf4:	bf00      	nop
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <_ZN10IridiumSBD15i2cSerAvailableEv>:
    return(ISBD_SUCCESS);
}

// I2C_SER functions
int IridiumSBD::i2cSerAvailable()
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  return (i2c_ser_buffer_tail + I2C_SER_MAX_BUFF - i2c_ser_buffer_head) % I2C_SER_MAX_BUFF;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c08:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	425a      	negs	r2, r3
 8007c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c18:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007c1c:	bf58      	it	pl
 8007c1e:	4253      	negpl	r3, r2
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <_ZN10IridiumSBD10i2cSerReadEv>:

int IridiumSBD::i2cSerRead()
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  // Empty buffer?
  if (i2c_ser_buffer_head == i2c_ser_buffer_tail)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d102      	bne.n	8007c46 <_ZN10IridiumSBD10i2cSerReadEv+0x1a>
    return -1;
 8007c40:	f04f 33ff 	mov.w	r3, #4294967295
 8007c44:	e012      	b.n	8007c6c <_ZN10IridiumSBD10i2cSerReadEv+0x40>

  // Read from "head"
  uint8_t d = i2c_ser_buffer[i2c_ser_buffer_head]; // grab next byte
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	7c9b      	ldrb	r3, [r3, #18]
 8007c50:	73fb      	strb	r3, [r7, #15]
  i2c_ser_buffer_head = (i2c_ser_buffer_head + 1) % I2C_SER_MAX_BUFF; // update head
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c56:	3301      	adds	r3, #1
 8007c58:	425a      	negs	r2, r3
 8007c5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c5e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007c62:	bf58      	it	pl
 8007c64:	4253      	negpl	r3, r2
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	6593      	str	r3, [r2, #88]	; 0x58
  return d;
 8007c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3714      	adds	r7, #20
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <_ZN10IridiumSBD10i2cSerPokeEc>:

void IridiumSBD::i2cSerPoke(char serChar)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	460b      	mov	r3, r1
 8007c82:	70fb      	strb	r3, [r7, #3]
  // Calculate the new value for the tail
  int next = (i2c_ser_buffer_tail + 1) % I2C_SER_MAX_BUFF;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c88:	3301      	adds	r3, #1
 8007c8a:	425a      	negs	r2, r3
 8007c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c90:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007c94:	bf58      	it	pl
 8007c96:	4253      	negpl	r3, r2
 8007c98:	60fb      	str	r3, [r7, #12]
  // If the buffer is not full (i.e. we are not about to overwrite the head byte)
  // If the buffer is full, the byte is lost
  if (next != i2c_ser_buffer_head)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d008      	beq.n	8007cb6 <_ZN10IridiumSBD10i2cSerPokeEc+0x3e>
  {
    // save new data in buffer: tail points to where byte goes
    i2c_ser_buffer[i2c_ser_buffer_tail] = serChar; // save new byte
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	4413      	add	r3, r2
 8007cac:	78fa      	ldrb	r2, [r7, #3]
 8007cae:	749a      	strb	r2, [r3, #18]
    i2c_ser_buffer_tail = next;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 8007cb6:	bf00      	nop
 8007cb8:	3714      	adds	r7, #20
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
	...

08007cc4 <_ZN10IridiumSBD20internalClearBuffersEi>:

int IridiumSBD::internalClearBuffers(int buffers)
// Clear the MO/MT/Both buffers
// Defaults to clearing the MO buffer to avoid resending old messages
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af02      	add	r7, sp, #8
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
   if (this->asleep)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d001      	beq.n	8007cdc <_ZN10IridiumSBD20internalClearBuffersEi+0x18>
      return ISBD_IS_ASLEEP;
 8007cd8:	230a      	movs	r3, #10
 8007cda:	e032      	b.n	8007d42 <_ZN10IridiumSBD20internalClearBuffersEi+0x7e>

   if (buffers == ISBD_CLEAR_MT) // Clear MT buffer
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d106      	bne.n	8007cf0 <_ZN10IridiumSBD20internalClearBuffersEi+0x2c>
   {
      send(F("AT+SBDD1\r"));
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	4919      	ldr	r1, [pc, #100]	; (8007d4c <_ZN10IridiumSBD20internalClearBuffersEi+0x88>)
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f7ff fadd 	bl	80072a8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
 8007cee:	e00f      	b.n	8007d10 <_ZN10IridiumSBD20internalClearBuffersEi+0x4c>
   }
   else if (buffers == ISBD_CLEAR_BOTH) // Clear both buffers
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d106      	bne.n	8007d04 <_ZN10IridiumSBD20internalClearBuffersEi+0x40>
   {
      send(F("AT+SBDD2\r"));
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	4915      	ldr	r1, [pc, #84]	; (8007d50 <_ZN10IridiumSBD20internalClearBuffersEi+0x8c>)
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f7ff fad3 	bl	80072a8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
 8007d02:	e005      	b.n	8007d10 <_ZN10IridiumSBD20internalClearBuffersEi+0x4c>
   }
   else // Clear MO buffer
   {
      send(F("AT+SBDD0\r"));
 8007d04:	2301      	movs	r3, #1
 8007d06:	2201      	movs	r2, #1
 8007d08:	4912      	ldr	r1, [pc, #72]	; (8007d54 <_ZN10IridiumSBD20internalClearBuffersEi+0x90>)
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f7ff facc 	bl	80072a8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   }
   if (!waitForATResponse())
 8007d10:	4b11      	ldr	r3, [pc, #68]	; (8007d58 <_ZN10IridiumSBD20internalClearBuffersEi+0x94>)
 8007d12:	9300      	str	r3, [sp, #0]
 8007d14:	2300      	movs	r3, #0
 8007d16:	2200      	movs	r2, #0
 8007d18:	2100      	movs	r1, #0
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f7fe fe66 	bl	80069ec <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8007d20:	4603      	mov	r3, r0
 8007d22:	f083 0301 	eor.w	r3, r3, #1
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d009      	beq.n	8007d40 <_ZN10IridiumSBD20internalClearBuffersEi+0x7c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f7fe ff17 	bl	8006b60 <_ZN10IridiumSBD9cancelledEv>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d001      	beq.n	8007d3c <_ZN10IridiumSBD20internalClearBuffersEi+0x78>
 8007d38:	2304      	movs	r3, #4
 8007d3a:	e002      	b.n	8007d42 <_ZN10IridiumSBD20internalClearBuffersEi+0x7e>
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e000      	b.n	8007d42 <_ZN10IridiumSBD20internalClearBuffersEi+0x7e>

   return ISBD_SUCCESS;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3708      	adds	r7, #8
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	0802154c 	.word	0x0802154c
 8007d50:	08021558 	.word	0x08021558
 8007d54:	08021564 	.word	0x08021564
 8007d58:	08020e94 	.word	0x08020e94

08007d5c <_ZN10IridiumSBD15internalGetIMEIEPcj>:

int IridiumSBD::internalGetIMEI(char *IMEI, size_t bufferSize)
// Get the IMEI
// https://github.com/mikalhart/IridiumSBD/pull/21
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b086      	sub	sp, #24
 8007d60:	af02      	add	r7, sp, #8
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
   if (this->asleep)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d001      	beq.n	8007d76 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x1a>
      return ISBD_IS_ASLEEP;
 8007d72:	230a      	movs	r3, #10
 8007d74:	e023      	b.n	8007dbe <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>

   if (bufferSize < 16) // IMEI is 15 digits
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2b0f      	cmp	r3, #15
 8007d7a:	d801      	bhi.n	8007d80 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x24>
      return ISBD_RX_OVERFLOW;
 8007d7c:	2308      	movs	r3, #8
 8007d7e:	e01e      	b.n	8007dbe <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>

   send(F("AT+CGSN\r"));
 8007d80:	2301      	movs	r3, #1
 8007d82:	2201      	movs	r2, #1
 8007d84:	4910      	ldr	r1, [pc, #64]	; (8007dc8 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x6c>)
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f7ff fa8e 	bl	80072a8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(IMEI, bufferSize, "\n"))
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	4b0f      	ldr	r3, [pc, #60]	; (8007dcc <_ZN10IridiumSBD15internalGetIMEIEPcj+0x70>)
 8007d90:	9300      	str	r3, [sp, #0]
 8007d92:	4b0f      	ldr	r3, [pc, #60]	; (8007dd0 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x74>)
 8007d94:	68b9      	ldr	r1, [r7, #8]
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	f7fe fe28 	bl	80069ec <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	f083 0301 	eor.w	r3, r3, #1
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d009      	beq.n	8007dbc <_ZN10IridiumSBD15internalGetIMEIEPcj+0x60>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f7fe fed9 	bl	8006b60 <_ZN10IridiumSBD9cancelledEv>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d001      	beq.n	8007db8 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x5c>
 8007db4:	2304      	movs	r3, #4
 8007db6:	e002      	b.n	8007dbe <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>
 8007db8:	2303      	movs	r3, #3
 8007dba:	e000      	b.n	8007dbe <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>

   return ISBD_SUCCESS;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	08021570 	.word	0x08021570
 8007dcc:	08020e94 	.word	0x08020e94
 8007dd0:	0802157c 	.word	0x0802157c

08007dd4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE>:
}
#endif


//uint8_t IridiumSBD::MRT_Iridium_setup(UART_HandleTypeDef huart,POWERPROFILE profile){ TODO??
uint8_t IridiumSBD::MRT_Iridium_setup(uint8_t timeout, uint8_t i2c_bus, void (*iridium_print)(char*)){
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b092      	sub	sp, #72	; 0x48
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	607b      	str	r3, [r7, #4]
 8007dde:	460b      	mov	r3, r1
 8007de0:	72fb      	strb	r3, [r7, #11]
 8007de2:	4613      	mov	r3, r2
 8007de4:	72bb      	strb	r3, [r7, #10]
	this->print = iridium_print;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	601a      	str	r2, [r3, #0]
	this->print((char*) "\r\nIridium 9603N Init\r\n");
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	485b      	ldr	r0, [pc, #364]	; (8007f60 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x18c>)
 8007df2:	4798      	blx	r3

	this->print((char*) "\tSetting I2C bus...");
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	485a      	ldr	r0, [pc, #360]	; (8007f64 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x190>)
 8007dfa:	4798      	blx	r3
	if (i2c_bus == 1){
 8007dfc:	7abb      	ldrb	r3, [r7, #10]
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d103      	bne.n	8007e0a <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x36>
		this->wireport = &Wire;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	4a58      	ldr	r2, [pc, #352]	; (8007f68 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x194>)
 8007e06:	60da      	str	r2, [r3, #12]
 8007e08:	e00c      	b.n	8007e24 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x50>
	}
	else if (i2c_bus == 2){
 8007e0a:	7abb      	ldrb	r3, [r7, #10]
 8007e0c:	2b02      	cmp	r3, #2
 8007e0e:	d103      	bne.n	8007e18 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x44>
		this->wireport = &Wire1;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	4a56      	ldr	r2, [pc, #344]	; (8007f6c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x198>)
 8007e14:	60da      	str	r2, [r3, #12]
 8007e16:	e005      	b.n	8007e24 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x50>
	}
	else if (i2c_bus == 3){
 8007e18:	7abb      	ldrb	r3, [r7, #10]
 8007e1a:	2b03      	cmp	r3, #3
 8007e1c:	d102      	bne.n	8007e24 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x50>
		this->wireport = &Wire2;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	4a53      	ldr	r2, [pc, #332]	; (8007f70 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x19c>)
 8007e22:	60da      	str	r2, [r3, #12]
	}
	this->print((char*) "OK\r\n");
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4852      	ldr	r0, [pc, #328]	; (8007f74 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 8007e2a:	4798      	blx	r3

	this->print((char*) "\tChecking device connection...");
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4851      	ldr	r0, [pc, #324]	; (8007f78 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a4>)
 8007e32:	4798      	blx	r3
	while(!this->isConnected()){
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f7fe f8c9 	bl	8005fcc <_ZN10IridiumSBD11isConnectedEv>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	f083 0301 	eor.w	r3, r3, #1
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d020      	beq.n	8007e88 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0xb4>
		HAL_Delay(300);
 8007e46:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007e4a:	f001 fa53 	bl	80092f4 <HAL_Delay>
		this->print((char*) "\r\tChecking device connection   ");
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	484a      	ldr	r0, [pc, #296]	; (8007f7c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a8>)
 8007e54:	4798      	blx	r3
		HAL_Delay(300);
 8007e56:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007e5a:	f001 fa4b 	bl	80092f4 <HAL_Delay>
		this->print((char*) "\r\tChecking device connection.  ");
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4847      	ldr	r0, [pc, #284]	; (8007f80 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1ac>)
 8007e64:	4798      	blx	r3
		HAL_Delay(300);
 8007e66:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007e6a:	f001 fa43 	bl	80092f4 <HAL_Delay>
		this->print((char*) "\r\tChecking device connection.. ");
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4844      	ldr	r0, [pc, #272]	; (8007f84 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1b0>)
 8007e74:	4798      	blx	r3
		HAL_Delay(300);
 8007e76:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007e7a:	f001 fa3b 	bl	80092f4 <HAL_Delay>
		this->print((char*) "\r\tChecking device connection...");
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4841      	ldr	r0, [pc, #260]	; (8007f88 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1b4>)
 8007e84:	4798      	blx	r3
	while(!this->isConnected()){
 8007e86:	e7d5      	b.n	8007e34 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x60>
	}
	this->print((char*) "OK\r\n");
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4839      	ldr	r0, [pc, #228]	; (8007f74 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 8007e8e:	4798      	blx	r3

	//Activate the superchargers
	this->print((char*) "\tActivating the superchargers...");
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	483d      	ldr	r0, [pc, #244]	; (8007f8c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1b8>)
 8007e96:	4798      	blx	r3
	this->enableSuperCapCharger(true);
 8007e98:	2101      	movs	r1, #1
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f7fd ff0e 	bl	8005cbc <_ZN10IridiumSBD21enableSuperCapChargerEb>
	this->print((char*) "OK\r\n");
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4833      	ldr	r0, [pc, #204]	; (8007f74 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 8007ea6:	4798      	blx	r3


	//Wait for the supercapacitors to charge
	//int start=millis();
	this->print((char*) "\tWaiting for the supercapacitors to charge...");
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4838      	ldr	r0, [pc, #224]	; (8007f90 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1bc>)
 8007eae:	4798      	blx	r3
	while (!this->checkSuperCapCharger()){
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f7fd ff41 	bl	8005d38 <_ZN10IridiumSBD20checkSuperCapChargerEv>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	f083 0301 	eor.w	r3, r3, #1
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d004      	beq.n	8007ecc <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0xf8>
		HAL_Delay(333);
 8007ec2:	f240 104d 	movw	r0, #333	; 0x14d
 8007ec6:	f001 fa15 	bl	80092f4 <HAL_Delay>
	while (!this->checkSuperCapCharger()){
 8007eca:	e7f1      	b.n	8007eb0 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0xdc>
	}
	this->print((char*) "OK\r\n");
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4828      	ldr	r0, [pc, #160]	; (8007f74 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 8007ed2:	4798      	blx	r3


	//Enable power for the 9603N
	this->print((char*) "\tEnabling 9603N power...");
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	482e      	ldr	r0, [pc, #184]	; (8007f94 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1c0>)
 8007eda:	4798      	blx	r3
	this->enable9603Npower(true);
 8007edc:	2101      	movs	r1, #1
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f7fd ff5a 	bl	8005d98 <_ZN10IridiumSBD16enable9603NpowerEb>
	this->print((char*) "OK\r\n");
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4822      	ldr	r0, [pc, #136]	; (8007f74 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 8007eea:	4798      	blx	r3
	/*
	 * Begin satellite modem operation
	 */

	//Power on the rockblock
	this->print((char*) "\tStarting Modem...");
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4829      	ldr	r0, [pc, #164]	; (8007f98 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1c4>)
 8007ef2:	4798      	blx	r3
	//this->setPowerProfile(profile);
	int err = this->begin();
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f7fd fd83 	bl	8005a00 <_ZN10IridiumSBD5beginEv>
 8007efa:	6478      	str	r0, [r7, #68]	; 0x44
	if (err != ISBD_SUCCESS)
 8007efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00b      	beq.n	8007f1a <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x146>
	  {
		this->print((char*) "Failed: ");
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4825      	ldr	r0, [pc, #148]	; (8007f9c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1c8>)
 8007f08:	4798      	blx	r3
		this->MRT_Iridium_ErrorMessage(err);
 8007f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	4619      	mov	r1, r3
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f000 f849 	bl	8007fa8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>

	    return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e01d      	b.n	8007f56 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x182>
	  }
	this->print((char*) "OK\r\n");
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4815      	ldr	r0, [pc, #84]	; (8007f74 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 8007f20:	4798      	blx	r3

	//Setup default IMEI to 000000000000000 (no IMEI)
	IMEI= (char*) "000000000000000";
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	4a1e      	ldr	r2, [pc, #120]	; (8007fa0 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1cc>)
 8007f26:	605a      	str	r2, [r3, #4]

	char str[50];
	sprintf(str, "\tSetting timeout of %i seconds...", timeout);
 8007f28:	7afa      	ldrb	r2, [r7, #11]
 8007f2a:	f107 0310 	add.w	r3, r7, #16
 8007f2e:	491d      	ldr	r1, [pc, #116]	; (8007fa4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1d0>)
 8007f30:	4618      	mov	r0, r3
 8007f32:	f013 fc13 	bl	801b75c <siprintf>
	this->print((char*) str);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f107 0210 	add.w	r2, r7, #16
 8007f3e:	4610      	mov	r0, r2
 8007f40:	4798      	blx	r3
	adjustATTimeout(timeout);
 8007f42:	7afb      	ldrb	r3, [r7, #11]
 8007f44:	4619      	mov	r1, r3
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f7fd fdc6 	bl	8005ad8 <_ZN10IridiumSBD15adjustATTimeoutEi>
	this->print((char*) "OK\r\n");
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4808      	ldr	r0, [pc, #32]	; (8007f74 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 8007f52:	4798      	blx	r3

	return HAL_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3748      	adds	r7, #72	; 0x48
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	08021580 	.word	0x08021580
 8007f64:	08021598 	.word	0x08021598
 8007f68:	20000614 	.word	0x20000614
 8007f6c:	200006cc 	.word	0x200006cc
 8007f70:	20000784 	.word	0x20000784
 8007f74:	08020e94 	.word	0x08020e94
 8007f78:	080215ac 	.word	0x080215ac
 8007f7c:	080215cc 	.word	0x080215cc
 8007f80:	080215ec 	.word	0x080215ec
 8007f84:	0802160c 	.word	0x0802160c
 8007f88:	0802162c 	.word	0x0802162c
 8007f8c:	0802164c 	.word	0x0802164c
 8007f90:	08021670 	.word	0x08021670
 8007f94:	080216a0 	.word	0x080216a0
 8007f98:	080216bc 	.word	0x080216bc
 8007f9c:	080216d0 	.word	0x080216d0
 8007fa0:	080216dc 	.word	0x080216dc
 8007fa4:	080216ec 	.word	0x080216ec

08007fa8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>:
	return true;
}



void IridiumSBD::MRT_Iridium_ErrorMessage(uint8_t error){
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	70fb      	strb	r3, [r7, #3]
	this->print((char*) "\r\n\tError:\t");
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4834      	ldr	r0, [pc, #208]	; (800808c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xe4>)
 8007fba:	4798      	blx	r3
	if (error == ISBD_ALREADY_AWAKE){
 8007fbc:	78fb      	ldrb	r3, [r7, #3]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d104      	bne.n	8007fcc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x24>
		this->print((char*) "\tAlready Awake\r\n");
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4832      	ldr	r0, [pc, #200]	; (8008090 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xe8>)
 8007fc8:	4798      	blx	r3
		this->print((char*) "\tDEBUG LINE REACHED\r\n");
	}
	else{
		this->print((char*) "\tUNKNOWN\r\n");
	}
}
 8007fca:	e05b      	b.n	8008084 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_SERIAL_FAILURE){
 8007fcc:	78fb      	ldrb	r3, [r7, #3]
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d104      	bne.n	8007fdc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x34>
		this->print((char*) "\tSerial Failure\r\n");
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	482f      	ldr	r0, [pc, #188]	; (8008094 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xec>)
 8007fd8:	4798      	blx	r3
}
 8007fda:	e053      	b.n	8008084 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_PROTOCOL_ERROR){
 8007fdc:	78fb      	ldrb	r3, [r7, #3]
 8007fde:	2b03      	cmp	r3, #3
 8007fe0:	d104      	bne.n	8007fec <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x44>
		this->print((char*) "\tProtocol Error\r\n");
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	482c      	ldr	r0, [pc, #176]	; (8008098 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf0>)
 8007fe8:	4798      	blx	r3
}
 8007fea:	e04b      	b.n	8008084 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_CANCELLED){
 8007fec:	78fb      	ldrb	r3, [r7, #3]
 8007fee:	2b04      	cmp	r3, #4
 8007ff0:	d104      	bne.n	8007ffc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x54>
		this->print((char*) "\tCancelled\r\n");
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4829      	ldr	r0, [pc, #164]	; (800809c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf4>)
 8007ff8:	4798      	blx	r3
}
 8007ffa:	e043      	b.n	8008084 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_NO_MODEM_DETECTED){
 8007ffc:	78fb      	ldrb	r3, [r7, #3]
 8007ffe:	2b05      	cmp	r3, #5
 8008000:	d104      	bne.n	800800c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x64>
		this->print((char*) "\tNo modem detected: check wiring.\r\n");
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4826      	ldr	r0, [pc, #152]	; (80080a0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf8>)
 8008008:	4798      	blx	r3
}
 800800a:	e03b      	b.n	8008084 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_SBDIX_FATAL_ERROR){
 800800c:	78fb      	ldrb	r3, [r7, #3]
 800800e:	2b06      	cmp	r3, #6
 8008010:	d104      	bne.n	800801c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x74>
		this->print((char*) "\tSDBIX Fatal Error\r\n");
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4823      	ldr	r0, [pc, #140]	; (80080a4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xfc>)
 8008018:	4798      	blx	r3
}
 800801a:	e033      	b.n	8008084 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_SENDRECEIVE_TIMEOUT){
 800801c:	78fb      	ldrb	r3, [r7, #3]
 800801e:	2b07      	cmp	r3, #7
 8008020:	d104      	bne.n	800802c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x84>
		this->print((char*) "\tSend-Receive Timeout\r\n");
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4820      	ldr	r0, [pc, #128]	; (80080a8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x100>)
 8008028:	4798      	blx	r3
}
 800802a:	e02b      	b.n	8008084 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_RX_OVERFLOW){
 800802c:	78fb      	ldrb	r3, [r7, #3]
 800802e:	2b08      	cmp	r3, #8
 8008030:	d104      	bne.n	800803c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x94>
		this->print((char*) "\tRX Overflow\r\n");
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	481d      	ldr	r0, [pc, #116]	; (80080ac <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x104>)
 8008038:	4798      	blx	r3
}
 800803a:	e023      	b.n	8008084 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_REENTRANT){
 800803c:	78fb      	ldrb	r3, [r7, #3]
 800803e:	2b09      	cmp	r3, #9
 8008040:	d104      	bne.n	800804c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xa4>
		this->print((char*) "\tREENTRANT\r\n");
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	481a      	ldr	r0, [pc, #104]	; (80080b0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x108>)
 8008048:	4798      	blx	r3
}
 800804a:	e01b      	b.n	8008084 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_IS_ASLEEP){
 800804c:	78fb      	ldrb	r3, [r7, #3]
 800804e:	2b0a      	cmp	r3, #10
 8008050:	d104      	bne.n	800805c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xb4>
		this->print((char*) "\tIs Asleep\r\n");
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4817      	ldr	r0, [pc, #92]	; (80080b4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x10c>)
 8008058:	4798      	blx	r3
}
 800805a:	e013      	b.n	8008084 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_NO_SLEEP_PIN){
 800805c:	78fb      	ldrb	r3, [r7, #3]
 800805e:	2b0b      	cmp	r3, #11
 8008060:	d104      	bne.n	800806c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xc4>
		this->print((char*) "\tNo Sleep Pin\r\n");
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4814      	ldr	r0, [pc, #80]	; (80080b8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x110>)
 8008068:	4798      	blx	r3
}
 800806a:	e00b      	b.n	8008084 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if(error == 20){
 800806c:	78fb      	ldrb	r3, [r7, #3]
 800806e:	2b14      	cmp	r3, #20
 8008070:	d104      	bne.n	800807c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xd4>
		this->print((char*) "\tDEBUG LINE REACHED\r\n");
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4811      	ldr	r0, [pc, #68]	; (80080bc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x114>)
 8008078:	4798      	blx	r3
}
 800807a:	e003      	b.n	8008084 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
		this->print((char*) "\tUNKNOWN\r\n");
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	480f      	ldr	r0, [pc, #60]	; (80080c0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x118>)
 8008082:	4798      	blx	r3
}
 8008084:	bf00      	nop
 8008086:	3708      	adds	r7, #8
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	080217d0 	.word	0x080217d0
 8008090:	080217dc 	.word	0x080217dc
 8008094:	080217f0 	.word	0x080217f0
 8008098:	08021804 	.word	0x08021804
 800809c:	08021818 	.word	0x08021818
 80080a0:	08021828 	.word	0x08021828
 80080a4:	0802184c 	.word	0x0802184c
 80080a8:	08021864 	.word	0x08021864
 80080ac:	0802187c 	.word	0x0802187c
 80080b0:	0802188c 	.word	0x0802188c
 80080b4:	0802189c 	.word	0x0802189c
 80080b8:	080218ac 	.word	0x080218ac
 80080bc:	080218bc 	.word	0x080218bc
 80080c0:	080218d4 	.word	0x080218d4

080080c4 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv>:


/*
 * This function requests the satellite modem's IMEI number.
 */
boolean IridiumSBD::MRT_Iridium_getIMEI(void){
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b092      	sub	sp, #72	; 0x48
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]

	//Check if we already have the IMEI
	if (strcmp(IMEI,"000000000000000")==0){
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	491f      	ldr	r1, [pc, #124]	; (8008150 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x8c>)
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7f8 f88c 	bl	80001f0 <strcmp>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d124      	bne.n	8008128 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x64>

		//Reset the IMEI
		IMEI=new char[16];
 80080de:	2010      	movs	r0, #16
 80080e0:	f011 fd8f 	bl	8019c02 <_Znaj>
 80080e4:	4603      	mov	r3, r0
 80080e6:	461a      	mov	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	605a      	str	r2, [r3, #4]

		// Get the IMEI
		this->print((char*) "\r\nIridium: Retrieving the IMEI\r\n");
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4818      	ldr	r0, [pc, #96]	; (8008154 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x90>)
 80080f2:	4798      	blx	r3
		int err = this->getIMEI(IMEI, 16);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	2210      	movs	r2, #16
 80080fa:	4619      	mov	r1, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f7fd ff45 	bl	8005f8c <_ZN10IridiumSBD7getIMEIEPcj>
 8008102:	6478      	str	r0, [r7, #68]	; 0x44
		if (err != ISBD_SUCCESS)
 8008104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00e      	beq.n	8008128 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x64>
		{
			char str[24+sizeof(int)];
		    sprintf(str, "\tgetIMEI failed: error %i\r\n", err);
 800810a:	f107 030c 	add.w	r3, r7, #12
 800810e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008110:	4911      	ldr	r1, [pc, #68]	; (8008158 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x94>)
 8008112:	4618      	mov	r0, r3
 8008114:	f013 fb22 	bl	801b75c <siprintf>
		    this->print((char*) str);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f107 020c 	add.w	r2, r7, #12
 8008120:	4610      	mov	r0, r2
 8008122:	4798      	blx	r3
		    return false;
 8008124:	2300      	movs	r3, #0
 8008126:	e00e      	b.n	8008146 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x82>
		  }
	}

	char str[28];//IMEI is 15 integers long
	sprintf(str, "\tIMEI is %s\r\n", IMEI);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	685a      	ldr	r2, [r3, #4]
 800812c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008130:	490a      	ldr	r1, [pc, #40]	; (800815c <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x98>)
 8008132:	4618      	mov	r0, r3
 8008134:	f013 fb12 	bl	801b75c <siprintf>
	this->print((char*) str);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008140:	4610      	mov	r0, r2
 8008142:	4798      	blx	r3
	return true;
 8008144:	2301      	movs	r3, #1
}
 8008146:	4618      	mov	r0, r3
 8008148:	3748      	adds	r7, #72	; 0x48
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	080216dc 	.word	0x080216dc
 8008154:	080218e0 	.word	0x080218e0
 8008158:	08021904 	.word	0x08021904
 800815c:	08021920 	.word	0x08021920

08008160 <_ZN10IridiumSBD15MRT_Iridium_CSQEv>:
 * This sketch checks the Iridium signal quality and returns the status
 * of the Network Available signal.
 *
 * The boolean param is if you want to check for network availability
 */
int IridiumSBD::MRT_Iridium_CSQ(){
 8008160:	b580      	push	{r7, lr}
 8008162:	b09e      	sub	sp, #120	; 0x78
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
	this->print((char*) "\r\nIridium: Checking Signal Quality\r\n");
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	481c      	ldr	r0, [pc, #112]	; (80081e0 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x80>)
 800816e:	4798      	blx	r3
	int signalQuality = -1;
 8008170:	f04f 33ff 	mov.w	r3, #4294967295
 8008174:	673b      	str	r3, [r7, #112]	; 0x70

	this->MRT_Iridium_getIMEI();
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f7ff ffa4 	bl	80080c4 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv>

	// Check the signal quality.
	// This returns a number between 0 and 5.
	// 2 or better is preferred.
	int err = this->getSignalQuality(signalQuality);
 800817c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008180:	4619      	mov	r1, r3
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f7fd fc8a 	bl	8005a9c <_ZN10IridiumSBD16getSignalQualityERi>
 8008188:	6778      	str	r0, [r7, #116]	; 0x74
	if (err != ISBD_SUCCESS)
 800818a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800818c:	2b00      	cmp	r3, #0
 800818e:	d015      	beq.n	80081bc <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x5c>
	{
	  char str[34+sizeof(int)];
	  sprintf(str, "\tSignalQuality failed: error  %i\r\n", err);
 8008190:	f107 030c 	add.w	r3, r7, #12
 8008194:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008196:	4913      	ldr	r1, [pc, #76]	; (80081e4 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x84>)
 8008198:	4618      	mov	r0, r3
 800819a:	f013 fadf 	bl	801b75c <siprintf>
	  this->print((char*) str);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f107 020c 	add.w	r2, r7, #12
 80081a6:	4610      	mov	r0, r2
 80081a8:	4798      	blx	r3
	  this->MRT_Iridium_ErrorMessage(err);
 80081aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	4619      	mov	r1, r3
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f7ff fef9 	bl	8007fa8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
	  return -1;
 80081b6:	f04f 33ff 	mov.w	r3, #4294967295
 80081ba:	e00d      	b.n	80081d8 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x78>
	}

	char str[56+sizeof(int)];
	sprintf(str, "\tOn a scale of 0 to 5, signal quality is currently  %i\r\n", signalQuality);
 80081bc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80081be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80081c2:	4909      	ldr	r1, [pc, #36]	; (80081e8 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x88>)
 80081c4:	4618      	mov	r0, r3
 80081c6:	f013 fac9 	bl	801b75c <siprintf>
	this->print((char*) str);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80081d2:	4610      	mov	r0, r2
 80081d4:	4798      	blx	r3

	return signalQuality;
 80081d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3778      	adds	r7, #120	; 0x78
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	08021930 	.word	0x08021930
 80081e4:	08021958 	.word	0x08021958
 80081e8:	0802197c 	.word	0x0802197c

080081ec <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv>:


/*
 * This function checks if a network is available
 */
boolean IridiumSBD::MRT_Iridium_NetworkAvailability(void){
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]

	// Check Network Available.
	this->print((char*) "\r\nIridium: Checking if Network is Available:\t");
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	480c      	ldr	r0, [pc, #48]	; (800822c <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x40>)
 80081fa:	4798      	blx	r3
	if (!this->checkNetworkAvailable()){
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f7fd fe77 	bl	8005ef0 <_ZN10IridiumSBD21checkNetworkAvailableEv>
 8008202:	4603      	mov	r3, r0
 8008204:	f083 0301 	eor.w	r3, r3, #1
 8008208:	b2db      	uxtb	r3, r3
 800820a:	2b00      	cmp	r3, #0
 800820c:	d005      	beq.n	800821a <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x2e>
		this->print((char*) "not available.\r\n");
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4807      	ldr	r0, [pc, #28]	; (8008230 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x44>)
 8008214:	4798      	blx	r3
		//diagprint(F("(This might be because the 9603N has not yet aquired the ring channel.)\r\n"));
		return false;
 8008216:	2300      	movs	r3, #0
 8008218:	e004      	b.n	8008224 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x38>
	}

	this->print((char*) "available.\r\n");
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4805      	ldr	r0, [pc, #20]	; (8008234 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x48>)
 8008220:	4798      	blx	r3
	return true;
 8008222:	2301      	movs	r3, #1
}
 8008224:	4618      	mov	r0, r3
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	080219b8 	.word	0x080219b8
 8008230:	080219e8 	.word	0x080219e8
 8008234:	080219fc 	.word	0x080219fc

08008238 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv>:


/*
 * This function requests the time
 */
boolean IridiumSBD::MRT_Iridium_getTime(void){
 8008238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800823a:	b0a1      	sub	sp, #132	; 0x84
 800823c:	af04      	add	r7, sp, #16
 800823e:	6078      	str	r0, [r7, #4]
	this->print((char*) "\r\nIridium: Retrieving time\r\n");
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4820      	ldr	r0, [pc, #128]	; (80082c8 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x90>)
 8008246:	4798      	blx	r3
	struct tm t; // struct tm is defined in time.h
	int err = this->getSystemTime(t); // Ask the 9603N for the system time
 8008248:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800824c:	4619      	mov	r1, r3
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f7fd fc70 	bl	8005b34 <_ZN10IridiumSBD13getSystemTimeER2tm>
 8008254:	66f8      	str	r0, [r7, #108]	; 0x6c
	if (err == ISBD_SUCCESS) // Was it successful?
 8008256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008258:	2b00      	cmp	r3, #0
 800825a:	d11c      	bne.n	8008296 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x5e>
	    {
		char buf[61];
		sprintf(buf, "\r\n\t<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
				t.tm_year + 1900, t.tm_mon + 1, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec);
 800825c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
		sprintf(buf, "\r\n\t<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
 800825e:	f203 756c 	addw	r5, r3, #1900	; 0x76c
				t.tm_year + 1900, t.tm_mon + 1, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec);
 8008262:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		sprintf(buf, "\r\n\t<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
 8008264:	1c5e      	adds	r6, r3, #1
 8008266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008268:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800826a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800826c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800826e:	f107 0408 	add.w	r4, r7, #8
 8008272:	9003      	str	r0, [sp, #12]
 8008274:	9102      	str	r1, [sp, #8]
 8008276:	9201      	str	r2, [sp, #4]
 8008278:	9300      	str	r3, [sp, #0]
 800827a:	4633      	mov	r3, r6
 800827c:	462a      	mov	r2, r5
 800827e:	4913      	ldr	r1, [pc, #76]	; (80082cc <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x94>)
 8008280:	4620      	mov	r0, r4
 8008282:	f013 fa6b 	bl	801b75c <siprintf>
		this->print((char*) buf);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f107 0208 	add.w	r2, r7, #8
 800828e:	4610      	mov	r0, r2
 8008290:	4798      	blx	r3
		return true;
 8008292:	2301      	movs	r3, #1
 8008294:	e013      	b.n	80082be <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x86>
	}

	else if (err == ISBD_NO_NETWORK) // Did it fail because the 9603N has not yet seen the network?
 8008296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008298:	2b0c      	cmp	r3, #12
 800829a:	d105      	bne.n	80082a8 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x70>
	     {
		 this->print((char*) "\tNo network detected.\r\n");
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	480b      	ldr	r0, [pc, #44]	; (80082d0 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x98>)
 80082a2:	4798      	blx	r3
	   	 return false;
 80082a4:	2300      	movs	r3, #0
 80082a6:	e00a      	b.n	80082be <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x86>
	}

	else
	    {
		this->print((char*) "\tUnexpected Error ");
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4809      	ldr	r0, [pc, #36]	; (80082d4 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x9c>)
 80082ae:	4798      	blx	r3
		this->MRT_Iridium_ErrorMessage(err);
 80082b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	4619      	mov	r1, r3
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f7ff fe76 	bl	8007fa8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
		return false;
 80082bc:	2300      	movs	r3, #0
	}
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3774      	adds	r7, #116	; 0x74
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082c6:	bf00      	nop
 80082c8:	08021a0c 	.word	0x08021a0c
 80082cc:	08021a2c 	.word	0x08021a2c
 80082d0:	08021a68 	.word	0x08021a68
 80082d4:	08021a80 	.word	0x08021a80

080082d8 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc>:
 * This sketch sends a "Hello, world!" message from the satellite modem.
 * If you have activated your account and have credits, this message
 * should arrive at the endpoints (delivery group) you have configured
 * (email address or HTTP POST).
 */
boolean IridiumSBD::MRT_Iridium_sendMessage(char* msg){
 80082d8:	b580      	push	{r7, lr}
 80082da:	b090      	sub	sp, #64	; 0x40
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
	int temp = this->atTimeout; //Save default atTimeout
	adjustATTimeout(timeout);
*/

	// Send the message
	this->print((char*) "\r\nIridium: Trying to send the message.  This might take several minutes.\r\n");
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4828      	ldr	r0, [pc, #160]	; (8008388 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xb0>)
 80082e8:	4798      	blx	r3
	int err = this->sendSBDText((const char*) msg);
 80082ea:	6839      	ldr	r1, [r7, #0]
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f7fd fbb1 	bl	8005a54 <_ZN10IridiumSBD11sendSBDTextEPKc>
 80082f2:	63f8      	str	r0, [r7, #60]	; 0x3c
	//int err = this->sendSBDText((const char*) "Hello, world!");
	//int err = ISBD_SENDRECEIVE_TIMEOUT;

	if (err != ISBD_SUCCESS){
 80082f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d01b      	beq.n	8008332 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0x5a>
		char str[50];
		sprintf(str, "\tsendSBDText failed: error -> %i\r\n", err);
 80082fa:	f107 0308 	add.w	r3, r7, #8
 80082fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008300:	4922      	ldr	r1, [pc, #136]	; (800838c <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xb4>)
 8008302:	4618      	mov	r0, r3
 8008304:	f013 fa2a 	bl	801b75c <siprintf>
		this->print((char*) str);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f107 0208 	add.w	r2, r7, #8
 8008310:	4610      	mov	r0, r2
 8008312:	4798      	blx	r3
	    if (err == ISBD_SENDRECEIVE_TIMEOUT){
 8008314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008316:	2b07      	cmp	r3, #7
 8008318:	d103      	bne.n	8008322 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0x4a>
	    	this->print((char*) "\tTry again with a better view of the sky.\r\n");
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	481c      	ldr	r0, [pc, #112]	; (8008390 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xb8>)
 8008320:	4798      	blx	r3
	    }
	    this->MRT_Iridium_ErrorMessage((uint8_t) err);
 8008322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008324:	b2db      	uxtb	r3, r3
 8008326:	4619      	mov	r1, r3
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f7ff fe3d 	bl	8007fa8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
	    return false;
 800832e:	2300      	movs	r3, #0
 8008330:	e025      	b.n	800837e <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xa6>
	}

	else{
		this->print((char*) "\tMessage sent\r\n");
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4817      	ldr	r0, [pc, #92]	; (8008394 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xbc>)
 8008338:	4798      	blx	r3
	}

	// Clear the Mobile Originated message buffer
	this->print((char*) "\tClearing the MO buffer.\r\n");
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4816      	ldr	r0, [pc, #88]	; (8008398 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xc0>)
 8008340:	4798      	blx	r3
	err = this->clearBuffers(ISBD_CLEAR_MO); // Clear MO buffer
 8008342:	2100      	movs	r1, #0
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f7fd fe03 	bl	8005f50 <_ZN10IridiumSBD12clearBuffersEi>
 800834a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (err != ISBD_SUCCESS){
 800834c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800834e:	2b00      	cmp	r3, #0
 8008350:	d014      	beq.n	800837c <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xa4>
		char str[50];
		sprintf(str, "clearBuffers failed: error -> %i\r\n", err);
 8008352:	f107 0308 	add.w	r3, r7, #8
 8008356:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008358:	4910      	ldr	r1, [pc, #64]	; (800839c <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xc4>)
 800835a:	4618      	mov	r0, r3
 800835c:	f013 f9fe 	bl	801b75c <siprintf>
		this->print((char*) str);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f107 0208 	add.w	r2, r7, #8
 8008368:	4610      	mov	r0, r2
 800836a:	4798      	blx	r3
		this->MRT_Iridium_ErrorMessage((uint8_t) err);
 800836c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800836e:	b2db      	uxtb	r3, r3
 8008370:	4619      	mov	r1, r3
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f7ff fe18 	bl	8007fa8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
		return false;
 8008378:	2300      	movs	r3, #0
 800837a:	e000      	b.n	800837e <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xa6>
	}
	return true;
 800837c:	2301      	movs	r3, #1
}
 800837e:	4618      	mov	r0, r3
 8008380:	3740      	adds	r7, #64	; 0x40
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	08021a94 	.word	0x08021a94
 800838c:	08021ae0 	.word	0x08021ae0
 8008390:	08021b04 	.word	0x08021b04
 8008394:	08021b30 	.word	0x08021b30
 8008398:	08021b40 	.word	0x08021b40
 800839c:	08021b5c 	.word	0x08021b5c

080083a0 <_ZN10IridiumSBDC1ER7TwoWireh>:
      if (ringPin != -1)
         pinMode(ringPin, INPUT);
   }
   */

IridiumSBD(TwoWire &wirePort = IRIDIUM_I2C, uint8_t deviceAddress = 0x63)
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	4613      	mov	r3, r2
 80083ac:	71fb      	strb	r3, [r7, #7]
   {
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2200      	movs	r2, #0
 80083b2:	66da      	str	r2, [r3, #108]	; 0x6c
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2205      	movs	r2, #5
 80083b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2202      	movs	r2, #2
 80083c8:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2204      	movs	r2, #4
 80083d0:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2208      	movs	r2, #8
 80083d8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2210      	movs	r2, #16
 80083e0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2220      	movs	r2, #32
 80083e8:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2240      	movs	r2, #64	; 0x40
 80083f0:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
      useSerial = false;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	745a      	strb	r2, [r3, #17]
      wireport = &wirePort;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	68ba      	ldr	r2, [r7, #8]
 80083fe:	60da      	str	r2, [r3, #12]
      deviceaddress = deviceAddress;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	79fa      	ldrb	r2, [r7, #7]
 8008404:	741a      	strb	r2, [r3, #16]
      sbdixInterval = ISBD_USB_SBDIX_INTERVAL;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	221e      	movs	r2, #30
 800840a:	65da      	str	r2, [r3, #92]	; 0x5c
      atTimeout = ISBD_DEFAULT_AT_TIMEOUT;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	221e      	movs	r2, #30
 8008410:	661a      	str	r2, [r3, #96]	; 0x60
      sendReceiveTimeout = ISBD_DEFAULT_SENDRECEIVE_TIME;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008418:	665a      	str	r2, [r3, #100]	; 0x64
      startupTimeout = ISBD_STARTUP_MAX_TIME;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	22f0      	movs	r2, #240	; 0xf0
 800841e:	669a      	str	r2, [r3, #104]	; 0x68
      remainingMessages = -1;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f04f 32ff 	mov.w	r2, #4294967295
 8008426:	675a      	str	r2, [r3, #116]	; 0x74
      asleep = true;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
      reentrant = false;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2200      	movs	r2, #0
 8008434:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
      sleepPin = -1;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f04f 32ff 	mov.w	r2, #4294967295
 800843e:	67da      	str	r2, [r3, #124]	; 0x7c
      sleepPinConfigured = false;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2200      	movs	r2, #0
 8008444:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      ringPin = -1;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f04f 32ff 	mov.w	r2, #4294967295
 800844e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      msstmWorkaroundRequested = false;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
      ringAlertsEnabled = true;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2201      	movs	r2, #1
 800845e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
      ringAsserted = false;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
      lastPowerOnTime = 0UL;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2200      	movs	r2, #0
 800846e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      head = SBDRING;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	4a0c      	ldr	r2, [pc, #48]	; (80084a8 <_ZN10IridiumSBDC1ER7TwoWireh+0x108>)
 8008476:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      tail = SBDRING;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	4a0a      	ldr	r2, [pc, #40]	; (80084a8 <_ZN10IridiumSBDC1ER7TwoWireh+0x108>)
 800847e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      nextChar = -1;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f04f 32ff 	mov.w	r2, #4294967295
 8008488:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      i2c_ser_buffer_tail = 0;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2200      	movs	r2, #0
 8008490:	655a      	str	r2, [r3, #84]	; 0x54
      i2c_ser_buffer_head = 0;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2200      	movs	r2, #0
 8008496:	659a      	str	r2, [r3, #88]	; 0x58
   }
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	4618      	mov	r0, r3
 800849c:	3714      	adds	r7, #20
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	08021f00 	.word	0x08021f00

080084ac <MRT_Iridium_Constructor>:

//C structs
struct HIRIDIUM hiridium;


void MRT_Iridium_Constructor(){
 80084ac:	b598      	push	{r3, r4, r7, lr}
 80084ae:	af00      	add	r7, sp, #0
	if (E_T==NULL){
 80084b0:	4b08      	ldr	r3, [pc, #32]	; (80084d4 <MRT_Iridium_Constructor+0x28>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d10b      	bne.n	80084d0 <MRT_Iridium_Constructor+0x24>
		E_T = new IridiumSBD();
 80084b8:	20a4      	movs	r0, #164	; 0xa4
 80084ba:	f011 fb91 	bl	8019be0 <_Znwj>
 80084be:	4603      	mov	r3, r0
 80084c0:	461c      	mov	r4, r3
 80084c2:	2263      	movs	r2, #99	; 0x63
 80084c4:	4904      	ldr	r1, [pc, #16]	; (80084d8 <MRT_Iridium_Constructor+0x2c>)
 80084c6:	4620      	mov	r0, r4
 80084c8:	f7ff ff6a 	bl	80083a0 <_ZN10IridiumSBDC1ER7TwoWireh>
 80084cc:	4b01      	ldr	r3, [pc, #4]	; (80084d4 <MRT_Iridium_Constructor+0x28>)
 80084ce:	601c      	str	r4, [r3, #0]
	}
}
 80084d0:	bf00      	nop
 80084d2:	bd98      	pop	{r3, r4, r7, pc}
 80084d4:	200005fc 	.word	0x200005fc
 80084d8:	20000614 	.word	0x20000614

080084dc <MRT_Iridium_Init>:
		E_T = NULL;
	}
}


struct HIRIDIUM MRT_Iridium_Init(uint8_t timeout, uint8_t i2c_bus, void (*iridium_print)(char*)){
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	607b      	str	r3, [r7, #4]
 80084e6:	460b      	mov	r3, r1
 80084e8:	72fb      	strb	r3, [r7, #11]
 80084ea:	4613      	mov	r3, r2
 80084ec:	72bb      	strb	r3, [r7, #10]
	MRT_Iridium_Constructor();
 80084ee:	f7ff ffdd 	bl	80084ac <MRT_Iridium_Constructor>
	E_T->MRT_Iridium_setup(timeout, i2c_bus, iridium_print);
 80084f2:	4b0d      	ldr	r3, [pc, #52]	; (8008528 <MRT_Iridium_Init+0x4c>)
 80084f4:	6818      	ldr	r0, [r3, #0]
 80084f6:	7aba      	ldrb	r2, [r7, #10]
 80084f8:	7af9      	ldrb	r1, [r7, #11]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f7ff fc6a 	bl	8007dd4 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE>
	HIRIDIUM iridium_handler;
	iridium_handler.CSQ = &MRT_Iridium_CSQ;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	4a0a      	ldr	r2, [pc, #40]	; (800852c <MRT_Iridium_Init+0x50>)
 8008504:	60da      	str	r2, [r3, #12]
	iridium_handler.getIMEI = &MRT_Iridium_getIMEI;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	4a09      	ldr	r2, [pc, #36]	; (8008530 <MRT_Iridium_Init+0x54>)
 800850a:	601a      	str	r2, [r3, #0]
	iridium_handler.getNetworkAvailability = &MRT_Iridium_NetworkAvailability;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	4a09      	ldr	r2, [pc, #36]	; (8008534 <MRT_Iridium_Init+0x58>)
 8008510:	609a      	str	r2, [r3, #8]
	iridium_handler.getTime = &MRT_Iridium_getTime;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	4a08      	ldr	r2, [pc, #32]	; (8008538 <MRT_Iridium_Init+0x5c>)
 8008516:	605a      	str	r2, [r3, #4]
	iridium_handler.sendMessage = &MRT_Iridium_sendMessage;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	4a08      	ldr	r2, [pc, #32]	; (800853c <MRT_Iridium_Init+0x60>)
 800851c:	611a      	str	r2, [r3, #16]
	return iridium_handler;
 800851e:	bf00      	nop
}
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	3710      	adds	r7, #16
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	200005fc 	.word	0x200005fc
 800852c:	08008565 	.word	0x08008565
 8008530:	08008541 	.word	0x08008541
 8008534:	0800857d 	.word	0x0800857d
 8008538:	080085a1 	.word	0x080085a1
 800853c:	080085c5 	.word	0x080085c5

08008540 <MRT_Iridium_getIMEI>:

void MRT_Iridium_ErrorMessage(uint8_t error){
	return E_T->MRT_Iridium_ErrorMessage(error);
}

bool MRT_Iridium_getIMEI(void){
 8008540:	b580      	push	{r7, lr}
 8008542:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_getIMEI();
 8008544:	4b06      	ldr	r3, [pc, #24]	; (8008560 <MRT_Iridium_getIMEI+0x20>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4618      	mov	r0, r3
 800854a:	f7ff fdbb 	bl	80080c4 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	bf14      	ite	ne
 8008554:	2301      	movne	r3, #1
 8008556:	2300      	moveq	r3, #0
 8008558:	b2db      	uxtb	r3, r3
}
 800855a:	4618      	mov	r0, r3
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	200005fc 	.word	0x200005fc

08008564 <MRT_Iridium_CSQ>:


int MRT_Iridium_CSQ(){
 8008564:	b580      	push	{r7, lr}
 8008566:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_CSQ();
 8008568:	4b03      	ldr	r3, [pc, #12]	; (8008578 <MRT_Iridium_CSQ+0x14>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4618      	mov	r0, r3
 800856e:	f7ff fdf7 	bl	8008160 <_ZN10IridiumSBD15MRT_Iridium_CSQEv>
 8008572:	4603      	mov	r3, r0
}
 8008574:	4618      	mov	r0, r3
 8008576:	bd80      	pop	{r7, pc}
 8008578:	200005fc 	.word	0x200005fc

0800857c <MRT_Iridium_NetworkAvailability>:

bool MRT_Iridium_NetworkAvailability(){
 800857c:	b580      	push	{r7, lr}
 800857e:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_NetworkAvailability();
 8008580:	4b06      	ldr	r3, [pc, #24]	; (800859c <MRT_Iridium_NetworkAvailability+0x20>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4618      	mov	r0, r3
 8008586:	f7ff fe31 	bl	80081ec <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	bf14      	ite	ne
 8008590:	2301      	movne	r3, #1
 8008592:	2300      	moveq	r3, #0
 8008594:	b2db      	uxtb	r3, r3
}
 8008596:	4618      	mov	r0, r3
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	200005fc 	.word	0x200005fc

080085a0 <MRT_Iridium_getTime>:


bool MRT_Iridium_getTime(void){
 80085a0:	b580      	push	{r7, lr}
 80085a2:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_getTime();
 80085a4:	4b06      	ldr	r3, [pc, #24]	; (80085c0 <MRT_Iridium_getTime+0x20>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7ff fe45 	bl	8008238 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	bf14      	ite	ne
 80085b4:	2301      	movne	r3, #1
 80085b6:	2300      	moveq	r3, #0
 80085b8:	b2db      	uxtb	r3, r3
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	200005fc 	.word	0x200005fc

080085c4 <MRT_Iridium_sendMessage>:

bool MRT_Iridium_sendMessage(char* msg){
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
	return E_T->MRT_Iridium_sendMessage(msg);
 80085cc:	4b07      	ldr	r3, [pc, #28]	; (80085ec <MRT_Iridium_sendMessage+0x28>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	6879      	ldr	r1, [r7, #4]
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7ff fe80 	bl	80082d8 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	bf14      	ite	ne
 80085de:	2301      	movne	r3, #1
 80085e0:	2300      	moveq	r3, #0
 80085e2:	b2db      	uxtb	r3, r3
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3708      	adds	r7, #8
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	200005fc 	.word	0x200005fc

080085f0 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80085f0:	b590      	push	{r4, r7, lr}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d101      	bne.n	8008604 <_ZN5Print5writeEPKc+0x14>
 8008600:	2300      	movs	r3, #0
 8008602:	e00d      	b.n	8008620 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	3304      	adds	r3, #4
 800860a:	681c      	ldr	r4, [r3, #0]
 800860c:	6838      	ldr	r0, [r7, #0]
 800860e:	f7f7 fdf9 	bl	8000204 <strlen>
 8008612:	4603      	mov	r3, r0
 8008614:	461a      	mov	r2, r3
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	47a0      	blx	r4
 800861c:	4603      	mov	r3, r0
 800861e:	bf00      	nop
    }
 8008620:	4618      	mov	r0, r3
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	bd90      	pop	{r4, r7, pc}

08008628 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b086      	sub	sp, #24
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8008634:	2300      	movs	r3, #0
 8008636:	617b      	str	r3, [r7, #20]
  while (size--) {
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	1e5a      	subs	r2, r3, #1
 800863c:	607a      	str	r2, [r7, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	bf14      	ite	ne
 8008642:	2301      	movne	r3, #1
 8008644:	2300      	moveq	r3, #0
 8008646:	b2db      	uxtb	r3, r3
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00e      	beq.n	800866a <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	1c59      	adds	r1, r3, #1
 8008656:	60b9      	str	r1, [r7, #8]
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	4619      	mov	r1, r3
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	4790      	blx	r2
 8008660:	4602      	mov	r2, r0
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	4413      	add	r3, r2
 8008666:	617b      	str	r3, [r7, #20]
  while (size--) {
 8008668:	e7e6      	b.n	8008638 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 800866a:	697b      	ldr	r3, [r7, #20]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3718      	adds	r7, #24
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 800867e:	6839      	ldr	r1, [r7, #0]
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f805 	bl	8008690 <_ZN5Print5printEPKc>
 8008686:	4603      	mov	r3, r0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3708      	adds	r7, #8
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
  return write(str);
 800869a:	6839      	ldr	r1, [r7, #0]
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f7ff ffa7 	bl	80085f0 <_ZN5Print5writeEPKc>
 80086a2:	4603      	mov	r3, r0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3708      	adds	r7, #8
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	460b      	mov	r3, r1
 80086b6:	70fb      	strb	r3, [r7, #3]
  return write(c);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	78fa      	ldrb	r2, [r7, #3]
 80086c0:	4611      	mov	r1, r2
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	4798      	blx	r3
 80086c6:	4603      	mov	r3, r0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3708      	adds	r7, #8
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	68b9      	ldr	r1, [r7, #8]
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f000 f805 	bl	80086f0 <_ZN5Print5printEli>
 80086e6:	4603      	mov	r3, r0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3710      	adds	r7, #16
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b086      	sub	sp, #24
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d109      	bne.n	8008716 <_ZN5Print5printEli+0x26>
    return write(n);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	68ba      	ldr	r2, [r7, #8]
 800870a:	b2d2      	uxtb	r2, r2
 800870c:	4611      	mov	r1, r2
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	4798      	blx	r3
 8008712:	4603      	mov	r3, r0
 8008714:	e029      	b.n	800876a <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2b0a      	cmp	r3, #10
 800871a:	d11d      	bne.n	8008758 <_ZN5Print5printEli+0x68>
    if (n < 0) {
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	2b00      	cmp	r3, #0
 8008720:	da12      	bge.n	8008748 <_ZN5Print5printEli+0x58>
      int t = print('-');
 8008722:	212d      	movs	r1, #45	; 0x2d
 8008724:	68f8      	ldr	r0, [r7, #12]
 8008726:	f7ff ffc1 	bl	80086ac <_ZN5Print5printEc>
 800872a:	4603      	mov	r3, r0
 800872c:	617b      	str	r3, [r7, #20]
      n = -n;
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	425b      	negs	r3, r3
 8008732:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	220a      	movs	r2, #10
 8008738:	4619      	mov	r1, r3
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	f000 f819 	bl	8008772 <_ZN5Print11printNumberEmh>
 8008740:	4602      	mov	r2, r0
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	4413      	add	r3, r2
 8008746:	e010      	b.n	800876a <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	220a      	movs	r2, #10
 800874c:	4619      	mov	r1, r3
 800874e:	68f8      	ldr	r0, [r7, #12]
 8008750:	f000 f80f 	bl	8008772 <_ZN5Print11printNumberEmh>
 8008754:	4603      	mov	r3, r0
 8008756:	e008      	b.n	800876a <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	b2d2      	uxtb	r2, r2
 800875e:	4619      	mov	r1, r3
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f000 f806 	bl	8008772 <_ZN5Print11printNumberEmh>
 8008766:	4603      	mov	r3, r0
 8008768:	bf00      	nop
  }
}
 800876a:	4618      	mov	r0, r3
 800876c:	3718      	adds	r7, #24
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}

08008772 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8008772:	b580      	push	{r7, lr}
 8008774:	b090      	sub	sp, #64	; 0x40
 8008776:	af00      	add	r7, sp, #0
 8008778:	60f8      	str	r0, [r7, #12]
 800877a:	60b9      	str	r1, [r7, #8]
 800877c:	4613      	mov	r3, r2
 800877e:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 8008780:	f107 0314 	add.w	r3, r7, #20
 8008784:	3320      	adds	r3, #32
 8008786:	63fb      	str	r3, [r7, #60]	; 0x3c

  *str = '\0';
 8008788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800878a:	2200      	movs	r2, #0
 800878c:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 800878e:	79fb      	ldrb	r3, [r7, #7]
 8008790:	2b01      	cmp	r3, #1
 8008792:	d801      	bhi.n	8008798 <_ZN5Print11printNumberEmh+0x26>
 8008794:	230a      	movs	r3, #10
 8008796:	71fb      	strb	r3, [r7, #7]

  do {
    unsigned long m = n;
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	63bb      	str	r3, [r7, #56]	; 0x38
    n /= base;
 800879c:	79fb      	ldrb	r3, [r7, #7]
 800879e:	68ba      	ldr	r2, [r7, #8]
 80087a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087a4:	60bb      	str	r3, [r7, #8]
    char c = m - base * n;
 80087a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a8:	b2da      	uxtb	r2, r3
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	79f9      	ldrb	r1, [r7, #7]
 80087b0:	fb11 f303 	smulbb	r3, r1, r3
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	1ad3      	subs	r3, r2, r3
 80087b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80087bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087c0:	2b09      	cmp	r3, #9
 80087c2:	d804      	bhi.n	80087ce <_ZN5Print11printNumberEmh+0x5c>
 80087c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087c8:	3330      	adds	r3, #48	; 0x30
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	e003      	b.n	80087d6 <_ZN5Print11printNumberEmh+0x64>
 80087ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087d2:	3337      	adds	r3, #55	; 0x37
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80087d8:	3a01      	subs	r2, #1
 80087da:	63fa      	str	r2, [r7, #60]	; 0x3c
 80087dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80087de:	7013      	strb	r3, [r2, #0]
  } while(n);
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d000      	beq.n	80087e8 <_ZN5Print11printNumberEmh+0x76>
  do {
 80087e6:	e7d7      	b.n	8008798 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
 80087e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f7ff ff00 	bl	80085f0 <_ZN5Print5writeEPKc>
 80087f0:	4603      	mov	r3, r0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3740      	adds	r7, #64	; 0x40
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
	...

080087fc <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	4a06      	ldr	r2, [pc, #24]	; (8008820 <_ZN5PrintC1Ev+0x24>)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	601a      	str	r2, [r3, #0]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	605a      	str	r2, [r3, #4]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4618      	mov	r0, r3
 8008814:	370c      	adds	r7, #12
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	08021f14 	.word	0x08021f14

08008824 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4618      	mov	r0, r3
 8008830:	f7ff ffe4 	bl	80087fc <_ZN5PrintC1Ev>
 8008834:	4a05      	ldr	r2, [pc, #20]	; (800884c <_ZN6StreamC1Ev+0x28>)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	601a      	str	r2, [r3, #0]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008840:	609a      	str	r2, [r3, #8]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4618      	mov	r0, r3
 8008846:	3708      	adds	r7, #8
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	08021f44 	.word	0x08021f44

08008850 <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4618      	mov	r0, r3
 800885e:	f7ff ffe1 	bl	8008824 <_ZN6StreamC1Ev>
 8008862:	4a16      	ldr	r2, [pc, #88]	; (80088bc <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	683a      	ldr	r2, [r7, #0]
 800886c:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	3390      	adds	r3, #144	; 0x90
 8008872:	2220      	movs	r2, #32
 8008874:	2100      	movs	r1, #0
 8008876:	4618      	mov	r0, r3
 8008878:	f011 fc74 	bl	801a164 <memset>
  rxBufferIndex = 0;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2200      	movs	r2, #0
 8008896:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2200      	movs	r2, #0
 800889e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	4618      	mov	r0, r3
 80088b6:	3708      	adds	r7, #8
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	08021f24 	.word	0x08021f24

080088c0 <_ZN7TwoWire11requestFromEhhh>:
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  HAL_I2C_Init(&I2cHandle);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b086      	sub	sp, #24
 80088c4:	af02      	add	r7, sp, #8
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	4608      	mov	r0, r1
 80088ca:	4611      	mov	r1, r2
 80088cc:	461a      	mov	r2, r3
 80088ce:	4603      	mov	r3, r0
 80088d0:	70fb      	strb	r3, [r7, #3]
 80088d2:	460b      	mov	r3, r1
 80088d4:	70bb      	strb	r3, [r7, #2]
 80088d6:	4613      	mov	r3, r2
 80088d8:	707b      	strb	r3, [r7, #1]
  uint8_t ret_val;

  disableInterrupt();
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 fc24 	bl	8009128 <_ZN7TwoWire16disableInterruptEv>

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
 80088e0:	78bb      	ldrb	r3, [r7, #2]
 80088e2:	2b20      	cmp	r3, #32
 80088e4:	d901      	bls.n	80088ea <_ZN7TwoWire11requestFromEhhh+0x2a>
    quantity = BUFFER_LENGTH;
 80088e6:	2320      	movs	r3, #32
 80088e8:	70bb      	strb	r3, [r7, #2]
  }
  // perform blocking read into buffer
  int read = i2c_master_read((address << 1), (char *)rxBuffer, quantity, sendStop);
 80088ea:	78fb      	ldrb	r3, [r7, #3]
 80088ec:	005b      	lsls	r3, r3, #1
 80088ee:	b2d9      	uxtb	r1, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f103 0290 	add.w	r2, r3, #144	; 0x90
 80088f6:	78b8      	ldrb	r0, [r7, #2]
 80088f8:	787b      	ldrb	r3, [r7, #1]
 80088fa:	9300      	str	r3, [sp, #0]
 80088fc:	4603      	mov	r3, r0
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 f9cf 	bl	8008ca2 <_ZN7TwoWire15i2c_master_readEhPchh>
 8008904:	60b8      	str	r0, [r7, #8]

  if(read < 0)
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	2b00      	cmp	r3, #0
 800890a:	da02      	bge.n	8008912 <_ZN7TwoWire11requestFromEhhh+0x52>
  {
    ret_val = 0;
 800890c:	2300      	movs	r3, #0
 800890e:	73fb      	strb	r3, [r7, #15]
 8008910:	e001      	b.n	8008916 <_ZN7TwoWire11requestFromEhhh+0x56>
  }else
  {
    ret_val = read;
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	73fb      	strb	r3, [r7, #15]
  }

  // set rx buffer iterator vars
  rxBufferIndex = 0;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = ret_val;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	7bfa      	ldrb	r2, [r7, #15]
 8008922:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

  enableInterrupt();
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 fbcc 	bl	80090c4 <_ZN7TwoWire15enableInterruptEv>

  return ret_val;
 800892c:	7bfb      	ldrb	r3, [r7, #15]
}
 800892e:	4618      	mov	r0, r3
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b082      	sub	sp, #8
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
 800893e:	460b      	mov	r3, r1
 8008940:	70fb      	strb	r3, [r7, #3]
 8008942:	4613      	mov	r3, r2
 8008944:	70bb      	strb	r3, [r7, #2]
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 8008946:	78ba      	ldrb	r2, [r7, #2]
 8008948:	78f9      	ldrb	r1, [r7, #3]
 800894a:	2301      	movs	r3, #1
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f7ff ffb7 	bl	80088c0 <_ZN7TwoWire11requestFromEhhh>
 8008952:	4603      	mov	r3, r0
}
 8008954:	4618      	mov	r0, r3
 8008956:	3708      	adds	r7, #8
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <_ZN7TwoWire17beginTransmissionEh>:
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	460b      	mov	r3, r1
 8008966:	70fb      	strb	r3, [r7, #3]
  // indicate that we are transmitting
  transmitting = 1;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  // set address of targeted slave
  txAddress = address;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	78fa      	ldrb	r2, [r7, #3]
 8008974:	741a      	strb	r2, [r3, #16]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8008986:	bf00      	nop
 8008988:	370c      	adds	r7, #12
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr

08008992 <_ZN7TwoWire15endTransmissionEh>:
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
 8008992:	b580      	push	{r7, lr}
 8008994:	b086      	sub	sp, #24
 8008996:	af02      	add	r7, sp, #8
 8008998:	6078      	str	r0, [r7, #4]
 800899a:	460b      	mov	r3, r1
 800899c:	70fb      	strb	r3, [r7, #3]
  // transmit buffer (blocking)
  disableInterrupt();
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 fbc2 	bl	8009128 <_ZN7TwoWire16disableInterruptEv>

  int8_t ret = i2c_master_write((txAddress << 1), (const char *)txBuffer, txBufferLength, sendStop);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	7c1b      	ldrb	r3, [r3, #16]
 80089a8:	0059      	lsls	r1, r3, #1
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f103 0211 	add.w	r2, r3, #17
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80089b6:	4618      	mov	r0, r3
 80089b8:	78fb      	ldrb	r3, [r7, #3]
 80089ba:	9300      	str	r3, [sp, #0]
 80089bc:	4603      	mov	r3, r0
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fa00 	bl	8008dc4 <_ZN7TwoWire16i2c_master_writeEiPKcii>
 80089c4:	4603      	mov	r3, r0
 80089c6:	73fb      	strb	r3, [r7, #15]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  // indicate that we are done transmitting
  transmitting = 0;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  enableInterrupt();
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 fb6f 	bl	80090c4 <_ZN7TwoWire15enableInterruptEv>

  return ret;
 80089e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3710      	adds	r7, #16
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <_ZN7TwoWire15endTransmissionEv>:

//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  return endTransmission(true);
 80089f8:	2101      	movs	r1, #1
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7ff ffc9 	bl	8008992 <_ZN7TwoWire15endTransmissionEh>
 8008a00:	4603      	mov	r3, r0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3708      	adds	r7, #8
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b082      	sub	sp, #8
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
 8008a12:	460b      	mov	r3, r1
 8008a14:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d01d      	beq.n	8008a5c <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008a26:	2b1f      	cmp	r3, #31
 8008a28:	d901      	bls.n	8008a2e <_ZN7TwoWire5writeEh+0x24>
      return 0;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	e028      	b.n	8008a80 <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008a34:	4619      	mov	r1, r3
 8008a36:	78fa      	ldrb	r2, [r7, #3]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	440b      	add	r3, r1
 8008a3c:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008a44:	3301      	adds	r3, #1
 8008a46:	b2da      	uxtb	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8008a5a:	e010      	b.n	8008a7e <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 fb63 	bl	8009128 <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 8008a62:	1cfb      	adds	r3, r7, #3
 8008a64:	2201      	movs	r2, #1
 8008a66:	4619      	mov	r1, r3
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 fa95 	bl	8008f98 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 fb28 	bl	80090c4 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	333c      	adds	r3, #60	; 0x3c
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f001 fe4b 	bl	800a714 <HAL_I2C_EnableListen_IT>
  }
  return 1;
 8008a7e:	2301      	movs	r3, #1
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3708      	adds	r7, #8
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	607a      	str	r2, [r7, #4]
  if(transmitting){
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d013      	beq.n	8008ac6 <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	617b      	str	r3, [r7, #20]
 8008aa2:	697a      	ldr	r2, [r7, #20]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d21e      	bcs.n	8008ae8 <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68b9      	ldr	r1, [r7, #8]
 8008ab2:	697a      	ldr	r2, [r7, #20]
 8008ab4:	440a      	add	r2, r1
 8008ab6:	7812      	ldrb	r2, [r2, #0]
 8008ab8:	4611      	mov	r1, r2
 8008aba:	68f8      	ldr	r0, [r7, #12]
 8008abc:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	617b      	str	r3, [r7, #20]
 8008ac4:	e7ed      	b.n	8008aa2 <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 8008ac6:	68f8      	ldr	r0, [r7, #12]
 8008ac8:	f000 fb2e 	bl	8009128 <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	461a      	mov	r2, r3
 8008ad0:	68b9      	ldr	r1, [r7, #8]
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	f000 fa60 	bl	8008f98 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8008ad8:	68f8      	ldr	r0, [r7, #12]
 8008ada:	f000 faf3 	bl	80090c4 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	333c      	adds	r3, #60	; 0x3c
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f001 fe16 	bl	800a714 <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 8008ae8:	687b      	ldr	r3, [r7, #4]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3718      	adds	r7, #24
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 8008af2:	b480      	push	{r7}
 8008af4:	b083      	sub	sp, #12
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	461a      	mov	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	1ad3      	subs	r3, r2, r3
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	370c      	adds	r7, #12
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr

08008b1a <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	b085      	sub	sp, #20
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
  int value = -1;
 8008b22:	f04f 33ff 	mov.w	r3, #4294967295
 8008b26:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8008b2e:	b2da      	uxtb	r2, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	bf34      	ite	cc
 8008b3c:	2301      	movcc	r3, #1
 8008b3e:	2300      	movcs	r3, #0
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d012      	beq.n	8008b6c <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	461a      	mov	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4413      	add	r3, r2
 8008b54:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8008b58:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	3301      	adds	r3, #1
 8008b64:	b2da      	uxtb	r2, r3
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3714      	adds	r7, #20
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr

08008b7a <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 8008b7a:	b480      	push	{r7}
 8008b7c:	b085      	sub	sp, #20
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
  int value = -1;
 8008b82:	f04f 33ff 	mov.w	r3, #4294967295
 8008b86:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8008b8e:	b2da      	uxtb	r2, r3
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	bf34      	ite	cc
 8008b9c:	2301      	movcc	r3, #1
 8008b9e:	2300      	movcs	r3, #0
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d009      	beq.n	8008bba <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	461a      	mov	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8008bb8:	60fb      	str	r3, [r7, #12]
  }

  return value;
 8008bba:	68fb      	ldr	r3, [r7, #12]
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3714      	adds	r7, #20
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 8008bd0:	bf00      	nop
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <_ZN7TwoWire16i2c_master_startEv>:
{
  user_onRequest = function;
}

int TwoWire::i2c_master_start()
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008be8:	60bb      	str	r3, [r7, #8]

    int timeout;

    // Clear Acknowledge failure flag
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008bf2:	615a      	str	r2, [r3, #20]

    // Wait the STOP condition has been previously correctly sent
  // This timeout can be avoid in some specific cases by simply clearing the STOP bit
    timeout = FLAG_TIMEOUT;
 8008bf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bf8:	60fb      	str	r3, [r7, #12]
    while ((i2c->CR1 & I2C_CR1_STOP) == I2C_CR1_STOP) {
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c06:	bf0c      	ite	eq
 8008c08:	2301      	moveq	r3, #1
 8008c0a:	2300      	movne	r3, #0
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d00b      	beq.n	8008c2a <_ZN7TwoWire16i2c_master_startEv+0x4e>
        if ((timeout--) == 0) {
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	1e5a      	subs	r2, r3, #1
 8008c16:	60fa      	str	r2, [r7, #12]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	bf0c      	ite	eq
 8008c1c:	2301      	moveq	r3, #1
 8008c1e:	2300      	movne	r3, #0
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d0e9      	beq.n	8008bfa <_ZN7TwoWire16i2c_master_startEv+0x1e>
            return 1;
 8008c26:	2301      	movs	r3, #1
 8008c28:	e021      	b.n	8008c6e <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    // Generate the START condition
    i2c->CR1 |= I2C_CR1_START;
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	601a      	str	r2, [r3, #0]

    // Wait the START condition has been correctly sent
    timeout = FLAG_TIMEOUT;
 8008c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c3a:	60fb      	str	r3, [r7, #12]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c40:	695b      	ldr	r3, [r3, #20]
 8008c42:	f003 0301 	and.w	r3, r3, #1
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	bf14      	ite	ne
 8008c4a:	2301      	movne	r3, #1
 8008c4c:	2300      	moveq	r3, #0
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00b      	beq.n	8008c6c <_ZN7TwoWire16i2c_master_startEv+0x90>
        if ((timeout--) == 0) {
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	1e5a      	subs	r2, r3, #1
 8008c58:	60fa      	str	r2, [r7, #12]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	bf0c      	ite	eq
 8008c5e:	2301      	moveq	r3, #1
 8008c60:	2300      	movne	r3, #0
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d0e9      	beq.n	8008c3c <_ZN7TwoWire16i2c_master_startEv+0x60>
            return 1;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e000      	b.n	8008c6e <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    return 0;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3714      	adds	r7, #20
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr

08008c7a <_ZN7TwoWire15i2c_master_stopEv>:

int TwoWire::i2c_master_stop()
{
 8008c7a:	b480      	push	{r7}
 8008c7c:	b085      	sub	sp, #20
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c86:	60fb      	str	r3, [r7, #12]

    // Generate the STOP condition
    i2c->CR1 |= I2C_CR1_STOP;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	601a      	str	r2, [r3, #0]

    return 0;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3714      	adds	r7, #20
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr

08008ca2 <_ZN7TwoWire15i2c_master_readEhPchh>:

int TwoWire::i2c_master_read(uint8_t address, char *data, uint8_t length, uint8_t stop)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b08a      	sub	sp, #40	; 0x28
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	60f8      	str	r0, [r7, #12]
 8008caa:	607a      	str	r2, [r7, #4]
 8008cac:	461a      	mov	r2, r3
 8008cae:	460b      	mov	r3, r1
 8008cb0:	72fb      	strb	r3, [r7, #11]
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	72bb      	strb	r3, [r7, #10]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cba:	61fb      	str	r3, [r7, #28]
    int timeout;
    int count;
    int value;
    int ret;

    i2c_master_start();
 8008cbc:	68f8      	ldr	r0, [r7, #12]
 8008cbe:	f7ff ff8d 	bl	8008bdc <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 8008cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cc6:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ccc:	695b      	ldr	r3, [r3, #20]
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	bf14      	ite	ne
 8008cd6:	2301      	movne	r3, #1
 8008cd8:	2300      	moveq	r3, #0
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d008      	beq.n	8008cf2 <_ZN7TwoWire15i2c_master_readEhPchh+0x50>
        timeout--;
 8008ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 8008ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1ed      	bne.n	8008cc8 <_ZN7TwoWire15i2c_master_readEhPchh+0x26>
            return -1;
 8008cec:	f04f 33ff 	mov.w	r3, #4294967295
 8008cf0:	e064      	b.n	8008dbc <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_READ(address);
 8008cf2:	7afb      	ldrb	r3, [r7, #11]
 8008cf4:	f043 0301 	orr.w	r3, r3, #1
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 8008d00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d04:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d0a:	695b      	ldr	r3, [r3, #20]
 8008d0c:	f003 0302 	and.w	r3, r3, #2
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	bf14      	ite	ne
 8008d14:	2301      	movne	r3, #1
 8008d16:	2300      	moveq	r3, #0
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d008      	beq.n	8008d30 <_ZN7TwoWire15i2c_master_readEhPchh+0x8e>
        timeout--;
 8008d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d20:	3b01      	subs	r3, #1
 8008d22:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 8008d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d1ed      	bne.n	8008d06 <_ZN7TwoWire15i2c_master_readEhPchh+0x64>
            return -1;
 8008d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d2e:	e045      	b.n	8008dbc <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 8008d30:	2300      	movs	r3, #0
 8008d32:	613b      	str	r3, [r7, #16]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d38:	695b      	ldr	r3, [r3, #20]
 8008d3a:	613b      	str	r3, [r7, #16]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d40:	699b      	ldr	r3, [r3, #24]
 8008d42:	613b      	str	r3, [r7, #16]
 8008d44:	693b      	ldr	r3, [r7, #16]

    // Read all bytes except last one
    for (count = 0; count < (length - 1); count++) {
 8008d46:	2300      	movs	r3, #0
 8008d48:	623b      	str	r3, [r7, #32]
 8008d4a:	7abb      	ldrb	r3, [r7, #10]
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	6a3a      	ldr	r2, [r7, #32]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	da17      	bge.n	8008d84 <_ZN7TwoWire15i2c_master_readEhPchh+0xe2>
        ret = i2c_master_byte_read(&value, 0);
 8008d54:	f107 0314 	add.w	r3, r7, #20
 8008d58:	2200      	movs	r2, #0
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	f000 f8a4 	bl	8008eaa <_ZN7TwoWire20i2c_master_byte_readEPii>
 8008d62:	61b8      	str	r0, [r7, #24]
        if(ret)
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d002      	beq.n	8008d70 <_ZN7TwoWire15i2c_master_readEhPchh+0xce>
        {
          return -1;
 8008d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d6e:	e025      	b.n	8008dbc <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
        data[count] = (char)value;
 8008d70:	6979      	ldr	r1, [r7, #20]
 8008d72:	6a3b      	ldr	r3, [r7, #32]
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	4413      	add	r3, r2
 8008d78:	b2ca      	uxtb	r2, r1
 8008d7a:	701a      	strb	r2, [r3, #0]
    for (count = 0; count < (length - 1); count++) {
 8008d7c:	6a3b      	ldr	r3, [r7, #32]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	623b      	str	r3, [r7, #32]
 8008d82:	e7e2      	b.n	8008d4a <_ZN7TwoWire15i2c_master_readEhPchh+0xa8>
    }

    // If not repeated start, send stop.
    // Warning: must be done BEFORE the data is read.
    if (stop) {
 8008d84:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d002      	beq.n	8008d92 <_ZN7TwoWire15i2c_master_readEhPchh+0xf0>
        i2c_master_stop();
 8008d8c:	68f8      	ldr	r0, [r7, #12]
 8008d8e:	f7ff ff74 	bl	8008c7a <_ZN7TwoWire15i2c_master_stopEv>
    }

    // Read the last byte
    ret = i2c_master_byte_read(&value, 1);
 8008d92:	f107 0314 	add.w	r3, r7, #20
 8008d96:	2201      	movs	r2, #1
 8008d98:	4619      	mov	r1, r3
 8008d9a:	68f8      	ldr	r0, [r7, #12]
 8008d9c:	f000 f885 	bl	8008eaa <_ZN7TwoWire20i2c_master_byte_readEPii>
 8008da0:	61b8      	str	r0, [r7, #24]
    if(ret)
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d002      	beq.n	8008dae <_ZN7TwoWire15i2c_master_readEhPchh+0x10c>
    {
      return -1;
 8008da8:	f04f 33ff 	mov.w	r3, #4294967295
 8008dac:	e006      	b.n	8008dbc <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
    }
    data[count] = (char)value;
 8008dae:	6979      	ldr	r1, [r7, #20]
 8008db0:	6a3b      	ldr	r3, [r7, #32]
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	4413      	add	r3, r2
 8008db6:	b2ca      	uxtb	r2, r1
 8008db8:	701a      	strb	r2, [r3, #0]

    return length;
 8008dba:	7abb      	ldrb	r3, [r7, #10]
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3728      	adds	r7, #40	; 0x28
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <_ZN7TwoWire16i2c_master_writeEiPKcii>:

int TwoWire::i2c_master_write(int address, const char *data, int length, int stop)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b088      	sub	sp, #32
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	607a      	str	r2, [r7, #4]
 8008dd0:	603b      	str	r3, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dd6:	617b      	str	r3, [r7, #20]
    int timeout;
    int count;

    i2c_master_start();
 8008dd8:	68f8      	ldr	r0, [r7, #12]
 8008dda:	f7ff feff 	bl	8008bdc <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 8008dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008de2:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008de8:	695b      	ldr	r3, [r3, #20]
 8008dea:	f003 0301 	and.w	r3, r3, #1
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	bf14      	ite	ne
 8008df2:	2301      	movne	r3, #1
 8008df4:	2300      	moveq	r3, #0
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d007      	beq.n	8008e0c <_ZN7TwoWire16i2c_master_writeEiPKcii+0x48>
        timeout--;
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	3b01      	subs	r3, #1
 8008e00:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 8008e02:	69fb      	ldr	r3, [r7, #28]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d1ed      	bne.n	8008de4 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x20>
            return 4;
 8008e08:	2304      	movs	r3, #4
 8008e0a:	e04a      	b.n	8008ea2 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_WRITE(address);
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 8008e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e1c:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e22:	695b      	ldr	r3, [r3, #20]
 8008e24:	f003 0302 	and.w	r3, r3, #2
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	bf14      	ite	ne
 8008e2c:	2301      	movne	r3, #1
 8008e2e:	2300      	moveq	r3, #0
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d007      	beq.n	8008e46 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x82>
        timeout--;
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 8008e3c:	69fb      	ldr	r3, [r7, #28]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d1ed      	bne.n	8008e1e <_ZN7TwoWire16i2c_master_writeEiPKcii+0x5a>
            return 2;
 8008e42:	2302      	movs	r3, #2
 8008e44:	e02d      	b.n	8008ea2 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 8008e46:	2300      	movs	r3, #0
 8008e48:	613b      	str	r3, [r7, #16]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e4e:	695b      	ldr	r3, [r3, #20]
 8008e50:	613b      	str	r3, [r7, #16]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	613b      	str	r3, [r7, #16]
 8008e5a:	693b      	ldr	r3, [r7, #16]

    for (count = 0; count < length; count++) {
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	61bb      	str	r3, [r7, #24]
 8008e60:	69ba      	ldr	r2, [r7, #24]
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	da15      	bge.n	8008e94 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xd0>
        if (i2c_master_byte_write(data[count]) != 1) {
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	4619      	mov	r1, r3
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	f000 f85a 	bl	8008f2c <_ZN7TwoWire21i2c_master_byte_writeEi>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	bf14      	ite	ne
 8008e7e:	2301      	movne	r3, #1
 8008e80:	2300      	moveq	r3, #0
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d001      	beq.n	8008e8c <_ZN7TwoWire16i2c_master_writeEiPKcii+0xc8>
            return 3;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	e00a      	b.n	8008ea2 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
    for (count = 0; count < length; count++) {
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	61bb      	str	r3, [r7, #24]
 8008e92:	e7e5      	b.n	8008e60 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x9c>
        }
    }

    // If not repeated start, send stop.
    if (stop) {
 8008e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d002      	beq.n	8008ea0 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xdc>
        i2c_master_stop();
 8008e9a:	68f8      	ldr	r0, [r7, #12]
 8008e9c:	f7ff feed 	bl	8008c7a <_ZN7TwoWire15i2c_master_stopEv>
    }

    return 0;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3720      	adds	r7, #32
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <_ZN7TwoWire20i2c_master_byte_readEPii>:

int TwoWire::i2c_master_byte_read(int *value, int last)
{
 8008eaa:	b480      	push	{r7}
 8008eac:	b087      	sub	sp, #28
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	60f8      	str	r0, [r7, #12]
 8008eb2:	60b9      	str	r1, [r7, #8]
 8008eb4:	607a      	str	r2, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eba:	613b      	str	r3, [r7, #16]
    int timeout;

    if (last) {
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d006      	beq.n	8008ed0 <_ZN7TwoWire20i2c_master_byte_readEPii+0x26>
        // Don't acknowledge the last byte
        i2c->CR1 &= ~I2C_CR1_ACK;
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	601a      	str	r2, [r3, #0]
 8008ece:	e005      	b.n	8008edc <_ZN7TwoWire20i2c_master_byte_readEPii+0x32>
    } else {
        // Acknowledge the byte
        i2c->CR1 |= I2C_CR1_ACK;
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	601a      	str	r2, [r3, #0]
    }

    // Wait until the byte is received
    timeout = FLAG_TIMEOUT;
 8008edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ee0:	617b      	str	r3, [r7, #20]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_RXNE) == RESET) {
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ee6:	695b      	ldr	r3, [r3, #20]
 8008ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eec:	2b40      	cmp	r3, #64	; 0x40
 8008eee:	bf14      	ite	ne
 8008ef0:	2301      	movne	r3, #1
 8008ef2:	2300      	moveq	r3, #0
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d00c      	beq.n	8008f14 <_ZN7TwoWire20i2c_master_byte_readEPii+0x6a>
        if ((timeout--) == 0) {
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	1e5a      	subs	r2, r3, #1
 8008efe:	617a      	str	r2, [r7, #20]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	bf0c      	ite	eq
 8008f04:	2301      	moveq	r3, #1
 8008f06:	2300      	movne	r3, #0
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d0e9      	beq.n	8008ee2 <_ZN7TwoWire20i2c_master_byte_readEPii+0x38>
            return -1;
 8008f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f12:	e005      	b.n	8008f20 <_ZN7TwoWire20i2c_master_byte_readEPii+0x76>
        }
    }

    *value = (int)i2c->DR;
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	691b      	ldr	r3, [r3, #16]
 8008f18:	461a      	mov	r2, r3
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	601a      	str	r2, [r3, #0]

    return 0;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	371c      	adds	r7, #28
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <_ZN7TwoWire21i2c_master_byte_writeEi>:

int TwoWire::i2c_master_byte_write(int data)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b085      	sub	sp, #20
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f3a:	60bb      	str	r3, [r7, #8]
    int timeout;

    i2c->DR = (uint8_t)data;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	461a      	mov	r2, r3
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	611a      	str	r2, [r3, #16]

    // Wait until the byte is transmitted
    timeout = FLAG_TIMEOUT;
 8008f46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f4a:	60fb      	str	r3, [r7, #12]
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f50:	695b      	ldr	r3, [r3, #20]
 8008f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f56:	2b80      	cmp	r3, #128	; 0x80
 8008f58:	d008      	beq.n	8008f6c <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
            (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == RESET)) {
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f5e:	695b      	ldr	r3, [r3, #20]
 8008f60:	f003 0304 	and.w	r3, r3, #4
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8008f64:	2b04      	cmp	r3, #4
 8008f66:	d001      	beq.n	8008f6c <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e000      	b.n	8008f6e <_ZN7TwoWire21i2c_master_byte_writeEi+0x42>
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d00b      	beq.n	8008f8a <_ZN7TwoWire21i2c_master_byte_writeEi+0x5e>
        if ((timeout--) == 0) {
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	1e5a      	subs	r2, r3, #1
 8008f76:	60fa      	str	r2, [r7, #12]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	bf0c      	ite	eq
 8008f7c:	2301      	moveq	r3, #1
 8008f7e:	2300      	movne	r3, #0
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d0e2      	beq.n	8008f4c <_ZN7TwoWire21i2c_master_byte_writeEi+0x20>
            return 0;
 8008f86:	2300      	movs	r3, #0
 8008f88:	e000      	b.n	8008f8c <_ZN7TwoWire21i2c_master_byte_writeEi+0x60>
        }
    }

    return 1;
 8008f8a:	2301      	movs	r3, #1
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3714      	adds	r7, #20
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <_ZN7TwoWire15i2c_slave_writeEPKci>:

int TwoWire::i2c_slave_write(const char *data, int length)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b089      	sub	sp, #36	; 0x24
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fac:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	dd41      	ble.n	8009038 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 8008fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fb8:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fbe:	695b      	ldr	r3, [r3, #20]
 8008fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fc4:	2b80      	cmp	r3, #128	; 0x80
 8008fc6:	bf14      	ite	ne
 8008fc8:	2301      	movne	r3, #1
 8008fca:	2300      	moveq	r3, #0
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d008      	beq.n	8008fe4 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d1ed      	bne.n	8008fba <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 8008fde:	f04f 33ff 	mov.w	r3, #4294967295
 8008fe2:	e068      	b.n	80090b6 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	1c5a      	adds	r2, r3, #1
 8008fe8:	60ba      	str	r2, [r7, #8]
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	461a      	mov	r2, r3
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	611a      	str	r2, [r3, #16]
        length--;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	3b01      	subs	r3, #1
 8008ff6:	607b      	str	r3, [r7, #4]
        size++;
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009002:	695b      	ldr	r3, [r3, #20]
 8009004:	f003 0304 	and.w	r3, r3, #4
 8009008:	2b04      	cmp	r3, #4
 800900a:	d104      	bne.n	8009016 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d001      	beq.n	8009016 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8009012:	2301      	movs	r3, #1
 8009014:	e000      	b.n	8009018 <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 8009016:	2300      	movs	r3, #0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d0c8      	beq.n	8008fae <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	1c5a      	adds	r2, r3, #1
 8009020:	60ba      	str	r2, [r7, #8]
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	461a      	mov	r2, r3
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	611a      	str	r2, [r3, #16]
            length--;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	3b01      	subs	r3, #1
 800902e:	607b      	str	r3, [r7, #4]
            size++;
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	3301      	adds	r3, #1
 8009034:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 8009036:	e7ba      	b.n	8008fae <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 8009038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800903c:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009042:	695b      	ldr	r3, [r3, #20]
 8009044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800904c:	bf14      	ite	ne
 800904e:	2301      	movne	r3, #1
 8009050:	2300      	moveq	r3, #0
 8009052:	b2db      	uxtb	r3, r3
 8009054:	2b00      	cmp	r3, #0
 8009056:	d008      	beq.n	800906a <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	3b01      	subs	r3, #1
 800905c:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d1ec      	bne.n	800903e <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 8009064:	f04f 33ff 	mov.w	r3, #4294967295
 8009068:	e025      	b.n	80090b6 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800906e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009072:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 8009074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009078:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	f003 0302 	and.w	r3, r3, #2
 8009084:	2b02      	cmp	r3, #2
 8009086:	bf0c      	ite	eq
 8009088:	2301      	moveq	r3, #1
 800908a:	2300      	movne	r3, #0
 800908c:	b2db      	uxtb	r3, r3
 800908e:	2b00      	cmp	r3, #0
 8009090:	d008      	beq.n	80090a4 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 8009092:	69fb      	ldr	r3, [r7, #28]
 8009094:	3b01      	subs	r3, #1
 8009096:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1ed      	bne.n	800907a <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 800909e:	f04f 33ff 	mov.w	r3, #4294967295
 80090a2:	e008      	b.n	80090b6 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2220      	movs	r2, #32
 80090a8:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2200      	movs	r2, #0
 80090b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 80090b4:	69bb      	ldr	r3, [r7, #24]
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3724      	adds	r7, #36	; 0x24
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr
	...

080090c4 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090d0:	4a12      	ldr	r2, [pc, #72]	; (800911c <_ZN7TwoWire15enableInterruptEv+0x58>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d106      	bne.n	80090e4 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80090d6:	2049      	movs	r0, #73	; 0x49
 80090d8:	f000 fc9a 	bl	8009a10 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80090dc:	2048      	movs	r0, #72	; 0x48
 80090de:	f000 fc97 	bl	8009a10 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 80090e2:	e016      	b.n	8009112 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090e8:	4a0d      	ldr	r2, [pc, #52]	; (8009120 <_ZN7TwoWire15enableInterruptEv+0x5c>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d106      	bne.n	80090fc <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80090ee:	2022      	movs	r0, #34	; 0x22
 80090f0:	f000 fc8e 	bl	8009a10 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80090f4:	2021      	movs	r0, #33	; 0x21
 80090f6:	f000 fc8b 	bl	8009a10 <HAL_NVIC_EnableIRQ>
}
 80090fa:	e00a      	b.n	8009112 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009100:	4a08      	ldr	r2, [pc, #32]	; (8009124 <_ZN7TwoWire15enableInterruptEv+0x60>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d105      	bne.n	8009112 <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8009106:	2020      	movs	r0, #32
 8009108:	f000 fc82 	bl	8009a10 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800910c:	201f      	movs	r0, #31
 800910e:	f000 fc7f 	bl	8009a10 <HAL_NVIC_EnableIRQ>
}
 8009112:	bf00      	nop
 8009114:	3708      	adds	r7, #8
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	40005c00 	.word	0x40005c00
 8009120:	40005800 	.word	0x40005800
 8009124:	40005400 	.word	0x40005400

08009128 <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009134:	4a12      	ldr	r2, [pc, #72]	; (8009180 <_ZN7TwoWire16disableInterruptEv+0x58>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d106      	bne.n	8009148 <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 800913a:	2049      	movs	r0, #73	; 0x49
 800913c:	f000 fc76 	bl	8009a2c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8009140:	2048      	movs	r0, #72	; 0x48
 8009142:	f000 fc73 	bl	8009a2c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8009146:	e016      	b.n	8009176 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800914c:	4a0d      	ldr	r2, [pc, #52]	; (8009184 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d106      	bne.n	8009160 <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8009152:	2022      	movs	r0, #34	; 0x22
 8009154:	f000 fc6a 	bl	8009a2c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8009158:	2021      	movs	r0, #33	; 0x21
 800915a:	f000 fc67 	bl	8009a2c <HAL_NVIC_DisableIRQ>
}
 800915e:	e00a      	b.n	8009176 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009164:	4a08      	ldr	r2, [pc, #32]	; (8009188 <_ZN7TwoWire16disableInterruptEv+0x60>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d105      	bne.n	8009176 <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 800916a:	2020      	movs	r0, #32
 800916c:	f000 fc5e 	bl	8009a2c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8009170:	201f      	movs	r0, #31
 8009172:	f000 fc5b 	bl	8009a2c <HAL_NVIC_DisableIRQ>
}
 8009176:	bf00      	nop
 8009178:	3708      	adds	r7, #8
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	40005c00 	.word	0x40005c00
 8009184:	40005800 	.word	0x40005800
 8009188:	40005400 	.word	0x40005400

0800918c <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2b01      	cmp	r3, #1
 800919a:	d110      	bne.n	80091be <_Z41__static_initialization_and_destruction_0ii+0x32>
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d10b      	bne.n	80091be <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 80091a6:	4908      	ldr	r1, [pc, #32]	; (80091c8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80091a8:	4808      	ldr	r0, [pc, #32]	; (80091cc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80091aa:	f7ff fb51 	bl	8008850 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 80091ae:	4908      	ldr	r1, [pc, #32]	; (80091d0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80091b0:	4808      	ldr	r0, [pc, #32]	; (80091d4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80091b2:	f7ff fb4d 	bl	8008850 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 80091b6:	4908      	ldr	r1, [pc, #32]	; (80091d8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80091b8:	4808      	ldr	r0, [pc, #32]	; (80091dc <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80091ba:	f7ff fb49 	bl	8008850 <_ZN7TwoWireC1EP11I2C_TypeDef>
 80091be:	bf00      	nop
 80091c0:	3708      	adds	r7, #8
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	40005400 	.word	0x40005400
 80091cc:	20000614 	.word	0x20000614
 80091d0:	40005800 	.word	0x40005800
 80091d4:	200006cc 	.word	0x200006cc
 80091d8:	40005c00 	.word	0x40005c00
 80091dc:	20000784 	.word	0x20000784

080091e0 <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 80091e0:	b580      	push	{r7, lr}
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80091e8:	2001      	movs	r0, #1
 80091ea:	f7ff ffcf 	bl	800918c <_Z41__static_initialization_and_destruction_0ii>
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <MRT_radio_tx>:
#include <iwdg.h>
#include <string.h>
#include <sx126x.h>


void MRT_radio_tx(char* buffer){
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
			//sx126x_set_tx(); TODO
			TxProtocol(buffer, strlen(buffer));
		}
	#endif

	print((char*) "Radio sending:\t");
 80091f8:	4804      	ldr	r0, [pc, #16]	; (800920c <MRT_radio_tx+0x1c>)
 80091fa:	f7f7 ff85 	bl	8001108 <print>
	println(buffer);
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f7f7 ff64 	bl	80010cc <println>
}
 8009204:	bf00      	nop
 8009206:	3708      	adds	r7, #8
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}
 800920c:	08021d10 	.word	0x08021d10

08009210 <MRT_radio_Init>:
	println(buffer);
}



void MRT_radio_Init(void){
 8009210:	b580      	push	{r7, lr}
 8009212:	af00      	add	r7, sp, #0
	println("\r\nRadio Init");
 8009214:	4803      	ldr	r0, [pc, #12]	; (8009224 <MRT_radio_Init+0x14>)
 8009216:	f7f7 ff59 	bl	80010cc <println>
	set_NRESET_pin(SX_RST_GPIO_Port, SX_RST_Pin);
	set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
	Tx_setup();
	println("OK");
	#else
	println("\tNo radio currently in use");
 800921a:	4803      	ldr	r0, [pc, #12]	; (8009228 <MRT_radio_Init+0x18>)
 800921c:	f7f7 ff56 	bl	80010cc <println>
	#endif
}
 8009220:	bf00      	nop
 8009222:	bd80      	pop	{r7, pc}
 8009224:	08021d34 	.word	0x08021d34
 8009228:	08021d44 	.word	0x08021d44

0800922c <MRT_TELEMETRY_Init>:


void MRT_TELEMETRY_Init(void){
 800922c:	b5b0      	push	{r4, r5, r7, lr}
 800922e:	b086      	sub	sp, #24
 8009230:	af00      	add	r7, sp, #0

	MRT_radio_Init();
 8009232:	f7ff ffed 	bl	8009210 <MRT_radio_Init>

	HAL_IWDG_Refresh(&hiwdg);

	#if IRIDIUM_
	HAL_GPIO_WritePin(Iridium_RST_GPIO_Port, Iridium_RST_Pin, SET);
 8009236:	2201      	movs	r2, #1
 8009238:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800923c:	4809      	ldr	r0, [pc, #36]	; (8009264 <MRT_TELEMETRY_Init+0x38>)
 800923e:	f000 fdc7 	bl	8009dd0 <HAL_GPIO_WritePin>
	hiridium = MRT_Iridium_Init(IRIDIUM_TIMEOUT, IRIDIUM_I2C, print);
 8009242:	4c09      	ldr	r4, [pc, #36]	; (8009268 <MRT_TELEMETRY_Init+0x3c>)
 8009244:	4638      	mov	r0, r7
 8009246:	4b09      	ldr	r3, [pc, #36]	; (800926c <MRT_TELEMETRY_Init+0x40>)
 8009248:	2202      	movs	r2, #2
 800924a:	2103      	movs	r1, #3
 800924c:	f7ff f946 	bl	80084dc <MRT_Iridium_Init>
 8009250:	4625      	mov	r5, r4
 8009252:	463c      	mov	r4, r7
 8009254:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009256:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009258:	6823      	ldr	r3, [r4, #0]
 800925a:	602b      	str	r3, [r5, #0]
	#endif
}
 800925c:	bf00      	nop
 800925e:	3718      	adds	r7, #24
 8009260:	46bd      	mov	sp, r7
 8009262:	bdb0      	pop	{r4, r5, r7, pc}
 8009264:	40021000 	.word	0x40021000
 8009268:	20000600 	.word	0x20000600
 800926c:	08001109 	.word	0x08001109

08009270 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009274:	4b0e      	ldr	r3, [pc, #56]	; (80092b0 <HAL_Init+0x40>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a0d      	ldr	r2, [pc, #52]	; (80092b0 <HAL_Init+0x40>)
 800927a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800927e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009280:	4b0b      	ldr	r3, [pc, #44]	; (80092b0 <HAL_Init+0x40>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a0a      	ldr	r2, [pc, #40]	; (80092b0 <HAL_Init+0x40>)
 8009286:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800928a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800928c:	4b08      	ldr	r3, [pc, #32]	; (80092b0 <HAL_Init+0x40>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a07      	ldr	r2, [pc, #28]	; (80092b0 <HAL_Init+0x40>)
 8009292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009296:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009298:	2003      	movs	r0, #3
 800929a:	f000 fb92 	bl	80099c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800929e:	2000      	movs	r0, #0
 80092a0:	f7f9 f9fe 	bl	80026a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80092a4:	f7f9 f9d0 	bl	8002648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	40023c00 	.word	0x40023c00

080092b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80092b4:	b480      	push	{r7}
 80092b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80092b8:	4b06      	ldr	r3, [pc, #24]	; (80092d4 <HAL_IncTick+0x20>)
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	461a      	mov	r2, r3
 80092be:	4b06      	ldr	r3, [pc, #24]	; (80092d8 <HAL_IncTick+0x24>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4413      	add	r3, r2
 80092c4:	4a04      	ldr	r2, [pc, #16]	; (80092d8 <HAL_IncTick+0x24>)
 80092c6:	6013      	str	r3, [r2, #0]
}
 80092c8:	bf00      	nop
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop
 80092d4:	20000064 	.word	0x20000064
 80092d8:	20006fc4 	.word	0x20006fc4

080092dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80092dc:	b480      	push	{r7}
 80092de:	af00      	add	r7, sp, #0
  return uwTick;
 80092e0:	4b03      	ldr	r3, [pc, #12]	; (80092f0 <HAL_GetTick+0x14>)
 80092e2:	681b      	ldr	r3, [r3, #0]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr
 80092ee:	bf00      	nop
 80092f0:	20006fc4 	.word	0x20006fc4

080092f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80092fc:	f7ff ffee 	bl	80092dc <HAL_GetTick>
 8009300:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800930c:	d005      	beq.n	800931a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800930e:	4b0a      	ldr	r3, [pc, #40]	; (8009338 <HAL_Delay+0x44>)
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	461a      	mov	r2, r3
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	4413      	add	r3, r2
 8009318:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800931a:	bf00      	nop
 800931c:	f7ff ffde 	bl	80092dc <HAL_GetTick>
 8009320:	4602      	mov	r2, r0
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	1ad3      	subs	r3, r2, r3
 8009326:	68fa      	ldr	r2, [r7, #12]
 8009328:	429a      	cmp	r2, r3
 800932a:	d8f7      	bhi.n	800931c <HAL_Delay+0x28>
  {
  }
}
 800932c:	bf00      	nop
 800932e:	bf00      	nop
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	20000064 	.word	0x20000064

0800933c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009344:	2300      	movs	r3, #0
 8009346:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d101      	bne.n	8009352 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	e033      	b.n	80093ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009356:	2b00      	cmp	r3, #0
 8009358:	d109      	bne.n	800936e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f7f8 f93c 	bl	80015d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009372:	f003 0310 	and.w	r3, r3, #16
 8009376:	2b00      	cmp	r3, #0
 8009378:	d118      	bne.n	80093ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800937e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009382:	f023 0302 	bic.w	r3, r3, #2
 8009386:	f043 0202 	orr.w	r2, r3, #2
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 f94a 	bl	8009628 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800939e:	f023 0303 	bic.w	r3, r3, #3
 80093a2:	f043 0201 	orr.w	r2, r3, #1
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	641a      	str	r2, [r3, #64]	; 0x40
 80093aa:	e001      	b.n	80093b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80093b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
	...

080093c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b085      	sub	sp, #20
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80093ce:	2300      	movs	r3, #0
 80093d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d101      	bne.n	80093e0 <HAL_ADC_ConfigChannel+0x1c>
 80093dc:	2302      	movs	r3, #2
 80093de:	e113      	b.n	8009608 <HAL_ADC_ConfigChannel+0x244>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2b09      	cmp	r3, #9
 80093ee:	d925      	bls.n	800943c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	68d9      	ldr	r1, [r3, #12]
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	461a      	mov	r2, r3
 80093fe:	4613      	mov	r3, r2
 8009400:	005b      	lsls	r3, r3, #1
 8009402:	4413      	add	r3, r2
 8009404:	3b1e      	subs	r3, #30
 8009406:	2207      	movs	r2, #7
 8009408:	fa02 f303 	lsl.w	r3, r2, r3
 800940c:	43da      	mvns	r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	400a      	ands	r2, r1
 8009414:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	68d9      	ldr	r1, [r3, #12]
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	689a      	ldr	r2, [r3, #8]
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	b29b      	uxth	r3, r3
 8009426:	4618      	mov	r0, r3
 8009428:	4603      	mov	r3, r0
 800942a:	005b      	lsls	r3, r3, #1
 800942c:	4403      	add	r3, r0
 800942e:	3b1e      	subs	r3, #30
 8009430:	409a      	lsls	r2, r3
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	430a      	orrs	r2, r1
 8009438:	60da      	str	r2, [r3, #12]
 800943a:	e022      	b.n	8009482 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	6919      	ldr	r1, [r3, #16]
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	b29b      	uxth	r3, r3
 8009448:	461a      	mov	r2, r3
 800944a:	4613      	mov	r3, r2
 800944c:	005b      	lsls	r3, r3, #1
 800944e:	4413      	add	r3, r2
 8009450:	2207      	movs	r2, #7
 8009452:	fa02 f303 	lsl.w	r3, r2, r3
 8009456:	43da      	mvns	r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	400a      	ands	r2, r1
 800945e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	6919      	ldr	r1, [r3, #16]
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	689a      	ldr	r2, [r3, #8]
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	b29b      	uxth	r3, r3
 8009470:	4618      	mov	r0, r3
 8009472:	4603      	mov	r3, r0
 8009474:	005b      	lsls	r3, r3, #1
 8009476:	4403      	add	r3, r0
 8009478:	409a      	lsls	r2, r3
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	430a      	orrs	r2, r1
 8009480:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	2b06      	cmp	r3, #6
 8009488:	d824      	bhi.n	80094d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	685a      	ldr	r2, [r3, #4]
 8009494:	4613      	mov	r3, r2
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	4413      	add	r3, r2
 800949a:	3b05      	subs	r3, #5
 800949c:	221f      	movs	r2, #31
 800949e:	fa02 f303 	lsl.w	r3, r2, r3
 80094a2:	43da      	mvns	r2, r3
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	400a      	ands	r2, r1
 80094aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	4618      	mov	r0, r3
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	685a      	ldr	r2, [r3, #4]
 80094be:	4613      	mov	r3, r2
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	4413      	add	r3, r2
 80094c4:	3b05      	subs	r3, #5
 80094c6:	fa00 f203 	lsl.w	r2, r0, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	430a      	orrs	r2, r1
 80094d0:	635a      	str	r2, [r3, #52]	; 0x34
 80094d2:	e04c      	b.n	800956e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	2b0c      	cmp	r3, #12
 80094da:	d824      	bhi.n	8009526 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	685a      	ldr	r2, [r3, #4]
 80094e6:	4613      	mov	r3, r2
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	4413      	add	r3, r2
 80094ec:	3b23      	subs	r3, #35	; 0x23
 80094ee:	221f      	movs	r2, #31
 80094f0:	fa02 f303 	lsl.w	r3, r2, r3
 80094f4:	43da      	mvns	r2, r3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	400a      	ands	r2, r1
 80094fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	b29b      	uxth	r3, r3
 800950a:	4618      	mov	r0, r3
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	685a      	ldr	r2, [r3, #4]
 8009510:	4613      	mov	r3, r2
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	4413      	add	r3, r2
 8009516:	3b23      	subs	r3, #35	; 0x23
 8009518:	fa00 f203 	lsl.w	r2, r0, r3
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	430a      	orrs	r2, r1
 8009522:	631a      	str	r2, [r3, #48]	; 0x30
 8009524:	e023      	b.n	800956e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	685a      	ldr	r2, [r3, #4]
 8009530:	4613      	mov	r3, r2
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	4413      	add	r3, r2
 8009536:	3b41      	subs	r3, #65	; 0x41
 8009538:	221f      	movs	r2, #31
 800953a:	fa02 f303 	lsl.w	r3, r2, r3
 800953e:	43da      	mvns	r2, r3
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	400a      	ands	r2, r1
 8009546:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	b29b      	uxth	r3, r3
 8009554:	4618      	mov	r0, r3
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	685a      	ldr	r2, [r3, #4]
 800955a:	4613      	mov	r3, r2
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	4413      	add	r3, r2
 8009560:	3b41      	subs	r3, #65	; 0x41
 8009562:	fa00 f203 	lsl.w	r2, r0, r3
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	430a      	orrs	r2, r1
 800956c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800956e:	4b29      	ldr	r3, [pc, #164]	; (8009614 <HAL_ADC_ConfigChannel+0x250>)
 8009570:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a28      	ldr	r2, [pc, #160]	; (8009618 <HAL_ADC_ConfigChannel+0x254>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d10f      	bne.n	800959c <HAL_ADC_ConfigChannel+0x1d8>
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	2b12      	cmp	r3, #18
 8009582:	d10b      	bne.n	800959c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a1d      	ldr	r2, [pc, #116]	; (8009618 <HAL_ADC_ConfigChannel+0x254>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d12b      	bne.n	80095fe <HAL_ADC_ConfigChannel+0x23a>
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a1c      	ldr	r2, [pc, #112]	; (800961c <HAL_ADC_ConfigChannel+0x258>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d003      	beq.n	80095b8 <HAL_ADC_ConfigChannel+0x1f4>
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2b11      	cmp	r3, #17
 80095b6:	d122      	bne.n	80095fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a11      	ldr	r2, [pc, #68]	; (800961c <HAL_ADC_ConfigChannel+0x258>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d111      	bne.n	80095fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80095da:	4b11      	ldr	r3, [pc, #68]	; (8009620 <HAL_ADC_ConfigChannel+0x25c>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a11      	ldr	r2, [pc, #68]	; (8009624 <HAL_ADC_ConfigChannel+0x260>)
 80095e0:	fba2 2303 	umull	r2, r3, r2, r3
 80095e4:	0c9a      	lsrs	r2, r3, #18
 80095e6:	4613      	mov	r3, r2
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	4413      	add	r3, r2
 80095ec:	005b      	lsls	r3, r3, #1
 80095ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80095f0:	e002      	b.n	80095f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	3b01      	subs	r3, #1
 80095f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d1f9      	bne.n	80095f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009606:	2300      	movs	r3, #0
}
 8009608:	4618      	mov	r0, r3
 800960a:	3714      	adds	r7, #20
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr
 8009614:	40012300 	.word	0x40012300
 8009618:	40012000 	.word	0x40012000
 800961c:	10000012 	.word	0x10000012
 8009620:	2000003c 	.word	0x2000003c
 8009624:	431bde83 	.word	0x431bde83

08009628 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009628:	b480      	push	{r7}
 800962a:	b085      	sub	sp, #20
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009630:	4b79      	ldr	r3, [pc, #484]	; (8009818 <ADC_Init+0x1f0>)
 8009632:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	685a      	ldr	r2, [r3, #4]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	431a      	orrs	r2, r3
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	685a      	ldr	r2, [r3, #4]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800965c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	6859      	ldr	r1, [r3, #4]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	691b      	ldr	r3, [r3, #16]
 8009668:	021a      	lsls	r2, r3, #8
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	430a      	orrs	r2, r1
 8009670:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	685a      	ldr	r2, [r3, #4]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009680:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	6859      	ldr	r1, [r3, #4]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	689a      	ldr	r2, [r3, #8]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	430a      	orrs	r2, r1
 8009692:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	689a      	ldr	r2, [r3, #8]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80096a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	6899      	ldr	r1, [r3, #8]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	68da      	ldr	r2, [r3, #12]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	430a      	orrs	r2, r1
 80096b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ba:	4a58      	ldr	r2, [pc, #352]	; (800981c <ADC_Init+0x1f4>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d022      	beq.n	8009706 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	689a      	ldr	r2, [r3, #8]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80096ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	6899      	ldr	r1, [r3, #8]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	430a      	orrs	r2, r1
 80096e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	689a      	ldr	r2, [r3, #8]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80096f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	6899      	ldr	r1, [r3, #8]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	430a      	orrs	r2, r1
 8009702:	609a      	str	r2, [r3, #8]
 8009704:	e00f      	b.n	8009726 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	689a      	ldr	r2, [r3, #8]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009714:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	689a      	ldr	r2, [r3, #8]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009724:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	689a      	ldr	r2, [r3, #8]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f022 0202 	bic.w	r2, r2, #2
 8009734:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	6899      	ldr	r1, [r3, #8]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	7e1b      	ldrb	r3, [r3, #24]
 8009740:	005a      	lsls	r2, r3, #1
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	430a      	orrs	r2, r1
 8009748:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d01b      	beq.n	800978c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	685a      	ldr	r2, [r3, #4]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009762:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	685a      	ldr	r2, [r3, #4]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009772:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	6859      	ldr	r1, [r3, #4]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800977e:	3b01      	subs	r3, #1
 8009780:	035a      	lsls	r2, r3, #13
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	430a      	orrs	r2, r1
 8009788:	605a      	str	r2, [r3, #4]
 800978a:	e007      	b.n	800979c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	685a      	ldr	r2, [r3, #4]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800979a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80097aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	69db      	ldr	r3, [r3, #28]
 80097b6:	3b01      	subs	r3, #1
 80097b8:	051a      	lsls	r2, r3, #20
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	430a      	orrs	r2, r1
 80097c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	689a      	ldr	r2, [r3, #8]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80097d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	6899      	ldr	r1, [r3, #8]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80097de:	025a      	lsls	r2, r3, #9
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	430a      	orrs	r2, r1
 80097e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	689a      	ldr	r2, [r3, #8]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	6899      	ldr	r1, [r3, #8]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	695b      	ldr	r3, [r3, #20]
 8009802:	029a      	lsls	r2, r3, #10
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	430a      	orrs	r2, r1
 800980a:	609a      	str	r2, [r3, #8]
}
 800980c:	bf00      	nop
 800980e:	3714      	adds	r7, #20
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr
 8009818:	40012300 	.word	0x40012300
 800981c:	0f000001 	.word	0x0f000001

08009820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009820:	b480      	push	{r7}
 8009822:	b085      	sub	sp, #20
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f003 0307 	and.w	r3, r3, #7
 800982e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009830:	4b0c      	ldr	r3, [pc, #48]	; (8009864 <__NVIC_SetPriorityGrouping+0x44>)
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009836:	68ba      	ldr	r2, [r7, #8]
 8009838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800983c:	4013      	ands	r3, r2
 800983e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800984c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009852:	4a04      	ldr	r2, [pc, #16]	; (8009864 <__NVIC_SetPriorityGrouping+0x44>)
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	60d3      	str	r3, [r2, #12]
}
 8009858:	bf00      	nop
 800985a:	3714      	adds	r7, #20
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr
 8009864:	e000ed00 	.word	0xe000ed00

08009868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009868:	b480      	push	{r7}
 800986a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800986c:	4b04      	ldr	r3, [pc, #16]	; (8009880 <__NVIC_GetPriorityGrouping+0x18>)
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	0a1b      	lsrs	r3, r3, #8
 8009872:	f003 0307 	and.w	r3, r3, #7
}
 8009876:	4618      	mov	r0, r3
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr
 8009880:	e000ed00 	.word	0xe000ed00

08009884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
 800988a:	4603      	mov	r3, r0
 800988c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800988e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009892:	2b00      	cmp	r3, #0
 8009894:	db0b      	blt.n	80098ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009896:	79fb      	ldrb	r3, [r7, #7]
 8009898:	f003 021f 	and.w	r2, r3, #31
 800989c:	4907      	ldr	r1, [pc, #28]	; (80098bc <__NVIC_EnableIRQ+0x38>)
 800989e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098a2:	095b      	lsrs	r3, r3, #5
 80098a4:	2001      	movs	r0, #1
 80098a6:	fa00 f202 	lsl.w	r2, r0, r2
 80098aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80098ae:	bf00      	nop
 80098b0:	370c      	adds	r7, #12
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop
 80098bc:	e000e100 	.word	0xe000e100

080098c0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	4603      	mov	r3, r0
 80098c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80098ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	db12      	blt.n	80098f8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80098d2:	79fb      	ldrb	r3, [r7, #7]
 80098d4:	f003 021f 	and.w	r2, r3, #31
 80098d8:	490a      	ldr	r1, [pc, #40]	; (8009904 <__NVIC_DisableIRQ+0x44>)
 80098da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098de:	095b      	lsrs	r3, r3, #5
 80098e0:	2001      	movs	r0, #1
 80098e2:	fa00 f202 	lsl.w	r2, r0, r2
 80098e6:	3320      	adds	r3, #32
 80098e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80098ec:	f3bf 8f4f 	dsb	sy
}
 80098f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80098f2:	f3bf 8f6f 	isb	sy
}
 80098f6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80098f8:	bf00      	nop
 80098fa:	370c      	adds	r7, #12
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr
 8009904:	e000e100 	.word	0xe000e100

08009908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
 800990e:	4603      	mov	r3, r0
 8009910:	6039      	str	r1, [r7, #0]
 8009912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009918:	2b00      	cmp	r3, #0
 800991a:	db0a      	blt.n	8009932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	b2da      	uxtb	r2, r3
 8009920:	490c      	ldr	r1, [pc, #48]	; (8009954 <__NVIC_SetPriority+0x4c>)
 8009922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009926:	0112      	lsls	r2, r2, #4
 8009928:	b2d2      	uxtb	r2, r2
 800992a:	440b      	add	r3, r1
 800992c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009930:	e00a      	b.n	8009948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	b2da      	uxtb	r2, r3
 8009936:	4908      	ldr	r1, [pc, #32]	; (8009958 <__NVIC_SetPriority+0x50>)
 8009938:	79fb      	ldrb	r3, [r7, #7]
 800993a:	f003 030f 	and.w	r3, r3, #15
 800993e:	3b04      	subs	r3, #4
 8009940:	0112      	lsls	r2, r2, #4
 8009942:	b2d2      	uxtb	r2, r2
 8009944:	440b      	add	r3, r1
 8009946:	761a      	strb	r2, [r3, #24]
}
 8009948:	bf00      	nop
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr
 8009954:	e000e100 	.word	0xe000e100
 8009958:	e000ed00 	.word	0xe000ed00

0800995c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800995c:	b480      	push	{r7}
 800995e:	b089      	sub	sp, #36	; 0x24
 8009960:	af00      	add	r7, sp, #0
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	60b9      	str	r1, [r7, #8]
 8009966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f003 0307 	and.w	r3, r3, #7
 800996e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	f1c3 0307 	rsb	r3, r3, #7
 8009976:	2b04      	cmp	r3, #4
 8009978:	bf28      	it	cs
 800997a:	2304      	movcs	r3, #4
 800997c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	3304      	adds	r3, #4
 8009982:	2b06      	cmp	r3, #6
 8009984:	d902      	bls.n	800998c <NVIC_EncodePriority+0x30>
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	3b03      	subs	r3, #3
 800998a:	e000      	b.n	800998e <NVIC_EncodePriority+0x32>
 800998c:	2300      	movs	r3, #0
 800998e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009990:	f04f 32ff 	mov.w	r2, #4294967295
 8009994:	69bb      	ldr	r3, [r7, #24]
 8009996:	fa02 f303 	lsl.w	r3, r2, r3
 800999a:	43da      	mvns	r2, r3
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	401a      	ands	r2, r3
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80099a4:	f04f 31ff 	mov.w	r1, #4294967295
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	fa01 f303 	lsl.w	r3, r1, r3
 80099ae:	43d9      	mvns	r1, r3
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80099b4:	4313      	orrs	r3, r2
         );
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3724      	adds	r7, #36	; 0x24
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr

080099c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b082      	sub	sp, #8
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f7ff ff28 	bl	8009820 <__NVIC_SetPriorityGrouping>
}
 80099d0:	bf00      	nop
 80099d2:	3708      	adds	r7, #8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80099d8:	b580      	push	{r7, lr}
 80099da:	b086      	sub	sp, #24
 80099dc:	af00      	add	r7, sp, #0
 80099de:	4603      	mov	r3, r0
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	607a      	str	r2, [r7, #4]
 80099e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80099e6:	2300      	movs	r3, #0
 80099e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80099ea:	f7ff ff3d 	bl	8009868 <__NVIC_GetPriorityGrouping>
 80099ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	68b9      	ldr	r1, [r7, #8]
 80099f4:	6978      	ldr	r0, [r7, #20]
 80099f6:	f7ff ffb1 	bl	800995c <NVIC_EncodePriority>
 80099fa:	4602      	mov	r2, r0
 80099fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a00:	4611      	mov	r1, r2
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7ff ff80 	bl	8009908 <__NVIC_SetPriority>
}
 8009a08:	bf00      	nop
 8009a0a:	3718      	adds	r7, #24
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	4603      	mov	r3, r0
 8009a18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7ff ff30 	bl	8009884 <__NVIC_EnableIRQ>
}
 8009a24:	bf00      	nop
 8009a26:	3708      	adds	r7, #8
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	4603      	mov	r3, r0
 8009a34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7ff ff40 	bl	80098c0 <__NVIC_DisableIRQ>
}
 8009a40:	bf00      	nop
 8009a42:	3708      	adds	r7, #8
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b089      	sub	sp, #36	; 0x24
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009a52:	2300      	movs	r3, #0
 8009a54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009a56:	2300      	movs	r3, #0
 8009a58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009a5e:	2300      	movs	r3, #0
 8009a60:	61fb      	str	r3, [r7, #28]
 8009a62:	e177      	b.n	8009d54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009a64:	2201      	movs	r2, #1
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	fa02 f303 	lsl.w	r3, r2, r3
 8009a6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	697a      	ldr	r2, [r7, #20]
 8009a74:	4013      	ands	r3, r2
 8009a76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009a78:	693a      	ldr	r2, [r7, #16]
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	f040 8166 	bne.w	8009d4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	f003 0303 	and.w	r3, r3, #3
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d005      	beq.n	8009a9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009a96:	2b02      	cmp	r3, #2
 8009a98:	d130      	bne.n	8009afc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	005b      	lsls	r3, r3, #1
 8009aa4:	2203      	movs	r2, #3
 8009aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8009aaa:	43db      	mvns	r3, r3
 8009aac:	69ba      	ldr	r2, [r7, #24]
 8009aae:	4013      	ands	r3, r2
 8009ab0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	68da      	ldr	r2, [r3, #12]
 8009ab6:	69fb      	ldr	r3, [r7, #28]
 8009ab8:	005b      	lsls	r3, r3, #1
 8009aba:	fa02 f303 	lsl.w	r3, r2, r3
 8009abe:	69ba      	ldr	r2, [r7, #24]
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	69ba      	ldr	r2, [r7, #24]
 8009ac8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	69fb      	ldr	r3, [r7, #28]
 8009ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad8:	43db      	mvns	r3, r3
 8009ada:	69ba      	ldr	r2, [r7, #24]
 8009adc:	4013      	ands	r3, r2
 8009ade:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	091b      	lsrs	r3, r3, #4
 8009ae6:	f003 0201 	and.w	r2, r3, #1
 8009aea:	69fb      	ldr	r3, [r7, #28]
 8009aec:	fa02 f303 	lsl.w	r3, r2, r3
 8009af0:	69ba      	ldr	r2, [r7, #24]
 8009af2:	4313      	orrs	r3, r2
 8009af4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	69ba      	ldr	r2, [r7, #24]
 8009afa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	f003 0303 	and.w	r3, r3, #3
 8009b04:	2b03      	cmp	r3, #3
 8009b06:	d017      	beq.n	8009b38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009b0e:	69fb      	ldr	r3, [r7, #28]
 8009b10:	005b      	lsls	r3, r3, #1
 8009b12:	2203      	movs	r2, #3
 8009b14:	fa02 f303 	lsl.w	r3, r2, r3
 8009b18:	43db      	mvns	r3, r3
 8009b1a:	69ba      	ldr	r2, [r7, #24]
 8009b1c:	4013      	ands	r3, r2
 8009b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	689a      	ldr	r2, [r3, #8]
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	005b      	lsls	r3, r3, #1
 8009b28:	fa02 f303 	lsl.w	r3, r2, r3
 8009b2c:	69ba      	ldr	r2, [r7, #24]
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	69ba      	ldr	r2, [r7, #24]
 8009b36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	f003 0303 	and.w	r3, r3, #3
 8009b40:	2b02      	cmp	r3, #2
 8009b42:	d123      	bne.n	8009b8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009b44:	69fb      	ldr	r3, [r7, #28]
 8009b46:	08da      	lsrs	r2, r3, #3
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	3208      	adds	r2, #8
 8009b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	f003 0307 	and.w	r3, r3, #7
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	220f      	movs	r2, #15
 8009b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b60:	43db      	mvns	r3, r3
 8009b62:	69ba      	ldr	r2, [r7, #24]
 8009b64:	4013      	ands	r3, r2
 8009b66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	691a      	ldr	r2, [r3, #16]
 8009b6c:	69fb      	ldr	r3, [r7, #28]
 8009b6e:	f003 0307 	and.w	r3, r3, #7
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	fa02 f303 	lsl.w	r3, r2, r3
 8009b78:	69ba      	ldr	r2, [r7, #24]
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009b7e:	69fb      	ldr	r3, [r7, #28]
 8009b80:	08da      	lsrs	r2, r3, #3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	3208      	adds	r2, #8
 8009b86:	69b9      	ldr	r1, [r7, #24]
 8009b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	005b      	lsls	r3, r3, #1
 8009b96:	2203      	movs	r2, #3
 8009b98:	fa02 f303 	lsl.w	r3, r2, r3
 8009b9c:	43db      	mvns	r3, r3
 8009b9e:	69ba      	ldr	r2, [r7, #24]
 8009ba0:	4013      	ands	r3, r2
 8009ba2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	f003 0203 	and.w	r2, r3, #3
 8009bac:	69fb      	ldr	r3, [r7, #28]
 8009bae:	005b      	lsls	r3, r3, #1
 8009bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8009bb4:	69ba      	ldr	r2, [r7, #24]
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	69ba      	ldr	r2, [r7, #24]
 8009bbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	f000 80c0 	beq.w	8009d4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009bce:	2300      	movs	r3, #0
 8009bd0:	60fb      	str	r3, [r7, #12]
 8009bd2:	4b66      	ldr	r3, [pc, #408]	; (8009d6c <HAL_GPIO_Init+0x324>)
 8009bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bd6:	4a65      	ldr	r2, [pc, #404]	; (8009d6c <HAL_GPIO_Init+0x324>)
 8009bd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8009bde:	4b63      	ldr	r3, [pc, #396]	; (8009d6c <HAL_GPIO_Init+0x324>)
 8009be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009be6:	60fb      	str	r3, [r7, #12]
 8009be8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009bea:	4a61      	ldr	r2, [pc, #388]	; (8009d70 <HAL_GPIO_Init+0x328>)
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	089b      	lsrs	r3, r3, #2
 8009bf0:	3302      	adds	r3, #2
 8009bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009bf8:	69fb      	ldr	r3, [r7, #28]
 8009bfa:	f003 0303 	and.w	r3, r3, #3
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	220f      	movs	r2, #15
 8009c02:	fa02 f303 	lsl.w	r3, r2, r3
 8009c06:	43db      	mvns	r3, r3
 8009c08:	69ba      	ldr	r2, [r7, #24]
 8009c0a:	4013      	ands	r3, r2
 8009c0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	4a58      	ldr	r2, [pc, #352]	; (8009d74 <HAL_GPIO_Init+0x32c>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d037      	beq.n	8009c86 <HAL_GPIO_Init+0x23e>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	4a57      	ldr	r2, [pc, #348]	; (8009d78 <HAL_GPIO_Init+0x330>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d031      	beq.n	8009c82 <HAL_GPIO_Init+0x23a>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	4a56      	ldr	r2, [pc, #344]	; (8009d7c <HAL_GPIO_Init+0x334>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d02b      	beq.n	8009c7e <HAL_GPIO_Init+0x236>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	4a55      	ldr	r2, [pc, #340]	; (8009d80 <HAL_GPIO_Init+0x338>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d025      	beq.n	8009c7a <HAL_GPIO_Init+0x232>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4a54      	ldr	r2, [pc, #336]	; (8009d84 <HAL_GPIO_Init+0x33c>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d01f      	beq.n	8009c76 <HAL_GPIO_Init+0x22e>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	4a53      	ldr	r2, [pc, #332]	; (8009d88 <HAL_GPIO_Init+0x340>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d019      	beq.n	8009c72 <HAL_GPIO_Init+0x22a>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	4a52      	ldr	r2, [pc, #328]	; (8009d8c <HAL_GPIO_Init+0x344>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d013      	beq.n	8009c6e <HAL_GPIO_Init+0x226>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	4a51      	ldr	r2, [pc, #324]	; (8009d90 <HAL_GPIO_Init+0x348>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d00d      	beq.n	8009c6a <HAL_GPIO_Init+0x222>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4a50      	ldr	r2, [pc, #320]	; (8009d94 <HAL_GPIO_Init+0x34c>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d007      	beq.n	8009c66 <HAL_GPIO_Init+0x21e>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4a4f      	ldr	r2, [pc, #316]	; (8009d98 <HAL_GPIO_Init+0x350>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d101      	bne.n	8009c62 <HAL_GPIO_Init+0x21a>
 8009c5e:	2309      	movs	r3, #9
 8009c60:	e012      	b.n	8009c88 <HAL_GPIO_Init+0x240>
 8009c62:	230a      	movs	r3, #10
 8009c64:	e010      	b.n	8009c88 <HAL_GPIO_Init+0x240>
 8009c66:	2308      	movs	r3, #8
 8009c68:	e00e      	b.n	8009c88 <HAL_GPIO_Init+0x240>
 8009c6a:	2307      	movs	r3, #7
 8009c6c:	e00c      	b.n	8009c88 <HAL_GPIO_Init+0x240>
 8009c6e:	2306      	movs	r3, #6
 8009c70:	e00a      	b.n	8009c88 <HAL_GPIO_Init+0x240>
 8009c72:	2305      	movs	r3, #5
 8009c74:	e008      	b.n	8009c88 <HAL_GPIO_Init+0x240>
 8009c76:	2304      	movs	r3, #4
 8009c78:	e006      	b.n	8009c88 <HAL_GPIO_Init+0x240>
 8009c7a:	2303      	movs	r3, #3
 8009c7c:	e004      	b.n	8009c88 <HAL_GPIO_Init+0x240>
 8009c7e:	2302      	movs	r3, #2
 8009c80:	e002      	b.n	8009c88 <HAL_GPIO_Init+0x240>
 8009c82:	2301      	movs	r3, #1
 8009c84:	e000      	b.n	8009c88 <HAL_GPIO_Init+0x240>
 8009c86:	2300      	movs	r3, #0
 8009c88:	69fa      	ldr	r2, [r7, #28]
 8009c8a:	f002 0203 	and.w	r2, r2, #3
 8009c8e:	0092      	lsls	r2, r2, #2
 8009c90:	4093      	lsls	r3, r2
 8009c92:	69ba      	ldr	r2, [r7, #24]
 8009c94:	4313      	orrs	r3, r2
 8009c96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009c98:	4935      	ldr	r1, [pc, #212]	; (8009d70 <HAL_GPIO_Init+0x328>)
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	089b      	lsrs	r3, r3, #2
 8009c9e:	3302      	adds	r3, #2
 8009ca0:	69ba      	ldr	r2, [r7, #24]
 8009ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009ca6:	4b3d      	ldr	r3, [pc, #244]	; (8009d9c <HAL_GPIO_Init+0x354>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	43db      	mvns	r3, r3
 8009cb0:	69ba      	ldr	r2, [r7, #24]
 8009cb2:	4013      	ands	r3, r2
 8009cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d003      	beq.n	8009cca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009cc2:	69ba      	ldr	r2, [r7, #24]
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009cca:	4a34      	ldr	r2, [pc, #208]	; (8009d9c <HAL_GPIO_Init+0x354>)
 8009ccc:	69bb      	ldr	r3, [r7, #24]
 8009cce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009cd0:	4b32      	ldr	r3, [pc, #200]	; (8009d9c <HAL_GPIO_Init+0x354>)
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	43db      	mvns	r3, r3
 8009cda:	69ba      	ldr	r2, [r7, #24]
 8009cdc:	4013      	ands	r3, r2
 8009cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d003      	beq.n	8009cf4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009cec:	69ba      	ldr	r2, [r7, #24]
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009cf4:	4a29      	ldr	r2, [pc, #164]	; (8009d9c <HAL_GPIO_Init+0x354>)
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009cfa:	4b28      	ldr	r3, [pc, #160]	; (8009d9c <HAL_GPIO_Init+0x354>)
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	43db      	mvns	r3, r3
 8009d04:	69ba      	ldr	r2, [r7, #24]
 8009d06:	4013      	ands	r3, r2
 8009d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d003      	beq.n	8009d1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009d16:	69ba      	ldr	r2, [r7, #24]
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009d1e:	4a1f      	ldr	r2, [pc, #124]	; (8009d9c <HAL_GPIO_Init+0x354>)
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009d24:	4b1d      	ldr	r3, [pc, #116]	; (8009d9c <HAL_GPIO_Init+0x354>)
 8009d26:	68db      	ldr	r3, [r3, #12]
 8009d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	43db      	mvns	r3, r3
 8009d2e:	69ba      	ldr	r2, [r7, #24]
 8009d30:	4013      	ands	r3, r2
 8009d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d003      	beq.n	8009d48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009d40:	69ba      	ldr	r2, [r7, #24]
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	4313      	orrs	r3, r2
 8009d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009d48:	4a14      	ldr	r2, [pc, #80]	; (8009d9c <HAL_GPIO_Init+0x354>)
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	3301      	adds	r3, #1
 8009d52:	61fb      	str	r3, [r7, #28]
 8009d54:	69fb      	ldr	r3, [r7, #28]
 8009d56:	2b0f      	cmp	r3, #15
 8009d58:	f67f ae84 	bls.w	8009a64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009d5c:	bf00      	nop
 8009d5e:	bf00      	nop
 8009d60:	3724      	adds	r7, #36	; 0x24
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr
 8009d6a:	bf00      	nop
 8009d6c:	40023800 	.word	0x40023800
 8009d70:	40013800 	.word	0x40013800
 8009d74:	40020000 	.word	0x40020000
 8009d78:	40020400 	.word	0x40020400
 8009d7c:	40020800 	.word	0x40020800
 8009d80:	40020c00 	.word	0x40020c00
 8009d84:	40021000 	.word	0x40021000
 8009d88:	40021400 	.word	0x40021400
 8009d8c:	40021800 	.word	0x40021800
 8009d90:	40021c00 	.word	0x40021c00
 8009d94:	40022000 	.word	0x40022000
 8009d98:	40022400 	.word	0x40022400
 8009d9c:	40013c00 	.word	0x40013c00

08009da0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b085      	sub	sp, #20
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	460b      	mov	r3, r1
 8009daa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	691a      	ldr	r2, [r3, #16]
 8009db0:	887b      	ldrh	r3, [r7, #2]
 8009db2:	4013      	ands	r3, r2
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d002      	beq.n	8009dbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009db8:	2301      	movs	r3, #1
 8009dba:	73fb      	strb	r3, [r7, #15]
 8009dbc:	e001      	b.n	8009dc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3714      	adds	r7, #20
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr

08009dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	460b      	mov	r3, r1
 8009dda:	807b      	strh	r3, [r7, #2]
 8009ddc:	4613      	mov	r3, r2
 8009dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009de0:	787b      	ldrb	r3, [r7, #1]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d003      	beq.n	8009dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009de6:	887a      	ldrh	r2, [r7, #2]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009dec:	e003      	b.n	8009df6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009dee:	887b      	ldrh	r3, [r7, #2]
 8009df0:	041a      	lsls	r2, r3, #16
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	619a      	str	r2, [r3, #24]
}
 8009df6:	bf00      	nop
 8009df8:	370c      	adds	r7, #12
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr
	...

08009e04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009e0e:	4b08      	ldr	r3, [pc, #32]	; (8009e30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009e10:	695a      	ldr	r2, [r3, #20]
 8009e12:	88fb      	ldrh	r3, [r7, #6]
 8009e14:	4013      	ands	r3, r2
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d006      	beq.n	8009e28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009e1a:	4a05      	ldr	r2, [pc, #20]	; (8009e30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009e1c:	88fb      	ldrh	r3, [r7, #6]
 8009e1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009e20:	88fb      	ldrh	r3, [r7, #6]
 8009e22:	4618      	mov	r0, r3
 8009e24:	f000 f806 	bl	8009e34 <HAL_GPIO_EXTI_Callback>
  }
}
 8009e28:	bf00      	nop
 8009e2a:	3708      	adds	r7, #8
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}
 8009e30:	40013c00 	.word	0x40013c00

08009e34 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8009e3e:	bf00      	nop
 8009e40:	370c      	adds	r7, #12
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr
	...

08009e4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d101      	bne.n	8009e5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	e12b      	b.n	800a0b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e64:	b2db      	uxtb	r3, r3
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d106      	bne.n	8009e78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f7f7 feaa 	bl	8001bcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2224      	movs	r2, #36	; 0x24
 8009e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f022 0201 	bic.w	r2, r2, #1
 8009e8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	681a      	ldr	r2, [r3, #0]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009eae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009eb0:	f002 fe48 	bl	800cb44 <HAL_RCC_GetPCLK1Freq>
 8009eb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	4a81      	ldr	r2, [pc, #516]	; (800a0c0 <HAL_I2C_Init+0x274>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d807      	bhi.n	8009ed0 <HAL_I2C_Init+0x84>
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	4a80      	ldr	r2, [pc, #512]	; (800a0c4 <HAL_I2C_Init+0x278>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	bf94      	ite	ls
 8009ec8:	2301      	movls	r3, #1
 8009eca:	2300      	movhi	r3, #0
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	e006      	b.n	8009ede <HAL_I2C_Init+0x92>
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	4a7d      	ldr	r2, [pc, #500]	; (800a0c8 <HAL_I2C_Init+0x27c>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	bf94      	ite	ls
 8009ed8:	2301      	movls	r3, #1
 8009eda:	2300      	movhi	r3, #0
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d001      	beq.n	8009ee6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	e0e7      	b.n	800a0b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	4a78      	ldr	r2, [pc, #480]	; (800a0cc <HAL_I2C_Init+0x280>)
 8009eea:	fba2 2303 	umull	r2, r3, r2, r3
 8009eee:	0c9b      	lsrs	r3, r3, #18
 8009ef0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	68ba      	ldr	r2, [r7, #8]
 8009f02:	430a      	orrs	r2, r1
 8009f04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	6a1b      	ldr	r3, [r3, #32]
 8009f0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	4a6a      	ldr	r2, [pc, #424]	; (800a0c0 <HAL_I2C_Init+0x274>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d802      	bhi.n	8009f20 <HAL_I2C_Init+0xd4>
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	3301      	adds	r3, #1
 8009f1e:	e009      	b.n	8009f34 <HAL_I2C_Init+0xe8>
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009f26:	fb02 f303 	mul.w	r3, r2, r3
 8009f2a:	4a69      	ldr	r2, [pc, #420]	; (800a0d0 <HAL_I2C_Init+0x284>)
 8009f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8009f30:	099b      	lsrs	r3, r3, #6
 8009f32:	3301      	adds	r3, #1
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	6812      	ldr	r2, [r2, #0]
 8009f38:	430b      	orrs	r3, r1
 8009f3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	69db      	ldr	r3, [r3, #28]
 8009f42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009f46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	495c      	ldr	r1, [pc, #368]	; (800a0c0 <HAL_I2C_Init+0x274>)
 8009f50:	428b      	cmp	r3, r1
 8009f52:	d819      	bhi.n	8009f88 <HAL_I2C_Init+0x13c>
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	1e59      	subs	r1, r3, #1
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	005b      	lsls	r3, r3, #1
 8009f5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009f62:	1c59      	adds	r1, r3, #1
 8009f64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009f68:	400b      	ands	r3, r1
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d00a      	beq.n	8009f84 <HAL_I2C_Init+0x138>
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	1e59      	subs	r1, r3, #1
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	005b      	lsls	r3, r3, #1
 8009f78:	fbb1 f3f3 	udiv	r3, r1, r3
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f82:	e051      	b.n	800a028 <HAL_I2C_Init+0x1dc>
 8009f84:	2304      	movs	r3, #4
 8009f86:	e04f      	b.n	800a028 <HAL_I2C_Init+0x1dc>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d111      	bne.n	8009fb4 <HAL_I2C_Init+0x168>
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	1e58      	subs	r0, r3, #1
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6859      	ldr	r1, [r3, #4]
 8009f98:	460b      	mov	r3, r1
 8009f9a:	005b      	lsls	r3, r3, #1
 8009f9c:	440b      	add	r3, r1
 8009f9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	bf0c      	ite	eq
 8009fac:	2301      	moveq	r3, #1
 8009fae:	2300      	movne	r3, #0
 8009fb0:	b2db      	uxtb	r3, r3
 8009fb2:	e012      	b.n	8009fda <HAL_I2C_Init+0x18e>
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	1e58      	subs	r0, r3, #1
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6859      	ldr	r1, [r3, #4]
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	440b      	add	r3, r1
 8009fc2:	0099      	lsls	r1, r3, #2
 8009fc4:	440b      	add	r3, r1
 8009fc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8009fca:	3301      	adds	r3, #1
 8009fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	bf0c      	ite	eq
 8009fd4:	2301      	moveq	r3, #1
 8009fd6:	2300      	movne	r3, #0
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d001      	beq.n	8009fe2 <HAL_I2C_Init+0x196>
 8009fde:	2301      	movs	r3, #1
 8009fe0:	e022      	b.n	800a028 <HAL_I2C_Init+0x1dc>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	689b      	ldr	r3, [r3, #8]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d10e      	bne.n	800a008 <HAL_I2C_Init+0x1bc>
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	1e58      	subs	r0, r3, #1
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6859      	ldr	r1, [r3, #4]
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	005b      	lsls	r3, r3, #1
 8009ff6:	440b      	add	r3, r1
 8009ff8:	fbb0 f3f3 	udiv	r3, r0, r3
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a006:	e00f      	b.n	800a028 <HAL_I2C_Init+0x1dc>
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	1e58      	subs	r0, r3, #1
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6859      	ldr	r1, [r3, #4]
 800a010:	460b      	mov	r3, r1
 800a012:	009b      	lsls	r3, r3, #2
 800a014:	440b      	add	r3, r1
 800a016:	0099      	lsls	r1, r3, #2
 800a018:	440b      	add	r3, r1
 800a01a:	fbb0 f3f3 	udiv	r3, r0, r3
 800a01e:	3301      	adds	r3, #1
 800a020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a024:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a028:	6879      	ldr	r1, [r7, #4]
 800a02a:	6809      	ldr	r1, [r1, #0]
 800a02c:	4313      	orrs	r3, r2
 800a02e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	69da      	ldr	r2, [r3, #28]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6a1b      	ldr	r3, [r3, #32]
 800a042:	431a      	orrs	r2, r3
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	430a      	orrs	r2, r1
 800a04a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a056:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	6911      	ldr	r1, [r2, #16]
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	68d2      	ldr	r2, [r2, #12]
 800a062:	4311      	orrs	r1, r2
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	6812      	ldr	r2, [r2, #0]
 800a068:	430b      	orrs	r3, r1
 800a06a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	695a      	ldr	r2, [r3, #20]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	699b      	ldr	r3, [r3, #24]
 800a07e:	431a      	orrs	r2, r3
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	430a      	orrs	r2, r1
 800a086:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f042 0201 	orr.w	r2, r2, #1
 800a096:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2220      	movs	r2, #32
 800a0a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3710      	adds	r7, #16
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	000186a0 	.word	0x000186a0
 800a0c4:	001e847f 	.word	0x001e847f
 800a0c8:	003d08ff 	.word	0x003d08ff
 800a0cc:	431bde83 	.word	0x431bde83
 800a0d0:	10624dd3 	.word	0x10624dd3

0800a0d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b088      	sub	sp, #32
 800a0d8:	af02      	add	r7, sp, #8
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	4608      	mov	r0, r1
 800a0de:	4611      	mov	r1, r2
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	817b      	strh	r3, [r7, #10]
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	813b      	strh	r3, [r7, #8]
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a0ee:	f7ff f8f5 	bl	80092dc <HAL_GetTick>
 800a0f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	2b20      	cmp	r3, #32
 800a0fe:	f040 80d9 	bne.w	800a2b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	9300      	str	r3, [sp, #0]
 800a106:	2319      	movs	r3, #25
 800a108:	2201      	movs	r2, #1
 800a10a:	496d      	ldr	r1, [pc, #436]	; (800a2c0 <HAL_I2C_Mem_Write+0x1ec>)
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f000 fcb5 	bl	800aa7c <I2C_WaitOnFlagUntilTimeout>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d001      	beq.n	800a11c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a118:	2302      	movs	r3, #2
 800a11a:	e0cc      	b.n	800a2b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a122:	2b01      	cmp	r3, #1
 800a124:	d101      	bne.n	800a12a <HAL_I2C_Mem_Write+0x56>
 800a126:	2302      	movs	r3, #2
 800a128:	e0c5      	b.n	800a2b6 <HAL_I2C_Mem_Write+0x1e2>
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2201      	movs	r2, #1
 800a12e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f003 0301 	and.w	r3, r3, #1
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d007      	beq.n	800a150 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f042 0201 	orr.w	r2, r2, #1
 800a14e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a15e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2221      	movs	r2, #33	; 0x21
 800a164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2240      	movs	r2, #64	; 0x40
 800a16c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2200      	movs	r2, #0
 800a174:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	6a3a      	ldr	r2, [r7, #32]
 800a17a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a180:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a186:	b29a      	uxth	r2, r3
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	4a4d      	ldr	r2, [pc, #308]	; (800a2c4 <HAL_I2C_Mem_Write+0x1f0>)
 800a190:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a192:	88f8      	ldrh	r0, [r7, #6]
 800a194:	893a      	ldrh	r2, [r7, #8]
 800a196:	8979      	ldrh	r1, [r7, #10]
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	9301      	str	r3, [sp, #4]
 800a19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19e:	9300      	str	r3, [sp, #0]
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	68f8      	ldr	r0, [r7, #12]
 800a1a4:	f000 faec 	bl	800a780 <I2C_RequestMemoryWrite>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d052      	beq.n	800a254 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	e081      	b.n	800a2b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a1b2:	697a      	ldr	r2, [r7, #20]
 800a1b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f000 fd36 	bl	800ac28 <I2C_WaitOnTXEFlagUntilTimeout>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d00d      	beq.n	800a1de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c6:	2b04      	cmp	r3, #4
 800a1c8:	d107      	bne.n	800a1da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e06b      	b.n	800a2b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e2:	781a      	ldrb	r2, [r3, #0]
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ee:	1c5a      	adds	r2, r3, #1
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1f8:	3b01      	subs	r3, #1
 800a1fa:	b29a      	uxth	r2, r3
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a204:	b29b      	uxth	r3, r3
 800a206:	3b01      	subs	r3, #1
 800a208:	b29a      	uxth	r2, r3
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	695b      	ldr	r3, [r3, #20]
 800a214:	f003 0304 	and.w	r3, r3, #4
 800a218:	2b04      	cmp	r3, #4
 800a21a:	d11b      	bne.n	800a254 <HAL_I2C_Mem_Write+0x180>
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a220:	2b00      	cmp	r3, #0
 800a222:	d017      	beq.n	800a254 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a228:	781a      	ldrb	r2, [r3, #0]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a234:	1c5a      	adds	r2, r3, #1
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a23e:	3b01      	subs	r3, #1
 800a240:	b29a      	uxth	r2, r3
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	3b01      	subs	r3, #1
 800a24e:	b29a      	uxth	r2, r3
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d1aa      	bne.n	800a1b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a25c:	697a      	ldr	r2, [r7, #20]
 800a25e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a260:	68f8      	ldr	r0, [r7, #12]
 800a262:	f000 fd22 	bl	800acaa <I2C_WaitOnBTFFlagUntilTimeout>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d00d      	beq.n	800a288 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a270:	2b04      	cmp	r3, #4
 800a272:	d107      	bne.n	800a284 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a282:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a284:	2301      	movs	r3, #1
 800a286:	e016      	b.n	800a2b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a296:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2220      	movs	r2, #32
 800a29c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	e000      	b.n	800a2b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a2b4:	2302      	movs	r3, #2
  }
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3718      	adds	r7, #24
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	00100002 	.word	0x00100002
 800a2c4:	ffff0000 	.word	0xffff0000

0800a2c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b08c      	sub	sp, #48	; 0x30
 800a2cc:	af02      	add	r7, sp, #8
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	4608      	mov	r0, r1
 800a2d2:	4611      	mov	r1, r2
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	817b      	strh	r3, [r7, #10]
 800a2da:	460b      	mov	r3, r1
 800a2dc:	813b      	strh	r3, [r7, #8]
 800a2de:	4613      	mov	r3, r2
 800a2e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a2e2:	f7fe fffb 	bl	80092dc <HAL_GetTick>
 800a2e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	2b20      	cmp	r3, #32
 800a2f2:	f040 8208 	bne.w	800a706 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f8:	9300      	str	r3, [sp, #0]
 800a2fa:	2319      	movs	r3, #25
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	497b      	ldr	r1, [pc, #492]	; (800a4ec <HAL_I2C_Mem_Read+0x224>)
 800a300:	68f8      	ldr	r0, [r7, #12]
 800a302:	f000 fbbb 	bl	800aa7c <I2C_WaitOnFlagUntilTimeout>
 800a306:	4603      	mov	r3, r0
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d001      	beq.n	800a310 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800a30c:	2302      	movs	r3, #2
 800a30e:	e1fb      	b.n	800a708 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a316:	2b01      	cmp	r3, #1
 800a318:	d101      	bne.n	800a31e <HAL_I2C_Mem_Read+0x56>
 800a31a:	2302      	movs	r3, #2
 800a31c:	e1f4      	b.n	800a708 <HAL_I2C_Mem_Read+0x440>
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2201      	movs	r2, #1
 800a322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f003 0301 	and.w	r3, r3, #1
 800a330:	2b01      	cmp	r3, #1
 800a332:	d007      	beq.n	800a344 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f042 0201 	orr.w	r2, r2, #1
 800a342:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a352:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2222      	movs	r2, #34	; 0x22
 800a358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2240      	movs	r2, #64	; 0x40
 800a360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2200      	movs	r2, #0
 800a368:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a36e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a374:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a37a:	b29a      	uxth	r2, r3
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	4a5b      	ldr	r2, [pc, #364]	; (800a4f0 <HAL_I2C_Mem_Read+0x228>)
 800a384:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a386:	88f8      	ldrh	r0, [r7, #6]
 800a388:	893a      	ldrh	r2, [r7, #8]
 800a38a:	8979      	ldrh	r1, [r7, #10]
 800a38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38e:	9301      	str	r3, [sp, #4]
 800a390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a392:	9300      	str	r3, [sp, #0]
 800a394:	4603      	mov	r3, r0
 800a396:	68f8      	ldr	r0, [r7, #12]
 800a398:	f000 fa88 	bl	800a8ac <I2C_RequestMemoryRead>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d001      	beq.n	800a3a6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	e1b0      	b.n	800a708 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d113      	bne.n	800a3d6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	623b      	str	r3, [r7, #32]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	695b      	ldr	r3, [r3, #20]
 800a3b8:	623b      	str	r3, [r7, #32]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	699b      	ldr	r3, [r3, #24]
 800a3c0:	623b      	str	r3, [r7, #32]
 800a3c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3d2:	601a      	str	r2, [r3, #0]
 800a3d4:	e184      	b.n	800a6e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	d11b      	bne.n	800a416 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	61fb      	str	r3, [r7, #28]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	695b      	ldr	r3, [r3, #20]
 800a3f8:	61fb      	str	r3, [r7, #28]
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	699b      	ldr	r3, [r3, #24]
 800a400:	61fb      	str	r3, [r7, #28]
 800a402:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a412:	601a      	str	r2, [r3, #0]
 800a414:	e164      	b.n	800a6e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a41a:	2b02      	cmp	r3, #2
 800a41c:	d11b      	bne.n	800a456 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	681a      	ldr	r2, [r3, #0]
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a42c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	681a      	ldr	r2, [r3, #0]
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a43c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a43e:	2300      	movs	r3, #0
 800a440:	61bb      	str	r3, [r7, #24]
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	695b      	ldr	r3, [r3, #20]
 800a448:	61bb      	str	r3, [r7, #24]
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	699b      	ldr	r3, [r3, #24]
 800a450:	61bb      	str	r3, [r7, #24]
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	e144      	b.n	800a6e0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a456:	2300      	movs	r3, #0
 800a458:	617b      	str	r3, [r7, #20]
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	695b      	ldr	r3, [r3, #20]
 800a460:	617b      	str	r3, [r7, #20]
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	699b      	ldr	r3, [r3, #24]
 800a468:	617b      	str	r3, [r7, #20]
 800a46a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a46c:	e138      	b.n	800a6e0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a472:	2b03      	cmp	r3, #3
 800a474:	f200 80f1 	bhi.w	800a65a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d123      	bne.n	800a4c8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a482:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a484:	68f8      	ldr	r0, [r7, #12]
 800a486:	f000 fc51 	bl	800ad2c <I2C_WaitOnRXNEFlagUntilTimeout>
 800a48a:	4603      	mov	r3, r0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d001      	beq.n	800a494 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800a490:	2301      	movs	r3, #1
 800a492:	e139      	b.n	800a708 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	691a      	ldr	r2, [r3, #16]
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a49e:	b2d2      	uxtb	r2, r2
 800a4a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a6:	1c5a      	adds	r2, r3, #1
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4b0:	3b01      	subs	r3, #1
 800a4b2:	b29a      	uxth	r2, r3
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	3b01      	subs	r3, #1
 800a4c0:	b29a      	uxth	r2, r3
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a4c6:	e10b      	b.n	800a6e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4cc:	2b02      	cmp	r3, #2
 800a4ce:	d14e      	bne.n	800a56e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d2:	9300      	str	r3, [sp, #0]
 800a4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	4906      	ldr	r1, [pc, #24]	; (800a4f4 <HAL_I2C_Mem_Read+0x22c>)
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f000 face 	bl	800aa7c <I2C_WaitOnFlagUntilTimeout>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d008      	beq.n	800a4f8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e10e      	b.n	800a708 <HAL_I2C_Mem_Read+0x440>
 800a4ea:	bf00      	nop
 800a4ec:	00100002 	.word	0x00100002
 800a4f0:	ffff0000 	.word	0xffff0000
 800a4f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	681a      	ldr	r2, [r3, #0]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a506:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	691a      	ldr	r2, [r3, #16]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a512:	b2d2      	uxtb	r2, r2
 800a514:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a51a:	1c5a      	adds	r2, r3, #1
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a524:	3b01      	subs	r3, #1
 800a526:	b29a      	uxth	r2, r3
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a530:	b29b      	uxth	r3, r3
 800a532:	3b01      	subs	r3, #1
 800a534:	b29a      	uxth	r2, r3
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	691a      	ldr	r2, [r3, #16]
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a544:	b2d2      	uxtb	r2, r2
 800a546:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54c:	1c5a      	adds	r2, r3, #1
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a556:	3b01      	subs	r3, #1
 800a558:	b29a      	uxth	r2, r3
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a562:	b29b      	uxth	r3, r3
 800a564:	3b01      	subs	r3, #1
 800a566:	b29a      	uxth	r2, r3
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a56c:	e0b8      	b.n	800a6e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a570:	9300      	str	r3, [sp, #0]
 800a572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a574:	2200      	movs	r2, #0
 800a576:	4966      	ldr	r1, [pc, #408]	; (800a710 <HAL_I2C_Mem_Read+0x448>)
 800a578:	68f8      	ldr	r0, [r7, #12]
 800a57a:	f000 fa7f 	bl	800aa7c <I2C_WaitOnFlagUntilTimeout>
 800a57e:	4603      	mov	r3, r0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d001      	beq.n	800a588 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800a584:	2301      	movs	r3, #1
 800a586:	e0bf      	b.n	800a708 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a596:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	691a      	ldr	r2, [r3, #16]
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a2:	b2d2      	uxtb	r2, r2
 800a5a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5aa:	1c5a      	adds	r2, r3, #1
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5b4:	3b01      	subs	r3, #1
 800a5b6:	b29a      	uxth	r2, r3
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5c0:	b29b      	uxth	r3, r3
 800a5c2:	3b01      	subs	r3, #1
 800a5c4:	b29a      	uxth	r2, r3
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5cc:	9300      	str	r3, [sp, #0]
 800a5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	494f      	ldr	r1, [pc, #316]	; (800a710 <HAL_I2C_Mem_Read+0x448>)
 800a5d4:	68f8      	ldr	r0, [r7, #12]
 800a5d6:	f000 fa51 	bl	800aa7c <I2C_WaitOnFlagUntilTimeout>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d001      	beq.n	800a5e4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	e091      	b.n	800a708 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	691a      	ldr	r2, [r3, #16]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5fe:	b2d2      	uxtb	r2, r2
 800a600:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a606:	1c5a      	adds	r2, r3, #1
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a610:	3b01      	subs	r3, #1
 800a612:	b29a      	uxth	r2, r3
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	3b01      	subs	r3, #1
 800a620:	b29a      	uxth	r2, r3
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	691a      	ldr	r2, [r3, #16]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a630:	b2d2      	uxtb	r2, r2
 800a632:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a638:	1c5a      	adds	r2, r3, #1
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a642:	3b01      	subs	r3, #1
 800a644:	b29a      	uxth	r2, r3
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a64e:	b29b      	uxth	r3, r3
 800a650:	3b01      	subs	r3, #1
 800a652:	b29a      	uxth	r2, r3
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a658:	e042      	b.n	800a6e0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a65a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a65c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a65e:	68f8      	ldr	r0, [r7, #12]
 800a660:	f000 fb64 	bl	800ad2c <I2C_WaitOnRXNEFlagUntilTimeout>
 800a664:	4603      	mov	r3, r0
 800a666:	2b00      	cmp	r3, #0
 800a668:	d001      	beq.n	800a66e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a66a:	2301      	movs	r3, #1
 800a66c:	e04c      	b.n	800a708 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	691a      	ldr	r2, [r3, #16]
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a678:	b2d2      	uxtb	r2, r2
 800a67a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a680:	1c5a      	adds	r2, r3, #1
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a68a:	3b01      	subs	r3, #1
 800a68c:	b29a      	uxth	r2, r3
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a696:	b29b      	uxth	r3, r3
 800a698:	3b01      	subs	r3, #1
 800a69a:	b29a      	uxth	r2, r3
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	695b      	ldr	r3, [r3, #20]
 800a6a6:	f003 0304 	and.w	r3, r3, #4
 800a6aa:	2b04      	cmp	r3, #4
 800a6ac:	d118      	bne.n	800a6e0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	691a      	ldr	r2, [r3, #16]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b8:	b2d2      	uxtb	r2, r2
 800a6ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c0:	1c5a      	adds	r2, r3, #1
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6ca:	3b01      	subs	r3, #1
 800a6cc:	b29a      	uxth	r2, r3
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	3b01      	subs	r3, #1
 800a6da:	b29a      	uxth	r2, r3
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f47f aec2 	bne.w	800a46e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2220      	movs	r2, #32
 800a6ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a702:	2300      	movs	r3, #0
 800a704:	e000      	b.n	800a708 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a706:	2302      	movs	r3, #2
  }
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3728      	adds	r7, #40	; 0x28
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}
 800a710:	00010004 	.word	0x00010004

0800a714 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800a714:	b480      	push	{r7}
 800a716:	b083      	sub	sp, #12
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a722:	b2db      	uxtb	r3, r3
 800a724:	2b20      	cmp	r3, #32
 800a726:	d124      	bne.n	800a772 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2228      	movs	r2, #40	; 0x28
 800a72c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f003 0301 	and.w	r3, r3, #1
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d007      	beq.n	800a74e <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f042 0201 	orr.w	r2, r2, #1
 800a74c:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	681a      	ldr	r2, [r3, #0]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a75c:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	685a      	ldr	r2, [r3, #4]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800a76c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800a76e:	2300      	movs	r3, #0
 800a770:	e000      	b.n	800a774 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800a772:	2302      	movs	r3, #2
  }
}
 800a774:	4618      	mov	r0, r3
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b088      	sub	sp, #32
 800a784:	af02      	add	r7, sp, #8
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	4608      	mov	r0, r1
 800a78a:	4611      	mov	r1, r2
 800a78c:	461a      	mov	r2, r3
 800a78e:	4603      	mov	r3, r0
 800a790:	817b      	strh	r3, [r7, #10]
 800a792:	460b      	mov	r3, r1
 800a794:	813b      	strh	r3, [r7, #8]
 800a796:	4613      	mov	r3, r2
 800a798:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a7a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ac:	9300      	str	r3, [sp, #0]
 800a7ae:	6a3b      	ldr	r3, [r7, #32]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a7b6:	68f8      	ldr	r0, [r7, #12]
 800a7b8:	f000 f960 	bl	800aa7c <I2C_WaitOnFlagUntilTimeout>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d00d      	beq.n	800a7de <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7d0:	d103      	bne.n	800a7da <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a7da:	2303      	movs	r3, #3
 800a7dc:	e05f      	b.n	800a89e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a7de:	897b      	ldrh	r3, [r7, #10]
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a7ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f0:	6a3a      	ldr	r2, [r7, #32]
 800a7f2:	492d      	ldr	r1, [pc, #180]	; (800a8a8 <I2C_RequestMemoryWrite+0x128>)
 800a7f4:	68f8      	ldr	r0, [r7, #12]
 800a7f6:	f000 f998 	bl	800ab2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d001      	beq.n	800a804 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a800:	2301      	movs	r3, #1
 800a802:	e04c      	b.n	800a89e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a804:	2300      	movs	r3, #0
 800a806:	617b      	str	r3, [r7, #20]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	695b      	ldr	r3, [r3, #20]
 800a80e:	617b      	str	r3, [r7, #20]
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	699b      	ldr	r3, [r3, #24]
 800a816:	617b      	str	r3, [r7, #20]
 800a818:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a81a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a81c:	6a39      	ldr	r1, [r7, #32]
 800a81e:	68f8      	ldr	r0, [r7, #12]
 800a820:	f000 fa02 	bl	800ac28 <I2C_WaitOnTXEFlagUntilTimeout>
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	d00d      	beq.n	800a846 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a82e:	2b04      	cmp	r3, #4
 800a830:	d107      	bne.n	800a842 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	681a      	ldr	r2, [r3, #0]
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a840:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a842:	2301      	movs	r3, #1
 800a844:	e02b      	b.n	800a89e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a846:	88fb      	ldrh	r3, [r7, #6]
 800a848:	2b01      	cmp	r3, #1
 800a84a:	d105      	bne.n	800a858 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a84c:	893b      	ldrh	r3, [r7, #8]
 800a84e:	b2da      	uxtb	r2, r3
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	611a      	str	r2, [r3, #16]
 800a856:	e021      	b.n	800a89c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a858:	893b      	ldrh	r3, [r7, #8]
 800a85a:	0a1b      	lsrs	r3, r3, #8
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	b2da      	uxtb	r2, r3
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a868:	6a39      	ldr	r1, [r7, #32]
 800a86a:	68f8      	ldr	r0, [r7, #12]
 800a86c:	f000 f9dc 	bl	800ac28 <I2C_WaitOnTXEFlagUntilTimeout>
 800a870:	4603      	mov	r3, r0
 800a872:	2b00      	cmp	r3, #0
 800a874:	d00d      	beq.n	800a892 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a87a:	2b04      	cmp	r3, #4
 800a87c:	d107      	bne.n	800a88e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a88c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a88e:	2301      	movs	r3, #1
 800a890:	e005      	b.n	800a89e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a892:	893b      	ldrh	r3, [r7, #8]
 800a894:	b2da      	uxtb	r2, r3
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a89c:	2300      	movs	r3, #0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3718      	adds	r7, #24
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	00010002 	.word	0x00010002

0800a8ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b088      	sub	sp, #32
 800a8b0:	af02      	add	r7, sp, #8
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	4608      	mov	r0, r1
 800a8b6:	4611      	mov	r1, r2
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	817b      	strh	r3, [r7, #10]
 800a8be:	460b      	mov	r3, r1
 800a8c0:	813b      	strh	r3, [r7, #8]
 800a8c2:	4613      	mov	r3, r2
 800a8c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	681a      	ldr	r2, [r3, #0]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a8d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e8:	9300      	str	r3, [sp, #0]
 800a8ea:	6a3b      	ldr	r3, [r7, #32]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a8f2:	68f8      	ldr	r0, [r7, #12]
 800a8f4:	f000 f8c2 	bl	800aa7c <I2C_WaitOnFlagUntilTimeout>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00d      	beq.n	800a91a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a908:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a90c:	d103      	bne.n	800a916 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a914:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a916:	2303      	movs	r3, #3
 800a918:	e0aa      	b.n	800aa70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a91a:	897b      	ldrh	r3, [r7, #10]
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	461a      	mov	r2, r3
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a928:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92c:	6a3a      	ldr	r2, [r7, #32]
 800a92e:	4952      	ldr	r1, [pc, #328]	; (800aa78 <I2C_RequestMemoryRead+0x1cc>)
 800a930:	68f8      	ldr	r0, [r7, #12]
 800a932:	f000 f8fa 	bl	800ab2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a936:	4603      	mov	r3, r0
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d001      	beq.n	800a940 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a93c:	2301      	movs	r3, #1
 800a93e:	e097      	b.n	800aa70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a940:	2300      	movs	r3, #0
 800a942:	617b      	str	r3, [r7, #20]
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	695b      	ldr	r3, [r3, #20]
 800a94a:	617b      	str	r3, [r7, #20]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	699b      	ldr	r3, [r3, #24]
 800a952:	617b      	str	r3, [r7, #20]
 800a954:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a958:	6a39      	ldr	r1, [r7, #32]
 800a95a:	68f8      	ldr	r0, [r7, #12]
 800a95c:	f000 f964 	bl	800ac28 <I2C_WaitOnTXEFlagUntilTimeout>
 800a960:	4603      	mov	r3, r0
 800a962:	2b00      	cmp	r3, #0
 800a964:	d00d      	beq.n	800a982 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a96a:	2b04      	cmp	r3, #4
 800a96c:	d107      	bne.n	800a97e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a97c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a97e:	2301      	movs	r3, #1
 800a980:	e076      	b.n	800aa70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a982:	88fb      	ldrh	r3, [r7, #6]
 800a984:	2b01      	cmp	r3, #1
 800a986:	d105      	bne.n	800a994 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a988:	893b      	ldrh	r3, [r7, #8]
 800a98a:	b2da      	uxtb	r2, r3
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	611a      	str	r2, [r3, #16]
 800a992:	e021      	b.n	800a9d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a994:	893b      	ldrh	r3, [r7, #8]
 800a996:	0a1b      	lsrs	r3, r3, #8
 800a998:	b29b      	uxth	r3, r3
 800a99a:	b2da      	uxtb	r2, r3
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a9a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9a4:	6a39      	ldr	r1, [r7, #32]
 800a9a6:	68f8      	ldr	r0, [r7, #12]
 800a9a8:	f000 f93e 	bl	800ac28 <I2C_WaitOnTXEFlagUntilTimeout>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d00d      	beq.n	800a9ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b6:	2b04      	cmp	r3, #4
 800a9b8:	d107      	bne.n	800a9ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	e050      	b.n	800aa70 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a9ce:	893b      	ldrh	r3, [r7, #8]
 800a9d0:	b2da      	uxtb	r2, r3
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a9d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9da:	6a39      	ldr	r1, [r7, #32]
 800a9dc:	68f8      	ldr	r0, [r7, #12]
 800a9de:	f000 f923 	bl	800ac28 <I2C_WaitOnTXEFlagUntilTimeout>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d00d      	beq.n	800aa04 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ec:	2b04      	cmp	r3, #4
 800a9ee:	d107      	bne.n	800aa00 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	681a      	ldr	r2, [r3, #0]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800aa00:	2301      	movs	r3, #1
 800aa02:	e035      	b.n	800aa70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa12:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aa14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa16:	9300      	str	r3, [sp, #0]
 800aa18:	6a3b      	ldr	r3, [r7, #32]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800aa20:	68f8      	ldr	r0, [r7, #12]
 800aa22:	f000 f82b 	bl	800aa7c <I2C_WaitOnFlagUntilTimeout>
 800aa26:	4603      	mov	r3, r0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d00d      	beq.n	800aa48 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa3a:	d103      	bne.n	800aa44 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800aa44:	2303      	movs	r3, #3
 800aa46:	e013      	b.n	800aa70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800aa48:	897b      	ldrh	r3, [r7, #10]
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	f043 0301 	orr.w	r3, r3, #1
 800aa50:	b2da      	uxtb	r2, r3
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aa58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5a:	6a3a      	ldr	r2, [r7, #32]
 800aa5c:	4906      	ldr	r1, [pc, #24]	; (800aa78 <I2C_RequestMemoryRead+0x1cc>)
 800aa5e:	68f8      	ldr	r0, [r7, #12]
 800aa60:	f000 f863 	bl	800ab2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aa64:	4603      	mov	r3, r0
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d001      	beq.n	800aa6e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	e000      	b.n	800aa70 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800aa6e:	2300      	movs	r3, #0
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3718      	adds	r7, #24
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	00010002 	.word	0x00010002

0800aa7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	60b9      	str	r1, [r7, #8]
 800aa86:	603b      	str	r3, [r7, #0]
 800aa88:	4613      	mov	r3, r2
 800aa8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aa8c:	e025      	b.n	800aada <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa94:	d021      	beq.n	800aada <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa96:	f7fe fc21 	bl	80092dc <HAL_GetTick>
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	69bb      	ldr	r3, [r7, #24]
 800aa9e:	1ad3      	subs	r3, r2, r3
 800aaa0:	683a      	ldr	r2, [r7, #0]
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d302      	bcc.n	800aaac <I2C_WaitOnFlagUntilTimeout+0x30>
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d116      	bne.n	800aada <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2200      	movs	r2, #0
 800aab0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2220      	movs	r2, #32
 800aab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2200      	movs	r2, #0
 800aabe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aac6:	f043 0220 	orr.w	r2, r3, #32
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2200      	movs	r2, #0
 800aad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800aad6:	2301      	movs	r3, #1
 800aad8:	e023      	b.n	800ab22 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	0c1b      	lsrs	r3, r3, #16
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d10d      	bne.n	800ab00 <I2C_WaitOnFlagUntilTimeout+0x84>
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	695b      	ldr	r3, [r3, #20]
 800aaea:	43da      	mvns	r2, r3
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	4013      	ands	r3, r2
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	bf0c      	ite	eq
 800aaf6:	2301      	moveq	r3, #1
 800aaf8:	2300      	movne	r3, #0
 800aafa:	b2db      	uxtb	r3, r3
 800aafc:	461a      	mov	r2, r3
 800aafe:	e00c      	b.n	800ab1a <I2C_WaitOnFlagUntilTimeout+0x9e>
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	699b      	ldr	r3, [r3, #24]
 800ab06:	43da      	mvns	r2, r3
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	4013      	ands	r3, r2
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	bf0c      	ite	eq
 800ab12:	2301      	moveq	r3, #1
 800ab14:	2300      	movne	r3, #0
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	461a      	mov	r2, r3
 800ab1a:	79fb      	ldrb	r3, [r7, #7]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d0b6      	beq.n	800aa8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ab20:	2300      	movs	r3, #0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3710      	adds	r7, #16
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}

0800ab2a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ab2a:	b580      	push	{r7, lr}
 800ab2c:	b084      	sub	sp, #16
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	60f8      	str	r0, [r7, #12]
 800ab32:	60b9      	str	r1, [r7, #8]
 800ab34:	607a      	str	r2, [r7, #4]
 800ab36:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ab38:	e051      	b.n	800abde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	695b      	ldr	r3, [r3, #20]
 800ab40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab48:	d123      	bne.n	800ab92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab58:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ab62:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2200      	movs	r2, #0
 800ab68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2220      	movs	r2, #32
 800ab6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2200      	movs	r2, #0
 800ab76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab7e:	f043 0204 	orr.w	r2, r3, #4
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	e046      	b.n	800ac20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab98:	d021      	beq.n	800abde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab9a:	f7fe fb9f 	bl	80092dc <HAL_GetTick>
 800ab9e:	4602      	mov	r2, r0
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	1ad3      	subs	r3, r2, r3
 800aba4:	687a      	ldr	r2, [r7, #4]
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d302      	bcc.n	800abb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d116      	bne.n	800abde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2200      	movs	r2, #0
 800abb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2220      	movs	r2, #32
 800abba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2200      	movs	r2, #0
 800abc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abca:	f043 0220 	orr.w	r2, r3, #32
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2200      	movs	r2, #0
 800abd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800abda:	2301      	movs	r3, #1
 800abdc:	e020      	b.n	800ac20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	0c1b      	lsrs	r3, r3, #16
 800abe2:	b2db      	uxtb	r3, r3
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d10c      	bne.n	800ac02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	695b      	ldr	r3, [r3, #20]
 800abee:	43da      	mvns	r2, r3
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	4013      	ands	r3, r2
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	bf14      	ite	ne
 800abfa:	2301      	movne	r3, #1
 800abfc:	2300      	moveq	r3, #0
 800abfe:	b2db      	uxtb	r3, r3
 800ac00:	e00b      	b.n	800ac1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	699b      	ldr	r3, [r3, #24]
 800ac08:	43da      	mvns	r2, r3
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	4013      	ands	r3, r2
 800ac0e:	b29b      	uxth	r3, r3
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	bf14      	ite	ne
 800ac14:	2301      	movne	r3, #1
 800ac16:	2300      	moveq	r3, #0
 800ac18:	b2db      	uxtb	r3, r3
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d18d      	bne.n	800ab3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800ac1e:	2300      	movs	r3, #0
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3710      	adds	r7, #16
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	60f8      	str	r0, [r7, #12]
 800ac30:	60b9      	str	r1, [r7, #8]
 800ac32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ac34:	e02d      	b.n	800ac92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ac36:	68f8      	ldr	r0, [r7, #12]
 800ac38:	f000 f8ce 	bl	800add8 <I2C_IsAcknowledgeFailed>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d001      	beq.n	800ac46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ac42:	2301      	movs	r3, #1
 800ac44:	e02d      	b.n	800aca2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac4c:	d021      	beq.n	800ac92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac4e:	f7fe fb45 	bl	80092dc <HAL_GetTick>
 800ac52:	4602      	mov	r2, r0
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	1ad3      	subs	r3, r2, r3
 800ac58:	68ba      	ldr	r2, [r7, #8]
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d302      	bcc.n	800ac64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d116      	bne.n	800ac92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2200      	movs	r2, #0
 800ac68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2220      	movs	r2, #32
 800ac6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2200      	movs	r2, #0
 800ac76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac7e:	f043 0220 	orr.w	r2, r3, #32
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e007      	b.n	800aca2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	695b      	ldr	r3, [r3, #20]
 800ac98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac9c:	2b80      	cmp	r3, #128	; 0x80
 800ac9e:	d1ca      	bne.n	800ac36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800aca0:	2300      	movs	r3, #0
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3710      	adds	r7, #16
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}

0800acaa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800acaa:	b580      	push	{r7, lr}
 800acac:	b084      	sub	sp, #16
 800acae:	af00      	add	r7, sp, #0
 800acb0:	60f8      	str	r0, [r7, #12]
 800acb2:	60b9      	str	r1, [r7, #8]
 800acb4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800acb6:	e02d      	b.n	800ad14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800acb8:	68f8      	ldr	r0, [r7, #12]
 800acba:	f000 f88d 	bl	800add8 <I2C_IsAcknowledgeFailed>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d001      	beq.n	800acc8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800acc4:	2301      	movs	r3, #1
 800acc6:	e02d      	b.n	800ad24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acce:	d021      	beq.n	800ad14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800acd0:	f7fe fb04 	bl	80092dc <HAL_GetTick>
 800acd4:	4602      	mov	r2, r0
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	1ad3      	subs	r3, r2, r3
 800acda:	68ba      	ldr	r2, [r7, #8]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d302      	bcc.n	800ace6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d116      	bne.n	800ad14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2200      	movs	r2, #0
 800acea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2220      	movs	r2, #32
 800acf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2200      	movs	r2, #0
 800acf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad00:	f043 0220 	orr.w	r2, r3, #32
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ad10:	2301      	movs	r3, #1
 800ad12:	e007      	b.n	800ad24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	695b      	ldr	r3, [r3, #20]
 800ad1a:	f003 0304 	and.w	r3, r3, #4
 800ad1e:	2b04      	cmp	r3, #4
 800ad20:	d1ca      	bne.n	800acb8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ad22:	2300      	movs	r3, #0
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3710      	adds	r7, #16
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b084      	sub	sp, #16
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	60f8      	str	r0, [r7, #12]
 800ad34:	60b9      	str	r1, [r7, #8]
 800ad36:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ad38:	e042      	b.n	800adc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	695b      	ldr	r3, [r3, #20]
 800ad40:	f003 0310 	and.w	r3, r3, #16
 800ad44:	2b10      	cmp	r3, #16
 800ad46:	d119      	bne.n	800ad7c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f06f 0210 	mvn.w	r2, #16
 800ad50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2200      	movs	r2, #0
 800ad56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2220      	movs	r2, #32
 800ad5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2200      	movs	r2, #0
 800ad64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	2200      	movs	r2, #0
 800ad74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	e029      	b.n	800add0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad7c:	f7fe faae 	bl	80092dc <HAL_GetTick>
 800ad80:	4602      	mov	r2, r0
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	1ad3      	subs	r3, r2, r3
 800ad86:	68ba      	ldr	r2, [r7, #8]
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d302      	bcc.n	800ad92 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d116      	bne.n	800adc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2200      	movs	r2, #0
 800ad96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2220      	movs	r2, #32
 800ad9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2200      	movs	r2, #0
 800ada4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adac:	f043 0220 	orr.w	r2, r3, #32
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2200      	movs	r2, #0
 800adb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800adbc:	2301      	movs	r3, #1
 800adbe:	e007      	b.n	800add0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	695b      	ldr	r3, [r3, #20]
 800adc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adca:	2b40      	cmp	r3, #64	; 0x40
 800adcc:	d1b5      	bne.n	800ad3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800adce:	2300      	movs	r3, #0
}
 800add0:	4618      	mov	r0, r3
 800add2:	3710      	adds	r7, #16
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	695b      	ldr	r3, [r3, #20]
 800ade6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800adea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adee:	d11b      	bne.n	800ae28 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800adf8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2200      	movs	r2, #0
 800adfe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2220      	movs	r2, #32
 800ae04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae14:	f043 0204 	orr.w	r2, r3, #4
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ae24:	2301      	movs	r3, #1
 800ae26:	e000      	b.n	800ae2a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ae28:	2300      	movs	r3, #0
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	370c      	adds	r7, #12
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr

0800ae36 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ae36:	b480      	push	{r7}
 800ae38:	b083      	sub	sp, #12
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
 800ae3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae46:	b2db      	uxtb	r3, r3
 800ae48:	2b20      	cmp	r3, #32
 800ae4a:	d129      	bne.n	800aea0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2224      	movs	r2, #36	; 0x24
 800ae50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	681a      	ldr	r2, [r3, #0]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f022 0201 	bic.w	r2, r2, #1
 800ae62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f022 0210 	bic.w	r2, r2, #16
 800ae72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	683a      	ldr	r2, [r7, #0]
 800ae80:	430a      	orrs	r2, r1
 800ae82:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	681a      	ldr	r2, [r3, #0]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f042 0201 	orr.w	r2, r2, #1
 800ae92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2220      	movs	r2, #32
 800ae98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	e000      	b.n	800aea2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800aea0:	2302      	movs	r3, #2
  }
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	370c      	adds	r7, #12
 800aea6:	46bd      	mov	sp, r7
 800aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeac:	4770      	bx	lr

0800aeae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800aeae:	b480      	push	{r7}
 800aeb0:	b085      	sub	sp, #20
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
 800aeb6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	2b20      	cmp	r3, #32
 800aec6:	d12a      	bne.n	800af1e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2224      	movs	r2, #36	; 0x24
 800aecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	681a      	ldr	r2, [r3, #0]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f022 0201 	bic.w	r2, r2, #1
 800aede:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee6:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800aee8:	89fb      	ldrh	r3, [r7, #14]
 800aeea:	f023 030f 	bic.w	r3, r3, #15
 800aeee:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	b29a      	uxth	r2, r3
 800aef4:	89fb      	ldrh	r3, [r7, #14]
 800aef6:	4313      	orrs	r3, r2
 800aef8:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	89fa      	ldrh	r2, [r7, #14]
 800af00:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	681a      	ldr	r2, [r3, #0]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f042 0201 	orr.w	r2, r2, #1
 800af10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2220      	movs	r2, #32
 800af16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800af1a:	2300      	movs	r3, #0
 800af1c:	e000      	b.n	800af20 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800af1e:	2302      	movs	r3, #2
  }
}
 800af20:	4618      	mov	r0, r3
 800af22:	3714      	adds	r7, #20
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr

0800af2c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800af2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af2e:	b08f      	sub	sp, #60	; 0x3c
 800af30:	af0a      	add	r7, sp, #40	; 0x28
 800af32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d101      	bne.n	800af3e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800af3a:	2301      	movs	r3, #1
 800af3c:	e10f      	b.n	800b15e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800af4a:	b2db      	uxtb	r3, r3
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d106      	bne.n	800af5e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f00e fb1f 	bl	801959c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2203      	movs	r2, #3
 800af62:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d102      	bne.n	800af78 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2200      	movs	r2, #0
 800af76:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4618      	mov	r0, r3
 800af7e:	f005 f82c 	bl	800ffda <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	603b      	str	r3, [r7, #0]
 800af88:	687e      	ldr	r6, [r7, #4]
 800af8a:	466d      	mov	r5, sp
 800af8c:	f106 0410 	add.w	r4, r6, #16
 800af90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800af92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800af94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800af96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800af98:	e894 0003 	ldmia.w	r4, {r0, r1}
 800af9c:	e885 0003 	stmia.w	r5, {r0, r1}
 800afa0:	1d33      	adds	r3, r6, #4
 800afa2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800afa4:	6838      	ldr	r0, [r7, #0]
 800afa6:	f004 ff03 	bl	800fdb0 <USB_CoreInit>
 800afaa:	4603      	mov	r3, r0
 800afac:	2b00      	cmp	r3, #0
 800afae:	d005      	beq.n	800afbc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2202      	movs	r2, #2
 800afb4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800afb8:	2301      	movs	r3, #1
 800afba:	e0d0      	b.n	800b15e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	2100      	movs	r1, #0
 800afc2:	4618      	mov	r0, r3
 800afc4:	f005 f81a 	bl	800fffc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800afc8:	2300      	movs	r3, #0
 800afca:	73fb      	strb	r3, [r7, #15]
 800afcc:	e04a      	b.n	800b064 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800afce:	7bfa      	ldrb	r2, [r7, #15]
 800afd0:	6879      	ldr	r1, [r7, #4]
 800afd2:	4613      	mov	r3, r2
 800afd4:	00db      	lsls	r3, r3, #3
 800afd6:	1a9b      	subs	r3, r3, r2
 800afd8:	009b      	lsls	r3, r3, #2
 800afda:	440b      	add	r3, r1
 800afdc:	333d      	adds	r3, #61	; 0x3d
 800afde:	2201      	movs	r2, #1
 800afe0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800afe2:	7bfa      	ldrb	r2, [r7, #15]
 800afe4:	6879      	ldr	r1, [r7, #4]
 800afe6:	4613      	mov	r3, r2
 800afe8:	00db      	lsls	r3, r3, #3
 800afea:	1a9b      	subs	r3, r3, r2
 800afec:	009b      	lsls	r3, r3, #2
 800afee:	440b      	add	r3, r1
 800aff0:	333c      	adds	r3, #60	; 0x3c
 800aff2:	7bfa      	ldrb	r2, [r7, #15]
 800aff4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800aff6:	7bfa      	ldrb	r2, [r7, #15]
 800aff8:	7bfb      	ldrb	r3, [r7, #15]
 800affa:	b298      	uxth	r0, r3
 800affc:	6879      	ldr	r1, [r7, #4]
 800affe:	4613      	mov	r3, r2
 800b000:	00db      	lsls	r3, r3, #3
 800b002:	1a9b      	subs	r3, r3, r2
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	440b      	add	r3, r1
 800b008:	3342      	adds	r3, #66	; 0x42
 800b00a:	4602      	mov	r2, r0
 800b00c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b00e:	7bfa      	ldrb	r2, [r7, #15]
 800b010:	6879      	ldr	r1, [r7, #4]
 800b012:	4613      	mov	r3, r2
 800b014:	00db      	lsls	r3, r3, #3
 800b016:	1a9b      	subs	r3, r3, r2
 800b018:	009b      	lsls	r3, r3, #2
 800b01a:	440b      	add	r3, r1
 800b01c:	333f      	adds	r3, #63	; 0x3f
 800b01e:	2200      	movs	r2, #0
 800b020:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b022:	7bfa      	ldrb	r2, [r7, #15]
 800b024:	6879      	ldr	r1, [r7, #4]
 800b026:	4613      	mov	r3, r2
 800b028:	00db      	lsls	r3, r3, #3
 800b02a:	1a9b      	subs	r3, r3, r2
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	440b      	add	r3, r1
 800b030:	3344      	adds	r3, #68	; 0x44
 800b032:	2200      	movs	r2, #0
 800b034:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b036:	7bfa      	ldrb	r2, [r7, #15]
 800b038:	6879      	ldr	r1, [r7, #4]
 800b03a:	4613      	mov	r3, r2
 800b03c:	00db      	lsls	r3, r3, #3
 800b03e:	1a9b      	subs	r3, r3, r2
 800b040:	009b      	lsls	r3, r3, #2
 800b042:	440b      	add	r3, r1
 800b044:	3348      	adds	r3, #72	; 0x48
 800b046:	2200      	movs	r2, #0
 800b048:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b04a:	7bfa      	ldrb	r2, [r7, #15]
 800b04c:	6879      	ldr	r1, [r7, #4]
 800b04e:	4613      	mov	r3, r2
 800b050:	00db      	lsls	r3, r3, #3
 800b052:	1a9b      	subs	r3, r3, r2
 800b054:	009b      	lsls	r3, r3, #2
 800b056:	440b      	add	r3, r1
 800b058:	3350      	adds	r3, #80	; 0x50
 800b05a:	2200      	movs	r2, #0
 800b05c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b05e:	7bfb      	ldrb	r3, [r7, #15]
 800b060:	3301      	adds	r3, #1
 800b062:	73fb      	strb	r3, [r7, #15]
 800b064:	7bfa      	ldrb	r2, [r7, #15]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d3af      	bcc.n	800afce <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b06e:	2300      	movs	r3, #0
 800b070:	73fb      	strb	r3, [r7, #15]
 800b072:	e044      	b.n	800b0fe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b074:	7bfa      	ldrb	r2, [r7, #15]
 800b076:	6879      	ldr	r1, [r7, #4]
 800b078:	4613      	mov	r3, r2
 800b07a:	00db      	lsls	r3, r3, #3
 800b07c:	1a9b      	subs	r3, r3, r2
 800b07e:	009b      	lsls	r3, r3, #2
 800b080:	440b      	add	r3, r1
 800b082:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800b086:	2200      	movs	r2, #0
 800b088:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b08a:	7bfa      	ldrb	r2, [r7, #15]
 800b08c:	6879      	ldr	r1, [r7, #4]
 800b08e:	4613      	mov	r3, r2
 800b090:	00db      	lsls	r3, r3, #3
 800b092:	1a9b      	subs	r3, r3, r2
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	440b      	add	r3, r1
 800b098:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b09c:	7bfa      	ldrb	r2, [r7, #15]
 800b09e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b0a0:	7bfa      	ldrb	r2, [r7, #15]
 800b0a2:	6879      	ldr	r1, [r7, #4]
 800b0a4:	4613      	mov	r3, r2
 800b0a6:	00db      	lsls	r3, r3, #3
 800b0a8:	1a9b      	subs	r3, r3, r2
 800b0aa:	009b      	lsls	r3, r3, #2
 800b0ac:	440b      	add	r3, r1
 800b0ae:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b0b6:	7bfa      	ldrb	r2, [r7, #15]
 800b0b8:	6879      	ldr	r1, [r7, #4]
 800b0ba:	4613      	mov	r3, r2
 800b0bc:	00db      	lsls	r3, r3, #3
 800b0be:	1a9b      	subs	r3, r3, r2
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	440b      	add	r3, r1
 800b0c4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b0cc:	7bfa      	ldrb	r2, [r7, #15]
 800b0ce:	6879      	ldr	r1, [r7, #4]
 800b0d0:	4613      	mov	r3, r2
 800b0d2:	00db      	lsls	r3, r3, #3
 800b0d4:	1a9b      	subs	r3, r3, r2
 800b0d6:	009b      	lsls	r3, r3, #2
 800b0d8:	440b      	add	r3, r1
 800b0da:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b0de:	2200      	movs	r2, #0
 800b0e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b0e2:	7bfa      	ldrb	r2, [r7, #15]
 800b0e4:	6879      	ldr	r1, [r7, #4]
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	00db      	lsls	r3, r3, #3
 800b0ea:	1a9b      	subs	r3, r3, r2
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	440b      	add	r3, r1
 800b0f0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b0f8:	7bfb      	ldrb	r3, [r7, #15]
 800b0fa:	3301      	adds	r3, #1
 800b0fc:	73fb      	strb	r3, [r7, #15]
 800b0fe:	7bfa      	ldrb	r2, [r7, #15]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	429a      	cmp	r2, r3
 800b106:	d3b5      	bcc.n	800b074 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	603b      	str	r3, [r7, #0]
 800b10e:	687e      	ldr	r6, [r7, #4]
 800b110:	466d      	mov	r5, sp
 800b112:	f106 0410 	add.w	r4, r6, #16
 800b116:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b118:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b11a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b11c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b11e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b122:	e885 0003 	stmia.w	r5, {r0, r1}
 800b126:	1d33      	adds	r3, r6, #4
 800b128:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b12a:	6838      	ldr	r0, [r7, #0]
 800b12c:	f004 ffb2 	bl	8010094 <USB_DevInit>
 800b130:	4603      	mov	r3, r0
 800b132:	2b00      	cmp	r3, #0
 800b134:	d005      	beq.n	800b142 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2202      	movs	r2, #2
 800b13a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800b13e:	2301      	movs	r3, #1
 800b140:	e00d      	b.n	800b15e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2201      	movs	r2, #1
 800b14e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4618      	mov	r0, r3
 800b158:	f006 f82e 	bl	80111b8 <USB_DevDisconnect>

  return HAL_OK;
 800b15c:	2300      	movs	r3, #0
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3714      	adds	r7, #20
 800b162:	46bd      	mov	sp, r7
 800b164:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b166 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b166:	b580      	push	{r7, lr}
 800b168:	b084      	sub	sp, #16
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d101      	bne.n	800b182 <HAL_PCD_Start+0x1c>
 800b17e:	2302      	movs	r3, #2
 800b180:	e020      	b.n	800b1c4 <HAL_PCD_Start+0x5e>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2201      	movs	r2, #1
 800b186:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d109      	bne.n	800b1a6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800b196:	2b01      	cmp	r3, #1
 800b198:	d005      	beq.n	800b1a6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b19e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f004 ff04 	bl	800ffb8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f005 ffde 	bl	8011176 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b1c2:	2300      	movs	r3, #0
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3710      	adds	r7, #16
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b1cc:	b590      	push	{r4, r7, lr}
 800b1ce:	b08d      	sub	sp, #52	; 0x34
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1da:	6a3b      	ldr	r3, [r7, #32]
 800b1dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f006 f89c 	bl	8011320 <USB_GetMode>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	f040 839d 	bne.w	800b92a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f006 f800 	bl	80111fa <USB_ReadInterrupts>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	f000 8393 	beq.w	800b928 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4618      	mov	r0, r3
 800b208:	f005 fff7 	bl	80111fa <USB_ReadInterrupts>
 800b20c:	4603      	mov	r3, r0
 800b20e:	f003 0302 	and.w	r3, r3, #2
 800b212:	2b02      	cmp	r3, #2
 800b214:	d107      	bne.n	800b226 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	695a      	ldr	r2, [r3, #20]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f002 0202 	and.w	r2, r2, #2
 800b224:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4618      	mov	r0, r3
 800b22c:	f005 ffe5 	bl	80111fa <USB_ReadInterrupts>
 800b230:	4603      	mov	r3, r0
 800b232:	f003 0310 	and.w	r3, r3, #16
 800b236:	2b10      	cmp	r3, #16
 800b238:	d161      	bne.n	800b2fe <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	699a      	ldr	r2, [r3, #24]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f022 0210 	bic.w	r2, r2, #16
 800b248:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800b24a:	6a3b      	ldr	r3, [r7, #32]
 800b24c:	6a1b      	ldr	r3, [r3, #32]
 800b24e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800b250:	69bb      	ldr	r3, [r7, #24]
 800b252:	f003 020f 	and.w	r2, r3, #15
 800b256:	4613      	mov	r3, r2
 800b258:	00db      	lsls	r3, r3, #3
 800b25a:	1a9b      	subs	r3, r3, r2
 800b25c:	009b      	lsls	r3, r3, #2
 800b25e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b262:	687a      	ldr	r2, [r7, #4]
 800b264:	4413      	add	r3, r2
 800b266:	3304      	adds	r3, #4
 800b268:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800b26a:	69bb      	ldr	r3, [r7, #24]
 800b26c:	0c5b      	lsrs	r3, r3, #17
 800b26e:	f003 030f 	and.w	r3, r3, #15
 800b272:	2b02      	cmp	r3, #2
 800b274:	d124      	bne.n	800b2c0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800b276:	69ba      	ldr	r2, [r7, #24]
 800b278:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800b27c:	4013      	ands	r3, r2
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d035      	beq.n	800b2ee <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800b286:	69bb      	ldr	r3, [r7, #24]
 800b288:	091b      	lsrs	r3, r3, #4
 800b28a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b28c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b290:	b29b      	uxth	r3, r3
 800b292:	461a      	mov	r2, r3
 800b294:	6a38      	ldr	r0, [r7, #32]
 800b296:	f005 fe1c 	bl	8010ed2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	68da      	ldr	r2, [r3, #12]
 800b29e:	69bb      	ldr	r3, [r7, #24]
 800b2a0:	091b      	lsrs	r3, r3, #4
 800b2a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b2a6:	441a      	add	r2, r3
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	699a      	ldr	r2, [r3, #24]
 800b2b0:	69bb      	ldr	r3, [r7, #24]
 800b2b2:	091b      	lsrs	r3, r3, #4
 800b2b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b2b8:	441a      	add	r2, r3
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	619a      	str	r2, [r3, #24]
 800b2be:	e016      	b.n	800b2ee <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800b2c0:	69bb      	ldr	r3, [r7, #24]
 800b2c2:	0c5b      	lsrs	r3, r3, #17
 800b2c4:	f003 030f 	and.w	r3, r3, #15
 800b2c8:	2b06      	cmp	r3, #6
 800b2ca:	d110      	bne.n	800b2ee <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b2d2:	2208      	movs	r2, #8
 800b2d4:	4619      	mov	r1, r3
 800b2d6:	6a38      	ldr	r0, [r7, #32]
 800b2d8:	f005 fdfb 	bl	8010ed2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	699a      	ldr	r2, [r3, #24]
 800b2e0:	69bb      	ldr	r3, [r7, #24]
 800b2e2:	091b      	lsrs	r3, r3, #4
 800b2e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b2e8:	441a      	add	r2, r3
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	699a      	ldr	r2, [r3, #24]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f042 0210 	orr.w	r2, r2, #16
 800b2fc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	4618      	mov	r0, r3
 800b304:	f005 ff79 	bl	80111fa <USB_ReadInterrupts>
 800b308:	4603      	mov	r3, r0
 800b30a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b30e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b312:	d16e      	bne.n	800b3f2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800b314:	2300      	movs	r3, #0
 800b316:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4618      	mov	r0, r3
 800b31e:	f005 ff7f 	bl	8011220 <USB_ReadDevAllOutEpInterrupt>
 800b322:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800b324:	e062      	b.n	800b3ec <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b328:	f003 0301 	and.w	r3, r3, #1
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d057      	beq.n	800b3e0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b336:	b2d2      	uxtb	r2, r2
 800b338:	4611      	mov	r1, r2
 800b33a:	4618      	mov	r0, r3
 800b33c:	f005 ffa4 	bl	8011288 <USB_ReadDevOutEPInterrupt>
 800b340:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	f003 0301 	and.w	r3, r3, #1
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d00c      	beq.n	800b366 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b34e:	015a      	lsls	r2, r3, #5
 800b350:	69fb      	ldr	r3, [r7, #28]
 800b352:	4413      	add	r3, r2
 800b354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b358:	461a      	mov	r2, r3
 800b35a:	2301      	movs	r3, #1
 800b35c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b35e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 fdb1 	bl	800bec8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	f003 0308 	and.w	r3, r3, #8
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d00c      	beq.n	800b38a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b372:	015a      	lsls	r2, r3, #5
 800b374:	69fb      	ldr	r3, [r7, #28]
 800b376:	4413      	add	r3, r2
 800b378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b37c:	461a      	mov	r2, r3
 800b37e:	2308      	movs	r3, #8
 800b380:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b382:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f000 feab 	bl	800c0e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	f003 0310 	and.w	r3, r3, #16
 800b390:	2b00      	cmp	r3, #0
 800b392:	d008      	beq.n	800b3a6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b396:	015a      	lsls	r2, r3, #5
 800b398:	69fb      	ldr	r3, [r7, #28]
 800b39a:	4413      	add	r3, r2
 800b39c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	2310      	movs	r3, #16
 800b3a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	f003 0320 	and.w	r3, r3, #32
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d008      	beq.n	800b3c2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b2:	015a      	lsls	r2, r3, #5
 800b3b4:	69fb      	ldr	r3, [r7, #28]
 800b3b6:	4413      	add	r3, r2
 800b3b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3bc:	461a      	mov	r2, r3
 800b3be:	2320      	movs	r3, #32
 800b3c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d009      	beq.n	800b3e0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ce:	015a      	lsls	r2, r3, #5
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	4413      	add	r3, r2
 800b3d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3d8:	461a      	mov	r2, r3
 800b3da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b3de:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3e8:	085b      	lsrs	r3, r3, #1
 800b3ea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d199      	bne.n	800b326 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f005 feff 	bl	80111fa <USB_ReadInterrupts>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b402:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b406:	f040 80c0 	bne.w	800b58a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	4618      	mov	r0, r3
 800b410:	f005 ff20 	bl	8011254 <USB_ReadDevAllInEpInterrupt>
 800b414:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800b416:	2300      	movs	r3, #0
 800b418:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800b41a:	e0b2      	b.n	800b582 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b41e:	f003 0301 	and.w	r3, r3, #1
 800b422:	2b00      	cmp	r3, #0
 800b424:	f000 80a7 	beq.w	800b576 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b42e:	b2d2      	uxtb	r2, r2
 800b430:	4611      	mov	r1, r2
 800b432:	4618      	mov	r0, r3
 800b434:	f005 ff46 	bl	80112c4 <USB_ReadDevInEPInterrupt>
 800b438:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	f003 0301 	and.w	r3, r3, #1
 800b440:	2b00      	cmp	r3, #0
 800b442:	d057      	beq.n	800b4f4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b446:	f003 030f 	and.w	r3, r3, #15
 800b44a:	2201      	movs	r2, #1
 800b44c:	fa02 f303 	lsl.w	r3, r2, r3
 800b450:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b452:	69fb      	ldr	r3, [r7, #28]
 800b454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	43db      	mvns	r3, r3
 800b45e:	69f9      	ldr	r1, [r7, #28]
 800b460:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b464:	4013      	ands	r3, r2
 800b466:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46a:	015a      	lsls	r2, r3, #5
 800b46c:	69fb      	ldr	r3, [r7, #28]
 800b46e:	4413      	add	r3, r2
 800b470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b474:	461a      	mov	r2, r3
 800b476:	2301      	movs	r3, #1
 800b478:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	691b      	ldr	r3, [r3, #16]
 800b47e:	2b01      	cmp	r3, #1
 800b480:	d132      	bne.n	800b4e8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b482:	6879      	ldr	r1, [r7, #4]
 800b484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b486:	4613      	mov	r3, r2
 800b488:	00db      	lsls	r3, r3, #3
 800b48a:	1a9b      	subs	r3, r3, r2
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	440b      	add	r3, r1
 800b490:	3348      	adds	r3, #72	; 0x48
 800b492:	6819      	ldr	r1, [r3, #0]
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b498:	4613      	mov	r3, r2
 800b49a:	00db      	lsls	r3, r3, #3
 800b49c:	1a9b      	subs	r3, r3, r2
 800b49e:	009b      	lsls	r3, r3, #2
 800b4a0:	4403      	add	r3, r0
 800b4a2:	3344      	adds	r3, #68	; 0x44
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4419      	add	r1, r3
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	00db      	lsls	r3, r3, #3
 800b4b0:	1a9b      	subs	r3, r3, r2
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	4403      	add	r3, r0
 800b4b6:	3348      	adds	r3, #72	; 0x48
 800b4b8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d113      	bne.n	800b4e8 <HAL_PCD_IRQHandler+0x31c>
 800b4c0:	6879      	ldr	r1, [r7, #4]
 800b4c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4c4:	4613      	mov	r3, r2
 800b4c6:	00db      	lsls	r3, r3, #3
 800b4c8:	1a9b      	subs	r3, r3, r2
 800b4ca:	009b      	lsls	r3, r3, #2
 800b4cc:	440b      	add	r3, r1
 800b4ce:	3350      	adds	r3, #80	; 0x50
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d108      	bne.n	800b4e8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6818      	ldr	r0, [r3, #0]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	2101      	movs	r1, #1
 800b4e4:	f005 ff4e 	bl	8011384 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ea:	b2db      	uxtb	r3, r3
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f00e f8e3 	bl	80196ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b4f4:	693b      	ldr	r3, [r7, #16]
 800b4f6:	f003 0308 	and.w	r3, r3, #8
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d008      	beq.n	800b510 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b500:	015a      	lsls	r2, r3, #5
 800b502:	69fb      	ldr	r3, [r7, #28]
 800b504:	4413      	add	r3, r2
 800b506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b50a:	461a      	mov	r2, r3
 800b50c:	2308      	movs	r3, #8
 800b50e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	f003 0310 	and.w	r3, r3, #16
 800b516:	2b00      	cmp	r3, #0
 800b518:	d008      	beq.n	800b52c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b51c:	015a      	lsls	r2, r3, #5
 800b51e:	69fb      	ldr	r3, [r7, #28]
 800b520:	4413      	add	r3, r2
 800b522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b526:	461a      	mov	r2, r3
 800b528:	2310      	movs	r3, #16
 800b52a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b532:	2b00      	cmp	r3, #0
 800b534:	d008      	beq.n	800b548 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b538:	015a      	lsls	r2, r3, #5
 800b53a:	69fb      	ldr	r3, [r7, #28]
 800b53c:	4413      	add	r3, r2
 800b53e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b542:	461a      	mov	r2, r3
 800b544:	2340      	movs	r3, #64	; 0x40
 800b546:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	f003 0302 	and.w	r3, r3, #2
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d008      	beq.n	800b564 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b554:	015a      	lsls	r2, r3, #5
 800b556:	69fb      	ldr	r3, [r7, #28]
 800b558:	4413      	add	r3, r2
 800b55a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b55e:	461a      	mov	r2, r3
 800b560:	2302      	movs	r3, #2
 800b562:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d003      	beq.n	800b576 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b56e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f000 fc1b 	bl	800bdac <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b578:	3301      	adds	r3, #1
 800b57a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b57e:	085b      	lsrs	r3, r3, #1
 800b580:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b584:	2b00      	cmp	r3, #0
 800b586:	f47f af49 	bne.w	800b41c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4618      	mov	r0, r3
 800b590:	f005 fe33 	bl	80111fa <USB_ReadInterrupts>
 800b594:	4603      	mov	r3, r0
 800b596:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b59a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b59e:	d122      	bne.n	800b5e6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b5a0:	69fb      	ldr	r3, [r7, #28]
 800b5a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	69fa      	ldr	r2, [r7, #28]
 800b5aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b5ae:	f023 0301 	bic.w	r3, r3, #1
 800b5b2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d108      	bne.n	800b5d0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b5c6:	2100      	movs	r1, #0
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f000 fe27 	bl	800c21c <HAL_PCDEx_LPM_Callback>
 800b5ce:	e002      	b.n	800b5d6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f00e f8e9 	bl	80197a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	695a      	ldr	r2, [r3, #20]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b5e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f005 fe05 	bl	80111fa <USB_ReadInterrupts>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5fa:	d112      	bne.n	800b622 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b5fc:	69fb      	ldr	r3, [r7, #28]
 800b5fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b602:	689b      	ldr	r3, [r3, #8]
 800b604:	f003 0301 	and.w	r3, r3, #1
 800b608:	2b01      	cmp	r3, #1
 800b60a:	d102      	bne.n	800b612 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f00e f8a5 	bl	801975c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	695a      	ldr	r2, [r3, #20]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800b620:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	4618      	mov	r0, r3
 800b628:	f005 fde7 	bl	80111fa <USB_ReadInterrupts>
 800b62c:	4603      	mov	r3, r0
 800b62e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b636:	f040 80c7 	bne.w	800b7c8 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b63a:	69fb      	ldr	r3, [r7, #28]
 800b63c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	69fa      	ldr	r2, [r7, #28]
 800b644:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b648:	f023 0301 	bic.w	r3, r3, #1
 800b64c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	2110      	movs	r1, #16
 800b654:	4618      	mov	r0, r3
 800b656:	f004 fe81 	bl	801035c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b65a:	2300      	movs	r3, #0
 800b65c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b65e:	e056      	b.n	800b70e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b662:	015a      	lsls	r2, r3, #5
 800b664:	69fb      	ldr	r3, [r7, #28]
 800b666:	4413      	add	r3, r2
 800b668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b66c:	461a      	mov	r2, r3
 800b66e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b672:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b676:	015a      	lsls	r2, r3, #5
 800b678:	69fb      	ldr	r3, [r7, #28]
 800b67a:	4413      	add	r3, r2
 800b67c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b684:	0151      	lsls	r1, r2, #5
 800b686:	69fa      	ldr	r2, [r7, #28]
 800b688:	440a      	add	r2, r1
 800b68a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b68e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b692:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b696:	015a      	lsls	r2, r3, #5
 800b698:	69fb      	ldr	r3, [r7, #28]
 800b69a:	4413      	add	r3, r2
 800b69c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6a4:	0151      	lsls	r1, r2, #5
 800b6a6:	69fa      	ldr	r2, [r7, #28]
 800b6a8:	440a      	add	r2, r1
 800b6aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b6b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b6:	015a      	lsls	r2, r3, #5
 800b6b8:	69fb      	ldr	r3, [r7, #28]
 800b6ba:	4413      	add	r3, r2
 800b6bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b6c6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ca:	015a      	lsls	r2, r3, #5
 800b6cc:	69fb      	ldr	r3, [r7, #28]
 800b6ce:	4413      	add	r3, r2
 800b6d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6d8:	0151      	lsls	r1, r2, #5
 800b6da:	69fa      	ldr	r2, [r7, #28]
 800b6dc:	440a      	add	r2, r1
 800b6de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b6e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ea:	015a      	lsls	r2, r3, #5
 800b6ec:	69fb      	ldr	r3, [r7, #28]
 800b6ee:	4413      	add	r3, r2
 800b6f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6f8:	0151      	lsls	r1, r2, #5
 800b6fa:	69fa      	ldr	r2, [r7, #28]
 800b6fc:	440a      	add	r2, r1
 800b6fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b702:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b706:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b70a:	3301      	adds	r3, #1
 800b70c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b714:	429a      	cmp	r2, r3
 800b716:	d3a3      	bcc.n	800b660 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b718:	69fb      	ldr	r3, [r7, #28]
 800b71a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b71e:	69db      	ldr	r3, [r3, #28]
 800b720:	69fa      	ldr	r2, [r7, #28]
 800b722:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b726:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800b72a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b730:	2b00      	cmp	r3, #0
 800b732:	d016      	beq.n	800b762 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b734:	69fb      	ldr	r3, [r7, #28]
 800b736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b73a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b73e:	69fa      	ldr	r2, [r7, #28]
 800b740:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b744:	f043 030b 	orr.w	r3, r3, #11
 800b748:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b74c:	69fb      	ldr	r3, [r7, #28]
 800b74e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b754:	69fa      	ldr	r2, [r7, #28]
 800b756:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b75a:	f043 030b 	orr.w	r3, r3, #11
 800b75e:	6453      	str	r3, [r2, #68]	; 0x44
 800b760:	e015      	b.n	800b78e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b762:	69fb      	ldr	r3, [r7, #28]
 800b764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b768:	695b      	ldr	r3, [r3, #20]
 800b76a:	69fa      	ldr	r2, [r7, #28]
 800b76c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b770:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b774:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800b778:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b77a:	69fb      	ldr	r3, [r7, #28]
 800b77c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b780:	691b      	ldr	r3, [r3, #16]
 800b782:	69fa      	ldr	r2, [r7, #28]
 800b784:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b788:	f043 030b 	orr.w	r3, r3, #11
 800b78c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b78e:	69fb      	ldr	r3, [r7, #28]
 800b790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	69fa      	ldr	r2, [r7, #28]
 800b798:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b79c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b7a0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6818      	ldr	r0, [r3, #0]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	691b      	ldr	r3, [r3, #16]
 800b7aa:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	f005 fde6 	bl	8011384 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	695a      	ldr	r2, [r3, #20]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800b7c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f005 fd14 	bl	80111fa <USB_ReadInterrupts>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b7d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7dc:	d124      	bne.n	800b828 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f005 fdaa 	bl	801133c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f004 fe12 	bl	8010416 <USB_GetDevSpeed>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681c      	ldr	r4, [r3, #0]
 800b7fe:	f001 f995 	bl	800cb2c <HAL_RCC_GetHCLKFreq>
 800b802:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b808:	b2db      	uxtb	r3, r3
 800b80a:	461a      	mov	r2, r3
 800b80c:	4620      	mov	r0, r4
 800b80e:	f004 fb31 	bl	800fe74 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f00d ff79 	bl	801970a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	695a      	ldr	r2, [r3, #20]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800b826:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	4618      	mov	r0, r3
 800b82e:	f005 fce4 	bl	80111fa <USB_ReadInterrupts>
 800b832:	4603      	mov	r3, r0
 800b834:	f003 0308 	and.w	r3, r3, #8
 800b838:	2b08      	cmp	r3, #8
 800b83a:	d10a      	bne.n	800b852 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f00d ff56 	bl	80196ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	695a      	ldr	r2, [r3, #20]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f002 0208 	and.w	r2, r2, #8
 800b850:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4618      	mov	r0, r3
 800b858:	f005 fccf 	bl	80111fa <USB_ReadInterrupts>
 800b85c:	4603      	mov	r3, r0
 800b85e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b862:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b866:	d10f      	bne.n	800b888 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800b868:	2300      	movs	r3, #0
 800b86a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86e:	b2db      	uxtb	r3, r3
 800b870:	4619      	mov	r1, r3
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f00d ffb8 	bl	80197e8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	695a      	ldr	r2, [r3, #20]
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800b886:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	4618      	mov	r0, r3
 800b88e:	f005 fcb4 	bl	80111fa <USB_ReadInterrupts>
 800b892:	4603      	mov	r3, r0
 800b894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b898:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b89c:	d10f      	bne.n	800b8be <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a4:	b2db      	uxtb	r3, r3
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f00d ff8b 	bl	80197c4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	695a      	ldr	r2, [r3, #20]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800b8bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f005 fc99 	bl	80111fa <USB_ReadInterrupts>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b8ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8d2:	d10a      	bne.n	800b8ea <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f00d ff99 	bl	801980c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	695a      	ldr	r2, [r3, #20]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800b8e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f005 fc83 	bl	80111fa <USB_ReadInterrupts>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	f003 0304 	and.w	r3, r3, #4
 800b8fa:	2b04      	cmp	r3, #4
 800b8fc:	d115      	bne.n	800b92a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b906:	69bb      	ldr	r3, [r7, #24]
 800b908:	f003 0304 	and.w	r3, r3, #4
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d002      	beq.n	800b916 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f00d ff89 	bl	8019828 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	6859      	ldr	r1, [r3, #4]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	69ba      	ldr	r2, [r7, #24]
 800b922:	430a      	orrs	r2, r1
 800b924:	605a      	str	r2, [r3, #4]
 800b926:	e000      	b.n	800b92a <HAL_PCD_IRQHandler+0x75e>
      return;
 800b928:	bf00      	nop
    }
  }
}
 800b92a:	3734      	adds	r7, #52	; 0x34
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd90      	pop	{r4, r7, pc}

0800b930 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b082      	sub	sp, #8
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	460b      	mov	r3, r1
 800b93a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b942:	2b01      	cmp	r3, #1
 800b944:	d101      	bne.n	800b94a <HAL_PCD_SetAddress+0x1a>
 800b946:	2302      	movs	r3, #2
 800b948:	e013      	b.n	800b972 <HAL_PCD_SetAddress+0x42>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2201      	movs	r2, #1
 800b94e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	78fa      	ldrb	r2, [r7, #3]
 800b956:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	78fa      	ldrb	r2, [r7, #3]
 800b960:	4611      	mov	r1, r2
 800b962:	4618      	mov	r0, r3
 800b964:	f005 fbe1 	bl	801112a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2200      	movs	r2, #0
 800b96c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b970:	2300      	movs	r3, #0
}
 800b972:	4618      	mov	r0, r3
 800b974:	3708      	adds	r7, #8
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}

0800b97a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b97a:	b580      	push	{r7, lr}
 800b97c:	b084      	sub	sp, #16
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]
 800b982:	4608      	mov	r0, r1
 800b984:	4611      	mov	r1, r2
 800b986:	461a      	mov	r2, r3
 800b988:	4603      	mov	r3, r0
 800b98a:	70fb      	strb	r3, [r7, #3]
 800b98c:	460b      	mov	r3, r1
 800b98e:	803b      	strh	r3, [r7, #0]
 800b990:	4613      	mov	r3, r2
 800b992:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b994:	2300      	movs	r3, #0
 800b996:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b998:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	da0f      	bge.n	800b9c0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b9a0:	78fb      	ldrb	r3, [r7, #3]
 800b9a2:	f003 020f 	and.w	r2, r3, #15
 800b9a6:	4613      	mov	r3, r2
 800b9a8:	00db      	lsls	r3, r3, #3
 800b9aa:	1a9b      	subs	r3, r3, r2
 800b9ac:	009b      	lsls	r3, r3, #2
 800b9ae:	3338      	adds	r3, #56	; 0x38
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	4413      	add	r3, r2
 800b9b4:	3304      	adds	r3, #4
 800b9b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	705a      	strb	r2, [r3, #1]
 800b9be:	e00f      	b.n	800b9e0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b9c0:	78fb      	ldrb	r3, [r7, #3]
 800b9c2:	f003 020f 	and.w	r2, r3, #15
 800b9c6:	4613      	mov	r3, r2
 800b9c8:	00db      	lsls	r3, r3, #3
 800b9ca:	1a9b      	subs	r3, r3, r2
 800b9cc:	009b      	lsls	r3, r3, #2
 800b9ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b9d2:	687a      	ldr	r2, [r7, #4]
 800b9d4:	4413      	add	r3, r2
 800b9d6:	3304      	adds	r3, #4
 800b9d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b9e0:	78fb      	ldrb	r3, [r7, #3]
 800b9e2:	f003 030f 	and.w	r3, r3, #15
 800b9e6:	b2da      	uxtb	r2, r3
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b9ec:	883a      	ldrh	r2, [r7, #0]
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	78ba      	ldrb	r2, [r7, #2]
 800b9f6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	785b      	ldrb	r3, [r3, #1]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d004      	beq.n	800ba0a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	781b      	ldrb	r3, [r3, #0]
 800ba04:	b29a      	uxth	r2, r3
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800ba0a:	78bb      	ldrb	r3, [r7, #2]
 800ba0c:	2b02      	cmp	r3, #2
 800ba0e:	d102      	bne.n	800ba16 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	2200      	movs	r2, #0
 800ba14:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	d101      	bne.n	800ba24 <HAL_PCD_EP_Open+0xaa>
 800ba20:	2302      	movs	r3, #2
 800ba22:	e00e      	b.n	800ba42 <HAL_PCD_EP_Open+0xc8>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2201      	movs	r2, #1
 800ba28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	68f9      	ldr	r1, [r7, #12]
 800ba32:	4618      	mov	r0, r3
 800ba34:	f004 fd14 	bl	8010460 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800ba40:	7afb      	ldrb	r3, [r7, #11]
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3710      	adds	r7, #16
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}

0800ba4a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ba4a:	b580      	push	{r7, lr}
 800ba4c:	b084      	sub	sp, #16
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	6078      	str	r0, [r7, #4]
 800ba52:	460b      	mov	r3, r1
 800ba54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ba56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	da0f      	bge.n	800ba7e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ba5e:	78fb      	ldrb	r3, [r7, #3]
 800ba60:	f003 020f 	and.w	r2, r3, #15
 800ba64:	4613      	mov	r3, r2
 800ba66:	00db      	lsls	r3, r3, #3
 800ba68:	1a9b      	subs	r3, r3, r2
 800ba6a:	009b      	lsls	r3, r3, #2
 800ba6c:	3338      	adds	r3, #56	; 0x38
 800ba6e:	687a      	ldr	r2, [r7, #4]
 800ba70:	4413      	add	r3, r2
 800ba72:	3304      	adds	r3, #4
 800ba74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	2201      	movs	r2, #1
 800ba7a:	705a      	strb	r2, [r3, #1]
 800ba7c:	e00f      	b.n	800ba9e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ba7e:	78fb      	ldrb	r3, [r7, #3]
 800ba80:	f003 020f 	and.w	r2, r3, #15
 800ba84:	4613      	mov	r3, r2
 800ba86:	00db      	lsls	r3, r3, #3
 800ba88:	1a9b      	subs	r3, r3, r2
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ba90:	687a      	ldr	r2, [r7, #4]
 800ba92:	4413      	add	r3, r2
 800ba94:	3304      	adds	r3, #4
 800ba96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800ba9e:	78fb      	ldrb	r3, [r7, #3]
 800baa0:	f003 030f 	and.w	r3, r3, #15
 800baa4:	b2da      	uxtb	r2, r3
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	d101      	bne.n	800bab8 <HAL_PCD_EP_Close+0x6e>
 800bab4:	2302      	movs	r3, #2
 800bab6:	e00e      	b.n	800bad6 <HAL_PCD_EP_Close+0x8c>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2201      	movs	r2, #1
 800babc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	68f9      	ldr	r1, [r7, #12]
 800bac6:	4618      	mov	r0, r3
 800bac8:	f004 fd52 	bl	8010570 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2200      	movs	r2, #0
 800bad0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800bad4:	2300      	movs	r3, #0
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3710      	adds	r7, #16
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}

0800bade <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bade:	b580      	push	{r7, lr}
 800bae0:	b086      	sub	sp, #24
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	60f8      	str	r0, [r7, #12]
 800bae6:	607a      	str	r2, [r7, #4]
 800bae8:	603b      	str	r3, [r7, #0]
 800baea:	460b      	mov	r3, r1
 800baec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800baee:	7afb      	ldrb	r3, [r7, #11]
 800baf0:	f003 020f 	and.w	r2, r3, #15
 800baf4:	4613      	mov	r3, r2
 800baf6:	00db      	lsls	r3, r3, #3
 800baf8:	1a9b      	subs	r3, r3, r2
 800bafa:	009b      	lsls	r3, r3, #2
 800bafc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800bb00:	68fa      	ldr	r2, [r7, #12]
 800bb02:	4413      	add	r3, r2
 800bb04:	3304      	adds	r3, #4
 800bb06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	687a      	ldr	r2, [r7, #4]
 800bb0c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	683a      	ldr	r2, [r7, #0]
 800bb12:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	2200      	movs	r2, #0
 800bb18:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bb20:	7afb      	ldrb	r3, [r7, #11]
 800bb22:	f003 030f 	and.w	r3, r3, #15
 800bb26:	b2da      	uxtb	r2, r3
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	691b      	ldr	r3, [r3, #16]
 800bb30:	2b01      	cmp	r3, #1
 800bb32:	d102      	bne.n	800bb3a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800bb34:	687a      	ldr	r2, [r7, #4]
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800bb3a:	7afb      	ldrb	r3, [r7, #11]
 800bb3c:	f003 030f 	and.w	r3, r3, #15
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d109      	bne.n	800bb58 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	6818      	ldr	r0, [r3, #0]
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	691b      	ldr	r3, [r3, #16]
 800bb4c:	b2db      	uxtb	r3, r3
 800bb4e:	461a      	mov	r2, r3
 800bb50:	6979      	ldr	r1, [r7, #20]
 800bb52:	f005 f82d 	bl	8010bb0 <USB_EP0StartXfer>
 800bb56:	e008      	b.n	800bb6a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	6818      	ldr	r0, [r3, #0]
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	691b      	ldr	r3, [r3, #16]
 800bb60:	b2db      	uxtb	r3, r3
 800bb62:	461a      	mov	r2, r3
 800bb64:	6979      	ldr	r1, [r7, #20]
 800bb66:	f004 fddf 	bl	8010728 <USB_EPStartXfer>
  }

  return HAL_OK;
 800bb6a:	2300      	movs	r3, #0
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3718      	adds	r7, #24
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bb74:	b480      	push	{r7}
 800bb76:	b083      	sub	sp, #12
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800bb80:	78fb      	ldrb	r3, [r7, #3]
 800bb82:	f003 020f 	and.w	r2, r3, #15
 800bb86:	6879      	ldr	r1, [r7, #4]
 800bb88:	4613      	mov	r3, r2
 800bb8a:	00db      	lsls	r3, r3, #3
 800bb8c:	1a9b      	subs	r3, r3, r2
 800bb8e:	009b      	lsls	r3, r3, #2
 800bb90:	440b      	add	r3, r1
 800bb92:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800bb96:	681b      	ldr	r3, [r3, #0]
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	370c      	adds	r7, #12
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba2:	4770      	bx	lr

0800bba4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b086      	sub	sp, #24
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	60f8      	str	r0, [r7, #12]
 800bbac:	607a      	str	r2, [r7, #4]
 800bbae:	603b      	str	r3, [r7, #0]
 800bbb0:	460b      	mov	r3, r1
 800bbb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bbb4:	7afb      	ldrb	r3, [r7, #11]
 800bbb6:	f003 020f 	and.w	r2, r3, #15
 800bbba:	4613      	mov	r3, r2
 800bbbc:	00db      	lsls	r3, r3, #3
 800bbbe:	1a9b      	subs	r3, r3, r2
 800bbc0:	009b      	lsls	r3, r3, #2
 800bbc2:	3338      	adds	r3, #56	; 0x38
 800bbc4:	68fa      	ldr	r2, [r7, #12]
 800bbc6:	4413      	add	r3, r2
 800bbc8:	3304      	adds	r3, #4
 800bbca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	687a      	ldr	r2, [r7, #4]
 800bbd0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	683a      	ldr	r2, [r7, #0]
 800bbd6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bbe4:	7afb      	ldrb	r3, [r7, #11]
 800bbe6:	f003 030f 	and.w	r3, r3, #15
 800bbea:	b2da      	uxtb	r2, r3
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	691b      	ldr	r3, [r3, #16]
 800bbf4:	2b01      	cmp	r3, #1
 800bbf6:	d102      	bne.n	800bbfe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800bbf8:	687a      	ldr	r2, [r7, #4]
 800bbfa:	697b      	ldr	r3, [r7, #20]
 800bbfc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800bbfe:	7afb      	ldrb	r3, [r7, #11]
 800bc00:	f003 030f 	and.w	r3, r3, #15
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d109      	bne.n	800bc1c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	6818      	ldr	r0, [r3, #0]
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	691b      	ldr	r3, [r3, #16]
 800bc10:	b2db      	uxtb	r3, r3
 800bc12:	461a      	mov	r2, r3
 800bc14:	6979      	ldr	r1, [r7, #20]
 800bc16:	f004 ffcb 	bl	8010bb0 <USB_EP0StartXfer>
 800bc1a:	e008      	b.n	800bc2e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	6818      	ldr	r0, [r3, #0]
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	691b      	ldr	r3, [r3, #16]
 800bc24:	b2db      	uxtb	r3, r3
 800bc26:	461a      	mov	r2, r3
 800bc28:	6979      	ldr	r1, [r7, #20]
 800bc2a:	f004 fd7d 	bl	8010728 <USB_EPStartXfer>
  }

  return HAL_OK;
 800bc2e:	2300      	movs	r3, #0
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3718      	adds	r7, #24
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b084      	sub	sp, #16
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
 800bc40:	460b      	mov	r3, r1
 800bc42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800bc44:	78fb      	ldrb	r3, [r7, #3]
 800bc46:	f003 020f 	and.w	r2, r3, #15
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d901      	bls.n	800bc56 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800bc52:	2301      	movs	r3, #1
 800bc54:	e050      	b.n	800bcf8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bc56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	da0f      	bge.n	800bc7e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bc5e:	78fb      	ldrb	r3, [r7, #3]
 800bc60:	f003 020f 	and.w	r2, r3, #15
 800bc64:	4613      	mov	r3, r2
 800bc66:	00db      	lsls	r3, r3, #3
 800bc68:	1a9b      	subs	r3, r3, r2
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	3338      	adds	r3, #56	; 0x38
 800bc6e:	687a      	ldr	r2, [r7, #4]
 800bc70:	4413      	add	r3, r2
 800bc72:	3304      	adds	r3, #4
 800bc74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	2201      	movs	r2, #1
 800bc7a:	705a      	strb	r2, [r3, #1]
 800bc7c:	e00d      	b.n	800bc9a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800bc7e:	78fa      	ldrb	r2, [r7, #3]
 800bc80:	4613      	mov	r3, r2
 800bc82:	00db      	lsls	r3, r3, #3
 800bc84:	1a9b      	subs	r3, r3, r2
 800bc86:	009b      	lsls	r3, r3, #2
 800bc88:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800bc8c:	687a      	ldr	r2, [r7, #4]
 800bc8e:	4413      	add	r3, r2
 800bc90:	3304      	adds	r3, #4
 800bc92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2200      	movs	r2, #0
 800bc98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bca0:	78fb      	ldrb	r3, [r7, #3]
 800bca2:	f003 030f 	and.w	r3, r3, #15
 800bca6:	b2da      	uxtb	r2, r3
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d101      	bne.n	800bcba <HAL_PCD_EP_SetStall+0x82>
 800bcb6:	2302      	movs	r3, #2
 800bcb8:	e01e      	b.n	800bcf8 <HAL_PCD_EP_SetStall+0xc0>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	68f9      	ldr	r1, [r7, #12]
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f005 f95a 	bl	8010f82 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800bcce:	78fb      	ldrb	r3, [r7, #3]
 800bcd0:	f003 030f 	and.w	r3, r3, #15
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d10a      	bne.n	800bcee <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6818      	ldr	r0, [r3, #0]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	691b      	ldr	r3, [r3, #16]
 800bce0:	b2d9      	uxtb	r1, r3
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bce8:	461a      	mov	r2, r3
 800bcea:	f005 fb4b 	bl	8011384 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800bcf6:	2300      	movs	r3, #0
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3710      	adds	r7, #16
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}

0800bd00 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b084      	sub	sp, #16
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
 800bd08:	460b      	mov	r3, r1
 800bd0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800bd0c:	78fb      	ldrb	r3, [r7, #3]
 800bd0e:	f003 020f 	and.w	r2, r3, #15
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d901      	bls.n	800bd1e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	e042      	b.n	800bda4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bd1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	da0f      	bge.n	800bd46 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bd26:	78fb      	ldrb	r3, [r7, #3]
 800bd28:	f003 020f 	and.w	r2, r3, #15
 800bd2c:	4613      	mov	r3, r2
 800bd2e:	00db      	lsls	r3, r3, #3
 800bd30:	1a9b      	subs	r3, r3, r2
 800bd32:	009b      	lsls	r3, r3, #2
 800bd34:	3338      	adds	r3, #56	; 0x38
 800bd36:	687a      	ldr	r2, [r7, #4]
 800bd38:	4413      	add	r3, r2
 800bd3a:	3304      	adds	r3, #4
 800bd3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2201      	movs	r2, #1
 800bd42:	705a      	strb	r2, [r3, #1]
 800bd44:	e00f      	b.n	800bd66 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bd46:	78fb      	ldrb	r3, [r7, #3]
 800bd48:	f003 020f 	and.w	r2, r3, #15
 800bd4c:	4613      	mov	r3, r2
 800bd4e:	00db      	lsls	r3, r3, #3
 800bd50:	1a9b      	subs	r3, r3, r2
 800bd52:	009b      	lsls	r3, r3, #2
 800bd54:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800bd58:	687a      	ldr	r2, [r7, #4]
 800bd5a:	4413      	add	r3, r2
 800bd5c:	3304      	adds	r3, #4
 800bd5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2200      	movs	r2, #0
 800bd64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bd6c:	78fb      	ldrb	r3, [r7, #3]
 800bd6e:	f003 030f 	and.w	r3, r3, #15
 800bd72:	b2da      	uxtb	r2, r3
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800bd7e:	2b01      	cmp	r3, #1
 800bd80:	d101      	bne.n	800bd86 <HAL_PCD_EP_ClrStall+0x86>
 800bd82:	2302      	movs	r3, #2
 800bd84:	e00e      	b.n	800bda4 <HAL_PCD_EP_ClrStall+0xa4>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2201      	movs	r2, #1
 800bd8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	68f9      	ldr	r1, [r7, #12]
 800bd94:	4618      	mov	r0, r3
 800bd96:	f005 f962 	bl	801105e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800bda2:	2300      	movs	r3, #0
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3710      	adds	r7, #16
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b08a      	sub	sp, #40	; 0x28
 800bdb0:	af02      	add	r7, sp, #8
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800bdc0:	683a      	ldr	r2, [r7, #0]
 800bdc2:	4613      	mov	r3, r2
 800bdc4:	00db      	lsls	r3, r3, #3
 800bdc6:	1a9b      	subs	r3, r3, r2
 800bdc8:	009b      	lsls	r3, r3, #2
 800bdca:	3338      	adds	r3, #56	; 0x38
 800bdcc:	687a      	ldr	r2, [r7, #4]
 800bdce:	4413      	add	r3, r2
 800bdd0:	3304      	adds	r3, #4
 800bdd2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	699a      	ldr	r2, [r3, #24]
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	695b      	ldr	r3, [r3, #20]
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d901      	bls.n	800bde4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800bde0:	2301      	movs	r3, #1
 800bde2:	e06c      	b.n	800bebe <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	695a      	ldr	r2, [r3, #20]
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	699b      	ldr	r3, [r3, #24]
 800bdec:	1ad3      	subs	r3, r2, r3
 800bdee:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	689b      	ldr	r3, [r3, #8]
 800bdf4:	69fa      	ldr	r2, [r7, #28]
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d902      	bls.n	800be00 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	689b      	ldr	r3, [r3, #8]
 800bdfe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800be00:	69fb      	ldr	r3, [r7, #28]
 800be02:	3303      	adds	r3, #3
 800be04:	089b      	lsrs	r3, r3, #2
 800be06:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800be08:	e02b      	b.n	800be62 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	695a      	ldr	r2, [r3, #20]
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	699b      	ldr	r3, [r3, #24]
 800be12:	1ad3      	subs	r3, r2, r3
 800be14:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	689b      	ldr	r3, [r3, #8]
 800be1a:	69fa      	ldr	r2, [r7, #28]
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d902      	bls.n	800be26 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	689b      	ldr	r3, [r3, #8]
 800be24:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800be26:	69fb      	ldr	r3, [r7, #28]
 800be28:	3303      	adds	r3, #3
 800be2a:	089b      	lsrs	r3, r3, #2
 800be2c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	68d9      	ldr	r1, [r3, #12]
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	b2da      	uxtb	r2, r3
 800be36:	69fb      	ldr	r3, [r7, #28]
 800be38:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800be3e:	b2db      	uxtb	r3, r3
 800be40:	9300      	str	r3, [sp, #0]
 800be42:	4603      	mov	r3, r0
 800be44:	6978      	ldr	r0, [r7, #20]
 800be46:	f005 f806 	bl	8010e56 <USB_WritePacket>

    ep->xfer_buff  += len;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	68da      	ldr	r2, [r3, #12]
 800be4e:	69fb      	ldr	r3, [r7, #28]
 800be50:	441a      	add	r2, r3
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	699a      	ldr	r2, [r3, #24]
 800be5a:	69fb      	ldr	r3, [r7, #28]
 800be5c:	441a      	add	r2, r3
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	015a      	lsls	r2, r3, #5
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	4413      	add	r3, r2
 800be6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be6e:	699b      	ldr	r3, [r3, #24]
 800be70:	b29b      	uxth	r3, r3
 800be72:	69ba      	ldr	r2, [r7, #24]
 800be74:	429a      	cmp	r2, r3
 800be76:	d809      	bhi.n	800be8c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	699a      	ldr	r2, [r3, #24]
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800be80:	429a      	cmp	r2, r3
 800be82:	d203      	bcs.n	800be8c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	695b      	ldr	r3, [r3, #20]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d1be      	bne.n	800be0a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	695a      	ldr	r2, [r3, #20]
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	699b      	ldr	r3, [r3, #24]
 800be94:	429a      	cmp	r2, r3
 800be96:	d811      	bhi.n	800bebc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	f003 030f 	and.w	r3, r3, #15
 800be9e:	2201      	movs	r2, #1
 800bea0:	fa02 f303 	lsl.w	r3, r2, r3
 800bea4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800beac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	43db      	mvns	r3, r3
 800beb2:	6939      	ldr	r1, [r7, #16]
 800beb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800beb8:	4013      	ands	r3, r2
 800beba:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800bebc:	2300      	movs	r3, #0
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3720      	adds	r7, #32
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}
	...

0800bec8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b086      	sub	sp, #24
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	333c      	adds	r3, #60	; 0x3c
 800bee0:	3304      	adds	r3, #4
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	015a      	lsls	r2, r3, #5
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	4413      	add	r3, r2
 800beee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bef2:	689b      	ldr	r3, [r3, #8]
 800bef4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	691b      	ldr	r3, [r3, #16]
 800befa:	2b01      	cmp	r3, #1
 800befc:	f040 80a0 	bne.w	800c040 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	f003 0308 	and.w	r3, r3, #8
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d015      	beq.n	800bf36 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	4a72      	ldr	r2, [pc, #456]	; (800c0d8 <PCD_EP_OutXfrComplete_int+0x210>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	f240 80dd 	bls.w	800c0ce <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	f000 80d7 	beq.w	800c0ce <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	015a      	lsls	r2, r3, #5
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	4413      	add	r3, r2
 800bf28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf32:	6093      	str	r3, [r2, #8]
 800bf34:	e0cb      	b.n	800c0ce <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	f003 0320 	and.w	r3, r3, #32
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d009      	beq.n	800bf54 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	015a      	lsls	r2, r3, #5
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	4413      	add	r3, r2
 800bf48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf4c:	461a      	mov	r2, r3
 800bf4e:	2320      	movs	r3, #32
 800bf50:	6093      	str	r3, [r2, #8]
 800bf52:	e0bc      	b.n	800c0ce <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	f040 80b7 	bne.w	800c0ce <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	4a5d      	ldr	r2, [pc, #372]	; (800c0d8 <PCD_EP_OutXfrComplete_int+0x210>)
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d90f      	bls.n	800bf88 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d00a      	beq.n	800bf88 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	015a      	lsls	r2, r3, #5
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	4413      	add	r3, r2
 800bf7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf7e:	461a      	mov	r2, r3
 800bf80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf84:	6093      	str	r3, [r2, #8]
 800bf86:	e0a2      	b.n	800c0ce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800bf88:	6879      	ldr	r1, [r7, #4]
 800bf8a:	683a      	ldr	r2, [r7, #0]
 800bf8c:	4613      	mov	r3, r2
 800bf8e:	00db      	lsls	r3, r3, #3
 800bf90:	1a9b      	subs	r3, r3, r2
 800bf92:	009b      	lsls	r3, r3, #2
 800bf94:	440b      	add	r3, r1
 800bf96:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800bf9a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	0159      	lsls	r1, r3, #5
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	440b      	add	r3, r1
 800bfa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfa8:	691b      	ldr	r3, [r3, #16]
 800bfaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800bfae:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	683a      	ldr	r2, [r7, #0]
 800bfb4:	4613      	mov	r3, r2
 800bfb6:	00db      	lsls	r3, r3, #3
 800bfb8:	1a9b      	subs	r3, r3, r2
 800bfba:	009b      	lsls	r3, r3, #2
 800bfbc:	4403      	add	r3, r0
 800bfbe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800bfc2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800bfc4:	6879      	ldr	r1, [r7, #4]
 800bfc6:	683a      	ldr	r2, [r7, #0]
 800bfc8:	4613      	mov	r3, r2
 800bfca:	00db      	lsls	r3, r3, #3
 800bfcc:	1a9b      	subs	r3, r3, r2
 800bfce:	009b      	lsls	r3, r3, #2
 800bfd0:	440b      	add	r3, r1
 800bfd2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bfd6:	6819      	ldr	r1, [r3, #0]
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	683a      	ldr	r2, [r7, #0]
 800bfdc:	4613      	mov	r3, r2
 800bfde:	00db      	lsls	r3, r3, #3
 800bfe0:	1a9b      	subs	r3, r3, r2
 800bfe2:	009b      	lsls	r3, r3, #2
 800bfe4:	4403      	add	r3, r0
 800bfe6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	4419      	add	r1, r3
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	683a      	ldr	r2, [r7, #0]
 800bff2:	4613      	mov	r3, r2
 800bff4:	00db      	lsls	r3, r3, #3
 800bff6:	1a9b      	subs	r3, r3, r2
 800bff8:	009b      	lsls	r3, r3, #2
 800bffa:	4403      	add	r3, r0
 800bffc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c000:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d114      	bne.n	800c032 <PCD_EP_OutXfrComplete_int+0x16a>
 800c008:	6879      	ldr	r1, [r7, #4]
 800c00a:	683a      	ldr	r2, [r7, #0]
 800c00c:	4613      	mov	r3, r2
 800c00e:	00db      	lsls	r3, r3, #3
 800c010:	1a9b      	subs	r3, r3, r2
 800c012:	009b      	lsls	r3, r3, #2
 800c014:	440b      	add	r3, r1
 800c016:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d108      	bne.n	800c032 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6818      	ldr	r0, [r3, #0]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c02a:	461a      	mov	r2, r3
 800c02c:	2101      	movs	r1, #1
 800c02e:	f005 f9a9 	bl	8011384 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	b2db      	uxtb	r3, r3
 800c036:	4619      	mov	r1, r3
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f00d fb23 	bl	8019684 <HAL_PCD_DataOutStageCallback>
 800c03e:	e046      	b.n	800c0ce <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	4a26      	ldr	r2, [pc, #152]	; (800c0dc <PCD_EP_OutXfrComplete_int+0x214>)
 800c044:	4293      	cmp	r3, r2
 800c046:	d124      	bne.n	800c092 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d00a      	beq.n	800c068 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	015a      	lsls	r2, r3, #5
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	4413      	add	r3, r2
 800c05a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c05e:	461a      	mov	r2, r3
 800c060:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c064:	6093      	str	r3, [r2, #8]
 800c066:	e032      	b.n	800c0ce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	f003 0320 	and.w	r3, r3, #32
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d008      	beq.n	800c084 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	015a      	lsls	r2, r3, #5
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	4413      	add	r3, r2
 800c07a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c07e:	461a      	mov	r2, r3
 800c080:	2320      	movs	r3, #32
 800c082:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	b2db      	uxtb	r3, r3
 800c088:	4619      	mov	r1, r3
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f00d fafa 	bl	8019684 <HAL_PCD_DataOutStageCallback>
 800c090:	e01d      	b.n	800c0ce <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d114      	bne.n	800c0c2 <PCD_EP_OutXfrComplete_int+0x1fa>
 800c098:	6879      	ldr	r1, [r7, #4]
 800c09a:	683a      	ldr	r2, [r7, #0]
 800c09c:	4613      	mov	r3, r2
 800c09e:	00db      	lsls	r3, r3, #3
 800c0a0:	1a9b      	subs	r3, r3, r2
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	440b      	add	r3, r1
 800c0a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d108      	bne.n	800c0c2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6818      	ldr	r0, [r3, #0]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c0ba:	461a      	mov	r2, r3
 800c0bc:	2100      	movs	r1, #0
 800c0be:	f005 f961 	bl	8011384 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	b2db      	uxtb	r3, r3
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f00d fadb 	bl	8019684 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800c0ce:	2300      	movs	r3, #0
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3718      	adds	r7, #24
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}
 800c0d8:	4f54300a 	.word	0x4f54300a
 800c0dc:	4f54310a 	.word	0x4f54310a

0800c0e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b086      	sub	sp, #24
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
 800c0e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	333c      	adds	r3, #60	; 0x3c
 800c0f8:	3304      	adds	r3, #4
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	015a      	lsls	r2, r3, #5
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	4413      	add	r3, r2
 800c106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c10a:	689b      	ldr	r3, [r3, #8]
 800c10c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	4a15      	ldr	r2, [pc, #84]	; (800c168 <PCD_EP_OutSetupPacket_int+0x88>)
 800c112:	4293      	cmp	r3, r2
 800c114:	d90e      	bls.n	800c134 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d009      	beq.n	800c134 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	015a      	lsls	r2, r3, #5
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	4413      	add	r3, r2
 800c128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c12c:	461a      	mov	r2, r3
 800c12e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c132:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f00d fa93 	bl	8019660 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	4a0a      	ldr	r2, [pc, #40]	; (800c168 <PCD_EP_OutSetupPacket_int+0x88>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	d90c      	bls.n	800c15c <PCD_EP_OutSetupPacket_int+0x7c>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	691b      	ldr	r3, [r3, #16]
 800c146:	2b01      	cmp	r3, #1
 800c148:	d108      	bne.n	800c15c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6818      	ldr	r0, [r3, #0]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c154:	461a      	mov	r2, r3
 800c156:	2101      	movs	r1, #1
 800c158:	f005 f914 	bl	8011384 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800c15c:	2300      	movs	r3, #0
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3718      	adds	r7, #24
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	4f54300a 	.word	0x4f54300a

0800c16c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b085      	sub	sp, #20
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	460b      	mov	r3, r1
 800c176:	70fb      	strb	r3, [r7, #3]
 800c178:	4613      	mov	r3, r2
 800c17a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c182:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800c184:	78fb      	ldrb	r3, [r7, #3]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d107      	bne.n	800c19a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800c18a:	883b      	ldrh	r3, [r7, #0]
 800c18c:	0419      	lsls	r1, r3, #16
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	68ba      	ldr	r2, [r7, #8]
 800c194:	430a      	orrs	r2, r1
 800c196:	629a      	str	r2, [r3, #40]	; 0x28
 800c198:	e028      	b.n	800c1ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1a0:	0c1b      	lsrs	r3, r3, #16
 800c1a2:	68ba      	ldr	r2, [r7, #8]
 800c1a4:	4413      	add	r3, r2
 800c1a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	73fb      	strb	r3, [r7, #15]
 800c1ac:	e00d      	b.n	800c1ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681a      	ldr	r2, [r3, #0]
 800c1b2:	7bfb      	ldrb	r3, [r7, #15]
 800c1b4:	3340      	adds	r3, #64	; 0x40
 800c1b6:	009b      	lsls	r3, r3, #2
 800c1b8:	4413      	add	r3, r2
 800c1ba:	685b      	ldr	r3, [r3, #4]
 800c1bc:	0c1b      	lsrs	r3, r3, #16
 800c1be:	68ba      	ldr	r2, [r7, #8]
 800c1c0:	4413      	add	r3, r2
 800c1c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c1c4:	7bfb      	ldrb	r3, [r7, #15]
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	73fb      	strb	r3, [r7, #15]
 800c1ca:	7bfa      	ldrb	r2, [r7, #15]
 800c1cc:	78fb      	ldrb	r3, [r7, #3]
 800c1ce:	3b01      	subs	r3, #1
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d3ec      	bcc.n	800c1ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c1d4:	883b      	ldrh	r3, [r7, #0]
 800c1d6:	0418      	lsls	r0, r3, #16
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6819      	ldr	r1, [r3, #0]
 800c1dc:	78fb      	ldrb	r3, [r7, #3]
 800c1de:	3b01      	subs	r3, #1
 800c1e0:	68ba      	ldr	r2, [r7, #8]
 800c1e2:	4302      	orrs	r2, r0
 800c1e4:	3340      	adds	r3, #64	; 0x40
 800c1e6:	009b      	lsls	r3, r3, #2
 800c1e8:	440b      	add	r3, r1
 800c1ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c1ec:	2300      	movs	r3, #0
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3714      	adds	r7, #20
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f8:	4770      	bx	lr

0800c1fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c1fa:	b480      	push	{r7}
 800c1fc:	b083      	sub	sp, #12
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	6078      	str	r0, [r7, #4]
 800c202:	460b      	mov	r3, r1
 800c204:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	887a      	ldrh	r2, [r7, #2]
 800c20c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800c20e:	2300      	movs	r3, #0
}
 800c210:	4618      	mov	r0, r3
 800c212:	370c      	adds	r7, #12
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr

0800c21c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b083      	sub	sp, #12
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
 800c224:	460b      	mov	r3, r1
 800c226:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c228:	bf00      	nop
 800c22a:	370c      	adds	r7, #12
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr

0800c234 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 800c234:	b480      	push	{r7}
 800c236:	b083      	sub	sp, #12
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 800c23c:	4b05      	ldr	r3, [pc, #20]	; (800c254 <HAL_PWR_EnableWakeUpPin+0x20>)
 800c23e:	685a      	ldr	r2, [r3, #4]
 800c240:	4904      	ldr	r1, [pc, #16]	; (800c254 <HAL_PWR_EnableWakeUpPin+0x20>)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	4313      	orrs	r3, r2
 800c246:	604b      	str	r3, [r1, #4]
}
 800c248:	bf00      	nop
 800c24a:	370c      	adds	r7, #12
 800c24c:	46bd      	mov	sp, r7
 800c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c252:	4770      	bx	lr
 800c254:	40007000 	.word	0x40007000

0800c258 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800c258:	b480      	push	{r7}
 800c25a:	b083      	sub	sp, #12
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 800c260:	4b06      	ldr	r3, [pc, #24]	; (800c27c <HAL_PWR_DisableWakeUpPin+0x24>)
 800c262:	685a      	ldr	r2, [r3, #4]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	43db      	mvns	r3, r3
 800c268:	4904      	ldr	r1, [pc, #16]	; (800c27c <HAL_PWR_DisableWakeUpPin+0x24>)
 800c26a:	4013      	ands	r3, r2
 800c26c:	604b      	str	r3, [r1, #4]
}
 800c26e:	bf00      	nop
 800c270:	370c      	adds	r7, #12
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr
 800c27a:	bf00      	nop
 800c27c:	40007000 	.word	0x40007000

0800c280 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800c280:	b480      	push	{r7}
 800c282:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800c284:	4b08      	ldr	r3, [pc, #32]	; (800c2a8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	4a07      	ldr	r2, [pc, #28]	; (800c2a8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800c28a:	f043 0302 	orr.w	r3, r3, #2
 800c28e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800c290:	4b06      	ldr	r3, [pc, #24]	; (800c2ac <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800c292:	691b      	ldr	r3, [r3, #16]
 800c294:	4a05      	ldr	r2, [pc, #20]	; (800c2ac <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800c296:	f043 0304 	orr.w	r3, r3, #4
 800c29a:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800c29c:	bf30      	wfi
}
 800c29e:	bf00      	nop
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a6:	4770      	bx	lr
 800c2a8:	40007000 	.word	0x40007000
 800c2ac:	e000ed00 	.word	0xe000ed00

0800c2b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b086      	sub	sp, #24
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d101      	bne.n	800c2c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c2be:	2301      	movs	r3, #1
 800c2c0:	e264      	b.n	800c78c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f003 0301 	and.w	r3, r3, #1
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d075      	beq.n	800c3ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c2ce:	4ba3      	ldr	r3, [pc, #652]	; (800c55c <HAL_RCC_OscConfig+0x2ac>)
 800c2d0:	689b      	ldr	r3, [r3, #8]
 800c2d2:	f003 030c 	and.w	r3, r3, #12
 800c2d6:	2b04      	cmp	r3, #4
 800c2d8:	d00c      	beq.n	800c2f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c2da:	4ba0      	ldr	r3, [pc, #640]	; (800c55c <HAL_RCC_OscConfig+0x2ac>)
 800c2dc:	689b      	ldr	r3, [r3, #8]
 800c2de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c2e2:	2b08      	cmp	r3, #8
 800c2e4:	d112      	bne.n	800c30c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c2e6:	4b9d      	ldr	r3, [pc, #628]	; (800c55c <HAL_RCC_OscConfig+0x2ac>)
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c2ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c2f2:	d10b      	bne.n	800c30c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c2f4:	4b99      	ldr	r3, [pc, #612]	; (800c55c <HAL_RCC_OscConfig+0x2ac>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d05b      	beq.n	800c3b8 <HAL_RCC_OscConfig+0x108>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d157      	bne.n	800c3b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c308:	2301      	movs	r3, #1
 800c30a:	e23f      	b.n	800c78c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	685b      	ldr	r3, [r3, #4]
 800c310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c314:	d106      	bne.n	800c324 <HAL_RCC_OscConfig+0x74>
 800c316:	4b91      	ldr	r3, [pc, #580]	; (800c55c <HAL_RCC_OscConfig+0x2ac>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	4a90      	ldr	r2, [pc, #576]	; (800c55c <HAL_RCC_OscConfig+0x2ac>)
 800c31c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c320:	6013      	str	r3, [r2, #0]
 800c322:	e01d      	b.n	800c360 <HAL_RCC_OscConfig+0xb0>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	685b      	ldr	r3, [r3, #4]
 800c328:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c32c:	d10c      	bne.n	800c348 <HAL_RCC_OscConfig+0x98>
 800c32e:	4b8b      	ldr	r3, [pc, #556]	; (800c55c <HAL_RCC_OscConfig+0x2ac>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	4a8a      	ldr	r2, [pc, #552]	; (800c55c <HAL_RCC_OscConfig+0x2ac>)
 800c334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c338:	6013      	str	r3, [r2, #0]
 800c33a:	4b88      	ldr	r3, [pc, #544]	; (800c55c <HAL_RCC_OscConfig+0x2ac>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	4a87      	ldr	r2, [pc, #540]	; (800c55c <HAL_RCC_OscConfig+0x2ac>)
 800c340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c344:	6013      	str	r3, [r2, #0]
 800c346:	e00b      	b.n	800c360 <HAL_RCC_OscConfig+0xb0>
 800c348:	4b84      	ldr	r3, [pc, #528]	; (800c55c <HAL_RCC_OscConfig+0x2ac>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	4a83      	ldr	r2, [pc, #524]	; (800c55c <HAL_RCC_OscConfig+0x2ac>)
 800c34e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c352:	6013      	str	r3, [r2, #0]
 800c354:	4b81      	ldr	r3, [pc, #516]	; (800c55c <HAL_RCC_OscConfig+0x2ac>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4a80      	ldr	r2, [pc, #512]	; (800c55c <HAL_RCC_OscConfig+0x2ac>)
 800c35a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c35e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	685b      	ldr	r3, [r3, #4]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d013      	beq.n	800c390 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c368:	f7fc ffb8 	bl	80092dc <HAL_GetTick>
 800c36c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c36e:	e008      	b.n	800c382 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c370:	f7fc ffb4 	bl	80092dc <HAL_GetTick>
 800c374:	4602      	mov	r2, r0
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	1ad3      	subs	r3, r2, r3
 800c37a:	2b64      	cmp	r3, #100	; 0x64
 800c37c:	d901      	bls.n	800c382 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c37e:	2303      	movs	r3, #3
 800c380:	e204      	b.n	800c78c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c382:	4b76      	ldr	r3, [pc, #472]	; (800c55c <HAL_RCC_OscConfig+0x2ac>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d0f0      	beq.n	800c370 <HAL_RCC_OscConfig+0xc0>
 800c38e:	e014      	b.n	800c3ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c390:	f7fc ffa4 	bl	80092dc <HAL_GetTick>
 800c394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c396:	e008      	b.n	800c3aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c398:	f7fc ffa0 	bl	80092dc <HAL_GetTick>
 800c39c:	4602      	mov	r2, r0
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	1ad3      	subs	r3, r2, r3
 800c3a2:	2b64      	cmp	r3, #100	; 0x64
 800c3a4:	d901      	bls.n	800c3aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c3a6:	2303      	movs	r3, #3
 800c3a8:	e1f0      	b.n	800c78c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c3aa:	4b6c      	ldr	r3, [pc, #432]	; (800c55c <HAL_RCC_OscConfig+0x2ac>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d1f0      	bne.n	800c398 <HAL_RCC_OscConfig+0xe8>
 800c3b6:	e000      	b.n	800c3ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c3b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	f003 0302 	and.w	r3, r3, #2
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d063      	beq.n	800c48e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c3c6:	4b65      	ldr	r3, [pc, #404]	; (800c55c <HAL_RCC_OscConfig+0x2ac>)
 800c3c8:	689b      	ldr	r3, [r3, #8]
 800c3ca:	f003 030c 	and.w	r3, r3, #12
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d00b      	beq.n	800c3ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c3d2:	4b62      	ldr	r3, [pc, #392]	; (800c55c <HAL_RCC_OscConfig+0x2ac>)
 800c3d4:	689b      	ldr	r3, [r3, #8]
 800c3d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c3da:	2b08      	cmp	r3, #8
 800c3dc:	d11c      	bne.n	800c418 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c3de:	4b5f      	ldr	r3, [pc, #380]	; (800c55c <HAL_RCC_OscConfig+0x2ac>)
 800c3e0:	685b      	ldr	r3, [r3, #4]
 800c3e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d116      	bne.n	800c418 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c3ea:	4b5c      	ldr	r3, [pc, #368]	; (800c55c <HAL_RCC_OscConfig+0x2ac>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f003 0302 	and.w	r3, r3, #2
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d005      	beq.n	800c402 <HAL_RCC_OscConfig+0x152>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	68db      	ldr	r3, [r3, #12]
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d001      	beq.n	800c402 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c3fe:	2301      	movs	r3, #1
 800c400:	e1c4      	b.n	800c78c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c402:	4b56      	ldr	r3, [pc, #344]	; (800c55c <HAL_RCC_OscConfig+0x2ac>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	691b      	ldr	r3, [r3, #16]
 800c40e:	00db      	lsls	r3, r3, #3
 800c410:	4952      	ldr	r1, [pc, #328]	; (800c55c <HAL_RCC_OscConfig+0x2ac>)
 800c412:	4313      	orrs	r3, r2
 800c414:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c416:	e03a      	b.n	800c48e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	68db      	ldr	r3, [r3, #12]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d020      	beq.n	800c462 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c420:	4b4f      	ldr	r3, [pc, #316]	; (800c560 <HAL_RCC_OscConfig+0x2b0>)
 800c422:	2201      	movs	r2, #1
 800c424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c426:	f7fc ff59 	bl	80092dc <HAL_GetTick>
 800c42a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c42c:	e008      	b.n	800c440 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c42e:	f7fc ff55 	bl	80092dc <HAL_GetTick>
 800c432:	4602      	mov	r2, r0
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	1ad3      	subs	r3, r2, r3
 800c438:	2b02      	cmp	r3, #2
 800c43a:	d901      	bls.n	800c440 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c43c:	2303      	movs	r3, #3
 800c43e:	e1a5      	b.n	800c78c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c440:	4b46      	ldr	r3, [pc, #280]	; (800c55c <HAL_RCC_OscConfig+0x2ac>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f003 0302 	and.w	r3, r3, #2
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d0f0      	beq.n	800c42e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c44c:	4b43      	ldr	r3, [pc, #268]	; (800c55c <HAL_RCC_OscConfig+0x2ac>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	691b      	ldr	r3, [r3, #16]
 800c458:	00db      	lsls	r3, r3, #3
 800c45a:	4940      	ldr	r1, [pc, #256]	; (800c55c <HAL_RCC_OscConfig+0x2ac>)
 800c45c:	4313      	orrs	r3, r2
 800c45e:	600b      	str	r3, [r1, #0]
 800c460:	e015      	b.n	800c48e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c462:	4b3f      	ldr	r3, [pc, #252]	; (800c560 <HAL_RCC_OscConfig+0x2b0>)
 800c464:	2200      	movs	r2, #0
 800c466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c468:	f7fc ff38 	bl	80092dc <HAL_GetTick>
 800c46c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c46e:	e008      	b.n	800c482 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c470:	f7fc ff34 	bl	80092dc <HAL_GetTick>
 800c474:	4602      	mov	r2, r0
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	1ad3      	subs	r3, r2, r3
 800c47a:	2b02      	cmp	r3, #2
 800c47c:	d901      	bls.n	800c482 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c47e:	2303      	movs	r3, #3
 800c480:	e184      	b.n	800c78c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c482:	4b36      	ldr	r3, [pc, #216]	; (800c55c <HAL_RCC_OscConfig+0x2ac>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f003 0302 	and.w	r3, r3, #2
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d1f0      	bne.n	800c470 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f003 0308 	and.w	r3, r3, #8
 800c496:	2b00      	cmp	r3, #0
 800c498:	d030      	beq.n	800c4fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	695b      	ldr	r3, [r3, #20]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d016      	beq.n	800c4d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c4a2:	4b30      	ldr	r3, [pc, #192]	; (800c564 <HAL_RCC_OscConfig+0x2b4>)
 800c4a4:	2201      	movs	r2, #1
 800c4a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4a8:	f7fc ff18 	bl	80092dc <HAL_GetTick>
 800c4ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c4ae:	e008      	b.n	800c4c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c4b0:	f7fc ff14 	bl	80092dc <HAL_GetTick>
 800c4b4:	4602      	mov	r2, r0
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	1ad3      	subs	r3, r2, r3
 800c4ba:	2b02      	cmp	r3, #2
 800c4bc:	d901      	bls.n	800c4c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c4be:	2303      	movs	r3, #3
 800c4c0:	e164      	b.n	800c78c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c4c2:	4b26      	ldr	r3, [pc, #152]	; (800c55c <HAL_RCC_OscConfig+0x2ac>)
 800c4c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4c6:	f003 0302 	and.w	r3, r3, #2
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d0f0      	beq.n	800c4b0 <HAL_RCC_OscConfig+0x200>
 800c4ce:	e015      	b.n	800c4fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c4d0:	4b24      	ldr	r3, [pc, #144]	; (800c564 <HAL_RCC_OscConfig+0x2b4>)
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c4d6:	f7fc ff01 	bl	80092dc <HAL_GetTick>
 800c4da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c4dc:	e008      	b.n	800c4f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c4de:	f7fc fefd 	bl	80092dc <HAL_GetTick>
 800c4e2:	4602      	mov	r2, r0
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	1ad3      	subs	r3, r2, r3
 800c4e8:	2b02      	cmp	r3, #2
 800c4ea:	d901      	bls.n	800c4f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c4ec:	2303      	movs	r3, #3
 800c4ee:	e14d      	b.n	800c78c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c4f0:	4b1a      	ldr	r3, [pc, #104]	; (800c55c <HAL_RCC_OscConfig+0x2ac>)
 800c4f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4f4:	f003 0302 	and.w	r3, r3, #2
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d1f0      	bne.n	800c4de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f003 0304 	and.w	r3, r3, #4
 800c504:	2b00      	cmp	r3, #0
 800c506:	f000 80a0 	beq.w	800c64a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c50a:	2300      	movs	r3, #0
 800c50c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c50e:	4b13      	ldr	r3, [pc, #76]	; (800c55c <HAL_RCC_OscConfig+0x2ac>)
 800c510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c516:	2b00      	cmp	r3, #0
 800c518:	d10f      	bne.n	800c53a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c51a:	2300      	movs	r3, #0
 800c51c:	60bb      	str	r3, [r7, #8]
 800c51e:	4b0f      	ldr	r3, [pc, #60]	; (800c55c <HAL_RCC_OscConfig+0x2ac>)
 800c520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c522:	4a0e      	ldr	r2, [pc, #56]	; (800c55c <HAL_RCC_OscConfig+0x2ac>)
 800c524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c528:	6413      	str	r3, [r2, #64]	; 0x40
 800c52a:	4b0c      	ldr	r3, [pc, #48]	; (800c55c <HAL_RCC_OscConfig+0x2ac>)
 800c52c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c52e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c532:	60bb      	str	r3, [r7, #8]
 800c534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c536:	2301      	movs	r3, #1
 800c538:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c53a:	4b0b      	ldr	r3, [pc, #44]	; (800c568 <HAL_RCC_OscConfig+0x2b8>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c542:	2b00      	cmp	r3, #0
 800c544:	d121      	bne.n	800c58a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c546:	4b08      	ldr	r3, [pc, #32]	; (800c568 <HAL_RCC_OscConfig+0x2b8>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	4a07      	ldr	r2, [pc, #28]	; (800c568 <HAL_RCC_OscConfig+0x2b8>)
 800c54c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c552:	f7fc fec3 	bl	80092dc <HAL_GetTick>
 800c556:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c558:	e011      	b.n	800c57e <HAL_RCC_OscConfig+0x2ce>
 800c55a:	bf00      	nop
 800c55c:	40023800 	.word	0x40023800
 800c560:	42470000 	.word	0x42470000
 800c564:	42470e80 	.word	0x42470e80
 800c568:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c56c:	f7fc feb6 	bl	80092dc <HAL_GetTick>
 800c570:	4602      	mov	r2, r0
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	1ad3      	subs	r3, r2, r3
 800c576:	2b02      	cmp	r3, #2
 800c578:	d901      	bls.n	800c57e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800c57a:	2303      	movs	r3, #3
 800c57c:	e106      	b.n	800c78c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c57e:	4b85      	ldr	r3, [pc, #532]	; (800c794 <HAL_RCC_OscConfig+0x4e4>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c586:	2b00      	cmp	r3, #0
 800c588:	d0f0      	beq.n	800c56c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	689b      	ldr	r3, [r3, #8]
 800c58e:	2b01      	cmp	r3, #1
 800c590:	d106      	bne.n	800c5a0 <HAL_RCC_OscConfig+0x2f0>
 800c592:	4b81      	ldr	r3, [pc, #516]	; (800c798 <HAL_RCC_OscConfig+0x4e8>)
 800c594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c596:	4a80      	ldr	r2, [pc, #512]	; (800c798 <HAL_RCC_OscConfig+0x4e8>)
 800c598:	f043 0301 	orr.w	r3, r3, #1
 800c59c:	6713      	str	r3, [r2, #112]	; 0x70
 800c59e:	e01c      	b.n	800c5da <HAL_RCC_OscConfig+0x32a>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	689b      	ldr	r3, [r3, #8]
 800c5a4:	2b05      	cmp	r3, #5
 800c5a6:	d10c      	bne.n	800c5c2 <HAL_RCC_OscConfig+0x312>
 800c5a8:	4b7b      	ldr	r3, [pc, #492]	; (800c798 <HAL_RCC_OscConfig+0x4e8>)
 800c5aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5ac:	4a7a      	ldr	r2, [pc, #488]	; (800c798 <HAL_RCC_OscConfig+0x4e8>)
 800c5ae:	f043 0304 	orr.w	r3, r3, #4
 800c5b2:	6713      	str	r3, [r2, #112]	; 0x70
 800c5b4:	4b78      	ldr	r3, [pc, #480]	; (800c798 <HAL_RCC_OscConfig+0x4e8>)
 800c5b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5b8:	4a77      	ldr	r2, [pc, #476]	; (800c798 <HAL_RCC_OscConfig+0x4e8>)
 800c5ba:	f043 0301 	orr.w	r3, r3, #1
 800c5be:	6713      	str	r3, [r2, #112]	; 0x70
 800c5c0:	e00b      	b.n	800c5da <HAL_RCC_OscConfig+0x32a>
 800c5c2:	4b75      	ldr	r3, [pc, #468]	; (800c798 <HAL_RCC_OscConfig+0x4e8>)
 800c5c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5c6:	4a74      	ldr	r2, [pc, #464]	; (800c798 <HAL_RCC_OscConfig+0x4e8>)
 800c5c8:	f023 0301 	bic.w	r3, r3, #1
 800c5cc:	6713      	str	r3, [r2, #112]	; 0x70
 800c5ce:	4b72      	ldr	r3, [pc, #456]	; (800c798 <HAL_RCC_OscConfig+0x4e8>)
 800c5d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5d2:	4a71      	ldr	r2, [pc, #452]	; (800c798 <HAL_RCC_OscConfig+0x4e8>)
 800c5d4:	f023 0304 	bic.w	r3, r3, #4
 800c5d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	689b      	ldr	r3, [r3, #8]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d015      	beq.n	800c60e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c5e2:	f7fc fe7b 	bl	80092dc <HAL_GetTick>
 800c5e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c5e8:	e00a      	b.n	800c600 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c5ea:	f7fc fe77 	bl	80092dc <HAL_GetTick>
 800c5ee:	4602      	mov	r2, r0
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	1ad3      	subs	r3, r2, r3
 800c5f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5f8:	4293      	cmp	r3, r2
 800c5fa:	d901      	bls.n	800c600 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800c5fc:	2303      	movs	r3, #3
 800c5fe:	e0c5      	b.n	800c78c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c600:	4b65      	ldr	r3, [pc, #404]	; (800c798 <HAL_RCC_OscConfig+0x4e8>)
 800c602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c604:	f003 0302 	and.w	r3, r3, #2
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d0ee      	beq.n	800c5ea <HAL_RCC_OscConfig+0x33a>
 800c60c:	e014      	b.n	800c638 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c60e:	f7fc fe65 	bl	80092dc <HAL_GetTick>
 800c612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c614:	e00a      	b.n	800c62c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c616:	f7fc fe61 	bl	80092dc <HAL_GetTick>
 800c61a:	4602      	mov	r2, r0
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	1ad3      	subs	r3, r2, r3
 800c620:	f241 3288 	movw	r2, #5000	; 0x1388
 800c624:	4293      	cmp	r3, r2
 800c626:	d901      	bls.n	800c62c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800c628:	2303      	movs	r3, #3
 800c62a:	e0af      	b.n	800c78c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c62c:	4b5a      	ldr	r3, [pc, #360]	; (800c798 <HAL_RCC_OscConfig+0x4e8>)
 800c62e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c630:	f003 0302 	and.w	r3, r3, #2
 800c634:	2b00      	cmp	r3, #0
 800c636:	d1ee      	bne.n	800c616 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c638:	7dfb      	ldrb	r3, [r7, #23]
 800c63a:	2b01      	cmp	r3, #1
 800c63c:	d105      	bne.n	800c64a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c63e:	4b56      	ldr	r3, [pc, #344]	; (800c798 <HAL_RCC_OscConfig+0x4e8>)
 800c640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c642:	4a55      	ldr	r2, [pc, #340]	; (800c798 <HAL_RCC_OscConfig+0x4e8>)
 800c644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c648:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	699b      	ldr	r3, [r3, #24]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	f000 809b 	beq.w	800c78a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c654:	4b50      	ldr	r3, [pc, #320]	; (800c798 <HAL_RCC_OscConfig+0x4e8>)
 800c656:	689b      	ldr	r3, [r3, #8]
 800c658:	f003 030c 	and.w	r3, r3, #12
 800c65c:	2b08      	cmp	r3, #8
 800c65e:	d05c      	beq.n	800c71a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	699b      	ldr	r3, [r3, #24]
 800c664:	2b02      	cmp	r3, #2
 800c666:	d141      	bne.n	800c6ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c668:	4b4c      	ldr	r3, [pc, #304]	; (800c79c <HAL_RCC_OscConfig+0x4ec>)
 800c66a:	2200      	movs	r2, #0
 800c66c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c66e:	f7fc fe35 	bl	80092dc <HAL_GetTick>
 800c672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c674:	e008      	b.n	800c688 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c676:	f7fc fe31 	bl	80092dc <HAL_GetTick>
 800c67a:	4602      	mov	r2, r0
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	1ad3      	subs	r3, r2, r3
 800c680:	2b02      	cmp	r3, #2
 800c682:	d901      	bls.n	800c688 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800c684:	2303      	movs	r3, #3
 800c686:	e081      	b.n	800c78c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c688:	4b43      	ldr	r3, [pc, #268]	; (800c798 <HAL_RCC_OscConfig+0x4e8>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c690:	2b00      	cmp	r3, #0
 800c692:	d1f0      	bne.n	800c676 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	69da      	ldr	r2, [r3, #28]
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6a1b      	ldr	r3, [r3, #32]
 800c69c:	431a      	orrs	r2, r3
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6a2:	019b      	lsls	r3, r3, #6
 800c6a4:	431a      	orrs	r2, r3
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6aa:	085b      	lsrs	r3, r3, #1
 800c6ac:	3b01      	subs	r3, #1
 800c6ae:	041b      	lsls	r3, r3, #16
 800c6b0:	431a      	orrs	r2, r3
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6b6:	061b      	lsls	r3, r3, #24
 800c6b8:	4937      	ldr	r1, [pc, #220]	; (800c798 <HAL_RCC_OscConfig+0x4e8>)
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c6be:	4b37      	ldr	r3, [pc, #220]	; (800c79c <HAL_RCC_OscConfig+0x4ec>)
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c6c4:	f7fc fe0a 	bl	80092dc <HAL_GetTick>
 800c6c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c6ca:	e008      	b.n	800c6de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c6cc:	f7fc fe06 	bl	80092dc <HAL_GetTick>
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	1ad3      	subs	r3, r2, r3
 800c6d6:	2b02      	cmp	r3, #2
 800c6d8:	d901      	bls.n	800c6de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800c6da:	2303      	movs	r3, #3
 800c6dc:	e056      	b.n	800c78c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c6de:	4b2e      	ldr	r3, [pc, #184]	; (800c798 <HAL_RCC_OscConfig+0x4e8>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d0f0      	beq.n	800c6cc <HAL_RCC_OscConfig+0x41c>
 800c6ea:	e04e      	b.n	800c78a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c6ec:	4b2b      	ldr	r3, [pc, #172]	; (800c79c <HAL_RCC_OscConfig+0x4ec>)
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c6f2:	f7fc fdf3 	bl	80092dc <HAL_GetTick>
 800c6f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c6f8:	e008      	b.n	800c70c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c6fa:	f7fc fdef 	bl	80092dc <HAL_GetTick>
 800c6fe:	4602      	mov	r2, r0
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	1ad3      	subs	r3, r2, r3
 800c704:	2b02      	cmp	r3, #2
 800c706:	d901      	bls.n	800c70c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800c708:	2303      	movs	r3, #3
 800c70a:	e03f      	b.n	800c78c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c70c:	4b22      	ldr	r3, [pc, #136]	; (800c798 <HAL_RCC_OscConfig+0x4e8>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c714:	2b00      	cmp	r3, #0
 800c716:	d1f0      	bne.n	800c6fa <HAL_RCC_OscConfig+0x44a>
 800c718:	e037      	b.n	800c78a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	699b      	ldr	r3, [r3, #24]
 800c71e:	2b01      	cmp	r3, #1
 800c720:	d101      	bne.n	800c726 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800c722:	2301      	movs	r3, #1
 800c724:	e032      	b.n	800c78c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c726:	4b1c      	ldr	r3, [pc, #112]	; (800c798 <HAL_RCC_OscConfig+0x4e8>)
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	699b      	ldr	r3, [r3, #24]
 800c730:	2b01      	cmp	r3, #1
 800c732:	d028      	beq.n	800c786 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c73e:	429a      	cmp	r2, r3
 800c740:	d121      	bne.n	800c786 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d11a      	bne.n	800c786 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c750:	68fa      	ldr	r2, [r7, #12]
 800c752:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c756:	4013      	ands	r3, r2
 800c758:	687a      	ldr	r2, [r7, #4]
 800c75a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c75c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c75e:	4293      	cmp	r3, r2
 800c760:	d111      	bne.n	800c786 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c76c:	085b      	lsrs	r3, r3, #1
 800c76e:	3b01      	subs	r3, #1
 800c770:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c772:	429a      	cmp	r2, r3
 800c774:	d107      	bne.n	800c786 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c780:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c782:	429a      	cmp	r2, r3
 800c784:	d001      	beq.n	800c78a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800c786:	2301      	movs	r3, #1
 800c788:	e000      	b.n	800c78c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800c78a:	2300      	movs	r3, #0
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3718      	adds	r7, #24
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}
 800c794:	40007000 	.word	0x40007000
 800c798:	40023800 	.word	0x40023800
 800c79c:	42470060 	.word	0x42470060

0800c7a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b084      	sub	sp, #16
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d101      	bne.n	800c7b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	e0cc      	b.n	800c94e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c7b4:	4b68      	ldr	r3, [pc, #416]	; (800c958 <HAL_RCC_ClockConfig+0x1b8>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f003 030f 	and.w	r3, r3, #15
 800c7bc:	683a      	ldr	r2, [r7, #0]
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	d90c      	bls.n	800c7dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c7c2:	4b65      	ldr	r3, [pc, #404]	; (800c958 <HAL_RCC_ClockConfig+0x1b8>)
 800c7c4:	683a      	ldr	r2, [r7, #0]
 800c7c6:	b2d2      	uxtb	r2, r2
 800c7c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c7ca:	4b63      	ldr	r3, [pc, #396]	; (800c958 <HAL_RCC_ClockConfig+0x1b8>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f003 030f 	and.w	r3, r3, #15
 800c7d2:	683a      	ldr	r2, [r7, #0]
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d001      	beq.n	800c7dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c7d8:	2301      	movs	r3, #1
 800c7da:	e0b8      	b.n	800c94e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f003 0302 	and.w	r3, r3, #2
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d020      	beq.n	800c82a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f003 0304 	and.w	r3, r3, #4
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d005      	beq.n	800c800 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c7f4:	4b59      	ldr	r3, [pc, #356]	; (800c95c <HAL_RCC_ClockConfig+0x1bc>)
 800c7f6:	689b      	ldr	r3, [r3, #8]
 800c7f8:	4a58      	ldr	r2, [pc, #352]	; (800c95c <HAL_RCC_ClockConfig+0x1bc>)
 800c7fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c7fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f003 0308 	and.w	r3, r3, #8
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d005      	beq.n	800c818 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c80c:	4b53      	ldr	r3, [pc, #332]	; (800c95c <HAL_RCC_ClockConfig+0x1bc>)
 800c80e:	689b      	ldr	r3, [r3, #8]
 800c810:	4a52      	ldr	r2, [pc, #328]	; (800c95c <HAL_RCC_ClockConfig+0x1bc>)
 800c812:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c816:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c818:	4b50      	ldr	r3, [pc, #320]	; (800c95c <HAL_RCC_ClockConfig+0x1bc>)
 800c81a:	689b      	ldr	r3, [r3, #8]
 800c81c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	689b      	ldr	r3, [r3, #8]
 800c824:	494d      	ldr	r1, [pc, #308]	; (800c95c <HAL_RCC_ClockConfig+0x1bc>)
 800c826:	4313      	orrs	r3, r2
 800c828:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f003 0301 	and.w	r3, r3, #1
 800c832:	2b00      	cmp	r3, #0
 800c834:	d044      	beq.n	800c8c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	685b      	ldr	r3, [r3, #4]
 800c83a:	2b01      	cmp	r3, #1
 800c83c:	d107      	bne.n	800c84e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c83e:	4b47      	ldr	r3, [pc, #284]	; (800c95c <HAL_RCC_ClockConfig+0x1bc>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c846:	2b00      	cmp	r3, #0
 800c848:	d119      	bne.n	800c87e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c84a:	2301      	movs	r3, #1
 800c84c:	e07f      	b.n	800c94e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	685b      	ldr	r3, [r3, #4]
 800c852:	2b02      	cmp	r3, #2
 800c854:	d003      	beq.n	800c85e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c85a:	2b03      	cmp	r3, #3
 800c85c:	d107      	bne.n	800c86e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c85e:	4b3f      	ldr	r3, [pc, #252]	; (800c95c <HAL_RCC_ClockConfig+0x1bc>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c866:	2b00      	cmp	r3, #0
 800c868:	d109      	bne.n	800c87e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c86a:	2301      	movs	r3, #1
 800c86c:	e06f      	b.n	800c94e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c86e:	4b3b      	ldr	r3, [pc, #236]	; (800c95c <HAL_RCC_ClockConfig+0x1bc>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	f003 0302 	and.w	r3, r3, #2
 800c876:	2b00      	cmp	r3, #0
 800c878:	d101      	bne.n	800c87e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c87a:	2301      	movs	r3, #1
 800c87c:	e067      	b.n	800c94e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c87e:	4b37      	ldr	r3, [pc, #220]	; (800c95c <HAL_RCC_ClockConfig+0x1bc>)
 800c880:	689b      	ldr	r3, [r3, #8]
 800c882:	f023 0203 	bic.w	r2, r3, #3
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	685b      	ldr	r3, [r3, #4]
 800c88a:	4934      	ldr	r1, [pc, #208]	; (800c95c <HAL_RCC_ClockConfig+0x1bc>)
 800c88c:	4313      	orrs	r3, r2
 800c88e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c890:	f7fc fd24 	bl	80092dc <HAL_GetTick>
 800c894:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c896:	e00a      	b.n	800c8ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c898:	f7fc fd20 	bl	80092dc <HAL_GetTick>
 800c89c:	4602      	mov	r2, r0
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	1ad3      	subs	r3, r2, r3
 800c8a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d901      	bls.n	800c8ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c8aa:	2303      	movs	r3, #3
 800c8ac:	e04f      	b.n	800c94e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c8ae:	4b2b      	ldr	r3, [pc, #172]	; (800c95c <HAL_RCC_ClockConfig+0x1bc>)
 800c8b0:	689b      	ldr	r3, [r3, #8]
 800c8b2:	f003 020c 	and.w	r2, r3, #12
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	685b      	ldr	r3, [r3, #4]
 800c8ba:	009b      	lsls	r3, r3, #2
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d1eb      	bne.n	800c898 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c8c0:	4b25      	ldr	r3, [pc, #148]	; (800c958 <HAL_RCC_ClockConfig+0x1b8>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f003 030f 	and.w	r3, r3, #15
 800c8c8:	683a      	ldr	r2, [r7, #0]
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d20c      	bcs.n	800c8e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c8ce:	4b22      	ldr	r3, [pc, #136]	; (800c958 <HAL_RCC_ClockConfig+0x1b8>)
 800c8d0:	683a      	ldr	r2, [r7, #0]
 800c8d2:	b2d2      	uxtb	r2, r2
 800c8d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c8d6:	4b20      	ldr	r3, [pc, #128]	; (800c958 <HAL_RCC_ClockConfig+0x1b8>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	f003 030f 	and.w	r3, r3, #15
 800c8de:	683a      	ldr	r2, [r7, #0]
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d001      	beq.n	800c8e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c8e4:	2301      	movs	r3, #1
 800c8e6:	e032      	b.n	800c94e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f003 0304 	and.w	r3, r3, #4
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d008      	beq.n	800c906 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c8f4:	4b19      	ldr	r3, [pc, #100]	; (800c95c <HAL_RCC_ClockConfig+0x1bc>)
 800c8f6:	689b      	ldr	r3, [r3, #8]
 800c8f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	68db      	ldr	r3, [r3, #12]
 800c900:	4916      	ldr	r1, [pc, #88]	; (800c95c <HAL_RCC_ClockConfig+0x1bc>)
 800c902:	4313      	orrs	r3, r2
 800c904:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f003 0308 	and.w	r3, r3, #8
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d009      	beq.n	800c926 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c912:	4b12      	ldr	r3, [pc, #72]	; (800c95c <HAL_RCC_ClockConfig+0x1bc>)
 800c914:	689b      	ldr	r3, [r3, #8]
 800c916:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	691b      	ldr	r3, [r3, #16]
 800c91e:	00db      	lsls	r3, r3, #3
 800c920:	490e      	ldr	r1, [pc, #56]	; (800c95c <HAL_RCC_ClockConfig+0x1bc>)
 800c922:	4313      	orrs	r3, r2
 800c924:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c926:	f000 f821 	bl	800c96c <HAL_RCC_GetSysClockFreq>
 800c92a:	4602      	mov	r2, r0
 800c92c:	4b0b      	ldr	r3, [pc, #44]	; (800c95c <HAL_RCC_ClockConfig+0x1bc>)
 800c92e:	689b      	ldr	r3, [r3, #8]
 800c930:	091b      	lsrs	r3, r3, #4
 800c932:	f003 030f 	and.w	r3, r3, #15
 800c936:	490a      	ldr	r1, [pc, #40]	; (800c960 <HAL_RCC_ClockConfig+0x1c0>)
 800c938:	5ccb      	ldrb	r3, [r1, r3]
 800c93a:	fa22 f303 	lsr.w	r3, r2, r3
 800c93e:	4a09      	ldr	r2, [pc, #36]	; (800c964 <HAL_RCC_ClockConfig+0x1c4>)
 800c940:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c942:	4b09      	ldr	r3, [pc, #36]	; (800c968 <HAL_RCC_ClockConfig+0x1c8>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	4618      	mov	r0, r3
 800c948:	f7f5 feaa 	bl	80026a0 <HAL_InitTick>

  return HAL_OK;
 800c94c:	2300      	movs	r3, #0
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3710      	adds	r7, #16
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}
 800c956:	bf00      	nop
 800c958:	40023c00 	.word	0x40023c00
 800c95c:	40023800 	.word	0x40023800
 800c960:	08021ee8 	.word	0x08021ee8
 800c964:	2000003c 	.word	0x2000003c
 800c968:	20000060 	.word	0x20000060

0800c96c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c96c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c970:	b084      	sub	sp, #16
 800c972:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c974:	2300      	movs	r3, #0
 800c976:	607b      	str	r3, [r7, #4]
 800c978:	2300      	movs	r3, #0
 800c97a:	60fb      	str	r3, [r7, #12]
 800c97c:	2300      	movs	r3, #0
 800c97e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c980:	2300      	movs	r3, #0
 800c982:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c984:	4b67      	ldr	r3, [pc, #412]	; (800cb24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c986:	689b      	ldr	r3, [r3, #8]
 800c988:	f003 030c 	and.w	r3, r3, #12
 800c98c:	2b08      	cmp	r3, #8
 800c98e:	d00d      	beq.n	800c9ac <HAL_RCC_GetSysClockFreq+0x40>
 800c990:	2b08      	cmp	r3, #8
 800c992:	f200 80bd 	bhi.w	800cb10 <HAL_RCC_GetSysClockFreq+0x1a4>
 800c996:	2b00      	cmp	r3, #0
 800c998:	d002      	beq.n	800c9a0 <HAL_RCC_GetSysClockFreq+0x34>
 800c99a:	2b04      	cmp	r3, #4
 800c99c:	d003      	beq.n	800c9a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800c99e:	e0b7      	b.n	800cb10 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c9a0:	4b61      	ldr	r3, [pc, #388]	; (800cb28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c9a2:	60bb      	str	r3, [r7, #8]
       break;
 800c9a4:	e0b7      	b.n	800cb16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c9a6:	4b60      	ldr	r3, [pc, #384]	; (800cb28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c9a8:	60bb      	str	r3, [r7, #8]
      break;
 800c9aa:	e0b4      	b.n	800cb16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c9ac:	4b5d      	ldr	r3, [pc, #372]	; (800cb24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c9ae:	685b      	ldr	r3, [r3, #4]
 800c9b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9b4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c9b6:	4b5b      	ldr	r3, [pc, #364]	; (800cb24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c9b8:	685b      	ldr	r3, [r3, #4]
 800c9ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d04d      	beq.n	800ca5e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c9c2:	4b58      	ldr	r3, [pc, #352]	; (800cb24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c9c4:	685b      	ldr	r3, [r3, #4]
 800c9c6:	099b      	lsrs	r3, r3, #6
 800c9c8:	461a      	mov	r2, r3
 800c9ca:	f04f 0300 	mov.w	r3, #0
 800c9ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c9d2:	f04f 0100 	mov.w	r1, #0
 800c9d6:	ea02 0800 	and.w	r8, r2, r0
 800c9da:	ea03 0901 	and.w	r9, r3, r1
 800c9de:	4640      	mov	r0, r8
 800c9e0:	4649      	mov	r1, r9
 800c9e2:	f04f 0200 	mov.w	r2, #0
 800c9e6:	f04f 0300 	mov.w	r3, #0
 800c9ea:	014b      	lsls	r3, r1, #5
 800c9ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c9f0:	0142      	lsls	r2, r0, #5
 800c9f2:	4610      	mov	r0, r2
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	ebb0 0008 	subs.w	r0, r0, r8
 800c9fa:	eb61 0109 	sbc.w	r1, r1, r9
 800c9fe:	f04f 0200 	mov.w	r2, #0
 800ca02:	f04f 0300 	mov.w	r3, #0
 800ca06:	018b      	lsls	r3, r1, #6
 800ca08:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800ca0c:	0182      	lsls	r2, r0, #6
 800ca0e:	1a12      	subs	r2, r2, r0
 800ca10:	eb63 0301 	sbc.w	r3, r3, r1
 800ca14:	f04f 0000 	mov.w	r0, #0
 800ca18:	f04f 0100 	mov.w	r1, #0
 800ca1c:	00d9      	lsls	r1, r3, #3
 800ca1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ca22:	00d0      	lsls	r0, r2, #3
 800ca24:	4602      	mov	r2, r0
 800ca26:	460b      	mov	r3, r1
 800ca28:	eb12 0208 	adds.w	r2, r2, r8
 800ca2c:	eb43 0309 	adc.w	r3, r3, r9
 800ca30:	f04f 0000 	mov.w	r0, #0
 800ca34:	f04f 0100 	mov.w	r1, #0
 800ca38:	0299      	lsls	r1, r3, #10
 800ca3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800ca3e:	0290      	lsls	r0, r2, #10
 800ca40:	4602      	mov	r2, r0
 800ca42:	460b      	mov	r3, r1
 800ca44:	4610      	mov	r0, r2
 800ca46:	4619      	mov	r1, r3
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	f04f 0300 	mov.w	r3, #0
 800ca50:	f7f4 f98a 	bl	8000d68 <__aeabi_uldivmod>
 800ca54:	4602      	mov	r2, r0
 800ca56:	460b      	mov	r3, r1
 800ca58:	4613      	mov	r3, r2
 800ca5a:	60fb      	str	r3, [r7, #12]
 800ca5c:	e04a      	b.n	800caf4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ca5e:	4b31      	ldr	r3, [pc, #196]	; (800cb24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	099b      	lsrs	r3, r3, #6
 800ca64:	461a      	mov	r2, r3
 800ca66:	f04f 0300 	mov.w	r3, #0
 800ca6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ca6e:	f04f 0100 	mov.w	r1, #0
 800ca72:	ea02 0400 	and.w	r4, r2, r0
 800ca76:	ea03 0501 	and.w	r5, r3, r1
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	4629      	mov	r1, r5
 800ca7e:	f04f 0200 	mov.w	r2, #0
 800ca82:	f04f 0300 	mov.w	r3, #0
 800ca86:	014b      	lsls	r3, r1, #5
 800ca88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800ca8c:	0142      	lsls	r2, r0, #5
 800ca8e:	4610      	mov	r0, r2
 800ca90:	4619      	mov	r1, r3
 800ca92:	1b00      	subs	r0, r0, r4
 800ca94:	eb61 0105 	sbc.w	r1, r1, r5
 800ca98:	f04f 0200 	mov.w	r2, #0
 800ca9c:	f04f 0300 	mov.w	r3, #0
 800caa0:	018b      	lsls	r3, r1, #6
 800caa2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800caa6:	0182      	lsls	r2, r0, #6
 800caa8:	1a12      	subs	r2, r2, r0
 800caaa:	eb63 0301 	sbc.w	r3, r3, r1
 800caae:	f04f 0000 	mov.w	r0, #0
 800cab2:	f04f 0100 	mov.w	r1, #0
 800cab6:	00d9      	lsls	r1, r3, #3
 800cab8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cabc:	00d0      	lsls	r0, r2, #3
 800cabe:	4602      	mov	r2, r0
 800cac0:	460b      	mov	r3, r1
 800cac2:	1912      	adds	r2, r2, r4
 800cac4:	eb45 0303 	adc.w	r3, r5, r3
 800cac8:	f04f 0000 	mov.w	r0, #0
 800cacc:	f04f 0100 	mov.w	r1, #0
 800cad0:	0299      	lsls	r1, r3, #10
 800cad2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800cad6:	0290      	lsls	r0, r2, #10
 800cad8:	4602      	mov	r2, r0
 800cada:	460b      	mov	r3, r1
 800cadc:	4610      	mov	r0, r2
 800cade:	4619      	mov	r1, r3
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	461a      	mov	r2, r3
 800cae4:	f04f 0300 	mov.w	r3, #0
 800cae8:	f7f4 f93e 	bl	8000d68 <__aeabi_uldivmod>
 800caec:	4602      	mov	r2, r0
 800caee:	460b      	mov	r3, r1
 800caf0:	4613      	mov	r3, r2
 800caf2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800caf4:	4b0b      	ldr	r3, [pc, #44]	; (800cb24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800caf6:	685b      	ldr	r3, [r3, #4]
 800caf8:	0c1b      	lsrs	r3, r3, #16
 800cafa:	f003 0303 	and.w	r3, r3, #3
 800cafe:	3301      	adds	r3, #1
 800cb00:	005b      	lsls	r3, r3, #1
 800cb02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800cb04:	68fa      	ldr	r2, [r7, #12]
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb0c:	60bb      	str	r3, [r7, #8]
      break;
 800cb0e:	e002      	b.n	800cb16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cb10:	4b05      	ldr	r3, [pc, #20]	; (800cb28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800cb12:	60bb      	str	r3, [r7, #8]
      break;
 800cb14:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cb16:	68bb      	ldr	r3, [r7, #8]
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3710      	adds	r7, #16
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800cb22:	bf00      	nop
 800cb24:	40023800 	.word	0x40023800
 800cb28:	00f42400 	.word	0x00f42400

0800cb2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cb30:	4b03      	ldr	r3, [pc, #12]	; (800cb40 <HAL_RCC_GetHCLKFreq+0x14>)
 800cb32:	681b      	ldr	r3, [r3, #0]
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	46bd      	mov	sp, r7
 800cb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3c:	4770      	bx	lr
 800cb3e:	bf00      	nop
 800cb40:	2000003c 	.word	0x2000003c

0800cb44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800cb48:	f7ff fff0 	bl	800cb2c <HAL_RCC_GetHCLKFreq>
 800cb4c:	4602      	mov	r2, r0
 800cb4e:	4b05      	ldr	r3, [pc, #20]	; (800cb64 <HAL_RCC_GetPCLK1Freq+0x20>)
 800cb50:	689b      	ldr	r3, [r3, #8]
 800cb52:	0a9b      	lsrs	r3, r3, #10
 800cb54:	f003 0307 	and.w	r3, r3, #7
 800cb58:	4903      	ldr	r1, [pc, #12]	; (800cb68 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cb5a:	5ccb      	ldrb	r3, [r1, r3]
 800cb5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	bd80      	pop	{r7, pc}
 800cb64:	40023800 	.word	0x40023800
 800cb68:	08021ef8 	.word	0x08021ef8

0800cb6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800cb70:	f7ff ffdc 	bl	800cb2c <HAL_RCC_GetHCLKFreq>
 800cb74:	4602      	mov	r2, r0
 800cb76:	4b05      	ldr	r3, [pc, #20]	; (800cb8c <HAL_RCC_GetPCLK2Freq+0x20>)
 800cb78:	689b      	ldr	r3, [r3, #8]
 800cb7a:	0b5b      	lsrs	r3, r3, #13
 800cb7c:	f003 0307 	and.w	r3, r3, #7
 800cb80:	4903      	ldr	r1, [pc, #12]	; (800cb90 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cb82:	5ccb      	ldrb	r3, [r1, r3]
 800cb84:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	bd80      	pop	{r7, pc}
 800cb8c:	40023800 	.word	0x40023800
 800cb90:	08021ef8 	.word	0x08021ef8

0800cb94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800cb94:	b480      	push	{r7}
 800cb96:	b083      	sub	sp, #12
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
 800cb9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	220f      	movs	r2, #15
 800cba2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800cba4:	4b12      	ldr	r3, [pc, #72]	; (800cbf0 <HAL_RCC_GetClockConfig+0x5c>)
 800cba6:	689b      	ldr	r3, [r3, #8]
 800cba8:	f003 0203 	and.w	r2, r3, #3
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800cbb0:	4b0f      	ldr	r3, [pc, #60]	; (800cbf0 <HAL_RCC_GetClockConfig+0x5c>)
 800cbb2:	689b      	ldr	r3, [r3, #8]
 800cbb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800cbbc:	4b0c      	ldr	r3, [pc, #48]	; (800cbf0 <HAL_RCC_GetClockConfig+0x5c>)
 800cbbe:	689b      	ldr	r3, [r3, #8]
 800cbc0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800cbc8:	4b09      	ldr	r3, [pc, #36]	; (800cbf0 <HAL_RCC_GetClockConfig+0x5c>)
 800cbca:	689b      	ldr	r3, [r3, #8]
 800cbcc:	08db      	lsrs	r3, r3, #3
 800cbce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cbd6:	4b07      	ldr	r3, [pc, #28]	; (800cbf4 <HAL_RCC_GetClockConfig+0x60>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	f003 020f 	and.w	r2, r3, #15
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	601a      	str	r2, [r3, #0]
}
 800cbe2:	bf00      	nop
 800cbe4:	370c      	adds	r7, #12
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbec:	4770      	bx	lr
 800cbee:	bf00      	nop
 800cbf0:	40023800 	.word	0x40023800
 800cbf4:	40023c00 	.word	0x40023c00

0800cbf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b086      	sub	sp, #24
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cc00:	2300      	movs	r3, #0
 800cc02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800cc04:	2300      	movs	r3, #0
 800cc06:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f003 0301 	and.w	r3, r3, #1
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d10b      	bne.n	800cc2c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d105      	bne.n	800cc2c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d075      	beq.n	800cd18 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800cc2c:	4bad      	ldr	r3, [pc, #692]	; (800cee4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800cc2e:	2200      	movs	r2, #0
 800cc30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800cc32:	f7fc fb53 	bl	80092dc <HAL_GetTick>
 800cc36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800cc38:	e008      	b.n	800cc4c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800cc3a:	f7fc fb4f 	bl	80092dc <HAL_GetTick>
 800cc3e:	4602      	mov	r2, r0
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	1ad3      	subs	r3, r2, r3
 800cc44:	2b02      	cmp	r3, #2
 800cc46:	d901      	bls.n	800cc4c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cc48:	2303      	movs	r3, #3
 800cc4a:	e18b      	b.n	800cf64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800cc4c:	4ba6      	ldr	r3, [pc, #664]	; (800cee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d1f0      	bne.n	800cc3a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	f003 0301 	and.w	r3, r3, #1
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d009      	beq.n	800cc78 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	685b      	ldr	r3, [r3, #4]
 800cc68:	019a      	lsls	r2, r3, #6
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	689b      	ldr	r3, [r3, #8]
 800cc6e:	071b      	lsls	r3, r3, #28
 800cc70:	499d      	ldr	r1, [pc, #628]	; (800cee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cc72:	4313      	orrs	r3, r2
 800cc74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f003 0302 	and.w	r3, r3, #2
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d01f      	beq.n	800ccc4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800cc84:	4b98      	ldr	r3, [pc, #608]	; (800cee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cc86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc8a:	0f1b      	lsrs	r3, r3, #28
 800cc8c:	f003 0307 	and.w	r3, r3, #7
 800cc90:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	685b      	ldr	r3, [r3, #4]
 800cc96:	019a      	lsls	r2, r3, #6
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	68db      	ldr	r3, [r3, #12]
 800cc9c:	061b      	lsls	r3, r3, #24
 800cc9e:	431a      	orrs	r2, r3
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	071b      	lsls	r3, r3, #28
 800cca4:	4990      	ldr	r1, [pc, #576]	; (800cee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cca6:	4313      	orrs	r3, r2
 800cca8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800ccac:	4b8e      	ldr	r3, [pc, #568]	; (800cee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ccae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ccb2:	f023 021f 	bic.w	r2, r3, #31
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	69db      	ldr	r3, [r3, #28]
 800ccba:	3b01      	subs	r3, #1
 800ccbc:	498a      	ldr	r1, [pc, #552]	; (800cee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ccbe:	4313      	orrs	r3, r2
 800ccc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d00d      	beq.n	800ccec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	685b      	ldr	r3, [r3, #4]
 800ccd4:	019a      	lsls	r2, r3, #6
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	68db      	ldr	r3, [r3, #12]
 800ccda:	061b      	lsls	r3, r3, #24
 800ccdc:	431a      	orrs	r2, r3
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	689b      	ldr	r3, [r3, #8]
 800cce2:	071b      	lsls	r3, r3, #28
 800cce4:	4980      	ldr	r1, [pc, #512]	; (800cee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cce6:	4313      	orrs	r3, r2
 800cce8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800ccec:	4b7d      	ldr	r3, [pc, #500]	; (800cee4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800ccee:	2201      	movs	r2, #1
 800ccf0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ccf2:	f7fc faf3 	bl	80092dc <HAL_GetTick>
 800ccf6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ccf8:	e008      	b.n	800cd0c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800ccfa:	f7fc faef 	bl	80092dc <HAL_GetTick>
 800ccfe:	4602      	mov	r2, r0
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	1ad3      	subs	r3, r2, r3
 800cd04:	2b02      	cmp	r3, #2
 800cd06:	d901      	bls.n	800cd0c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cd08:	2303      	movs	r3, #3
 800cd0a:	e12b      	b.n	800cf64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800cd0c:	4b76      	ldr	r3, [pc, #472]	; (800cee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d0f0      	beq.n	800ccfa <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	f003 0304 	and.w	r3, r3, #4
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d105      	bne.n	800cd30 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d079      	beq.n	800ce24 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800cd30:	4b6e      	ldr	r3, [pc, #440]	; (800ceec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800cd32:	2200      	movs	r2, #0
 800cd34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800cd36:	f7fc fad1 	bl	80092dc <HAL_GetTick>
 800cd3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800cd3c:	e008      	b.n	800cd50 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800cd3e:	f7fc facd 	bl	80092dc <HAL_GetTick>
 800cd42:	4602      	mov	r2, r0
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	1ad3      	subs	r3, r2, r3
 800cd48:	2b02      	cmp	r3, #2
 800cd4a:	d901      	bls.n	800cd50 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cd4c:	2303      	movs	r3, #3
 800cd4e:	e109      	b.n	800cf64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800cd50:	4b65      	ldr	r3, [pc, #404]	; (800cee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd5c:	d0ef      	beq.n	800cd3e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	f003 0304 	and.w	r3, r3, #4
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d020      	beq.n	800cdac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800cd6a:	4b5f      	ldr	r3, [pc, #380]	; (800cee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cd6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd70:	0f1b      	lsrs	r3, r3, #28
 800cd72:	f003 0307 	and.w	r3, r3, #7
 800cd76:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	691b      	ldr	r3, [r3, #16]
 800cd7c:	019a      	lsls	r2, r3, #6
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	695b      	ldr	r3, [r3, #20]
 800cd82:	061b      	lsls	r3, r3, #24
 800cd84:	431a      	orrs	r2, r3
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	071b      	lsls	r3, r3, #28
 800cd8a:	4957      	ldr	r1, [pc, #348]	; (800cee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cd8c:	4313      	orrs	r3, r2
 800cd8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800cd92:	4b55      	ldr	r3, [pc, #340]	; (800cee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cd94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd98:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6a1b      	ldr	r3, [r3, #32]
 800cda0:	3b01      	subs	r3, #1
 800cda2:	021b      	lsls	r3, r3, #8
 800cda4:	4950      	ldr	r1, [pc, #320]	; (800cee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cda6:	4313      	orrs	r3, r2
 800cda8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f003 0308 	and.w	r3, r3, #8
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d01e      	beq.n	800cdf6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800cdb8:	4b4b      	ldr	r3, [pc, #300]	; (800cee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cdba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cdbe:	0e1b      	lsrs	r3, r3, #24
 800cdc0:	f003 030f 	and.w	r3, r3, #15
 800cdc4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	691b      	ldr	r3, [r3, #16]
 800cdca:	019a      	lsls	r2, r3, #6
 800cdcc:	693b      	ldr	r3, [r7, #16]
 800cdce:	061b      	lsls	r3, r3, #24
 800cdd0:	431a      	orrs	r2, r3
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	699b      	ldr	r3, [r3, #24]
 800cdd6:	071b      	lsls	r3, r3, #28
 800cdd8:	4943      	ldr	r1, [pc, #268]	; (800cee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cdda:	4313      	orrs	r3, r2
 800cddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800cde0:	4b41      	ldr	r3, [pc, #260]	; (800cee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cde2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cde6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdee:	493e      	ldr	r1, [pc, #248]	; (800cee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cdf0:	4313      	orrs	r3, r2
 800cdf2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800cdf6:	4b3d      	ldr	r3, [pc, #244]	; (800ceec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800cdf8:	2201      	movs	r2, #1
 800cdfa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800cdfc:	f7fc fa6e 	bl	80092dc <HAL_GetTick>
 800ce00:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ce02:	e008      	b.n	800ce16 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800ce04:	f7fc fa6a 	bl	80092dc <HAL_GetTick>
 800ce08:	4602      	mov	r2, r0
 800ce0a:	697b      	ldr	r3, [r7, #20]
 800ce0c:	1ad3      	subs	r3, r2, r3
 800ce0e:	2b02      	cmp	r3, #2
 800ce10:	d901      	bls.n	800ce16 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ce12:	2303      	movs	r3, #3
 800ce14:	e0a6      	b.n	800cf64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ce16:	4b34      	ldr	r3, [pc, #208]	; (800cee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce22:	d1ef      	bne.n	800ce04 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	f003 0320 	and.w	r3, r3, #32
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	f000 808d 	beq.w	800cf4c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ce32:	2300      	movs	r3, #0
 800ce34:	60fb      	str	r3, [r7, #12]
 800ce36:	4b2c      	ldr	r3, [pc, #176]	; (800cee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ce38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce3a:	4a2b      	ldr	r2, [pc, #172]	; (800cee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ce3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce40:	6413      	str	r3, [r2, #64]	; 0x40
 800ce42:	4b29      	ldr	r3, [pc, #164]	; (800cee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ce44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce4a:	60fb      	str	r3, [r7, #12]
 800ce4c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800ce4e:	4b28      	ldr	r3, [pc, #160]	; (800cef0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	4a27      	ldr	r2, [pc, #156]	; (800cef0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800ce54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce58:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ce5a:	f7fc fa3f 	bl	80092dc <HAL_GetTick>
 800ce5e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800ce60:	e008      	b.n	800ce74 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800ce62:	f7fc fa3b 	bl	80092dc <HAL_GetTick>
 800ce66:	4602      	mov	r2, r0
 800ce68:	697b      	ldr	r3, [r7, #20]
 800ce6a:	1ad3      	subs	r3, r2, r3
 800ce6c:	2b02      	cmp	r3, #2
 800ce6e:	d901      	bls.n	800ce74 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800ce70:	2303      	movs	r3, #3
 800ce72:	e077      	b.n	800cf64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800ce74:	4b1e      	ldr	r3, [pc, #120]	; (800cef0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d0f0      	beq.n	800ce62 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ce80:	4b19      	ldr	r3, [pc, #100]	; (800cee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ce82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce88:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ce8a:	693b      	ldr	r3, [r7, #16]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d039      	beq.n	800cf04 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce98:	693a      	ldr	r2, [r7, #16]
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	d032      	beq.n	800cf04 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ce9e:	4b12      	ldr	r3, [pc, #72]	; (800cee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cea2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cea6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cea8:	4b12      	ldr	r3, [pc, #72]	; (800cef4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800ceaa:	2201      	movs	r2, #1
 800ceac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ceae:	4b11      	ldr	r3, [pc, #68]	; (800cef4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800ceb4:	4a0c      	ldr	r2, [pc, #48]	; (800cee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ceb6:	693b      	ldr	r3, [r7, #16]
 800ceb8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ceba:	4b0b      	ldr	r3, [pc, #44]	; (800cee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800cebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cebe:	f003 0301 	and.w	r3, r3, #1
 800cec2:	2b01      	cmp	r3, #1
 800cec4:	d11e      	bne.n	800cf04 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800cec6:	f7fc fa09 	bl	80092dc <HAL_GetTick>
 800ceca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cecc:	e014      	b.n	800cef8 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cece:	f7fc fa05 	bl	80092dc <HAL_GetTick>
 800ced2:	4602      	mov	r2, r0
 800ced4:	697b      	ldr	r3, [r7, #20]
 800ced6:	1ad3      	subs	r3, r2, r3
 800ced8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cedc:	4293      	cmp	r3, r2
 800cede:	d90b      	bls.n	800cef8 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800cee0:	2303      	movs	r3, #3
 800cee2:	e03f      	b.n	800cf64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800cee4:	42470068 	.word	0x42470068
 800cee8:	40023800 	.word	0x40023800
 800ceec:	42470070 	.word	0x42470070
 800cef0:	40007000 	.word	0x40007000
 800cef4:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cef8:	4b1c      	ldr	r3, [pc, #112]	; (800cf6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800cefa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cefc:	f003 0302 	and.w	r3, r3, #2
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d0e4      	beq.n	800cece <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cf10:	d10d      	bne.n	800cf2e <HAL_RCCEx_PeriphCLKConfig+0x336>
 800cf12:	4b16      	ldr	r3, [pc, #88]	; (800cf6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800cf14:	689b      	ldr	r3, [r3, #8]
 800cf16:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf1e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cf22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf26:	4911      	ldr	r1, [pc, #68]	; (800cf6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800cf28:	4313      	orrs	r3, r2
 800cf2a:	608b      	str	r3, [r1, #8]
 800cf2c:	e005      	b.n	800cf3a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800cf2e:	4b0f      	ldr	r3, [pc, #60]	; (800cf6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800cf30:	689b      	ldr	r3, [r3, #8]
 800cf32:	4a0e      	ldr	r2, [pc, #56]	; (800cf6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800cf34:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800cf38:	6093      	str	r3, [r2, #8]
 800cf3a:	4b0c      	ldr	r3, [pc, #48]	; (800cf6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800cf3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cf46:	4909      	ldr	r1, [pc, #36]	; (800cf6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800cf48:	4313      	orrs	r3, r2
 800cf4a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	f003 0310 	and.w	r3, r3, #16
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d004      	beq.n	800cf62 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800cf5e:	4b04      	ldr	r3, [pc, #16]	; (800cf70 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800cf60:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800cf62:	2300      	movs	r3, #0
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3718      	adds	r7, #24
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}
 800cf6c:	40023800 	.word	0x40023800
 800cf70:	424711e0 	.word	0x424711e0

0800cf74 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b082      	sub	sp, #8
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d101      	bne.n	800cf86 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800cf82:	2301      	movs	r3, #1
 800cf84:	e083      	b.n	800d08e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	7f5b      	ldrb	r3, [r3, #29]
 800cf8a:	b2db      	uxtb	r3, r3
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d105      	bne.n	800cf9c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2200      	movs	r2, #0
 800cf94:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f7f5 f844 	bl	8002024 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2202      	movs	r2, #2
 800cfa0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	22ca      	movs	r2, #202	; 0xca
 800cfa8:	625a      	str	r2, [r3, #36]	; 0x24
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	2253      	movs	r2, #83	; 0x53
 800cfb0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f000 fb84 	bl	800d6c0 <RTC_EnterInitMode>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d008      	beq.n	800cfd0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	22ff      	movs	r2, #255	; 0xff
 800cfc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2204      	movs	r2, #4
 800cfca:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800cfcc:	2301      	movs	r3, #1
 800cfce:	e05e      	b.n	800d08e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	689b      	ldr	r3, [r3, #8]
 800cfd6:	687a      	ldr	r2, [r7, #4]
 800cfd8:	6812      	ldr	r2, [r2, #0]
 800cfda:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cfde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cfe2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	6899      	ldr	r1, [r3, #8]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	685a      	ldr	r2, [r3, #4]
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	691b      	ldr	r3, [r3, #16]
 800cff2:	431a      	orrs	r2, r3
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	695b      	ldr	r3, [r3, #20]
 800cff8:	431a      	orrs	r2, r3
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	430a      	orrs	r2, r1
 800d000:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	687a      	ldr	r2, [r7, #4]
 800d008:	68d2      	ldr	r2, [r2, #12]
 800d00a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	6919      	ldr	r1, [r3, #16]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	689b      	ldr	r3, [r3, #8]
 800d016:	041a      	lsls	r2, r3, #16
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	430a      	orrs	r2, r1
 800d01e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	68da      	ldr	r2, [r3, #12]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d02e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	689b      	ldr	r3, [r3, #8]
 800d036:	f003 0320 	and.w	r3, r3, #32
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d10e      	bne.n	800d05c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f000 fb16 	bl	800d670 <HAL_RTC_WaitForSynchro>
 800d044:	4603      	mov	r3, r0
 800d046:	2b00      	cmp	r3, #0
 800d048:	d008      	beq.n	800d05c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	22ff      	movs	r2, #255	; 0xff
 800d050:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2204      	movs	r2, #4
 800d056:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800d058:	2301      	movs	r3, #1
 800d05a:	e018      	b.n	800d08e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d06a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	699a      	ldr	r2, [r3, #24]
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	430a      	orrs	r2, r1
 800d07c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	22ff      	movs	r2, #255	; 0xff
 800d084:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2201      	movs	r2, #1
 800d08a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800d08c:	2300      	movs	r3, #0
  }
}
 800d08e:	4618      	mov	r0, r3
 800d090:	3708      	adds	r7, #8
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}

0800d096 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d096:	b590      	push	{r4, r7, lr}
 800d098:	b087      	sub	sp, #28
 800d09a:	af00      	add	r7, sp, #0
 800d09c:	60f8      	str	r0, [r7, #12]
 800d09e:	60b9      	str	r1, [r7, #8]
 800d0a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	7f1b      	ldrb	r3, [r3, #28]
 800d0aa:	2b01      	cmp	r3, #1
 800d0ac:	d101      	bne.n	800d0b2 <HAL_RTC_SetTime+0x1c>
 800d0ae:	2302      	movs	r3, #2
 800d0b0:	e0aa      	b.n	800d208 <HAL_RTC_SetTime+0x172>
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	2201      	movs	r2, #1
 800d0b6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	2202      	movs	r2, #2
 800d0bc:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d126      	bne.n	800d112 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	689b      	ldr	r3, [r3, #8]
 800d0ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d102      	bne.n	800d0d8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	781b      	ldrb	r3, [r3, #0]
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f000 fb1b 	bl	800d718 <RTC_ByteToBcd2>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	785b      	ldrb	r3, [r3, #1]
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f000 fb14 	bl	800d718 <RTC_ByteToBcd2>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d0f4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	789b      	ldrb	r3, [r3, #2]
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f000 fb0c 	bl	800d718 <RTC_ByteToBcd2>
 800d100:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800d102:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	78db      	ldrb	r3, [r3, #3]
 800d10a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d10c:	4313      	orrs	r3, r2
 800d10e:	617b      	str	r3, [r7, #20]
 800d110:	e018      	b.n	800d144 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	689b      	ldr	r3, [r3, #8]
 800d118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d102      	bne.n	800d126 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	2200      	movs	r2, #0
 800d124:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	781b      	ldrb	r3, [r3, #0]
 800d12a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	785b      	ldrb	r3, [r3, #1]
 800d130:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d132:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800d134:	68ba      	ldr	r2, [r7, #8]
 800d136:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800d138:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	78db      	ldrb	r3, [r3, #3]
 800d13e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d140:	4313      	orrs	r3, r2
 800d142:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	22ca      	movs	r2, #202	; 0xca
 800d14a:	625a      	str	r2, [r3, #36]	; 0x24
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	2253      	movs	r2, #83	; 0x53
 800d152:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d154:	68f8      	ldr	r0, [r7, #12]
 800d156:	f000 fab3 	bl	800d6c0 <RTC_EnterInitMode>
 800d15a:	4603      	mov	r3, r0
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d00b      	beq.n	800d178 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	22ff      	movs	r2, #255	; 0xff
 800d166:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	2204      	movs	r2, #4
 800d16c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	2200      	movs	r2, #0
 800d172:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800d174:	2301      	movs	r3, #1
 800d176:	e047      	b.n	800d208 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681a      	ldr	r2, [r3, #0]
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800d182:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800d186:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	689a      	ldr	r2, [r3, #8]
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d196:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	6899      	ldr	r1, [r3, #8]
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	68da      	ldr	r2, [r3, #12]
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	691b      	ldr	r3, [r3, #16]
 800d1a6:	431a      	orrs	r2, r3
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	430a      	orrs	r2, r1
 800d1ae:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	68da      	ldr	r2, [r3, #12]
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d1be:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	689b      	ldr	r3, [r3, #8]
 800d1c6:	f003 0320 	and.w	r3, r3, #32
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d111      	bne.n	800d1f2 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d1ce:	68f8      	ldr	r0, [r7, #12]
 800d1d0:	f000 fa4e 	bl	800d670 <HAL_RTC_WaitForSynchro>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d00b      	beq.n	800d1f2 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	22ff      	movs	r2, #255	; 0xff
 800d1e0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2204      	movs	r2, #4
 800d1e6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	e00a      	b.n	800d208 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	22ff      	movs	r2, #255	; 0xff
 800d1f8:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	2201      	movs	r2, #1
 800d1fe:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2200      	movs	r2, #0
 800d204:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800d206:	2300      	movs	r3, #0
  }
}
 800d208:	4618      	mov	r0, r3
 800d20a:	371c      	adds	r7, #28
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd90      	pop	{r4, r7, pc}

0800d210 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d210:	b590      	push	{r4, r7, lr}
 800d212:	b087      	sub	sp, #28
 800d214:	af00      	add	r7, sp, #0
 800d216:	60f8      	str	r0, [r7, #12]
 800d218:	60b9      	str	r1, [r7, #8]
 800d21a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800d21c:	2300      	movs	r3, #0
 800d21e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	7f1b      	ldrb	r3, [r3, #28]
 800d224:	2b01      	cmp	r3, #1
 800d226:	d101      	bne.n	800d22c <HAL_RTC_SetDate+0x1c>
 800d228:	2302      	movs	r3, #2
 800d22a:	e094      	b.n	800d356 <HAL_RTC_SetDate+0x146>
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	2201      	movs	r2, #1
 800d230:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	2202      	movs	r2, #2
 800d236:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d10e      	bne.n	800d25c <HAL_RTC_SetDate+0x4c>
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	785b      	ldrb	r3, [r3, #1]
 800d242:	f003 0310 	and.w	r3, r3, #16
 800d246:	2b00      	cmp	r3, #0
 800d248:	d008      	beq.n	800d25c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	785b      	ldrb	r3, [r3, #1]
 800d24e:	f023 0310 	bic.w	r3, r3, #16
 800d252:	b2db      	uxtb	r3, r3
 800d254:	330a      	adds	r3, #10
 800d256:	b2da      	uxtb	r2, r3
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d11c      	bne.n	800d29c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d262:	68bb      	ldr	r3, [r7, #8]
 800d264:	78db      	ldrb	r3, [r3, #3]
 800d266:	4618      	mov	r0, r3
 800d268:	f000 fa56 	bl	800d718 <RTC_ByteToBcd2>
 800d26c:	4603      	mov	r3, r0
 800d26e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	785b      	ldrb	r3, [r3, #1]
 800d274:	4618      	mov	r0, r3
 800d276:	f000 fa4f 	bl	800d718 <RTC_ByteToBcd2>
 800d27a:	4603      	mov	r3, r0
 800d27c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d27e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	789b      	ldrb	r3, [r3, #2]
 800d284:	4618      	mov	r0, r3
 800d286:	f000 fa47 	bl	800d718 <RTC_ByteToBcd2>
 800d28a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800d28c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	781b      	ldrb	r3, [r3, #0]
 800d294:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d296:	4313      	orrs	r3, r2
 800d298:	617b      	str	r3, [r7, #20]
 800d29a:	e00e      	b.n	800d2ba <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	78db      	ldrb	r3, [r3, #3]
 800d2a0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	785b      	ldrb	r3, [r3, #1]
 800d2a6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d2a8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800d2aa:	68ba      	ldr	r2, [r7, #8]
 800d2ac:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800d2ae:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	781b      	ldrb	r3, [r3, #0]
 800d2b4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d2b6:	4313      	orrs	r3, r2
 800d2b8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	22ca      	movs	r2, #202	; 0xca
 800d2c0:	625a      	str	r2, [r3, #36]	; 0x24
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	2253      	movs	r2, #83	; 0x53
 800d2c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d2ca:	68f8      	ldr	r0, [r7, #12]
 800d2cc:	f000 f9f8 	bl	800d6c0 <RTC_EnterInitMode>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d00b      	beq.n	800d2ee <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	22ff      	movs	r2, #255	; 0xff
 800d2dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	2204      	movs	r2, #4
 800d2e2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	e033      	b.n	800d356 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	681a      	ldr	r2, [r3, #0]
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d2f8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d2fc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	68da      	ldr	r2, [r3, #12]
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d30c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	689b      	ldr	r3, [r3, #8]
 800d314:	f003 0320 	and.w	r3, r3, #32
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d111      	bne.n	800d340 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d31c:	68f8      	ldr	r0, [r7, #12]
 800d31e:	f000 f9a7 	bl	800d670 <HAL_RTC_WaitForSynchro>
 800d322:	4603      	mov	r3, r0
 800d324:	2b00      	cmp	r3, #0
 800d326:	d00b      	beq.n	800d340 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	22ff      	movs	r2, #255	; 0xff
 800d32e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	2204      	movs	r2, #4
 800d334:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	2200      	movs	r2, #0
 800d33a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800d33c:	2301      	movs	r3, #1
 800d33e:	e00a      	b.n	800d356 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	22ff      	movs	r2, #255	; 0xff
 800d346:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	2201      	movs	r2, #1
 800d34c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	2200      	movs	r2, #0
 800d352:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800d354:	2300      	movs	r3, #0
  }
}
 800d356:	4618      	mov	r0, r3
 800d358:	371c      	adds	r7, #28
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd90      	pop	{r4, r7, pc}
	...

0800d360 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800d360:	b590      	push	{r4, r7, lr}
 800d362:	b089      	sub	sp, #36	; 0x24
 800d364:	af00      	add	r7, sp, #0
 800d366:	60f8      	str	r0, [r7, #12]
 800d368:	60b9      	str	r1, [r7, #8]
 800d36a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800d36c:	2300      	movs	r3, #0
 800d36e:	61fb      	str	r3, [r7, #28]
 800d370:	2300      	movs	r3, #0
 800d372:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800d374:	4b93      	ldr	r3, [pc, #588]	; (800d5c4 <HAL_RTC_SetAlarm_IT+0x264>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4a93      	ldr	r2, [pc, #588]	; (800d5c8 <HAL_RTC_SetAlarm_IT+0x268>)
 800d37a:	fba2 2303 	umull	r2, r3, r2, r3
 800d37e:	0adb      	lsrs	r3, r3, #11
 800d380:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d384:	fb02 f303 	mul.w	r3, r2, r3
 800d388:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	7f1b      	ldrb	r3, [r3, #28]
 800d38e:	2b01      	cmp	r3, #1
 800d390:	d101      	bne.n	800d396 <HAL_RTC_SetAlarm_IT+0x36>
 800d392:	2302      	movs	r3, #2
 800d394:	e111      	b.n	800d5ba <HAL_RTC_SetAlarm_IT+0x25a>
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	2201      	movs	r2, #1
 800d39a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	2202      	movs	r2, #2
 800d3a0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d137      	bne.n	800d418 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	689b      	ldr	r3, [r3, #8]
 800d3ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d102      	bne.n	800d3bc <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	781b      	ldrb	r3, [r3, #0]
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f000 f9a9 	bl	800d718 <RTC_ByteToBcd2>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800d3ca:	68bb      	ldr	r3, [r7, #8]
 800d3cc:	785b      	ldrb	r3, [r3, #1]
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f000 f9a2 	bl	800d718 <RTC_ByteToBcd2>
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800d3d8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	789b      	ldrb	r3, [r3, #2]
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f000 f99a 	bl	800d718 <RTC_ByteToBcd2>
 800d3e4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800d3e6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	78db      	ldrb	r3, [r3, #3]
 800d3ee:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800d3f0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f000 f98c 	bl	800d718 <RTC_ByteToBcd2>
 800d400:	4603      	mov	r3, r0
 800d402:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800d404:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800d40c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800d412:	4313      	orrs	r3, r2
 800d414:	61fb      	str	r3, [r7, #28]
 800d416:	e023      	b.n	800d460 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	689b      	ldr	r3, [r3, #8]
 800d41e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d422:	2b00      	cmp	r3, #0
 800d424:	d102      	bne.n	800d42c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	2200      	movs	r2, #0
 800d42a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	781b      	ldrb	r3, [r3, #0]
 800d430:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	785b      	ldrb	r3, [r3, #1]
 800d436:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800d438:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800d43a:	68ba      	ldr	r2, [r7, #8]
 800d43c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800d43e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	78db      	ldrb	r3, [r3, #3]
 800d444:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800d446:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800d448:	68bb      	ldr	r3, [r7, #8]
 800d44a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d44e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800d450:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800d456:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800d45c:	4313      	orrs	r3, r2
 800d45e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	685a      	ldr	r2, [r3, #4]
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	699b      	ldr	r3, [r3, #24]
 800d468:	4313      	orrs	r3, r2
 800d46a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	22ca      	movs	r2, #202	; 0xca
 800d472:	625a      	str	r2, [r3, #36]	; 0x24
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	2253      	movs	r2, #83	; 0x53
 800d47a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d484:	d141      	bne.n	800d50a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	689a      	ldr	r2, [r3, #8]
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d494:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	68db      	ldr	r3, [r3, #12]
 800d49c:	b2da      	uxtb	r2, r3
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800d4a6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	1e5a      	subs	r2, r3, #1
 800d4ac:	617a      	str	r2, [r7, #20]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d10b      	bne.n	800d4ca <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	22ff      	movs	r2, #255	; 0xff
 800d4b8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	2203      	movs	r2, #3
 800d4be:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800d4c6:	2303      	movs	r3, #3
 800d4c8:	e077      	b.n	800d5ba <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	68db      	ldr	r3, [r3, #12]
 800d4d0:	f003 0301 	and.w	r3, r3, #1
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d0e7      	beq.n	800d4a8 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	69fa      	ldr	r2, [r7, #28]
 800d4de:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	69ba      	ldr	r2, [r7, #24]
 800d4e6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	689a      	ldr	r2, [r3, #8]
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d4f6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	689a      	ldr	r2, [r3, #8]
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d506:	609a      	str	r2, [r3, #8]
 800d508:	e040      	b.n	800d58c <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	689a      	ldr	r2, [r3, #8]
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d518:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	68db      	ldr	r3, [r3, #12]
 800d520:	b2da      	uxtb	r2, r3
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f462 7220 	orn	r2, r2, #640	; 0x280
 800d52a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	1e5a      	subs	r2, r3, #1
 800d530:	617a      	str	r2, [r7, #20]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d10b      	bne.n	800d54e <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	22ff      	movs	r2, #255	; 0xff
 800d53c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	2203      	movs	r2, #3
 800d542:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	2200      	movs	r2, #0
 800d548:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800d54a:	2303      	movs	r3, #3
 800d54c:	e035      	b.n	800d5ba <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	68db      	ldr	r3, [r3, #12]
 800d554:	f003 0302 	and.w	r3, r3, #2
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d0e7      	beq.n	800d52c <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	69fa      	ldr	r2, [r7, #28]
 800d562:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	69ba      	ldr	r2, [r7, #24]
 800d56a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	689a      	ldr	r2, [r3, #8]
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d57a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	689a      	ldr	r2, [r3, #8]
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d58a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800d58c:	4b0f      	ldr	r3, [pc, #60]	; (800d5cc <HAL_RTC_SetAlarm_IT+0x26c>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	4a0e      	ldr	r2, [pc, #56]	; (800d5cc <HAL_RTC_SetAlarm_IT+0x26c>)
 800d592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d596:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 800d598:	4b0c      	ldr	r3, [pc, #48]	; (800d5cc <HAL_RTC_SetAlarm_IT+0x26c>)
 800d59a:	689b      	ldr	r3, [r3, #8]
 800d59c:	4a0b      	ldr	r2, [pc, #44]	; (800d5cc <HAL_RTC_SetAlarm_IT+0x26c>)
 800d59e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d5a2:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	22ff      	movs	r2, #255	; 0xff
 800d5aa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	2201      	movs	r2, #1
 800d5b0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800d5b8:	2300      	movs	r3, #0
}
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	3724      	adds	r7, #36	; 0x24
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd90      	pop	{r4, r7, pc}
 800d5c2:	bf00      	nop
 800d5c4:	2000003c 	.word	0x2000003c
 800d5c8:	10624dd3 	.word	0x10624dd3
 800d5cc:	40013c00 	.word	0x40013c00

0800d5d0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b082      	sub	sp, #8
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	689b      	ldr	r3, [r3, #8]
 800d5de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d012      	beq.n	800d60c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	68db      	ldr	r3, [r3, #12]
 800d5ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d00b      	beq.n	800d60c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f000 f831 	bl	800d65c <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	68db      	ldr	r3, [r3, #12]
 800d600:	b2da      	uxtb	r2, r3
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800d60a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	689b      	ldr	r3, [r3, #8]
 800d612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d616:	2b00      	cmp	r3, #0
 800d618:	d012      	beq.n	800d640 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	68db      	ldr	r3, [r3, #12]
 800d620:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d624:	2b00      	cmp	r3, #0
 800d626:	d00b      	beq.n	800d640 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	f000 f9ab 	bl	800d984 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	68db      	ldr	r3, [r3, #12]
 800d634:	b2da      	uxtb	r2, r3
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800d63e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800d640:	4b05      	ldr	r3, [pc, #20]	; (800d658 <HAL_RTC_AlarmIRQHandler+0x88>)
 800d642:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d646:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2201      	movs	r2, #1
 800d64c:	775a      	strb	r2, [r3, #29]
}
 800d64e:	bf00      	nop
 800d650:	3708      	adds	r7, #8
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}
 800d656:	bf00      	nop
 800d658:	40013c00 	.word	0x40013c00

0800d65c <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800d65c:	b480      	push	{r7}
 800d65e:	b083      	sub	sp, #12
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800d664:	bf00      	nop
 800d666:	370c      	adds	r7, #12
 800d668:	46bd      	mov	sp, r7
 800d66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66e:	4770      	bx	lr

0800d670 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b084      	sub	sp, #16
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d678:	2300      	movs	r3, #0
 800d67a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	68da      	ldr	r2, [r3, #12]
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d68a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d68c:	f7fb fe26 	bl	80092dc <HAL_GetTick>
 800d690:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d692:	e009      	b.n	800d6a8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d694:	f7fb fe22 	bl	80092dc <HAL_GetTick>
 800d698:	4602      	mov	r2, r0
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	1ad3      	subs	r3, r2, r3
 800d69e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d6a2:	d901      	bls.n	800d6a8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800d6a4:	2303      	movs	r3, #3
 800d6a6:	e007      	b.n	800d6b8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	68db      	ldr	r3, [r3, #12]
 800d6ae:	f003 0320 	and.w	r3, r3, #32
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d0ee      	beq.n	800d694 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800d6b6:	2300      	movs	r3, #0
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3710      	adds	r7, #16
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}

0800d6c0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b084      	sub	sp, #16
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	68db      	ldr	r3, [r3, #12]
 800d6d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d119      	bne.n	800d70e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	f04f 32ff 	mov.w	r2, #4294967295
 800d6e2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d6e4:	f7fb fdfa 	bl	80092dc <HAL_GetTick>
 800d6e8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d6ea:	e009      	b.n	800d700 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d6ec:	f7fb fdf6 	bl	80092dc <HAL_GetTick>
 800d6f0:	4602      	mov	r2, r0
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	1ad3      	subs	r3, r2, r3
 800d6f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d6fa:	d901      	bls.n	800d700 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800d6fc:	2303      	movs	r3, #3
 800d6fe:	e007      	b.n	800d710 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	68db      	ldr	r3, [r3, #12]
 800d706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d0ee      	beq.n	800d6ec <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800d70e:	2300      	movs	r3, #0
}
 800d710:	4618      	mov	r0, r3
 800d712:	3710      	adds	r7, #16
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}

0800d718 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d718:	b480      	push	{r7}
 800d71a:	b085      	sub	sp, #20
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	4603      	mov	r3, r0
 800d720:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800d722:	2300      	movs	r3, #0
 800d724:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800d726:	e005      	b.n	800d734 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	3301      	adds	r3, #1
 800d72c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800d72e:	79fb      	ldrb	r3, [r7, #7]
 800d730:	3b0a      	subs	r3, #10
 800d732:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800d734:	79fb      	ldrb	r3, [r7, #7]
 800d736:	2b09      	cmp	r3, #9
 800d738:	d8f6      	bhi.n	800d728 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	b2db      	uxtb	r3, r3
 800d73e:	011b      	lsls	r3, r3, #4
 800d740:	b2da      	uxtb	r2, r3
 800d742:	79fb      	ldrb	r3, [r7, #7]
 800d744:	4313      	orrs	r3, r2
 800d746:	b2db      	uxtb	r3, r3
}
 800d748:	4618      	mov	r0, r3
 800d74a:	3714      	adds	r7, #20
 800d74c:	46bd      	mov	sp, r7
 800d74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d752:	4770      	bx	lr

0800d754 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800d754:	b480      	push	{r7}
 800d756:	b087      	sub	sp, #28
 800d758:	af00      	add	r7, sp, #0
 800d75a:	60f8      	str	r0, [r7, #12]
 800d75c:	60b9      	str	r1, [r7, #8]
 800d75e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	7f1b      	ldrb	r3, [r3, #28]
 800d764:	2b01      	cmp	r3, #1
 800d766:	d101      	bne.n	800d76c <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 800d768:	2302      	movs	r3, #2
 800d76a:	e0a6      	b.n	800d8ba <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	2201      	movs	r2, #1
 800d770:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	2202      	movs	r2, #2
 800d776:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	22ca      	movs	r2, #202	; 0xca
 800d77e:	625a      	str	r2, [r3, #36]	; 0x24
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	2253      	movs	r2, #83	; 0x53
 800d786:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	689b      	ldr	r3, [r3, #8]
 800d78e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d792:	2b00      	cmp	r3, #0
 800d794:	d022      	beq.n	800d7dc <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800d796:	4b4c      	ldr	r3, [pc, #304]	; (800d8c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	4a4c      	ldr	r2, [pc, #304]	; (800d8cc <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800d79c:	fba2 2303 	umull	r2, r3, r2, r3
 800d7a0:	0adb      	lsrs	r3, r3, #11
 800d7a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d7a6:	fb02 f303 	mul.w	r3, r2, r3
 800d7aa:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 800d7ac:	697b      	ldr	r3, [r7, #20]
 800d7ae:	1e5a      	subs	r2, r3, #1
 800d7b0:	617a      	str	r2, [r7, #20]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d10b      	bne.n	800d7ce <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	22ff      	movs	r2, #255	; 0xff
 800d7bc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	2203      	movs	r2, #3
 800d7c2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800d7ca:	2303      	movs	r3, #3
 800d7cc:	e075      	b.n	800d8ba <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	68db      	ldr	r3, [r3, #12]
 800d7d4:	f003 0304 	and.w	r3, r3, #4
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d1e7      	bne.n	800d7ac <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	689a      	ldr	r2, [r3, #8]
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d7ea:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800d7ec:	4b36      	ldr	r3, [pc, #216]	; (800d8c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	4a36      	ldr	r2, [pc, #216]	; (800d8cc <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800d7f2:	fba2 2303 	umull	r2, r3, r2, r3
 800d7f6:	0adb      	lsrs	r3, r3, #11
 800d7f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d7fc:	fb02 f303 	mul.w	r3, r2, r3
 800d800:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	1e5a      	subs	r2, r3, #1
 800d806:	617a      	str	r2, [r7, #20]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d10b      	bne.n	800d824 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	22ff      	movs	r2, #255	; 0xff
 800d812:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	2203      	movs	r2, #3
 800d818:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	2200      	movs	r2, #0
 800d81e:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800d820:	2303      	movs	r3, #3
 800d822:	e04a      	b.n	800d8ba <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	68db      	ldr	r3, [r3, #12]
 800d82a:	f003 0304 	and.w	r3, r3, #4
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d0e7      	beq.n	800d802 <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	68ba      	ldr	r2, [r7, #8]
 800d838:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	689a      	ldr	r2, [r3, #8]
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	f022 0207 	bic.w	r2, r2, #7
 800d848:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	6899      	ldr	r1, [r3, #8]
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	687a      	ldr	r2, [r7, #4]
 800d856:	430a      	orrs	r2, r1
 800d858:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800d85a:	4b1d      	ldr	r3, [pc, #116]	; (800d8d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	4a1c      	ldr	r2, [pc, #112]	; (800d8d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800d860:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d864:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800d866:	4b1a      	ldr	r3, [pc, #104]	; (800d8d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800d868:	689b      	ldr	r3, [r3, #8]
 800d86a:	4a19      	ldr	r2, [pc, #100]	; (800d8d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800d86c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d870:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	68db      	ldr	r3, [r3, #12]
 800d878:	b2da      	uxtb	r2, r3
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800d882:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	689a      	ldr	r2, [r3, #8]
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d892:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	689a      	ldr	r2, [r3, #8]
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d8a2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	22ff      	movs	r2, #255	; 0xff
 800d8aa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	2201      	movs	r2, #1
 800d8b0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800d8b8:	2300      	movs	r3, #0
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	371c      	adds	r7, #28
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c4:	4770      	bx	lr
 800d8c6:	bf00      	nop
 800d8c8:	2000003c 	.word	0x2000003c
 800d8cc:	10624dd3 	.word	0x10624dd3
 800d8d0:	40013c00 	.word	0x40013c00

0800d8d4 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b084      	sub	sp, #16
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d8dc:	2300      	movs	r3, #0
 800d8de:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	7f1b      	ldrb	r3, [r3, #28]
 800d8e4:	2b01      	cmp	r3, #1
 800d8e6:	d101      	bne.n	800d8ec <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 800d8e8:	2302      	movs	r3, #2
 800d8ea:	e047      	b.n	800d97c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2202      	movs	r2, #2
 800d8f6:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	22ca      	movs	r2, #202	; 0xca
 800d8fe:	625a      	str	r2, [r3, #36]	; 0x24
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	2253      	movs	r2, #83	; 0x53
 800d906:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	689a      	ldr	r2, [r3, #8]
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d916:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	689a      	ldr	r2, [r3, #8]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d926:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d928:	f7fb fcd8 	bl	80092dc <HAL_GetTick>
 800d92c:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800d92e:	e013      	b.n	800d958 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d930:	f7fb fcd4 	bl	80092dc <HAL_GetTick>
 800d934:	4602      	mov	r2, r0
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	1ad3      	subs	r3, r2, r3
 800d93a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d93e:	d90b      	bls.n	800d958 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	22ff      	movs	r2, #255	; 0xff
 800d946:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2203      	movs	r2, #3
 800d94c:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2200      	movs	r2, #0
 800d952:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800d954:	2303      	movs	r3, #3
 800d956:	e011      	b.n	800d97c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	68db      	ldr	r3, [r3, #12]
 800d95e:	f003 0304 	and.w	r3, r3, #4
 800d962:	2b00      	cmp	r3, #0
 800d964:	d0e4      	beq.n	800d930 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	22ff      	movs	r2, #255	; 0xff
 800d96c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2201      	movs	r2, #1
 800d972:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2200      	movs	r2, #0
 800d978:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800d97a:	2300      	movs	r3, #0
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	3710      	adds	r7, #16
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}

0800d984 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800d984:	b480      	push	{r7}
 800d986:	b083      	sub	sp, #12
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 800d98c:	bf00      	nop
 800d98e:	370c      	adds	r7, #12
 800d990:	46bd      	mov	sp, r7
 800d992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d996:	4770      	bx	lr

0800d998 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b082      	sub	sp, #8
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d101      	bne.n	800d9aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	e07b      	b.n	800daa2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d108      	bne.n	800d9c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	685b      	ldr	r3, [r3, #4]
 800d9b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d9ba:	d009      	beq.n	800d9d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2200      	movs	r2, #0
 800d9c0:	61da      	str	r2, [r3, #28]
 800d9c2:	e005      	b.n	800d9d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d9dc:	b2db      	uxtb	r3, r3
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d106      	bne.n	800d9f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f7f4 fd76 	bl	80024dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2202      	movs	r2, #2
 800d9f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	681a      	ldr	r2, [r3, #0]
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800da06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	685b      	ldr	r3, [r3, #4]
 800da0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	689b      	ldr	r3, [r3, #8]
 800da14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800da18:	431a      	orrs	r2, r3
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	68db      	ldr	r3, [r3, #12]
 800da1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800da22:	431a      	orrs	r2, r3
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	691b      	ldr	r3, [r3, #16]
 800da28:	f003 0302 	and.w	r3, r3, #2
 800da2c:	431a      	orrs	r2, r3
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	695b      	ldr	r3, [r3, #20]
 800da32:	f003 0301 	and.w	r3, r3, #1
 800da36:	431a      	orrs	r2, r3
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	699b      	ldr	r3, [r3, #24]
 800da3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800da40:	431a      	orrs	r2, r3
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	69db      	ldr	r3, [r3, #28]
 800da46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800da4a:	431a      	orrs	r2, r3
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6a1b      	ldr	r3, [r3, #32]
 800da50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da54:	ea42 0103 	orr.w	r1, r2, r3
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da5c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	430a      	orrs	r2, r1
 800da66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	699b      	ldr	r3, [r3, #24]
 800da6c:	0c1b      	lsrs	r3, r3, #16
 800da6e:	f003 0104 	and.w	r1, r3, #4
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da76:	f003 0210 	and.w	r2, r3, #16
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	430a      	orrs	r2, r1
 800da80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	69da      	ldr	r2, [r3, #28]
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800da90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2200      	movs	r2, #0
 800da96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2201      	movs	r2, #1
 800da9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800daa0:	2300      	movs	r3, #0
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3708      	adds	r7, #8
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}

0800daaa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800daaa:	b580      	push	{r7, lr}
 800daac:	b088      	sub	sp, #32
 800daae:	af00      	add	r7, sp, #0
 800dab0:	60f8      	str	r0, [r7, #12]
 800dab2:	60b9      	str	r1, [r7, #8]
 800dab4:	603b      	str	r3, [r7, #0]
 800dab6:	4613      	mov	r3, r2
 800dab8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800daba:	2300      	movs	r3, #0
 800dabc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800dac4:	2b01      	cmp	r3, #1
 800dac6:	d101      	bne.n	800dacc <HAL_SPI_Transmit+0x22>
 800dac8:	2302      	movs	r3, #2
 800daca:	e126      	b.n	800dd1a <HAL_SPI_Transmit+0x270>
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	2201      	movs	r2, #1
 800dad0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dad4:	f7fb fc02 	bl	80092dc <HAL_GetTick>
 800dad8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800dada:	88fb      	ldrh	r3, [r7, #6]
 800dadc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dae4:	b2db      	uxtb	r3, r3
 800dae6:	2b01      	cmp	r3, #1
 800dae8:	d002      	beq.n	800daf0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800daea:	2302      	movs	r3, #2
 800daec:	77fb      	strb	r3, [r7, #31]
    goto error;
 800daee:	e10b      	b.n	800dd08 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d002      	beq.n	800dafc <HAL_SPI_Transmit+0x52>
 800daf6:	88fb      	ldrh	r3, [r7, #6]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d102      	bne.n	800db02 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800dafc:	2301      	movs	r3, #1
 800dafe:	77fb      	strb	r3, [r7, #31]
    goto error;
 800db00:	e102      	b.n	800dd08 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	2203      	movs	r2, #3
 800db06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	2200      	movs	r2, #0
 800db0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	68ba      	ldr	r2, [r7, #8]
 800db14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	88fa      	ldrh	r2, [r7, #6]
 800db1a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	88fa      	ldrh	r2, [r7, #6]
 800db20:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	2200      	movs	r2, #0
 800db26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	2200      	movs	r2, #0
 800db2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	2200      	movs	r2, #0
 800db32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	2200      	movs	r2, #0
 800db38:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	2200      	movs	r2, #0
 800db3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	689b      	ldr	r3, [r3, #8]
 800db44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800db48:	d10f      	bne.n	800db6a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	681a      	ldr	r2, [r3, #0]
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800db58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	681a      	ldr	r2, [r3, #0]
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800db68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db74:	2b40      	cmp	r3, #64	; 0x40
 800db76:	d007      	beq.n	800db88 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	681a      	ldr	r2, [r3, #0]
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800db86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	68db      	ldr	r3, [r3, #12]
 800db8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800db90:	d14b      	bne.n	800dc2a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	685b      	ldr	r3, [r3, #4]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d002      	beq.n	800dba0 <HAL_SPI_Transmit+0xf6>
 800db9a:	8afb      	ldrh	r3, [r7, #22]
 800db9c:	2b01      	cmp	r3, #1
 800db9e:	d13e      	bne.n	800dc1e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dba4:	881a      	ldrh	r2, [r3, #0]
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbb0:	1c9a      	adds	r2, r3, #2
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dbba:	b29b      	uxth	r3, r3
 800dbbc:	3b01      	subs	r3, #1
 800dbbe:	b29a      	uxth	r2, r3
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800dbc4:	e02b      	b.n	800dc1e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	689b      	ldr	r3, [r3, #8]
 800dbcc:	f003 0302 	and.w	r3, r3, #2
 800dbd0:	2b02      	cmp	r3, #2
 800dbd2:	d112      	bne.n	800dbfa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbd8:	881a      	ldrh	r2, [r3, #0]
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbe4:	1c9a      	adds	r2, r3, #2
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dbee:	b29b      	uxth	r3, r3
 800dbf0:	3b01      	subs	r3, #1
 800dbf2:	b29a      	uxth	r2, r3
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	86da      	strh	r2, [r3, #54]	; 0x36
 800dbf8:	e011      	b.n	800dc1e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dbfa:	f7fb fb6f 	bl	80092dc <HAL_GetTick>
 800dbfe:	4602      	mov	r2, r0
 800dc00:	69bb      	ldr	r3, [r7, #24]
 800dc02:	1ad3      	subs	r3, r2, r3
 800dc04:	683a      	ldr	r2, [r7, #0]
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d803      	bhi.n	800dc12 <HAL_SPI_Transmit+0x168>
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc10:	d102      	bne.n	800dc18 <HAL_SPI_Transmit+0x16e>
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d102      	bne.n	800dc1e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800dc18:	2303      	movs	r3, #3
 800dc1a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800dc1c:	e074      	b.n	800dd08 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dc22:	b29b      	uxth	r3, r3
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d1ce      	bne.n	800dbc6 <HAL_SPI_Transmit+0x11c>
 800dc28:	e04c      	b.n	800dcc4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	685b      	ldr	r3, [r3, #4]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d002      	beq.n	800dc38 <HAL_SPI_Transmit+0x18e>
 800dc32:	8afb      	ldrh	r3, [r7, #22]
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	d140      	bne.n	800dcba <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	330c      	adds	r3, #12
 800dc42:	7812      	ldrb	r2, [r2, #0]
 800dc44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc4a:	1c5a      	adds	r2, r3, #1
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dc54:	b29b      	uxth	r3, r3
 800dc56:	3b01      	subs	r3, #1
 800dc58:	b29a      	uxth	r2, r3
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800dc5e:	e02c      	b.n	800dcba <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	689b      	ldr	r3, [r3, #8]
 800dc66:	f003 0302 	and.w	r3, r3, #2
 800dc6a:	2b02      	cmp	r3, #2
 800dc6c:	d113      	bne.n	800dc96 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	330c      	adds	r3, #12
 800dc78:	7812      	ldrb	r2, [r2, #0]
 800dc7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc80:	1c5a      	adds	r2, r3, #1
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dc8a:	b29b      	uxth	r3, r3
 800dc8c:	3b01      	subs	r3, #1
 800dc8e:	b29a      	uxth	r2, r3
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	86da      	strh	r2, [r3, #54]	; 0x36
 800dc94:	e011      	b.n	800dcba <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dc96:	f7fb fb21 	bl	80092dc <HAL_GetTick>
 800dc9a:	4602      	mov	r2, r0
 800dc9c:	69bb      	ldr	r3, [r7, #24]
 800dc9e:	1ad3      	subs	r3, r2, r3
 800dca0:	683a      	ldr	r2, [r7, #0]
 800dca2:	429a      	cmp	r2, r3
 800dca4:	d803      	bhi.n	800dcae <HAL_SPI_Transmit+0x204>
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcac:	d102      	bne.n	800dcb4 <HAL_SPI_Transmit+0x20a>
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d102      	bne.n	800dcba <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800dcb4:	2303      	movs	r3, #3
 800dcb6:	77fb      	strb	r3, [r7, #31]
          goto error;
 800dcb8:	e026      	b.n	800dd08 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dcbe:	b29b      	uxth	r3, r3
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d1cd      	bne.n	800dc60 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dcc4:	69ba      	ldr	r2, [r7, #24]
 800dcc6:	6839      	ldr	r1, [r7, #0]
 800dcc8:	68f8      	ldr	r0, [r7, #12]
 800dcca:	f000 fbcb 	bl	800e464 <SPI_EndRxTxTransaction>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d002      	beq.n	800dcda <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	2220      	movs	r2, #32
 800dcd8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	689b      	ldr	r3, [r3, #8]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d10a      	bne.n	800dcf8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dce2:	2300      	movs	r3, #0
 800dce4:	613b      	str	r3, [r7, #16]
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	68db      	ldr	r3, [r3, #12]
 800dcec:	613b      	str	r3, [r7, #16]
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	689b      	ldr	r3, [r3, #8]
 800dcf4:	613b      	str	r3, [r7, #16]
 800dcf6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d002      	beq.n	800dd06 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800dd00:	2301      	movs	r3, #1
 800dd02:	77fb      	strb	r3, [r7, #31]
 800dd04:	e000      	b.n	800dd08 <HAL_SPI_Transmit+0x25e>
  }

error:
 800dd06:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	2201      	movs	r2, #1
 800dd0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	2200      	movs	r2, #0
 800dd14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800dd18:	7ffb      	ldrb	r3, [r7, #31]
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3720      	adds	r7, #32
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}

0800dd22 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dd22:	b580      	push	{r7, lr}
 800dd24:	b088      	sub	sp, #32
 800dd26:	af02      	add	r7, sp, #8
 800dd28:	60f8      	str	r0, [r7, #12]
 800dd2a:	60b9      	str	r1, [r7, #8]
 800dd2c:	603b      	str	r3, [r7, #0]
 800dd2e:	4613      	mov	r3, r2
 800dd30:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800dd32:	2300      	movs	r3, #0
 800dd34:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	685b      	ldr	r3, [r3, #4]
 800dd3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dd3e:	d112      	bne.n	800dd66 <HAL_SPI_Receive+0x44>
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	689b      	ldr	r3, [r3, #8]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d10e      	bne.n	800dd66 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	2204      	movs	r2, #4
 800dd4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800dd50:	88fa      	ldrh	r2, [r7, #6]
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	9300      	str	r3, [sp, #0]
 800dd56:	4613      	mov	r3, r2
 800dd58:	68ba      	ldr	r2, [r7, #8]
 800dd5a:	68b9      	ldr	r1, [r7, #8]
 800dd5c:	68f8      	ldr	r0, [r7, #12]
 800dd5e:	f000 f8f1 	bl	800df44 <HAL_SPI_TransmitReceive>
 800dd62:	4603      	mov	r3, r0
 800dd64:	e0ea      	b.n	800df3c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800dd6c:	2b01      	cmp	r3, #1
 800dd6e:	d101      	bne.n	800dd74 <HAL_SPI_Receive+0x52>
 800dd70:	2302      	movs	r3, #2
 800dd72:	e0e3      	b.n	800df3c <HAL_SPI_Receive+0x21a>
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	2201      	movs	r2, #1
 800dd78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dd7c:	f7fb faae 	bl	80092dc <HAL_GetTick>
 800dd80:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dd88:	b2db      	uxtb	r3, r3
 800dd8a:	2b01      	cmp	r3, #1
 800dd8c:	d002      	beq.n	800dd94 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800dd8e:	2302      	movs	r3, #2
 800dd90:	75fb      	strb	r3, [r7, #23]
    goto error;
 800dd92:	e0ca      	b.n	800df2a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d002      	beq.n	800dda0 <HAL_SPI_Receive+0x7e>
 800dd9a:	88fb      	ldrh	r3, [r7, #6]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d102      	bne.n	800dda6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800dda0:	2301      	movs	r3, #1
 800dda2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800dda4:	e0c1      	b.n	800df2a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	2204      	movs	r2, #4
 800ddaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	68ba      	ldr	r2, [r7, #8]
 800ddb8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	88fa      	ldrh	r2, [r7, #6]
 800ddbe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	88fa      	ldrh	r2, [r7, #6]
 800ddc4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	2200      	movs	r2, #0
 800ddca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	2200      	movs	r2, #0
 800dddc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	2200      	movs	r2, #0
 800dde2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	689b      	ldr	r3, [r3, #8]
 800dde8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ddec:	d10f      	bne.n	800de0e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	681a      	ldr	r2, [r3, #0]
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ddfc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	681a      	ldr	r2, [r3, #0]
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800de0c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de18:	2b40      	cmp	r3, #64	; 0x40
 800de1a:	d007      	beq.n	800de2c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	681a      	ldr	r2, [r3, #0]
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800de2a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	68db      	ldr	r3, [r3, #12]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d162      	bne.n	800defa <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800de34:	e02e      	b.n	800de94 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	689b      	ldr	r3, [r3, #8]
 800de3c:	f003 0301 	and.w	r3, r3, #1
 800de40:	2b01      	cmp	r3, #1
 800de42:	d115      	bne.n	800de70 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	f103 020c 	add.w	r2, r3, #12
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de50:	7812      	ldrb	r2, [r2, #0]
 800de52:	b2d2      	uxtb	r2, r2
 800de54:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de5a:	1c5a      	adds	r2, r3, #1
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de64:	b29b      	uxth	r3, r3
 800de66:	3b01      	subs	r3, #1
 800de68:	b29a      	uxth	r2, r3
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800de6e:	e011      	b.n	800de94 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800de70:	f7fb fa34 	bl	80092dc <HAL_GetTick>
 800de74:	4602      	mov	r2, r0
 800de76:	693b      	ldr	r3, [r7, #16]
 800de78:	1ad3      	subs	r3, r2, r3
 800de7a:	683a      	ldr	r2, [r7, #0]
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d803      	bhi.n	800de88 <HAL_SPI_Receive+0x166>
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de86:	d102      	bne.n	800de8e <HAL_SPI_Receive+0x16c>
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d102      	bne.n	800de94 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800de8e:	2303      	movs	r3, #3
 800de90:	75fb      	strb	r3, [r7, #23]
          goto error;
 800de92:	e04a      	b.n	800df2a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de98:	b29b      	uxth	r3, r3
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d1cb      	bne.n	800de36 <HAL_SPI_Receive+0x114>
 800de9e:	e031      	b.n	800df04 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	689b      	ldr	r3, [r3, #8]
 800dea6:	f003 0301 	and.w	r3, r3, #1
 800deaa:	2b01      	cmp	r3, #1
 800deac:	d113      	bne.n	800ded6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	68da      	ldr	r2, [r3, #12]
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deb8:	b292      	uxth	r2, r2
 800deba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dec0:	1c9a      	adds	r2, r3, #2
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800deca:	b29b      	uxth	r3, r3
 800decc:	3b01      	subs	r3, #1
 800dece:	b29a      	uxth	r2, r3
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ded4:	e011      	b.n	800defa <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ded6:	f7fb fa01 	bl	80092dc <HAL_GetTick>
 800deda:	4602      	mov	r2, r0
 800dedc:	693b      	ldr	r3, [r7, #16]
 800dede:	1ad3      	subs	r3, r2, r3
 800dee0:	683a      	ldr	r2, [r7, #0]
 800dee2:	429a      	cmp	r2, r3
 800dee4:	d803      	bhi.n	800deee <HAL_SPI_Receive+0x1cc>
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deec:	d102      	bne.n	800def4 <HAL_SPI_Receive+0x1d2>
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d102      	bne.n	800defa <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800def4:	2303      	movs	r3, #3
 800def6:	75fb      	strb	r3, [r7, #23]
          goto error;
 800def8:	e017      	b.n	800df2a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800defe:	b29b      	uxth	r3, r3
 800df00:	2b00      	cmp	r3, #0
 800df02:	d1cd      	bne.n	800dea0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800df04:	693a      	ldr	r2, [r7, #16]
 800df06:	6839      	ldr	r1, [r7, #0]
 800df08:	68f8      	ldr	r0, [r7, #12]
 800df0a:	f000 fa45 	bl	800e398 <SPI_EndRxTransaction>
 800df0e:	4603      	mov	r3, r0
 800df10:	2b00      	cmp	r3, #0
 800df12:	d002      	beq.n	800df1a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	2220      	movs	r2, #32
 800df18:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d002      	beq.n	800df28 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800df22:	2301      	movs	r3, #1
 800df24:	75fb      	strb	r3, [r7, #23]
 800df26:	e000      	b.n	800df2a <HAL_SPI_Receive+0x208>
  }

error :
 800df28:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	2201      	movs	r2, #1
 800df2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	2200      	movs	r2, #0
 800df36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800df3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	3718      	adds	r7, #24
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}

0800df44 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b08c      	sub	sp, #48	; 0x30
 800df48:	af00      	add	r7, sp, #0
 800df4a:	60f8      	str	r0, [r7, #12]
 800df4c:	60b9      	str	r1, [r7, #8]
 800df4e:	607a      	str	r2, [r7, #4]
 800df50:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800df52:	2301      	movs	r3, #1
 800df54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800df56:	2300      	movs	r3, #0
 800df58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800df62:	2b01      	cmp	r3, #1
 800df64:	d101      	bne.n	800df6a <HAL_SPI_TransmitReceive+0x26>
 800df66:	2302      	movs	r3, #2
 800df68:	e18a      	b.n	800e280 <HAL_SPI_TransmitReceive+0x33c>
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	2201      	movs	r2, #1
 800df6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800df72:	f7fb f9b3 	bl	80092dc <HAL_GetTick>
 800df76:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800df7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	685b      	ldr	r3, [r3, #4]
 800df86:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800df88:	887b      	ldrh	r3, [r7, #2]
 800df8a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800df8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df90:	2b01      	cmp	r3, #1
 800df92:	d00f      	beq.n	800dfb4 <HAL_SPI_TransmitReceive+0x70>
 800df94:	69fb      	ldr	r3, [r7, #28]
 800df96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800df9a:	d107      	bne.n	800dfac <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	689b      	ldr	r3, [r3, #8]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d103      	bne.n	800dfac <HAL_SPI_TransmitReceive+0x68>
 800dfa4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dfa8:	2b04      	cmp	r3, #4
 800dfaa:	d003      	beq.n	800dfb4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800dfac:	2302      	movs	r3, #2
 800dfae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800dfb2:	e15b      	b.n	800e26c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d005      	beq.n	800dfc6 <HAL_SPI_TransmitReceive+0x82>
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d002      	beq.n	800dfc6 <HAL_SPI_TransmitReceive+0x82>
 800dfc0:	887b      	ldrh	r3, [r7, #2]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d103      	bne.n	800dfce <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800dfcc:	e14e      	b.n	800e26c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dfd4:	b2db      	uxtb	r3, r3
 800dfd6:	2b04      	cmp	r3, #4
 800dfd8:	d003      	beq.n	800dfe2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	2205      	movs	r2, #5
 800dfde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	687a      	ldr	r2, [r7, #4]
 800dfec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	887a      	ldrh	r2, [r7, #2]
 800dff2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	887a      	ldrh	r2, [r7, #2]
 800dff8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	68ba      	ldr	r2, [r7, #8]
 800dffe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	887a      	ldrh	r2, [r7, #2]
 800e004:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	887a      	ldrh	r2, [r7, #2]
 800e00a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	2200      	movs	r2, #0
 800e010:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	2200      	movs	r2, #0
 800e016:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e022:	2b40      	cmp	r3, #64	; 0x40
 800e024:	d007      	beq.n	800e036 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	681a      	ldr	r2, [r3, #0]
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e034:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	68db      	ldr	r3, [r3, #12]
 800e03a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e03e:	d178      	bne.n	800e132 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	685b      	ldr	r3, [r3, #4]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d002      	beq.n	800e04e <HAL_SPI_TransmitReceive+0x10a>
 800e048:	8b7b      	ldrh	r3, [r7, #26]
 800e04a:	2b01      	cmp	r3, #1
 800e04c:	d166      	bne.n	800e11c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e052:	881a      	ldrh	r2, [r3, #0]
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e05e:	1c9a      	adds	r2, r3, #2
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e068:	b29b      	uxth	r3, r3
 800e06a:	3b01      	subs	r3, #1
 800e06c:	b29a      	uxth	r2, r3
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e072:	e053      	b.n	800e11c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	689b      	ldr	r3, [r3, #8]
 800e07a:	f003 0302 	and.w	r3, r3, #2
 800e07e:	2b02      	cmp	r3, #2
 800e080:	d11b      	bne.n	800e0ba <HAL_SPI_TransmitReceive+0x176>
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e086:	b29b      	uxth	r3, r3
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d016      	beq.n	800e0ba <HAL_SPI_TransmitReceive+0x176>
 800e08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e08e:	2b01      	cmp	r3, #1
 800e090:	d113      	bne.n	800e0ba <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e096:	881a      	ldrh	r2, [r3, #0]
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0a2:	1c9a      	adds	r2, r3, #2
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e0ac:	b29b      	uxth	r3, r3
 800e0ae:	3b01      	subs	r3, #1
 800e0b0:	b29a      	uxth	r2, r3
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	689b      	ldr	r3, [r3, #8]
 800e0c0:	f003 0301 	and.w	r3, r3, #1
 800e0c4:	2b01      	cmp	r3, #1
 800e0c6:	d119      	bne.n	800e0fc <HAL_SPI_TransmitReceive+0x1b8>
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e0cc:	b29b      	uxth	r3, r3
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d014      	beq.n	800e0fc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	68da      	ldr	r2, [r3, #12]
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0dc:	b292      	uxth	r2, r2
 800e0de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0e4:	1c9a      	adds	r2, r3, #2
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e0ee:	b29b      	uxth	r3, r3
 800e0f0:	3b01      	subs	r3, #1
 800e0f2:	b29a      	uxth	r2, r3
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e0f8:	2301      	movs	r3, #1
 800e0fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e0fc:	f7fb f8ee 	bl	80092dc <HAL_GetTick>
 800e100:	4602      	mov	r2, r0
 800e102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e104:	1ad3      	subs	r3, r2, r3
 800e106:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e108:	429a      	cmp	r2, r3
 800e10a:	d807      	bhi.n	800e11c <HAL_SPI_TransmitReceive+0x1d8>
 800e10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e10e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e112:	d003      	beq.n	800e11c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800e114:	2303      	movs	r3, #3
 800e116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e11a:	e0a7      	b.n	800e26c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e120:	b29b      	uxth	r3, r3
 800e122:	2b00      	cmp	r3, #0
 800e124:	d1a6      	bne.n	800e074 <HAL_SPI_TransmitReceive+0x130>
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e12a:	b29b      	uxth	r3, r3
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d1a1      	bne.n	800e074 <HAL_SPI_TransmitReceive+0x130>
 800e130:	e07c      	b.n	800e22c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	685b      	ldr	r3, [r3, #4]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d002      	beq.n	800e140 <HAL_SPI_TransmitReceive+0x1fc>
 800e13a:	8b7b      	ldrh	r3, [r7, #26]
 800e13c:	2b01      	cmp	r3, #1
 800e13e:	d16b      	bne.n	800e218 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	330c      	adds	r3, #12
 800e14a:	7812      	ldrb	r2, [r2, #0]
 800e14c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e152:	1c5a      	adds	r2, r3, #1
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e15c:	b29b      	uxth	r3, r3
 800e15e:	3b01      	subs	r3, #1
 800e160:	b29a      	uxth	r2, r3
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e166:	e057      	b.n	800e218 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	689b      	ldr	r3, [r3, #8]
 800e16e:	f003 0302 	and.w	r3, r3, #2
 800e172:	2b02      	cmp	r3, #2
 800e174:	d11c      	bne.n	800e1b0 <HAL_SPI_TransmitReceive+0x26c>
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e17a:	b29b      	uxth	r3, r3
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d017      	beq.n	800e1b0 <HAL_SPI_TransmitReceive+0x26c>
 800e180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e182:	2b01      	cmp	r3, #1
 800e184:	d114      	bne.n	800e1b0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	330c      	adds	r3, #12
 800e190:	7812      	ldrb	r2, [r2, #0]
 800e192:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e198:	1c5a      	adds	r2, r3, #1
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e1a2:	b29b      	uxth	r3, r3
 800e1a4:	3b01      	subs	r3, #1
 800e1a6:	b29a      	uxth	r2, r3
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	689b      	ldr	r3, [r3, #8]
 800e1b6:	f003 0301 	and.w	r3, r3, #1
 800e1ba:	2b01      	cmp	r3, #1
 800e1bc:	d119      	bne.n	800e1f2 <HAL_SPI_TransmitReceive+0x2ae>
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e1c2:	b29b      	uxth	r3, r3
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d014      	beq.n	800e1f2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	68da      	ldr	r2, [r3, #12]
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1d2:	b2d2      	uxtb	r2, r2
 800e1d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1da:	1c5a      	adds	r2, r3, #1
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e1e4:	b29b      	uxth	r3, r3
 800e1e6:	3b01      	subs	r3, #1
 800e1e8:	b29a      	uxth	r2, r3
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e1f2:	f7fb f873 	bl	80092dc <HAL_GetTick>
 800e1f6:	4602      	mov	r2, r0
 800e1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1fa:	1ad3      	subs	r3, r2, r3
 800e1fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e1fe:	429a      	cmp	r2, r3
 800e200:	d803      	bhi.n	800e20a <HAL_SPI_TransmitReceive+0x2c6>
 800e202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e204:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e208:	d102      	bne.n	800e210 <HAL_SPI_TransmitReceive+0x2cc>
 800e20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d103      	bne.n	800e218 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800e210:	2303      	movs	r3, #3
 800e212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e216:	e029      	b.n	800e26c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e21c:	b29b      	uxth	r3, r3
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d1a2      	bne.n	800e168 <HAL_SPI_TransmitReceive+0x224>
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e226:	b29b      	uxth	r3, r3
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d19d      	bne.n	800e168 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e22c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e22e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e230:	68f8      	ldr	r0, [r7, #12]
 800e232:	f000 f917 	bl	800e464 <SPI_EndRxTxTransaction>
 800e236:	4603      	mov	r3, r0
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d006      	beq.n	800e24a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800e23c:	2301      	movs	r3, #1
 800e23e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	2220      	movs	r2, #32
 800e246:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800e248:	e010      	b.n	800e26c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	689b      	ldr	r3, [r3, #8]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d10b      	bne.n	800e26a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e252:	2300      	movs	r3, #0
 800e254:	617b      	str	r3, [r7, #20]
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	68db      	ldr	r3, [r3, #12]
 800e25c:	617b      	str	r3, [r7, #20]
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	689b      	ldr	r3, [r3, #8]
 800e264:	617b      	str	r3, [r7, #20]
 800e266:	697b      	ldr	r3, [r7, #20]
 800e268:	e000      	b.n	800e26c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800e26a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	2201      	movs	r2, #1
 800e270:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	2200      	movs	r2, #0
 800e278:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e27c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e280:	4618      	mov	r0, r3
 800e282:	3730      	adds	r7, #48	; 0x30
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}

0800e288 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b088      	sub	sp, #32
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	60f8      	str	r0, [r7, #12]
 800e290:	60b9      	str	r1, [r7, #8]
 800e292:	603b      	str	r3, [r7, #0]
 800e294:	4613      	mov	r3, r2
 800e296:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e298:	f7fb f820 	bl	80092dc <HAL_GetTick>
 800e29c:	4602      	mov	r2, r0
 800e29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a0:	1a9b      	subs	r3, r3, r2
 800e2a2:	683a      	ldr	r2, [r7, #0]
 800e2a4:	4413      	add	r3, r2
 800e2a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e2a8:	f7fb f818 	bl	80092dc <HAL_GetTick>
 800e2ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e2ae:	4b39      	ldr	r3, [pc, #228]	; (800e394 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	015b      	lsls	r3, r3, #5
 800e2b4:	0d1b      	lsrs	r3, r3, #20
 800e2b6:	69fa      	ldr	r2, [r7, #28]
 800e2b8:	fb02 f303 	mul.w	r3, r2, r3
 800e2bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e2be:	e054      	b.n	800e36a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2c6:	d050      	beq.n	800e36a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e2c8:	f7fb f808 	bl	80092dc <HAL_GetTick>
 800e2cc:	4602      	mov	r2, r0
 800e2ce:	69bb      	ldr	r3, [r7, #24]
 800e2d0:	1ad3      	subs	r3, r2, r3
 800e2d2:	69fa      	ldr	r2, [r7, #28]
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	d902      	bls.n	800e2de <SPI_WaitFlagStateUntilTimeout+0x56>
 800e2d8:	69fb      	ldr	r3, [r7, #28]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d13d      	bne.n	800e35a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	685a      	ldr	r2, [r3, #4]
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e2ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	685b      	ldr	r3, [r3, #4]
 800e2f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e2f6:	d111      	bne.n	800e31c <SPI_WaitFlagStateUntilTimeout+0x94>
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	689b      	ldr	r3, [r3, #8]
 800e2fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e300:	d004      	beq.n	800e30c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	689b      	ldr	r3, [r3, #8]
 800e306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e30a:	d107      	bne.n	800e31c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	681a      	ldr	r2, [r3, #0]
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e31a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e324:	d10f      	bne.n	800e346 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	681a      	ldr	r2, [r3, #0]
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e334:	601a      	str	r2, [r3, #0]
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	681a      	ldr	r2, [r3, #0]
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e344:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	2201      	movs	r2, #1
 800e34a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	2200      	movs	r2, #0
 800e352:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800e356:	2303      	movs	r3, #3
 800e358:	e017      	b.n	800e38a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d101      	bne.n	800e364 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e360:	2300      	movs	r3, #0
 800e362:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e364:	697b      	ldr	r3, [r7, #20]
 800e366:	3b01      	subs	r3, #1
 800e368:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	689a      	ldr	r2, [r3, #8]
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	4013      	ands	r3, r2
 800e374:	68ba      	ldr	r2, [r7, #8]
 800e376:	429a      	cmp	r2, r3
 800e378:	bf0c      	ite	eq
 800e37a:	2301      	moveq	r3, #1
 800e37c:	2300      	movne	r3, #0
 800e37e:	b2db      	uxtb	r3, r3
 800e380:	461a      	mov	r2, r3
 800e382:	79fb      	ldrb	r3, [r7, #7]
 800e384:	429a      	cmp	r2, r3
 800e386:	d19b      	bne.n	800e2c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e388:	2300      	movs	r3, #0
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3720      	adds	r7, #32
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}
 800e392:	bf00      	nop
 800e394:	2000003c 	.word	0x2000003c

0800e398 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b086      	sub	sp, #24
 800e39c:	af02      	add	r7, sp, #8
 800e39e:	60f8      	str	r0, [r7, #12]
 800e3a0:	60b9      	str	r1, [r7, #8]
 800e3a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	685b      	ldr	r3, [r3, #4]
 800e3a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e3ac:	d111      	bne.n	800e3d2 <SPI_EndRxTransaction+0x3a>
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	689b      	ldr	r3, [r3, #8]
 800e3b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e3b6:	d004      	beq.n	800e3c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	689b      	ldr	r3, [r3, #8]
 800e3bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e3c0:	d107      	bne.n	800e3d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	681a      	ldr	r2, [r3, #0]
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e3d0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	685b      	ldr	r3, [r3, #4]
 800e3d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e3da:	d12a      	bne.n	800e432 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	689b      	ldr	r3, [r3, #8]
 800e3e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e3e4:	d012      	beq.n	800e40c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	9300      	str	r3, [sp, #0]
 800e3ea:	68bb      	ldr	r3, [r7, #8]
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	2180      	movs	r1, #128	; 0x80
 800e3f0:	68f8      	ldr	r0, [r7, #12]
 800e3f2:	f7ff ff49 	bl	800e288 <SPI_WaitFlagStateUntilTimeout>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d02d      	beq.n	800e458 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e400:	f043 0220 	orr.w	r2, r3, #32
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e408:	2303      	movs	r3, #3
 800e40a:	e026      	b.n	800e45a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	9300      	str	r3, [sp, #0]
 800e410:	68bb      	ldr	r3, [r7, #8]
 800e412:	2200      	movs	r2, #0
 800e414:	2101      	movs	r1, #1
 800e416:	68f8      	ldr	r0, [r7, #12]
 800e418:	f7ff ff36 	bl	800e288 <SPI_WaitFlagStateUntilTimeout>
 800e41c:	4603      	mov	r3, r0
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d01a      	beq.n	800e458 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e426:	f043 0220 	orr.w	r2, r3, #32
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e42e:	2303      	movs	r3, #3
 800e430:	e013      	b.n	800e45a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	9300      	str	r3, [sp, #0]
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	2200      	movs	r2, #0
 800e43a:	2101      	movs	r1, #1
 800e43c:	68f8      	ldr	r0, [r7, #12]
 800e43e:	f7ff ff23 	bl	800e288 <SPI_WaitFlagStateUntilTimeout>
 800e442:	4603      	mov	r3, r0
 800e444:	2b00      	cmp	r3, #0
 800e446:	d007      	beq.n	800e458 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e44c:	f043 0220 	orr.w	r2, r3, #32
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e454:	2303      	movs	r3, #3
 800e456:	e000      	b.n	800e45a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800e458:	2300      	movs	r3, #0
}
 800e45a:	4618      	mov	r0, r3
 800e45c:	3710      	adds	r7, #16
 800e45e:	46bd      	mov	sp, r7
 800e460:	bd80      	pop	{r7, pc}
	...

0800e464 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b088      	sub	sp, #32
 800e468:	af02      	add	r7, sp, #8
 800e46a:	60f8      	str	r0, [r7, #12]
 800e46c:	60b9      	str	r1, [r7, #8]
 800e46e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e470:	4b1b      	ldr	r3, [pc, #108]	; (800e4e0 <SPI_EndRxTxTransaction+0x7c>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	4a1b      	ldr	r2, [pc, #108]	; (800e4e4 <SPI_EndRxTxTransaction+0x80>)
 800e476:	fba2 2303 	umull	r2, r3, r2, r3
 800e47a:	0d5b      	lsrs	r3, r3, #21
 800e47c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e480:	fb02 f303 	mul.w	r3, r2, r3
 800e484:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	685b      	ldr	r3, [r3, #4]
 800e48a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e48e:	d112      	bne.n	800e4b6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	9300      	str	r3, [sp, #0]
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	2200      	movs	r2, #0
 800e498:	2180      	movs	r1, #128	; 0x80
 800e49a:	68f8      	ldr	r0, [r7, #12]
 800e49c:	f7ff fef4 	bl	800e288 <SPI_WaitFlagStateUntilTimeout>
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d016      	beq.n	800e4d4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4aa:	f043 0220 	orr.w	r2, r3, #32
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e4b2:	2303      	movs	r3, #3
 800e4b4:	e00f      	b.n	800e4d6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e4b6:	697b      	ldr	r3, [r7, #20]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d00a      	beq.n	800e4d2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800e4bc:	697b      	ldr	r3, [r7, #20]
 800e4be:	3b01      	subs	r3, #1
 800e4c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	689b      	ldr	r3, [r3, #8]
 800e4c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4cc:	2b80      	cmp	r3, #128	; 0x80
 800e4ce:	d0f2      	beq.n	800e4b6 <SPI_EndRxTxTransaction+0x52>
 800e4d0:	e000      	b.n	800e4d4 <SPI_EndRxTxTransaction+0x70>
        break;
 800e4d2:	bf00      	nop
  }

  return HAL_OK;
 800e4d4:	2300      	movs	r3, #0
}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	3718      	adds	r7, #24
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}
 800e4de:	bf00      	nop
 800e4e0:	2000003c 	.word	0x2000003c
 800e4e4:	165e9f81 	.word	0x165e9f81

0800e4e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b082      	sub	sp, #8
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d101      	bne.n	800e4fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	e041      	b.n	800e57e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e500:	b2db      	uxtb	r3, r3
 800e502:	2b00      	cmp	r3, #0
 800e504:	d106      	bne.n	800e514 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2200      	movs	r2, #0
 800e50a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f7f4 f9e4 	bl	80028dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2202      	movs	r2, #2
 800e518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681a      	ldr	r2, [r3, #0]
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	3304      	adds	r3, #4
 800e524:	4619      	mov	r1, r3
 800e526:	4610      	mov	r0, r2
 800e528:	f000 fcea 	bl	800ef00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2201      	movs	r2, #1
 800e530:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2201      	movs	r2, #1
 800e538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2201      	movs	r2, #1
 800e540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2201      	movs	r2, #1
 800e548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2201      	movs	r2, #1
 800e550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	2201      	movs	r2, #1
 800e558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	2201      	movs	r2, #1
 800e560:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	2201      	movs	r2, #1
 800e568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2201      	movs	r2, #1
 800e570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2201      	movs	r2, #1
 800e578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e57c:	2300      	movs	r3, #0
}
 800e57e:	4618      	mov	r0, r3
 800e580:	3708      	adds	r7, #8
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}
	...

0800e588 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e588:	b480      	push	{r7}
 800e58a:	b085      	sub	sp, #20
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e596:	b2db      	uxtb	r3, r3
 800e598:	2b01      	cmp	r3, #1
 800e59a:	d001      	beq.n	800e5a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e59c:	2301      	movs	r3, #1
 800e59e:	e04e      	b.n	800e63e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2202      	movs	r2, #2
 800e5a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	68da      	ldr	r2, [r3, #12]
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	f042 0201 	orr.w	r2, r2, #1
 800e5b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	4a23      	ldr	r2, [pc, #140]	; (800e64c <HAL_TIM_Base_Start_IT+0xc4>)
 800e5be:	4293      	cmp	r3, r2
 800e5c0:	d022      	beq.n	800e608 <HAL_TIM_Base_Start_IT+0x80>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e5ca:	d01d      	beq.n	800e608 <HAL_TIM_Base_Start_IT+0x80>
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	4a1f      	ldr	r2, [pc, #124]	; (800e650 <HAL_TIM_Base_Start_IT+0xc8>)
 800e5d2:	4293      	cmp	r3, r2
 800e5d4:	d018      	beq.n	800e608 <HAL_TIM_Base_Start_IT+0x80>
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	4a1e      	ldr	r2, [pc, #120]	; (800e654 <HAL_TIM_Base_Start_IT+0xcc>)
 800e5dc:	4293      	cmp	r3, r2
 800e5de:	d013      	beq.n	800e608 <HAL_TIM_Base_Start_IT+0x80>
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	4a1c      	ldr	r2, [pc, #112]	; (800e658 <HAL_TIM_Base_Start_IT+0xd0>)
 800e5e6:	4293      	cmp	r3, r2
 800e5e8:	d00e      	beq.n	800e608 <HAL_TIM_Base_Start_IT+0x80>
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	4a1b      	ldr	r2, [pc, #108]	; (800e65c <HAL_TIM_Base_Start_IT+0xd4>)
 800e5f0:	4293      	cmp	r3, r2
 800e5f2:	d009      	beq.n	800e608 <HAL_TIM_Base_Start_IT+0x80>
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	4a19      	ldr	r2, [pc, #100]	; (800e660 <HAL_TIM_Base_Start_IT+0xd8>)
 800e5fa:	4293      	cmp	r3, r2
 800e5fc:	d004      	beq.n	800e608 <HAL_TIM_Base_Start_IT+0x80>
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	4a18      	ldr	r2, [pc, #96]	; (800e664 <HAL_TIM_Base_Start_IT+0xdc>)
 800e604:	4293      	cmp	r3, r2
 800e606:	d111      	bne.n	800e62c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	689b      	ldr	r3, [r3, #8]
 800e60e:	f003 0307 	and.w	r3, r3, #7
 800e612:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	2b06      	cmp	r3, #6
 800e618:	d010      	beq.n	800e63c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	681a      	ldr	r2, [r3, #0]
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	f042 0201 	orr.w	r2, r2, #1
 800e628:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e62a:	e007      	b.n	800e63c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	681a      	ldr	r2, [r3, #0]
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	f042 0201 	orr.w	r2, r2, #1
 800e63a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e63c:	2300      	movs	r3, #0
}
 800e63e:	4618      	mov	r0, r3
 800e640:	3714      	adds	r7, #20
 800e642:	46bd      	mov	sp, r7
 800e644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e648:	4770      	bx	lr
 800e64a:	bf00      	nop
 800e64c:	40010000 	.word	0x40010000
 800e650:	40000400 	.word	0x40000400
 800e654:	40000800 	.word	0x40000800
 800e658:	40000c00 	.word	0x40000c00
 800e65c:	40010400 	.word	0x40010400
 800e660:	40014000 	.word	0x40014000
 800e664:	40001800 	.word	0x40001800

0800e668 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b082      	sub	sp, #8
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d101      	bne.n	800e67a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e676:	2301      	movs	r3, #1
 800e678:	e041      	b.n	800e6fe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e680:	b2db      	uxtb	r3, r3
 800e682:	2b00      	cmp	r3, #0
 800e684:	d106      	bne.n	800e694 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	2200      	movs	r2, #0
 800e68a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f000 f839 	bl	800e706 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2202      	movs	r2, #2
 800e698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681a      	ldr	r2, [r3, #0]
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	3304      	adds	r3, #4
 800e6a4:	4619      	mov	r1, r3
 800e6a6:	4610      	mov	r0, r2
 800e6a8:	f000 fc2a 	bl	800ef00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2201      	movs	r2, #1
 800e6b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2201      	movs	r2, #1
 800e6b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2201      	movs	r2, #1
 800e6c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2201      	movs	r2, #1
 800e6c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2201      	movs	r2, #1
 800e6d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2201      	movs	r2, #1
 800e6d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2201      	movs	r2, #1
 800e6e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2201      	movs	r2, #1
 800e6e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2201      	movs	r2, #1
 800e6f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2201      	movs	r2, #1
 800e6f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e6fc:	2300      	movs	r3, #0
}
 800e6fe:	4618      	mov	r0, r3
 800e700:	3708      	adds	r7, #8
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}

0800e706 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e706:	b480      	push	{r7}
 800e708:	b083      	sub	sp, #12
 800e70a:	af00      	add	r7, sp, #0
 800e70c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e70e:	bf00      	nop
 800e710:	370c      	adds	r7, #12
 800e712:	46bd      	mov	sp, r7
 800e714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e718:	4770      	bx	lr
	...

0800e71c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b084      	sub	sp, #16
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
 800e724:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d109      	bne.n	800e740 <HAL_TIM_PWM_Start+0x24>
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e732:	b2db      	uxtb	r3, r3
 800e734:	2b01      	cmp	r3, #1
 800e736:	bf14      	ite	ne
 800e738:	2301      	movne	r3, #1
 800e73a:	2300      	moveq	r3, #0
 800e73c:	b2db      	uxtb	r3, r3
 800e73e:	e022      	b.n	800e786 <HAL_TIM_PWM_Start+0x6a>
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	2b04      	cmp	r3, #4
 800e744:	d109      	bne.n	800e75a <HAL_TIM_PWM_Start+0x3e>
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e74c:	b2db      	uxtb	r3, r3
 800e74e:	2b01      	cmp	r3, #1
 800e750:	bf14      	ite	ne
 800e752:	2301      	movne	r3, #1
 800e754:	2300      	moveq	r3, #0
 800e756:	b2db      	uxtb	r3, r3
 800e758:	e015      	b.n	800e786 <HAL_TIM_PWM_Start+0x6a>
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	2b08      	cmp	r3, #8
 800e75e:	d109      	bne.n	800e774 <HAL_TIM_PWM_Start+0x58>
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e766:	b2db      	uxtb	r3, r3
 800e768:	2b01      	cmp	r3, #1
 800e76a:	bf14      	ite	ne
 800e76c:	2301      	movne	r3, #1
 800e76e:	2300      	moveq	r3, #0
 800e770:	b2db      	uxtb	r3, r3
 800e772:	e008      	b.n	800e786 <HAL_TIM_PWM_Start+0x6a>
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e77a:	b2db      	uxtb	r3, r3
 800e77c:	2b01      	cmp	r3, #1
 800e77e:	bf14      	ite	ne
 800e780:	2301      	movne	r3, #1
 800e782:	2300      	moveq	r3, #0
 800e784:	b2db      	uxtb	r3, r3
 800e786:	2b00      	cmp	r3, #0
 800e788:	d001      	beq.n	800e78e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800e78a:	2301      	movs	r3, #1
 800e78c:	e07c      	b.n	800e888 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d104      	bne.n	800e79e <HAL_TIM_PWM_Start+0x82>
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2202      	movs	r2, #2
 800e798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e79c:	e013      	b.n	800e7c6 <HAL_TIM_PWM_Start+0xaa>
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	2b04      	cmp	r3, #4
 800e7a2:	d104      	bne.n	800e7ae <HAL_TIM_PWM_Start+0x92>
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2202      	movs	r2, #2
 800e7a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e7ac:	e00b      	b.n	800e7c6 <HAL_TIM_PWM_Start+0xaa>
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	2b08      	cmp	r3, #8
 800e7b2:	d104      	bne.n	800e7be <HAL_TIM_PWM_Start+0xa2>
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2202      	movs	r2, #2
 800e7b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e7bc:	e003      	b.n	800e7c6 <HAL_TIM_PWM_Start+0xaa>
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2202      	movs	r2, #2
 800e7c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	2201      	movs	r2, #1
 800e7cc:	6839      	ldr	r1, [r7, #0]
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f000 fe80 	bl	800f4d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	4a2d      	ldr	r2, [pc, #180]	; (800e890 <HAL_TIM_PWM_Start+0x174>)
 800e7da:	4293      	cmp	r3, r2
 800e7dc:	d004      	beq.n	800e7e8 <HAL_TIM_PWM_Start+0xcc>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	4a2c      	ldr	r2, [pc, #176]	; (800e894 <HAL_TIM_PWM_Start+0x178>)
 800e7e4:	4293      	cmp	r3, r2
 800e7e6:	d101      	bne.n	800e7ec <HAL_TIM_PWM_Start+0xd0>
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	e000      	b.n	800e7ee <HAL_TIM_PWM_Start+0xd2>
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d007      	beq.n	800e802 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e800:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	4a22      	ldr	r2, [pc, #136]	; (800e890 <HAL_TIM_PWM_Start+0x174>)
 800e808:	4293      	cmp	r3, r2
 800e80a:	d022      	beq.n	800e852 <HAL_TIM_PWM_Start+0x136>
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e814:	d01d      	beq.n	800e852 <HAL_TIM_PWM_Start+0x136>
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	4a1f      	ldr	r2, [pc, #124]	; (800e898 <HAL_TIM_PWM_Start+0x17c>)
 800e81c:	4293      	cmp	r3, r2
 800e81e:	d018      	beq.n	800e852 <HAL_TIM_PWM_Start+0x136>
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	4a1d      	ldr	r2, [pc, #116]	; (800e89c <HAL_TIM_PWM_Start+0x180>)
 800e826:	4293      	cmp	r3, r2
 800e828:	d013      	beq.n	800e852 <HAL_TIM_PWM_Start+0x136>
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	4a1c      	ldr	r2, [pc, #112]	; (800e8a0 <HAL_TIM_PWM_Start+0x184>)
 800e830:	4293      	cmp	r3, r2
 800e832:	d00e      	beq.n	800e852 <HAL_TIM_PWM_Start+0x136>
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	4a16      	ldr	r2, [pc, #88]	; (800e894 <HAL_TIM_PWM_Start+0x178>)
 800e83a:	4293      	cmp	r3, r2
 800e83c:	d009      	beq.n	800e852 <HAL_TIM_PWM_Start+0x136>
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	4a18      	ldr	r2, [pc, #96]	; (800e8a4 <HAL_TIM_PWM_Start+0x188>)
 800e844:	4293      	cmp	r3, r2
 800e846:	d004      	beq.n	800e852 <HAL_TIM_PWM_Start+0x136>
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	4a16      	ldr	r2, [pc, #88]	; (800e8a8 <HAL_TIM_PWM_Start+0x18c>)
 800e84e:	4293      	cmp	r3, r2
 800e850:	d111      	bne.n	800e876 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	689b      	ldr	r3, [r3, #8]
 800e858:	f003 0307 	and.w	r3, r3, #7
 800e85c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	2b06      	cmp	r3, #6
 800e862:	d010      	beq.n	800e886 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	681a      	ldr	r2, [r3, #0]
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	f042 0201 	orr.w	r2, r2, #1
 800e872:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e874:	e007      	b.n	800e886 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	681a      	ldr	r2, [r3, #0]
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	f042 0201 	orr.w	r2, r2, #1
 800e884:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e886:	2300      	movs	r3, #0
}
 800e888:	4618      	mov	r0, r3
 800e88a:	3710      	adds	r7, #16
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}
 800e890:	40010000 	.word	0x40010000
 800e894:	40010400 	.word	0x40010400
 800e898:	40000400 	.word	0x40000400
 800e89c:	40000800 	.word	0x40000800
 800e8a0:	40000c00 	.word	0x40000c00
 800e8a4:	40014000 	.word	0x40014000
 800e8a8:	40001800 	.word	0x40001800

0800e8ac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b082      	sub	sp, #8
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
 800e8b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	6839      	ldr	r1, [r7, #0]
 800e8be:	4618      	mov	r0, r3
 800e8c0:	f000 fe08 	bl	800f4d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	4a2e      	ldr	r2, [pc, #184]	; (800e984 <HAL_TIM_PWM_Stop+0xd8>)
 800e8ca:	4293      	cmp	r3, r2
 800e8cc:	d004      	beq.n	800e8d8 <HAL_TIM_PWM_Stop+0x2c>
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	4a2d      	ldr	r2, [pc, #180]	; (800e988 <HAL_TIM_PWM_Stop+0xdc>)
 800e8d4:	4293      	cmp	r3, r2
 800e8d6:	d101      	bne.n	800e8dc <HAL_TIM_PWM_Stop+0x30>
 800e8d8:	2301      	movs	r3, #1
 800e8da:	e000      	b.n	800e8de <HAL_TIM_PWM_Stop+0x32>
 800e8dc:	2300      	movs	r3, #0
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d017      	beq.n	800e912 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	6a1a      	ldr	r2, [r3, #32]
 800e8e8:	f241 1311 	movw	r3, #4369	; 0x1111
 800e8ec:	4013      	ands	r3, r2
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d10f      	bne.n	800e912 <HAL_TIM_PWM_Stop+0x66>
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	6a1a      	ldr	r2, [r3, #32]
 800e8f8:	f240 4344 	movw	r3, #1092	; 0x444
 800e8fc:	4013      	ands	r3, r2
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d107      	bne.n	800e912 <HAL_TIM_PWM_Stop+0x66>
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e910:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	6a1a      	ldr	r2, [r3, #32]
 800e918:	f241 1311 	movw	r3, #4369	; 0x1111
 800e91c:	4013      	ands	r3, r2
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d10f      	bne.n	800e942 <HAL_TIM_PWM_Stop+0x96>
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	6a1a      	ldr	r2, [r3, #32]
 800e928:	f240 4344 	movw	r3, #1092	; 0x444
 800e92c:	4013      	ands	r3, r2
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d107      	bne.n	800e942 <HAL_TIM_PWM_Stop+0x96>
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	681a      	ldr	r2, [r3, #0]
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	f022 0201 	bic.w	r2, r2, #1
 800e940:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d104      	bne.n	800e952 <HAL_TIM_PWM_Stop+0xa6>
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2201      	movs	r2, #1
 800e94c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e950:	e013      	b.n	800e97a <HAL_TIM_PWM_Stop+0xce>
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	2b04      	cmp	r3, #4
 800e956:	d104      	bne.n	800e962 <HAL_TIM_PWM_Stop+0xb6>
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2201      	movs	r2, #1
 800e95c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e960:	e00b      	b.n	800e97a <HAL_TIM_PWM_Stop+0xce>
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	2b08      	cmp	r3, #8
 800e966:	d104      	bne.n	800e972 <HAL_TIM_PWM_Stop+0xc6>
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2201      	movs	r2, #1
 800e96c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e970:	e003      	b.n	800e97a <HAL_TIM_PWM_Stop+0xce>
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2201      	movs	r2, #1
 800e976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800e97a:	2300      	movs	r3, #0
}
 800e97c:	4618      	mov	r0, r3
 800e97e:	3708      	adds	r7, #8
 800e980:	46bd      	mov	sp, r7
 800e982:	bd80      	pop	{r7, pc}
 800e984:	40010000 	.word	0x40010000
 800e988:	40010400 	.word	0x40010400

0800e98c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b082      	sub	sp, #8
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	691b      	ldr	r3, [r3, #16]
 800e99a:	f003 0302 	and.w	r3, r3, #2
 800e99e:	2b02      	cmp	r3, #2
 800e9a0:	d122      	bne.n	800e9e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	68db      	ldr	r3, [r3, #12]
 800e9a8:	f003 0302 	and.w	r3, r3, #2
 800e9ac:	2b02      	cmp	r3, #2
 800e9ae:	d11b      	bne.n	800e9e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	f06f 0202 	mvn.w	r2, #2
 800e9b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	2201      	movs	r2, #1
 800e9be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	699b      	ldr	r3, [r3, #24]
 800e9c6:	f003 0303 	and.w	r3, r3, #3
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d003      	beq.n	800e9d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f000 fa77 	bl	800eec2 <HAL_TIM_IC_CaptureCallback>
 800e9d4:	e005      	b.n	800e9e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e9d6:	6878      	ldr	r0, [r7, #4]
 800e9d8:	f000 fa69 	bl	800eeae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e9dc:	6878      	ldr	r0, [r7, #4]
 800e9de:	f000 fa7a 	bl	800eed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	691b      	ldr	r3, [r3, #16]
 800e9ee:	f003 0304 	and.w	r3, r3, #4
 800e9f2:	2b04      	cmp	r3, #4
 800e9f4:	d122      	bne.n	800ea3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	68db      	ldr	r3, [r3, #12]
 800e9fc:	f003 0304 	and.w	r3, r3, #4
 800ea00:	2b04      	cmp	r3, #4
 800ea02:	d11b      	bne.n	800ea3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	f06f 0204 	mvn.w	r2, #4
 800ea0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2202      	movs	r2, #2
 800ea12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	699b      	ldr	r3, [r3, #24]
 800ea1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d003      	beq.n	800ea2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f000 fa4d 	bl	800eec2 <HAL_TIM_IC_CaptureCallback>
 800ea28:	e005      	b.n	800ea36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea2a:	6878      	ldr	r0, [r7, #4]
 800ea2c:	f000 fa3f 	bl	800eeae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f000 fa50 	bl	800eed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	2200      	movs	r2, #0
 800ea3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	691b      	ldr	r3, [r3, #16]
 800ea42:	f003 0308 	and.w	r3, r3, #8
 800ea46:	2b08      	cmp	r3, #8
 800ea48:	d122      	bne.n	800ea90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	68db      	ldr	r3, [r3, #12]
 800ea50:	f003 0308 	and.w	r3, r3, #8
 800ea54:	2b08      	cmp	r3, #8
 800ea56:	d11b      	bne.n	800ea90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	f06f 0208 	mvn.w	r2, #8
 800ea60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	2204      	movs	r2, #4
 800ea66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	69db      	ldr	r3, [r3, #28]
 800ea6e:	f003 0303 	and.w	r3, r3, #3
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d003      	beq.n	800ea7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ea76:	6878      	ldr	r0, [r7, #4]
 800ea78:	f000 fa23 	bl	800eec2 <HAL_TIM_IC_CaptureCallback>
 800ea7c:	e005      	b.n	800ea8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea7e:	6878      	ldr	r0, [r7, #4]
 800ea80:	f000 fa15 	bl	800eeae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea84:	6878      	ldr	r0, [r7, #4]
 800ea86:	f000 fa26 	bl	800eed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	691b      	ldr	r3, [r3, #16]
 800ea96:	f003 0310 	and.w	r3, r3, #16
 800ea9a:	2b10      	cmp	r3, #16
 800ea9c:	d122      	bne.n	800eae4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	68db      	ldr	r3, [r3, #12]
 800eaa4:	f003 0310 	and.w	r3, r3, #16
 800eaa8:	2b10      	cmp	r3, #16
 800eaaa:	d11b      	bne.n	800eae4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	f06f 0210 	mvn.w	r2, #16
 800eab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	2208      	movs	r2, #8
 800eaba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	69db      	ldr	r3, [r3, #28]
 800eac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d003      	beq.n	800ead2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f000 f9f9 	bl	800eec2 <HAL_TIM_IC_CaptureCallback>
 800ead0:	e005      	b.n	800eade <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ead2:	6878      	ldr	r0, [r7, #4]
 800ead4:	f000 f9eb 	bl	800eeae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ead8:	6878      	ldr	r0, [r7, #4]
 800eada:	f000 f9fc 	bl	800eed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2200      	movs	r2, #0
 800eae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	691b      	ldr	r3, [r3, #16]
 800eaea:	f003 0301 	and.w	r3, r3, #1
 800eaee:	2b01      	cmp	r3, #1
 800eaf0:	d10e      	bne.n	800eb10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	68db      	ldr	r3, [r3, #12]
 800eaf8:	f003 0301 	and.w	r3, r3, #1
 800eafc:	2b01      	cmp	r3, #1
 800eafe:	d107      	bne.n	800eb10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	f06f 0201 	mvn.w	r2, #1
 800eb08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800eb0a:	6878      	ldr	r0, [r7, #4]
 800eb0c:	f7f3 f9e6 	bl	8001edc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	691b      	ldr	r3, [r3, #16]
 800eb16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb1a:	2b80      	cmp	r3, #128	; 0x80
 800eb1c:	d10e      	bne.n	800eb3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	68db      	ldr	r3, [r3, #12]
 800eb24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb28:	2b80      	cmp	r3, #128	; 0x80
 800eb2a:	d107      	bne.n	800eb3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800eb34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800eb36:	6878      	ldr	r0, [r7, #4]
 800eb38:	f000 fd78 	bl	800f62c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	691b      	ldr	r3, [r3, #16]
 800eb42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb46:	2b40      	cmp	r3, #64	; 0x40
 800eb48:	d10e      	bne.n	800eb68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	68db      	ldr	r3, [r3, #12]
 800eb50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb54:	2b40      	cmp	r3, #64	; 0x40
 800eb56:	d107      	bne.n	800eb68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800eb60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800eb62:	6878      	ldr	r0, [r7, #4]
 800eb64:	f000 f9c1 	bl	800eeea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	691b      	ldr	r3, [r3, #16]
 800eb6e:	f003 0320 	and.w	r3, r3, #32
 800eb72:	2b20      	cmp	r3, #32
 800eb74:	d10e      	bne.n	800eb94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	68db      	ldr	r3, [r3, #12]
 800eb7c:	f003 0320 	and.w	r3, r3, #32
 800eb80:	2b20      	cmp	r3, #32
 800eb82:	d107      	bne.n	800eb94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	f06f 0220 	mvn.w	r2, #32
 800eb8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	f000 fd42 	bl	800f618 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800eb94:	bf00      	nop
 800eb96:	3708      	adds	r7, #8
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}

0800eb9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b086      	sub	sp, #24
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	60f8      	str	r0, [r7, #12]
 800eba4:	60b9      	str	r1, [r7, #8]
 800eba6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eba8:	2300      	movs	r3, #0
 800ebaa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ebb2:	2b01      	cmp	r3, #1
 800ebb4:	d101      	bne.n	800ebba <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ebb6:	2302      	movs	r3, #2
 800ebb8:	e0ae      	b.n	800ed18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	2201      	movs	r2, #1
 800ebbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	2b0c      	cmp	r3, #12
 800ebc6:	f200 809f 	bhi.w	800ed08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800ebca:	a201      	add	r2, pc, #4	; (adr r2, 800ebd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ebcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebd0:	0800ec05 	.word	0x0800ec05
 800ebd4:	0800ed09 	.word	0x0800ed09
 800ebd8:	0800ed09 	.word	0x0800ed09
 800ebdc:	0800ed09 	.word	0x0800ed09
 800ebe0:	0800ec45 	.word	0x0800ec45
 800ebe4:	0800ed09 	.word	0x0800ed09
 800ebe8:	0800ed09 	.word	0x0800ed09
 800ebec:	0800ed09 	.word	0x0800ed09
 800ebf0:	0800ec87 	.word	0x0800ec87
 800ebf4:	0800ed09 	.word	0x0800ed09
 800ebf8:	0800ed09 	.word	0x0800ed09
 800ebfc:	0800ed09 	.word	0x0800ed09
 800ec00:	0800ecc7 	.word	0x0800ecc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	68b9      	ldr	r1, [r7, #8]
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f000 fa18 	bl	800f040 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	699a      	ldr	r2, [r3, #24]
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	f042 0208 	orr.w	r2, r2, #8
 800ec1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	699a      	ldr	r2, [r3, #24]
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	f022 0204 	bic.w	r2, r2, #4
 800ec2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	6999      	ldr	r1, [r3, #24]
 800ec36:	68bb      	ldr	r3, [r7, #8]
 800ec38:	691a      	ldr	r2, [r3, #16]
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	430a      	orrs	r2, r1
 800ec40:	619a      	str	r2, [r3, #24]
      break;
 800ec42:	e064      	b.n	800ed0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	68b9      	ldr	r1, [r7, #8]
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f000 fa68 	bl	800f120 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	699a      	ldr	r2, [r3, #24]
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ec5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	699a      	ldr	r2, [r3, #24]
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ec6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	6999      	ldr	r1, [r3, #24]
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	691b      	ldr	r3, [r3, #16]
 800ec7a:	021a      	lsls	r2, r3, #8
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	430a      	orrs	r2, r1
 800ec82:	619a      	str	r2, [r3, #24]
      break;
 800ec84:	e043      	b.n	800ed0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	68b9      	ldr	r1, [r7, #8]
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f000 fabd 	bl	800f20c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	69da      	ldr	r2, [r3, #28]
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	f042 0208 	orr.w	r2, r2, #8
 800eca0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	69da      	ldr	r2, [r3, #28]
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	f022 0204 	bic.w	r2, r2, #4
 800ecb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	69d9      	ldr	r1, [r3, #28]
 800ecb8:	68bb      	ldr	r3, [r7, #8]
 800ecba:	691a      	ldr	r2, [r3, #16]
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	430a      	orrs	r2, r1
 800ecc2:	61da      	str	r2, [r3, #28]
      break;
 800ecc4:	e023      	b.n	800ed0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	68b9      	ldr	r1, [r7, #8]
 800eccc:	4618      	mov	r0, r3
 800ecce:	f000 fb11 	bl	800f2f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	69da      	ldr	r2, [r3, #28]
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ece0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	69da      	ldr	r2, [r3, #28]
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ecf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	69d9      	ldr	r1, [r3, #28]
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	691b      	ldr	r3, [r3, #16]
 800ecfc:	021a      	lsls	r2, r3, #8
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	430a      	orrs	r2, r1
 800ed04:	61da      	str	r2, [r3, #28]
      break;
 800ed06:	e002      	b.n	800ed0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800ed08:	2301      	movs	r3, #1
 800ed0a:	75fb      	strb	r3, [r7, #23]
      break;
 800ed0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	2200      	movs	r2, #0
 800ed12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ed16:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	3718      	adds	r7, #24
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}

0800ed20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b084      	sub	sp, #16
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
 800ed28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ed34:	2b01      	cmp	r3, #1
 800ed36:	d101      	bne.n	800ed3c <HAL_TIM_ConfigClockSource+0x1c>
 800ed38:	2302      	movs	r3, #2
 800ed3a:	e0b4      	b.n	800eea6 <HAL_TIM_ConfigClockSource+0x186>
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2201      	movs	r2, #1
 800ed40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2202      	movs	r2, #2
 800ed48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	689b      	ldr	r3, [r3, #8]
 800ed52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ed54:	68bb      	ldr	r3, [r7, #8]
 800ed56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ed5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ed5c:	68bb      	ldr	r3, [r7, #8]
 800ed5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ed62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	68ba      	ldr	r2, [r7, #8]
 800ed6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ed74:	d03e      	beq.n	800edf4 <HAL_TIM_ConfigClockSource+0xd4>
 800ed76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ed7a:	f200 8087 	bhi.w	800ee8c <HAL_TIM_ConfigClockSource+0x16c>
 800ed7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed82:	f000 8086 	beq.w	800ee92 <HAL_TIM_ConfigClockSource+0x172>
 800ed86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed8a:	d87f      	bhi.n	800ee8c <HAL_TIM_ConfigClockSource+0x16c>
 800ed8c:	2b70      	cmp	r3, #112	; 0x70
 800ed8e:	d01a      	beq.n	800edc6 <HAL_TIM_ConfigClockSource+0xa6>
 800ed90:	2b70      	cmp	r3, #112	; 0x70
 800ed92:	d87b      	bhi.n	800ee8c <HAL_TIM_ConfigClockSource+0x16c>
 800ed94:	2b60      	cmp	r3, #96	; 0x60
 800ed96:	d050      	beq.n	800ee3a <HAL_TIM_ConfigClockSource+0x11a>
 800ed98:	2b60      	cmp	r3, #96	; 0x60
 800ed9a:	d877      	bhi.n	800ee8c <HAL_TIM_ConfigClockSource+0x16c>
 800ed9c:	2b50      	cmp	r3, #80	; 0x50
 800ed9e:	d03c      	beq.n	800ee1a <HAL_TIM_ConfigClockSource+0xfa>
 800eda0:	2b50      	cmp	r3, #80	; 0x50
 800eda2:	d873      	bhi.n	800ee8c <HAL_TIM_ConfigClockSource+0x16c>
 800eda4:	2b40      	cmp	r3, #64	; 0x40
 800eda6:	d058      	beq.n	800ee5a <HAL_TIM_ConfigClockSource+0x13a>
 800eda8:	2b40      	cmp	r3, #64	; 0x40
 800edaa:	d86f      	bhi.n	800ee8c <HAL_TIM_ConfigClockSource+0x16c>
 800edac:	2b30      	cmp	r3, #48	; 0x30
 800edae:	d064      	beq.n	800ee7a <HAL_TIM_ConfigClockSource+0x15a>
 800edb0:	2b30      	cmp	r3, #48	; 0x30
 800edb2:	d86b      	bhi.n	800ee8c <HAL_TIM_ConfigClockSource+0x16c>
 800edb4:	2b20      	cmp	r3, #32
 800edb6:	d060      	beq.n	800ee7a <HAL_TIM_ConfigClockSource+0x15a>
 800edb8:	2b20      	cmp	r3, #32
 800edba:	d867      	bhi.n	800ee8c <HAL_TIM_ConfigClockSource+0x16c>
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d05c      	beq.n	800ee7a <HAL_TIM_ConfigClockSource+0x15a>
 800edc0:	2b10      	cmp	r3, #16
 800edc2:	d05a      	beq.n	800ee7a <HAL_TIM_ConfigClockSource+0x15a>
 800edc4:	e062      	b.n	800ee8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6818      	ldr	r0, [r3, #0]
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	6899      	ldr	r1, [r3, #8]
 800edce:	683b      	ldr	r3, [r7, #0]
 800edd0:	685a      	ldr	r2, [r3, #4]
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	68db      	ldr	r3, [r3, #12]
 800edd6:	f000 fb5d 	bl	800f494 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	689b      	ldr	r3, [r3, #8]
 800ede0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ede8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	68ba      	ldr	r2, [r7, #8]
 800edf0:	609a      	str	r2, [r3, #8]
      break;
 800edf2:	e04f      	b.n	800ee94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	6818      	ldr	r0, [r3, #0]
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	6899      	ldr	r1, [r3, #8]
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	685a      	ldr	r2, [r3, #4]
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	68db      	ldr	r3, [r3, #12]
 800ee04:	f000 fb46 	bl	800f494 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	689a      	ldr	r2, [r3, #8]
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ee16:	609a      	str	r2, [r3, #8]
      break;
 800ee18:	e03c      	b.n	800ee94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	6818      	ldr	r0, [r3, #0]
 800ee1e:	683b      	ldr	r3, [r7, #0]
 800ee20:	6859      	ldr	r1, [r3, #4]
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	68db      	ldr	r3, [r3, #12]
 800ee26:	461a      	mov	r2, r3
 800ee28:	f000 faba 	bl	800f3a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	2150      	movs	r1, #80	; 0x50
 800ee32:	4618      	mov	r0, r3
 800ee34:	f000 fb13 	bl	800f45e <TIM_ITRx_SetConfig>
      break;
 800ee38:	e02c      	b.n	800ee94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	6818      	ldr	r0, [r3, #0]
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	6859      	ldr	r1, [r3, #4]
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	68db      	ldr	r3, [r3, #12]
 800ee46:	461a      	mov	r2, r3
 800ee48:	f000 fad9 	bl	800f3fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	2160      	movs	r1, #96	; 0x60
 800ee52:	4618      	mov	r0, r3
 800ee54:	f000 fb03 	bl	800f45e <TIM_ITRx_SetConfig>
      break;
 800ee58:	e01c      	b.n	800ee94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6818      	ldr	r0, [r3, #0]
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	6859      	ldr	r1, [r3, #4]
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	68db      	ldr	r3, [r3, #12]
 800ee66:	461a      	mov	r2, r3
 800ee68:	f000 fa9a 	bl	800f3a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	2140      	movs	r1, #64	; 0x40
 800ee72:	4618      	mov	r0, r3
 800ee74:	f000 faf3 	bl	800f45e <TIM_ITRx_SetConfig>
      break;
 800ee78:	e00c      	b.n	800ee94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681a      	ldr	r2, [r3, #0]
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	4619      	mov	r1, r3
 800ee84:	4610      	mov	r0, r2
 800ee86:	f000 faea 	bl	800f45e <TIM_ITRx_SetConfig>
      break;
 800ee8a:	e003      	b.n	800ee94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	73fb      	strb	r3, [r7, #15]
      break;
 800ee90:	e000      	b.n	800ee94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ee92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2201      	movs	r2, #1
 800ee98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	2200      	movs	r2, #0
 800eea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800eea4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eea6:	4618      	mov	r0, r3
 800eea8:	3710      	adds	r7, #16
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}

0800eeae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800eeae:	b480      	push	{r7}
 800eeb0:	b083      	sub	sp, #12
 800eeb2:	af00      	add	r7, sp, #0
 800eeb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800eeb6:	bf00      	nop
 800eeb8:	370c      	adds	r7, #12
 800eeba:	46bd      	mov	sp, r7
 800eebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec0:	4770      	bx	lr

0800eec2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800eec2:	b480      	push	{r7}
 800eec4:	b083      	sub	sp, #12
 800eec6:	af00      	add	r7, sp, #0
 800eec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800eeca:	bf00      	nop
 800eecc:	370c      	adds	r7, #12
 800eece:	46bd      	mov	sp, r7
 800eed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed4:	4770      	bx	lr

0800eed6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800eed6:	b480      	push	{r7}
 800eed8:	b083      	sub	sp, #12
 800eeda:	af00      	add	r7, sp, #0
 800eedc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800eede:	bf00      	nop
 800eee0:	370c      	adds	r7, #12
 800eee2:	46bd      	mov	sp, r7
 800eee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee8:	4770      	bx	lr

0800eeea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800eeea:	b480      	push	{r7}
 800eeec:	b083      	sub	sp, #12
 800eeee:	af00      	add	r7, sp, #0
 800eef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800eef2:	bf00      	nop
 800eef4:	370c      	adds	r7, #12
 800eef6:	46bd      	mov	sp, r7
 800eef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefc:	4770      	bx	lr
	...

0800ef00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ef00:	b480      	push	{r7}
 800ef02:	b085      	sub	sp, #20
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
 800ef08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	4a40      	ldr	r2, [pc, #256]	; (800f014 <TIM_Base_SetConfig+0x114>)
 800ef14:	4293      	cmp	r3, r2
 800ef16:	d013      	beq.n	800ef40 <TIM_Base_SetConfig+0x40>
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef1e:	d00f      	beq.n	800ef40 <TIM_Base_SetConfig+0x40>
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	4a3d      	ldr	r2, [pc, #244]	; (800f018 <TIM_Base_SetConfig+0x118>)
 800ef24:	4293      	cmp	r3, r2
 800ef26:	d00b      	beq.n	800ef40 <TIM_Base_SetConfig+0x40>
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	4a3c      	ldr	r2, [pc, #240]	; (800f01c <TIM_Base_SetConfig+0x11c>)
 800ef2c:	4293      	cmp	r3, r2
 800ef2e:	d007      	beq.n	800ef40 <TIM_Base_SetConfig+0x40>
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	4a3b      	ldr	r2, [pc, #236]	; (800f020 <TIM_Base_SetConfig+0x120>)
 800ef34:	4293      	cmp	r3, r2
 800ef36:	d003      	beq.n	800ef40 <TIM_Base_SetConfig+0x40>
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	4a3a      	ldr	r2, [pc, #232]	; (800f024 <TIM_Base_SetConfig+0x124>)
 800ef3c:	4293      	cmp	r3, r2
 800ef3e:	d108      	bne.n	800ef52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ef48:	683b      	ldr	r3, [r7, #0]
 800ef4a:	685b      	ldr	r3, [r3, #4]
 800ef4c:	68fa      	ldr	r2, [r7, #12]
 800ef4e:	4313      	orrs	r3, r2
 800ef50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	4a2f      	ldr	r2, [pc, #188]	; (800f014 <TIM_Base_SetConfig+0x114>)
 800ef56:	4293      	cmp	r3, r2
 800ef58:	d02b      	beq.n	800efb2 <TIM_Base_SetConfig+0xb2>
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef60:	d027      	beq.n	800efb2 <TIM_Base_SetConfig+0xb2>
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	4a2c      	ldr	r2, [pc, #176]	; (800f018 <TIM_Base_SetConfig+0x118>)
 800ef66:	4293      	cmp	r3, r2
 800ef68:	d023      	beq.n	800efb2 <TIM_Base_SetConfig+0xb2>
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	4a2b      	ldr	r2, [pc, #172]	; (800f01c <TIM_Base_SetConfig+0x11c>)
 800ef6e:	4293      	cmp	r3, r2
 800ef70:	d01f      	beq.n	800efb2 <TIM_Base_SetConfig+0xb2>
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	4a2a      	ldr	r2, [pc, #168]	; (800f020 <TIM_Base_SetConfig+0x120>)
 800ef76:	4293      	cmp	r3, r2
 800ef78:	d01b      	beq.n	800efb2 <TIM_Base_SetConfig+0xb2>
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	4a29      	ldr	r2, [pc, #164]	; (800f024 <TIM_Base_SetConfig+0x124>)
 800ef7e:	4293      	cmp	r3, r2
 800ef80:	d017      	beq.n	800efb2 <TIM_Base_SetConfig+0xb2>
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	4a28      	ldr	r2, [pc, #160]	; (800f028 <TIM_Base_SetConfig+0x128>)
 800ef86:	4293      	cmp	r3, r2
 800ef88:	d013      	beq.n	800efb2 <TIM_Base_SetConfig+0xb2>
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	4a27      	ldr	r2, [pc, #156]	; (800f02c <TIM_Base_SetConfig+0x12c>)
 800ef8e:	4293      	cmp	r3, r2
 800ef90:	d00f      	beq.n	800efb2 <TIM_Base_SetConfig+0xb2>
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	4a26      	ldr	r2, [pc, #152]	; (800f030 <TIM_Base_SetConfig+0x130>)
 800ef96:	4293      	cmp	r3, r2
 800ef98:	d00b      	beq.n	800efb2 <TIM_Base_SetConfig+0xb2>
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	4a25      	ldr	r2, [pc, #148]	; (800f034 <TIM_Base_SetConfig+0x134>)
 800ef9e:	4293      	cmp	r3, r2
 800efa0:	d007      	beq.n	800efb2 <TIM_Base_SetConfig+0xb2>
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	4a24      	ldr	r2, [pc, #144]	; (800f038 <TIM_Base_SetConfig+0x138>)
 800efa6:	4293      	cmp	r3, r2
 800efa8:	d003      	beq.n	800efb2 <TIM_Base_SetConfig+0xb2>
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	4a23      	ldr	r2, [pc, #140]	; (800f03c <TIM_Base_SetConfig+0x13c>)
 800efae:	4293      	cmp	r3, r2
 800efb0:	d108      	bne.n	800efc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800efb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	68db      	ldr	r3, [r3, #12]
 800efbe:	68fa      	ldr	r2, [r7, #12]
 800efc0:	4313      	orrs	r3, r2
 800efc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	695b      	ldr	r3, [r3, #20]
 800efce:	4313      	orrs	r3, r2
 800efd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	68fa      	ldr	r2, [r7, #12]
 800efd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	689a      	ldr	r2, [r3, #8]
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800efe0:	683b      	ldr	r3, [r7, #0]
 800efe2:	681a      	ldr	r2, [r3, #0]
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	4a0a      	ldr	r2, [pc, #40]	; (800f014 <TIM_Base_SetConfig+0x114>)
 800efec:	4293      	cmp	r3, r2
 800efee:	d003      	beq.n	800eff8 <TIM_Base_SetConfig+0xf8>
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	4a0c      	ldr	r2, [pc, #48]	; (800f024 <TIM_Base_SetConfig+0x124>)
 800eff4:	4293      	cmp	r3, r2
 800eff6:	d103      	bne.n	800f000 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	691a      	ldr	r2, [r3, #16]
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2201      	movs	r2, #1
 800f004:	615a      	str	r2, [r3, #20]
}
 800f006:	bf00      	nop
 800f008:	3714      	adds	r7, #20
 800f00a:	46bd      	mov	sp, r7
 800f00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f010:	4770      	bx	lr
 800f012:	bf00      	nop
 800f014:	40010000 	.word	0x40010000
 800f018:	40000400 	.word	0x40000400
 800f01c:	40000800 	.word	0x40000800
 800f020:	40000c00 	.word	0x40000c00
 800f024:	40010400 	.word	0x40010400
 800f028:	40014000 	.word	0x40014000
 800f02c:	40014400 	.word	0x40014400
 800f030:	40014800 	.word	0x40014800
 800f034:	40001800 	.word	0x40001800
 800f038:	40001c00 	.word	0x40001c00
 800f03c:	40002000 	.word	0x40002000

0800f040 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f040:	b480      	push	{r7}
 800f042:	b087      	sub	sp, #28
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
 800f048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	6a1b      	ldr	r3, [r3, #32]
 800f04e:	f023 0201 	bic.w	r2, r3, #1
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	6a1b      	ldr	r3, [r3, #32]
 800f05a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	685b      	ldr	r3, [r3, #4]
 800f060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	699b      	ldr	r3, [r3, #24]
 800f066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f06e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	f023 0303 	bic.w	r3, r3, #3
 800f076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	68fa      	ldr	r2, [r7, #12]
 800f07e:	4313      	orrs	r3, r2
 800f080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f082:	697b      	ldr	r3, [r7, #20]
 800f084:	f023 0302 	bic.w	r3, r3, #2
 800f088:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f08a:	683b      	ldr	r3, [r7, #0]
 800f08c:	689b      	ldr	r3, [r3, #8]
 800f08e:	697a      	ldr	r2, [r7, #20]
 800f090:	4313      	orrs	r3, r2
 800f092:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	4a20      	ldr	r2, [pc, #128]	; (800f118 <TIM_OC1_SetConfig+0xd8>)
 800f098:	4293      	cmp	r3, r2
 800f09a:	d003      	beq.n	800f0a4 <TIM_OC1_SetConfig+0x64>
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	4a1f      	ldr	r2, [pc, #124]	; (800f11c <TIM_OC1_SetConfig+0xdc>)
 800f0a0:	4293      	cmp	r3, r2
 800f0a2:	d10c      	bne.n	800f0be <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f0a4:	697b      	ldr	r3, [r7, #20]
 800f0a6:	f023 0308 	bic.w	r3, r3, #8
 800f0aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	68db      	ldr	r3, [r3, #12]
 800f0b0:	697a      	ldr	r2, [r7, #20]
 800f0b2:	4313      	orrs	r3, r2
 800f0b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f0b6:	697b      	ldr	r3, [r7, #20]
 800f0b8:	f023 0304 	bic.w	r3, r3, #4
 800f0bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	4a15      	ldr	r2, [pc, #84]	; (800f118 <TIM_OC1_SetConfig+0xd8>)
 800f0c2:	4293      	cmp	r3, r2
 800f0c4:	d003      	beq.n	800f0ce <TIM_OC1_SetConfig+0x8e>
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	4a14      	ldr	r2, [pc, #80]	; (800f11c <TIM_OC1_SetConfig+0xdc>)
 800f0ca:	4293      	cmp	r3, r2
 800f0cc:	d111      	bne.n	800f0f2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f0ce:	693b      	ldr	r3, [r7, #16]
 800f0d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f0d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f0d6:	693b      	ldr	r3, [r7, #16]
 800f0d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f0dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	695b      	ldr	r3, [r3, #20]
 800f0e2:	693a      	ldr	r2, [r7, #16]
 800f0e4:	4313      	orrs	r3, r2
 800f0e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	699b      	ldr	r3, [r3, #24]
 800f0ec:	693a      	ldr	r2, [r7, #16]
 800f0ee:	4313      	orrs	r3, r2
 800f0f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	693a      	ldr	r2, [r7, #16]
 800f0f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	68fa      	ldr	r2, [r7, #12]
 800f0fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	685a      	ldr	r2, [r3, #4]
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	697a      	ldr	r2, [r7, #20]
 800f10a:	621a      	str	r2, [r3, #32]
}
 800f10c:	bf00      	nop
 800f10e:	371c      	adds	r7, #28
 800f110:	46bd      	mov	sp, r7
 800f112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f116:	4770      	bx	lr
 800f118:	40010000 	.word	0x40010000
 800f11c:	40010400 	.word	0x40010400

0800f120 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f120:	b480      	push	{r7}
 800f122:	b087      	sub	sp, #28
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
 800f128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	6a1b      	ldr	r3, [r3, #32]
 800f12e:	f023 0210 	bic.w	r2, r3, #16
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	6a1b      	ldr	r3, [r3, #32]
 800f13a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	685b      	ldr	r3, [r3, #4]
 800f140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	699b      	ldr	r3, [r3, #24]
 800f146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f14e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f156:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	021b      	lsls	r3, r3, #8
 800f15e:	68fa      	ldr	r2, [r7, #12]
 800f160:	4313      	orrs	r3, r2
 800f162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	f023 0320 	bic.w	r3, r3, #32
 800f16a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	689b      	ldr	r3, [r3, #8]
 800f170:	011b      	lsls	r3, r3, #4
 800f172:	697a      	ldr	r2, [r7, #20]
 800f174:	4313      	orrs	r3, r2
 800f176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	4a22      	ldr	r2, [pc, #136]	; (800f204 <TIM_OC2_SetConfig+0xe4>)
 800f17c:	4293      	cmp	r3, r2
 800f17e:	d003      	beq.n	800f188 <TIM_OC2_SetConfig+0x68>
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	4a21      	ldr	r2, [pc, #132]	; (800f208 <TIM_OC2_SetConfig+0xe8>)
 800f184:	4293      	cmp	r3, r2
 800f186:	d10d      	bne.n	800f1a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f188:	697b      	ldr	r3, [r7, #20]
 800f18a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f18e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	68db      	ldr	r3, [r3, #12]
 800f194:	011b      	lsls	r3, r3, #4
 800f196:	697a      	ldr	r2, [r7, #20]
 800f198:	4313      	orrs	r3, r2
 800f19a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f19c:	697b      	ldr	r3, [r7, #20]
 800f19e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f1a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	4a17      	ldr	r2, [pc, #92]	; (800f204 <TIM_OC2_SetConfig+0xe4>)
 800f1a8:	4293      	cmp	r3, r2
 800f1aa:	d003      	beq.n	800f1b4 <TIM_OC2_SetConfig+0x94>
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	4a16      	ldr	r2, [pc, #88]	; (800f208 <TIM_OC2_SetConfig+0xe8>)
 800f1b0:	4293      	cmp	r3, r2
 800f1b2:	d113      	bne.n	800f1dc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f1b4:	693b      	ldr	r3, [r7, #16]
 800f1b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f1ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f1bc:	693b      	ldr	r3, [r7, #16]
 800f1be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f1c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f1c4:	683b      	ldr	r3, [r7, #0]
 800f1c6:	695b      	ldr	r3, [r3, #20]
 800f1c8:	009b      	lsls	r3, r3, #2
 800f1ca:	693a      	ldr	r2, [r7, #16]
 800f1cc:	4313      	orrs	r3, r2
 800f1ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	699b      	ldr	r3, [r3, #24]
 800f1d4:	009b      	lsls	r3, r3, #2
 800f1d6:	693a      	ldr	r2, [r7, #16]
 800f1d8:	4313      	orrs	r3, r2
 800f1da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	693a      	ldr	r2, [r7, #16]
 800f1e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	68fa      	ldr	r2, [r7, #12]
 800f1e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	685a      	ldr	r2, [r3, #4]
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	697a      	ldr	r2, [r7, #20]
 800f1f4:	621a      	str	r2, [r3, #32]
}
 800f1f6:	bf00      	nop
 800f1f8:	371c      	adds	r7, #28
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f200:	4770      	bx	lr
 800f202:	bf00      	nop
 800f204:	40010000 	.word	0x40010000
 800f208:	40010400 	.word	0x40010400

0800f20c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f20c:	b480      	push	{r7}
 800f20e:	b087      	sub	sp, #28
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
 800f214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	6a1b      	ldr	r3, [r3, #32]
 800f21a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	6a1b      	ldr	r3, [r3, #32]
 800f226:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	685b      	ldr	r3, [r3, #4]
 800f22c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	69db      	ldr	r3, [r3, #28]
 800f232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f23a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	f023 0303 	bic.w	r3, r3, #3
 800f242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f244:	683b      	ldr	r3, [r7, #0]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	68fa      	ldr	r2, [r7, #12]
 800f24a:	4313      	orrs	r3, r2
 800f24c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f24e:	697b      	ldr	r3, [r7, #20]
 800f250:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	689b      	ldr	r3, [r3, #8]
 800f25a:	021b      	lsls	r3, r3, #8
 800f25c:	697a      	ldr	r2, [r7, #20]
 800f25e:	4313      	orrs	r3, r2
 800f260:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	4a21      	ldr	r2, [pc, #132]	; (800f2ec <TIM_OC3_SetConfig+0xe0>)
 800f266:	4293      	cmp	r3, r2
 800f268:	d003      	beq.n	800f272 <TIM_OC3_SetConfig+0x66>
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	4a20      	ldr	r2, [pc, #128]	; (800f2f0 <TIM_OC3_SetConfig+0xe4>)
 800f26e:	4293      	cmp	r3, r2
 800f270:	d10d      	bne.n	800f28e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f278:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	68db      	ldr	r3, [r3, #12]
 800f27e:	021b      	lsls	r3, r3, #8
 800f280:	697a      	ldr	r2, [r7, #20]
 800f282:	4313      	orrs	r3, r2
 800f284:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f286:	697b      	ldr	r3, [r7, #20]
 800f288:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f28c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	4a16      	ldr	r2, [pc, #88]	; (800f2ec <TIM_OC3_SetConfig+0xe0>)
 800f292:	4293      	cmp	r3, r2
 800f294:	d003      	beq.n	800f29e <TIM_OC3_SetConfig+0x92>
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	4a15      	ldr	r2, [pc, #84]	; (800f2f0 <TIM_OC3_SetConfig+0xe4>)
 800f29a:	4293      	cmp	r3, r2
 800f29c:	d113      	bne.n	800f2c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f29e:	693b      	ldr	r3, [r7, #16]
 800f2a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f2a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f2a6:	693b      	ldr	r3, [r7, #16]
 800f2a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f2ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f2ae:	683b      	ldr	r3, [r7, #0]
 800f2b0:	695b      	ldr	r3, [r3, #20]
 800f2b2:	011b      	lsls	r3, r3, #4
 800f2b4:	693a      	ldr	r2, [r7, #16]
 800f2b6:	4313      	orrs	r3, r2
 800f2b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	699b      	ldr	r3, [r3, #24]
 800f2be:	011b      	lsls	r3, r3, #4
 800f2c0:	693a      	ldr	r2, [r7, #16]
 800f2c2:	4313      	orrs	r3, r2
 800f2c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	693a      	ldr	r2, [r7, #16]
 800f2ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	68fa      	ldr	r2, [r7, #12]
 800f2d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	685a      	ldr	r2, [r3, #4]
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	697a      	ldr	r2, [r7, #20]
 800f2de:	621a      	str	r2, [r3, #32]
}
 800f2e0:	bf00      	nop
 800f2e2:	371c      	adds	r7, #28
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ea:	4770      	bx	lr
 800f2ec:	40010000 	.word	0x40010000
 800f2f0:	40010400 	.word	0x40010400

0800f2f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f2f4:	b480      	push	{r7}
 800f2f6:	b087      	sub	sp, #28
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
 800f2fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6a1b      	ldr	r3, [r3, #32]
 800f302:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	6a1b      	ldr	r3, [r3, #32]
 800f30e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	685b      	ldr	r3, [r3, #4]
 800f314:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	69db      	ldr	r3, [r3, #28]
 800f31a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f32a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	021b      	lsls	r3, r3, #8
 800f332:	68fa      	ldr	r2, [r7, #12]
 800f334:	4313      	orrs	r3, r2
 800f336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f338:	693b      	ldr	r3, [r7, #16]
 800f33a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f33e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f340:	683b      	ldr	r3, [r7, #0]
 800f342:	689b      	ldr	r3, [r3, #8]
 800f344:	031b      	lsls	r3, r3, #12
 800f346:	693a      	ldr	r2, [r7, #16]
 800f348:	4313      	orrs	r3, r2
 800f34a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	4a12      	ldr	r2, [pc, #72]	; (800f398 <TIM_OC4_SetConfig+0xa4>)
 800f350:	4293      	cmp	r3, r2
 800f352:	d003      	beq.n	800f35c <TIM_OC4_SetConfig+0x68>
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	4a11      	ldr	r2, [pc, #68]	; (800f39c <TIM_OC4_SetConfig+0xa8>)
 800f358:	4293      	cmp	r3, r2
 800f35a:	d109      	bne.n	800f370 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f362:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	695b      	ldr	r3, [r3, #20]
 800f368:	019b      	lsls	r3, r3, #6
 800f36a:	697a      	ldr	r2, [r7, #20]
 800f36c:	4313      	orrs	r3, r2
 800f36e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	697a      	ldr	r2, [r7, #20]
 800f374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	68fa      	ldr	r2, [r7, #12]
 800f37a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	685a      	ldr	r2, [r3, #4]
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	693a      	ldr	r2, [r7, #16]
 800f388:	621a      	str	r2, [r3, #32]
}
 800f38a:	bf00      	nop
 800f38c:	371c      	adds	r7, #28
 800f38e:	46bd      	mov	sp, r7
 800f390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f394:	4770      	bx	lr
 800f396:	bf00      	nop
 800f398:	40010000 	.word	0x40010000
 800f39c:	40010400 	.word	0x40010400

0800f3a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f3a0:	b480      	push	{r7}
 800f3a2:	b087      	sub	sp, #28
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	60f8      	str	r0, [r7, #12]
 800f3a8:	60b9      	str	r1, [r7, #8]
 800f3aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	6a1b      	ldr	r3, [r3, #32]
 800f3b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	6a1b      	ldr	r3, [r3, #32]
 800f3b6:	f023 0201 	bic.w	r2, r3, #1
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	699b      	ldr	r3, [r3, #24]
 800f3c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f3c4:	693b      	ldr	r3, [r7, #16]
 800f3c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f3ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	011b      	lsls	r3, r3, #4
 800f3d0:	693a      	ldr	r2, [r7, #16]
 800f3d2:	4313      	orrs	r3, r2
 800f3d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f3d6:	697b      	ldr	r3, [r7, #20]
 800f3d8:	f023 030a 	bic.w	r3, r3, #10
 800f3dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f3de:	697a      	ldr	r2, [r7, #20]
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	4313      	orrs	r3, r2
 800f3e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	693a      	ldr	r2, [r7, #16]
 800f3ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	697a      	ldr	r2, [r7, #20]
 800f3f0:	621a      	str	r2, [r3, #32]
}
 800f3f2:	bf00      	nop
 800f3f4:	371c      	adds	r7, #28
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fc:	4770      	bx	lr

0800f3fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f3fe:	b480      	push	{r7}
 800f400:	b087      	sub	sp, #28
 800f402:	af00      	add	r7, sp, #0
 800f404:	60f8      	str	r0, [r7, #12]
 800f406:	60b9      	str	r1, [r7, #8]
 800f408:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	6a1b      	ldr	r3, [r3, #32]
 800f40e:	f023 0210 	bic.w	r2, r3, #16
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	699b      	ldr	r3, [r3, #24]
 800f41a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	6a1b      	ldr	r3, [r3, #32]
 800f420:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f428:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	031b      	lsls	r3, r3, #12
 800f42e:	697a      	ldr	r2, [r7, #20]
 800f430:	4313      	orrs	r3, r2
 800f432:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f434:	693b      	ldr	r3, [r7, #16]
 800f436:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f43a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f43c:	68bb      	ldr	r3, [r7, #8]
 800f43e:	011b      	lsls	r3, r3, #4
 800f440:	693a      	ldr	r2, [r7, #16]
 800f442:	4313      	orrs	r3, r2
 800f444:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	697a      	ldr	r2, [r7, #20]
 800f44a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	693a      	ldr	r2, [r7, #16]
 800f450:	621a      	str	r2, [r3, #32]
}
 800f452:	bf00      	nop
 800f454:	371c      	adds	r7, #28
 800f456:	46bd      	mov	sp, r7
 800f458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45c:	4770      	bx	lr

0800f45e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f45e:	b480      	push	{r7}
 800f460:	b085      	sub	sp, #20
 800f462:	af00      	add	r7, sp, #0
 800f464:	6078      	str	r0, [r7, #4]
 800f466:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	689b      	ldr	r3, [r3, #8]
 800f46c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f474:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f476:	683a      	ldr	r2, [r7, #0]
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	4313      	orrs	r3, r2
 800f47c:	f043 0307 	orr.w	r3, r3, #7
 800f480:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	68fa      	ldr	r2, [r7, #12]
 800f486:	609a      	str	r2, [r3, #8]
}
 800f488:	bf00      	nop
 800f48a:	3714      	adds	r7, #20
 800f48c:	46bd      	mov	sp, r7
 800f48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f492:	4770      	bx	lr

0800f494 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f494:	b480      	push	{r7}
 800f496:	b087      	sub	sp, #28
 800f498:	af00      	add	r7, sp, #0
 800f49a:	60f8      	str	r0, [r7, #12]
 800f49c:	60b9      	str	r1, [r7, #8]
 800f49e:	607a      	str	r2, [r7, #4]
 800f4a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	689b      	ldr	r3, [r3, #8]
 800f4a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f4ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	021a      	lsls	r2, r3, #8
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	431a      	orrs	r2, r3
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	4313      	orrs	r3, r2
 800f4bc:	697a      	ldr	r2, [r7, #20]
 800f4be:	4313      	orrs	r3, r2
 800f4c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	697a      	ldr	r2, [r7, #20]
 800f4c6:	609a      	str	r2, [r3, #8]
}
 800f4c8:	bf00      	nop
 800f4ca:	371c      	adds	r7, #28
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d2:	4770      	bx	lr

0800f4d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f4d4:	b480      	push	{r7}
 800f4d6:	b087      	sub	sp, #28
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	60f8      	str	r0, [r7, #12]
 800f4dc:	60b9      	str	r1, [r7, #8]
 800f4de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f4e0:	68bb      	ldr	r3, [r7, #8]
 800f4e2:	f003 031f 	and.w	r3, r3, #31
 800f4e6:	2201      	movs	r2, #1
 800f4e8:	fa02 f303 	lsl.w	r3, r2, r3
 800f4ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	6a1a      	ldr	r2, [r3, #32]
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	43db      	mvns	r3, r3
 800f4f6:	401a      	ands	r2, r3
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	6a1a      	ldr	r2, [r3, #32]
 800f500:	68bb      	ldr	r3, [r7, #8]
 800f502:	f003 031f 	and.w	r3, r3, #31
 800f506:	6879      	ldr	r1, [r7, #4]
 800f508:	fa01 f303 	lsl.w	r3, r1, r3
 800f50c:	431a      	orrs	r2, r3
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	621a      	str	r2, [r3, #32]
}
 800f512:	bf00      	nop
 800f514:	371c      	adds	r7, #28
 800f516:	46bd      	mov	sp, r7
 800f518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51c:	4770      	bx	lr
	...

0800f520 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f520:	b480      	push	{r7}
 800f522:	b085      	sub	sp, #20
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
 800f528:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f530:	2b01      	cmp	r3, #1
 800f532:	d101      	bne.n	800f538 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f534:	2302      	movs	r3, #2
 800f536:	e05a      	b.n	800f5ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	2201      	movs	r2, #1
 800f53c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2202      	movs	r2, #2
 800f544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	685b      	ldr	r3, [r3, #4]
 800f54e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	689b      	ldr	r3, [r3, #8]
 800f556:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f55e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	68fa      	ldr	r2, [r7, #12]
 800f566:	4313      	orrs	r3, r2
 800f568:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	68fa      	ldr	r2, [r7, #12]
 800f570:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	4a21      	ldr	r2, [pc, #132]	; (800f5fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f578:	4293      	cmp	r3, r2
 800f57a:	d022      	beq.n	800f5c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f584:	d01d      	beq.n	800f5c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	4a1d      	ldr	r2, [pc, #116]	; (800f600 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f58c:	4293      	cmp	r3, r2
 800f58e:	d018      	beq.n	800f5c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	4a1b      	ldr	r2, [pc, #108]	; (800f604 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f596:	4293      	cmp	r3, r2
 800f598:	d013      	beq.n	800f5c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	4a1a      	ldr	r2, [pc, #104]	; (800f608 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f5a0:	4293      	cmp	r3, r2
 800f5a2:	d00e      	beq.n	800f5c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	4a18      	ldr	r2, [pc, #96]	; (800f60c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f5aa:	4293      	cmp	r3, r2
 800f5ac:	d009      	beq.n	800f5c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	4a17      	ldr	r2, [pc, #92]	; (800f610 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f5b4:	4293      	cmp	r3, r2
 800f5b6:	d004      	beq.n	800f5c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	4a15      	ldr	r2, [pc, #84]	; (800f614 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f5be:	4293      	cmp	r3, r2
 800f5c0:	d10c      	bne.n	800f5dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f5c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	685b      	ldr	r3, [r3, #4]
 800f5ce:	68ba      	ldr	r2, [r7, #8]
 800f5d0:	4313      	orrs	r3, r2
 800f5d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	68ba      	ldr	r2, [r7, #8]
 800f5da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	2201      	movs	r2, #1
 800f5e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f5ec:	2300      	movs	r3, #0
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	3714      	adds	r7, #20
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f8:	4770      	bx	lr
 800f5fa:	bf00      	nop
 800f5fc:	40010000 	.word	0x40010000
 800f600:	40000400 	.word	0x40000400
 800f604:	40000800 	.word	0x40000800
 800f608:	40000c00 	.word	0x40000c00
 800f60c:	40010400 	.word	0x40010400
 800f610:	40014000 	.word	0x40014000
 800f614:	40001800 	.word	0x40001800

0800f618 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f618:	b480      	push	{r7}
 800f61a:	b083      	sub	sp, #12
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f620:	bf00      	nop
 800f622:	370c      	adds	r7, #12
 800f624:	46bd      	mov	sp, r7
 800f626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62a:	4770      	bx	lr

0800f62c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f62c:	b480      	push	{r7}
 800f62e:	b083      	sub	sp, #12
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f634:	bf00      	nop
 800f636:	370c      	adds	r7, #12
 800f638:	46bd      	mov	sp, r7
 800f63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63e:	4770      	bx	lr

0800f640 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b082      	sub	sp, #8
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d101      	bne.n	800f652 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f64e:	2301      	movs	r3, #1
 800f650:	e03f      	b.n	800f6d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f658:	b2db      	uxtb	r3, r3
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d106      	bne.n	800f66c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	2200      	movs	r2, #0
 800f662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f666:	6878      	ldr	r0, [r7, #4]
 800f668:	f7f3 fa0e 	bl	8002a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2224      	movs	r2, #36	; 0x24
 800f670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	68da      	ldr	r2, [r3, #12]
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f682:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f684:	6878      	ldr	r0, [r7, #4]
 800f686:	f000 f9cb 	bl	800fa20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	691a      	ldr	r2, [r3, #16]
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f698:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	695a      	ldr	r2, [r3, #20]
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f6a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	68da      	ldr	r2, [r3, #12]
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f6b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	2200      	movs	r2, #0
 800f6be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2220      	movs	r2, #32
 800f6c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	2220      	movs	r2, #32
 800f6cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800f6d0:	2300      	movs	r3, #0
}
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	3708      	adds	r7, #8
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	bd80      	pop	{r7, pc}

0800f6da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f6da:	b580      	push	{r7, lr}
 800f6dc:	b08a      	sub	sp, #40	; 0x28
 800f6de:	af02      	add	r7, sp, #8
 800f6e0:	60f8      	str	r0, [r7, #12]
 800f6e2:	60b9      	str	r1, [r7, #8]
 800f6e4:	603b      	str	r3, [r7, #0]
 800f6e6:	4613      	mov	r3, r2
 800f6e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f6f4:	b2db      	uxtb	r3, r3
 800f6f6:	2b20      	cmp	r3, #32
 800f6f8:	d17c      	bne.n	800f7f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d002      	beq.n	800f706 <HAL_UART_Transmit+0x2c>
 800f700:	88fb      	ldrh	r3, [r7, #6]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d101      	bne.n	800f70a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800f706:	2301      	movs	r3, #1
 800f708:	e075      	b.n	800f7f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f710:	2b01      	cmp	r3, #1
 800f712:	d101      	bne.n	800f718 <HAL_UART_Transmit+0x3e>
 800f714:	2302      	movs	r3, #2
 800f716:	e06e      	b.n	800f7f6 <HAL_UART_Transmit+0x11c>
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	2201      	movs	r2, #1
 800f71c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	2200      	movs	r2, #0
 800f724:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	2221      	movs	r2, #33	; 0x21
 800f72a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f72e:	f7f9 fdd5 	bl	80092dc <HAL_GetTick>
 800f732:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	88fa      	ldrh	r2, [r7, #6]
 800f738:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	88fa      	ldrh	r2, [r7, #6]
 800f73e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	689b      	ldr	r3, [r3, #8]
 800f744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f748:	d108      	bne.n	800f75c <HAL_UART_Transmit+0x82>
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	691b      	ldr	r3, [r3, #16]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d104      	bne.n	800f75c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800f752:	2300      	movs	r3, #0
 800f754:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f756:	68bb      	ldr	r3, [r7, #8]
 800f758:	61bb      	str	r3, [r7, #24]
 800f75a:	e003      	b.n	800f764 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800f75c:	68bb      	ldr	r3, [r7, #8]
 800f75e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f760:	2300      	movs	r3, #0
 800f762:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	2200      	movs	r2, #0
 800f768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800f76c:	e02a      	b.n	800f7c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	9300      	str	r3, [sp, #0]
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	2200      	movs	r2, #0
 800f776:	2180      	movs	r1, #128	; 0x80
 800f778:	68f8      	ldr	r0, [r7, #12]
 800f77a:	f000 f8e2 	bl	800f942 <UART_WaitOnFlagUntilTimeout>
 800f77e:	4603      	mov	r3, r0
 800f780:	2b00      	cmp	r3, #0
 800f782:	d001      	beq.n	800f788 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800f784:	2303      	movs	r3, #3
 800f786:	e036      	b.n	800f7f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800f788:	69fb      	ldr	r3, [r7, #28]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d10b      	bne.n	800f7a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f78e:	69bb      	ldr	r3, [r7, #24]
 800f790:	881b      	ldrh	r3, [r3, #0]
 800f792:	461a      	mov	r2, r3
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f79c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800f79e:	69bb      	ldr	r3, [r7, #24]
 800f7a0:	3302      	adds	r3, #2
 800f7a2:	61bb      	str	r3, [r7, #24]
 800f7a4:	e007      	b.n	800f7b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800f7a6:	69fb      	ldr	r3, [r7, #28]
 800f7a8:	781a      	ldrb	r2, [r3, #0]
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800f7b0:	69fb      	ldr	r3, [r7, #28]
 800f7b2:	3301      	adds	r3, #1
 800f7b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f7ba:	b29b      	uxth	r3, r3
 800f7bc:	3b01      	subs	r3, #1
 800f7be:	b29a      	uxth	r2, r3
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f7c8:	b29b      	uxth	r3, r3
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d1cf      	bne.n	800f76e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f7ce:	683b      	ldr	r3, [r7, #0]
 800f7d0:	9300      	str	r3, [sp, #0]
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	2140      	movs	r1, #64	; 0x40
 800f7d8:	68f8      	ldr	r0, [r7, #12]
 800f7da:	f000 f8b2 	bl	800f942 <UART_WaitOnFlagUntilTimeout>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d001      	beq.n	800f7e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800f7e4:	2303      	movs	r3, #3
 800f7e6:	e006      	b.n	800f7f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	2220      	movs	r2, #32
 800f7ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	e000      	b.n	800f7f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800f7f4:	2302      	movs	r3, #2
  }
}
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	3720      	adds	r7, #32
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd80      	pop	{r7, pc}

0800f7fe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f7fe:	b580      	push	{r7, lr}
 800f800:	b08a      	sub	sp, #40	; 0x28
 800f802:	af02      	add	r7, sp, #8
 800f804:	60f8      	str	r0, [r7, #12]
 800f806:	60b9      	str	r1, [r7, #8]
 800f808:	603b      	str	r3, [r7, #0]
 800f80a:	4613      	mov	r3, r2
 800f80c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800f80e:	2300      	movs	r3, #0
 800f810:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f818:	b2db      	uxtb	r3, r3
 800f81a:	2b20      	cmp	r3, #32
 800f81c:	f040 808c 	bne.w	800f938 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800f820:	68bb      	ldr	r3, [r7, #8]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d002      	beq.n	800f82c <HAL_UART_Receive+0x2e>
 800f826:	88fb      	ldrh	r3, [r7, #6]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d101      	bne.n	800f830 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800f82c:	2301      	movs	r3, #1
 800f82e:	e084      	b.n	800f93a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f836:	2b01      	cmp	r3, #1
 800f838:	d101      	bne.n	800f83e <HAL_UART_Receive+0x40>
 800f83a:	2302      	movs	r3, #2
 800f83c:	e07d      	b.n	800f93a <HAL_UART_Receive+0x13c>
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	2201      	movs	r2, #1
 800f842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	2200      	movs	r2, #0
 800f84a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	2222      	movs	r2, #34	; 0x22
 800f850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	2200      	movs	r2, #0
 800f858:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f85a:	f7f9 fd3f 	bl	80092dc <HAL_GetTick>
 800f85e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	88fa      	ldrh	r2, [r7, #6]
 800f864:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	88fa      	ldrh	r2, [r7, #6]
 800f86a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	689b      	ldr	r3, [r3, #8]
 800f870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f874:	d108      	bne.n	800f888 <HAL_UART_Receive+0x8a>
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	691b      	ldr	r3, [r3, #16]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d104      	bne.n	800f888 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800f87e:	2300      	movs	r3, #0
 800f880:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f882:	68bb      	ldr	r3, [r7, #8]
 800f884:	61bb      	str	r3, [r7, #24]
 800f886:	e003      	b.n	800f890 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800f888:	68bb      	ldr	r3, [r7, #8]
 800f88a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f88c:	2300      	movs	r3, #0
 800f88e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	2200      	movs	r2, #0
 800f894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800f898:	e043      	b.n	800f922 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f89a:	683b      	ldr	r3, [r7, #0]
 800f89c:	9300      	str	r3, [sp, #0]
 800f89e:	697b      	ldr	r3, [r7, #20]
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	2120      	movs	r1, #32
 800f8a4:	68f8      	ldr	r0, [r7, #12]
 800f8a6:	f000 f84c 	bl	800f942 <UART_WaitOnFlagUntilTimeout>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d001      	beq.n	800f8b4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800f8b0:	2303      	movs	r3, #3
 800f8b2:	e042      	b.n	800f93a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800f8b4:	69fb      	ldr	r3, [r7, #28]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d10c      	bne.n	800f8d4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	685b      	ldr	r3, [r3, #4]
 800f8c0:	b29b      	uxth	r3, r3
 800f8c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8c6:	b29a      	uxth	r2, r3
 800f8c8:	69bb      	ldr	r3, [r7, #24]
 800f8ca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f8cc:	69bb      	ldr	r3, [r7, #24]
 800f8ce:	3302      	adds	r3, #2
 800f8d0:	61bb      	str	r3, [r7, #24]
 800f8d2:	e01f      	b.n	800f914 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	689b      	ldr	r3, [r3, #8]
 800f8d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f8dc:	d007      	beq.n	800f8ee <HAL_UART_Receive+0xf0>
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	689b      	ldr	r3, [r3, #8]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d10a      	bne.n	800f8fc <HAL_UART_Receive+0xfe>
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	691b      	ldr	r3, [r3, #16]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d106      	bne.n	800f8fc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	685b      	ldr	r3, [r3, #4]
 800f8f4:	b2da      	uxtb	r2, r3
 800f8f6:	69fb      	ldr	r3, [r7, #28]
 800f8f8:	701a      	strb	r2, [r3, #0]
 800f8fa:	e008      	b.n	800f90e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	685b      	ldr	r3, [r3, #4]
 800f902:	b2db      	uxtb	r3, r3
 800f904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f908:	b2da      	uxtb	r2, r3
 800f90a:	69fb      	ldr	r3, [r7, #28]
 800f90c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800f90e:	69fb      	ldr	r3, [r7, #28]
 800f910:	3301      	adds	r3, #1
 800f912:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f918:	b29b      	uxth	r3, r3
 800f91a:	3b01      	subs	r3, #1
 800f91c:	b29a      	uxth	r2, r3
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f926:	b29b      	uxth	r3, r3
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d1b6      	bne.n	800f89a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	2220      	movs	r2, #32
 800f930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800f934:	2300      	movs	r3, #0
 800f936:	e000      	b.n	800f93a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800f938:	2302      	movs	r3, #2
  }
}
 800f93a:	4618      	mov	r0, r3
 800f93c:	3720      	adds	r7, #32
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd80      	pop	{r7, pc}

0800f942 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800f942:	b580      	push	{r7, lr}
 800f944:	b090      	sub	sp, #64	; 0x40
 800f946:	af00      	add	r7, sp, #0
 800f948:	60f8      	str	r0, [r7, #12]
 800f94a:	60b9      	str	r1, [r7, #8]
 800f94c:	603b      	str	r3, [r7, #0]
 800f94e:	4613      	mov	r3, r2
 800f950:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f952:	e050      	b.n	800f9f6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f954:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f95a:	d04c      	beq.n	800f9f6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800f95c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d007      	beq.n	800f972 <UART_WaitOnFlagUntilTimeout+0x30>
 800f962:	f7f9 fcbb 	bl	80092dc <HAL_GetTick>
 800f966:	4602      	mov	r2, r0
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	1ad3      	subs	r3, r2, r3
 800f96c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f96e:	429a      	cmp	r2, r3
 800f970:	d241      	bcs.n	800f9f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	330c      	adds	r3, #12
 800f978:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f97c:	e853 3f00 	ldrex	r3, [r3]
 800f980:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f984:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f988:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	330c      	adds	r3, #12
 800f990:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f992:	637a      	str	r2, [r7, #52]	; 0x34
 800f994:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f996:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f998:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f99a:	e841 2300 	strex	r3, r2, [r1]
 800f99e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d1e5      	bne.n	800f972 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	3314      	adds	r3, #20
 800f9ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9ae:	697b      	ldr	r3, [r7, #20]
 800f9b0:	e853 3f00 	ldrex	r3, [r3]
 800f9b4:	613b      	str	r3, [r7, #16]
   return(result);
 800f9b6:	693b      	ldr	r3, [r7, #16]
 800f9b8:	f023 0301 	bic.w	r3, r3, #1
 800f9bc:	63bb      	str	r3, [r7, #56]	; 0x38
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	3314      	adds	r3, #20
 800f9c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9c6:	623a      	str	r2, [r7, #32]
 800f9c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9ca:	69f9      	ldr	r1, [r7, #28]
 800f9cc:	6a3a      	ldr	r2, [r7, #32]
 800f9ce:	e841 2300 	strex	r3, r2, [r1]
 800f9d2:	61bb      	str	r3, [r7, #24]
   return(result);
 800f9d4:	69bb      	ldr	r3, [r7, #24]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d1e5      	bne.n	800f9a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	2220      	movs	r2, #32
 800f9de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	2220      	movs	r2, #32
 800f9e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800f9f2:	2303      	movs	r3, #3
 800f9f4:	e00f      	b.n	800fa16 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	681a      	ldr	r2, [r3, #0]
 800f9fc:	68bb      	ldr	r3, [r7, #8]
 800f9fe:	4013      	ands	r3, r2
 800fa00:	68ba      	ldr	r2, [r7, #8]
 800fa02:	429a      	cmp	r2, r3
 800fa04:	bf0c      	ite	eq
 800fa06:	2301      	moveq	r3, #1
 800fa08:	2300      	movne	r3, #0
 800fa0a:	b2db      	uxtb	r3, r3
 800fa0c:	461a      	mov	r2, r3
 800fa0e:	79fb      	ldrb	r3, [r7, #7]
 800fa10:	429a      	cmp	r2, r3
 800fa12:	d09f      	beq.n	800f954 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800fa14:	2300      	movs	r3, #0
}
 800fa16:	4618      	mov	r0, r3
 800fa18:	3740      	adds	r7, #64	; 0x40
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd80      	pop	{r7, pc}
	...

0800fa20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fa20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa24:	b09f      	sub	sp, #124	; 0x7c
 800fa26:	af00      	add	r7, sp, #0
 800fa28:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fa2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	691b      	ldr	r3, [r3, #16]
 800fa30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800fa34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa36:	68d9      	ldr	r1, [r3, #12]
 800fa38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa3a:	681a      	ldr	r2, [r3, #0]
 800fa3c:	ea40 0301 	orr.w	r3, r0, r1
 800fa40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800fa42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa44:	689a      	ldr	r2, [r3, #8]
 800fa46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa48:	691b      	ldr	r3, [r3, #16]
 800fa4a:	431a      	orrs	r2, r3
 800fa4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa4e:	695b      	ldr	r3, [r3, #20]
 800fa50:	431a      	orrs	r2, r3
 800fa52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa54:	69db      	ldr	r3, [r3, #28]
 800fa56:	4313      	orrs	r3, r2
 800fa58:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800fa5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	68db      	ldr	r3, [r3, #12]
 800fa60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800fa64:	f021 010c 	bic.w	r1, r1, #12
 800fa68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa6a:	681a      	ldr	r2, [r3, #0]
 800fa6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa6e:	430b      	orrs	r3, r1
 800fa70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800fa72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	695b      	ldr	r3, [r3, #20]
 800fa78:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800fa7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa7e:	6999      	ldr	r1, [r3, #24]
 800fa80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa82:	681a      	ldr	r2, [r3, #0]
 800fa84:	ea40 0301 	orr.w	r3, r0, r1
 800fa88:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fa8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa8c:	681a      	ldr	r2, [r3, #0]
 800fa8e:	4bc5      	ldr	r3, [pc, #788]	; (800fda4 <UART_SetConfig+0x384>)
 800fa90:	429a      	cmp	r2, r3
 800fa92:	d004      	beq.n	800fa9e <UART_SetConfig+0x7e>
 800fa94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa96:	681a      	ldr	r2, [r3, #0]
 800fa98:	4bc3      	ldr	r3, [pc, #780]	; (800fda8 <UART_SetConfig+0x388>)
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	d103      	bne.n	800faa6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800fa9e:	f7fd f865 	bl	800cb6c <HAL_RCC_GetPCLK2Freq>
 800faa2:	6778      	str	r0, [r7, #116]	; 0x74
 800faa4:	e002      	b.n	800faac <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800faa6:	f7fd f84d 	bl	800cb44 <HAL_RCC_GetPCLK1Freq>
 800faaa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800faac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800faae:	69db      	ldr	r3, [r3, #28]
 800fab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fab4:	f040 80b6 	bne.w	800fc24 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fab8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800faba:	461c      	mov	r4, r3
 800fabc:	f04f 0500 	mov.w	r5, #0
 800fac0:	4622      	mov	r2, r4
 800fac2:	462b      	mov	r3, r5
 800fac4:	1891      	adds	r1, r2, r2
 800fac6:	6439      	str	r1, [r7, #64]	; 0x40
 800fac8:	415b      	adcs	r3, r3
 800faca:	647b      	str	r3, [r7, #68]	; 0x44
 800facc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800fad0:	1912      	adds	r2, r2, r4
 800fad2:	eb45 0303 	adc.w	r3, r5, r3
 800fad6:	f04f 0000 	mov.w	r0, #0
 800fada:	f04f 0100 	mov.w	r1, #0
 800fade:	00d9      	lsls	r1, r3, #3
 800fae0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800fae4:	00d0      	lsls	r0, r2, #3
 800fae6:	4602      	mov	r2, r0
 800fae8:	460b      	mov	r3, r1
 800faea:	1911      	adds	r1, r2, r4
 800faec:	6639      	str	r1, [r7, #96]	; 0x60
 800faee:	416b      	adcs	r3, r5
 800faf0:	667b      	str	r3, [r7, #100]	; 0x64
 800faf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800faf4:	685b      	ldr	r3, [r3, #4]
 800faf6:	461a      	mov	r2, r3
 800faf8:	f04f 0300 	mov.w	r3, #0
 800fafc:	1891      	adds	r1, r2, r2
 800fafe:	63b9      	str	r1, [r7, #56]	; 0x38
 800fb00:	415b      	adcs	r3, r3
 800fb02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fb04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800fb08:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800fb0c:	f7f1 f92c 	bl	8000d68 <__aeabi_uldivmod>
 800fb10:	4602      	mov	r2, r0
 800fb12:	460b      	mov	r3, r1
 800fb14:	4ba5      	ldr	r3, [pc, #660]	; (800fdac <UART_SetConfig+0x38c>)
 800fb16:	fba3 2302 	umull	r2, r3, r3, r2
 800fb1a:	095b      	lsrs	r3, r3, #5
 800fb1c:	011e      	lsls	r6, r3, #4
 800fb1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fb20:	461c      	mov	r4, r3
 800fb22:	f04f 0500 	mov.w	r5, #0
 800fb26:	4622      	mov	r2, r4
 800fb28:	462b      	mov	r3, r5
 800fb2a:	1891      	adds	r1, r2, r2
 800fb2c:	6339      	str	r1, [r7, #48]	; 0x30
 800fb2e:	415b      	adcs	r3, r3
 800fb30:	637b      	str	r3, [r7, #52]	; 0x34
 800fb32:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800fb36:	1912      	adds	r2, r2, r4
 800fb38:	eb45 0303 	adc.w	r3, r5, r3
 800fb3c:	f04f 0000 	mov.w	r0, #0
 800fb40:	f04f 0100 	mov.w	r1, #0
 800fb44:	00d9      	lsls	r1, r3, #3
 800fb46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800fb4a:	00d0      	lsls	r0, r2, #3
 800fb4c:	4602      	mov	r2, r0
 800fb4e:	460b      	mov	r3, r1
 800fb50:	1911      	adds	r1, r2, r4
 800fb52:	65b9      	str	r1, [r7, #88]	; 0x58
 800fb54:	416b      	adcs	r3, r5
 800fb56:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fb58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb5a:	685b      	ldr	r3, [r3, #4]
 800fb5c:	461a      	mov	r2, r3
 800fb5e:	f04f 0300 	mov.w	r3, #0
 800fb62:	1891      	adds	r1, r2, r2
 800fb64:	62b9      	str	r1, [r7, #40]	; 0x28
 800fb66:	415b      	adcs	r3, r3
 800fb68:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800fb6e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800fb72:	f7f1 f8f9 	bl	8000d68 <__aeabi_uldivmod>
 800fb76:	4602      	mov	r2, r0
 800fb78:	460b      	mov	r3, r1
 800fb7a:	4b8c      	ldr	r3, [pc, #560]	; (800fdac <UART_SetConfig+0x38c>)
 800fb7c:	fba3 1302 	umull	r1, r3, r3, r2
 800fb80:	095b      	lsrs	r3, r3, #5
 800fb82:	2164      	movs	r1, #100	; 0x64
 800fb84:	fb01 f303 	mul.w	r3, r1, r3
 800fb88:	1ad3      	subs	r3, r2, r3
 800fb8a:	00db      	lsls	r3, r3, #3
 800fb8c:	3332      	adds	r3, #50	; 0x32
 800fb8e:	4a87      	ldr	r2, [pc, #540]	; (800fdac <UART_SetConfig+0x38c>)
 800fb90:	fba2 2303 	umull	r2, r3, r2, r3
 800fb94:	095b      	lsrs	r3, r3, #5
 800fb96:	005b      	lsls	r3, r3, #1
 800fb98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800fb9c:	441e      	add	r6, r3
 800fb9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fba0:	4618      	mov	r0, r3
 800fba2:	f04f 0100 	mov.w	r1, #0
 800fba6:	4602      	mov	r2, r0
 800fba8:	460b      	mov	r3, r1
 800fbaa:	1894      	adds	r4, r2, r2
 800fbac:	623c      	str	r4, [r7, #32]
 800fbae:	415b      	adcs	r3, r3
 800fbb0:	627b      	str	r3, [r7, #36]	; 0x24
 800fbb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800fbb6:	1812      	adds	r2, r2, r0
 800fbb8:	eb41 0303 	adc.w	r3, r1, r3
 800fbbc:	f04f 0400 	mov.w	r4, #0
 800fbc0:	f04f 0500 	mov.w	r5, #0
 800fbc4:	00dd      	lsls	r5, r3, #3
 800fbc6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800fbca:	00d4      	lsls	r4, r2, #3
 800fbcc:	4622      	mov	r2, r4
 800fbce:	462b      	mov	r3, r5
 800fbd0:	1814      	adds	r4, r2, r0
 800fbd2:	653c      	str	r4, [r7, #80]	; 0x50
 800fbd4:	414b      	adcs	r3, r1
 800fbd6:	657b      	str	r3, [r7, #84]	; 0x54
 800fbd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fbda:	685b      	ldr	r3, [r3, #4]
 800fbdc:	461a      	mov	r2, r3
 800fbde:	f04f 0300 	mov.w	r3, #0
 800fbe2:	1891      	adds	r1, r2, r2
 800fbe4:	61b9      	str	r1, [r7, #24]
 800fbe6:	415b      	adcs	r3, r3
 800fbe8:	61fb      	str	r3, [r7, #28]
 800fbea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800fbee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800fbf2:	f7f1 f8b9 	bl	8000d68 <__aeabi_uldivmod>
 800fbf6:	4602      	mov	r2, r0
 800fbf8:	460b      	mov	r3, r1
 800fbfa:	4b6c      	ldr	r3, [pc, #432]	; (800fdac <UART_SetConfig+0x38c>)
 800fbfc:	fba3 1302 	umull	r1, r3, r3, r2
 800fc00:	095b      	lsrs	r3, r3, #5
 800fc02:	2164      	movs	r1, #100	; 0x64
 800fc04:	fb01 f303 	mul.w	r3, r1, r3
 800fc08:	1ad3      	subs	r3, r2, r3
 800fc0a:	00db      	lsls	r3, r3, #3
 800fc0c:	3332      	adds	r3, #50	; 0x32
 800fc0e:	4a67      	ldr	r2, [pc, #412]	; (800fdac <UART_SetConfig+0x38c>)
 800fc10:	fba2 2303 	umull	r2, r3, r2, r3
 800fc14:	095b      	lsrs	r3, r3, #5
 800fc16:	f003 0207 	and.w	r2, r3, #7
 800fc1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	4432      	add	r2, r6
 800fc20:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800fc22:	e0b9      	b.n	800fd98 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800fc24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fc26:	461c      	mov	r4, r3
 800fc28:	f04f 0500 	mov.w	r5, #0
 800fc2c:	4622      	mov	r2, r4
 800fc2e:	462b      	mov	r3, r5
 800fc30:	1891      	adds	r1, r2, r2
 800fc32:	6139      	str	r1, [r7, #16]
 800fc34:	415b      	adcs	r3, r3
 800fc36:	617b      	str	r3, [r7, #20]
 800fc38:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fc3c:	1912      	adds	r2, r2, r4
 800fc3e:	eb45 0303 	adc.w	r3, r5, r3
 800fc42:	f04f 0000 	mov.w	r0, #0
 800fc46:	f04f 0100 	mov.w	r1, #0
 800fc4a:	00d9      	lsls	r1, r3, #3
 800fc4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800fc50:	00d0      	lsls	r0, r2, #3
 800fc52:	4602      	mov	r2, r0
 800fc54:	460b      	mov	r3, r1
 800fc56:	eb12 0804 	adds.w	r8, r2, r4
 800fc5a:	eb43 0905 	adc.w	r9, r3, r5
 800fc5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc60:	685b      	ldr	r3, [r3, #4]
 800fc62:	4618      	mov	r0, r3
 800fc64:	f04f 0100 	mov.w	r1, #0
 800fc68:	f04f 0200 	mov.w	r2, #0
 800fc6c:	f04f 0300 	mov.w	r3, #0
 800fc70:	008b      	lsls	r3, r1, #2
 800fc72:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800fc76:	0082      	lsls	r2, r0, #2
 800fc78:	4640      	mov	r0, r8
 800fc7a:	4649      	mov	r1, r9
 800fc7c:	f7f1 f874 	bl	8000d68 <__aeabi_uldivmod>
 800fc80:	4602      	mov	r2, r0
 800fc82:	460b      	mov	r3, r1
 800fc84:	4b49      	ldr	r3, [pc, #292]	; (800fdac <UART_SetConfig+0x38c>)
 800fc86:	fba3 2302 	umull	r2, r3, r3, r2
 800fc8a:	095b      	lsrs	r3, r3, #5
 800fc8c:	011e      	lsls	r6, r3, #4
 800fc8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fc90:	4618      	mov	r0, r3
 800fc92:	f04f 0100 	mov.w	r1, #0
 800fc96:	4602      	mov	r2, r0
 800fc98:	460b      	mov	r3, r1
 800fc9a:	1894      	adds	r4, r2, r2
 800fc9c:	60bc      	str	r4, [r7, #8]
 800fc9e:	415b      	adcs	r3, r3
 800fca0:	60fb      	str	r3, [r7, #12]
 800fca2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fca6:	1812      	adds	r2, r2, r0
 800fca8:	eb41 0303 	adc.w	r3, r1, r3
 800fcac:	f04f 0400 	mov.w	r4, #0
 800fcb0:	f04f 0500 	mov.w	r5, #0
 800fcb4:	00dd      	lsls	r5, r3, #3
 800fcb6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800fcba:	00d4      	lsls	r4, r2, #3
 800fcbc:	4622      	mov	r2, r4
 800fcbe:	462b      	mov	r3, r5
 800fcc0:	1814      	adds	r4, r2, r0
 800fcc2:	64bc      	str	r4, [r7, #72]	; 0x48
 800fcc4:	414b      	adcs	r3, r1
 800fcc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fcc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fcca:	685b      	ldr	r3, [r3, #4]
 800fccc:	4618      	mov	r0, r3
 800fcce:	f04f 0100 	mov.w	r1, #0
 800fcd2:	f04f 0200 	mov.w	r2, #0
 800fcd6:	f04f 0300 	mov.w	r3, #0
 800fcda:	008b      	lsls	r3, r1, #2
 800fcdc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800fce0:	0082      	lsls	r2, r0, #2
 800fce2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800fce6:	f7f1 f83f 	bl	8000d68 <__aeabi_uldivmod>
 800fcea:	4602      	mov	r2, r0
 800fcec:	460b      	mov	r3, r1
 800fcee:	4b2f      	ldr	r3, [pc, #188]	; (800fdac <UART_SetConfig+0x38c>)
 800fcf0:	fba3 1302 	umull	r1, r3, r3, r2
 800fcf4:	095b      	lsrs	r3, r3, #5
 800fcf6:	2164      	movs	r1, #100	; 0x64
 800fcf8:	fb01 f303 	mul.w	r3, r1, r3
 800fcfc:	1ad3      	subs	r3, r2, r3
 800fcfe:	011b      	lsls	r3, r3, #4
 800fd00:	3332      	adds	r3, #50	; 0x32
 800fd02:	4a2a      	ldr	r2, [pc, #168]	; (800fdac <UART_SetConfig+0x38c>)
 800fd04:	fba2 2303 	umull	r2, r3, r2, r3
 800fd08:	095b      	lsrs	r3, r3, #5
 800fd0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fd0e:	441e      	add	r6, r3
 800fd10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fd12:	4618      	mov	r0, r3
 800fd14:	f04f 0100 	mov.w	r1, #0
 800fd18:	4602      	mov	r2, r0
 800fd1a:	460b      	mov	r3, r1
 800fd1c:	1894      	adds	r4, r2, r2
 800fd1e:	603c      	str	r4, [r7, #0]
 800fd20:	415b      	adcs	r3, r3
 800fd22:	607b      	str	r3, [r7, #4]
 800fd24:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd28:	1812      	adds	r2, r2, r0
 800fd2a:	eb41 0303 	adc.w	r3, r1, r3
 800fd2e:	f04f 0400 	mov.w	r4, #0
 800fd32:	f04f 0500 	mov.w	r5, #0
 800fd36:	00dd      	lsls	r5, r3, #3
 800fd38:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800fd3c:	00d4      	lsls	r4, r2, #3
 800fd3e:	4622      	mov	r2, r4
 800fd40:	462b      	mov	r3, r5
 800fd42:	eb12 0a00 	adds.w	sl, r2, r0
 800fd46:	eb43 0b01 	adc.w	fp, r3, r1
 800fd4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd4c:	685b      	ldr	r3, [r3, #4]
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f04f 0100 	mov.w	r1, #0
 800fd54:	f04f 0200 	mov.w	r2, #0
 800fd58:	f04f 0300 	mov.w	r3, #0
 800fd5c:	008b      	lsls	r3, r1, #2
 800fd5e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800fd62:	0082      	lsls	r2, r0, #2
 800fd64:	4650      	mov	r0, sl
 800fd66:	4659      	mov	r1, fp
 800fd68:	f7f0 fffe 	bl	8000d68 <__aeabi_uldivmod>
 800fd6c:	4602      	mov	r2, r0
 800fd6e:	460b      	mov	r3, r1
 800fd70:	4b0e      	ldr	r3, [pc, #56]	; (800fdac <UART_SetConfig+0x38c>)
 800fd72:	fba3 1302 	umull	r1, r3, r3, r2
 800fd76:	095b      	lsrs	r3, r3, #5
 800fd78:	2164      	movs	r1, #100	; 0x64
 800fd7a:	fb01 f303 	mul.w	r3, r1, r3
 800fd7e:	1ad3      	subs	r3, r2, r3
 800fd80:	011b      	lsls	r3, r3, #4
 800fd82:	3332      	adds	r3, #50	; 0x32
 800fd84:	4a09      	ldr	r2, [pc, #36]	; (800fdac <UART_SetConfig+0x38c>)
 800fd86:	fba2 2303 	umull	r2, r3, r2, r3
 800fd8a:	095b      	lsrs	r3, r3, #5
 800fd8c:	f003 020f 	and.w	r2, r3, #15
 800fd90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	4432      	add	r2, r6
 800fd96:	609a      	str	r2, [r3, #8]
}
 800fd98:	bf00      	nop
 800fd9a:	377c      	adds	r7, #124	; 0x7c
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fda2:	bf00      	nop
 800fda4:	40011000 	.word	0x40011000
 800fda8:	40011400 	.word	0x40011400
 800fdac:	51eb851f 	.word	0x51eb851f

0800fdb0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fdb0:	b084      	sub	sp, #16
 800fdb2:	b580      	push	{r7, lr}
 800fdb4:	b084      	sub	sp, #16
 800fdb6:	af00      	add	r7, sp, #0
 800fdb8:	6078      	str	r0, [r7, #4]
 800fdba:	f107 001c 	add.w	r0, r7, #28
 800fdbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdc4:	2b01      	cmp	r3, #1
 800fdc6:	d122      	bne.n	800fe0e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	68db      	ldr	r3, [r3, #12]
 800fdd8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800fddc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fde0:	687a      	ldr	r2, [r7, #4]
 800fde2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	68db      	ldr	r3, [r3, #12]
 800fde8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800fdf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fdf2:	2b01      	cmp	r3, #1
 800fdf4:	d105      	bne.n	800fe02 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	68db      	ldr	r3, [r3, #12]
 800fdfa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fe02:	6878      	ldr	r0, [r7, #4]
 800fe04:	f001 fb1c 	bl	8011440 <USB_CoreReset>
 800fe08:	4603      	mov	r3, r0
 800fe0a:	73fb      	strb	r3, [r7, #15]
 800fe0c:	e01a      	b.n	800fe44 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	68db      	ldr	r3, [r3, #12]
 800fe12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fe1a:	6878      	ldr	r0, [r7, #4]
 800fe1c:	f001 fb10 	bl	8011440 <USB_CoreReset>
 800fe20:	4603      	mov	r3, r0
 800fe22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800fe24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d106      	bne.n	800fe38 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe2e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	639a      	str	r2, [r3, #56]	; 0x38
 800fe36:	e005      	b.n	800fe44 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800fe44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe46:	2b01      	cmp	r3, #1
 800fe48:	d10b      	bne.n	800fe62 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	689b      	ldr	r3, [r3, #8]
 800fe4e:	f043 0206 	orr.w	r2, r3, #6
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	689b      	ldr	r3, [r3, #8]
 800fe5a:	f043 0220 	orr.w	r2, r3, #32
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800fe62:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe64:	4618      	mov	r0, r3
 800fe66:	3710      	adds	r7, #16
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fe6e:	b004      	add	sp, #16
 800fe70:	4770      	bx	lr
	...

0800fe74 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800fe74:	b480      	push	{r7}
 800fe76:	b087      	sub	sp, #28
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	60f8      	str	r0, [r7, #12]
 800fe7c:	60b9      	str	r1, [r7, #8]
 800fe7e:	4613      	mov	r3, r2
 800fe80:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800fe82:	79fb      	ldrb	r3, [r7, #7]
 800fe84:	2b02      	cmp	r3, #2
 800fe86:	d165      	bne.n	800ff54 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800fe88:	68bb      	ldr	r3, [r7, #8]
 800fe8a:	4a41      	ldr	r2, [pc, #260]	; (800ff90 <USB_SetTurnaroundTime+0x11c>)
 800fe8c:	4293      	cmp	r3, r2
 800fe8e:	d906      	bls.n	800fe9e <USB_SetTurnaroundTime+0x2a>
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	4a40      	ldr	r2, [pc, #256]	; (800ff94 <USB_SetTurnaroundTime+0x120>)
 800fe94:	4293      	cmp	r3, r2
 800fe96:	d202      	bcs.n	800fe9e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800fe98:	230f      	movs	r3, #15
 800fe9a:	617b      	str	r3, [r7, #20]
 800fe9c:	e062      	b.n	800ff64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800fe9e:	68bb      	ldr	r3, [r7, #8]
 800fea0:	4a3c      	ldr	r2, [pc, #240]	; (800ff94 <USB_SetTurnaroundTime+0x120>)
 800fea2:	4293      	cmp	r3, r2
 800fea4:	d306      	bcc.n	800feb4 <USB_SetTurnaroundTime+0x40>
 800fea6:	68bb      	ldr	r3, [r7, #8]
 800fea8:	4a3b      	ldr	r2, [pc, #236]	; (800ff98 <USB_SetTurnaroundTime+0x124>)
 800feaa:	4293      	cmp	r3, r2
 800feac:	d202      	bcs.n	800feb4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800feae:	230e      	movs	r3, #14
 800feb0:	617b      	str	r3, [r7, #20]
 800feb2:	e057      	b.n	800ff64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800feb4:	68bb      	ldr	r3, [r7, #8]
 800feb6:	4a38      	ldr	r2, [pc, #224]	; (800ff98 <USB_SetTurnaroundTime+0x124>)
 800feb8:	4293      	cmp	r3, r2
 800feba:	d306      	bcc.n	800feca <USB_SetTurnaroundTime+0x56>
 800febc:	68bb      	ldr	r3, [r7, #8]
 800febe:	4a37      	ldr	r2, [pc, #220]	; (800ff9c <USB_SetTurnaroundTime+0x128>)
 800fec0:	4293      	cmp	r3, r2
 800fec2:	d202      	bcs.n	800feca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800fec4:	230d      	movs	r3, #13
 800fec6:	617b      	str	r3, [r7, #20]
 800fec8:	e04c      	b.n	800ff64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800feca:	68bb      	ldr	r3, [r7, #8]
 800fecc:	4a33      	ldr	r2, [pc, #204]	; (800ff9c <USB_SetTurnaroundTime+0x128>)
 800fece:	4293      	cmp	r3, r2
 800fed0:	d306      	bcc.n	800fee0 <USB_SetTurnaroundTime+0x6c>
 800fed2:	68bb      	ldr	r3, [r7, #8]
 800fed4:	4a32      	ldr	r2, [pc, #200]	; (800ffa0 <USB_SetTurnaroundTime+0x12c>)
 800fed6:	4293      	cmp	r3, r2
 800fed8:	d802      	bhi.n	800fee0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800feda:	230c      	movs	r3, #12
 800fedc:	617b      	str	r3, [r7, #20]
 800fede:	e041      	b.n	800ff64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800fee0:	68bb      	ldr	r3, [r7, #8]
 800fee2:	4a2f      	ldr	r2, [pc, #188]	; (800ffa0 <USB_SetTurnaroundTime+0x12c>)
 800fee4:	4293      	cmp	r3, r2
 800fee6:	d906      	bls.n	800fef6 <USB_SetTurnaroundTime+0x82>
 800fee8:	68bb      	ldr	r3, [r7, #8]
 800feea:	4a2e      	ldr	r2, [pc, #184]	; (800ffa4 <USB_SetTurnaroundTime+0x130>)
 800feec:	4293      	cmp	r3, r2
 800feee:	d802      	bhi.n	800fef6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800fef0:	230b      	movs	r3, #11
 800fef2:	617b      	str	r3, [r7, #20]
 800fef4:	e036      	b.n	800ff64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800fef6:	68bb      	ldr	r3, [r7, #8]
 800fef8:	4a2a      	ldr	r2, [pc, #168]	; (800ffa4 <USB_SetTurnaroundTime+0x130>)
 800fefa:	4293      	cmp	r3, r2
 800fefc:	d906      	bls.n	800ff0c <USB_SetTurnaroundTime+0x98>
 800fefe:	68bb      	ldr	r3, [r7, #8]
 800ff00:	4a29      	ldr	r2, [pc, #164]	; (800ffa8 <USB_SetTurnaroundTime+0x134>)
 800ff02:	4293      	cmp	r3, r2
 800ff04:	d802      	bhi.n	800ff0c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ff06:	230a      	movs	r3, #10
 800ff08:	617b      	str	r3, [r7, #20]
 800ff0a:	e02b      	b.n	800ff64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ff0c:	68bb      	ldr	r3, [r7, #8]
 800ff0e:	4a26      	ldr	r2, [pc, #152]	; (800ffa8 <USB_SetTurnaroundTime+0x134>)
 800ff10:	4293      	cmp	r3, r2
 800ff12:	d906      	bls.n	800ff22 <USB_SetTurnaroundTime+0xae>
 800ff14:	68bb      	ldr	r3, [r7, #8]
 800ff16:	4a25      	ldr	r2, [pc, #148]	; (800ffac <USB_SetTurnaroundTime+0x138>)
 800ff18:	4293      	cmp	r3, r2
 800ff1a:	d202      	bcs.n	800ff22 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ff1c:	2309      	movs	r3, #9
 800ff1e:	617b      	str	r3, [r7, #20]
 800ff20:	e020      	b.n	800ff64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ff22:	68bb      	ldr	r3, [r7, #8]
 800ff24:	4a21      	ldr	r2, [pc, #132]	; (800ffac <USB_SetTurnaroundTime+0x138>)
 800ff26:	4293      	cmp	r3, r2
 800ff28:	d306      	bcc.n	800ff38 <USB_SetTurnaroundTime+0xc4>
 800ff2a:	68bb      	ldr	r3, [r7, #8]
 800ff2c:	4a20      	ldr	r2, [pc, #128]	; (800ffb0 <USB_SetTurnaroundTime+0x13c>)
 800ff2e:	4293      	cmp	r3, r2
 800ff30:	d802      	bhi.n	800ff38 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ff32:	2308      	movs	r3, #8
 800ff34:	617b      	str	r3, [r7, #20]
 800ff36:	e015      	b.n	800ff64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ff38:	68bb      	ldr	r3, [r7, #8]
 800ff3a:	4a1d      	ldr	r2, [pc, #116]	; (800ffb0 <USB_SetTurnaroundTime+0x13c>)
 800ff3c:	4293      	cmp	r3, r2
 800ff3e:	d906      	bls.n	800ff4e <USB_SetTurnaroundTime+0xda>
 800ff40:	68bb      	ldr	r3, [r7, #8]
 800ff42:	4a1c      	ldr	r2, [pc, #112]	; (800ffb4 <USB_SetTurnaroundTime+0x140>)
 800ff44:	4293      	cmp	r3, r2
 800ff46:	d202      	bcs.n	800ff4e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ff48:	2307      	movs	r3, #7
 800ff4a:	617b      	str	r3, [r7, #20]
 800ff4c:	e00a      	b.n	800ff64 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ff4e:	2306      	movs	r3, #6
 800ff50:	617b      	str	r3, [r7, #20]
 800ff52:	e007      	b.n	800ff64 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ff54:	79fb      	ldrb	r3, [r7, #7]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d102      	bne.n	800ff60 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ff5a:	2309      	movs	r3, #9
 800ff5c:	617b      	str	r3, [r7, #20]
 800ff5e:	e001      	b.n	800ff64 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ff60:	2309      	movs	r3, #9
 800ff62:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	68db      	ldr	r3, [r3, #12]
 800ff68:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	68da      	ldr	r2, [r3, #12]
 800ff74:	697b      	ldr	r3, [r7, #20]
 800ff76:	029b      	lsls	r3, r3, #10
 800ff78:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ff7c:	431a      	orrs	r2, r3
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ff82:	2300      	movs	r3, #0
}
 800ff84:	4618      	mov	r0, r3
 800ff86:	371c      	adds	r7, #28
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8e:	4770      	bx	lr
 800ff90:	00d8acbf 	.word	0x00d8acbf
 800ff94:	00e4e1c0 	.word	0x00e4e1c0
 800ff98:	00f42400 	.word	0x00f42400
 800ff9c:	01067380 	.word	0x01067380
 800ffa0:	011a499f 	.word	0x011a499f
 800ffa4:	01312cff 	.word	0x01312cff
 800ffa8:	014ca43f 	.word	0x014ca43f
 800ffac:	016e3600 	.word	0x016e3600
 800ffb0:	01a6ab1f 	.word	0x01a6ab1f
 800ffb4:	01e84800 	.word	0x01e84800

0800ffb8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ffb8:	b480      	push	{r7}
 800ffba:	b083      	sub	sp, #12
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	689b      	ldr	r3, [r3, #8]
 800ffc4:	f043 0201 	orr.w	r2, r3, #1
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ffcc:	2300      	movs	r3, #0
}
 800ffce:	4618      	mov	r0, r3
 800ffd0:	370c      	adds	r7, #12
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd8:	4770      	bx	lr

0800ffda <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ffda:	b480      	push	{r7}
 800ffdc:	b083      	sub	sp, #12
 800ffde:	af00      	add	r7, sp, #0
 800ffe0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	689b      	ldr	r3, [r3, #8]
 800ffe6:	f023 0201 	bic.w	r2, r3, #1
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ffee:	2300      	movs	r3, #0
}
 800fff0:	4618      	mov	r0, r3
 800fff2:	370c      	adds	r7, #12
 800fff4:	46bd      	mov	sp, r7
 800fff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffa:	4770      	bx	lr

0800fffc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b084      	sub	sp, #16
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
 8010004:	460b      	mov	r3, r1
 8010006:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010008:	2300      	movs	r3, #0
 801000a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	68db      	ldr	r3, [r3, #12]
 8010010:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010018:	78fb      	ldrb	r3, [r7, #3]
 801001a:	2b01      	cmp	r3, #1
 801001c:	d115      	bne.n	801004a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	68db      	ldr	r3, [r3, #12]
 8010022:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801002a:	2001      	movs	r0, #1
 801002c:	f7f9 f962 	bl	80092f4 <HAL_Delay>
      ms++;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	3301      	adds	r3, #1
 8010034:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8010036:	6878      	ldr	r0, [r7, #4]
 8010038:	f001 f972 	bl	8011320 <USB_GetMode>
 801003c:	4603      	mov	r3, r0
 801003e:	2b01      	cmp	r3, #1
 8010040:	d01e      	beq.n	8010080 <USB_SetCurrentMode+0x84>
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	2b31      	cmp	r3, #49	; 0x31
 8010046:	d9f0      	bls.n	801002a <USB_SetCurrentMode+0x2e>
 8010048:	e01a      	b.n	8010080 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801004a:	78fb      	ldrb	r3, [r7, #3]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d115      	bne.n	801007c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	68db      	ldr	r3, [r3, #12]
 8010054:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801005c:	2001      	movs	r0, #1
 801005e:	f7f9 f949 	bl	80092f4 <HAL_Delay>
      ms++;
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	3301      	adds	r3, #1
 8010066:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8010068:	6878      	ldr	r0, [r7, #4]
 801006a:	f001 f959 	bl	8011320 <USB_GetMode>
 801006e:	4603      	mov	r3, r0
 8010070:	2b00      	cmp	r3, #0
 8010072:	d005      	beq.n	8010080 <USB_SetCurrentMode+0x84>
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	2b31      	cmp	r3, #49	; 0x31
 8010078:	d9f0      	bls.n	801005c <USB_SetCurrentMode+0x60>
 801007a:	e001      	b.n	8010080 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801007c:	2301      	movs	r3, #1
 801007e:	e005      	b.n	801008c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	2b32      	cmp	r3, #50	; 0x32
 8010084:	d101      	bne.n	801008a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8010086:	2301      	movs	r3, #1
 8010088:	e000      	b.n	801008c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801008a:	2300      	movs	r3, #0
}
 801008c:	4618      	mov	r0, r3
 801008e:	3710      	adds	r7, #16
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}

08010094 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010094:	b084      	sub	sp, #16
 8010096:	b580      	push	{r7, lr}
 8010098:	b086      	sub	sp, #24
 801009a:	af00      	add	r7, sp, #0
 801009c:	6078      	str	r0, [r7, #4]
 801009e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80100a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80100a6:	2300      	movs	r3, #0
 80100a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80100ae:	2300      	movs	r3, #0
 80100b0:	613b      	str	r3, [r7, #16]
 80100b2:	e009      	b.n	80100c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80100b4:	687a      	ldr	r2, [r7, #4]
 80100b6:	693b      	ldr	r3, [r7, #16]
 80100b8:	3340      	adds	r3, #64	; 0x40
 80100ba:	009b      	lsls	r3, r3, #2
 80100bc:	4413      	add	r3, r2
 80100be:	2200      	movs	r2, #0
 80100c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80100c2:	693b      	ldr	r3, [r7, #16]
 80100c4:	3301      	adds	r3, #1
 80100c6:	613b      	str	r3, [r7, #16]
 80100c8:	693b      	ldr	r3, [r7, #16]
 80100ca:	2b0e      	cmp	r3, #14
 80100cc:	d9f2      	bls.n	80100b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80100ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d11c      	bne.n	801010e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100da:	685b      	ldr	r3, [r3, #4]
 80100dc:	68fa      	ldr	r2, [r7, #12]
 80100de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80100e2:	f043 0302 	orr.w	r3, r3, #2
 80100e6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100f8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010104:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	639a      	str	r2, [r3, #56]	; 0x38
 801010c:	e00b      	b.n	8010126 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010112:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801011e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801012c:	461a      	mov	r2, r3
 801012e:	2300      	movs	r3, #0
 8010130:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010138:	4619      	mov	r1, r3
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010140:	461a      	mov	r2, r3
 8010142:	680b      	ldr	r3, [r1, #0]
 8010144:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010148:	2b01      	cmp	r3, #1
 801014a:	d10c      	bne.n	8010166 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801014c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801014e:	2b00      	cmp	r3, #0
 8010150:	d104      	bne.n	801015c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8010152:	2100      	movs	r1, #0
 8010154:	6878      	ldr	r0, [r7, #4]
 8010156:	f000 f945 	bl	80103e4 <USB_SetDevSpeed>
 801015a:	e008      	b.n	801016e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801015c:	2101      	movs	r1, #1
 801015e:	6878      	ldr	r0, [r7, #4]
 8010160:	f000 f940 	bl	80103e4 <USB_SetDevSpeed>
 8010164:	e003      	b.n	801016e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010166:	2103      	movs	r1, #3
 8010168:	6878      	ldr	r0, [r7, #4]
 801016a:	f000 f93b 	bl	80103e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801016e:	2110      	movs	r1, #16
 8010170:	6878      	ldr	r0, [r7, #4]
 8010172:	f000 f8f3 	bl	801035c <USB_FlushTxFifo>
 8010176:	4603      	mov	r3, r0
 8010178:	2b00      	cmp	r3, #0
 801017a:	d001      	beq.n	8010180 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 801017c:	2301      	movs	r3, #1
 801017e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010180:	6878      	ldr	r0, [r7, #4]
 8010182:	f000 f90f 	bl	80103a4 <USB_FlushRxFifo>
 8010186:	4603      	mov	r3, r0
 8010188:	2b00      	cmp	r3, #0
 801018a:	d001      	beq.n	8010190 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 801018c:	2301      	movs	r3, #1
 801018e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010196:	461a      	mov	r2, r3
 8010198:	2300      	movs	r3, #0
 801019a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101a2:	461a      	mov	r2, r3
 80101a4:	2300      	movs	r3, #0
 80101a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101ae:	461a      	mov	r2, r3
 80101b0:	2300      	movs	r3, #0
 80101b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80101b4:	2300      	movs	r3, #0
 80101b6:	613b      	str	r3, [r7, #16]
 80101b8:	e043      	b.n	8010242 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80101ba:	693b      	ldr	r3, [r7, #16]
 80101bc:	015a      	lsls	r2, r3, #5
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	4413      	add	r3, r2
 80101c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80101cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80101d0:	d118      	bne.n	8010204 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80101d2:	693b      	ldr	r3, [r7, #16]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d10a      	bne.n	80101ee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80101d8:	693b      	ldr	r3, [r7, #16]
 80101da:	015a      	lsls	r2, r3, #5
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	4413      	add	r3, r2
 80101e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101e4:	461a      	mov	r2, r3
 80101e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80101ea:	6013      	str	r3, [r2, #0]
 80101ec:	e013      	b.n	8010216 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80101ee:	693b      	ldr	r3, [r7, #16]
 80101f0:	015a      	lsls	r2, r3, #5
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	4413      	add	r3, r2
 80101f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101fa:	461a      	mov	r2, r3
 80101fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010200:	6013      	str	r3, [r2, #0]
 8010202:	e008      	b.n	8010216 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010204:	693b      	ldr	r3, [r7, #16]
 8010206:	015a      	lsls	r2, r3, #5
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	4413      	add	r3, r2
 801020c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010210:	461a      	mov	r2, r3
 8010212:	2300      	movs	r3, #0
 8010214:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010216:	693b      	ldr	r3, [r7, #16]
 8010218:	015a      	lsls	r2, r3, #5
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	4413      	add	r3, r2
 801021e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010222:	461a      	mov	r2, r3
 8010224:	2300      	movs	r3, #0
 8010226:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010228:	693b      	ldr	r3, [r7, #16]
 801022a:	015a      	lsls	r2, r3, #5
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	4413      	add	r3, r2
 8010230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010234:	461a      	mov	r2, r3
 8010236:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801023a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801023c:	693b      	ldr	r3, [r7, #16]
 801023e:	3301      	adds	r3, #1
 8010240:	613b      	str	r3, [r7, #16]
 8010242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010244:	693a      	ldr	r2, [r7, #16]
 8010246:	429a      	cmp	r2, r3
 8010248:	d3b7      	bcc.n	80101ba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801024a:	2300      	movs	r3, #0
 801024c:	613b      	str	r3, [r7, #16]
 801024e:	e043      	b.n	80102d8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010250:	693b      	ldr	r3, [r7, #16]
 8010252:	015a      	lsls	r2, r3, #5
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	4413      	add	r3, r2
 8010258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010262:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010266:	d118      	bne.n	801029a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8010268:	693b      	ldr	r3, [r7, #16]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d10a      	bne.n	8010284 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801026e:	693b      	ldr	r3, [r7, #16]
 8010270:	015a      	lsls	r2, r3, #5
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	4413      	add	r3, r2
 8010276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801027a:	461a      	mov	r2, r3
 801027c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010280:	6013      	str	r3, [r2, #0]
 8010282:	e013      	b.n	80102ac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010284:	693b      	ldr	r3, [r7, #16]
 8010286:	015a      	lsls	r2, r3, #5
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	4413      	add	r3, r2
 801028c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010290:	461a      	mov	r2, r3
 8010292:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010296:	6013      	str	r3, [r2, #0]
 8010298:	e008      	b.n	80102ac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801029a:	693b      	ldr	r3, [r7, #16]
 801029c:	015a      	lsls	r2, r3, #5
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	4413      	add	r3, r2
 80102a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102a6:	461a      	mov	r2, r3
 80102a8:	2300      	movs	r3, #0
 80102aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80102ac:	693b      	ldr	r3, [r7, #16]
 80102ae:	015a      	lsls	r2, r3, #5
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	4413      	add	r3, r2
 80102b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102b8:	461a      	mov	r2, r3
 80102ba:	2300      	movs	r3, #0
 80102bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80102be:	693b      	ldr	r3, [r7, #16]
 80102c0:	015a      	lsls	r2, r3, #5
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	4413      	add	r3, r2
 80102c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102ca:	461a      	mov	r2, r3
 80102cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80102d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80102d2:	693b      	ldr	r3, [r7, #16]
 80102d4:	3301      	adds	r3, #1
 80102d6:	613b      	str	r3, [r7, #16]
 80102d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102da:	693a      	ldr	r2, [r7, #16]
 80102dc:	429a      	cmp	r2, r3
 80102de:	d3b7      	bcc.n	8010250 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102e6:	691b      	ldr	r3, [r3, #16]
 80102e8:	68fa      	ldr	r2, [r7, #12]
 80102ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80102ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80102f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2200      	movs	r2, #0
 80102f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8010300:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010304:	2b00      	cmp	r3, #0
 8010306:	d105      	bne.n	8010314 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	699b      	ldr	r3, [r3, #24]
 801030c:	f043 0210 	orr.w	r2, r3, #16
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	699a      	ldr	r2, [r3, #24]
 8010318:	4b0f      	ldr	r3, [pc, #60]	; (8010358 <USB_DevInit+0x2c4>)
 801031a:	4313      	orrs	r3, r2
 801031c:	687a      	ldr	r2, [r7, #4]
 801031e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010322:	2b00      	cmp	r3, #0
 8010324:	d005      	beq.n	8010332 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	699b      	ldr	r3, [r3, #24]
 801032a:	f043 0208 	orr.w	r2, r3, #8
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8010332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010334:	2b01      	cmp	r3, #1
 8010336:	d107      	bne.n	8010348 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	699b      	ldr	r3, [r3, #24]
 801033c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010340:	f043 0304 	orr.w	r3, r3, #4
 8010344:	687a      	ldr	r2, [r7, #4]
 8010346:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010348:	7dfb      	ldrb	r3, [r7, #23]
}
 801034a:	4618      	mov	r0, r3
 801034c:	3718      	adds	r7, #24
 801034e:	46bd      	mov	sp, r7
 8010350:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010354:	b004      	add	sp, #16
 8010356:	4770      	bx	lr
 8010358:	803c3800 	.word	0x803c3800

0801035c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801035c:	b480      	push	{r7}
 801035e:	b085      	sub	sp, #20
 8010360:	af00      	add	r7, sp, #0
 8010362:	6078      	str	r0, [r7, #4]
 8010364:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010366:	2300      	movs	r3, #0
 8010368:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	019b      	lsls	r3, r3, #6
 801036e:	f043 0220 	orr.w	r2, r3, #32
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	3301      	adds	r3, #1
 801037a:	60fb      	str	r3, [r7, #12]
 801037c:	4a08      	ldr	r2, [pc, #32]	; (80103a0 <USB_FlushTxFifo+0x44>)
 801037e:	4293      	cmp	r3, r2
 8010380:	d901      	bls.n	8010386 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8010382:	2303      	movs	r3, #3
 8010384:	e006      	b.n	8010394 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	691b      	ldr	r3, [r3, #16]
 801038a:	f003 0320 	and.w	r3, r3, #32
 801038e:	2b20      	cmp	r3, #32
 8010390:	d0f1      	beq.n	8010376 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8010392:	2300      	movs	r3, #0
}
 8010394:	4618      	mov	r0, r3
 8010396:	3714      	adds	r7, #20
 8010398:	46bd      	mov	sp, r7
 801039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039e:	4770      	bx	lr
 80103a0:	00030d40 	.word	0x00030d40

080103a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80103a4:	b480      	push	{r7}
 80103a6:	b085      	sub	sp, #20
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80103ac:	2300      	movs	r3, #0
 80103ae:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	2210      	movs	r2, #16
 80103b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	3301      	adds	r3, #1
 80103ba:	60fb      	str	r3, [r7, #12]
 80103bc:	4a08      	ldr	r2, [pc, #32]	; (80103e0 <USB_FlushRxFifo+0x3c>)
 80103be:	4293      	cmp	r3, r2
 80103c0:	d901      	bls.n	80103c6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80103c2:	2303      	movs	r3, #3
 80103c4:	e006      	b.n	80103d4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	691b      	ldr	r3, [r3, #16]
 80103ca:	f003 0310 	and.w	r3, r3, #16
 80103ce:	2b10      	cmp	r3, #16
 80103d0:	d0f1      	beq.n	80103b6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80103d2:	2300      	movs	r3, #0
}
 80103d4:	4618      	mov	r0, r3
 80103d6:	3714      	adds	r7, #20
 80103d8:	46bd      	mov	sp, r7
 80103da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103de:	4770      	bx	lr
 80103e0:	00030d40 	.word	0x00030d40

080103e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80103e4:	b480      	push	{r7}
 80103e6:	b085      	sub	sp, #20
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
 80103ec:	460b      	mov	r3, r1
 80103ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103fa:	681a      	ldr	r2, [r3, #0]
 80103fc:	78fb      	ldrb	r3, [r7, #3]
 80103fe:	68f9      	ldr	r1, [r7, #12]
 8010400:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010404:	4313      	orrs	r3, r2
 8010406:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010408:	2300      	movs	r3, #0
}
 801040a:	4618      	mov	r0, r3
 801040c:	3714      	adds	r7, #20
 801040e:	46bd      	mov	sp, r7
 8010410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010414:	4770      	bx	lr

08010416 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8010416:	b480      	push	{r7}
 8010418:	b087      	sub	sp, #28
 801041a:	af00      	add	r7, sp, #0
 801041c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8010422:	693b      	ldr	r3, [r7, #16]
 8010424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010428:	689b      	ldr	r3, [r3, #8]
 801042a:	f003 0306 	and.w	r3, r3, #6
 801042e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d102      	bne.n	801043c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8010436:	2300      	movs	r3, #0
 8010438:	75fb      	strb	r3, [r7, #23]
 801043a:	e00a      	b.n	8010452 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	2b02      	cmp	r3, #2
 8010440:	d002      	beq.n	8010448 <USB_GetDevSpeed+0x32>
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	2b06      	cmp	r3, #6
 8010446:	d102      	bne.n	801044e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8010448:	2302      	movs	r3, #2
 801044a:	75fb      	strb	r3, [r7, #23]
 801044c:	e001      	b.n	8010452 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801044e:	230f      	movs	r3, #15
 8010450:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8010452:	7dfb      	ldrb	r3, [r7, #23]
}
 8010454:	4618      	mov	r0, r3
 8010456:	371c      	adds	r7, #28
 8010458:	46bd      	mov	sp, r7
 801045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045e:	4770      	bx	lr

08010460 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010460:	b480      	push	{r7}
 8010462:	b085      	sub	sp, #20
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
 8010468:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801046e:	683b      	ldr	r3, [r7, #0]
 8010470:	781b      	ldrb	r3, [r3, #0]
 8010472:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	785b      	ldrb	r3, [r3, #1]
 8010478:	2b01      	cmp	r3, #1
 801047a:	d13a      	bne.n	80104f2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010482:	69da      	ldr	r2, [r3, #28]
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	781b      	ldrb	r3, [r3, #0]
 8010488:	f003 030f 	and.w	r3, r3, #15
 801048c:	2101      	movs	r1, #1
 801048e:	fa01 f303 	lsl.w	r3, r1, r3
 8010492:	b29b      	uxth	r3, r3
 8010494:	68f9      	ldr	r1, [r7, #12]
 8010496:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801049a:	4313      	orrs	r3, r2
 801049c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801049e:	68bb      	ldr	r3, [r7, #8]
 80104a0:	015a      	lsls	r2, r3, #5
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	4413      	add	r3, r2
 80104a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d155      	bne.n	8010560 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80104b4:	68bb      	ldr	r3, [r7, #8]
 80104b6:	015a      	lsls	r2, r3, #5
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	4413      	add	r3, r2
 80104bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104c0:	681a      	ldr	r2, [r3, #0]
 80104c2:	683b      	ldr	r3, [r7, #0]
 80104c4:	689b      	ldr	r3, [r3, #8]
 80104c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80104ca:	683b      	ldr	r3, [r7, #0]
 80104cc:	78db      	ldrb	r3, [r3, #3]
 80104ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80104d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80104d2:	68bb      	ldr	r3, [r7, #8]
 80104d4:	059b      	lsls	r3, r3, #22
 80104d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80104d8:	4313      	orrs	r3, r2
 80104da:	68ba      	ldr	r2, [r7, #8]
 80104dc:	0151      	lsls	r1, r2, #5
 80104de:	68fa      	ldr	r2, [r7, #12]
 80104e0:	440a      	add	r2, r1
 80104e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80104ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80104ee:	6013      	str	r3, [r2, #0]
 80104f0:	e036      	b.n	8010560 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104f8:	69da      	ldr	r2, [r3, #28]
 80104fa:	683b      	ldr	r3, [r7, #0]
 80104fc:	781b      	ldrb	r3, [r3, #0]
 80104fe:	f003 030f 	and.w	r3, r3, #15
 8010502:	2101      	movs	r1, #1
 8010504:	fa01 f303 	lsl.w	r3, r1, r3
 8010508:	041b      	lsls	r3, r3, #16
 801050a:	68f9      	ldr	r1, [r7, #12]
 801050c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010510:	4313      	orrs	r3, r2
 8010512:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	015a      	lsls	r2, r3, #5
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	4413      	add	r3, r2
 801051c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010526:	2b00      	cmp	r3, #0
 8010528:	d11a      	bne.n	8010560 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801052a:	68bb      	ldr	r3, [r7, #8]
 801052c:	015a      	lsls	r2, r3, #5
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	4413      	add	r3, r2
 8010532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010536:	681a      	ldr	r2, [r3, #0]
 8010538:	683b      	ldr	r3, [r7, #0]
 801053a:	689b      	ldr	r3, [r3, #8]
 801053c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8010540:	683b      	ldr	r3, [r7, #0]
 8010542:	78db      	ldrb	r3, [r3, #3]
 8010544:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010546:	430b      	orrs	r3, r1
 8010548:	4313      	orrs	r3, r2
 801054a:	68ba      	ldr	r2, [r7, #8]
 801054c:	0151      	lsls	r1, r2, #5
 801054e:	68fa      	ldr	r2, [r7, #12]
 8010550:	440a      	add	r2, r1
 8010552:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801055a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801055e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8010560:	2300      	movs	r3, #0
}
 8010562:	4618      	mov	r0, r3
 8010564:	3714      	adds	r7, #20
 8010566:	46bd      	mov	sp, r7
 8010568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056c:	4770      	bx	lr
	...

08010570 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010570:	b480      	push	{r7}
 8010572:	b085      	sub	sp, #20
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
 8010578:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801057e:	683b      	ldr	r3, [r7, #0]
 8010580:	781b      	ldrb	r3, [r3, #0]
 8010582:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8010584:	683b      	ldr	r3, [r7, #0]
 8010586:	785b      	ldrb	r3, [r3, #1]
 8010588:	2b01      	cmp	r3, #1
 801058a:	d161      	bne.n	8010650 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801058c:	68bb      	ldr	r3, [r7, #8]
 801058e:	015a      	lsls	r2, r3, #5
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	4413      	add	r3, r2
 8010594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801059e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80105a2:	d11f      	bne.n	80105e4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80105a4:	68bb      	ldr	r3, [r7, #8]
 80105a6:	015a      	lsls	r2, r3, #5
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	4413      	add	r3, r2
 80105ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	68ba      	ldr	r2, [r7, #8]
 80105b4:	0151      	lsls	r1, r2, #5
 80105b6:	68fa      	ldr	r2, [r7, #12]
 80105b8:	440a      	add	r2, r1
 80105ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80105c2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	015a      	lsls	r2, r3, #5
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	4413      	add	r3, r2
 80105cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	68ba      	ldr	r2, [r7, #8]
 80105d4:	0151      	lsls	r1, r2, #5
 80105d6:	68fa      	ldr	r2, [r7, #12]
 80105d8:	440a      	add	r2, r1
 80105da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80105e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	781b      	ldrb	r3, [r3, #0]
 80105f0:	f003 030f 	and.w	r3, r3, #15
 80105f4:	2101      	movs	r1, #1
 80105f6:	fa01 f303 	lsl.w	r3, r1, r3
 80105fa:	b29b      	uxth	r3, r3
 80105fc:	43db      	mvns	r3, r3
 80105fe:	68f9      	ldr	r1, [r7, #12]
 8010600:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010604:	4013      	ands	r3, r2
 8010606:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801060e:	69da      	ldr	r2, [r3, #28]
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	781b      	ldrb	r3, [r3, #0]
 8010614:	f003 030f 	and.w	r3, r3, #15
 8010618:	2101      	movs	r1, #1
 801061a:	fa01 f303 	lsl.w	r3, r1, r3
 801061e:	b29b      	uxth	r3, r3
 8010620:	43db      	mvns	r3, r3
 8010622:	68f9      	ldr	r1, [r7, #12]
 8010624:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010628:	4013      	ands	r3, r2
 801062a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801062c:	68bb      	ldr	r3, [r7, #8]
 801062e:	015a      	lsls	r2, r3, #5
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	4413      	add	r3, r2
 8010634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010638:	681a      	ldr	r2, [r3, #0]
 801063a:	68bb      	ldr	r3, [r7, #8]
 801063c:	0159      	lsls	r1, r3, #5
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	440b      	add	r3, r1
 8010642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010646:	4619      	mov	r1, r3
 8010648:	4b35      	ldr	r3, [pc, #212]	; (8010720 <USB_DeactivateEndpoint+0x1b0>)
 801064a:	4013      	ands	r3, r2
 801064c:	600b      	str	r3, [r1, #0]
 801064e:	e060      	b.n	8010712 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010650:	68bb      	ldr	r3, [r7, #8]
 8010652:	015a      	lsls	r2, r3, #5
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	4413      	add	r3, r2
 8010658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010662:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010666:	d11f      	bne.n	80106a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8010668:	68bb      	ldr	r3, [r7, #8]
 801066a:	015a      	lsls	r2, r3, #5
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	4413      	add	r3, r2
 8010670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	68ba      	ldr	r2, [r7, #8]
 8010678:	0151      	lsls	r1, r2, #5
 801067a:	68fa      	ldr	r2, [r7, #12]
 801067c:	440a      	add	r2, r1
 801067e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010682:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010686:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8010688:	68bb      	ldr	r3, [r7, #8]
 801068a:	015a      	lsls	r2, r3, #5
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	4413      	add	r3, r2
 8010690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	68ba      	ldr	r2, [r7, #8]
 8010698:	0151      	lsls	r1, r2, #5
 801069a:	68fa      	ldr	r2, [r7, #12]
 801069c:	440a      	add	r2, r1
 801069e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80106a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80106a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80106ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80106b0:	683b      	ldr	r3, [r7, #0]
 80106b2:	781b      	ldrb	r3, [r3, #0]
 80106b4:	f003 030f 	and.w	r3, r3, #15
 80106b8:	2101      	movs	r1, #1
 80106ba:	fa01 f303 	lsl.w	r3, r1, r3
 80106be:	041b      	lsls	r3, r3, #16
 80106c0:	43db      	mvns	r3, r3
 80106c2:	68f9      	ldr	r1, [r7, #12]
 80106c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80106c8:	4013      	ands	r3, r2
 80106ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80106d2:	69da      	ldr	r2, [r3, #28]
 80106d4:	683b      	ldr	r3, [r7, #0]
 80106d6:	781b      	ldrb	r3, [r3, #0]
 80106d8:	f003 030f 	and.w	r3, r3, #15
 80106dc:	2101      	movs	r1, #1
 80106de:	fa01 f303 	lsl.w	r3, r1, r3
 80106e2:	041b      	lsls	r3, r3, #16
 80106e4:	43db      	mvns	r3, r3
 80106e6:	68f9      	ldr	r1, [r7, #12]
 80106e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80106ec:	4013      	ands	r3, r2
 80106ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80106f0:	68bb      	ldr	r3, [r7, #8]
 80106f2:	015a      	lsls	r2, r3, #5
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	4413      	add	r3, r2
 80106f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106fc:	681a      	ldr	r2, [r3, #0]
 80106fe:	68bb      	ldr	r3, [r7, #8]
 8010700:	0159      	lsls	r1, r3, #5
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	440b      	add	r3, r1
 8010706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801070a:	4619      	mov	r1, r3
 801070c:	4b05      	ldr	r3, [pc, #20]	; (8010724 <USB_DeactivateEndpoint+0x1b4>)
 801070e:	4013      	ands	r3, r2
 8010710:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8010712:	2300      	movs	r3, #0
}
 8010714:	4618      	mov	r0, r3
 8010716:	3714      	adds	r7, #20
 8010718:	46bd      	mov	sp, r7
 801071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071e:	4770      	bx	lr
 8010720:	ec337800 	.word	0xec337800
 8010724:	eff37800 	.word	0xeff37800

08010728 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010728:	b580      	push	{r7, lr}
 801072a:	b08a      	sub	sp, #40	; 0x28
 801072c:	af02      	add	r7, sp, #8
 801072e:	60f8      	str	r0, [r7, #12]
 8010730:	60b9      	str	r1, [r7, #8]
 8010732:	4613      	mov	r3, r2
 8010734:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801073a:	68bb      	ldr	r3, [r7, #8]
 801073c:	781b      	ldrb	r3, [r3, #0]
 801073e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010740:	68bb      	ldr	r3, [r7, #8]
 8010742:	785b      	ldrb	r3, [r3, #1]
 8010744:	2b01      	cmp	r3, #1
 8010746:	f040 815c 	bne.w	8010a02 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801074a:	68bb      	ldr	r3, [r7, #8]
 801074c:	695b      	ldr	r3, [r3, #20]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d132      	bne.n	80107b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010752:	69bb      	ldr	r3, [r7, #24]
 8010754:	015a      	lsls	r2, r3, #5
 8010756:	69fb      	ldr	r3, [r7, #28]
 8010758:	4413      	add	r3, r2
 801075a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801075e:	691b      	ldr	r3, [r3, #16]
 8010760:	69ba      	ldr	r2, [r7, #24]
 8010762:	0151      	lsls	r1, r2, #5
 8010764:	69fa      	ldr	r2, [r7, #28]
 8010766:	440a      	add	r2, r1
 8010768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801076c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010770:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010774:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010776:	69bb      	ldr	r3, [r7, #24]
 8010778:	015a      	lsls	r2, r3, #5
 801077a:	69fb      	ldr	r3, [r7, #28]
 801077c:	4413      	add	r3, r2
 801077e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010782:	691b      	ldr	r3, [r3, #16]
 8010784:	69ba      	ldr	r2, [r7, #24]
 8010786:	0151      	lsls	r1, r2, #5
 8010788:	69fa      	ldr	r2, [r7, #28]
 801078a:	440a      	add	r2, r1
 801078c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010790:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010794:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010796:	69bb      	ldr	r3, [r7, #24]
 8010798:	015a      	lsls	r2, r3, #5
 801079a:	69fb      	ldr	r3, [r7, #28]
 801079c:	4413      	add	r3, r2
 801079e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107a2:	691b      	ldr	r3, [r3, #16]
 80107a4:	69ba      	ldr	r2, [r7, #24]
 80107a6:	0151      	lsls	r1, r2, #5
 80107a8:	69fa      	ldr	r2, [r7, #28]
 80107aa:	440a      	add	r2, r1
 80107ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107b0:	0cdb      	lsrs	r3, r3, #19
 80107b2:	04db      	lsls	r3, r3, #19
 80107b4:	6113      	str	r3, [r2, #16]
 80107b6:	e074      	b.n	80108a2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80107b8:	69bb      	ldr	r3, [r7, #24]
 80107ba:	015a      	lsls	r2, r3, #5
 80107bc:	69fb      	ldr	r3, [r7, #28]
 80107be:	4413      	add	r3, r2
 80107c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107c4:	691b      	ldr	r3, [r3, #16]
 80107c6:	69ba      	ldr	r2, [r7, #24]
 80107c8:	0151      	lsls	r1, r2, #5
 80107ca:	69fa      	ldr	r2, [r7, #28]
 80107cc:	440a      	add	r2, r1
 80107ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107d2:	0cdb      	lsrs	r3, r3, #19
 80107d4:	04db      	lsls	r3, r3, #19
 80107d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80107d8:	69bb      	ldr	r3, [r7, #24]
 80107da:	015a      	lsls	r2, r3, #5
 80107dc:	69fb      	ldr	r3, [r7, #28]
 80107de:	4413      	add	r3, r2
 80107e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107e4:	691b      	ldr	r3, [r3, #16]
 80107e6:	69ba      	ldr	r2, [r7, #24]
 80107e8:	0151      	lsls	r1, r2, #5
 80107ea:	69fa      	ldr	r2, [r7, #28]
 80107ec:	440a      	add	r2, r1
 80107ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80107f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80107fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80107fc:	69bb      	ldr	r3, [r7, #24]
 80107fe:	015a      	lsls	r2, r3, #5
 8010800:	69fb      	ldr	r3, [r7, #28]
 8010802:	4413      	add	r3, r2
 8010804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010808:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801080a:	68bb      	ldr	r3, [r7, #8]
 801080c:	6959      	ldr	r1, [r3, #20]
 801080e:	68bb      	ldr	r3, [r7, #8]
 8010810:	689b      	ldr	r3, [r3, #8]
 8010812:	440b      	add	r3, r1
 8010814:	1e59      	subs	r1, r3, #1
 8010816:	68bb      	ldr	r3, [r7, #8]
 8010818:	689b      	ldr	r3, [r3, #8]
 801081a:	fbb1 f3f3 	udiv	r3, r1, r3
 801081e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8010820:	4b9d      	ldr	r3, [pc, #628]	; (8010a98 <USB_EPStartXfer+0x370>)
 8010822:	400b      	ands	r3, r1
 8010824:	69b9      	ldr	r1, [r7, #24]
 8010826:	0148      	lsls	r0, r1, #5
 8010828:	69f9      	ldr	r1, [r7, #28]
 801082a:	4401      	add	r1, r0
 801082c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010830:	4313      	orrs	r3, r2
 8010832:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010834:	69bb      	ldr	r3, [r7, #24]
 8010836:	015a      	lsls	r2, r3, #5
 8010838:	69fb      	ldr	r3, [r7, #28]
 801083a:	4413      	add	r3, r2
 801083c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010840:	691a      	ldr	r2, [r3, #16]
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	695b      	ldr	r3, [r3, #20]
 8010846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801084a:	69b9      	ldr	r1, [r7, #24]
 801084c:	0148      	lsls	r0, r1, #5
 801084e:	69f9      	ldr	r1, [r7, #28]
 8010850:	4401      	add	r1, r0
 8010852:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010856:	4313      	orrs	r3, r2
 8010858:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801085a:	68bb      	ldr	r3, [r7, #8]
 801085c:	78db      	ldrb	r3, [r3, #3]
 801085e:	2b01      	cmp	r3, #1
 8010860:	d11f      	bne.n	80108a2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8010862:	69bb      	ldr	r3, [r7, #24]
 8010864:	015a      	lsls	r2, r3, #5
 8010866:	69fb      	ldr	r3, [r7, #28]
 8010868:	4413      	add	r3, r2
 801086a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801086e:	691b      	ldr	r3, [r3, #16]
 8010870:	69ba      	ldr	r2, [r7, #24]
 8010872:	0151      	lsls	r1, r2, #5
 8010874:	69fa      	ldr	r2, [r7, #28]
 8010876:	440a      	add	r2, r1
 8010878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801087c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8010880:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8010882:	69bb      	ldr	r3, [r7, #24]
 8010884:	015a      	lsls	r2, r3, #5
 8010886:	69fb      	ldr	r3, [r7, #28]
 8010888:	4413      	add	r3, r2
 801088a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801088e:	691b      	ldr	r3, [r3, #16]
 8010890:	69ba      	ldr	r2, [r7, #24]
 8010892:	0151      	lsls	r1, r2, #5
 8010894:	69fa      	ldr	r2, [r7, #28]
 8010896:	440a      	add	r2, r1
 8010898:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801089c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80108a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80108a2:	79fb      	ldrb	r3, [r7, #7]
 80108a4:	2b01      	cmp	r3, #1
 80108a6:	d14b      	bne.n	8010940 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80108a8:	68bb      	ldr	r3, [r7, #8]
 80108aa:	691b      	ldr	r3, [r3, #16]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d009      	beq.n	80108c4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80108b0:	69bb      	ldr	r3, [r7, #24]
 80108b2:	015a      	lsls	r2, r3, #5
 80108b4:	69fb      	ldr	r3, [r7, #28]
 80108b6:	4413      	add	r3, r2
 80108b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108bc:	461a      	mov	r2, r3
 80108be:	68bb      	ldr	r3, [r7, #8]
 80108c0:	691b      	ldr	r3, [r3, #16]
 80108c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80108c4:	68bb      	ldr	r3, [r7, #8]
 80108c6:	78db      	ldrb	r3, [r3, #3]
 80108c8:	2b01      	cmp	r3, #1
 80108ca:	d128      	bne.n	801091e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80108cc:	69fb      	ldr	r3, [r7, #28]
 80108ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80108d2:	689b      	ldr	r3, [r3, #8]
 80108d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d110      	bne.n	80108fe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80108dc:	69bb      	ldr	r3, [r7, #24]
 80108de:	015a      	lsls	r2, r3, #5
 80108e0:	69fb      	ldr	r3, [r7, #28]
 80108e2:	4413      	add	r3, r2
 80108e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	69ba      	ldr	r2, [r7, #24]
 80108ec:	0151      	lsls	r1, r2, #5
 80108ee:	69fa      	ldr	r2, [r7, #28]
 80108f0:	440a      	add	r2, r1
 80108f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80108fa:	6013      	str	r3, [r2, #0]
 80108fc:	e00f      	b.n	801091e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80108fe:	69bb      	ldr	r3, [r7, #24]
 8010900:	015a      	lsls	r2, r3, #5
 8010902:	69fb      	ldr	r3, [r7, #28]
 8010904:	4413      	add	r3, r2
 8010906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	69ba      	ldr	r2, [r7, #24]
 801090e:	0151      	lsls	r1, r2, #5
 8010910:	69fa      	ldr	r2, [r7, #28]
 8010912:	440a      	add	r2, r1
 8010914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801091c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801091e:	69bb      	ldr	r3, [r7, #24]
 8010920:	015a      	lsls	r2, r3, #5
 8010922:	69fb      	ldr	r3, [r7, #28]
 8010924:	4413      	add	r3, r2
 8010926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	69ba      	ldr	r2, [r7, #24]
 801092e:	0151      	lsls	r1, r2, #5
 8010930:	69fa      	ldr	r2, [r7, #28]
 8010932:	440a      	add	r2, r1
 8010934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010938:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801093c:	6013      	str	r3, [r2, #0]
 801093e:	e12f      	b.n	8010ba0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010940:	69bb      	ldr	r3, [r7, #24]
 8010942:	015a      	lsls	r2, r3, #5
 8010944:	69fb      	ldr	r3, [r7, #28]
 8010946:	4413      	add	r3, r2
 8010948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	69ba      	ldr	r2, [r7, #24]
 8010950:	0151      	lsls	r1, r2, #5
 8010952:	69fa      	ldr	r2, [r7, #28]
 8010954:	440a      	add	r2, r1
 8010956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801095a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801095e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010960:	68bb      	ldr	r3, [r7, #8]
 8010962:	78db      	ldrb	r3, [r3, #3]
 8010964:	2b01      	cmp	r3, #1
 8010966:	d015      	beq.n	8010994 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8010968:	68bb      	ldr	r3, [r7, #8]
 801096a:	695b      	ldr	r3, [r3, #20]
 801096c:	2b00      	cmp	r3, #0
 801096e:	f000 8117 	beq.w	8010ba0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010972:	69fb      	ldr	r3, [r7, #28]
 8010974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	781b      	ldrb	r3, [r3, #0]
 801097e:	f003 030f 	and.w	r3, r3, #15
 8010982:	2101      	movs	r1, #1
 8010984:	fa01 f303 	lsl.w	r3, r1, r3
 8010988:	69f9      	ldr	r1, [r7, #28]
 801098a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801098e:	4313      	orrs	r3, r2
 8010990:	634b      	str	r3, [r1, #52]	; 0x34
 8010992:	e105      	b.n	8010ba0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010994:	69fb      	ldr	r3, [r7, #28]
 8010996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801099a:	689b      	ldr	r3, [r3, #8]
 801099c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d110      	bne.n	80109c6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80109a4:	69bb      	ldr	r3, [r7, #24]
 80109a6:	015a      	lsls	r2, r3, #5
 80109a8:	69fb      	ldr	r3, [r7, #28]
 80109aa:	4413      	add	r3, r2
 80109ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	69ba      	ldr	r2, [r7, #24]
 80109b4:	0151      	lsls	r1, r2, #5
 80109b6:	69fa      	ldr	r2, [r7, #28]
 80109b8:	440a      	add	r2, r1
 80109ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80109c2:	6013      	str	r3, [r2, #0]
 80109c4:	e00f      	b.n	80109e6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80109c6:	69bb      	ldr	r3, [r7, #24]
 80109c8:	015a      	lsls	r2, r3, #5
 80109ca:	69fb      	ldr	r3, [r7, #28]
 80109cc:	4413      	add	r3, r2
 80109ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	69ba      	ldr	r2, [r7, #24]
 80109d6:	0151      	lsls	r1, r2, #5
 80109d8:	69fa      	ldr	r2, [r7, #28]
 80109da:	440a      	add	r2, r1
 80109dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80109e4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80109e6:	68bb      	ldr	r3, [r7, #8]
 80109e8:	68d9      	ldr	r1, [r3, #12]
 80109ea:	68bb      	ldr	r3, [r7, #8]
 80109ec:	781a      	ldrb	r2, [r3, #0]
 80109ee:	68bb      	ldr	r3, [r7, #8]
 80109f0:	695b      	ldr	r3, [r3, #20]
 80109f2:	b298      	uxth	r0, r3
 80109f4:	79fb      	ldrb	r3, [r7, #7]
 80109f6:	9300      	str	r3, [sp, #0]
 80109f8:	4603      	mov	r3, r0
 80109fa:	68f8      	ldr	r0, [r7, #12]
 80109fc:	f000 fa2b 	bl	8010e56 <USB_WritePacket>
 8010a00:	e0ce      	b.n	8010ba0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010a02:	69bb      	ldr	r3, [r7, #24]
 8010a04:	015a      	lsls	r2, r3, #5
 8010a06:	69fb      	ldr	r3, [r7, #28]
 8010a08:	4413      	add	r3, r2
 8010a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a0e:	691b      	ldr	r3, [r3, #16]
 8010a10:	69ba      	ldr	r2, [r7, #24]
 8010a12:	0151      	lsls	r1, r2, #5
 8010a14:	69fa      	ldr	r2, [r7, #28]
 8010a16:	440a      	add	r2, r1
 8010a18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a1c:	0cdb      	lsrs	r3, r3, #19
 8010a1e:	04db      	lsls	r3, r3, #19
 8010a20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010a22:	69bb      	ldr	r3, [r7, #24]
 8010a24:	015a      	lsls	r2, r3, #5
 8010a26:	69fb      	ldr	r3, [r7, #28]
 8010a28:	4413      	add	r3, r2
 8010a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a2e:	691b      	ldr	r3, [r3, #16]
 8010a30:	69ba      	ldr	r2, [r7, #24]
 8010a32:	0151      	lsls	r1, r2, #5
 8010a34:	69fa      	ldr	r2, [r7, #28]
 8010a36:	440a      	add	r2, r1
 8010a38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010a40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010a44:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8010a46:	68bb      	ldr	r3, [r7, #8]
 8010a48:	695b      	ldr	r3, [r3, #20]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d126      	bne.n	8010a9c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010a4e:	69bb      	ldr	r3, [r7, #24]
 8010a50:	015a      	lsls	r2, r3, #5
 8010a52:	69fb      	ldr	r3, [r7, #28]
 8010a54:	4413      	add	r3, r2
 8010a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a5a:	691a      	ldr	r2, [r3, #16]
 8010a5c:	68bb      	ldr	r3, [r7, #8]
 8010a5e:	689b      	ldr	r3, [r3, #8]
 8010a60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010a64:	69b9      	ldr	r1, [r7, #24]
 8010a66:	0148      	lsls	r0, r1, #5
 8010a68:	69f9      	ldr	r1, [r7, #28]
 8010a6a:	4401      	add	r1, r0
 8010a6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010a70:	4313      	orrs	r3, r2
 8010a72:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010a74:	69bb      	ldr	r3, [r7, #24]
 8010a76:	015a      	lsls	r2, r3, #5
 8010a78:	69fb      	ldr	r3, [r7, #28]
 8010a7a:	4413      	add	r3, r2
 8010a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a80:	691b      	ldr	r3, [r3, #16]
 8010a82:	69ba      	ldr	r2, [r7, #24]
 8010a84:	0151      	lsls	r1, r2, #5
 8010a86:	69fa      	ldr	r2, [r7, #28]
 8010a88:	440a      	add	r2, r1
 8010a8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010a92:	6113      	str	r3, [r2, #16]
 8010a94:	e036      	b.n	8010b04 <USB_EPStartXfer+0x3dc>
 8010a96:	bf00      	nop
 8010a98:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010a9c:	68bb      	ldr	r3, [r7, #8]
 8010a9e:	695a      	ldr	r2, [r3, #20]
 8010aa0:	68bb      	ldr	r3, [r7, #8]
 8010aa2:	689b      	ldr	r3, [r3, #8]
 8010aa4:	4413      	add	r3, r2
 8010aa6:	1e5a      	subs	r2, r3, #1
 8010aa8:	68bb      	ldr	r3, [r7, #8]
 8010aaa:	689b      	ldr	r3, [r3, #8]
 8010aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ab0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010ab2:	69bb      	ldr	r3, [r7, #24]
 8010ab4:	015a      	lsls	r2, r3, #5
 8010ab6:	69fb      	ldr	r3, [r7, #28]
 8010ab8:	4413      	add	r3, r2
 8010aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010abe:	691a      	ldr	r2, [r3, #16]
 8010ac0:	8afb      	ldrh	r3, [r7, #22]
 8010ac2:	04d9      	lsls	r1, r3, #19
 8010ac4:	4b39      	ldr	r3, [pc, #228]	; (8010bac <USB_EPStartXfer+0x484>)
 8010ac6:	400b      	ands	r3, r1
 8010ac8:	69b9      	ldr	r1, [r7, #24]
 8010aca:	0148      	lsls	r0, r1, #5
 8010acc:	69f9      	ldr	r1, [r7, #28]
 8010ace:	4401      	add	r1, r0
 8010ad0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010ad4:	4313      	orrs	r3, r2
 8010ad6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8010ad8:	69bb      	ldr	r3, [r7, #24]
 8010ada:	015a      	lsls	r2, r3, #5
 8010adc:	69fb      	ldr	r3, [r7, #28]
 8010ade:	4413      	add	r3, r2
 8010ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ae4:	691a      	ldr	r2, [r3, #16]
 8010ae6:	68bb      	ldr	r3, [r7, #8]
 8010ae8:	689b      	ldr	r3, [r3, #8]
 8010aea:	8af9      	ldrh	r1, [r7, #22]
 8010aec:	fb01 f303 	mul.w	r3, r1, r3
 8010af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010af4:	69b9      	ldr	r1, [r7, #24]
 8010af6:	0148      	lsls	r0, r1, #5
 8010af8:	69f9      	ldr	r1, [r7, #28]
 8010afa:	4401      	add	r1, r0
 8010afc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010b00:	4313      	orrs	r3, r2
 8010b02:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010b04:	79fb      	ldrb	r3, [r7, #7]
 8010b06:	2b01      	cmp	r3, #1
 8010b08:	d10d      	bne.n	8010b26 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010b0a:	68bb      	ldr	r3, [r7, #8]
 8010b0c:	68db      	ldr	r3, [r3, #12]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d009      	beq.n	8010b26 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010b12:	68bb      	ldr	r3, [r7, #8]
 8010b14:	68d9      	ldr	r1, [r3, #12]
 8010b16:	69bb      	ldr	r3, [r7, #24]
 8010b18:	015a      	lsls	r2, r3, #5
 8010b1a:	69fb      	ldr	r3, [r7, #28]
 8010b1c:	4413      	add	r3, r2
 8010b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b22:	460a      	mov	r2, r1
 8010b24:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8010b26:	68bb      	ldr	r3, [r7, #8]
 8010b28:	78db      	ldrb	r3, [r3, #3]
 8010b2a:	2b01      	cmp	r3, #1
 8010b2c:	d128      	bne.n	8010b80 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010b2e:	69fb      	ldr	r3, [r7, #28]
 8010b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b34:	689b      	ldr	r3, [r3, #8]
 8010b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d110      	bne.n	8010b60 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010b3e:	69bb      	ldr	r3, [r7, #24]
 8010b40:	015a      	lsls	r2, r3, #5
 8010b42:	69fb      	ldr	r3, [r7, #28]
 8010b44:	4413      	add	r3, r2
 8010b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	69ba      	ldr	r2, [r7, #24]
 8010b4e:	0151      	lsls	r1, r2, #5
 8010b50:	69fa      	ldr	r2, [r7, #28]
 8010b52:	440a      	add	r2, r1
 8010b54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010b5c:	6013      	str	r3, [r2, #0]
 8010b5e:	e00f      	b.n	8010b80 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010b60:	69bb      	ldr	r3, [r7, #24]
 8010b62:	015a      	lsls	r2, r3, #5
 8010b64:	69fb      	ldr	r3, [r7, #28]
 8010b66:	4413      	add	r3, r2
 8010b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	69ba      	ldr	r2, [r7, #24]
 8010b70:	0151      	lsls	r1, r2, #5
 8010b72:	69fa      	ldr	r2, [r7, #28]
 8010b74:	440a      	add	r2, r1
 8010b76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010b7e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010b80:	69bb      	ldr	r3, [r7, #24]
 8010b82:	015a      	lsls	r2, r3, #5
 8010b84:	69fb      	ldr	r3, [r7, #28]
 8010b86:	4413      	add	r3, r2
 8010b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	69ba      	ldr	r2, [r7, #24]
 8010b90:	0151      	lsls	r1, r2, #5
 8010b92:	69fa      	ldr	r2, [r7, #28]
 8010b94:	440a      	add	r2, r1
 8010b96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010b9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010ba0:	2300      	movs	r3, #0
}
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	3720      	adds	r7, #32
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}
 8010baa:	bf00      	nop
 8010bac:	1ff80000 	.word	0x1ff80000

08010bb0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010bb0:	b480      	push	{r7}
 8010bb2:	b087      	sub	sp, #28
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	60f8      	str	r0, [r7, #12]
 8010bb8:	60b9      	str	r1, [r7, #8]
 8010bba:	4613      	mov	r3, r2
 8010bbc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8010bc2:	68bb      	ldr	r3, [r7, #8]
 8010bc4:	781b      	ldrb	r3, [r3, #0]
 8010bc6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010bc8:	68bb      	ldr	r3, [r7, #8]
 8010bca:	785b      	ldrb	r3, [r3, #1]
 8010bcc:	2b01      	cmp	r3, #1
 8010bce:	f040 80cd 	bne.w	8010d6c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010bd2:	68bb      	ldr	r3, [r7, #8]
 8010bd4:	695b      	ldr	r3, [r3, #20]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d132      	bne.n	8010c40 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010bda:	693b      	ldr	r3, [r7, #16]
 8010bdc:	015a      	lsls	r2, r3, #5
 8010bde:	697b      	ldr	r3, [r7, #20]
 8010be0:	4413      	add	r3, r2
 8010be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010be6:	691b      	ldr	r3, [r3, #16]
 8010be8:	693a      	ldr	r2, [r7, #16]
 8010bea:	0151      	lsls	r1, r2, #5
 8010bec:	697a      	ldr	r2, [r7, #20]
 8010bee:	440a      	add	r2, r1
 8010bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010bf4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010bf8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010bfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010bfe:	693b      	ldr	r3, [r7, #16]
 8010c00:	015a      	lsls	r2, r3, #5
 8010c02:	697b      	ldr	r3, [r7, #20]
 8010c04:	4413      	add	r3, r2
 8010c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c0a:	691b      	ldr	r3, [r3, #16]
 8010c0c:	693a      	ldr	r2, [r7, #16]
 8010c0e:	0151      	lsls	r1, r2, #5
 8010c10:	697a      	ldr	r2, [r7, #20]
 8010c12:	440a      	add	r2, r1
 8010c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010c1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010c1e:	693b      	ldr	r3, [r7, #16]
 8010c20:	015a      	lsls	r2, r3, #5
 8010c22:	697b      	ldr	r3, [r7, #20]
 8010c24:	4413      	add	r3, r2
 8010c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c2a:	691b      	ldr	r3, [r3, #16]
 8010c2c:	693a      	ldr	r2, [r7, #16]
 8010c2e:	0151      	lsls	r1, r2, #5
 8010c30:	697a      	ldr	r2, [r7, #20]
 8010c32:	440a      	add	r2, r1
 8010c34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c38:	0cdb      	lsrs	r3, r3, #19
 8010c3a:	04db      	lsls	r3, r3, #19
 8010c3c:	6113      	str	r3, [r2, #16]
 8010c3e:	e04e      	b.n	8010cde <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010c40:	693b      	ldr	r3, [r7, #16]
 8010c42:	015a      	lsls	r2, r3, #5
 8010c44:	697b      	ldr	r3, [r7, #20]
 8010c46:	4413      	add	r3, r2
 8010c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c4c:	691b      	ldr	r3, [r3, #16]
 8010c4e:	693a      	ldr	r2, [r7, #16]
 8010c50:	0151      	lsls	r1, r2, #5
 8010c52:	697a      	ldr	r2, [r7, #20]
 8010c54:	440a      	add	r2, r1
 8010c56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c5a:	0cdb      	lsrs	r3, r3, #19
 8010c5c:	04db      	lsls	r3, r3, #19
 8010c5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010c60:	693b      	ldr	r3, [r7, #16]
 8010c62:	015a      	lsls	r2, r3, #5
 8010c64:	697b      	ldr	r3, [r7, #20]
 8010c66:	4413      	add	r3, r2
 8010c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c6c:	691b      	ldr	r3, [r3, #16]
 8010c6e:	693a      	ldr	r2, [r7, #16]
 8010c70:	0151      	lsls	r1, r2, #5
 8010c72:	697a      	ldr	r2, [r7, #20]
 8010c74:	440a      	add	r2, r1
 8010c76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c7a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010c7e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010c82:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8010c84:	68bb      	ldr	r3, [r7, #8]
 8010c86:	695a      	ldr	r2, [r3, #20]
 8010c88:	68bb      	ldr	r3, [r7, #8]
 8010c8a:	689b      	ldr	r3, [r3, #8]
 8010c8c:	429a      	cmp	r2, r3
 8010c8e:	d903      	bls.n	8010c98 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8010c90:	68bb      	ldr	r3, [r7, #8]
 8010c92:	689a      	ldr	r2, [r3, #8]
 8010c94:	68bb      	ldr	r3, [r7, #8]
 8010c96:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010c98:	693b      	ldr	r3, [r7, #16]
 8010c9a:	015a      	lsls	r2, r3, #5
 8010c9c:	697b      	ldr	r3, [r7, #20]
 8010c9e:	4413      	add	r3, r2
 8010ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ca4:	691b      	ldr	r3, [r3, #16]
 8010ca6:	693a      	ldr	r2, [r7, #16]
 8010ca8:	0151      	lsls	r1, r2, #5
 8010caa:	697a      	ldr	r2, [r7, #20]
 8010cac:	440a      	add	r2, r1
 8010cae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010cb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010cb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010cb8:	693b      	ldr	r3, [r7, #16]
 8010cba:	015a      	lsls	r2, r3, #5
 8010cbc:	697b      	ldr	r3, [r7, #20]
 8010cbe:	4413      	add	r3, r2
 8010cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cc4:	691a      	ldr	r2, [r3, #16]
 8010cc6:	68bb      	ldr	r3, [r7, #8]
 8010cc8:	695b      	ldr	r3, [r3, #20]
 8010cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010cce:	6939      	ldr	r1, [r7, #16]
 8010cd0:	0148      	lsls	r0, r1, #5
 8010cd2:	6979      	ldr	r1, [r7, #20]
 8010cd4:	4401      	add	r1, r0
 8010cd6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010cda:	4313      	orrs	r3, r2
 8010cdc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010cde:	79fb      	ldrb	r3, [r7, #7]
 8010ce0:	2b01      	cmp	r3, #1
 8010ce2:	d11e      	bne.n	8010d22 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010ce4:	68bb      	ldr	r3, [r7, #8]
 8010ce6:	691b      	ldr	r3, [r3, #16]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d009      	beq.n	8010d00 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010cec:	693b      	ldr	r3, [r7, #16]
 8010cee:	015a      	lsls	r2, r3, #5
 8010cf0:	697b      	ldr	r3, [r7, #20]
 8010cf2:	4413      	add	r3, r2
 8010cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cf8:	461a      	mov	r2, r3
 8010cfa:	68bb      	ldr	r3, [r7, #8]
 8010cfc:	691b      	ldr	r3, [r3, #16]
 8010cfe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010d00:	693b      	ldr	r3, [r7, #16]
 8010d02:	015a      	lsls	r2, r3, #5
 8010d04:	697b      	ldr	r3, [r7, #20]
 8010d06:	4413      	add	r3, r2
 8010d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	693a      	ldr	r2, [r7, #16]
 8010d10:	0151      	lsls	r1, r2, #5
 8010d12:	697a      	ldr	r2, [r7, #20]
 8010d14:	440a      	add	r2, r1
 8010d16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010d1e:	6013      	str	r3, [r2, #0]
 8010d20:	e092      	b.n	8010e48 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010d22:	693b      	ldr	r3, [r7, #16]
 8010d24:	015a      	lsls	r2, r3, #5
 8010d26:	697b      	ldr	r3, [r7, #20]
 8010d28:	4413      	add	r3, r2
 8010d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	693a      	ldr	r2, [r7, #16]
 8010d32:	0151      	lsls	r1, r2, #5
 8010d34:	697a      	ldr	r2, [r7, #20]
 8010d36:	440a      	add	r2, r1
 8010d38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010d40:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8010d42:	68bb      	ldr	r3, [r7, #8]
 8010d44:	695b      	ldr	r3, [r3, #20]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d07e      	beq.n	8010e48 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010d4a:	697b      	ldr	r3, [r7, #20]
 8010d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010d52:	68bb      	ldr	r3, [r7, #8]
 8010d54:	781b      	ldrb	r3, [r3, #0]
 8010d56:	f003 030f 	and.w	r3, r3, #15
 8010d5a:	2101      	movs	r1, #1
 8010d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8010d60:	6979      	ldr	r1, [r7, #20]
 8010d62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010d66:	4313      	orrs	r3, r2
 8010d68:	634b      	str	r3, [r1, #52]	; 0x34
 8010d6a:	e06d      	b.n	8010e48 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010d6c:	693b      	ldr	r3, [r7, #16]
 8010d6e:	015a      	lsls	r2, r3, #5
 8010d70:	697b      	ldr	r3, [r7, #20]
 8010d72:	4413      	add	r3, r2
 8010d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d78:	691b      	ldr	r3, [r3, #16]
 8010d7a:	693a      	ldr	r2, [r7, #16]
 8010d7c:	0151      	lsls	r1, r2, #5
 8010d7e:	697a      	ldr	r2, [r7, #20]
 8010d80:	440a      	add	r2, r1
 8010d82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010d86:	0cdb      	lsrs	r3, r3, #19
 8010d88:	04db      	lsls	r3, r3, #19
 8010d8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010d8c:	693b      	ldr	r3, [r7, #16]
 8010d8e:	015a      	lsls	r2, r3, #5
 8010d90:	697b      	ldr	r3, [r7, #20]
 8010d92:	4413      	add	r3, r2
 8010d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d98:	691b      	ldr	r3, [r3, #16]
 8010d9a:	693a      	ldr	r2, [r7, #16]
 8010d9c:	0151      	lsls	r1, r2, #5
 8010d9e:	697a      	ldr	r2, [r7, #20]
 8010da0:	440a      	add	r2, r1
 8010da2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010da6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010daa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010dae:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8010db0:	68bb      	ldr	r3, [r7, #8]
 8010db2:	695b      	ldr	r3, [r3, #20]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d003      	beq.n	8010dc0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8010db8:	68bb      	ldr	r3, [r7, #8]
 8010dba:	689a      	ldr	r2, [r3, #8]
 8010dbc:	68bb      	ldr	r3, [r7, #8]
 8010dbe:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010dc0:	693b      	ldr	r3, [r7, #16]
 8010dc2:	015a      	lsls	r2, r3, #5
 8010dc4:	697b      	ldr	r3, [r7, #20]
 8010dc6:	4413      	add	r3, r2
 8010dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010dcc:	691b      	ldr	r3, [r3, #16]
 8010dce:	693a      	ldr	r2, [r7, #16]
 8010dd0:	0151      	lsls	r1, r2, #5
 8010dd2:	697a      	ldr	r2, [r7, #20]
 8010dd4:	440a      	add	r2, r1
 8010dd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010dda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010dde:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8010de0:	693b      	ldr	r3, [r7, #16]
 8010de2:	015a      	lsls	r2, r3, #5
 8010de4:	697b      	ldr	r3, [r7, #20]
 8010de6:	4413      	add	r3, r2
 8010de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010dec:	691a      	ldr	r2, [r3, #16]
 8010dee:	68bb      	ldr	r3, [r7, #8]
 8010df0:	689b      	ldr	r3, [r3, #8]
 8010df2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010df6:	6939      	ldr	r1, [r7, #16]
 8010df8:	0148      	lsls	r0, r1, #5
 8010dfa:	6979      	ldr	r1, [r7, #20]
 8010dfc:	4401      	add	r1, r0
 8010dfe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010e02:	4313      	orrs	r3, r2
 8010e04:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8010e06:	79fb      	ldrb	r3, [r7, #7]
 8010e08:	2b01      	cmp	r3, #1
 8010e0a:	d10d      	bne.n	8010e28 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010e0c:	68bb      	ldr	r3, [r7, #8]
 8010e0e:	68db      	ldr	r3, [r3, #12]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d009      	beq.n	8010e28 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	68d9      	ldr	r1, [r3, #12]
 8010e18:	693b      	ldr	r3, [r7, #16]
 8010e1a:	015a      	lsls	r2, r3, #5
 8010e1c:	697b      	ldr	r3, [r7, #20]
 8010e1e:	4413      	add	r3, r2
 8010e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e24:	460a      	mov	r2, r1
 8010e26:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010e28:	693b      	ldr	r3, [r7, #16]
 8010e2a:	015a      	lsls	r2, r3, #5
 8010e2c:	697b      	ldr	r3, [r7, #20]
 8010e2e:	4413      	add	r3, r2
 8010e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	693a      	ldr	r2, [r7, #16]
 8010e38:	0151      	lsls	r1, r2, #5
 8010e3a:	697a      	ldr	r2, [r7, #20]
 8010e3c:	440a      	add	r2, r1
 8010e3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010e46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010e48:	2300      	movs	r3, #0
}
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	371c      	adds	r7, #28
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e54:	4770      	bx	lr

08010e56 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010e56:	b480      	push	{r7}
 8010e58:	b089      	sub	sp, #36	; 0x24
 8010e5a:	af00      	add	r7, sp, #0
 8010e5c:	60f8      	str	r0, [r7, #12]
 8010e5e:	60b9      	str	r1, [r7, #8]
 8010e60:	4611      	mov	r1, r2
 8010e62:	461a      	mov	r2, r3
 8010e64:	460b      	mov	r3, r1
 8010e66:	71fb      	strb	r3, [r7, #7]
 8010e68:	4613      	mov	r3, r2
 8010e6a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8010e70:	68bb      	ldr	r3, [r7, #8]
 8010e72:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8010e74:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d123      	bne.n	8010ec4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010e7c:	88bb      	ldrh	r3, [r7, #4]
 8010e7e:	3303      	adds	r3, #3
 8010e80:	089b      	lsrs	r3, r3, #2
 8010e82:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010e84:	2300      	movs	r3, #0
 8010e86:	61bb      	str	r3, [r7, #24]
 8010e88:	e018      	b.n	8010ebc <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010e8a:	79fb      	ldrb	r3, [r7, #7]
 8010e8c:	031a      	lsls	r2, r3, #12
 8010e8e:	697b      	ldr	r3, [r7, #20]
 8010e90:	4413      	add	r3, r2
 8010e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e96:	461a      	mov	r2, r3
 8010e98:	69fb      	ldr	r3, [r7, #28]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010e9e:	69fb      	ldr	r3, [r7, #28]
 8010ea0:	3301      	adds	r3, #1
 8010ea2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010ea4:	69fb      	ldr	r3, [r7, #28]
 8010ea6:	3301      	adds	r3, #1
 8010ea8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010eaa:	69fb      	ldr	r3, [r7, #28]
 8010eac:	3301      	adds	r3, #1
 8010eae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010eb0:	69fb      	ldr	r3, [r7, #28]
 8010eb2:	3301      	adds	r3, #1
 8010eb4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010eb6:	69bb      	ldr	r3, [r7, #24]
 8010eb8:	3301      	adds	r3, #1
 8010eba:	61bb      	str	r3, [r7, #24]
 8010ebc:	69ba      	ldr	r2, [r7, #24]
 8010ebe:	693b      	ldr	r3, [r7, #16]
 8010ec0:	429a      	cmp	r2, r3
 8010ec2:	d3e2      	bcc.n	8010e8a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010ec4:	2300      	movs	r3, #0
}
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	3724      	adds	r7, #36	; 0x24
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed0:	4770      	bx	lr

08010ed2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010ed2:	b480      	push	{r7}
 8010ed4:	b08b      	sub	sp, #44	; 0x2c
 8010ed6:	af00      	add	r7, sp, #0
 8010ed8:	60f8      	str	r0, [r7, #12]
 8010eda:	60b9      	str	r1, [r7, #8]
 8010edc:	4613      	mov	r3, r2
 8010ede:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8010ee4:	68bb      	ldr	r3, [r7, #8]
 8010ee6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8010ee8:	88fb      	ldrh	r3, [r7, #6]
 8010eea:	089b      	lsrs	r3, r3, #2
 8010eec:	b29b      	uxth	r3, r3
 8010eee:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8010ef0:	88fb      	ldrh	r3, [r7, #6]
 8010ef2:	f003 0303 	and.w	r3, r3, #3
 8010ef6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8010ef8:	2300      	movs	r3, #0
 8010efa:	623b      	str	r3, [r7, #32]
 8010efc:	e014      	b.n	8010f28 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010efe:	69bb      	ldr	r3, [r7, #24]
 8010f00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010f04:	681a      	ldr	r2, [r3, #0]
 8010f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f08:	601a      	str	r2, [r3, #0]
    pDest++;
 8010f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f0c:	3301      	adds	r3, #1
 8010f0e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f12:	3301      	adds	r3, #1
 8010f14:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f18:	3301      	adds	r3, #1
 8010f1a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f1e:	3301      	adds	r3, #1
 8010f20:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8010f22:	6a3b      	ldr	r3, [r7, #32]
 8010f24:	3301      	adds	r3, #1
 8010f26:	623b      	str	r3, [r7, #32]
 8010f28:	6a3a      	ldr	r2, [r7, #32]
 8010f2a:	697b      	ldr	r3, [r7, #20]
 8010f2c:	429a      	cmp	r2, r3
 8010f2e:	d3e6      	bcc.n	8010efe <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8010f30:	8bfb      	ldrh	r3, [r7, #30]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d01e      	beq.n	8010f74 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010f36:	2300      	movs	r3, #0
 8010f38:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010f3a:	69bb      	ldr	r3, [r7, #24]
 8010f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010f40:	461a      	mov	r2, r3
 8010f42:	f107 0310 	add.w	r3, r7, #16
 8010f46:	6812      	ldr	r2, [r2, #0]
 8010f48:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8010f4a:	693a      	ldr	r2, [r7, #16]
 8010f4c:	6a3b      	ldr	r3, [r7, #32]
 8010f4e:	b2db      	uxtb	r3, r3
 8010f50:	00db      	lsls	r3, r3, #3
 8010f52:	fa22 f303 	lsr.w	r3, r2, r3
 8010f56:	b2da      	uxtb	r2, r3
 8010f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f5a:	701a      	strb	r2, [r3, #0]
      i++;
 8010f5c:	6a3b      	ldr	r3, [r7, #32]
 8010f5e:	3301      	adds	r3, #1
 8010f60:	623b      	str	r3, [r7, #32]
      pDest++;
 8010f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f64:	3301      	adds	r3, #1
 8010f66:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8010f68:	8bfb      	ldrh	r3, [r7, #30]
 8010f6a:	3b01      	subs	r3, #1
 8010f6c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8010f6e:	8bfb      	ldrh	r3, [r7, #30]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d1ea      	bne.n	8010f4a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8010f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010f76:	4618      	mov	r0, r3
 8010f78:	372c      	adds	r7, #44	; 0x2c
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f80:	4770      	bx	lr

08010f82 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010f82:	b480      	push	{r7}
 8010f84:	b085      	sub	sp, #20
 8010f86:	af00      	add	r7, sp, #0
 8010f88:	6078      	str	r0, [r7, #4]
 8010f8a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010f90:	683b      	ldr	r3, [r7, #0]
 8010f92:	781b      	ldrb	r3, [r3, #0]
 8010f94:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010f96:	683b      	ldr	r3, [r7, #0]
 8010f98:	785b      	ldrb	r3, [r3, #1]
 8010f9a:	2b01      	cmp	r3, #1
 8010f9c:	d12c      	bne.n	8010ff8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010f9e:	68bb      	ldr	r3, [r7, #8]
 8010fa0:	015a      	lsls	r2, r3, #5
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	4413      	add	r3, r2
 8010fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	db12      	blt.n	8010fd6 <USB_EPSetStall+0x54>
 8010fb0:	68bb      	ldr	r3, [r7, #8]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d00f      	beq.n	8010fd6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010fb6:	68bb      	ldr	r3, [r7, #8]
 8010fb8:	015a      	lsls	r2, r3, #5
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	4413      	add	r3, r2
 8010fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	68ba      	ldr	r2, [r7, #8]
 8010fc6:	0151      	lsls	r1, r2, #5
 8010fc8:	68fa      	ldr	r2, [r7, #12]
 8010fca:	440a      	add	r2, r1
 8010fcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010fd0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010fd4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010fd6:	68bb      	ldr	r3, [r7, #8]
 8010fd8:	015a      	lsls	r2, r3, #5
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	4413      	add	r3, r2
 8010fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	68ba      	ldr	r2, [r7, #8]
 8010fe6:	0151      	lsls	r1, r2, #5
 8010fe8:	68fa      	ldr	r2, [r7, #12]
 8010fea:	440a      	add	r2, r1
 8010fec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010ff0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010ff4:	6013      	str	r3, [r2, #0]
 8010ff6:	e02b      	b.n	8011050 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010ff8:	68bb      	ldr	r3, [r7, #8]
 8010ffa:	015a      	lsls	r2, r3, #5
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	4413      	add	r3, r2
 8011000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	2b00      	cmp	r3, #0
 8011008:	db12      	blt.n	8011030 <USB_EPSetStall+0xae>
 801100a:	68bb      	ldr	r3, [r7, #8]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d00f      	beq.n	8011030 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8011010:	68bb      	ldr	r3, [r7, #8]
 8011012:	015a      	lsls	r2, r3, #5
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	4413      	add	r3, r2
 8011018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	68ba      	ldr	r2, [r7, #8]
 8011020:	0151      	lsls	r1, r2, #5
 8011022:	68fa      	ldr	r2, [r7, #12]
 8011024:	440a      	add	r2, r1
 8011026:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801102a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801102e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011030:	68bb      	ldr	r3, [r7, #8]
 8011032:	015a      	lsls	r2, r3, #5
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	4413      	add	r3, r2
 8011038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	68ba      	ldr	r2, [r7, #8]
 8011040:	0151      	lsls	r1, r2, #5
 8011042:	68fa      	ldr	r2, [r7, #12]
 8011044:	440a      	add	r2, r1
 8011046:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801104a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801104e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011050:	2300      	movs	r3, #0
}
 8011052:	4618      	mov	r0, r3
 8011054:	3714      	adds	r7, #20
 8011056:	46bd      	mov	sp, r7
 8011058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105c:	4770      	bx	lr

0801105e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801105e:	b480      	push	{r7}
 8011060:	b085      	sub	sp, #20
 8011062:	af00      	add	r7, sp, #0
 8011064:	6078      	str	r0, [r7, #4]
 8011066:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801106c:	683b      	ldr	r3, [r7, #0]
 801106e:	781b      	ldrb	r3, [r3, #0]
 8011070:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011072:	683b      	ldr	r3, [r7, #0]
 8011074:	785b      	ldrb	r3, [r3, #1]
 8011076:	2b01      	cmp	r3, #1
 8011078:	d128      	bne.n	80110cc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801107a:	68bb      	ldr	r3, [r7, #8]
 801107c:	015a      	lsls	r2, r3, #5
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	4413      	add	r3, r2
 8011082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	68ba      	ldr	r2, [r7, #8]
 801108a:	0151      	lsls	r1, r2, #5
 801108c:	68fa      	ldr	r2, [r7, #12]
 801108e:	440a      	add	r2, r1
 8011090:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011094:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011098:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801109a:	683b      	ldr	r3, [r7, #0]
 801109c:	78db      	ldrb	r3, [r3, #3]
 801109e:	2b03      	cmp	r3, #3
 80110a0:	d003      	beq.n	80110aa <USB_EPClearStall+0x4c>
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	78db      	ldrb	r3, [r3, #3]
 80110a6:	2b02      	cmp	r3, #2
 80110a8:	d138      	bne.n	801111c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80110aa:	68bb      	ldr	r3, [r7, #8]
 80110ac:	015a      	lsls	r2, r3, #5
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	4413      	add	r3, r2
 80110b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	68ba      	ldr	r2, [r7, #8]
 80110ba:	0151      	lsls	r1, r2, #5
 80110bc:	68fa      	ldr	r2, [r7, #12]
 80110be:	440a      	add	r2, r1
 80110c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80110c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80110c8:	6013      	str	r3, [r2, #0]
 80110ca:	e027      	b.n	801111c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80110cc:	68bb      	ldr	r3, [r7, #8]
 80110ce:	015a      	lsls	r2, r3, #5
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	4413      	add	r3, r2
 80110d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	68ba      	ldr	r2, [r7, #8]
 80110dc:	0151      	lsls	r1, r2, #5
 80110de:	68fa      	ldr	r2, [r7, #12]
 80110e0:	440a      	add	r2, r1
 80110e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80110e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80110ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80110ec:	683b      	ldr	r3, [r7, #0]
 80110ee:	78db      	ldrb	r3, [r3, #3]
 80110f0:	2b03      	cmp	r3, #3
 80110f2:	d003      	beq.n	80110fc <USB_EPClearStall+0x9e>
 80110f4:	683b      	ldr	r3, [r7, #0]
 80110f6:	78db      	ldrb	r3, [r3, #3]
 80110f8:	2b02      	cmp	r3, #2
 80110fa:	d10f      	bne.n	801111c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80110fc:	68bb      	ldr	r3, [r7, #8]
 80110fe:	015a      	lsls	r2, r3, #5
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	4413      	add	r3, r2
 8011104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	68ba      	ldr	r2, [r7, #8]
 801110c:	0151      	lsls	r1, r2, #5
 801110e:	68fa      	ldr	r2, [r7, #12]
 8011110:	440a      	add	r2, r1
 8011112:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801111a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801111c:	2300      	movs	r3, #0
}
 801111e:	4618      	mov	r0, r3
 8011120:	3714      	adds	r7, #20
 8011122:	46bd      	mov	sp, r7
 8011124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011128:	4770      	bx	lr

0801112a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801112a:	b480      	push	{r7}
 801112c:	b085      	sub	sp, #20
 801112e:	af00      	add	r7, sp, #0
 8011130:	6078      	str	r0, [r7, #4]
 8011132:	460b      	mov	r3, r1
 8011134:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	68fa      	ldr	r2, [r7, #12]
 8011144:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011148:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801114c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011154:	681a      	ldr	r2, [r3, #0]
 8011156:	78fb      	ldrb	r3, [r7, #3]
 8011158:	011b      	lsls	r3, r3, #4
 801115a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801115e:	68f9      	ldr	r1, [r7, #12]
 8011160:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011164:	4313      	orrs	r3, r2
 8011166:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8011168:	2300      	movs	r3, #0
}
 801116a:	4618      	mov	r0, r3
 801116c:	3714      	adds	r7, #20
 801116e:	46bd      	mov	sp, r7
 8011170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011174:	4770      	bx	lr

08011176 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011176:	b480      	push	{r7}
 8011178:	b085      	sub	sp, #20
 801117a:	af00      	add	r7, sp, #0
 801117c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	68fa      	ldr	r2, [r7, #12]
 801118c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011190:	f023 0303 	bic.w	r3, r3, #3
 8011194:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801119c:	685b      	ldr	r3, [r3, #4]
 801119e:	68fa      	ldr	r2, [r7, #12]
 80111a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80111a4:	f023 0302 	bic.w	r3, r3, #2
 80111a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80111aa:	2300      	movs	r3, #0
}
 80111ac:	4618      	mov	r0, r3
 80111ae:	3714      	adds	r7, #20
 80111b0:	46bd      	mov	sp, r7
 80111b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b6:	4770      	bx	lr

080111b8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80111b8:	b480      	push	{r7}
 80111ba:	b085      	sub	sp, #20
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	68fa      	ldr	r2, [r7, #12]
 80111ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80111d2:	f023 0303 	bic.w	r3, r3, #3
 80111d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80111de:	685b      	ldr	r3, [r3, #4]
 80111e0:	68fa      	ldr	r2, [r7, #12]
 80111e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80111e6:	f043 0302 	orr.w	r3, r3, #2
 80111ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80111ec:	2300      	movs	r3, #0
}
 80111ee:	4618      	mov	r0, r3
 80111f0:	3714      	adds	r7, #20
 80111f2:	46bd      	mov	sp, r7
 80111f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f8:	4770      	bx	lr

080111fa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80111fa:	b480      	push	{r7}
 80111fc:	b085      	sub	sp, #20
 80111fe:	af00      	add	r7, sp, #0
 8011200:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	695b      	ldr	r3, [r3, #20]
 8011206:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	699b      	ldr	r3, [r3, #24]
 801120c:	68fa      	ldr	r2, [r7, #12]
 801120e:	4013      	ands	r3, r2
 8011210:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011212:	68fb      	ldr	r3, [r7, #12]
}
 8011214:	4618      	mov	r0, r3
 8011216:	3714      	adds	r7, #20
 8011218:	46bd      	mov	sp, r7
 801121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121e:	4770      	bx	lr

08011220 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011220:	b480      	push	{r7}
 8011222:	b085      	sub	sp, #20
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011232:	699b      	ldr	r3, [r3, #24]
 8011234:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801123c:	69db      	ldr	r3, [r3, #28]
 801123e:	68ba      	ldr	r2, [r7, #8]
 8011240:	4013      	ands	r3, r2
 8011242:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8011244:	68bb      	ldr	r3, [r7, #8]
 8011246:	0c1b      	lsrs	r3, r3, #16
}
 8011248:	4618      	mov	r0, r3
 801124a:	3714      	adds	r7, #20
 801124c:	46bd      	mov	sp, r7
 801124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011252:	4770      	bx	lr

08011254 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011254:	b480      	push	{r7}
 8011256:	b085      	sub	sp, #20
 8011258:	af00      	add	r7, sp, #0
 801125a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011266:	699b      	ldr	r3, [r3, #24]
 8011268:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011270:	69db      	ldr	r3, [r3, #28]
 8011272:	68ba      	ldr	r2, [r7, #8]
 8011274:	4013      	ands	r3, r2
 8011276:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8011278:	68bb      	ldr	r3, [r7, #8]
 801127a:	b29b      	uxth	r3, r3
}
 801127c:	4618      	mov	r0, r3
 801127e:	3714      	adds	r7, #20
 8011280:	46bd      	mov	sp, r7
 8011282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011286:	4770      	bx	lr

08011288 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011288:	b480      	push	{r7}
 801128a:	b085      	sub	sp, #20
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
 8011290:	460b      	mov	r3, r1
 8011292:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8011298:	78fb      	ldrb	r3, [r7, #3]
 801129a:	015a      	lsls	r2, r3, #5
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	4413      	add	r3, r2
 80112a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80112a4:	689b      	ldr	r3, [r3, #8]
 80112a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80112ae:	695b      	ldr	r3, [r3, #20]
 80112b0:	68ba      	ldr	r2, [r7, #8]
 80112b2:	4013      	ands	r3, r2
 80112b4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80112b6:	68bb      	ldr	r3, [r7, #8]
}
 80112b8:	4618      	mov	r0, r3
 80112ba:	3714      	adds	r7, #20
 80112bc:	46bd      	mov	sp, r7
 80112be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c2:	4770      	bx	lr

080112c4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80112c4:	b480      	push	{r7}
 80112c6:	b087      	sub	sp, #28
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
 80112cc:	460b      	mov	r3, r1
 80112ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80112d4:	697b      	ldr	r3, [r7, #20]
 80112d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80112da:	691b      	ldr	r3, [r3, #16]
 80112dc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80112de:	697b      	ldr	r3, [r7, #20]
 80112e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80112e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112e6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80112e8:	78fb      	ldrb	r3, [r7, #3]
 80112ea:	f003 030f 	and.w	r3, r3, #15
 80112ee:	68fa      	ldr	r2, [r7, #12]
 80112f0:	fa22 f303 	lsr.w	r3, r2, r3
 80112f4:	01db      	lsls	r3, r3, #7
 80112f6:	b2db      	uxtb	r3, r3
 80112f8:	693a      	ldr	r2, [r7, #16]
 80112fa:	4313      	orrs	r3, r2
 80112fc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80112fe:	78fb      	ldrb	r3, [r7, #3]
 8011300:	015a      	lsls	r2, r3, #5
 8011302:	697b      	ldr	r3, [r7, #20]
 8011304:	4413      	add	r3, r2
 8011306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801130a:	689b      	ldr	r3, [r3, #8]
 801130c:	693a      	ldr	r2, [r7, #16]
 801130e:	4013      	ands	r3, r2
 8011310:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011312:	68bb      	ldr	r3, [r7, #8]
}
 8011314:	4618      	mov	r0, r3
 8011316:	371c      	adds	r7, #28
 8011318:	46bd      	mov	sp, r7
 801131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131e:	4770      	bx	lr

08011320 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8011320:	b480      	push	{r7}
 8011322:	b083      	sub	sp, #12
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	695b      	ldr	r3, [r3, #20]
 801132c:	f003 0301 	and.w	r3, r3, #1
}
 8011330:	4618      	mov	r0, r3
 8011332:	370c      	adds	r7, #12
 8011334:	46bd      	mov	sp, r7
 8011336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133a:	4770      	bx	lr

0801133c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801133c:	b480      	push	{r7}
 801133e:	b085      	sub	sp, #20
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	68fa      	ldr	r2, [r7, #12]
 8011352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011356:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801135a:	f023 0307 	bic.w	r3, r3, #7
 801135e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011366:	685b      	ldr	r3, [r3, #4]
 8011368:	68fa      	ldr	r2, [r7, #12]
 801136a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801136e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011372:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011374:	2300      	movs	r3, #0
}
 8011376:	4618      	mov	r0, r3
 8011378:	3714      	adds	r7, #20
 801137a:	46bd      	mov	sp, r7
 801137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011380:	4770      	bx	lr
	...

08011384 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8011384:	b480      	push	{r7}
 8011386:	b087      	sub	sp, #28
 8011388:	af00      	add	r7, sp, #0
 801138a:	60f8      	str	r0, [r7, #12]
 801138c:	460b      	mov	r3, r1
 801138e:	607a      	str	r2, [r7, #4]
 8011390:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	333c      	adds	r3, #60	; 0x3c
 801139a:	3304      	adds	r3, #4
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80113a0:	693b      	ldr	r3, [r7, #16]
 80113a2:	4a26      	ldr	r2, [pc, #152]	; (801143c <USB_EP0_OutStart+0xb8>)
 80113a4:	4293      	cmp	r3, r2
 80113a6:	d90a      	bls.n	80113be <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80113a8:	697b      	ldr	r3, [r7, #20]
 80113aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80113b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80113b8:	d101      	bne.n	80113be <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80113ba:	2300      	movs	r3, #0
 80113bc:	e037      	b.n	801142e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80113be:	697b      	ldr	r3, [r7, #20]
 80113c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113c4:	461a      	mov	r2, r3
 80113c6:	2300      	movs	r3, #0
 80113c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80113ca:	697b      	ldr	r3, [r7, #20]
 80113cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113d0:	691b      	ldr	r3, [r3, #16]
 80113d2:	697a      	ldr	r2, [r7, #20]
 80113d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80113d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80113dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80113de:	697b      	ldr	r3, [r7, #20]
 80113e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113e4:	691b      	ldr	r3, [r3, #16]
 80113e6:	697a      	ldr	r2, [r7, #20]
 80113e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80113ec:	f043 0318 	orr.w	r3, r3, #24
 80113f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80113f2:	697b      	ldr	r3, [r7, #20]
 80113f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113f8:	691b      	ldr	r3, [r3, #16]
 80113fa:	697a      	ldr	r2, [r7, #20]
 80113fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011400:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8011404:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8011406:	7afb      	ldrb	r3, [r7, #11]
 8011408:	2b01      	cmp	r3, #1
 801140a:	d10f      	bne.n	801142c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801140c:	697b      	ldr	r3, [r7, #20]
 801140e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011412:	461a      	mov	r2, r3
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8011418:	697b      	ldr	r3, [r7, #20]
 801141a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	697a      	ldr	r2, [r7, #20]
 8011422:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011426:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801142a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801142c:	2300      	movs	r3, #0
}
 801142e:	4618      	mov	r0, r3
 8011430:	371c      	adds	r7, #28
 8011432:	46bd      	mov	sp, r7
 8011434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011438:	4770      	bx	lr
 801143a:	bf00      	nop
 801143c:	4f54300a 	.word	0x4f54300a

08011440 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011440:	b480      	push	{r7}
 8011442:	b085      	sub	sp, #20
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011448:	2300      	movs	r3, #0
 801144a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	3301      	adds	r3, #1
 8011450:	60fb      	str	r3, [r7, #12]
 8011452:	4a13      	ldr	r2, [pc, #76]	; (80114a0 <USB_CoreReset+0x60>)
 8011454:	4293      	cmp	r3, r2
 8011456:	d901      	bls.n	801145c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8011458:	2303      	movs	r3, #3
 801145a:	e01a      	b.n	8011492 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	691b      	ldr	r3, [r3, #16]
 8011460:	2b00      	cmp	r3, #0
 8011462:	daf3      	bge.n	801144c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011464:	2300      	movs	r3, #0
 8011466:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	691b      	ldr	r3, [r3, #16]
 801146c:	f043 0201 	orr.w	r2, r3, #1
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	3301      	adds	r3, #1
 8011478:	60fb      	str	r3, [r7, #12]
 801147a:	4a09      	ldr	r2, [pc, #36]	; (80114a0 <USB_CoreReset+0x60>)
 801147c:	4293      	cmp	r3, r2
 801147e:	d901      	bls.n	8011484 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8011480:	2303      	movs	r3, #3
 8011482:	e006      	b.n	8011492 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	691b      	ldr	r3, [r3, #16]
 8011488:	f003 0301 	and.w	r3, r3, #1
 801148c:	2b01      	cmp	r3, #1
 801148e:	d0f1      	beq.n	8011474 <USB_CoreReset+0x34>

  return HAL_OK;
 8011490:	2300      	movs	r3, #0
}
 8011492:	4618      	mov	r0, r3
 8011494:	3714      	adds	r7, #20
 8011496:	46bd      	mov	sp, r7
 8011498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149c:	4770      	bx	lr
 801149e:	bf00      	nop
 80114a0:	00030d40 	.word	0x00030d40

080114a4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80114a4:	b580      	push	{r7, lr}
 80114a6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80114a8:	4904      	ldr	r1, [pc, #16]	; (80114bc <MX_FATFS_Init+0x18>)
 80114aa:	4805      	ldr	r0, [pc, #20]	; (80114c0 <MX_FATFS_Init+0x1c>)
 80114ac:	f004 fb1c 	bl	8015ae8 <FATFS_LinkDriver>
 80114b0:	4603      	mov	r3, r0
 80114b2:	461a      	mov	r2, r3
 80114b4:	4b03      	ldr	r3, [pc, #12]	; (80114c4 <MX_FATFS_Init+0x20>)
 80114b6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80114b8:	bf00      	nop
 80114ba:	bd80      	pop	{r7, pc}
 80114bc:	20006fc8 	.word	0x20006fc8
 80114c0:	20000068 	.word	0x20000068
 80114c4:	20006fcc 	.word	0x20006fcc

080114c8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80114c8:	b480      	push	{r7}
 80114ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80114cc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80114ce:	4618      	mov	r0, r3
 80114d0:	46bd      	mov	sp, r7
 80114d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d6:	4770      	bx	lr

080114d8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80114d8:	b480      	push	{r7}
 80114da:	b083      	sub	sp, #12
 80114dc:	af00      	add	r7, sp, #0
 80114de:	4603      	mov	r3, r0
 80114e0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80114e2:	4b06      	ldr	r3, [pc, #24]	; (80114fc <USER_initialize+0x24>)
 80114e4:	2201      	movs	r2, #1
 80114e6:	701a      	strb	r2, [r3, #0]
    return Stat;
 80114e8:	4b04      	ldr	r3, [pc, #16]	; (80114fc <USER_initialize+0x24>)
 80114ea:	781b      	ldrb	r3, [r3, #0]
 80114ec:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80114ee:	4618      	mov	r0, r3
 80114f0:	370c      	adds	r7, #12
 80114f2:	46bd      	mov	sp, r7
 80114f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f8:	4770      	bx	lr
 80114fa:	bf00      	nop
 80114fc:	20000065 	.word	0x20000065

08011500 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8011500:	b480      	push	{r7}
 8011502:	b083      	sub	sp, #12
 8011504:	af00      	add	r7, sp, #0
 8011506:	4603      	mov	r3, r0
 8011508:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 801150a:	4b06      	ldr	r3, [pc, #24]	; (8011524 <USER_status+0x24>)
 801150c:	2201      	movs	r2, #1
 801150e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8011510:	4b04      	ldr	r3, [pc, #16]	; (8011524 <USER_status+0x24>)
 8011512:	781b      	ldrb	r3, [r3, #0]
 8011514:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8011516:	4618      	mov	r0, r3
 8011518:	370c      	adds	r7, #12
 801151a:	46bd      	mov	sp, r7
 801151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011520:	4770      	bx	lr
 8011522:	bf00      	nop
 8011524:	20000065 	.word	0x20000065

08011528 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8011528:	b480      	push	{r7}
 801152a:	b085      	sub	sp, #20
 801152c:	af00      	add	r7, sp, #0
 801152e:	60b9      	str	r1, [r7, #8]
 8011530:	607a      	str	r2, [r7, #4]
 8011532:	603b      	str	r3, [r7, #0]
 8011534:	4603      	mov	r3, r0
 8011536:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8011538:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 801153a:	4618      	mov	r0, r3
 801153c:	3714      	adds	r7, #20
 801153e:	46bd      	mov	sp, r7
 8011540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011544:	4770      	bx	lr

08011546 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8011546:	b480      	push	{r7}
 8011548:	b085      	sub	sp, #20
 801154a:	af00      	add	r7, sp, #0
 801154c:	60b9      	str	r1, [r7, #8]
 801154e:	607a      	str	r2, [r7, #4]
 8011550:	603b      	str	r3, [r7, #0]
 8011552:	4603      	mov	r3, r0
 8011554:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8011556:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8011558:	4618      	mov	r0, r3
 801155a:	3714      	adds	r7, #20
 801155c:	46bd      	mov	sp, r7
 801155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011562:	4770      	bx	lr

08011564 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8011564:	b480      	push	{r7}
 8011566:	b085      	sub	sp, #20
 8011568:	af00      	add	r7, sp, #0
 801156a:	4603      	mov	r3, r0
 801156c:	603a      	str	r2, [r7, #0]
 801156e:	71fb      	strb	r3, [r7, #7]
 8011570:	460b      	mov	r3, r1
 8011572:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8011574:	2301      	movs	r3, #1
 8011576:	73fb      	strb	r3, [r7, #15]
    return res;
 8011578:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 801157a:	4618      	mov	r0, r3
 801157c:	3714      	adds	r7, #20
 801157e:	46bd      	mov	sp, r7
 8011580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011584:	4770      	bx	lr

08011586 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011586:	b580      	push	{r7, lr}
 8011588:	b084      	sub	sp, #16
 801158a:	af00      	add	r7, sp, #0
 801158c:	6078      	str	r0, [r7, #4]
 801158e:	460b      	mov	r3, r1
 8011590:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011592:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8011596:	f008 fadf 	bl	8019b58 <USBD_static_malloc>
 801159a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d105      	bne.n	80115ae <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	2200      	movs	r2, #0
 80115a6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80115aa:	2302      	movs	r3, #2
 80115ac:	e066      	b.n	801167c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	68fa      	ldr	r2, [r7, #12]
 80115b2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	7c1b      	ldrb	r3, [r3, #16]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d119      	bne.n	80115f2 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80115be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80115c2:	2202      	movs	r2, #2
 80115c4:	2181      	movs	r1, #129	; 0x81
 80115c6:	6878      	ldr	r0, [r7, #4]
 80115c8:	f008 f9a3 	bl	8019912 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	2201      	movs	r2, #1
 80115d0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80115d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80115d6:	2202      	movs	r2, #2
 80115d8:	2101      	movs	r1, #1
 80115da:	6878      	ldr	r0, [r7, #4]
 80115dc:	f008 f999 	bl	8019912 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	2201      	movs	r2, #1
 80115e4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	2210      	movs	r2, #16
 80115ec:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80115f0:	e016      	b.n	8011620 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80115f2:	2340      	movs	r3, #64	; 0x40
 80115f4:	2202      	movs	r2, #2
 80115f6:	2181      	movs	r1, #129	; 0x81
 80115f8:	6878      	ldr	r0, [r7, #4]
 80115fa:	f008 f98a 	bl	8019912 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	2201      	movs	r2, #1
 8011602:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011604:	2340      	movs	r3, #64	; 0x40
 8011606:	2202      	movs	r2, #2
 8011608:	2101      	movs	r1, #1
 801160a:	6878      	ldr	r0, [r7, #4]
 801160c:	f008 f981 	bl	8019912 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	2201      	movs	r2, #1
 8011614:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	2210      	movs	r2, #16
 801161c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8011620:	2308      	movs	r3, #8
 8011622:	2203      	movs	r2, #3
 8011624:	2182      	movs	r1, #130	; 0x82
 8011626:	6878      	ldr	r0, [r7, #4]
 8011628:	f008 f973 	bl	8019912 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	2201      	movs	r2, #1
 8011630:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	2200      	movs	r2, #0
 8011642:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	2200      	movs	r2, #0
 801164a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	7c1b      	ldrb	r3, [r3, #16]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d109      	bne.n	801166a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801165c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011660:	2101      	movs	r1, #1
 8011662:	6878      	ldr	r0, [r7, #4]
 8011664:	f008 fa44 	bl	8019af0 <USBD_LL_PrepareReceive>
 8011668:	e007      	b.n	801167a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011670:	2340      	movs	r3, #64	; 0x40
 8011672:	2101      	movs	r1, #1
 8011674:	6878      	ldr	r0, [r7, #4]
 8011676:	f008 fa3b 	bl	8019af0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801167a:	2300      	movs	r3, #0
}
 801167c:	4618      	mov	r0, r3
 801167e:	3710      	adds	r7, #16
 8011680:	46bd      	mov	sp, r7
 8011682:	bd80      	pop	{r7, pc}

08011684 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011684:	b580      	push	{r7, lr}
 8011686:	b082      	sub	sp, #8
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
 801168c:	460b      	mov	r3, r1
 801168e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8011690:	2181      	movs	r1, #129	; 0x81
 8011692:	6878      	ldr	r0, [r7, #4]
 8011694:	f008 f963 	bl	801995e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	2200      	movs	r2, #0
 801169c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801169e:	2101      	movs	r1, #1
 80116a0:	6878      	ldr	r0, [r7, #4]
 80116a2:	f008 f95c 	bl	801995e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	2200      	movs	r2, #0
 80116aa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80116ae:	2182      	movs	r1, #130	; 0x82
 80116b0:	6878      	ldr	r0, [r7, #4]
 80116b2:	f008 f954 	bl	801995e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	2200      	movs	r2, #0
 80116ba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	2200      	movs	r2, #0
 80116c2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d00e      	beq.n	80116ee <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80116d6:	685b      	ldr	r3, [r3, #4]
 80116d8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80116e0:	4618      	mov	r0, r3
 80116e2:	f008 fa47 	bl	8019b74 <USBD_static_free>
    pdev->pClassData = NULL;
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	2200      	movs	r2, #0
 80116ea:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80116ee:	2300      	movs	r3, #0
}
 80116f0:	4618      	mov	r0, r3
 80116f2:	3708      	adds	r7, #8
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bd80      	pop	{r7, pc}

080116f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b086      	sub	sp, #24
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
 8011700:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011708:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801170a:	2300      	movs	r3, #0
 801170c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801170e:	2300      	movs	r3, #0
 8011710:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8011712:	2300      	movs	r3, #0
 8011714:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8011716:	693b      	ldr	r3, [r7, #16]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d101      	bne.n	8011720 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 801171c:	2303      	movs	r3, #3
 801171e:	e0af      	b.n	8011880 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011720:	683b      	ldr	r3, [r7, #0]
 8011722:	781b      	ldrb	r3, [r3, #0]
 8011724:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011728:	2b00      	cmp	r3, #0
 801172a:	d03f      	beq.n	80117ac <USBD_CDC_Setup+0xb4>
 801172c:	2b20      	cmp	r3, #32
 801172e:	f040 809f 	bne.w	8011870 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8011732:	683b      	ldr	r3, [r7, #0]
 8011734:	88db      	ldrh	r3, [r3, #6]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d02e      	beq.n	8011798 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	781b      	ldrb	r3, [r3, #0]
 801173e:	b25b      	sxtb	r3, r3
 8011740:	2b00      	cmp	r3, #0
 8011742:	da16      	bge.n	8011772 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801174a:	689b      	ldr	r3, [r3, #8]
 801174c:	683a      	ldr	r2, [r7, #0]
 801174e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8011750:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011752:	683a      	ldr	r2, [r7, #0]
 8011754:	88d2      	ldrh	r2, [r2, #6]
 8011756:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8011758:	683b      	ldr	r3, [r7, #0]
 801175a:	88db      	ldrh	r3, [r3, #6]
 801175c:	2b07      	cmp	r3, #7
 801175e:	bf28      	it	cs
 8011760:	2307      	movcs	r3, #7
 8011762:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8011764:	693b      	ldr	r3, [r7, #16]
 8011766:	89fa      	ldrh	r2, [r7, #14]
 8011768:	4619      	mov	r1, r3
 801176a:	6878      	ldr	r0, [r7, #4]
 801176c:	f001 fae9 	bl	8012d42 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8011770:	e085      	b.n	801187e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8011772:	683b      	ldr	r3, [r7, #0]
 8011774:	785a      	ldrb	r2, [r3, #1]
 8011776:	693b      	ldr	r3, [r7, #16]
 8011778:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	88db      	ldrh	r3, [r3, #6]
 8011780:	b2da      	uxtb	r2, r3
 8011782:	693b      	ldr	r3, [r7, #16]
 8011784:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8011788:	6939      	ldr	r1, [r7, #16]
 801178a:	683b      	ldr	r3, [r7, #0]
 801178c:	88db      	ldrh	r3, [r3, #6]
 801178e:	461a      	mov	r2, r3
 8011790:	6878      	ldr	r0, [r7, #4]
 8011792:	f001 fb02 	bl	8012d9a <USBD_CtlPrepareRx>
      break;
 8011796:	e072      	b.n	801187e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801179e:	689b      	ldr	r3, [r3, #8]
 80117a0:	683a      	ldr	r2, [r7, #0]
 80117a2:	7850      	ldrb	r0, [r2, #1]
 80117a4:	2200      	movs	r2, #0
 80117a6:	6839      	ldr	r1, [r7, #0]
 80117a8:	4798      	blx	r3
      break;
 80117aa:	e068      	b.n	801187e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80117ac:	683b      	ldr	r3, [r7, #0]
 80117ae:	785b      	ldrb	r3, [r3, #1]
 80117b0:	2b0b      	cmp	r3, #11
 80117b2:	d852      	bhi.n	801185a <USBD_CDC_Setup+0x162>
 80117b4:	a201      	add	r2, pc, #4	; (adr r2, 80117bc <USBD_CDC_Setup+0xc4>)
 80117b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117ba:	bf00      	nop
 80117bc:	080117ed 	.word	0x080117ed
 80117c0:	08011869 	.word	0x08011869
 80117c4:	0801185b 	.word	0x0801185b
 80117c8:	0801185b 	.word	0x0801185b
 80117cc:	0801185b 	.word	0x0801185b
 80117d0:	0801185b 	.word	0x0801185b
 80117d4:	0801185b 	.word	0x0801185b
 80117d8:	0801185b 	.word	0x0801185b
 80117dc:	0801185b 	.word	0x0801185b
 80117e0:	0801185b 	.word	0x0801185b
 80117e4:	08011817 	.word	0x08011817
 80117e8:	08011841 	.word	0x08011841
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80117f2:	b2db      	uxtb	r3, r3
 80117f4:	2b03      	cmp	r3, #3
 80117f6:	d107      	bne.n	8011808 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80117f8:	f107 030a 	add.w	r3, r7, #10
 80117fc:	2202      	movs	r2, #2
 80117fe:	4619      	mov	r1, r3
 8011800:	6878      	ldr	r0, [r7, #4]
 8011802:	f001 fa9e 	bl	8012d42 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011806:	e032      	b.n	801186e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8011808:	6839      	ldr	r1, [r7, #0]
 801180a:	6878      	ldr	r0, [r7, #4]
 801180c:	f001 fa28 	bl	8012c60 <USBD_CtlError>
            ret = USBD_FAIL;
 8011810:	2303      	movs	r3, #3
 8011812:	75fb      	strb	r3, [r7, #23]
          break;
 8011814:	e02b      	b.n	801186e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801181c:	b2db      	uxtb	r3, r3
 801181e:	2b03      	cmp	r3, #3
 8011820:	d107      	bne.n	8011832 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011822:	f107 030d 	add.w	r3, r7, #13
 8011826:	2201      	movs	r2, #1
 8011828:	4619      	mov	r1, r3
 801182a:	6878      	ldr	r0, [r7, #4]
 801182c:	f001 fa89 	bl	8012d42 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011830:	e01d      	b.n	801186e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8011832:	6839      	ldr	r1, [r7, #0]
 8011834:	6878      	ldr	r0, [r7, #4]
 8011836:	f001 fa13 	bl	8012c60 <USBD_CtlError>
            ret = USBD_FAIL;
 801183a:	2303      	movs	r3, #3
 801183c:	75fb      	strb	r3, [r7, #23]
          break;
 801183e:	e016      	b.n	801186e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011846:	b2db      	uxtb	r3, r3
 8011848:	2b03      	cmp	r3, #3
 801184a:	d00f      	beq.n	801186c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 801184c:	6839      	ldr	r1, [r7, #0]
 801184e:	6878      	ldr	r0, [r7, #4]
 8011850:	f001 fa06 	bl	8012c60 <USBD_CtlError>
            ret = USBD_FAIL;
 8011854:	2303      	movs	r3, #3
 8011856:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8011858:	e008      	b.n	801186c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801185a:	6839      	ldr	r1, [r7, #0]
 801185c:	6878      	ldr	r0, [r7, #4]
 801185e:	f001 f9ff 	bl	8012c60 <USBD_CtlError>
          ret = USBD_FAIL;
 8011862:	2303      	movs	r3, #3
 8011864:	75fb      	strb	r3, [r7, #23]
          break;
 8011866:	e002      	b.n	801186e <USBD_CDC_Setup+0x176>
          break;
 8011868:	bf00      	nop
 801186a:	e008      	b.n	801187e <USBD_CDC_Setup+0x186>
          break;
 801186c:	bf00      	nop
      }
      break;
 801186e:	e006      	b.n	801187e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8011870:	6839      	ldr	r1, [r7, #0]
 8011872:	6878      	ldr	r0, [r7, #4]
 8011874:	f001 f9f4 	bl	8012c60 <USBD_CtlError>
      ret = USBD_FAIL;
 8011878:	2303      	movs	r3, #3
 801187a:	75fb      	strb	r3, [r7, #23]
      break;
 801187c:	bf00      	nop
  }

  return (uint8_t)ret;
 801187e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011880:	4618      	mov	r0, r3
 8011882:	3718      	adds	r7, #24
 8011884:	46bd      	mov	sp, r7
 8011886:	bd80      	pop	{r7, pc}

08011888 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011888:	b580      	push	{r7, lr}
 801188a:	b084      	sub	sp, #16
 801188c:	af00      	add	r7, sp, #0
 801188e:	6078      	str	r0, [r7, #4]
 8011890:	460b      	mov	r3, r1
 8011892:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801189a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d101      	bne.n	80118aa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80118a6:	2303      	movs	r3, #3
 80118a8:	e04f      	b.n	801194a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80118b0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80118b2:	78fa      	ldrb	r2, [r7, #3]
 80118b4:	6879      	ldr	r1, [r7, #4]
 80118b6:	4613      	mov	r3, r2
 80118b8:	009b      	lsls	r3, r3, #2
 80118ba:	4413      	add	r3, r2
 80118bc:	009b      	lsls	r3, r3, #2
 80118be:	440b      	add	r3, r1
 80118c0:	3318      	adds	r3, #24
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d029      	beq.n	801191c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80118c8:	78fa      	ldrb	r2, [r7, #3]
 80118ca:	6879      	ldr	r1, [r7, #4]
 80118cc:	4613      	mov	r3, r2
 80118ce:	009b      	lsls	r3, r3, #2
 80118d0:	4413      	add	r3, r2
 80118d2:	009b      	lsls	r3, r3, #2
 80118d4:	440b      	add	r3, r1
 80118d6:	3318      	adds	r3, #24
 80118d8:	681a      	ldr	r2, [r3, #0]
 80118da:	78f9      	ldrb	r1, [r7, #3]
 80118dc:	68f8      	ldr	r0, [r7, #12]
 80118de:	460b      	mov	r3, r1
 80118e0:	00db      	lsls	r3, r3, #3
 80118e2:	1a5b      	subs	r3, r3, r1
 80118e4:	009b      	lsls	r3, r3, #2
 80118e6:	4403      	add	r3, r0
 80118e8:	3344      	adds	r3, #68	; 0x44
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	fbb2 f1f3 	udiv	r1, r2, r3
 80118f0:	fb03 f301 	mul.w	r3, r3, r1
 80118f4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d110      	bne.n	801191c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80118fa:	78fa      	ldrb	r2, [r7, #3]
 80118fc:	6879      	ldr	r1, [r7, #4]
 80118fe:	4613      	mov	r3, r2
 8011900:	009b      	lsls	r3, r3, #2
 8011902:	4413      	add	r3, r2
 8011904:	009b      	lsls	r3, r3, #2
 8011906:	440b      	add	r3, r1
 8011908:	3318      	adds	r3, #24
 801190a:	2200      	movs	r2, #0
 801190c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801190e:	78f9      	ldrb	r1, [r7, #3]
 8011910:	2300      	movs	r3, #0
 8011912:	2200      	movs	r2, #0
 8011914:	6878      	ldr	r0, [r7, #4]
 8011916:	f008 f8ca 	bl	8019aae <USBD_LL_Transmit>
 801191a:	e015      	b.n	8011948 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 801191c:	68bb      	ldr	r3, [r7, #8]
 801191e:	2200      	movs	r2, #0
 8011920:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801192a:	691b      	ldr	r3, [r3, #16]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d00b      	beq.n	8011948 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011936:	691b      	ldr	r3, [r3, #16]
 8011938:	68ba      	ldr	r2, [r7, #8]
 801193a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801193e:	68ba      	ldr	r2, [r7, #8]
 8011940:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8011944:	78fa      	ldrb	r2, [r7, #3]
 8011946:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8011948:	2300      	movs	r3, #0
}
 801194a:	4618      	mov	r0, r3
 801194c:	3710      	adds	r7, #16
 801194e:	46bd      	mov	sp, r7
 8011950:	bd80      	pop	{r7, pc}

08011952 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011952:	b580      	push	{r7, lr}
 8011954:	b084      	sub	sp, #16
 8011956:	af00      	add	r7, sp, #0
 8011958:	6078      	str	r0, [r7, #4]
 801195a:	460b      	mov	r3, r1
 801195c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011964:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801196c:	2b00      	cmp	r3, #0
 801196e:	d101      	bne.n	8011974 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011970:	2303      	movs	r3, #3
 8011972:	e015      	b.n	80119a0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011974:	78fb      	ldrb	r3, [r7, #3]
 8011976:	4619      	mov	r1, r3
 8011978:	6878      	ldr	r0, [r7, #4]
 801197a:	f008 f8da 	bl	8019b32 <USBD_LL_GetRxDataSize>
 801197e:	4602      	mov	r2, r0
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801198c:	68db      	ldr	r3, [r3, #12]
 801198e:	68fa      	ldr	r2, [r7, #12]
 8011990:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8011994:	68fa      	ldr	r2, [r7, #12]
 8011996:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801199a:	4611      	mov	r1, r2
 801199c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801199e:	2300      	movs	r3, #0
}
 80119a0:	4618      	mov	r0, r3
 80119a2:	3710      	adds	r7, #16
 80119a4:	46bd      	mov	sp, r7
 80119a6:	bd80      	pop	{r7, pc}

080119a8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b084      	sub	sp, #16
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80119b6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d101      	bne.n	80119c2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80119be:	2303      	movs	r3, #3
 80119c0:	e01b      	b.n	80119fa <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d015      	beq.n	80119f8 <USBD_CDC_EP0_RxReady+0x50>
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80119d2:	2bff      	cmp	r3, #255	; 0xff
 80119d4:	d010      	beq.n	80119f8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80119dc:	689b      	ldr	r3, [r3, #8]
 80119de:	68fa      	ldr	r2, [r7, #12]
 80119e0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80119e4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80119e6:	68fa      	ldr	r2, [r7, #12]
 80119e8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80119ec:	b292      	uxth	r2, r2
 80119ee:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	22ff      	movs	r2, #255	; 0xff
 80119f4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80119f8:	2300      	movs	r3, #0
}
 80119fa:	4618      	mov	r0, r3
 80119fc:	3710      	adds	r7, #16
 80119fe:	46bd      	mov	sp, r7
 8011a00:	bd80      	pop	{r7, pc}
	...

08011a04 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011a04:	b480      	push	{r7}
 8011a06:	b083      	sub	sp, #12
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	2243      	movs	r2, #67	; 0x43
 8011a10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8011a12:	4b03      	ldr	r3, [pc, #12]	; (8011a20 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8011a14:	4618      	mov	r0, r3
 8011a16:	370c      	adds	r7, #12
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1e:	4770      	bx	lr
 8011a20:	20000104 	.word	0x20000104

08011a24 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011a24:	b480      	push	{r7}
 8011a26:	b083      	sub	sp, #12
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	2243      	movs	r2, #67	; 0x43
 8011a30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8011a32:	4b03      	ldr	r3, [pc, #12]	; (8011a40 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011a34:	4618      	mov	r0, r3
 8011a36:	370c      	adds	r7, #12
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a3e:	4770      	bx	lr
 8011a40:	200000c0 	.word	0x200000c0

08011a44 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011a44:	b480      	push	{r7}
 8011a46:	b083      	sub	sp, #12
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	2243      	movs	r2, #67	; 0x43
 8011a50:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8011a52:	4b03      	ldr	r3, [pc, #12]	; (8011a60 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011a54:	4618      	mov	r0, r3
 8011a56:	370c      	adds	r7, #12
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5e:	4770      	bx	lr
 8011a60:	20000148 	.word	0x20000148

08011a64 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011a64:	b480      	push	{r7}
 8011a66:	b083      	sub	sp, #12
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	220a      	movs	r2, #10
 8011a70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011a72:	4b03      	ldr	r3, [pc, #12]	; (8011a80 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011a74:	4618      	mov	r0, r3
 8011a76:	370c      	adds	r7, #12
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a7e:	4770      	bx	lr
 8011a80:	2000007c 	.word	0x2000007c

08011a84 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011a84:	b480      	push	{r7}
 8011a86:	b083      	sub	sp, #12
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	6078      	str	r0, [r7, #4]
 8011a8c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011a8e:	683b      	ldr	r3, [r7, #0]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d101      	bne.n	8011a98 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011a94:	2303      	movs	r3, #3
 8011a96:	e004      	b.n	8011aa2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	683a      	ldr	r2, [r7, #0]
 8011a9c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8011aa0:	2300      	movs	r3, #0
}
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	370c      	adds	r7, #12
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aac:	4770      	bx	lr

08011aae <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011aae:	b480      	push	{r7}
 8011ab0:	b087      	sub	sp, #28
 8011ab2:	af00      	add	r7, sp, #0
 8011ab4:	60f8      	str	r0, [r7, #12]
 8011ab6:	60b9      	str	r1, [r7, #8]
 8011ab8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011ac0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8011ac2:	697b      	ldr	r3, [r7, #20]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d101      	bne.n	8011acc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011ac8:	2303      	movs	r3, #3
 8011aca:	e008      	b.n	8011ade <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8011acc:	697b      	ldr	r3, [r7, #20]
 8011ace:	68ba      	ldr	r2, [r7, #8]
 8011ad0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011ad4:	697b      	ldr	r3, [r7, #20]
 8011ad6:	687a      	ldr	r2, [r7, #4]
 8011ad8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8011adc:	2300      	movs	r3, #0
}
 8011ade:	4618      	mov	r0, r3
 8011ae0:	371c      	adds	r7, #28
 8011ae2:	46bd      	mov	sp, r7
 8011ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae8:	4770      	bx	lr

08011aea <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011aea:	b480      	push	{r7}
 8011aec:	b085      	sub	sp, #20
 8011aee:	af00      	add	r7, sp, #0
 8011af0:	6078      	str	r0, [r7, #4]
 8011af2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011afa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d101      	bne.n	8011b06 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8011b02:	2303      	movs	r3, #3
 8011b04:	e004      	b.n	8011b10 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	683a      	ldr	r2, [r7, #0]
 8011b0a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011b0e:	2300      	movs	r3, #0
}
 8011b10:	4618      	mov	r0, r3
 8011b12:	3714      	adds	r7, #20
 8011b14:	46bd      	mov	sp, r7
 8011b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1a:	4770      	bx	lr

08011b1c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	b084      	sub	sp, #16
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d101      	bne.n	8011b3a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011b36:	2303      	movs	r3, #3
 8011b38:	e016      	b.n	8011b68 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	7c1b      	ldrb	r3, [r3, #16]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d109      	bne.n	8011b56 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011b48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011b4c:	2101      	movs	r1, #1
 8011b4e:	6878      	ldr	r0, [r7, #4]
 8011b50:	f007 ffce 	bl	8019af0 <USBD_LL_PrepareReceive>
 8011b54:	e007      	b.n	8011b66 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011b5c:	2340      	movs	r3, #64	; 0x40
 8011b5e:	2101      	movs	r1, #1
 8011b60:	6878      	ldr	r0, [r7, #4]
 8011b62:	f007 ffc5 	bl	8019af0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011b66:	2300      	movs	r3, #0
}
 8011b68:	4618      	mov	r0, r3
 8011b6a:	3710      	adds	r7, #16
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	bd80      	pop	{r7, pc}

08011b70 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b086      	sub	sp, #24
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	60f8      	str	r0, [r7, #12]
 8011b78:	60b9      	str	r1, [r7, #8]
 8011b7a:	4613      	mov	r3, r2
 8011b7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d101      	bne.n	8011b88 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011b84:	2303      	movs	r3, #3
 8011b86:	e01f      	b.n	8011bc8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	2200      	movs	r2, #0
 8011b94:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011ba0:	68bb      	ldr	r3, [r7, #8]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d003      	beq.n	8011bae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	68ba      	ldr	r2, [r7, #8]
 8011baa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	2201      	movs	r2, #1
 8011bb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	79fa      	ldrb	r2, [r7, #7]
 8011bba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011bbc:	68f8      	ldr	r0, [r7, #12]
 8011bbe:	f007 fe41 	bl	8019844 <USBD_LL_Init>
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8011bc8:	4618      	mov	r0, r3
 8011bca:	3718      	adds	r7, #24
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	bd80      	pop	{r7, pc}

08011bd0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b084      	sub	sp, #16
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
 8011bd8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011bda:	2300      	movs	r3, #0
 8011bdc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011bde:	683b      	ldr	r3, [r7, #0]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d101      	bne.n	8011be8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011be4:	2303      	movs	r3, #3
 8011be6:	e016      	b.n	8011c16 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	683a      	ldr	r2, [r7, #0]
 8011bec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d00b      	beq.n	8011c14 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c04:	f107 020e 	add.w	r2, r7, #14
 8011c08:	4610      	mov	r0, r2
 8011c0a:	4798      	blx	r3
 8011c0c:	4602      	mov	r2, r0
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8011c14:	2300      	movs	r3, #0
}
 8011c16:	4618      	mov	r0, r3
 8011c18:	3710      	adds	r7, #16
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	bd80      	pop	{r7, pc}

08011c1e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011c1e:	b580      	push	{r7, lr}
 8011c20:	b082      	sub	sp, #8
 8011c22:	af00      	add	r7, sp, #0
 8011c24:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011c26:	6878      	ldr	r0, [r7, #4]
 8011c28:	f007 fe58 	bl	80198dc <USBD_LL_Start>
 8011c2c:	4603      	mov	r3, r0
}
 8011c2e:	4618      	mov	r0, r3
 8011c30:	3708      	adds	r7, #8
 8011c32:	46bd      	mov	sp, r7
 8011c34:	bd80      	pop	{r7, pc}

08011c36 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011c36:	b480      	push	{r7}
 8011c38:	b083      	sub	sp, #12
 8011c3a:	af00      	add	r7, sp, #0
 8011c3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011c3e:	2300      	movs	r3, #0
}
 8011c40:	4618      	mov	r0, r3
 8011c42:	370c      	adds	r7, #12
 8011c44:	46bd      	mov	sp, r7
 8011c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4a:	4770      	bx	lr

08011c4c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b084      	sub	sp, #16
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	6078      	str	r0, [r7, #4]
 8011c54:	460b      	mov	r3, r1
 8011c56:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011c58:	2303      	movs	r3, #3
 8011c5a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d009      	beq.n	8011c7a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	78fa      	ldrb	r2, [r7, #3]
 8011c70:	4611      	mov	r1, r2
 8011c72:	6878      	ldr	r0, [r7, #4]
 8011c74:	4798      	blx	r3
 8011c76:	4603      	mov	r3, r0
 8011c78:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	3710      	adds	r7, #16
 8011c80:	46bd      	mov	sp, r7
 8011c82:	bd80      	pop	{r7, pc}

08011c84 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b082      	sub	sp, #8
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]
 8011c8c:	460b      	mov	r3, r1
 8011c8e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d007      	beq.n	8011caa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ca0:	685b      	ldr	r3, [r3, #4]
 8011ca2:	78fa      	ldrb	r2, [r7, #3]
 8011ca4:	4611      	mov	r1, r2
 8011ca6:	6878      	ldr	r0, [r7, #4]
 8011ca8:	4798      	blx	r3
  }

  return USBD_OK;
 8011caa:	2300      	movs	r3, #0
}
 8011cac:	4618      	mov	r0, r3
 8011cae:	3708      	adds	r7, #8
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	bd80      	pop	{r7, pc}

08011cb4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b084      	sub	sp, #16
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]
 8011cbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011cc4:	6839      	ldr	r1, [r7, #0]
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	f000 ff90 	bl	8012bec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	2201      	movs	r2, #1
 8011cd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011cda:	461a      	mov	r2, r3
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011ce8:	f003 031f 	and.w	r3, r3, #31
 8011cec:	2b02      	cmp	r3, #2
 8011cee:	d01a      	beq.n	8011d26 <USBD_LL_SetupStage+0x72>
 8011cf0:	2b02      	cmp	r3, #2
 8011cf2:	d822      	bhi.n	8011d3a <USBD_LL_SetupStage+0x86>
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d002      	beq.n	8011cfe <USBD_LL_SetupStage+0x4a>
 8011cf8:	2b01      	cmp	r3, #1
 8011cfa:	d00a      	beq.n	8011d12 <USBD_LL_SetupStage+0x5e>
 8011cfc:	e01d      	b.n	8011d3a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011d04:	4619      	mov	r1, r3
 8011d06:	6878      	ldr	r0, [r7, #4]
 8011d08:	f000 fa62 	bl	80121d0 <USBD_StdDevReq>
 8011d0c:	4603      	mov	r3, r0
 8011d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8011d10:	e020      	b.n	8011d54 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011d18:	4619      	mov	r1, r3
 8011d1a:	6878      	ldr	r0, [r7, #4]
 8011d1c:	f000 fac6 	bl	80122ac <USBD_StdItfReq>
 8011d20:	4603      	mov	r3, r0
 8011d22:	73fb      	strb	r3, [r7, #15]
      break;
 8011d24:	e016      	b.n	8011d54 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011d2c:	4619      	mov	r1, r3
 8011d2e:	6878      	ldr	r0, [r7, #4]
 8011d30:	f000 fb05 	bl	801233e <USBD_StdEPReq>
 8011d34:	4603      	mov	r3, r0
 8011d36:	73fb      	strb	r3, [r7, #15]
      break;
 8011d38:	e00c      	b.n	8011d54 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011d40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011d44:	b2db      	uxtb	r3, r3
 8011d46:	4619      	mov	r1, r3
 8011d48:	6878      	ldr	r0, [r7, #4]
 8011d4a:	f007 fe27 	bl	801999c <USBD_LL_StallEP>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	73fb      	strb	r3, [r7, #15]
      break;
 8011d52:	bf00      	nop
  }

  return ret;
 8011d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d56:	4618      	mov	r0, r3
 8011d58:	3710      	adds	r7, #16
 8011d5a:	46bd      	mov	sp, r7
 8011d5c:	bd80      	pop	{r7, pc}

08011d5e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011d5e:	b580      	push	{r7, lr}
 8011d60:	b086      	sub	sp, #24
 8011d62:	af00      	add	r7, sp, #0
 8011d64:	60f8      	str	r0, [r7, #12]
 8011d66:	460b      	mov	r3, r1
 8011d68:	607a      	str	r2, [r7, #4]
 8011d6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011d6c:	7afb      	ldrb	r3, [r7, #11]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d138      	bne.n	8011de4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011d78:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011d80:	2b03      	cmp	r3, #3
 8011d82:	d14a      	bne.n	8011e1a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011d84:	693b      	ldr	r3, [r7, #16]
 8011d86:	689a      	ldr	r2, [r3, #8]
 8011d88:	693b      	ldr	r3, [r7, #16]
 8011d8a:	68db      	ldr	r3, [r3, #12]
 8011d8c:	429a      	cmp	r2, r3
 8011d8e:	d913      	bls.n	8011db8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011d90:	693b      	ldr	r3, [r7, #16]
 8011d92:	689a      	ldr	r2, [r3, #8]
 8011d94:	693b      	ldr	r3, [r7, #16]
 8011d96:	68db      	ldr	r3, [r3, #12]
 8011d98:	1ad2      	subs	r2, r2, r3
 8011d9a:	693b      	ldr	r3, [r7, #16]
 8011d9c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011d9e:	693b      	ldr	r3, [r7, #16]
 8011da0:	68da      	ldr	r2, [r3, #12]
 8011da2:	693b      	ldr	r3, [r7, #16]
 8011da4:	689b      	ldr	r3, [r3, #8]
 8011da6:	4293      	cmp	r3, r2
 8011da8:	bf28      	it	cs
 8011daa:	4613      	movcs	r3, r2
 8011dac:	461a      	mov	r2, r3
 8011dae:	6879      	ldr	r1, [r7, #4]
 8011db0:	68f8      	ldr	r0, [r7, #12]
 8011db2:	f001 f80f 	bl	8012dd4 <USBD_CtlContinueRx>
 8011db6:	e030      	b.n	8011e1a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011dbe:	b2db      	uxtb	r3, r3
 8011dc0:	2b03      	cmp	r3, #3
 8011dc2:	d10b      	bne.n	8011ddc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011dca:	691b      	ldr	r3, [r3, #16]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d005      	beq.n	8011ddc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011dd6:	691b      	ldr	r3, [r3, #16]
 8011dd8:	68f8      	ldr	r0, [r7, #12]
 8011dda:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011ddc:	68f8      	ldr	r0, [r7, #12]
 8011dde:	f001 f80a 	bl	8012df6 <USBD_CtlSendStatus>
 8011de2:	e01a      	b.n	8011e1a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011dea:	b2db      	uxtb	r3, r3
 8011dec:	2b03      	cmp	r3, #3
 8011dee:	d114      	bne.n	8011e1a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011df6:	699b      	ldr	r3, [r3, #24]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d00e      	beq.n	8011e1a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e02:	699b      	ldr	r3, [r3, #24]
 8011e04:	7afa      	ldrb	r2, [r7, #11]
 8011e06:	4611      	mov	r1, r2
 8011e08:	68f8      	ldr	r0, [r7, #12]
 8011e0a:	4798      	blx	r3
 8011e0c:	4603      	mov	r3, r0
 8011e0e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8011e10:	7dfb      	ldrb	r3, [r7, #23]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d001      	beq.n	8011e1a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8011e16:	7dfb      	ldrb	r3, [r7, #23]
 8011e18:	e000      	b.n	8011e1c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8011e1a:	2300      	movs	r3, #0
}
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	3718      	adds	r7, #24
 8011e20:	46bd      	mov	sp, r7
 8011e22:	bd80      	pop	{r7, pc}

08011e24 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011e24:	b580      	push	{r7, lr}
 8011e26:	b086      	sub	sp, #24
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	60f8      	str	r0, [r7, #12]
 8011e2c:	460b      	mov	r3, r1
 8011e2e:	607a      	str	r2, [r7, #4]
 8011e30:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011e32:	7afb      	ldrb	r3, [r7, #11]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d16b      	bne.n	8011f10 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	3314      	adds	r3, #20
 8011e3c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011e44:	2b02      	cmp	r3, #2
 8011e46:	d156      	bne.n	8011ef6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8011e48:	693b      	ldr	r3, [r7, #16]
 8011e4a:	689a      	ldr	r2, [r3, #8]
 8011e4c:	693b      	ldr	r3, [r7, #16]
 8011e4e:	68db      	ldr	r3, [r3, #12]
 8011e50:	429a      	cmp	r2, r3
 8011e52:	d914      	bls.n	8011e7e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011e54:	693b      	ldr	r3, [r7, #16]
 8011e56:	689a      	ldr	r2, [r3, #8]
 8011e58:	693b      	ldr	r3, [r7, #16]
 8011e5a:	68db      	ldr	r3, [r3, #12]
 8011e5c:	1ad2      	subs	r2, r2, r3
 8011e5e:	693b      	ldr	r3, [r7, #16]
 8011e60:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011e62:	693b      	ldr	r3, [r7, #16]
 8011e64:	689b      	ldr	r3, [r3, #8]
 8011e66:	461a      	mov	r2, r3
 8011e68:	6879      	ldr	r1, [r7, #4]
 8011e6a:	68f8      	ldr	r0, [r7, #12]
 8011e6c:	f000 ff84 	bl	8012d78 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011e70:	2300      	movs	r3, #0
 8011e72:	2200      	movs	r2, #0
 8011e74:	2100      	movs	r1, #0
 8011e76:	68f8      	ldr	r0, [r7, #12]
 8011e78:	f007 fe3a 	bl	8019af0 <USBD_LL_PrepareReceive>
 8011e7c:	e03b      	b.n	8011ef6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011e7e:	693b      	ldr	r3, [r7, #16]
 8011e80:	68da      	ldr	r2, [r3, #12]
 8011e82:	693b      	ldr	r3, [r7, #16]
 8011e84:	689b      	ldr	r3, [r3, #8]
 8011e86:	429a      	cmp	r2, r3
 8011e88:	d11c      	bne.n	8011ec4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011e8a:	693b      	ldr	r3, [r7, #16]
 8011e8c:	685a      	ldr	r2, [r3, #4]
 8011e8e:	693b      	ldr	r3, [r7, #16]
 8011e90:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011e92:	429a      	cmp	r2, r3
 8011e94:	d316      	bcc.n	8011ec4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011e96:	693b      	ldr	r3, [r7, #16]
 8011e98:	685a      	ldr	r2, [r3, #4]
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011ea0:	429a      	cmp	r2, r3
 8011ea2:	d20f      	bcs.n	8011ec4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	2100      	movs	r1, #0
 8011ea8:	68f8      	ldr	r0, [r7, #12]
 8011eaa:	f000 ff65 	bl	8012d78 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	2200      	movs	r2, #0
 8011eba:	2100      	movs	r1, #0
 8011ebc:	68f8      	ldr	r0, [r7, #12]
 8011ebe:	f007 fe17 	bl	8019af0 <USBD_LL_PrepareReceive>
 8011ec2:	e018      	b.n	8011ef6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011eca:	b2db      	uxtb	r3, r3
 8011ecc:	2b03      	cmp	r3, #3
 8011ece:	d10b      	bne.n	8011ee8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ed6:	68db      	ldr	r3, [r3, #12]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d005      	beq.n	8011ee8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ee2:	68db      	ldr	r3, [r3, #12]
 8011ee4:	68f8      	ldr	r0, [r7, #12]
 8011ee6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011ee8:	2180      	movs	r1, #128	; 0x80
 8011eea:	68f8      	ldr	r0, [r7, #12]
 8011eec:	f007 fd56 	bl	801999c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011ef0:	68f8      	ldr	r0, [r7, #12]
 8011ef2:	f000 ff93 	bl	8012e1c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011efc:	2b01      	cmp	r3, #1
 8011efe:	d122      	bne.n	8011f46 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8011f00:	68f8      	ldr	r0, [r7, #12]
 8011f02:	f7ff fe98 	bl	8011c36 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	2200      	movs	r2, #0
 8011f0a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011f0e:	e01a      	b.n	8011f46 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f16:	b2db      	uxtb	r3, r3
 8011f18:	2b03      	cmp	r3, #3
 8011f1a:	d114      	bne.n	8011f46 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f22:	695b      	ldr	r3, [r3, #20]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d00e      	beq.n	8011f46 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f2e:	695b      	ldr	r3, [r3, #20]
 8011f30:	7afa      	ldrb	r2, [r7, #11]
 8011f32:	4611      	mov	r1, r2
 8011f34:	68f8      	ldr	r0, [r7, #12]
 8011f36:	4798      	blx	r3
 8011f38:	4603      	mov	r3, r0
 8011f3a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8011f3c:	7dfb      	ldrb	r3, [r7, #23]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d001      	beq.n	8011f46 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8011f42:	7dfb      	ldrb	r3, [r7, #23]
 8011f44:	e000      	b.n	8011f48 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8011f46:	2300      	movs	r3, #0
}
 8011f48:	4618      	mov	r0, r3
 8011f4a:	3718      	adds	r7, #24
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	bd80      	pop	{r7, pc}

08011f50 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b082      	sub	sp, #8
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	2201      	movs	r2, #1
 8011f5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	2200      	movs	r2, #0
 8011f64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	2200      	movs	r2, #0
 8011f6c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	2200      	movs	r2, #0
 8011f72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d101      	bne.n	8011f84 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8011f80:	2303      	movs	r3, #3
 8011f82:	e02f      	b.n	8011fe4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d00f      	beq.n	8011fae <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f94:	685b      	ldr	r3, [r3, #4]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d009      	beq.n	8011fae <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011fa0:	685b      	ldr	r3, [r3, #4]
 8011fa2:	687a      	ldr	r2, [r7, #4]
 8011fa4:	6852      	ldr	r2, [r2, #4]
 8011fa6:	b2d2      	uxtb	r2, r2
 8011fa8:	4611      	mov	r1, r2
 8011faa:	6878      	ldr	r0, [r7, #4]
 8011fac:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011fae:	2340      	movs	r3, #64	; 0x40
 8011fb0:	2200      	movs	r2, #0
 8011fb2:	2100      	movs	r1, #0
 8011fb4:	6878      	ldr	r0, [r7, #4]
 8011fb6:	f007 fcac 	bl	8019912 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	2201      	movs	r2, #1
 8011fbe:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	2240      	movs	r2, #64	; 0x40
 8011fc6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011fca:	2340      	movs	r3, #64	; 0x40
 8011fcc:	2200      	movs	r2, #0
 8011fce:	2180      	movs	r1, #128	; 0x80
 8011fd0:	6878      	ldr	r0, [r7, #4]
 8011fd2:	f007 fc9e 	bl	8019912 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	2201      	movs	r2, #1
 8011fda:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	2240      	movs	r2, #64	; 0x40
 8011fe0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011fe2:	2300      	movs	r3, #0
}
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	3708      	adds	r7, #8
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	bd80      	pop	{r7, pc}

08011fec <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011fec:	b480      	push	{r7}
 8011fee:	b083      	sub	sp, #12
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
 8011ff4:	460b      	mov	r3, r1
 8011ff6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	78fa      	ldrb	r2, [r7, #3]
 8011ffc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011ffe:	2300      	movs	r3, #0
}
 8012000:	4618      	mov	r0, r3
 8012002:	370c      	adds	r7, #12
 8012004:	46bd      	mov	sp, r7
 8012006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200a:	4770      	bx	lr

0801200c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801200c:	b480      	push	{r7}
 801200e:	b083      	sub	sp, #12
 8012010:	af00      	add	r7, sp, #0
 8012012:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801201a:	b2da      	uxtb	r2, r3
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	2204      	movs	r2, #4
 8012026:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801202a:	2300      	movs	r3, #0
}
 801202c:	4618      	mov	r0, r3
 801202e:	370c      	adds	r7, #12
 8012030:	46bd      	mov	sp, r7
 8012032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012036:	4770      	bx	lr

08012038 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012038:	b480      	push	{r7}
 801203a:	b083      	sub	sp, #12
 801203c:	af00      	add	r7, sp, #0
 801203e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012046:	b2db      	uxtb	r3, r3
 8012048:	2b04      	cmp	r3, #4
 801204a:	d106      	bne.n	801205a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8012052:	b2da      	uxtb	r2, r3
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801205a:	2300      	movs	r3, #0
}
 801205c:	4618      	mov	r0, r3
 801205e:	370c      	adds	r7, #12
 8012060:	46bd      	mov	sp, r7
 8012062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012066:	4770      	bx	lr

08012068 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8012068:	b580      	push	{r7, lr}
 801206a:	b082      	sub	sp, #8
 801206c:	af00      	add	r7, sp, #0
 801206e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012076:	2b00      	cmp	r3, #0
 8012078:	d101      	bne.n	801207e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 801207a:	2303      	movs	r3, #3
 801207c:	e012      	b.n	80120a4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012084:	b2db      	uxtb	r3, r3
 8012086:	2b03      	cmp	r3, #3
 8012088:	d10b      	bne.n	80120a2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012090:	69db      	ldr	r3, [r3, #28]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d005      	beq.n	80120a2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801209c:	69db      	ldr	r3, [r3, #28]
 801209e:	6878      	ldr	r0, [r7, #4]
 80120a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80120a2:	2300      	movs	r3, #0
}
 80120a4:	4618      	mov	r0, r3
 80120a6:	3708      	adds	r7, #8
 80120a8:	46bd      	mov	sp, r7
 80120aa:	bd80      	pop	{r7, pc}

080120ac <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b082      	sub	sp, #8
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	6078      	str	r0, [r7, #4]
 80120b4:	460b      	mov	r3, r1
 80120b6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d101      	bne.n	80120c6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80120c2:	2303      	movs	r3, #3
 80120c4:	e014      	b.n	80120f0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80120cc:	b2db      	uxtb	r3, r3
 80120ce:	2b03      	cmp	r3, #3
 80120d0:	d10d      	bne.n	80120ee <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120d8:	6a1b      	ldr	r3, [r3, #32]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d007      	beq.n	80120ee <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120e4:	6a1b      	ldr	r3, [r3, #32]
 80120e6:	78fa      	ldrb	r2, [r7, #3]
 80120e8:	4611      	mov	r1, r2
 80120ea:	6878      	ldr	r0, [r7, #4]
 80120ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80120ee:	2300      	movs	r3, #0
}
 80120f0:	4618      	mov	r0, r3
 80120f2:	3708      	adds	r7, #8
 80120f4:	46bd      	mov	sp, r7
 80120f6:	bd80      	pop	{r7, pc}

080120f8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b082      	sub	sp, #8
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
 8012100:	460b      	mov	r3, r1
 8012102:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801210a:	2b00      	cmp	r3, #0
 801210c:	d101      	bne.n	8012112 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 801210e:	2303      	movs	r3, #3
 8012110:	e014      	b.n	801213c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012118:	b2db      	uxtb	r3, r3
 801211a:	2b03      	cmp	r3, #3
 801211c:	d10d      	bne.n	801213a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012126:	2b00      	cmp	r3, #0
 8012128:	d007      	beq.n	801213a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012132:	78fa      	ldrb	r2, [r7, #3]
 8012134:	4611      	mov	r1, r2
 8012136:	6878      	ldr	r0, [r7, #4]
 8012138:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801213a:	2300      	movs	r3, #0
}
 801213c:	4618      	mov	r0, r3
 801213e:	3708      	adds	r7, #8
 8012140:	46bd      	mov	sp, r7
 8012142:	bd80      	pop	{r7, pc}

08012144 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8012144:	b480      	push	{r7}
 8012146:	b083      	sub	sp, #12
 8012148:	af00      	add	r7, sp, #0
 801214a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801214c:	2300      	movs	r3, #0
}
 801214e:	4618      	mov	r0, r3
 8012150:	370c      	adds	r7, #12
 8012152:	46bd      	mov	sp, r7
 8012154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012158:	4770      	bx	lr

0801215a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801215a:	b580      	push	{r7, lr}
 801215c:	b082      	sub	sp, #8
 801215e:	af00      	add	r7, sp, #0
 8012160:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	2201      	movs	r2, #1
 8012166:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012170:	2b00      	cmp	r3, #0
 8012172:	d009      	beq.n	8012188 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801217a:	685b      	ldr	r3, [r3, #4]
 801217c:	687a      	ldr	r2, [r7, #4]
 801217e:	6852      	ldr	r2, [r2, #4]
 8012180:	b2d2      	uxtb	r2, r2
 8012182:	4611      	mov	r1, r2
 8012184:	6878      	ldr	r0, [r7, #4]
 8012186:	4798      	blx	r3
  }

  return USBD_OK;
 8012188:	2300      	movs	r3, #0
}
 801218a:	4618      	mov	r0, r3
 801218c:	3708      	adds	r7, #8
 801218e:	46bd      	mov	sp, r7
 8012190:	bd80      	pop	{r7, pc}

08012192 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8012192:	b480      	push	{r7}
 8012194:	b087      	sub	sp, #28
 8012196:	af00      	add	r7, sp, #0
 8012198:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801219e:	697b      	ldr	r3, [r7, #20]
 80121a0:	781b      	ldrb	r3, [r3, #0]
 80121a2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80121a4:	697b      	ldr	r3, [r7, #20]
 80121a6:	3301      	adds	r3, #1
 80121a8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80121aa:	697b      	ldr	r3, [r7, #20]
 80121ac:	781b      	ldrb	r3, [r3, #0]
 80121ae:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80121b0:	8a3b      	ldrh	r3, [r7, #16]
 80121b2:	021b      	lsls	r3, r3, #8
 80121b4:	b21a      	sxth	r2, r3
 80121b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80121ba:	4313      	orrs	r3, r2
 80121bc:	b21b      	sxth	r3, r3
 80121be:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80121c0:	89fb      	ldrh	r3, [r7, #14]
}
 80121c2:	4618      	mov	r0, r3
 80121c4:	371c      	adds	r7, #28
 80121c6:	46bd      	mov	sp, r7
 80121c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121cc:	4770      	bx	lr
	...

080121d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b084      	sub	sp, #16
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	6078      	str	r0, [r7, #4]
 80121d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80121da:	2300      	movs	r3, #0
 80121dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80121de:	683b      	ldr	r3, [r7, #0]
 80121e0:	781b      	ldrb	r3, [r3, #0]
 80121e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80121e6:	2b40      	cmp	r3, #64	; 0x40
 80121e8:	d005      	beq.n	80121f6 <USBD_StdDevReq+0x26>
 80121ea:	2b40      	cmp	r3, #64	; 0x40
 80121ec:	d853      	bhi.n	8012296 <USBD_StdDevReq+0xc6>
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d00b      	beq.n	801220a <USBD_StdDevReq+0x3a>
 80121f2:	2b20      	cmp	r3, #32
 80121f4:	d14f      	bne.n	8012296 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121fc:	689b      	ldr	r3, [r3, #8]
 80121fe:	6839      	ldr	r1, [r7, #0]
 8012200:	6878      	ldr	r0, [r7, #4]
 8012202:	4798      	blx	r3
 8012204:	4603      	mov	r3, r0
 8012206:	73fb      	strb	r3, [r7, #15]
      break;
 8012208:	e04a      	b.n	80122a0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801220a:	683b      	ldr	r3, [r7, #0]
 801220c:	785b      	ldrb	r3, [r3, #1]
 801220e:	2b09      	cmp	r3, #9
 8012210:	d83b      	bhi.n	801228a <USBD_StdDevReq+0xba>
 8012212:	a201      	add	r2, pc, #4	; (adr r2, 8012218 <USBD_StdDevReq+0x48>)
 8012214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012218:	0801226d 	.word	0x0801226d
 801221c:	08012281 	.word	0x08012281
 8012220:	0801228b 	.word	0x0801228b
 8012224:	08012277 	.word	0x08012277
 8012228:	0801228b 	.word	0x0801228b
 801222c:	0801224b 	.word	0x0801224b
 8012230:	08012241 	.word	0x08012241
 8012234:	0801228b 	.word	0x0801228b
 8012238:	08012263 	.word	0x08012263
 801223c:	08012255 	.word	0x08012255
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012240:	6839      	ldr	r1, [r7, #0]
 8012242:	6878      	ldr	r0, [r7, #4]
 8012244:	f000 f9de 	bl	8012604 <USBD_GetDescriptor>
          break;
 8012248:	e024      	b.n	8012294 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801224a:	6839      	ldr	r1, [r7, #0]
 801224c:	6878      	ldr	r0, [r7, #4]
 801224e:	f000 fb43 	bl	80128d8 <USBD_SetAddress>
          break;
 8012252:	e01f      	b.n	8012294 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8012254:	6839      	ldr	r1, [r7, #0]
 8012256:	6878      	ldr	r0, [r7, #4]
 8012258:	f000 fb82 	bl	8012960 <USBD_SetConfig>
 801225c:	4603      	mov	r3, r0
 801225e:	73fb      	strb	r3, [r7, #15]
          break;
 8012260:	e018      	b.n	8012294 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012262:	6839      	ldr	r1, [r7, #0]
 8012264:	6878      	ldr	r0, [r7, #4]
 8012266:	f000 fc21 	bl	8012aac <USBD_GetConfig>
          break;
 801226a:	e013      	b.n	8012294 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801226c:	6839      	ldr	r1, [r7, #0]
 801226e:	6878      	ldr	r0, [r7, #4]
 8012270:	f000 fc52 	bl	8012b18 <USBD_GetStatus>
          break;
 8012274:	e00e      	b.n	8012294 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8012276:	6839      	ldr	r1, [r7, #0]
 8012278:	6878      	ldr	r0, [r7, #4]
 801227a:	f000 fc81 	bl	8012b80 <USBD_SetFeature>
          break;
 801227e:	e009      	b.n	8012294 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012280:	6839      	ldr	r1, [r7, #0]
 8012282:	6878      	ldr	r0, [r7, #4]
 8012284:	f000 fc90 	bl	8012ba8 <USBD_ClrFeature>
          break;
 8012288:	e004      	b.n	8012294 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801228a:	6839      	ldr	r1, [r7, #0]
 801228c:	6878      	ldr	r0, [r7, #4]
 801228e:	f000 fce7 	bl	8012c60 <USBD_CtlError>
          break;
 8012292:	bf00      	nop
      }
      break;
 8012294:	e004      	b.n	80122a0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8012296:	6839      	ldr	r1, [r7, #0]
 8012298:	6878      	ldr	r0, [r7, #4]
 801229a:	f000 fce1 	bl	8012c60 <USBD_CtlError>
      break;
 801229e:	bf00      	nop
  }

  return ret;
 80122a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80122a2:	4618      	mov	r0, r3
 80122a4:	3710      	adds	r7, #16
 80122a6:	46bd      	mov	sp, r7
 80122a8:	bd80      	pop	{r7, pc}
 80122aa:	bf00      	nop

080122ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80122ac:	b580      	push	{r7, lr}
 80122ae:	b084      	sub	sp, #16
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	6078      	str	r0, [r7, #4]
 80122b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80122b6:	2300      	movs	r3, #0
 80122b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80122ba:	683b      	ldr	r3, [r7, #0]
 80122bc:	781b      	ldrb	r3, [r3, #0]
 80122be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80122c2:	2b40      	cmp	r3, #64	; 0x40
 80122c4:	d005      	beq.n	80122d2 <USBD_StdItfReq+0x26>
 80122c6:	2b40      	cmp	r3, #64	; 0x40
 80122c8:	d82f      	bhi.n	801232a <USBD_StdItfReq+0x7e>
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d001      	beq.n	80122d2 <USBD_StdItfReq+0x26>
 80122ce:	2b20      	cmp	r3, #32
 80122d0:	d12b      	bne.n	801232a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80122d8:	b2db      	uxtb	r3, r3
 80122da:	3b01      	subs	r3, #1
 80122dc:	2b02      	cmp	r3, #2
 80122de:	d81d      	bhi.n	801231c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80122e0:	683b      	ldr	r3, [r7, #0]
 80122e2:	889b      	ldrh	r3, [r3, #4]
 80122e4:	b2db      	uxtb	r3, r3
 80122e6:	2b01      	cmp	r3, #1
 80122e8:	d813      	bhi.n	8012312 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122f0:	689b      	ldr	r3, [r3, #8]
 80122f2:	6839      	ldr	r1, [r7, #0]
 80122f4:	6878      	ldr	r0, [r7, #4]
 80122f6:	4798      	blx	r3
 80122f8:	4603      	mov	r3, r0
 80122fa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80122fc:	683b      	ldr	r3, [r7, #0]
 80122fe:	88db      	ldrh	r3, [r3, #6]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d110      	bne.n	8012326 <USBD_StdItfReq+0x7a>
 8012304:	7bfb      	ldrb	r3, [r7, #15]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d10d      	bne.n	8012326 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801230a:	6878      	ldr	r0, [r7, #4]
 801230c:	f000 fd73 	bl	8012df6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8012310:	e009      	b.n	8012326 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8012312:	6839      	ldr	r1, [r7, #0]
 8012314:	6878      	ldr	r0, [r7, #4]
 8012316:	f000 fca3 	bl	8012c60 <USBD_CtlError>
          break;
 801231a:	e004      	b.n	8012326 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 801231c:	6839      	ldr	r1, [r7, #0]
 801231e:	6878      	ldr	r0, [r7, #4]
 8012320:	f000 fc9e 	bl	8012c60 <USBD_CtlError>
          break;
 8012324:	e000      	b.n	8012328 <USBD_StdItfReq+0x7c>
          break;
 8012326:	bf00      	nop
      }
      break;
 8012328:	e004      	b.n	8012334 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801232a:	6839      	ldr	r1, [r7, #0]
 801232c:	6878      	ldr	r0, [r7, #4]
 801232e:	f000 fc97 	bl	8012c60 <USBD_CtlError>
      break;
 8012332:	bf00      	nop
  }

  return ret;
 8012334:	7bfb      	ldrb	r3, [r7, #15]
}
 8012336:	4618      	mov	r0, r3
 8012338:	3710      	adds	r7, #16
 801233a:	46bd      	mov	sp, r7
 801233c:	bd80      	pop	{r7, pc}

0801233e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801233e:	b580      	push	{r7, lr}
 8012340:	b084      	sub	sp, #16
 8012342:	af00      	add	r7, sp, #0
 8012344:	6078      	str	r0, [r7, #4]
 8012346:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8012348:	2300      	movs	r3, #0
 801234a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801234c:	683b      	ldr	r3, [r7, #0]
 801234e:	889b      	ldrh	r3, [r3, #4]
 8012350:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012352:	683b      	ldr	r3, [r7, #0]
 8012354:	781b      	ldrb	r3, [r3, #0]
 8012356:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801235a:	2b40      	cmp	r3, #64	; 0x40
 801235c:	d007      	beq.n	801236e <USBD_StdEPReq+0x30>
 801235e:	2b40      	cmp	r3, #64	; 0x40
 8012360:	f200 8145 	bhi.w	80125ee <USBD_StdEPReq+0x2b0>
 8012364:	2b00      	cmp	r3, #0
 8012366:	d00c      	beq.n	8012382 <USBD_StdEPReq+0x44>
 8012368:	2b20      	cmp	r3, #32
 801236a:	f040 8140 	bne.w	80125ee <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012374:	689b      	ldr	r3, [r3, #8]
 8012376:	6839      	ldr	r1, [r7, #0]
 8012378:	6878      	ldr	r0, [r7, #4]
 801237a:	4798      	blx	r3
 801237c:	4603      	mov	r3, r0
 801237e:	73fb      	strb	r3, [r7, #15]
      break;
 8012380:	e13a      	b.n	80125f8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012382:	683b      	ldr	r3, [r7, #0]
 8012384:	785b      	ldrb	r3, [r3, #1]
 8012386:	2b03      	cmp	r3, #3
 8012388:	d007      	beq.n	801239a <USBD_StdEPReq+0x5c>
 801238a:	2b03      	cmp	r3, #3
 801238c:	f300 8129 	bgt.w	80125e2 <USBD_StdEPReq+0x2a4>
 8012390:	2b00      	cmp	r3, #0
 8012392:	d07f      	beq.n	8012494 <USBD_StdEPReq+0x156>
 8012394:	2b01      	cmp	r3, #1
 8012396:	d03c      	beq.n	8012412 <USBD_StdEPReq+0xd4>
 8012398:	e123      	b.n	80125e2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80123a0:	b2db      	uxtb	r3, r3
 80123a2:	2b02      	cmp	r3, #2
 80123a4:	d002      	beq.n	80123ac <USBD_StdEPReq+0x6e>
 80123a6:	2b03      	cmp	r3, #3
 80123a8:	d016      	beq.n	80123d8 <USBD_StdEPReq+0x9a>
 80123aa:	e02c      	b.n	8012406 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80123ac:	7bbb      	ldrb	r3, [r7, #14]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d00d      	beq.n	80123ce <USBD_StdEPReq+0x90>
 80123b2:	7bbb      	ldrb	r3, [r7, #14]
 80123b4:	2b80      	cmp	r3, #128	; 0x80
 80123b6:	d00a      	beq.n	80123ce <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80123b8:	7bbb      	ldrb	r3, [r7, #14]
 80123ba:	4619      	mov	r1, r3
 80123bc:	6878      	ldr	r0, [r7, #4]
 80123be:	f007 faed 	bl	801999c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80123c2:	2180      	movs	r1, #128	; 0x80
 80123c4:	6878      	ldr	r0, [r7, #4]
 80123c6:	f007 fae9 	bl	801999c <USBD_LL_StallEP>
 80123ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80123cc:	e020      	b.n	8012410 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80123ce:	6839      	ldr	r1, [r7, #0]
 80123d0:	6878      	ldr	r0, [r7, #4]
 80123d2:	f000 fc45 	bl	8012c60 <USBD_CtlError>
              break;
 80123d6:	e01b      	b.n	8012410 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80123d8:	683b      	ldr	r3, [r7, #0]
 80123da:	885b      	ldrh	r3, [r3, #2]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d10e      	bne.n	80123fe <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80123e0:	7bbb      	ldrb	r3, [r7, #14]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d00b      	beq.n	80123fe <USBD_StdEPReq+0xc0>
 80123e6:	7bbb      	ldrb	r3, [r7, #14]
 80123e8:	2b80      	cmp	r3, #128	; 0x80
 80123ea:	d008      	beq.n	80123fe <USBD_StdEPReq+0xc0>
 80123ec:	683b      	ldr	r3, [r7, #0]
 80123ee:	88db      	ldrh	r3, [r3, #6]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d104      	bne.n	80123fe <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80123f4:	7bbb      	ldrb	r3, [r7, #14]
 80123f6:	4619      	mov	r1, r3
 80123f8:	6878      	ldr	r0, [r7, #4]
 80123fa:	f007 facf 	bl	801999c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80123fe:	6878      	ldr	r0, [r7, #4]
 8012400:	f000 fcf9 	bl	8012df6 <USBD_CtlSendStatus>

              break;
 8012404:	e004      	b.n	8012410 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8012406:	6839      	ldr	r1, [r7, #0]
 8012408:	6878      	ldr	r0, [r7, #4]
 801240a:	f000 fc29 	bl	8012c60 <USBD_CtlError>
              break;
 801240e:	bf00      	nop
          }
          break;
 8012410:	e0ec      	b.n	80125ec <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012418:	b2db      	uxtb	r3, r3
 801241a:	2b02      	cmp	r3, #2
 801241c:	d002      	beq.n	8012424 <USBD_StdEPReq+0xe6>
 801241e:	2b03      	cmp	r3, #3
 8012420:	d016      	beq.n	8012450 <USBD_StdEPReq+0x112>
 8012422:	e030      	b.n	8012486 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012424:	7bbb      	ldrb	r3, [r7, #14]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d00d      	beq.n	8012446 <USBD_StdEPReq+0x108>
 801242a:	7bbb      	ldrb	r3, [r7, #14]
 801242c:	2b80      	cmp	r3, #128	; 0x80
 801242e:	d00a      	beq.n	8012446 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012430:	7bbb      	ldrb	r3, [r7, #14]
 8012432:	4619      	mov	r1, r3
 8012434:	6878      	ldr	r0, [r7, #4]
 8012436:	f007 fab1 	bl	801999c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801243a:	2180      	movs	r1, #128	; 0x80
 801243c:	6878      	ldr	r0, [r7, #4]
 801243e:	f007 faad 	bl	801999c <USBD_LL_StallEP>
 8012442:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012444:	e025      	b.n	8012492 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8012446:	6839      	ldr	r1, [r7, #0]
 8012448:	6878      	ldr	r0, [r7, #4]
 801244a:	f000 fc09 	bl	8012c60 <USBD_CtlError>
              break;
 801244e:	e020      	b.n	8012492 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012450:	683b      	ldr	r3, [r7, #0]
 8012452:	885b      	ldrh	r3, [r3, #2]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d11b      	bne.n	8012490 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012458:	7bbb      	ldrb	r3, [r7, #14]
 801245a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801245e:	2b00      	cmp	r3, #0
 8012460:	d004      	beq.n	801246c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012462:	7bbb      	ldrb	r3, [r7, #14]
 8012464:	4619      	mov	r1, r3
 8012466:	6878      	ldr	r0, [r7, #4]
 8012468:	f007 fab7 	bl	80199da <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801246c:	6878      	ldr	r0, [r7, #4]
 801246e:	f000 fcc2 	bl	8012df6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012478:	689b      	ldr	r3, [r3, #8]
 801247a:	6839      	ldr	r1, [r7, #0]
 801247c:	6878      	ldr	r0, [r7, #4]
 801247e:	4798      	blx	r3
 8012480:	4603      	mov	r3, r0
 8012482:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8012484:	e004      	b.n	8012490 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8012486:	6839      	ldr	r1, [r7, #0]
 8012488:	6878      	ldr	r0, [r7, #4]
 801248a:	f000 fbe9 	bl	8012c60 <USBD_CtlError>
              break;
 801248e:	e000      	b.n	8012492 <USBD_StdEPReq+0x154>
              break;
 8012490:	bf00      	nop
          }
          break;
 8012492:	e0ab      	b.n	80125ec <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801249a:	b2db      	uxtb	r3, r3
 801249c:	2b02      	cmp	r3, #2
 801249e:	d002      	beq.n	80124a6 <USBD_StdEPReq+0x168>
 80124a0:	2b03      	cmp	r3, #3
 80124a2:	d032      	beq.n	801250a <USBD_StdEPReq+0x1cc>
 80124a4:	e097      	b.n	80125d6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80124a6:	7bbb      	ldrb	r3, [r7, #14]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d007      	beq.n	80124bc <USBD_StdEPReq+0x17e>
 80124ac:	7bbb      	ldrb	r3, [r7, #14]
 80124ae:	2b80      	cmp	r3, #128	; 0x80
 80124b0:	d004      	beq.n	80124bc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80124b2:	6839      	ldr	r1, [r7, #0]
 80124b4:	6878      	ldr	r0, [r7, #4]
 80124b6:	f000 fbd3 	bl	8012c60 <USBD_CtlError>
                break;
 80124ba:	e091      	b.n	80125e0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80124bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	da0b      	bge.n	80124dc <USBD_StdEPReq+0x19e>
 80124c4:	7bbb      	ldrb	r3, [r7, #14]
 80124c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80124ca:	4613      	mov	r3, r2
 80124cc:	009b      	lsls	r3, r3, #2
 80124ce:	4413      	add	r3, r2
 80124d0:	009b      	lsls	r3, r3, #2
 80124d2:	3310      	adds	r3, #16
 80124d4:	687a      	ldr	r2, [r7, #4]
 80124d6:	4413      	add	r3, r2
 80124d8:	3304      	adds	r3, #4
 80124da:	e00b      	b.n	80124f4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80124dc:	7bbb      	ldrb	r3, [r7, #14]
 80124de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80124e2:	4613      	mov	r3, r2
 80124e4:	009b      	lsls	r3, r3, #2
 80124e6:	4413      	add	r3, r2
 80124e8:	009b      	lsls	r3, r3, #2
 80124ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80124ee:	687a      	ldr	r2, [r7, #4]
 80124f0:	4413      	add	r3, r2
 80124f2:	3304      	adds	r3, #4
 80124f4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80124f6:	68bb      	ldr	r3, [r7, #8]
 80124f8:	2200      	movs	r2, #0
 80124fa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80124fc:	68bb      	ldr	r3, [r7, #8]
 80124fe:	2202      	movs	r2, #2
 8012500:	4619      	mov	r1, r3
 8012502:	6878      	ldr	r0, [r7, #4]
 8012504:	f000 fc1d 	bl	8012d42 <USBD_CtlSendData>
              break;
 8012508:	e06a      	b.n	80125e0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801250a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801250e:	2b00      	cmp	r3, #0
 8012510:	da11      	bge.n	8012536 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012512:	7bbb      	ldrb	r3, [r7, #14]
 8012514:	f003 020f 	and.w	r2, r3, #15
 8012518:	6879      	ldr	r1, [r7, #4]
 801251a:	4613      	mov	r3, r2
 801251c:	009b      	lsls	r3, r3, #2
 801251e:	4413      	add	r3, r2
 8012520:	009b      	lsls	r3, r3, #2
 8012522:	440b      	add	r3, r1
 8012524:	3324      	adds	r3, #36	; 0x24
 8012526:	881b      	ldrh	r3, [r3, #0]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d117      	bne.n	801255c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801252c:	6839      	ldr	r1, [r7, #0]
 801252e:	6878      	ldr	r0, [r7, #4]
 8012530:	f000 fb96 	bl	8012c60 <USBD_CtlError>
                  break;
 8012534:	e054      	b.n	80125e0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012536:	7bbb      	ldrb	r3, [r7, #14]
 8012538:	f003 020f 	and.w	r2, r3, #15
 801253c:	6879      	ldr	r1, [r7, #4]
 801253e:	4613      	mov	r3, r2
 8012540:	009b      	lsls	r3, r3, #2
 8012542:	4413      	add	r3, r2
 8012544:	009b      	lsls	r3, r3, #2
 8012546:	440b      	add	r3, r1
 8012548:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801254c:	881b      	ldrh	r3, [r3, #0]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d104      	bne.n	801255c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8012552:	6839      	ldr	r1, [r7, #0]
 8012554:	6878      	ldr	r0, [r7, #4]
 8012556:	f000 fb83 	bl	8012c60 <USBD_CtlError>
                  break;
 801255a:	e041      	b.n	80125e0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801255c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012560:	2b00      	cmp	r3, #0
 8012562:	da0b      	bge.n	801257c <USBD_StdEPReq+0x23e>
 8012564:	7bbb      	ldrb	r3, [r7, #14]
 8012566:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801256a:	4613      	mov	r3, r2
 801256c:	009b      	lsls	r3, r3, #2
 801256e:	4413      	add	r3, r2
 8012570:	009b      	lsls	r3, r3, #2
 8012572:	3310      	adds	r3, #16
 8012574:	687a      	ldr	r2, [r7, #4]
 8012576:	4413      	add	r3, r2
 8012578:	3304      	adds	r3, #4
 801257a:	e00b      	b.n	8012594 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801257c:	7bbb      	ldrb	r3, [r7, #14]
 801257e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012582:	4613      	mov	r3, r2
 8012584:	009b      	lsls	r3, r3, #2
 8012586:	4413      	add	r3, r2
 8012588:	009b      	lsls	r3, r3, #2
 801258a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801258e:	687a      	ldr	r2, [r7, #4]
 8012590:	4413      	add	r3, r2
 8012592:	3304      	adds	r3, #4
 8012594:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012596:	7bbb      	ldrb	r3, [r7, #14]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d002      	beq.n	80125a2 <USBD_StdEPReq+0x264>
 801259c:	7bbb      	ldrb	r3, [r7, #14]
 801259e:	2b80      	cmp	r3, #128	; 0x80
 80125a0:	d103      	bne.n	80125aa <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80125a2:	68bb      	ldr	r3, [r7, #8]
 80125a4:	2200      	movs	r2, #0
 80125a6:	601a      	str	r2, [r3, #0]
 80125a8:	e00e      	b.n	80125c8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80125aa:	7bbb      	ldrb	r3, [r7, #14]
 80125ac:	4619      	mov	r1, r3
 80125ae:	6878      	ldr	r0, [r7, #4]
 80125b0:	f007 fa32 	bl	8019a18 <USBD_LL_IsStallEP>
 80125b4:	4603      	mov	r3, r0
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d003      	beq.n	80125c2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	2201      	movs	r2, #1
 80125be:	601a      	str	r2, [r3, #0]
 80125c0:	e002      	b.n	80125c8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80125c2:	68bb      	ldr	r3, [r7, #8]
 80125c4:	2200      	movs	r2, #0
 80125c6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80125c8:	68bb      	ldr	r3, [r7, #8]
 80125ca:	2202      	movs	r2, #2
 80125cc:	4619      	mov	r1, r3
 80125ce:	6878      	ldr	r0, [r7, #4]
 80125d0:	f000 fbb7 	bl	8012d42 <USBD_CtlSendData>
              break;
 80125d4:	e004      	b.n	80125e0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80125d6:	6839      	ldr	r1, [r7, #0]
 80125d8:	6878      	ldr	r0, [r7, #4]
 80125da:	f000 fb41 	bl	8012c60 <USBD_CtlError>
              break;
 80125de:	bf00      	nop
          }
          break;
 80125e0:	e004      	b.n	80125ec <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80125e2:	6839      	ldr	r1, [r7, #0]
 80125e4:	6878      	ldr	r0, [r7, #4]
 80125e6:	f000 fb3b 	bl	8012c60 <USBD_CtlError>
          break;
 80125ea:	bf00      	nop
      }
      break;
 80125ec:	e004      	b.n	80125f8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80125ee:	6839      	ldr	r1, [r7, #0]
 80125f0:	6878      	ldr	r0, [r7, #4]
 80125f2:	f000 fb35 	bl	8012c60 <USBD_CtlError>
      break;
 80125f6:	bf00      	nop
  }

  return ret;
 80125f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80125fa:	4618      	mov	r0, r3
 80125fc:	3710      	adds	r7, #16
 80125fe:	46bd      	mov	sp, r7
 8012600:	bd80      	pop	{r7, pc}
	...

08012604 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012604:	b580      	push	{r7, lr}
 8012606:	b084      	sub	sp, #16
 8012608:	af00      	add	r7, sp, #0
 801260a:	6078      	str	r0, [r7, #4]
 801260c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801260e:	2300      	movs	r3, #0
 8012610:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012612:	2300      	movs	r3, #0
 8012614:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012616:	2300      	movs	r3, #0
 8012618:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801261a:	683b      	ldr	r3, [r7, #0]
 801261c:	885b      	ldrh	r3, [r3, #2]
 801261e:	0a1b      	lsrs	r3, r3, #8
 8012620:	b29b      	uxth	r3, r3
 8012622:	3b01      	subs	r3, #1
 8012624:	2b06      	cmp	r3, #6
 8012626:	f200 8128 	bhi.w	801287a <USBD_GetDescriptor+0x276>
 801262a:	a201      	add	r2, pc, #4	; (adr r2, 8012630 <USBD_GetDescriptor+0x2c>)
 801262c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012630:	0801264d 	.word	0x0801264d
 8012634:	08012665 	.word	0x08012665
 8012638:	080126a5 	.word	0x080126a5
 801263c:	0801287b 	.word	0x0801287b
 8012640:	0801287b 	.word	0x0801287b
 8012644:	0801281b 	.word	0x0801281b
 8012648:	08012847 	.word	0x08012847
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	687a      	ldr	r2, [r7, #4]
 8012656:	7c12      	ldrb	r2, [r2, #16]
 8012658:	f107 0108 	add.w	r1, r7, #8
 801265c:	4610      	mov	r0, r2
 801265e:	4798      	blx	r3
 8012660:	60f8      	str	r0, [r7, #12]
      break;
 8012662:	e112      	b.n	801288a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	7c1b      	ldrb	r3, [r3, #16]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d10d      	bne.n	8012688 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012674:	f107 0208 	add.w	r2, r7, #8
 8012678:	4610      	mov	r0, r2
 801267a:	4798      	blx	r3
 801267c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	3301      	adds	r3, #1
 8012682:	2202      	movs	r2, #2
 8012684:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012686:	e100      	b.n	801288a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801268e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012690:	f107 0208 	add.w	r2, r7, #8
 8012694:	4610      	mov	r0, r2
 8012696:	4798      	blx	r3
 8012698:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	3301      	adds	r3, #1
 801269e:	2202      	movs	r2, #2
 80126a0:	701a      	strb	r2, [r3, #0]
      break;
 80126a2:	e0f2      	b.n	801288a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80126a4:	683b      	ldr	r3, [r7, #0]
 80126a6:	885b      	ldrh	r3, [r3, #2]
 80126a8:	b2db      	uxtb	r3, r3
 80126aa:	2b05      	cmp	r3, #5
 80126ac:	f200 80ac 	bhi.w	8012808 <USBD_GetDescriptor+0x204>
 80126b0:	a201      	add	r2, pc, #4	; (adr r2, 80126b8 <USBD_GetDescriptor+0xb4>)
 80126b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126b6:	bf00      	nop
 80126b8:	080126d1 	.word	0x080126d1
 80126bc:	08012705 	.word	0x08012705
 80126c0:	08012739 	.word	0x08012739
 80126c4:	0801276d 	.word	0x0801276d
 80126c8:	080127a1 	.word	0x080127a1
 80126cc:	080127d5 	.word	0x080127d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80126d6:	685b      	ldr	r3, [r3, #4]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d00b      	beq.n	80126f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80126e2:	685b      	ldr	r3, [r3, #4]
 80126e4:	687a      	ldr	r2, [r7, #4]
 80126e6:	7c12      	ldrb	r2, [r2, #16]
 80126e8:	f107 0108 	add.w	r1, r7, #8
 80126ec:	4610      	mov	r0, r2
 80126ee:	4798      	blx	r3
 80126f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80126f2:	e091      	b.n	8012818 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80126f4:	6839      	ldr	r1, [r7, #0]
 80126f6:	6878      	ldr	r0, [r7, #4]
 80126f8:	f000 fab2 	bl	8012c60 <USBD_CtlError>
            err++;
 80126fc:	7afb      	ldrb	r3, [r7, #11]
 80126fe:	3301      	adds	r3, #1
 8012700:	72fb      	strb	r3, [r7, #11]
          break;
 8012702:	e089      	b.n	8012818 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801270a:	689b      	ldr	r3, [r3, #8]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d00b      	beq.n	8012728 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012716:	689b      	ldr	r3, [r3, #8]
 8012718:	687a      	ldr	r2, [r7, #4]
 801271a:	7c12      	ldrb	r2, [r2, #16]
 801271c:	f107 0108 	add.w	r1, r7, #8
 8012720:	4610      	mov	r0, r2
 8012722:	4798      	blx	r3
 8012724:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012726:	e077      	b.n	8012818 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012728:	6839      	ldr	r1, [r7, #0]
 801272a:	6878      	ldr	r0, [r7, #4]
 801272c:	f000 fa98 	bl	8012c60 <USBD_CtlError>
            err++;
 8012730:	7afb      	ldrb	r3, [r7, #11]
 8012732:	3301      	adds	r3, #1
 8012734:	72fb      	strb	r3, [r7, #11]
          break;
 8012736:	e06f      	b.n	8012818 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801273e:	68db      	ldr	r3, [r3, #12]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d00b      	beq.n	801275c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801274a:	68db      	ldr	r3, [r3, #12]
 801274c:	687a      	ldr	r2, [r7, #4]
 801274e:	7c12      	ldrb	r2, [r2, #16]
 8012750:	f107 0108 	add.w	r1, r7, #8
 8012754:	4610      	mov	r0, r2
 8012756:	4798      	blx	r3
 8012758:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801275a:	e05d      	b.n	8012818 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801275c:	6839      	ldr	r1, [r7, #0]
 801275e:	6878      	ldr	r0, [r7, #4]
 8012760:	f000 fa7e 	bl	8012c60 <USBD_CtlError>
            err++;
 8012764:	7afb      	ldrb	r3, [r7, #11]
 8012766:	3301      	adds	r3, #1
 8012768:	72fb      	strb	r3, [r7, #11]
          break;
 801276a:	e055      	b.n	8012818 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012772:	691b      	ldr	r3, [r3, #16]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d00b      	beq.n	8012790 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801277e:	691b      	ldr	r3, [r3, #16]
 8012780:	687a      	ldr	r2, [r7, #4]
 8012782:	7c12      	ldrb	r2, [r2, #16]
 8012784:	f107 0108 	add.w	r1, r7, #8
 8012788:	4610      	mov	r0, r2
 801278a:	4798      	blx	r3
 801278c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801278e:	e043      	b.n	8012818 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012790:	6839      	ldr	r1, [r7, #0]
 8012792:	6878      	ldr	r0, [r7, #4]
 8012794:	f000 fa64 	bl	8012c60 <USBD_CtlError>
            err++;
 8012798:	7afb      	ldrb	r3, [r7, #11]
 801279a:	3301      	adds	r3, #1
 801279c:	72fb      	strb	r3, [r7, #11]
          break;
 801279e:	e03b      	b.n	8012818 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80127a6:	695b      	ldr	r3, [r3, #20]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d00b      	beq.n	80127c4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80127b2:	695b      	ldr	r3, [r3, #20]
 80127b4:	687a      	ldr	r2, [r7, #4]
 80127b6:	7c12      	ldrb	r2, [r2, #16]
 80127b8:	f107 0108 	add.w	r1, r7, #8
 80127bc:	4610      	mov	r0, r2
 80127be:	4798      	blx	r3
 80127c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80127c2:	e029      	b.n	8012818 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80127c4:	6839      	ldr	r1, [r7, #0]
 80127c6:	6878      	ldr	r0, [r7, #4]
 80127c8:	f000 fa4a 	bl	8012c60 <USBD_CtlError>
            err++;
 80127cc:	7afb      	ldrb	r3, [r7, #11]
 80127ce:	3301      	adds	r3, #1
 80127d0:	72fb      	strb	r3, [r7, #11]
          break;
 80127d2:	e021      	b.n	8012818 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80127da:	699b      	ldr	r3, [r3, #24]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d00b      	beq.n	80127f8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80127e6:	699b      	ldr	r3, [r3, #24]
 80127e8:	687a      	ldr	r2, [r7, #4]
 80127ea:	7c12      	ldrb	r2, [r2, #16]
 80127ec:	f107 0108 	add.w	r1, r7, #8
 80127f0:	4610      	mov	r0, r2
 80127f2:	4798      	blx	r3
 80127f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80127f6:	e00f      	b.n	8012818 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80127f8:	6839      	ldr	r1, [r7, #0]
 80127fa:	6878      	ldr	r0, [r7, #4]
 80127fc:	f000 fa30 	bl	8012c60 <USBD_CtlError>
            err++;
 8012800:	7afb      	ldrb	r3, [r7, #11]
 8012802:	3301      	adds	r3, #1
 8012804:	72fb      	strb	r3, [r7, #11]
          break;
 8012806:	e007      	b.n	8012818 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012808:	6839      	ldr	r1, [r7, #0]
 801280a:	6878      	ldr	r0, [r7, #4]
 801280c:	f000 fa28 	bl	8012c60 <USBD_CtlError>
          err++;
 8012810:	7afb      	ldrb	r3, [r7, #11]
 8012812:	3301      	adds	r3, #1
 8012814:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8012816:	bf00      	nop
      }
      break;
 8012818:	e037      	b.n	801288a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	7c1b      	ldrb	r3, [r3, #16]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d109      	bne.n	8012836 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801282a:	f107 0208 	add.w	r2, r7, #8
 801282e:	4610      	mov	r0, r2
 8012830:	4798      	blx	r3
 8012832:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012834:	e029      	b.n	801288a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8012836:	6839      	ldr	r1, [r7, #0]
 8012838:	6878      	ldr	r0, [r7, #4]
 801283a:	f000 fa11 	bl	8012c60 <USBD_CtlError>
        err++;
 801283e:	7afb      	ldrb	r3, [r7, #11]
 8012840:	3301      	adds	r3, #1
 8012842:	72fb      	strb	r3, [r7, #11]
      break;
 8012844:	e021      	b.n	801288a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	7c1b      	ldrb	r3, [r3, #16]
 801284a:	2b00      	cmp	r3, #0
 801284c:	d10d      	bne.n	801286a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012856:	f107 0208 	add.w	r2, r7, #8
 801285a:	4610      	mov	r0, r2
 801285c:	4798      	blx	r3
 801285e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	3301      	adds	r3, #1
 8012864:	2207      	movs	r2, #7
 8012866:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012868:	e00f      	b.n	801288a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801286a:	6839      	ldr	r1, [r7, #0]
 801286c:	6878      	ldr	r0, [r7, #4]
 801286e:	f000 f9f7 	bl	8012c60 <USBD_CtlError>
        err++;
 8012872:	7afb      	ldrb	r3, [r7, #11]
 8012874:	3301      	adds	r3, #1
 8012876:	72fb      	strb	r3, [r7, #11]
      break;
 8012878:	e007      	b.n	801288a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801287a:	6839      	ldr	r1, [r7, #0]
 801287c:	6878      	ldr	r0, [r7, #4]
 801287e:	f000 f9ef 	bl	8012c60 <USBD_CtlError>
      err++;
 8012882:	7afb      	ldrb	r3, [r7, #11]
 8012884:	3301      	adds	r3, #1
 8012886:	72fb      	strb	r3, [r7, #11]
      break;
 8012888:	bf00      	nop
  }

  if (err != 0U)
 801288a:	7afb      	ldrb	r3, [r7, #11]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d11e      	bne.n	80128ce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8012890:	683b      	ldr	r3, [r7, #0]
 8012892:	88db      	ldrh	r3, [r3, #6]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d016      	beq.n	80128c6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8012898:	893b      	ldrh	r3, [r7, #8]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d00e      	beq.n	80128bc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801289e:	683b      	ldr	r3, [r7, #0]
 80128a0:	88da      	ldrh	r2, [r3, #6]
 80128a2:	893b      	ldrh	r3, [r7, #8]
 80128a4:	4293      	cmp	r3, r2
 80128a6:	bf28      	it	cs
 80128a8:	4613      	movcs	r3, r2
 80128aa:	b29b      	uxth	r3, r3
 80128ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80128ae:	893b      	ldrh	r3, [r7, #8]
 80128b0:	461a      	mov	r2, r3
 80128b2:	68f9      	ldr	r1, [r7, #12]
 80128b4:	6878      	ldr	r0, [r7, #4]
 80128b6:	f000 fa44 	bl	8012d42 <USBD_CtlSendData>
 80128ba:	e009      	b.n	80128d0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80128bc:	6839      	ldr	r1, [r7, #0]
 80128be:	6878      	ldr	r0, [r7, #4]
 80128c0:	f000 f9ce 	bl	8012c60 <USBD_CtlError>
 80128c4:	e004      	b.n	80128d0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80128c6:	6878      	ldr	r0, [r7, #4]
 80128c8:	f000 fa95 	bl	8012df6 <USBD_CtlSendStatus>
 80128cc:	e000      	b.n	80128d0 <USBD_GetDescriptor+0x2cc>
    return;
 80128ce:	bf00      	nop
  }
}
 80128d0:	3710      	adds	r7, #16
 80128d2:	46bd      	mov	sp, r7
 80128d4:	bd80      	pop	{r7, pc}
 80128d6:	bf00      	nop

080128d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80128d8:	b580      	push	{r7, lr}
 80128da:	b084      	sub	sp, #16
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
 80128e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80128e2:	683b      	ldr	r3, [r7, #0]
 80128e4:	889b      	ldrh	r3, [r3, #4]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d131      	bne.n	801294e <USBD_SetAddress+0x76>
 80128ea:	683b      	ldr	r3, [r7, #0]
 80128ec:	88db      	ldrh	r3, [r3, #6]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d12d      	bne.n	801294e <USBD_SetAddress+0x76>
 80128f2:	683b      	ldr	r3, [r7, #0]
 80128f4:	885b      	ldrh	r3, [r3, #2]
 80128f6:	2b7f      	cmp	r3, #127	; 0x7f
 80128f8:	d829      	bhi.n	801294e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80128fa:	683b      	ldr	r3, [r7, #0]
 80128fc:	885b      	ldrh	r3, [r3, #2]
 80128fe:	b2db      	uxtb	r3, r3
 8012900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012904:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801290c:	b2db      	uxtb	r3, r3
 801290e:	2b03      	cmp	r3, #3
 8012910:	d104      	bne.n	801291c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012912:	6839      	ldr	r1, [r7, #0]
 8012914:	6878      	ldr	r0, [r7, #4]
 8012916:	f000 f9a3 	bl	8012c60 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801291a:	e01d      	b.n	8012958 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	7bfa      	ldrb	r2, [r7, #15]
 8012920:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012924:	7bfb      	ldrb	r3, [r7, #15]
 8012926:	4619      	mov	r1, r3
 8012928:	6878      	ldr	r0, [r7, #4]
 801292a:	f007 f8a1 	bl	8019a70 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801292e:	6878      	ldr	r0, [r7, #4]
 8012930:	f000 fa61 	bl	8012df6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012934:	7bfb      	ldrb	r3, [r7, #15]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d004      	beq.n	8012944 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	2202      	movs	r2, #2
 801293e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012942:	e009      	b.n	8012958 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	2201      	movs	r2, #1
 8012948:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801294c:	e004      	b.n	8012958 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801294e:	6839      	ldr	r1, [r7, #0]
 8012950:	6878      	ldr	r0, [r7, #4]
 8012952:	f000 f985 	bl	8012c60 <USBD_CtlError>
  }
}
 8012956:	bf00      	nop
 8012958:	bf00      	nop
 801295a:	3710      	adds	r7, #16
 801295c:	46bd      	mov	sp, r7
 801295e:	bd80      	pop	{r7, pc}

08012960 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b084      	sub	sp, #16
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
 8012968:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801296a:	2300      	movs	r3, #0
 801296c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801296e:	683b      	ldr	r3, [r7, #0]
 8012970:	885b      	ldrh	r3, [r3, #2]
 8012972:	b2da      	uxtb	r2, r3
 8012974:	4b4c      	ldr	r3, [pc, #304]	; (8012aa8 <USBD_SetConfig+0x148>)
 8012976:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012978:	4b4b      	ldr	r3, [pc, #300]	; (8012aa8 <USBD_SetConfig+0x148>)
 801297a:	781b      	ldrb	r3, [r3, #0]
 801297c:	2b01      	cmp	r3, #1
 801297e:	d905      	bls.n	801298c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012980:	6839      	ldr	r1, [r7, #0]
 8012982:	6878      	ldr	r0, [r7, #4]
 8012984:	f000 f96c 	bl	8012c60 <USBD_CtlError>
    return USBD_FAIL;
 8012988:	2303      	movs	r3, #3
 801298a:	e088      	b.n	8012a9e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012992:	b2db      	uxtb	r3, r3
 8012994:	2b02      	cmp	r3, #2
 8012996:	d002      	beq.n	801299e <USBD_SetConfig+0x3e>
 8012998:	2b03      	cmp	r3, #3
 801299a:	d025      	beq.n	80129e8 <USBD_SetConfig+0x88>
 801299c:	e071      	b.n	8012a82 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801299e:	4b42      	ldr	r3, [pc, #264]	; (8012aa8 <USBD_SetConfig+0x148>)
 80129a0:	781b      	ldrb	r3, [r3, #0]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d01c      	beq.n	80129e0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80129a6:	4b40      	ldr	r3, [pc, #256]	; (8012aa8 <USBD_SetConfig+0x148>)
 80129a8:	781b      	ldrb	r3, [r3, #0]
 80129aa:	461a      	mov	r2, r3
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80129b0:	4b3d      	ldr	r3, [pc, #244]	; (8012aa8 <USBD_SetConfig+0x148>)
 80129b2:	781b      	ldrb	r3, [r3, #0]
 80129b4:	4619      	mov	r1, r3
 80129b6:	6878      	ldr	r0, [r7, #4]
 80129b8:	f7ff f948 	bl	8011c4c <USBD_SetClassConfig>
 80129bc:	4603      	mov	r3, r0
 80129be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80129c0:	7bfb      	ldrb	r3, [r7, #15]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d004      	beq.n	80129d0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80129c6:	6839      	ldr	r1, [r7, #0]
 80129c8:	6878      	ldr	r0, [r7, #4]
 80129ca:	f000 f949 	bl	8012c60 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80129ce:	e065      	b.n	8012a9c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80129d0:	6878      	ldr	r0, [r7, #4]
 80129d2:	f000 fa10 	bl	8012df6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	2203      	movs	r2, #3
 80129da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80129de:	e05d      	b.n	8012a9c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80129e0:	6878      	ldr	r0, [r7, #4]
 80129e2:	f000 fa08 	bl	8012df6 <USBD_CtlSendStatus>
      break;
 80129e6:	e059      	b.n	8012a9c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80129e8:	4b2f      	ldr	r3, [pc, #188]	; (8012aa8 <USBD_SetConfig+0x148>)
 80129ea:	781b      	ldrb	r3, [r3, #0]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d112      	bne.n	8012a16 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	2202      	movs	r2, #2
 80129f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80129f8:	4b2b      	ldr	r3, [pc, #172]	; (8012aa8 <USBD_SetConfig+0x148>)
 80129fa:	781b      	ldrb	r3, [r3, #0]
 80129fc:	461a      	mov	r2, r3
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012a02:	4b29      	ldr	r3, [pc, #164]	; (8012aa8 <USBD_SetConfig+0x148>)
 8012a04:	781b      	ldrb	r3, [r3, #0]
 8012a06:	4619      	mov	r1, r3
 8012a08:	6878      	ldr	r0, [r7, #4]
 8012a0a:	f7ff f93b 	bl	8011c84 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012a0e:	6878      	ldr	r0, [r7, #4]
 8012a10:	f000 f9f1 	bl	8012df6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012a14:	e042      	b.n	8012a9c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8012a16:	4b24      	ldr	r3, [pc, #144]	; (8012aa8 <USBD_SetConfig+0x148>)
 8012a18:	781b      	ldrb	r3, [r3, #0]
 8012a1a:	461a      	mov	r2, r3
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	685b      	ldr	r3, [r3, #4]
 8012a20:	429a      	cmp	r2, r3
 8012a22:	d02a      	beq.n	8012a7a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	685b      	ldr	r3, [r3, #4]
 8012a28:	b2db      	uxtb	r3, r3
 8012a2a:	4619      	mov	r1, r3
 8012a2c:	6878      	ldr	r0, [r7, #4]
 8012a2e:	f7ff f929 	bl	8011c84 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012a32:	4b1d      	ldr	r3, [pc, #116]	; (8012aa8 <USBD_SetConfig+0x148>)
 8012a34:	781b      	ldrb	r3, [r3, #0]
 8012a36:	461a      	mov	r2, r3
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012a3c:	4b1a      	ldr	r3, [pc, #104]	; (8012aa8 <USBD_SetConfig+0x148>)
 8012a3e:	781b      	ldrb	r3, [r3, #0]
 8012a40:	4619      	mov	r1, r3
 8012a42:	6878      	ldr	r0, [r7, #4]
 8012a44:	f7ff f902 	bl	8011c4c <USBD_SetClassConfig>
 8012a48:	4603      	mov	r3, r0
 8012a4a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012a4c:	7bfb      	ldrb	r3, [r7, #15]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d00f      	beq.n	8012a72 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8012a52:	6839      	ldr	r1, [r7, #0]
 8012a54:	6878      	ldr	r0, [r7, #4]
 8012a56:	f000 f903 	bl	8012c60 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	685b      	ldr	r3, [r3, #4]
 8012a5e:	b2db      	uxtb	r3, r3
 8012a60:	4619      	mov	r1, r3
 8012a62:	6878      	ldr	r0, [r7, #4]
 8012a64:	f7ff f90e 	bl	8011c84 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	2202      	movs	r2, #2
 8012a6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012a70:	e014      	b.n	8012a9c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012a72:	6878      	ldr	r0, [r7, #4]
 8012a74:	f000 f9bf 	bl	8012df6 <USBD_CtlSendStatus>
      break;
 8012a78:	e010      	b.n	8012a9c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012a7a:	6878      	ldr	r0, [r7, #4]
 8012a7c:	f000 f9bb 	bl	8012df6 <USBD_CtlSendStatus>
      break;
 8012a80:	e00c      	b.n	8012a9c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8012a82:	6839      	ldr	r1, [r7, #0]
 8012a84:	6878      	ldr	r0, [r7, #4]
 8012a86:	f000 f8eb 	bl	8012c60 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012a8a:	4b07      	ldr	r3, [pc, #28]	; (8012aa8 <USBD_SetConfig+0x148>)
 8012a8c:	781b      	ldrb	r3, [r3, #0]
 8012a8e:	4619      	mov	r1, r3
 8012a90:	6878      	ldr	r0, [r7, #4]
 8012a92:	f7ff f8f7 	bl	8011c84 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012a96:	2303      	movs	r3, #3
 8012a98:	73fb      	strb	r3, [r7, #15]
      break;
 8012a9a:	bf00      	nop
  }

  return ret;
 8012a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	3710      	adds	r7, #16
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	bd80      	pop	{r7, pc}
 8012aa6:	bf00      	nop
 8012aa8:	2000083c 	.word	0x2000083c

08012aac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012aac:	b580      	push	{r7, lr}
 8012aae:	b082      	sub	sp, #8
 8012ab0:	af00      	add	r7, sp, #0
 8012ab2:	6078      	str	r0, [r7, #4]
 8012ab4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012ab6:	683b      	ldr	r3, [r7, #0]
 8012ab8:	88db      	ldrh	r3, [r3, #6]
 8012aba:	2b01      	cmp	r3, #1
 8012abc:	d004      	beq.n	8012ac8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012abe:	6839      	ldr	r1, [r7, #0]
 8012ac0:	6878      	ldr	r0, [r7, #4]
 8012ac2:	f000 f8cd 	bl	8012c60 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012ac6:	e023      	b.n	8012b10 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012ace:	b2db      	uxtb	r3, r3
 8012ad0:	2b02      	cmp	r3, #2
 8012ad2:	dc02      	bgt.n	8012ada <USBD_GetConfig+0x2e>
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	dc03      	bgt.n	8012ae0 <USBD_GetConfig+0x34>
 8012ad8:	e015      	b.n	8012b06 <USBD_GetConfig+0x5a>
 8012ada:	2b03      	cmp	r3, #3
 8012adc:	d00b      	beq.n	8012af6 <USBD_GetConfig+0x4a>
 8012ade:	e012      	b.n	8012b06 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	2200      	movs	r2, #0
 8012ae4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	3308      	adds	r3, #8
 8012aea:	2201      	movs	r2, #1
 8012aec:	4619      	mov	r1, r3
 8012aee:	6878      	ldr	r0, [r7, #4]
 8012af0:	f000 f927 	bl	8012d42 <USBD_CtlSendData>
        break;
 8012af4:	e00c      	b.n	8012b10 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	3304      	adds	r3, #4
 8012afa:	2201      	movs	r2, #1
 8012afc:	4619      	mov	r1, r3
 8012afe:	6878      	ldr	r0, [r7, #4]
 8012b00:	f000 f91f 	bl	8012d42 <USBD_CtlSendData>
        break;
 8012b04:	e004      	b.n	8012b10 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012b06:	6839      	ldr	r1, [r7, #0]
 8012b08:	6878      	ldr	r0, [r7, #4]
 8012b0a:	f000 f8a9 	bl	8012c60 <USBD_CtlError>
        break;
 8012b0e:	bf00      	nop
}
 8012b10:	bf00      	nop
 8012b12:	3708      	adds	r7, #8
 8012b14:	46bd      	mov	sp, r7
 8012b16:	bd80      	pop	{r7, pc}

08012b18 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b082      	sub	sp, #8
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	6078      	str	r0, [r7, #4]
 8012b20:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012b28:	b2db      	uxtb	r3, r3
 8012b2a:	3b01      	subs	r3, #1
 8012b2c:	2b02      	cmp	r3, #2
 8012b2e:	d81e      	bhi.n	8012b6e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012b30:	683b      	ldr	r3, [r7, #0]
 8012b32:	88db      	ldrh	r3, [r3, #6]
 8012b34:	2b02      	cmp	r3, #2
 8012b36:	d004      	beq.n	8012b42 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012b38:	6839      	ldr	r1, [r7, #0]
 8012b3a:	6878      	ldr	r0, [r7, #4]
 8012b3c:	f000 f890 	bl	8012c60 <USBD_CtlError>
        break;
 8012b40:	e01a      	b.n	8012b78 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	2201      	movs	r2, #1
 8012b46:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d005      	beq.n	8012b5e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	68db      	ldr	r3, [r3, #12]
 8012b56:	f043 0202 	orr.w	r2, r3, #2
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	330c      	adds	r3, #12
 8012b62:	2202      	movs	r2, #2
 8012b64:	4619      	mov	r1, r3
 8012b66:	6878      	ldr	r0, [r7, #4]
 8012b68:	f000 f8eb 	bl	8012d42 <USBD_CtlSendData>
      break;
 8012b6c:	e004      	b.n	8012b78 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012b6e:	6839      	ldr	r1, [r7, #0]
 8012b70:	6878      	ldr	r0, [r7, #4]
 8012b72:	f000 f875 	bl	8012c60 <USBD_CtlError>
      break;
 8012b76:	bf00      	nop
  }
}
 8012b78:	bf00      	nop
 8012b7a:	3708      	adds	r7, #8
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	bd80      	pop	{r7, pc}

08012b80 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012b80:	b580      	push	{r7, lr}
 8012b82:	b082      	sub	sp, #8
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	6078      	str	r0, [r7, #4]
 8012b88:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012b8a:	683b      	ldr	r3, [r7, #0]
 8012b8c:	885b      	ldrh	r3, [r3, #2]
 8012b8e:	2b01      	cmp	r3, #1
 8012b90:	d106      	bne.n	8012ba0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	2201      	movs	r2, #1
 8012b96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012b9a:	6878      	ldr	r0, [r7, #4]
 8012b9c:	f000 f92b 	bl	8012df6 <USBD_CtlSendStatus>
  }
}
 8012ba0:	bf00      	nop
 8012ba2:	3708      	adds	r7, #8
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	bd80      	pop	{r7, pc}

08012ba8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012ba8:	b580      	push	{r7, lr}
 8012baa:	b082      	sub	sp, #8
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	6078      	str	r0, [r7, #4]
 8012bb0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012bb8:	b2db      	uxtb	r3, r3
 8012bba:	3b01      	subs	r3, #1
 8012bbc:	2b02      	cmp	r3, #2
 8012bbe:	d80b      	bhi.n	8012bd8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012bc0:	683b      	ldr	r3, [r7, #0]
 8012bc2:	885b      	ldrh	r3, [r3, #2]
 8012bc4:	2b01      	cmp	r3, #1
 8012bc6:	d10c      	bne.n	8012be2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	2200      	movs	r2, #0
 8012bcc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012bd0:	6878      	ldr	r0, [r7, #4]
 8012bd2:	f000 f910 	bl	8012df6 <USBD_CtlSendStatus>
      }
      break;
 8012bd6:	e004      	b.n	8012be2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8012bd8:	6839      	ldr	r1, [r7, #0]
 8012bda:	6878      	ldr	r0, [r7, #4]
 8012bdc:	f000 f840 	bl	8012c60 <USBD_CtlError>
      break;
 8012be0:	e000      	b.n	8012be4 <USBD_ClrFeature+0x3c>
      break;
 8012be2:	bf00      	nop
  }
}
 8012be4:	bf00      	nop
 8012be6:	3708      	adds	r7, #8
 8012be8:	46bd      	mov	sp, r7
 8012bea:	bd80      	pop	{r7, pc}

08012bec <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012bec:	b580      	push	{r7, lr}
 8012bee:	b084      	sub	sp, #16
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	6078      	str	r0, [r7, #4]
 8012bf4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012bf6:	683b      	ldr	r3, [r7, #0]
 8012bf8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	781a      	ldrb	r2, [r3, #0]
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	3301      	adds	r3, #1
 8012c06:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	781a      	ldrb	r2, [r3, #0]
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	3301      	adds	r3, #1
 8012c14:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012c16:	68f8      	ldr	r0, [r7, #12]
 8012c18:	f7ff fabb 	bl	8012192 <SWAPBYTE>
 8012c1c:	4603      	mov	r3, r0
 8012c1e:	461a      	mov	r2, r3
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	3301      	adds	r3, #1
 8012c28:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	3301      	adds	r3, #1
 8012c2e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012c30:	68f8      	ldr	r0, [r7, #12]
 8012c32:	f7ff faae 	bl	8012192 <SWAPBYTE>
 8012c36:	4603      	mov	r3, r0
 8012c38:	461a      	mov	r2, r3
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	3301      	adds	r3, #1
 8012c42:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	3301      	adds	r3, #1
 8012c48:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012c4a:	68f8      	ldr	r0, [r7, #12]
 8012c4c:	f7ff faa1 	bl	8012192 <SWAPBYTE>
 8012c50:	4603      	mov	r3, r0
 8012c52:	461a      	mov	r2, r3
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	80da      	strh	r2, [r3, #6]
}
 8012c58:	bf00      	nop
 8012c5a:	3710      	adds	r7, #16
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	bd80      	pop	{r7, pc}

08012c60 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012c60:	b580      	push	{r7, lr}
 8012c62:	b082      	sub	sp, #8
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	6078      	str	r0, [r7, #4]
 8012c68:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012c6a:	2180      	movs	r1, #128	; 0x80
 8012c6c:	6878      	ldr	r0, [r7, #4]
 8012c6e:	f006 fe95 	bl	801999c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012c72:	2100      	movs	r1, #0
 8012c74:	6878      	ldr	r0, [r7, #4]
 8012c76:	f006 fe91 	bl	801999c <USBD_LL_StallEP>
}
 8012c7a:	bf00      	nop
 8012c7c:	3708      	adds	r7, #8
 8012c7e:	46bd      	mov	sp, r7
 8012c80:	bd80      	pop	{r7, pc}

08012c82 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012c82:	b580      	push	{r7, lr}
 8012c84:	b086      	sub	sp, #24
 8012c86:	af00      	add	r7, sp, #0
 8012c88:	60f8      	str	r0, [r7, #12]
 8012c8a:	60b9      	str	r1, [r7, #8]
 8012c8c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012c8e:	2300      	movs	r3, #0
 8012c90:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d036      	beq.n	8012d06 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012c9c:	6938      	ldr	r0, [r7, #16]
 8012c9e:	f000 f836 	bl	8012d0e <USBD_GetLen>
 8012ca2:	4603      	mov	r3, r0
 8012ca4:	3301      	adds	r3, #1
 8012ca6:	b29b      	uxth	r3, r3
 8012ca8:	005b      	lsls	r3, r3, #1
 8012caa:	b29a      	uxth	r2, r3
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012cb0:	7dfb      	ldrb	r3, [r7, #23]
 8012cb2:	68ba      	ldr	r2, [r7, #8]
 8012cb4:	4413      	add	r3, r2
 8012cb6:	687a      	ldr	r2, [r7, #4]
 8012cb8:	7812      	ldrb	r2, [r2, #0]
 8012cba:	701a      	strb	r2, [r3, #0]
  idx++;
 8012cbc:	7dfb      	ldrb	r3, [r7, #23]
 8012cbe:	3301      	adds	r3, #1
 8012cc0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012cc2:	7dfb      	ldrb	r3, [r7, #23]
 8012cc4:	68ba      	ldr	r2, [r7, #8]
 8012cc6:	4413      	add	r3, r2
 8012cc8:	2203      	movs	r2, #3
 8012cca:	701a      	strb	r2, [r3, #0]
  idx++;
 8012ccc:	7dfb      	ldrb	r3, [r7, #23]
 8012cce:	3301      	adds	r3, #1
 8012cd0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012cd2:	e013      	b.n	8012cfc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012cd4:	7dfb      	ldrb	r3, [r7, #23]
 8012cd6:	68ba      	ldr	r2, [r7, #8]
 8012cd8:	4413      	add	r3, r2
 8012cda:	693a      	ldr	r2, [r7, #16]
 8012cdc:	7812      	ldrb	r2, [r2, #0]
 8012cde:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012ce0:	693b      	ldr	r3, [r7, #16]
 8012ce2:	3301      	adds	r3, #1
 8012ce4:	613b      	str	r3, [r7, #16]
    idx++;
 8012ce6:	7dfb      	ldrb	r3, [r7, #23]
 8012ce8:	3301      	adds	r3, #1
 8012cea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012cec:	7dfb      	ldrb	r3, [r7, #23]
 8012cee:	68ba      	ldr	r2, [r7, #8]
 8012cf0:	4413      	add	r3, r2
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	701a      	strb	r2, [r3, #0]
    idx++;
 8012cf6:	7dfb      	ldrb	r3, [r7, #23]
 8012cf8:	3301      	adds	r3, #1
 8012cfa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012cfc:	693b      	ldr	r3, [r7, #16]
 8012cfe:	781b      	ldrb	r3, [r3, #0]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d1e7      	bne.n	8012cd4 <USBD_GetString+0x52>
 8012d04:	e000      	b.n	8012d08 <USBD_GetString+0x86>
    return;
 8012d06:	bf00      	nop
  }
}
 8012d08:	3718      	adds	r7, #24
 8012d0a:	46bd      	mov	sp, r7
 8012d0c:	bd80      	pop	{r7, pc}

08012d0e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012d0e:	b480      	push	{r7}
 8012d10:	b085      	sub	sp, #20
 8012d12:	af00      	add	r7, sp, #0
 8012d14:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012d16:	2300      	movs	r3, #0
 8012d18:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012d1e:	e005      	b.n	8012d2c <USBD_GetLen+0x1e>
  {
    len++;
 8012d20:	7bfb      	ldrb	r3, [r7, #15]
 8012d22:	3301      	adds	r3, #1
 8012d24:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012d26:	68bb      	ldr	r3, [r7, #8]
 8012d28:	3301      	adds	r3, #1
 8012d2a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012d2c:	68bb      	ldr	r3, [r7, #8]
 8012d2e:	781b      	ldrb	r3, [r3, #0]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d1f5      	bne.n	8012d20 <USBD_GetLen+0x12>
  }

  return len;
 8012d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d36:	4618      	mov	r0, r3
 8012d38:	3714      	adds	r7, #20
 8012d3a:	46bd      	mov	sp, r7
 8012d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d40:	4770      	bx	lr

08012d42 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012d42:	b580      	push	{r7, lr}
 8012d44:	b084      	sub	sp, #16
 8012d46:	af00      	add	r7, sp, #0
 8012d48:	60f8      	str	r0, [r7, #12]
 8012d4a:	60b9      	str	r1, [r7, #8]
 8012d4c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	2202      	movs	r2, #2
 8012d52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	687a      	ldr	r2, [r7, #4]
 8012d5a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	687a      	ldr	r2, [r7, #4]
 8012d60:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	68ba      	ldr	r2, [r7, #8]
 8012d66:	2100      	movs	r1, #0
 8012d68:	68f8      	ldr	r0, [r7, #12]
 8012d6a:	f006 fea0 	bl	8019aae <USBD_LL_Transmit>

  return USBD_OK;
 8012d6e:	2300      	movs	r3, #0
}
 8012d70:	4618      	mov	r0, r3
 8012d72:	3710      	adds	r7, #16
 8012d74:	46bd      	mov	sp, r7
 8012d76:	bd80      	pop	{r7, pc}

08012d78 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b084      	sub	sp, #16
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	60f8      	str	r0, [r7, #12]
 8012d80:	60b9      	str	r1, [r7, #8]
 8012d82:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	68ba      	ldr	r2, [r7, #8]
 8012d88:	2100      	movs	r1, #0
 8012d8a:	68f8      	ldr	r0, [r7, #12]
 8012d8c:	f006 fe8f 	bl	8019aae <USBD_LL_Transmit>

  return USBD_OK;
 8012d90:	2300      	movs	r3, #0
}
 8012d92:	4618      	mov	r0, r3
 8012d94:	3710      	adds	r7, #16
 8012d96:	46bd      	mov	sp, r7
 8012d98:	bd80      	pop	{r7, pc}

08012d9a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012d9a:	b580      	push	{r7, lr}
 8012d9c:	b084      	sub	sp, #16
 8012d9e:	af00      	add	r7, sp, #0
 8012da0:	60f8      	str	r0, [r7, #12]
 8012da2:	60b9      	str	r1, [r7, #8]
 8012da4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	2203      	movs	r2, #3
 8012daa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	687a      	ldr	r2, [r7, #4]
 8012db2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	687a      	ldr	r2, [r7, #4]
 8012dba:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	68ba      	ldr	r2, [r7, #8]
 8012dc2:	2100      	movs	r1, #0
 8012dc4:	68f8      	ldr	r0, [r7, #12]
 8012dc6:	f006 fe93 	bl	8019af0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012dca:	2300      	movs	r3, #0
}
 8012dcc:	4618      	mov	r0, r3
 8012dce:	3710      	adds	r7, #16
 8012dd0:	46bd      	mov	sp, r7
 8012dd2:	bd80      	pop	{r7, pc}

08012dd4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	b084      	sub	sp, #16
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	60f8      	str	r0, [r7, #12]
 8012ddc:	60b9      	str	r1, [r7, #8]
 8012dde:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	68ba      	ldr	r2, [r7, #8]
 8012de4:	2100      	movs	r1, #0
 8012de6:	68f8      	ldr	r0, [r7, #12]
 8012de8:	f006 fe82 	bl	8019af0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012dec:	2300      	movs	r3, #0
}
 8012dee:	4618      	mov	r0, r3
 8012df0:	3710      	adds	r7, #16
 8012df2:	46bd      	mov	sp, r7
 8012df4:	bd80      	pop	{r7, pc}

08012df6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012df6:	b580      	push	{r7, lr}
 8012df8:	b082      	sub	sp, #8
 8012dfa:	af00      	add	r7, sp, #0
 8012dfc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	2204      	movs	r2, #4
 8012e02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012e06:	2300      	movs	r3, #0
 8012e08:	2200      	movs	r2, #0
 8012e0a:	2100      	movs	r1, #0
 8012e0c:	6878      	ldr	r0, [r7, #4]
 8012e0e:	f006 fe4e 	bl	8019aae <USBD_LL_Transmit>

  return USBD_OK;
 8012e12:	2300      	movs	r3, #0
}
 8012e14:	4618      	mov	r0, r3
 8012e16:	3708      	adds	r7, #8
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	bd80      	pop	{r7, pc}

08012e1c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012e1c:	b580      	push	{r7, lr}
 8012e1e:	b082      	sub	sp, #8
 8012e20:	af00      	add	r7, sp, #0
 8012e22:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	2205      	movs	r2, #5
 8012e28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	2200      	movs	r2, #0
 8012e30:	2100      	movs	r1, #0
 8012e32:	6878      	ldr	r0, [r7, #4]
 8012e34:	f006 fe5c 	bl	8019af0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012e38:	2300      	movs	r3, #0
}
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	3708      	adds	r7, #8
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	bd80      	pop	{r7, pc}
	...

08012e44 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012e44:	b580      	push	{r7, lr}
 8012e46:	b084      	sub	sp, #16
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	4603      	mov	r3, r0
 8012e4c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012e4e:	79fb      	ldrb	r3, [r7, #7]
 8012e50:	4a08      	ldr	r2, [pc, #32]	; (8012e74 <disk_status+0x30>)
 8012e52:	009b      	lsls	r3, r3, #2
 8012e54:	4413      	add	r3, r2
 8012e56:	685b      	ldr	r3, [r3, #4]
 8012e58:	685b      	ldr	r3, [r3, #4]
 8012e5a:	79fa      	ldrb	r2, [r7, #7]
 8012e5c:	4905      	ldr	r1, [pc, #20]	; (8012e74 <disk_status+0x30>)
 8012e5e:	440a      	add	r2, r1
 8012e60:	7a12      	ldrb	r2, [r2, #8]
 8012e62:	4610      	mov	r0, r2
 8012e64:	4798      	blx	r3
 8012e66:	4603      	mov	r3, r0
 8012e68:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	3710      	adds	r7, #16
 8012e70:	46bd      	mov	sp, r7
 8012e72:	bd80      	pop	{r7, pc}
 8012e74:	20000868 	.word	0x20000868

08012e78 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012e78:	b580      	push	{r7, lr}
 8012e7a:	b084      	sub	sp, #16
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	4603      	mov	r3, r0
 8012e80:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012e82:	2300      	movs	r3, #0
 8012e84:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8012e86:	79fb      	ldrb	r3, [r7, #7]
 8012e88:	4a0d      	ldr	r2, [pc, #52]	; (8012ec0 <disk_initialize+0x48>)
 8012e8a:	5cd3      	ldrb	r3, [r2, r3]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d111      	bne.n	8012eb4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012e90:	79fb      	ldrb	r3, [r7, #7]
 8012e92:	4a0b      	ldr	r2, [pc, #44]	; (8012ec0 <disk_initialize+0x48>)
 8012e94:	2101      	movs	r1, #1
 8012e96:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012e98:	79fb      	ldrb	r3, [r7, #7]
 8012e9a:	4a09      	ldr	r2, [pc, #36]	; (8012ec0 <disk_initialize+0x48>)
 8012e9c:	009b      	lsls	r3, r3, #2
 8012e9e:	4413      	add	r3, r2
 8012ea0:	685b      	ldr	r3, [r3, #4]
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	79fa      	ldrb	r2, [r7, #7]
 8012ea6:	4906      	ldr	r1, [pc, #24]	; (8012ec0 <disk_initialize+0x48>)
 8012ea8:	440a      	add	r2, r1
 8012eaa:	7a12      	ldrb	r2, [r2, #8]
 8012eac:	4610      	mov	r0, r2
 8012eae:	4798      	blx	r3
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8012eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	3710      	adds	r7, #16
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	bd80      	pop	{r7, pc}
 8012ebe:	bf00      	nop
 8012ec0:	20000868 	.word	0x20000868

08012ec4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012ec4:	b590      	push	{r4, r7, lr}
 8012ec6:	b087      	sub	sp, #28
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	60b9      	str	r1, [r7, #8]
 8012ecc:	607a      	str	r2, [r7, #4]
 8012ece:	603b      	str	r3, [r7, #0]
 8012ed0:	4603      	mov	r3, r0
 8012ed2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012ed4:	7bfb      	ldrb	r3, [r7, #15]
 8012ed6:	4a0a      	ldr	r2, [pc, #40]	; (8012f00 <disk_read+0x3c>)
 8012ed8:	009b      	lsls	r3, r3, #2
 8012eda:	4413      	add	r3, r2
 8012edc:	685b      	ldr	r3, [r3, #4]
 8012ede:	689c      	ldr	r4, [r3, #8]
 8012ee0:	7bfb      	ldrb	r3, [r7, #15]
 8012ee2:	4a07      	ldr	r2, [pc, #28]	; (8012f00 <disk_read+0x3c>)
 8012ee4:	4413      	add	r3, r2
 8012ee6:	7a18      	ldrb	r0, [r3, #8]
 8012ee8:	683b      	ldr	r3, [r7, #0]
 8012eea:	687a      	ldr	r2, [r7, #4]
 8012eec:	68b9      	ldr	r1, [r7, #8]
 8012eee:	47a0      	blx	r4
 8012ef0:	4603      	mov	r3, r0
 8012ef2:	75fb      	strb	r3, [r7, #23]
  return res;
 8012ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	371c      	adds	r7, #28
 8012efa:	46bd      	mov	sp, r7
 8012efc:	bd90      	pop	{r4, r7, pc}
 8012efe:	bf00      	nop
 8012f00:	20000868 	.word	0x20000868

08012f04 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012f04:	b590      	push	{r4, r7, lr}
 8012f06:	b087      	sub	sp, #28
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	60b9      	str	r1, [r7, #8]
 8012f0c:	607a      	str	r2, [r7, #4]
 8012f0e:	603b      	str	r3, [r7, #0]
 8012f10:	4603      	mov	r3, r0
 8012f12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012f14:	7bfb      	ldrb	r3, [r7, #15]
 8012f16:	4a0a      	ldr	r2, [pc, #40]	; (8012f40 <disk_write+0x3c>)
 8012f18:	009b      	lsls	r3, r3, #2
 8012f1a:	4413      	add	r3, r2
 8012f1c:	685b      	ldr	r3, [r3, #4]
 8012f1e:	68dc      	ldr	r4, [r3, #12]
 8012f20:	7bfb      	ldrb	r3, [r7, #15]
 8012f22:	4a07      	ldr	r2, [pc, #28]	; (8012f40 <disk_write+0x3c>)
 8012f24:	4413      	add	r3, r2
 8012f26:	7a18      	ldrb	r0, [r3, #8]
 8012f28:	683b      	ldr	r3, [r7, #0]
 8012f2a:	687a      	ldr	r2, [r7, #4]
 8012f2c:	68b9      	ldr	r1, [r7, #8]
 8012f2e:	47a0      	blx	r4
 8012f30:	4603      	mov	r3, r0
 8012f32:	75fb      	strb	r3, [r7, #23]
  return res;
 8012f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f36:	4618      	mov	r0, r3
 8012f38:	371c      	adds	r7, #28
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	bd90      	pop	{r4, r7, pc}
 8012f3e:	bf00      	nop
 8012f40:	20000868 	.word	0x20000868

08012f44 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b084      	sub	sp, #16
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	603a      	str	r2, [r7, #0]
 8012f4e:	71fb      	strb	r3, [r7, #7]
 8012f50:	460b      	mov	r3, r1
 8012f52:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012f54:	79fb      	ldrb	r3, [r7, #7]
 8012f56:	4a09      	ldr	r2, [pc, #36]	; (8012f7c <disk_ioctl+0x38>)
 8012f58:	009b      	lsls	r3, r3, #2
 8012f5a:	4413      	add	r3, r2
 8012f5c:	685b      	ldr	r3, [r3, #4]
 8012f5e:	691b      	ldr	r3, [r3, #16]
 8012f60:	79fa      	ldrb	r2, [r7, #7]
 8012f62:	4906      	ldr	r1, [pc, #24]	; (8012f7c <disk_ioctl+0x38>)
 8012f64:	440a      	add	r2, r1
 8012f66:	7a10      	ldrb	r0, [r2, #8]
 8012f68:	79b9      	ldrb	r1, [r7, #6]
 8012f6a:	683a      	ldr	r2, [r7, #0]
 8012f6c:	4798      	blx	r3
 8012f6e:	4603      	mov	r3, r0
 8012f70:	73fb      	strb	r3, [r7, #15]
  return res;
 8012f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f74:	4618      	mov	r0, r3
 8012f76:	3710      	adds	r7, #16
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	bd80      	pop	{r7, pc}
 8012f7c:	20000868 	.word	0x20000868

08012f80 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012f80:	b480      	push	{r7}
 8012f82:	b085      	sub	sp, #20
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	3301      	adds	r3, #1
 8012f8c:	781b      	ldrb	r3, [r3, #0]
 8012f8e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012f90:	89fb      	ldrh	r3, [r7, #14]
 8012f92:	021b      	lsls	r3, r3, #8
 8012f94:	b21a      	sxth	r2, r3
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	781b      	ldrb	r3, [r3, #0]
 8012f9a:	b21b      	sxth	r3, r3
 8012f9c:	4313      	orrs	r3, r2
 8012f9e:	b21b      	sxth	r3, r3
 8012fa0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8012fa2:	89fb      	ldrh	r3, [r7, #14]
}
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	3714      	adds	r7, #20
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fae:	4770      	bx	lr

08012fb0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012fb0:	b480      	push	{r7}
 8012fb2:	b085      	sub	sp, #20
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	3303      	adds	r3, #3
 8012fbc:	781b      	ldrb	r3, [r3, #0]
 8012fbe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	021b      	lsls	r3, r3, #8
 8012fc4:	687a      	ldr	r2, [r7, #4]
 8012fc6:	3202      	adds	r2, #2
 8012fc8:	7812      	ldrb	r2, [r2, #0]
 8012fca:	4313      	orrs	r3, r2
 8012fcc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	021b      	lsls	r3, r3, #8
 8012fd2:	687a      	ldr	r2, [r7, #4]
 8012fd4:	3201      	adds	r2, #1
 8012fd6:	7812      	ldrb	r2, [r2, #0]
 8012fd8:	4313      	orrs	r3, r2
 8012fda:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	021b      	lsls	r3, r3, #8
 8012fe0:	687a      	ldr	r2, [r7, #4]
 8012fe2:	7812      	ldrb	r2, [r2, #0]
 8012fe4:	4313      	orrs	r3, r2
 8012fe6:	60fb      	str	r3, [r7, #12]
	return rv;
 8012fe8:	68fb      	ldr	r3, [r7, #12]
}
 8012fea:	4618      	mov	r0, r3
 8012fec:	3714      	adds	r7, #20
 8012fee:	46bd      	mov	sp, r7
 8012ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff4:	4770      	bx	lr

08012ff6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012ff6:	b480      	push	{r7}
 8012ff8:	b083      	sub	sp, #12
 8012ffa:	af00      	add	r7, sp, #0
 8012ffc:	6078      	str	r0, [r7, #4]
 8012ffe:	460b      	mov	r3, r1
 8013000:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	1c5a      	adds	r2, r3, #1
 8013006:	607a      	str	r2, [r7, #4]
 8013008:	887a      	ldrh	r2, [r7, #2]
 801300a:	b2d2      	uxtb	r2, r2
 801300c:	701a      	strb	r2, [r3, #0]
 801300e:	887b      	ldrh	r3, [r7, #2]
 8013010:	0a1b      	lsrs	r3, r3, #8
 8013012:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	1c5a      	adds	r2, r3, #1
 8013018:	607a      	str	r2, [r7, #4]
 801301a:	887a      	ldrh	r2, [r7, #2]
 801301c:	b2d2      	uxtb	r2, r2
 801301e:	701a      	strb	r2, [r3, #0]
}
 8013020:	bf00      	nop
 8013022:	370c      	adds	r7, #12
 8013024:	46bd      	mov	sp, r7
 8013026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801302a:	4770      	bx	lr

0801302c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801302c:	b480      	push	{r7}
 801302e:	b083      	sub	sp, #12
 8013030:	af00      	add	r7, sp, #0
 8013032:	6078      	str	r0, [r7, #4]
 8013034:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	1c5a      	adds	r2, r3, #1
 801303a:	607a      	str	r2, [r7, #4]
 801303c:	683a      	ldr	r2, [r7, #0]
 801303e:	b2d2      	uxtb	r2, r2
 8013040:	701a      	strb	r2, [r3, #0]
 8013042:	683b      	ldr	r3, [r7, #0]
 8013044:	0a1b      	lsrs	r3, r3, #8
 8013046:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	1c5a      	adds	r2, r3, #1
 801304c:	607a      	str	r2, [r7, #4]
 801304e:	683a      	ldr	r2, [r7, #0]
 8013050:	b2d2      	uxtb	r2, r2
 8013052:	701a      	strb	r2, [r3, #0]
 8013054:	683b      	ldr	r3, [r7, #0]
 8013056:	0a1b      	lsrs	r3, r3, #8
 8013058:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	1c5a      	adds	r2, r3, #1
 801305e:	607a      	str	r2, [r7, #4]
 8013060:	683a      	ldr	r2, [r7, #0]
 8013062:	b2d2      	uxtb	r2, r2
 8013064:	701a      	strb	r2, [r3, #0]
 8013066:	683b      	ldr	r3, [r7, #0]
 8013068:	0a1b      	lsrs	r3, r3, #8
 801306a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	1c5a      	adds	r2, r3, #1
 8013070:	607a      	str	r2, [r7, #4]
 8013072:	683a      	ldr	r2, [r7, #0]
 8013074:	b2d2      	uxtb	r2, r2
 8013076:	701a      	strb	r2, [r3, #0]
}
 8013078:	bf00      	nop
 801307a:	370c      	adds	r7, #12
 801307c:	46bd      	mov	sp, r7
 801307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013082:	4770      	bx	lr

08013084 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8013084:	b480      	push	{r7}
 8013086:	b087      	sub	sp, #28
 8013088:	af00      	add	r7, sp, #0
 801308a:	60f8      	str	r0, [r7, #12]
 801308c:	60b9      	str	r1, [r7, #8]
 801308e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8013094:	68bb      	ldr	r3, [r7, #8]
 8013096:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d00d      	beq.n	80130ba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801309e:	693a      	ldr	r2, [r7, #16]
 80130a0:	1c53      	adds	r3, r2, #1
 80130a2:	613b      	str	r3, [r7, #16]
 80130a4:	697b      	ldr	r3, [r7, #20]
 80130a6:	1c59      	adds	r1, r3, #1
 80130a8:	6179      	str	r1, [r7, #20]
 80130aa:	7812      	ldrb	r2, [r2, #0]
 80130ac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	3b01      	subs	r3, #1
 80130b2:	607b      	str	r3, [r7, #4]
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d1f1      	bne.n	801309e <mem_cpy+0x1a>
	}
}
 80130ba:	bf00      	nop
 80130bc:	371c      	adds	r7, #28
 80130be:	46bd      	mov	sp, r7
 80130c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c4:	4770      	bx	lr

080130c6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80130c6:	b480      	push	{r7}
 80130c8:	b087      	sub	sp, #28
 80130ca:	af00      	add	r7, sp, #0
 80130cc:	60f8      	str	r0, [r7, #12]
 80130ce:	60b9      	str	r1, [r7, #8]
 80130d0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80130d6:	697b      	ldr	r3, [r7, #20]
 80130d8:	1c5a      	adds	r2, r3, #1
 80130da:	617a      	str	r2, [r7, #20]
 80130dc:	68ba      	ldr	r2, [r7, #8]
 80130de:	b2d2      	uxtb	r2, r2
 80130e0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	3b01      	subs	r3, #1
 80130e6:	607b      	str	r3, [r7, #4]
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d1f3      	bne.n	80130d6 <mem_set+0x10>
}
 80130ee:	bf00      	nop
 80130f0:	bf00      	nop
 80130f2:	371c      	adds	r7, #28
 80130f4:	46bd      	mov	sp, r7
 80130f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130fa:	4770      	bx	lr

080130fc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80130fc:	b480      	push	{r7}
 80130fe:	b089      	sub	sp, #36	; 0x24
 8013100:	af00      	add	r7, sp, #0
 8013102:	60f8      	str	r0, [r7, #12]
 8013104:	60b9      	str	r1, [r7, #8]
 8013106:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	61fb      	str	r3, [r7, #28]
 801310c:	68bb      	ldr	r3, [r7, #8]
 801310e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8013110:	2300      	movs	r3, #0
 8013112:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8013114:	69fb      	ldr	r3, [r7, #28]
 8013116:	1c5a      	adds	r2, r3, #1
 8013118:	61fa      	str	r2, [r7, #28]
 801311a:	781b      	ldrb	r3, [r3, #0]
 801311c:	4619      	mov	r1, r3
 801311e:	69bb      	ldr	r3, [r7, #24]
 8013120:	1c5a      	adds	r2, r3, #1
 8013122:	61ba      	str	r2, [r7, #24]
 8013124:	781b      	ldrb	r3, [r3, #0]
 8013126:	1acb      	subs	r3, r1, r3
 8013128:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	3b01      	subs	r3, #1
 801312e:	607b      	str	r3, [r7, #4]
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d002      	beq.n	801313c <mem_cmp+0x40>
 8013136:	697b      	ldr	r3, [r7, #20]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d0eb      	beq.n	8013114 <mem_cmp+0x18>

	return r;
 801313c:	697b      	ldr	r3, [r7, #20]
}
 801313e:	4618      	mov	r0, r3
 8013140:	3724      	adds	r7, #36	; 0x24
 8013142:	46bd      	mov	sp, r7
 8013144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013148:	4770      	bx	lr

0801314a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801314a:	b480      	push	{r7}
 801314c:	b083      	sub	sp, #12
 801314e:	af00      	add	r7, sp, #0
 8013150:	6078      	str	r0, [r7, #4]
 8013152:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8013154:	e002      	b.n	801315c <chk_chr+0x12>
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	3301      	adds	r3, #1
 801315a:	607b      	str	r3, [r7, #4]
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	781b      	ldrb	r3, [r3, #0]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d005      	beq.n	8013170 <chk_chr+0x26>
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	781b      	ldrb	r3, [r3, #0]
 8013168:	461a      	mov	r2, r3
 801316a:	683b      	ldr	r3, [r7, #0]
 801316c:	4293      	cmp	r3, r2
 801316e:	d1f2      	bne.n	8013156 <chk_chr+0xc>
	return *str;
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	781b      	ldrb	r3, [r3, #0]
}
 8013174:	4618      	mov	r0, r3
 8013176:	370c      	adds	r7, #12
 8013178:	46bd      	mov	sp, r7
 801317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801317e:	4770      	bx	lr

08013180 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8013180:	b580      	push	{r7, lr}
 8013182:	b082      	sub	sp, #8
 8013184:	af00      	add	r7, sp, #0
 8013186:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d009      	beq.n	80131a2 <lock_fs+0x22>
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	68db      	ldr	r3, [r3, #12]
 8013192:	4618      	mov	r0, r3
 8013194:	f002 fcde 	bl	8015b54 <ff_req_grant>
 8013198:	4603      	mov	r3, r0
 801319a:	2b00      	cmp	r3, #0
 801319c:	d001      	beq.n	80131a2 <lock_fs+0x22>
 801319e:	2301      	movs	r3, #1
 80131a0:	e000      	b.n	80131a4 <lock_fs+0x24>
 80131a2:	2300      	movs	r3, #0
}
 80131a4:	4618      	mov	r0, r3
 80131a6:	3708      	adds	r7, #8
 80131a8:	46bd      	mov	sp, r7
 80131aa:	bd80      	pop	{r7, pc}

080131ac <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80131ac:	b580      	push	{r7, lr}
 80131ae:	b082      	sub	sp, #8
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	6078      	str	r0, [r7, #4]
 80131b4:	460b      	mov	r3, r1
 80131b6:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d00d      	beq.n	80131da <unlock_fs+0x2e>
 80131be:	78fb      	ldrb	r3, [r7, #3]
 80131c0:	2b0c      	cmp	r3, #12
 80131c2:	d00a      	beq.n	80131da <unlock_fs+0x2e>
 80131c4:	78fb      	ldrb	r3, [r7, #3]
 80131c6:	2b0b      	cmp	r3, #11
 80131c8:	d007      	beq.n	80131da <unlock_fs+0x2e>
 80131ca:	78fb      	ldrb	r3, [r7, #3]
 80131cc:	2b0f      	cmp	r3, #15
 80131ce:	d004      	beq.n	80131da <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	68db      	ldr	r3, [r3, #12]
 80131d4:	4618      	mov	r0, r3
 80131d6:	f002 fcd2 	bl	8015b7e <ff_rel_grant>
	}
}
 80131da:	bf00      	nop
 80131dc:	3708      	adds	r7, #8
 80131de:	46bd      	mov	sp, r7
 80131e0:	bd80      	pop	{r7, pc}
	...

080131e4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80131e4:	b480      	push	{r7}
 80131e6:	b085      	sub	sp, #20
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	6078      	str	r0, [r7, #4]
 80131ec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80131ee:	2300      	movs	r3, #0
 80131f0:	60bb      	str	r3, [r7, #8]
 80131f2:	68bb      	ldr	r3, [r7, #8]
 80131f4:	60fb      	str	r3, [r7, #12]
 80131f6:	e029      	b.n	801324c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80131f8:	4a27      	ldr	r2, [pc, #156]	; (8013298 <chk_lock+0xb4>)
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	011b      	lsls	r3, r3, #4
 80131fe:	4413      	add	r3, r2
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	2b00      	cmp	r3, #0
 8013204:	d01d      	beq.n	8013242 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013206:	4a24      	ldr	r2, [pc, #144]	; (8013298 <chk_lock+0xb4>)
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	011b      	lsls	r3, r3, #4
 801320c:	4413      	add	r3, r2
 801320e:	681a      	ldr	r2, [r3, #0]
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	429a      	cmp	r2, r3
 8013216:	d116      	bne.n	8013246 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8013218:	4a1f      	ldr	r2, [pc, #124]	; (8013298 <chk_lock+0xb4>)
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	011b      	lsls	r3, r3, #4
 801321e:	4413      	add	r3, r2
 8013220:	3304      	adds	r3, #4
 8013222:	681a      	ldr	r2, [r3, #0]
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013228:	429a      	cmp	r2, r3
 801322a:	d10c      	bne.n	8013246 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801322c:	4a1a      	ldr	r2, [pc, #104]	; (8013298 <chk_lock+0xb4>)
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	011b      	lsls	r3, r3, #4
 8013232:	4413      	add	r3, r2
 8013234:	3308      	adds	r3, #8
 8013236:	681a      	ldr	r2, [r3, #0]
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801323c:	429a      	cmp	r2, r3
 801323e:	d102      	bne.n	8013246 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8013240:	e007      	b.n	8013252 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8013242:	2301      	movs	r3, #1
 8013244:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	3301      	adds	r3, #1
 801324a:	60fb      	str	r3, [r7, #12]
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	2b01      	cmp	r3, #1
 8013250:	d9d2      	bls.n	80131f8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	2b02      	cmp	r3, #2
 8013256:	d109      	bne.n	801326c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8013258:	68bb      	ldr	r3, [r7, #8]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d102      	bne.n	8013264 <chk_lock+0x80>
 801325e:	683b      	ldr	r3, [r7, #0]
 8013260:	2b02      	cmp	r3, #2
 8013262:	d101      	bne.n	8013268 <chk_lock+0x84>
 8013264:	2300      	movs	r3, #0
 8013266:	e010      	b.n	801328a <chk_lock+0xa6>
 8013268:	2312      	movs	r3, #18
 801326a:	e00e      	b.n	801328a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801326c:	683b      	ldr	r3, [r7, #0]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d108      	bne.n	8013284 <chk_lock+0xa0>
 8013272:	4a09      	ldr	r2, [pc, #36]	; (8013298 <chk_lock+0xb4>)
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	011b      	lsls	r3, r3, #4
 8013278:	4413      	add	r3, r2
 801327a:	330c      	adds	r3, #12
 801327c:	881b      	ldrh	r3, [r3, #0]
 801327e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013282:	d101      	bne.n	8013288 <chk_lock+0xa4>
 8013284:	2310      	movs	r3, #16
 8013286:	e000      	b.n	801328a <chk_lock+0xa6>
 8013288:	2300      	movs	r3, #0
}
 801328a:	4618      	mov	r0, r3
 801328c:	3714      	adds	r7, #20
 801328e:	46bd      	mov	sp, r7
 8013290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013294:	4770      	bx	lr
 8013296:	bf00      	nop
 8013298:	20000848 	.word	0x20000848

0801329c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801329c:	b480      	push	{r7}
 801329e:	b083      	sub	sp, #12
 80132a0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80132a2:	2300      	movs	r3, #0
 80132a4:	607b      	str	r3, [r7, #4]
 80132a6:	e002      	b.n	80132ae <enq_lock+0x12>
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	3301      	adds	r3, #1
 80132ac:	607b      	str	r3, [r7, #4]
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	2b01      	cmp	r3, #1
 80132b2:	d806      	bhi.n	80132c2 <enq_lock+0x26>
 80132b4:	4a09      	ldr	r2, [pc, #36]	; (80132dc <enq_lock+0x40>)
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	011b      	lsls	r3, r3, #4
 80132ba:	4413      	add	r3, r2
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d1f2      	bne.n	80132a8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	2b02      	cmp	r3, #2
 80132c6:	bf14      	ite	ne
 80132c8:	2301      	movne	r3, #1
 80132ca:	2300      	moveq	r3, #0
 80132cc:	b2db      	uxtb	r3, r3
}
 80132ce:	4618      	mov	r0, r3
 80132d0:	370c      	adds	r7, #12
 80132d2:	46bd      	mov	sp, r7
 80132d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d8:	4770      	bx	lr
 80132da:	bf00      	nop
 80132dc:	20000848 	.word	0x20000848

080132e0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80132e0:	b480      	push	{r7}
 80132e2:	b085      	sub	sp, #20
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
 80132e8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80132ea:	2300      	movs	r3, #0
 80132ec:	60fb      	str	r3, [r7, #12]
 80132ee:	e01f      	b.n	8013330 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80132f0:	4a41      	ldr	r2, [pc, #260]	; (80133f8 <inc_lock+0x118>)
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	011b      	lsls	r3, r3, #4
 80132f6:	4413      	add	r3, r2
 80132f8:	681a      	ldr	r2, [r3, #0]
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	429a      	cmp	r2, r3
 8013300:	d113      	bne.n	801332a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8013302:	4a3d      	ldr	r2, [pc, #244]	; (80133f8 <inc_lock+0x118>)
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	011b      	lsls	r3, r3, #4
 8013308:	4413      	add	r3, r2
 801330a:	3304      	adds	r3, #4
 801330c:	681a      	ldr	r2, [r3, #0]
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8013312:	429a      	cmp	r2, r3
 8013314:	d109      	bne.n	801332a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8013316:	4a38      	ldr	r2, [pc, #224]	; (80133f8 <inc_lock+0x118>)
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	011b      	lsls	r3, r3, #4
 801331c:	4413      	add	r3, r2
 801331e:	3308      	adds	r3, #8
 8013320:	681a      	ldr	r2, [r3, #0]
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8013326:	429a      	cmp	r2, r3
 8013328:	d006      	beq.n	8013338 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	3301      	adds	r3, #1
 801332e:	60fb      	str	r3, [r7, #12]
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	2b01      	cmp	r3, #1
 8013334:	d9dc      	bls.n	80132f0 <inc_lock+0x10>
 8013336:	e000      	b.n	801333a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8013338:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	2b02      	cmp	r3, #2
 801333e:	d132      	bne.n	80133a6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8013340:	2300      	movs	r3, #0
 8013342:	60fb      	str	r3, [r7, #12]
 8013344:	e002      	b.n	801334c <inc_lock+0x6c>
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	3301      	adds	r3, #1
 801334a:	60fb      	str	r3, [r7, #12]
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	2b01      	cmp	r3, #1
 8013350:	d806      	bhi.n	8013360 <inc_lock+0x80>
 8013352:	4a29      	ldr	r2, [pc, #164]	; (80133f8 <inc_lock+0x118>)
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	011b      	lsls	r3, r3, #4
 8013358:	4413      	add	r3, r2
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d1f2      	bne.n	8013346 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	2b02      	cmp	r3, #2
 8013364:	d101      	bne.n	801336a <inc_lock+0x8a>
 8013366:	2300      	movs	r3, #0
 8013368:	e040      	b.n	80133ec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	681a      	ldr	r2, [r3, #0]
 801336e:	4922      	ldr	r1, [pc, #136]	; (80133f8 <inc_lock+0x118>)
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	011b      	lsls	r3, r3, #4
 8013374:	440b      	add	r3, r1
 8013376:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	689a      	ldr	r2, [r3, #8]
 801337c:	491e      	ldr	r1, [pc, #120]	; (80133f8 <inc_lock+0x118>)
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	011b      	lsls	r3, r3, #4
 8013382:	440b      	add	r3, r1
 8013384:	3304      	adds	r3, #4
 8013386:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	695a      	ldr	r2, [r3, #20]
 801338c:	491a      	ldr	r1, [pc, #104]	; (80133f8 <inc_lock+0x118>)
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	011b      	lsls	r3, r3, #4
 8013392:	440b      	add	r3, r1
 8013394:	3308      	adds	r3, #8
 8013396:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8013398:	4a17      	ldr	r2, [pc, #92]	; (80133f8 <inc_lock+0x118>)
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	011b      	lsls	r3, r3, #4
 801339e:	4413      	add	r3, r2
 80133a0:	330c      	adds	r3, #12
 80133a2:	2200      	movs	r2, #0
 80133a4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80133a6:	683b      	ldr	r3, [r7, #0]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d009      	beq.n	80133c0 <inc_lock+0xe0>
 80133ac:	4a12      	ldr	r2, [pc, #72]	; (80133f8 <inc_lock+0x118>)
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	011b      	lsls	r3, r3, #4
 80133b2:	4413      	add	r3, r2
 80133b4:	330c      	adds	r3, #12
 80133b6:	881b      	ldrh	r3, [r3, #0]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d001      	beq.n	80133c0 <inc_lock+0xe0>
 80133bc:	2300      	movs	r3, #0
 80133be:	e015      	b.n	80133ec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80133c0:	683b      	ldr	r3, [r7, #0]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d108      	bne.n	80133d8 <inc_lock+0xf8>
 80133c6:	4a0c      	ldr	r2, [pc, #48]	; (80133f8 <inc_lock+0x118>)
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	011b      	lsls	r3, r3, #4
 80133cc:	4413      	add	r3, r2
 80133ce:	330c      	adds	r3, #12
 80133d0:	881b      	ldrh	r3, [r3, #0]
 80133d2:	3301      	adds	r3, #1
 80133d4:	b29a      	uxth	r2, r3
 80133d6:	e001      	b.n	80133dc <inc_lock+0xfc>
 80133d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80133dc:	4906      	ldr	r1, [pc, #24]	; (80133f8 <inc_lock+0x118>)
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	011b      	lsls	r3, r3, #4
 80133e2:	440b      	add	r3, r1
 80133e4:	330c      	adds	r3, #12
 80133e6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	3301      	adds	r3, #1
}
 80133ec:	4618      	mov	r0, r3
 80133ee:	3714      	adds	r7, #20
 80133f0:	46bd      	mov	sp, r7
 80133f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f6:	4770      	bx	lr
 80133f8:	20000848 	.word	0x20000848

080133fc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80133fc:	b480      	push	{r7}
 80133fe:	b085      	sub	sp, #20
 8013400:	af00      	add	r7, sp, #0
 8013402:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	3b01      	subs	r3, #1
 8013408:	607b      	str	r3, [r7, #4]
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	2b01      	cmp	r3, #1
 801340e:	d825      	bhi.n	801345c <dec_lock+0x60>
		n = Files[i].ctr;
 8013410:	4a17      	ldr	r2, [pc, #92]	; (8013470 <dec_lock+0x74>)
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	011b      	lsls	r3, r3, #4
 8013416:	4413      	add	r3, r2
 8013418:	330c      	adds	r3, #12
 801341a:	881b      	ldrh	r3, [r3, #0]
 801341c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801341e:	89fb      	ldrh	r3, [r7, #14]
 8013420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013424:	d101      	bne.n	801342a <dec_lock+0x2e>
 8013426:	2300      	movs	r3, #0
 8013428:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801342a:	89fb      	ldrh	r3, [r7, #14]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d002      	beq.n	8013436 <dec_lock+0x3a>
 8013430:	89fb      	ldrh	r3, [r7, #14]
 8013432:	3b01      	subs	r3, #1
 8013434:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8013436:	4a0e      	ldr	r2, [pc, #56]	; (8013470 <dec_lock+0x74>)
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	011b      	lsls	r3, r3, #4
 801343c:	4413      	add	r3, r2
 801343e:	330c      	adds	r3, #12
 8013440:	89fa      	ldrh	r2, [r7, #14]
 8013442:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8013444:	89fb      	ldrh	r3, [r7, #14]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d105      	bne.n	8013456 <dec_lock+0x5a>
 801344a:	4a09      	ldr	r2, [pc, #36]	; (8013470 <dec_lock+0x74>)
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	011b      	lsls	r3, r3, #4
 8013450:	4413      	add	r3, r2
 8013452:	2200      	movs	r2, #0
 8013454:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8013456:	2300      	movs	r3, #0
 8013458:	737b      	strb	r3, [r7, #13]
 801345a:	e001      	b.n	8013460 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801345c:	2302      	movs	r3, #2
 801345e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8013460:	7b7b      	ldrb	r3, [r7, #13]
}
 8013462:	4618      	mov	r0, r3
 8013464:	3714      	adds	r7, #20
 8013466:	46bd      	mov	sp, r7
 8013468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801346c:	4770      	bx	lr
 801346e:	bf00      	nop
 8013470:	20000848 	.word	0x20000848

08013474 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8013474:	b480      	push	{r7}
 8013476:	b085      	sub	sp, #20
 8013478:	af00      	add	r7, sp, #0
 801347a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801347c:	2300      	movs	r3, #0
 801347e:	60fb      	str	r3, [r7, #12]
 8013480:	e010      	b.n	80134a4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8013482:	4a0d      	ldr	r2, [pc, #52]	; (80134b8 <clear_lock+0x44>)
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	011b      	lsls	r3, r3, #4
 8013488:	4413      	add	r3, r2
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	687a      	ldr	r2, [r7, #4]
 801348e:	429a      	cmp	r2, r3
 8013490:	d105      	bne.n	801349e <clear_lock+0x2a>
 8013492:	4a09      	ldr	r2, [pc, #36]	; (80134b8 <clear_lock+0x44>)
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	011b      	lsls	r3, r3, #4
 8013498:	4413      	add	r3, r2
 801349a:	2200      	movs	r2, #0
 801349c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	3301      	adds	r3, #1
 80134a2:	60fb      	str	r3, [r7, #12]
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	2b01      	cmp	r3, #1
 80134a8:	d9eb      	bls.n	8013482 <clear_lock+0xe>
	}
}
 80134aa:	bf00      	nop
 80134ac:	bf00      	nop
 80134ae:	3714      	adds	r7, #20
 80134b0:	46bd      	mov	sp, r7
 80134b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b6:	4770      	bx	lr
 80134b8:	20000848 	.word	0x20000848

080134bc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80134bc:	b580      	push	{r7, lr}
 80134be:	b086      	sub	sp, #24
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80134c4:	2300      	movs	r3, #0
 80134c6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	78db      	ldrb	r3, [r3, #3]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d034      	beq.n	801353a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134d4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	7858      	ldrb	r0, [r3, #1]
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80134e0:	2301      	movs	r3, #1
 80134e2:	697a      	ldr	r2, [r7, #20]
 80134e4:	f7ff fd0e 	bl	8012f04 <disk_write>
 80134e8:	4603      	mov	r3, r0
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d002      	beq.n	80134f4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80134ee:	2301      	movs	r3, #1
 80134f0:	73fb      	strb	r3, [r7, #15]
 80134f2:	e022      	b.n	801353a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	2200      	movs	r2, #0
 80134f8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134fe:	697a      	ldr	r2, [r7, #20]
 8013500:	1ad2      	subs	r2, r2, r3
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	69db      	ldr	r3, [r3, #28]
 8013506:	429a      	cmp	r2, r3
 8013508:	d217      	bcs.n	801353a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	789b      	ldrb	r3, [r3, #2]
 801350e:	613b      	str	r3, [r7, #16]
 8013510:	e010      	b.n	8013534 <sync_window+0x78>
					wsect += fs->fsize;
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	69db      	ldr	r3, [r3, #28]
 8013516:	697a      	ldr	r2, [r7, #20]
 8013518:	4413      	add	r3, r2
 801351a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	7858      	ldrb	r0, [r3, #1]
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013526:	2301      	movs	r3, #1
 8013528:	697a      	ldr	r2, [r7, #20]
 801352a:	f7ff fceb 	bl	8012f04 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801352e:	693b      	ldr	r3, [r7, #16]
 8013530:	3b01      	subs	r3, #1
 8013532:	613b      	str	r3, [r7, #16]
 8013534:	693b      	ldr	r3, [r7, #16]
 8013536:	2b01      	cmp	r3, #1
 8013538:	d8eb      	bhi.n	8013512 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801353a:	7bfb      	ldrb	r3, [r7, #15]
}
 801353c:	4618      	mov	r0, r3
 801353e:	3718      	adds	r7, #24
 8013540:	46bd      	mov	sp, r7
 8013542:	bd80      	pop	{r7, pc}

08013544 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8013544:	b580      	push	{r7, lr}
 8013546:	b084      	sub	sp, #16
 8013548:	af00      	add	r7, sp, #0
 801354a:	6078      	str	r0, [r7, #4]
 801354c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801354e:	2300      	movs	r3, #0
 8013550:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013556:	683a      	ldr	r2, [r7, #0]
 8013558:	429a      	cmp	r2, r3
 801355a:	d01b      	beq.n	8013594 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801355c:	6878      	ldr	r0, [r7, #4]
 801355e:	f7ff ffad 	bl	80134bc <sync_window>
 8013562:	4603      	mov	r3, r0
 8013564:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8013566:	7bfb      	ldrb	r3, [r7, #15]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d113      	bne.n	8013594 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	7858      	ldrb	r0, [r3, #1]
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013576:	2301      	movs	r3, #1
 8013578:	683a      	ldr	r2, [r7, #0]
 801357a:	f7ff fca3 	bl	8012ec4 <disk_read>
 801357e:	4603      	mov	r3, r0
 8013580:	2b00      	cmp	r3, #0
 8013582:	d004      	beq.n	801358e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8013584:	f04f 33ff 	mov.w	r3, #4294967295
 8013588:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801358a:	2301      	movs	r3, #1
 801358c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	683a      	ldr	r2, [r7, #0]
 8013592:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8013594:	7bfb      	ldrb	r3, [r7, #15]
}
 8013596:	4618      	mov	r0, r3
 8013598:	3710      	adds	r7, #16
 801359a:	46bd      	mov	sp, r7
 801359c:	bd80      	pop	{r7, pc}
	...

080135a0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b084      	sub	sp, #16
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80135a8:	6878      	ldr	r0, [r7, #4]
 80135aa:	f7ff ff87 	bl	80134bc <sync_window>
 80135ae:	4603      	mov	r3, r0
 80135b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80135b2:	7bfb      	ldrb	r3, [r7, #15]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d158      	bne.n	801366a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	781b      	ldrb	r3, [r3, #0]
 80135bc:	2b03      	cmp	r3, #3
 80135be:	d148      	bne.n	8013652 <sync_fs+0xb2>
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	791b      	ldrb	r3, [r3, #4]
 80135c4:	2b01      	cmp	r3, #1
 80135c6:	d144      	bne.n	8013652 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	3334      	adds	r3, #52	; 0x34
 80135cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80135d0:	2100      	movs	r1, #0
 80135d2:	4618      	mov	r0, r3
 80135d4:	f7ff fd77 	bl	80130c6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	3334      	adds	r3, #52	; 0x34
 80135dc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80135e0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80135e4:	4618      	mov	r0, r3
 80135e6:	f7ff fd06 	bl	8012ff6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	3334      	adds	r3, #52	; 0x34
 80135ee:	4921      	ldr	r1, [pc, #132]	; (8013674 <sync_fs+0xd4>)
 80135f0:	4618      	mov	r0, r3
 80135f2:	f7ff fd1b 	bl	801302c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	3334      	adds	r3, #52	; 0x34
 80135fa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80135fe:	491e      	ldr	r1, [pc, #120]	; (8013678 <sync_fs+0xd8>)
 8013600:	4618      	mov	r0, r3
 8013602:	f7ff fd13 	bl	801302c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	3334      	adds	r3, #52	; 0x34
 801360a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	695b      	ldr	r3, [r3, #20]
 8013612:	4619      	mov	r1, r3
 8013614:	4610      	mov	r0, r2
 8013616:	f7ff fd09 	bl	801302c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	3334      	adds	r3, #52	; 0x34
 801361e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	691b      	ldr	r3, [r3, #16]
 8013626:	4619      	mov	r1, r3
 8013628:	4610      	mov	r0, r2
 801362a:	f7ff fcff 	bl	801302c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	6a1b      	ldr	r3, [r3, #32]
 8013632:	1c5a      	adds	r2, r3, #1
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	7858      	ldrb	r0, [r3, #1]
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013646:	2301      	movs	r3, #1
 8013648:	f7ff fc5c 	bl	8012f04 <disk_write>
			fs->fsi_flag = 0;
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	2200      	movs	r2, #0
 8013650:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	785b      	ldrb	r3, [r3, #1]
 8013656:	2200      	movs	r2, #0
 8013658:	2100      	movs	r1, #0
 801365a:	4618      	mov	r0, r3
 801365c:	f7ff fc72 	bl	8012f44 <disk_ioctl>
 8013660:	4603      	mov	r3, r0
 8013662:	2b00      	cmp	r3, #0
 8013664:	d001      	beq.n	801366a <sync_fs+0xca>
 8013666:	2301      	movs	r3, #1
 8013668:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801366a:	7bfb      	ldrb	r3, [r7, #15]
}
 801366c:	4618      	mov	r0, r3
 801366e:	3710      	adds	r7, #16
 8013670:	46bd      	mov	sp, r7
 8013672:	bd80      	pop	{r7, pc}
 8013674:	41615252 	.word	0x41615252
 8013678:	61417272 	.word	0x61417272

0801367c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801367c:	b480      	push	{r7}
 801367e:	b083      	sub	sp, #12
 8013680:	af00      	add	r7, sp, #0
 8013682:	6078      	str	r0, [r7, #4]
 8013684:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8013686:	683b      	ldr	r3, [r7, #0]
 8013688:	3b02      	subs	r3, #2
 801368a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	699b      	ldr	r3, [r3, #24]
 8013690:	3b02      	subs	r3, #2
 8013692:	683a      	ldr	r2, [r7, #0]
 8013694:	429a      	cmp	r2, r3
 8013696:	d301      	bcc.n	801369c <clust2sect+0x20>
 8013698:	2300      	movs	r3, #0
 801369a:	e008      	b.n	80136ae <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	895b      	ldrh	r3, [r3, #10]
 80136a0:	461a      	mov	r2, r3
 80136a2:	683b      	ldr	r3, [r7, #0]
 80136a4:	fb03 f202 	mul.w	r2, r3, r2
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136ac:	4413      	add	r3, r2
}
 80136ae:	4618      	mov	r0, r3
 80136b0:	370c      	adds	r7, #12
 80136b2:	46bd      	mov	sp, r7
 80136b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b8:	4770      	bx	lr

080136ba <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80136ba:	b580      	push	{r7, lr}
 80136bc:	b086      	sub	sp, #24
 80136be:	af00      	add	r7, sp, #0
 80136c0:	6078      	str	r0, [r7, #4]
 80136c2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80136ca:	683b      	ldr	r3, [r7, #0]
 80136cc:	2b01      	cmp	r3, #1
 80136ce:	d904      	bls.n	80136da <get_fat+0x20>
 80136d0:	693b      	ldr	r3, [r7, #16]
 80136d2:	699b      	ldr	r3, [r3, #24]
 80136d4:	683a      	ldr	r2, [r7, #0]
 80136d6:	429a      	cmp	r2, r3
 80136d8:	d302      	bcc.n	80136e0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80136da:	2301      	movs	r3, #1
 80136dc:	617b      	str	r3, [r7, #20]
 80136de:	e08f      	b.n	8013800 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80136e0:	f04f 33ff 	mov.w	r3, #4294967295
 80136e4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80136e6:	693b      	ldr	r3, [r7, #16]
 80136e8:	781b      	ldrb	r3, [r3, #0]
 80136ea:	2b03      	cmp	r3, #3
 80136ec:	d062      	beq.n	80137b4 <get_fat+0xfa>
 80136ee:	2b03      	cmp	r3, #3
 80136f0:	dc7c      	bgt.n	80137ec <get_fat+0x132>
 80136f2:	2b01      	cmp	r3, #1
 80136f4:	d002      	beq.n	80136fc <get_fat+0x42>
 80136f6:	2b02      	cmp	r3, #2
 80136f8:	d042      	beq.n	8013780 <get_fat+0xc6>
 80136fa:	e077      	b.n	80137ec <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80136fc:	683b      	ldr	r3, [r7, #0]
 80136fe:	60fb      	str	r3, [r7, #12]
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	085b      	lsrs	r3, r3, #1
 8013704:	68fa      	ldr	r2, [r7, #12]
 8013706:	4413      	add	r3, r2
 8013708:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801370a:	693b      	ldr	r3, [r7, #16]
 801370c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	0a5b      	lsrs	r3, r3, #9
 8013712:	4413      	add	r3, r2
 8013714:	4619      	mov	r1, r3
 8013716:	6938      	ldr	r0, [r7, #16]
 8013718:	f7ff ff14 	bl	8013544 <move_window>
 801371c:	4603      	mov	r3, r0
 801371e:	2b00      	cmp	r3, #0
 8013720:	d167      	bne.n	80137f2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	1c5a      	adds	r2, r3, #1
 8013726:	60fa      	str	r2, [r7, #12]
 8013728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801372c:	693a      	ldr	r2, [r7, #16]
 801372e:	4413      	add	r3, r2
 8013730:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013734:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013736:	693b      	ldr	r3, [r7, #16]
 8013738:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	0a5b      	lsrs	r3, r3, #9
 801373e:	4413      	add	r3, r2
 8013740:	4619      	mov	r1, r3
 8013742:	6938      	ldr	r0, [r7, #16]
 8013744:	f7ff fefe 	bl	8013544 <move_window>
 8013748:	4603      	mov	r3, r0
 801374a:	2b00      	cmp	r3, #0
 801374c:	d153      	bne.n	80137f6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013754:	693a      	ldr	r2, [r7, #16]
 8013756:	4413      	add	r3, r2
 8013758:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801375c:	021b      	lsls	r3, r3, #8
 801375e:	461a      	mov	r2, r3
 8013760:	68bb      	ldr	r3, [r7, #8]
 8013762:	4313      	orrs	r3, r2
 8013764:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8013766:	683b      	ldr	r3, [r7, #0]
 8013768:	f003 0301 	and.w	r3, r3, #1
 801376c:	2b00      	cmp	r3, #0
 801376e:	d002      	beq.n	8013776 <get_fat+0xbc>
 8013770:	68bb      	ldr	r3, [r7, #8]
 8013772:	091b      	lsrs	r3, r3, #4
 8013774:	e002      	b.n	801377c <get_fat+0xc2>
 8013776:	68bb      	ldr	r3, [r7, #8]
 8013778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801377c:	617b      	str	r3, [r7, #20]
			break;
 801377e:	e03f      	b.n	8013800 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013780:	693b      	ldr	r3, [r7, #16]
 8013782:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013784:	683b      	ldr	r3, [r7, #0]
 8013786:	0a1b      	lsrs	r3, r3, #8
 8013788:	4413      	add	r3, r2
 801378a:	4619      	mov	r1, r3
 801378c:	6938      	ldr	r0, [r7, #16]
 801378e:	f7ff fed9 	bl	8013544 <move_window>
 8013792:	4603      	mov	r3, r0
 8013794:	2b00      	cmp	r3, #0
 8013796:	d130      	bne.n	80137fa <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8013798:	693b      	ldr	r3, [r7, #16]
 801379a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801379e:	683b      	ldr	r3, [r7, #0]
 80137a0:	005b      	lsls	r3, r3, #1
 80137a2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80137a6:	4413      	add	r3, r2
 80137a8:	4618      	mov	r0, r3
 80137aa:	f7ff fbe9 	bl	8012f80 <ld_word>
 80137ae:	4603      	mov	r3, r0
 80137b0:	617b      	str	r3, [r7, #20]
			break;
 80137b2:	e025      	b.n	8013800 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80137b4:	693b      	ldr	r3, [r7, #16]
 80137b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80137b8:	683b      	ldr	r3, [r7, #0]
 80137ba:	09db      	lsrs	r3, r3, #7
 80137bc:	4413      	add	r3, r2
 80137be:	4619      	mov	r1, r3
 80137c0:	6938      	ldr	r0, [r7, #16]
 80137c2:	f7ff febf 	bl	8013544 <move_window>
 80137c6:	4603      	mov	r3, r0
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d118      	bne.n	80137fe <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80137cc:	693b      	ldr	r3, [r7, #16]
 80137ce:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80137d2:	683b      	ldr	r3, [r7, #0]
 80137d4:	009b      	lsls	r3, r3, #2
 80137d6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80137da:	4413      	add	r3, r2
 80137dc:	4618      	mov	r0, r3
 80137de:	f7ff fbe7 	bl	8012fb0 <ld_dword>
 80137e2:	4603      	mov	r3, r0
 80137e4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80137e8:	617b      	str	r3, [r7, #20]
			break;
 80137ea:	e009      	b.n	8013800 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80137ec:	2301      	movs	r3, #1
 80137ee:	617b      	str	r3, [r7, #20]
 80137f0:	e006      	b.n	8013800 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80137f2:	bf00      	nop
 80137f4:	e004      	b.n	8013800 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80137f6:	bf00      	nop
 80137f8:	e002      	b.n	8013800 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80137fa:	bf00      	nop
 80137fc:	e000      	b.n	8013800 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80137fe:	bf00      	nop
		}
	}

	return val;
 8013800:	697b      	ldr	r3, [r7, #20]
}
 8013802:	4618      	mov	r0, r3
 8013804:	3718      	adds	r7, #24
 8013806:	46bd      	mov	sp, r7
 8013808:	bd80      	pop	{r7, pc}

0801380a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801380a:	b590      	push	{r4, r7, lr}
 801380c:	b089      	sub	sp, #36	; 0x24
 801380e:	af00      	add	r7, sp, #0
 8013810:	60f8      	str	r0, [r7, #12]
 8013812:	60b9      	str	r1, [r7, #8]
 8013814:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8013816:	2302      	movs	r3, #2
 8013818:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801381a:	68bb      	ldr	r3, [r7, #8]
 801381c:	2b01      	cmp	r3, #1
 801381e:	f240 80d2 	bls.w	80139c6 <put_fat+0x1bc>
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	699b      	ldr	r3, [r3, #24]
 8013826:	68ba      	ldr	r2, [r7, #8]
 8013828:	429a      	cmp	r2, r3
 801382a:	f080 80cc 	bcs.w	80139c6 <put_fat+0x1bc>
		switch (fs->fs_type) {
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	781b      	ldrb	r3, [r3, #0]
 8013832:	2b03      	cmp	r3, #3
 8013834:	f000 8096 	beq.w	8013964 <put_fat+0x15a>
 8013838:	2b03      	cmp	r3, #3
 801383a:	f300 80cd 	bgt.w	80139d8 <put_fat+0x1ce>
 801383e:	2b01      	cmp	r3, #1
 8013840:	d002      	beq.n	8013848 <put_fat+0x3e>
 8013842:	2b02      	cmp	r3, #2
 8013844:	d06e      	beq.n	8013924 <put_fat+0x11a>
 8013846:	e0c7      	b.n	80139d8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8013848:	68bb      	ldr	r3, [r7, #8]
 801384a:	61bb      	str	r3, [r7, #24]
 801384c:	69bb      	ldr	r3, [r7, #24]
 801384e:	085b      	lsrs	r3, r3, #1
 8013850:	69ba      	ldr	r2, [r7, #24]
 8013852:	4413      	add	r3, r2
 8013854:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801385a:	69bb      	ldr	r3, [r7, #24]
 801385c:	0a5b      	lsrs	r3, r3, #9
 801385e:	4413      	add	r3, r2
 8013860:	4619      	mov	r1, r3
 8013862:	68f8      	ldr	r0, [r7, #12]
 8013864:	f7ff fe6e 	bl	8013544 <move_window>
 8013868:	4603      	mov	r3, r0
 801386a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801386c:	7ffb      	ldrb	r3, [r7, #31]
 801386e:	2b00      	cmp	r3, #0
 8013870:	f040 80ab 	bne.w	80139ca <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801387a:	69bb      	ldr	r3, [r7, #24]
 801387c:	1c59      	adds	r1, r3, #1
 801387e:	61b9      	str	r1, [r7, #24]
 8013880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013884:	4413      	add	r3, r2
 8013886:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013888:	68bb      	ldr	r3, [r7, #8]
 801388a:	f003 0301 	and.w	r3, r3, #1
 801388e:	2b00      	cmp	r3, #0
 8013890:	d00d      	beq.n	80138ae <put_fat+0xa4>
 8013892:	697b      	ldr	r3, [r7, #20]
 8013894:	781b      	ldrb	r3, [r3, #0]
 8013896:	b25b      	sxtb	r3, r3
 8013898:	f003 030f 	and.w	r3, r3, #15
 801389c:	b25a      	sxtb	r2, r3
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	b2db      	uxtb	r3, r3
 80138a2:	011b      	lsls	r3, r3, #4
 80138a4:	b25b      	sxtb	r3, r3
 80138a6:	4313      	orrs	r3, r2
 80138a8:	b25b      	sxtb	r3, r3
 80138aa:	b2db      	uxtb	r3, r3
 80138ac:	e001      	b.n	80138b2 <put_fat+0xa8>
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	b2db      	uxtb	r3, r3
 80138b2:	697a      	ldr	r2, [r7, #20]
 80138b4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	2201      	movs	r2, #1
 80138ba:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80138c0:	69bb      	ldr	r3, [r7, #24]
 80138c2:	0a5b      	lsrs	r3, r3, #9
 80138c4:	4413      	add	r3, r2
 80138c6:	4619      	mov	r1, r3
 80138c8:	68f8      	ldr	r0, [r7, #12]
 80138ca:	f7ff fe3b 	bl	8013544 <move_window>
 80138ce:	4603      	mov	r3, r0
 80138d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80138d2:	7ffb      	ldrb	r3, [r7, #31]
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d17a      	bne.n	80139ce <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80138de:	69bb      	ldr	r3, [r7, #24]
 80138e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80138e4:	4413      	add	r3, r2
 80138e6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80138e8:	68bb      	ldr	r3, [r7, #8]
 80138ea:	f003 0301 	and.w	r3, r3, #1
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d003      	beq.n	80138fa <put_fat+0xf0>
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	091b      	lsrs	r3, r3, #4
 80138f6:	b2db      	uxtb	r3, r3
 80138f8:	e00e      	b.n	8013918 <put_fat+0x10e>
 80138fa:	697b      	ldr	r3, [r7, #20]
 80138fc:	781b      	ldrb	r3, [r3, #0]
 80138fe:	b25b      	sxtb	r3, r3
 8013900:	f023 030f 	bic.w	r3, r3, #15
 8013904:	b25a      	sxtb	r2, r3
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	0a1b      	lsrs	r3, r3, #8
 801390a:	b25b      	sxtb	r3, r3
 801390c:	f003 030f 	and.w	r3, r3, #15
 8013910:	b25b      	sxtb	r3, r3
 8013912:	4313      	orrs	r3, r2
 8013914:	b25b      	sxtb	r3, r3
 8013916:	b2db      	uxtb	r3, r3
 8013918:	697a      	ldr	r2, [r7, #20]
 801391a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	2201      	movs	r2, #1
 8013920:	70da      	strb	r2, [r3, #3]
			break;
 8013922:	e059      	b.n	80139d8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013928:	68bb      	ldr	r3, [r7, #8]
 801392a:	0a1b      	lsrs	r3, r3, #8
 801392c:	4413      	add	r3, r2
 801392e:	4619      	mov	r1, r3
 8013930:	68f8      	ldr	r0, [r7, #12]
 8013932:	f7ff fe07 	bl	8013544 <move_window>
 8013936:	4603      	mov	r3, r0
 8013938:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801393a:	7ffb      	ldrb	r3, [r7, #31]
 801393c:	2b00      	cmp	r3, #0
 801393e:	d148      	bne.n	80139d2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013946:	68bb      	ldr	r3, [r7, #8]
 8013948:	005b      	lsls	r3, r3, #1
 801394a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801394e:	4413      	add	r3, r2
 8013950:	687a      	ldr	r2, [r7, #4]
 8013952:	b292      	uxth	r2, r2
 8013954:	4611      	mov	r1, r2
 8013956:	4618      	mov	r0, r3
 8013958:	f7ff fb4d 	bl	8012ff6 <st_word>
			fs->wflag = 1;
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	2201      	movs	r2, #1
 8013960:	70da      	strb	r2, [r3, #3]
			break;
 8013962:	e039      	b.n	80139d8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013968:	68bb      	ldr	r3, [r7, #8]
 801396a:	09db      	lsrs	r3, r3, #7
 801396c:	4413      	add	r3, r2
 801396e:	4619      	mov	r1, r3
 8013970:	68f8      	ldr	r0, [r7, #12]
 8013972:	f7ff fde7 	bl	8013544 <move_window>
 8013976:	4603      	mov	r3, r0
 8013978:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801397a:	7ffb      	ldrb	r3, [r7, #31]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d12a      	bne.n	80139d6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801398c:	68bb      	ldr	r3, [r7, #8]
 801398e:	009b      	lsls	r3, r3, #2
 8013990:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013994:	4413      	add	r3, r2
 8013996:	4618      	mov	r0, r3
 8013998:	f7ff fb0a 	bl	8012fb0 <ld_dword>
 801399c:	4603      	mov	r3, r0
 801399e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80139a2:	4323      	orrs	r3, r4
 80139a4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80139ac:	68bb      	ldr	r3, [r7, #8]
 80139ae:	009b      	lsls	r3, r3, #2
 80139b0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80139b4:	4413      	add	r3, r2
 80139b6:	6879      	ldr	r1, [r7, #4]
 80139b8:	4618      	mov	r0, r3
 80139ba:	f7ff fb37 	bl	801302c <st_dword>
			fs->wflag = 1;
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	2201      	movs	r2, #1
 80139c2:	70da      	strb	r2, [r3, #3]
			break;
 80139c4:	e008      	b.n	80139d8 <put_fat+0x1ce>
		}
	}
 80139c6:	bf00      	nop
 80139c8:	e006      	b.n	80139d8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80139ca:	bf00      	nop
 80139cc:	e004      	b.n	80139d8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80139ce:	bf00      	nop
 80139d0:	e002      	b.n	80139d8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80139d2:	bf00      	nop
 80139d4:	e000      	b.n	80139d8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80139d6:	bf00      	nop
	return res;
 80139d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80139da:	4618      	mov	r0, r3
 80139dc:	3724      	adds	r7, #36	; 0x24
 80139de:	46bd      	mov	sp, r7
 80139e0:	bd90      	pop	{r4, r7, pc}

080139e2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80139e2:	b580      	push	{r7, lr}
 80139e4:	b088      	sub	sp, #32
 80139e6:	af00      	add	r7, sp, #0
 80139e8:	60f8      	str	r0, [r7, #12]
 80139ea:	60b9      	str	r1, [r7, #8]
 80139ec:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80139ee:	2300      	movs	r3, #0
 80139f0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80139f8:	68bb      	ldr	r3, [r7, #8]
 80139fa:	2b01      	cmp	r3, #1
 80139fc:	d904      	bls.n	8013a08 <remove_chain+0x26>
 80139fe:	69bb      	ldr	r3, [r7, #24]
 8013a00:	699b      	ldr	r3, [r3, #24]
 8013a02:	68ba      	ldr	r2, [r7, #8]
 8013a04:	429a      	cmp	r2, r3
 8013a06:	d301      	bcc.n	8013a0c <remove_chain+0x2a>
 8013a08:	2302      	movs	r3, #2
 8013a0a:	e04b      	b.n	8013aa4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d00c      	beq.n	8013a2c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8013a12:	f04f 32ff 	mov.w	r2, #4294967295
 8013a16:	6879      	ldr	r1, [r7, #4]
 8013a18:	69b8      	ldr	r0, [r7, #24]
 8013a1a:	f7ff fef6 	bl	801380a <put_fat>
 8013a1e:	4603      	mov	r3, r0
 8013a20:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8013a22:	7ffb      	ldrb	r3, [r7, #31]
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d001      	beq.n	8013a2c <remove_chain+0x4a>
 8013a28:	7ffb      	ldrb	r3, [r7, #31]
 8013a2a:	e03b      	b.n	8013aa4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8013a2c:	68b9      	ldr	r1, [r7, #8]
 8013a2e:	68f8      	ldr	r0, [r7, #12]
 8013a30:	f7ff fe43 	bl	80136ba <get_fat>
 8013a34:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8013a36:	697b      	ldr	r3, [r7, #20]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d031      	beq.n	8013aa0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8013a3c:	697b      	ldr	r3, [r7, #20]
 8013a3e:	2b01      	cmp	r3, #1
 8013a40:	d101      	bne.n	8013a46 <remove_chain+0x64>
 8013a42:	2302      	movs	r3, #2
 8013a44:	e02e      	b.n	8013aa4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013a46:	697b      	ldr	r3, [r7, #20]
 8013a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a4c:	d101      	bne.n	8013a52 <remove_chain+0x70>
 8013a4e:	2301      	movs	r3, #1
 8013a50:	e028      	b.n	8013aa4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8013a52:	2200      	movs	r2, #0
 8013a54:	68b9      	ldr	r1, [r7, #8]
 8013a56:	69b8      	ldr	r0, [r7, #24]
 8013a58:	f7ff fed7 	bl	801380a <put_fat>
 8013a5c:	4603      	mov	r3, r0
 8013a5e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8013a60:	7ffb      	ldrb	r3, [r7, #31]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d001      	beq.n	8013a6a <remove_chain+0x88>
 8013a66:	7ffb      	ldrb	r3, [r7, #31]
 8013a68:	e01c      	b.n	8013aa4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8013a6a:	69bb      	ldr	r3, [r7, #24]
 8013a6c:	695a      	ldr	r2, [r3, #20]
 8013a6e:	69bb      	ldr	r3, [r7, #24]
 8013a70:	699b      	ldr	r3, [r3, #24]
 8013a72:	3b02      	subs	r3, #2
 8013a74:	429a      	cmp	r2, r3
 8013a76:	d20b      	bcs.n	8013a90 <remove_chain+0xae>
			fs->free_clst++;
 8013a78:	69bb      	ldr	r3, [r7, #24]
 8013a7a:	695b      	ldr	r3, [r3, #20]
 8013a7c:	1c5a      	adds	r2, r3, #1
 8013a7e:	69bb      	ldr	r3, [r7, #24]
 8013a80:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8013a82:	69bb      	ldr	r3, [r7, #24]
 8013a84:	791b      	ldrb	r3, [r3, #4]
 8013a86:	f043 0301 	orr.w	r3, r3, #1
 8013a8a:	b2da      	uxtb	r2, r3
 8013a8c:	69bb      	ldr	r3, [r7, #24]
 8013a8e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8013a90:	697b      	ldr	r3, [r7, #20]
 8013a92:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8013a94:	69bb      	ldr	r3, [r7, #24]
 8013a96:	699b      	ldr	r3, [r3, #24]
 8013a98:	68ba      	ldr	r2, [r7, #8]
 8013a9a:	429a      	cmp	r2, r3
 8013a9c:	d3c6      	bcc.n	8013a2c <remove_chain+0x4a>
 8013a9e:	e000      	b.n	8013aa2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8013aa0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8013aa2:	2300      	movs	r3, #0
}
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	3720      	adds	r7, #32
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	bd80      	pop	{r7, pc}

08013aac <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8013aac:	b580      	push	{r7, lr}
 8013aae:	b088      	sub	sp, #32
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	6078      	str	r0, [r7, #4]
 8013ab4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8013abc:	683b      	ldr	r3, [r7, #0]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d10d      	bne.n	8013ade <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8013ac2:	693b      	ldr	r3, [r7, #16]
 8013ac4:	691b      	ldr	r3, [r3, #16]
 8013ac6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013ac8:	69bb      	ldr	r3, [r7, #24]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d004      	beq.n	8013ad8 <create_chain+0x2c>
 8013ace:	693b      	ldr	r3, [r7, #16]
 8013ad0:	699b      	ldr	r3, [r3, #24]
 8013ad2:	69ba      	ldr	r2, [r7, #24]
 8013ad4:	429a      	cmp	r2, r3
 8013ad6:	d31b      	bcc.n	8013b10 <create_chain+0x64>
 8013ad8:	2301      	movs	r3, #1
 8013ada:	61bb      	str	r3, [r7, #24]
 8013adc:	e018      	b.n	8013b10 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8013ade:	6839      	ldr	r1, [r7, #0]
 8013ae0:	6878      	ldr	r0, [r7, #4]
 8013ae2:	f7ff fdea 	bl	80136ba <get_fat>
 8013ae6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	2b01      	cmp	r3, #1
 8013aec:	d801      	bhi.n	8013af2 <create_chain+0x46>
 8013aee:	2301      	movs	r3, #1
 8013af0:	e070      	b.n	8013bd4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013af8:	d101      	bne.n	8013afe <create_chain+0x52>
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	e06a      	b.n	8013bd4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8013afe:	693b      	ldr	r3, [r7, #16]
 8013b00:	699b      	ldr	r3, [r3, #24]
 8013b02:	68fa      	ldr	r2, [r7, #12]
 8013b04:	429a      	cmp	r2, r3
 8013b06:	d201      	bcs.n	8013b0c <create_chain+0x60>
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	e063      	b.n	8013bd4 <create_chain+0x128>
		scl = clst;
 8013b0c:	683b      	ldr	r3, [r7, #0]
 8013b0e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8013b10:	69bb      	ldr	r3, [r7, #24]
 8013b12:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8013b14:	69fb      	ldr	r3, [r7, #28]
 8013b16:	3301      	adds	r3, #1
 8013b18:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8013b1a:	693b      	ldr	r3, [r7, #16]
 8013b1c:	699b      	ldr	r3, [r3, #24]
 8013b1e:	69fa      	ldr	r2, [r7, #28]
 8013b20:	429a      	cmp	r2, r3
 8013b22:	d307      	bcc.n	8013b34 <create_chain+0x88>
				ncl = 2;
 8013b24:	2302      	movs	r3, #2
 8013b26:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8013b28:	69fa      	ldr	r2, [r7, #28]
 8013b2a:	69bb      	ldr	r3, [r7, #24]
 8013b2c:	429a      	cmp	r2, r3
 8013b2e:	d901      	bls.n	8013b34 <create_chain+0x88>
 8013b30:	2300      	movs	r3, #0
 8013b32:	e04f      	b.n	8013bd4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8013b34:	69f9      	ldr	r1, [r7, #28]
 8013b36:	6878      	ldr	r0, [r7, #4]
 8013b38:	f7ff fdbf 	bl	80136ba <get_fat>
 8013b3c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d00e      	beq.n	8013b62 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	2b01      	cmp	r3, #1
 8013b48:	d003      	beq.n	8013b52 <create_chain+0xa6>
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b50:	d101      	bne.n	8013b56 <create_chain+0xaa>
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	e03e      	b.n	8013bd4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013b56:	69fa      	ldr	r2, [r7, #28]
 8013b58:	69bb      	ldr	r3, [r7, #24]
 8013b5a:	429a      	cmp	r2, r3
 8013b5c:	d1da      	bne.n	8013b14 <create_chain+0x68>
 8013b5e:	2300      	movs	r3, #0
 8013b60:	e038      	b.n	8013bd4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8013b62:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8013b64:	f04f 32ff 	mov.w	r2, #4294967295
 8013b68:	69f9      	ldr	r1, [r7, #28]
 8013b6a:	6938      	ldr	r0, [r7, #16]
 8013b6c:	f7ff fe4d 	bl	801380a <put_fat>
 8013b70:	4603      	mov	r3, r0
 8013b72:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8013b74:	7dfb      	ldrb	r3, [r7, #23]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d109      	bne.n	8013b8e <create_chain+0xe2>
 8013b7a:	683b      	ldr	r3, [r7, #0]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d006      	beq.n	8013b8e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8013b80:	69fa      	ldr	r2, [r7, #28]
 8013b82:	6839      	ldr	r1, [r7, #0]
 8013b84:	6938      	ldr	r0, [r7, #16]
 8013b86:	f7ff fe40 	bl	801380a <put_fat>
 8013b8a:	4603      	mov	r3, r0
 8013b8c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8013b8e:	7dfb      	ldrb	r3, [r7, #23]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d116      	bne.n	8013bc2 <create_chain+0x116>
		fs->last_clst = ncl;
 8013b94:	693b      	ldr	r3, [r7, #16]
 8013b96:	69fa      	ldr	r2, [r7, #28]
 8013b98:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8013b9a:	693b      	ldr	r3, [r7, #16]
 8013b9c:	695a      	ldr	r2, [r3, #20]
 8013b9e:	693b      	ldr	r3, [r7, #16]
 8013ba0:	699b      	ldr	r3, [r3, #24]
 8013ba2:	3b02      	subs	r3, #2
 8013ba4:	429a      	cmp	r2, r3
 8013ba6:	d804      	bhi.n	8013bb2 <create_chain+0x106>
 8013ba8:	693b      	ldr	r3, [r7, #16]
 8013baa:	695b      	ldr	r3, [r3, #20]
 8013bac:	1e5a      	subs	r2, r3, #1
 8013bae:	693b      	ldr	r3, [r7, #16]
 8013bb0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8013bb2:	693b      	ldr	r3, [r7, #16]
 8013bb4:	791b      	ldrb	r3, [r3, #4]
 8013bb6:	f043 0301 	orr.w	r3, r3, #1
 8013bba:	b2da      	uxtb	r2, r3
 8013bbc:	693b      	ldr	r3, [r7, #16]
 8013bbe:	711a      	strb	r2, [r3, #4]
 8013bc0:	e007      	b.n	8013bd2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8013bc2:	7dfb      	ldrb	r3, [r7, #23]
 8013bc4:	2b01      	cmp	r3, #1
 8013bc6:	d102      	bne.n	8013bce <create_chain+0x122>
 8013bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8013bcc:	e000      	b.n	8013bd0 <create_chain+0x124>
 8013bce:	2301      	movs	r3, #1
 8013bd0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8013bd2:	69fb      	ldr	r3, [r7, #28]
}
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	3720      	adds	r7, #32
 8013bd8:	46bd      	mov	sp, r7
 8013bda:	bd80      	pop	{r7, pc}

08013bdc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8013bdc:	b480      	push	{r7}
 8013bde:	b087      	sub	sp, #28
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	6078      	str	r0, [r7, #4]
 8013be4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bf0:	3304      	adds	r3, #4
 8013bf2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013bf4:	683b      	ldr	r3, [r7, #0]
 8013bf6:	0a5b      	lsrs	r3, r3, #9
 8013bf8:	68fa      	ldr	r2, [r7, #12]
 8013bfa:	8952      	ldrh	r2, [r2, #10]
 8013bfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8013c00:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013c02:	693b      	ldr	r3, [r7, #16]
 8013c04:	1d1a      	adds	r2, r3, #4
 8013c06:	613a      	str	r2, [r7, #16]
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013c0c:	68bb      	ldr	r3, [r7, #8]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d101      	bne.n	8013c16 <clmt_clust+0x3a>
 8013c12:	2300      	movs	r3, #0
 8013c14:	e010      	b.n	8013c38 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8013c16:	697a      	ldr	r2, [r7, #20]
 8013c18:	68bb      	ldr	r3, [r7, #8]
 8013c1a:	429a      	cmp	r2, r3
 8013c1c:	d307      	bcc.n	8013c2e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8013c1e:	697a      	ldr	r2, [r7, #20]
 8013c20:	68bb      	ldr	r3, [r7, #8]
 8013c22:	1ad3      	subs	r3, r2, r3
 8013c24:	617b      	str	r3, [r7, #20]
 8013c26:	693b      	ldr	r3, [r7, #16]
 8013c28:	3304      	adds	r3, #4
 8013c2a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013c2c:	e7e9      	b.n	8013c02 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8013c2e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8013c30:	693b      	ldr	r3, [r7, #16]
 8013c32:	681a      	ldr	r2, [r3, #0]
 8013c34:	697b      	ldr	r3, [r7, #20]
 8013c36:	4413      	add	r3, r2
}
 8013c38:	4618      	mov	r0, r3
 8013c3a:	371c      	adds	r7, #28
 8013c3c:	46bd      	mov	sp, r7
 8013c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c42:	4770      	bx	lr

08013c44 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8013c44:	b580      	push	{r7, lr}
 8013c46:	b086      	sub	sp, #24
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	6078      	str	r0, [r7, #4]
 8013c4c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8013c54:	683b      	ldr	r3, [r7, #0]
 8013c56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013c5a:	d204      	bcs.n	8013c66 <dir_sdi+0x22>
 8013c5c:	683b      	ldr	r3, [r7, #0]
 8013c5e:	f003 031f 	and.w	r3, r3, #31
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d001      	beq.n	8013c6a <dir_sdi+0x26>
		return FR_INT_ERR;
 8013c66:	2302      	movs	r3, #2
 8013c68:	e063      	b.n	8013d32 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	683a      	ldr	r2, [r7, #0]
 8013c6e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	689b      	ldr	r3, [r3, #8]
 8013c74:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8013c76:	697b      	ldr	r3, [r7, #20]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d106      	bne.n	8013c8a <dir_sdi+0x46>
 8013c7c:	693b      	ldr	r3, [r7, #16]
 8013c7e:	781b      	ldrb	r3, [r3, #0]
 8013c80:	2b02      	cmp	r3, #2
 8013c82:	d902      	bls.n	8013c8a <dir_sdi+0x46>
		clst = fs->dirbase;
 8013c84:	693b      	ldr	r3, [r7, #16]
 8013c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c88:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8013c8a:	697b      	ldr	r3, [r7, #20]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d10c      	bne.n	8013caa <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8013c90:	683b      	ldr	r3, [r7, #0]
 8013c92:	095b      	lsrs	r3, r3, #5
 8013c94:	693a      	ldr	r2, [r7, #16]
 8013c96:	8912      	ldrh	r2, [r2, #8]
 8013c98:	4293      	cmp	r3, r2
 8013c9a:	d301      	bcc.n	8013ca0 <dir_sdi+0x5c>
 8013c9c:	2302      	movs	r3, #2
 8013c9e:	e048      	b.n	8013d32 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8013ca0:	693b      	ldr	r3, [r7, #16]
 8013ca2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	61da      	str	r2, [r3, #28]
 8013ca8:	e029      	b.n	8013cfe <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8013caa:	693b      	ldr	r3, [r7, #16]
 8013cac:	895b      	ldrh	r3, [r3, #10]
 8013cae:	025b      	lsls	r3, r3, #9
 8013cb0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013cb2:	e019      	b.n	8013ce8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	6979      	ldr	r1, [r7, #20]
 8013cb8:	4618      	mov	r0, r3
 8013cba:	f7ff fcfe 	bl	80136ba <get_fat>
 8013cbe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013cc0:	697b      	ldr	r3, [r7, #20]
 8013cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cc6:	d101      	bne.n	8013ccc <dir_sdi+0x88>
 8013cc8:	2301      	movs	r3, #1
 8013cca:	e032      	b.n	8013d32 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013ccc:	697b      	ldr	r3, [r7, #20]
 8013cce:	2b01      	cmp	r3, #1
 8013cd0:	d904      	bls.n	8013cdc <dir_sdi+0x98>
 8013cd2:	693b      	ldr	r3, [r7, #16]
 8013cd4:	699b      	ldr	r3, [r3, #24]
 8013cd6:	697a      	ldr	r2, [r7, #20]
 8013cd8:	429a      	cmp	r2, r3
 8013cda:	d301      	bcc.n	8013ce0 <dir_sdi+0x9c>
 8013cdc:	2302      	movs	r3, #2
 8013cde:	e028      	b.n	8013d32 <dir_sdi+0xee>
			ofs -= csz;
 8013ce0:	683a      	ldr	r2, [r7, #0]
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	1ad3      	subs	r3, r2, r3
 8013ce6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013ce8:	683a      	ldr	r2, [r7, #0]
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	429a      	cmp	r2, r3
 8013cee:	d2e1      	bcs.n	8013cb4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8013cf0:	6979      	ldr	r1, [r7, #20]
 8013cf2:	6938      	ldr	r0, [r7, #16]
 8013cf4:	f7ff fcc2 	bl	801367c <clust2sect>
 8013cf8:	4602      	mov	r2, r0
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	697a      	ldr	r2, [r7, #20]
 8013d02:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	69db      	ldr	r3, [r3, #28]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d101      	bne.n	8013d10 <dir_sdi+0xcc>
 8013d0c:	2302      	movs	r3, #2
 8013d0e:	e010      	b.n	8013d32 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	69da      	ldr	r2, [r3, #28]
 8013d14:	683b      	ldr	r3, [r7, #0]
 8013d16:	0a5b      	lsrs	r3, r3, #9
 8013d18:	441a      	add	r2, r3
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8013d1e:	693b      	ldr	r3, [r7, #16]
 8013d20:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013d24:	683b      	ldr	r3, [r7, #0]
 8013d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d2a:	441a      	add	r2, r3
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013d30:	2300      	movs	r3, #0
}
 8013d32:	4618      	mov	r0, r3
 8013d34:	3718      	adds	r7, #24
 8013d36:	46bd      	mov	sp, r7
 8013d38:	bd80      	pop	{r7, pc}

08013d3a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013d3a:	b580      	push	{r7, lr}
 8013d3c:	b086      	sub	sp, #24
 8013d3e:	af00      	add	r7, sp, #0
 8013d40:	6078      	str	r0, [r7, #4]
 8013d42:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	695b      	ldr	r3, [r3, #20]
 8013d4e:	3320      	adds	r3, #32
 8013d50:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	69db      	ldr	r3, [r3, #28]
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d003      	beq.n	8013d62 <dir_next+0x28>
 8013d5a:	68bb      	ldr	r3, [r7, #8]
 8013d5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013d60:	d301      	bcc.n	8013d66 <dir_next+0x2c>
 8013d62:	2304      	movs	r3, #4
 8013d64:	e0aa      	b.n	8013ebc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013d66:	68bb      	ldr	r3, [r7, #8]
 8013d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	f040 8098 	bne.w	8013ea2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	69db      	ldr	r3, [r3, #28]
 8013d76:	1c5a      	adds	r2, r3, #1
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	699b      	ldr	r3, [r3, #24]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d10b      	bne.n	8013d9c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013d84:	68bb      	ldr	r3, [r7, #8]
 8013d86:	095b      	lsrs	r3, r3, #5
 8013d88:	68fa      	ldr	r2, [r7, #12]
 8013d8a:	8912      	ldrh	r2, [r2, #8]
 8013d8c:	4293      	cmp	r3, r2
 8013d8e:	f0c0 8088 	bcc.w	8013ea2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	2200      	movs	r2, #0
 8013d96:	61da      	str	r2, [r3, #28]
 8013d98:	2304      	movs	r3, #4
 8013d9a:	e08f      	b.n	8013ebc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013d9c:	68bb      	ldr	r3, [r7, #8]
 8013d9e:	0a5b      	lsrs	r3, r3, #9
 8013da0:	68fa      	ldr	r2, [r7, #12]
 8013da2:	8952      	ldrh	r2, [r2, #10]
 8013da4:	3a01      	subs	r2, #1
 8013da6:	4013      	ands	r3, r2
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d17a      	bne.n	8013ea2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013dac:	687a      	ldr	r2, [r7, #4]
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	699b      	ldr	r3, [r3, #24]
 8013db2:	4619      	mov	r1, r3
 8013db4:	4610      	mov	r0, r2
 8013db6:	f7ff fc80 	bl	80136ba <get_fat>
 8013dba:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013dbc:	697b      	ldr	r3, [r7, #20]
 8013dbe:	2b01      	cmp	r3, #1
 8013dc0:	d801      	bhi.n	8013dc6 <dir_next+0x8c>
 8013dc2:	2302      	movs	r3, #2
 8013dc4:	e07a      	b.n	8013ebc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013dc6:	697b      	ldr	r3, [r7, #20]
 8013dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013dcc:	d101      	bne.n	8013dd2 <dir_next+0x98>
 8013dce:	2301      	movs	r3, #1
 8013dd0:	e074      	b.n	8013ebc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	699b      	ldr	r3, [r3, #24]
 8013dd6:	697a      	ldr	r2, [r7, #20]
 8013dd8:	429a      	cmp	r2, r3
 8013dda:	d358      	bcc.n	8013e8e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8013ddc:	683b      	ldr	r3, [r7, #0]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d104      	bne.n	8013dec <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	2200      	movs	r2, #0
 8013de6:	61da      	str	r2, [r3, #28]
 8013de8:	2304      	movs	r3, #4
 8013dea:	e067      	b.n	8013ebc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8013dec:	687a      	ldr	r2, [r7, #4]
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	699b      	ldr	r3, [r3, #24]
 8013df2:	4619      	mov	r1, r3
 8013df4:	4610      	mov	r0, r2
 8013df6:	f7ff fe59 	bl	8013aac <create_chain>
 8013dfa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8013dfc:	697b      	ldr	r3, [r7, #20]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d101      	bne.n	8013e06 <dir_next+0xcc>
 8013e02:	2307      	movs	r3, #7
 8013e04:	e05a      	b.n	8013ebc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013e06:	697b      	ldr	r3, [r7, #20]
 8013e08:	2b01      	cmp	r3, #1
 8013e0a:	d101      	bne.n	8013e10 <dir_next+0xd6>
 8013e0c:	2302      	movs	r3, #2
 8013e0e:	e055      	b.n	8013ebc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013e10:	697b      	ldr	r3, [r7, #20]
 8013e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e16:	d101      	bne.n	8013e1c <dir_next+0xe2>
 8013e18:	2301      	movs	r3, #1
 8013e1a:	e04f      	b.n	8013ebc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8013e1c:	68f8      	ldr	r0, [r7, #12]
 8013e1e:	f7ff fb4d 	bl	80134bc <sync_window>
 8013e22:	4603      	mov	r3, r0
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d001      	beq.n	8013e2c <dir_next+0xf2>
 8013e28:	2301      	movs	r3, #1
 8013e2a:	e047      	b.n	8013ebc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	3334      	adds	r3, #52	; 0x34
 8013e30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013e34:	2100      	movs	r1, #0
 8013e36:	4618      	mov	r0, r3
 8013e38:	f7ff f945 	bl	80130c6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	613b      	str	r3, [r7, #16]
 8013e40:	6979      	ldr	r1, [r7, #20]
 8013e42:	68f8      	ldr	r0, [r7, #12]
 8013e44:	f7ff fc1a 	bl	801367c <clust2sect>
 8013e48:	4602      	mov	r2, r0
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	631a      	str	r2, [r3, #48]	; 0x30
 8013e4e:	e012      	b.n	8013e76 <dir_next+0x13c>
						fs->wflag = 1;
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	2201      	movs	r2, #1
 8013e54:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013e56:	68f8      	ldr	r0, [r7, #12]
 8013e58:	f7ff fb30 	bl	80134bc <sync_window>
 8013e5c:	4603      	mov	r3, r0
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d001      	beq.n	8013e66 <dir_next+0x12c>
 8013e62:	2301      	movs	r3, #1
 8013e64:	e02a      	b.n	8013ebc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013e66:	693b      	ldr	r3, [r7, #16]
 8013e68:	3301      	adds	r3, #1
 8013e6a:	613b      	str	r3, [r7, #16]
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e70:	1c5a      	adds	r2, r3, #1
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	631a      	str	r2, [r3, #48]	; 0x30
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	895b      	ldrh	r3, [r3, #10]
 8013e7a:	461a      	mov	r2, r3
 8013e7c:	693b      	ldr	r3, [r7, #16]
 8013e7e:	4293      	cmp	r3, r2
 8013e80:	d3e6      	bcc.n	8013e50 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013e86:	693b      	ldr	r3, [r7, #16]
 8013e88:	1ad2      	subs	r2, r2, r3
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	697a      	ldr	r2, [r7, #20]
 8013e92:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8013e94:	6979      	ldr	r1, [r7, #20]
 8013e96:	68f8      	ldr	r0, [r7, #12]
 8013e98:	f7ff fbf0 	bl	801367c <clust2sect>
 8013e9c:	4602      	mov	r2, r0
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	68ba      	ldr	r2, [r7, #8]
 8013ea6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013eae:	68bb      	ldr	r3, [r7, #8]
 8013eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013eb4:	441a      	add	r2, r3
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013eba:	2300      	movs	r3, #0
}
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	3718      	adds	r7, #24
 8013ec0:	46bd      	mov	sp, r7
 8013ec2:	bd80      	pop	{r7, pc}

08013ec4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013ec4:	b580      	push	{r7, lr}
 8013ec6:	b086      	sub	sp, #24
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	6078      	str	r0, [r7, #4]
 8013ecc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013ed4:	2100      	movs	r1, #0
 8013ed6:	6878      	ldr	r0, [r7, #4]
 8013ed8:	f7ff feb4 	bl	8013c44 <dir_sdi>
 8013edc:	4603      	mov	r3, r0
 8013ede:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013ee0:	7dfb      	ldrb	r3, [r7, #23]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d12b      	bne.n	8013f3e <dir_alloc+0x7a>
		n = 0;
 8013ee6:	2300      	movs	r3, #0
 8013ee8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	69db      	ldr	r3, [r3, #28]
 8013eee:	4619      	mov	r1, r3
 8013ef0:	68f8      	ldr	r0, [r7, #12]
 8013ef2:	f7ff fb27 	bl	8013544 <move_window>
 8013ef6:	4603      	mov	r3, r0
 8013ef8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013efa:	7dfb      	ldrb	r3, [r7, #23]
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d11d      	bne.n	8013f3c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	6a1b      	ldr	r3, [r3, #32]
 8013f04:	781b      	ldrb	r3, [r3, #0]
 8013f06:	2be5      	cmp	r3, #229	; 0xe5
 8013f08:	d004      	beq.n	8013f14 <dir_alloc+0x50>
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	6a1b      	ldr	r3, [r3, #32]
 8013f0e:	781b      	ldrb	r3, [r3, #0]
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d107      	bne.n	8013f24 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013f14:	693b      	ldr	r3, [r7, #16]
 8013f16:	3301      	adds	r3, #1
 8013f18:	613b      	str	r3, [r7, #16]
 8013f1a:	693a      	ldr	r2, [r7, #16]
 8013f1c:	683b      	ldr	r3, [r7, #0]
 8013f1e:	429a      	cmp	r2, r3
 8013f20:	d102      	bne.n	8013f28 <dir_alloc+0x64>
 8013f22:	e00c      	b.n	8013f3e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013f24:	2300      	movs	r3, #0
 8013f26:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013f28:	2101      	movs	r1, #1
 8013f2a:	6878      	ldr	r0, [r7, #4]
 8013f2c:	f7ff ff05 	bl	8013d3a <dir_next>
 8013f30:	4603      	mov	r3, r0
 8013f32:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013f34:	7dfb      	ldrb	r3, [r7, #23]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d0d7      	beq.n	8013eea <dir_alloc+0x26>
 8013f3a:	e000      	b.n	8013f3e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8013f3c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013f3e:	7dfb      	ldrb	r3, [r7, #23]
 8013f40:	2b04      	cmp	r3, #4
 8013f42:	d101      	bne.n	8013f48 <dir_alloc+0x84>
 8013f44:	2307      	movs	r3, #7
 8013f46:	75fb      	strb	r3, [r7, #23]
	return res;
 8013f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	3718      	adds	r7, #24
 8013f4e:	46bd      	mov	sp, r7
 8013f50:	bd80      	pop	{r7, pc}

08013f52 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013f52:	b580      	push	{r7, lr}
 8013f54:	b084      	sub	sp, #16
 8013f56:	af00      	add	r7, sp, #0
 8013f58:	6078      	str	r0, [r7, #4]
 8013f5a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013f5c:	683b      	ldr	r3, [r7, #0]
 8013f5e:	331a      	adds	r3, #26
 8013f60:	4618      	mov	r0, r3
 8013f62:	f7ff f80d 	bl	8012f80 <ld_word>
 8013f66:	4603      	mov	r3, r0
 8013f68:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	781b      	ldrb	r3, [r3, #0]
 8013f6e:	2b03      	cmp	r3, #3
 8013f70:	d109      	bne.n	8013f86 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013f72:	683b      	ldr	r3, [r7, #0]
 8013f74:	3314      	adds	r3, #20
 8013f76:	4618      	mov	r0, r3
 8013f78:	f7ff f802 	bl	8012f80 <ld_word>
 8013f7c:	4603      	mov	r3, r0
 8013f7e:	041b      	lsls	r3, r3, #16
 8013f80:	68fa      	ldr	r2, [r7, #12]
 8013f82:	4313      	orrs	r3, r2
 8013f84:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8013f86:	68fb      	ldr	r3, [r7, #12]
}
 8013f88:	4618      	mov	r0, r3
 8013f8a:	3710      	adds	r7, #16
 8013f8c:	46bd      	mov	sp, r7
 8013f8e:	bd80      	pop	{r7, pc}

08013f90 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013f90:	b580      	push	{r7, lr}
 8013f92:	b084      	sub	sp, #16
 8013f94:	af00      	add	r7, sp, #0
 8013f96:	60f8      	str	r0, [r7, #12]
 8013f98:	60b9      	str	r1, [r7, #8]
 8013f9a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8013f9c:	68bb      	ldr	r3, [r7, #8]
 8013f9e:	331a      	adds	r3, #26
 8013fa0:	687a      	ldr	r2, [r7, #4]
 8013fa2:	b292      	uxth	r2, r2
 8013fa4:	4611      	mov	r1, r2
 8013fa6:	4618      	mov	r0, r3
 8013fa8:	f7ff f825 	bl	8012ff6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	781b      	ldrb	r3, [r3, #0]
 8013fb0:	2b03      	cmp	r3, #3
 8013fb2:	d109      	bne.n	8013fc8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013fb4:	68bb      	ldr	r3, [r7, #8]
 8013fb6:	f103 0214 	add.w	r2, r3, #20
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	0c1b      	lsrs	r3, r3, #16
 8013fbe:	b29b      	uxth	r3, r3
 8013fc0:	4619      	mov	r1, r3
 8013fc2:	4610      	mov	r0, r2
 8013fc4:	f7ff f817 	bl	8012ff6 <st_word>
	}
}
 8013fc8:	bf00      	nop
 8013fca:	3710      	adds	r7, #16
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	bd80      	pop	{r7, pc}

08013fd0 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b086      	sub	sp, #24
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]
 8013fd8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8013fda:	2304      	movs	r3, #4
 8013fdc:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8013fe4:	e03c      	b.n	8014060 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	69db      	ldr	r3, [r3, #28]
 8013fea:	4619      	mov	r1, r3
 8013fec:	6938      	ldr	r0, [r7, #16]
 8013fee:	f7ff faa9 	bl	8013544 <move_window>
 8013ff2:	4603      	mov	r3, r0
 8013ff4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013ff6:	7dfb      	ldrb	r3, [r7, #23]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d136      	bne.n	801406a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	6a1b      	ldr	r3, [r3, #32]
 8014000:	781b      	ldrb	r3, [r3, #0]
 8014002:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8014004:	7bfb      	ldrb	r3, [r7, #15]
 8014006:	2b00      	cmp	r3, #0
 8014008:	d102      	bne.n	8014010 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801400a:	2304      	movs	r3, #4
 801400c:	75fb      	strb	r3, [r7, #23]
 801400e:	e031      	b.n	8014074 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	6a1b      	ldr	r3, [r3, #32]
 8014014:	330b      	adds	r3, #11
 8014016:	781b      	ldrb	r3, [r3, #0]
 8014018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801401c:	73bb      	strb	r3, [r7, #14]
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	7bba      	ldrb	r2, [r7, #14]
 8014022:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8014024:	7bfb      	ldrb	r3, [r7, #15]
 8014026:	2be5      	cmp	r3, #229	; 0xe5
 8014028:	d011      	beq.n	801404e <dir_read+0x7e>
 801402a:	7bfb      	ldrb	r3, [r7, #15]
 801402c:	2b2e      	cmp	r3, #46	; 0x2e
 801402e:	d00e      	beq.n	801404e <dir_read+0x7e>
 8014030:	7bbb      	ldrb	r3, [r7, #14]
 8014032:	2b0f      	cmp	r3, #15
 8014034:	d00b      	beq.n	801404e <dir_read+0x7e>
 8014036:	7bbb      	ldrb	r3, [r7, #14]
 8014038:	f023 0320 	bic.w	r3, r3, #32
 801403c:	2b08      	cmp	r3, #8
 801403e:	bf0c      	ite	eq
 8014040:	2301      	moveq	r3, #1
 8014042:	2300      	movne	r3, #0
 8014044:	b2db      	uxtb	r3, r3
 8014046:	461a      	mov	r2, r3
 8014048:	683b      	ldr	r3, [r7, #0]
 801404a:	4293      	cmp	r3, r2
 801404c:	d00f      	beq.n	801406e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801404e:	2100      	movs	r1, #0
 8014050:	6878      	ldr	r0, [r7, #4]
 8014052:	f7ff fe72 	bl	8013d3a <dir_next>
 8014056:	4603      	mov	r3, r0
 8014058:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801405a:	7dfb      	ldrb	r3, [r7, #23]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d108      	bne.n	8014072 <dir_read+0xa2>
	while (dp->sect) {
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	69db      	ldr	r3, [r3, #28]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d1be      	bne.n	8013fe6 <dir_read+0x16>
 8014068:	e004      	b.n	8014074 <dir_read+0xa4>
		if (res != FR_OK) break;
 801406a:	bf00      	nop
 801406c:	e002      	b.n	8014074 <dir_read+0xa4>
				break;
 801406e:	bf00      	nop
 8014070:	e000      	b.n	8014074 <dir_read+0xa4>
		if (res != FR_OK) break;
 8014072:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8014074:	7dfb      	ldrb	r3, [r7, #23]
 8014076:	2b00      	cmp	r3, #0
 8014078:	d002      	beq.n	8014080 <dir_read+0xb0>
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	2200      	movs	r2, #0
 801407e:	61da      	str	r2, [r3, #28]
	return res;
 8014080:	7dfb      	ldrb	r3, [r7, #23]
}
 8014082:	4618      	mov	r0, r3
 8014084:	3718      	adds	r7, #24
 8014086:	46bd      	mov	sp, r7
 8014088:	bd80      	pop	{r7, pc}

0801408a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801408a:	b580      	push	{r7, lr}
 801408c:	b086      	sub	sp, #24
 801408e:	af00      	add	r7, sp, #0
 8014090:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8014098:	2100      	movs	r1, #0
 801409a:	6878      	ldr	r0, [r7, #4]
 801409c:	f7ff fdd2 	bl	8013c44 <dir_sdi>
 80140a0:	4603      	mov	r3, r0
 80140a2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80140a4:	7dfb      	ldrb	r3, [r7, #23]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d001      	beq.n	80140ae <dir_find+0x24>
 80140aa:	7dfb      	ldrb	r3, [r7, #23]
 80140ac:	e03e      	b.n	801412c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	69db      	ldr	r3, [r3, #28]
 80140b2:	4619      	mov	r1, r3
 80140b4:	6938      	ldr	r0, [r7, #16]
 80140b6:	f7ff fa45 	bl	8013544 <move_window>
 80140ba:	4603      	mov	r3, r0
 80140bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80140be:	7dfb      	ldrb	r3, [r7, #23]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d12f      	bne.n	8014124 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	6a1b      	ldr	r3, [r3, #32]
 80140c8:	781b      	ldrb	r3, [r3, #0]
 80140ca:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80140cc:	7bfb      	ldrb	r3, [r7, #15]
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d102      	bne.n	80140d8 <dir_find+0x4e>
 80140d2:	2304      	movs	r3, #4
 80140d4:	75fb      	strb	r3, [r7, #23]
 80140d6:	e028      	b.n	801412a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	6a1b      	ldr	r3, [r3, #32]
 80140dc:	330b      	adds	r3, #11
 80140de:	781b      	ldrb	r3, [r3, #0]
 80140e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80140e4:	b2da      	uxtb	r2, r3
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	6a1b      	ldr	r3, [r3, #32]
 80140ee:	330b      	adds	r3, #11
 80140f0:	781b      	ldrb	r3, [r3, #0]
 80140f2:	f003 0308 	and.w	r3, r3, #8
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d10a      	bne.n	8014110 <dir_find+0x86>
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	6a18      	ldr	r0, [r3, #32]
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	3324      	adds	r3, #36	; 0x24
 8014102:	220b      	movs	r2, #11
 8014104:	4619      	mov	r1, r3
 8014106:	f7fe fff9 	bl	80130fc <mem_cmp>
 801410a:	4603      	mov	r3, r0
 801410c:	2b00      	cmp	r3, #0
 801410e:	d00b      	beq.n	8014128 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8014110:	2100      	movs	r1, #0
 8014112:	6878      	ldr	r0, [r7, #4]
 8014114:	f7ff fe11 	bl	8013d3a <dir_next>
 8014118:	4603      	mov	r3, r0
 801411a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801411c:	7dfb      	ldrb	r3, [r7, #23]
 801411e:	2b00      	cmp	r3, #0
 8014120:	d0c5      	beq.n	80140ae <dir_find+0x24>
 8014122:	e002      	b.n	801412a <dir_find+0xa0>
		if (res != FR_OK) break;
 8014124:	bf00      	nop
 8014126:	e000      	b.n	801412a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8014128:	bf00      	nop

	return res;
 801412a:	7dfb      	ldrb	r3, [r7, #23]
}
 801412c:	4618      	mov	r0, r3
 801412e:	3718      	adds	r7, #24
 8014130:	46bd      	mov	sp, r7
 8014132:	bd80      	pop	{r7, pc}

08014134 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8014134:	b580      	push	{r7, lr}
 8014136:	b084      	sub	sp, #16
 8014138:	af00      	add	r7, sp, #0
 801413a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8014142:	2101      	movs	r1, #1
 8014144:	6878      	ldr	r0, [r7, #4]
 8014146:	f7ff febd 	bl	8013ec4 <dir_alloc>
 801414a:	4603      	mov	r3, r0
 801414c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801414e:	7bfb      	ldrb	r3, [r7, #15]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d11c      	bne.n	801418e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	69db      	ldr	r3, [r3, #28]
 8014158:	4619      	mov	r1, r3
 801415a:	68b8      	ldr	r0, [r7, #8]
 801415c:	f7ff f9f2 	bl	8013544 <move_window>
 8014160:	4603      	mov	r3, r0
 8014162:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014164:	7bfb      	ldrb	r3, [r7, #15]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d111      	bne.n	801418e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	6a1b      	ldr	r3, [r3, #32]
 801416e:	2220      	movs	r2, #32
 8014170:	2100      	movs	r1, #0
 8014172:	4618      	mov	r0, r3
 8014174:	f7fe ffa7 	bl	80130c6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	6a18      	ldr	r0, [r3, #32]
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	3324      	adds	r3, #36	; 0x24
 8014180:	220b      	movs	r2, #11
 8014182:	4619      	mov	r1, r3
 8014184:	f7fe ff7e 	bl	8013084 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8014188:	68bb      	ldr	r3, [r7, #8]
 801418a:	2201      	movs	r2, #1
 801418c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801418e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014190:	4618      	mov	r0, r3
 8014192:	3710      	adds	r7, #16
 8014194:	46bd      	mov	sp, r7
 8014196:	bd80      	pop	{r7, pc}

08014198 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8014198:	b580      	push	{r7, lr}
 801419a:	b086      	sub	sp, #24
 801419c:	af00      	add	r7, sp, #0
 801419e:	6078      	str	r0, [r7, #4]
 80141a0:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80141a2:	683b      	ldr	r3, [r7, #0]
 80141a4:	2200      	movs	r2, #0
 80141a6:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	69db      	ldr	r3, [r3, #28]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d04e      	beq.n	801424e <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80141b0:	2300      	movs	r3, #0
 80141b2:	613b      	str	r3, [r7, #16]
 80141b4:	693b      	ldr	r3, [r7, #16]
 80141b6:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80141b8:	e021      	b.n	80141fe <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	6a1a      	ldr	r2, [r3, #32]
 80141be:	697b      	ldr	r3, [r7, #20]
 80141c0:	1c59      	adds	r1, r3, #1
 80141c2:	6179      	str	r1, [r7, #20]
 80141c4:	4413      	add	r3, r2
 80141c6:	781b      	ldrb	r3, [r3, #0]
 80141c8:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80141ca:	7bfb      	ldrb	r3, [r7, #15]
 80141cc:	2b20      	cmp	r3, #32
 80141ce:	d100      	bne.n	80141d2 <get_fileinfo+0x3a>
 80141d0:	e015      	b.n	80141fe <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80141d2:	7bfb      	ldrb	r3, [r7, #15]
 80141d4:	2b05      	cmp	r3, #5
 80141d6:	d101      	bne.n	80141dc <get_fileinfo+0x44>
 80141d8:	23e5      	movs	r3, #229	; 0xe5
 80141da:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80141dc:	697b      	ldr	r3, [r7, #20]
 80141de:	2b09      	cmp	r3, #9
 80141e0:	d106      	bne.n	80141f0 <get_fileinfo+0x58>
 80141e2:	693b      	ldr	r3, [r7, #16]
 80141e4:	1c5a      	adds	r2, r3, #1
 80141e6:	613a      	str	r2, [r7, #16]
 80141e8:	683a      	ldr	r2, [r7, #0]
 80141ea:	4413      	add	r3, r2
 80141ec:	222e      	movs	r2, #46	; 0x2e
 80141ee:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80141f0:	693b      	ldr	r3, [r7, #16]
 80141f2:	1c5a      	adds	r2, r3, #1
 80141f4:	613a      	str	r2, [r7, #16]
 80141f6:	683a      	ldr	r2, [r7, #0]
 80141f8:	4413      	add	r3, r2
 80141fa:	7bfa      	ldrb	r2, [r7, #15]
 80141fc:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 80141fe:	697b      	ldr	r3, [r7, #20]
 8014200:	2b0a      	cmp	r3, #10
 8014202:	d9da      	bls.n	80141ba <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8014204:	683a      	ldr	r2, [r7, #0]
 8014206:	693b      	ldr	r3, [r7, #16]
 8014208:	4413      	add	r3, r2
 801420a:	3309      	adds	r3, #9
 801420c:	2200      	movs	r2, #0
 801420e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	6a1b      	ldr	r3, [r3, #32]
 8014214:	7ada      	ldrb	r2, [r3, #11]
 8014216:	683b      	ldr	r3, [r7, #0]
 8014218:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	6a1b      	ldr	r3, [r3, #32]
 801421e:	331c      	adds	r3, #28
 8014220:	4618      	mov	r0, r3
 8014222:	f7fe fec5 	bl	8012fb0 <ld_dword>
 8014226:	4602      	mov	r2, r0
 8014228:	683b      	ldr	r3, [r7, #0]
 801422a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	6a1b      	ldr	r3, [r3, #32]
 8014230:	3316      	adds	r3, #22
 8014232:	4618      	mov	r0, r3
 8014234:	f7fe febc 	bl	8012fb0 <ld_dword>
 8014238:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801423a:	68bb      	ldr	r3, [r7, #8]
 801423c:	b29a      	uxth	r2, r3
 801423e:	683b      	ldr	r3, [r7, #0]
 8014240:	80da      	strh	r2, [r3, #6]
 8014242:	68bb      	ldr	r3, [r7, #8]
 8014244:	0c1b      	lsrs	r3, r3, #16
 8014246:	b29a      	uxth	r2, r3
 8014248:	683b      	ldr	r3, [r7, #0]
 801424a:	809a      	strh	r2, [r3, #4]
 801424c:	e000      	b.n	8014250 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801424e:	bf00      	nop
}
 8014250:	3718      	adds	r7, #24
 8014252:	46bd      	mov	sp, r7
 8014254:	bd80      	pop	{r7, pc}
	...

08014258 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8014258:	b580      	push	{r7, lr}
 801425a:	b088      	sub	sp, #32
 801425c:	af00      	add	r7, sp, #0
 801425e:	6078      	str	r0, [r7, #4]
 8014260:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8014262:	683b      	ldr	r3, [r7, #0]
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	60fb      	str	r3, [r7, #12]
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	3324      	adds	r3, #36	; 0x24
 801426c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801426e:	220b      	movs	r2, #11
 8014270:	2120      	movs	r1, #32
 8014272:	68b8      	ldr	r0, [r7, #8]
 8014274:	f7fe ff27 	bl	80130c6 <mem_set>
	si = i = 0; ni = 8;
 8014278:	2300      	movs	r3, #0
 801427a:	613b      	str	r3, [r7, #16]
 801427c:	693b      	ldr	r3, [r7, #16]
 801427e:	61fb      	str	r3, [r7, #28]
 8014280:	2308      	movs	r3, #8
 8014282:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8014284:	69fb      	ldr	r3, [r7, #28]
 8014286:	1c5a      	adds	r2, r3, #1
 8014288:	61fa      	str	r2, [r7, #28]
 801428a:	68fa      	ldr	r2, [r7, #12]
 801428c:	4413      	add	r3, r2
 801428e:	781b      	ldrb	r3, [r3, #0]
 8014290:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8014292:	7efb      	ldrb	r3, [r7, #27]
 8014294:	2b20      	cmp	r3, #32
 8014296:	d94e      	bls.n	8014336 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8014298:	7efb      	ldrb	r3, [r7, #27]
 801429a:	2b2f      	cmp	r3, #47	; 0x2f
 801429c:	d006      	beq.n	80142ac <create_name+0x54>
 801429e:	7efb      	ldrb	r3, [r7, #27]
 80142a0:	2b5c      	cmp	r3, #92	; 0x5c
 80142a2:	d110      	bne.n	80142c6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80142a4:	e002      	b.n	80142ac <create_name+0x54>
 80142a6:	69fb      	ldr	r3, [r7, #28]
 80142a8:	3301      	adds	r3, #1
 80142aa:	61fb      	str	r3, [r7, #28]
 80142ac:	68fa      	ldr	r2, [r7, #12]
 80142ae:	69fb      	ldr	r3, [r7, #28]
 80142b0:	4413      	add	r3, r2
 80142b2:	781b      	ldrb	r3, [r3, #0]
 80142b4:	2b2f      	cmp	r3, #47	; 0x2f
 80142b6:	d0f6      	beq.n	80142a6 <create_name+0x4e>
 80142b8:	68fa      	ldr	r2, [r7, #12]
 80142ba:	69fb      	ldr	r3, [r7, #28]
 80142bc:	4413      	add	r3, r2
 80142be:	781b      	ldrb	r3, [r3, #0]
 80142c0:	2b5c      	cmp	r3, #92	; 0x5c
 80142c2:	d0f0      	beq.n	80142a6 <create_name+0x4e>
			break;
 80142c4:	e038      	b.n	8014338 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80142c6:	7efb      	ldrb	r3, [r7, #27]
 80142c8:	2b2e      	cmp	r3, #46	; 0x2e
 80142ca:	d003      	beq.n	80142d4 <create_name+0x7c>
 80142cc:	693a      	ldr	r2, [r7, #16]
 80142ce:	697b      	ldr	r3, [r7, #20]
 80142d0:	429a      	cmp	r2, r3
 80142d2:	d30c      	bcc.n	80142ee <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80142d4:	697b      	ldr	r3, [r7, #20]
 80142d6:	2b0b      	cmp	r3, #11
 80142d8:	d002      	beq.n	80142e0 <create_name+0x88>
 80142da:	7efb      	ldrb	r3, [r7, #27]
 80142dc:	2b2e      	cmp	r3, #46	; 0x2e
 80142de:	d001      	beq.n	80142e4 <create_name+0x8c>
 80142e0:	2306      	movs	r3, #6
 80142e2:	e044      	b.n	801436e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80142e4:	2308      	movs	r3, #8
 80142e6:	613b      	str	r3, [r7, #16]
 80142e8:	230b      	movs	r3, #11
 80142ea:	617b      	str	r3, [r7, #20]
			continue;
 80142ec:	e022      	b.n	8014334 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80142ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	da04      	bge.n	8014300 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80142f6:	7efb      	ldrb	r3, [r7, #27]
 80142f8:	3b80      	subs	r3, #128	; 0x80
 80142fa:	4a1f      	ldr	r2, [pc, #124]	; (8014378 <create_name+0x120>)
 80142fc:	5cd3      	ldrb	r3, [r2, r3]
 80142fe:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8014300:	7efb      	ldrb	r3, [r7, #27]
 8014302:	4619      	mov	r1, r3
 8014304:	481d      	ldr	r0, [pc, #116]	; (801437c <create_name+0x124>)
 8014306:	f7fe ff20 	bl	801314a <chk_chr>
 801430a:	4603      	mov	r3, r0
 801430c:	2b00      	cmp	r3, #0
 801430e:	d001      	beq.n	8014314 <create_name+0xbc>
 8014310:	2306      	movs	r3, #6
 8014312:	e02c      	b.n	801436e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8014314:	7efb      	ldrb	r3, [r7, #27]
 8014316:	2b60      	cmp	r3, #96	; 0x60
 8014318:	d905      	bls.n	8014326 <create_name+0xce>
 801431a:	7efb      	ldrb	r3, [r7, #27]
 801431c:	2b7a      	cmp	r3, #122	; 0x7a
 801431e:	d802      	bhi.n	8014326 <create_name+0xce>
 8014320:	7efb      	ldrb	r3, [r7, #27]
 8014322:	3b20      	subs	r3, #32
 8014324:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8014326:	693b      	ldr	r3, [r7, #16]
 8014328:	1c5a      	adds	r2, r3, #1
 801432a:	613a      	str	r2, [r7, #16]
 801432c:	68ba      	ldr	r2, [r7, #8]
 801432e:	4413      	add	r3, r2
 8014330:	7efa      	ldrb	r2, [r7, #27]
 8014332:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8014334:	e7a6      	b.n	8014284 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8014336:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8014338:	68fa      	ldr	r2, [r7, #12]
 801433a:	69fb      	ldr	r3, [r7, #28]
 801433c:	441a      	add	r2, r3
 801433e:	683b      	ldr	r3, [r7, #0]
 8014340:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8014342:	693b      	ldr	r3, [r7, #16]
 8014344:	2b00      	cmp	r3, #0
 8014346:	d101      	bne.n	801434c <create_name+0xf4>
 8014348:	2306      	movs	r3, #6
 801434a:	e010      	b.n	801436e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801434c:	68bb      	ldr	r3, [r7, #8]
 801434e:	781b      	ldrb	r3, [r3, #0]
 8014350:	2be5      	cmp	r3, #229	; 0xe5
 8014352:	d102      	bne.n	801435a <create_name+0x102>
 8014354:	68bb      	ldr	r3, [r7, #8]
 8014356:	2205      	movs	r2, #5
 8014358:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801435a:	7efb      	ldrb	r3, [r7, #27]
 801435c:	2b20      	cmp	r3, #32
 801435e:	d801      	bhi.n	8014364 <create_name+0x10c>
 8014360:	2204      	movs	r2, #4
 8014362:	e000      	b.n	8014366 <create_name+0x10e>
 8014364:	2200      	movs	r2, #0
 8014366:	68bb      	ldr	r3, [r7, #8]
 8014368:	330b      	adds	r3, #11
 801436a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801436c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801436e:	4618      	mov	r0, r3
 8014370:	3720      	adds	r7, #32
 8014372:	46bd      	mov	sp, r7
 8014374:	bd80      	pop	{r7, pc}
 8014376:	bf00      	nop
 8014378:	08021f5c 	.word	0x08021f5c
 801437c:	08021d60 	.word	0x08021d60

08014380 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8014380:	b580      	push	{r7, lr}
 8014382:	b086      	sub	sp, #24
 8014384:	af00      	add	r7, sp, #0
 8014386:	6078      	str	r0, [r7, #4]
 8014388:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801438e:	693b      	ldr	r3, [r7, #16]
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8014394:	e002      	b.n	801439c <follow_path+0x1c>
 8014396:	683b      	ldr	r3, [r7, #0]
 8014398:	3301      	adds	r3, #1
 801439a:	603b      	str	r3, [r7, #0]
 801439c:	683b      	ldr	r3, [r7, #0]
 801439e:	781b      	ldrb	r3, [r3, #0]
 80143a0:	2b2f      	cmp	r3, #47	; 0x2f
 80143a2:	d0f8      	beq.n	8014396 <follow_path+0x16>
 80143a4:	683b      	ldr	r3, [r7, #0]
 80143a6:	781b      	ldrb	r3, [r3, #0]
 80143a8:	2b5c      	cmp	r3, #92	; 0x5c
 80143aa:	d0f4      	beq.n	8014396 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80143ac:	693b      	ldr	r3, [r7, #16]
 80143ae:	2200      	movs	r2, #0
 80143b0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80143b2:	683b      	ldr	r3, [r7, #0]
 80143b4:	781b      	ldrb	r3, [r3, #0]
 80143b6:	2b1f      	cmp	r3, #31
 80143b8:	d80a      	bhi.n	80143d0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	2280      	movs	r2, #128	; 0x80
 80143be:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80143c2:	2100      	movs	r1, #0
 80143c4:	6878      	ldr	r0, [r7, #4]
 80143c6:	f7ff fc3d 	bl	8013c44 <dir_sdi>
 80143ca:	4603      	mov	r3, r0
 80143cc:	75fb      	strb	r3, [r7, #23]
 80143ce:	e043      	b.n	8014458 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80143d0:	463b      	mov	r3, r7
 80143d2:	4619      	mov	r1, r3
 80143d4:	6878      	ldr	r0, [r7, #4]
 80143d6:	f7ff ff3f 	bl	8014258 <create_name>
 80143da:	4603      	mov	r3, r0
 80143dc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80143de:	7dfb      	ldrb	r3, [r7, #23]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d134      	bne.n	801444e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80143e4:	6878      	ldr	r0, [r7, #4]
 80143e6:	f7ff fe50 	bl	801408a <dir_find>
 80143ea:	4603      	mov	r3, r0
 80143ec:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80143f4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80143f6:	7dfb      	ldrb	r3, [r7, #23]
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d00a      	beq.n	8014412 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80143fc:	7dfb      	ldrb	r3, [r7, #23]
 80143fe:	2b04      	cmp	r3, #4
 8014400:	d127      	bne.n	8014452 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8014402:	7afb      	ldrb	r3, [r7, #11]
 8014404:	f003 0304 	and.w	r3, r3, #4
 8014408:	2b00      	cmp	r3, #0
 801440a:	d122      	bne.n	8014452 <follow_path+0xd2>
 801440c:	2305      	movs	r3, #5
 801440e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8014410:	e01f      	b.n	8014452 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014412:	7afb      	ldrb	r3, [r7, #11]
 8014414:	f003 0304 	and.w	r3, r3, #4
 8014418:	2b00      	cmp	r3, #0
 801441a:	d11c      	bne.n	8014456 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801441c:	693b      	ldr	r3, [r7, #16]
 801441e:	799b      	ldrb	r3, [r3, #6]
 8014420:	f003 0310 	and.w	r3, r3, #16
 8014424:	2b00      	cmp	r3, #0
 8014426:	d102      	bne.n	801442e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8014428:	2305      	movs	r3, #5
 801442a:	75fb      	strb	r3, [r7, #23]
 801442c:	e014      	b.n	8014458 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	695b      	ldr	r3, [r3, #20]
 8014438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801443c:	4413      	add	r3, r2
 801443e:	4619      	mov	r1, r3
 8014440:	68f8      	ldr	r0, [r7, #12]
 8014442:	f7ff fd86 	bl	8013f52 <ld_clust>
 8014446:	4602      	mov	r2, r0
 8014448:	693b      	ldr	r3, [r7, #16]
 801444a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801444c:	e7c0      	b.n	80143d0 <follow_path+0x50>
			if (res != FR_OK) break;
 801444e:	bf00      	nop
 8014450:	e002      	b.n	8014458 <follow_path+0xd8>
				break;
 8014452:	bf00      	nop
 8014454:	e000      	b.n	8014458 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014456:	bf00      	nop
			}
		}
	}

	return res;
 8014458:	7dfb      	ldrb	r3, [r7, #23]
}
 801445a:	4618      	mov	r0, r3
 801445c:	3718      	adds	r7, #24
 801445e:	46bd      	mov	sp, r7
 8014460:	bd80      	pop	{r7, pc}

08014462 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8014462:	b480      	push	{r7}
 8014464:	b087      	sub	sp, #28
 8014466:	af00      	add	r7, sp, #0
 8014468:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801446a:	f04f 33ff 	mov.w	r3, #4294967295
 801446e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	2b00      	cmp	r3, #0
 8014476:	d031      	beq.n	80144dc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	617b      	str	r3, [r7, #20]
 801447e:	e002      	b.n	8014486 <get_ldnumber+0x24>
 8014480:	697b      	ldr	r3, [r7, #20]
 8014482:	3301      	adds	r3, #1
 8014484:	617b      	str	r3, [r7, #20]
 8014486:	697b      	ldr	r3, [r7, #20]
 8014488:	781b      	ldrb	r3, [r3, #0]
 801448a:	2b20      	cmp	r3, #32
 801448c:	d903      	bls.n	8014496 <get_ldnumber+0x34>
 801448e:	697b      	ldr	r3, [r7, #20]
 8014490:	781b      	ldrb	r3, [r3, #0]
 8014492:	2b3a      	cmp	r3, #58	; 0x3a
 8014494:	d1f4      	bne.n	8014480 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8014496:	697b      	ldr	r3, [r7, #20]
 8014498:	781b      	ldrb	r3, [r3, #0]
 801449a:	2b3a      	cmp	r3, #58	; 0x3a
 801449c:	d11c      	bne.n	80144d8 <get_ldnumber+0x76>
			tp = *path;
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	1c5a      	adds	r2, r3, #1
 80144a8:	60fa      	str	r2, [r7, #12]
 80144aa:	781b      	ldrb	r3, [r3, #0]
 80144ac:	3b30      	subs	r3, #48	; 0x30
 80144ae:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80144b0:	68bb      	ldr	r3, [r7, #8]
 80144b2:	2b09      	cmp	r3, #9
 80144b4:	d80e      	bhi.n	80144d4 <get_ldnumber+0x72>
 80144b6:	68fa      	ldr	r2, [r7, #12]
 80144b8:	697b      	ldr	r3, [r7, #20]
 80144ba:	429a      	cmp	r2, r3
 80144bc:	d10a      	bne.n	80144d4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80144be:	68bb      	ldr	r3, [r7, #8]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d107      	bne.n	80144d4 <get_ldnumber+0x72>
					vol = (int)i;
 80144c4:	68bb      	ldr	r3, [r7, #8]
 80144c6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80144c8:	697b      	ldr	r3, [r7, #20]
 80144ca:	3301      	adds	r3, #1
 80144cc:	617b      	str	r3, [r7, #20]
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	697a      	ldr	r2, [r7, #20]
 80144d2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80144d4:	693b      	ldr	r3, [r7, #16]
 80144d6:	e002      	b.n	80144de <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80144d8:	2300      	movs	r3, #0
 80144da:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80144dc:	693b      	ldr	r3, [r7, #16]
}
 80144de:	4618      	mov	r0, r3
 80144e0:	371c      	adds	r7, #28
 80144e2:	46bd      	mov	sp, r7
 80144e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e8:	4770      	bx	lr
	...

080144ec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b082      	sub	sp, #8
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	6078      	str	r0, [r7, #4]
 80144f4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	2200      	movs	r2, #0
 80144fa:	70da      	strb	r2, [r3, #3]
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	f04f 32ff 	mov.w	r2, #4294967295
 8014502:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8014504:	6839      	ldr	r1, [r7, #0]
 8014506:	6878      	ldr	r0, [r7, #4]
 8014508:	f7ff f81c 	bl	8013544 <move_window>
 801450c:	4603      	mov	r3, r0
 801450e:	2b00      	cmp	r3, #0
 8014510:	d001      	beq.n	8014516 <check_fs+0x2a>
 8014512:	2304      	movs	r3, #4
 8014514:	e038      	b.n	8014588 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	3334      	adds	r3, #52	; 0x34
 801451a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801451e:	4618      	mov	r0, r3
 8014520:	f7fe fd2e 	bl	8012f80 <ld_word>
 8014524:	4603      	mov	r3, r0
 8014526:	461a      	mov	r2, r3
 8014528:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801452c:	429a      	cmp	r2, r3
 801452e:	d001      	beq.n	8014534 <check_fs+0x48>
 8014530:	2303      	movs	r3, #3
 8014532:	e029      	b.n	8014588 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801453a:	2be9      	cmp	r3, #233	; 0xe9
 801453c:	d009      	beq.n	8014552 <check_fs+0x66>
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014544:	2beb      	cmp	r3, #235	; 0xeb
 8014546:	d11e      	bne.n	8014586 <check_fs+0x9a>
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801454e:	2b90      	cmp	r3, #144	; 0x90
 8014550:	d119      	bne.n	8014586 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	3334      	adds	r3, #52	; 0x34
 8014556:	3336      	adds	r3, #54	; 0x36
 8014558:	4618      	mov	r0, r3
 801455a:	f7fe fd29 	bl	8012fb0 <ld_dword>
 801455e:	4603      	mov	r3, r0
 8014560:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8014564:	4a0a      	ldr	r2, [pc, #40]	; (8014590 <check_fs+0xa4>)
 8014566:	4293      	cmp	r3, r2
 8014568:	d101      	bne.n	801456e <check_fs+0x82>
 801456a:	2300      	movs	r3, #0
 801456c:	e00c      	b.n	8014588 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	3334      	adds	r3, #52	; 0x34
 8014572:	3352      	adds	r3, #82	; 0x52
 8014574:	4618      	mov	r0, r3
 8014576:	f7fe fd1b 	bl	8012fb0 <ld_dword>
 801457a:	4603      	mov	r3, r0
 801457c:	4a05      	ldr	r2, [pc, #20]	; (8014594 <check_fs+0xa8>)
 801457e:	4293      	cmp	r3, r2
 8014580:	d101      	bne.n	8014586 <check_fs+0x9a>
 8014582:	2300      	movs	r3, #0
 8014584:	e000      	b.n	8014588 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8014586:	2302      	movs	r3, #2
}
 8014588:	4618      	mov	r0, r3
 801458a:	3708      	adds	r7, #8
 801458c:	46bd      	mov	sp, r7
 801458e:	bd80      	pop	{r7, pc}
 8014590:	00544146 	.word	0x00544146
 8014594:	33544146 	.word	0x33544146

08014598 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8014598:	b580      	push	{r7, lr}
 801459a:	b096      	sub	sp, #88	; 0x58
 801459c:	af00      	add	r7, sp, #0
 801459e:	60f8      	str	r0, [r7, #12]
 80145a0:	60b9      	str	r1, [r7, #8]
 80145a2:	4613      	mov	r3, r2
 80145a4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80145a6:	68bb      	ldr	r3, [r7, #8]
 80145a8:	2200      	movs	r2, #0
 80145aa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80145ac:	68f8      	ldr	r0, [r7, #12]
 80145ae:	f7ff ff58 	bl	8014462 <get_ldnumber>
 80145b2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80145b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	da01      	bge.n	80145be <find_volume+0x26>
 80145ba:	230b      	movs	r3, #11
 80145bc:	e236      	b.n	8014a2c <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80145be:	4aac      	ldr	r2, [pc, #688]	; (8014870 <find_volume+0x2d8>)
 80145c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80145c6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80145c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d101      	bne.n	80145d2 <find_volume+0x3a>
 80145ce:	230c      	movs	r3, #12
 80145d0:	e22c      	b.n	8014a2c <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 80145d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80145d4:	f7fe fdd4 	bl	8013180 <lock_fs>
 80145d8:	4603      	mov	r3, r0
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d101      	bne.n	80145e2 <find_volume+0x4a>
 80145de:	230f      	movs	r3, #15
 80145e0:	e224      	b.n	8014a2c <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 80145e2:	68bb      	ldr	r3, [r7, #8]
 80145e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80145e6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80145e8:	79fb      	ldrb	r3, [r7, #7]
 80145ea:	f023 0301 	bic.w	r3, r3, #1
 80145ee:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80145f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145f2:	781b      	ldrb	r3, [r3, #0]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d01a      	beq.n	801462e <find_volume+0x96>
		stat = disk_status(fs->drv);
 80145f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145fa:	785b      	ldrb	r3, [r3, #1]
 80145fc:	4618      	mov	r0, r3
 80145fe:	f7fe fc21 	bl	8012e44 <disk_status>
 8014602:	4603      	mov	r3, r0
 8014604:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8014608:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801460c:	f003 0301 	and.w	r3, r3, #1
 8014610:	2b00      	cmp	r3, #0
 8014612:	d10c      	bne.n	801462e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8014614:	79fb      	ldrb	r3, [r7, #7]
 8014616:	2b00      	cmp	r3, #0
 8014618:	d007      	beq.n	801462a <find_volume+0x92>
 801461a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801461e:	f003 0304 	and.w	r3, r3, #4
 8014622:	2b00      	cmp	r3, #0
 8014624:	d001      	beq.n	801462a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8014626:	230a      	movs	r3, #10
 8014628:	e200      	b.n	8014a2c <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 801462a:	2300      	movs	r3, #0
 801462c:	e1fe      	b.n	8014a2c <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801462e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014630:	2200      	movs	r2, #0
 8014632:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8014634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014636:	b2da      	uxtb	r2, r3
 8014638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801463a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801463c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801463e:	785b      	ldrb	r3, [r3, #1]
 8014640:	4618      	mov	r0, r3
 8014642:	f7fe fc19 	bl	8012e78 <disk_initialize>
 8014646:	4603      	mov	r3, r0
 8014648:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801464c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014650:	f003 0301 	and.w	r3, r3, #1
 8014654:	2b00      	cmp	r3, #0
 8014656:	d001      	beq.n	801465c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8014658:	2303      	movs	r3, #3
 801465a:	e1e7      	b.n	8014a2c <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801465c:	79fb      	ldrb	r3, [r7, #7]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d007      	beq.n	8014672 <find_volume+0xda>
 8014662:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014666:	f003 0304 	and.w	r3, r3, #4
 801466a:	2b00      	cmp	r3, #0
 801466c:	d001      	beq.n	8014672 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 801466e:	230a      	movs	r3, #10
 8014670:	e1dc      	b.n	8014a2c <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8014672:	2300      	movs	r3, #0
 8014674:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8014676:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014678:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801467a:	f7ff ff37 	bl	80144ec <check_fs>
 801467e:	4603      	mov	r3, r0
 8014680:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8014684:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014688:	2b02      	cmp	r3, #2
 801468a:	d14b      	bne.n	8014724 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801468c:	2300      	movs	r3, #0
 801468e:	643b      	str	r3, [r7, #64]	; 0x40
 8014690:	e01f      	b.n	80146d2 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8014692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014694:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801469a:	011b      	lsls	r3, r3, #4
 801469c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80146a0:	4413      	add	r3, r2
 80146a2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80146a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146a6:	3304      	adds	r3, #4
 80146a8:	781b      	ldrb	r3, [r3, #0]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d006      	beq.n	80146bc <find_volume+0x124>
 80146ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146b0:	3308      	adds	r3, #8
 80146b2:	4618      	mov	r0, r3
 80146b4:	f7fe fc7c 	bl	8012fb0 <ld_dword>
 80146b8:	4602      	mov	r2, r0
 80146ba:	e000      	b.n	80146be <find_volume+0x126>
 80146bc:	2200      	movs	r2, #0
 80146be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146c0:	009b      	lsls	r3, r3, #2
 80146c2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80146c6:	440b      	add	r3, r1
 80146c8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80146cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146ce:	3301      	adds	r3, #1
 80146d0:	643b      	str	r3, [r7, #64]	; 0x40
 80146d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146d4:	2b03      	cmp	r3, #3
 80146d6:	d9dc      	bls.n	8014692 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80146d8:	2300      	movs	r3, #0
 80146da:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80146dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d002      	beq.n	80146e8 <find_volume+0x150>
 80146e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146e4:	3b01      	subs	r3, #1
 80146e6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80146e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146ea:	009b      	lsls	r3, r3, #2
 80146ec:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80146f0:	4413      	add	r3, r2
 80146f2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80146f6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80146f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d005      	beq.n	801470a <find_volume+0x172>
 80146fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014700:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014702:	f7ff fef3 	bl	80144ec <check_fs>
 8014706:	4603      	mov	r3, r0
 8014708:	e000      	b.n	801470c <find_volume+0x174>
 801470a:	2303      	movs	r3, #3
 801470c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014710:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014714:	2b01      	cmp	r3, #1
 8014716:	d905      	bls.n	8014724 <find_volume+0x18c>
 8014718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801471a:	3301      	adds	r3, #1
 801471c:	643b      	str	r3, [r7, #64]	; 0x40
 801471e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014720:	2b03      	cmp	r3, #3
 8014722:	d9e1      	bls.n	80146e8 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8014724:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014728:	2b04      	cmp	r3, #4
 801472a:	d101      	bne.n	8014730 <find_volume+0x198>
 801472c:	2301      	movs	r3, #1
 801472e:	e17d      	b.n	8014a2c <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8014730:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014734:	2b01      	cmp	r3, #1
 8014736:	d901      	bls.n	801473c <find_volume+0x1a4>
 8014738:	230d      	movs	r3, #13
 801473a:	e177      	b.n	8014a2c <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801473c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801473e:	3334      	adds	r3, #52	; 0x34
 8014740:	330b      	adds	r3, #11
 8014742:	4618      	mov	r0, r3
 8014744:	f7fe fc1c 	bl	8012f80 <ld_word>
 8014748:	4603      	mov	r3, r0
 801474a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801474e:	d001      	beq.n	8014754 <find_volume+0x1bc>
 8014750:	230d      	movs	r3, #13
 8014752:	e16b      	b.n	8014a2c <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8014754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014756:	3334      	adds	r3, #52	; 0x34
 8014758:	3316      	adds	r3, #22
 801475a:	4618      	mov	r0, r3
 801475c:	f7fe fc10 	bl	8012f80 <ld_word>
 8014760:	4603      	mov	r3, r0
 8014762:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8014764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014766:	2b00      	cmp	r3, #0
 8014768:	d106      	bne.n	8014778 <find_volume+0x1e0>
 801476a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801476c:	3334      	adds	r3, #52	; 0x34
 801476e:	3324      	adds	r3, #36	; 0x24
 8014770:	4618      	mov	r0, r3
 8014772:	f7fe fc1d 	bl	8012fb0 <ld_dword>
 8014776:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8014778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801477a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801477c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801477e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014780:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8014784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014786:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8014788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801478a:	789b      	ldrb	r3, [r3, #2]
 801478c:	2b01      	cmp	r3, #1
 801478e:	d005      	beq.n	801479c <find_volume+0x204>
 8014790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014792:	789b      	ldrb	r3, [r3, #2]
 8014794:	2b02      	cmp	r3, #2
 8014796:	d001      	beq.n	801479c <find_volume+0x204>
 8014798:	230d      	movs	r3, #13
 801479a:	e147      	b.n	8014a2c <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801479c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801479e:	789b      	ldrb	r3, [r3, #2]
 80147a0:	461a      	mov	r2, r3
 80147a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80147a4:	fb02 f303 	mul.w	r3, r2, r3
 80147a8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80147aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80147b0:	b29a      	uxth	r2, r3
 80147b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147b4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80147b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147b8:	895b      	ldrh	r3, [r3, #10]
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d008      	beq.n	80147d0 <find_volume+0x238>
 80147be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147c0:	895b      	ldrh	r3, [r3, #10]
 80147c2:	461a      	mov	r2, r3
 80147c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147c6:	895b      	ldrh	r3, [r3, #10]
 80147c8:	3b01      	subs	r3, #1
 80147ca:	4013      	ands	r3, r2
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d001      	beq.n	80147d4 <find_volume+0x23c>
 80147d0:	230d      	movs	r3, #13
 80147d2:	e12b      	b.n	8014a2c <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80147d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147d6:	3334      	adds	r3, #52	; 0x34
 80147d8:	3311      	adds	r3, #17
 80147da:	4618      	mov	r0, r3
 80147dc:	f7fe fbd0 	bl	8012f80 <ld_word>
 80147e0:	4603      	mov	r3, r0
 80147e2:	461a      	mov	r2, r3
 80147e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147e6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80147e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147ea:	891b      	ldrh	r3, [r3, #8]
 80147ec:	f003 030f 	and.w	r3, r3, #15
 80147f0:	b29b      	uxth	r3, r3
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d001      	beq.n	80147fa <find_volume+0x262>
 80147f6:	230d      	movs	r3, #13
 80147f8:	e118      	b.n	8014a2c <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80147fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147fc:	3334      	adds	r3, #52	; 0x34
 80147fe:	3313      	adds	r3, #19
 8014800:	4618      	mov	r0, r3
 8014802:	f7fe fbbd 	bl	8012f80 <ld_word>
 8014806:	4603      	mov	r3, r0
 8014808:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801480a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801480c:	2b00      	cmp	r3, #0
 801480e:	d106      	bne.n	801481e <find_volume+0x286>
 8014810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014812:	3334      	adds	r3, #52	; 0x34
 8014814:	3320      	adds	r3, #32
 8014816:	4618      	mov	r0, r3
 8014818:	f7fe fbca 	bl	8012fb0 <ld_dword>
 801481c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801481e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014820:	3334      	adds	r3, #52	; 0x34
 8014822:	330e      	adds	r3, #14
 8014824:	4618      	mov	r0, r3
 8014826:	f7fe fbab 	bl	8012f80 <ld_word>
 801482a:	4603      	mov	r3, r0
 801482c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801482e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014830:	2b00      	cmp	r3, #0
 8014832:	d101      	bne.n	8014838 <find_volume+0x2a0>
 8014834:	230d      	movs	r3, #13
 8014836:	e0f9      	b.n	8014a2c <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8014838:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801483a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801483c:	4413      	add	r3, r2
 801483e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014840:	8912      	ldrh	r2, [r2, #8]
 8014842:	0912      	lsrs	r2, r2, #4
 8014844:	b292      	uxth	r2, r2
 8014846:	4413      	add	r3, r2
 8014848:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801484a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801484c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801484e:	429a      	cmp	r2, r3
 8014850:	d201      	bcs.n	8014856 <find_volume+0x2be>
 8014852:	230d      	movs	r3, #13
 8014854:	e0ea      	b.n	8014a2c <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8014856:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801485a:	1ad3      	subs	r3, r2, r3
 801485c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801485e:	8952      	ldrh	r2, [r2, #10]
 8014860:	fbb3 f3f2 	udiv	r3, r3, r2
 8014864:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8014866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014868:	2b00      	cmp	r3, #0
 801486a:	d103      	bne.n	8014874 <find_volume+0x2dc>
 801486c:	230d      	movs	r3, #13
 801486e:	e0dd      	b.n	8014a2c <find_volume+0x494>
 8014870:	20000840 	.word	0x20000840
		fmt = FS_FAT32;
 8014874:	2303      	movs	r3, #3
 8014876:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801487c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8014880:	4293      	cmp	r3, r2
 8014882:	d802      	bhi.n	801488a <find_volume+0x2f2>
 8014884:	2302      	movs	r3, #2
 8014886:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801488c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8014890:	4293      	cmp	r3, r2
 8014892:	d802      	bhi.n	801489a <find_volume+0x302>
 8014894:	2301      	movs	r3, #1
 8014896:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801489c:	1c9a      	adds	r2, r3, #2
 801489e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148a0:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80148a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80148a6:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80148a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80148aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148ac:	441a      	add	r2, r3
 80148ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148b0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80148b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80148b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148b6:	441a      	add	r2, r3
 80148b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148ba:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80148bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80148c0:	2b03      	cmp	r3, #3
 80148c2:	d11e      	bne.n	8014902 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80148c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148c6:	3334      	adds	r3, #52	; 0x34
 80148c8:	332a      	adds	r3, #42	; 0x2a
 80148ca:	4618      	mov	r0, r3
 80148cc:	f7fe fb58 	bl	8012f80 <ld_word>
 80148d0:	4603      	mov	r3, r0
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d001      	beq.n	80148da <find_volume+0x342>
 80148d6:	230d      	movs	r3, #13
 80148d8:	e0a8      	b.n	8014a2c <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80148da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148dc:	891b      	ldrh	r3, [r3, #8]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d001      	beq.n	80148e6 <find_volume+0x34e>
 80148e2:	230d      	movs	r3, #13
 80148e4:	e0a2      	b.n	8014a2c <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80148e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148e8:	3334      	adds	r3, #52	; 0x34
 80148ea:	332c      	adds	r3, #44	; 0x2c
 80148ec:	4618      	mov	r0, r3
 80148ee:	f7fe fb5f 	bl	8012fb0 <ld_dword>
 80148f2:	4602      	mov	r2, r0
 80148f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148f6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80148f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148fa:	699b      	ldr	r3, [r3, #24]
 80148fc:	009b      	lsls	r3, r3, #2
 80148fe:	647b      	str	r3, [r7, #68]	; 0x44
 8014900:	e01f      	b.n	8014942 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8014902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014904:	891b      	ldrh	r3, [r3, #8]
 8014906:	2b00      	cmp	r3, #0
 8014908:	d101      	bne.n	801490e <find_volume+0x376>
 801490a:	230d      	movs	r3, #13
 801490c:	e08e      	b.n	8014a2c <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801490e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014910:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014914:	441a      	add	r2, r3
 8014916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014918:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801491a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801491e:	2b02      	cmp	r3, #2
 8014920:	d103      	bne.n	801492a <find_volume+0x392>
 8014922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014924:	699b      	ldr	r3, [r3, #24]
 8014926:	005b      	lsls	r3, r3, #1
 8014928:	e00a      	b.n	8014940 <find_volume+0x3a8>
 801492a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801492c:	699a      	ldr	r2, [r3, #24]
 801492e:	4613      	mov	r3, r2
 8014930:	005b      	lsls	r3, r3, #1
 8014932:	4413      	add	r3, r2
 8014934:	085a      	lsrs	r2, r3, #1
 8014936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014938:	699b      	ldr	r3, [r3, #24]
 801493a:	f003 0301 	and.w	r3, r3, #1
 801493e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8014940:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8014942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014944:	69da      	ldr	r2, [r3, #28]
 8014946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014948:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801494c:	0a5b      	lsrs	r3, r3, #9
 801494e:	429a      	cmp	r2, r3
 8014950:	d201      	bcs.n	8014956 <find_volume+0x3be>
 8014952:	230d      	movs	r3, #13
 8014954:	e06a      	b.n	8014a2c <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8014956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014958:	f04f 32ff 	mov.w	r2, #4294967295
 801495c:	615a      	str	r2, [r3, #20]
 801495e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014960:	695a      	ldr	r2, [r3, #20]
 8014962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014964:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8014966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014968:	2280      	movs	r2, #128	; 0x80
 801496a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801496c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014970:	2b03      	cmp	r3, #3
 8014972:	d149      	bne.n	8014a08 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8014974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014976:	3334      	adds	r3, #52	; 0x34
 8014978:	3330      	adds	r3, #48	; 0x30
 801497a:	4618      	mov	r0, r3
 801497c:	f7fe fb00 	bl	8012f80 <ld_word>
 8014980:	4603      	mov	r3, r0
 8014982:	2b01      	cmp	r3, #1
 8014984:	d140      	bne.n	8014a08 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014988:	3301      	adds	r3, #1
 801498a:	4619      	mov	r1, r3
 801498c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801498e:	f7fe fdd9 	bl	8013544 <move_window>
 8014992:	4603      	mov	r3, r0
 8014994:	2b00      	cmp	r3, #0
 8014996:	d137      	bne.n	8014a08 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8014998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801499a:	2200      	movs	r2, #0
 801499c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801499e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149a0:	3334      	adds	r3, #52	; 0x34
 80149a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80149a6:	4618      	mov	r0, r3
 80149a8:	f7fe faea 	bl	8012f80 <ld_word>
 80149ac:	4603      	mov	r3, r0
 80149ae:	461a      	mov	r2, r3
 80149b0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80149b4:	429a      	cmp	r2, r3
 80149b6:	d127      	bne.n	8014a08 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80149b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149ba:	3334      	adds	r3, #52	; 0x34
 80149bc:	4618      	mov	r0, r3
 80149be:	f7fe faf7 	bl	8012fb0 <ld_dword>
 80149c2:	4603      	mov	r3, r0
 80149c4:	4a1b      	ldr	r2, [pc, #108]	; (8014a34 <find_volume+0x49c>)
 80149c6:	4293      	cmp	r3, r2
 80149c8:	d11e      	bne.n	8014a08 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80149ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149cc:	3334      	adds	r3, #52	; 0x34
 80149ce:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80149d2:	4618      	mov	r0, r3
 80149d4:	f7fe faec 	bl	8012fb0 <ld_dword>
 80149d8:	4603      	mov	r3, r0
 80149da:	4a17      	ldr	r2, [pc, #92]	; (8014a38 <find_volume+0x4a0>)
 80149dc:	4293      	cmp	r3, r2
 80149de:	d113      	bne.n	8014a08 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80149e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149e2:	3334      	adds	r3, #52	; 0x34
 80149e4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80149e8:	4618      	mov	r0, r3
 80149ea:	f7fe fae1 	bl	8012fb0 <ld_dword>
 80149ee:	4602      	mov	r2, r0
 80149f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149f2:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80149f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149f6:	3334      	adds	r3, #52	; 0x34
 80149f8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80149fc:	4618      	mov	r0, r3
 80149fe:	f7fe fad7 	bl	8012fb0 <ld_dword>
 8014a02:	4602      	mov	r2, r0
 8014a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a06:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8014a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a0a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8014a0e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8014a10:	4b0a      	ldr	r3, [pc, #40]	; (8014a3c <find_volume+0x4a4>)
 8014a12:	881b      	ldrh	r3, [r3, #0]
 8014a14:	3301      	adds	r3, #1
 8014a16:	b29a      	uxth	r2, r3
 8014a18:	4b08      	ldr	r3, [pc, #32]	; (8014a3c <find_volume+0x4a4>)
 8014a1a:	801a      	strh	r2, [r3, #0]
 8014a1c:	4b07      	ldr	r3, [pc, #28]	; (8014a3c <find_volume+0x4a4>)
 8014a1e:	881a      	ldrh	r2, [r3, #0]
 8014a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a22:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8014a24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014a26:	f7fe fd25 	bl	8013474 <clear_lock>
#endif
	return FR_OK;
 8014a2a:	2300      	movs	r3, #0
}
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	3758      	adds	r7, #88	; 0x58
 8014a30:	46bd      	mov	sp, r7
 8014a32:	bd80      	pop	{r7, pc}
 8014a34:	41615252 	.word	0x41615252
 8014a38:	61417272 	.word	0x61417272
 8014a3c:	20000844 	.word	0x20000844

08014a40 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8014a40:	b580      	push	{r7, lr}
 8014a42:	b084      	sub	sp, #16
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	6078      	str	r0, [r7, #4]
 8014a48:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8014a4a:	2309      	movs	r3, #9
 8014a4c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d02e      	beq.n	8014ab2 <validate+0x72>
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d02a      	beq.n	8014ab2 <validate+0x72>
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	781b      	ldrb	r3, [r3, #0]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d025      	beq.n	8014ab2 <validate+0x72>
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	889a      	ldrh	r2, [r3, #4]
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	88db      	ldrh	r3, [r3, #6]
 8014a70:	429a      	cmp	r2, r3
 8014a72:	d11e      	bne.n	8014ab2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	4618      	mov	r0, r3
 8014a7a:	f7fe fb81 	bl	8013180 <lock_fs>
 8014a7e:	4603      	mov	r3, r0
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d014      	beq.n	8014aae <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	785b      	ldrb	r3, [r3, #1]
 8014a8a:	4618      	mov	r0, r3
 8014a8c:	f7fe f9da 	bl	8012e44 <disk_status>
 8014a90:	4603      	mov	r3, r0
 8014a92:	f003 0301 	and.w	r3, r3, #1
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d102      	bne.n	8014aa0 <validate+0x60>
				res = FR_OK;
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	73fb      	strb	r3, [r7, #15]
 8014a9e:	e008      	b.n	8014ab2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	2100      	movs	r1, #0
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	f7fe fb80 	bl	80131ac <unlock_fs>
 8014aac:	e001      	b.n	8014ab2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8014aae:	230f      	movs	r3, #15
 8014ab0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8014ab2:	7bfb      	ldrb	r3, [r7, #15]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d102      	bne.n	8014abe <validate+0x7e>
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	e000      	b.n	8014ac0 <validate+0x80>
 8014abe:	2300      	movs	r3, #0
 8014ac0:	683a      	ldr	r2, [r7, #0]
 8014ac2:	6013      	str	r3, [r2, #0]
	return res;
 8014ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	3710      	adds	r7, #16
 8014aca:	46bd      	mov	sp, r7
 8014acc:	bd80      	pop	{r7, pc}
	...

08014ad0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	b088      	sub	sp, #32
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	60f8      	str	r0, [r7, #12]
 8014ad8:	60b9      	str	r1, [r7, #8]
 8014ada:	4613      	mov	r3, r2
 8014adc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8014ade:	68bb      	ldr	r3, [r7, #8]
 8014ae0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8014ae2:	f107 0310 	add.w	r3, r7, #16
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	f7ff fcbb 	bl	8014462 <get_ldnumber>
 8014aec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8014aee:	69fb      	ldr	r3, [r7, #28]
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	da01      	bge.n	8014af8 <f_mount+0x28>
 8014af4:	230b      	movs	r3, #11
 8014af6:	e048      	b.n	8014b8a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8014af8:	4a26      	ldr	r2, [pc, #152]	; (8014b94 <f_mount+0xc4>)
 8014afa:	69fb      	ldr	r3, [r7, #28]
 8014afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014b00:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8014b02:	69bb      	ldr	r3, [r7, #24]
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d00f      	beq.n	8014b28 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8014b08:	69b8      	ldr	r0, [r7, #24]
 8014b0a:	f7fe fcb3 	bl	8013474 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8014b0e:	69bb      	ldr	r3, [r7, #24]
 8014b10:	68db      	ldr	r3, [r3, #12]
 8014b12:	4618      	mov	r0, r3
 8014b14:	f001 f812 	bl	8015b3c <ff_del_syncobj>
 8014b18:	4603      	mov	r3, r0
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d101      	bne.n	8014b22 <f_mount+0x52>
 8014b1e:	2302      	movs	r3, #2
 8014b20:	e033      	b.n	8014b8a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8014b22:	69bb      	ldr	r3, [r7, #24]
 8014b24:	2200      	movs	r2, #0
 8014b26:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d00f      	beq.n	8014b4e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	2200      	movs	r2, #0
 8014b32:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8014b34:	69fb      	ldr	r3, [r7, #28]
 8014b36:	b2da      	uxtb	r2, r3
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	330c      	adds	r3, #12
 8014b3c:	4619      	mov	r1, r3
 8014b3e:	4610      	mov	r0, r2
 8014b40:	f000 ffe1 	bl	8015b06 <ff_cre_syncobj>
 8014b44:	4603      	mov	r3, r0
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d101      	bne.n	8014b4e <f_mount+0x7e>
 8014b4a:	2302      	movs	r3, #2
 8014b4c:	e01d      	b.n	8014b8a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8014b4e:	68fa      	ldr	r2, [r7, #12]
 8014b50:	4910      	ldr	r1, [pc, #64]	; (8014b94 <f_mount+0xc4>)
 8014b52:	69fb      	ldr	r3, [r7, #28]
 8014b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d002      	beq.n	8014b64 <f_mount+0x94>
 8014b5e:	79fb      	ldrb	r3, [r7, #7]
 8014b60:	2b01      	cmp	r3, #1
 8014b62:	d001      	beq.n	8014b68 <f_mount+0x98>
 8014b64:	2300      	movs	r3, #0
 8014b66:	e010      	b.n	8014b8a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014b68:	f107 010c 	add.w	r1, r7, #12
 8014b6c:	f107 0308 	add.w	r3, r7, #8
 8014b70:	2200      	movs	r2, #0
 8014b72:	4618      	mov	r0, r3
 8014b74:	f7ff fd10 	bl	8014598 <find_volume>
 8014b78:	4603      	mov	r3, r0
 8014b7a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	7dfa      	ldrb	r2, [r7, #23]
 8014b80:	4611      	mov	r1, r2
 8014b82:	4618      	mov	r0, r3
 8014b84:	f7fe fb12 	bl	80131ac <unlock_fs>
 8014b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	3720      	adds	r7, #32
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	bd80      	pop	{r7, pc}
 8014b92:	bf00      	nop
 8014b94:	20000840 	.word	0x20000840

08014b98 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014b98:	b580      	push	{r7, lr}
 8014b9a:	b098      	sub	sp, #96	; 0x60
 8014b9c:	af00      	add	r7, sp, #0
 8014b9e:	60f8      	str	r0, [r7, #12]
 8014ba0:	60b9      	str	r1, [r7, #8]
 8014ba2:	4613      	mov	r3, r2
 8014ba4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d101      	bne.n	8014bb0 <f_open+0x18>
 8014bac:	2309      	movs	r3, #9
 8014bae:	e1b4      	b.n	8014f1a <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8014bb0:	79fb      	ldrb	r3, [r7, #7]
 8014bb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014bb6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8014bb8:	79fa      	ldrb	r2, [r7, #7]
 8014bba:	f107 0110 	add.w	r1, r7, #16
 8014bbe:	f107 0308 	add.w	r3, r7, #8
 8014bc2:	4618      	mov	r0, r3
 8014bc4:	f7ff fce8 	bl	8014598 <find_volume>
 8014bc8:	4603      	mov	r3, r0
 8014bca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8014bce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	f040 8191 	bne.w	8014efa <f_open+0x362>
		dj.obj.fs = fs;
 8014bd8:	693b      	ldr	r3, [r7, #16]
 8014bda:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014bdc:	68ba      	ldr	r2, [r7, #8]
 8014bde:	f107 0314 	add.w	r3, r7, #20
 8014be2:	4611      	mov	r1, r2
 8014be4:	4618      	mov	r0, r3
 8014be6:	f7ff fbcb 	bl	8014380 <follow_path>
 8014bea:	4603      	mov	r3, r0
 8014bec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8014bf0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d11a      	bne.n	8014c2e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014bf8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014bfc:	b25b      	sxtb	r3, r3
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	da03      	bge.n	8014c0a <f_open+0x72>
				res = FR_INVALID_NAME;
 8014c02:	2306      	movs	r3, #6
 8014c04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014c08:	e011      	b.n	8014c2e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014c0a:	79fb      	ldrb	r3, [r7, #7]
 8014c0c:	f023 0301 	bic.w	r3, r3, #1
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	bf14      	ite	ne
 8014c14:	2301      	movne	r3, #1
 8014c16:	2300      	moveq	r3, #0
 8014c18:	b2db      	uxtb	r3, r3
 8014c1a:	461a      	mov	r2, r3
 8014c1c:	f107 0314 	add.w	r3, r7, #20
 8014c20:	4611      	mov	r1, r2
 8014c22:	4618      	mov	r0, r3
 8014c24:	f7fe fade 	bl	80131e4 <chk_lock>
 8014c28:	4603      	mov	r3, r0
 8014c2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8014c2e:	79fb      	ldrb	r3, [r7, #7]
 8014c30:	f003 031c 	and.w	r3, r3, #28
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d07f      	beq.n	8014d38 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8014c38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d017      	beq.n	8014c70 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8014c40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014c44:	2b04      	cmp	r3, #4
 8014c46:	d10e      	bne.n	8014c66 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8014c48:	f7fe fb28 	bl	801329c <enq_lock>
 8014c4c:	4603      	mov	r3, r0
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d006      	beq.n	8014c60 <f_open+0xc8>
 8014c52:	f107 0314 	add.w	r3, r7, #20
 8014c56:	4618      	mov	r0, r3
 8014c58:	f7ff fa6c 	bl	8014134 <dir_register>
 8014c5c:	4603      	mov	r3, r0
 8014c5e:	e000      	b.n	8014c62 <f_open+0xca>
 8014c60:	2312      	movs	r3, #18
 8014c62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8014c66:	79fb      	ldrb	r3, [r7, #7]
 8014c68:	f043 0308 	orr.w	r3, r3, #8
 8014c6c:	71fb      	strb	r3, [r7, #7]
 8014c6e:	e010      	b.n	8014c92 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014c70:	7ebb      	ldrb	r3, [r7, #26]
 8014c72:	f003 0311 	and.w	r3, r3, #17
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d003      	beq.n	8014c82 <f_open+0xea>
					res = FR_DENIED;
 8014c7a:	2307      	movs	r3, #7
 8014c7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014c80:	e007      	b.n	8014c92 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8014c82:	79fb      	ldrb	r3, [r7, #7]
 8014c84:	f003 0304 	and.w	r3, r3, #4
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d002      	beq.n	8014c92 <f_open+0xfa>
 8014c8c:	2308      	movs	r3, #8
 8014c8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8014c92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d168      	bne.n	8014d6c <f_open+0x1d4>
 8014c9a:	79fb      	ldrb	r3, [r7, #7]
 8014c9c:	f003 0308 	and.w	r3, r3, #8
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d063      	beq.n	8014d6c <f_open+0x1d4>
				dw = GET_FATTIME();
 8014ca4:	f7fc fc10 	bl	80114c8 <get_fattime>
 8014ca8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8014caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cac:	330e      	adds	r3, #14
 8014cae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	f7fe f9bb 	bl	801302c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8014cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cb8:	3316      	adds	r3, #22
 8014cba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	f7fe f9b5 	bl	801302c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8014cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cc4:	330b      	adds	r3, #11
 8014cc6:	2220      	movs	r2, #32
 8014cc8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8014cca:	693b      	ldr	r3, [r7, #16]
 8014ccc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014cce:	4611      	mov	r1, r2
 8014cd0:	4618      	mov	r0, r3
 8014cd2:	f7ff f93e 	bl	8013f52 <ld_clust>
 8014cd6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014cd8:	693b      	ldr	r3, [r7, #16]
 8014cda:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014cdc:	2200      	movs	r2, #0
 8014cde:	4618      	mov	r0, r3
 8014ce0:	f7ff f956 	bl	8013f90 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8014ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ce6:	331c      	adds	r3, #28
 8014ce8:	2100      	movs	r1, #0
 8014cea:	4618      	mov	r0, r3
 8014cec:	f7fe f99e 	bl	801302c <st_dword>
					fs->wflag = 1;
 8014cf0:	693b      	ldr	r3, [r7, #16]
 8014cf2:	2201      	movs	r2, #1
 8014cf4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8014cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d037      	beq.n	8014d6c <f_open+0x1d4>
						dw = fs->winsect;
 8014cfc:	693b      	ldr	r3, [r7, #16]
 8014cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d00:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8014d02:	f107 0314 	add.w	r3, r7, #20
 8014d06:	2200      	movs	r2, #0
 8014d08:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8014d0a:	4618      	mov	r0, r3
 8014d0c:	f7fe fe69 	bl	80139e2 <remove_chain>
 8014d10:	4603      	mov	r3, r0
 8014d12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8014d16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d126      	bne.n	8014d6c <f_open+0x1d4>
							res = move_window(fs, dw);
 8014d1e:	693b      	ldr	r3, [r7, #16]
 8014d20:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014d22:	4618      	mov	r0, r3
 8014d24:	f7fe fc0e 	bl	8013544 <move_window>
 8014d28:	4603      	mov	r3, r0
 8014d2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8014d2e:	693b      	ldr	r3, [r7, #16]
 8014d30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014d32:	3a01      	subs	r2, #1
 8014d34:	611a      	str	r2, [r3, #16]
 8014d36:	e019      	b.n	8014d6c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8014d38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d115      	bne.n	8014d6c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8014d40:	7ebb      	ldrb	r3, [r7, #26]
 8014d42:	f003 0310 	and.w	r3, r3, #16
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d003      	beq.n	8014d52 <f_open+0x1ba>
					res = FR_NO_FILE;
 8014d4a:	2304      	movs	r3, #4
 8014d4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014d50:	e00c      	b.n	8014d6c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8014d52:	79fb      	ldrb	r3, [r7, #7]
 8014d54:	f003 0302 	and.w	r3, r3, #2
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d007      	beq.n	8014d6c <f_open+0x1d4>
 8014d5c:	7ebb      	ldrb	r3, [r7, #26]
 8014d5e:	f003 0301 	and.w	r3, r3, #1
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d002      	beq.n	8014d6c <f_open+0x1d4>
						res = FR_DENIED;
 8014d66:	2307      	movs	r3, #7
 8014d68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8014d6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d128      	bne.n	8014dc6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014d74:	79fb      	ldrb	r3, [r7, #7]
 8014d76:	f003 0308 	and.w	r3, r3, #8
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d003      	beq.n	8014d86 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8014d7e:	79fb      	ldrb	r3, [r7, #7]
 8014d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d84:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014d86:	693b      	ldr	r3, [r7, #16]
 8014d88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8014d8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014d94:	79fb      	ldrb	r3, [r7, #7]
 8014d96:	f023 0301 	bic.w	r3, r3, #1
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	bf14      	ite	ne
 8014d9e:	2301      	movne	r3, #1
 8014da0:	2300      	moveq	r3, #0
 8014da2:	b2db      	uxtb	r3, r3
 8014da4:	461a      	mov	r2, r3
 8014da6:	f107 0314 	add.w	r3, r7, #20
 8014daa:	4611      	mov	r1, r2
 8014dac:	4618      	mov	r0, r3
 8014dae:	f7fe fa97 	bl	80132e0 <inc_lock>
 8014db2:	4602      	mov	r2, r0
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	691b      	ldr	r3, [r3, #16]
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d102      	bne.n	8014dc6 <f_open+0x22e>
 8014dc0:	2302      	movs	r3, #2
 8014dc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8014dc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	f040 8095 	bne.w	8014efa <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014dd0:	693b      	ldr	r3, [r7, #16]
 8014dd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014dd4:	4611      	mov	r1, r2
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	f7ff f8bb 	bl	8013f52 <ld_clust>
 8014ddc:	4602      	mov	r2, r0
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8014de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014de4:	331c      	adds	r3, #28
 8014de6:	4618      	mov	r0, r3
 8014de8:	f7fe f8e2 	bl	8012fb0 <ld_dword>
 8014dec:	4602      	mov	r2, r0
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	2200      	movs	r2, #0
 8014df6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8014df8:	693a      	ldr	r2, [r7, #16]
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8014dfe:	693b      	ldr	r3, [r7, #16]
 8014e00:	88da      	ldrh	r2, [r3, #6]
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	79fa      	ldrb	r2, [r7, #7]
 8014e0a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	2200      	movs	r2, #0
 8014e10:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	2200      	movs	r2, #0
 8014e16:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	2200      	movs	r2, #0
 8014e1c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	3330      	adds	r3, #48	; 0x30
 8014e22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014e26:	2100      	movs	r1, #0
 8014e28:	4618      	mov	r0, r3
 8014e2a:	f7fe f94c 	bl	80130c6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8014e2e:	79fb      	ldrb	r3, [r7, #7]
 8014e30:	f003 0320 	and.w	r3, r3, #32
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d060      	beq.n	8014efa <f_open+0x362>
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	68db      	ldr	r3, [r3, #12]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d05c      	beq.n	8014efa <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	68da      	ldr	r2, [r3, #12]
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014e48:	693b      	ldr	r3, [r7, #16]
 8014e4a:	895b      	ldrh	r3, [r3, #10]
 8014e4c:	025b      	lsls	r3, r3, #9
 8014e4e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	689b      	ldr	r3, [r3, #8]
 8014e54:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	68db      	ldr	r3, [r3, #12]
 8014e5a:	657b      	str	r3, [r7, #84]	; 0x54
 8014e5c:	e016      	b.n	8014e8c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014e62:	4618      	mov	r0, r3
 8014e64:	f7fe fc29 	bl	80136ba <get_fat>
 8014e68:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8014e6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014e6c:	2b01      	cmp	r3, #1
 8014e6e:	d802      	bhi.n	8014e76 <f_open+0x2de>
 8014e70:	2302      	movs	r3, #2
 8014e72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014e76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e7c:	d102      	bne.n	8014e84 <f_open+0x2ec>
 8014e7e:	2301      	movs	r3, #1
 8014e80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014e84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e88:	1ad3      	subs	r3, r2, r3
 8014e8a:	657b      	str	r3, [r7, #84]	; 0x54
 8014e8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d103      	bne.n	8014e9c <f_open+0x304>
 8014e94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e98:	429a      	cmp	r2, r3
 8014e9a:	d8e0      	bhi.n	8014e5e <f_open+0x2c6>
				}
				fp->clust = clst;
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014ea0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014ea2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d127      	bne.n	8014efa <f_open+0x362>
 8014eaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d022      	beq.n	8014efa <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014eb4:	693b      	ldr	r3, [r7, #16]
 8014eb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014eb8:	4618      	mov	r0, r3
 8014eba:	f7fe fbdf 	bl	801367c <clust2sect>
 8014ebe:	6478      	str	r0, [r7, #68]	; 0x44
 8014ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d103      	bne.n	8014ece <f_open+0x336>
						res = FR_INT_ERR;
 8014ec6:	2302      	movs	r3, #2
 8014ec8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014ecc:	e015      	b.n	8014efa <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014ece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014ed0:	0a5a      	lsrs	r2, r3, #9
 8014ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ed4:	441a      	add	r2, r3
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014eda:	693b      	ldr	r3, [r7, #16]
 8014edc:	7858      	ldrb	r0, [r3, #1]
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	6a1a      	ldr	r2, [r3, #32]
 8014ee8:	2301      	movs	r3, #1
 8014eea:	f7fd ffeb 	bl	8012ec4 <disk_read>
 8014eee:	4603      	mov	r3, r0
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d002      	beq.n	8014efa <f_open+0x362>
 8014ef4:	2301      	movs	r3, #1
 8014ef6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014efa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d002      	beq.n	8014f08 <f_open+0x370>
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	2200      	movs	r2, #0
 8014f06:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014f08:	693b      	ldr	r3, [r7, #16]
 8014f0a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8014f0e:	4611      	mov	r1, r2
 8014f10:	4618      	mov	r0, r3
 8014f12:	f7fe f94b 	bl	80131ac <unlock_fs>
 8014f16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	3760      	adds	r7, #96	; 0x60
 8014f1e:	46bd      	mov	sp, r7
 8014f20:	bd80      	pop	{r7, pc}

08014f22 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014f22:	b580      	push	{r7, lr}
 8014f24:	b08c      	sub	sp, #48	; 0x30
 8014f26:	af00      	add	r7, sp, #0
 8014f28:	60f8      	str	r0, [r7, #12]
 8014f2a:	60b9      	str	r1, [r7, #8]
 8014f2c:	607a      	str	r2, [r7, #4]
 8014f2e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014f30:	68bb      	ldr	r3, [r7, #8]
 8014f32:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014f34:	683b      	ldr	r3, [r7, #0]
 8014f36:	2200      	movs	r2, #0
 8014f38:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	f107 0210 	add.w	r2, r7, #16
 8014f40:	4611      	mov	r1, r2
 8014f42:	4618      	mov	r0, r3
 8014f44:	f7ff fd7c 	bl	8014a40 <validate>
 8014f48:	4603      	mov	r3, r0
 8014f4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014f4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d107      	bne.n	8014f66 <f_write+0x44>
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	7d5b      	ldrb	r3, [r3, #21]
 8014f5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014f5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d009      	beq.n	8014f7a <f_write+0x58>
 8014f66:	693b      	ldr	r3, [r7, #16]
 8014f68:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8014f6c:	4611      	mov	r1, r2
 8014f6e:	4618      	mov	r0, r3
 8014f70:	f7fe f91c 	bl	80131ac <unlock_fs>
 8014f74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014f78:	e173      	b.n	8015262 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	7d1b      	ldrb	r3, [r3, #20]
 8014f7e:	f003 0302 	and.w	r3, r3, #2
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d106      	bne.n	8014f94 <f_write+0x72>
 8014f86:	693b      	ldr	r3, [r7, #16]
 8014f88:	2107      	movs	r1, #7
 8014f8a:	4618      	mov	r0, r3
 8014f8c:	f7fe f90e 	bl	80131ac <unlock_fs>
 8014f90:	2307      	movs	r3, #7
 8014f92:	e166      	b.n	8015262 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	699a      	ldr	r2, [r3, #24]
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	441a      	add	r2, r3
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	699b      	ldr	r3, [r3, #24]
 8014fa0:	429a      	cmp	r2, r3
 8014fa2:	f080 814b 	bcs.w	801523c <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	699b      	ldr	r3, [r3, #24]
 8014faa:	43db      	mvns	r3, r3
 8014fac:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8014fae:	e145      	b.n	801523c <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	699b      	ldr	r3, [r3, #24]
 8014fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	f040 8101 	bne.w	80151c0 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	699b      	ldr	r3, [r3, #24]
 8014fc2:	0a5b      	lsrs	r3, r3, #9
 8014fc4:	693a      	ldr	r2, [r7, #16]
 8014fc6:	8952      	ldrh	r2, [r2, #10]
 8014fc8:	3a01      	subs	r2, #1
 8014fca:	4013      	ands	r3, r2
 8014fcc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8014fce:	69bb      	ldr	r3, [r7, #24]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d14d      	bne.n	8015070 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	699b      	ldr	r3, [r3, #24]
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d10c      	bne.n	8014ff6 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	689b      	ldr	r3, [r3, #8]
 8014fe0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8014fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d11a      	bne.n	801501e <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	2100      	movs	r1, #0
 8014fec:	4618      	mov	r0, r3
 8014fee:	f7fe fd5d 	bl	8013aac <create_chain>
 8014ff2:	62b8      	str	r0, [r7, #40]	; 0x28
 8014ff4:	e013      	b.n	801501e <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d007      	beq.n	801500e <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	699b      	ldr	r3, [r3, #24]
 8015002:	4619      	mov	r1, r3
 8015004:	68f8      	ldr	r0, [r7, #12]
 8015006:	f7fe fde9 	bl	8013bdc <clmt_clust>
 801500a:	62b8      	str	r0, [r7, #40]	; 0x28
 801500c:	e007      	b.n	801501e <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801500e:	68fa      	ldr	r2, [r7, #12]
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	69db      	ldr	r3, [r3, #28]
 8015014:	4619      	mov	r1, r3
 8015016:	4610      	mov	r0, r2
 8015018:	f7fe fd48 	bl	8013aac <create_chain>
 801501c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801501e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015020:	2b00      	cmp	r3, #0
 8015022:	f000 8110 	beq.w	8015246 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8015026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015028:	2b01      	cmp	r3, #1
 801502a:	d109      	bne.n	8015040 <f_write+0x11e>
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	2202      	movs	r2, #2
 8015030:	755a      	strb	r2, [r3, #21]
 8015032:	693b      	ldr	r3, [r7, #16]
 8015034:	2102      	movs	r1, #2
 8015036:	4618      	mov	r0, r3
 8015038:	f7fe f8b8 	bl	80131ac <unlock_fs>
 801503c:	2302      	movs	r3, #2
 801503e:	e110      	b.n	8015262 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015046:	d109      	bne.n	801505c <f_write+0x13a>
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	2201      	movs	r2, #1
 801504c:	755a      	strb	r2, [r3, #21]
 801504e:	693b      	ldr	r3, [r7, #16]
 8015050:	2101      	movs	r1, #1
 8015052:	4618      	mov	r0, r3
 8015054:	f7fe f8aa 	bl	80131ac <unlock_fs>
 8015058:	2301      	movs	r3, #1
 801505a:	e102      	b.n	8015262 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015060:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8015062:	68fb      	ldr	r3, [r7, #12]
 8015064:	689b      	ldr	r3, [r3, #8]
 8015066:	2b00      	cmp	r3, #0
 8015068:	d102      	bne.n	8015070 <f_write+0x14e>
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801506e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	7d1b      	ldrb	r3, [r3, #20]
 8015074:	b25b      	sxtb	r3, r3
 8015076:	2b00      	cmp	r3, #0
 8015078:	da1d      	bge.n	80150b6 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801507a:	693b      	ldr	r3, [r7, #16]
 801507c:	7858      	ldrb	r0, [r3, #1]
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	6a1a      	ldr	r2, [r3, #32]
 8015088:	2301      	movs	r3, #1
 801508a:	f7fd ff3b 	bl	8012f04 <disk_write>
 801508e:	4603      	mov	r3, r0
 8015090:	2b00      	cmp	r3, #0
 8015092:	d009      	beq.n	80150a8 <f_write+0x186>
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	2201      	movs	r2, #1
 8015098:	755a      	strb	r2, [r3, #21]
 801509a:	693b      	ldr	r3, [r7, #16]
 801509c:	2101      	movs	r1, #1
 801509e:	4618      	mov	r0, r3
 80150a0:	f7fe f884 	bl	80131ac <unlock_fs>
 80150a4:	2301      	movs	r3, #1
 80150a6:	e0dc      	b.n	8015262 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	7d1b      	ldrb	r3, [r3, #20]
 80150ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80150b0:	b2da      	uxtb	r2, r3
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80150b6:	693a      	ldr	r2, [r7, #16]
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	69db      	ldr	r3, [r3, #28]
 80150bc:	4619      	mov	r1, r3
 80150be:	4610      	mov	r0, r2
 80150c0:	f7fe fadc 	bl	801367c <clust2sect>
 80150c4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80150c6:	697b      	ldr	r3, [r7, #20]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d109      	bne.n	80150e0 <f_write+0x1be>
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	2202      	movs	r2, #2
 80150d0:	755a      	strb	r2, [r3, #21]
 80150d2:	693b      	ldr	r3, [r7, #16]
 80150d4:	2102      	movs	r1, #2
 80150d6:	4618      	mov	r0, r3
 80150d8:	f7fe f868 	bl	80131ac <unlock_fs>
 80150dc:	2302      	movs	r3, #2
 80150de:	e0c0      	b.n	8015262 <f_write+0x340>
			sect += csect;
 80150e0:	697a      	ldr	r2, [r7, #20]
 80150e2:	69bb      	ldr	r3, [r7, #24]
 80150e4:	4413      	add	r3, r2
 80150e6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	0a5b      	lsrs	r3, r3, #9
 80150ec:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80150ee:	6a3b      	ldr	r3, [r7, #32]
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d041      	beq.n	8015178 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80150f4:	69ba      	ldr	r2, [r7, #24]
 80150f6:	6a3b      	ldr	r3, [r7, #32]
 80150f8:	4413      	add	r3, r2
 80150fa:	693a      	ldr	r2, [r7, #16]
 80150fc:	8952      	ldrh	r2, [r2, #10]
 80150fe:	4293      	cmp	r3, r2
 8015100:	d905      	bls.n	801510e <f_write+0x1ec>
					cc = fs->csize - csect;
 8015102:	693b      	ldr	r3, [r7, #16]
 8015104:	895b      	ldrh	r3, [r3, #10]
 8015106:	461a      	mov	r2, r3
 8015108:	69bb      	ldr	r3, [r7, #24]
 801510a:	1ad3      	subs	r3, r2, r3
 801510c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801510e:	693b      	ldr	r3, [r7, #16]
 8015110:	7858      	ldrb	r0, [r3, #1]
 8015112:	6a3b      	ldr	r3, [r7, #32]
 8015114:	697a      	ldr	r2, [r7, #20]
 8015116:	69f9      	ldr	r1, [r7, #28]
 8015118:	f7fd fef4 	bl	8012f04 <disk_write>
 801511c:	4603      	mov	r3, r0
 801511e:	2b00      	cmp	r3, #0
 8015120:	d009      	beq.n	8015136 <f_write+0x214>
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	2201      	movs	r2, #1
 8015126:	755a      	strb	r2, [r3, #21]
 8015128:	693b      	ldr	r3, [r7, #16]
 801512a:	2101      	movs	r1, #1
 801512c:	4618      	mov	r0, r3
 801512e:	f7fe f83d 	bl	80131ac <unlock_fs>
 8015132:	2301      	movs	r3, #1
 8015134:	e095      	b.n	8015262 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	6a1a      	ldr	r2, [r3, #32]
 801513a:	697b      	ldr	r3, [r7, #20]
 801513c:	1ad3      	subs	r3, r2, r3
 801513e:	6a3a      	ldr	r2, [r7, #32]
 8015140:	429a      	cmp	r2, r3
 8015142:	d915      	bls.n	8015170 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	6a1a      	ldr	r2, [r3, #32]
 801514e:	697b      	ldr	r3, [r7, #20]
 8015150:	1ad3      	subs	r3, r2, r3
 8015152:	025b      	lsls	r3, r3, #9
 8015154:	69fa      	ldr	r2, [r7, #28]
 8015156:	4413      	add	r3, r2
 8015158:	f44f 7200 	mov.w	r2, #512	; 0x200
 801515c:	4619      	mov	r1, r3
 801515e:	f7fd ff91 	bl	8013084 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	7d1b      	ldrb	r3, [r3, #20]
 8015166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801516a:	b2da      	uxtb	r2, r3
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8015170:	6a3b      	ldr	r3, [r7, #32]
 8015172:	025b      	lsls	r3, r3, #9
 8015174:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8015176:	e044      	b.n	8015202 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	6a1b      	ldr	r3, [r3, #32]
 801517c:	697a      	ldr	r2, [r7, #20]
 801517e:	429a      	cmp	r2, r3
 8015180:	d01b      	beq.n	80151ba <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	699a      	ldr	r2, [r3, #24]
 8015186:	68fb      	ldr	r3, [r7, #12]
 8015188:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801518a:	429a      	cmp	r2, r3
 801518c:	d215      	bcs.n	80151ba <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801518e:	693b      	ldr	r3, [r7, #16]
 8015190:	7858      	ldrb	r0, [r3, #1]
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015198:	2301      	movs	r3, #1
 801519a:	697a      	ldr	r2, [r7, #20]
 801519c:	f7fd fe92 	bl	8012ec4 <disk_read>
 80151a0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d009      	beq.n	80151ba <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	2201      	movs	r2, #1
 80151aa:	755a      	strb	r2, [r3, #21]
 80151ac:	693b      	ldr	r3, [r7, #16]
 80151ae:	2101      	movs	r1, #1
 80151b0:	4618      	mov	r0, r3
 80151b2:	f7fd fffb 	bl	80131ac <unlock_fs>
 80151b6:	2301      	movs	r3, #1
 80151b8:	e053      	b.n	8015262 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	697a      	ldr	r2, [r7, #20]
 80151be:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	699b      	ldr	r3, [r3, #24]
 80151c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80151c8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80151cc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80151ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	429a      	cmp	r2, r3
 80151d4:	d901      	bls.n	80151da <f_write+0x2b8>
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	699b      	ldr	r3, [r3, #24]
 80151e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80151e8:	4413      	add	r3, r2
 80151ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80151ec:	69f9      	ldr	r1, [r7, #28]
 80151ee:	4618      	mov	r0, r3
 80151f0:	f7fd ff48 	bl	8013084 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	7d1b      	ldrb	r3, [r3, #20]
 80151f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80151fc:	b2da      	uxtb	r2, r3
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8015202:	69fa      	ldr	r2, [r7, #28]
 8015204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015206:	4413      	add	r3, r2
 8015208:	61fb      	str	r3, [r7, #28]
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	699a      	ldr	r2, [r3, #24]
 801520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015210:	441a      	add	r2, r3
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	619a      	str	r2, [r3, #24]
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	68da      	ldr	r2, [r3, #12]
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	699b      	ldr	r3, [r3, #24]
 801521e:	429a      	cmp	r2, r3
 8015220:	bf38      	it	cc
 8015222:	461a      	movcc	r2, r3
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	60da      	str	r2, [r3, #12]
 8015228:	683b      	ldr	r3, [r7, #0]
 801522a:	681a      	ldr	r2, [r3, #0]
 801522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801522e:	441a      	add	r2, r3
 8015230:	683b      	ldr	r3, [r7, #0]
 8015232:	601a      	str	r2, [r3, #0]
 8015234:	687a      	ldr	r2, [r7, #4]
 8015236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015238:	1ad3      	subs	r3, r2, r3
 801523a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	2b00      	cmp	r3, #0
 8015240:	f47f aeb6 	bne.w	8014fb0 <f_write+0x8e>
 8015244:	e000      	b.n	8015248 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8015246:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	7d1b      	ldrb	r3, [r3, #20]
 801524c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015250:	b2da      	uxtb	r2, r3
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8015256:	693b      	ldr	r3, [r7, #16]
 8015258:	2100      	movs	r1, #0
 801525a:	4618      	mov	r0, r3
 801525c:	f7fd ffa6 	bl	80131ac <unlock_fs>
 8015260:	2300      	movs	r3, #0
}
 8015262:	4618      	mov	r0, r3
 8015264:	3730      	adds	r7, #48	; 0x30
 8015266:	46bd      	mov	sp, r7
 8015268:	bd80      	pop	{r7, pc}

0801526a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801526a:	b580      	push	{r7, lr}
 801526c:	b086      	sub	sp, #24
 801526e:	af00      	add	r7, sp, #0
 8015270:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	f107 0208 	add.w	r2, r7, #8
 8015278:	4611      	mov	r1, r2
 801527a:	4618      	mov	r0, r3
 801527c:	f7ff fbe0 	bl	8014a40 <validate>
 8015280:	4603      	mov	r3, r0
 8015282:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015284:	7dfb      	ldrb	r3, [r7, #23]
 8015286:	2b00      	cmp	r3, #0
 8015288:	d16d      	bne.n	8015366 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	7d1b      	ldrb	r3, [r3, #20]
 801528e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015292:	2b00      	cmp	r3, #0
 8015294:	d067      	beq.n	8015366 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	7d1b      	ldrb	r3, [r3, #20]
 801529a:	b25b      	sxtb	r3, r3
 801529c:	2b00      	cmp	r3, #0
 801529e:	da1a      	bge.n	80152d6 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80152a0:	68bb      	ldr	r3, [r7, #8]
 80152a2:	7858      	ldrb	r0, [r3, #1]
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	6a1a      	ldr	r2, [r3, #32]
 80152ae:	2301      	movs	r3, #1
 80152b0:	f7fd fe28 	bl	8012f04 <disk_write>
 80152b4:	4603      	mov	r3, r0
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d006      	beq.n	80152c8 <f_sync+0x5e>
 80152ba:	68bb      	ldr	r3, [r7, #8]
 80152bc:	2101      	movs	r1, #1
 80152be:	4618      	mov	r0, r3
 80152c0:	f7fd ff74 	bl	80131ac <unlock_fs>
 80152c4:	2301      	movs	r3, #1
 80152c6:	e055      	b.n	8015374 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	7d1b      	ldrb	r3, [r3, #20]
 80152cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80152d0:	b2da      	uxtb	r2, r3
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80152d6:	f7fc f8f7 	bl	80114c8 <get_fattime>
 80152da:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80152dc:	68ba      	ldr	r2, [r7, #8]
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152e2:	4619      	mov	r1, r3
 80152e4:	4610      	mov	r0, r2
 80152e6:	f7fe f92d 	bl	8013544 <move_window>
 80152ea:	4603      	mov	r3, r0
 80152ec:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80152ee:	7dfb      	ldrb	r3, [r7, #23]
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d138      	bne.n	8015366 <f_sync+0xfc>
					dir = fp->dir_ptr;
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80152f8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	330b      	adds	r3, #11
 80152fe:	781a      	ldrb	r2, [r3, #0]
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	330b      	adds	r3, #11
 8015304:	f042 0220 	orr.w	r2, r2, #32
 8015308:	b2d2      	uxtb	r2, r2
 801530a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	6818      	ldr	r0, [r3, #0]
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	689b      	ldr	r3, [r3, #8]
 8015314:	461a      	mov	r2, r3
 8015316:	68f9      	ldr	r1, [r7, #12]
 8015318:	f7fe fe3a 	bl	8013f90 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	f103 021c 	add.w	r2, r3, #28
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	68db      	ldr	r3, [r3, #12]
 8015326:	4619      	mov	r1, r3
 8015328:	4610      	mov	r0, r2
 801532a:	f7fd fe7f 	bl	801302c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	3316      	adds	r3, #22
 8015332:	6939      	ldr	r1, [r7, #16]
 8015334:	4618      	mov	r0, r3
 8015336:	f7fd fe79 	bl	801302c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801533a:	68fb      	ldr	r3, [r7, #12]
 801533c:	3312      	adds	r3, #18
 801533e:	2100      	movs	r1, #0
 8015340:	4618      	mov	r0, r3
 8015342:	f7fd fe58 	bl	8012ff6 <st_word>
					fs->wflag = 1;
 8015346:	68bb      	ldr	r3, [r7, #8]
 8015348:	2201      	movs	r2, #1
 801534a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801534c:	68bb      	ldr	r3, [r7, #8]
 801534e:	4618      	mov	r0, r3
 8015350:	f7fe f926 	bl	80135a0 <sync_fs>
 8015354:	4603      	mov	r3, r0
 8015356:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	7d1b      	ldrb	r3, [r3, #20]
 801535c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015360:	b2da      	uxtb	r2, r3
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8015366:	68bb      	ldr	r3, [r7, #8]
 8015368:	7dfa      	ldrb	r2, [r7, #23]
 801536a:	4611      	mov	r1, r2
 801536c:	4618      	mov	r0, r3
 801536e:	f7fd ff1d 	bl	80131ac <unlock_fs>
 8015372:	7dfb      	ldrb	r3, [r7, #23]
}
 8015374:	4618      	mov	r0, r3
 8015376:	3718      	adds	r7, #24
 8015378:	46bd      	mov	sp, r7
 801537a:	bd80      	pop	{r7, pc}

0801537c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b084      	sub	sp, #16
 8015380:	af00      	add	r7, sp, #0
 8015382:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8015384:	6878      	ldr	r0, [r7, #4]
 8015386:	f7ff ff70 	bl	801526a <f_sync>
 801538a:	4603      	mov	r3, r0
 801538c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801538e:	7bfb      	ldrb	r3, [r7, #15]
 8015390:	2b00      	cmp	r3, #0
 8015392:	d11d      	bne.n	80153d0 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	f107 0208 	add.w	r2, r7, #8
 801539a:	4611      	mov	r1, r2
 801539c:	4618      	mov	r0, r3
 801539e:	f7ff fb4f 	bl	8014a40 <validate>
 80153a2:	4603      	mov	r3, r0
 80153a4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80153a6:	7bfb      	ldrb	r3, [r7, #15]
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d111      	bne.n	80153d0 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	691b      	ldr	r3, [r3, #16]
 80153b0:	4618      	mov	r0, r3
 80153b2:	f7fe f823 	bl	80133fc <dec_lock>
 80153b6:	4603      	mov	r3, r0
 80153b8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80153ba:	7bfb      	ldrb	r3, [r7, #15]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d102      	bne.n	80153c6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	2200      	movs	r2, #0
 80153c4:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80153c6:	68bb      	ldr	r3, [r7, #8]
 80153c8:	2100      	movs	r1, #0
 80153ca:	4618      	mov	r0, r3
 80153cc:	f7fd feee 	bl	80131ac <unlock_fs>
#endif
		}
	}
	return res;
 80153d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80153d2:	4618      	mov	r0, r3
 80153d4:	3710      	adds	r7, #16
 80153d6:	46bd      	mov	sp, r7
 80153d8:	bd80      	pop	{r7, pc}

080153da <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80153da:	b580      	push	{r7, lr}
 80153dc:	b090      	sub	sp, #64	; 0x40
 80153de:	af00      	add	r7, sp, #0
 80153e0:	6078      	str	r0, [r7, #4]
 80153e2:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	f107 0208 	add.w	r2, r7, #8
 80153ea:	4611      	mov	r1, r2
 80153ec:	4618      	mov	r0, r3
 80153ee:	f7ff fb27 	bl	8014a40 <validate>
 80153f2:	4603      	mov	r3, r0
 80153f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80153f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d103      	bne.n	8015408 <f_lseek+0x2e>
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	7d5b      	ldrb	r3, [r3, #21]
 8015404:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8015408:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801540c:	2b00      	cmp	r3, #0
 801540e:	d009      	beq.n	8015424 <f_lseek+0x4a>
 8015410:	68bb      	ldr	r3, [r7, #8]
 8015412:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8015416:	4611      	mov	r1, r2
 8015418:	4618      	mov	r0, r3
 801541a:	f7fd fec7 	bl	80131ac <unlock_fs>
 801541e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015422:	e229      	b.n	8015878 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015428:	2b00      	cmp	r3, #0
 801542a:	f000 80ea 	beq.w	8015602 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801542e:	683b      	ldr	r3, [r7, #0]
 8015430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015434:	d164      	bne.n	8015500 <f_lseek+0x126>
			tbl = fp->cltbl;
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801543a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801543e:	1d1a      	adds	r2, r3, #4
 8015440:	627a      	str	r2, [r7, #36]	; 0x24
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	617b      	str	r3, [r7, #20]
 8015446:	2302      	movs	r3, #2
 8015448:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	689b      	ldr	r3, [r3, #8]
 801544e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8015450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015452:	2b00      	cmp	r3, #0
 8015454:	d044      	beq.n	80154e0 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8015456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015458:	613b      	str	r3, [r7, #16]
 801545a:	2300      	movs	r3, #0
 801545c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801545e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015460:	3302      	adds	r3, #2
 8015462:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8015464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015466:	60fb      	str	r3, [r7, #12]
 8015468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801546a:	3301      	adds	r3, #1
 801546c:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015472:	4618      	mov	r0, r3
 8015474:	f7fe f921 	bl	80136ba <get_fat>
 8015478:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801547c:	2b01      	cmp	r3, #1
 801547e:	d809      	bhi.n	8015494 <f_lseek+0xba>
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	2202      	movs	r2, #2
 8015484:	755a      	strb	r2, [r3, #21]
 8015486:	68bb      	ldr	r3, [r7, #8]
 8015488:	2102      	movs	r1, #2
 801548a:	4618      	mov	r0, r3
 801548c:	f7fd fe8e 	bl	80131ac <unlock_fs>
 8015490:	2302      	movs	r3, #2
 8015492:	e1f1      	b.n	8015878 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015496:	f1b3 3fff 	cmp.w	r3, #4294967295
 801549a:	d109      	bne.n	80154b0 <f_lseek+0xd6>
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	2201      	movs	r2, #1
 80154a0:	755a      	strb	r2, [r3, #21]
 80154a2:	68bb      	ldr	r3, [r7, #8]
 80154a4:	2101      	movs	r1, #1
 80154a6:	4618      	mov	r0, r3
 80154a8:	f7fd fe80 	bl	80131ac <unlock_fs>
 80154ac:	2301      	movs	r3, #1
 80154ae:	e1e3      	b.n	8015878 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	3301      	adds	r3, #1
 80154b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80154b6:	429a      	cmp	r2, r3
 80154b8:	d0d4      	beq.n	8015464 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80154ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80154bc:	697b      	ldr	r3, [r7, #20]
 80154be:	429a      	cmp	r2, r3
 80154c0:	d809      	bhi.n	80154d6 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 80154c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154c4:	1d1a      	adds	r2, r3, #4
 80154c6:	627a      	str	r2, [r7, #36]	; 0x24
 80154c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80154ca:	601a      	str	r2, [r3, #0]
 80154cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154ce:	1d1a      	adds	r2, r3, #4
 80154d0:	627a      	str	r2, [r7, #36]	; 0x24
 80154d2:	693a      	ldr	r2, [r7, #16]
 80154d4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80154d6:	68bb      	ldr	r3, [r7, #8]
 80154d8:	699b      	ldr	r3, [r3, #24]
 80154da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80154dc:	429a      	cmp	r2, r3
 80154de:	d3ba      	bcc.n	8015456 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80154e6:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80154e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80154ea:	697b      	ldr	r3, [r7, #20]
 80154ec:	429a      	cmp	r2, r3
 80154ee:	d803      	bhi.n	80154f8 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 80154f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154f2:	2200      	movs	r2, #0
 80154f4:	601a      	str	r2, [r3, #0]
 80154f6:	e1b6      	b.n	8015866 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80154f8:	2311      	movs	r3, #17
 80154fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80154fe:	e1b2      	b.n	8015866 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	68db      	ldr	r3, [r3, #12]
 8015504:	683a      	ldr	r2, [r7, #0]
 8015506:	429a      	cmp	r2, r3
 8015508:	d902      	bls.n	8015510 <f_lseek+0x136>
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	68db      	ldr	r3, [r3, #12]
 801550e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	683a      	ldr	r2, [r7, #0]
 8015514:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8015516:	683b      	ldr	r3, [r7, #0]
 8015518:	2b00      	cmp	r3, #0
 801551a:	f000 81a4 	beq.w	8015866 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 801551e:	683b      	ldr	r3, [r7, #0]
 8015520:	3b01      	subs	r3, #1
 8015522:	4619      	mov	r1, r3
 8015524:	6878      	ldr	r0, [r7, #4]
 8015526:	f7fe fb59 	bl	8013bdc <clmt_clust>
 801552a:	4602      	mov	r2, r0
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8015530:	68ba      	ldr	r2, [r7, #8]
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	69db      	ldr	r3, [r3, #28]
 8015536:	4619      	mov	r1, r3
 8015538:	4610      	mov	r0, r2
 801553a:	f7fe f89f 	bl	801367c <clust2sect>
 801553e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8015540:	69bb      	ldr	r3, [r7, #24]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d109      	bne.n	801555a <f_lseek+0x180>
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	2202      	movs	r2, #2
 801554a:	755a      	strb	r2, [r3, #21]
 801554c:	68bb      	ldr	r3, [r7, #8]
 801554e:	2102      	movs	r1, #2
 8015550:	4618      	mov	r0, r3
 8015552:	f7fd fe2b 	bl	80131ac <unlock_fs>
 8015556:	2302      	movs	r3, #2
 8015558:	e18e      	b.n	8015878 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801555a:	683b      	ldr	r3, [r7, #0]
 801555c:	3b01      	subs	r3, #1
 801555e:	0a5b      	lsrs	r3, r3, #9
 8015560:	68ba      	ldr	r2, [r7, #8]
 8015562:	8952      	ldrh	r2, [r2, #10]
 8015564:	3a01      	subs	r2, #1
 8015566:	4013      	ands	r3, r2
 8015568:	69ba      	ldr	r2, [r7, #24]
 801556a:	4413      	add	r3, r2
 801556c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	699b      	ldr	r3, [r3, #24]
 8015572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015576:	2b00      	cmp	r3, #0
 8015578:	f000 8175 	beq.w	8015866 <f_lseek+0x48c>
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	6a1b      	ldr	r3, [r3, #32]
 8015580:	69ba      	ldr	r2, [r7, #24]
 8015582:	429a      	cmp	r2, r3
 8015584:	f000 816f 	beq.w	8015866 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	7d1b      	ldrb	r3, [r3, #20]
 801558c:	b25b      	sxtb	r3, r3
 801558e:	2b00      	cmp	r3, #0
 8015590:	da1d      	bge.n	80155ce <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015592:	68bb      	ldr	r3, [r7, #8]
 8015594:	7858      	ldrb	r0, [r3, #1]
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	6a1a      	ldr	r2, [r3, #32]
 80155a0:	2301      	movs	r3, #1
 80155a2:	f7fd fcaf 	bl	8012f04 <disk_write>
 80155a6:	4603      	mov	r3, r0
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d009      	beq.n	80155c0 <f_lseek+0x1e6>
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	2201      	movs	r2, #1
 80155b0:	755a      	strb	r2, [r3, #21]
 80155b2:	68bb      	ldr	r3, [r7, #8]
 80155b4:	2101      	movs	r1, #1
 80155b6:	4618      	mov	r0, r3
 80155b8:	f7fd fdf8 	bl	80131ac <unlock_fs>
 80155bc:	2301      	movs	r3, #1
 80155be:	e15b      	b.n	8015878 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	7d1b      	ldrb	r3, [r3, #20]
 80155c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80155c8:	b2da      	uxtb	r2, r3
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80155ce:	68bb      	ldr	r3, [r7, #8]
 80155d0:	7858      	ldrb	r0, [r3, #1]
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80155d8:	2301      	movs	r3, #1
 80155da:	69ba      	ldr	r2, [r7, #24]
 80155dc:	f7fd fc72 	bl	8012ec4 <disk_read>
 80155e0:	4603      	mov	r3, r0
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d009      	beq.n	80155fa <f_lseek+0x220>
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	2201      	movs	r2, #1
 80155ea:	755a      	strb	r2, [r3, #21]
 80155ec:	68bb      	ldr	r3, [r7, #8]
 80155ee:	2101      	movs	r1, #1
 80155f0:	4618      	mov	r0, r3
 80155f2:	f7fd fddb 	bl	80131ac <unlock_fs>
 80155f6:	2301      	movs	r3, #1
 80155f8:	e13e      	b.n	8015878 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	69ba      	ldr	r2, [r7, #24]
 80155fe:	621a      	str	r2, [r3, #32]
 8015600:	e131      	b.n	8015866 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	68db      	ldr	r3, [r3, #12]
 8015606:	683a      	ldr	r2, [r7, #0]
 8015608:	429a      	cmp	r2, r3
 801560a:	d908      	bls.n	801561e <f_lseek+0x244>
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	7d1b      	ldrb	r3, [r3, #20]
 8015610:	f003 0302 	and.w	r3, r3, #2
 8015614:	2b00      	cmp	r3, #0
 8015616:	d102      	bne.n	801561e <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	68db      	ldr	r3, [r3, #12]
 801561c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	699b      	ldr	r3, [r3, #24]
 8015622:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8015624:	2300      	movs	r3, #0
 8015626:	637b      	str	r3, [r7, #52]	; 0x34
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801562c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801562e:	683b      	ldr	r3, [r7, #0]
 8015630:	2b00      	cmp	r3, #0
 8015632:	f000 80c0 	beq.w	80157b6 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8015636:	68bb      	ldr	r3, [r7, #8]
 8015638:	895b      	ldrh	r3, [r3, #10]
 801563a:	025b      	lsls	r3, r3, #9
 801563c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801563e:	6a3b      	ldr	r3, [r7, #32]
 8015640:	2b00      	cmp	r3, #0
 8015642:	d01b      	beq.n	801567c <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8015644:	683b      	ldr	r3, [r7, #0]
 8015646:	1e5a      	subs	r2, r3, #1
 8015648:	69fb      	ldr	r3, [r7, #28]
 801564a:	fbb2 f2f3 	udiv	r2, r2, r3
 801564e:	6a3b      	ldr	r3, [r7, #32]
 8015650:	1e59      	subs	r1, r3, #1
 8015652:	69fb      	ldr	r3, [r7, #28]
 8015654:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8015658:	429a      	cmp	r2, r3
 801565a:	d30f      	bcc.n	801567c <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801565c:	6a3b      	ldr	r3, [r7, #32]
 801565e:	1e5a      	subs	r2, r3, #1
 8015660:	69fb      	ldr	r3, [r7, #28]
 8015662:	425b      	negs	r3, r3
 8015664:	401a      	ands	r2, r3
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	699b      	ldr	r3, [r3, #24]
 801566e:	683a      	ldr	r2, [r7, #0]
 8015670:	1ad3      	subs	r3, r2, r3
 8015672:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	69db      	ldr	r3, [r3, #28]
 8015678:	63bb      	str	r3, [r7, #56]	; 0x38
 801567a:	e02c      	b.n	80156d6 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	689b      	ldr	r3, [r3, #8]
 8015680:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8015682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015684:	2b00      	cmp	r3, #0
 8015686:	d123      	bne.n	80156d0 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	2100      	movs	r1, #0
 801568c:	4618      	mov	r0, r3
 801568e:	f7fe fa0d 	bl	8013aac <create_chain>
 8015692:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8015694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015696:	2b01      	cmp	r3, #1
 8015698:	d109      	bne.n	80156ae <f_lseek+0x2d4>
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	2202      	movs	r2, #2
 801569e:	755a      	strb	r2, [r3, #21]
 80156a0:	68bb      	ldr	r3, [r7, #8]
 80156a2:	2102      	movs	r1, #2
 80156a4:	4618      	mov	r0, r3
 80156a6:	f7fd fd81 	bl	80131ac <unlock_fs>
 80156aa:	2302      	movs	r3, #2
 80156ac:	e0e4      	b.n	8015878 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80156ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156b4:	d109      	bne.n	80156ca <f_lseek+0x2f0>
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	2201      	movs	r2, #1
 80156ba:	755a      	strb	r2, [r3, #21]
 80156bc:	68bb      	ldr	r3, [r7, #8]
 80156be:	2101      	movs	r1, #1
 80156c0:	4618      	mov	r0, r3
 80156c2:	f7fd fd73 	bl	80131ac <unlock_fs>
 80156c6:	2301      	movs	r3, #1
 80156c8:	e0d6      	b.n	8015878 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80156ce:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80156d4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80156d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d06c      	beq.n	80157b6 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 80156dc:	e044      	b.n	8015768 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 80156de:	683a      	ldr	r2, [r7, #0]
 80156e0:	69fb      	ldr	r3, [r7, #28]
 80156e2:	1ad3      	subs	r3, r2, r3
 80156e4:	603b      	str	r3, [r7, #0]
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	699a      	ldr	r2, [r3, #24]
 80156ea:	69fb      	ldr	r3, [r7, #28]
 80156ec:	441a      	add	r2, r3
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	7d1b      	ldrb	r3, [r3, #20]
 80156f6:	f003 0302 	and.w	r3, r3, #2
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d00b      	beq.n	8015716 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015702:	4618      	mov	r0, r3
 8015704:	f7fe f9d2 	bl	8013aac <create_chain>
 8015708:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801570a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801570c:	2b00      	cmp	r3, #0
 801570e:	d108      	bne.n	8015722 <f_lseek+0x348>
							ofs = 0; break;
 8015710:	2300      	movs	r3, #0
 8015712:	603b      	str	r3, [r7, #0]
 8015714:	e02c      	b.n	8015770 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801571a:	4618      	mov	r0, r3
 801571c:	f7fd ffcd 	bl	80136ba <get_fat>
 8015720:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015728:	d109      	bne.n	801573e <f_lseek+0x364>
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	2201      	movs	r2, #1
 801572e:	755a      	strb	r2, [r3, #21]
 8015730:	68bb      	ldr	r3, [r7, #8]
 8015732:	2101      	movs	r1, #1
 8015734:	4618      	mov	r0, r3
 8015736:	f7fd fd39 	bl	80131ac <unlock_fs>
 801573a:	2301      	movs	r3, #1
 801573c:	e09c      	b.n	8015878 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801573e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015740:	2b01      	cmp	r3, #1
 8015742:	d904      	bls.n	801574e <f_lseek+0x374>
 8015744:	68bb      	ldr	r3, [r7, #8]
 8015746:	699b      	ldr	r3, [r3, #24]
 8015748:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801574a:	429a      	cmp	r2, r3
 801574c:	d309      	bcc.n	8015762 <f_lseek+0x388>
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	2202      	movs	r2, #2
 8015752:	755a      	strb	r2, [r3, #21]
 8015754:	68bb      	ldr	r3, [r7, #8]
 8015756:	2102      	movs	r1, #2
 8015758:	4618      	mov	r0, r3
 801575a:	f7fd fd27 	bl	80131ac <unlock_fs>
 801575e:	2302      	movs	r3, #2
 8015760:	e08a      	b.n	8015878 <f_lseek+0x49e>
					fp->clust = clst;
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015766:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8015768:	683a      	ldr	r2, [r7, #0]
 801576a:	69fb      	ldr	r3, [r7, #28]
 801576c:	429a      	cmp	r2, r3
 801576e:	d8b6      	bhi.n	80156de <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	699a      	ldr	r2, [r3, #24]
 8015774:	683b      	ldr	r3, [r7, #0]
 8015776:	441a      	add	r2, r3
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801577c:	683b      	ldr	r3, [r7, #0]
 801577e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015782:	2b00      	cmp	r3, #0
 8015784:	d017      	beq.n	80157b6 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8015786:	68bb      	ldr	r3, [r7, #8]
 8015788:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801578a:	4618      	mov	r0, r3
 801578c:	f7fd ff76 	bl	801367c <clust2sect>
 8015790:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8015792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015794:	2b00      	cmp	r3, #0
 8015796:	d109      	bne.n	80157ac <f_lseek+0x3d2>
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	2202      	movs	r2, #2
 801579c:	755a      	strb	r2, [r3, #21]
 801579e:	68bb      	ldr	r3, [r7, #8]
 80157a0:	2102      	movs	r1, #2
 80157a2:	4618      	mov	r0, r3
 80157a4:	f7fd fd02 	bl	80131ac <unlock_fs>
 80157a8:	2302      	movs	r3, #2
 80157aa:	e065      	b.n	8015878 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 80157ac:	683b      	ldr	r3, [r7, #0]
 80157ae:	0a5b      	lsrs	r3, r3, #9
 80157b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80157b2:	4413      	add	r3, r2
 80157b4:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	699a      	ldr	r2, [r3, #24]
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	68db      	ldr	r3, [r3, #12]
 80157be:	429a      	cmp	r2, r3
 80157c0:	d90a      	bls.n	80157d8 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	699a      	ldr	r2, [r3, #24]
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	7d1b      	ldrb	r3, [r3, #20]
 80157ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80157d2:	b2da      	uxtb	r2, r3
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	699b      	ldr	r3, [r3, #24]
 80157dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d040      	beq.n	8015866 <f_lseek+0x48c>
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	6a1b      	ldr	r3, [r3, #32]
 80157e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80157ea:	429a      	cmp	r2, r3
 80157ec:	d03b      	beq.n	8015866 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	7d1b      	ldrb	r3, [r3, #20]
 80157f2:	b25b      	sxtb	r3, r3
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	da1d      	bge.n	8015834 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80157f8:	68bb      	ldr	r3, [r7, #8]
 80157fa:	7858      	ldrb	r0, [r3, #1]
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	6a1a      	ldr	r2, [r3, #32]
 8015806:	2301      	movs	r3, #1
 8015808:	f7fd fb7c 	bl	8012f04 <disk_write>
 801580c:	4603      	mov	r3, r0
 801580e:	2b00      	cmp	r3, #0
 8015810:	d009      	beq.n	8015826 <f_lseek+0x44c>
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	2201      	movs	r2, #1
 8015816:	755a      	strb	r2, [r3, #21]
 8015818:	68bb      	ldr	r3, [r7, #8]
 801581a:	2101      	movs	r1, #1
 801581c:	4618      	mov	r0, r3
 801581e:	f7fd fcc5 	bl	80131ac <unlock_fs>
 8015822:	2301      	movs	r3, #1
 8015824:	e028      	b.n	8015878 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	7d1b      	ldrb	r3, [r3, #20]
 801582a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801582e:	b2da      	uxtb	r2, r3
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8015834:	68bb      	ldr	r3, [r7, #8]
 8015836:	7858      	ldrb	r0, [r3, #1]
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801583e:	2301      	movs	r3, #1
 8015840:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015842:	f7fd fb3f 	bl	8012ec4 <disk_read>
 8015846:	4603      	mov	r3, r0
 8015848:	2b00      	cmp	r3, #0
 801584a:	d009      	beq.n	8015860 <f_lseek+0x486>
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	2201      	movs	r2, #1
 8015850:	755a      	strb	r2, [r3, #21]
 8015852:	68bb      	ldr	r3, [r7, #8]
 8015854:	2101      	movs	r1, #1
 8015856:	4618      	mov	r0, r3
 8015858:	f7fd fca8 	bl	80131ac <unlock_fs>
 801585c:	2301      	movs	r3, #1
 801585e:	e00b      	b.n	8015878 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015864:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8015866:	68bb      	ldr	r3, [r7, #8]
 8015868:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801586c:	4611      	mov	r1, r2
 801586e:	4618      	mov	r0, r3
 8015870:	f7fd fc9c 	bl	80131ac <unlock_fs>
 8015874:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8015878:	4618      	mov	r0, r3
 801587a:	3740      	adds	r7, #64	; 0x40
 801587c:	46bd      	mov	sp, r7
 801587e:	bd80      	pop	{r7, pc}

08015880 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8015880:	b580      	push	{r7, lr}
 8015882:	b086      	sub	sp, #24
 8015884:	af00      	add	r7, sp, #0
 8015886:	6078      	str	r0, [r7, #4]
 8015888:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	2b00      	cmp	r3, #0
 801588e:	d101      	bne.n	8015894 <f_opendir+0x14>
 8015890:	2309      	movs	r3, #9
 8015892:	e06a      	b.n	801596a <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8015898:	f107 010c 	add.w	r1, r7, #12
 801589c:	463b      	mov	r3, r7
 801589e:	2200      	movs	r2, #0
 80158a0:	4618      	mov	r0, r3
 80158a2:	f7fe fe79 	bl	8014598 <find_volume>
 80158a6:	4603      	mov	r3, r0
 80158a8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80158aa:	7dfb      	ldrb	r3, [r7, #23]
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d14f      	bne.n	8015950 <f_opendir+0xd0>
		obj->fs = fs;
 80158b0:	68fa      	ldr	r2, [r7, #12]
 80158b2:	693b      	ldr	r3, [r7, #16]
 80158b4:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80158b6:	683b      	ldr	r3, [r7, #0]
 80158b8:	4619      	mov	r1, r3
 80158ba:	6878      	ldr	r0, [r7, #4]
 80158bc:	f7fe fd60 	bl	8014380 <follow_path>
 80158c0:	4603      	mov	r3, r0
 80158c2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80158c4:	7dfb      	ldrb	r3, [r7, #23]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d13d      	bne.n	8015946 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80158d0:	b25b      	sxtb	r3, r3
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	db12      	blt.n	80158fc <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80158d6:	693b      	ldr	r3, [r7, #16]
 80158d8:	799b      	ldrb	r3, [r3, #6]
 80158da:	f003 0310 	and.w	r3, r3, #16
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d00a      	beq.n	80158f8 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80158e2:	68fa      	ldr	r2, [r7, #12]
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	6a1b      	ldr	r3, [r3, #32]
 80158e8:	4619      	mov	r1, r3
 80158ea:	4610      	mov	r0, r2
 80158ec:	f7fe fb31 	bl	8013f52 <ld_clust>
 80158f0:	4602      	mov	r2, r0
 80158f2:	693b      	ldr	r3, [r7, #16]
 80158f4:	609a      	str	r2, [r3, #8]
 80158f6:	e001      	b.n	80158fc <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80158f8:	2305      	movs	r3, #5
 80158fa:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80158fc:	7dfb      	ldrb	r3, [r7, #23]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d121      	bne.n	8015946 <f_opendir+0xc6>
				obj->id = fs->id;
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	88da      	ldrh	r2, [r3, #6]
 8015906:	693b      	ldr	r3, [r7, #16]
 8015908:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801590a:	2100      	movs	r1, #0
 801590c:	6878      	ldr	r0, [r7, #4]
 801590e:	f7fe f999 	bl	8013c44 <dir_sdi>
 8015912:	4603      	mov	r3, r0
 8015914:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8015916:	7dfb      	ldrb	r3, [r7, #23]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d114      	bne.n	8015946 <f_opendir+0xc6>
					if (obj->sclust) {
 801591c:	693b      	ldr	r3, [r7, #16]
 801591e:	689b      	ldr	r3, [r3, #8]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d00d      	beq.n	8015940 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8015924:	2100      	movs	r1, #0
 8015926:	6878      	ldr	r0, [r7, #4]
 8015928:	f7fd fcda 	bl	80132e0 <inc_lock>
 801592c:	4602      	mov	r2, r0
 801592e:	693b      	ldr	r3, [r7, #16]
 8015930:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8015932:	693b      	ldr	r3, [r7, #16]
 8015934:	691b      	ldr	r3, [r3, #16]
 8015936:	2b00      	cmp	r3, #0
 8015938:	d105      	bne.n	8015946 <f_opendir+0xc6>
 801593a:	2312      	movs	r3, #18
 801593c:	75fb      	strb	r3, [r7, #23]
 801593e:	e002      	b.n	8015946 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8015940:	693b      	ldr	r3, [r7, #16]
 8015942:	2200      	movs	r2, #0
 8015944:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8015946:	7dfb      	ldrb	r3, [r7, #23]
 8015948:	2b04      	cmp	r3, #4
 801594a:	d101      	bne.n	8015950 <f_opendir+0xd0>
 801594c:	2305      	movs	r3, #5
 801594e:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8015950:	7dfb      	ldrb	r3, [r7, #23]
 8015952:	2b00      	cmp	r3, #0
 8015954:	d002      	beq.n	801595c <f_opendir+0xdc>
 8015956:	693b      	ldr	r3, [r7, #16]
 8015958:	2200      	movs	r2, #0
 801595a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801595c:	68fb      	ldr	r3, [r7, #12]
 801595e:	7dfa      	ldrb	r2, [r7, #23]
 8015960:	4611      	mov	r1, r2
 8015962:	4618      	mov	r0, r3
 8015964:	f7fd fc22 	bl	80131ac <unlock_fs>
 8015968:	7dfb      	ldrb	r3, [r7, #23]
}
 801596a:	4618      	mov	r0, r3
 801596c:	3718      	adds	r7, #24
 801596e:	46bd      	mov	sp, r7
 8015970:	bd80      	pop	{r7, pc}

08015972 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8015972:	b580      	push	{r7, lr}
 8015974:	b084      	sub	sp, #16
 8015976:	af00      	add	r7, sp, #0
 8015978:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	f107 0208 	add.w	r2, r7, #8
 8015980:	4611      	mov	r1, r2
 8015982:	4618      	mov	r0, r3
 8015984:	f7ff f85c 	bl	8014a40 <validate>
 8015988:	4603      	mov	r3, r0
 801598a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801598c:	7bfb      	ldrb	r3, [r7, #15]
 801598e:	2b00      	cmp	r3, #0
 8015990:	d115      	bne.n	80159be <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	691b      	ldr	r3, [r3, #16]
 8015996:	2b00      	cmp	r3, #0
 8015998:	d006      	beq.n	80159a8 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	691b      	ldr	r3, [r3, #16]
 801599e:	4618      	mov	r0, r3
 80159a0:	f7fd fd2c 	bl	80133fc <dec_lock>
 80159a4:	4603      	mov	r3, r0
 80159a6:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80159a8:	7bfb      	ldrb	r3, [r7, #15]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d102      	bne.n	80159b4 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	2200      	movs	r2, #0
 80159b2:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 80159b4:	68bb      	ldr	r3, [r7, #8]
 80159b6:	2100      	movs	r1, #0
 80159b8:	4618      	mov	r0, r3
 80159ba:	f7fd fbf7 	bl	80131ac <unlock_fs>
#endif
	}
	return res;
 80159be:	7bfb      	ldrb	r3, [r7, #15]
}
 80159c0:	4618      	mov	r0, r3
 80159c2:	3710      	adds	r7, #16
 80159c4:	46bd      	mov	sp, r7
 80159c6:	bd80      	pop	{r7, pc}

080159c8 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80159c8:	b580      	push	{r7, lr}
 80159ca:	b084      	sub	sp, #16
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	6078      	str	r0, [r7, #4]
 80159d0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	f107 0208 	add.w	r2, r7, #8
 80159d8:	4611      	mov	r1, r2
 80159da:	4618      	mov	r0, r3
 80159dc:	f7ff f830 	bl	8014a40 <validate>
 80159e0:	4603      	mov	r3, r0
 80159e2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80159e4:	7bfb      	ldrb	r3, [r7, #15]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d126      	bne.n	8015a38 <f_readdir+0x70>
		if (!fno) {
 80159ea:	683b      	ldr	r3, [r7, #0]
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d106      	bne.n	80159fe <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80159f0:	2100      	movs	r1, #0
 80159f2:	6878      	ldr	r0, [r7, #4]
 80159f4:	f7fe f926 	bl	8013c44 <dir_sdi>
 80159f8:	4603      	mov	r3, r0
 80159fa:	73fb      	strb	r3, [r7, #15]
 80159fc:	e01c      	b.n	8015a38 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80159fe:	2100      	movs	r1, #0
 8015a00:	6878      	ldr	r0, [r7, #4]
 8015a02:	f7fe fae5 	bl	8013fd0 <dir_read>
 8015a06:	4603      	mov	r3, r0
 8015a08:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8015a0a:	7bfb      	ldrb	r3, [r7, #15]
 8015a0c:	2b04      	cmp	r3, #4
 8015a0e:	d101      	bne.n	8015a14 <f_readdir+0x4c>
 8015a10:	2300      	movs	r3, #0
 8015a12:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8015a14:	7bfb      	ldrb	r3, [r7, #15]
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d10e      	bne.n	8015a38 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8015a1a:	6839      	ldr	r1, [r7, #0]
 8015a1c:	6878      	ldr	r0, [r7, #4]
 8015a1e:	f7fe fbbb 	bl	8014198 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8015a22:	2100      	movs	r1, #0
 8015a24:	6878      	ldr	r0, [r7, #4]
 8015a26:	f7fe f988 	bl	8013d3a <dir_next>
 8015a2a:	4603      	mov	r3, r0
 8015a2c:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8015a2e:	7bfb      	ldrb	r3, [r7, #15]
 8015a30:	2b04      	cmp	r3, #4
 8015a32:	d101      	bne.n	8015a38 <f_readdir+0x70>
 8015a34:	2300      	movs	r3, #0
 8015a36:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8015a38:	68bb      	ldr	r3, [r7, #8]
 8015a3a:	7bfa      	ldrb	r2, [r7, #15]
 8015a3c:	4611      	mov	r1, r2
 8015a3e:	4618      	mov	r0, r3
 8015a40:	f7fd fbb4 	bl	80131ac <unlock_fs>
 8015a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a46:	4618      	mov	r0, r3
 8015a48:	3710      	adds	r7, #16
 8015a4a:	46bd      	mov	sp, r7
 8015a4c:	bd80      	pop	{r7, pc}
	...

08015a50 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015a50:	b480      	push	{r7}
 8015a52:	b087      	sub	sp, #28
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	60f8      	str	r0, [r7, #12]
 8015a58:	60b9      	str	r1, [r7, #8]
 8015a5a:	4613      	mov	r3, r2
 8015a5c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015a5e:	2301      	movs	r3, #1
 8015a60:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8015a62:	2300      	movs	r3, #0
 8015a64:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015a66:	4b1f      	ldr	r3, [pc, #124]	; (8015ae4 <FATFS_LinkDriverEx+0x94>)
 8015a68:	7a5b      	ldrb	r3, [r3, #9]
 8015a6a:	b2db      	uxtb	r3, r3
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d131      	bne.n	8015ad4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015a70:	4b1c      	ldr	r3, [pc, #112]	; (8015ae4 <FATFS_LinkDriverEx+0x94>)
 8015a72:	7a5b      	ldrb	r3, [r3, #9]
 8015a74:	b2db      	uxtb	r3, r3
 8015a76:	461a      	mov	r2, r3
 8015a78:	4b1a      	ldr	r3, [pc, #104]	; (8015ae4 <FATFS_LinkDriverEx+0x94>)
 8015a7a:	2100      	movs	r1, #0
 8015a7c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015a7e:	4b19      	ldr	r3, [pc, #100]	; (8015ae4 <FATFS_LinkDriverEx+0x94>)
 8015a80:	7a5b      	ldrb	r3, [r3, #9]
 8015a82:	b2db      	uxtb	r3, r3
 8015a84:	4a17      	ldr	r2, [pc, #92]	; (8015ae4 <FATFS_LinkDriverEx+0x94>)
 8015a86:	009b      	lsls	r3, r3, #2
 8015a88:	4413      	add	r3, r2
 8015a8a:	68fa      	ldr	r2, [r7, #12]
 8015a8c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015a8e:	4b15      	ldr	r3, [pc, #84]	; (8015ae4 <FATFS_LinkDriverEx+0x94>)
 8015a90:	7a5b      	ldrb	r3, [r3, #9]
 8015a92:	b2db      	uxtb	r3, r3
 8015a94:	461a      	mov	r2, r3
 8015a96:	4b13      	ldr	r3, [pc, #76]	; (8015ae4 <FATFS_LinkDriverEx+0x94>)
 8015a98:	4413      	add	r3, r2
 8015a9a:	79fa      	ldrb	r2, [r7, #7]
 8015a9c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8015a9e:	4b11      	ldr	r3, [pc, #68]	; (8015ae4 <FATFS_LinkDriverEx+0x94>)
 8015aa0:	7a5b      	ldrb	r3, [r3, #9]
 8015aa2:	b2db      	uxtb	r3, r3
 8015aa4:	1c5a      	adds	r2, r3, #1
 8015aa6:	b2d1      	uxtb	r1, r2
 8015aa8:	4a0e      	ldr	r2, [pc, #56]	; (8015ae4 <FATFS_LinkDriverEx+0x94>)
 8015aaa:	7251      	strb	r1, [r2, #9]
 8015aac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8015aae:	7dbb      	ldrb	r3, [r7, #22]
 8015ab0:	3330      	adds	r3, #48	; 0x30
 8015ab2:	b2da      	uxtb	r2, r3
 8015ab4:	68bb      	ldr	r3, [r7, #8]
 8015ab6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015ab8:	68bb      	ldr	r3, [r7, #8]
 8015aba:	3301      	adds	r3, #1
 8015abc:	223a      	movs	r2, #58	; 0x3a
 8015abe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015ac0:	68bb      	ldr	r3, [r7, #8]
 8015ac2:	3302      	adds	r3, #2
 8015ac4:	222f      	movs	r2, #47	; 0x2f
 8015ac6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015ac8:	68bb      	ldr	r3, [r7, #8]
 8015aca:	3303      	adds	r3, #3
 8015acc:	2200      	movs	r2, #0
 8015ace:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8015ad6:	4618      	mov	r0, r3
 8015ad8:	371c      	adds	r7, #28
 8015ada:	46bd      	mov	sp, r7
 8015adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ae0:	4770      	bx	lr
 8015ae2:	bf00      	nop
 8015ae4:	20000868 	.word	0x20000868

08015ae8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015ae8:	b580      	push	{r7, lr}
 8015aea:	b082      	sub	sp, #8
 8015aec:	af00      	add	r7, sp, #0
 8015aee:	6078      	str	r0, [r7, #4]
 8015af0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015af2:	2200      	movs	r2, #0
 8015af4:	6839      	ldr	r1, [r7, #0]
 8015af6:	6878      	ldr	r0, [r7, #4]
 8015af8:	f7ff ffaa 	bl	8015a50 <FATFS_LinkDriverEx>
 8015afc:	4603      	mov	r3, r0
}
 8015afe:	4618      	mov	r0, r3
 8015b00:	3708      	adds	r7, #8
 8015b02:	46bd      	mov	sp, r7
 8015b04:	bd80      	pop	{r7, pc}

08015b06 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8015b06:	b580      	push	{r7, lr}
 8015b08:	b084      	sub	sp, #16
 8015b0a:	af00      	add	r7, sp, #0
 8015b0c:	4603      	mov	r3, r0
 8015b0e:	6039      	str	r1, [r7, #0]
 8015b10:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8015b12:	2200      	movs	r2, #0
 8015b14:	2101      	movs	r1, #1
 8015b16:	2001      	movs	r0, #1
 8015b18:	f000 f977 	bl	8015e0a <osSemaphoreNew>
 8015b1c:	4602      	mov	r2, r0
 8015b1e:	683b      	ldr	r3, [r7, #0]
 8015b20:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8015b22:	683b      	ldr	r3, [r7, #0]
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	bf14      	ite	ne
 8015b2a:	2301      	movne	r3, #1
 8015b2c:	2300      	moveq	r3, #0
 8015b2e:	b2db      	uxtb	r3, r3
 8015b30:	60fb      	str	r3, [r7, #12]

    return ret;
 8015b32:	68fb      	ldr	r3, [r7, #12]
}
 8015b34:	4618      	mov	r0, r3
 8015b36:	3710      	adds	r7, #16
 8015b38:	46bd      	mov	sp, r7
 8015b3a:	bd80      	pop	{r7, pc}

08015b3c <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8015b3c:	b580      	push	{r7, lr}
 8015b3e:	b082      	sub	sp, #8
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8015b44:	6878      	ldr	r0, [r7, #4]
 8015b46:	f000 fa7f 	bl	8016048 <osSemaphoreDelete>
#endif
    return 1;
 8015b4a:	2301      	movs	r3, #1
}
 8015b4c:	4618      	mov	r0, r3
 8015b4e:	3708      	adds	r7, #8
 8015b50:	46bd      	mov	sp, r7
 8015b52:	bd80      	pop	{r7, pc}

08015b54 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8015b54:	b580      	push	{r7, lr}
 8015b56:	b084      	sub	sp, #16
 8015b58:	af00      	add	r7, sp, #0
 8015b5a:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8015b5c:	2300      	movs	r3, #0
 8015b5e:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8015b60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8015b64:	6878      	ldr	r0, [r7, #4]
 8015b66:	f000 f9d9 	bl	8015f1c <osSemaphoreAcquire>
 8015b6a:	4603      	mov	r3, r0
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d101      	bne.n	8015b74 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8015b70:	2301      	movs	r3, #1
 8015b72:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8015b74:	68fb      	ldr	r3, [r7, #12]
}
 8015b76:	4618      	mov	r0, r3
 8015b78:	3710      	adds	r7, #16
 8015b7a:	46bd      	mov	sp, r7
 8015b7c:	bd80      	pop	{r7, pc}

08015b7e <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8015b7e:	b580      	push	{r7, lr}
 8015b80:	b082      	sub	sp, #8
 8015b82:	af00      	add	r7, sp, #0
 8015b84:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8015b86:	6878      	ldr	r0, [r7, #4]
 8015b88:	f000 fa1a 	bl	8015fc0 <osSemaphoreRelease>
#endif
}
 8015b8c:	bf00      	nop
 8015b8e:	3708      	adds	r7, #8
 8015b90:	46bd      	mov	sp, r7
 8015b92:	bd80      	pop	{r7, pc}

08015b94 <__NVIC_SetPriority>:
{
 8015b94:	b480      	push	{r7}
 8015b96:	b083      	sub	sp, #12
 8015b98:	af00      	add	r7, sp, #0
 8015b9a:	4603      	mov	r3, r0
 8015b9c:	6039      	str	r1, [r7, #0]
 8015b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	db0a      	blt.n	8015bbe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015ba8:	683b      	ldr	r3, [r7, #0]
 8015baa:	b2da      	uxtb	r2, r3
 8015bac:	490c      	ldr	r1, [pc, #48]	; (8015be0 <__NVIC_SetPriority+0x4c>)
 8015bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015bb2:	0112      	lsls	r2, r2, #4
 8015bb4:	b2d2      	uxtb	r2, r2
 8015bb6:	440b      	add	r3, r1
 8015bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015bbc:	e00a      	b.n	8015bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015bbe:	683b      	ldr	r3, [r7, #0]
 8015bc0:	b2da      	uxtb	r2, r3
 8015bc2:	4908      	ldr	r1, [pc, #32]	; (8015be4 <__NVIC_SetPriority+0x50>)
 8015bc4:	79fb      	ldrb	r3, [r7, #7]
 8015bc6:	f003 030f 	and.w	r3, r3, #15
 8015bca:	3b04      	subs	r3, #4
 8015bcc:	0112      	lsls	r2, r2, #4
 8015bce:	b2d2      	uxtb	r2, r2
 8015bd0:	440b      	add	r3, r1
 8015bd2:	761a      	strb	r2, [r3, #24]
}
 8015bd4:	bf00      	nop
 8015bd6:	370c      	adds	r7, #12
 8015bd8:	46bd      	mov	sp, r7
 8015bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bde:	4770      	bx	lr
 8015be0:	e000e100 	.word	0xe000e100
 8015be4:	e000ed00 	.word	0xe000ed00

08015be8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8015be8:	b580      	push	{r7, lr}
 8015bea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8015bec:	4b05      	ldr	r3, [pc, #20]	; (8015c04 <SysTick_Handler+0x1c>)
 8015bee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8015bf0:	f002 f98c 	bl	8017f0c <xTaskGetSchedulerState>
 8015bf4:	4603      	mov	r3, r0
 8015bf6:	2b01      	cmp	r3, #1
 8015bf8:	d001      	beq.n	8015bfe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8015bfa:	f003 f875 	bl	8018ce8 <xPortSysTickHandler>
  }
}
 8015bfe:	bf00      	nop
 8015c00:	bd80      	pop	{r7, pc}
 8015c02:	bf00      	nop
 8015c04:	e000e010 	.word	0xe000e010

08015c08 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8015c08:	b580      	push	{r7, lr}
 8015c0a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8015c0c:	2100      	movs	r1, #0
 8015c0e:	f06f 0004 	mvn.w	r0, #4
 8015c12:	f7ff ffbf 	bl	8015b94 <__NVIC_SetPriority>
#endif
}
 8015c16:	bf00      	nop
 8015c18:	bd80      	pop	{r7, pc}
	...

08015c1c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8015c1c:	b480      	push	{r7}
 8015c1e:	b083      	sub	sp, #12
 8015c20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015c22:	f3ef 8305 	mrs	r3, IPSR
 8015c26:	603b      	str	r3, [r7, #0]
  return(result);
 8015c28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d003      	beq.n	8015c36 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8015c2e:	f06f 0305 	mvn.w	r3, #5
 8015c32:	607b      	str	r3, [r7, #4]
 8015c34:	e00c      	b.n	8015c50 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8015c36:	4b0a      	ldr	r3, [pc, #40]	; (8015c60 <osKernelInitialize+0x44>)
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d105      	bne.n	8015c4a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8015c3e:	4b08      	ldr	r3, [pc, #32]	; (8015c60 <osKernelInitialize+0x44>)
 8015c40:	2201      	movs	r2, #1
 8015c42:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8015c44:	2300      	movs	r3, #0
 8015c46:	607b      	str	r3, [r7, #4]
 8015c48:	e002      	b.n	8015c50 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8015c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8015c4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015c50:	687b      	ldr	r3, [r7, #4]
}
 8015c52:	4618      	mov	r0, r3
 8015c54:	370c      	adds	r7, #12
 8015c56:	46bd      	mov	sp, r7
 8015c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c5c:	4770      	bx	lr
 8015c5e:	bf00      	nop
 8015c60:	20000874 	.word	0x20000874

08015c64 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8015c64:	b580      	push	{r7, lr}
 8015c66:	b082      	sub	sp, #8
 8015c68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015c6a:	f3ef 8305 	mrs	r3, IPSR
 8015c6e:	603b      	str	r3, [r7, #0]
  return(result);
 8015c70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d003      	beq.n	8015c7e <osKernelStart+0x1a>
    stat = osErrorISR;
 8015c76:	f06f 0305 	mvn.w	r3, #5
 8015c7a:	607b      	str	r3, [r7, #4]
 8015c7c:	e010      	b.n	8015ca0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8015c7e:	4b0b      	ldr	r3, [pc, #44]	; (8015cac <osKernelStart+0x48>)
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	2b01      	cmp	r3, #1
 8015c84:	d109      	bne.n	8015c9a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8015c86:	f7ff ffbf 	bl	8015c08 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8015c8a:	4b08      	ldr	r3, [pc, #32]	; (8015cac <osKernelStart+0x48>)
 8015c8c:	2202      	movs	r2, #2
 8015c8e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8015c90:	f001 fce0 	bl	8017654 <vTaskStartScheduler>
      stat = osOK;
 8015c94:	2300      	movs	r3, #0
 8015c96:	607b      	str	r3, [r7, #4]
 8015c98:	e002      	b.n	8015ca0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8015c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8015c9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015ca0:	687b      	ldr	r3, [r7, #4]
}
 8015ca2:	4618      	mov	r0, r3
 8015ca4:	3708      	adds	r7, #8
 8015ca6:	46bd      	mov	sp, r7
 8015ca8:	bd80      	pop	{r7, pc}
 8015caa:	bf00      	nop
 8015cac:	20000874 	.word	0x20000874

08015cb0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8015cb0:	b580      	push	{r7, lr}
 8015cb2:	b08e      	sub	sp, #56	; 0x38
 8015cb4:	af04      	add	r7, sp, #16
 8015cb6:	60f8      	str	r0, [r7, #12]
 8015cb8:	60b9      	str	r1, [r7, #8]
 8015cba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8015cbc:	2300      	movs	r3, #0
 8015cbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015cc0:	f3ef 8305 	mrs	r3, IPSR
 8015cc4:	617b      	str	r3, [r7, #20]
  return(result);
 8015cc6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d17e      	bne.n	8015dca <osThreadNew+0x11a>
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d07b      	beq.n	8015dca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8015cd2:	2380      	movs	r3, #128	; 0x80
 8015cd4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8015cd6:	2318      	movs	r3, #24
 8015cd8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8015cda:	2300      	movs	r3, #0
 8015cdc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8015cde:	f04f 33ff 	mov.w	r3, #4294967295
 8015ce2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d045      	beq.n	8015d76 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d002      	beq.n	8015cf8 <osThreadNew+0x48>
        name = attr->name;
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	699b      	ldr	r3, [r3, #24]
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d002      	beq.n	8015d06 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	699b      	ldr	r3, [r3, #24]
 8015d04:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8015d06:	69fb      	ldr	r3, [r7, #28]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d008      	beq.n	8015d1e <osThreadNew+0x6e>
 8015d0c:	69fb      	ldr	r3, [r7, #28]
 8015d0e:	2b38      	cmp	r3, #56	; 0x38
 8015d10:	d805      	bhi.n	8015d1e <osThreadNew+0x6e>
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	685b      	ldr	r3, [r3, #4]
 8015d16:	f003 0301 	and.w	r3, r3, #1
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d001      	beq.n	8015d22 <osThreadNew+0x72>
        return (NULL);
 8015d1e:	2300      	movs	r3, #0
 8015d20:	e054      	b.n	8015dcc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	695b      	ldr	r3, [r3, #20]
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d003      	beq.n	8015d32 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	695b      	ldr	r3, [r3, #20]
 8015d2e:	089b      	lsrs	r3, r3, #2
 8015d30:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	689b      	ldr	r3, [r3, #8]
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d00e      	beq.n	8015d58 <osThreadNew+0xa8>
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	68db      	ldr	r3, [r3, #12]
 8015d3e:	2bbb      	cmp	r3, #187	; 0xbb
 8015d40:	d90a      	bls.n	8015d58 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d006      	beq.n	8015d58 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	695b      	ldr	r3, [r3, #20]
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d002      	beq.n	8015d58 <osThreadNew+0xa8>
        mem = 1;
 8015d52:	2301      	movs	r3, #1
 8015d54:	61bb      	str	r3, [r7, #24]
 8015d56:	e010      	b.n	8015d7a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	689b      	ldr	r3, [r3, #8]
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d10c      	bne.n	8015d7a <osThreadNew+0xca>
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	68db      	ldr	r3, [r3, #12]
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d108      	bne.n	8015d7a <osThreadNew+0xca>
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	691b      	ldr	r3, [r3, #16]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d104      	bne.n	8015d7a <osThreadNew+0xca>
          mem = 0;
 8015d70:	2300      	movs	r3, #0
 8015d72:	61bb      	str	r3, [r7, #24]
 8015d74:	e001      	b.n	8015d7a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8015d76:	2300      	movs	r3, #0
 8015d78:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8015d7a:	69bb      	ldr	r3, [r7, #24]
 8015d7c:	2b01      	cmp	r3, #1
 8015d7e:	d110      	bne.n	8015da2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8015d84:	687a      	ldr	r2, [r7, #4]
 8015d86:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015d88:	9202      	str	r2, [sp, #8]
 8015d8a:	9301      	str	r3, [sp, #4]
 8015d8c:	69fb      	ldr	r3, [r7, #28]
 8015d8e:	9300      	str	r3, [sp, #0]
 8015d90:	68bb      	ldr	r3, [r7, #8]
 8015d92:	6a3a      	ldr	r2, [r7, #32]
 8015d94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015d96:	68f8      	ldr	r0, [r7, #12]
 8015d98:	f001 fa70 	bl	801727c <xTaskCreateStatic>
 8015d9c:	4603      	mov	r3, r0
 8015d9e:	613b      	str	r3, [r7, #16]
 8015da0:	e013      	b.n	8015dca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8015da2:	69bb      	ldr	r3, [r7, #24]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d110      	bne.n	8015dca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8015da8:	6a3b      	ldr	r3, [r7, #32]
 8015daa:	b29a      	uxth	r2, r3
 8015dac:	f107 0310 	add.w	r3, r7, #16
 8015db0:	9301      	str	r3, [sp, #4]
 8015db2:	69fb      	ldr	r3, [r7, #28]
 8015db4:	9300      	str	r3, [sp, #0]
 8015db6:	68bb      	ldr	r3, [r7, #8]
 8015db8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015dba:	68f8      	ldr	r0, [r7, #12]
 8015dbc:	f001 fabb 	bl	8017336 <xTaskCreate>
 8015dc0:	4603      	mov	r3, r0
 8015dc2:	2b01      	cmp	r3, #1
 8015dc4:	d001      	beq.n	8015dca <osThreadNew+0x11a>
            hTask = NULL;
 8015dc6:	2300      	movs	r3, #0
 8015dc8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8015dca:	693b      	ldr	r3, [r7, #16]
}
 8015dcc:	4618      	mov	r0, r3
 8015dce:	3728      	adds	r7, #40	; 0x28
 8015dd0:	46bd      	mov	sp, r7
 8015dd2:	bd80      	pop	{r7, pc}

08015dd4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8015dd4:	b580      	push	{r7, lr}
 8015dd6:	b084      	sub	sp, #16
 8015dd8:	af00      	add	r7, sp, #0
 8015dda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015ddc:	f3ef 8305 	mrs	r3, IPSR
 8015de0:	60bb      	str	r3, [r7, #8]
  return(result);
 8015de2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d003      	beq.n	8015df0 <osDelay+0x1c>
    stat = osErrorISR;
 8015de8:	f06f 0305 	mvn.w	r3, #5
 8015dec:	60fb      	str	r3, [r7, #12]
 8015dee:	e007      	b.n	8015e00 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8015df0:	2300      	movs	r3, #0
 8015df2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d002      	beq.n	8015e00 <osDelay+0x2c>
      vTaskDelay(ticks);
 8015dfa:	6878      	ldr	r0, [r7, #4]
 8015dfc:	f001 fbf6 	bl	80175ec <vTaskDelay>
    }
  }

  return (stat);
 8015e00:	68fb      	ldr	r3, [r7, #12]
}
 8015e02:	4618      	mov	r0, r3
 8015e04:	3710      	adds	r7, #16
 8015e06:	46bd      	mov	sp, r7
 8015e08:	bd80      	pop	{r7, pc}

08015e0a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8015e0a:	b580      	push	{r7, lr}
 8015e0c:	b08a      	sub	sp, #40	; 0x28
 8015e0e:	af02      	add	r7, sp, #8
 8015e10:	60f8      	str	r0, [r7, #12]
 8015e12:	60b9      	str	r1, [r7, #8]
 8015e14:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8015e16:	2300      	movs	r3, #0
 8015e18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015e1a:	f3ef 8305 	mrs	r3, IPSR
 8015e1e:	613b      	str	r3, [r7, #16]
  return(result);
 8015e20:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d175      	bne.n	8015f12 <osSemaphoreNew+0x108>
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d072      	beq.n	8015f12 <osSemaphoreNew+0x108>
 8015e2c:	68ba      	ldr	r2, [r7, #8]
 8015e2e:	68fb      	ldr	r3, [r7, #12]
 8015e30:	429a      	cmp	r2, r3
 8015e32:	d86e      	bhi.n	8015f12 <osSemaphoreNew+0x108>
    mem = -1;
 8015e34:	f04f 33ff 	mov.w	r3, #4294967295
 8015e38:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d015      	beq.n	8015e6c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	689b      	ldr	r3, [r3, #8]
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d006      	beq.n	8015e56 <osSemaphoreNew+0x4c>
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	68db      	ldr	r3, [r3, #12]
 8015e4c:	2b4f      	cmp	r3, #79	; 0x4f
 8015e4e:	d902      	bls.n	8015e56 <osSemaphoreNew+0x4c>
        mem = 1;
 8015e50:	2301      	movs	r3, #1
 8015e52:	61bb      	str	r3, [r7, #24]
 8015e54:	e00c      	b.n	8015e70 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	689b      	ldr	r3, [r3, #8]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d108      	bne.n	8015e70 <osSemaphoreNew+0x66>
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	68db      	ldr	r3, [r3, #12]
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d104      	bne.n	8015e70 <osSemaphoreNew+0x66>
          mem = 0;
 8015e66:	2300      	movs	r3, #0
 8015e68:	61bb      	str	r3, [r7, #24]
 8015e6a:	e001      	b.n	8015e70 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8015e6c:	2300      	movs	r3, #0
 8015e6e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8015e70:	69bb      	ldr	r3, [r7, #24]
 8015e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e76:	d04c      	beq.n	8015f12 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	2b01      	cmp	r3, #1
 8015e7c:	d128      	bne.n	8015ed0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8015e7e:	69bb      	ldr	r3, [r7, #24]
 8015e80:	2b01      	cmp	r3, #1
 8015e82:	d10a      	bne.n	8015e9a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	689b      	ldr	r3, [r3, #8]
 8015e88:	2203      	movs	r2, #3
 8015e8a:	9200      	str	r2, [sp, #0]
 8015e8c:	2200      	movs	r2, #0
 8015e8e:	2100      	movs	r1, #0
 8015e90:	2001      	movs	r0, #1
 8015e92:	f000 fa4d 	bl	8016330 <xQueueGenericCreateStatic>
 8015e96:	61f8      	str	r0, [r7, #28]
 8015e98:	e005      	b.n	8015ea6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8015e9a:	2203      	movs	r2, #3
 8015e9c:	2100      	movs	r1, #0
 8015e9e:	2001      	movs	r0, #1
 8015ea0:	f000 fabe 	bl	8016420 <xQueueGenericCreate>
 8015ea4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8015ea6:	69fb      	ldr	r3, [r7, #28]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d022      	beq.n	8015ef2 <osSemaphoreNew+0xe8>
 8015eac:	68bb      	ldr	r3, [r7, #8]
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d01f      	beq.n	8015ef2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015eb2:	2300      	movs	r3, #0
 8015eb4:	2200      	movs	r2, #0
 8015eb6:	2100      	movs	r1, #0
 8015eb8:	69f8      	ldr	r0, [r7, #28]
 8015eba:	f000 fb79 	bl	80165b0 <xQueueGenericSend>
 8015ebe:	4603      	mov	r3, r0
 8015ec0:	2b01      	cmp	r3, #1
 8015ec2:	d016      	beq.n	8015ef2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8015ec4:	69f8      	ldr	r0, [r7, #28]
 8015ec6:	f001 f805 	bl	8016ed4 <vQueueDelete>
            hSemaphore = NULL;
 8015eca:	2300      	movs	r3, #0
 8015ecc:	61fb      	str	r3, [r7, #28]
 8015ece:	e010      	b.n	8015ef2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8015ed0:	69bb      	ldr	r3, [r7, #24]
 8015ed2:	2b01      	cmp	r3, #1
 8015ed4:	d108      	bne.n	8015ee8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	689b      	ldr	r3, [r3, #8]
 8015eda:	461a      	mov	r2, r3
 8015edc:	68b9      	ldr	r1, [r7, #8]
 8015ede:	68f8      	ldr	r0, [r7, #12]
 8015ee0:	f000 fafb 	bl	80164da <xQueueCreateCountingSemaphoreStatic>
 8015ee4:	61f8      	str	r0, [r7, #28]
 8015ee6:	e004      	b.n	8015ef2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8015ee8:	68b9      	ldr	r1, [r7, #8]
 8015eea:	68f8      	ldr	r0, [r7, #12]
 8015eec:	f000 fb2c 	bl	8016548 <xQueueCreateCountingSemaphore>
 8015ef0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8015ef2:	69fb      	ldr	r3, [r7, #28]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d00c      	beq.n	8015f12 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d003      	beq.n	8015f06 <osSemaphoreNew+0xfc>
          name = attr->name;
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	617b      	str	r3, [r7, #20]
 8015f04:	e001      	b.n	8015f0a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8015f06:	2300      	movs	r3, #0
 8015f08:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8015f0a:	6979      	ldr	r1, [r7, #20]
 8015f0c:	69f8      	ldr	r0, [r7, #28]
 8015f0e:	f001 f92d 	bl	801716c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8015f12:	69fb      	ldr	r3, [r7, #28]
}
 8015f14:	4618      	mov	r0, r3
 8015f16:	3720      	adds	r7, #32
 8015f18:	46bd      	mov	sp, r7
 8015f1a:	bd80      	pop	{r7, pc}

08015f1c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	b086      	sub	sp, #24
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	6078      	str	r0, [r7, #4]
 8015f24:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8015f2a:	2300      	movs	r3, #0
 8015f2c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8015f2e:	693b      	ldr	r3, [r7, #16]
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d103      	bne.n	8015f3c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8015f34:	f06f 0303 	mvn.w	r3, #3
 8015f38:	617b      	str	r3, [r7, #20]
 8015f3a:	e039      	b.n	8015fb0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015f3c:	f3ef 8305 	mrs	r3, IPSR
 8015f40:	60fb      	str	r3, [r7, #12]
  return(result);
 8015f42:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d022      	beq.n	8015f8e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8015f48:	683b      	ldr	r3, [r7, #0]
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d003      	beq.n	8015f56 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8015f4e:	f06f 0303 	mvn.w	r3, #3
 8015f52:	617b      	str	r3, [r7, #20]
 8015f54:	e02c      	b.n	8015fb0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8015f56:	2300      	movs	r3, #0
 8015f58:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8015f5a:	f107 0308 	add.w	r3, r7, #8
 8015f5e:	461a      	mov	r2, r3
 8015f60:	2100      	movs	r1, #0
 8015f62:	6938      	ldr	r0, [r7, #16]
 8015f64:	f000 ff36 	bl	8016dd4 <xQueueReceiveFromISR>
 8015f68:	4603      	mov	r3, r0
 8015f6a:	2b01      	cmp	r3, #1
 8015f6c:	d003      	beq.n	8015f76 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8015f6e:	f06f 0302 	mvn.w	r3, #2
 8015f72:	617b      	str	r3, [r7, #20]
 8015f74:	e01c      	b.n	8015fb0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8015f76:	68bb      	ldr	r3, [r7, #8]
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d019      	beq.n	8015fb0 <osSemaphoreAcquire+0x94>
 8015f7c:	4b0f      	ldr	r3, [pc, #60]	; (8015fbc <osSemaphoreAcquire+0xa0>)
 8015f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015f82:	601a      	str	r2, [r3, #0]
 8015f84:	f3bf 8f4f 	dsb	sy
 8015f88:	f3bf 8f6f 	isb	sy
 8015f8c:	e010      	b.n	8015fb0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8015f8e:	6839      	ldr	r1, [r7, #0]
 8015f90:	6938      	ldr	r0, [r7, #16]
 8015f92:	f000 fe13 	bl	8016bbc <xQueueSemaphoreTake>
 8015f96:	4603      	mov	r3, r0
 8015f98:	2b01      	cmp	r3, #1
 8015f9a:	d009      	beq.n	8015fb0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8015f9c:	683b      	ldr	r3, [r7, #0]
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d003      	beq.n	8015faa <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8015fa2:	f06f 0301 	mvn.w	r3, #1
 8015fa6:	617b      	str	r3, [r7, #20]
 8015fa8:	e002      	b.n	8015fb0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8015faa:	f06f 0302 	mvn.w	r3, #2
 8015fae:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8015fb0:	697b      	ldr	r3, [r7, #20]
}
 8015fb2:	4618      	mov	r0, r3
 8015fb4:	3718      	adds	r7, #24
 8015fb6:	46bd      	mov	sp, r7
 8015fb8:	bd80      	pop	{r7, pc}
 8015fba:	bf00      	nop
 8015fbc:	e000ed04 	.word	0xe000ed04

08015fc0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8015fc0:	b580      	push	{r7, lr}
 8015fc2:	b086      	sub	sp, #24
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8015fcc:	2300      	movs	r3, #0
 8015fce:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8015fd0:	693b      	ldr	r3, [r7, #16]
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d103      	bne.n	8015fde <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8015fd6:	f06f 0303 	mvn.w	r3, #3
 8015fda:	617b      	str	r3, [r7, #20]
 8015fdc:	e02c      	b.n	8016038 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015fde:	f3ef 8305 	mrs	r3, IPSR
 8015fe2:	60fb      	str	r3, [r7, #12]
  return(result);
 8015fe4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d01a      	beq.n	8016020 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8015fea:	2300      	movs	r3, #0
 8015fec:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8015fee:	f107 0308 	add.w	r3, r7, #8
 8015ff2:	4619      	mov	r1, r3
 8015ff4:	6938      	ldr	r0, [r7, #16]
 8015ff6:	f000 fc74 	bl	80168e2 <xQueueGiveFromISR>
 8015ffa:	4603      	mov	r3, r0
 8015ffc:	2b01      	cmp	r3, #1
 8015ffe:	d003      	beq.n	8016008 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8016000:	f06f 0302 	mvn.w	r3, #2
 8016004:	617b      	str	r3, [r7, #20]
 8016006:	e017      	b.n	8016038 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8016008:	68bb      	ldr	r3, [r7, #8]
 801600a:	2b00      	cmp	r3, #0
 801600c:	d014      	beq.n	8016038 <osSemaphoreRelease+0x78>
 801600e:	4b0d      	ldr	r3, [pc, #52]	; (8016044 <osSemaphoreRelease+0x84>)
 8016010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016014:	601a      	str	r2, [r3, #0]
 8016016:	f3bf 8f4f 	dsb	sy
 801601a:	f3bf 8f6f 	isb	sy
 801601e:	e00b      	b.n	8016038 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8016020:	2300      	movs	r3, #0
 8016022:	2200      	movs	r2, #0
 8016024:	2100      	movs	r1, #0
 8016026:	6938      	ldr	r0, [r7, #16]
 8016028:	f000 fac2 	bl	80165b0 <xQueueGenericSend>
 801602c:	4603      	mov	r3, r0
 801602e:	2b01      	cmp	r3, #1
 8016030:	d002      	beq.n	8016038 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8016032:	f06f 0302 	mvn.w	r3, #2
 8016036:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8016038:	697b      	ldr	r3, [r7, #20]
}
 801603a:	4618      	mov	r0, r3
 801603c:	3718      	adds	r7, #24
 801603e:	46bd      	mov	sp, r7
 8016040:	bd80      	pop	{r7, pc}
 8016042:	bf00      	nop
 8016044:	e000ed04 	.word	0xe000ed04

08016048 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8016048:	b580      	push	{r7, lr}
 801604a:	b086      	sub	sp, #24
 801604c:	af00      	add	r7, sp, #0
 801604e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016054:	f3ef 8305 	mrs	r3, IPSR
 8016058:	60fb      	str	r3, [r7, #12]
  return(result);
 801605a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 801605c:	2b00      	cmp	r3, #0
 801605e:	d003      	beq.n	8016068 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8016060:	f06f 0305 	mvn.w	r3, #5
 8016064:	617b      	str	r3, [r7, #20]
 8016066:	e00e      	b.n	8016086 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8016068:	693b      	ldr	r3, [r7, #16]
 801606a:	2b00      	cmp	r3, #0
 801606c:	d103      	bne.n	8016076 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 801606e:	f06f 0303 	mvn.w	r3, #3
 8016072:	617b      	str	r3, [r7, #20]
 8016074:	e007      	b.n	8016086 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8016076:	6938      	ldr	r0, [r7, #16]
 8016078:	f001 f8a2 	bl	80171c0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 801607c:	2300      	movs	r3, #0
 801607e:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8016080:	6938      	ldr	r0, [r7, #16]
 8016082:	f000 ff27 	bl	8016ed4 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8016086:	697b      	ldr	r3, [r7, #20]
}
 8016088:	4618      	mov	r0, r3
 801608a:	3718      	adds	r7, #24
 801608c:	46bd      	mov	sp, r7
 801608e:	bd80      	pop	{r7, pc}

08016090 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8016090:	b480      	push	{r7}
 8016092:	b085      	sub	sp, #20
 8016094:	af00      	add	r7, sp, #0
 8016096:	60f8      	str	r0, [r7, #12]
 8016098:	60b9      	str	r1, [r7, #8]
 801609a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	4a07      	ldr	r2, [pc, #28]	; (80160bc <vApplicationGetIdleTaskMemory+0x2c>)
 80160a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80160a2:	68bb      	ldr	r3, [r7, #8]
 80160a4:	4a06      	ldr	r2, [pc, #24]	; (80160c0 <vApplicationGetIdleTaskMemory+0x30>)
 80160a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	2280      	movs	r2, #128	; 0x80
 80160ac:	601a      	str	r2, [r3, #0]
}
 80160ae:	bf00      	nop
 80160b0:	3714      	adds	r7, #20
 80160b2:	46bd      	mov	sp, r7
 80160b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160b8:	4770      	bx	lr
 80160ba:	bf00      	nop
 80160bc:	20000878 	.word	0x20000878
 80160c0:	20000934 	.word	0x20000934

080160c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80160c4:	b480      	push	{r7}
 80160c6:	b085      	sub	sp, #20
 80160c8:	af00      	add	r7, sp, #0
 80160ca:	60f8      	str	r0, [r7, #12]
 80160cc:	60b9      	str	r1, [r7, #8]
 80160ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	4a07      	ldr	r2, [pc, #28]	; (80160f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80160d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80160d6:	68bb      	ldr	r3, [r7, #8]
 80160d8:	4a06      	ldr	r2, [pc, #24]	; (80160f4 <vApplicationGetTimerTaskMemory+0x30>)
 80160da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80160e2:	601a      	str	r2, [r3, #0]
}
 80160e4:	bf00      	nop
 80160e6:	3714      	adds	r7, #20
 80160e8:	46bd      	mov	sp, r7
 80160ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160ee:	4770      	bx	lr
 80160f0:	20000b34 	.word	0x20000b34
 80160f4:	20000bf0 	.word	0x20000bf0

080160f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80160f8:	b480      	push	{r7}
 80160fa:	b083      	sub	sp, #12
 80160fc:	af00      	add	r7, sp, #0
 80160fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	f103 0208 	add.w	r2, r3, #8
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	f04f 32ff 	mov.w	r2, #4294967295
 8016110:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	f103 0208 	add.w	r2, r3, #8
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	f103 0208 	add.w	r2, r3, #8
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	2200      	movs	r2, #0
 801612a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801612c:	bf00      	nop
 801612e:	370c      	adds	r7, #12
 8016130:	46bd      	mov	sp, r7
 8016132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016136:	4770      	bx	lr

08016138 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8016138:	b480      	push	{r7}
 801613a:	b083      	sub	sp, #12
 801613c:	af00      	add	r7, sp, #0
 801613e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	2200      	movs	r2, #0
 8016144:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8016146:	bf00      	nop
 8016148:	370c      	adds	r7, #12
 801614a:	46bd      	mov	sp, r7
 801614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016150:	4770      	bx	lr

08016152 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016152:	b480      	push	{r7}
 8016154:	b085      	sub	sp, #20
 8016156:	af00      	add	r7, sp, #0
 8016158:	6078      	str	r0, [r7, #4]
 801615a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	685b      	ldr	r3, [r3, #4]
 8016160:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8016162:	683b      	ldr	r3, [r7, #0]
 8016164:	68fa      	ldr	r2, [r7, #12]
 8016166:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	689a      	ldr	r2, [r3, #8]
 801616c:	683b      	ldr	r3, [r7, #0]
 801616e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	689b      	ldr	r3, [r3, #8]
 8016174:	683a      	ldr	r2, [r7, #0]
 8016176:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	683a      	ldr	r2, [r7, #0]
 801617c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801617e:	683b      	ldr	r3, [r7, #0]
 8016180:	687a      	ldr	r2, [r7, #4]
 8016182:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	681b      	ldr	r3, [r3, #0]
 8016188:	1c5a      	adds	r2, r3, #1
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	601a      	str	r2, [r3, #0]
}
 801618e:	bf00      	nop
 8016190:	3714      	adds	r7, #20
 8016192:	46bd      	mov	sp, r7
 8016194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016198:	4770      	bx	lr

0801619a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801619a:	b480      	push	{r7}
 801619c:	b085      	sub	sp, #20
 801619e:	af00      	add	r7, sp, #0
 80161a0:	6078      	str	r0, [r7, #4]
 80161a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80161a4:	683b      	ldr	r3, [r7, #0]
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80161aa:	68bb      	ldr	r3, [r7, #8]
 80161ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161b0:	d103      	bne.n	80161ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	691b      	ldr	r3, [r3, #16]
 80161b6:	60fb      	str	r3, [r7, #12]
 80161b8:	e00c      	b.n	80161d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	3308      	adds	r3, #8
 80161be:	60fb      	str	r3, [r7, #12]
 80161c0:	e002      	b.n	80161c8 <vListInsert+0x2e>
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	685b      	ldr	r3, [r3, #4]
 80161c6:	60fb      	str	r3, [r7, #12]
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	685b      	ldr	r3, [r3, #4]
 80161cc:	681b      	ldr	r3, [r3, #0]
 80161ce:	68ba      	ldr	r2, [r7, #8]
 80161d0:	429a      	cmp	r2, r3
 80161d2:	d2f6      	bcs.n	80161c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	685a      	ldr	r2, [r3, #4]
 80161d8:	683b      	ldr	r3, [r7, #0]
 80161da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80161dc:	683b      	ldr	r3, [r7, #0]
 80161de:	685b      	ldr	r3, [r3, #4]
 80161e0:	683a      	ldr	r2, [r7, #0]
 80161e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80161e4:	683b      	ldr	r3, [r7, #0]
 80161e6:	68fa      	ldr	r2, [r7, #12]
 80161e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	683a      	ldr	r2, [r7, #0]
 80161ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80161f0:	683b      	ldr	r3, [r7, #0]
 80161f2:	687a      	ldr	r2, [r7, #4]
 80161f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	681b      	ldr	r3, [r3, #0]
 80161fa:	1c5a      	adds	r2, r3, #1
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	601a      	str	r2, [r3, #0]
}
 8016200:	bf00      	nop
 8016202:	3714      	adds	r7, #20
 8016204:	46bd      	mov	sp, r7
 8016206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801620a:	4770      	bx	lr

0801620c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801620c:	b480      	push	{r7}
 801620e:	b085      	sub	sp, #20
 8016210:	af00      	add	r7, sp, #0
 8016212:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	691b      	ldr	r3, [r3, #16]
 8016218:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	685b      	ldr	r3, [r3, #4]
 801621e:	687a      	ldr	r2, [r7, #4]
 8016220:	6892      	ldr	r2, [r2, #8]
 8016222:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	689b      	ldr	r3, [r3, #8]
 8016228:	687a      	ldr	r2, [r7, #4]
 801622a:	6852      	ldr	r2, [r2, #4]
 801622c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	685b      	ldr	r3, [r3, #4]
 8016232:	687a      	ldr	r2, [r7, #4]
 8016234:	429a      	cmp	r2, r3
 8016236:	d103      	bne.n	8016240 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	689a      	ldr	r2, [r3, #8]
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	2200      	movs	r2, #0
 8016244:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	1e5a      	subs	r2, r3, #1
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	681b      	ldr	r3, [r3, #0]
}
 8016254:	4618      	mov	r0, r3
 8016256:	3714      	adds	r7, #20
 8016258:	46bd      	mov	sp, r7
 801625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801625e:	4770      	bx	lr

08016260 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8016260:	b580      	push	{r7, lr}
 8016262:	b084      	sub	sp, #16
 8016264:	af00      	add	r7, sp, #0
 8016266:	6078      	str	r0, [r7, #4]
 8016268:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d10a      	bne.n	801628a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016278:	f383 8811 	msr	BASEPRI, r3
 801627c:	f3bf 8f6f 	isb	sy
 8016280:	f3bf 8f4f 	dsb	sy
 8016284:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8016286:	bf00      	nop
 8016288:	e7fe      	b.n	8016288 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801628a:	f002 fc9b 	bl	8018bc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801628e:	68fb      	ldr	r3, [r7, #12]
 8016290:	681a      	ldr	r2, [r3, #0]
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016296:	68f9      	ldr	r1, [r7, #12]
 8016298:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801629a:	fb01 f303 	mul.w	r3, r1, r3
 801629e:	441a      	add	r2, r3
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	2200      	movs	r2, #0
 80162a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	681a      	ldr	r2, [r3, #0]
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	681a      	ldr	r2, [r3, #0]
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80162ba:	3b01      	subs	r3, #1
 80162bc:	68f9      	ldr	r1, [r7, #12]
 80162be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80162c0:	fb01 f303 	mul.w	r3, r1, r3
 80162c4:	441a      	add	r2, r3
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80162ca:	68fb      	ldr	r3, [r7, #12]
 80162cc:	22ff      	movs	r2, #255	; 0xff
 80162ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	22ff      	movs	r2, #255	; 0xff
 80162d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80162da:	683b      	ldr	r3, [r7, #0]
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d114      	bne.n	801630a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	691b      	ldr	r3, [r3, #16]
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d01a      	beq.n	801631e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	3310      	adds	r3, #16
 80162ec:	4618      	mov	r0, r3
 80162ee:	f001 fc4b 	bl	8017b88 <xTaskRemoveFromEventList>
 80162f2:	4603      	mov	r3, r0
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d012      	beq.n	801631e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80162f8:	4b0c      	ldr	r3, [pc, #48]	; (801632c <xQueueGenericReset+0xcc>)
 80162fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80162fe:	601a      	str	r2, [r3, #0]
 8016300:	f3bf 8f4f 	dsb	sy
 8016304:	f3bf 8f6f 	isb	sy
 8016308:	e009      	b.n	801631e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	3310      	adds	r3, #16
 801630e:	4618      	mov	r0, r3
 8016310:	f7ff fef2 	bl	80160f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	3324      	adds	r3, #36	; 0x24
 8016318:	4618      	mov	r0, r3
 801631a:	f7ff feed 	bl	80160f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801631e:	f002 fc81 	bl	8018c24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8016322:	2301      	movs	r3, #1
}
 8016324:	4618      	mov	r0, r3
 8016326:	3710      	adds	r7, #16
 8016328:	46bd      	mov	sp, r7
 801632a:	bd80      	pop	{r7, pc}
 801632c:	e000ed04 	.word	0xe000ed04

08016330 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8016330:	b580      	push	{r7, lr}
 8016332:	b08e      	sub	sp, #56	; 0x38
 8016334:	af02      	add	r7, sp, #8
 8016336:	60f8      	str	r0, [r7, #12]
 8016338:	60b9      	str	r1, [r7, #8]
 801633a:	607a      	str	r2, [r7, #4]
 801633c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	2b00      	cmp	r3, #0
 8016342:	d10a      	bne.n	801635a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8016344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016348:	f383 8811 	msr	BASEPRI, r3
 801634c:	f3bf 8f6f 	isb	sy
 8016350:	f3bf 8f4f 	dsb	sy
 8016354:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016356:	bf00      	nop
 8016358:	e7fe      	b.n	8016358 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801635a:	683b      	ldr	r3, [r7, #0]
 801635c:	2b00      	cmp	r3, #0
 801635e:	d10a      	bne.n	8016376 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8016360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016364:	f383 8811 	msr	BASEPRI, r3
 8016368:	f3bf 8f6f 	isb	sy
 801636c:	f3bf 8f4f 	dsb	sy
 8016370:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016372:	bf00      	nop
 8016374:	e7fe      	b.n	8016374 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	2b00      	cmp	r3, #0
 801637a:	d002      	beq.n	8016382 <xQueueGenericCreateStatic+0x52>
 801637c:	68bb      	ldr	r3, [r7, #8]
 801637e:	2b00      	cmp	r3, #0
 8016380:	d001      	beq.n	8016386 <xQueueGenericCreateStatic+0x56>
 8016382:	2301      	movs	r3, #1
 8016384:	e000      	b.n	8016388 <xQueueGenericCreateStatic+0x58>
 8016386:	2300      	movs	r3, #0
 8016388:	2b00      	cmp	r3, #0
 801638a:	d10a      	bne.n	80163a2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801638c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016390:	f383 8811 	msr	BASEPRI, r3
 8016394:	f3bf 8f6f 	isb	sy
 8016398:	f3bf 8f4f 	dsb	sy
 801639c:	623b      	str	r3, [r7, #32]
}
 801639e:	bf00      	nop
 80163a0:	e7fe      	b.n	80163a0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d102      	bne.n	80163ae <xQueueGenericCreateStatic+0x7e>
 80163a8:	68bb      	ldr	r3, [r7, #8]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d101      	bne.n	80163b2 <xQueueGenericCreateStatic+0x82>
 80163ae:	2301      	movs	r3, #1
 80163b0:	e000      	b.n	80163b4 <xQueueGenericCreateStatic+0x84>
 80163b2:	2300      	movs	r3, #0
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d10a      	bne.n	80163ce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80163b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163bc:	f383 8811 	msr	BASEPRI, r3
 80163c0:	f3bf 8f6f 	isb	sy
 80163c4:	f3bf 8f4f 	dsb	sy
 80163c8:	61fb      	str	r3, [r7, #28]
}
 80163ca:	bf00      	nop
 80163cc:	e7fe      	b.n	80163cc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80163ce:	2350      	movs	r3, #80	; 0x50
 80163d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80163d2:	697b      	ldr	r3, [r7, #20]
 80163d4:	2b50      	cmp	r3, #80	; 0x50
 80163d6:	d00a      	beq.n	80163ee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80163d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163dc:	f383 8811 	msr	BASEPRI, r3
 80163e0:	f3bf 8f6f 	isb	sy
 80163e4:	f3bf 8f4f 	dsb	sy
 80163e8:	61bb      	str	r3, [r7, #24]
}
 80163ea:	bf00      	nop
 80163ec:	e7fe      	b.n	80163ec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80163ee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80163f0:	683b      	ldr	r3, [r7, #0]
 80163f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80163f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d00d      	beq.n	8016416 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80163fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163fc:	2201      	movs	r2, #1
 80163fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016402:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8016406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016408:	9300      	str	r3, [sp, #0]
 801640a:	4613      	mov	r3, r2
 801640c:	687a      	ldr	r2, [r7, #4]
 801640e:	68b9      	ldr	r1, [r7, #8]
 8016410:	68f8      	ldr	r0, [r7, #12]
 8016412:	f000 f83f 	bl	8016494 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8016418:	4618      	mov	r0, r3
 801641a:	3730      	adds	r7, #48	; 0x30
 801641c:	46bd      	mov	sp, r7
 801641e:	bd80      	pop	{r7, pc}

08016420 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8016420:	b580      	push	{r7, lr}
 8016422:	b08a      	sub	sp, #40	; 0x28
 8016424:	af02      	add	r7, sp, #8
 8016426:	60f8      	str	r0, [r7, #12]
 8016428:	60b9      	str	r1, [r7, #8]
 801642a:	4613      	mov	r3, r2
 801642c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	2b00      	cmp	r3, #0
 8016432:	d10a      	bne.n	801644a <xQueueGenericCreate+0x2a>
	__asm volatile
 8016434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016438:	f383 8811 	msr	BASEPRI, r3
 801643c:	f3bf 8f6f 	isb	sy
 8016440:	f3bf 8f4f 	dsb	sy
 8016444:	613b      	str	r3, [r7, #16]
}
 8016446:	bf00      	nop
 8016448:	e7fe      	b.n	8016448 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801644a:	68fb      	ldr	r3, [r7, #12]
 801644c:	68ba      	ldr	r2, [r7, #8]
 801644e:	fb02 f303 	mul.w	r3, r2, r3
 8016452:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016454:	69fb      	ldr	r3, [r7, #28]
 8016456:	3350      	adds	r3, #80	; 0x50
 8016458:	4618      	mov	r0, r3
 801645a:	f002 fcd5 	bl	8018e08 <pvPortMalloc>
 801645e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8016460:	69bb      	ldr	r3, [r7, #24]
 8016462:	2b00      	cmp	r3, #0
 8016464:	d011      	beq.n	801648a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8016466:	69bb      	ldr	r3, [r7, #24]
 8016468:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801646a:	697b      	ldr	r3, [r7, #20]
 801646c:	3350      	adds	r3, #80	; 0x50
 801646e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016470:	69bb      	ldr	r3, [r7, #24]
 8016472:	2200      	movs	r2, #0
 8016474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016478:	79fa      	ldrb	r2, [r7, #7]
 801647a:	69bb      	ldr	r3, [r7, #24]
 801647c:	9300      	str	r3, [sp, #0]
 801647e:	4613      	mov	r3, r2
 8016480:	697a      	ldr	r2, [r7, #20]
 8016482:	68b9      	ldr	r1, [r7, #8]
 8016484:	68f8      	ldr	r0, [r7, #12]
 8016486:	f000 f805 	bl	8016494 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801648a:	69bb      	ldr	r3, [r7, #24]
	}
 801648c:	4618      	mov	r0, r3
 801648e:	3720      	adds	r7, #32
 8016490:	46bd      	mov	sp, r7
 8016492:	bd80      	pop	{r7, pc}

08016494 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016494:	b580      	push	{r7, lr}
 8016496:	b084      	sub	sp, #16
 8016498:	af00      	add	r7, sp, #0
 801649a:	60f8      	str	r0, [r7, #12]
 801649c:	60b9      	str	r1, [r7, #8]
 801649e:	607a      	str	r2, [r7, #4]
 80164a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80164a2:	68bb      	ldr	r3, [r7, #8]
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d103      	bne.n	80164b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80164a8:	69bb      	ldr	r3, [r7, #24]
 80164aa:	69ba      	ldr	r2, [r7, #24]
 80164ac:	601a      	str	r2, [r3, #0]
 80164ae:	e002      	b.n	80164b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80164b0:	69bb      	ldr	r3, [r7, #24]
 80164b2:	687a      	ldr	r2, [r7, #4]
 80164b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80164b6:	69bb      	ldr	r3, [r7, #24]
 80164b8:	68fa      	ldr	r2, [r7, #12]
 80164ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80164bc:	69bb      	ldr	r3, [r7, #24]
 80164be:	68ba      	ldr	r2, [r7, #8]
 80164c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80164c2:	2101      	movs	r1, #1
 80164c4:	69b8      	ldr	r0, [r7, #24]
 80164c6:	f7ff fecb 	bl	8016260 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80164ca:	69bb      	ldr	r3, [r7, #24]
 80164cc:	78fa      	ldrb	r2, [r7, #3]
 80164ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80164d2:	bf00      	nop
 80164d4:	3710      	adds	r7, #16
 80164d6:	46bd      	mov	sp, r7
 80164d8:	bd80      	pop	{r7, pc}

080164da <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80164da:	b580      	push	{r7, lr}
 80164dc:	b08a      	sub	sp, #40	; 0x28
 80164de:	af02      	add	r7, sp, #8
 80164e0:	60f8      	str	r0, [r7, #12]
 80164e2:	60b9      	str	r1, [r7, #8]
 80164e4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d10a      	bne.n	8016502 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80164ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164f0:	f383 8811 	msr	BASEPRI, r3
 80164f4:	f3bf 8f6f 	isb	sy
 80164f8:	f3bf 8f4f 	dsb	sy
 80164fc:	61bb      	str	r3, [r7, #24]
}
 80164fe:	bf00      	nop
 8016500:	e7fe      	b.n	8016500 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8016502:	68ba      	ldr	r2, [r7, #8]
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	429a      	cmp	r2, r3
 8016508:	d90a      	bls.n	8016520 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 801650a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801650e:	f383 8811 	msr	BASEPRI, r3
 8016512:	f3bf 8f6f 	isb	sy
 8016516:	f3bf 8f4f 	dsb	sy
 801651a:	617b      	str	r3, [r7, #20]
}
 801651c:	bf00      	nop
 801651e:	e7fe      	b.n	801651e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8016520:	2302      	movs	r3, #2
 8016522:	9300      	str	r3, [sp, #0]
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	2200      	movs	r2, #0
 8016528:	2100      	movs	r1, #0
 801652a:	68f8      	ldr	r0, [r7, #12]
 801652c:	f7ff ff00 	bl	8016330 <xQueueGenericCreateStatic>
 8016530:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8016532:	69fb      	ldr	r3, [r7, #28]
 8016534:	2b00      	cmp	r3, #0
 8016536:	d002      	beq.n	801653e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8016538:	69fb      	ldr	r3, [r7, #28]
 801653a:	68ba      	ldr	r2, [r7, #8]
 801653c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801653e:	69fb      	ldr	r3, [r7, #28]
	}
 8016540:	4618      	mov	r0, r3
 8016542:	3720      	adds	r7, #32
 8016544:	46bd      	mov	sp, r7
 8016546:	bd80      	pop	{r7, pc}

08016548 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8016548:	b580      	push	{r7, lr}
 801654a:	b086      	sub	sp, #24
 801654c:	af00      	add	r7, sp, #0
 801654e:	6078      	str	r0, [r7, #4]
 8016550:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	2b00      	cmp	r3, #0
 8016556:	d10a      	bne.n	801656e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8016558:	f04f 0350 	mov.w	r3, #80	; 0x50
 801655c:	f383 8811 	msr	BASEPRI, r3
 8016560:	f3bf 8f6f 	isb	sy
 8016564:	f3bf 8f4f 	dsb	sy
 8016568:	613b      	str	r3, [r7, #16]
}
 801656a:	bf00      	nop
 801656c:	e7fe      	b.n	801656c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 801656e:	683a      	ldr	r2, [r7, #0]
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	429a      	cmp	r2, r3
 8016574:	d90a      	bls.n	801658c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8016576:	f04f 0350 	mov.w	r3, #80	; 0x50
 801657a:	f383 8811 	msr	BASEPRI, r3
 801657e:	f3bf 8f6f 	isb	sy
 8016582:	f3bf 8f4f 	dsb	sy
 8016586:	60fb      	str	r3, [r7, #12]
}
 8016588:	bf00      	nop
 801658a:	e7fe      	b.n	801658a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801658c:	2202      	movs	r2, #2
 801658e:	2100      	movs	r1, #0
 8016590:	6878      	ldr	r0, [r7, #4]
 8016592:	f7ff ff45 	bl	8016420 <xQueueGenericCreate>
 8016596:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8016598:	697b      	ldr	r3, [r7, #20]
 801659a:	2b00      	cmp	r3, #0
 801659c:	d002      	beq.n	80165a4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801659e:	697b      	ldr	r3, [r7, #20]
 80165a0:	683a      	ldr	r2, [r7, #0]
 80165a2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80165a4:	697b      	ldr	r3, [r7, #20]
	}
 80165a6:	4618      	mov	r0, r3
 80165a8:	3718      	adds	r7, #24
 80165aa:	46bd      	mov	sp, r7
 80165ac:	bd80      	pop	{r7, pc}
	...

080165b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80165b0:	b580      	push	{r7, lr}
 80165b2:	b08e      	sub	sp, #56	; 0x38
 80165b4:	af00      	add	r7, sp, #0
 80165b6:	60f8      	str	r0, [r7, #12]
 80165b8:	60b9      	str	r1, [r7, #8]
 80165ba:	607a      	str	r2, [r7, #4]
 80165bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80165be:	2300      	movs	r3, #0
 80165c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80165c2:	68fb      	ldr	r3, [r7, #12]
 80165c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80165c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	d10a      	bne.n	80165e2 <xQueueGenericSend+0x32>
	__asm volatile
 80165cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165d0:	f383 8811 	msr	BASEPRI, r3
 80165d4:	f3bf 8f6f 	isb	sy
 80165d8:	f3bf 8f4f 	dsb	sy
 80165dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80165de:	bf00      	nop
 80165e0:	e7fe      	b.n	80165e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80165e2:	68bb      	ldr	r3, [r7, #8]
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d103      	bne.n	80165f0 <xQueueGenericSend+0x40>
 80165e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d101      	bne.n	80165f4 <xQueueGenericSend+0x44>
 80165f0:	2301      	movs	r3, #1
 80165f2:	e000      	b.n	80165f6 <xQueueGenericSend+0x46>
 80165f4:	2300      	movs	r3, #0
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d10a      	bne.n	8016610 <xQueueGenericSend+0x60>
	__asm volatile
 80165fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165fe:	f383 8811 	msr	BASEPRI, r3
 8016602:	f3bf 8f6f 	isb	sy
 8016606:	f3bf 8f4f 	dsb	sy
 801660a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801660c:	bf00      	nop
 801660e:	e7fe      	b.n	801660e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016610:	683b      	ldr	r3, [r7, #0]
 8016612:	2b02      	cmp	r3, #2
 8016614:	d103      	bne.n	801661e <xQueueGenericSend+0x6e>
 8016616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801661a:	2b01      	cmp	r3, #1
 801661c:	d101      	bne.n	8016622 <xQueueGenericSend+0x72>
 801661e:	2301      	movs	r3, #1
 8016620:	e000      	b.n	8016624 <xQueueGenericSend+0x74>
 8016622:	2300      	movs	r3, #0
 8016624:	2b00      	cmp	r3, #0
 8016626:	d10a      	bne.n	801663e <xQueueGenericSend+0x8e>
	__asm volatile
 8016628:	f04f 0350 	mov.w	r3, #80	; 0x50
 801662c:	f383 8811 	msr	BASEPRI, r3
 8016630:	f3bf 8f6f 	isb	sy
 8016634:	f3bf 8f4f 	dsb	sy
 8016638:	623b      	str	r3, [r7, #32]
}
 801663a:	bf00      	nop
 801663c:	e7fe      	b.n	801663c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801663e:	f001 fc65 	bl	8017f0c <xTaskGetSchedulerState>
 8016642:	4603      	mov	r3, r0
 8016644:	2b00      	cmp	r3, #0
 8016646:	d102      	bne.n	801664e <xQueueGenericSend+0x9e>
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	2b00      	cmp	r3, #0
 801664c:	d101      	bne.n	8016652 <xQueueGenericSend+0xa2>
 801664e:	2301      	movs	r3, #1
 8016650:	e000      	b.n	8016654 <xQueueGenericSend+0xa4>
 8016652:	2300      	movs	r3, #0
 8016654:	2b00      	cmp	r3, #0
 8016656:	d10a      	bne.n	801666e <xQueueGenericSend+0xbe>
	__asm volatile
 8016658:	f04f 0350 	mov.w	r3, #80	; 0x50
 801665c:	f383 8811 	msr	BASEPRI, r3
 8016660:	f3bf 8f6f 	isb	sy
 8016664:	f3bf 8f4f 	dsb	sy
 8016668:	61fb      	str	r3, [r7, #28]
}
 801666a:	bf00      	nop
 801666c:	e7fe      	b.n	801666c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801666e:	f002 faa9 	bl	8018bc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801667a:	429a      	cmp	r2, r3
 801667c:	d302      	bcc.n	8016684 <xQueueGenericSend+0xd4>
 801667e:	683b      	ldr	r3, [r7, #0]
 8016680:	2b02      	cmp	r3, #2
 8016682:	d129      	bne.n	80166d8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016684:	683a      	ldr	r2, [r7, #0]
 8016686:	68b9      	ldr	r1, [r7, #8]
 8016688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801668a:	f000 fc5e 	bl	8016f4a <prvCopyDataToQueue>
 801668e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016694:	2b00      	cmp	r3, #0
 8016696:	d010      	beq.n	80166ba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801669a:	3324      	adds	r3, #36	; 0x24
 801669c:	4618      	mov	r0, r3
 801669e:	f001 fa73 	bl	8017b88 <xTaskRemoveFromEventList>
 80166a2:	4603      	mov	r3, r0
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d013      	beq.n	80166d0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80166a8:	4b3f      	ldr	r3, [pc, #252]	; (80167a8 <xQueueGenericSend+0x1f8>)
 80166aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80166ae:	601a      	str	r2, [r3, #0]
 80166b0:	f3bf 8f4f 	dsb	sy
 80166b4:	f3bf 8f6f 	isb	sy
 80166b8:	e00a      	b.n	80166d0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80166ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d007      	beq.n	80166d0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80166c0:	4b39      	ldr	r3, [pc, #228]	; (80167a8 <xQueueGenericSend+0x1f8>)
 80166c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80166c6:	601a      	str	r2, [r3, #0]
 80166c8:	f3bf 8f4f 	dsb	sy
 80166cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80166d0:	f002 faa8 	bl	8018c24 <vPortExitCritical>
				return pdPASS;
 80166d4:	2301      	movs	r3, #1
 80166d6:	e063      	b.n	80167a0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d103      	bne.n	80166e6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80166de:	f002 faa1 	bl	8018c24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80166e2:	2300      	movs	r3, #0
 80166e4:	e05c      	b.n	80167a0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80166e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d106      	bne.n	80166fa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80166ec:	f107 0314 	add.w	r3, r7, #20
 80166f0:	4618      	mov	r0, r3
 80166f2:	f001 faad 	bl	8017c50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80166f6:	2301      	movs	r3, #1
 80166f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80166fa:	f002 fa93 	bl	8018c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80166fe:	f001 f819 	bl	8017734 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016702:	f002 fa5f 	bl	8018bc4 <vPortEnterCritical>
 8016706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016708:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801670c:	b25b      	sxtb	r3, r3
 801670e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016712:	d103      	bne.n	801671c <xQueueGenericSend+0x16c>
 8016714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016716:	2200      	movs	r2, #0
 8016718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801671c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801671e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016722:	b25b      	sxtb	r3, r3
 8016724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016728:	d103      	bne.n	8016732 <xQueueGenericSend+0x182>
 801672a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801672c:	2200      	movs	r2, #0
 801672e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016732:	f002 fa77 	bl	8018c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016736:	1d3a      	adds	r2, r7, #4
 8016738:	f107 0314 	add.w	r3, r7, #20
 801673c:	4611      	mov	r1, r2
 801673e:	4618      	mov	r0, r3
 8016740:	f001 fa9c 	bl	8017c7c <xTaskCheckForTimeOut>
 8016744:	4603      	mov	r3, r0
 8016746:	2b00      	cmp	r3, #0
 8016748:	d124      	bne.n	8016794 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801674a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801674c:	f000 fcf5 	bl	801713a <prvIsQueueFull>
 8016750:	4603      	mov	r3, r0
 8016752:	2b00      	cmp	r3, #0
 8016754:	d018      	beq.n	8016788 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016758:	3310      	adds	r3, #16
 801675a:	687a      	ldr	r2, [r7, #4]
 801675c:	4611      	mov	r1, r2
 801675e:	4618      	mov	r0, r3
 8016760:	f001 f9c2 	bl	8017ae8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016764:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016766:	f000 fc80 	bl	801706a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801676a:	f000 fff1 	bl	8017750 <xTaskResumeAll>
 801676e:	4603      	mov	r3, r0
 8016770:	2b00      	cmp	r3, #0
 8016772:	f47f af7c 	bne.w	801666e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8016776:	4b0c      	ldr	r3, [pc, #48]	; (80167a8 <xQueueGenericSend+0x1f8>)
 8016778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801677c:	601a      	str	r2, [r3, #0]
 801677e:	f3bf 8f4f 	dsb	sy
 8016782:	f3bf 8f6f 	isb	sy
 8016786:	e772      	b.n	801666e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8016788:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801678a:	f000 fc6e 	bl	801706a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801678e:	f000 ffdf 	bl	8017750 <xTaskResumeAll>
 8016792:	e76c      	b.n	801666e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8016794:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016796:	f000 fc68 	bl	801706a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801679a:	f000 ffd9 	bl	8017750 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801679e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80167a0:	4618      	mov	r0, r3
 80167a2:	3738      	adds	r7, #56	; 0x38
 80167a4:	46bd      	mov	sp, r7
 80167a6:	bd80      	pop	{r7, pc}
 80167a8:	e000ed04 	.word	0xe000ed04

080167ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80167ac:	b580      	push	{r7, lr}
 80167ae:	b090      	sub	sp, #64	; 0x40
 80167b0:	af00      	add	r7, sp, #0
 80167b2:	60f8      	str	r0, [r7, #12]
 80167b4:	60b9      	str	r1, [r7, #8]
 80167b6:	607a      	str	r2, [r7, #4]
 80167b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80167be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	d10a      	bne.n	80167da <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80167c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167c8:	f383 8811 	msr	BASEPRI, r3
 80167cc:	f3bf 8f6f 	isb	sy
 80167d0:	f3bf 8f4f 	dsb	sy
 80167d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80167d6:	bf00      	nop
 80167d8:	e7fe      	b.n	80167d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80167da:	68bb      	ldr	r3, [r7, #8]
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d103      	bne.n	80167e8 <xQueueGenericSendFromISR+0x3c>
 80167e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d101      	bne.n	80167ec <xQueueGenericSendFromISR+0x40>
 80167e8:	2301      	movs	r3, #1
 80167ea:	e000      	b.n	80167ee <xQueueGenericSendFromISR+0x42>
 80167ec:	2300      	movs	r3, #0
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d10a      	bne.n	8016808 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80167f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167f6:	f383 8811 	msr	BASEPRI, r3
 80167fa:	f3bf 8f6f 	isb	sy
 80167fe:	f3bf 8f4f 	dsb	sy
 8016802:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016804:	bf00      	nop
 8016806:	e7fe      	b.n	8016806 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016808:	683b      	ldr	r3, [r7, #0]
 801680a:	2b02      	cmp	r3, #2
 801680c:	d103      	bne.n	8016816 <xQueueGenericSendFromISR+0x6a>
 801680e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016812:	2b01      	cmp	r3, #1
 8016814:	d101      	bne.n	801681a <xQueueGenericSendFromISR+0x6e>
 8016816:	2301      	movs	r3, #1
 8016818:	e000      	b.n	801681c <xQueueGenericSendFromISR+0x70>
 801681a:	2300      	movs	r3, #0
 801681c:	2b00      	cmp	r3, #0
 801681e:	d10a      	bne.n	8016836 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8016820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016824:	f383 8811 	msr	BASEPRI, r3
 8016828:	f3bf 8f6f 	isb	sy
 801682c:	f3bf 8f4f 	dsb	sy
 8016830:	623b      	str	r3, [r7, #32]
}
 8016832:	bf00      	nop
 8016834:	e7fe      	b.n	8016834 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016836:	f002 faa7 	bl	8018d88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801683a:	f3ef 8211 	mrs	r2, BASEPRI
 801683e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016842:	f383 8811 	msr	BASEPRI, r3
 8016846:	f3bf 8f6f 	isb	sy
 801684a:	f3bf 8f4f 	dsb	sy
 801684e:	61fa      	str	r2, [r7, #28]
 8016850:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8016852:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016854:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801685a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801685c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801685e:	429a      	cmp	r2, r3
 8016860:	d302      	bcc.n	8016868 <xQueueGenericSendFromISR+0xbc>
 8016862:	683b      	ldr	r3, [r7, #0]
 8016864:	2b02      	cmp	r3, #2
 8016866:	d12f      	bne.n	80168c8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801686a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801686e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016876:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016878:	683a      	ldr	r2, [r7, #0]
 801687a:	68b9      	ldr	r1, [r7, #8]
 801687c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801687e:	f000 fb64 	bl	8016f4a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016882:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8016886:	f1b3 3fff 	cmp.w	r3, #4294967295
 801688a:	d112      	bne.n	80168b2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801688c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016890:	2b00      	cmp	r3, #0
 8016892:	d016      	beq.n	80168c2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016896:	3324      	adds	r3, #36	; 0x24
 8016898:	4618      	mov	r0, r3
 801689a:	f001 f975 	bl	8017b88 <xTaskRemoveFromEventList>
 801689e:	4603      	mov	r3, r0
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d00e      	beq.n	80168c2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d00b      	beq.n	80168c2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	2201      	movs	r2, #1
 80168ae:	601a      	str	r2, [r3, #0]
 80168b0:	e007      	b.n	80168c2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80168b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80168b6:	3301      	adds	r3, #1
 80168b8:	b2db      	uxtb	r3, r3
 80168ba:	b25a      	sxtb	r2, r3
 80168bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80168c2:	2301      	movs	r3, #1
 80168c4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80168c6:	e001      	b.n	80168cc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80168c8:	2300      	movs	r3, #0
 80168ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80168cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80168ce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80168d0:	697b      	ldr	r3, [r7, #20]
 80168d2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80168d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80168d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80168da:	4618      	mov	r0, r3
 80168dc:	3740      	adds	r7, #64	; 0x40
 80168de:	46bd      	mov	sp, r7
 80168e0:	bd80      	pop	{r7, pc}

080168e2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80168e2:	b580      	push	{r7, lr}
 80168e4:	b08e      	sub	sp, #56	; 0x38
 80168e6:	af00      	add	r7, sp, #0
 80168e8:	6078      	str	r0, [r7, #4]
 80168ea:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80168f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d10a      	bne.n	801690c <xQueueGiveFromISR+0x2a>
	__asm volatile
 80168f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168fa:	f383 8811 	msr	BASEPRI, r3
 80168fe:	f3bf 8f6f 	isb	sy
 8016902:	f3bf 8f4f 	dsb	sy
 8016906:	623b      	str	r3, [r7, #32]
}
 8016908:	bf00      	nop
 801690a:	e7fe      	b.n	801690a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801690c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801690e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016910:	2b00      	cmp	r3, #0
 8016912:	d00a      	beq.n	801692a <xQueueGiveFromISR+0x48>
	__asm volatile
 8016914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016918:	f383 8811 	msr	BASEPRI, r3
 801691c:	f3bf 8f6f 	isb	sy
 8016920:	f3bf 8f4f 	dsb	sy
 8016924:	61fb      	str	r3, [r7, #28]
}
 8016926:	bf00      	nop
 8016928:	e7fe      	b.n	8016928 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801692a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	2b00      	cmp	r3, #0
 8016930:	d103      	bne.n	801693a <xQueueGiveFromISR+0x58>
 8016932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016934:	689b      	ldr	r3, [r3, #8]
 8016936:	2b00      	cmp	r3, #0
 8016938:	d101      	bne.n	801693e <xQueueGiveFromISR+0x5c>
 801693a:	2301      	movs	r3, #1
 801693c:	e000      	b.n	8016940 <xQueueGiveFromISR+0x5e>
 801693e:	2300      	movs	r3, #0
 8016940:	2b00      	cmp	r3, #0
 8016942:	d10a      	bne.n	801695a <xQueueGiveFromISR+0x78>
	__asm volatile
 8016944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016948:	f383 8811 	msr	BASEPRI, r3
 801694c:	f3bf 8f6f 	isb	sy
 8016950:	f3bf 8f4f 	dsb	sy
 8016954:	61bb      	str	r3, [r7, #24]
}
 8016956:	bf00      	nop
 8016958:	e7fe      	b.n	8016958 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801695a:	f002 fa15 	bl	8018d88 <vPortValidateInterruptPriority>
	__asm volatile
 801695e:	f3ef 8211 	mrs	r2, BASEPRI
 8016962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016966:	f383 8811 	msr	BASEPRI, r3
 801696a:	f3bf 8f6f 	isb	sy
 801696e:	f3bf 8f4f 	dsb	sy
 8016972:	617a      	str	r2, [r7, #20]
 8016974:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8016976:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016978:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801697a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801697c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801697e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8016980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016984:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016986:	429a      	cmp	r2, r3
 8016988:	d22b      	bcs.n	80169e2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801698a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801698c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016996:	1c5a      	adds	r2, r3, #1
 8016998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801699a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801699c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80169a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80169a4:	d112      	bne.n	80169cc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80169a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d016      	beq.n	80169dc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80169ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169b0:	3324      	adds	r3, #36	; 0x24
 80169b2:	4618      	mov	r0, r3
 80169b4:	f001 f8e8 	bl	8017b88 <xTaskRemoveFromEventList>
 80169b8:	4603      	mov	r3, r0
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d00e      	beq.n	80169dc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80169be:	683b      	ldr	r3, [r7, #0]
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d00b      	beq.n	80169dc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80169c4:	683b      	ldr	r3, [r7, #0]
 80169c6:	2201      	movs	r2, #1
 80169c8:	601a      	str	r2, [r3, #0]
 80169ca:	e007      	b.n	80169dc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80169cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80169d0:	3301      	adds	r3, #1
 80169d2:	b2db      	uxtb	r3, r3
 80169d4:	b25a      	sxtb	r2, r3
 80169d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80169dc:	2301      	movs	r3, #1
 80169de:	637b      	str	r3, [r7, #52]	; 0x34
 80169e0:	e001      	b.n	80169e6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80169e2:	2300      	movs	r3, #0
 80169e4:	637b      	str	r3, [r7, #52]	; 0x34
 80169e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169e8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	f383 8811 	msr	BASEPRI, r3
}
 80169f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80169f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80169f4:	4618      	mov	r0, r3
 80169f6:	3738      	adds	r7, #56	; 0x38
 80169f8:	46bd      	mov	sp, r7
 80169fa:	bd80      	pop	{r7, pc}

080169fc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80169fc:	b580      	push	{r7, lr}
 80169fe:	b08c      	sub	sp, #48	; 0x30
 8016a00:	af00      	add	r7, sp, #0
 8016a02:	60f8      	str	r0, [r7, #12]
 8016a04:	60b9      	str	r1, [r7, #8]
 8016a06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8016a08:	2300      	movs	r3, #0
 8016a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016a0c:	68fb      	ldr	r3, [r7, #12]
 8016a0e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d10a      	bne.n	8016a2c <xQueueReceive+0x30>
	__asm volatile
 8016a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a1a:	f383 8811 	msr	BASEPRI, r3
 8016a1e:	f3bf 8f6f 	isb	sy
 8016a22:	f3bf 8f4f 	dsb	sy
 8016a26:	623b      	str	r3, [r7, #32]
}
 8016a28:	bf00      	nop
 8016a2a:	e7fe      	b.n	8016a2a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016a2c:	68bb      	ldr	r3, [r7, #8]
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d103      	bne.n	8016a3a <xQueueReceive+0x3e>
 8016a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d101      	bne.n	8016a3e <xQueueReceive+0x42>
 8016a3a:	2301      	movs	r3, #1
 8016a3c:	e000      	b.n	8016a40 <xQueueReceive+0x44>
 8016a3e:	2300      	movs	r3, #0
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d10a      	bne.n	8016a5a <xQueueReceive+0x5e>
	__asm volatile
 8016a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a48:	f383 8811 	msr	BASEPRI, r3
 8016a4c:	f3bf 8f6f 	isb	sy
 8016a50:	f3bf 8f4f 	dsb	sy
 8016a54:	61fb      	str	r3, [r7, #28]
}
 8016a56:	bf00      	nop
 8016a58:	e7fe      	b.n	8016a58 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016a5a:	f001 fa57 	bl	8017f0c <xTaskGetSchedulerState>
 8016a5e:	4603      	mov	r3, r0
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d102      	bne.n	8016a6a <xQueueReceive+0x6e>
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d101      	bne.n	8016a6e <xQueueReceive+0x72>
 8016a6a:	2301      	movs	r3, #1
 8016a6c:	e000      	b.n	8016a70 <xQueueReceive+0x74>
 8016a6e:	2300      	movs	r3, #0
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d10a      	bne.n	8016a8a <xQueueReceive+0x8e>
	__asm volatile
 8016a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a78:	f383 8811 	msr	BASEPRI, r3
 8016a7c:	f3bf 8f6f 	isb	sy
 8016a80:	f3bf 8f4f 	dsb	sy
 8016a84:	61bb      	str	r3, [r7, #24]
}
 8016a86:	bf00      	nop
 8016a88:	e7fe      	b.n	8016a88 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016a8a:	f002 f89b 	bl	8018bc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016a92:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d01f      	beq.n	8016ada <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016a9a:	68b9      	ldr	r1, [r7, #8]
 8016a9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016a9e:	f000 fabe 	bl	801701e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aa4:	1e5a      	subs	r2, r3, #1
 8016aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016aa8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016aac:	691b      	ldr	r3, [r3, #16]
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d00f      	beq.n	8016ad2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ab4:	3310      	adds	r3, #16
 8016ab6:	4618      	mov	r0, r3
 8016ab8:	f001 f866 	bl	8017b88 <xTaskRemoveFromEventList>
 8016abc:	4603      	mov	r3, r0
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d007      	beq.n	8016ad2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016ac2:	4b3d      	ldr	r3, [pc, #244]	; (8016bb8 <xQueueReceive+0x1bc>)
 8016ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016ac8:	601a      	str	r2, [r3, #0]
 8016aca:	f3bf 8f4f 	dsb	sy
 8016ace:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016ad2:	f002 f8a7 	bl	8018c24 <vPortExitCritical>
				return pdPASS;
 8016ad6:	2301      	movs	r3, #1
 8016ad8:	e069      	b.n	8016bae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d103      	bne.n	8016ae8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016ae0:	f002 f8a0 	bl	8018c24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016ae4:	2300      	movs	r3, #0
 8016ae6:	e062      	b.n	8016bae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d106      	bne.n	8016afc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016aee:	f107 0310 	add.w	r3, r7, #16
 8016af2:	4618      	mov	r0, r3
 8016af4:	f001 f8ac 	bl	8017c50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016af8:	2301      	movs	r3, #1
 8016afa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016afc:	f002 f892 	bl	8018c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016b00:	f000 fe18 	bl	8017734 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016b04:	f002 f85e 	bl	8018bc4 <vPortEnterCritical>
 8016b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016b0e:	b25b      	sxtb	r3, r3
 8016b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b14:	d103      	bne.n	8016b1e <xQueueReceive+0x122>
 8016b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b18:	2200      	movs	r2, #0
 8016b1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016b24:	b25b      	sxtb	r3, r3
 8016b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b2a:	d103      	bne.n	8016b34 <xQueueReceive+0x138>
 8016b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b2e:	2200      	movs	r2, #0
 8016b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016b34:	f002 f876 	bl	8018c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016b38:	1d3a      	adds	r2, r7, #4
 8016b3a:	f107 0310 	add.w	r3, r7, #16
 8016b3e:	4611      	mov	r1, r2
 8016b40:	4618      	mov	r0, r3
 8016b42:	f001 f89b 	bl	8017c7c <xTaskCheckForTimeOut>
 8016b46:	4603      	mov	r3, r0
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d123      	bne.n	8016b94 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016b4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016b4e:	f000 fade 	bl	801710e <prvIsQueueEmpty>
 8016b52:	4603      	mov	r3, r0
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d017      	beq.n	8016b88 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b5a:	3324      	adds	r3, #36	; 0x24
 8016b5c:	687a      	ldr	r2, [r7, #4]
 8016b5e:	4611      	mov	r1, r2
 8016b60:	4618      	mov	r0, r3
 8016b62:	f000 ffc1 	bl	8017ae8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016b66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016b68:	f000 fa7f 	bl	801706a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016b6c:	f000 fdf0 	bl	8017750 <xTaskResumeAll>
 8016b70:	4603      	mov	r3, r0
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d189      	bne.n	8016a8a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8016b76:	4b10      	ldr	r3, [pc, #64]	; (8016bb8 <xQueueReceive+0x1bc>)
 8016b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016b7c:	601a      	str	r2, [r3, #0]
 8016b7e:	f3bf 8f4f 	dsb	sy
 8016b82:	f3bf 8f6f 	isb	sy
 8016b86:	e780      	b.n	8016a8a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8016b88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016b8a:	f000 fa6e 	bl	801706a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016b8e:	f000 fddf 	bl	8017750 <xTaskResumeAll>
 8016b92:	e77a      	b.n	8016a8a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8016b94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016b96:	f000 fa68 	bl	801706a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016b9a:	f000 fdd9 	bl	8017750 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016b9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016ba0:	f000 fab5 	bl	801710e <prvIsQueueEmpty>
 8016ba4:	4603      	mov	r3, r0
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	f43f af6f 	beq.w	8016a8a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016bac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016bae:	4618      	mov	r0, r3
 8016bb0:	3730      	adds	r7, #48	; 0x30
 8016bb2:	46bd      	mov	sp, r7
 8016bb4:	bd80      	pop	{r7, pc}
 8016bb6:	bf00      	nop
 8016bb8:	e000ed04 	.word	0xe000ed04

08016bbc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8016bbc:	b580      	push	{r7, lr}
 8016bbe:	b08e      	sub	sp, #56	; 0x38
 8016bc0:	af00      	add	r7, sp, #0
 8016bc2:	6078      	str	r0, [r7, #4]
 8016bc4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8016bc6:	2300      	movs	r3, #0
 8016bc8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8016bce:	2300      	movs	r3, #0
 8016bd0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d10a      	bne.n	8016bee <xQueueSemaphoreTake+0x32>
	__asm volatile
 8016bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bdc:	f383 8811 	msr	BASEPRI, r3
 8016be0:	f3bf 8f6f 	isb	sy
 8016be4:	f3bf 8f4f 	dsb	sy
 8016be8:	623b      	str	r3, [r7, #32]
}
 8016bea:	bf00      	nop
 8016bec:	e7fe      	b.n	8016bec <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d00a      	beq.n	8016c0c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8016bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bfa:	f383 8811 	msr	BASEPRI, r3
 8016bfe:	f3bf 8f6f 	isb	sy
 8016c02:	f3bf 8f4f 	dsb	sy
 8016c06:	61fb      	str	r3, [r7, #28]
}
 8016c08:	bf00      	nop
 8016c0a:	e7fe      	b.n	8016c0a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016c0c:	f001 f97e 	bl	8017f0c <xTaskGetSchedulerState>
 8016c10:	4603      	mov	r3, r0
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d102      	bne.n	8016c1c <xQueueSemaphoreTake+0x60>
 8016c16:	683b      	ldr	r3, [r7, #0]
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d101      	bne.n	8016c20 <xQueueSemaphoreTake+0x64>
 8016c1c:	2301      	movs	r3, #1
 8016c1e:	e000      	b.n	8016c22 <xQueueSemaphoreTake+0x66>
 8016c20:	2300      	movs	r3, #0
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d10a      	bne.n	8016c3c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8016c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c2a:	f383 8811 	msr	BASEPRI, r3
 8016c2e:	f3bf 8f6f 	isb	sy
 8016c32:	f3bf 8f4f 	dsb	sy
 8016c36:	61bb      	str	r3, [r7, #24]
}
 8016c38:	bf00      	nop
 8016c3a:	e7fe      	b.n	8016c3a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016c3c:	f001 ffc2 	bl	8018bc4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8016c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c44:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8016c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d024      	beq.n	8016c96 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8016c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c4e:	1e5a      	subs	r2, r3, #1
 8016c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c52:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d104      	bne.n	8016c66 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8016c5c:	f001 facc 	bl	80181f8 <pvTaskIncrementMutexHeldCount>
 8016c60:	4602      	mov	r2, r0
 8016c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c64:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c68:	691b      	ldr	r3, [r3, #16]
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d00f      	beq.n	8016c8e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c70:	3310      	adds	r3, #16
 8016c72:	4618      	mov	r0, r3
 8016c74:	f000 ff88 	bl	8017b88 <xTaskRemoveFromEventList>
 8016c78:	4603      	mov	r3, r0
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d007      	beq.n	8016c8e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016c7e:	4b54      	ldr	r3, [pc, #336]	; (8016dd0 <xQueueSemaphoreTake+0x214>)
 8016c80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016c84:	601a      	str	r2, [r3, #0]
 8016c86:	f3bf 8f4f 	dsb	sy
 8016c8a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016c8e:	f001 ffc9 	bl	8018c24 <vPortExitCritical>
				return pdPASS;
 8016c92:	2301      	movs	r3, #1
 8016c94:	e097      	b.n	8016dc6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016c96:	683b      	ldr	r3, [r7, #0]
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d111      	bne.n	8016cc0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8016c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	d00a      	beq.n	8016cb8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8016ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ca6:	f383 8811 	msr	BASEPRI, r3
 8016caa:	f3bf 8f6f 	isb	sy
 8016cae:	f3bf 8f4f 	dsb	sy
 8016cb2:	617b      	str	r3, [r7, #20]
}
 8016cb4:	bf00      	nop
 8016cb6:	e7fe      	b.n	8016cb6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8016cb8:	f001 ffb4 	bl	8018c24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	e082      	b.n	8016dc6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d106      	bne.n	8016cd4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016cc6:	f107 030c 	add.w	r3, r7, #12
 8016cca:	4618      	mov	r0, r3
 8016ccc:	f000 ffc0 	bl	8017c50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016cd0:	2301      	movs	r3, #1
 8016cd2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016cd4:	f001 ffa6 	bl	8018c24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016cd8:	f000 fd2c 	bl	8017734 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016cdc:	f001 ff72 	bl	8018bc4 <vPortEnterCritical>
 8016ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ce2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016ce6:	b25b      	sxtb	r3, r3
 8016ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016cec:	d103      	bne.n	8016cf6 <xQueueSemaphoreTake+0x13a>
 8016cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cf0:	2200      	movs	r2, #0
 8016cf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016cfc:	b25b      	sxtb	r3, r3
 8016cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d02:	d103      	bne.n	8016d0c <xQueueSemaphoreTake+0x150>
 8016d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d06:	2200      	movs	r2, #0
 8016d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016d0c:	f001 ff8a 	bl	8018c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016d10:	463a      	mov	r2, r7
 8016d12:	f107 030c 	add.w	r3, r7, #12
 8016d16:	4611      	mov	r1, r2
 8016d18:	4618      	mov	r0, r3
 8016d1a:	f000 ffaf 	bl	8017c7c <xTaskCheckForTimeOut>
 8016d1e:	4603      	mov	r3, r0
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d132      	bne.n	8016d8a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016d24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016d26:	f000 f9f2 	bl	801710e <prvIsQueueEmpty>
 8016d2a:	4603      	mov	r3, r0
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d026      	beq.n	8016d7e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d109      	bne.n	8016d4c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8016d38:	f001 ff44 	bl	8018bc4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d3e:	689b      	ldr	r3, [r3, #8]
 8016d40:	4618      	mov	r0, r3
 8016d42:	f001 f901 	bl	8017f48 <xTaskPriorityInherit>
 8016d46:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8016d48:	f001 ff6c 	bl	8018c24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d4e:	3324      	adds	r3, #36	; 0x24
 8016d50:	683a      	ldr	r2, [r7, #0]
 8016d52:	4611      	mov	r1, r2
 8016d54:	4618      	mov	r0, r3
 8016d56:	f000 fec7 	bl	8017ae8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016d5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016d5c:	f000 f985 	bl	801706a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016d60:	f000 fcf6 	bl	8017750 <xTaskResumeAll>
 8016d64:	4603      	mov	r3, r0
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	f47f af68 	bne.w	8016c3c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8016d6c:	4b18      	ldr	r3, [pc, #96]	; (8016dd0 <xQueueSemaphoreTake+0x214>)
 8016d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d72:	601a      	str	r2, [r3, #0]
 8016d74:	f3bf 8f4f 	dsb	sy
 8016d78:	f3bf 8f6f 	isb	sy
 8016d7c:	e75e      	b.n	8016c3c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8016d7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016d80:	f000 f973 	bl	801706a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016d84:	f000 fce4 	bl	8017750 <xTaskResumeAll>
 8016d88:	e758      	b.n	8016c3c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8016d8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016d8c:	f000 f96d 	bl	801706a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016d90:	f000 fcde 	bl	8017750 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016d94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016d96:	f000 f9ba 	bl	801710e <prvIsQueueEmpty>
 8016d9a:	4603      	mov	r3, r0
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	f43f af4d 	beq.w	8016c3c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8016da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	d00d      	beq.n	8016dc4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8016da8:	f001 ff0c 	bl	8018bc4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8016dac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016dae:	f000 f8b4 	bl	8016f1a <prvGetDisinheritPriorityAfterTimeout>
 8016db2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8016db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016db6:	689b      	ldr	r3, [r3, #8]
 8016db8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016dba:	4618      	mov	r0, r3
 8016dbc:	f001 f99a 	bl	80180f4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8016dc0:	f001 ff30 	bl	8018c24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016dc4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016dc6:	4618      	mov	r0, r3
 8016dc8:	3738      	adds	r7, #56	; 0x38
 8016dca:	46bd      	mov	sp, r7
 8016dcc:	bd80      	pop	{r7, pc}
 8016dce:	bf00      	nop
 8016dd0:	e000ed04 	.word	0xe000ed04

08016dd4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016dd4:	b580      	push	{r7, lr}
 8016dd6:	b08e      	sub	sp, #56	; 0x38
 8016dd8:	af00      	add	r7, sp, #0
 8016dda:	60f8      	str	r0, [r7, #12]
 8016ddc:	60b9      	str	r1, [r7, #8]
 8016dde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016de0:	68fb      	ldr	r3, [r7, #12]
 8016de2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	d10a      	bne.n	8016e00 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8016dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dee:	f383 8811 	msr	BASEPRI, r3
 8016df2:	f3bf 8f6f 	isb	sy
 8016df6:	f3bf 8f4f 	dsb	sy
 8016dfa:	623b      	str	r3, [r7, #32]
}
 8016dfc:	bf00      	nop
 8016dfe:	e7fe      	b.n	8016dfe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016e00:	68bb      	ldr	r3, [r7, #8]
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d103      	bne.n	8016e0e <xQueueReceiveFromISR+0x3a>
 8016e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d101      	bne.n	8016e12 <xQueueReceiveFromISR+0x3e>
 8016e0e:	2301      	movs	r3, #1
 8016e10:	e000      	b.n	8016e14 <xQueueReceiveFromISR+0x40>
 8016e12:	2300      	movs	r3, #0
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d10a      	bne.n	8016e2e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8016e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e1c:	f383 8811 	msr	BASEPRI, r3
 8016e20:	f3bf 8f6f 	isb	sy
 8016e24:	f3bf 8f4f 	dsb	sy
 8016e28:	61fb      	str	r3, [r7, #28]
}
 8016e2a:	bf00      	nop
 8016e2c:	e7fe      	b.n	8016e2c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016e2e:	f001 ffab 	bl	8018d88 <vPortValidateInterruptPriority>
	__asm volatile
 8016e32:	f3ef 8211 	mrs	r2, BASEPRI
 8016e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e3a:	f383 8811 	msr	BASEPRI, r3
 8016e3e:	f3bf 8f6f 	isb	sy
 8016e42:	f3bf 8f4f 	dsb	sy
 8016e46:	61ba      	str	r2, [r7, #24]
 8016e48:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8016e4a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e52:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d02f      	beq.n	8016eba <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8016e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016e60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016e64:	68b9      	ldr	r1, [r7, #8]
 8016e66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016e68:	f000 f8d9 	bl	801701e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e6e:	1e5a      	subs	r2, r3, #1
 8016e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e72:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8016e74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e7c:	d112      	bne.n	8016ea4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e80:	691b      	ldr	r3, [r3, #16]
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	d016      	beq.n	8016eb4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e88:	3310      	adds	r3, #16
 8016e8a:	4618      	mov	r0, r3
 8016e8c:	f000 fe7c 	bl	8017b88 <xTaskRemoveFromEventList>
 8016e90:	4603      	mov	r3, r0
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d00e      	beq.n	8016eb4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d00b      	beq.n	8016eb4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	2201      	movs	r2, #1
 8016ea0:	601a      	str	r2, [r3, #0]
 8016ea2:	e007      	b.n	8016eb4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8016ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ea8:	3301      	adds	r3, #1
 8016eaa:	b2db      	uxtb	r3, r3
 8016eac:	b25a      	sxtb	r2, r3
 8016eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8016eb4:	2301      	movs	r3, #1
 8016eb6:	637b      	str	r3, [r7, #52]	; 0x34
 8016eb8:	e001      	b.n	8016ebe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8016eba:	2300      	movs	r3, #0
 8016ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8016ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ec0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8016ec2:	693b      	ldr	r3, [r7, #16]
 8016ec4:	f383 8811 	msr	BASEPRI, r3
}
 8016ec8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016ecc:	4618      	mov	r0, r3
 8016ece:	3738      	adds	r7, #56	; 0x38
 8016ed0:	46bd      	mov	sp, r7
 8016ed2:	bd80      	pop	{r7, pc}

08016ed4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8016ed4:	b580      	push	{r7, lr}
 8016ed6:	b084      	sub	sp, #16
 8016ed8:	af00      	add	r7, sp, #0
 8016eda:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d10a      	bne.n	8016efc <vQueueDelete+0x28>
	__asm volatile
 8016ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016eea:	f383 8811 	msr	BASEPRI, r3
 8016eee:	f3bf 8f6f 	isb	sy
 8016ef2:	f3bf 8f4f 	dsb	sy
 8016ef6:	60bb      	str	r3, [r7, #8]
}
 8016ef8:	bf00      	nop
 8016efa:	e7fe      	b.n	8016efa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8016efc:	68f8      	ldr	r0, [r7, #12]
 8016efe:	f000 f95f 	bl	80171c0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8016f02:	68fb      	ldr	r3, [r7, #12]
 8016f04:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d102      	bne.n	8016f12 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8016f0c:	68f8      	ldr	r0, [r7, #12]
 8016f0e:	f002 f847 	bl	8018fa0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8016f12:	bf00      	nop
 8016f14:	3710      	adds	r7, #16
 8016f16:	46bd      	mov	sp, r7
 8016f18:	bd80      	pop	{r7, pc}

08016f1a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8016f1a:	b480      	push	{r7}
 8016f1c:	b085      	sub	sp, #20
 8016f1e:	af00      	add	r7, sp, #0
 8016f20:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d006      	beq.n	8016f38 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8016f34:	60fb      	str	r3, [r7, #12]
 8016f36:	e001      	b.n	8016f3c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8016f38:	2300      	movs	r3, #0
 8016f3a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8016f3c:	68fb      	ldr	r3, [r7, #12]
	}
 8016f3e:	4618      	mov	r0, r3
 8016f40:	3714      	adds	r7, #20
 8016f42:	46bd      	mov	sp, r7
 8016f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f48:	4770      	bx	lr

08016f4a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8016f4a:	b580      	push	{r7, lr}
 8016f4c:	b086      	sub	sp, #24
 8016f4e:	af00      	add	r7, sp, #0
 8016f50:	60f8      	str	r0, [r7, #12]
 8016f52:	60b9      	str	r1, [r7, #8]
 8016f54:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8016f56:	2300      	movs	r3, #0
 8016f58:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016f5a:	68fb      	ldr	r3, [r7, #12]
 8016f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f5e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8016f60:	68fb      	ldr	r3, [r7, #12]
 8016f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d10d      	bne.n	8016f84 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016f68:	68fb      	ldr	r3, [r7, #12]
 8016f6a:	681b      	ldr	r3, [r3, #0]
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d14d      	bne.n	801700c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016f70:	68fb      	ldr	r3, [r7, #12]
 8016f72:	689b      	ldr	r3, [r3, #8]
 8016f74:	4618      	mov	r0, r3
 8016f76:	f001 f84f 	bl	8018018 <xTaskPriorityDisinherit>
 8016f7a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8016f7c:	68fb      	ldr	r3, [r7, #12]
 8016f7e:	2200      	movs	r2, #0
 8016f80:	609a      	str	r2, [r3, #8]
 8016f82:	e043      	b.n	801700c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d119      	bne.n	8016fbe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	6858      	ldr	r0, [r3, #4]
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f92:	461a      	mov	r2, r3
 8016f94:	68b9      	ldr	r1, [r7, #8]
 8016f96:	f003 f8bd 	bl	801a114 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016f9a:	68fb      	ldr	r3, [r7, #12]
 8016f9c:	685a      	ldr	r2, [r3, #4]
 8016f9e:	68fb      	ldr	r3, [r7, #12]
 8016fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016fa2:	441a      	add	r2, r3
 8016fa4:	68fb      	ldr	r3, [r7, #12]
 8016fa6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016fa8:	68fb      	ldr	r3, [r7, #12]
 8016faa:	685a      	ldr	r2, [r3, #4]
 8016fac:	68fb      	ldr	r3, [r7, #12]
 8016fae:	689b      	ldr	r3, [r3, #8]
 8016fb0:	429a      	cmp	r2, r3
 8016fb2:	d32b      	bcc.n	801700c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8016fb4:	68fb      	ldr	r3, [r7, #12]
 8016fb6:	681a      	ldr	r2, [r3, #0]
 8016fb8:	68fb      	ldr	r3, [r7, #12]
 8016fba:	605a      	str	r2, [r3, #4]
 8016fbc:	e026      	b.n	801700c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8016fbe:	68fb      	ldr	r3, [r7, #12]
 8016fc0:	68d8      	ldr	r0, [r3, #12]
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016fc6:	461a      	mov	r2, r3
 8016fc8:	68b9      	ldr	r1, [r7, #8]
 8016fca:	f003 f8a3 	bl	801a114 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8016fce:	68fb      	ldr	r3, [r7, #12]
 8016fd0:	68da      	ldr	r2, [r3, #12]
 8016fd2:	68fb      	ldr	r3, [r7, #12]
 8016fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016fd6:	425b      	negs	r3, r3
 8016fd8:	441a      	add	r2, r3
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016fde:	68fb      	ldr	r3, [r7, #12]
 8016fe0:	68da      	ldr	r2, [r3, #12]
 8016fe2:	68fb      	ldr	r3, [r7, #12]
 8016fe4:	681b      	ldr	r3, [r3, #0]
 8016fe6:	429a      	cmp	r2, r3
 8016fe8:	d207      	bcs.n	8016ffa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	689a      	ldr	r2, [r3, #8]
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ff2:	425b      	negs	r3, r3
 8016ff4:	441a      	add	r2, r3
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	2b02      	cmp	r3, #2
 8016ffe:	d105      	bne.n	801700c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017000:	693b      	ldr	r3, [r7, #16]
 8017002:	2b00      	cmp	r3, #0
 8017004:	d002      	beq.n	801700c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017006:	693b      	ldr	r3, [r7, #16]
 8017008:	3b01      	subs	r3, #1
 801700a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801700c:	693b      	ldr	r3, [r7, #16]
 801700e:	1c5a      	adds	r2, r3, #1
 8017010:	68fb      	ldr	r3, [r7, #12]
 8017012:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8017014:	697b      	ldr	r3, [r7, #20]
}
 8017016:	4618      	mov	r0, r3
 8017018:	3718      	adds	r7, #24
 801701a:	46bd      	mov	sp, r7
 801701c:	bd80      	pop	{r7, pc}

0801701e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801701e:	b580      	push	{r7, lr}
 8017020:	b082      	sub	sp, #8
 8017022:	af00      	add	r7, sp, #0
 8017024:	6078      	str	r0, [r7, #4]
 8017026:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801702c:	2b00      	cmp	r3, #0
 801702e:	d018      	beq.n	8017062 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	68da      	ldr	r2, [r3, #12]
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017038:	441a      	add	r2, r3
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	68da      	ldr	r2, [r3, #12]
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	689b      	ldr	r3, [r3, #8]
 8017046:	429a      	cmp	r2, r3
 8017048:	d303      	bcc.n	8017052 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	681a      	ldr	r2, [r3, #0]
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	68d9      	ldr	r1, [r3, #12]
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801705a:	461a      	mov	r2, r3
 801705c:	6838      	ldr	r0, [r7, #0]
 801705e:	f003 f859 	bl	801a114 <memcpy>
	}
}
 8017062:	bf00      	nop
 8017064:	3708      	adds	r7, #8
 8017066:	46bd      	mov	sp, r7
 8017068:	bd80      	pop	{r7, pc}

0801706a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801706a:	b580      	push	{r7, lr}
 801706c:	b084      	sub	sp, #16
 801706e:	af00      	add	r7, sp, #0
 8017070:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017072:	f001 fda7 	bl	8018bc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801707c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801707e:	e011      	b.n	80170a4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017084:	2b00      	cmp	r3, #0
 8017086:	d012      	beq.n	80170ae <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	3324      	adds	r3, #36	; 0x24
 801708c:	4618      	mov	r0, r3
 801708e:	f000 fd7b 	bl	8017b88 <xTaskRemoveFromEventList>
 8017092:	4603      	mov	r3, r0
 8017094:	2b00      	cmp	r3, #0
 8017096:	d001      	beq.n	801709c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017098:	f000 fe52 	bl	8017d40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801709c:	7bfb      	ldrb	r3, [r7, #15]
 801709e:	3b01      	subs	r3, #1
 80170a0:	b2db      	uxtb	r3, r3
 80170a2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80170a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	dce9      	bgt.n	8017080 <prvUnlockQueue+0x16>
 80170ac:	e000      	b.n	80170b0 <prvUnlockQueue+0x46>
					break;
 80170ae:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	22ff      	movs	r2, #255	; 0xff
 80170b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80170b8:	f001 fdb4 	bl	8018c24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80170bc:	f001 fd82 	bl	8018bc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80170c6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80170c8:	e011      	b.n	80170ee <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	691b      	ldr	r3, [r3, #16]
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	d012      	beq.n	80170f8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	3310      	adds	r3, #16
 80170d6:	4618      	mov	r0, r3
 80170d8:	f000 fd56 	bl	8017b88 <xTaskRemoveFromEventList>
 80170dc:	4603      	mov	r3, r0
 80170de:	2b00      	cmp	r3, #0
 80170e0:	d001      	beq.n	80170e6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80170e2:	f000 fe2d 	bl	8017d40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80170e6:	7bbb      	ldrb	r3, [r7, #14]
 80170e8:	3b01      	subs	r3, #1
 80170ea:	b2db      	uxtb	r3, r3
 80170ec:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80170ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	dce9      	bgt.n	80170ca <prvUnlockQueue+0x60>
 80170f6:	e000      	b.n	80170fa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80170f8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	22ff      	movs	r2, #255	; 0xff
 80170fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8017102:	f001 fd8f 	bl	8018c24 <vPortExitCritical>
}
 8017106:	bf00      	nop
 8017108:	3710      	adds	r7, #16
 801710a:	46bd      	mov	sp, r7
 801710c:	bd80      	pop	{r7, pc}

0801710e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801710e:	b580      	push	{r7, lr}
 8017110:	b084      	sub	sp, #16
 8017112:	af00      	add	r7, sp, #0
 8017114:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017116:	f001 fd55 	bl	8018bc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801711e:	2b00      	cmp	r3, #0
 8017120:	d102      	bne.n	8017128 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017122:	2301      	movs	r3, #1
 8017124:	60fb      	str	r3, [r7, #12]
 8017126:	e001      	b.n	801712c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017128:	2300      	movs	r3, #0
 801712a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801712c:	f001 fd7a 	bl	8018c24 <vPortExitCritical>

	return xReturn;
 8017130:	68fb      	ldr	r3, [r7, #12]
}
 8017132:	4618      	mov	r0, r3
 8017134:	3710      	adds	r7, #16
 8017136:	46bd      	mov	sp, r7
 8017138:	bd80      	pop	{r7, pc}

0801713a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801713a:	b580      	push	{r7, lr}
 801713c:	b084      	sub	sp, #16
 801713e:	af00      	add	r7, sp, #0
 8017140:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017142:	f001 fd3f 	bl	8018bc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801714e:	429a      	cmp	r2, r3
 8017150:	d102      	bne.n	8017158 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017152:	2301      	movs	r3, #1
 8017154:	60fb      	str	r3, [r7, #12]
 8017156:	e001      	b.n	801715c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017158:	2300      	movs	r3, #0
 801715a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801715c:	f001 fd62 	bl	8018c24 <vPortExitCritical>

	return xReturn;
 8017160:	68fb      	ldr	r3, [r7, #12]
}
 8017162:	4618      	mov	r0, r3
 8017164:	3710      	adds	r7, #16
 8017166:	46bd      	mov	sp, r7
 8017168:	bd80      	pop	{r7, pc}
	...

0801716c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801716c:	b480      	push	{r7}
 801716e:	b085      	sub	sp, #20
 8017170:	af00      	add	r7, sp, #0
 8017172:	6078      	str	r0, [r7, #4]
 8017174:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017176:	2300      	movs	r3, #0
 8017178:	60fb      	str	r3, [r7, #12]
 801717a:	e014      	b.n	80171a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801717c:	4a0f      	ldr	r2, [pc, #60]	; (80171bc <vQueueAddToRegistry+0x50>)
 801717e:	68fb      	ldr	r3, [r7, #12]
 8017180:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017184:	2b00      	cmp	r3, #0
 8017186:	d10b      	bne.n	80171a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8017188:	490c      	ldr	r1, [pc, #48]	; (80171bc <vQueueAddToRegistry+0x50>)
 801718a:	68fb      	ldr	r3, [r7, #12]
 801718c:	683a      	ldr	r2, [r7, #0]
 801718e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017192:	4a0a      	ldr	r2, [pc, #40]	; (80171bc <vQueueAddToRegistry+0x50>)
 8017194:	68fb      	ldr	r3, [r7, #12]
 8017196:	00db      	lsls	r3, r3, #3
 8017198:	4413      	add	r3, r2
 801719a:	687a      	ldr	r2, [r7, #4]
 801719c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801719e:	e006      	b.n	80171ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	3301      	adds	r3, #1
 80171a4:	60fb      	str	r3, [r7, #12]
 80171a6:	68fb      	ldr	r3, [r7, #12]
 80171a8:	2b07      	cmp	r3, #7
 80171aa:	d9e7      	bls.n	801717c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80171ac:	bf00      	nop
 80171ae:	bf00      	nop
 80171b0:	3714      	adds	r7, #20
 80171b2:	46bd      	mov	sp, r7
 80171b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171b8:	4770      	bx	lr
 80171ba:	bf00      	nop
 80171bc:	20007434 	.word	0x20007434

080171c0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80171c0:	b480      	push	{r7}
 80171c2:	b085      	sub	sp, #20
 80171c4:	af00      	add	r7, sp, #0
 80171c6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80171c8:	2300      	movs	r3, #0
 80171ca:	60fb      	str	r3, [r7, #12]
 80171cc:	e016      	b.n	80171fc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80171ce:	4a10      	ldr	r2, [pc, #64]	; (8017210 <vQueueUnregisterQueue+0x50>)
 80171d0:	68fb      	ldr	r3, [r7, #12]
 80171d2:	00db      	lsls	r3, r3, #3
 80171d4:	4413      	add	r3, r2
 80171d6:	685b      	ldr	r3, [r3, #4]
 80171d8:	687a      	ldr	r2, [r7, #4]
 80171da:	429a      	cmp	r2, r3
 80171dc:	d10b      	bne.n	80171f6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80171de:	4a0c      	ldr	r2, [pc, #48]	; (8017210 <vQueueUnregisterQueue+0x50>)
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	2100      	movs	r1, #0
 80171e4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80171e8:	4a09      	ldr	r2, [pc, #36]	; (8017210 <vQueueUnregisterQueue+0x50>)
 80171ea:	68fb      	ldr	r3, [r7, #12]
 80171ec:	00db      	lsls	r3, r3, #3
 80171ee:	4413      	add	r3, r2
 80171f0:	2200      	movs	r2, #0
 80171f2:	605a      	str	r2, [r3, #4]
				break;
 80171f4:	e006      	b.n	8017204 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	3301      	adds	r3, #1
 80171fa:	60fb      	str	r3, [r7, #12]
 80171fc:	68fb      	ldr	r3, [r7, #12]
 80171fe:	2b07      	cmp	r3, #7
 8017200:	d9e5      	bls.n	80171ce <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8017202:	bf00      	nop
 8017204:	bf00      	nop
 8017206:	3714      	adds	r7, #20
 8017208:	46bd      	mov	sp, r7
 801720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801720e:	4770      	bx	lr
 8017210:	20007434 	.word	0x20007434

08017214 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017214:	b580      	push	{r7, lr}
 8017216:	b086      	sub	sp, #24
 8017218:	af00      	add	r7, sp, #0
 801721a:	60f8      	str	r0, [r7, #12]
 801721c:	60b9      	str	r1, [r7, #8]
 801721e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8017220:	68fb      	ldr	r3, [r7, #12]
 8017222:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8017224:	f001 fcce 	bl	8018bc4 <vPortEnterCritical>
 8017228:	697b      	ldr	r3, [r7, #20]
 801722a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801722e:	b25b      	sxtb	r3, r3
 8017230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017234:	d103      	bne.n	801723e <vQueueWaitForMessageRestricted+0x2a>
 8017236:	697b      	ldr	r3, [r7, #20]
 8017238:	2200      	movs	r2, #0
 801723a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801723e:	697b      	ldr	r3, [r7, #20]
 8017240:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017244:	b25b      	sxtb	r3, r3
 8017246:	f1b3 3fff 	cmp.w	r3, #4294967295
 801724a:	d103      	bne.n	8017254 <vQueueWaitForMessageRestricted+0x40>
 801724c:	697b      	ldr	r3, [r7, #20]
 801724e:	2200      	movs	r2, #0
 8017250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017254:	f001 fce6 	bl	8018c24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8017258:	697b      	ldr	r3, [r7, #20]
 801725a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801725c:	2b00      	cmp	r3, #0
 801725e:	d106      	bne.n	801726e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8017260:	697b      	ldr	r3, [r7, #20]
 8017262:	3324      	adds	r3, #36	; 0x24
 8017264:	687a      	ldr	r2, [r7, #4]
 8017266:	68b9      	ldr	r1, [r7, #8]
 8017268:	4618      	mov	r0, r3
 801726a:	f000 fc61 	bl	8017b30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801726e:	6978      	ldr	r0, [r7, #20]
 8017270:	f7ff fefb 	bl	801706a <prvUnlockQueue>
	}
 8017274:	bf00      	nop
 8017276:	3718      	adds	r7, #24
 8017278:	46bd      	mov	sp, r7
 801727a:	bd80      	pop	{r7, pc}

0801727c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801727c:	b580      	push	{r7, lr}
 801727e:	b08e      	sub	sp, #56	; 0x38
 8017280:	af04      	add	r7, sp, #16
 8017282:	60f8      	str	r0, [r7, #12]
 8017284:	60b9      	str	r1, [r7, #8]
 8017286:	607a      	str	r2, [r7, #4]
 8017288:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801728a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801728c:	2b00      	cmp	r3, #0
 801728e:	d10a      	bne.n	80172a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8017290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017294:	f383 8811 	msr	BASEPRI, r3
 8017298:	f3bf 8f6f 	isb	sy
 801729c:	f3bf 8f4f 	dsb	sy
 80172a0:	623b      	str	r3, [r7, #32]
}
 80172a2:	bf00      	nop
 80172a4:	e7fe      	b.n	80172a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80172a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d10a      	bne.n	80172c2 <xTaskCreateStatic+0x46>
	__asm volatile
 80172ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172b0:	f383 8811 	msr	BASEPRI, r3
 80172b4:	f3bf 8f6f 	isb	sy
 80172b8:	f3bf 8f4f 	dsb	sy
 80172bc:	61fb      	str	r3, [r7, #28]
}
 80172be:	bf00      	nop
 80172c0:	e7fe      	b.n	80172c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80172c2:	23bc      	movs	r3, #188	; 0xbc
 80172c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80172c6:	693b      	ldr	r3, [r7, #16]
 80172c8:	2bbc      	cmp	r3, #188	; 0xbc
 80172ca:	d00a      	beq.n	80172e2 <xTaskCreateStatic+0x66>
	__asm volatile
 80172cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172d0:	f383 8811 	msr	BASEPRI, r3
 80172d4:	f3bf 8f6f 	isb	sy
 80172d8:	f3bf 8f4f 	dsb	sy
 80172dc:	61bb      	str	r3, [r7, #24]
}
 80172de:	bf00      	nop
 80172e0:	e7fe      	b.n	80172e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80172e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80172e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d01e      	beq.n	8017328 <xTaskCreateStatic+0xac>
 80172ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	d01b      	beq.n	8017328 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80172f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80172f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80172f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80172fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172fc:	2202      	movs	r2, #2
 80172fe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017302:	2300      	movs	r3, #0
 8017304:	9303      	str	r3, [sp, #12]
 8017306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017308:	9302      	str	r3, [sp, #8]
 801730a:	f107 0314 	add.w	r3, r7, #20
 801730e:	9301      	str	r3, [sp, #4]
 8017310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017312:	9300      	str	r3, [sp, #0]
 8017314:	683b      	ldr	r3, [r7, #0]
 8017316:	687a      	ldr	r2, [r7, #4]
 8017318:	68b9      	ldr	r1, [r7, #8]
 801731a:	68f8      	ldr	r0, [r7, #12]
 801731c:	f000 f850 	bl	80173c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017320:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017322:	f000 f8f3 	bl	801750c <prvAddNewTaskToReadyList>
 8017326:	e001      	b.n	801732c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8017328:	2300      	movs	r3, #0
 801732a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801732c:	697b      	ldr	r3, [r7, #20]
	}
 801732e:	4618      	mov	r0, r3
 8017330:	3728      	adds	r7, #40	; 0x28
 8017332:	46bd      	mov	sp, r7
 8017334:	bd80      	pop	{r7, pc}

08017336 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017336:	b580      	push	{r7, lr}
 8017338:	b08c      	sub	sp, #48	; 0x30
 801733a:	af04      	add	r7, sp, #16
 801733c:	60f8      	str	r0, [r7, #12]
 801733e:	60b9      	str	r1, [r7, #8]
 8017340:	603b      	str	r3, [r7, #0]
 8017342:	4613      	mov	r3, r2
 8017344:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017346:	88fb      	ldrh	r3, [r7, #6]
 8017348:	009b      	lsls	r3, r3, #2
 801734a:	4618      	mov	r0, r3
 801734c:	f001 fd5c 	bl	8018e08 <pvPortMalloc>
 8017350:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017352:	697b      	ldr	r3, [r7, #20]
 8017354:	2b00      	cmp	r3, #0
 8017356:	d00e      	beq.n	8017376 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017358:	20bc      	movs	r0, #188	; 0xbc
 801735a:	f001 fd55 	bl	8018e08 <pvPortMalloc>
 801735e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017360:	69fb      	ldr	r3, [r7, #28]
 8017362:	2b00      	cmp	r3, #0
 8017364:	d003      	beq.n	801736e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017366:	69fb      	ldr	r3, [r7, #28]
 8017368:	697a      	ldr	r2, [r7, #20]
 801736a:	631a      	str	r2, [r3, #48]	; 0x30
 801736c:	e005      	b.n	801737a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801736e:	6978      	ldr	r0, [r7, #20]
 8017370:	f001 fe16 	bl	8018fa0 <vPortFree>
 8017374:	e001      	b.n	801737a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017376:	2300      	movs	r3, #0
 8017378:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801737a:	69fb      	ldr	r3, [r7, #28]
 801737c:	2b00      	cmp	r3, #0
 801737e:	d017      	beq.n	80173b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017380:	69fb      	ldr	r3, [r7, #28]
 8017382:	2200      	movs	r2, #0
 8017384:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017388:	88fa      	ldrh	r2, [r7, #6]
 801738a:	2300      	movs	r3, #0
 801738c:	9303      	str	r3, [sp, #12]
 801738e:	69fb      	ldr	r3, [r7, #28]
 8017390:	9302      	str	r3, [sp, #8]
 8017392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017394:	9301      	str	r3, [sp, #4]
 8017396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017398:	9300      	str	r3, [sp, #0]
 801739a:	683b      	ldr	r3, [r7, #0]
 801739c:	68b9      	ldr	r1, [r7, #8]
 801739e:	68f8      	ldr	r0, [r7, #12]
 80173a0:	f000 f80e 	bl	80173c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80173a4:	69f8      	ldr	r0, [r7, #28]
 80173a6:	f000 f8b1 	bl	801750c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80173aa:	2301      	movs	r3, #1
 80173ac:	61bb      	str	r3, [r7, #24]
 80173ae:	e002      	b.n	80173b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80173b0:	f04f 33ff 	mov.w	r3, #4294967295
 80173b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80173b6:	69bb      	ldr	r3, [r7, #24]
	}
 80173b8:	4618      	mov	r0, r3
 80173ba:	3720      	adds	r7, #32
 80173bc:	46bd      	mov	sp, r7
 80173be:	bd80      	pop	{r7, pc}

080173c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80173c0:	b580      	push	{r7, lr}
 80173c2:	b088      	sub	sp, #32
 80173c4:	af00      	add	r7, sp, #0
 80173c6:	60f8      	str	r0, [r7, #12]
 80173c8:	60b9      	str	r1, [r7, #8]
 80173ca:	607a      	str	r2, [r7, #4]
 80173cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80173ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	009b      	lsls	r3, r3, #2
 80173d6:	461a      	mov	r2, r3
 80173d8:	21a5      	movs	r1, #165	; 0xa5
 80173da:	f002 fec3 	bl	801a164 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80173de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80173e8:	3b01      	subs	r3, #1
 80173ea:	009b      	lsls	r3, r3, #2
 80173ec:	4413      	add	r3, r2
 80173ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80173f0:	69bb      	ldr	r3, [r7, #24]
 80173f2:	f023 0307 	bic.w	r3, r3, #7
 80173f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80173f8:	69bb      	ldr	r3, [r7, #24]
 80173fa:	f003 0307 	and.w	r3, r3, #7
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d00a      	beq.n	8017418 <prvInitialiseNewTask+0x58>
	__asm volatile
 8017402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017406:	f383 8811 	msr	BASEPRI, r3
 801740a:	f3bf 8f6f 	isb	sy
 801740e:	f3bf 8f4f 	dsb	sy
 8017412:	617b      	str	r3, [r7, #20]
}
 8017414:	bf00      	nop
 8017416:	e7fe      	b.n	8017416 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017418:	68bb      	ldr	r3, [r7, #8]
 801741a:	2b00      	cmp	r3, #0
 801741c:	d01f      	beq.n	801745e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801741e:	2300      	movs	r3, #0
 8017420:	61fb      	str	r3, [r7, #28]
 8017422:	e012      	b.n	801744a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017424:	68ba      	ldr	r2, [r7, #8]
 8017426:	69fb      	ldr	r3, [r7, #28]
 8017428:	4413      	add	r3, r2
 801742a:	7819      	ldrb	r1, [r3, #0]
 801742c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801742e:	69fb      	ldr	r3, [r7, #28]
 8017430:	4413      	add	r3, r2
 8017432:	3334      	adds	r3, #52	; 0x34
 8017434:	460a      	mov	r2, r1
 8017436:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017438:	68ba      	ldr	r2, [r7, #8]
 801743a:	69fb      	ldr	r3, [r7, #28]
 801743c:	4413      	add	r3, r2
 801743e:	781b      	ldrb	r3, [r3, #0]
 8017440:	2b00      	cmp	r3, #0
 8017442:	d006      	beq.n	8017452 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017444:	69fb      	ldr	r3, [r7, #28]
 8017446:	3301      	adds	r3, #1
 8017448:	61fb      	str	r3, [r7, #28]
 801744a:	69fb      	ldr	r3, [r7, #28]
 801744c:	2b0f      	cmp	r3, #15
 801744e:	d9e9      	bls.n	8017424 <prvInitialiseNewTask+0x64>
 8017450:	e000      	b.n	8017454 <prvInitialiseNewTask+0x94>
			{
				break;
 8017452:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017456:	2200      	movs	r2, #0
 8017458:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801745c:	e003      	b.n	8017466 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801745e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017460:	2200      	movs	r2, #0
 8017462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017468:	2b37      	cmp	r3, #55	; 0x37
 801746a:	d901      	bls.n	8017470 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801746c:	2337      	movs	r3, #55	; 0x37
 801746e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017472:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017474:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017478:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801747a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801747c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801747e:	2200      	movs	r2, #0
 8017480:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017484:	3304      	adds	r3, #4
 8017486:	4618      	mov	r0, r3
 8017488:	f7fe fe56 	bl	8016138 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801748c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801748e:	3318      	adds	r3, #24
 8017490:	4618      	mov	r0, r3
 8017492:	f7fe fe51 	bl	8016138 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801749a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801749c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801749e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80174a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80174a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80174aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80174ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174ae:	2200      	movs	r2, #0
 80174b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80174b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174b6:	2200      	movs	r2, #0
 80174b8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80174bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174be:	3354      	adds	r3, #84	; 0x54
 80174c0:	2260      	movs	r2, #96	; 0x60
 80174c2:	2100      	movs	r1, #0
 80174c4:	4618      	mov	r0, r3
 80174c6:	f002 fe4d 	bl	801a164 <memset>
 80174ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174cc:	4a0c      	ldr	r2, [pc, #48]	; (8017500 <prvInitialiseNewTask+0x140>)
 80174ce:	659a      	str	r2, [r3, #88]	; 0x58
 80174d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174d2:	4a0c      	ldr	r2, [pc, #48]	; (8017504 <prvInitialiseNewTask+0x144>)
 80174d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80174d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174d8:	4a0b      	ldr	r2, [pc, #44]	; (8017508 <prvInitialiseNewTask+0x148>)
 80174da:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80174dc:	683a      	ldr	r2, [r7, #0]
 80174de:	68f9      	ldr	r1, [r7, #12]
 80174e0:	69b8      	ldr	r0, [r7, #24]
 80174e2:	f001 fa3f 	bl	8018964 <pxPortInitialiseStack>
 80174e6:	4602      	mov	r2, r0
 80174e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80174ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d002      	beq.n	80174f8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80174f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80174f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80174f8:	bf00      	nop
 80174fa:	3720      	adds	r7, #32
 80174fc:	46bd      	mov	sp, r7
 80174fe:	bd80      	pop	{r7, pc}
 8017500:	08022100 	.word	0x08022100
 8017504:	08022120 	.word	0x08022120
 8017508:	080220e0 	.word	0x080220e0

0801750c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801750c:	b580      	push	{r7, lr}
 801750e:	b082      	sub	sp, #8
 8017510:	af00      	add	r7, sp, #0
 8017512:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017514:	f001 fb56 	bl	8018bc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017518:	4b2d      	ldr	r3, [pc, #180]	; (80175d0 <prvAddNewTaskToReadyList+0xc4>)
 801751a:	681b      	ldr	r3, [r3, #0]
 801751c:	3301      	adds	r3, #1
 801751e:	4a2c      	ldr	r2, [pc, #176]	; (80175d0 <prvAddNewTaskToReadyList+0xc4>)
 8017520:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017522:	4b2c      	ldr	r3, [pc, #176]	; (80175d4 <prvAddNewTaskToReadyList+0xc8>)
 8017524:	681b      	ldr	r3, [r3, #0]
 8017526:	2b00      	cmp	r3, #0
 8017528:	d109      	bne.n	801753e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801752a:	4a2a      	ldr	r2, [pc, #168]	; (80175d4 <prvAddNewTaskToReadyList+0xc8>)
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017530:	4b27      	ldr	r3, [pc, #156]	; (80175d0 <prvAddNewTaskToReadyList+0xc4>)
 8017532:	681b      	ldr	r3, [r3, #0]
 8017534:	2b01      	cmp	r3, #1
 8017536:	d110      	bne.n	801755a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017538:	f000 fc26 	bl	8017d88 <prvInitialiseTaskLists>
 801753c:	e00d      	b.n	801755a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801753e:	4b26      	ldr	r3, [pc, #152]	; (80175d8 <prvAddNewTaskToReadyList+0xcc>)
 8017540:	681b      	ldr	r3, [r3, #0]
 8017542:	2b00      	cmp	r3, #0
 8017544:	d109      	bne.n	801755a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017546:	4b23      	ldr	r3, [pc, #140]	; (80175d4 <prvAddNewTaskToReadyList+0xc8>)
 8017548:	681b      	ldr	r3, [r3, #0]
 801754a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017550:	429a      	cmp	r2, r3
 8017552:	d802      	bhi.n	801755a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017554:	4a1f      	ldr	r2, [pc, #124]	; (80175d4 <prvAddNewTaskToReadyList+0xc8>)
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801755a:	4b20      	ldr	r3, [pc, #128]	; (80175dc <prvAddNewTaskToReadyList+0xd0>)
 801755c:	681b      	ldr	r3, [r3, #0]
 801755e:	3301      	adds	r3, #1
 8017560:	4a1e      	ldr	r2, [pc, #120]	; (80175dc <prvAddNewTaskToReadyList+0xd0>)
 8017562:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017564:	4b1d      	ldr	r3, [pc, #116]	; (80175dc <prvAddNewTaskToReadyList+0xd0>)
 8017566:	681a      	ldr	r2, [r3, #0]
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017570:	4b1b      	ldr	r3, [pc, #108]	; (80175e0 <prvAddNewTaskToReadyList+0xd4>)
 8017572:	681b      	ldr	r3, [r3, #0]
 8017574:	429a      	cmp	r2, r3
 8017576:	d903      	bls.n	8017580 <prvAddNewTaskToReadyList+0x74>
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801757c:	4a18      	ldr	r2, [pc, #96]	; (80175e0 <prvAddNewTaskToReadyList+0xd4>)
 801757e:	6013      	str	r3, [r2, #0]
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017584:	4613      	mov	r3, r2
 8017586:	009b      	lsls	r3, r3, #2
 8017588:	4413      	add	r3, r2
 801758a:	009b      	lsls	r3, r3, #2
 801758c:	4a15      	ldr	r2, [pc, #84]	; (80175e4 <prvAddNewTaskToReadyList+0xd8>)
 801758e:	441a      	add	r2, r3
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	3304      	adds	r3, #4
 8017594:	4619      	mov	r1, r3
 8017596:	4610      	mov	r0, r2
 8017598:	f7fe fddb 	bl	8016152 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801759c:	f001 fb42 	bl	8018c24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80175a0:	4b0d      	ldr	r3, [pc, #52]	; (80175d8 <prvAddNewTaskToReadyList+0xcc>)
 80175a2:	681b      	ldr	r3, [r3, #0]
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d00e      	beq.n	80175c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80175a8:	4b0a      	ldr	r3, [pc, #40]	; (80175d4 <prvAddNewTaskToReadyList+0xc8>)
 80175aa:	681b      	ldr	r3, [r3, #0]
 80175ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175b2:	429a      	cmp	r2, r3
 80175b4:	d207      	bcs.n	80175c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80175b6:	4b0c      	ldr	r3, [pc, #48]	; (80175e8 <prvAddNewTaskToReadyList+0xdc>)
 80175b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80175bc:	601a      	str	r2, [r3, #0]
 80175be:	f3bf 8f4f 	dsb	sy
 80175c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80175c6:	bf00      	nop
 80175c8:	3708      	adds	r7, #8
 80175ca:	46bd      	mov	sp, r7
 80175cc:	bd80      	pop	{r7, pc}
 80175ce:	bf00      	nop
 80175d0:	200014c4 	.word	0x200014c4
 80175d4:	20000ff0 	.word	0x20000ff0
 80175d8:	200014d0 	.word	0x200014d0
 80175dc:	200014e0 	.word	0x200014e0
 80175e0:	200014cc 	.word	0x200014cc
 80175e4:	20000ff4 	.word	0x20000ff4
 80175e8:	e000ed04 	.word	0xe000ed04

080175ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80175ec:	b580      	push	{r7, lr}
 80175ee:	b084      	sub	sp, #16
 80175f0:	af00      	add	r7, sp, #0
 80175f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80175f4:	2300      	movs	r3, #0
 80175f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d017      	beq.n	801762e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80175fe:	4b13      	ldr	r3, [pc, #76]	; (801764c <vTaskDelay+0x60>)
 8017600:	681b      	ldr	r3, [r3, #0]
 8017602:	2b00      	cmp	r3, #0
 8017604:	d00a      	beq.n	801761c <vTaskDelay+0x30>
	__asm volatile
 8017606:	f04f 0350 	mov.w	r3, #80	; 0x50
 801760a:	f383 8811 	msr	BASEPRI, r3
 801760e:	f3bf 8f6f 	isb	sy
 8017612:	f3bf 8f4f 	dsb	sy
 8017616:	60bb      	str	r3, [r7, #8]
}
 8017618:	bf00      	nop
 801761a:	e7fe      	b.n	801761a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801761c:	f000 f88a 	bl	8017734 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017620:	2100      	movs	r1, #0
 8017622:	6878      	ldr	r0, [r7, #4]
 8017624:	f000 fdfc 	bl	8018220 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8017628:	f000 f892 	bl	8017750 <xTaskResumeAll>
 801762c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801762e:	68fb      	ldr	r3, [r7, #12]
 8017630:	2b00      	cmp	r3, #0
 8017632:	d107      	bne.n	8017644 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8017634:	4b06      	ldr	r3, [pc, #24]	; (8017650 <vTaskDelay+0x64>)
 8017636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801763a:	601a      	str	r2, [r3, #0]
 801763c:	f3bf 8f4f 	dsb	sy
 8017640:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017644:	bf00      	nop
 8017646:	3710      	adds	r7, #16
 8017648:	46bd      	mov	sp, r7
 801764a:	bd80      	pop	{r7, pc}
 801764c:	200014ec 	.word	0x200014ec
 8017650:	e000ed04 	.word	0xe000ed04

08017654 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8017654:	b580      	push	{r7, lr}
 8017656:	b08a      	sub	sp, #40	; 0x28
 8017658:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801765a:	2300      	movs	r3, #0
 801765c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801765e:	2300      	movs	r3, #0
 8017660:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8017662:	463a      	mov	r2, r7
 8017664:	1d39      	adds	r1, r7, #4
 8017666:	f107 0308 	add.w	r3, r7, #8
 801766a:	4618      	mov	r0, r3
 801766c:	f7fe fd10 	bl	8016090 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017670:	6839      	ldr	r1, [r7, #0]
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	68ba      	ldr	r2, [r7, #8]
 8017676:	9202      	str	r2, [sp, #8]
 8017678:	9301      	str	r3, [sp, #4]
 801767a:	2300      	movs	r3, #0
 801767c:	9300      	str	r3, [sp, #0]
 801767e:	2300      	movs	r3, #0
 8017680:	460a      	mov	r2, r1
 8017682:	4924      	ldr	r1, [pc, #144]	; (8017714 <vTaskStartScheduler+0xc0>)
 8017684:	4824      	ldr	r0, [pc, #144]	; (8017718 <vTaskStartScheduler+0xc4>)
 8017686:	f7ff fdf9 	bl	801727c <xTaskCreateStatic>
 801768a:	4603      	mov	r3, r0
 801768c:	4a23      	ldr	r2, [pc, #140]	; (801771c <vTaskStartScheduler+0xc8>)
 801768e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8017690:	4b22      	ldr	r3, [pc, #136]	; (801771c <vTaskStartScheduler+0xc8>)
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	2b00      	cmp	r3, #0
 8017696:	d002      	beq.n	801769e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8017698:	2301      	movs	r3, #1
 801769a:	617b      	str	r3, [r7, #20]
 801769c:	e001      	b.n	80176a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801769e:	2300      	movs	r3, #0
 80176a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80176a2:	697b      	ldr	r3, [r7, #20]
 80176a4:	2b01      	cmp	r3, #1
 80176a6:	d102      	bne.n	80176ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80176a8:	f000 fe0e 	bl	80182c8 <xTimerCreateTimerTask>
 80176ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80176ae:	697b      	ldr	r3, [r7, #20]
 80176b0:	2b01      	cmp	r3, #1
 80176b2:	d11b      	bne.n	80176ec <vTaskStartScheduler+0x98>
	__asm volatile
 80176b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176b8:	f383 8811 	msr	BASEPRI, r3
 80176bc:	f3bf 8f6f 	isb	sy
 80176c0:	f3bf 8f4f 	dsb	sy
 80176c4:	613b      	str	r3, [r7, #16]
}
 80176c6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80176c8:	4b15      	ldr	r3, [pc, #84]	; (8017720 <vTaskStartScheduler+0xcc>)
 80176ca:	681b      	ldr	r3, [r3, #0]
 80176cc:	3354      	adds	r3, #84	; 0x54
 80176ce:	4a15      	ldr	r2, [pc, #84]	; (8017724 <vTaskStartScheduler+0xd0>)
 80176d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80176d2:	4b15      	ldr	r3, [pc, #84]	; (8017728 <vTaskStartScheduler+0xd4>)
 80176d4:	f04f 32ff 	mov.w	r2, #4294967295
 80176d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80176da:	4b14      	ldr	r3, [pc, #80]	; (801772c <vTaskStartScheduler+0xd8>)
 80176dc:	2201      	movs	r2, #1
 80176de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80176e0:	4b13      	ldr	r3, [pc, #76]	; (8017730 <vTaskStartScheduler+0xdc>)
 80176e2:	2200      	movs	r2, #0
 80176e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80176e6:	f001 f9cb 	bl	8018a80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80176ea:	e00e      	b.n	801770a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80176ec:	697b      	ldr	r3, [r7, #20]
 80176ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80176f2:	d10a      	bne.n	801770a <vTaskStartScheduler+0xb6>
	__asm volatile
 80176f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176f8:	f383 8811 	msr	BASEPRI, r3
 80176fc:	f3bf 8f6f 	isb	sy
 8017700:	f3bf 8f4f 	dsb	sy
 8017704:	60fb      	str	r3, [r7, #12]
}
 8017706:	bf00      	nop
 8017708:	e7fe      	b.n	8017708 <vTaskStartScheduler+0xb4>
}
 801770a:	bf00      	nop
 801770c:	3718      	adds	r7, #24
 801770e:	46bd      	mov	sp, r7
 8017710:	bd80      	pop	{r7, pc}
 8017712:	bf00      	nop
 8017714:	08021da4 	.word	0x08021da4
 8017718:	08017d59 	.word	0x08017d59
 801771c:	200014e8 	.word	0x200014e8
 8017720:	20000ff0 	.word	0x20000ff0
 8017724:	200001f8 	.word	0x200001f8
 8017728:	200014e4 	.word	0x200014e4
 801772c:	200014d0 	.word	0x200014d0
 8017730:	200014c8 	.word	0x200014c8

08017734 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8017734:	b480      	push	{r7}
 8017736:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8017738:	4b04      	ldr	r3, [pc, #16]	; (801774c <vTaskSuspendAll+0x18>)
 801773a:	681b      	ldr	r3, [r3, #0]
 801773c:	3301      	adds	r3, #1
 801773e:	4a03      	ldr	r2, [pc, #12]	; (801774c <vTaskSuspendAll+0x18>)
 8017740:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8017742:	bf00      	nop
 8017744:	46bd      	mov	sp, r7
 8017746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801774a:	4770      	bx	lr
 801774c:	200014ec 	.word	0x200014ec

08017750 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017750:	b580      	push	{r7, lr}
 8017752:	b084      	sub	sp, #16
 8017754:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8017756:	2300      	movs	r3, #0
 8017758:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801775a:	2300      	movs	r3, #0
 801775c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801775e:	4b42      	ldr	r3, [pc, #264]	; (8017868 <xTaskResumeAll+0x118>)
 8017760:	681b      	ldr	r3, [r3, #0]
 8017762:	2b00      	cmp	r3, #0
 8017764:	d10a      	bne.n	801777c <xTaskResumeAll+0x2c>
	__asm volatile
 8017766:	f04f 0350 	mov.w	r3, #80	; 0x50
 801776a:	f383 8811 	msr	BASEPRI, r3
 801776e:	f3bf 8f6f 	isb	sy
 8017772:	f3bf 8f4f 	dsb	sy
 8017776:	603b      	str	r3, [r7, #0]
}
 8017778:	bf00      	nop
 801777a:	e7fe      	b.n	801777a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801777c:	f001 fa22 	bl	8018bc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8017780:	4b39      	ldr	r3, [pc, #228]	; (8017868 <xTaskResumeAll+0x118>)
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	3b01      	subs	r3, #1
 8017786:	4a38      	ldr	r2, [pc, #224]	; (8017868 <xTaskResumeAll+0x118>)
 8017788:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801778a:	4b37      	ldr	r3, [pc, #220]	; (8017868 <xTaskResumeAll+0x118>)
 801778c:	681b      	ldr	r3, [r3, #0]
 801778e:	2b00      	cmp	r3, #0
 8017790:	d162      	bne.n	8017858 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8017792:	4b36      	ldr	r3, [pc, #216]	; (801786c <xTaskResumeAll+0x11c>)
 8017794:	681b      	ldr	r3, [r3, #0]
 8017796:	2b00      	cmp	r3, #0
 8017798:	d05e      	beq.n	8017858 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801779a:	e02f      	b.n	80177fc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801779c:	4b34      	ldr	r3, [pc, #208]	; (8017870 <xTaskResumeAll+0x120>)
 801779e:	68db      	ldr	r3, [r3, #12]
 80177a0:	68db      	ldr	r3, [r3, #12]
 80177a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80177a4:	68fb      	ldr	r3, [r7, #12]
 80177a6:	3318      	adds	r3, #24
 80177a8:	4618      	mov	r0, r3
 80177aa:	f7fe fd2f 	bl	801620c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80177ae:	68fb      	ldr	r3, [r7, #12]
 80177b0:	3304      	adds	r3, #4
 80177b2:	4618      	mov	r0, r3
 80177b4:	f7fe fd2a 	bl	801620c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80177b8:	68fb      	ldr	r3, [r7, #12]
 80177ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80177bc:	4b2d      	ldr	r3, [pc, #180]	; (8017874 <xTaskResumeAll+0x124>)
 80177be:	681b      	ldr	r3, [r3, #0]
 80177c0:	429a      	cmp	r2, r3
 80177c2:	d903      	bls.n	80177cc <xTaskResumeAll+0x7c>
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177c8:	4a2a      	ldr	r2, [pc, #168]	; (8017874 <xTaskResumeAll+0x124>)
 80177ca:	6013      	str	r3, [r2, #0]
 80177cc:	68fb      	ldr	r3, [r7, #12]
 80177ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80177d0:	4613      	mov	r3, r2
 80177d2:	009b      	lsls	r3, r3, #2
 80177d4:	4413      	add	r3, r2
 80177d6:	009b      	lsls	r3, r3, #2
 80177d8:	4a27      	ldr	r2, [pc, #156]	; (8017878 <xTaskResumeAll+0x128>)
 80177da:	441a      	add	r2, r3
 80177dc:	68fb      	ldr	r3, [r7, #12]
 80177de:	3304      	adds	r3, #4
 80177e0:	4619      	mov	r1, r3
 80177e2:	4610      	mov	r0, r2
 80177e4:	f7fe fcb5 	bl	8016152 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80177e8:	68fb      	ldr	r3, [r7, #12]
 80177ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80177ec:	4b23      	ldr	r3, [pc, #140]	; (801787c <xTaskResumeAll+0x12c>)
 80177ee:	681b      	ldr	r3, [r3, #0]
 80177f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177f2:	429a      	cmp	r2, r3
 80177f4:	d302      	bcc.n	80177fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80177f6:	4b22      	ldr	r3, [pc, #136]	; (8017880 <xTaskResumeAll+0x130>)
 80177f8:	2201      	movs	r2, #1
 80177fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80177fc:	4b1c      	ldr	r3, [pc, #112]	; (8017870 <xTaskResumeAll+0x120>)
 80177fe:	681b      	ldr	r3, [r3, #0]
 8017800:	2b00      	cmp	r3, #0
 8017802:	d1cb      	bne.n	801779c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8017804:	68fb      	ldr	r3, [r7, #12]
 8017806:	2b00      	cmp	r3, #0
 8017808:	d001      	beq.n	801780e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801780a:	f000 fb5f 	bl	8017ecc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801780e:	4b1d      	ldr	r3, [pc, #116]	; (8017884 <xTaskResumeAll+0x134>)
 8017810:	681b      	ldr	r3, [r3, #0]
 8017812:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	2b00      	cmp	r3, #0
 8017818:	d010      	beq.n	801783c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801781a:	f000 f847 	bl	80178ac <xTaskIncrementTick>
 801781e:	4603      	mov	r3, r0
 8017820:	2b00      	cmp	r3, #0
 8017822:	d002      	beq.n	801782a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8017824:	4b16      	ldr	r3, [pc, #88]	; (8017880 <xTaskResumeAll+0x130>)
 8017826:	2201      	movs	r2, #1
 8017828:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	3b01      	subs	r3, #1
 801782e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	2b00      	cmp	r3, #0
 8017834:	d1f1      	bne.n	801781a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8017836:	4b13      	ldr	r3, [pc, #76]	; (8017884 <xTaskResumeAll+0x134>)
 8017838:	2200      	movs	r2, #0
 801783a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801783c:	4b10      	ldr	r3, [pc, #64]	; (8017880 <xTaskResumeAll+0x130>)
 801783e:	681b      	ldr	r3, [r3, #0]
 8017840:	2b00      	cmp	r3, #0
 8017842:	d009      	beq.n	8017858 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8017844:	2301      	movs	r3, #1
 8017846:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8017848:	4b0f      	ldr	r3, [pc, #60]	; (8017888 <xTaskResumeAll+0x138>)
 801784a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801784e:	601a      	str	r2, [r3, #0]
 8017850:	f3bf 8f4f 	dsb	sy
 8017854:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017858:	f001 f9e4 	bl	8018c24 <vPortExitCritical>

	return xAlreadyYielded;
 801785c:	68bb      	ldr	r3, [r7, #8]
}
 801785e:	4618      	mov	r0, r3
 8017860:	3710      	adds	r7, #16
 8017862:	46bd      	mov	sp, r7
 8017864:	bd80      	pop	{r7, pc}
 8017866:	bf00      	nop
 8017868:	200014ec 	.word	0x200014ec
 801786c:	200014c4 	.word	0x200014c4
 8017870:	20001484 	.word	0x20001484
 8017874:	200014cc 	.word	0x200014cc
 8017878:	20000ff4 	.word	0x20000ff4
 801787c:	20000ff0 	.word	0x20000ff0
 8017880:	200014d8 	.word	0x200014d8
 8017884:	200014d4 	.word	0x200014d4
 8017888:	e000ed04 	.word	0xe000ed04

0801788c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801788c:	b480      	push	{r7}
 801788e:	b083      	sub	sp, #12
 8017890:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8017892:	4b05      	ldr	r3, [pc, #20]	; (80178a8 <xTaskGetTickCount+0x1c>)
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017898:	687b      	ldr	r3, [r7, #4]
}
 801789a:	4618      	mov	r0, r3
 801789c:	370c      	adds	r7, #12
 801789e:	46bd      	mov	sp, r7
 80178a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178a4:	4770      	bx	lr
 80178a6:	bf00      	nop
 80178a8:	200014c8 	.word	0x200014c8

080178ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80178ac:	b580      	push	{r7, lr}
 80178ae:	b086      	sub	sp, #24
 80178b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80178b2:	2300      	movs	r3, #0
 80178b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80178b6:	4b4f      	ldr	r3, [pc, #316]	; (80179f4 <xTaskIncrementTick+0x148>)
 80178b8:	681b      	ldr	r3, [r3, #0]
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	f040 808f 	bne.w	80179de <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80178c0:	4b4d      	ldr	r3, [pc, #308]	; (80179f8 <xTaskIncrementTick+0x14c>)
 80178c2:	681b      	ldr	r3, [r3, #0]
 80178c4:	3301      	adds	r3, #1
 80178c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80178c8:	4a4b      	ldr	r2, [pc, #300]	; (80179f8 <xTaskIncrementTick+0x14c>)
 80178ca:	693b      	ldr	r3, [r7, #16]
 80178cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80178ce:	693b      	ldr	r3, [r7, #16]
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d120      	bne.n	8017916 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80178d4:	4b49      	ldr	r3, [pc, #292]	; (80179fc <xTaskIncrementTick+0x150>)
 80178d6:	681b      	ldr	r3, [r3, #0]
 80178d8:	681b      	ldr	r3, [r3, #0]
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d00a      	beq.n	80178f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80178de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178e2:	f383 8811 	msr	BASEPRI, r3
 80178e6:	f3bf 8f6f 	isb	sy
 80178ea:	f3bf 8f4f 	dsb	sy
 80178ee:	603b      	str	r3, [r7, #0]
}
 80178f0:	bf00      	nop
 80178f2:	e7fe      	b.n	80178f2 <xTaskIncrementTick+0x46>
 80178f4:	4b41      	ldr	r3, [pc, #260]	; (80179fc <xTaskIncrementTick+0x150>)
 80178f6:	681b      	ldr	r3, [r3, #0]
 80178f8:	60fb      	str	r3, [r7, #12]
 80178fa:	4b41      	ldr	r3, [pc, #260]	; (8017a00 <xTaskIncrementTick+0x154>)
 80178fc:	681b      	ldr	r3, [r3, #0]
 80178fe:	4a3f      	ldr	r2, [pc, #252]	; (80179fc <xTaskIncrementTick+0x150>)
 8017900:	6013      	str	r3, [r2, #0]
 8017902:	4a3f      	ldr	r2, [pc, #252]	; (8017a00 <xTaskIncrementTick+0x154>)
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	6013      	str	r3, [r2, #0]
 8017908:	4b3e      	ldr	r3, [pc, #248]	; (8017a04 <xTaskIncrementTick+0x158>)
 801790a:	681b      	ldr	r3, [r3, #0]
 801790c:	3301      	adds	r3, #1
 801790e:	4a3d      	ldr	r2, [pc, #244]	; (8017a04 <xTaskIncrementTick+0x158>)
 8017910:	6013      	str	r3, [r2, #0]
 8017912:	f000 fadb 	bl	8017ecc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8017916:	4b3c      	ldr	r3, [pc, #240]	; (8017a08 <xTaskIncrementTick+0x15c>)
 8017918:	681b      	ldr	r3, [r3, #0]
 801791a:	693a      	ldr	r2, [r7, #16]
 801791c:	429a      	cmp	r2, r3
 801791e:	d349      	bcc.n	80179b4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017920:	4b36      	ldr	r3, [pc, #216]	; (80179fc <xTaskIncrementTick+0x150>)
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	2b00      	cmp	r3, #0
 8017928:	d104      	bne.n	8017934 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801792a:	4b37      	ldr	r3, [pc, #220]	; (8017a08 <xTaskIncrementTick+0x15c>)
 801792c:	f04f 32ff 	mov.w	r2, #4294967295
 8017930:	601a      	str	r2, [r3, #0]
					break;
 8017932:	e03f      	b.n	80179b4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017934:	4b31      	ldr	r3, [pc, #196]	; (80179fc <xTaskIncrementTick+0x150>)
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	68db      	ldr	r3, [r3, #12]
 801793a:	68db      	ldr	r3, [r3, #12]
 801793c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801793e:	68bb      	ldr	r3, [r7, #8]
 8017940:	685b      	ldr	r3, [r3, #4]
 8017942:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8017944:	693a      	ldr	r2, [r7, #16]
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	429a      	cmp	r2, r3
 801794a:	d203      	bcs.n	8017954 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801794c:	4a2e      	ldr	r2, [pc, #184]	; (8017a08 <xTaskIncrementTick+0x15c>)
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8017952:	e02f      	b.n	80179b4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017954:	68bb      	ldr	r3, [r7, #8]
 8017956:	3304      	adds	r3, #4
 8017958:	4618      	mov	r0, r3
 801795a:	f7fe fc57 	bl	801620c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801795e:	68bb      	ldr	r3, [r7, #8]
 8017960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017962:	2b00      	cmp	r3, #0
 8017964:	d004      	beq.n	8017970 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017966:	68bb      	ldr	r3, [r7, #8]
 8017968:	3318      	adds	r3, #24
 801796a:	4618      	mov	r0, r3
 801796c:	f7fe fc4e 	bl	801620c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8017970:	68bb      	ldr	r3, [r7, #8]
 8017972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017974:	4b25      	ldr	r3, [pc, #148]	; (8017a0c <xTaskIncrementTick+0x160>)
 8017976:	681b      	ldr	r3, [r3, #0]
 8017978:	429a      	cmp	r2, r3
 801797a:	d903      	bls.n	8017984 <xTaskIncrementTick+0xd8>
 801797c:	68bb      	ldr	r3, [r7, #8]
 801797e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017980:	4a22      	ldr	r2, [pc, #136]	; (8017a0c <xTaskIncrementTick+0x160>)
 8017982:	6013      	str	r3, [r2, #0]
 8017984:	68bb      	ldr	r3, [r7, #8]
 8017986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017988:	4613      	mov	r3, r2
 801798a:	009b      	lsls	r3, r3, #2
 801798c:	4413      	add	r3, r2
 801798e:	009b      	lsls	r3, r3, #2
 8017990:	4a1f      	ldr	r2, [pc, #124]	; (8017a10 <xTaskIncrementTick+0x164>)
 8017992:	441a      	add	r2, r3
 8017994:	68bb      	ldr	r3, [r7, #8]
 8017996:	3304      	adds	r3, #4
 8017998:	4619      	mov	r1, r3
 801799a:	4610      	mov	r0, r2
 801799c:	f7fe fbd9 	bl	8016152 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80179a0:	68bb      	ldr	r3, [r7, #8]
 80179a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179a4:	4b1b      	ldr	r3, [pc, #108]	; (8017a14 <xTaskIncrementTick+0x168>)
 80179a6:	681b      	ldr	r3, [r3, #0]
 80179a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179aa:	429a      	cmp	r2, r3
 80179ac:	d3b8      	bcc.n	8017920 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80179ae:	2301      	movs	r3, #1
 80179b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80179b2:	e7b5      	b.n	8017920 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80179b4:	4b17      	ldr	r3, [pc, #92]	; (8017a14 <xTaskIncrementTick+0x168>)
 80179b6:	681b      	ldr	r3, [r3, #0]
 80179b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179ba:	4915      	ldr	r1, [pc, #84]	; (8017a10 <xTaskIncrementTick+0x164>)
 80179bc:	4613      	mov	r3, r2
 80179be:	009b      	lsls	r3, r3, #2
 80179c0:	4413      	add	r3, r2
 80179c2:	009b      	lsls	r3, r3, #2
 80179c4:	440b      	add	r3, r1
 80179c6:	681b      	ldr	r3, [r3, #0]
 80179c8:	2b01      	cmp	r3, #1
 80179ca:	d901      	bls.n	80179d0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80179cc:	2301      	movs	r3, #1
 80179ce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80179d0:	4b11      	ldr	r3, [pc, #68]	; (8017a18 <xTaskIncrementTick+0x16c>)
 80179d2:	681b      	ldr	r3, [r3, #0]
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d007      	beq.n	80179e8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80179d8:	2301      	movs	r3, #1
 80179da:	617b      	str	r3, [r7, #20]
 80179dc:	e004      	b.n	80179e8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80179de:	4b0f      	ldr	r3, [pc, #60]	; (8017a1c <xTaskIncrementTick+0x170>)
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	3301      	adds	r3, #1
 80179e4:	4a0d      	ldr	r2, [pc, #52]	; (8017a1c <xTaskIncrementTick+0x170>)
 80179e6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80179e8:	697b      	ldr	r3, [r7, #20]
}
 80179ea:	4618      	mov	r0, r3
 80179ec:	3718      	adds	r7, #24
 80179ee:	46bd      	mov	sp, r7
 80179f0:	bd80      	pop	{r7, pc}
 80179f2:	bf00      	nop
 80179f4:	200014ec 	.word	0x200014ec
 80179f8:	200014c8 	.word	0x200014c8
 80179fc:	2000147c 	.word	0x2000147c
 8017a00:	20001480 	.word	0x20001480
 8017a04:	200014dc 	.word	0x200014dc
 8017a08:	200014e4 	.word	0x200014e4
 8017a0c:	200014cc 	.word	0x200014cc
 8017a10:	20000ff4 	.word	0x20000ff4
 8017a14:	20000ff0 	.word	0x20000ff0
 8017a18:	200014d8 	.word	0x200014d8
 8017a1c:	200014d4 	.word	0x200014d4

08017a20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017a20:	b480      	push	{r7}
 8017a22:	b085      	sub	sp, #20
 8017a24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017a26:	4b2a      	ldr	r3, [pc, #168]	; (8017ad0 <vTaskSwitchContext+0xb0>)
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d003      	beq.n	8017a36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017a2e:	4b29      	ldr	r3, [pc, #164]	; (8017ad4 <vTaskSwitchContext+0xb4>)
 8017a30:	2201      	movs	r2, #1
 8017a32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017a34:	e046      	b.n	8017ac4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8017a36:	4b27      	ldr	r3, [pc, #156]	; (8017ad4 <vTaskSwitchContext+0xb4>)
 8017a38:	2200      	movs	r2, #0
 8017a3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017a3c:	4b26      	ldr	r3, [pc, #152]	; (8017ad8 <vTaskSwitchContext+0xb8>)
 8017a3e:	681b      	ldr	r3, [r3, #0]
 8017a40:	60fb      	str	r3, [r7, #12]
 8017a42:	e010      	b.n	8017a66 <vTaskSwitchContext+0x46>
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	d10a      	bne.n	8017a60 <vTaskSwitchContext+0x40>
	__asm volatile
 8017a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a4e:	f383 8811 	msr	BASEPRI, r3
 8017a52:	f3bf 8f6f 	isb	sy
 8017a56:	f3bf 8f4f 	dsb	sy
 8017a5a:	607b      	str	r3, [r7, #4]
}
 8017a5c:	bf00      	nop
 8017a5e:	e7fe      	b.n	8017a5e <vTaskSwitchContext+0x3e>
 8017a60:	68fb      	ldr	r3, [r7, #12]
 8017a62:	3b01      	subs	r3, #1
 8017a64:	60fb      	str	r3, [r7, #12]
 8017a66:	491d      	ldr	r1, [pc, #116]	; (8017adc <vTaskSwitchContext+0xbc>)
 8017a68:	68fa      	ldr	r2, [r7, #12]
 8017a6a:	4613      	mov	r3, r2
 8017a6c:	009b      	lsls	r3, r3, #2
 8017a6e:	4413      	add	r3, r2
 8017a70:	009b      	lsls	r3, r3, #2
 8017a72:	440b      	add	r3, r1
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d0e4      	beq.n	8017a44 <vTaskSwitchContext+0x24>
 8017a7a:	68fa      	ldr	r2, [r7, #12]
 8017a7c:	4613      	mov	r3, r2
 8017a7e:	009b      	lsls	r3, r3, #2
 8017a80:	4413      	add	r3, r2
 8017a82:	009b      	lsls	r3, r3, #2
 8017a84:	4a15      	ldr	r2, [pc, #84]	; (8017adc <vTaskSwitchContext+0xbc>)
 8017a86:	4413      	add	r3, r2
 8017a88:	60bb      	str	r3, [r7, #8]
 8017a8a:	68bb      	ldr	r3, [r7, #8]
 8017a8c:	685b      	ldr	r3, [r3, #4]
 8017a8e:	685a      	ldr	r2, [r3, #4]
 8017a90:	68bb      	ldr	r3, [r7, #8]
 8017a92:	605a      	str	r2, [r3, #4]
 8017a94:	68bb      	ldr	r3, [r7, #8]
 8017a96:	685a      	ldr	r2, [r3, #4]
 8017a98:	68bb      	ldr	r3, [r7, #8]
 8017a9a:	3308      	adds	r3, #8
 8017a9c:	429a      	cmp	r2, r3
 8017a9e:	d104      	bne.n	8017aaa <vTaskSwitchContext+0x8a>
 8017aa0:	68bb      	ldr	r3, [r7, #8]
 8017aa2:	685b      	ldr	r3, [r3, #4]
 8017aa4:	685a      	ldr	r2, [r3, #4]
 8017aa6:	68bb      	ldr	r3, [r7, #8]
 8017aa8:	605a      	str	r2, [r3, #4]
 8017aaa:	68bb      	ldr	r3, [r7, #8]
 8017aac:	685b      	ldr	r3, [r3, #4]
 8017aae:	68db      	ldr	r3, [r3, #12]
 8017ab0:	4a0b      	ldr	r2, [pc, #44]	; (8017ae0 <vTaskSwitchContext+0xc0>)
 8017ab2:	6013      	str	r3, [r2, #0]
 8017ab4:	4a08      	ldr	r2, [pc, #32]	; (8017ad8 <vTaskSwitchContext+0xb8>)
 8017ab6:	68fb      	ldr	r3, [r7, #12]
 8017ab8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017aba:	4b09      	ldr	r3, [pc, #36]	; (8017ae0 <vTaskSwitchContext+0xc0>)
 8017abc:	681b      	ldr	r3, [r3, #0]
 8017abe:	3354      	adds	r3, #84	; 0x54
 8017ac0:	4a08      	ldr	r2, [pc, #32]	; (8017ae4 <vTaskSwitchContext+0xc4>)
 8017ac2:	6013      	str	r3, [r2, #0]
}
 8017ac4:	bf00      	nop
 8017ac6:	3714      	adds	r7, #20
 8017ac8:	46bd      	mov	sp, r7
 8017aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ace:	4770      	bx	lr
 8017ad0:	200014ec 	.word	0x200014ec
 8017ad4:	200014d8 	.word	0x200014d8
 8017ad8:	200014cc 	.word	0x200014cc
 8017adc:	20000ff4 	.word	0x20000ff4
 8017ae0:	20000ff0 	.word	0x20000ff0
 8017ae4:	200001f8 	.word	0x200001f8

08017ae8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8017ae8:	b580      	push	{r7, lr}
 8017aea:	b084      	sub	sp, #16
 8017aec:	af00      	add	r7, sp, #0
 8017aee:	6078      	str	r0, [r7, #4]
 8017af0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d10a      	bne.n	8017b0e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8017af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017afc:	f383 8811 	msr	BASEPRI, r3
 8017b00:	f3bf 8f6f 	isb	sy
 8017b04:	f3bf 8f4f 	dsb	sy
 8017b08:	60fb      	str	r3, [r7, #12]
}
 8017b0a:	bf00      	nop
 8017b0c:	e7fe      	b.n	8017b0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017b0e:	4b07      	ldr	r3, [pc, #28]	; (8017b2c <vTaskPlaceOnEventList+0x44>)
 8017b10:	681b      	ldr	r3, [r3, #0]
 8017b12:	3318      	adds	r3, #24
 8017b14:	4619      	mov	r1, r3
 8017b16:	6878      	ldr	r0, [r7, #4]
 8017b18:	f7fe fb3f 	bl	801619a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017b1c:	2101      	movs	r1, #1
 8017b1e:	6838      	ldr	r0, [r7, #0]
 8017b20:	f000 fb7e 	bl	8018220 <prvAddCurrentTaskToDelayedList>
}
 8017b24:	bf00      	nop
 8017b26:	3710      	adds	r7, #16
 8017b28:	46bd      	mov	sp, r7
 8017b2a:	bd80      	pop	{r7, pc}
 8017b2c:	20000ff0 	.word	0x20000ff0

08017b30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017b30:	b580      	push	{r7, lr}
 8017b32:	b086      	sub	sp, #24
 8017b34:	af00      	add	r7, sp, #0
 8017b36:	60f8      	str	r0, [r7, #12]
 8017b38:	60b9      	str	r1, [r7, #8]
 8017b3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	2b00      	cmp	r3, #0
 8017b40:	d10a      	bne.n	8017b58 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8017b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b46:	f383 8811 	msr	BASEPRI, r3
 8017b4a:	f3bf 8f6f 	isb	sy
 8017b4e:	f3bf 8f4f 	dsb	sy
 8017b52:	617b      	str	r3, [r7, #20]
}
 8017b54:	bf00      	nop
 8017b56:	e7fe      	b.n	8017b56 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017b58:	4b0a      	ldr	r3, [pc, #40]	; (8017b84 <vTaskPlaceOnEventListRestricted+0x54>)
 8017b5a:	681b      	ldr	r3, [r3, #0]
 8017b5c:	3318      	adds	r3, #24
 8017b5e:	4619      	mov	r1, r3
 8017b60:	68f8      	ldr	r0, [r7, #12]
 8017b62:	f7fe faf6 	bl	8016152 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d002      	beq.n	8017b72 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8017b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8017b70:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017b72:	6879      	ldr	r1, [r7, #4]
 8017b74:	68b8      	ldr	r0, [r7, #8]
 8017b76:	f000 fb53 	bl	8018220 <prvAddCurrentTaskToDelayedList>
	}
 8017b7a:	bf00      	nop
 8017b7c:	3718      	adds	r7, #24
 8017b7e:	46bd      	mov	sp, r7
 8017b80:	bd80      	pop	{r7, pc}
 8017b82:	bf00      	nop
 8017b84:	20000ff0 	.word	0x20000ff0

08017b88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8017b88:	b580      	push	{r7, lr}
 8017b8a:	b086      	sub	sp, #24
 8017b8c:	af00      	add	r7, sp, #0
 8017b8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	68db      	ldr	r3, [r3, #12]
 8017b94:	68db      	ldr	r3, [r3, #12]
 8017b96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8017b98:	693b      	ldr	r3, [r7, #16]
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d10a      	bne.n	8017bb4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8017b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ba2:	f383 8811 	msr	BASEPRI, r3
 8017ba6:	f3bf 8f6f 	isb	sy
 8017baa:	f3bf 8f4f 	dsb	sy
 8017bae:	60fb      	str	r3, [r7, #12]
}
 8017bb0:	bf00      	nop
 8017bb2:	e7fe      	b.n	8017bb2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017bb4:	693b      	ldr	r3, [r7, #16]
 8017bb6:	3318      	adds	r3, #24
 8017bb8:	4618      	mov	r0, r3
 8017bba:	f7fe fb27 	bl	801620c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017bbe:	4b1e      	ldr	r3, [pc, #120]	; (8017c38 <xTaskRemoveFromEventList+0xb0>)
 8017bc0:	681b      	ldr	r3, [r3, #0]
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	d11d      	bne.n	8017c02 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017bc6:	693b      	ldr	r3, [r7, #16]
 8017bc8:	3304      	adds	r3, #4
 8017bca:	4618      	mov	r0, r3
 8017bcc:	f7fe fb1e 	bl	801620c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017bd0:	693b      	ldr	r3, [r7, #16]
 8017bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017bd4:	4b19      	ldr	r3, [pc, #100]	; (8017c3c <xTaskRemoveFromEventList+0xb4>)
 8017bd6:	681b      	ldr	r3, [r3, #0]
 8017bd8:	429a      	cmp	r2, r3
 8017bda:	d903      	bls.n	8017be4 <xTaskRemoveFromEventList+0x5c>
 8017bdc:	693b      	ldr	r3, [r7, #16]
 8017bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017be0:	4a16      	ldr	r2, [pc, #88]	; (8017c3c <xTaskRemoveFromEventList+0xb4>)
 8017be2:	6013      	str	r3, [r2, #0]
 8017be4:	693b      	ldr	r3, [r7, #16]
 8017be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017be8:	4613      	mov	r3, r2
 8017bea:	009b      	lsls	r3, r3, #2
 8017bec:	4413      	add	r3, r2
 8017bee:	009b      	lsls	r3, r3, #2
 8017bf0:	4a13      	ldr	r2, [pc, #76]	; (8017c40 <xTaskRemoveFromEventList+0xb8>)
 8017bf2:	441a      	add	r2, r3
 8017bf4:	693b      	ldr	r3, [r7, #16]
 8017bf6:	3304      	adds	r3, #4
 8017bf8:	4619      	mov	r1, r3
 8017bfa:	4610      	mov	r0, r2
 8017bfc:	f7fe faa9 	bl	8016152 <vListInsertEnd>
 8017c00:	e005      	b.n	8017c0e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8017c02:	693b      	ldr	r3, [r7, #16]
 8017c04:	3318      	adds	r3, #24
 8017c06:	4619      	mov	r1, r3
 8017c08:	480e      	ldr	r0, [pc, #56]	; (8017c44 <xTaskRemoveFromEventList+0xbc>)
 8017c0a:	f7fe faa2 	bl	8016152 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017c0e:	693b      	ldr	r3, [r7, #16]
 8017c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c12:	4b0d      	ldr	r3, [pc, #52]	; (8017c48 <xTaskRemoveFromEventList+0xc0>)
 8017c14:	681b      	ldr	r3, [r3, #0]
 8017c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c18:	429a      	cmp	r2, r3
 8017c1a:	d905      	bls.n	8017c28 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8017c1c:	2301      	movs	r3, #1
 8017c1e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8017c20:	4b0a      	ldr	r3, [pc, #40]	; (8017c4c <xTaskRemoveFromEventList+0xc4>)
 8017c22:	2201      	movs	r2, #1
 8017c24:	601a      	str	r2, [r3, #0]
 8017c26:	e001      	b.n	8017c2c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8017c28:	2300      	movs	r3, #0
 8017c2a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8017c2c:	697b      	ldr	r3, [r7, #20]
}
 8017c2e:	4618      	mov	r0, r3
 8017c30:	3718      	adds	r7, #24
 8017c32:	46bd      	mov	sp, r7
 8017c34:	bd80      	pop	{r7, pc}
 8017c36:	bf00      	nop
 8017c38:	200014ec 	.word	0x200014ec
 8017c3c:	200014cc 	.word	0x200014cc
 8017c40:	20000ff4 	.word	0x20000ff4
 8017c44:	20001484 	.word	0x20001484
 8017c48:	20000ff0 	.word	0x20000ff0
 8017c4c:	200014d8 	.word	0x200014d8

08017c50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8017c50:	b480      	push	{r7}
 8017c52:	b083      	sub	sp, #12
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017c58:	4b06      	ldr	r3, [pc, #24]	; (8017c74 <vTaskInternalSetTimeOutState+0x24>)
 8017c5a:	681a      	ldr	r2, [r3, #0]
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017c60:	4b05      	ldr	r3, [pc, #20]	; (8017c78 <vTaskInternalSetTimeOutState+0x28>)
 8017c62:	681a      	ldr	r2, [r3, #0]
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	605a      	str	r2, [r3, #4]
}
 8017c68:	bf00      	nop
 8017c6a:	370c      	adds	r7, #12
 8017c6c:	46bd      	mov	sp, r7
 8017c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c72:	4770      	bx	lr
 8017c74:	200014dc 	.word	0x200014dc
 8017c78:	200014c8 	.word	0x200014c8

08017c7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8017c7c:	b580      	push	{r7, lr}
 8017c7e:	b088      	sub	sp, #32
 8017c80:	af00      	add	r7, sp, #0
 8017c82:	6078      	str	r0, [r7, #4]
 8017c84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d10a      	bne.n	8017ca2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8017c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c90:	f383 8811 	msr	BASEPRI, r3
 8017c94:	f3bf 8f6f 	isb	sy
 8017c98:	f3bf 8f4f 	dsb	sy
 8017c9c:	613b      	str	r3, [r7, #16]
}
 8017c9e:	bf00      	nop
 8017ca0:	e7fe      	b.n	8017ca0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8017ca2:	683b      	ldr	r3, [r7, #0]
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d10a      	bne.n	8017cbe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8017ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cac:	f383 8811 	msr	BASEPRI, r3
 8017cb0:	f3bf 8f6f 	isb	sy
 8017cb4:	f3bf 8f4f 	dsb	sy
 8017cb8:	60fb      	str	r3, [r7, #12]
}
 8017cba:	bf00      	nop
 8017cbc:	e7fe      	b.n	8017cbc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8017cbe:	f000 ff81 	bl	8018bc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8017cc2:	4b1d      	ldr	r3, [pc, #116]	; (8017d38 <xTaskCheckForTimeOut+0xbc>)
 8017cc4:	681b      	ldr	r3, [r3, #0]
 8017cc6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	685b      	ldr	r3, [r3, #4]
 8017ccc:	69ba      	ldr	r2, [r7, #24]
 8017cce:	1ad3      	subs	r3, r2, r3
 8017cd0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8017cd2:	683b      	ldr	r3, [r7, #0]
 8017cd4:	681b      	ldr	r3, [r3, #0]
 8017cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017cda:	d102      	bne.n	8017ce2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017cdc:	2300      	movs	r3, #0
 8017cde:	61fb      	str	r3, [r7, #28]
 8017ce0:	e023      	b.n	8017d2a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	681a      	ldr	r2, [r3, #0]
 8017ce6:	4b15      	ldr	r3, [pc, #84]	; (8017d3c <xTaskCheckForTimeOut+0xc0>)
 8017ce8:	681b      	ldr	r3, [r3, #0]
 8017cea:	429a      	cmp	r2, r3
 8017cec:	d007      	beq.n	8017cfe <xTaskCheckForTimeOut+0x82>
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	685b      	ldr	r3, [r3, #4]
 8017cf2:	69ba      	ldr	r2, [r7, #24]
 8017cf4:	429a      	cmp	r2, r3
 8017cf6:	d302      	bcc.n	8017cfe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8017cf8:	2301      	movs	r3, #1
 8017cfa:	61fb      	str	r3, [r7, #28]
 8017cfc:	e015      	b.n	8017d2a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8017cfe:	683b      	ldr	r3, [r7, #0]
 8017d00:	681b      	ldr	r3, [r3, #0]
 8017d02:	697a      	ldr	r2, [r7, #20]
 8017d04:	429a      	cmp	r2, r3
 8017d06:	d20b      	bcs.n	8017d20 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8017d08:	683b      	ldr	r3, [r7, #0]
 8017d0a:	681a      	ldr	r2, [r3, #0]
 8017d0c:	697b      	ldr	r3, [r7, #20]
 8017d0e:	1ad2      	subs	r2, r2, r3
 8017d10:	683b      	ldr	r3, [r7, #0]
 8017d12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8017d14:	6878      	ldr	r0, [r7, #4]
 8017d16:	f7ff ff9b 	bl	8017c50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8017d1a:	2300      	movs	r3, #0
 8017d1c:	61fb      	str	r3, [r7, #28]
 8017d1e:	e004      	b.n	8017d2a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8017d20:	683b      	ldr	r3, [r7, #0]
 8017d22:	2200      	movs	r2, #0
 8017d24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8017d26:	2301      	movs	r3, #1
 8017d28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8017d2a:	f000 ff7b 	bl	8018c24 <vPortExitCritical>

	return xReturn;
 8017d2e:	69fb      	ldr	r3, [r7, #28]
}
 8017d30:	4618      	mov	r0, r3
 8017d32:	3720      	adds	r7, #32
 8017d34:	46bd      	mov	sp, r7
 8017d36:	bd80      	pop	{r7, pc}
 8017d38:	200014c8 	.word	0x200014c8
 8017d3c:	200014dc 	.word	0x200014dc

08017d40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017d40:	b480      	push	{r7}
 8017d42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8017d44:	4b03      	ldr	r3, [pc, #12]	; (8017d54 <vTaskMissedYield+0x14>)
 8017d46:	2201      	movs	r2, #1
 8017d48:	601a      	str	r2, [r3, #0]
}
 8017d4a:	bf00      	nop
 8017d4c:	46bd      	mov	sp, r7
 8017d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d52:	4770      	bx	lr
 8017d54:	200014d8 	.word	0x200014d8

08017d58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8017d58:	b580      	push	{r7, lr}
 8017d5a:	b082      	sub	sp, #8
 8017d5c:	af00      	add	r7, sp, #0
 8017d5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8017d60:	f000 f852 	bl	8017e08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017d64:	4b06      	ldr	r3, [pc, #24]	; (8017d80 <prvIdleTask+0x28>)
 8017d66:	681b      	ldr	r3, [r3, #0]
 8017d68:	2b01      	cmp	r3, #1
 8017d6a:	d9f9      	bls.n	8017d60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8017d6c:	4b05      	ldr	r3, [pc, #20]	; (8017d84 <prvIdleTask+0x2c>)
 8017d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017d72:	601a      	str	r2, [r3, #0]
 8017d74:	f3bf 8f4f 	dsb	sy
 8017d78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8017d7c:	e7f0      	b.n	8017d60 <prvIdleTask+0x8>
 8017d7e:	bf00      	nop
 8017d80:	20000ff4 	.word	0x20000ff4
 8017d84:	e000ed04 	.word	0xe000ed04

08017d88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017d88:	b580      	push	{r7, lr}
 8017d8a:	b082      	sub	sp, #8
 8017d8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017d8e:	2300      	movs	r3, #0
 8017d90:	607b      	str	r3, [r7, #4]
 8017d92:	e00c      	b.n	8017dae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017d94:	687a      	ldr	r2, [r7, #4]
 8017d96:	4613      	mov	r3, r2
 8017d98:	009b      	lsls	r3, r3, #2
 8017d9a:	4413      	add	r3, r2
 8017d9c:	009b      	lsls	r3, r3, #2
 8017d9e:	4a12      	ldr	r2, [pc, #72]	; (8017de8 <prvInitialiseTaskLists+0x60>)
 8017da0:	4413      	add	r3, r2
 8017da2:	4618      	mov	r0, r3
 8017da4:	f7fe f9a8 	bl	80160f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	3301      	adds	r3, #1
 8017dac:	607b      	str	r3, [r7, #4]
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	2b37      	cmp	r3, #55	; 0x37
 8017db2:	d9ef      	bls.n	8017d94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8017db4:	480d      	ldr	r0, [pc, #52]	; (8017dec <prvInitialiseTaskLists+0x64>)
 8017db6:	f7fe f99f 	bl	80160f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8017dba:	480d      	ldr	r0, [pc, #52]	; (8017df0 <prvInitialiseTaskLists+0x68>)
 8017dbc:	f7fe f99c 	bl	80160f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8017dc0:	480c      	ldr	r0, [pc, #48]	; (8017df4 <prvInitialiseTaskLists+0x6c>)
 8017dc2:	f7fe f999 	bl	80160f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8017dc6:	480c      	ldr	r0, [pc, #48]	; (8017df8 <prvInitialiseTaskLists+0x70>)
 8017dc8:	f7fe f996 	bl	80160f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8017dcc:	480b      	ldr	r0, [pc, #44]	; (8017dfc <prvInitialiseTaskLists+0x74>)
 8017dce:	f7fe f993 	bl	80160f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8017dd2:	4b0b      	ldr	r3, [pc, #44]	; (8017e00 <prvInitialiseTaskLists+0x78>)
 8017dd4:	4a05      	ldr	r2, [pc, #20]	; (8017dec <prvInitialiseTaskLists+0x64>)
 8017dd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017dd8:	4b0a      	ldr	r3, [pc, #40]	; (8017e04 <prvInitialiseTaskLists+0x7c>)
 8017dda:	4a05      	ldr	r2, [pc, #20]	; (8017df0 <prvInitialiseTaskLists+0x68>)
 8017ddc:	601a      	str	r2, [r3, #0]
}
 8017dde:	bf00      	nop
 8017de0:	3708      	adds	r7, #8
 8017de2:	46bd      	mov	sp, r7
 8017de4:	bd80      	pop	{r7, pc}
 8017de6:	bf00      	nop
 8017de8:	20000ff4 	.word	0x20000ff4
 8017dec:	20001454 	.word	0x20001454
 8017df0:	20001468 	.word	0x20001468
 8017df4:	20001484 	.word	0x20001484
 8017df8:	20001498 	.word	0x20001498
 8017dfc:	200014b0 	.word	0x200014b0
 8017e00:	2000147c 	.word	0x2000147c
 8017e04:	20001480 	.word	0x20001480

08017e08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017e08:	b580      	push	{r7, lr}
 8017e0a:	b082      	sub	sp, #8
 8017e0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017e0e:	e019      	b.n	8017e44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8017e10:	f000 fed8 	bl	8018bc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017e14:	4b10      	ldr	r3, [pc, #64]	; (8017e58 <prvCheckTasksWaitingTermination+0x50>)
 8017e16:	68db      	ldr	r3, [r3, #12]
 8017e18:	68db      	ldr	r3, [r3, #12]
 8017e1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	3304      	adds	r3, #4
 8017e20:	4618      	mov	r0, r3
 8017e22:	f7fe f9f3 	bl	801620c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8017e26:	4b0d      	ldr	r3, [pc, #52]	; (8017e5c <prvCheckTasksWaitingTermination+0x54>)
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	3b01      	subs	r3, #1
 8017e2c:	4a0b      	ldr	r2, [pc, #44]	; (8017e5c <prvCheckTasksWaitingTermination+0x54>)
 8017e2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017e30:	4b0b      	ldr	r3, [pc, #44]	; (8017e60 <prvCheckTasksWaitingTermination+0x58>)
 8017e32:	681b      	ldr	r3, [r3, #0]
 8017e34:	3b01      	subs	r3, #1
 8017e36:	4a0a      	ldr	r2, [pc, #40]	; (8017e60 <prvCheckTasksWaitingTermination+0x58>)
 8017e38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8017e3a:	f000 fef3 	bl	8018c24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8017e3e:	6878      	ldr	r0, [r7, #4]
 8017e40:	f000 f810 	bl	8017e64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017e44:	4b06      	ldr	r3, [pc, #24]	; (8017e60 <prvCheckTasksWaitingTermination+0x58>)
 8017e46:	681b      	ldr	r3, [r3, #0]
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	d1e1      	bne.n	8017e10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017e4c:	bf00      	nop
 8017e4e:	bf00      	nop
 8017e50:	3708      	adds	r7, #8
 8017e52:	46bd      	mov	sp, r7
 8017e54:	bd80      	pop	{r7, pc}
 8017e56:	bf00      	nop
 8017e58:	20001498 	.word	0x20001498
 8017e5c:	200014c4 	.word	0x200014c4
 8017e60:	200014ac 	.word	0x200014ac

08017e64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8017e64:	b580      	push	{r7, lr}
 8017e66:	b084      	sub	sp, #16
 8017e68:	af00      	add	r7, sp, #0
 8017e6a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	3354      	adds	r3, #84	; 0x54
 8017e70:	4618      	mov	r0, r3
 8017e72:	f003 fbbd 	bl	801b5f0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	d108      	bne.n	8017e92 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e84:	4618      	mov	r0, r3
 8017e86:	f001 f88b 	bl	8018fa0 <vPortFree>
				vPortFree( pxTCB );
 8017e8a:	6878      	ldr	r0, [r7, #4]
 8017e8c:	f001 f888 	bl	8018fa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8017e90:	e018      	b.n	8017ec4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8017e98:	2b01      	cmp	r3, #1
 8017e9a:	d103      	bne.n	8017ea4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8017e9c:	6878      	ldr	r0, [r7, #4]
 8017e9e:	f001 f87f 	bl	8018fa0 <vPortFree>
	}
 8017ea2:	e00f      	b.n	8017ec4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8017eaa:	2b02      	cmp	r3, #2
 8017eac:	d00a      	beq.n	8017ec4 <prvDeleteTCB+0x60>
	__asm volatile
 8017eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017eb2:	f383 8811 	msr	BASEPRI, r3
 8017eb6:	f3bf 8f6f 	isb	sy
 8017eba:	f3bf 8f4f 	dsb	sy
 8017ebe:	60fb      	str	r3, [r7, #12]
}
 8017ec0:	bf00      	nop
 8017ec2:	e7fe      	b.n	8017ec2 <prvDeleteTCB+0x5e>
	}
 8017ec4:	bf00      	nop
 8017ec6:	3710      	adds	r7, #16
 8017ec8:	46bd      	mov	sp, r7
 8017eca:	bd80      	pop	{r7, pc}

08017ecc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017ecc:	b480      	push	{r7}
 8017ece:	b083      	sub	sp, #12
 8017ed0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017ed2:	4b0c      	ldr	r3, [pc, #48]	; (8017f04 <prvResetNextTaskUnblockTime+0x38>)
 8017ed4:	681b      	ldr	r3, [r3, #0]
 8017ed6:	681b      	ldr	r3, [r3, #0]
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d104      	bne.n	8017ee6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017edc:	4b0a      	ldr	r3, [pc, #40]	; (8017f08 <prvResetNextTaskUnblockTime+0x3c>)
 8017ede:	f04f 32ff 	mov.w	r2, #4294967295
 8017ee2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8017ee4:	e008      	b.n	8017ef8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017ee6:	4b07      	ldr	r3, [pc, #28]	; (8017f04 <prvResetNextTaskUnblockTime+0x38>)
 8017ee8:	681b      	ldr	r3, [r3, #0]
 8017eea:	68db      	ldr	r3, [r3, #12]
 8017eec:	68db      	ldr	r3, [r3, #12]
 8017eee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	685b      	ldr	r3, [r3, #4]
 8017ef4:	4a04      	ldr	r2, [pc, #16]	; (8017f08 <prvResetNextTaskUnblockTime+0x3c>)
 8017ef6:	6013      	str	r3, [r2, #0]
}
 8017ef8:	bf00      	nop
 8017efa:	370c      	adds	r7, #12
 8017efc:	46bd      	mov	sp, r7
 8017efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f02:	4770      	bx	lr
 8017f04:	2000147c 	.word	0x2000147c
 8017f08:	200014e4 	.word	0x200014e4

08017f0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017f0c:	b480      	push	{r7}
 8017f0e:	b083      	sub	sp, #12
 8017f10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8017f12:	4b0b      	ldr	r3, [pc, #44]	; (8017f40 <xTaskGetSchedulerState+0x34>)
 8017f14:	681b      	ldr	r3, [r3, #0]
 8017f16:	2b00      	cmp	r3, #0
 8017f18:	d102      	bne.n	8017f20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8017f1a:	2301      	movs	r3, #1
 8017f1c:	607b      	str	r3, [r7, #4]
 8017f1e:	e008      	b.n	8017f32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017f20:	4b08      	ldr	r3, [pc, #32]	; (8017f44 <xTaskGetSchedulerState+0x38>)
 8017f22:	681b      	ldr	r3, [r3, #0]
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	d102      	bne.n	8017f2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8017f28:	2302      	movs	r3, #2
 8017f2a:	607b      	str	r3, [r7, #4]
 8017f2c:	e001      	b.n	8017f32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8017f2e:	2300      	movs	r3, #0
 8017f30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8017f32:	687b      	ldr	r3, [r7, #4]
	}
 8017f34:	4618      	mov	r0, r3
 8017f36:	370c      	adds	r7, #12
 8017f38:	46bd      	mov	sp, r7
 8017f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f3e:	4770      	bx	lr
 8017f40:	200014d0 	.word	0x200014d0
 8017f44:	200014ec 	.word	0x200014ec

08017f48 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8017f48:	b580      	push	{r7, lr}
 8017f4a:	b084      	sub	sp, #16
 8017f4c:	af00      	add	r7, sp, #0
 8017f4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8017f54:	2300      	movs	r3, #0
 8017f56:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d051      	beq.n	8018002 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8017f5e:	68bb      	ldr	r3, [r7, #8]
 8017f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f62:	4b2a      	ldr	r3, [pc, #168]	; (801800c <xTaskPriorityInherit+0xc4>)
 8017f64:	681b      	ldr	r3, [r3, #0]
 8017f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f68:	429a      	cmp	r2, r3
 8017f6a:	d241      	bcs.n	8017ff0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017f6c:	68bb      	ldr	r3, [r7, #8]
 8017f6e:	699b      	ldr	r3, [r3, #24]
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	db06      	blt.n	8017f82 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017f74:	4b25      	ldr	r3, [pc, #148]	; (801800c <xTaskPriorityInherit+0xc4>)
 8017f76:	681b      	ldr	r3, [r3, #0]
 8017f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017f7e:	68bb      	ldr	r3, [r7, #8]
 8017f80:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8017f82:	68bb      	ldr	r3, [r7, #8]
 8017f84:	6959      	ldr	r1, [r3, #20]
 8017f86:	68bb      	ldr	r3, [r7, #8]
 8017f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f8a:	4613      	mov	r3, r2
 8017f8c:	009b      	lsls	r3, r3, #2
 8017f8e:	4413      	add	r3, r2
 8017f90:	009b      	lsls	r3, r3, #2
 8017f92:	4a1f      	ldr	r2, [pc, #124]	; (8018010 <xTaskPriorityInherit+0xc8>)
 8017f94:	4413      	add	r3, r2
 8017f96:	4299      	cmp	r1, r3
 8017f98:	d122      	bne.n	8017fe0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017f9a:	68bb      	ldr	r3, [r7, #8]
 8017f9c:	3304      	adds	r3, #4
 8017f9e:	4618      	mov	r0, r3
 8017fa0:	f7fe f934 	bl	801620c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017fa4:	4b19      	ldr	r3, [pc, #100]	; (801800c <xTaskPriorityInherit+0xc4>)
 8017fa6:	681b      	ldr	r3, [r3, #0]
 8017fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017faa:	68bb      	ldr	r3, [r7, #8]
 8017fac:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8017fae:	68bb      	ldr	r3, [r7, #8]
 8017fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017fb2:	4b18      	ldr	r3, [pc, #96]	; (8018014 <xTaskPriorityInherit+0xcc>)
 8017fb4:	681b      	ldr	r3, [r3, #0]
 8017fb6:	429a      	cmp	r2, r3
 8017fb8:	d903      	bls.n	8017fc2 <xTaskPriorityInherit+0x7a>
 8017fba:	68bb      	ldr	r3, [r7, #8]
 8017fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fbe:	4a15      	ldr	r2, [pc, #84]	; (8018014 <xTaskPriorityInherit+0xcc>)
 8017fc0:	6013      	str	r3, [r2, #0]
 8017fc2:	68bb      	ldr	r3, [r7, #8]
 8017fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017fc6:	4613      	mov	r3, r2
 8017fc8:	009b      	lsls	r3, r3, #2
 8017fca:	4413      	add	r3, r2
 8017fcc:	009b      	lsls	r3, r3, #2
 8017fce:	4a10      	ldr	r2, [pc, #64]	; (8018010 <xTaskPriorityInherit+0xc8>)
 8017fd0:	441a      	add	r2, r3
 8017fd2:	68bb      	ldr	r3, [r7, #8]
 8017fd4:	3304      	adds	r3, #4
 8017fd6:	4619      	mov	r1, r3
 8017fd8:	4610      	mov	r0, r2
 8017fda:	f7fe f8ba 	bl	8016152 <vListInsertEnd>
 8017fde:	e004      	b.n	8017fea <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017fe0:	4b0a      	ldr	r3, [pc, #40]	; (801800c <xTaskPriorityInherit+0xc4>)
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017fe6:	68bb      	ldr	r3, [r7, #8]
 8017fe8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8017fea:	2301      	movs	r3, #1
 8017fec:	60fb      	str	r3, [r7, #12]
 8017fee:	e008      	b.n	8018002 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8017ff0:	68bb      	ldr	r3, [r7, #8]
 8017ff2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017ff4:	4b05      	ldr	r3, [pc, #20]	; (801800c <xTaskPriorityInherit+0xc4>)
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ffa:	429a      	cmp	r2, r3
 8017ffc:	d201      	bcs.n	8018002 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8017ffe:	2301      	movs	r3, #1
 8018000:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018002:	68fb      	ldr	r3, [r7, #12]
	}
 8018004:	4618      	mov	r0, r3
 8018006:	3710      	adds	r7, #16
 8018008:	46bd      	mov	sp, r7
 801800a:	bd80      	pop	{r7, pc}
 801800c:	20000ff0 	.word	0x20000ff0
 8018010:	20000ff4 	.word	0x20000ff4
 8018014:	200014cc 	.word	0x200014cc

08018018 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018018:	b580      	push	{r7, lr}
 801801a:	b086      	sub	sp, #24
 801801c:	af00      	add	r7, sp, #0
 801801e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018024:	2300      	movs	r3, #0
 8018026:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	2b00      	cmp	r3, #0
 801802c:	d056      	beq.n	80180dc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801802e:	4b2e      	ldr	r3, [pc, #184]	; (80180e8 <xTaskPriorityDisinherit+0xd0>)
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	693a      	ldr	r2, [r7, #16]
 8018034:	429a      	cmp	r2, r3
 8018036:	d00a      	beq.n	801804e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8018038:	f04f 0350 	mov.w	r3, #80	; 0x50
 801803c:	f383 8811 	msr	BASEPRI, r3
 8018040:	f3bf 8f6f 	isb	sy
 8018044:	f3bf 8f4f 	dsb	sy
 8018048:	60fb      	str	r3, [r7, #12]
}
 801804a:	bf00      	nop
 801804c:	e7fe      	b.n	801804c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801804e:	693b      	ldr	r3, [r7, #16]
 8018050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018052:	2b00      	cmp	r3, #0
 8018054:	d10a      	bne.n	801806c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8018056:	f04f 0350 	mov.w	r3, #80	; 0x50
 801805a:	f383 8811 	msr	BASEPRI, r3
 801805e:	f3bf 8f6f 	isb	sy
 8018062:	f3bf 8f4f 	dsb	sy
 8018066:	60bb      	str	r3, [r7, #8]
}
 8018068:	bf00      	nop
 801806a:	e7fe      	b.n	801806a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801806c:	693b      	ldr	r3, [r7, #16]
 801806e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018070:	1e5a      	subs	r2, r3, #1
 8018072:	693b      	ldr	r3, [r7, #16]
 8018074:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018076:	693b      	ldr	r3, [r7, #16]
 8018078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801807a:	693b      	ldr	r3, [r7, #16]
 801807c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801807e:	429a      	cmp	r2, r3
 8018080:	d02c      	beq.n	80180dc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018082:	693b      	ldr	r3, [r7, #16]
 8018084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018086:	2b00      	cmp	r3, #0
 8018088:	d128      	bne.n	80180dc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801808a:	693b      	ldr	r3, [r7, #16]
 801808c:	3304      	adds	r3, #4
 801808e:	4618      	mov	r0, r3
 8018090:	f7fe f8bc 	bl	801620c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018094:	693b      	ldr	r3, [r7, #16]
 8018096:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018098:	693b      	ldr	r3, [r7, #16]
 801809a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801809c:	693b      	ldr	r3, [r7, #16]
 801809e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80180a4:	693b      	ldr	r3, [r7, #16]
 80180a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80180a8:	693b      	ldr	r3, [r7, #16]
 80180aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80180ac:	4b0f      	ldr	r3, [pc, #60]	; (80180ec <xTaskPriorityDisinherit+0xd4>)
 80180ae:	681b      	ldr	r3, [r3, #0]
 80180b0:	429a      	cmp	r2, r3
 80180b2:	d903      	bls.n	80180bc <xTaskPriorityDisinherit+0xa4>
 80180b4:	693b      	ldr	r3, [r7, #16]
 80180b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180b8:	4a0c      	ldr	r2, [pc, #48]	; (80180ec <xTaskPriorityDisinherit+0xd4>)
 80180ba:	6013      	str	r3, [r2, #0]
 80180bc:	693b      	ldr	r3, [r7, #16]
 80180be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80180c0:	4613      	mov	r3, r2
 80180c2:	009b      	lsls	r3, r3, #2
 80180c4:	4413      	add	r3, r2
 80180c6:	009b      	lsls	r3, r3, #2
 80180c8:	4a09      	ldr	r2, [pc, #36]	; (80180f0 <xTaskPriorityDisinherit+0xd8>)
 80180ca:	441a      	add	r2, r3
 80180cc:	693b      	ldr	r3, [r7, #16]
 80180ce:	3304      	adds	r3, #4
 80180d0:	4619      	mov	r1, r3
 80180d2:	4610      	mov	r0, r2
 80180d4:	f7fe f83d 	bl	8016152 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80180d8:	2301      	movs	r3, #1
 80180da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80180dc:	697b      	ldr	r3, [r7, #20]
	}
 80180de:	4618      	mov	r0, r3
 80180e0:	3718      	adds	r7, #24
 80180e2:	46bd      	mov	sp, r7
 80180e4:	bd80      	pop	{r7, pc}
 80180e6:	bf00      	nop
 80180e8:	20000ff0 	.word	0x20000ff0
 80180ec:	200014cc 	.word	0x200014cc
 80180f0:	20000ff4 	.word	0x20000ff4

080180f4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80180f4:	b580      	push	{r7, lr}
 80180f6:	b088      	sub	sp, #32
 80180f8:	af00      	add	r7, sp, #0
 80180fa:	6078      	str	r0, [r7, #4]
 80180fc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8018102:	2301      	movs	r3, #1
 8018104:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	2b00      	cmp	r3, #0
 801810a:	d06a      	beq.n	80181e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801810c:	69bb      	ldr	r3, [r7, #24]
 801810e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018110:	2b00      	cmp	r3, #0
 8018112:	d10a      	bne.n	801812a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8018114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018118:	f383 8811 	msr	BASEPRI, r3
 801811c:	f3bf 8f6f 	isb	sy
 8018120:	f3bf 8f4f 	dsb	sy
 8018124:	60fb      	str	r3, [r7, #12]
}
 8018126:	bf00      	nop
 8018128:	e7fe      	b.n	8018128 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801812a:	69bb      	ldr	r3, [r7, #24]
 801812c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801812e:	683a      	ldr	r2, [r7, #0]
 8018130:	429a      	cmp	r2, r3
 8018132:	d902      	bls.n	801813a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8018134:	683b      	ldr	r3, [r7, #0]
 8018136:	61fb      	str	r3, [r7, #28]
 8018138:	e002      	b.n	8018140 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801813a:	69bb      	ldr	r3, [r7, #24]
 801813c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801813e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8018140:	69bb      	ldr	r3, [r7, #24]
 8018142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018144:	69fa      	ldr	r2, [r7, #28]
 8018146:	429a      	cmp	r2, r3
 8018148:	d04b      	beq.n	80181e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801814a:	69bb      	ldr	r3, [r7, #24]
 801814c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801814e:	697a      	ldr	r2, [r7, #20]
 8018150:	429a      	cmp	r2, r3
 8018152:	d146      	bne.n	80181e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8018154:	4b25      	ldr	r3, [pc, #148]	; (80181ec <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8018156:	681b      	ldr	r3, [r3, #0]
 8018158:	69ba      	ldr	r2, [r7, #24]
 801815a:	429a      	cmp	r2, r3
 801815c:	d10a      	bne.n	8018174 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801815e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018162:	f383 8811 	msr	BASEPRI, r3
 8018166:	f3bf 8f6f 	isb	sy
 801816a:	f3bf 8f4f 	dsb	sy
 801816e:	60bb      	str	r3, [r7, #8]
}
 8018170:	bf00      	nop
 8018172:	e7fe      	b.n	8018172 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8018174:	69bb      	ldr	r3, [r7, #24]
 8018176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018178:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801817a:	69bb      	ldr	r3, [r7, #24]
 801817c:	69fa      	ldr	r2, [r7, #28]
 801817e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018180:	69bb      	ldr	r3, [r7, #24]
 8018182:	699b      	ldr	r3, [r3, #24]
 8018184:	2b00      	cmp	r3, #0
 8018186:	db04      	blt.n	8018192 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018188:	69fb      	ldr	r3, [r7, #28]
 801818a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801818e:	69bb      	ldr	r3, [r7, #24]
 8018190:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018192:	69bb      	ldr	r3, [r7, #24]
 8018194:	6959      	ldr	r1, [r3, #20]
 8018196:	693a      	ldr	r2, [r7, #16]
 8018198:	4613      	mov	r3, r2
 801819a:	009b      	lsls	r3, r3, #2
 801819c:	4413      	add	r3, r2
 801819e:	009b      	lsls	r3, r3, #2
 80181a0:	4a13      	ldr	r2, [pc, #76]	; (80181f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80181a2:	4413      	add	r3, r2
 80181a4:	4299      	cmp	r1, r3
 80181a6:	d11c      	bne.n	80181e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80181a8:	69bb      	ldr	r3, [r7, #24]
 80181aa:	3304      	adds	r3, #4
 80181ac:	4618      	mov	r0, r3
 80181ae:	f7fe f82d 	bl	801620c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80181b2:	69bb      	ldr	r3, [r7, #24]
 80181b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80181b6:	4b0f      	ldr	r3, [pc, #60]	; (80181f4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80181b8:	681b      	ldr	r3, [r3, #0]
 80181ba:	429a      	cmp	r2, r3
 80181bc:	d903      	bls.n	80181c6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80181be:	69bb      	ldr	r3, [r7, #24]
 80181c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181c2:	4a0c      	ldr	r2, [pc, #48]	; (80181f4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80181c4:	6013      	str	r3, [r2, #0]
 80181c6:	69bb      	ldr	r3, [r7, #24]
 80181c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80181ca:	4613      	mov	r3, r2
 80181cc:	009b      	lsls	r3, r3, #2
 80181ce:	4413      	add	r3, r2
 80181d0:	009b      	lsls	r3, r3, #2
 80181d2:	4a07      	ldr	r2, [pc, #28]	; (80181f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80181d4:	441a      	add	r2, r3
 80181d6:	69bb      	ldr	r3, [r7, #24]
 80181d8:	3304      	adds	r3, #4
 80181da:	4619      	mov	r1, r3
 80181dc:	4610      	mov	r0, r2
 80181de:	f7fd ffb8 	bl	8016152 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80181e2:	bf00      	nop
 80181e4:	3720      	adds	r7, #32
 80181e6:	46bd      	mov	sp, r7
 80181e8:	bd80      	pop	{r7, pc}
 80181ea:	bf00      	nop
 80181ec:	20000ff0 	.word	0x20000ff0
 80181f0:	20000ff4 	.word	0x20000ff4
 80181f4:	200014cc 	.word	0x200014cc

080181f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80181f8:	b480      	push	{r7}
 80181fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80181fc:	4b07      	ldr	r3, [pc, #28]	; (801821c <pvTaskIncrementMutexHeldCount+0x24>)
 80181fe:	681b      	ldr	r3, [r3, #0]
 8018200:	2b00      	cmp	r3, #0
 8018202:	d004      	beq.n	801820e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8018204:	4b05      	ldr	r3, [pc, #20]	; (801821c <pvTaskIncrementMutexHeldCount+0x24>)
 8018206:	681b      	ldr	r3, [r3, #0]
 8018208:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801820a:	3201      	adds	r2, #1
 801820c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801820e:	4b03      	ldr	r3, [pc, #12]	; (801821c <pvTaskIncrementMutexHeldCount+0x24>)
 8018210:	681b      	ldr	r3, [r3, #0]
	}
 8018212:	4618      	mov	r0, r3
 8018214:	46bd      	mov	sp, r7
 8018216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801821a:	4770      	bx	lr
 801821c:	20000ff0 	.word	0x20000ff0

08018220 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018220:	b580      	push	{r7, lr}
 8018222:	b084      	sub	sp, #16
 8018224:	af00      	add	r7, sp, #0
 8018226:	6078      	str	r0, [r7, #4]
 8018228:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801822a:	4b21      	ldr	r3, [pc, #132]	; (80182b0 <prvAddCurrentTaskToDelayedList+0x90>)
 801822c:	681b      	ldr	r3, [r3, #0]
 801822e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018230:	4b20      	ldr	r3, [pc, #128]	; (80182b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8018232:	681b      	ldr	r3, [r3, #0]
 8018234:	3304      	adds	r3, #4
 8018236:	4618      	mov	r0, r3
 8018238:	f7fd ffe8 	bl	801620c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801823c:	687b      	ldr	r3, [r7, #4]
 801823e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018242:	d10a      	bne.n	801825a <prvAddCurrentTaskToDelayedList+0x3a>
 8018244:	683b      	ldr	r3, [r7, #0]
 8018246:	2b00      	cmp	r3, #0
 8018248:	d007      	beq.n	801825a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801824a:	4b1a      	ldr	r3, [pc, #104]	; (80182b4 <prvAddCurrentTaskToDelayedList+0x94>)
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	3304      	adds	r3, #4
 8018250:	4619      	mov	r1, r3
 8018252:	4819      	ldr	r0, [pc, #100]	; (80182b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8018254:	f7fd ff7d 	bl	8016152 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018258:	e026      	b.n	80182a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801825a:	68fa      	ldr	r2, [r7, #12]
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	4413      	add	r3, r2
 8018260:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018262:	4b14      	ldr	r3, [pc, #80]	; (80182b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8018264:	681b      	ldr	r3, [r3, #0]
 8018266:	68ba      	ldr	r2, [r7, #8]
 8018268:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801826a:	68ba      	ldr	r2, [r7, #8]
 801826c:	68fb      	ldr	r3, [r7, #12]
 801826e:	429a      	cmp	r2, r3
 8018270:	d209      	bcs.n	8018286 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018272:	4b12      	ldr	r3, [pc, #72]	; (80182bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8018274:	681a      	ldr	r2, [r3, #0]
 8018276:	4b0f      	ldr	r3, [pc, #60]	; (80182b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8018278:	681b      	ldr	r3, [r3, #0]
 801827a:	3304      	adds	r3, #4
 801827c:	4619      	mov	r1, r3
 801827e:	4610      	mov	r0, r2
 8018280:	f7fd ff8b 	bl	801619a <vListInsert>
}
 8018284:	e010      	b.n	80182a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018286:	4b0e      	ldr	r3, [pc, #56]	; (80182c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8018288:	681a      	ldr	r2, [r3, #0]
 801828a:	4b0a      	ldr	r3, [pc, #40]	; (80182b4 <prvAddCurrentTaskToDelayedList+0x94>)
 801828c:	681b      	ldr	r3, [r3, #0]
 801828e:	3304      	adds	r3, #4
 8018290:	4619      	mov	r1, r3
 8018292:	4610      	mov	r0, r2
 8018294:	f7fd ff81 	bl	801619a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018298:	4b0a      	ldr	r3, [pc, #40]	; (80182c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	68ba      	ldr	r2, [r7, #8]
 801829e:	429a      	cmp	r2, r3
 80182a0:	d202      	bcs.n	80182a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80182a2:	4a08      	ldr	r2, [pc, #32]	; (80182c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80182a4:	68bb      	ldr	r3, [r7, #8]
 80182a6:	6013      	str	r3, [r2, #0]
}
 80182a8:	bf00      	nop
 80182aa:	3710      	adds	r7, #16
 80182ac:	46bd      	mov	sp, r7
 80182ae:	bd80      	pop	{r7, pc}
 80182b0:	200014c8 	.word	0x200014c8
 80182b4:	20000ff0 	.word	0x20000ff0
 80182b8:	200014b0 	.word	0x200014b0
 80182bc:	20001480 	.word	0x20001480
 80182c0:	2000147c 	.word	0x2000147c
 80182c4:	200014e4 	.word	0x200014e4

080182c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80182c8:	b580      	push	{r7, lr}
 80182ca:	b08a      	sub	sp, #40	; 0x28
 80182cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80182ce:	2300      	movs	r3, #0
 80182d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80182d2:	f000 fb07 	bl	80188e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80182d6:	4b1c      	ldr	r3, [pc, #112]	; (8018348 <xTimerCreateTimerTask+0x80>)
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	2b00      	cmp	r3, #0
 80182dc:	d021      	beq.n	8018322 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80182de:	2300      	movs	r3, #0
 80182e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80182e2:	2300      	movs	r3, #0
 80182e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80182e6:	1d3a      	adds	r2, r7, #4
 80182e8:	f107 0108 	add.w	r1, r7, #8
 80182ec:	f107 030c 	add.w	r3, r7, #12
 80182f0:	4618      	mov	r0, r3
 80182f2:	f7fd fee7 	bl	80160c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80182f6:	6879      	ldr	r1, [r7, #4]
 80182f8:	68bb      	ldr	r3, [r7, #8]
 80182fa:	68fa      	ldr	r2, [r7, #12]
 80182fc:	9202      	str	r2, [sp, #8]
 80182fe:	9301      	str	r3, [sp, #4]
 8018300:	2302      	movs	r3, #2
 8018302:	9300      	str	r3, [sp, #0]
 8018304:	2300      	movs	r3, #0
 8018306:	460a      	mov	r2, r1
 8018308:	4910      	ldr	r1, [pc, #64]	; (801834c <xTimerCreateTimerTask+0x84>)
 801830a:	4811      	ldr	r0, [pc, #68]	; (8018350 <xTimerCreateTimerTask+0x88>)
 801830c:	f7fe ffb6 	bl	801727c <xTaskCreateStatic>
 8018310:	4603      	mov	r3, r0
 8018312:	4a10      	ldr	r2, [pc, #64]	; (8018354 <xTimerCreateTimerTask+0x8c>)
 8018314:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8018316:	4b0f      	ldr	r3, [pc, #60]	; (8018354 <xTimerCreateTimerTask+0x8c>)
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	2b00      	cmp	r3, #0
 801831c:	d001      	beq.n	8018322 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801831e:	2301      	movs	r3, #1
 8018320:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8018322:	697b      	ldr	r3, [r7, #20]
 8018324:	2b00      	cmp	r3, #0
 8018326:	d10a      	bne.n	801833e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8018328:	f04f 0350 	mov.w	r3, #80	; 0x50
 801832c:	f383 8811 	msr	BASEPRI, r3
 8018330:	f3bf 8f6f 	isb	sy
 8018334:	f3bf 8f4f 	dsb	sy
 8018338:	613b      	str	r3, [r7, #16]
}
 801833a:	bf00      	nop
 801833c:	e7fe      	b.n	801833c <xTimerCreateTimerTask+0x74>
	return xReturn;
 801833e:	697b      	ldr	r3, [r7, #20]
}
 8018340:	4618      	mov	r0, r3
 8018342:	3718      	adds	r7, #24
 8018344:	46bd      	mov	sp, r7
 8018346:	bd80      	pop	{r7, pc}
 8018348:	20001520 	.word	0x20001520
 801834c:	08021dac 	.word	0x08021dac
 8018350:	0801848d 	.word	0x0801848d
 8018354:	20001524 	.word	0x20001524

08018358 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018358:	b580      	push	{r7, lr}
 801835a:	b08a      	sub	sp, #40	; 0x28
 801835c:	af00      	add	r7, sp, #0
 801835e:	60f8      	str	r0, [r7, #12]
 8018360:	60b9      	str	r1, [r7, #8]
 8018362:	607a      	str	r2, [r7, #4]
 8018364:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8018366:	2300      	movs	r3, #0
 8018368:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801836a:	68fb      	ldr	r3, [r7, #12]
 801836c:	2b00      	cmp	r3, #0
 801836e:	d10a      	bne.n	8018386 <xTimerGenericCommand+0x2e>
	__asm volatile
 8018370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018374:	f383 8811 	msr	BASEPRI, r3
 8018378:	f3bf 8f6f 	isb	sy
 801837c:	f3bf 8f4f 	dsb	sy
 8018380:	623b      	str	r3, [r7, #32]
}
 8018382:	bf00      	nop
 8018384:	e7fe      	b.n	8018384 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018386:	4b1a      	ldr	r3, [pc, #104]	; (80183f0 <xTimerGenericCommand+0x98>)
 8018388:	681b      	ldr	r3, [r3, #0]
 801838a:	2b00      	cmp	r3, #0
 801838c:	d02a      	beq.n	80183e4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801838e:	68bb      	ldr	r3, [r7, #8]
 8018390:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8018396:	68fb      	ldr	r3, [r7, #12]
 8018398:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801839a:	68bb      	ldr	r3, [r7, #8]
 801839c:	2b05      	cmp	r3, #5
 801839e:	dc18      	bgt.n	80183d2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80183a0:	f7ff fdb4 	bl	8017f0c <xTaskGetSchedulerState>
 80183a4:	4603      	mov	r3, r0
 80183a6:	2b02      	cmp	r3, #2
 80183a8:	d109      	bne.n	80183be <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80183aa:	4b11      	ldr	r3, [pc, #68]	; (80183f0 <xTimerGenericCommand+0x98>)
 80183ac:	6818      	ldr	r0, [r3, #0]
 80183ae:	f107 0110 	add.w	r1, r7, #16
 80183b2:	2300      	movs	r3, #0
 80183b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80183b6:	f7fe f8fb 	bl	80165b0 <xQueueGenericSend>
 80183ba:	6278      	str	r0, [r7, #36]	; 0x24
 80183bc:	e012      	b.n	80183e4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80183be:	4b0c      	ldr	r3, [pc, #48]	; (80183f0 <xTimerGenericCommand+0x98>)
 80183c0:	6818      	ldr	r0, [r3, #0]
 80183c2:	f107 0110 	add.w	r1, r7, #16
 80183c6:	2300      	movs	r3, #0
 80183c8:	2200      	movs	r2, #0
 80183ca:	f7fe f8f1 	bl	80165b0 <xQueueGenericSend>
 80183ce:	6278      	str	r0, [r7, #36]	; 0x24
 80183d0:	e008      	b.n	80183e4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80183d2:	4b07      	ldr	r3, [pc, #28]	; (80183f0 <xTimerGenericCommand+0x98>)
 80183d4:	6818      	ldr	r0, [r3, #0]
 80183d6:	f107 0110 	add.w	r1, r7, #16
 80183da:	2300      	movs	r3, #0
 80183dc:	683a      	ldr	r2, [r7, #0]
 80183de:	f7fe f9e5 	bl	80167ac <xQueueGenericSendFromISR>
 80183e2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80183e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80183e6:	4618      	mov	r0, r3
 80183e8:	3728      	adds	r7, #40	; 0x28
 80183ea:	46bd      	mov	sp, r7
 80183ec:	bd80      	pop	{r7, pc}
 80183ee:	bf00      	nop
 80183f0:	20001520 	.word	0x20001520

080183f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80183f4:	b580      	push	{r7, lr}
 80183f6:	b088      	sub	sp, #32
 80183f8:	af02      	add	r7, sp, #8
 80183fa:	6078      	str	r0, [r7, #4]
 80183fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80183fe:	4b22      	ldr	r3, [pc, #136]	; (8018488 <prvProcessExpiredTimer+0x94>)
 8018400:	681b      	ldr	r3, [r3, #0]
 8018402:	68db      	ldr	r3, [r3, #12]
 8018404:	68db      	ldr	r3, [r3, #12]
 8018406:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018408:	697b      	ldr	r3, [r7, #20]
 801840a:	3304      	adds	r3, #4
 801840c:	4618      	mov	r0, r3
 801840e:	f7fd fefd 	bl	801620c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018412:	697b      	ldr	r3, [r7, #20]
 8018414:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018418:	f003 0304 	and.w	r3, r3, #4
 801841c:	2b00      	cmp	r3, #0
 801841e:	d022      	beq.n	8018466 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018420:	697b      	ldr	r3, [r7, #20]
 8018422:	699a      	ldr	r2, [r3, #24]
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	18d1      	adds	r1, r2, r3
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	683a      	ldr	r2, [r7, #0]
 801842c:	6978      	ldr	r0, [r7, #20]
 801842e:	f000 f8d1 	bl	80185d4 <prvInsertTimerInActiveList>
 8018432:	4603      	mov	r3, r0
 8018434:	2b00      	cmp	r3, #0
 8018436:	d01f      	beq.n	8018478 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018438:	2300      	movs	r3, #0
 801843a:	9300      	str	r3, [sp, #0]
 801843c:	2300      	movs	r3, #0
 801843e:	687a      	ldr	r2, [r7, #4]
 8018440:	2100      	movs	r1, #0
 8018442:	6978      	ldr	r0, [r7, #20]
 8018444:	f7ff ff88 	bl	8018358 <xTimerGenericCommand>
 8018448:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801844a:	693b      	ldr	r3, [r7, #16]
 801844c:	2b00      	cmp	r3, #0
 801844e:	d113      	bne.n	8018478 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8018450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018454:	f383 8811 	msr	BASEPRI, r3
 8018458:	f3bf 8f6f 	isb	sy
 801845c:	f3bf 8f4f 	dsb	sy
 8018460:	60fb      	str	r3, [r7, #12]
}
 8018462:	bf00      	nop
 8018464:	e7fe      	b.n	8018464 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018466:	697b      	ldr	r3, [r7, #20]
 8018468:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801846c:	f023 0301 	bic.w	r3, r3, #1
 8018470:	b2da      	uxtb	r2, r3
 8018472:	697b      	ldr	r3, [r7, #20]
 8018474:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018478:	697b      	ldr	r3, [r7, #20]
 801847a:	6a1b      	ldr	r3, [r3, #32]
 801847c:	6978      	ldr	r0, [r7, #20]
 801847e:	4798      	blx	r3
}
 8018480:	bf00      	nop
 8018482:	3718      	adds	r7, #24
 8018484:	46bd      	mov	sp, r7
 8018486:	bd80      	pop	{r7, pc}
 8018488:	20001518 	.word	0x20001518

0801848c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801848c:	b580      	push	{r7, lr}
 801848e:	b084      	sub	sp, #16
 8018490:	af00      	add	r7, sp, #0
 8018492:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018494:	f107 0308 	add.w	r3, r7, #8
 8018498:	4618      	mov	r0, r3
 801849a:	f000 f857 	bl	801854c <prvGetNextExpireTime>
 801849e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80184a0:	68bb      	ldr	r3, [r7, #8]
 80184a2:	4619      	mov	r1, r3
 80184a4:	68f8      	ldr	r0, [r7, #12]
 80184a6:	f000 f803 	bl	80184b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80184aa:	f000 f8d5 	bl	8018658 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80184ae:	e7f1      	b.n	8018494 <prvTimerTask+0x8>

080184b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80184b0:	b580      	push	{r7, lr}
 80184b2:	b084      	sub	sp, #16
 80184b4:	af00      	add	r7, sp, #0
 80184b6:	6078      	str	r0, [r7, #4]
 80184b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80184ba:	f7ff f93b 	bl	8017734 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80184be:	f107 0308 	add.w	r3, r7, #8
 80184c2:	4618      	mov	r0, r3
 80184c4:	f000 f866 	bl	8018594 <prvSampleTimeNow>
 80184c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80184ca:	68bb      	ldr	r3, [r7, #8]
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	d130      	bne.n	8018532 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80184d0:	683b      	ldr	r3, [r7, #0]
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	d10a      	bne.n	80184ec <prvProcessTimerOrBlockTask+0x3c>
 80184d6:	687a      	ldr	r2, [r7, #4]
 80184d8:	68fb      	ldr	r3, [r7, #12]
 80184da:	429a      	cmp	r2, r3
 80184dc:	d806      	bhi.n	80184ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80184de:	f7ff f937 	bl	8017750 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80184e2:	68f9      	ldr	r1, [r7, #12]
 80184e4:	6878      	ldr	r0, [r7, #4]
 80184e6:	f7ff ff85 	bl	80183f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80184ea:	e024      	b.n	8018536 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80184ec:	683b      	ldr	r3, [r7, #0]
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d008      	beq.n	8018504 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80184f2:	4b13      	ldr	r3, [pc, #76]	; (8018540 <prvProcessTimerOrBlockTask+0x90>)
 80184f4:	681b      	ldr	r3, [r3, #0]
 80184f6:	681b      	ldr	r3, [r3, #0]
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	d101      	bne.n	8018500 <prvProcessTimerOrBlockTask+0x50>
 80184fc:	2301      	movs	r3, #1
 80184fe:	e000      	b.n	8018502 <prvProcessTimerOrBlockTask+0x52>
 8018500:	2300      	movs	r3, #0
 8018502:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8018504:	4b0f      	ldr	r3, [pc, #60]	; (8018544 <prvProcessTimerOrBlockTask+0x94>)
 8018506:	6818      	ldr	r0, [r3, #0]
 8018508:	687a      	ldr	r2, [r7, #4]
 801850a:	68fb      	ldr	r3, [r7, #12]
 801850c:	1ad3      	subs	r3, r2, r3
 801850e:	683a      	ldr	r2, [r7, #0]
 8018510:	4619      	mov	r1, r3
 8018512:	f7fe fe7f 	bl	8017214 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8018516:	f7ff f91b 	bl	8017750 <xTaskResumeAll>
 801851a:	4603      	mov	r3, r0
 801851c:	2b00      	cmp	r3, #0
 801851e:	d10a      	bne.n	8018536 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8018520:	4b09      	ldr	r3, [pc, #36]	; (8018548 <prvProcessTimerOrBlockTask+0x98>)
 8018522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018526:	601a      	str	r2, [r3, #0]
 8018528:	f3bf 8f4f 	dsb	sy
 801852c:	f3bf 8f6f 	isb	sy
}
 8018530:	e001      	b.n	8018536 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8018532:	f7ff f90d 	bl	8017750 <xTaskResumeAll>
}
 8018536:	bf00      	nop
 8018538:	3710      	adds	r7, #16
 801853a:	46bd      	mov	sp, r7
 801853c:	bd80      	pop	{r7, pc}
 801853e:	bf00      	nop
 8018540:	2000151c 	.word	0x2000151c
 8018544:	20001520 	.word	0x20001520
 8018548:	e000ed04 	.word	0xe000ed04

0801854c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801854c:	b480      	push	{r7}
 801854e:	b085      	sub	sp, #20
 8018550:	af00      	add	r7, sp, #0
 8018552:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018554:	4b0e      	ldr	r3, [pc, #56]	; (8018590 <prvGetNextExpireTime+0x44>)
 8018556:	681b      	ldr	r3, [r3, #0]
 8018558:	681b      	ldr	r3, [r3, #0]
 801855a:	2b00      	cmp	r3, #0
 801855c:	d101      	bne.n	8018562 <prvGetNextExpireTime+0x16>
 801855e:	2201      	movs	r2, #1
 8018560:	e000      	b.n	8018564 <prvGetNextExpireTime+0x18>
 8018562:	2200      	movs	r2, #0
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	2b00      	cmp	r3, #0
 801856e:	d105      	bne.n	801857c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018570:	4b07      	ldr	r3, [pc, #28]	; (8018590 <prvGetNextExpireTime+0x44>)
 8018572:	681b      	ldr	r3, [r3, #0]
 8018574:	68db      	ldr	r3, [r3, #12]
 8018576:	681b      	ldr	r3, [r3, #0]
 8018578:	60fb      	str	r3, [r7, #12]
 801857a:	e001      	b.n	8018580 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801857c:	2300      	movs	r3, #0
 801857e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018580:	68fb      	ldr	r3, [r7, #12]
}
 8018582:	4618      	mov	r0, r3
 8018584:	3714      	adds	r7, #20
 8018586:	46bd      	mov	sp, r7
 8018588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801858c:	4770      	bx	lr
 801858e:	bf00      	nop
 8018590:	20001518 	.word	0x20001518

08018594 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8018594:	b580      	push	{r7, lr}
 8018596:	b084      	sub	sp, #16
 8018598:	af00      	add	r7, sp, #0
 801859a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801859c:	f7ff f976 	bl	801788c <xTaskGetTickCount>
 80185a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80185a2:	4b0b      	ldr	r3, [pc, #44]	; (80185d0 <prvSampleTimeNow+0x3c>)
 80185a4:	681b      	ldr	r3, [r3, #0]
 80185a6:	68fa      	ldr	r2, [r7, #12]
 80185a8:	429a      	cmp	r2, r3
 80185aa:	d205      	bcs.n	80185b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80185ac:	f000 f936 	bl	801881c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	2201      	movs	r2, #1
 80185b4:	601a      	str	r2, [r3, #0]
 80185b6:	e002      	b.n	80185be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	2200      	movs	r2, #0
 80185bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80185be:	4a04      	ldr	r2, [pc, #16]	; (80185d0 <prvSampleTimeNow+0x3c>)
 80185c0:	68fb      	ldr	r3, [r7, #12]
 80185c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80185c4:	68fb      	ldr	r3, [r7, #12]
}
 80185c6:	4618      	mov	r0, r3
 80185c8:	3710      	adds	r7, #16
 80185ca:	46bd      	mov	sp, r7
 80185cc:	bd80      	pop	{r7, pc}
 80185ce:	bf00      	nop
 80185d0:	20001528 	.word	0x20001528

080185d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80185d4:	b580      	push	{r7, lr}
 80185d6:	b086      	sub	sp, #24
 80185d8:	af00      	add	r7, sp, #0
 80185da:	60f8      	str	r0, [r7, #12]
 80185dc:	60b9      	str	r1, [r7, #8]
 80185de:	607a      	str	r2, [r7, #4]
 80185e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80185e2:	2300      	movs	r3, #0
 80185e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80185e6:	68fb      	ldr	r3, [r7, #12]
 80185e8:	68ba      	ldr	r2, [r7, #8]
 80185ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80185ec:	68fb      	ldr	r3, [r7, #12]
 80185ee:	68fa      	ldr	r2, [r7, #12]
 80185f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80185f2:	68ba      	ldr	r2, [r7, #8]
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	429a      	cmp	r2, r3
 80185f8:	d812      	bhi.n	8018620 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80185fa:	687a      	ldr	r2, [r7, #4]
 80185fc:	683b      	ldr	r3, [r7, #0]
 80185fe:	1ad2      	subs	r2, r2, r3
 8018600:	68fb      	ldr	r3, [r7, #12]
 8018602:	699b      	ldr	r3, [r3, #24]
 8018604:	429a      	cmp	r2, r3
 8018606:	d302      	bcc.n	801860e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8018608:	2301      	movs	r3, #1
 801860a:	617b      	str	r3, [r7, #20]
 801860c:	e01b      	b.n	8018646 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801860e:	4b10      	ldr	r3, [pc, #64]	; (8018650 <prvInsertTimerInActiveList+0x7c>)
 8018610:	681a      	ldr	r2, [r3, #0]
 8018612:	68fb      	ldr	r3, [r7, #12]
 8018614:	3304      	adds	r3, #4
 8018616:	4619      	mov	r1, r3
 8018618:	4610      	mov	r0, r2
 801861a:	f7fd fdbe 	bl	801619a <vListInsert>
 801861e:	e012      	b.n	8018646 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018620:	687a      	ldr	r2, [r7, #4]
 8018622:	683b      	ldr	r3, [r7, #0]
 8018624:	429a      	cmp	r2, r3
 8018626:	d206      	bcs.n	8018636 <prvInsertTimerInActiveList+0x62>
 8018628:	68ba      	ldr	r2, [r7, #8]
 801862a:	683b      	ldr	r3, [r7, #0]
 801862c:	429a      	cmp	r2, r3
 801862e:	d302      	bcc.n	8018636 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8018630:	2301      	movs	r3, #1
 8018632:	617b      	str	r3, [r7, #20]
 8018634:	e007      	b.n	8018646 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018636:	4b07      	ldr	r3, [pc, #28]	; (8018654 <prvInsertTimerInActiveList+0x80>)
 8018638:	681a      	ldr	r2, [r3, #0]
 801863a:	68fb      	ldr	r3, [r7, #12]
 801863c:	3304      	adds	r3, #4
 801863e:	4619      	mov	r1, r3
 8018640:	4610      	mov	r0, r2
 8018642:	f7fd fdaa 	bl	801619a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8018646:	697b      	ldr	r3, [r7, #20]
}
 8018648:	4618      	mov	r0, r3
 801864a:	3718      	adds	r7, #24
 801864c:	46bd      	mov	sp, r7
 801864e:	bd80      	pop	{r7, pc}
 8018650:	2000151c 	.word	0x2000151c
 8018654:	20001518 	.word	0x20001518

08018658 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8018658:	b580      	push	{r7, lr}
 801865a:	b08e      	sub	sp, #56	; 0x38
 801865c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801865e:	e0ca      	b.n	80187f6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	2b00      	cmp	r3, #0
 8018664:	da18      	bge.n	8018698 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8018666:	1d3b      	adds	r3, r7, #4
 8018668:	3304      	adds	r3, #4
 801866a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801866c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801866e:	2b00      	cmp	r3, #0
 8018670:	d10a      	bne.n	8018688 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8018672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018676:	f383 8811 	msr	BASEPRI, r3
 801867a:	f3bf 8f6f 	isb	sy
 801867e:	f3bf 8f4f 	dsb	sy
 8018682:	61fb      	str	r3, [r7, #28]
}
 8018684:	bf00      	nop
 8018686:	e7fe      	b.n	8018686 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8018688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801868e:	6850      	ldr	r0, [r2, #4]
 8018690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018692:	6892      	ldr	r2, [r2, #8]
 8018694:	4611      	mov	r1, r2
 8018696:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	2b00      	cmp	r3, #0
 801869c:	f2c0 80aa 	blt.w	80187f4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80186a0:	68fb      	ldr	r3, [r7, #12]
 80186a2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80186a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186a6:	695b      	ldr	r3, [r3, #20]
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	d004      	beq.n	80186b6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80186ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186ae:	3304      	adds	r3, #4
 80186b0:	4618      	mov	r0, r3
 80186b2:	f7fd fdab 	bl	801620c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80186b6:	463b      	mov	r3, r7
 80186b8:	4618      	mov	r0, r3
 80186ba:	f7ff ff6b 	bl	8018594 <prvSampleTimeNow>
 80186be:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	2b09      	cmp	r3, #9
 80186c4:	f200 8097 	bhi.w	80187f6 <prvProcessReceivedCommands+0x19e>
 80186c8:	a201      	add	r2, pc, #4	; (adr r2, 80186d0 <prvProcessReceivedCommands+0x78>)
 80186ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80186ce:	bf00      	nop
 80186d0:	080186f9 	.word	0x080186f9
 80186d4:	080186f9 	.word	0x080186f9
 80186d8:	080186f9 	.word	0x080186f9
 80186dc:	0801876d 	.word	0x0801876d
 80186e0:	08018781 	.word	0x08018781
 80186e4:	080187cb 	.word	0x080187cb
 80186e8:	080186f9 	.word	0x080186f9
 80186ec:	080186f9 	.word	0x080186f9
 80186f0:	0801876d 	.word	0x0801876d
 80186f4:	08018781 	.word	0x08018781
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80186f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80186fe:	f043 0301 	orr.w	r3, r3, #1
 8018702:	b2da      	uxtb	r2, r3
 8018704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018706:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801870a:	68ba      	ldr	r2, [r7, #8]
 801870c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801870e:	699b      	ldr	r3, [r3, #24]
 8018710:	18d1      	adds	r1, r2, r3
 8018712:	68bb      	ldr	r3, [r7, #8]
 8018714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018718:	f7ff ff5c 	bl	80185d4 <prvInsertTimerInActiveList>
 801871c:	4603      	mov	r3, r0
 801871e:	2b00      	cmp	r3, #0
 8018720:	d069      	beq.n	80187f6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018724:	6a1b      	ldr	r3, [r3, #32]
 8018726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018728:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801872a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801872c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018730:	f003 0304 	and.w	r3, r3, #4
 8018734:	2b00      	cmp	r3, #0
 8018736:	d05e      	beq.n	80187f6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018738:	68ba      	ldr	r2, [r7, #8]
 801873a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801873c:	699b      	ldr	r3, [r3, #24]
 801873e:	441a      	add	r2, r3
 8018740:	2300      	movs	r3, #0
 8018742:	9300      	str	r3, [sp, #0]
 8018744:	2300      	movs	r3, #0
 8018746:	2100      	movs	r1, #0
 8018748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801874a:	f7ff fe05 	bl	8018358 <xTimerGenericCommand>
 801874e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8018750:	6a3b      	ldr	r3, [r7, #32]
 8018752:	2b00      	cmp	r3, #0
 8018754:	d14f      	bne.n	80187f6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8018756:	f04f 0350 	mov.w	r3, #80	; 0x50
 801875a:	f383 8811 	msr	BASEPRI, r3
 801875e:	f3bf 8f6f 	isb	sy
 8018762:	f3bf 8f4f 	dsb	sy
 8018766:	61bb      	str	r3, [r7, #24]
}
 8018768:	bf00      	nop
 801876a:	e7fe      	b.n	801876a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801876c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801876e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018772:	f023 0301 	bic.w	r3, r3, #1
 8018776:	b2da      	uxtb	r2, r3
 8018778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801877a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801877e:	e03a      	b.n	80187f6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018782:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018786:	f043 0301 	orr.w	r3, r3, #1
 801878a:	b2da      	uxtb	r2, r3
 801878c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801878e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8018792:	68ba      	ldr	r2, [r7, #8]
 8018794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018796:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8018798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801879a:	699b      	ldr	r3, [r3, #24]
 801879c:	2b00      	cmp	r3, #0
 801879e:	d10a      	bne.n	80187b6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80187a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187a4:	f383 8811 	msr	BASEPRI, r3
 80187a8:	f3bf 8f6f 	isb	sy
 80187ac:	f3bf 8f4f 	dsb	sy
 80187b0:	617b      	str	r3, [r7, #20]
}
 80187b2:	bf00      	nop
 80187b4:	e7fe      	b.n	80187b4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80187b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187b8:	699a      	ldr	r2, [r3, #24]
 80187ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187bc:	18d1      	adds	r1, r2, r3
 80187be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80187c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80187c4:	f7ff ff06 	bl	80185d4 <prvInsertTimerInActiveList>
					break;
 80187c8:	e015      	b.n	80187f6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80187ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80187d0:	f003 0302 	and.w	r3, r3, #2
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	d103      	bne.n	80187e0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80187d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80187da:	f000 fbe1 	bl	8018fa0 <vPortFree>
 80187de:	e00a      	b.n	80187f6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80187e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80187e6:	f023 0301 	bic.w	r3, r3, #1
 80187ea:	b2da      	uxtb	r2, r3
 80187ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80187f2:	e000      	b.n	80187f6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80187f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80187f6:	4b08      	ldr	r3, [pc, #32]	; (8018818 <prvProcessReceivedCommands+0x1c0>)
 80187f8:	681b      	ldr	r3, [r3, #0]
 80187fa:	1d39      	adds	r1, r7, #4
 80187fc:	2200      	movs	r2, #0
 80187fe:	4618      	mov	r0, r3
 8018800:	f7fe f8fc 	bl	80169fc <xQueueReceive>
 8018804:	4603      	mov	r3, r0
 8018806:	2b00      	cmp	r3, #0
 8018808:	f47f af2a 	bne.w	8018660 <prvProcessReceivedCommands+0x8>
	}
}
 801880c:	bf00      	nop
 801880e:	bf00      	nop
 8018810:	3730      	adds	r7, #48	; 0x30
 8018812:	46bd      	mov	sp, r7
 8018814:	bd80      	pop	{r7, pc}
 8018816:	bf00      	nop
 8018818:	20001520 	.word	0x20001520

0801881c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801881c:	b580      	push	{r7, lr}
 801881e:	b088      	sub	sp, #32
 8018820:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018822:	e048      	b.n	80188b6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018824:	4b2d      	ldr	r3, [pc, #180]	; (80188dc <prvSwitchTimerLists+0xc0>)
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	68db      	ldr	r3, [r3, #12]
 801882a:	681b      	ldr	r3, [r3, #0]
 801882c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801882e:	4b2b      	ldr	r3, [pc, #172]	; (80188dc <prvSwitchTimerLists+0xc0>)
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	68db      	ldr	r3, [r3, #12]
 8018834:	68db      	ldr	r3, [r3, #12]
 8018836:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018838:	68fb      	ldr	r3, [r7, #12]
 801883a:	3304      	adds	r3, #4
 801883c:	4618      	mov	r0, r3
 801883e:	f7fd fce5 	bl	801620c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018842:	68fb      	ldr	r3, [r7, #12]
 8018844:	6a1b      	ldr	r3, [r3, #32]
 8018846:	68f8      	ldr	r0, [r7, #12]
 8018848:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801884a:	68fb      	ldr	r3, [r7, #12]
 801884c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018850:	f003 0304 	and.w	r3, r3, #4
 8018854:	2b00      	cmp	r3, #0
 8018856:	d02e      	beq.n	80188b6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018858:	68fb      	ldr	r3, [r7, #12]
 801885a:	699b      	ldr	r3, [r3, #24]
 801885c:	693a      	ldr	r2, [r7, #16]
 801885e:	4413      	add	r3, r2
 8018860:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8018862:	68ba      	ldr	r2, [r7, #8]
 8018864:	693b      	ldr	r3, [r7, #16]
 8018866:	429a      	cmp	r2, r3
 8018868:	d90e      	bls.n	8018888 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801886a:	68fb      	ldr	r3, [r7, #12]
 801886c:	68ba      	ldr	r2, [r7, #8]
 801886e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018870:	68fb      	ldr	r3, [r7, #12]
 8018872:	68fa      	ldr	r2, [r7, #12]
 8018874:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018876:	4b19      	ldr	r3, [pc, #100]	; (80188dc <prvSwitchTimerLists+0xc0>)
 8018878:	681a      	ldr	r2, [r3, #0]
 801887a:	68fb      	ldr	r3, [r7, #12]
 801887c:	3304      	adds	r3, #4
 801887e:	4619      	mov	r1, r3
 8018880:	4610      	mov	r0, r2
 8018882:	f7fd fc8a 	bl	801619a <vListInsert>
 8018886:	e016      	b.n	80188b6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018888:	2300      	movs	r3, #0
 801888a:	9300      	str	r3, [sp, #0]
 801888c:	2300      	movs	r3, #0
 801888e:	693a      	ldr	r2, [r7, #16]
 8018890:	2100      	movs	r1, #0
 8018892:	68f8      	ldr	r0, [r7, #12]
 8018894:	f7ff fd60 	bl	8018358 <xTimerGenericCommand>
 8018898:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	2b00      	cmp	r3, #0
 801889e:	d10a      	bne.n	80188b6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80188a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188a4:	f383 8811 	msr	BASEPRI, r3
 80188a8:	f3bf 8f6f 	isb	sy
 80188ac:	f3bf 8f4f 	dsb	sy
 80188b0:	603b      	str	r3, [r7, #0]
}
 80188b2:	bf00      	nop
 80188b4:	e7fe      	b.n	80188b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80188b6:	4b09      	ldr	r3, [pc, #36]	; (80188dc <prvSwitchTimerLists+0xc0>)
 80188b8:	681b      	ldr	r3, [r3, #0]
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d1b1      	bne.n	8018824 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80188c0:	4b06      	ldr	r3, [pc, #24]	; (80188dc <prvSwitchTimerLists+0xc0>)
 80188c2:	681b      	ldr	r3, [r3, #0]
 80188c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80188c6:	4b06      	ldr	r3, [pc, #24]	; (80188e0 <prvSwitchTimerLists+0xc4>)
 80188c8:	681b      	ldr	r3, [r3, #0]
 80188ca:	4a04      	ldr	r2, [pc, #16]	; (80188dc <prvSwitchTimerLists+0xc0>)
 80188cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80188ce:	4a04      	ldr	r2, [pc, #16]	; (80188e0 <prvSwitchTimerLists+0xc4>)
 80188d0:	697b      	ldr	r3, [r7, #20]
 80188d2:	6013      	str	r3, [r2, #0]
}
 80188d4:	bf00      	nop
 80188d6:	3718      	adds	r7, #24
 80188d8:	46bd      	mov	sp, r7
 80188da:	bd80      	pop	{r7, pc}
 80188dc:	20001518 	.word	0x20001518
 80188e0:	2000151c 	.word	0x2000151c

080188e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80188e4:	b580      	push	{r7, lr}
 80188e6:	b082      	sub	sp, #8
 80188e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80188ea:	f000 f96b 	bl	8018bc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80188ee:	4b15      	ldr	r3, [pc, #84]	; (8018944 <prvCheckForValidListAndQueue+0x60>)
 80188f0:	681b      	ldr	r3, [r3, #0]
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	d120      	bne.n	8018938 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80188f6:	4814      	ldr	r0, [pc, #80]	; (8018948 <prvCheckForValidListAndQueue+0x64>)
 80188f8:	f7fd fbfe 	bl	80160f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80188fc:	4813      	ldr	r0, [pc, #76]	; (801894c <prvCheckForValidListAndQueue+0x68>)
 80188fe:	f7fd fbfb 	bl	80160f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8018902:	4b13      	ldr	r3, [pc, #76]	; (8018950 <prvCheckForValidListAndQueue+0x6c>)
 8018904:	4a10      	ldr	r2, [pc, #64]	; (8018948 <prvCheckForValidListAndQueue+0x64>)
 8018906:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8018908:	4b12      	ldr	r3, [pc, #72]	; (8018954 <prvCheckForValidListAndQueue+0x70>)
 801890a:	4a10      	ldr	r2, [pc, #64]	; (801894c <prvCheckForValidListAndQueue+0x68>)
 801890c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801890e:	2300      	movs	r3, #0
 8018910:	9300      	str	r3, [sp, #0]
 8018912:	4b11      	ldr	r3, [pc, #68]	; (8018958 <prvCheckForValidListAndQueue+0x74>)
 8018914:	4a11      	ldr	r2, [pc, #68]	; (801895c <prvCheckForValidListAndQueue+0x78>)
 8018916:	2110      	movs	r1, #16
 8018918:	200a      	movs	r0, #10
 801891a:	f7fd fd09 	bl	8016330 <xQueueGenericCreateStatic>
 801891e:	4603      	mov	r3, r0
 8018920:	4a08      	ldr	r2, [pc, #32]	; (8018944 <prvCheckForValidListAndQueue+0x60>)
 8018922:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8018924:	4b07      	ldr	r3, [pc, #28]	; (8018944 <prvCheckForValidListAndQueue+0x60>)
 8018926:	681b      	ldr	r3, [r3, #0]
 8018928:	2b00      	cmp	r3, #0
 801892a:	d005      	beq.n	8018938 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801892c:	4b05      	ldr	r3, [pc, #20]	; (8018944 <prvCheckForValidListAndQueue+0x60>)
 801892e:	681b      	ldr	r3, [r3, #0]
 8018930:	490b      	ldr	r1, [pc, #44]	; (8018960 <prvCheckForValidListAndQueue+0x7c>)
 8018932:	4618      	mov	r0, r3
 8018934:	f7fe fc1a 	bl	801716c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018938:	f000 f974 	bl	8018c24 <vPortExitCritical>
}
 801893c:	bf00      	nop
 801893e:	46bd      	mov	sp, r7
 8018940:	bd80      	pop	{r7, pc}
 8018942:	bf00      	nop
 8018944:	20001520 	.word	0x20001520
 8018948:	200014f0 	.word	0x200014f0
 801894c:	20001504 	.word	0x20001504
 8018950:	20001518 	.word	0x20001518
 8018954:	2000151c 	.word	0x2000151c
 8018958:	200015cc 	.word	0x200015cc
 801895c:	2000152c 	.word	0x2000152c
 8018960:	08021db4 	.word	0x08021db4

08018964 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018964:	b480      	push	{r7}
 8018966:	b085      	sub	sp, #20
 8018968:	af00      	add	r7, sp, #0
 801896a:	60f8      	str	r0, [r7, #12]
 801896c:	60b9      	str	r1, [r7, #8]
 801896e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018970:	68fb      	ldr	r3, [r7, #12]
 8018972:	3b04      	subs	r3, #4
 8018974:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018976:	68fb      	ldr	r3, [r7, #12]
 8018978:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801897c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801897e:	68fb      	ldr	r3, [r7, #12]
 8018980:	3b04      	subs	r3, #4
 8018982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018984:	68bb      	ldr	r3, [r7, #8]
 8018986:	f023 0201 	bic.w	r2, r3, #1
 801898a:	68fb      	ldr	r3, [r7, #12]
 801898c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801898e:	68fb      	ldr	r3, [r7, #12]
 8018990:	3b04      	subs	r3, #4
 8018992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018994:	4a0c      	ldr	r2, [pc, #48]	; (80189c8 <pxPortInitialiseStack+0x64>)
 8018996:	68fb      	ldr	r3, [r7, #12]
 8018998:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801899a:	68fb      	ldr	r3, [r7, #12]
 801899c:	3b14      	subs	r3, #20
 801899e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80189a0:	687a      	ldr	r2, [r7, #4]
 80189a2:	68fb      	ldr	r3, [r7, #12]
 80189a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80189a6:	68fb      	ldr	r3, [r7, #12]
 80189a8:	3b04      	subs	r3, #4
 80189aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80189ac:	68fb      	ldr	r3, [r7, #12]
 80189ae:	f06f 0202 	mvn.w	r2, #2
 80189b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80189b4:	68fb      	ldr	r3, [r7, #12]
 80189b6:	3b20      	subs	r3, #32
 80189b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80189ba:	68fb      	ldr	r3, [r7, #12]
}
 80189bc:	4618      	mov	r0, r3
 80189be:	3714      	adds	r7, #20
 80189c0:	46bd      	mov	sp, r7
 80189c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189c6:	4770      	bx	lr
 80189c8:	080189cd 	.word	0x080189cd

080189cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80189cc:	b480      	push	{r7}
 80189ce:	b085      	sub	sp, #20
 80189d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80189d2:	2300      	movs	r3, #0
 80189d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80189d6:	4b12      	ldr	r3, [pc, #72]	; (8018a20 <prvTaskExitError+0x54>)
 80189d8:	681b      	ldr	r3, [r3, #0]
 80189da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80189de:	d00a      	beq.n	80189f6 <prvTaskExitError+0x2a>
	__asm volatile
 80189e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189e4:	f383 8811 	msr	BASEPRI, r3
 80189e8:	f3bf 8f6f 	isb	sy
 80189ec:	f3bf 8f4f 	dsb	sy
 80189f0:	60fb      	str	r3, [r7, #12]
}
 80189f2:	bf00      	nop
 80189f4:	e7fe      	b.n	80189f4 <prvTaskExitError+0x28>
	__asm volatile
 80189f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189fa:	f383 8811 	msr	BASEPRI, r3
 80189fe:	f3bf 8f6f 	isb	sy
 8018a02:	f3bf 8f4f 	dsb	sy
 8018a06:	60bb      	str	r3, [r7, #8]
}
 8018a08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018a0a:	bf00      	nop
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	2b00      	cmp	r3, #0
 8018a10:	d0fc      	beq.n	8018a0c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8018a12:	bf00      	nop
 8018a14:	bf00      	nop
 8018a16:	3714      	adds	r7, #20
 8018a18:	46bd      	mov	sp, r7
 8018a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a1e:	4770      	bx	lr
 8018a20:	2000018c 	.word	0x2000018c
	...

08018a30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018a30:	4b07      	ldr	r3, [pc, #28]	; (8018a50 <pxCurrentTCBConst2>)
 8018a32:	6819      	ldr	r1, [r3, #0]
 8018a34:	6808      	ldr	r0, [r1, #0]
 8018a36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a3a:	f380 8809 	msr	PSP, r0
 8018a3e:	f3bf 8f6f 	isb	sy
 8018a42:	f04f 0000 	mov.w	r0, #0
 8018a46:	f380 8811 	msr	BASEPRI, r0
 8018a4a:	4770      	bx	lr
 8018a4c:	f3af 8000 	nop.w

08018a50 <pxCurrentTCBConst2>:
 8018a50:	20000ff0 	.word	0x20000ff0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018a54:	bf00      	nop
 8018a56:	bf00      	nop

08018a58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018a58:	4808      	ldr	r0, [pc, #32]	; (8018a7c <prvPortStartFirstTask+0x24>)
 8018a5a:	6800      	ldr	r0, [r0, #0]
 8018a5c:	6800      	ldr	r0, [r0, #0]
 8018a5e:	f380 8808 	msr	MSP, r0
 8018a62:	f04f 0000 	mov.w	r0, #0
 8018a66:	f380 8814 	msr	CONTROL, r0
 8018a6a:	b662      	cpsie	i
 8018a6c:	b661      	cpsie	f
 8018a6e:	f3bf 8f4f 	dsb	sy
 8018a72:	f3bf 8f6f 	isb	sy
 8018a76:	df00      	svc	0
 8018a78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8018a7a:	bf00      	nop
 8018a7c:	e000ed08 	.word	0xe000ed08

08018a80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018a80:	b580      	push	{r7, lr}
 8018a82:	b086      	sub	sp, #24
 8018a84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018a86:	4b46      	ldr	r3, [pc, #280]	; (8018ba0 <xPortStartScheduler+0x120>)
 8018a88:	681b      	ldr	r3, [r3, #0]
 8018a8a:	4a46      	ldr	r2, [pc, #280]	; (8018ba4 <xPortStartScheduler+0x124>)
 8018a8c:	4293      	cmp	r3, r2
 8018a8e:	d10a      	bne.n	8018aa6 <xPortStartScheduler+0x26>
	__asm volatile
 8018a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a94:	f383 8811 	msr	BASEPRI, r3
 8018a98:	f3bf 8f6f 	isb	sy
 8018a9c:	f3bf 8f4f 	dsb	sy
 8018aa0:	613b      	str	r3, [r7, #16]
}
 8018aa2:	bf00      	nop
 8018aa4:	e7fe      	b.n	8018aa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018aa6:	4b3e      	ldr	r3, [pc, #248]	; (8018ba0 <xPortStartScheduler+0x120>)
 8018aa8:	681b      	ldr	r3, [r3, #0]
 8018aaa:	4a3f      	ldr	r2, [pc, #252]	; (8018ba8 <xPortStartScheduler+0x128>)
 8018aac:	4293      	cmp	r3, r2
 8018aae:	d10a      	bne.n	8018ac6 <xPortStartScheduler+0x46>
	__asm volatile
 8018ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ab4:	f383 8811 	msr	BASEPRI, r3
 8018ab8:	f3bf 8f6f 	isb	sy
 8018abc:	f3bf 8f4f 	dsb	sy
 8018ac0:	60fb      	str	r3, [r7, #12]
}
 8018ac2:	bf00      	nop
 8018ac4:	e7fe      	b.n	8018ac4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018ac6:	4b39      	ldr	r3, [pc, #228]	; (8018bac <xPortStartScheduler+0x12c>)
 8018ac8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018aca:	697b      	ldr	r3, [r7, #20]
 8018acc:	781b      	ldrb	r3, [r3, #0]
 8018ace:	b2db      	uxtb	r3, r3
 8018ad0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018ad2:	697b      	ldr	r3, [r7, #20]
 8018ad4:	22ff      	movs	r2, #255	; 0xff
 8018ad6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018ad8:	697b      	ldr	r3, [r7, #20]
 8018ada:	781b      	ldrb	r3, [r3, #0]
 8018adc:	b2db      	uxtb	r3, r3
 8018ade:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018ae0:	78fb      	ldrb	r3, [r7, #3]
 8018ae2:	b2db      	uxtb	r3, r3
 8018ae4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8018ae8:	b2da      	uxtb	r2, r3
 8018aea:	4b31      	ldr	r3, [pc, #196]	; (8018bb0 <xPortStartScheduler+0x130>)
 8018aec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018aee:	4b31      	ldr	r3, [pc, #196]	; (8018bb4 <xPortStartScheduler+0x134>)
 8018af0:	2207      	movs	r2, #7
 8018af2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018af4:	e009      	b.n	8018b0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8018af6:	4b2f      	ldr	r3, [pc, #188]	; (8018bb4 <xPortStartScheduler+0x134>)
 8018af8:	681b      	ldr	r3, [r3, #0]
 8018afa:	3b01      	subs	r3, #1
 8018afc:	4a2d      	ldr	r2, [pc, #180]	; (8018bb4 <xPortStartScheduler+0x134>)
 8018afe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018b00:	78fb      	ldrb	r3, [r7, #3]
 8018b02:	b2db      	uxtb	r3, r3
 8018b04:	005b      	lsls	r3, r3, #1
 8018b06:	b2db      	uxtb	r3, r3
 8018b08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018b0a:	78fb      	ldrb	r3, [r7, #3]
 8018b0c:	b2db      	uxtb	r3, r3
 8018b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018b12:	2b80      	cmp	r3, #128	; 0x80
 8018b14:	d0ef      	beq.n	8018af6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018b16:	4b27      	ldr	r3, [pc, #156]	; (8018bb4 <xPortStartScheduler+0x134>)
 8018b18:	681b      	ldr	r3, [r3, #0]
 8018b1a:	f1c3 0307 	rsb	r3, r3, #7
 8018b1e:	2b04      	cmp	r3, #4
 8018b20:	d00a      	beq.n	8018b38 <xPortStartScheduler+0xb8>
	__asm volatile
 8018b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b26:	f383 8811 	msr	BASEPRI, r3
 8018b2a:	f3bf 8f6f 	isb	sy
 8018b2e:	f3bf 8f4f 	dsb	sy
 8018b32:	60bb      	str	r3, [r7, #8]
}
 8018b34:	bf00      	nop
 8018b36:	e7fe      	b.n	8018b36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018b38:	4b1e      	ldr	r3, [pc, #120]	; (8018bb4 <xPortStartScheduler+0x134>)
 8018b3a:	681b      	ldr	r3, [r3, #0]
 8018b3c:	021b      	lsls	r3, r3, #8
 8018b3e:	4a1d      	ldr	r2, [pc, #116]	; (8018bb4 <xPortStartScheduler+0x134>)
 8018b40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018b42:	4b1c      	ldr	r3, [pc, #112]	; (8018bb4 <xPortStartScheduler+0x134>)
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8018b4a:	4a1a      	ldr	r2, [pc, #104]	; (8018bb4 <xPortStartScheduler+0x134>)
 8018b4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	b2da      	uxtb	r2, r3
 8018b52:	697b      	ldr	r3, [r7, #20]
 8018b54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018b56:	4b18      	ldr	r3, [pc, #96]	; (8018bb8 <xPortStartScheduler+0x138>)
 8018b58:	681b      	ldr	r3, [r3, #0]
 8018b5a:	4a17      	ldr	r2, [pc, #92]	; (8018bb8 <xPortStartScheduler+0x138>)
 8018b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018b60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018b62:	4b15      	ldr	r3, [pc, #84]	; (8018bb8 <xPortStartScheduler+0x138>)
 8018b64:	681b      	ldr	r3, [r3, #0]
 8018b66:	4a14      	ldr	r2, [pc, #80]	; (8018bb8 <xPortStartScheduler+0x138>)
 8018b68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8018b6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8018b6e:	f000 f8dd 	bl	8018d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8018b72:	4b12      	ldr	r3, [pc, #72]	; (8018bbc <xPortStartScheduler+0x13c>)
 8018b74:	2200      	movs	r2, #0
 8018b76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8018b78:	f000 f8fc 	bl	8018d74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8018b7c:	4b10      	ldr	r3, [pc, #64]	; (8018bc0 <xPortStartScheduler+0x140>)
 8018b7e:	681b      	ldr	r3, [r3, #0]
 8018b80:	4a0f      	ldr	r2, [pc, #60]	; (8018bc0 <xPortStartScheduler+0x140>)
 8018b82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8018b86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8018b88:	f7ff ff66 	bl	8018a58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8018b8c:	f7fe ff48 	bl	8017a20 <vTaskSwitchContext>
	prvTaskExitError();
 8018b90:	f7ff ff1c 	bl	80189cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8018b94:	2300      	movs	r3, #0
}
 8018b96:	4618      	mov	r0, r3
 8018b98:	3718      	adds	r7, #24
 8018b9a:	46bd      	mov	sp, r7
 8018b9c:	bd80      	pop	{r7, pc}
 8018b9e:	bf00      	nop
 8018ba0:	e000ed00 	.word	0xe000ed00
 8018ba4:	410fc271 	.word	0x410fc271
 8018ba8:	410fc270 	.word	0x410fc270
 8018bac:	e000e400 	.word	0xe000e400
 8018bb0:	2000161c 	.word	0x2000161c
 8018bb4:	20001620 	.word	0x20001620
 8018bb8:	e000ed20 	.word	0xe000ed20
 8018bbc:	2000018c 	.word	0x2000018c
 8018bc0:	e000ef34 	.word	0xe000ef34

08018bc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8018bc4:	b480      	push	{r7}
 8018bc6:	b083      	sub	sp, #12
 8018bc8:	af00      	add	r7, sp, #0
	__asm volatile
 8018bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bce:	f383 8811 	msr	BASEPRI, r3
 8018bd2:	f3bf 8f6f 	isb	sy
 8018bd6:	f3bf 8f4f 	dsb	sy
 8018bda:	607b      	str	r3, [r7, #4]
}
 8018bdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8018bde:	4b0f      	ldr	r3, [pc, #60]	; (8018c1c <vPortEnterCritical+0x58>)
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	3301      	adds	r3, #1
 8018be4:	4a0d      	ldr	r2, [pc, #52]	; (8018c1c <vPortEnterCritical+0x58>)
 8018be6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8018be8:	4b0c      	ldr	r3, [pc, #48]	; (8018c1c <vPortEnterCritical+0x58>)
 8018bea:	681b      	ldr	r3, [r3, #0]
 8018bec:	2b01      	cmp	r3, #1
 8018bee:	d10f      	bne.n	8018c10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018bf0:	4b0b      	ldr	r3, [pc, #44]	; (8018c20 <vPortEnterCritical+0x5c>)
 8018bf2:	681b      	ldr	r3, [r3, #0]
 8018bf4:	b2db      	uxtb	r3, r3
 8018bf6:	2b00      	cmp	r3, #0
 8018bf8:	d00a      	beq.n	8018c10 <vPortEnterCritical+0x4c>
	__asm volatile
 8018bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bfe:	f383 8811 	msr	BASEPRI, r3
 8018c02:	f3bf 8f6f 	isb	sy
 8018c06:	f3bf 8f4f 	dsb	sy
 8018c0a:	603b      	str	r3, [r7, #0]
}
 8018c0c:	bf00      	nop
 8018c0e:	e7fe      	b.n	8018c0e <vPortEnterCritical+0x4a>
	}
}
 8018c10:	bf00      	nop
 8018c12:	370c      	adds	r7, #12
 8018c14:	46bd      	mov	sp, r7
 8018c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c1a:	4770      	bx	lr
 8018c1c:	2000018c 	.word	0x2000018c
 8018c20:	e000ed04 	.word	0xe000ed04

08018c24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018c24:	b480      	push	{r7}
 8018c26:	b083      	sub	sp, #12
 8018c28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8018c2a:	4b12      	ldr	r3, [pc, #72]	; (8018c74 <vPortExitCritical+0x50>)
 8018c2c:	681b      	ldr	r3, [r3, #0]
 8018c2e:	2b00      	cmp	r3, #0
 8018c30:	d10a      	bne.n	8018c48 <vPortExitCritical+0x24>
	__asm volatile
 8018c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c36:	f383 8811 	msr	BASEPRI, r3
 8018c3a:	f3bf 8f6f 	isb	sy
 8018c3e:	f3bf 8f4f 	dsb	sy
 8018c42:	607b      	str	r3, [r7, #4]
}
 8018c44:	bf00      	nop
 8018c46:	e7fe      	b.n	8018c46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8018c48:	4b0a      	ldr	r3, [pc, #40]	; (8018c74 <vPortExitCritical+0x50>)
 8018c4a:	681b      	ldr	r3, [r3, #0]
 8018c4c:	3b01      	subs	r3, #1
 8018c4e:	4a09      	ldr	r2, [pc, #36]	; (8018c74 <vPortExitCritical+0x50>)
 8018c50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018c52:	4b08      	ldr	r3, [pc, #32]	; (8018c74 <vPortExitCritical+0x50>)
 8018c54:	681b      	ldr	r3, [r3, #0]
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	d105      	bne.n	8018c66 <vPortExitCritical+0x42>
 8018c5a:	2300      	movs	r3, #0
 8018c5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018c5e:	683b      	ldr	r3, [r7, #0]
 8018c60:	f383 8811 	msr	BASEPRI, r3
}
 8018c64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8018c66:	bf00      	nop
 8018c68:	370c      	adds	r7, #12
 8018c6a:	46bd      	mov	sp, r7
 8018c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c70:	4770      	bx	lr
 8018c72:	bf00      	nop
 8018c74:	2000018c 	.word	0x2000018c
	...

08018c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018c80:	f3ef 8009 	mrs	r0, PSP
 8018c84:	f3bf 8f6f 	isb	sy
 8018c88:	4b15      	ldr	r3, [pc, #84]	; (8018ce0 <pxCurrentTCBConst>)
 8018c8a:	681a      	ldr	r2, [r3, #0]
 8018c8c:	f01e 0f10 	tst.w	lr, #16
 8018c90:	bf08      	it	eq
 8018c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c9a:	6010      	str	r0, [r2, #0]
 8018c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018ca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8018ca4:	f380 8811 	msr	BASEPRI, r0
 8018ca8:	f3bf 8f4f 	dsb	sy
 8018cac:	f3bf 8f6f 	isb	sy
 8018cb0:	f7fe feb6 	bl	8017a20 <vTaskSwitchContext>
 8018cb4:	f04f 0000 	mov.w	r0, #0
 8018cb8:	f380 8811 	msr	BASEPRI, r0
 8018cbc:	bc09      	pop	{r0, r3}
 8018cbe:	6819      	ldr	r1, [r3, #0]
 8018cc0:	6808      	ldr	r0, [r1, #0]
 8018cc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cc6:	f01e 0f10 	tst.w	lr, #16
 8018cca:	bf08      	it	eq
 8018ccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018cd0:	f380 8809 	msr	PSP, r0
 8018cd4:	f3bf 8f6f 	isb	sy
 8018cd8:	4770      	bx	lr
 8018cda:	bf00      	nop
 8018cdc:	f3af 8000 	nop.w

08018ce0 <pxCurrentTCBConst>:
 8018ce0:	20000ff0 	.word	0x20000ff0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8018ce4:	bf00      	nop
 8018ce6:	bf00      	nop

08018ce8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018ce8:	b580      	push	{r7, lr}
 8018cea:	b082      	sub	sp, #8
 8018cec:	af00      	add	r7, sp, #0
	__asm volatile
 8018cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cf2:	f383 8811 	msr	BASEPRI, r3
 8018cf6:	f3bf 8f6f 	isb	sy
 8018cfa:	f3bf 8f4f 	dsb	sy
 8018cfe:	607b      	str	r3, [r7, #4]
}
 8018d00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018d02:	f7fe fdd3 	bl	80178ac <xTaskIncrementTick>
 8018d06:	4603      	mov	r3, r0
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	d003      	beq.n	8018d14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8018d0c:	4b06      	ldr	r3, [pc, #24]	; (8018d28 <xPortSysTickHandler+0x40>)
 8018d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018d12:	601a      	str	r2, [r3, #0]
 8018d14:	2300      	movs	r3, #0
 8018d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018d18:	683b      	ldr	r3, [r7, #0]
 8018d1a:	f383 8811 	msr	BASEPRI, r3
}
 8018d1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018d20:	bf00      	nop
 8018d22:	3708      	adds	r7, #8
 8018d24:	46bd      	mov	sp, r7
 8018d26:	bd80      	pop	{r7, pc}
 8018d28:	e000ed04 	.word	0xe000ed04

08018d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8018d2c:	b480      	push	{r7}
 8018d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018d30:	4b0b      	ldr	r3, [pc, #44]	; (8018d60 <vPortSetupTimerInterrupt+0x34>)
 8018d32:	2200      	movs	r2, #0
 8018d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018d36:	4b0b      	ldr	r3, [pc, #44]	; (8018d64 <vPortSetupTimerInterrupt+0x38>)
 8018d38:	2200      	movs	r2, #0
 8018d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018d3c:	4b0a      	ldr	r3, [pc, #40]	; (8018d68 <vPortSetupTimerInterrupt+0x3c>)
 8018d3e:	681b      	ldr	r3, [r3, #0]
 8018d40:	4a0a      	ldr	r2, [pc, #40]	; (8018d6c <vPortSetupTimerInterrupt+0x40>)
 8018d42:	fba2 2303 	umull	r2, r3, r2, r3
 8018d46:	099b      	lsrs	r3, r3, #6
 8018d48:	4a09      	ldr	r2, [pc, #36]	; (8018d70 <vPortSetupTimerInterrupt+0x44>)
 8018d4a:	3b01      	subs	r3, #1
 8018d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8018d4e:	4b04      	ldr	r3, [pc, #16]	; (8018d60 <vPortSetupTimerInterrupt+0x34>)
 8018d50:	2207      	movs	r2, #7
 8018d52:	601a      	str	r2, [r3, #0]
}
 8018d54:	bf00      	nop
 8018d56:	46bd      	mov	sp, r7
 8018d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d5c:	4770      	bx	lr
 8018d5e:	bf00      	nop
 8018d60:	e000e010 	.word	0xe000e010
 8018d64:	e000e018 	.word	0xe000e018
 8018d68:	2000003c 	.word	0x2000003c
 8018d6c:	10624dd3 	.word	0x10624dd3
 8018d70:	e000e014 	.word	0xe000e014

08018d74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018d74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8018d84 <vPortEnableVFP+0x10>
 8018d78:	6801      	ldr	r1, [r0, #0]
 8018d7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8018d7e:	6001      	str	r1, [r0, #0]
 8018d80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018d82:	bf00      	nop
 8018d84:	e000ed88 	.word	0xe000ed88

08018d88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8018d88:	b480      	push	{r7}
 8018d8a:	b085      	sub	sp, #20
 8018d8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8018d8e:	f3ef 8305 	mrs	r3, IPSR
 8018d92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018d94:	68fb      	ldr	r3, [r7, #12]
 8018d96:	2b0f      	cmp	r3, #15
 8018d98:	d914      	bls.n	8018dc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8018d9a:	4a17      	ldr	r2, [pc, #92]	; (8018df8 <vPortValidateInterruptPriority+0x70>)
 8018d9c:	68fb      	ldr	r3, [r7, #12]
 8018d9e:	4413      	add	r3, r2
 8018da0:	781b      	ldrb	r3, [r3, #0]
 8018da2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018da4:	4b15      	ldr	r3, [pc, #84]	; (8018dfc <vPortValidateInterruptPriority+0x74>)
 8018da6:	781b      	ldrb	r3, [r3, #0]
 8018da8:	7afa      	ldrb	r2, [r7, #11]
 8018daa:	429a      	cmp	r2, r3
 8018dac:	d20a      	bcs.n	8018dc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8018dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018db2:	f383 8811 	msr	BASEPRI, r3
 8018db6:	f3bf 8f6f 	isb	sy
 8018dba:	f3bf 8f4f 	dsb	sy
 8018dbe:	607b      	str	r3, [r7, #4]
}
 8018dc0:	bf00      	nop
 8018dc2:	e7fe      	b.n	8018dc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8018dc4:	4b0e      	ldr	r3, [pc, #56]	; (8018e00 <vPortValidateInterruptPriority+0x78>)
 8018dc6:	681b      	ldr	r3, [r3, #0]
 8018dc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8018dcc:	4b0d      	ldr	r3, [pc, #52]	; (8018e04 <vPortValidateInterruptPriority+0x7c>)
 8018dce:	681b      	ldr	r3, [r3, #0]
 8018dd0:	429a      	cmp	r2, r3
 8018dd2:	d90a      	bls.n	8018dea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8018dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018dd8:	f383 8811 	msr	BASEPRI, r3
 8018ddc:	f3bf 8f6f 	isb	sy
 8018de0:	f3bf 8f4f 	dsb	sy
 8018de4:	603b      	str	r3, [r7, #0]
}
 8018de6:	bf00      	nop
 8018de8:	e7fe      	b.n	8018de8 <vPortValidateInterruptPriority+0x60>
	}
 8018dea:	bf00      	nop
 8018dec:	3714      	adds	r7, #20
 8018dee:	46bd      	mov	sp, r7
 8018df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018df4:	4770      	bx	lr
 8018df6:	bf00      	nop
 8018df8:	e000e3f0 	.word	0xe000e3f0
 8018dfc:	2000161c 	.word	0x2000161c
 8018e00:	e000ed0c 	.word	0xe000ed0c
 8018e04:	20001620 	.word	0x20001620

08018e08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018e08:	b580      	push	{r7, lr}
 8018e0a:	b08a      	sub	sp, #40	; 0x28
 8018e0c:	af00      	add	r7, sp, #0
 8018e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018e10:	2300      	movs	r3, #0
 8018e12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018e14:	f7fe fc8e 	bl	8017734 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018e18:	4b5b      	ldr	r3, [pc, #364]	; (8018f88 <pvPortMalloc+0x180>)
 8018e1a:	681b      	ldr	r3, [r3, #0]
 8018e1c:	2b00      	cmp	r3, #0
 8018e1e:	d101      	bne.n	8018e24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018e20:	f000 f920 	bl	8019064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018e24:	4b59      	ldr	r3, [pc, #356]	; (8018f8c <pvPortMalloc+0x184>)
 8018e26:	681a      	ldr	r2, [r3, #0]
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	4013      	ands	r3, r2
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	f040 8093 	bne.w	8018f58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	2b00      	cmp	r3, #0
 8018e36:	d01d      	beq.n	8018e74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8018e38:	2208      	movs	r2, #8
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	4413      	add	r3, r2
 8018e3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	f003 0307 	and.w	r3, r3, #7
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d014      	beq.n	8018e74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	f023 0307 	bic.w	r3, r3, #7
 8018e50:	3308      	adds	r3, #8
 8018e52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	f003 0307 	and.w	r3, r3, #7
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d00a      	beq.n	8018e74 <pvPortMalloc+0x6c>
	__asm volatile
 8018e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e62:	f383 8811 	msr	BASEPRI, r3
 8018e66:	f3bf 8f6f 	isb	sy
 8018e6a:	f3bf 8f4f 	dsb	sy
 8018e6e:	617b      	str	r3, [r7, #20]
}
 8018e70:	bf00      	nop
 8018e72:	e7fe      	b.n	8018e72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d06e      	beq.n	8018f58 <pvPortMalloc+0x150>
 8018e7a:	4b45      	ldr	r3, [pc, #276]	; (8018f90 <pvPortMalloc+0x188>)
 8018e7c:	681b      	ldr	r3, [r3, #0]
 8018e7e:	687a      	ldr	r2, [r7, #4]
 8018e80:	429a      	cmp	r2, r3
 8018e82:	d869      	bhi.n	8018f58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8018e84:	4b43      	ldr	r3, [pc, #268]	; (8018f94 <pvPortMalloc+0x18c>)
 8018e86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8018e88:	4b42      	ldr	r3, [pc, #264]	; (8018f94 <pvPortMalloc+0x18c>)
 8018e8a:	681b      	ldr	r3, [r3, #0]
 8018e8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018e8e:	e004      	b.n	8018e9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8018e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8018e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e96:	681b      	ldr	r3, [r3, #0]
 8018e98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e9c:	685b      	ldr	r3, [r3, #4]
 8018e9e:	687a      	ldr	r2, [r7, #4]
 8018ea0:	429a      	cmp	r2, r3
 8018ea2:	d903      	bls.n	8018eac <pvPortMalloc+0xa4>
 8018ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ea6:	681b      	ldr	r3, [r3, #0]
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	d1f1      	bne.n	8018e90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8018eac:	4b36      	ldr	r3, [pc, #216]	; (8018f88 <pvPortMalloc+0x180>)
 8018eae:	681b      	ldr	r3, [r3, #0]
 8018eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018eb2:	429a      	cmp	r2, r3
 8018eb4:	d050      	beq.n	8018f58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8018eb6:	6a3b      	ldr	r3, [r7, #32]
 8018eb8:	681b      	ldr	r3, [r3, #0]
 8018eba:	2208      	movs	r2, #8
 8018ebc:	4413      	add	r3, r2
 8018ebe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ec2:	681a      	ldr	r2, [r3, #0]
 8018ec4:	6a3b      	ldr	r3, [r7, #32]
 8018ec6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8018ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018eca:	685a      	ldr	r2, [r3, #4]
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	1ad2      	subs	r2, r2, r3
 8018ed0:	2308      	movs	r3, #8
 8018ed2:	005b      	lsls	r3, r3, #1
 8018ed4:	429a      	cmp	r2, r3
 8018ed6:	d91f      	bls.n	8018f18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8018ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	4413      	add	r3, r2
 8018ede:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018ee0:	69bb      	ldr	r3, [r7, #24]
 8018ee2:	f003 0307 	and.w	r3, r3, #7
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d00a      	beq.n	8018f00 <pvPortMalloc+0xf8>
	__asm volatile
 8018eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018eee:	f383 8811 	msr	BASEPRI, r3
 8018ef2:	f3bf 8f6f 	isb	sy
 8018ef6:	f3bf 8f4f 	dsb	sy
 8018efa:	613b      	str	r3, [r7, #16]
}
 8018efc:	bf00      	nop
 8018efe:	e7fe      	b.n	8018efe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f02:	685a      	ldr	r2, [r3, #4]
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	1ad2      	subs	r2, r2, r3
 8018f08:	69bb      	ldr	r3, [r7, #24]
 8018f0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8018f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f0e:	687a      	ldr	r2, [r7, #4]
 8018f10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018f12:	69b8      	ldr	r0, [r7, #24]
 8018f14:	f000 f908 	bl	8019128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018f18:	4b1d      	ldr	r3, [pc, #116]	; (8018f90 <pvPortMalloc+0x188>)
 8018f1a:	681a      	ldr	r2, [r3, #0]
 8018f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f1e:	685b      	ldr	r3, [r3, #4]
 8018f20:	1ad3      	subs	r3, r2, r3
 8018f22:	4a1b      	ldr	r2, [pc, #108]	; (8018f90 <pvPortMalloc+0x188>)
 8018f24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018f26:	4b1a      	ldr	r3, [pc, #104]	; (8018f90 <pvPortMalloc+0x188>)
 8018f28:	681a      	ldr	r2, [r3, #0]
 8018f2a:	4b1b      	ldr	r3, [pc, #108]	; (8018f98 <pvPortMalloc+0x190>)
 8018f2c:	681b      	ldr	r3, [r3, #0]
 8018f2e:	429a      	cmp	r2, r3
 8018f30:	d203      	bcs.n	8018f3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018f32:	4b17      	ldr	r3, [pc, #92]	; (8018f90 <pvPortMalloc+0x188>)
 8018f34:	681b      	ldr	r3, [r3, #0]
 8018f36:	4a18      	ldr	r2, [pc, #96]	; (8018f98 <pvPortMalloc+0x190>)
 8018f38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8018f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f3c:	685a      	ldr	r2, [r3, #4]
 8018f3e:	4b13      	ldr	r3, [pc, #76]	; (8018f8c <pvPortMalloc+0x184>)
 8018f40:	681b      	ldr	r3, [r3, #0]
 8018f42:	431a      	orrs	r2, r3
 8018f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8018f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f4a:	2200      	movs	r2, #0
 8018f4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8018f4e:	4b13      	ldr	r3, [pc, #76]	; (8018f9c <pvPortMalloc+0x194>)
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	3301      	adds	r3, #1
 8018f54:	4a11      	ldr	r2, [pc, #68]	; (8018f9c <pvPortMalloc+0x194>)
 8018f56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8018f58:	f7fe fbfa 	bl	8017750 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8018f5c:	69fb      	ldr	r3, [r7, #28]
 8018f5e:	f003 0307 	and.w	r3, r3, #7
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	d00a      	beq.n	8018f7c <pvPortMalloc+0x174>
	__asm volatile
 8018f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f6a:	f383 8811 	msr	BASEPRI, r3
 8018f6e:	f3bf 8f6f 	isb	sy
 8018f72:	f3bf 8f4f 	dsb	sy
 8018f76:	60fb      	str	r3, [r7, #12]
}
 8018f78:	bf00      	nop
 8018f7a:	e7fe      	b.n	8018f7a <pvPortMalloc+0x172>
	return pvReturn;
 8018f7c:	69fb      	ldr	r3, [r7, #28]
}
 8018f7e:	4618      	mov	r0, r3
 8018f80:	3728      	adds	r7, #40	; 0x28
 8018f82:	46bd      	mov	sp, r7
 8018f84:	bd80      	pop	{r7, pc}
 8018f86:	bf00      	nop
 8018f88:	20005c7c 	.word	0x20005c7c
 8018f8c:	20005c90 	.word	0x20005c90
 8018f90:	20005c80 	.word	0x20005c80
 8018f94:	20005c74 	.word	0x20005c74
 8018f98:	20005c84 	.word	0x20005c84
 8018f9c:	20005c88 	.word	0x20005c88

08018fa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8018fa0:	b580      	push	{r7, lr}
 8018fa2:	b086      	sub	sp, #24
 8018fa4:	af00      	add	r7, sp, #0
 8018fa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	2b00      	cmp	r3, #0
 8018fb0:	d04d      	beq.n	801904e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8018fb2:	2308      	movs	r3, #8
 8018fb4:	425b      	negs	r3, r3
 8018fb6:	697a      	ldr	r2, [r7, #20]
 8018fb8:	4413      	add	r3, r2
 8018fba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8018fbc:	697b      	ldr	r3, [r7, #20]
 8018fbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8018fc0:	693b      	ldr	r3, [r7, #16]
 8018fc2:	685a      	ldr	r2, [r3, #4]
 8018fc4:	4b24      	ldr	r3, [pc, #144]	; (8019058 <vPortFree+0xb8>)
 8018fc6:	681b      	ldr	r3, [r3, #0]
 8018fc8:	4013      	ands	r3, r2
 8018fca:	2b00      	cmp	r3, #0
 8018fcc:	d10a      	bne.n	8018fe4 <vPortFree+0x44>
	__asm volatile
 8018fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fd2:	f383 8811 	msr	BASEPRI, r3
 8018fd6:	f3bf 8f6f 	isb	sy
 8018fda:	f3bf 8f4f 	dsb	sy
 8018fde:	60fb      	str	r3, [r7, #12]
}
 8018fe0:	bf00      	nop
 8018fe2:	e7fe      	b.n	8018fe2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8018fe4:	693b      	ldr	r3, [r7, #16]
 8018fe6:	681b      	ldr	r3, [r3, #0]
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	d00a      	beq.n	8019002 <vPortFree+0x62>
	__asm volatile
 8018fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ff0:	f383 8811 	msr	BASEPRI, r3
 8018ff4:	f3bf 8f6f 	isb	sy
 8018ff8:	f3bf 8f4f 	dsb	sy
 8018ffc:	60bb      	str	r3, [r7, #8]
}
 8018ffe:	bf00      	nop
 8019000:	e7fe      	b.n	8019000 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019002:	693b      	ldr	r3, [r7, #16]
 8019004:	685a      	ldr	r2, [r3, #4]
 8019006:	4b14      	ldr	r3, [pc, #80]	; (8019058 <vPortFree+0xb8>)
 8019008:	681b      	ldr	r3, [r3, #0]
 801900a:	4013      	ands	r3, r2
 801900c:	2b00      	cmp	r3, #0
 801900e:	d01e      	beq.n	801904e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019010:	693b      	ldr	r3, [r7, #16]
 8019012:	681b      	ldr	r3, [r3, #0]
 8019014:	2b00      	cmp	r3, #0
 8019016:	d11a      	bne.n	801904e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019018:	693b      	ldr	r3, [r7, #16]
 801901a:	685a      	ldr	r2, [r3, #4]
 801901c:	4b0e      	ldr	r3, [pc, #56]	; (8019058 <vPortFree+0xb8>)
 801901e:	681b      	ldr	r3, [r3, #0]
 8019020:	43db      	mvns	r3, r3
 8019022:	401a      	ands	r2, r3
 8019024:	693b      	ldr	r3, [r7, #16]
 8019026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019028:	f7fe fb84 	bl	8017734 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801902c:	693b      	ldr	r3, [r7, #16]
 801902e:	685a      	ldr	r2, [r3, #4]
 8019030:	4b0a      	ldr	r3, [pc, #40]	; (801905c <vPortFree+0xbc>)
 8019032:	681b      	ldr	r3, [r3, #0]
 8019034:	4413      	add	r3, r2
 8019036:	4a09      	ldr	r2, [pc, #36]	; (801905c <vPortFree+0xbc>)
 8019038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801903a:	6938      	ldr	r0, [r7, #16]
 801903c:	f000 f874 	bl	8019128 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8019040:	4b07      	ldr	r3, [pc, #28]	; (8019060 <vPortFree+0xc0>)
 8019042:	681b      	ldr	r3, [r3, #0]
 8019044:	3301      	adds	r3, #1
 8019046:	4a06      	ldr	r2, [pc, #24]	; (8019060 <vPortFree+0xc0>)
 8019048:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801904a:	f7fe fb81 	bl	8017750 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801904e:	bf00      	nop
 8019050:	3718      	adds	r7, #24
 8019052:	46bd      	mov	sp, r7
 8019054:	bd80      	pop	{r7, pc}
 8019056:	bf00      	nop
 8019058:	20005c90 	.word	0x20005c90
 801905c:	20005c80 	.word	0x20005c80
 8019060:	20005c8c 	.word	0x20005c8c

08019064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019064:	b480      	push	{r7}
 8019066:	b085      	sub	sp, #20
 8019068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801906a:	f244 6350 	movw	r3, #18000	; 0x4650
 801906e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8019070:	4b27      	ldr	r3, [pc, #156]	; (8019110 <prvHeapInit+0xac>)
 8019072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019074:	68fb      	ldr	r3, [r7, #12]
 8019076:	f003 0307 	and.w	r3, r3, #7
 801907a:	2b00      	cmp	r3, #0
 801907c:	d00c      	beq.n	8019098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801907e:	68fb      	ldr	r3, [r7, #12]
 8019080:	3307      	adds	r3, #7
 8019082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019084:	68fb      	ldr	r3, [r7, #12]
 8019086:	f023 0307 	bic.w	r3, r3, #7
 801908a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801908c:	68ba      	ldr	r2, [r7, #8]
 801908e:	68fb      	ldr	r3, [r7, #12]
 8019090:	1ad3      	subs	r3, r2, r3
 8019092:	4a1f      	ldr	r2, [pc, #124]	; (8019110 <prvHeapInit+0xac>)
 8019094:	4413      	add	r3, r2
 8019096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019098:	68fb      	ldr	r3, [r7, #12]
 801909a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801909c:	4a1d      	ldr	r2, [pc, #116]	; (8019114 <prvHeapInit+0xb0>)
 801909e:	687b      	ldr	r3, [r7, #4]
 80190a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80190a2:	4b1c      	ldr	r3, [pc, #112]	; (8019114 <prvHeapInit+0xb0>)
 80190a4:	2200      	movs	r2, #0
 80190a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	68ba      	ldr	r2, [r7, #8]
 80190ac:	4413      	add	r3, r2
 80190ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80190b0:	2208      	movs	r2, #8
 80190b2:	68fb      	ldr	r3, [r7, #12]
 80190b4:	1a9b      	subs	r3, r3, r2
 80190b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80190b8:	68fb      	ldr	r3, [r7, #12]
 80190ba:	f023 0307 	bic.w	r3, r3, #7
 80190be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80190c0:	68fb      	ldr	r3, [r7, #12]
 80190c2:	4a15      	ldr	r2, [pc, #84]	; (8019118 <prvHeapInit+0xb4>)
 80190c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80190c6:	4b14      	ldr	r3, [pc, #80]	; (8019118 <prvHeapInit+0xb4>)
 80190c8:	681b      	ldr	r3, [r3, #0]
 80190ca:	2200      	movs	r2, #0
 80190cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80190ce:	4b12      	ldr	r3, [pc, #72]	; (8019118 <prvHeapInit+0xb4>)
 80190d0:	681b      	ldr	r3, [r3, #0]
 80190d2:	2200      	movs	r2, #0
 80190d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80190d6:	687b      	ldr	r3, [r7, #4]
 80190d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80190da:	683b      	ldr	r3, [r7, #0]
 80190dc:	68fa      	ldr	r2, [r7, #12]
 80190de:	1ad2      	subs	r2, r2, r3
 80190e0:	683b      	ldr	r3, [r7, #0]
 80190e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80190e4:	4b0c      	ldr	r3, [pc, #48]	; (8019118 <prvHeapInit+0xb4>)
 80190e6:	681a      	ldr	r2, [r3, #0]
 80190e8:	683b      	ldr	r3, [r7, #0]
 80190ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80190ec:	683b      	ldr	r3, [r7, #0]
 80190ee:	685b      	ldr	r3, [r3, #4]
 80190f0:	4a0a      	ldr	r2, [pc, #40]	; (801911c <prvHeapInit+0xb8>)
 80190f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80190f4:	683b      	ldr	r3, [r7, #0]
 80190f6:	685b      	ldr	r3, [r3, #4]
 80190f8:	4a09      	ldr	r2, [pc, #36]	; (8019120 <prvHeapInit+0xbc>)
 80190fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80190fc:	4b09      	ldr	r3, [pc, #36]	; (8019124 <prvHeapInit+0xc0>)
 80190fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019102:	601a      	str	r2, [r3, #0]
}
 8019104:	bf00      	nop
 8019106:	3714      	adds	r7, #20
 8019108:	46bd      	mov	sp, r7
 801910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801910e:	4770      	bx	lr
 8019110:	20001624 	.word	0x20001624
 8019114:	20005c74 	.word	0x20005c74
 8019118:	20005c7c 	.word	0x20005c7c
 801911c:	20005c84 	.word	0x20005c84
 8019120:	20005c80 	.word	0x20005c80
 8019124:	20005c90 	.word	0x20005c90

08019128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019128:	b480      	push	{r7}
 801912a:	b085      	sub	sp, #20
 801912c:	af00      	add	r7, sp, #0
 801912e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019130:	4b28      	ldr	r3, [pc, #160]	; (80191d4 <prvInsertBlockIntoFreeList+0xac>)
 8019132:	60fb      	str	r3, [r7, #12]
 8019134:	e002      	b.n	801913c <prvInsertBlockIntoFreeList+0x14>
 8019136:	68fb      	ldr	r3, [r7, #12]
 8019138:	681b      	ldr	r3, [r3, #0]
 801913a:	60fb      	str	r3, [r7, #12]
 801913c:	68fb      	ldr	r3, [r7, #12]
 801913e:	681b      	ldr	r3, [r3, #0]
 8019140:	687a      	ldr	r2, [r7, #4]
 8019142:	429a      	cmp	r2, r3
 8019144:	d8f7      	bhi.n	8019136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019146:	68fb      	ldr	r3, [r7, #12]
 8019148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801914a:	68fb      	ldr	r3, [r7, #12]
 801914c:	685b      	ldr	r3, [r3, #4]
 801914e:	68ba      	ldr	r2, [r7, #8]
 8019150:	4413      	add	r3, r2
 8019152:	687a      	ldr	r2, [r7, #4]
 8019154:	429a      	cmp	r2, r3
 8019156:	d108      	bne.n	801916a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019158:	68fb      	ldr	r3, [r7, #12]
 801915a:	685a      	ldr	r2, [r3, #4]
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	685b      	ldr	r3, [r3, #4]
 8019160:	441a      	add	r2, r3
 8019162:	68fb      	ldr	r3, [r7, #12]
 8019164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019166:	68fb      	ldr	r3, [r7, #12]
 8019168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	685b      	ldr	r3, [r3, #4]
 8019172:	68ba      	ldr	r2, [r7, #8]
 8019174:	441a      	add	r2, r3
 8019176:	68fb      	ldr	r3, [r7, #12]
 8019178:	681b      	ldr	r3, [r3, #0]
 801917a:	429a      	cmp	r2, r3
 801917c:	d118      	bne.n	80191b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801917e:	68fb      	ldr	r3, [r7, #12]
 8019180:	681a      	ldr	r2, [r3, #0]
 8019182:	4b15      	ldr	r3, [pc, #84]	; (80191d8 <prvInsertBlockIntoFreeList+0xb0>)
 8019184:	681b      	ldr	r3, [r3, #0]
 8019186:	429a      	cmp	r2, r3
 8019188:	d00d      	beq.n	80191a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	685a      	ldr	r2, [r3, #4]
 801918e:	68fb      	ldr	r3, [r7, #12]
 8019190:	681b      	ldr	r3, [r3, #0]
 8019192:	685b      	ldr	r3, [r3, #4]
 8019194:	441a      	add	r2, r3
 8019196:	687b      	ldr	r3, [r7, #4]
 8019198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801919a:	68fb      	ldr	r3, [r7, #12]
 801919c:	681b      	ldr	r3, [r3, #0]
 801919e:	681a      	ldr	r2, [r3, #0]
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	601a      	str	r2, [r3, #0]
 80191a4:	e008      	b.n	80191b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80191a6:	4b0c      	ldr	r3, [pc, #48]	; (80191d8 <prvInsertBlockIntoFreeList+0xb0>)
 80191a8:	681a      	ldr	r2, [r3, #0]
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	601a      	str	r2, [r3, #0]
 80191ae:	e003      	b.n	80191b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80191b0:	68fb      	ldr	r3, [r7, #12]
 80191b2:	681a      	ldr	r2, [r3, #0]
 80191b4:	687b      	ldr	r3, [r7, #4]
 80191b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80191b8:	68fa      	ldr	r2, [r7, #12]
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	429a      	cmp	r2, r3
 80191be:	d002      	beq.n	80191c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80191c0:	68fb      	ldr	r3, [r7, #12]
 80191c2:	687a      	ldr	r2, [r7, #4]
 80191c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80191c6:	bf00      	nop
 80191c8:	3714      	adds	r7, #20
 80191ca:	46bd      	mov	sp, r7
 80191cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191d0:	4770      	bx	lr
 80191d2:	bf00      	nop
 80191d4:	20005c74 	.word	0x20005c74
 80191d8:	20005c7c 	.word	0x20005c7c

080191dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80191dc:	b580      	push	{r7, lr}
 80191de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80191e0:	2200      	movs	r2, #0
 80191e2:	4912      	ldr	r1, [pc, #72]	; (801922c <MX_USB_DEVICE_Init+0x50>)
 80191e4:	4812      	ldr	r0, [pc, #72]	; (8019230 <MX_USB_DEVICE_Init+0x54>)
 80191e6:	f7f8 fcc3 	bl	8011b70 <USBD_Init>
 80191ea:	4603      	mov	r3, r0
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	d001      	beq.n	80191f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80191f0:	f7e8 fe86 	bl	8001f00 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80191f4:	490f      	ldr	r1, [pc, #60]	; (8019234 <MX_USB_DEVICE_Init+0x58>)
 80191f6:	480e      	ldr	r0, [pc, #56]	; (8019230 <MX_USB_DEVICE_Init+0x54>)
 80191f8:	f7f8 fcea 	bl	8011bd0 <USBD_RegisterClass>
 80191fc:	4603      	mov	r3, r0
 80191fe:	2b00      	cmp	r3, #0
 8019200:	d001      	beq.n	8019206 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8019202:	f7e8 fe7d 	bl	8001f00 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8019206:	490c      	ldr	r1, [pc, #48]	; (8019238 <MX_USB_DEVICE_Init+0x5c>)
 8019208:	4809      	ldr	r0, [pc, #36]	; (8019230 <MX_USB_DEVICE_Init+0x54>)
 801920a:	f7f8 fc3b 	bl	8011a84 <USBD_CDC_RegisterInterface>
 801920e:	4603      	mov	r3, r0
 8019210:	2b00      	cmp	r3, #0
 8019212:	d001      	beq.n	8019218 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8019214:	f7e8 fe74 	bl	8001f00 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8019218:	4805      	ldr	r0, [pc, #20]	; (8019230 <MX_USB_DEVICE_Init+0x54>)
 801921a:	f7f8 fd00 	bl	8011c1e <USBD_Start>
 801921e:	4603      	mov	r3, r0
 8019220:	2b00      	cmp	r3, #0
 8019222:	d001      	beq.n	8019228 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8019224:	f7e8 fe6c 	bl	8001f00 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8019228:	bf00      	nop
 801922a:	bd80      	pop	{r7, pc}
 801922c:	200001a4 	.word	0x200001a4
 8019230:	20007474 	.word	0x20007474
 8019234:	20000088 	.word	0x20000088
 8019238:	20000190 	.word	0x20000190

0801923c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801923c:	b580      	push	{r7, lr}
 801923e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8019240:	2200      	movs	r2, #0
 8019242:	4905      	ldr	r1, [pc, #20]	; (8019258 <CDC_Init_FS+0x1c>)
 8019244:	4805      	ldr	r0, [pc, #20]	; (801925c <CDC_Init_FS+0x20>)
 8019246:	f7f8 fc32 	bl	8011aae <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801924a:	4905      	ldr	r1, [pc, #20]	; (8019260 <CDC_Init_FS+0x24>)
 801924c:	4803      	ldr	r0, [pc, #12]	; (801925c <CDC_Init_FS+0x20>)
 801924e:	f7f8 fc4c 	bl	8011aea <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8019252:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8019254:	4618      	mov	r0, r3
 8019256:	bd80      	pop	{r7, pc}
 8019258:	20007f44 	.word	0x20007f44
 801925c:	20007474 	.word	0x20007474
 8019260:	20007744 	.word	0x20007744

08019264 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8019264:	b480      	push	{r7}
 8019266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8019268:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801926a:	4618      	mov	r0, r3
 801926c:	46bd      	mov	sp, r7
 801926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019272:	4770      	bx	lr

08019274 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8019274:	b480      	push	{r7}
 8019276:	b083      	sub	sp, #12
 8019278:	af00      	add	r7, sp, #0
 801927a:	4603      	mov	r3, r0
 801927c:	6039      	str	r1, [r7, #0]
 801927e:	71fb      	strb	r3, [r7, #7]
 8019280:	4613      	mov	r3, r2
 8019282:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8019284:	79fb      	ldrb	r3, [r7, #7]
 8019286:	2b23      	cmp	r3, #35	; 0x23
 8019288:	d84a      	bhi.n	8019320 <CDC_Control_FS+0xac>
 801928a:	a201      	add	r2, pc, #4	; (adr r2, 8019290 <CDC_Control_FS+0x1c>)
 801928c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019290:	08019321 	.word	0x08019321
 8019294:	08019321 	.word	0x08019321
 8019298:	08019321 	.word	0x08019321
 801929c:	08019321 	.word	0x08019321
 80192a0:	08019321 	.word	0x08019321
 80192a4:	08019321 	.word	0x08019321
 80192a8:	08019321 	.word	0x08019321
 80192ac:	08019321 	.word	0x08019321
 80192b0:	08019321 	.word	0x08019321
 80192b4:	08019321 	.word	0x08019321
 80192b8:	08019321 	.word	0x08019321
 80192bc:	08019321 	.word	0x08019321
 80192c0:	08019321 	.word	0x08019321
 80192c4:	08019321 	.word	0x08019321
 80192c8:	08019321 	.word	0x08019321
 80192cc:	08019321 	.word	0x08019321
 80192d0:	08019321 	.word	0x08019321
 80192d4:	08019321 	.word	0x08019321
 80192d8:	08019321 	.word	0x08019321
 80192dc:	08019321 	.word	0x08019321
 80192e0:	08019321 	.word	0x08019321
 80192e4:	08019321 	.word	0x08019321
 80192e8:	08019321 	.word	0x08019321
 80192ec:	08019321 	.word	0x08019321
 80192f0:	08019321 	.word	0x08019321
 80192f4:	08019321 	.word	0x08019321
 80192f8:	08019321 	.word	0x08019321
 80192fc:	08019321 	.word	0x08019321
 8019300:	08019321 	.word	0x08019321
 8019304:	08019321 	.word	0x08019321
 8019308:	08019321 	.word	0x08019321
 801930c:	08019321 	.word	0x08019321
 8019310:	08019321 	.word	0x08019321
 8019314:	08019321 	.word	0x08019321
 8019318:	08019321 	.word	0x08019321
 801931c:	08019321 	.word	0x08019321
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8019320:	bf00      	nop
  }

  return (USBD_OK);
 8019322:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8019324:	4618      	mov	r0, r3
 8019326:	370c      	adds	r7, #12
 8019328:	46bd      	mov	sp, r7
 801932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801932e:	4770      	bx	lr

08019330 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8019330:	b580      	push	{r7, lr}
 8019332:	b082      	sub	sp, #8
 8019334:	af00      	add	r7, sp, #0
 8019336:	6078      	str	r0, [r7, #4]
 8019338:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801933a:	6879      	ldr	r1, [r7, #4]
 801933c:	4805      	ldr	r0, [pc, #20]	; (8019354 <CDC_Receive_FS+0x24>)
 801933e:	f7f8 fbd4 	bl	8011aea <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8019342:	4804      	ldr	r0, [pc, #16]	; (8019354 <CDC_Receive_FS+0x24>)
 8019344:	f7f8 fbea 	bl	8011b1c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8019348:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801934a:	4618      	mov	r0, r3
 801934c:	3708      	adds	r7, #8
 801934e:	46bd      	mov	sp, r7
 8019350:	bd80      	pop	{r7, pc}
 8019352:	bf00      	nop
 8019354:	20007474 	.word	0x20007474

08019358 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8019358:	b480      	push	{r7}
 801935a:	b087      	sub	sp, #28
 801935c:	af00      	add	r7, sp, #0
 801935e:	60f8      	str	r0, [r7, #12]
 8019360:	60b9      	str	r1, [r7, #8]
 8019362:	4613      	mov	r3, r2
 8019364:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8019366:	2300      	movs	r3, #0
 8019368:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801936a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801936e:	4618      	mov	r0, r3
 8019370:	371c      	adds	r7, #28
 8019372:	46bd      	mov	sp, r7
 8019374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019378:	4770      	bx	lr
	...

0801937c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801937c:	b480      	push	{r7}
 801937e:	b083      	sub	sp, #12
 8019380:	af00      	add	r7, sp, #0
 8019382:	4603      	mov	r3, r0
 8019384:	6039      	str	r1, [r7, #0]
 8019386:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8019388:	683b      	ldr	r3, [r7, #0]
 801938a:	2212      	movs	r2, #18
 801938c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801938e:	4b03      	ldr	r3, [pc, #12]	; (801939c <USBD_FS_DeviceDescriptor+0x20>)
}
 8019390:	4618      	mov	r0, r3
 8019392:	370c      	adds	r7, #12
 8019394:	46bd      	mov	sp, r7
 8019396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801939a:	4770      	bx	lr
 801939c:	200001c0 	.word	0x200001c0

080193a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80193a0:	b480      	push	{r7}
 80193a2:	b083      	sub	sp, #12
 80193a4:	af00      	add	r7, sp, #0
 80193a6:	4603      	mov	r3, r0
 80193a8:	6039      	str	r1, [r7, #0]
 80193aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80193ac:	683b      	ldr	r3, [r7, #0]
 80193ae:	2204      	movs	r2, #4
 80193b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80193b2:	4b03      	ldr	r3, [pc, #12]	; (80193c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80193b4:	4618      	mov	r0, r3
 80193b6:	370c      	adds	r7, #12
 80193b8:	46bd      	mov	sp, r7
 80193ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193be:	4770      	bx	lr
 80193c0:	200001d4 	.word	0x200001d4

080193c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80193c4:	b580      	push	{r7, lr}
 80193c6:	b082      	sub	sp, #8
 80193c8:	af00      	add	r7, sp, #0
 80193ca:	4603      	mov	r3, r0
 80193cc:	6039      	str	r1, [r7, #0]
 80193ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80193d0:	79fb      	ldrb	r3, [r7, #7]
 80193d2:	2b00      	cmp	r3, #0
 80193d4:	d105      	bne.n	80193e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80193d6:	683a      	ldr	r2, [r7, #0]
 80193d8:	4907      	ldr	r1, [pc, #28]	; (80193f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80193da:	4808      	ldr	r0, [pc, #32]	; (80193fc <USBD_FS_ProductStrDescriptor+0x38>)
 80193dc:	f7f9 fc51 	bl	8012c82 <USBD_GetString>
 80193e0:	e004      	b.n	80193ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80193e2:	683a      	ldr	r2, [r7, #0]
 80193e4:	4904      	ldr	r1, [pc, #16]	; (80193f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80193e6:	4805      	ldr	r0, [pc, #20]	; (80193fc <USBD_FS_ProductStrDescriptor+0x38>)
 80193e8:	f7f9 fc4b 	bl	8012c82 <USBD_GetString>
  }
  return USBD_StrDesc;
 80193ec:	4b02      	ldr	r3, [pc, #8]	; (80193f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80193ee:	4618      	mov	r0, r3
 80193f0:	3708      	adds	r7, #8
 80193f2:	46bd      	mov	sp, r7
 80193f4:	bd80      	pop	{r7, pc}
 80193f6:	bf00      	nop
 80193f8:	20008744 	.word	0x20008744
 80193fc:	08021dbc 	.word	0x08021dbc

08019400 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019400:	b580      	push	{r7, lr}
 8019402:	b082      	sub	sp, #8
 8019404:	af00      	add	r7, sp, #0
 8019406:	4603      	mov	r3, r0
 8019408:	6039      	str	r1, [r7, #0]
 801940a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801940c:	683a      	ldr	r2, [r7, #0]
 801940e:	4904      	ldr	r1, [pc, #16]	; (8019420 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8019410:	4804      	ldr	r0, [pc, #16]	; (8019424 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8019412:	f7f9 fc36 	bl	8012c82 <USBD_GetString>
  return USBD_StrDesc;
 8019416:	4b02      	ldr	r3, [pc, #8]	; (8019420 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8019418:	4618      	mov	r0, r3
 801941a:	3708      	adds	r7, #8
 801941c:	46bd      	mov	sp, r7
 801941e:	bd80      	pop	{r7, pc}
 8019420:	20008744 	.word	0x20008744
 8019424:	08021dd4 	.word	0x08021dd4

08019428 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019428:	b580      	push	{r7, lr}
 801942a:	b082      	sub	sp, #8
 801942c:	af00      	add	r7, sp, #0
 801942e:	4603      	mov	r3, r0
 8019430:	6039      	str	r1, [r7, #0]
 8019432:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8019434:	683b      	ldr	r3, [r7, #0]
 8019436:	221a      	movs	r2, #26
 8019438:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801943a:	f000 f843 	bl	80194c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801943e:	4b02      	ldr	r3, [pc, #8]	; (8019448 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8019440:	4618      	mov	r0, r3
 8019442:	3708      	adds	r7, #8
 8019444:	46bd      	mov	sp, r7
 8019446:	bd80      	pop	{r7, pc}
 8019448:	200001d8 	.word	0x200001d8

0801944c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801944c:	b580      	push	{r7, lr}
 801944e:	b082      	sub	sp, #8
 8019450:	af00      	add	r7, sp, #0
 8019452:	4603      	mov	r3, r0
 8019454:	6039      	str	r1, [r7, #0]
 8019456:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8019458:	79fb      	ldrb	r3, [r7, #7]
 801945a:	2b00      	cmp	r3, #0
 801945c:	d105      	bne.n	801946a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801945e:	683a      	ldr	r2, [r7, #0]
 8019460:	4907      	ldr	r1, [pc, #28]	; (8019480 <USBD_FS_ConfigStrDescriptor+0x34>)
 8019462:	4808      	ldr	r0, [pc, #32]	; (8019484 <USBD_FS_ConfigStrDescriptor+0x38>)
 8019464:	f7f9 fc0d 	bl	8012c82 <USBD_GetString>
 8019468:	e004      	b.n	8019474 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801946a:	683a      	ldr	r2, [r7, #0]
 801946c:	4904      	ldr	r1, [pc, #16]	; (8019480 <USBD_FS_ConfigStrDescriptor+0x34>)
 801946e:	4805      	ldr	r0, [pc, #20]	; (8019484 <USBD_FS_ConfigStrDescriptor+0x38>)
 8019470:	f7f9 fc07 	bl	8012c82 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019474:	4b02      	ldr	r3, [pc, #8]	; (8019480 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8019476:	4618      	mov	r0, r3
 8019478:	3708      	adds	r7, #8
 801947a:	46bd      	mov	sp, r7
 801947c:	bd80      	pop	{r7, pc}
 801947e:	bf00      	nop
 8019480:	20008744 	.word	0x20008744
 8019484:	08021de8 	.word	0x08021de8

08019488 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019488:	b580      	push	{r7, lr}
 801948a:	b082      	sub	sp, #8
 801948c:	af00      	add	r7, sp, #0
 801948e:	4603      	mov	r3, r0
 8019490:	6039      	str	r1, [r7, #0]
 8019492:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019494:	79fb      	ldrb	r3, [r7, #7]
 8019496:	2b00      	cmp	r3, #0
 8019498:	d105      	bne.n	80194a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801949a:	683a      	ldr	r2, [r7, #0]
 801949c:	4907      	ldr	r1, [pc, #28]	; (80194bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 801949e:	4808      	ldr	r0, [pc, #32]	; (80194c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80194a0:	f7f9 fbef 	bl	8012c82 <USBD_GetString>
 80194a4:	e004      	b.n	80194b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80194a6:	683a      	ldr	r2, [r7, #0]
 80194a8:	4904      	ldr	r1, [pc, #16]	; (80194bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80194aa:	4805      	ldr	r0, [pc, #20]	; (80194c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80194ac:	f7f9 fbe9 	bl	8012c82 <USBD_GetString>
  }
  return USBD_StrDesc;
 80194b0:	4b02      	ldr	r3, [pc, #8]	; (80194bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80194b2:	4618      	mov	r0, r3
 80194b4:	3708      	adds	r7, #8
 80194b6:	46bd      	mov	sp, r7
 80194b8:	bd80      	pop	{r7, pc}
 80194ba:	bf00      	nop
 80194bc:	20008744 	.word	0x20008744
 80194c0:	08021df4 	.word	0x08021df4

080194c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80194c4:	b580      	push	{r7, lr}
 80194c6:	b084      	sub	sp, #16
 80194c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80194ca:	4b0f      	ldr	r3, [pc, #60]	; (8019508 <Get_SerialNum+0x44>)
 80194cc:	681b      	ldr	r3, [r3, #0]
 80194ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80194d0:	4b0e      	ldr	r3, [pc, #56]	; (801950c <Get_SerialNum+0x48>)
 80194d2:	681b      	ldr	r3, [r3, #0]
 80194d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80194d6:	4b0e      	ldr	r3, [pc, #56]	; (8019510 <Get_SerialNum+0x4c>)
 80194d8:	681b      	ldr	r3, [r3, #0]
 80194da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80194dc:	68fa      	ldr	r2, [r7, #12]
 80194de:	687b      	ldr	r3, [r7, #4]
 80194e0:	4413      	add	r3, r2
 80194e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80194e4:	68fb      	ldr	r3, [r7, #12]
 80194e6:	2b00      	cmp	r3, #0
 80194e8:	d009      	beq.n	80194fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80194ea:	2208      	movs	r2, #8
 80194ec:	4909      	ldr	r1, [pc, #36]	; (8019514 <Get_SerialNum+0x50>)
 80194ee:	68f8      	ldr	r0, [r7, #12]
 80194f0:	f000 f814 	bl	801951c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80194f4:	2204      	movs	r2, #4
 80194f6:	4908      	ldr	r1, [pc, #32]	; (8019518 <Get_SerialNum+0x54>)
 80194f8:	68b8      	ldr	r0, [r7, #8]
 80194fa:	f000 f80f 	bl	801951c <IntToUnicode>
  }
}
 80194fe:	bf00      	nop
 8019500:	3710      	adds	r7, #16
 8019502:	46bd      	mov	sp, r7
 8019504:	bd80      	pop	{r7, pc}
 8019506:	bf00      	nop
 8019508:	1fff7a10 	.word	0x1fff7a10
 801950c:	1fff7a14 	.word	0x1fff7a14
 8019510:	1fff7a18 	.word	0x1fff7a18
 8019514:	200001da 	.word	0x200001da
 8019518:	200001ea 	.word	0x200001ea

0801951c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801951c:	b480      	push	{r7}
 801951e:	b087      	sub	sp, #28
 8019520:	af00      	add	r7, sp, #0
 8019522:	60f8      	str	r0, [r7, #12]
 8019524:	60b9      	str	r1, [r7, #8]
 8019526:	4613      	mov	r3, r2
 8019528:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801952a:	2300      	movs	r3, #0
 801952c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801952e:	2300      	movs	r3, #0
 8019530:	75fb      	strb	r3, [r7, #23]
 8019532:	e027      	b.n	8019584 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8019534:	68fb      	ldr	r3, [r7, #12]
 8019536:	0f1b      	lsrs	r3, r3, #28
 8019538:	2b09      	cmp	r3, #9
 801953a:	d80b      	bhi.n	8019554 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801953c:	68fb      	ldr	r3, [r7, #12]
 801953e:	0f1b      	lsrs	r3, r3, #28
 8019540:	b2da      	uxtb	r2, r3
 8019542:	7dfb      	ldrb	r3, [r7, #23]
 8019544:	005b      	lsls	r3, r3, #1
 8019546:	4619      	mov	r1, r3
 8019548:	68bb      	ldr	r3, [r7, #8]
 801954a:	440b      	add	r3, r1
 801954c:	3230      	adds	r2, #48	; 0x30
 801954e:	b2d2      	uxtb	r2, r2
 8019550:	701a      	strb	r2, [r3, #0]
 8019552:	e00a      	b.n	801956a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8019554:	68fb      	ldr	r3, [r7, #12]
 8019556:	0f1b      	lsrs	r3, r3, #28
 8019558:	b2da      	uxtb	r2, r3
 801955a:	7dfb      	ldrb	r3, [r7, #23]
 801955c:	005b      	lsls	r3, r3, #1
 801955e:	4619      	mov	r1, r3
 8019560:	68bb      	ldr	r3, [r7, #8]
 8019562:	440b      	add	r3, r1
 8019564:	3237      	adds	r2, #55	; 0x37
 8019566:	b2d2      	uxtb	r2, r2
 8019568:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801956a:	68fb      	ldr	r3, [r7, #12]
 801956c:	011b      	lsls	r3, r3, #4
 801956e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8019570:	7dfb      	ldrb	r3, [r7, #23]
 8019572:	005b      	lsls	r3, r3, #1
 8019574:	3301      	adds	r3, #1
 8019576:	68ba      	ldr	r2, [r7, #8]
 8019578:	4413      	add	r3, r2
 801957a:	2200      	movs	r2, #0
 801957c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801957e:	7dfb      	ldrb	r3, [r7, #23]
 8019580:	3301      	adds	r3, #1
 8019582:	75fb      	strb	r3, [r7, #23]
 8019584:	7dfa      	ldrb	r2, [r7, #23]
 8019586:	79fb      	ldrb	r3, [r7, #7]
 8019588:	429a      	cmp	r2, r3
 801958a:	d3d3      	bcc.n	8019534 <IntToUnicode+0x18>
  }
}
 801958c:	bf00      	nop
 801958e:	bf00      	nop
 8019590:	371c      	adds	r7, #28
 8019592:	46bd      	mov	sp, r7
 8019594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019598:	4770      	bx	lr
	...

0801959c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801959c:	b580      	push	{r7, lr}
 801959e:	b08a      	sub	sp, #40	; 0x28
 80195a0:	af00      	add	r7, sp, #0
 80195a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80195a4:	f107 0314 	add.w	r3, r7, #20
 80195a8:	2200      	movs	r2, #0
 80195aa:	601a      	str	r2, [r3, #0]
 80195ac:	605a      	str	r2, [r3, #4]
 80195ae:	609a      	str	r2, [r3, #8]
 80195b0:	60da      	str	r2, [r3, #12]
 80195b2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	681b      	ldr	r3, [r3, #0]
 80195b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80195bc:	d147      	bne.n	801964e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80195be:	2300      	movs	r3, #0
 80195c0:	613b      	str	r3, [r7, #16]
 80195c2:	4b25      	ldr	r3, [pc, #148]	; (8019658 <HAL_PCD_MspInit+0xbc>)
 80195c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80195c6:	4a24      	ldr	r2, [pc, #144]	; (8019658 <HAL_PCD_MspInit+0xbc>)
 80195c8:	f043 0301 	orr.w	r3, r3, #1
 80195cc:	6313      	str	r3, [r2, #48]	; 0x30
 80195ce:	4b22      	ldr	r3, [pc, #136]	; (8019658 <HAL_PCD_MspInit+0xbc>)
 80195d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80195d2:	f003 0301 	and.w	r3, r3, #1
 80195d6:	613b      	str	r3, [r7, #16]
 80195d8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80195da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80195de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80195e0:	2300      	movs	r3, #0
 80195e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80195e4:	2300      	movs	r3, #0
 80195e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80195e8:	f107 0314 	add.w	r3, r7, #20
 80195ec:	4619      	mov	r1, r3
 80195ee:	481b      	ldr	r0, [pc, #108]	; (801965c <HAL_PCD_MspInit+0xc0>)
 80195f0:	f7f0 fa2a 	bl	8009a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80195f4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80195f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80195fa:	2302      	movs	r3, #2
 80195fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80195fe:	2300      	movs	r3, #0
 8019600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019602:	2303      	movs	r3, #3
 8019604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8019606:	230a      	movs	r3, #10
 8019608:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801960a:	f107 0314 	add.w	r3, r7, #20
 801960e:	4619      	mov	r1, r3
 8019610:	4812      	ldr	r0, [pc, #72]	; (801965c <HAL_PCD_MspInit+0xc0>)
 8019612:	f7f0 fa19 	bl	8009a48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8019616:	4b10      	ldr	r3, [pc, #64]	; (8019658 <HAL_PCD_MspInit+0xbc>)
 8019618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801961a:	4a0f      	ldr	r2, [pc, #60]	; (8019658 <HAL_PCD_MspInit+0xbc>)
 801961c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019620:	6353      	str	r3, [r2, #52]	; 0x34
 8019622:	2300      	movs	r3, #0
 8019624:	60fb      	str	r3, [r7, #12]
 8019626:	4b0c      	ldr	r3, [pc, #48]	; (8019658 <HAL_PCD_MspInit+0xbc>)
 8019628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801962a:	4a0b      	ldr	r2, [pc, #44]	; (8019658 <HAL_PCD_MspInit+0xbc>)
 801962c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8019630:	6453      	str	r3, [r2, #68]	; 0x44
 8019632:	4b09      	ldr	r3, [pc, #36]	; (8019658 <HAL_PCD_MspInit+0xbc>)
 8019634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801963a:	60fb      	str	r3, [r7, #12]
 801963c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801963e:	2200      	movs	r2, #0
 8019640:	2105      	movs	r1, #5
 8019642:	2043      	movs	r0, #67	; 0x43
 8019644:	f7f0 f9c8 	bl	80099d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8019648:	2043      	movs	r0, #67	; 0x43
 801964a:	f7f0 f9e1 	bl	8009a10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801964e:	bf00      	nop
 8019650:	3728      	adds	r7, #40	; 0x28
 8019652:	46bd      	mov	sp, r7
 8019654:	bd80      	pop	{r7, pc}
 8019656:	bf00      	nop
 8019658:	40023800 	.word	0x40023800
 801965c:	40020000 	.word	0x40020000

08019660 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019660:	b580      	push	{r7, lr}
 8019662:	b082      	sub	sp, #8
 8019664:	af00      	add	r7, sp, #0
 8019666:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801966e:	687b      	ldr	r3, [r7, #4]
 8019670:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8019674:	4619      	mov	r1, r3
 8019676:	4610      	mov	r0, r2
 8019678:	f7f8 fb1c 	bl	8011cb4 <USBD_LL_SetupStage>
}
 801967c:	bf00      	nop
 801967e:	3708      	adds	r7, #8
 8019680:	46bd      	mov	sp, r7
 8019682:	bd80      	pop	{r7, pc}

08019684 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019684:	b580      	push	{r7, lr}
 8019686:	b082      	sub	sp, #8
 8019688:	af00      	add	r7, sp, #0
 801968a:	6078      	str	r0, [r7, #4]
 801968c:	460b      	mov	r3, r1
 801968e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8019696:	78fa      	ldrb	r2, [r7, #3]
 8019698:	6879      	ldr	r1, [r7, #4]
 801969a:	4613      	mov	r3, r2
 801969c:	00db      	lsls	r3, r3, #3
 801969e:	1a9b      	subs	r3, r3, r2
 80196a0:	009b      	lsls	r3, r3, #2
 80196a2:	440b      	add	r3, r1
 80196a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80196a8:	681a      	ldr	r2, [r3, #0]
 80196aa:	78fb      	ldrb	r3, [r7, #3]
 80196ac:	4619      	mov	r1, r3
 80196ae:	f7f8 fb56 	bl	8011d5e <USBD_LL_DataOutStage>
}
 80196b2:	bf00      	nop
 80196b4:	3708      	adds	r7, #8
 80196b6:	46bd      	mov	sp, r7
 80196b8:	bd80      	pop	{r7, pc}

080196ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80196ba:	b580      	push	{r7, lr}
 80196bc:	b082      	sub	sp, #8
 80196be:	af00      	add	r7, sp, #0
 80196c0:	6078      	str	r0, [r7, #4]
 80196c2:	460b      	mov	r3, r1
 80196c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80196cc:	78fa      	ldrb	r2, [r7, #3]
 80196ce:	6879      	ldr	r1, [r7, #4]
 80196d0:	4613      	mov	r3, r2
 80196d2:	00db      	lsls	r3, r3, #3
 80196d4:	1a9b      	subs	r3, r3, r2
 80196d6:	009b      	lsls	r3, r3, #2
 80196d8:	440b      	add	r3, r1
 80196da:	3348      	adds	r3, #72	; 0x48
 80196dc:	681a      	ldr	r2, [r3, #0]
 80196de:	78fb      	ldrb	r3, [r7, #3]
 80196e0:	4619      	mov	r1, r3
 80196e2:	f7f8 fb9f 	bl	8011e24 <USBD_LL_DataInStage>
}
 80196e6:	bf00      	nop
 80196e8:	3708      	adds	r7, #8
 80196ea:	46bd      	mov	sp, r7
 80196ec:	bd80      	pop	{r7, pc}

080196ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80196ee:	b580      	push	{r7, lr}
 80196f0:	b082      	sub	sp, #8
 80196f2:	af00      	add	r7, sp, #0
 80196f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80196fc:	4618      	mov	r0, r3
 80196fe:	f7f8 fcb3 	bl	8012068 <USBD_LL_SOF>
}
 8019702:	bf00      	nop
 8019704:	3708      	adds	r7, #8
 8019706:	46bd      	mov	sp, r7
 8019708:	bd80      	pop	{r7, pc}

0801970a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801970a:	b580      	push	{r7, lr}
 801970c:	b084      	sub	sp, #16
 801970e:	af00      	add	r7, sp, #0
 8019710:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8019712:	2301      	movs	r3, #1
 8019714:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	68db      	ldr	r3, [r3, #12]
 801971a:	2b00      	cmp	r3, #0
 801971c:	d102      	bne.n	8019724 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801971e:	2300      	movs	r3, #0
 8019720:	73fb      	strb	r3, [r7, #15]
 8019722:	e008      	b.n	8019736 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	68db      	ldr	r3, [r3, #12]
 8019728:	2b02      	cmp	r3, #2
 801972a:	d102      	bne.n	8019732 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801972c:	2301      	movs	r3, #1
 801972e:	73fb      	strb	r3, [r7, #15]
 8019730:	e001      	b.n	8019736 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8019732:	f7e8 fbe5 	bl	8001f00 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801973c:	7bfa      	ldrb	r2, [r7, #15]
 801973e:	4611      	mov	r1, r2
 8019740:	4618      	mov	r0, r3
 8019742:	f7f8 fc53 	bl	8011fec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801974c:	4618      	mov	r0, r3
 801974e:	f7f8 fbff 	bl	8011f50 <USBD_LL_Reset>
}
 8019752:	bf00      	nop
 8019754:	3710      	adds	r7, #16
 8019756:	46bd      	mov	sp, r7
 8019758:	bd80      	pop	{r7, pc}
	...

0801975c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801975c:	b580      	push	{r7, lr}
 801975e:	b082      	sub	sp, #8
 8019760:	af00      	add	r7, sp, #0
 8019762:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801976a:	4618      	mov	r0, r3
 801976c:	f7f8 fc4e 	bl	801200c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8019770:	687b      	ldr	r3, [r7, #4]
 8019772:	681b      	ldr	r3, [r3, #0]
 8019774:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019778:	681b      	ldr	r3, [r3, #0]
 801977a:	687a      	ldr	r2, [r7, #4]
 801977c:	6812      	ldr	r2, [r2, #0]
 801977e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019782:	f043 0301 	orr.w	r3, r3, #1
 8019786:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	6a1b      	ldr	r3, [r3, #32]
 801978c:	2b00      	cmp	r3, #0
 801978e:	d005      	beq.n	801979c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019790:	4b04      	ldr	r3, [pc, #16]	; (80197a4 <HAL_PCD_SuspendCallback+0x48>)
 8019792:	691b      	ldr	r3, [r3, #16]
 8019794:	4a03      	ldr	r2, [pc, #12]	; (80197a4 <HAL_PCD_SuspendCallback+0x48>)
 8019796:	f043 0306 	orr.w	r3, r3, #6
 801979a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801979c:	bf00      	nop
 801979e:	3708      	adds	r7, #8
 80197a0:	46bd      	mov	sp, r7
 80197a2:	bd80      	pop	{r7, pc}
 80197a4:	e000ed00 	.word	0xe000ed00

080197a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80197a8:	b580      	push	{r7, lr}
 80197aa:	b082      	sub	sp, #8
 80197ac:	af00      	add	r7, sp, #0
 80197ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80197b6:	4618      	mov	r0, r3
 80197b8:	f7f8 fc3e 	bl	8012038 <USBD_LL_Resume>
}
 80197bc:	bf00      	nop
 80197be:	3708      	adds	r7, #8
 80197c0:	46bd      	mov	sp, r7
 80197c2:	bd80      	pop	{r7, pc}

080197c4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80197c4:	b580      	push	{r7, lr}
 80197c6:	b082      	sub	sp, #8
 80197c8:	af00      	add	r7, sp, #0
 80197ca:	6078      	str	r0, [r7, #4]
 80197cc:	460b      	mov	r3, r1
 80197ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80197d6:	78fa      	ldrb	r2, [r7, #3]
 80197d8:	4611      	mov	r1, r2
 80197da:	4618      	mov	r0, r3
 80197dc:	f7f8 fc8c 	bl	80120f8 <USBD_LL_IsoOUTIncomplete>
}
 80197e0:	bf00      	nop
 80197e2:	3708      	adds	r7, #8
 80197e4:	46bd      	mov	sp, r7
 80197e6:	bd80      	pop	{r7, pc}

080197e8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80197e8:	b580      	push	{r7, lr}
 80197ea:	b082      	sub	sp, #8
 80197ec:	af00      	add	r7, sp, #0
 80197ee:	6078      	str	r0, [r7, #4]
 80197f0:	460b      	mov	r3, r1
 80197f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80197fa:	78fa      	ldrb	r2, [r7, #3]
 80197fc:	4611      	mov	r1, r2
 80197fe:	4618      	mov	r0, r3
 8019800:	f7f8 fc54 	bl	80120ac <USBD_LL_IsoINIncomplete>
}
 8019804:	bf00      	nop
 8019806:	3708      	adds	r7, #8
 8019808:	46bd      	mov	sp, r7
 801980a:	bd80      	pop	{r7, pc}

0801980c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801980c:	b580      	push	{r7, lr}
 801980e:	b082      	sub	sp, #8
 8019810:	af00      	add	r7, sp, #0
 8019812:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801981a:	4618      	mov	r0, r3
 801981c:	f7f8 fc92 	bl	8012144 <USBD_LL_DevConnected>
}
 8019820:	bf00      	nop
 8019822:	3708      	adds	r7, #8
 8019824:	46bd      	mov	sp, r7
 8019826:	bd80      	pop	{r7, pc}

08019828 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019828:	b580      	push	{r7, lr}
 801982a:	b082      	sub	sp, #8
 801982c:	af00      	add	r7, sp, #0
 801982e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019836:	4618      	mov	r0, r3
 8019838:	f7f8 fc8f 	bl	801215a <USBD_LL_DevDisconnected>
}
 801983c:	bf00      	nop
 801983e:	3708      	adds	r7, #8
 8019840:	46bd      	mov	sp, r7
 8019842:	bd80      	pop	{r7, pc}

08019844 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019844:	b580      	push	{r7, lr}
 8019846:	b082      	sub	sp, #8
 8019848:	af00      	add	r7, sp, #0
 801984a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	781b      	ldrb	r3, [r3, #0]
 8019850:	2b00      	cmp	r3, #0
 8019852:	d13c      	bne.n	80198ce <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8019854:	4a20      	ldr	r2, [pc, #128]	; (80198d8 <USBD_LL_Init+0x94>)
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	4a1e      	ldr	r2, [pc, #120]	; (80198d8 <USBD_LL_Init+0x94>)
 8019860:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019864:	4b1c      	ldr	r3, [pc, #112]	; (80198d8 <USBD_LL_Init+0x94>)
 8019866:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801986a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801986c:	4b1a      	ldr	r3, [pc, #104]	; (80198d8 <USBD_LL_Init+0x94>)
 801986e:	2204      	movs	r2, #4
 8019870:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8019872:	4b19      	ldr	r3, [pc, #100]	; (80198d8 <USBD_LL_Init+0x94>)
 8019874:	2202      	movs	r2, #2
 8019876:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8019878:	4b17      	ldr	r3, [pc, #92]	; (80198d8 <USBD_LL_Init+0x94>)
 801987a:	2200      	movs	r2, #0
 801987c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801987e:	4b16      	ldr	r3, [pc, #88]	; (80198d8 <USBD_LL_Init+0x94>)
 8019880:	2202      	movs	r2, #2
 8019882:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8019884:	4b14      	ldr	r3, [pc, #80]	; (80198d8 <USBD_LL_Init+0x94>)
 8019886:	2200      	movs	r2, #0
 8019888:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801988a:	4b13      	ldr	r3, [pc, #76]	; (80198d8 <USBD_LL_Init+0x94>)
 801988c:	2200      	movs	r2, #0
 801988e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8019890:	4b11      	ldr	r3, [pc, #68]	; (80198d8 <USBD_LL_Init+0x94>)
 8019892:	2200      	movs	r2, #0
 8019894:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8019896:	4b10      	ldr	r3, [pc, #64]	; (80198d8 <USBD_LL_Init+0x94>)
 8019898:	2201      	movs	r2, #1
 801989a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801989c:	4b0e      	ldr	r3, [pc, #56]	; (80198d8 <USBD_LL_Init+0x94>)
 801989e:	2200      	movs	r2, #0
 80198a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80198a2:	480d      	ldr	r0, [pc, #52]	; (80198d8 <USBD_LL_Init+0x94>)
 80198a4:	f7f1 fb42 	bl	800af2c <HAL_PCD_Init>
 80198a8:	4603      	mov	r3, r0
 80198aa:	2b00      	cmp	r3, #0
 80198ac:	d001      	beq.n	80198b2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80198ae:	f7e8 fb27 	bl	8001f00 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80198b2:	2180      	movs	r1, #128	; 0x80
 80198b4:	4808      	ldr	r0, [pc, #32]	; (80198d8 <USBD_LL_Init+0x94>)
 80198b6:	f7f2 fca0 	bl	800c1fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80198ba:	2240      	movs	r2, #64	; 0x40
 80198bc:	2100      	movs	r1, #0
 80198be:	4806      	ldr	r0, [pc, #24]	; (80198d8 <USBD_LL_Init+0x94>)
 80198c0:	f7f2 fc54 	bl	800c16c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80198c4:	2280      	movs	r2, #128	; 0x80
 80198c6:	2101      	movs	r1, #1
 80198c8:	4803      	ldr	r0, [pc, #12]	; (80198d8 <USBD_LL_Init+0x94>)
 80198ca:	f7f2 fc4f 	bl	800c16c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80198ce:	2300      	movs	r3, #0
}
 80198d0:	4618      	mov	r0, r3
 80198d2:	3708      	adds	r7, #8
 80198d4:	46bd      	mov	sp, r7
 80198d6:	bd80      	pop	{r7, pc}
 80198d8:	20008944 	.word	0x20008944

080198dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80198dc:	b580      	push	{r7, lr}
 80198de:	b084      	sub	sp, #16
 80198e0:	af00      	add	r7, sp, #0
 80198e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80198e4:	2300      	movs	r3, #0
 80198e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80198e8:	2300      	movs	r3, #0
 80198ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80198f2:	4618      	mov	r0, r3
 80198f4:	f7f1 fc37 	bl	800b166 <HAL_PCD_Start>
 80198f8:	4603      	mov	r3, r0
 80198fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80198fc:	7bfb      	ldrb	r3, [r7, #15]
 80198fe:	4618      	mov	r0, r3
 8019900:	f000 f942 	bl	8019b88 <USBD_Get_USB_Status>
 8019904:	4603      	mov	r3, r0
 8019906:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019908:	7bbb      	ldrb	r3, [r7, #14]
}
 801990a:	4618      	mov	r0, r3
 801990c:	3710      	adds	r7, #16
 801990e:	46bd      	mov	sp, r7
 8019910:	bd80      	pop	{r7, pc}

08019912 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019912:	b580      	push	{r7, lr}
 8019914:	b084      	sub	sp, #16
 8019916:	af00      	add	r7, sp, #0
 8019918:	6078      	str	r0, [r7, #4]
 801991a:	4608      	mov	r0, r1
 801991c:	4611      	mov	r1, r2
 801991e:	461a      	mov	r2, r3
 8019920:	4603      	mov	r3, r0
 8019922:	70fb      	strb	r3, [r7, #3]
 8019924:	460b      	mov	r3, r1
 8019926:	70bb      	strb	r3, [r7, #2]
 8019928:	4613      	mov	r3, r2
 801992a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801992c:	2300      	movs	r3, #0
 801992e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019930:	2300      	movs	r3, #0
 8019932:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801993a:	78bb      	ldrb	r3, [r7, #2]
 801993c:	883a      	ldrh	r2, [r7, #0]
 801993e:	78f9      	ldrb	r1, [r7, #3]
 8019940:	f7f2 f81b 	bl	800b97a <HAL_PCD_EP_Open>
 8019944:	4603      	mov	r3, r0
 8019946:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019948:	7bfb      	ldrb	r3, [r7, #15]
 801994a:	4618      	mov	r0, r3
 801994c:	f000 f91c 	bl	8019b88 <USBD_Get_USB_Status>
 8019950:	4603      	mov	r3, r0
 8019952:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019954:	7bbb      	ldrb	r3, [r7, #14]
}
 8019956:	4618      	mov	r0, r3
 8019958:	3710      	adds	r7, #16
 801995a:	46bd      	mov	sp, r7
 801995c:	bd80      	pop	{r7, pc}

0801995e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801995e:	b580      	push	{r7, lr}
 8019960:	b084      	sub	sp, #16
 8019962:	af00      	add	r7, sp, #0
 8019964:	6078      	str	r0, [r7, #4]
 8019966:	460b      	mov	r3, r1
 8019968:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801996a:	2300      	movs	r3, #0
 801996c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801996e:	2300      	movs	r3, #0
 8019970:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019972:	687b      	ldr	r3, [r7, #4]
 8019974:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019978:	78fa      	ldrb	r2, [r7, #3]
 801997a:	4611      	mov	r1, r2
 801997c:	4618      	mov	r0, r3
 801997e:	f7f2 f864 	bl	800ba4a <HAL_PCD_EP_Close>
 8019982:	4603      	mov	r3, r0
 8019984:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019986:	7bfb      	ldrb	r3, [r7, #15]
 8019988:	4618      	mov	r0, r3
 801998a:	f000 f8fd 	bl	8019b88 <USBD_Get_USB_Status>
 801998e:	4603      	mov	r3, r0
 8019990:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019992:	7bbb      	ldrb	r3, [r7, #14]
}
 8019994:	4618      	mov	r0, r3
 8019996:	3710      	adds	r7, #16
 8019998:	46bd      	mov	sp, r7
 801999a:	bd80      	pop	{r7, pc}

0801999c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801999c:	b580      	push	{r7, lr}
 801999e:	b084      	sub	sp, #16
 80199a0:	af00      	add	r7, sp, #0
 80199a2:	6078      	str	r0, [r7, #4]
 80199a4:	460b      	mov	r3, r1
 80199a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80199a8:	2300      	movs	r3, #0
 80199aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80199ac:	2300      	movs	r3, #0
 80199ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80199b6:	78fa      	ldrb	r2, [r7, #3]
 80199b8:	4611      	mov	r1, r2
 80199ba:	4618      	mov	r0, r3
 80199bc:	f7f2 f93c 	bl	800bc38 <HAL_PCD_EP_SetStall>
 80199c0:	4603      	mov	r3, r0
 80199c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80199c4:	7bfb      	ldrb	r3, [r7, #15]
 80199c6:	4618      	mov	r0, r3
 80199c8:	f000 f8de 	bl	8019b88 <USBD_Get_USB_Status>
 80199cc:	4603      	mov	r3, r0
 80199ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80199d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80199d2:	4618      	mov	r0, r3
 80199d4:	3710      	adds	r7, #16
 80199d6:	46bd      	mov	sp, r7
 80199d8:	bd80      	pop	{r7, pc}

080199da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80199da:	b580      	push	{r7, lr}
 80199dc:	b084      	sub	sp, #16
 80199de:	af00      	add	r7, sp, #0
 80199e0:	6078      	str	r0, [r7, #4]
 80199e2:	460b      	mov	r3, r1
 80199e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80199e6:	2300      	movs	r3, #0
 80199e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80199ea:	2300      	movs	r3, #0
 80199ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80199f4:	78fa      	ldrb	r2, [r7, #3]
 80199f6:	4611      	mov	r1, r2
 80199f8:	4618      	mov	r0, r3
 80199fa:	f7f2 f981 	bl	800bd00 <HAL_PCD_EP_ClrStall>
 80199fe:	4603      	mov	r3, r0
 8019a00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019a02:	7bfb      	ldrb	r3, [r7, #15]
 8019a04:	4618      	mov	r0, r3
 8019a06:	f000 f8bf 	bl	8019b88 <USBD_Get_USB_Status>
 8019a0a:	4603      	mov	r3, r0
 8019a0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019a0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8019a10:	4618      	mov	r0, r3
 8019a12:	3710      	adds	r7, #16
 8019a14:	46bd      	mov	sp, r7
 8019a16:	bd80      	pop	{r7, pc}

08019a18 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019a18:	b480      	push	{r7}
 8019a1a:	b085      	sub	sp, #20
 8019a1c:	af00      	add	r7, sp, #0
 8019a1e:	6078      	str	r0, [r7, #4]
 8019a20:	460b      	mov	r3, r1
 8019a22:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019a2a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8019a2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019a30:	2b00      	cmp	r3, #0
 8019a32:	da0b      	bge.n	8019a4c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019a34:	78fb      	ldrb	r3, [r7, #3]
 8019a36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019a3a:	68f9      	ldr	r1, [r7, #12]
 8019a3c:	4613      	mov	r3, r2
 8019a3e:	00db      	lsls	r3, r3, #3
 8019a40:	1a9b      	subs	r3, r3, r2
 8019a42:	009b      	lsls	r3, r3, #2
 8019a44:	440b      	add	r3, r1
 8019a46:	333e      	adds	r3, #62	; 0x3e
 8019a48:	781b      	ldrb	r3, [r3, #0]
 8019a4a:	e00b      	b.n	8019a64 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019a4c:	78fb      	ldrb	r3, [r7, #3]
 8019a4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019a52:	68f9      	ldr	r1, [r7, #12]
 8019a54:	4613      	mov	r3, r2
 8019a56:	00db      	lsls	r3, r3, #3
 8019a58:	1a9b      	subs	r3, r3, r2
 8019a5a:	009b      	lsls	r3, r3, #2
 8019a5c:	440b      	add	r3, r1
 8019a5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8019a62:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019a64:	4618      	mov	r0, r3
 8019a66:	3714      	adds	r7, #20
 8019a68:	46bd      	mov	sp, r7
 8019a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a6e:	4770      	bx	lr

08019a70 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019a70:	b580      	push	{r7, lr}
 8019a72:	b084      	sub	sp, #16
 8019a74:	af00      	add	r7, sp, #0
 8019a76:	6078      	str	r0, [r7, #4]
 8019a78:	460b      	mov	r3, r1
 8019a7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a7c:	2300      	movs	r3, #0
 8019a7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019a80:	2300      	movs	r3, #0
 8019a82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019a8a:	78fa      	ldrb	r2, [r7, #3]
 8019a8c:	4611      	mov	r1, r2
 8019a8e:	4618      	mov	r0, r3
 8019a90:	f7f1 ff4e 	bl	800b930 <HAL_PCD_SetAddress>
 8019a94:	4603      	mov	r3, r0
 8019a96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019a98:	7bfb      	ldrb	r3, [r7, #15]
 8019a9a:	4618      	mov	r0, r3
 8019a9c:	f000 f874 	bl	8019b88 <USBD_Get_USB_Status>
 8019aa0:	4603      	mov	r3, r0
 8019aa2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019aa4:	7bbb      	ldrb	r3, [r7, #14]
}
 8019aa6:	4618      	mov	r0, r3
 8019aa8:	3710      	adds	r7, #16
 8019aaa:	46bd      	mov	sp, r7
 8019aac:	bd80      	pop	{r7, pc}

08019aae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019aae:	b580      	push	{r7, lr}
 8019ab0:	b086      	sub	sp, #24
 8019ab2:	af00      	add	r7, sp, #0
 8019ab4:	60f8      	str	r0, [r7, #12]
 8019ab6:	607a      	str	r2, [r7, #4]
 8019ab8:	603b      	str	r3, [r7, #0]
 8019aba:	460b      	mov	r3, r1
 8019abc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019abe:	2300      	movs	r3, #0
 8019ac0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019ac2:	2300      	movs	r3, #0
 8019ac4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019ac6:	68fb      	ldr	r3, [r7, #12]
 8019ac8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019acc:	7af9      	ldrb	r1, [r7, #11]
 8019ace:	683b      	ldr	r3, [r7, #0]
 8019ad0:	687a      	ldr	r2, [r7, #4]
 8019ad2:	f7f2 f867 	bl	800bba4 <HAL_PCD_EP_Transmit>
 8019ad6:	4603      	mov	r3, r0
 8019ad8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019ada:	7dfb      	ldrb	r3, [r7, #23]
 8019adc:	4618      	mov	r0, r3
 8019ade:	f000 f853 	bl	8019b88 <USBD_Get_USB_Status>
 8019ae2:	4603      	mov	r3, r0
 8019ae4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019ae6:	7dbb      	ldrb	r3, [r7, #22]
}
 8019ae8:	4618      	mov	r0, r3
 8019aea:	3718      	adds	r7, #24
 8019aec:	46bd      	mov	sp, r7
 8019aee:	bd80      	pop	{r7, pc}

08019af0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019af0:	b580      	push	{r7, lr}
 8019af2:	b086      	sub	sp, #24
 8019af4:	af00      	add	r7, sp, #0
 8019af6:	60f8      	str	r0, [r7, #12]
 8019af8:	607a      	str	r2, [r7, #4]
 8019afa:	603b      	str	r3, [r7, #0]
 8019afc:	460b      	mov	r3, r1
 8019afe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019b00:	2300      	movs	r3, #0
 8019b02:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019b04:	2300      	movs	r3, #0
 8019b06:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019b08:	68fb      	ldr	r3, [r7, #12]
 8019b0a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019b0e:	7af9      	ldrb	r1, [r7, #11]
 8019b10:	683b      	ldr	r3, [r7, #0]
 8019b12:	687a      	ldr	r2, [r7, #4]
 8019b14:	f7f1 ffe3 	bl	800bade <HAL_PCD_EP_Receive>
 8019b18:	4603      	mov	r3, r0
 8019b1a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019b1c:	7dfb      	ldrb	r3, [r7, #23]
 8019b1e:	4618      	mov	r0, r3
 8019b20:	f000 f832 	bl	8019b88 <USBD_Get_USB_Status>
 8019b24:	4603      	mov	r3, r0
 8019b26:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019b28:	7dbb      	ldrb	r3, [r7, #22]
}
 8019b2a:	4618      	mov	r0, r3
 8019b2c:	3718      	adds	r7, #24
 8019b2e:	46bd      	mov	sp, r7
 8019b30:	bd80      	pop	{r7, pc}

08019b32 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019b32:	b580      	push	{r7, lr}
 8019b34:	b082      	sub	sp, #8
 8019b36:	af00      	add	r7, sp, #0
 8019b38:	6078      	str	r0, [r7, #4]
 8019b3a:	460b      	mov	r3, r1
 8019b3c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019b3e:	687b      	ldr	r3, [r7, #4]
 8019b40:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019b44:	78fa      	ldrb	r2, [r7, #3]
 8019b46:	4611      	mov	r1, r2
 8019b48:	4618      	mov	r0, r3
 8019b4a:	f7f2 f813 	bl	800bb74 <HAL_PCD_EP_GetRxCount>
 8019b4e:	4603      	mov	r3, r0
}
 8019b50:	4618      	mov	r0, r3
 8019b52:	3708      	adds	r7, #8
 8019b54:	46bd      	mov	sp, r7
 8019b56:	bd80      	pop	{r7, pc}

08019b58 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019b58:	b480      	push	{r7}
 8019b5a:	b083      	sub	sp, #12
 8019b5c:	af00      	add	r7, sp, #0
 8019b5e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8019b60:	4b03      	ldr	r3, [pc, #12]	; (8019b70 <USBD_static_malloc+0x18>)
}
 8019b62:	4618      	mov	r0, r3
 8019b64:	370c      	adds	r7, #12
 8019b66:	46bd      	mov	sp, r7
 8019b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b6c:	4770      	bx	lr
 8019b6e:	bf00      	nop
 8019b70:	20005c94 	.word	0x20005c94

08019b74 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8019b74:	b480      	push	{r7}
 8019b76:	b083      	sub	sp, #12
 8019b78:	af00      	add	r7, sp, #0
 8019b7a:	6078      	str	r0, [r7, #4]

}
 8019b7c:	bf00      	nop
 8019b7e:	370c      	adds	r7, #12
 8019b80:	46bd      	mov	sp, r7
 8019b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b86:	4770      	bx	lr

08019b88 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019b88:	b480      	push	{r7}
 8019b8a:	b085      	sub	sp, #20
 8019b8c:	af00      	add	r7, sp, #0
 8019b8e:	4603      	mov	r3, r0
 8019b90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019b92:	2300      	movs	r3, #0
 8019b94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019b96:	79fb      	ldrb	r3, [r7, #7]
 8019b98:	2b03      	cmp	r3, #3
 8019b9a:	d817      	bhi.n	8019bcc <USBD_Get_USB_Status+0x44>
 8019b9c:	a201      	add	r2, pc, #4	; (adr r2, 8019ba4 <USBD_Get_USB_Status+0x1c>)
 8019b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019ba2:	bf00      	nop
 8019ba4:	08019bb5 	.word	0x08019bb5
 8019ba8:	08019bbb 	.word	0x08019bbb
 8019bac:	08019bc1 	.word	0x08019bc1
 8019bb0:	08019bc7 	.word	0x08019bc7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8019bb4:	2300      	movs	r3, #0
 8019bb6:	73fb      	strb	r3, [r7, #15]
    break;
 8019bb8:	e00b      	b.n	8019bd2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019bba:	2303      	movs	r3, #3
 8019bbc:	73fb      	strb	r3, [r7, #15]
    break;
 8019bbe:	e008      	b.n	8019bd2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019bc0:	2301      	movs	r3, #1
 8019bc2:	73fb      	strb	r3, [r7, #15]
    break;
 8019bc4:	e005      	b.n	8019bd2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019bc6:	2303      	movs	r3, #3
 8019bc8:	73fb      	strb	r3, [r7, #15]
    break;
 8019bca:	e002      	b.n	8019bd2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8019bcc:	2303      	movs	r3, #3
 8019bce:	73fb      	strb	r3, [r7, #15]
    break;
 8019bd0:	bf00      	nop
  }
  return usb_status;
 8019bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8019bd4:	4618      	mov	r0, r3
 8019bd6:	3714      	adds	r7, #20
 8019bd8:	46bd      	mov	sp, r7
 8019bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bde:	4770      	bx	lr

08019be0 <_Znwj>:
 8019be0:	2801      	cmp	r0, #1
 8019be2:	bf38      	it	cc
 8019be4:	2001      	movcc	r0, #1
 8019be6:	b510      	push	{r4, lr}
 8019be8:	4604      	mov	r4, r0
 8019bea:	4620      	mov	r0, r4
 8019bec:	f000 fa82 	bl	801a0f4 <malloc>
 8019bf0:	b930      	cbnz	r0, 8019c00 <_Znwj+0x20>
 8019bf2:	f000 f81d 	bl	8019c30 <_ZSt15get_new_handlerv>
 8019bf6:	b908      	cbnz	r0, 8019bfc <_Znwj+0x1c>
 8019bf8:	f000 f82a 	bl	8019c50 <abort>
 8019bfc:	4780      	blx	r0
 8019bfe:	e7f4      	b.n	8019bea <_Znwj+0xa>
 8019c00:	bd10      	pop	{r4, pc}

08019c02 <_Znaj>:
 8019c02:	f7ff bfed 	b.w	8019be0 <_Znwj>

08019c06 <__cxa_pure_virtual>:
 8019c06:	b508      	push	{r3, lr}
 8019c08:	f000 f80c 	bl	8019c24 <_ZSt9terminatev>

08019c0c <_ZN10__cxxabiv111__terminateEPFvvE>:
 8019c0c:	b508      	push	{r3, lr}
 8019c0e:	4780      	blx	r0
 8019c10:	f000 f81e 	bl	8019c50 <abort>

08019c14 <_ZSt13get_terminatev>:
 8019c14:	4b02      	ldr	r3, [pc, #8]	; (8019c20 <_ZSt13get_terminatev+0xc>)
 8019c16:	6818      	ldr	r0, [r3, #0]
 8019c18:	f3bf 8f5b 	dmb	ish
 8019c1c:	4770      	bx	lr
 8019c1e:	bf00      	nop
 8019c20:	200001f4 	.word	0x200001f4

08019c24 <_ZSt9terminatev>:
 8019c24:	b508      	push	{r3, lr}
 8019c26:	f7ff fff5 	bl	8019c14 <_ZSt13get_terminatev>
 8019c2a:	f7ff ffef 	bl	8019c0c <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08019c30 <_ZSt15get_new_handlerv>:
 8019c30:	4b02      	ldr	r3, [pc, #8]	; (8019c3c <_ZSt15get_new_handlerv+0xc>)
 8019c32:	6818      	ldr	r0, [r3, #0]
 8019c34:	f3bf 8f5b 	dmb	ish
 8019c38:	4770      	bx	lr
 8019c3a:	bf00      	nop
 8019c3c:	20005eb4 	.word	0x20005eb4

08019c40 <nan>:
 8019c40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019c48 <nan+0x8>
 8019c44:	4770      	bx	lr
 8019c46:	bf00      	nop
 8019c48:	00000000 	.word	0x00000000
 8019c4c:	7ff80000 	.word	0x7ff80000

08019c50 <abort>:
 8019c50:	b508      	push	{r3, lr}
 8019c52:	2006      	movs	r0, #6
 8019c54:	f001 fd66 	bl	801b724 <raise>
 8019c58:	2001      	movs	r0, #1
 8019c5a:	f006 f983 	bl	801ff64 <_exit>

08019c5e <atoi>:
 8019c5e:	220a      	movs	r2, #10
 8019c60:	2100      	movs	r1, #0
 8019c62:	f002 bd43 	b.w	801c6ec <strtol>

08019c66 <atol>:
 8019c66:	220a      	movs	r2, #10
 8019c68:	2100      	movs	r1, #0
 8019c6a:	f002 bd3f 	b.w	801c6ec <strtol>
	...

08019c70 <__errno>:
 8019c70:	4b01      	ldr	r3, [pc, #4]	; (8019c78 <__errno+0x8>)
 8019c72:	6818      	ldr	r0, [r3, #0]
 8019c74:	4770      	bx	lr
 8019c76:	bf00      	nop
 8019c78:	200001f8 	.word	0x200001f8

08019c7c <std>:
 8019c7c:	2300      	movs	r3, #0
 8019c7e:	b510      	push	{r4, lr}
 8019c80:	4604      	mov	r4, r0
 8019c82:	e9c0 3300 	strd	r3, r3, [r0]
 8019c86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019c8a:	6083      	str	r3, [r0, #8]
 8019c8c:	8181      	strh	r1, [r0, #12]
 8019c8e:	6643      	str	r3, [r0, #100]	; 0x64
 8019c90:	81c2      	strh	r2, [r0, #14]
 8019c92:	6183      	str	r3, [r0, #24]
 8019c94:	4619      	mov	r1, r3
 8019c96:	2208      	movs	r2, #8
 8019c98:	305c      	adds	r0, #92	; 0x5c
 8019c9a:	f000 fa63 	bl	801a164 <memset>
 8019c9e:	4b05      	ldr	r3, [pc, #20]	; (8019cb4 <std+0x38>)
 8019ca0:	6263      	str	r3, [r4, #36]	; 0x24
 8019ca2:	4b05      	ldr	r3, [pc, #20]	; (8019cb8 <std+0x3c>)
 8019ca4:	62a3      	str	r3, [r4, #40]	; 0x28
 8019ca6:	4b05      	ldr	r3, [pc, #20]	; (8019cbc <std+0x40>)
 8019ca8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019caa:	4b05      	ldr	r3, [pc, #20]	; (8019cc0 <std+0x44>)
 8019cac:	6224      	str	r4, [r4, #32]
 8019cae:	6323      	str	r3, [r4, #48]	; 0x30
 8019cb0:	bd10      	pop	{r4, pc}
 8019cb2:	bf00      	nop
 8019cb4:	0801b7f5 	.word	0x0801b7f5
 8019cb8:	0801b81b 	.word	0x0801b81b
 8019cbc:	0801b853 	.word	0x0801b853
 8019cc0:	0801b877 	.word	0x0801b877

08019cc4 <_cleanup_r>:
 8019cc4:	4901      	ldr	r1, [pc, #4]	; (8019ccc <_cleanup_r+0x8>)
 8019cc6:	f000 b8af 	b.w	8019e28 <_fwalk_reent>
 8019cca:	bf00      	nop
 8019ccc:	0801dd15 	.word	0x0801dd15

08019cd0 <__sfmoreglue>:
 8019cd0:	b570      	push	{r4, r5, r6, lr}
 8019cd2:	1e4a      	subs	r2, r1, #1
 8019cd4:	2568      	movs	r5, #104	; 0x68
 8019cd6:	4355      	muls	r5, r2
 8019cd8:	460e      	mov	r6, r1
 8019cda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019cde:	f000 fd17 	bl	801a710 <_malloc_r>
 8019ce2:	4604      	mov	r4, r0
 8019ce4:	b140      	cbz	r0, 8019cf8 <__sfmoreglue+0x28>
 8019ce6:	2100      	movs	r1, #0
 8019ce8:	e9c0 1600 	strd	r1, r6, [r0]
 8019cec:	300c      	adds	r0, #12
 8019cee:	60a0      	str	r0, [r4, #8]
 8019cf0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019cf4:	f000 fa36 	bl	801a164 <memset>
 8019cf8:	4620      	mov	r0, r4
 8019cfa:	bd70      	pop	{r4, r5, r6, pc}

08019cfc <__sfp_lock_acquire>:
 8019cfc:	4801      	ldr	r0, [pc, #4]	; (8019d04 <__sfp_lock_acquire+0x8>)
 8019cfe:	f000 b9f5 	b.w	801a0ec <__retarget_lock_acquire_recursive>
 8019d02:	bf00      	nop
 8019d04:	20008d54 	.word	0x20008d54

08019d08 <__sfp_lock_release>:
 8019d08:	4801      	ldr	r0, [pc, #4]	; (8019d10 <__sfp_lock_release+0x8>)
 8019d0a:	f000 b9f1 	b.w	801a0f0 <__retarget_lock_release_recursive>
 8019d0e:	bf00      	nop
 8019d10:	20008d54 	.word	0x20008d54

08019d14 <__sinit_lock_acquire>:
 8019d14:	4801      	ldr	r0, [pc, #4]	; (8019d1c <__sinit_lock_acquire+0x8>)
 8019d16:	f000 b9e9 	b.w	801a0ec <__retarget_lock_acquire_recursive>
 8019d1a:	bf00      	nop
 8019d1c:	20008d4f 	.word	0x20008d4f

08019d20 <__sinit_lock_release>:
 8019d20:	4801      	ldr	r0, [pc, #4]	; (8019d28 <__sinit_lock_release+0x8>)
 8019d22:	f000 b9e5 	b.w	801a0f0 <__retarget_lock_release_recursive>
 8019d26:	bf00      	nop
 8019d28:	20008d4f 	.word	0x20008d4f

08019d2c <__sinit>:
 8019d2c:	b510      	push	{r4, lr}
 8019d2e:	4604      	mov	r4, r0
 8019d30:	f7ff fff0 	bl	8019d14 <__sinit_lock_acquire>
 8019d34:	69a3      	ldr	r3, [r4, #24]
 8019d36:	b11b      	cbz	r3, 8019d40 <__sinit+0x14>
 8019d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d3c:	f7ff bff0 	b.w	8019d20 <__sinit_lock_release>
 8019d40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019d44:	6523      	str	r3, [r4, #80]	; 0x50
 8019d46:	4b13      	ldr	r3, [pc, #76]	; (8019d94 <__sinit+0x68>)
 8019d48:	4a13      	ldr	r2, [pc, #76]	; (8019d98 <__sinit+0x6c>)
 8019d4a:	681b      	ldr	r3, [r3, #0]
 8019d4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8019d4e:	42a3      	cmp	r3, r4
 8019d50:	bf04      	itt	eq
 8019d52:	2301      	moveq	r3, #1
 8019d54:	61a3      	streq	r3, [r4, #24]
 8019d56:	4620      	mov	r0, r4
 8019d58:	f000 f820 	bl	8019d9c <__sfp>
 8019d5c:	6060      	str	r0, [r4, #4]
 8019d5e:	4620      	mov	r0, r4
 8019d60:	f000 f81c 	bl	8019d9c <__sfp>
 8019d64:	60a0      	str	r0, [r4, #8]
 8019d66:	4620      	mov	r0, r4
 8019d68:	f000 f818 	bl	8019d9c <__sfp>
 8019d6c:	2200      	movs	r2, #0
 8019d6e:	60e0      	str	r0, [r4, #12]
 8019d70:	2104      	movs	r1, #4
 8019d72:	6860      	ldr	r0, [r4, #4]
 8019d74:	f7ff ff82 	bl	8019c7c <std>
 8019d78:	68a0      	ldr	r0, [r4, #8]
 8019d7a:	2201      	movs	r2, #1
 8019d7c:	2109      	movs	r1, #9
 8019d7e:	f7ff ff7d 	bl	8019c7c <std>
 8019d82:	68e0      	ldr	r0, [r4, #12]
 8019d84:	2202      	movs	r2, #2
 8019d86:	2112      	movs	r1, #18
 8019d88:	f7ff ff78 	bl	8019c7c <std>
 8019d8c:	2301      	movs	r3, #1
 8019d8e:	61a3      	str	r3, [r4, #24]
 8019d90:	e7d2      	b.n	8019d38 <__sinit+0xc>
 8019d92:	bf00      	nop
 8019d94:	08022140 	.word	0x08022140
 8019d98:	08019cc5 	.word	0x08019cc5

08019d9c <__sfp>:
 8019d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d9e:	4607      	mov	r7, r0
 8019da0:	f7ff ffac 	bl	8019cfc <__sfp_lock_acquire>
 8019da4:	4b1e      	ldr	r3, [pc, #120]	; (8019e20 <__sfp+0x84>)
 8019da6:	681e      	ldr	r6, [r3, #0]
 8019da8:	69b3      	ldr	r3, [r6, #24]
 8019daa:	b913      	cbnz	r3, 8019db2 <__sfp+0x16>
 8019dac:	4630      	mov	r0, r6
 8019dae:	f7ff ffbd 	bl	8019d2c <__sinit>
 8019db2:	3648      	adds	r6, #72	; 0x48
 8019db4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019db8:	3b01      	subs	r3, #1
 8019dba:	d503      	bpl.n	8019dc4 <__sfp+0x28>
 8019dbc:	6833      	ldr	r3, [r6, #0]
 8019dbe:	b30b      	cbz	r3, 8019e04 <__sfp+0x68>
 8019dc0:	6836      	ldr	r6, [r6, #0]
 8019dc2:	e7f7      	b.n	8019db4 <__sfp+0x18>
 8019dc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019dc8:	b9d5      	cbnz	r5, 8019e00 <__sfp+0x64>
 8019dca:	4b16      	ldr	r3, [pc, #88]	; (8019e24 <__sfp+0x88>)
 8019dcc:	60e3      	str	r3, [r4, #12]
 8019dce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019dd2:	6665      	str	r5, [r4, #100]	; 0x64
 8019dd4:	f000 f988 	bl	801a0e8 <__retarget_lock_init_recursive>
 8019dd8:	f7ff ff96 	bl	8019d08 <__sfp_lock_release>
 8019ddc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019de0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019de4:	6025      	str	r5, [r4, #0]
 8019de6:	61a5      	str	r5, [r4, #24]
 8019de8:	2208      	movs	r2, #8
 8019dea:	4629      	mov	r1, r5
 8019dec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019df0:	f000 f9b8 	bl	801a164 <memset>
 8019df4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019df8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019dfc:	4620      	mov	r0, r4
 8019dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e00:	3468      	adds	r4, #104	; 0x68
 8019e02:	e7d9      	b.n	8019db8 <__sfp+0x1c>
 8019e04:	2104      	movs	r1, #4
 8019e06:	4638      	mov	r0, r7
 8019e08:	f7ff ff62 	bl	8019cd0 <__sfmoreglue>
 8019e0c:	4604      	mov	r4, r0
 8019e0e:	6030      	str	r0, [r6, #0]
 8019e10:	2800      	cmp	r0, #0
 8019e12:	d1d5      	bne.n	8019dc0 <__sfp+0x24>
 8019e14:	f7ff ff78 	bl	8019d08 <__sfp_lock_release>
 8019e18:	230c      	movs	r3, #12
 8019e1a:	603b      	str	r3, [r7, #0]
 8019e1c:	e7ee      	b.n	8019dfc <__sfp+0x60>
 8019e1e:	bf00      	nop
 8019e20:	08022140 	.word	0x08022140
 8019e24:	ffff0001 	.word	0xffff0001

08019e28 <_fwalk_reent>:
 8019e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e2c:	4606      	mov	r6, r0
 8019e2e:	4688      	mov	r8, r1
 8019e30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019e34:	2700      	movs	r7, #0
 8019e36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019e3a:	f1b9 0901 	subs.w	r9, r9, #1
 8019e3e:	d505      	bpl.n	8019e4c <_fwalk_reent+0x24>
 8019e40:	6824      	ldr	r4, [r4, #0]
 8019e42:	2c00      	cmp	r4, #0
 8019e44:	d1f7      	bne.n	8019e36 <_fwalk_reent+0xe>
 8019e46:	4638      	mov	r0, r7
 8019e48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019e4c:	89ab      	ldrh	r3, [r5, #12]
 8019e4e:	2b01      	cmp	r3, #1
 8019e50:	d907      	bls.n	8019e62 <_fwalk_reent+0x3a>
 8019e52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019e56:	3301      	adds	r3, #1
 8019e58:	d003      	beq.n	8019e62 <_fwalk_reent+0x3a>
 8019e5a:	4629      	mov	r1, r5
 8019e5c:	4630      	mov	r0, r6
 8019e5e:	47c0      	blx	r8
 8019e60:	4307      	orrs	r7, r0
 8019e62:	3568      	adds	r5, #104	; 0x68
 8019e64:	e7e9      	b.n	8019e3a <_fwalk_reent+0x12>
	...

08019e68 <__libc_init_array>:
 8019e68:	b570      	push	{r4, r5, r6, lr}
 8019e6a:	4d0d      	ldr	r5, [pc, #52]	; (8019ea0 <__libc_init_array+0x38>)
 8019e6c:	4c0d      	ldr	r4, [pc, #52]	; (8019ea4 <__libc_init_array+0x3c>)
 8019e6e:	1b64      	subs	r4, r4, r5
 8019e70:	10a4      	asrs	r4, r4, #2
 8019e72:	2600      	movs	r6, #0
 8019e74:	42a6      	cmp	r6, r4
 8019e76:	d109      	bne.n	8019e8c <__libc_init_array+0x24>
 8019e78:	4d0b      	ldr	r5, [pc, #44]	; (8019ea8 <__libc_init_array+0x40>)
 8019e7a:	4c0c      	ldr	r4, [pc, #48]	; (8019eac <__libc_init_array+0x44>)
 8019e7c:	f006 f874 	bl	801ff68 <_init>
 8019e80:	1b64      	subs	r4, r4, r5
 8019e82:	10a4      	asrs	r4, r4, #2
 8019e84:	2600      	movs	r6, #0
 8019e86:	42a6      	cmp	r6, r4
 8019e88:	d105      	bne.n	8019e96 <__libc_init_array+0x2e>
 8019e8a:	bd70      	pop	{r4, r5, r6, pc}
 8019e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019e90:	4798      	blx	r3
 8019e92:	3601      	adds	r6, #1
 8019e94:	e7ee      	b.n	8019e74 <__libc_init_array+0xc>
 8019e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8019e9a:	4798      	blx	r3
 8019e9c:	3601      	adds	r6, #1
 8019e9e:	e7f2      	b.n	8019e86 <__libc_init_array+0x1e>
 8019ea0:	08022670 	.word	0x08022670
 8019ea4:	08022670 	.word	0x08022670
 8019ea8:	08022670 	.word	0x08022670
 8019eac:	08022678 	.word	0x08022678

08019eb0 <isxdigit>:
 8019eb0:	4b02      	ldr	r3, [pc, #8]	; (8019ebc <isxdigit+0xc>)
 8019eb2:	4418      	add	r0, r3
 8019eb4:	7840      	ldrb	r0, [r0, #1]
 8019eb6:	f000 0044 	and.w	r0, r0, #68	; 0x44
 8019eba:	4770      	bx	lr
 8019ebc:	08021fdc 	.word	0x08021fdc

08019ec0 <localtime>:
 8019ec0:	b538      	push	{r3, r4, r5, lr}
 8019ec2:	4b0b      	ldr	r3, [pc, #44]	; (8019ef0 <localtime+0x30>)
 8019ec4:	681d      	ldr	r5, [r3, #0]
 8019ec6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8019ec8:	4604      	mov	r4, r0
 8019eca:	b953      	cbnz	r3, 8019ee2 <localtime+0x22>
 8019ecc:	2024      	movs	r0, #36	; 0x24
 8019ece:	f000 f911 	bl	801a0f4 <malloc>
 8019ed2:	4602      	mov	r2, r0
 8019ed4:	63e8      	str	r0, [r5, #60]	; 0x3c
 8019ed6:	b920      	cbnz	r0, 8019ee2 <localtime+0x22>
 8019ed8:	4b06      	ldr	r3, [pc, #24]	; (8019ef4 <localtime+0x34>)
 8019eda:	4807      	ldr	r0, [pc, #28]	; (8019ef8 <localtime+0x38>)
 8019edc:	2132      	movs	r1, #50	; 0x32
 8019ede:	f002 ffd9 	bl	801ce94 <__assert_func>
 8019ee2:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8019ee4:	4620      	mov	r0, r4
 8019ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019eea:	f000 b807 	b.w	8019efc <localtime_r>
 8019eee:	bf00      	nop
 8019ef0:	200001f8 	.word	0x200001f8
 8019ef4:	08022144 	.word	0x08022144
 8019ef8:	0802215b 	.word	0x0802215b

08019efc <localtime_r>:
 8019efc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8019f00:	4607      	mov	r7, r0
 8019f02:	9101      	str	r1, [sp, #4]
 8019f04:	f004 fb06 	bl	801e514 <__gettzinfo>
 8019f08:	9901      	ldr	r1, [sp, #4]
 8019f0a:	4680      	mov	r8, r0
 8019f0c:	4638      	mov	r0, r7
 8019f0e:	f004 fb05 	bl	801e51c <gmtime_r>
 8019f12:	6943      	ldr	r3, [r0, #20]
 8019f14:	079a      	lsls	r2, r3, #30
 8019f16:	4604      	mov	r4, r0
 8019f18:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 8019f1c:	d105      	bne.n	8019f2a <localtime_r+0x2e>
 8019f1e:	2264      	movs	r2, #100	; 0x64
 8019f20:	fb96 f3f2 	sdiv	r3, r6, r2
 8019f24:	fb02 6313 	mls	r3, r2, r3, r6
 8019f28:	bb7b      	cbnz	r3, 8019f8a <localtime_r+0x8e>
 8019f2a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8019f2e:	fb96 f5f3 	sdiv	r5, r6, r3
 8019f32:	fb03 6515 	mls	r5, r3, r5, r6
 8019f36:	fab5 f585 	clz	r5, r5
 8019f3a:	096d      	lsrs	r5, r5, #5
 8019f3c:	4b68      	ldr	r3, [pc, #416]	; (801a0e0 <localtime_r+0x1e4>)
 8019f3e:	2230      	movs	r2, #48	; 0x30
 8019f40:	fb02 3505 	mla	r5, r2, r5, r3
 8019f44:	f002 fd0c 	bl	801c960 <__tz_lock>
 8019f48:	f002 fd16 	bl	801c978 <_tzset_unlocked>
 8019f4c:	4b65      	ldr	r3, [pc, #404]	; (801a0e4 <localtime_r+0x1e8>)
 8019f4e:	681b      	ldr	r3, [r3, #0]
 8019f50:	b353      	cbz	r3, 8019fa8 <localtime_r+0xac>
 8019f52:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019f56:	42b3      	cmp	r3, r6
 8019f58:	d119      	bne.n	8019f8e <localtime_r+0x92>
 8019f5a:	f8d8 1000 	ldr.w	r1, [r8]
 8019f5e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8019f62:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 8019f66:	b9d1      	cbnz	r1, 8019f9e <localtime_r+0xa2>
 8019f68:	4296      	cmp	r6, r2
 8019f6a:	eb77 0303 	sbcs.w	r3, r7, r3
 8019f6e:	da23      	bge.n	8019fb8 <localtime_r+0xbc>
 8019f70:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8019f74:	4296      	cmp	r6, r2
 8019f76:	eb77 0303 	sbcs.w	r3, r7, r3
 8019f7a:	bfb4      	ite	lt
 8019f7c:	2301      	movlt	r3, #1
 8019f7e:	2300      	movge	r3, #0
 8019f80:	6223      	str	r3, [r4, #32]
 8019f82:	db1b      	blt.n	8019fbc <localtime_r+0xc0>
 8019f84:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 8019f88:	e01a      	b.n	8019fc0 <localtime_r+0xc4>
 8019f8a:	2501      	movs	r5, #1
 8019f8c:	e7d6      	b.n	8019f3c <localtime_r+0x40>
 8019f8e:	4630      	mov	r0, r6
 8019f90:	f002 fc3e 	bl	801c810 <__tzcalc_limits>
 8019f94:	2800      	cmp	r0, #0
 8019f96:	d1e0      	bne.n	8019f5a <localtime_r+0x5e>
 8019f98:	f04f 33ff 	mov.w	r3, #4294967295
 8019f9c:	e004      	b.n	8019fa8 <localtime_r+0xac>
 8019f9e:	4296      	cmp	r6, r2
 8019fa0:	eb77 0303 	sbcs.w	r3, r7, r3
 8019fa4:	da02      	bge.n	8019fac <localtime_r+0xb0>
 8019fa6:	2300      	movs	r3, #0
 8019fa8:	6223      	str	r3, [r4, #32]
 8019faa:	e7eb      	b.n	8019f84 <localtime_r+0x88>
 8019fac:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8019fb0:	4296      	cmp	r6, r2
 8019fb2:	eb77 0303 	sbcs.w	r3, r7, r3
 8019fb6:	daf6      	bge.n	8019fa6 <localtime_r+0xaa>
 8019fb8:	2301      	movs	r3, #1
 8019fba:	6223      	str	r3, [r4, #32]
 8019fbc:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8019fc0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8019fc4:	203c      	movs	r0, #60	; 0x3c
 8019fc6:	fb91 f6f3 	sdiv	r6, r1, r3
 8019fca:	fb03 1316 	mls	r3, r3, r6, r1
 8019fce:	6861      	ldr	r1, [r4, #4]
 8019fd0:	fb93 f2f0 	sdiv	r2, r3, r0
 8019fd4:	fb00 3012 	mls	r0, r0, r2, r3
 8019fd8:	6823      	ldr	r3, [r4, #0]
 8019fda:	1a89      	subs	r1, r1, r2
 8019fdc:	68a2      	ldr	r2, [r4, #8]
 8019fde:	6061      	str	r1, [r4, #4]
 8019fe0:	1a1b      	subs	r3, r3, r0
 8019fe2:	1b92      	subs	r2, r2, r6
 8019fe4:	2b3b      	cmp	r3, #59	; 0x3b
 8019fe6:	6023      	str	r3, [r4, #0]
 8019fe8:	60a2      	str	r2, [r4, #8]
 8019fea:	dd35      	ble.n	801a058 <localtime_r+0x15c>
 8019fec:	3101      	adds	r1, #1
 8019fee:	6061      	str	r1, [r4, #4]
 8019ff0:	3b3c      	subs	r3, #60	; 0x3c
 8019ff2:	6023      	str	r3, [r4, #0]
 8019ff4:	6863      	ldr	r3, [r4, #4]
 8019ff6:	2b3b      	cmp	r3, #59	; 0x3b
 8019ff8:	dd34      	ble.n	801a064 <localtime_r+0x168>
 8019ffa:	3201      	adds	r2, #1
 8019ffc:	60a2      	str	r2, [r4, #8]
 8019ffe:	3b3c      	subs	r3, #60	; 0x3c
 801a000:	6063      	str	r3, [r4, #4]
 801a002:	68a3      	ldr	r3, [r4, #8]
 801a004:	2b17      	cmp	r3, #23
 801a006:	dd33      	ble.n	801a070 <localtime_r+0x174>
 801a008:	69e2      	ldr	r2, [r4, #28]
 801a00a:	3201      	adds	r2, #1
 801a00c:	61e2      	str	r2, [r4, #28]
 801a00e:	69a2      	ldr	r2, [r4, #24]
 801a010:	3201      	adds	r2, #1
 801a012:	2a06      	cmp	r2, #6
 801a014:	bfc8      	it	gt
 801a016:	2200      	movgt	r2, #0
 801a018:	61a2      	str	r2, [r4, #24]
 801a01a:	68e2      	ldr	r2, [r4, #12]
 801a01c:	3b18      	subs	r3, #24
 801a01e:	3201      	adds	r2, #1
 801a020:	60a3      	str	r3, [r4, #8]
 801a022:	6923      	ldr	r3, [r4, #16]
 801a024:	60e2      	str	r2, [r4, #12]
 801a026:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801a02a:	428a      	cmp	r2, r1
 801a02c:	dd0e      	ble.n	801a04c <localtime_r+0x150>
 801a02e:	2b0b      	cmp	r3, #11
 801a030:	eba2 0201 	sub.w	r2, r2, r1
 801a034:	60e2      	str	r2, [r4, #12]
 801a036:	f103 0201 	add.w	r2, r3, #1
 801a03a:	bf09      	itett	eq
 801a03c:	6963      	ldreq	r3, [r4, #20]
 801a03e:	6122      	strne	r2, [r4, #16]
 801a040:	2200      	moveq	r2, #0
 801a042:	3301      	addeq	r3, #1
 801a044:	bf02      	ittt	eq
 801a046:	6122      	streq	r2, [r4, #16]
 801a048:	6163      	streq	r3, [r4, #20]
 801a04a:	61e2      	streq	r2, [r4, #28]
 801a04c:	f002 fc8e 	bl	801c96c <__tz_unlock>
 801a050:	4620      	mov	r0, r4
 801a052:	b002      	add	sp, #8
 801a054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a058:	2b00      	cmp	r3, #0
 801a05a:	dacb      	bge.n	8019ff4 <localtime_r+0xf8>
 801a05c:	3901      	subs	r1, #1
 801a05e:	6061      	str	r1, [r4, #4]
 801a060:	333c      	adds	r3, #60	; 0x3c
 801a062:	e7c6      	b.n	8019ff2 <localtime_r+0xf6>
 801a064:	2b00      	cmp	r3, #0
 801a066:	dacc      	bge.n	801a002 <localtime_r+0x106>
 801a068:	3a01      	subs	r2, #1
 801a06a:	60a2      	str	r2, [r4, #8]
 801a06c:	333c      	adds	r3, #60	; 0x3c
 801a06e:	e7c7      	b.n	801a000 <localtime_r+0x104>
 801a070:	2b00      	cmp	r3, #0
 801a072:	daeb      	bge.n	801a04c <localtime_r+0x150>
 801a074:	69e2      	ldr	r2, [r4, #28]
 801a076:	3a01      	subs	r2, #1
 801a078:	61e2      	str	r2, [r4, #28]
 801a07a:	69a2      	ldr	r2, [r4, #24]
 801a07c:	3a01      	subs	r2, #1
 801a07e:	bf48      	it	mi
 801a080:	2206      	movmi	r2, #6
 801a082:	61a2      	str	r2, [r4, #24]
 801a084:	68e2      	ldr	r2, [r4, #12]
 801a086:	3318      	adds	r3, #24
 801a088:	3a01      	subs	r2, #1
 801a08a:	60e2      	str	r2, [r4, #12]
 801a08c:	60a3      	str	r3, [r4, #8]
 801a08e:	2a00      	cmp	r2, #0
 801a090:	d1dc      	bne.n	801a04c <localtime_r+0x150>
 801a092:	6923      	ldr	r3, [r4, #16]
 801a094:	3b01      	subs	r3, #1
 801a096:	d405      	bmi.n	801a0a4 <localtime_r+0x1a8>
 801a098:	6123      	str	r3, [r4, #16]
 801a09a:	6923      	ldr	r3, [r4, #16]
 801a09c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801a0a0:	60e3      	str	r3, [r4, #12]
 801a0a2:	e7d3      	b.n	801a04c <localtime_r+0x150>
 801a0a4:	230b      	movs	r3, #11
 801a0a6:	6123      	str	r3, [r4, #16]
 801a0a8:	6963      	ldr	r3, [r4, #20]
 801a0aa:	1e5a      	subs	r2, r3, #1
 801a0ac:	6162      	str	r2, [r4, #20]
 801a0ae:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 801a0b2:	0793      	lsls	r3, r2, #30
 801a0b4:	d105      	bne.n	801a0c2 <localtime_r+0x1c6>
 801a0b6:	2164      	movs	r1, #100	; 0x64
 801a0b8:	fb92 f3f1 	sdiv	r3, r2, r1
 801a0bc:	fb01 2313 	mls	r3, r1, r3, r2
 801a0c0:	b963      	cbnz	r3, 801a0dc <localtime_r+0x1e0>
 801a0c2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801a0c6:	fb92 f3f1 	sdiv	r3, r2, r1
 801a0ca:	fb01 2313 	mls	r3, r1, r3, r2
 801a0ce:	fab3 f383 	clz	r3, r3
 801a0d2:	095b      	lsrs	r3, r3, #5
 801a0d4:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801a0d8:	61e3      	str	r3, [r4, #28]
 801a0da:	e7de      	b.n	801a09a <localtime_r+0x19e>
 801a0dc:	2301      	movs	r3, #1
 801a0de:	e7f9      	b.n	801a0d4 <localtime_r+0x1d8>
 801a0e0:	0802221c 	.word	0x0802221c
 801a0e4:	20005edc 	.word	0x20005edc

0801a0e8 <__retarget_lock_init_recursive>:
 801a0e8:	4770      	bx	lr

0801a0ea <__retarget_lock_acquire>:
 801a0ea:	4770      	bx	lr

0801a0ec <__retarget_lock_acquire_recursive>:
 801a0ec:	4770      	bx	lr

0801a0ee <__retarget_lock_release>:
 801a0ee:	4770      	bx	lr

0801a0f0 <__retarget_lock_release_recursive>:
 801a0f0:	4770      	bx	lr
	...

0801a0f4 <malloc>:
 801a0f4:	4b02      	ldr	r3, [pc, #8]	; (801a100 <malloc+0xc>)
 801a0f6:	4601      	mov	r1, r0
 801a0f8:	6818      	ldr	r0, [r3, #0]
 801a0fa:	f000 bb09 	b.w	801a710 <_malloc_r>
 801a0fe:	bf00      	nop
 801a100:	200001f8 	.word	0x200001f8

0801a104 <free>:
 801a104:	4b02      	ldr	r3, [pc, #8]	; (801a110 <free+0xc>)
 801a106:	4601      	mov	r1, r0
 801a108:	6818      	ldr	r0, [r3, #0]
 801a10a:	f000 bab1 	b.w	801a670 <_free_r>
 801a10e:	bf00      	nop
 801a110:	200001f8 	.word	0x200001f8

0801a114 <memcpy>:
 801a114:	440a      	add	r2, r1
 801a116:	4291      	cmp	r1, r2
 801a118:	f100 33ff 	add.w	r3, r0, #4294967295
 801a11c:	d100      	bne.n	801a120 <memcpy+0xc>
 801a11e:	4770      	bx	lr
 801a120:	b510      	push	{r4, lr}
 801a122:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a126:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a12a:	4291      	cmp	r1, r2
 801a12c:	d1f9      	bne.n	801a122 <memcpy+0xe>
 801a12e:	bd10      	pop	{r4, pc}

0801a130 <memmove>:
 801a130:	4288      	cmp	r0, r1
 801a132:	b510      	push	{r4, lr}
 801a134:	eb01 0402 	add.w	r4, r1, r2
 801a138:	d902      	bls.n	801a140 <memmove+0x10>
 801a13a:	4284      	cmp	r4, r0
 801a13c:	4623      	mov	r3, r4
 801a13e:	d807      	bhi.n	801a150 <memmove+0x20>
 801a140:	1e43      	subs	r3, r0, #1
 801a142:	42a1      	cmp	r1, r4
 801a144:	d008      	beq.n	801a158 <memmove+0x28>
 801a146:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a14a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a14e:	e7f8      	b.n	801a142 <memmove+0x12>
 801a150:	4402      	add	r2, r0
 801a152:	4601      	mov	r1, r0
 801a154:	428a      	cmp	r2, r1
 801a156:	d100      	bne.n	801a15a <memmove+0x2a>
 801a158:	bd10      	pop	{r4, pc}
 801a15a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a15e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a162:	e7f7      	b.n	801a154 <memmove+0x24>

0801a164 <memset>:
 801a164:	4402      	add	r2, r0
 801a166:	4603      	mov	r3, r0
 801a168:	4293      	cmp	r3, r2
 801a16a:	d100      	bne.n	801a16e <memset+0xa>
 801a16c:	4770      	bx	lr
 801a16e:	f803 1b01 	strb.w	r1, [r3], #1
 801a172:	e7f9      	b.n	801a168 <memset+0x4>

0801a174 <validate_structure>:
 801a174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a176:	6801      	ldr	r1, [r0, #0]
 801a178:	293b      	cmp	r1, #59	; 0x3b
 801a17a:	4604      	mov	r4, r0
 801a17c:	d911      	bls.n	801a1a2 <validate_structure+0x2e>
 801a17e:	223c      	movs	r2, #60	; 0x3c
 801a180:	4668      	mov	r0, sp
 801a182:	f002 feb5 	bl	801cef0 <div>
 801a186:	9a01      	ldr	r2, [sp, #4]
 801a188:	6863      	ldr	r3, [r4, #4]
 801a18a:	9900      	ldr	r1, [sp, #0]
 801a18c:	2a00      	cmp	r2, #0
 801a18e:	440b      	add	r3, r1
 801a190:	6063      	str	r3, [r4, #4]
 801a192:	bfbb      	ittet	lt
 801a194:	323c      	addlt	r2, #60	; 0x3c
 801a196:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801a19a:	6022      	strge	r2, [r4, #0]
 801a19c:	6022      	strlt	r2, [r4, #0]
 801a19e:	bfb8      	it	lt
 801a1a0:	6063      	strlt	r3, [r4, #4]
 801a1a2:	6861      	ldr	r1, [r4, #4]
 801a1a4:	293b      	cmp	r1, #59	; 0x3b
 801a1a6:	d911      	bls.n	801a1cc <validate_structure+0x58>
 801a1a8:	223c      	movs	r2, #60	; 0x3c
 801a1aa:	4668      	mov	r0, sp
 801a1ac:	f002 fea0 	bl	801cef0 <div>
 801a1b0:	9a01      	ldr	r2, [sp, #4]
 801a1b2:	68a3      	ldr	r3, [r4, #8]
 801a1b4:	9900      	ldr	r1, [sp, #0]
 801a1b6:	2a00      	cmp	r2, #0
 801a1b8:	440b      	add	r3, r1
 801a1ba:	60a3      	str	r3, [r4, #8]
 801a1bc:	bfbb      	ittet	lt
 801a1be:	323c      	addlt	r2, #60	; 0x3c
 801a1c0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801a1c4:	6062      	strge	r2, [r4, #4]
 801a1c6:	6062      	strlt	r2, [r4, #4]
 801a1c8:	bfb8      	it	lt
 801a1ca:	60a3      	strlt	r3, [r4, #8]
 801a1cc:	68a1      	ldr	r1, [r4, #8]
 801a1ce:	2917      	cmp	r1, #23
 801a1d0:	d911      	bls.n	801a1f6 <validate_structure+0x82>
 801a1d2:	2218      	movs	r2, #24
 801a1d4:	4668      	mov	r0, sp
 801a1d6:	f002 fe8b 	bl	801cef0 <div>
 801a1da:	9a01      	ldr	r2, [sp, #4]
 801a1dc:	68e3      	ldr	r3, [r4, #12]
 801a1de:	9900      	ldr	r1, [sp, #0]
 801a1e0:	2a00      	cmp	r2, #0
 801a1e2:	440b      	add	r3, r1
 801a1e4:	60e3      	str	r3, [r4, #12]
 801a1e6:	bfbb      	ittet	lt
 801a1e8:	3218      	addlt	r2, #24
 801a1ea:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801a1ee:	60a2      	strge	r2, [r4, #8]
 801a1f0:	60a2      	strlt	r2, [r4, #8]
 801a1f2:	bfb8      	it	lt
 801a1f4:	60e3      	strlt	r3, [r4, #12]
 801a1f6:	6921      	ldr	r1, [r4, #16]
 801a1f8:	290b      	cmp	r1, #11
 801a1fa:	d911      	bls.n	801a220 <validate_structure+0xac>
 801a1fc:	220c      	movs	r2, #12
 801a1fe:	4668      	mov	r0, sp
 801a200:	f002 fe76 	bl	801cef0 <div>
 801a204:	9a01      	ldr	r2, [sp, #4]
 801a206:	6963      	ldr	r3, [r4, #20]
 801a208:	9900      	ldr	r1, [sp, #0]
 801a20a:	2a00      	cmp	r2, #0
 801a20c:	440b      	add	r3, r1
 801a20e:	6163      	str	r3, [r4, #20]
 801a210:	bfbb      	ittet	lt
 801a212:	320c      	addlt	r2, #12
 801a214:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801a218:	6122      	strge	r2, [r4, #16]
 801a21a:	6122      	strlt	r2, [r4, #16]
 801a21c:	bfb8      	it	lt
 801a21e:	6163      	strlt	r3, [r4, #20]
 801a220:	6963      	ldr	r3, [r4, #20]
 801a222:	0799      	lsls	r1, r3, #30
 801a224:	d120      	bne.n	801a268 <validate_structure+0xf4>
 801a226:	2164      	movs	r1, #100	; 0x64
 801a228:	fb93 f2f1 	sdiv	r2, r3, r1
 801a22c:	fb01 3212 	mls	r2, r1, r2, r3
 801a230:	b9e2      	cbnz	r2, 801a26c <validate_structure+0xf8>
 801a232:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 801a236:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801a23a:	fb93 f2f1 	sdiv	r2, r3, r1
 801a23e:	fb01 3312 	mls	r3, r1, r2, r3
 801a242:	2b00      	cmp	r3, #0
 801a244:	bf14      	ite	ne
 801a246:	231c      	movne	r3, #28
 801a248:	231d      	moveq	r3, #29
 801a24a:	68e2      	ldr	r2, [r4, #12]
 801a24c:	2a00      	cmp	r2, #0
 801a24e:	dc0f      	bgt.n	801a270 <validate_structure+0xfc>
 801a250:	4f33      	ldr	r7, [pc, #204]	; (801a320 <validate_structure+0x1ac>)
 801a252:	260b      	movs	r6, #11
 801a254:	2064      	movs	r0, #100	; 0x64
 801a256:	f44f 75c8 	mov.w	r5, #400	; 0x190
 801a25a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801a25e:	f1bc 0f00 	cmp.w	ip, #0
 801a262:	dd31      	ble.n	801a2c8 <validate_structure+0x154>
 801a264:	b003      	add	sp, #12
 801a266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a268:	231c      	movs	r3, #28
 801a26a:	e7ee      	b.n	801a24a <validate_structure+0xd6>
 801a26c:	231d      	movs	r3, #29
 801a26e:	e7ec      	b.n	801a24a <validate_structure+0xd6>
 801a270:	4f2b      	ldr	r7, [pc, #172]	; (801a320 <validate_structure+0x1ac>)
 801a272:	f04f 0c00 	mov.w	ip, #0
 801a276:	2564      	movs	r5, #100	; 0x64
 801a278:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801a27c:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 801a280:	2a01      	cmp	r2, #1
 801a282:	bf14      	ite	ne
 801a284:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 801a288:	4618      	moveq	r0, r3
 801a28a:	4281      	cmp	r1, r0
 801a28c:	ddea      	ble.n	801a264 <validate_structure+0xf0>
 801a28e:	3201      	adds	r2, #1
 801a290:	1a09      	subs	r1, r1, r0
 801a292:	2a0c      	cmp	r2, #12
 801a294:	60e1      	str	r1, [r4, #12]
 801a296:	6122      	str	r2, [r4, #16]
 801a298:	d1f0      	bne.n	801a27c <validate_structure+0x108>
 801a29a:	6963      	ldr	r3, [r4, #20]
 801a29c:	1c5a      	adds	r2, r3, #1
 801a29e:	0791      	lsls	r1, r2, #30
 801a2a0:	e9c4 c204 	strd	ip, r2, [r4, #16]
 801a2a4:	d137      	bne.n	801a316 <validate_structure+0x1a2>
 801a2a6:	fb92 f1f5 	sdiv	r1, r2, r5
 801a2aa:	fb05 2211 	mls	r2, r5, r1, r2
 801a2ae:	2a00      	cmp	r2, #0
 801a2b0:	d133      	bne.n	801a31a <validate_structure+0x1a6>
 801a2b2:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 801a2b6:	fb93 f2f6 	sdiv	r2, r3, r6
 801a2ba:	fb06 3312 	mls	r3, r6, r2, r3
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	bf14      	ite	ne
 801a2c2:	231c      	movne	r3, #28
 801a2c4:	231d      	moveq	r3, #29
 801a2c6:	e7d9      	b.n	801a27c <validate_structure+0x108>
 801a2c8:	6921      	ldr	r1, [r4, #16]
 801a2ca:	3901      	subs	r1, #1
 801a2cc:	6121      	str	r1, [r4, #16]
 801a2ce:	3101      	adds	r1, #1
 801a2d0:	d114      	bne.n	801a2fc <validate_structure+0x188>
 801a2d2:	6963      	ldr	r3, [r4, #20]
 801a2d4:	1e59      	subs	r1, r3, #1
 801a2d6:	078a      	lsls	r2, r1, #30
 801a2d8:	e9c4 6104 	strd	r6, r1, [r4, #16]
 801a2dc:	d117      	bne.n	801a30e <validate_structure+0x19a>
 801a2de:	fb91 f2f0 	sdiv	r2, r1, r0
 801a2e2:	fb00 1112 	mls	r1, r0, r2, r1
 801a2e6:	b9a1      	cbnz	r1, 801a312 <validate_structure+0x19e>
 801a2e8:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 801a2ec:	fb93 f2f5 	sdiv	r2, r3, r5
 801a2f0:	fb05 3312 	mls	r3, r5, r2, r3
 801a2f4:	2b00      	cmp	r3, #0
 801a2f6:	bf14      	ite	ne
 801a2f8:	231c      	movne	r3, #28
 801a2fa:	231d      	moveq	r3, #29
 801a2fc:	6922      	ldr	r2, [r4, #16]
 801a2fe:	2a01      	cmp	r2, #1
 801a300:	bf14      	ite	ne
 801a302:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 801a306:	461a      	moveq	r2, r3
 801a308:	4462      	add	r2, ip
 801a30a:	60e2      	str	r2, [r4, #12]
 801a30c:	e7a5      	b.n	801a25a <validate_structure+0xe6>
 801a30e:	231c      	movs	r3, #28
 801a310:	e7f4      	b.n	801a2fc <validate_structure+0x188>
 801a312:	231d      	movs	r3, #29
 801a314:	e7f2      	b.n	801a2fc <validate_structure+0x188>
 801a316:	231c      	movs	r3, #28
 801a318:	e7b0      	b.n	801a27c <validate_structure+0x108>
 801a31a:	231d      	movs	r3, #29
 801a31c:	e7ae      	b.n	801a27c <validate_structure+0x108>
 801a31e:	bf00      	nop
 801a320:	080221bc 	.word	0x080221bc

0801a324 <mktime>:
 801a324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a328:	b08b      	sub	sp, #44	; 0x2c
 801a32a:	4605      	mov	r5, r0
 801a32c:	f004 f8f2 	bl	801e514 <__gettzinfo>
 801a330:	4607      	mov	r7, r0
 801a332:	4628      	mov	r0, r5
 801a334:	f7ff ff1e 	bl	801a174 <validate_structure>
 801a338:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a33c:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 801a340:	68a8      	ldr	r0, [r5, #8]
 801a342:	696e      	ldr	r6, [r5, #20]
 801a344:	fb0a 2303 	mla	r3, sl, r3, r2
 801a348:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 801a34c:	fb0a 3a00 	mla	sl, sl, r0, r3
 801a350:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 801a354:	4ac3      	ldr	r2, [pc, #780]	; (801a664 <mktime+0x340>)
 801a356:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801a35a:	3c01      	subs	r4, #1
 801a35c:	2b01      	cmp	r3, #1
 801a35e:	4414      	add	r4, r2
 801a360:	dd11      	ble.n	801a386 <mktime+0x62>
 801a362:	07b1      	lsls	r1, r6, #30
 801a364:	d10f      	bne.n	801a386 <mktime+0x62>
 801a366:	2264      	movs	r2, #100	; 0x64
 801a368:	fb96 f3f2 	sdiv	r3, r6, r2
 801a36c:	fb02 6313 	mls	r3, r2, r3, r6
 801a370:	b943      	cbnz	r3, 801a384 <mktime+0x60>
 801a372:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 801a376:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801a37a:	fb91 f3f2 	sdiv	r3, r1, r2
 801a37e:	fb02 1313 	mls	r3, r2, r3, r1
 801a382:	b903      	cbnz	r3, 801a386 <mktime+0x62>
 801a384:	3401      	adds	r4, #1
 801a386:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 801a38a:	3310      	adds	r3, #16
 801a38c:	f644 6220 	movw	r2, #20000	; 0x4e20
 801a390:	4293      	cmp	r3, r2
 801a392:	61ec      	str	r4, [r5, #28]
 801a394:	f200 8161 	bhi.w	801a65a <mktime+0x336>
 801a398:	2e46      	cmp	r6, #70	; 0x46
 801a39a:	dd77      	ble.n	801a48c <mktime+0x168>
 801a39c:	2346      	movs	r3, #70	; 0x46
 801a39e:	f240 1e6d 	movw	lr, #365	; 0x16d
 801a3a2:	2164      	movs	r1, #100	; 0x64
 801a3a4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801a3a8:	079a      	lsls	r2, r3, #30
 801a3aa:	d169      	bne.n	801a480 <mktime+0x15c>
 801a3ac:	fb93 f2f1 	sdiv	r2, r3, r1
 801a3b0:	fb01 3212 	mls	r2, r1, r2, r3
 801a3b4:	2a00      	cmp	r2, #0
 801a3b6:	d166      	bne.n	801a486 <mktime+0x162>
 801a3b8:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801a3bc:	fb9c f2f0 	sdiv	r2, ip, r0
 801a3c0:	fb00 c212 	mls	r2, r0, r2, ip
 801a3c4:	2a00      	cmp	r2, #0
 801a3c6:	bf14      	ite	ne
 801a3c8:	4672      	movne	r2, lr
 801a3ca:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801a3ce:	3301      	adds	r3, #1
 801a3d0:	429e      	cmp	r6, r3
 801a3d2:	4414      	add	r4, r2
 801a3d4:	d1e8      	bne.n	801a3a8 <mktime+0x84>
 801a3d6:	4ba4      	ldr	r3, [pc, #656]	; (801a668 <mktime+0x344>)
 801a3d8:	ea4f 7bea 	mov.w	fp, sl, asr #31
 801a3dc:	fbc3 ab04 	smlal	sl, fp, r3, r4
 801a3e0:	f002 fabe 	bl	801c960 <__tz_lock>
 801a3e4:	f002 fac8 	bl	801c978 <_tzset_unlocked>
 801a3e8:	4ba0      	ldr	r3, [pc, #640]	; (801a66c <mktime+0x348>)
 801a3ea:	f8d3 9000 	ldr.w	r9, [r3]
 801a3ee:	f1b9 0f00 	cmp.w	r9, #0
 801a3f2:	d03f      	beq.n	801a474 <mktime+0x150>
 801a3f4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 801a3f8:	6968      	ldr	r0, [r5, #20]
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	f1b9 0f01 	cmp.w	r9, #1
 801a400:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801a404:	46c8      	mov	r8, r9
 801a406:	bfa8      	it	ge
 801a408:	f04f 0801 	movge.w	r8, #1
 801a40c:	4283      	cmp	r3, r0
 801a40e:	d17f      	bne.n	801a510 <mktime+0x1ec>
 801a410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a412:	4619      	mov	r1, r3
 801a414:	17da      	asrs	r2, r3, #31
 801a416:	e9cd 1200 	strd	r1, r2, [sp]
 801a41a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 801a41e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801a422:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a426:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a428:	1a80      	subs	r0, r0, r2
 801a42a:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 801a42e:	4582      	cmp	sl, r0
 801a430:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a434:	eb7b 0101 	sbcs.w	r1, fp, r1
 801a438:	da71      	bge.n	801a51e <mktime+0x1fa>
 801a43a:	9800      	ldr	r0, [sp, #0]
 801a43c:	6a39      	ldr	r1, [r7, #32]
 801a43e:	1a09      	subs	r1, r1, r0
 801a440:	9104      	str	r1, [sp, #16]
 801a442:	9801      	ldr	r0, [sp, #4]
 801a444:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a446:	eb61 0100 	sbc.w	r1, r1, r0
 801a44a:	9105      	str	r1, [sp, #20]
 801a44c:	6839      	ldr	r1, [r7, #0]
 801a44e:	2900      	cmp	r1, #0
 801a450:	d075      	beq.n	801a53e <mktime+0x21a>
 801a452:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a456:	4582      	cmp	sl, r0
 801a458:	eb7b 0101 	sbcs.w	r1, fp, r1
 801a45c:	db05      	blt.n	801a46a <mktime+0x146>
 801a45e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a462:	4582      	cmp	sl, r0
 801a464:	eb7b 0101 	sbcs.w	r1, fp, r1
 801a468:	db6f      	blt.n	801a54a <mktime+0x226>
 801a46a:	f1b9 0f00 	cmp.w	r9, #0
 801a46e:	f04f 0900 	mov.w	r9, #0
 801a472:	da6f      	bge.n	801a554 <mktime+0x230>
 801a474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a476:	eb1a 0a03 	adds.w	sl, sl, r3
 801a47a:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801a47e:	e0ae      	b.n	801a5de <mktime+0x2ba>
 801a480:	f240 126d 	movw	r2, #365	; 0x16d
 801a484:	e7a3      	b.n	801a3ce <mktime+0xaa>
 801a486:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801a48a:	e7a0      	b.n	801a3ce <mktime+0xaa>
 801a48c:	d0a3      	beq.n	801a3d6 <mktime+0xb2>
 801a48e:	2345      	movs	r3, #69	; 0x45
 801a490:	f240 1e6d 	movw	lr, #365	; 0x16d
 801a494:	2164      	movs	r1, #100	; 0x64
 801a496:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801a49a:	e012      	b.n	801a4c2 <mktime+0x19e>
 801a49c:	bb62      	cbnz	r2, 801a4f8 <mktime+0x1d4>
 801a49e:	fb93 f2f1 	sdiv	r2, r3, r1
 801a4a2:	fb01 3212 	mls	r2, r1, r2, r3
 801a4a6:	bb52      	cbnz	r2, 801a4fe <mktime+0x1da>
 801a4a8:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801a4ac:	fb9c f2f0 	sdiv	r2, ip, r0
 801a4b0:	fb00 c212 	mls	r2, r0, r2, ip
 801a4b4:	2a00      	cmp	r2, #0
 801a4b6:	bf14      	ite	ne
 801a4b8:	4672      	movne	r2, lr
 801a4ba:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801a4be:	1aa4      	subs	r4, r4, r2
 801a4c0:	3b01      	subs	r3, #1
 801a4c2:	429e      	cmp	r6, r3
 801a4c4:	f003 0203 	and.w	r2, r3, #3
 801a4c8:	dbe8      	blt.n	801a49c <mktime+0x178>
 801a4ca:	b9da      	cbnz	r2, 801a504 <mktime+0x1e0>
 801a4cc:	2264      	movs	r2, #100	; 0x64
 801a4ce:	fb96 f3f2 	sdiv	r3, r6, r2
 801a4d2:	fb02 6313 	mls	r3, r2, r3, r6
 801a4d6:	b9c3      	cbnz	r3, 801a50a <mktime+0x1e6>
 801a4d8:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 801a4dc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801a4e0:	fb91 f3f2 	sdiv	r3, r1, r2
 801a4e4:	fb02 1313 	mls	r3, r2, r3, r1
 801a4e8:	2b00      	cmp	r3, #0
 801a4ea:	f240 136d 	movw	r3, #365	; 0x16d
 801a4ee:	bf08      	it	eq
 801a4f0:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 801a4f4:	1ae4      	subs	r4, r4, r3
 801a4f6:	e76e      	b.n	801a3d6 <mktime+0xb2>
 801a4f8:	f240 126d 	movw	r2, #365	; 0x16d
 801a4fc:	e7df      	b.n	801a4be <mktime+0x19a>
 801a4fe:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801a502:	e7dc      	b.n	801a4be <mktime+0x19a>
 801a504:	f240 136d 	movw	r3, #365	; 0x16d
 801a508:	e7f4      	b.n	801a4f4 <mktime+0x1d0>
 801a50a:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 801a50e:	e7f1      	b.n	801a4f4 <mktime+0x1d0>
 801a510:	f002 f97e 	bl	801c810 <__tzcalc_limits>
 801a514:	2800      	cmp	r0, #0
 801a516:	f47f af7b 	bne.w	801a410 <mktime+0xec>
 801a51a:	46c1      	mov	r9, r8
 801a51c:	e054      	b.n	801a5c8 <mktime+0x2a4>
 801a51e:	9800      	ldr	r0, [sp, #0]
 801a520:	9902      	ldr	r1, [sp, #8]
 801a522:	1a09      	subs	r1, r1, r0
 801a524:	9108      	str	r1, [sp, #32]
 801a526:	9801      	ldr	r0, [sp, #4]
 801a528:	9903      	ldr	r1, [sp, #12]
 801a52a:	eb61 0100 	sbc.w	r1, r1, r0
 801a52e:	9109      	str	r1, [sp, #36]	; 0x24
 801a530:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801a534:	4582      	cmp	sl, r0
 801a536:	eb7b 0101 	sbcs.w	r1, fp, r1
 801a53a:	dbee      	blt.n	801a51a <mktime+0x1f6>
 801a53c:	e77d      	b.n	801a43a <mktime+0x116>
 801a53e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a542:	4582      	cmp	sl, r0
 801a544:	eb7b 0101 	sbcs.w	r1, fp, r1
 801a548:	db89      	blt.n	801a45e <mktime+0x13a>
 801a54a:	f1b9 0f00 	cmp.w	r9, #0
 801a54e:	db3f      	blt.n	801a5d0 <mktime+0x2ac>
 801a550:	f04f 0901 	mov.w	r9, #1
 801a554:	ea88 0809 	eor.w	r8, r8, r9
 801a558:	f1b8 0f01 	cmp.w	r8, #1
 801a55c:	d134      	bne.n	801a5c8 <mktime+0x2a4>
 801a55e:	f1b9 0f00 	cmp.w	r9, #0
 801a562:	d04f      	beq.n	801a604 <mktime+0x2e0>
 801a564:	1ad3      	subs	r3, r2, r3
 801a566:	682a      	ldr	r2, [r5, #0]
 801a568:	f8d5 800c 	ldr.w	r8, [r5, #12]
 801a56c:	441a      	add	r2, r3
 801a56e:	eb1a 0a03 	adds.w	sl, sl, r3
 801a572:	602a      	str	r2, [r5, #0]
 801a574:	4628      	mov	r0, r5
 801a576:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801a57a:	f7ff fdfb 	bl	801a174 <validate_structure>
 801a57e:	68ea      	ldr	r2, [r5, #12]
 801a580:	ebb2 0208 	subs.w	r2, r2, r8
 801a584:	d020      	beq.n	801a5c8 <mktime+0x2a4>
 801a586:	2a01      	cmp	r2, #1
 801a588:	dc3e      	bgt.n	801a608 <mktime+0x2e4>
 801a58a:	1c90      	adds	r0, r2, #2
 801a58c:	bfd8      	it	le
 801a58e:	2201      	movle	r2, #1
 801a590:	69eb      	ldr	r3, [r5, #28]
 801a592:	18d3      	adds	r3, r2, r3
 801a594:	4414      	add	r4, r2
 801a596:	d540      	bpl.n	801a61a <mktime+0x2f6>
 801a598:	1e72      	subs	r2, r6, #1
 801a59a:	0791      	lsls	r1, r2, #30
 801a59c:	d137      	bne.n	801a60e <mktime+0x2ea>
 801a59e:	2164      	movs	r1, #100	; 0x64
 801a5a0:	fb92 f3f1 	sdiv	r3, r2, r1
 801a5a4:	fb01 2313 	mls	r3, r1, r3, r2
 801a5a8:	bba3      	cbnz	r3, 801a614 <mktime+0x2f0>
 801a5aa:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 801a5ae:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801a5b2:	fb96 f3f2 	sdiv	r3, r6, r2
 801a5b6:	fb02 6613 	mls	r6, r2, r3, r6
 801a5ba:	2e00      	cmp	r6, #0
 801a5bc:	f240 136d 	movw	r3, #365	; 0x16d
 801a5c0:	bf18      	it	ne
 801a5c2:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 801a5c6:	61eb      	str	r3, [r5, #28]
 801a5c8:	f1b9 0f01 	cmp.w	r9, #1
 801a5cc:	f47f af52 	bne.w	801a474 <mktime+0x150>
 801a5d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a5d2:	eb1a 0a03 	adds.w	sl, sl, r3
 801a5d6:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801a5da:	f04f 0901 	mov.w	r9, #1
 801a5de:	f002 f9c5 	bl	801c96c <__tz_unlock>
 801a5e2:	3404      	adds	r4, #4
 801a5e4:	2307      	movs	r3, #7
 801a5e6:	fb94 f3f3 	sdiv	r3, r4, r3
 801a5ea:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801a5ee:	1ae4      	subs	r4, r4, r3
 801a5f0:	bf48      	it	mi
 801a5f2:	3407      	addmi	r4, #7
 801a5f4:	f8c5 9020 	str.w	r9, [r5, #32]
 801a5f8:	61ac      	str	r4, [r5, #24]
 801a5fa:	4650      	mov	r0, sl
 801a5fc:	4659      	mov	r1, fp
 801a5fe:	b00b      	add	sp, #44	; 0x2c
 801a600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a604:	1a9b      	subs	r3, r3, r2
 801a606:	e7ae      	b.n	801a566 <mktime+0x242>
 801a608:	f04f 32ff 	mov.w	r2, #4294967295
 801a60c:	e7c0      	b.n	801a590 <mktime+0x26c>
 801a60e:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 801a612:	e7d8      	b.n	801a5c6 <mktime+0x2a2>
 801a614:	f240 136d 	movw	r3, #365	; 0x16d
 801a618:	e7d5      	b.n	801a5c6 <mktime+0x2a2>
 801a61a:	07b2      	lsls	r2, r6, #30
 801a61c:	d117      	bne.n	801a64e <mktime+0x32a>
 801a61e:	2164      	movs	r1, #100	; 0x64
 801a620:	fb96 f2f1 	sdiv	r2, r6, r1
 801a624:	fb01 6212 	mls	r2, r1, r2, r6
 801a628:	b9a2      	cbnz	r2, 801a654 <mktime+0x330>
 801a62a:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 801a62e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801a632:	fb96 f2f1 	sdiv	r2, r6, r1
 801a636:	fb01 6612 	mls	r6, r1, r2, r6
 801a63a:	2e00      	cmp	r6, #0
 801a63c:	f240 126d 	movw	r2, #365	; 0x16d
 801a640:	bf08      	it	eq
 801a642:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801a646:	4293      	cmp	r3, r2
 801a648:	bfa8      	it	ge
 801a64a:	1a9b      	subge	r3, r3, r2
 801a64c:	e7bb      	b.n	801a5c6 <mktime+0x2a2>
 801a64e:	f240 126d 	movw	r2, #365	; 0x16d
 801a652:	e7f8      	b.n	801a646 <mktime+0x322>
 801a654:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801a658:	e7f5      	b.n	801a646 <mktime+0x322>
 801a65a:	f04f 3aff 	mov.w	sl, #4294967295
 801a65e:	f04f 3bff 	mov.w	fp, #4294967295
 801a662:	e7ca      	b.n	801a5fa <mktime+0x2d6>
 801a664:	080221ec 	.word	0x080221ec
 801a668:	00015180 	.word	0x00015180
 801a66c:	20005edc 	.word	0x20005edc

0801a670 <_free_r>:
 801a670:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a672:	2900      	cmp	r1, #0
 801a674:	d048      	beq.n	801a708 <_free_r+0x98>
 801a676:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a67a:	9001      	str	r0, [sp, #4]
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	f1a1 0404 	sub.w	r4, r1, #4
 801a682:	bfb8      	it	lt
 801a684:	18e4      	addlt	r4, r4, r3
 801a686:	f004 f885 	bl	801e794 <__malloc_lock>
 801a68a:	4a20      	ldr	r2, [pc, #128]	; (801a70c <_free_r+0x9c>)
 801a68c:	9801      	ldr	r0, [sp, #4]
 801a68e:	6813      	ldr	r3, [r2, #0]
 801a690:	4615      	mov	r5, r2
 801a692:	b933      	cbnz	r3, 801a6a2 <_free_r+0x32>
 801a694:	6063      	str	r3, [r4, #4]
 801a696:	6014      	str	r4, [r2, #0]
 801a698:	b003      	add	sp, #12
 801a69a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a69e:	f004 b87f 	b.w	801e7a0 <__malloc_unlock>
 801a6a2:	42a3      	cmp	r3, r4
 801a6a4:	d90b      	bls.n	801a6be <_free_r+0x4e>
 801a6a6:	6821      	ldr	r1, [r4, #0]
 801a6a8:	1862      	adds	r2, r4, r1
 801a6aa:	4293      	cmp	r3, r2
 801a6ac:	bf04      	itt	eq
 801a6ae:	681a      	ldreq	r2, [r3, #0]
 801a6b0:	685b      	ldreq	r3, [r3, #4]
 801a6b2:	6063      	str	r3, [r4, #4]
 801a6b4:	bf04      	itt	eq
 801a6b6:	1852      	addeq	r2, r2, r1
 801a6b8:	6022      	streq	r2, [r4, #0]
 801a6ba:	602c      	str	r4, [r5, #0]
 801a6bc:	e7ec      	b.n	801a698 <_free_r+0x28>
 801a6be:	461a      	mov	r2, r3
 801a6c0:	685b      	ldr	r3, [r3, #4]
 801a6c2:	b10b      	cbz	r3, 801a6c8 <_free_r+0x58>
 801a6c4:	42a3      	cmp	r3, r4
 801a6c6:	d9fa      	bls.n	801a6be <_free_r+0x4e>
 801a6c8:	6811      	ldr	r1, [r2, #0]
 801a6ca:	1855      	adds	r5, r2, r1
 801a6cc:	42a5      	cmp	r5, r4
 801a6ce:	d10b      	bne.n	801a6e8 <_free_r+0x78>
 801a6d0:	6824      	ldr	r4, [r4, #0]
 801a6d2:	4421      	add	r1, r4
 801a6d4:	1854      	adds	r4, r2, r1
 801a6d6:	42a3      	cmp	r3, r4
 801a6d8:	6011      	str	r1, [r2, #0]
 801a6da:	d1dd      	bne.n	801a698 <_free_r+0x28>
 801a6dc:	681c      	ldr	r4, [r3, #0]
 801a6de:	685b      	ldr	r3, [r3, #4]
 801a6e0:	6053      	str	r3, [r2, #4]
 801a6e2:	4421      	add	r1, r4
 801a6e4:	6011      	str	r1, [r2, #0]
 801a6e6:	e7d7      	b.n	801a698 <_free_r+0x28>
 801a6e8:	d902      	bls.n	801a6f0 <_free_r+0x80>
 801a6ea:	230c      	movs	r3, #12
 801a6ec:	6003      	str	r3, [r0, #0]
 801a6ee:	e7d3      	b.n	801a698 <_free_r+0x28>
 801a6f0:	6825      	ldr	r5, [r4, #0]
 801a6f2:	1961      	adds	r1, r4, r5
 801a6f4:	428b      	cmp	r3, r1
 801a6f6:	bf04      	itt	eq
 801a6f8:	6819      	ldreq	r1, [r3, #0]
 801a6fa:	685b      	ldreq	r3, [r3, #4]
 801a6fc:	6063      	str	r3, [r4, #4]
 801a6fe:	bf04      	itt	eq
 801a700:	1949      	addeq	r1, r1, r5
 801a702:	6021      	streq	r1, [r4, #0]
 801a704:	6054      	str	r4, [r2, #4]
 801a706:	e7c7      	b.n	801a698 <_free_r+0x28>
 801a708:	b003      	add	sp, #12
 801a70a:	bd30      	pop	{r4, r5, pc}
 801a70c:	20005eb8 	.word	0x20005eb8

0801a710 <_malloc_r>:
 801a710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a712:	1ccd      	adds	r5, r1, #3
 801a714:	f025 0503 	bic.w	r5, r5, #3
 801a718:	3508      	adds	r5, #8
 801a71a:	2d0c      	cmp	r5, #12
 801a71c:	bf38      	it	cc
 801a71e:	250c      	movcc	r5, #12
 801a720:	2d00      	cmp	r5, #0
 801a722:	4606      	mov	r6, r0
 801a724:	db01      	blt.n	801a72a <_malloc_r+0x1a>
 801a726:	42a9      	cmp	r1, r5
 801a728:	d903      	bls.n	801a732 <_malloc_r+0x22>
 801a72a:	230c      	movs	r3, #12
 801a72c:	6033      	str	r3, [r6, #0]
 801a72e:	2000      	movs	r0, #0
 801a730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a732:	f004 f82f 	bl	801e794 <__malloc_lock>
 801a736:	4921      	ldr	r1, [pc, #132]	; (801a7bc <_malloc_r+0xac>)
 801a738:	680a      	ldr	r2, [r1, #0]
 801a73a:	4614      	mov	r4, r2
 801a73c:	b99c      	cbnz	r4, 801a766 <_malloc_r+0x56>
 801a73e:	4f20      	ldr	r7, [pc, #128]	; (801a7c0 <_malloc_r+0xb0>)
 801a740:	683b      	ldr	r3, [r7, #0]
 801a742:	b923      	cbnz	r3, 801a74e <_malloc_r+0x3e>
 801a744:	4621      	mov	r1, r4
 801a746:	4630      	mov	r0, r6
 801a748:	f000 ffae 	bl	801b6a8 <_sbrk_r>
 801a74c:	6038      	str	r0, [r7, #0]
 801a74e:	4629      	mov	r1, r5
 801a750:	4630      	mov	r0, r6
 801a752:	f000 ffa9 	bl	801b6a8 <_sbrk_r>
 801a756:	1c43      	adds	r3, r0, #1
 801a758:	d123      	bne.n	801a7a2 <_malloc_r+0x92>
 801a75a:	230c      	movs	r3, #12
 801a75c:	6033      	str	r3, [r6, #0]
 801a75e:	4630      	mov	r0, r6
 801a760:	f004 f81e 	bl	801e7a0 <__malloc_unlock>
 801a764:	e7e3      	b.n	801a72e <_malloc_r+0x1e>
 801a766:	6823      	ldr	r3, [r4, #0]
 801a768:	1b5b      	subs	r3, r3, r5
 801a76a:	d417      	bmi.n	801a79c <_malloc_r+0x8c>
 801a76c:	2b0b      	cmp	r3, #11
 801a76e:	d903      	bls.n	801a778 <_malloc_r+0x68>
 801a770:	6023      	str	r3, [r4, #0]
 801a772:	441c      	add	r4, r3
 801a774:	6025      	str	r5, [r4, #0]
 801a776:	e004      	b.n	801a782 <_malloc_r+0x72>
 801a778:	6863      	ldr	r3, [r4, #4]
 801a77a:	42a2      	cmp	r2, r4
 801a77c:	bf0c      	ite	eq
 801a77e:	600b      	streq	r3, [r1, #0]
 801a780:	6053      	strne	r3, [r2, #4]
 801a782:	4630      	mov	r0, r6
 801a784:	f004 f80c 	bl	801e7a0 <__malloc_unlock>
 801a788:	f104 000b 	add.w	r0, r4, #11
 801a78c:	1d23      	adds	r3, r4, #4
 801a78e:	f020 0007 	bic.w	r0, r0, #7
 801a792:	1ac2      	subs	r2, r0, r3
 801a794:	d0cc      	beq.n	801a730 <_malloc_r+0x20>
 801a796:	1a1b      	subs	r3, r3, r0
 801a798:	50a3      	str	r3, [r4, r2]
 801a79a:	e7c9      	b.n	801a730 <_malloc_r+0x20>
 801a79c:	4622      	mov	r2, r4
 801a79e:	6864      	ldr	r4, [r4, #4]
 801a7a0:	e7cc      	b.n	801a73c <_malloc_r+0x2c>
 801a7a2:	1cc4      	adds	r4, r0, #3
 801a7a4:	f024 0403 	bic.w	r4, r4, #3
 801a7a8:	42a0      	cmp	r0, r4
 801a7aa:	d0e3      	beq.n	801a774 <_malloc_r+0x64>
 801a7ac:	1a21      	subs	r1, r4, r0
 801a7ae:	4630      	mov	r0, r6
 801a7b0:	f000 ff7a 	bl	801b6a8 <_sbrk_r>
 801a7b4:	3001      	adds	r0, #1
 801a7b6:	d1dd      	bne.n	801a774 <_malloc_r+0x64>
 801a7b8:	e7cf      	b.n	801a75a <_malloc_r+0x4a>
 801a7ba:	bf00      	nop
 801a7bc:	20005eb8 	.word	0x20005eb8
 801a7c0:	20005ebc 	.word	0x20005ebc

0801a7c4 <__cvt>:
 801a7c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a7c8:	ec55 4b10 	vmov	r4, r5, d0
 801a7cc:	2d00      	cmp	r5, #0
 801a7ce:	460e      	mov	r6, r1
 801a7d0:	4619      	mov	r1, r3
 801a7d2:	462b      	mov	r3, r5
 801a7d4:	bfbb      	ittet	lt
 801a7d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801a7da:	461d      	movlt	r5, r3
 801a7dc:	2300      	movge	r3, #0
 801a7de:	232d      	movlt	r3, #45	; 0x2d
 801a7e0:	700b      	strb	r3, [r1, #0]
 801a7e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a7e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801a7e8:	4691      	mov	r9, r2
 801a7ea:	f023 0820 	bic.w	r8, r3, #32
 801a7ee:	bfbc      	itt	lt
 801a7f0:	4622      	movlt	r2, r4
 801a7f2:	4614      	movlt	r4, r2
 801a7f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a7f8:	d005      	beq.n	801a806 <__cvt+0x42>
 801a7fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801a7fe:	d100      	bne.n	801a802 <__cvt+0x3e>
 801a800:	3601      	adds	r6, #1
 801a802:	2102      	movs	r1, #2
 801a804:	e000      	b.n	801a808 <__cvt+0x44>
 801a806:	2103      	movs	r1, #3
 801a808:	ab03      	add	r3, sp, #12
 801a80a:	9301      	str	r3, [sp, #4]
 801a80c:	ab02      	add	r3, sp, #8
 801a80e:	9300      	str	r3, [sp, #0]
 801a810:	ec45 4b10 	vmov	d0, r4, r5
 801a814:	4653      	mov	r3, sl
 801a816:	4632      	mov	r2, r6
 801a818:	f002 fc0a 	bl	801d030 <_dtoa_r>
 801a81c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801a820:	4607      	mov	r7, r0
 801a822:	d102      	bne.n	801a82a <__cvt+0x66>
 801a824:	f019 0f01 	tst.w	r9, #1
 801a828:	d022      	beq.n	801a870 <__cvt+0xac>
 801a82a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a82e:	eb07 0906 	add.w	r9, r7, r6
 801a832:	d110      	bne.n	801a856 <__cvt+0x92>
 801a834:	783b      	ldrb	r3, [r7, #0]
 801a836:	2b30      	cmp	r3, #48	; 0x30
 801a838:	d10a      	bne.n	801a850 <__cvt+0x8c>
 801a83a:	2200      	movs	r2, #0
 801a83c:	2300      	movs	r3, #0
 801a83e:	4620      	mov	r0, r4
 801a840:	4629      	mov	r1, r5
 801a842:	f7e6 f961 	bl	8000b08 <__aeabi_dcmpeq>
 801a846:	b918      	cbnz	r0, 801a850 <__cvt+0x8c>
 801a848:	f1c6 0601 	rsb	r6, r6, #1
 801a84c:	f8ca 6000 	str.w	r6, [sl]
 801a850:	f8da 3000 	ldr.w	r3, [sl]
 801a854:	4499      	add	r9, r3
 801a856:	2200      	movs	r2, #0
 801a858:	2300      	movs	r3, #0
 801a85a:	4620      	mov	r0, r4
 801a85c:	4629      	mov	r1, r5
 801a85e:	f7e6 f953 	bl	8000b08 <__aeabi_dcmpeq>
 801a862:	b108      	cbz	r0, 801a868 <__cvt+0xa4>
 801a864:	f8cd 900c 	str.w	r9, [sp, #12]
 801a868:	2230      	movs	r2, #48	; 0x30
 801a86a:	9b03      	ldr	r3, [sp, #12]
 801a86c:	454b      	cmp	r3, r9
 801a86e:	d307      	bcc.n	801a880 <__cvt+0xbc>
 801a870:	9b03      	ldr	r3, [sp, #12]
 801a872:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a874:	1bdb      	subs	r3, r3, r7
 801a876:	4638      	mov	r0, r7
 801a878:	6013      	str	r3, [r2, #0]
 801a87a:	b004      	add	sp, #16
 801a87c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a880:	1c59      	adds	r1, r3, #1
 801a882:	9103      	str	r1, [sp, #12]
 801a884:	701a      	strb	r2, [r3, #0]
 801a886:	e7f0      	b.n	801a86a <__cvt+0xa6>

0801a888 <__exponent>:
 801a888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a88a:	4603      	mov	r3, r0
 801a88c:	2900      	cmp	r1, #0
 801a88e:	bfb8      	it	lt
 801a890:	4249      	neglt	r1, r1
 801a892:	f803 2b02 	strb.w	r2, [r3], #2
 801a896:	bfb4      	ite	lt
 801a898:	222d      	movlt	r2, #45	; 0x2d
 801a89a:	222b      	movge	r2, #43	; 0x2b
 801a89c:	2909      	cmp	r1, #9
 801a89e:	7042      	strb	r2, [r0, #1]
 801a8a0:	dd2a      	ble.n	801a8f8 <__exponent+0x70>
 801a8a2:	f10d 0407 	add.w	r4, sp, #7
 801a8a6:	46a4      	mov	ip, r4
 801a8a8:	270a      	movs	r7, #10
 801a8aa:	46a6      	mov	lr, r4
 801a8ac:	460a      	mov	r2, r1
 801a8ae:	fb91 f6f7 	sdiv	r6, r1, r7
 801a8b2:	fb07 1516 	mls	r5, r7, r6, r1
 801a8b6:	3530      	adds	r5, #48	; 0x30
 801a8b8:	2a63      	cmp	r2, #99	; 0x63
 801a8ba:	f104 34ff 	add.w	r4, r4, #4294967295
 801a8be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801a8c2:	4631      	mov	r1, r6
 801a8c4:	dcf1      	bgt.n	801a8aa <__exponent+0x22>
 801a8c6:	3130      	adds	r1, #48	; 0x30
 801a8c8:	f1ae 0502 	sub.w	r5, lr, #2
 801a8cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 801a8d0:	1c44      	adds	r4, r0, #1
 801a8d2:	4629      	mov	r1, r5
 801a8d4:	4561      	cmp	r1, ip
 801a8d6:	d30a      	bcc.n	801a8ee <__exponent+0x66>
 801a8d8:	f10d 0209 	add.w	r2, sp, #9
 801a8dc:	eba2 020e 	sub.w	r2, r2, lr
 801a8e0:	4565      	cmp	r5, ip
 801a8e2:	bf88      	it	hi
 801a8e4:	2200      	movhi	r2, #0
 801a8e6:	4413      	add	r3, r2
 801a8e8:	1a18      	subs	r0, r3, r0
 801a8ea:	b003      	add	sp, #12
 801a8ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a8ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a8f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 801a8f6:	e7ed      	b.n	801a8d4 <__exponent+0x4c>
 801a8f8:	2330      	movs	r3, #48	; 0x30
 801a8fa:	3130      	adds	r1, #48	; 0x30
 801a8fc:	7083      	strb	r3, [r0, #2]
 801a8fe:	70c1      	strb	r1, [r0, #3]
 801a900:	1d03      	adds	r3, r0, #4
 801a902:	e7f1      	b.n	801a8e8 <__exponent+0x60>

0801a904 <_printf_float>:
 801a904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a908:	ed2d 8b02 	vpush	{d8}
 801a90c:	b08d      	sub	sp, #52	; 0x34
 801a90e:	460c      	mov	r4, r1
 801a910:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801a914:	4616      	mov	r6, r2
 801a916:	461f      	mov	r7, r3
 801a918:	4605      	mov	r5, r0
 801a91a:	f003 feaf 	bl	801e67c <_localeconv_r>
 801a91e:	f8d0 a000 	ldr.w	sl, [r0]
 801a922:	4650      	mov	r0, sl
 801a924:	f7e5 fc6e 	bl	8000204 <strlen>
 801a928:	2300      	movs	r3, #0
 801a92a:	930a      	str	r3, [sp, #40]	; 0x28
 801a92c:	6823      	ldr	r3, [r4, #0]
 801a92e:	9305      	str	r3, [sp, #20]
 801a930:	f8d8 3000 	ldr.w	r3, [r8]
 801a934:	f894 b018 	ldrb.w	fp, [r4, #24]
 801a938:	3307      	adds	r3, #7
 801a93a:	f023 0307 	bic.w	r3, r3, #7
 801a93e:	f103 0208 	add.w	r2, r3, #8
 801a942:	f8c8 2000 	str.w	r2, [r8]
 801a946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a94a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801a94e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801a952:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a956:	9307      	str	r3, [sp, #28]
 801a958:	f8cd 8018 	str.w	r8, [sp, #24]
 801a95c:	ee08 0a10 	vmov	s16, r0
 801a960:	4b9f      	ldr	r3, [pc, #636]	; (801abe0 <_printf_float+0x2dc>)
 801a962:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a966:	f04f 32ff 	mov.w	r2, #4294967295
 801a96a:	f7e6 f8ff 	bl	8000b6c <__aeabi_dcmpun>
 801a96e:	bb88      	cbnz	r0, 801a9d4 <_printf_float+0xd0>
 801a970:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a974:	4b9a      	ldr	r3, [pc, #616]	; (801abe0 <_printf_float+0x2dc>)
 801a976:	f04f 32ff 	mov.w	r2, #4294967295
 801a97a:	f7e6 f8d9 	bl	8000b30 <__aeabi_dcmple>
 801a97e:	bb48      	cbnz	r0, 801a9d4 <_printf_float+0xd0>
 801a980:	2200      	movs	r2, #0
 801a982:	2300      	movs	r3, #0
 801a984:	4640      	mov	r0, r8
 801a986:	4649      	mov	r1, r9
 801a988:	f7e6 f8c8 	bl	8000b1c <__aeabi_dcmplt>
 801a98c:	b110      	cbz	r0, 801a994 <_printf_float+0x90>
 801a98e:	232d      	movs	r3, #45	; 0x2d
 801a990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a994:	4b93      	ldr	r3, [pc, #588]	; (801abe4 <_printf_float+0x2e0>)
 801a996:	4894      	ldr	r0, [pc, #592]	; (801abe8 <_printf_float+0x2e4>)
 801a998:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801a99c:	bf94      	ite	ls
 801a99e:	4698      	movls	r8, r3
 801a9a0:	4680      	movhi	r8, r0
 801a9a2:	2303      	movs	r3, #3
 801a9a4:	6123      	str	r3, [r4, #16]
 801a9a6:	9b05      	ldr	r3, [sp, #20]
 801a9a8:	f023 0204 	bic.w	r2, r3, #4
 801a9ac:	6022      	str	r2, [r4, #0]
 801a9ae:	f04f 0900 	mov.w	r9, #0
 801a9b2:	9700      	str	r7, [sp, #0]
 801a9b4:	4633      	mov	r3, r6
 801a9b6:	aa0b      	add	r2, sp, #44	; 0x2c
 801a9b8:	4621      	mov	r1, r4
 801a9ba:	4628      	mov	r0, r5
 801a9bc:	f000 f9d8 	bl	801ad70 <_printf_common>
 801a9c0:	3001      	adds	r0, #1
 801a9c2:	f040 8090 	bne.w	801aae6 <_printf_float+0x1e2>
 801a9c6:	f04f 30ff 	mov.w	r0, #4294967295
 801a9ca:	b00d      	add	sp, #52	; 0x34
 801a9cc:	ecbd 8b02 	vpop	{d8}
 801a9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9d4:	4642      	mov	r2, r8
 801a9d6:	464b      	mov	r3, r9
 801a9d8:	4640      	mov	r0, r8
 801a9da:	4649      	mov	r1, r9
 801a9dc:	f7e6 f8c6 	bl	8000b6c <__aeabi_dcmpun>
 801a9e0:	b140      	cbz	r0, 801a9f4 <_printf_float+0xf0>
 801a9e2:	464b      	mov	r3, r9
 801a9e4:	2b00      	cmp	r3, #0
 801a9e6:	bfbc      	itt	lt
 801a9e8:	232d      	movlt	r3, #45	; 0x2d
 801a9ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801a9ee:	487f      	ldr	r0, [pc, #508]	; (801abec <_printf_float+0x2e8>)
 801a9f0:	4b7f      	ldr	r3, [pc, #508]	; (801abf0 <_printf_float+0x2ec>)
 801a9f2:	e7d1      	b.n	801a998 <_printf_float+0x94>
 801a9f4:	6863      	ldr	r3, [r4, #4]
 801a9f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801a9fa:	9206      	str	r2, [sp, #24]
 801a9fc:	1c5a      	adds	r2, r3, #1
 801a9fe:	d13f      	bne.n	801aa80 <_printf_float+0x17c>
 801aa00:	2306      	movs	r3, #6
 801aa02:	6063      	str	r3, [r4, #4]
 801aa04:	9b05      	ldr	r3, [sp, #20]
 801aa06:	6861      	ldr	r1, [r4, #4]
 801aa08:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801aa0c:	2300      	movs	r3, #0
 801aa0e:	9303      	str	r3, [sp, #12]
 801aa10:	ab0a      	add	r3, sp, #40	; 0x28
 801aa12:	e9cd b301 	strd	fp, r3, [sp, #4]
 801aa16:	ab09      	add	r3, sp, #36	; 0x24
 801aa18:	ec49 8b10 	vmov	d0, r8, r9
 801aa1c:	9300      	str	r3, [sp, #0]
 801aa1e:	6022      	str	r2, [r4, #0]
 801aa20:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801aa24:	4628      	mov	r0, r5
 801aa26:	f7ff fecd 	bl	801a7c4 <__cvt>
 801aa2a:	9b06      	ldr	r3, [sp, #24]
 801aa2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801aa2e:	2b47      	cmp	r3, #71	; 0x47
 801aa30:	4680      	mov	r8, r0
 801aa32:	d108      	bne.n	801aa46 <_printf_float+0x142>
 801aa34:	1cc8      	adds	r0, r1, #3
 801aa36:	db02      	blt.n	801aa3e <_printf_float+0x13a>
 801aa38:	6863      	ldr	r3, [r4, #4]
 801aa3a:	4299      	cmp	r1, r3
 801aa3c:	dd41      	ble.n	801aac2 <_printf_float+0x1be>
 801aa3e:	f1ab 0b02 	sub.w	fp, fp, #2
 801aa42:	fa5f fb8b 	uxtb.w	fp, fp
 801aa46:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801aa4a:	d820      	bhi.n	801aa8e <_printf_float+0x18a>
 801aa4c:	3901      	subs	r1, #1
 801aa4e:	465a      	mov	r2, fp
 801aa50:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801aa54:	9109      	str	r1, [sp, #36]	; 0x24
 801aa56:	f7ff ff17 	bl	801a888 <__exponent>
 801aa5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801aa5c:	1813      	adds	r3, r2, r0
 801aa5e:	2a01      	cmp	r2, #1
 801aa60:	4681      	mov	r9, r0
 801aa62:	6123      	str	r3, [r4, #16]
 801aa64:	dc02      	bgt.n	801aa6c <_printf_float+0x168>
 801aa66:	6822      	ldr	r2, [r4, #0]
 801aa68:	07d2      	lsls	r2, r2, #31
 801aa6a:	d501      	bpl.n	801aa70 <_printf_float+0x16c>
 801aa6c:	3301      	adds	r3, #1
 801aa6e:	6123      	str	r3, [r4, #16]
 801aa70:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801aa74:	2b00      	cmp	r3, #0
 801aa76:	d09c      	beq.n	801a9b2 <_printf_float+0xae>
 801aa78:	232d      	movs	r3, #45	; 0x2d
 801aa7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aa7e:	e798      	b.n	801a9b2 <_printf_float+0xae>
 801aa80:	9a06      	ldr	r2, [sp, #24]
 801aa82:	2a47      	cmp	r2, #71	; 0x47
 801aa84:	d1be      	bne.n	801aa04 <_printf_float+0x100>
 801aa86:	2b00      	cmp	r3, #0
 801aa88:	d1bc      	bne.n	801aa04 <_printf_float+0x100>
 801aa8a:	2301      	movs	r3, #1
 801aa8c:	e7b9      	b.n	801aa02 <_printf_float+0xfe>
 801aa8e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801aa92:	d118      	bne.n	801aac6 <_printf_float+0x1c2>
 801aa94:	2900      	cmp	r1, #0
 801aa96:	6863      	ldr	r3, [r4, #4]
 801aa98:	dd0b      	ble.n	801aab2 <_printf_float+0x1ae>
 801aa9a:	6121      	str	r1, [r4, #16]
 801aa9c:	b913      	cbnz	r3, 801aaa4 <_printf_float+0x1a0>
 801aa9e:	6822      	ldr	r2, [r4, #0]
 801aaa0:	07d0      	lsls	r0, r2, #31
 801aaa2:	d502      	bpl.n	801aaaa <_printf_float+0x1a6>
 801aaa4:	3301      	adds	r3, #1
 801aaa6:	440b      	add	r3, r1
 801aaa8:	6123      	str	r3, [r4, #16]
 801aaaa:	65a1      	str	r1, [r4, #88]	; 0x58
 801aaac:	f04f 0900 	mov.w	r9, #0
 801aab0:	e7de      	b.n	801aa70 <_printf_float+0x16c>
 801aab2:	b913      	cbnz	r3, 801aaba <_printf_float+0x1b6>
 801aab4:	6822      	ldr	r2, [r4, #0]
 801aab6:	07d2      	lsls	r2, r2, #31
 801aab8:	d501      	bpl.n	801aabe <_printf_float+0x1ba>
 801aaba:	3302      	adds	r3, #2
 801aabc:	e7f4      	b.n	801aaa8 <_printf_float+0x1a4>
 801aabe:	2301      	movs	r3, #1
 801aac0:	e7f2      	b.n	801aaa8 <_printf_float+0x1a4>
 801aac2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801aac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aac8:	4299      	cmp	r1, r3
 801aaca:	db05      	blt.n	801aad8 <_printf_float+0x1d4>
 801aacc:	6823      	ldr	r3, [r4, #0]
 801aace:	6121      	str	r1, [r4, #16]
 801aad0:	07d8      	lsls	r0, r3, #31
 801aad2:	d5ea      	bpl.n	801aaaa <_printf_float+0x1a6>
 801aad4:	1c4b      	adds	r3, r1, #1
 801aad6:	e7e7      	b.n	801aaa8 <_printf_float+0x1a4>
 801aad8:	2900      	cmp	r1, #0
 801aada:	bfd4      	ite	le
 801aadc:	f1c1 0202 	rsble	r2, r1, #2
 801aae0:	2201      	movgt	r2, #1
 801aae2:	4413      	add	r3, r2
 801aae4:	e7e0      	b.n	801aaa8 <_printf_float+0x1a4>
 801aae6:	6823      	ldr	r3, [r4, #0]
 801aae8:	055a      	lsls	r2, r3, #21
 801aaea:	d407      	bmi.n	801aafc <_printf_float+0x1f8>
 801aaec:	6923      	ldr	r3, [r4, #16]
 801aaee:	4642      	mov	r2, r8
 801aaf0:	4631      	mov	r1, r6
 801aaf2:	4628      	mov	r0, r5
 801aaf4:	47b8      	blx	r7
 801aaf6:	3001      	adds	r0, #1
 801aaf8:	d12c      	bne.n	801ab54 <_printf_float+0x250>
 801aafa:	e764      	b.n	801a9c6 <_printf_float+0xc2>
 801aafc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801ab00:	f240 80e0 	bls.w	801acc4 <_printf_float+0x3c0>
 801ab04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801ab08:	2200      	movs	r2, #0
 801ab0a:	2300      	movs	r3, #0
 801ab0c:	f7e5 fffc 	bl	8000b08 <__aeabi_dcmpeq>
 801ab10:	2800      	cmp	r0, #0
 801ab12:	d034      	beq.n	801ab7e <_printf_float+0x27a>
 801ab14:	4a37      	ldr	r2, [pc, #220]	; (801abf4 <_printf_float+0x2f0>)
 801ab16:	2301      	movs	r3, #1
 801ab18:	4631      	mov	r1, r6
 801ab1a:	4628      	mov	r0, r5
 801ab1c:	47b8      	blx	r7
 801ab1e:	3001      	adds	r0, #1
 801ab20:	f43f af51 	beq.w	801a9c6 <_printf_float+0xc2>
 801ab24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ab28:	429a      	cmp	r2, r3
 801ab2a:	db02      	blt.n	801ab32 <_printf_float+0x22e>
 801ab2c:	6823      	ldr	r3, [r4, #0]
 801ab2e:	07d8      	lsls	r0, r3, #31
 801ab30:	d510      	bpl.n	801ab54 <_printf_float+0x250>
 801ab32:	ee18 3a10 	vmov	r3, s16
 801ab36:	4652      	mov	r2, sl
 801ab38:	4631      	mov	r1, r6
 801ab3a:	4628      	mov	r0, r5
 801ab3c:	47b8      	blx	r7
 801ab3e:	3001      	adds	r0, #1
 801ab40:	f43f af41 	beq.w	801a9c6 <_printf_float+0xc2>
 801ab44:	f04f 0800 	mov.w	r8, #0
 801ab48:	f104 091a 	add.w	r9, r4, #26
 801ab4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ab4e:	3b01      	subs	r3, #1
 801ab50:	4543      	cmp	r3, r8
 801ab52:	dc09      	bgt.n	801ab68 <_printf_float+0x264>
 801ab54:	6823      	ldr	r3, [r4, #0]
 801ab56:	079b      	lsls	r3, r3, #30
 801ab58:	f100 8105 	bmi.w	801ad66 <_printf_float+0x462>
 801ab5c:	68e0      	ldr	r0, [r4, #12]
 801ab5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ab60:	4298      	cmp	r0, r3
 801ab62:	bfb8      	it	lt
 801ab64:	4618      	movlt	r0, r3
 801ab66:	e730      	b.n	801a9ca <_printf_float+0xc6>
 801ab68:	2301      	movs	r3, #1
 801ab6a:	464a      	mov	r2, r9
 801ab6c:	4631      	mov	r1, r6
 801ab6e:	4628      	mov	r0, r5
 801ab70:	47b8      	blx	r7
 801ab72:	3001      	adds	r0, #1
 801ab74:	f43f af27 	beq.w	801a9c6 <_printf_float+0xc2>
 801ab78:	f108 0801 	add.w	r8, r8, #1
 801ab7c:	e7e6      	b.n	801ab4c <_printf_float+0x248>
 801ab7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab80:	2b00      	cmp	r3, #0
 801ab82:	dc39      	bgt.n	801abf8 <_printf_float+0x2f4>
 801ab84:	4a1b      	ldr	r2, [pc, #108]	; (801abf4 <_printf_float+0x2f0>)
 801ab86:	2301      	movs	r3, #1
 801ab88:	4631      	mov	r1, r6
 801ab8a:	4628      	mov	r0, r5
 801ab8c:	47b8      	blx	r7
 801ab8e:	3001      	adds	r0, #1
 801ab90:	f43f af19 	beq.w	801a9c6 <_printf_float+0xc2>
 801ab94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ab98:	4313      	orrs	r3, r2
 801ab9a:	d102      	bne.n	801aba2 <_printf_float+0x29e>
 801ab9c:	6823      	ldr	r3, [r4, #0]
 801ab9e:	07d9      	lsls	r1, r3, #31
 801aba0:	d5d8      	bpl.n	801ab54 <_printf_float+0x250>
 801aba2:	ee18 3a10 	vmov	r3, s16
 801aba6:	4652      	mov	r2, sl
 801aba8:	4631      	mov	r1, r6
 801abaa:	4628      	mov	r0, r5
 801abac:	47b8      	blx	r7
 801abae:	3001      	adds	r0, #1
 801abb0:	f43f af09 	beq.w	801a9c6 <_printf_float+0xc2>
 801abb4:	f04f 0900 	mov.w	r9, #0
 801abb8:	f104 0a1a 	add.w	sl, r4, #26
 801abbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801abbe:	425b      	negs	r3, r3
 801abc0:	454b      	cmp	r3, r9
 801abc2:	dc01      	bgt.n	801abc8 <_printf_float+0x2c4>
 801abc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801abc6:	e792      	b.n	801aaee <_printf_float+0x1ea>
 801abc8:	2301      	movs	r3, #1
 801abca:	4652      	mov	r2, sl
 801abcc:	4631      	mov	r1, r6
 801abce:	4628      	mov	r0, r5
 801abd0:	47b8      	blx	r7
 801abd2:	3001      	adds	r0, #1
 801abd4:	f43f aef7 	beq.w	801a9c6 <_printf_float+0xc2>
 801abd8:	f109 0901 	add.w	r9, r9, #1
 801abdc:	e7ee      	b.n	801abbc <_printf_float+0x2b8>
 801abde:	bf00      	nop
 801abe0:	7fefffff 	.word	0x7fefffff
 801abe4:	0802227c 	.word	0x0802227c
 801abe8:	08022280 	.word	0x08022280
 801abec:	08022288 	.word	0x08022288
 801abf0:	08022284 	.word	0x08022284
 801abf4:	08022651 	.word	0x08022651
 801abf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801abfa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801abfc:	429a      	cmp	r2, r3
 801abfe:	bfa8      	it	ge
 801ac00:	461a      	movge	r2, r3
 801ac02:	2a00      	cmp	r2, #0
 801ac04:	4691      	mov	r9, r2
 801ac06:	dc37      	bgt.n	801ac78 <_printf_float+0x374>
 801ac08:	f04f 0b00 	mov.w	fp, #0
 801ac0c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ac10:	f104 021a 	add.w	r2, r4, #26
 801ac14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ac16:	9305      	str	r3, [sp, #20]
 801ac18:	eba3 0309 	sub.w	r3, r3, r9
 801ac1c:	455b      	cmp	r3, fp
 801ac1e:	dc33      	bgt.n	801ac88 <_printf_float+0x384>
 801ac20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ac24:	429a      	cmp	r2, r3
 801ac26:	db3b      	blt.n	801aca0 <_printf_float+0x39c>
 801ac28:	6823      	ldr	r3, [r4, #0]
 801ac2a:	07da      	lsls	r2, r3, #31
 801ac2c:	d438      	bmi.n	801aca0 <_printf_float+0x39c>
 801ac2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ac30:	9b05      	ldr	r3, [sp, #20]
 801ac32:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ac34:	1ad3      	subs	r3, r2, r3
 801ac36:	eba2 0901 	sub.w	r9, r2, r1
 801ac3a:	4599      	cmp	r9, r3
 801ac3c:	bfa8      	it	ge
 801ac3e:	4699      	movge	r9, r3
 801ac40:	f1b9 0f00 	cmp.w	r9, #0
 801ac44:	dc35      	bgt.n	801acb2 <_printf_float+0x3ae>
 801ac46:	f04f 0800 	mov.w	r8, #0
 801ac4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ac4e:	f104 0a1a 	add.w	sl, r4, #26
 801ac52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ac56:	1a9b      	subs	r3, r3, r2
 801ac58:	eba3 0309 	sub.w	r3, r3, r9
 801ac5c:	4543      	cmp	r3, r8
 801ac5e:	f77f af79 	ble.w	801ab54 <_printf_float+0x250>
 801ac62:	2301      	movs	r3, #1
 801ac64:	4652      	mov	r2, sl
 801ac66:	4631      	mov	r1, r6
 801ac68:	4628      	mov	r0, r5
 801ac6a:	47b8      	blx	r7
 801ac6c:	3001      	adds	r0, #1
 801ac6e:	f43f aeaa 	beq.w	801a9c6 <_printf_float+0xc2>
 801ac72:	f108 0801 	add.w	r8, r8, #1
 801ac76:	e7ec      	b.n	801ac52 <_printf_float+0x34e>
 801ac78:	4613      	mov	r3, r2
 801ac7a:	4631      	mov	r1, r6
 801ac7c:	4642      	mov	r2, r8
 801ac7e:	4628      	mov	r0, r5
 801ac80:	47b8      	blx	r7
 801ac82:	3001      	adds	r0, #1
 801ac84:	d1c0      	bne.n	801ac08 <_printf_float+0x304>
 801ac86:	e69e      	b.n	801a9c6 <_printf_float+0xc2>
 801ac88:	2301      	movs	r3, #1
 801ac8a:	4631      	mov	r1, r6
 801ac8c:	4628      	mov	r0, r5
 801ac8e:	9205      	str	r2, [sp, #20]
 801ac90:	47b8      	blx	r7
 801ac92:	3001      	adds	r0, #1
 801ac94:	f43f ae97 	beq.w	801a9c6 <_printf_float+0xc2>
 801ac98:	9a05      	ldr	r2, [sp, #20]
 801ac9a:	f10b 0b01 	add.w	fp, fp, #1
 801ac9e:	e7b9      	b.n	801ac14 <_printf_float+0x310>
 801aca0:	ee18 3a10 	vmov	r3, s16
 801aca4:	4652      	mov	r2, sl
 801aca6:	4631      	mov	r1, r6
 801aca8:	4628      	mov	r0, r5
 801acaa:	47b8      	blx	r7
 801acac:	3001      	adds	r0, #1
 801acae:	d1be      	bne.n	801ac2e <_printf_float+0x32a>
 801acb0:	e689      	b.n	801a9c6 <_printf_float+0xc2>
 801acb2:	9a05      	ldr	r2, [sp, #20]
 801acb4:	464b      	mov	r3, r9
 801acb6:	4442      	add	r2, r8
 801acb8:	4631      	mov	r1, r6
 801acba:	4628      	mov	r0, r5
 801acbc:	47b8      	blx	r7
 801acbe:	3001      	adds	r0, #1
 801acc0:	d1c1      	bne.n	801ac46 <_printf_float+0x342>
 801acc2:	e680      	b.n	801a9c6 <_printf_float+0xc2>
 801acc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801acc6:	2a01      	cmp	r2, #1
 801acc8:	dc01      	bgt.n	801acce <_printf_float+0x3ca>
 801acca:	07db      	lsls	r3, r3, #31
 801accc:	d538      	bpl.n	801ad40 <_printf_float+0x43c>
 801acce:	2301      	movs	r3, #1
 801acd0:	4642      	mov	r2, r8
 801acd2:	4631      	mov	r1, r6
 801acd4:	4628      	mov	r0, r5
 801acd6:	47b8      	blx	r7
 801acd8:	3001      	adds	r0, #1
 801acda:	f43f ae74 	beq.w	801a9c6 <_printf_float+0xc2>
 801acde:	ee18 3a10 	vmov	r3, s16
 801ace2:	4652      	mov	r2, sl
 801ace4:	4631      	mov	r1, r6
 801ace6:	4628      	mov	r0, r5
 801ace8:	47b8      	blx	r7
 801acea:	3001      	adds	r0, #1
 801acec:	f43f ae6b 	beq.w	801a9c6 <_printf_float+0xc2>
 801acf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801acf4:	2200      	movs	r2, #0
 801acf6:	2300      	movs	r3, #0
 801acf8:	f7e5 ff06 	bl	8000b08 <__aeabi_dcmpeq>
 801acfc:	b9d8      	cbnz	r0, 801ad36 <_printf_float+0x432>
 801acfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad00:	f108 0201 	add.w	r2, r8, #1
 801ad04:	3b01      	subs	r3, #1
 801ad06:	4631      	mov	r1, r6
 801ad08:	4628      	mov	r0, r5
 801ad0a:	47b8      	blx	r7
 801ad0c:	3001      	adds	r0, #1
 801ad0e:	d10e      	bne.n	801ad2e <_printf_float+0x42a>
 801ad10:	e659      	b.n	801a9c6 <_printf_float+0xc2>
 801ad12:	2301      	movs	r3, #1
 801ad14:	4652      	mov	r2, sl
 801ad16:	4631      	mov	r1, r6
 801ad18:	4628      	mov	r0, r5
 801ad1a:	47b8      	blx	r7
 801ad1c:	3001      	adds	r0, #1
 801ad1e:	f43f ae52 	beq.w	801a9c6 <_printf_float+0xc2>
 801ad22:	f108 0801 	add.w	r8, r8, #1
 801ad26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad28:	3b01      	subs	r3, #1
 801ad2a:	4543      	cmp	r3, r8
 801ad2c:	dcf1      	bgt.n	801ad12 <_printf_float+0x40e>
 801ad2e:	464b      	mov	r3, r9
 801ad30:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801ad34:	e6dc      	b.n	801aaf0 <_printf_float+0x1ec>
 801ad36:	f04f 0800 	mov.w	r8, #0
 801ad3a:	f104 0a1a 	add.w	sl, r4, #26
 801ad3e:	e7f2      	b.n	801ad26 <_printf_float+0x422>
 801ad40:	2301      	movs	r3, #1
 801ad42:	4642      	mov	r2, r8
 801ad44:	e7df      	b.n	801ad06 <_printf_float+0x402>
 801ad46:	2301      	movs	r3, #1
 801ad48:	464a      	mov	r2, r9
 801ad4a:	4631      	mov	r1, r6
 801ad4c:	4628      	mov	r0, r5
 801ad4e:	47b8      	blx	r7
 801ad50:	3001      	adds	r0, #1
 801ad52:	f43f ae38 	beq.w	801a9c6 <_printf_float+0xc2>
 801ad56:	f108 0801 	add.w	r8, r8, #1
 801ad5a:	68e3      	ldr	r3, [r4, #12]
 801ad5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ad5e:	1a5b      	subs	r3, r3, r1
 801ad60:	4543      	cmp	r3, r8
 801ad62:	dcf0      	bgt.n	801ad46 <_printf_float+0x442>
 801ad64:	e6fa      	b.n	801ab5c <_printf_float+0x258>
 801ad66:	f04f 0800 	mov.w	r8, #0
 801ad6a:	f104 0919 	add.w	r9, r4, #25
 801ad6e:	e7f4      	b.n	801ad5a <_printf_float+0x456>

0801ad70 <_printf_common>:
 801ad70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ad74:	4616      	mov	r6, r2
 801ad76:	4699      	mov	r9, r3
 801ad78:	688a      	ldr	r2, [r1, #8]
 801ad7a:	690b      	ldr	r3, [r1, #16]
 801ad7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ad80:	4293      	cmp	r3, r2
 801ad82:	bfb8      	it	lt
 801ad84:	4613      	movlt	r3, r2
 801ad86:	6033      	str	r3, [r6, #0]
 801ad88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ad8c:	4607      	mov	r7, r0
 801ad8e:	460c      	mov	r4, r1
 801ad90:	b10a      	cbz	r2, 801ad96 <_printf_common+0x26>
 801ad92:	3301      	adds	r3, #1
 801ad94:	6033      	str	r3, [r6, #0]
 801ad96:	6823      	ldr	r3, [r4, #0]
 801ad98:	0699      	lsls	r1, r3, #26
 801ad9a:	bf42      	ittt	mi
 801ad9c:	6833      	ldrmi	r3, [r6, #0]
 801ad9e:	3302      	addmi	r3, #2
 801ada0:	6033      	strmi	r3, [r6, #0]
 801ada2:	6825      	ldr	r5, [r4, #0]
 801ada4:	f015 0506 	ands.w	r5, r5, #6
 801ada8:	d106      	bne.n	801adb8 <_printf_common+0x48>
 801adaa:	f104 0a19 	add.w	sl, r4, #25
 801adae:	68e3      	ldr	r3, [r4, #12]
 801adb0:	6832      	ldr	r2, [r6, #0]
 801adb2:	1a9b      	subs	r3, r3, r2
 801adb4:	42ab      	cmp	r3, r5
 801adb6:	dc26      	bgt.n	801ae06 <_printf_common+0x96>
 801adb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801adbc:	1e13      	subs	r3, r2, #0
 801adbe:	6822      	ldr	r2, [r4, #0]
 801adc0:	bf18      	it	ne
 801adc2:	2301      	movne	r3, #1
 801adc4:	0692      	lsls	r2, r2, #26
 801adc6:	d42b      	bmi.n	801ae20 <_printf_common+0xb0>
 801adc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801adcc:	4649      	mov	r1, r9
 801adce:	4638      	mov	r0, r7
 801add0:	47c0      	blx	r8
 801add2:	3001      	adds	r0, #1
 801add4:	d01e      	beq.n	801ae14 <_printf_common+0xa4>
 801add6:	6823      	ldr	r3, [r4, #0]
 801add8:	68e5      	ldr	r5, [r4, #12]
 801adda:	6832      	ldr	r2, [r6, #0]
 801addc:	f003 0306 	and.w	r3, r3, #6
 801ade0:	2b04      	cmp	r3, #4
 801ade2:	bf08      	it	eq
 801ade4:	1aad      	subeq	r5, r5, r2
 801ade6:	68a3      	ldr	r3, [r4, #8]
 801ade8:	6922      	ldr	r2, [r4, #16]
 801adea:	bf0c      	ite	eq
 801adec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801adf0:	2500      	movne	r5, #0
 801adf2:	4293      	cmp	r3, r2
 801adf4:	bfc4      	itt	gt
 801adf6:	1a9b      	subgt	r3, r3, r2
 801adf8:	18ed      	addgt	r5, r5, r3
 801adfa:	2600      	movs	r6, #0
 801adfc:	341a      	adds	r4, #26
 801adfe:	42b5      	cmp	r5, r6
 801ae00:	d11a      	bne.n	801ae38 <_printf_common+0xc8>
 801ae02:	2000      	movs	r0, #0
 801ae04:	e008      	b.n	801ae18 <_printf_common+0xa8>
 801ae06:	2301      	movs	r3, #1
 801ae08:	4652      	mov	r2, sl
 801ae0a:	4649      	mov	r1, r9
 801ae0c:	4638      	mov	r0, r7
 801ae0e:	47c0      	blx	r8
 801ae10:	3001      	adds	r0, #1
 801ae12:	d103      	bne.n	801ae1c <_printf_common+0xac>
 801ae14:	f04f 30ff 	mov.w	r0, #4294967295
 801ae18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae1c:	3501      	adds	r5, #1
 801ae1e:	e7c6      	b.n	801adae <_printf_common+0x3e>
 801ae20:	18e1      	adds	r1, r4, r3
 801ae22:	1c5a      	adds	r2, r3, #1
 801ae24:	2030      	movs	r0, #48	; 0x30
 801ae26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ae2a:	4422      	add	r2, r4
 801ae2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ae30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ae34:	3302      	adds	r3, #2
 801ae36:	e7c7      	b.n	801adc8 <_printf_common+0x58>
 801ae38:	2301      	movs	r3, #1
 801ae3a:	4622      	mov	r2, r4
 801ae3c:	4649      	mov	r1, r9
 801ae3e:	4638      	mov	r0, r7
 801ae40:	47c0      	blx	r8
 801ae42:	3001      	adds	r0, #1
 801ae44:	d0e6      	beq.n	801ae14 <_printf_common+0xa4>
 801ae46:	3601      	adds	r6, #1
 801ae48:	e7d9      	b.n	801adfe <_printf_common+0x8e>
	...

0801ae4c <_printf_i>:
 801ae4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ae50:	460c      	mov	r4, r1
 801ae52:	4691      	mov	r9, r2
 801ae54:	7e27      	ldrb	r7, [r4, #24]
 801ae56:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ae58:	2f78      	cmp	r7, #120	; 0x78
 801ae5a:	4680      	mov	r8, r0
 801ae5c:	469a      	mov	sl, r3
 801ae5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ae62:	d807      	bhi.n	801ae74 <_printf_i+0x28>
 801ae64:	2f62      	cmp	r7, #98	; 0x62
 801ae66:	d80a      	bhi.n	801ae7e <_printf_i+0x32>
 801ae68:	2f00      	cmp	r7, #0
 801ae6a:	f000 80d8 	beq.w	801b01e <_printf_i+0x1d2>
 801ae6e:	2f58      	cmp	r7, #88	; 0x58
 801ae70:	f000 80a3 	beq.w	801afba <_printf_i+0x16e>
 801ae74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801ae78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ae7c:	e03a      	b.n	801aef4 <_printf_i+0xa8>
 801ae7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ae82:	2b15      	cmp	r3, #21
 801ae84:	d8f6      	bhi.n	801ae74 <_printf_i+0x28>
 801ae86:	a001      	add	r0, pc, #4	; (adr r0, 801ae8c <_printf_i+0x40>)
 801ae88:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801ae8c:	0801aee5 	.word	0x0801aee5
 801ae90:	0801aef9 	.word	0x0801aef9
 801ae94:	0801ae75 	.word	0x0801ae75
 801ae98:	0801ae75 	.word	0x0801ae75
 801ae9c:	0801ae75 	.word	0x0801ae75
 801aea0:	0801ae75 	.word	0x0801ae75
 801aea4:	0801aef9 	.word	0x0801aef9
 801aea8:	0801ae75 	.word	0x0801ae75
 801aeac:	0801ae75 	.word	0x0801ae75
 801aeb0:	0801ae75 	.word	0x0801ae75
 801aeb4:	0801ae75 	.word	0x0801ae75
 801aeb8:	0801b005 	.word	0x0801b005
 801aebc:	0801af29 	.word	0x0801af29
 801aec0:	0801afe7 	.word	0x0801afe7
 801aec4:	0801ae75 	.word	0x0801ae75
 801aec8:	0801ae75 	.word	0x0801ae75
 801aecc:	0801b027 	.word	0x0801b027
 801aed0:	0801ae75 	.word	0x0801ae75
 801aed4:	0801af29 	.word	0x0801af29
 801aed8:	0801ae75 	.word	0x0801ae75
 801aedc:	0801ae75 	.word	0x0801ae75
 801aee0:	0801afef 	.word	0x0801afef
 801aee4:	680b      	ldr	r3, [r1, #0]
 801aee6:	1d1a      	adds	r2, r3, #4
 801aee8:	681b      	ldr	r3, [r3, #0]
 801aeea:	600a      	str	r2, [r1, #0]
 801aeec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801aef0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801aef4:	2301      	movs	r3, #1
 801aef6:	e0a3      	b.n	801b040 <_printf_i+0x1f4>
 801aef8:	6825      	ldr	r5, [r4, #0]
 801aefa:	6808      	ldr	r0, [r1, #0]
 801aefc:	062e      	lsls	r6, r5, #24
 801aefe:	f100 0304 	add.w	r3, r0, #4
 801af02:	d50a      	bpl.n	801af1a <_printf_i+0xce>
 801af04:	6805      	ldr	r5, [r0, #0]
 801af06:	600b      	str	r3, [r1, #0]
 801af08:	2d00      	cmp	r5, #0
 801af0a:	da03      	bge.n	801af14 <_printf_i+0xc8>
 801af0c:	232d      	movs	r3, #45	; 0x2d
 801af0e:	426d      	negs	r5, r5
 801af10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801af14:	485e      	ldr	r0, [pc, #376]	; (801b090 <_printf_i+0x244>)
 801af16:	230a      	movs	r3, #10
 801af18:	e019      	b.n	801af4e <_printf_i+0x102>
 801af1a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801af1e:	6805      	ldr	r5, [r0, #0]
 801af20:	600b      	str	r3, [r1, #0]
 801af22:	bf18      	it	ne
 801af24:	b22d      	sxthne	r5, r5
 801af26:	e7ef      	b.n	801af08 <_printf_i+0xbc>
 801af28:	680b      	ldr	r3, [r1, #0]
 801af2a:	6825      	ldr	r5, [r4, #0]
 801af2c:	1d18      	adds	r0, r3, #4
 801af2e:	6008      	str	r0, [r1, #0]
 801af30:	0628      	lsls	r0, r5, #24
 801af32:	d501      	bpl.n	801af38 <_printf_i+0xec>
 801af34:	681d      	ldr	r5, [r3, #0]
 801af36:	e002      	b.n	801af3e <_printf_i+0xf2>
 801af38:	0669      	lsls	r1, r5, #25
 801af3a:	d5fb      	bpl.n	801af34 <_printf_i+0xe8>
 801af3c:	881d      	ldrh	r5, [r3, #0]
 801af3e:	4854      	ldr	r0, [pc, #336]	; (801b090 <_printf_i+0x244>)
 801af40:	2f6f      	cmp	r7, #111	; 0x6f
 801af42:	bf0c      	ite	eq
 801af44:	2308      	moveq	r3, #8
 801af46:	230a      	movne	r3, #10
 801af48:	2100      	movs	r1, #0
 801af4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801af4e:	6866      	ldr	r6, [r4, #4]
 801af50:	60a6      	str	r6, [r4, #8]
 801af52:	2e00      	cmp	r6, #0
 801af54:	bfa2      	ittt	ge
 801af56:	6821      	ldrge	r1, [r4, #0]
 801af58:	f021 0104 	bicge.w	r1, r1, #4
 801af5c:	6021      	strge	r1, [r4, #0]
 801af5e:	b90d      	cbnz	r5, 801af64 <_printf_i+0x118>
 801af60:	2e00      	cmp	r6, #0
 801af62:	d04d      	beq.n	801b000 <_printf_i+0x1b4>
 801af64:	4616      	mov	r6, r2
 801af66:	fbb5 f1f3 	udiv	r1, r5, r3
 801af6a:	fb03 5711 	mls	r7, r3, r1, r5
 801af6e:	5dc7      	ldrb	r7, [r0, r7]
 801af70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801af74:	462f      	mov	r7, r5
 801af76:	42bb      	cmp	r3, r7
 801af78:	460d      	mov	r5, r1
 801af7a:	d9f4      	bls.n	801af66 <_printf_i+0x11a>
 801af7c:	2b08      	cmp	r3, #8
 801af7e:	d10b      	bne.n	801af98 <_printf_i+0x14c>
 801af80:	6823      	ldr	r3, [r4, #0]
 801af82:	07df      	lsls	r7, r3, #31
 801af84:	d508      	bpl.n	801af98 <_printf_i+0x14c>
 801af86:	6923      	ldr	r3, [r4, #16]
 801af88:	6861      	ldr	r1, [r4, #4]
 801af8a:	4299      	cmp	r1, r3
 801af8c:	bfde      	ittt	le
 801af8e:	2330      	movle	r3, #48	; 0x30
 801af90:	f806 3c01 	strble.w	r3, [r6, #-1]
 801af94:	f106 36ff 	addle.w	r6, r6, #4294967295
 801af98:	1b92      	subs	r2, r2, r6
 801af9a:	6122      	str	r2, [r4, #16]
 801af9c:	f8cd a000 	str.w	sl, [sp]
 801afa0:	464b      	mov	r3, r9
 801afa2:	aa03      	add	r2, sp, #12
 801afa4:	4621      	mov	r1, r4
 801afa6:	4640      	mov	r0, r8
 801afa8:	f7ff fee2 	bl	801ad70 <_printf_common>
 801afac:	3001      	adds	r0, #1
 801afae:	d14c      	bne.n	801b04a <_printf_i+0x1fe>
 801afb0:	f04f 30ff 	mov.w	r0, #4294967295
 801afb4:	b004      	add	sp, #16
 801afb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801afba:	4835      	ldr	r0, [pc, #212]	; (801b090 <_printf_i+0x244>)
 801afbc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801afc0:	6823      	ldr	r3, [r4, #0]
 801afc2:	680e      	ldr	r6, [r1, #0]
 801afc4:	061f      	lsls	r7, r3, #24
 801afc6:	f856 5b04 	ldr.w	r5, [r6], #4
 801afca:	600e      	str	r6, [r1, #0]
 801afcc:	d514      	bpl.n	801aff8 <_printf_i+0x1ac>
 801afce:	07d9      	lsls	r1, r3, #31
 801afd0:	bf44      	itt	mi
 801afd2:	f043 0320 	orrmi.w	r3, r3, #32
 801afd6:	6023      	strmi	r3, [r4, #0]
 801afd8:	b91d      	cbnz	r5, 801afe2 <_printf_i+0x196>
 801afda:	6823      	ldr	r3, [r4, #0]
 801afdc:	f023 0320 	bic.w	r3, r3, #32
 801afe0:	6023      	str	r3, [r4, #0]
 801afe2:	2310      	movs	r3, #16
 801afe4:	e7b0      	b.n	801af48 <_printf_i+0xfc>
 801afe6:	6823      	ldr	r3, [r4, #0]
 801afe8:	f043 0320 	orr.w	r3, r3, #32
 801afec:	6023      	str	r3, [r4, #0]
 801afee:	2378      	movs	r3, #120	; 0x78
 801aff0:	4828      	ldr	r0, [pc, #160]	; (801b094 <_printf_i+0x248>)
 801aff2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801aff6:	e7e3      	b.n	801afc0 <_printf_i+0x174>
 801aff8:	065e      	lsls	r6, r3, #25
 801affa:	bf48      	it	mi
 801affc:	b2ad      	uxthmi	r5, r5
 801affe:	e7e6      	b.n	801afce <_printf_i+0x182>
 801b000:	4616      	mov	r6, r2
 801b002:	e7bb      	b.n	801af7c <_printf_i+0x130>
 801b004:	680b      	ldr	r3, [r1, #0]
 801b006:	6826      	ldr	r6, [r4, #0]
 801b008:	6960      	ldr	r0, [r4, #20]
 801b00a:	1d1d      	adds	r5, r3, #4
 801b00c:	600d      	str	r5, [r1, #0]
 801b00e:	0635      	lsls	r5, r6, #24
 801b010:	681b      	ldr	r3, [r3, #0]
 801b012:	d501      	bpl.n	801b018 <_printf_i+0x1cc>
 801b014:	6018      	str	r0, [r3, #0]
 801b016:	e002      	b.n	801b01e <_printf_i+0x1d2>
 801b018:	0671      	lsls	r1, r6, #25
 801b01a:	d5fb      	bpl.n	801b014 <_printf_i+0x1c8>
 801b01c:	8018      	strh	r0, [r3, #0]
 801b01e:	2300      	movs	r3, #0
 801b020:	6123      	str	r3, [r4, #16]
 801b022:	4616      	mov	r6, r2
 801b024:	e7ba      	b.n	801af9c <_printf_i+0x150>
 801b026:	680b      	ldr	r3, [r1, #0]
 801b028:	1d1a      	adds	r2, r3, #4
 801b02a:	600a      	str	r2, [r1, #0]
 801b02c:	681e      	ldr	r6, [r3, #0]
 801b02e:	6862      	ldr	r2, [r4, #4]
 801b030:	2100      	movs	r1, #0
 801b032:	4630      	mov	r0, r6
 801b034:	f7e5 f8f4 	bl	8000220 <memchr>
 801b038:	b108      	cbz	r0, 801b03e <_printf_i+0x1f2>
 801b03a:	1b80      	subs	r0, r0, r6
 801b03c:	6060      	str	r0, [r4, #4]
 801b03e:	6863      	ldr	r3, [r4, #4]
 801b040:	6123      	str	r3, [r4, #16]
 801b042:	2300      	movs	r3, #0
 801b044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b048:	e7a8      	b.n	801af9c <_printf_i+0x150>
 801b04a:	6923      	ldr	r3, [r4, #16]
 801b04c:	4632      	mov	r2, r6
 801b04e:	4649      	mov	r1, r9
 801b050:	4640      	mov	r0, r8
 801b052:	47d0      	blx	sl
 801b054:	3001      	adds	r0, #1
 801b056:	d0ab      	beq.n	801afb0 <_printf_i+0x164>
 801b058:	6823      	ldr	r3, [r4, #0]
 801b05a:	079b      	lsls	r3, r3, #30
 801b05c:	d413      	bmi.n	801b086 <_printf_i+0x23a>
 801b05e:	68e0      	ldr	r0, [r4, #12]
 801b060:	9b03      	ldr	r3, [sp, #12]
 801b062:	4298      	cmp	r0, r3
 801b064:	bfb8      	it	lt
 801b066:	4618      	movlt	r0, r3
 801b068:	e7a4      	b.n	801afb4 <_printf_i+0x168>
 801b06a:	2301      	movs	r3, #1
 801b06c:	4632      	mov	r2, r6
 801b06e:	4649      	mov	r1, r9
 801b070:	4640      	mov	r0, r8
 801b072:	47d0      	blx	sl
 801b074:	3001      	adds	r0, #1
 801b076:	d09b      	beq.n	801afb0 <_printf_i+0x164>
 801b078:	3501      	adds	r5, #1
 801b07a:	68e3      	ldr	r3, [r4, #12]
 801b07c:	9903      	ldr	r1, [sp, #12]
 801b07e:	1a5b      	subs	r3, r3, r1
 801b080:	42ab      	cmp	r3, r5
 801b082:	dcf2      	bgt.n	801b06a <_printf_i+0x21e>
 801b084:	e7eb      	b.n	801b05e <_printf_i+0x212>
 801b086:	2500      	movs	r5, #0
 801b088:	f104 0619 	add.w	r6, r4, #25
 801b08c:	e7f5      	b.n	801b07a <_printf_i+0x22e>
 801b08e:	bf00      	nop
 801b090:	0802228c 	.word	0x0802228c
 801b094:	0802229d 	.word	0x0802229d

0801b098 <_scanf_float>:
 801b098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b09c:	b087      	sub	sp, #28
 801b09e:	4617      	mov	r7, r2
 801b0a0:	9303      	str	r3, [sp, #12]
 801b0a2:	688b      	ldr	r3, [r1, #8]
 801b0a4:	1e5a      	subs	r2, r3, #1
 801b0a6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801b0aa:	bf83      	ittte	hi
 801b0ac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801b0b0:	195b      	addhi	r3, r3, r5
 801b0b2:	9302      	strhi	r3, [sp, #8]
 801b0b4:	2300      	movls	r3, #0
 801b0b6:	bf86      	itte	hi
 801b0b8:	f240 135d 	movwhi	r3, #349	; 0x15d
 801b0bc:	608b      	strhi	r3, [r1, #8]
 801b0be:	9302      	strls	r3, [sp, #8]
 801b0c0:	680b      	ldr	r3, [r1, #0]
 801b0c2:	468b      	mov	fp, r1
 801b0c4:	2500      	movs	r5, #0
 801b0c6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801b0ca:	f84b 3b1c 	str.w	r3, [fp], #28
 801b0ce:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801b0d2:	4680      	mov	r8, r0
 801b0d4:	460c      	mov	r4, r1
 801b0d6:	465e      	mov	r6, fp
 801b0d8:	46aa      	mov	sl, r5
 801b0da:	46a9      	mov	r9, r5
 801b0dc:	9501      	str	r5, [sp, #4]
 801b0de:	68a2      	ldr	r2, [r4, #8]
 801b0e0:	b152      	cbz	r2, 801b0f8 <_scanf_float+0x60>
 801b0e2:	683b      	ldr	r3, [r7, #0]
 801b0e4:	781b      	ldrb	r3, [r3, #0]
 801b0e6:	2b4e      	cmp	r3, #78	; 0x4e
 801b0e8:	d864      	bhi.n	801b1b4 <_scanf_float+0x11c>
 801b0ea:	2b40      	cmp	r3, #64	; 0x40
 801b0ec:	d83c      	bhi.n	801b168 <_scanf_float+0xd0>
 801b0ee:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801b0f2:	b2c8      	uxtb	r0, r1
 801b0f4:	280e      	cmp	r0, #14
 801b0f6:	d93a      	bls.n	801b16e <_scanf_float+0xd6>
 801b0f8:	f1b9 0f00 	cmp.w	r9, #0
 801b0fc:	d003      	beq.n	801b106 <_scanf_float+0x6e>
 801b0fe:	6823      	ldr	r3, [r4, #0]
 801b100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b104:	6023      	str	r3, [r4, #0]
 801b106:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b10a:	f1ba 0f01 	cmp.w	sl, #1
 801b10e:	f200 8113 	bhi.w	801b338 <_scanf_float+0x2a0>
 801b112:	455e      	cmp	r6, fp
 801b114:	f200 8105 	bhi.w	801b322 <_scanf_float+0x28a>
 801b118:	2501      	movs	r5, #1
 801b11a:	4628      	mov	r0, r5
 801b11c:	b007      	add	sp, #28
 801b11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b122:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801b126:	2a0d      	cmp	r2, #13
 801b128:	d8e6      	bhi.n	801b0f8 <_scanf_float+0x60>
 801b12a:	a101      	add	r1, pc, #4	; (adr r1, 801b130 <_scanf_float+0x98>)
 801b12c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801b130:	0801b26f 	.word	0x0801b26f
 801b134:	0801b0f9 	.word	0x0801b0f9
 801b138:	0801b0f9 	.word	0x0801b0f9
 801b13c:	0801b0f9 	.word	0x0801b0f9
 801b140:	0801b2cf 	.word	0x0801b2cf
 801b144:	0801b2a7 	.word	0x0801b2a7
 801b148:	0801b0f9 	.word	0x0801b0f9
 801b14c:	0801b0f9 	.word	0x0801b0f9
 801b150:	0801b27d 	.word	0x0801b27d
 801b154:	0801b0f9 	.word	0x0801b0f9
 801b158:	0801b0f9 	.word	0x0801b0f9
 801b15c:	0801b0f9 	.word	0x0801b0f9
 801b160:	0801b0f9 	.word	0x0801b0f9
 801b164:	0801b235 	.word	0x0801b235
 801b168:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801b16c:	e7db      	b.n	801b126 <_scanf_float+0x8e>
 801b16e:	290e      	cmp	r1, #14
 801b170:	d8c2      	bhi.n	801b0f8 <_scanf_float+0x60>
 801b172:	a001      	add	r0, pc, #4	; (adr r0, 801b178 <_scanf_float+0xe0>)
 801b174:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801b178:	0801b227 	.word	0x0801b227
 801b17c:	0801b0f9 	.word	0x0801b0f9
 801b180:	0801b227 	.word	0x0801b227
 801b184:	0801b2bb 	.word	0x0801b2bb
 801b188:	0801b0f9 	.word	0x0801b0f9
 801b18c:	0801b1d5 	.word	0x0801b1d5
 801b190:	0801b211 	.word	0x0801b211
 801b194:	0801b211 	.word	0x0801b211
 801b198:	0801b211 	.word	0x0801b211
 801b19c:	0801b211 	.word	0x0801b211
 801b1a0:	0801b211 	.word	0x0801b211
 801b1a4:	0801b211 	.word	0x0801b211
 801b1a8:	0801b211 	.word	0x0801b211
 801b1ac:	0801b211 	.word	0x0801b211
 801b1b0:	0801b211 	.word	0x0801b211
 801b1b4:	2b6e      	cmp	r3, #110	; 0x6e
 801b1b6:	d809      	bhi.n	801b1cc <_scanf_float+0x134>
 801b1b8:	2b60      	cmp	r3, #96	; 0x60
 801b1ba:	d8b2      	bhi.n	801b122 <_scanf_float+0x8a>
 801b1bc:	2b54      	cmp	r3, #84	; 0x54
 801b1be:	d077      	beq.n	801b2b0 <_scanf_float+0x218>
 801b1c0:	2b59      	cmp	r3, #89	; 0x59
 801b1c2:	d199      	bne.n	801b0f8 <_scanf_float+0x60>
 801b1c4:	2d07      	cmp	r5, #7
 801b1c6:	d197      	bne.n	801b0f8 <_scanf_float+0x60>
 801b1c8:	2508      	movs	r5, #8
 801b1ca:	e029      	b.n	801b220 <_scanf_float+0x188>
 801b1cc:	2b74      	cmp	r3, #116	; 0x74
 801b1ce:	d06f      	beq.n	801b2b0 <_scanf_float+0x218>
 801b1d0:	2b79      	cmp	r3, #121	; 0x79
 801b1d2:	e7f6      	b.n	801b1c2 <_scanf_float+0x12a>
 801b1d4:	6821      	ldr	r1, [r4, #0]
 801b1d6:	05c8      	lsls	r0, r1, #23
 801b1d8:	d51a      	bpl.n	801b210 <_scanf_float+0x178>
 801b1da:	9b02      	ldr	r3, [sp, #8]
 801b1dc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801b1e0:	6021      	str	r1, [r4, #0]
 801b1e2:	f109 0901 	add.w	r9, r9, #1
 801b1e6:	b11b      	cbz	r3, 801b1f0 <_scanf_float+0x158>
 801b1e8:	3b01      	subs	r3, #1
 801b1ea:	3201      	adds	r2, #1
 801b1ec:	9302      	str	r3, [sp, #8]
 801b1ee:	60a2      	str	r2, [r4, #8]
 801b1f0:	68a3      	ldr	r3, [r4, #8]
 801b1f2:	3b01      	subs	r3, #1
 801b1f4:	60a3      	str	r3, [r4, #8]
 801b1f6:	6923      	ldr	r3, [r4, #16]
 801b1f8:	3301      	adds	r3, #1
 801b1fa:	6123      	str	r3, [r4, #16]
 801b1fc:	687b      	ldr	r3, [r7, #4]
 801b1fe:	3b01      	subs	r3, #1
 801b200:	2b00      	cmp	r3, #0
 801b202:	607b      	str	r3, [r7, #4]
 801b204:	f340 8084 	ble.w	801b310 <_scanf_float+0x278>
 801b208:	683b      	ldr	r3, [r7, #0]
 801b20a:	3301      	adds	r3, #1
 801b20c:	603b      	str	r3, [r7, #0]
 801b20e:	e766      	b.n	801b0de <_scanf_float+0x46>
 801b210:	eb1a 0f05 	cmn.w	sl, r5
 801b214:	f47f af70 	bne.w	801b0f8 <_scanf_float+0x60>
 801b218:	6822      	ldr	r2, [r4, #0]
 801b21a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801b21e:	6022      	str	r2, [r4, #0]
 801b220:	f806 3b01 	strb.w	r3, [r6], #1
 801b224:	e7e4      	b.n	801b1f0 <_scanf_float+0x158>
 801b226:	6822      	ldr	r2, [r4, #0]
 801b228:	0610      	lsls	r0, r2, #24
 801b22a:	f57f af65 	bpl.w	801b0f8 <_scanf_float+0x60>
 801b22e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801b232:	e7f4      	b.n	801b21e <_scanf_float+0x186>
 801b234:	f1ba 0f00 	cmp.w	sl, #0
 801b238:	d10e      	bne.n	801b258 <_scanf_float+0x1c0>
 801b23a:	f1b9 0f00 	cmp.w	r9, #0
 801b23e:	d10e      	bne.n	801b25e <_scanf_float+0x1c6>
 801b240:	6822      	ldr	r2, [r4, #0]
 801b242:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b246:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b24a:	d108      	bne.n	801b25e <_scanf_float+0x1c6>
 801b24c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b250:	6022      	str	r2, [r4, #0]
 801b252:	f04f 0a01 	mov.w	sl, #1
 801b256:	e7e3      	b.n	801b220 <_scanf_float+0x188>
 801b258:	f1ba 0f02 	cmp.w	sl, #2
 801b25c:	d055      	beq.n	801b30a <_scanf_float+0x272>
 801b25e:	2d01      	cmp	r5, #1
 801b260:	d002      	beq.n	801b268 <_scanf_float+0x1d0>
 801b262:	2d04      	cmp	r5, #4
 801b264:	f47f af48 	bne.w	801b0f8 <_scanf_float+0x60>
 801b268:	3501      	adds	r5, #1
 801b26a:	b2ed      	uxtb	r5, r5
 801b26c:	e7d8      	b.n	801b220 <_scanf_float+0x188>
 801b26e:	f1ba 0f01 	cmp.w	sl, #1
 801b272:	f47f af41 	bne.w	801b0f8 <_scanf_float+0x60>
 801b276:	f04f 0a02 	mov.w	sl, #2
 801b27a:	e7d1      	b.n	801b220 <_scanf_float+0x188>
 801b27c:	b97d      	cbnz	r5, 801b29e <_scanf_float+0x206>
 801b27e:	f1b9 0f00 	cmp.w	r9, #0
 801b282:	f47f af3c 	bne.w	801b0fe <_scanf_float+0x66>
 801b286:	6822      	ldr	r2, [r4, #0]
 801b288:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b28c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b290:	f47f af39 	bne.w	801b106 <_scanf_float+0x6e>
 801b294:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b298:	6022      	str	r2, [r4, #0]
 801b29a:	2501      	movs	r5, #1
 801b29c:	e7c0      	b.n	801b220 <_scanf_float+0x188>
 801b29e:	2d03      	cmp	r5, #3
 801b2a0:	d0e2      	beq.n	801b268 <_scanf_float+0x1d0>
 801b2a2:	2d05      	cmp	r5, #5
 801b2a4:	e7de      	b.n	801b264 <_scanf_float+0x1cc>
 801b2a6:	2d02      	cmp	r5, #2
 801b2a8:	f47f af26 	bne.w	801b0f8 <_scanf_float+0x60>
 801b2ac:	2503      	movs	r5, #3
 801b2ae:	e7b7      	b.n	801b220 <_scanf_float+0x188>
 801b2b0:	2d06      	cmp	r5, #6
 801b2b2:	f47f af21 	bne.w	801b0f8 <_scanf_float+0x60>
 801b2b6:	2507      	movs	r5, #7
 801b2b8:	e7b2      	b.n	801b220 <_scanf_float+0x188>
 801b2ba:	6822      	ldr	r2, [r4, #0]
 801b2bc:	0591      	lsls	r1, r2, #22
 801b2be:	f57f af1b 	bpl.w	801b0f8 <_scanf_float+0x60>
 801b2c2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801b2c6:	6022      	str	r2, [r4, #0]
 801b2c8:	f8cd 9004 	str.w	r9, [sp, #4]
 801b2cc:	e7a8      	b.n	801b220 <_scanf_float+0x188>
 801b2ce:	6822      	ldr	r2, [r4, #0]
 801b2d0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801b2d4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801b2d8:	d006      	beq.n	801b2e8 <_scanf_float+0x250>
 801b2da:	0550      	lsls	r0, r2, #21
 801b2dc:	f57f af0c 	bpl.w	801b0f8 <_scanf_float+0x60>
 801b2e0:	f1b9 0f00 	cmp.w	r9, #0
 801b2e4:	f43f af0f 	beq.w	801b106 <_scanf_float+0x6e>
 801b2e8:	0591      	lsls	r1, r2, #22
 801b2ea:	bf58      	it	pl
 801b2ec:	9901      	ldrpl	r1, [sp, #4]
 801b2ee:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b2f2:	bf58      	it	pl
 801b2f4:	eba9 0101 	subpl.w	r1, r9, r1
 801b2f8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801b2fc:	bf58      	it	pl
 801b2fe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801b302:	6022      	str	r2, [r4, #0]
 801b304:	f04f 0900 	mov.w	r9, #0
 801b308:	e78a      	b.n	801b220 <_scanf_float+0x188>
 801b30a:	f04f 0a03 	mov.w	sl, #3
 801b30e:	e787      	b.n	801b220 <_scanf_float+0x188>
 801b310:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801b314:	4639      	mov	r1, r7
 801b316:	4640      	mov	r0, r8
 801b318:	4798      	blx	r3
 801b31a:	2800      	cmp	r0, #0
 801b31c:	f43f aedf 	beq.w	801b0de <_scanf_float+0x46>
 801b320:	e6ea      	b.n	801b0f8 <_scanf_float+0x60>
 801b322:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b326:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b32a:	463a      	mov	r2, r7
 801b32c:	4640      	mov	r0, r8
 801b32e:	4798      	blx	r3
 801b330:	6923      	ldr	r3, [r4, #16]
 801b332:	3b01      	subs	r3, #1
 801b334:	6123      	str	r3, [r4, #16]
 801b336:	e6ec      	b.n	801b112 <_scanf_float+0x7a>
 801b338:	1e6b      	subs	r3, r5, #1
 801b33a:	2b06      	cmp	r3, #6
 801b33c:	d825      	bhi.n	801b38a <_scanf_float+0x2f2>
 801b33e:	2d02      	cmp	r5, #2
 801b340:	d836      	bhi.n	801b3b0 <_scanf_float+0x318>
 801b342:	455e      	cmp	r6, fp
 801b344:	f67f aee8 	bls.w	801b118 <_scanf_float+0x80>
 801b348:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b34c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b350:	463a      	mov	r2, r7
 801b352:	4640      	mov	r0, r8
 801b354:	4798      	blx	r3
 801b356:	6923      	ldr	r3, [r4, #16]
 801b358:	3b01      	subs	r3, #1
 801b35a:	6123      	str	r3, [r4, #16]
 801b35c:	e7f1      	b.n	801b342 <_scanf_float+0x2aa>
 801b35e:	9802      	ldr	r0, [sp, #8]
 801b360:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b364:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801b368:	9002      	str	r0, [sp, #8]
 801b36a:	463a      	mov	r2, r7
 801b36c:	4640      	mov	r0, r8
 801b36e:	4798      	blx	r3
 801b370:	6923      	ldr	r3, [r4, #16]
 801b372:	3b01      	subs	r3, #1
 801b374:	6123      	str	r3, [r4, #16]
 801b376:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b37a:	fa5f fa8a 	uxtb.w	sl, sl
 801b37e:	f1ba 0f02 	cmp.w	sl, #2
 801b382:	d1ec      	bne.n	801b35e <_scanf_float+0x2c6>
 801b384:	3d03      	subs	r5, #3
 801b386:	b2ed      	uxtb	r5, r5
 801b388:	1b76      	subs	r6, r6, r5
 801b38a:	6823      	ldr	r3, [r4, #0]
 801b38c:	05da      	lsls	r2, r3, #23
 801b38e:	d52f      	bpl.n	801b3f0 <_scanf_float+0x358>
 801b390:	055b      	lsls	r3, r3, #21
 801b392:	d510      	bpl.n	801b3b6 <_scanf_float+0x31e>
 801b394:	455e      	cmp	r6, fp
 801b396:	f67f aebf 	bls.w	801b118 <_scanf_float+0x80>
 801b39a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b39e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b3a2:	463a      	mov	r2, r7
 801b3a4:	4640      	mov	r0, r8
 801b3a6:	4798      	blx	r3
 801b3a8:	6923      	ldr	r3, [r4, #16]
 801b3aa:	3b01      	subs	r3, #1
 801b3ac:	6123      	str	r3, [r4, #16]
 801b3ae:	e7f1      	b.n	801b394 <_scanf_float+0x2fc>
 801b3b0:	46aa      	mov	sl, r5
 801b3b2:	9602      	str	r6, [sp, #8]
 801b3b4:	e7df      	b.n	801b376 <_scanf_float+0x2de>
 801b3b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801b3ba:	6923      	ldr	r3, [r4, #16]
 801b3bc:	2965      	cmp	r1, #101	; 0x65
 801b3be:	f103 33ff 	add.w	r3, r3, #4294967295
 801b3c2:	f106 35ff 	add.w	r5, r6, #4294967295
 801b3c6:	6123      	str	r3, [r4, #16]
 801b3c8:	d00c      	beq.n	801b3e4 <_scanf_float+0x34c>
 801b3ca:	2945      	cmp	r1, #69	; 0x45
 801b3cc:	d00a      	beq.n	801b3e4 <_scanf_float+0x34c>
 801b3ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b3d2:	463a      	mov	r2, r7
 801b3d4:	4640      	mov	r0, r8
 801b3d6:	4798      	blx	r3
 801b3d8:	6923      	ldr	r3, [r4, #16]
 801b3da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801b3de:	3b01      	subs	r3, #1
 801b3e0:	1eb5      	subs	r5, r6, #2
 801b3e2:	6123      	str	r3, [r4, #16]
 801b3e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b3e8:	463a      	mov	r2, r7
 801b3ea:	4640      	mov	r0, r8
 801b3ec:	4798      	blx	r3
 801b3ee:	462e      	mov	r6, r5
 801b3f0:	6825      	ldr	r5, [r4, #0]
 801b3f2:	f015 0510 	ands.w	r5, r5, #16
 801b3f6:	d158      	bne.n	801b4aa <_scanf_float+0x412>
 801b3f8:	7035      	strb	r5, [r6, #0]
 801b3fa:	6823      	ldr	r3, [r4, #0]
 801b3fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801b400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b404:	d11c      	bne.n	801b440 <_scanf_float+0x3a8>
 801b406:	9b01      	ldr	r3, [sp, #4]
 801b408:	454b      	cmp	r3, r9
 801b40a:	eba3 0209 	sub.w	r2, r3, r9
 801b40e:	d124      	bne.n	801b45a <_scanf_float+0x3c2>
 801b410:	2200      	movs	r2, #0
 801b412:	4659      	mov	r1, fp
 801b414:	4640      	mov	r0, r8
 801b416:	f001 f881 	bl	801c51c <_strtod_r>
 801b41a:	9b03      	ldr	r3, [sp, #12]
 801b41c:	6821      	ldr	r1, [r4, #0]
 801b41e:	681b      	ldr	r3, [r3, #0]
 801b420:	f011 0f02 	tst.w	r1, #2
 801b424:	ec57 6b10 	vmov	r6, r7, d0
 801b428:	f103 0204 	add.w	r2, r3, #4
 801b42c:	d020      	beq.n	801b470 <_scanf_float+0x3d8>
 801b42e:	9903      	ldr	r1, [sp, #12]
 801b430:	600a      	str	r2, [r1, #0]
 801b432:	681b      	ldr	r3, [r3, #0]
 801b434:	e9c3 6700 	strd	r6, r7, [r3]
 801b438:	68e3      	ldr	r3, [r4, #12]
 801b43a:	3301      	adds	r3, #1
 801b43c:	60e3      	str	r3, [r4, #12]
 801b43e:	e66c      	b.n	801b11a <_scanf_float+0x82>
 801b440:	9b04      	ldr	r3, [sp, #16]
 801b442:	2b00      	cmp	r3, #0
 801b444:	d0e4      	beq.n	801b410 <_scanf_float+0x378>
 801b446:	9905      	ldr	r1, [sp, #20]
 801b448:	230a      	movs	r3, #10
 801b44a:	462a      	mov	r2, r5
 801b44c:	3101      	adds	r1, #1
 801b44e:	4640      	mov	r0, r8
 801b450:	f001 f94a 	bl	801c6e8 <_strtol_r>
 801b454:	9b04      	ldr	r3, [sp, #16]
 801b456:	9e05      	ldr	r6, [sp, #20]
 801b458:	1ac2      	subs	r2, r0, r3
 801b45a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801b45e:	429e      	cmp	r6, r3
 801b460:	bf28      	it	cs
 801b462:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801b466:	4912      	ldr	r1, [pc, #72]	; (801b4b0 <_scanf_float+0x418>)
 801b468:	4630      	mov	r0, r6
 801b46a:	f000 f977 	bl	801b75c <siprintf>
 801b46e:	e7cf      	b.n	801b410 <_scanf_float+0x378>
 801b470:	f011 0f04 	tst.w	r1, #4
 801b474:	9903      	ldr	r1, [sp, #12]
 801b476:	600a      	str	r2, [r1, #0]
 801b478:	d1db      	bne.n	801b432 <_scanf_float+0x39a>
 801b47a:	f8d3 8000 	ldr.w	r8, [r3]
 801b47e:	ee10 2a10 	vmov	r2, s0
 801b482:	ee10 0a10 	vmov	r0, s0
 801b486:	463b      	mov	r3, r7
 801b488:	4639      	mov	r1, r7
 801b48a:	f7e5 fb6f 	bl	8000b6c <__aeabi_dcmpun>
 801b48e:	b128      	cbz	r0, 801b49c <_scanf_float+0x404>
 801b490:	4808      	ldr	r0, [pc, #32]	; (801b4b4 <_scanf_float+0x41c>)
 801b492:	f000 f919 	bl	801b6c8 <nanf>
 801b496:	ed88 0a00 	vstr	s0, [r8]
 801b49a:	e7cd      	b.n	801b438 <_scanf_float+0x3a0>
 801b49c:	4630      	mov	r0, r6
 801b49e:	4639      	mov	r1, r7
 801b4a0:	f7e5 fbc2 	bl	8000c28 <__aeabi_d2f>
 801b4a4:	f8c8 0000 	str.w	r0, [r8]
 801b4a8:	e7c6      	b.n	801b438 <_scanf_float+0x3a0>
 801b4aa:	2500      	movs	r5, #0
 801b4ac:	e635      	b.n	801b11a <_scanf_float+0x82>
 801b4ae:	bf00      	nop
 801b4b0:	080222ae 	.word	0x080222ae
 801b4b4:	080223e0 	.word	0x080223e0

0801b4b8 <iprintf>:
 801b4b8:	b40f      	push	{r0, r1, r2, r3}
 801b4ba:	4b0a      	ldr	r3, [pc, #40]	; (801b4e4 <iprintf+0x2c>)
 801b4bc:	b513      	push	{r0, r1, r4, lr}
 801b4be:	681c      	ldr	r4, [r3, #0]
 801b4c0:	b124      	cbz	r4, 801b4cc <iprintf+0x14>
 801b4c2:	69a3      	ldr	r3, [r4, #24]
 801b4c4:	b913      	cbnz	r3, 801b4cc <iprintf+0x14>
 801b4c6:	4620      	mov	r0, r4
 801b4c8:	f7fe fc30 	bl	8019d2c <__sinit>
 801b4cc:	ab05      	add	r3, sp, #20
 801b4ce:	9a04      	ldr	r2, [sp, #16]
 801b4d0:	68a1      	ldr	r1, [r4, #8]
 801b4d2:	9301      	str	r3, [sp, #4]
 801b4d4:	4620      	mov	r0, r4
 801b4d6:	f004 f9b1 	bl	801f83c <_vfiprintf_r>
 801b4da:	b002      	add	sp, #8
 801b4dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b4e0:	b004      	add	sp, #16
 801b4e2:	4770      	bx	lr
 801b4e4:	200001f8 	.word	0x200001f8

0801b4e8 <_puts_r>:
 801b4e8:	b570      	push	{r4, r5, r6, lr}
 801b4ea:	460e      	mov	r6, r1
 801b4ec:	4605      	mov	r5, r0
 801b4ee:	b118      	cbz	r0, 801b4f8 <_puts_r+0x10>
 801b4f0:	6983      	ldr	r3, [r0, #24]
 801b4f2:	b90b      	cbnz	r3, 801b4f8 <_puts_r+0x10>
 801b4f4:	f7fe fc1a 	bl	8019d2c <__sinit>
 801b4f8:	69ab      	ldr	r3, [r5, #24]
 801b4fa:	68ac      	ldr	r4, [r5, #8]
 801b4fc:	b913      	cbnz	r3, 801b504 <_puts_r+0x1c>
 801b4fe:	4628      	mov	r0, r5
 801b500:	f7fe fc14 	bl	8019d2c <__sinit>
 801b504:	4b2c      	ldr	r3, [pc, #176]	; (801b5b8 <_puts_r+0xd0>)
 801b506:	429c      	cmp	r4, r3
 801b508:	d120      	bne.n	801b54c <_puts_r+0x64>
 801b50a:	686c      	ldr	r4, [r5, #4]
 801b50c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b50e:	07db      	lsls	r3, r3, #31
 801b510:	d405      	bmi.n	801b51e <_puts_r+0x36>
 801b512:	89a3      	ldrh	r3, [r4, #12]
 801b514:	0598      	lsls	r0, r3, #22
 801b516:	d402      	bmi.n	801b51e <_puts_r+0x36>
 801b518:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b51a:	f7fe fde7 	bl	801a0ec <__retarget_lock_acquire_recursive>
 801b51e:	89a3      	ldrh	r3, [r4, #12]
 801b520:	0719      	lsls	r1, r3, #28
 801b522:	d51d      	bpl.n	801b560 <_puts_r+0x78>
 801b524:	6923      	ldr	r3, [r4, #16]
 801b526:	b1db      	cbz	r3, 801b560 <_puts_r+0x78>
 801b528:	3e01      	subs	r6, #1
 801b52a:	68a3      	ldr	r3, [r4, #8]
 801b52c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b530:	3b01      	subs	r3, #1
 801b532:	60a3      	str	r3, [r4, #8]
 801b534:	bb39      	cbnz	r1, 801b586 <_puts_r+0x9e>
 801b536:	2b00      	cmp	r3, #0
 801b538:	da38      	bge.n	801b5ac <_puts_r+0xc4>
 801b53a:	4622      	mov	r2, r4
 801b53c:	210a      	movs	r1, #10
 801b53e:	4628      	mov	r0, r5
 801b540:	f001 fbd6 	bl	801ccf0 <__swbuf_r>
 801b544:	3001      	adds	r0, #1
 801b546:	d011      	beq.n	801b56c <_puts_r+0x84>
 801b548:	250a      	movs	r5, #10
 801b54a:	e011      	b.n	801b570 <_puts_r+0x88>
 801b54c:	4b1b      	ldr	r3, [pc, #108]	; (801b5bc <_puts_r+0xd4>)
 801b54e:	429c      	cmp	r4, r3
 801b550:	d101      	bne.n	801b556 <_puts_r+0x6e>
 801b552:	68ac      	ldr	r4, [r5, #8]
 801b554:	e7da      	b.n	801b50c <_puts_r+0x24>
 801b556:	4b1a      	ldr	r3, [pc, #104]	; (801b5c0 <_puts_r+0xd8>)
 801b558:	429c      	cmp	r4, r3
 801b55a:	bf08      	it	eq
 801b55c:	68ec      	ldreq	r4, [r5, #12]
 801b55e:	e7d5      	b.n	801b50c <_puts_r+0x24>
 801b560:	4621      	mov	r1, r4
 801b562:	4628      	mov	r0, r5
 801b564:	f001 fc28 	bl	801cdb8 <__swsetup_r>
 801b568:	2800      	cmp	r0, #0
 801b56a:	d0dd      	beq.n	801b528 <_puts_r+0x40>
 801b56c:	f04f 35ff 	mov.w	r5, #4294967295
 801b570:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b572:	07da      	lsls	r2, r3, #31
 801b574:	d405      	bmi.n	801b582 <_puts_r+0x9a>
 801b576:	89a3      	ldrh	r3, [r4, #12]
 801b578:	059b      	lsls	r3, r3, #22
 801b57a:	d402      	bmi.n	801b582 <_puts_r+0x9a>
 801b57c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b57e:	f7fe fdb7 	bl	801a0f0 <__retarget_lock_release_recursive>
 801b582:	4628      	mov	r0, r5
 801b584:	bd70      	pop	{r4, r5, r6, pc}
 801b586:	2b00      	cmp	r3, #0
 801b588:	da04      	bge.n	801b594 <_puts_r+0xac>
 801b58a:	69a2      	ldr	r2, [r4, #24]
 801b58c:	429a      	cmp	r2, r3
 801b58e:	dc06      	bgt.n	801b59e <_puts_r+0xb6>
 801b590:	290a      	cmp	r1, #10
 801b592:	d004      	beq.n	801b59e <_puts_r+0xb6>
 801b594:	6823      	ldr	r3, [r4, #0]
 801b596:	1c5a      	adds	r2, r3, #1
 801b598:	6022      	str	r2, [r4, #0]
 801b59a:	7019      	strb	r1, [r3, #0]
 801b59c:	e7c5      	b.n	801b52a <_puts_r+0x42>
 801b59e:	4622      	mov	r2, r4
 801b5a0:	4628      	mov	r0, r5
 801b5a2:	f001 fba5 	bl	801ccf0 <__swbuf_r>
 801b5a6:	3001      	adds	r0, #1
 801b5a8:	d1bf      	bne.n	801b52a <_puts_r+0x42>
 801b5aa:	e7df      	b.n	801b56c <_puts_r+0x84>
 801b5ac:	6823      	ldr	r3, [r4, #0]
 801b5ae:	250a      	movs	r5, #10
 801b5b0:	1c5a      	adds	r2, r3, #1
 801b5b2:	6022      	str	r2, [r4, #0]
 801b5b4:	701d      	strb	r5, [r3, #0]
 801b5b6:	e7db      	b.n	801b570 <_puts_r+0x88>
 801b5b8:	08022100 	.word	0x08022100
 801b5bc:	08022120 	.word	0x08022120
 801b5c0:	080220e0 	.word	0x080220e0

0801b5c4 <puts>:
 801b5c4:	4b02      	ldr	r3, [pc, #8]	; (801b5d0 <puts+0xc>)
 801b5c6:	4601      	mov	r1, r0
 801b5c8:	6818      	ldr	r0, [r3, #0]
 801b5ca:	f7ff bf8d 	b.w	801b4e8 <_puts_r>
 801b5ce:	bf00      	nop
 801b5d0:	200001f8 	.word	0x200001f8

0801b5d4 <cleanup_glue>:
 801b5d4:	b538      	push	{r3, r4, r5, lr}
 801b5d6:	460c      	mov	r4, r1
 801b5d8:	6809      	ldr	r1, [r1, #0]
 801b5da:	4605      	mov	r5, r0
 801b5dc:	b109      	cbz	r1, 801b5e2 <cleanup_glue+0xe>
 801b5de:	f7ff fff9 	bl	801b5d4 <cleanup_glue>
 801b5e2:	4621      	mov	r1, r4
 801b5e4:	4628      	mov	r0, r5
 801b5e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b5ea:	f7ff b841 	b.w	801a670 <_free_r>
	...

0801b5f0 <_reclaim_reent>:
 801b5f0:	4b2c      	ldr	r3, [pc, #176]	; (801b6a4 <_reclaim_reent+0xb4>)
 801b5f2:	681b      	ldr	r3, [r3, #0]
 801b5f4:	4283      	cmp	r3, r0
 801b5f6:	b570      	push	{r4, r5, r6, lr}
 801b5f8:	4604      	mov	r4, r0
 801b5fa:	d051      	beq.n	801b6a0 <_reclaim_reent+0xb0>
 801b5fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801b5fe:	b143      	cbz	r3, 801b612 <_reclaim_reent+0x22>
 801b600:	68db      	ldr	r3, [r3, #12]
 801b602:	2b00      	cmp	r3, #0
 801b604:	d14a      	bne.n	801b69c <_reclaim_reent+0xac>
 801b606:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b608:	6819      	ldr	r1, [r3, #0]
 801b60a:	b111      	cbz	r1, 801b612 <_reclaim_reent+0x22>
 801b60c:	4620      	mov	r0, r4
 801b60e:	f7ff f82f 	bl	801a670 <_free_r>
 801b612:	6961      	ldr	r1, [r4, #20]
 801b614:	b111      	cbz	r1, 801b61c <_reclaim_reent+0x2c>
 801b616:	4620      	mov	r0, r4
 801b618:	f7ff f82a 	bl	801a670 <_free_r>
 801b61c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b61e:	b111      	cbz	r1, 801b626 <_reclaim_reent+0x36>
 801b620:	4620      	mov	r0, r4
 801b622:	f7ff f825 	bl	801a670 <_free_r>
 801b626:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b628:	b111      	cbz	r1, 801b630 <_reclaim_reent+0x40>
 801b62a:	4620      	mov	r0, r4
 801b62c:	f7ff f820 	bl	801a670 <_free_r>
 801b630:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801b632:	b111      	cbz	r1, 801b63a <_reclaim_reent+0x4a>
 801b634:	4620      	mov	r0, r4
 801b636:	f7ff f81b 	bl	801a670 <_free_r>
 801b63a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801b63c:	b111      	cbz	r1, 801b644 <_reclaim_reent+0x54>
 801b63e:	4620      	mov	r0, r4
 801b640:	f7ff f816 	bl	801a670 <_free_r>
 801b644:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801b646:	b111      	cbz	r1, 801b64e <_reclaim_reent+0x5e>
 801b648:	4620      	mov	r0, r4
 801b64a:	f7ff f811 	bl	801a670 <_free_r>
 801b64e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801b650:	b111      	cbz	r1, 801b658 <_reclaim_reent+0x68>
 801b652:	4620      	mov	r0, r4
 801b654:	f7ff f80c 	bl	801a670 <_free_r>
 801b658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b65a:	b111      	cbz	r1, 801b662 <_reclaim_reent+0x72>
 801b65c:	4620      	mov	r0, r4
 801b65e:	f7ff f807 	bl	801a670 <_free_r>
 801b662:	69a3      	ldr	r3, [r4, #24]
 801b664:	b1e3      	cbz	r3, 801b6a0 <_reclaim_reent+0xb0>
 801b666:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b668:	4620      	mov	r0, r4
 801b66a:	4798      	blx	r3
 801b66c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801b66e:	b1b9      	cbz	r1, 801b6a0 <_reclaim_reent+0xb0>
 801b670:	4620      	mov	r0, r4
 801b672:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b676:	f7ff bfad 	b.w	801b5d4 <cleanup_glue>
 801b67a:	5949      	ldr	r1, [r1, r5]
 801b67c:	b941      	cbnz	r1, 801b690 <_reclaim_reent+0xa0>
 801b67e:	3504      	adds	r5, #4
 801b680:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b682:	2d80      	cmp	r5, #128	; 0x80
 801b684:	68d9      	ldr	r1, [r3, #12]
 801b686:	d1f8      	bne.n	801b67a <_reclaim_reent+0x8a>
 801b688:	4620      	mov	r0, r4
 801b68a:	f7fe fff1 	bl	801a670 <_free_r>
 801b68e:	e7ba      	b.n	801b606 <_reclaim_reent+0x16>
 801b690:	680e      	ldr	r6, [r1, #0]
 801b692:	4620      	mov	r0, r4
 801b694:	f7fe ffec 	bl	801a670 <_free_r>
 801b698:	4631      	mov	r1, r6
 801b69a:	e7ef      	b.n	801b67c <_reclaim_reent+0x8c>
 801b69c:	2500      	movs	r5, #0
 801b69e:	e7ef      	b.n	801b680 <_reclaim_reent+0x90>
 801b6a0:	bd70      	pop	{r4, r5, r6, pc}
 801b6a2:	bf00      	nop
 801b6a4:	200001f8 	.word	0x200001f8

0801b6a8 <_sbrk_r>:
 801b6a8:	b538      	push	{r3, r4, r5, lr}
 801b6aa:	4d06      	ldr	r5, [pc, #24]	; (801b6c4 <_sbrk_r+0x1c>)
 801b6ac:	2300      	movs	r3, #0
 801b6ae:	4604      	mov	r4, r0
 801b6b0:	4608      	mov	r0, r1
 801b6b2:	602b      	str	r3, [r5, #0]
 801b6b4:	f004 fc40 	bl	801ff38 <_sbrk>
 801b6b8:	1c43      	adds	r3, r0, #1
 801b6ba:	d102      	bne.n	801b6c2 <_sbrk_r+0x1a>
 801b6bc:	682b      	ldr	r3, [r5, #0]
 801b6be:	b103      	cbz	r3, 801b6c2 <_sbrk_r+0x1a>
 801b6c0:	6023      	str	r3, [r4, #0]
 801b6c2:	bd38      	pop	{r3, r4, r5, pc}
 801b6c4:	20008d58 	.word	0x20008d58

0801b6c8 <nanf>:
 801b6c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b6d0 <nanf+0x8>
 801b6cc:	4770      	bx	lr
 801b6ce:	bf00      	nop
 801b6d0:	7fc00000 	.word	0x7fc00000

0801b6d4 <_raise_r>:
 801b6d4:	291f      	cmp	r1, #31
 801b6d6:	b538      	push	{r3, r4, r5, lr}
 801b6d8:	4604      	mov	r4, r0
 801b6da:	460d      	mov	r5, r1
 801b6dc:	d904      	bls.n	801b6e8 <_raise_r+0x14>
 801b6de:	2316      	movs	r3, #22
 801b6e0:	6003      	str	r3, [r0, #0]
 801b6e2:	f04f 30ff 	mov.w	r0, #4294967295
 801b6e6:	bd38      	pop	{r3, r4, r5, pc}
 801b6e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b6ea:	b112      	cbz	r2, 801b6f2 <_raise_r+0x1e>
 801b6ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b6f0:	b94b      	cbnz	r3, 801b706 <_raise_r+0x32>
 801b6f2:	4620      	mov	r0, r4
 801b6f4:	f000 f830 	bl	801b758 <_getpid_r>
 801b6f8:	462a      	mov	r2, r5
 801b6fa:	4601      	mov	r1, r0
 801b6fc:	4620      	mov	r0, r4
 801b6fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b702:	f000 b817 	b.w	801b734 <_kill_r>
 801b706:	2b01      	cmp	r3, #1
 801b708:	d00a      	beq.n	801b720 <_raise_r+0x4c>
 801b70a:	1c59      	adds	r1, r3, #1
 801b70c:	d103      	bne.n	801b716 <_raise_r+0x42>
 801b70e:	2316      	movs	r3, #22
 801b710:	6003      	str	r3, [r0, #0]
 801b712:	2001      	movs	r0, #1
 801b714:	e7e7      	b.n	801b6e6 <_raise_r+0x12>
 801b716:	2400      	movs	r4, #0
 801b718:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b71c:	4628      	mov	r0, r5
 801b71e:	4798      	blx	r3
 801b720:	2000      	movs	r0, #0
 801b722:	e7e0      	b.n	801b6e6 <_raise_r+0x12>

0801b724 <raise>:
 801b724:	4b02      	ldr	r3, [pc, #8]	; (801b730 <raise+0xc>)
 801b726:	4601      	mov	r1, r0
 801b728:	6818      	ldr	r0, [r3, #0]
 801b72a:	f7ff bfd3 	b.w	801b6d4 <_raise_r>
 801b72e:	bf00      	nop
 801b730:	200001f8 	.word	0x200001f8

0801b734 <_kill_r>:
 801b734:	b538      	push	{r3, r4, r5, lr}
 801b736:	4d07      	ldr	r5, [pc, #28]	; (801b754 <_kill_r+0x20>)
 801b738:	2300      	movs	r3, #0
 801b73a:	4604      	mov	r4, r0
 801b73c:	4608      	mov	r0, r1
 801b73e:	4611      	mov	r1, r2
 801b740:	602b      	str	r3, [r5, #0]
 801b742:	f004 fbe1 	bl	801ff08 <_kill>
 801b746:	1c43      	adds	r3, r0, #1
 801b748:	d102      	bne.n	801b750 <_kill_r+0x1c>
 801b74a:	682b      	ldr	r3, [r5, #0]
 801b74c:	b103      	cbz	r3, 801b750 <_kill_r+0x1c>
 801b74e:	6023      	str	r3, [r4, #0]
 801b750:	bd38      	pop	{r3, r4, r5, pc}
 801b752:	bf00      	nop
 801b754:	20008d58 	.word	0x20008d58

0801b758 <_getpid_r>:
 801b758:	f004 bbc6 	b.w	801fee8 <_getpid>

0801b75c <siprintf>:
 801b75c:	b40e      	push	{r1, r2, r3}
 801b75e:	b500      	push	{lr}
 801b760:	b09c      	sub	sp, #112	; 0x70
 801b762:	ab1d      	add	r3, sp, #116	; 0x74
 801b764:	9002      	str	r0, [sp, #8]
 801b766:	9006      	str	r0, [sp, #24]
 801b768:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b76c:	4809      	ldr	r0, [pc, #36]	; (801b794 <siprintf+0x38>)
 801b76e:	9107      	str	r1, [sp, #28]
 801b770:	9104      	str	r1, [sp, #16]
 801b772:	4909      	ldr	r1, [pc, #36]	; (801b798 <siprintf+0x3c>)
 801b774:	f853 2b04 	ldr.w	r2, [r3], #4
 801b778:	9105      	str	r1, [sp, #20]
 801b77a:	6800      	ldr	r0, [r0, #0]
 801b77c:	9301      	str	r3, [sp, #4]
 801b77e:	a902      	add	r1, sp, #8
 801b780:	f003 fd60 	bl	801f244 <_svfiprintf_r>
 801b784:	9b02      	ldr	r3, [sp, #8]
 801b786:	2200      	movs	r2, #0
 801b788:	701a      	strb	r2, [r3, #0]
 801b78a:	b01c      	add	sp, #112	; 0x70
 801b78c:	f85d eb04 	ldr.w	lr, [sp], #4
 801b790:	b003      	add	sp, #12
 801b792:	4770      	bx	lr
 801b794:	200001f8 	.word	0x200001f8
 801b798:	ffff0208 	.word	0xffff0208

0801b79c <siscanf>:
 801b79c:	b40e      	push	{r1, r2, r3}
 801b79e:	b510      	push	{r4, lr}
 801b7a0:	b09f      	sub	sp, #124	; 0x7c
 801b7a2:	ac21      	add	r4, sp, #132	; 0x84
 801b7a4:	f44f 7101 	mov.w	r1, #516	; 0x204
 801b7a8:	f854 2b04 	ldr.w	r2, [r4], #4
 801b7ac:	9201      	str	r2, [sp, #4]
 801b7ae:	f8ad 101c 	strh.w	r1, [sp, #28]
 801b7b2:	9004      	str	r0, [sp, #16]
 801b7b4:	9008      	str	r0, [sp, #32]
 801b7b6:	f7e4 fd25 	bl	8000204 <strlen>
 801b7ba:	4b0c      	ldr	r3, [pc, #48]	; (801b7ec <siscanf+0x50>)
 801b7bc:	9005      	str	r0, [sp, #20]
 801b7be:	9009      	str	r0, [sp, #36]	; 0x24
 801b7c0:	930d      	str	r3, [sp, #52]	; 0x34
 801b7c2:	480b      	ldr	r0, [pc, #44]	; (801b7f0 <siscanf+0x54>)
 801b7c4:	9a01      	ldr	r2, [sp, #4]
 801b7c6:	6800      	ldr	r0, [r0, #0]
 801b7c8:	9403      	str	r4, [sp, #12]
 801b7ca:	2300      	movs	r3, #0
 801b7cc:	9311      	str	r3, [sp, #68]	; 0x44
 801b7ce:	9316      	str	r3, [sp, #88]	; 0x58
 801b7d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b7d4:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b7d8:	a904      	add	r1, sp, #16
 801b7da:	4623      	mov	r3, r4
 801b7dc:	f003 fe8c 	bl	801f4f8 <__ssvfiscanf_r>
 801b7e0:	b01f      	add	sp, #124	; 0x7c
 801b7e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b7e6:	b003      	add	sp, #12
 801b7e8:	4770      	bx	lr
 801b7ea:	bf00      	nop
 801b7ec:	0801b817 	.word	0x0801b817
 801b7f0:	200001f8 	.word	0x200001f8

0801b7f4 <__sread>:
 801b7f4:	b510      	push	{r4, lr}
 801b7f6:	460c      	mov	r4, r1
 801b7f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b7fc:	f004 fa9a 	bl	801fd34 <_read_r>
 801b800:	2800      	cmp	r0, #0
 801b802:	bfab      	itete	ge
 801b804:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b806:	89a3      	ldrhlt	r3, [r4, #12]
 801b808:	181b      	addge	r3, r3, r0
 801b80a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b80e:	bfac      	ite	ge
 801b810:	6563      	strge	r3, [r4, #84]	; 0x54
 801b812:	81a3      	strhlt	r3, [r4, #12]
 801b814:	bd10      	pop	{r4, pc}

0801b816 <__seofread>:
 801b816:	2000      	movs	r0, #0
 801b818:	4770      	bx	lr

0801b81a <__swrite>:
 801b81a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b81e:	461f      	mov	r7, r3
 801b820:	898b      	ldrh	r3, [r1, #12]
 801b822:	05db      	lsls	r3, r3, #23
 801b824:	4605      	mov	r5, r0
 801b826:	460c      	mov	r4, r1
 801b828:	4616      	mov	r6, r2
 801b82a:	d505      	bpl.n	801b838 <__swrite+0x1e>
 801b82c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b830:	2302      	movs	r3, #2
 801b832:	2200      	movs	r2, #0
 801b834:	f002 ff26 	bl	801e684 <_lseek_r>
 801b838:	89a3      	ldrh	r3, [r4, #12]
 801b83a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b83e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b842:	81a3      	strh	r3, [r4, #12]
 801b844:	4632      	mov	r2, r6
 801b846:	463b      	mov	r3, r7
 801b848:	4628      	mov	r0, r5
 801b84a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b84e:	f001 baa1 	b.w	801cd94 <_write_r>

0801b852 <__sseek>:
 801b852:	b510      	push	{r4, lr}
 801b854:	460c      	mov	r4, r1
 801b856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b85a:	f002 ff13 	bl	801e684 <_lseek_r>
 801b85e:	1c43      	adds	r3, r0, #1
 801b860:	89a3      	ldrh	r3, [r4, #12]
 801b862:	bf15      	itete	ne
 801b864:	6560      	strne	r0, [r4, #84]	; 0x54
 801b866:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b86a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b86e:	81a3      	strheq	r3, [r4, #12]
 801b870:	bf18      	it	ne
 801b872:	81a3      	strhne	r3, [r4, #12]
 801b874:	bd10      	pop	{r4, pc}

0801b876 <__sclose>:
 801b876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b87a:	f001 bb29 	b.w	801ced0 <_close_r>

0801b87e <strchr>:
 801b87e:	b2c9      	uxtb	r1, r1
 801b880:	4603      	mov	r3, r0
 801b882:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b886:	b11a      	cbz	r2, 801b890 <strchr+0x12>
 801b888:	428a      	cmp	r2, r1
 801b88a:	d1f9      	bne.n	801b880 <strchr+0x2>
 801b88c:	4618      	mov	r0, r3
 801b88e:	4770      	bx	lr
 801b890:	2900      	cmp	r1, #0
 801b892:	bf18      	it	ne
 801b894:	2300      	movne	r3, #0
 801b896:	e7f9      	b.n	801b88c <strchr+0xe>

0801b898 <strcpy>:
 801b898:	4603      	mov	r3, r0
 801b89a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b89e:	f803 2b01 	strb.w	r2, [r3], #1
 801b8a2:	2a00      	cmp	r2, #0
 801b8a4:	d1f9      	bne.n	801b89a <strcpy+0x2>
 801b8a6:	4770      	bx	lr

0801b8a8 <strncmp>:
 801b8a8:	b510      	push	{r4, lr}
 801b8aa:	b16a      	cbz	r2, 801b8c8 <strncmp+0x20>
 801b8ac:	3901      	subs	r1, #1
 801b8ae:	1884      	adds	r4, r0, r2
 801b8b0:	f810 3b01 	ldrb.w	r3, [r0], #1
 801b8b4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801b8b8:	4293      	cmp	r3, r2
 801b8ba:	d103      	bne.n	801b8c4 <strncmp+0x1c>
 801b8bc:	42a0      	cmp	r0, r4
 801b8be:	d001      	beq.n	801b8c4 <strncmp+0x1c>
 801b8c0:	2b00      	cmp	r3, #0
 801b8c2:	d1f5      	bne.n	801b8b0 <strncmp+0x8>
 801b8c4:	1a98      	subs	r0, r3, r2
 801b8c6:	bd10      	pop	{r4, pc}
 801b8c8:	4610      	mov	r0, r2
 801b8ca:	e7fc      	b.n	801b8c6 <strncmp+0x1e>

0801b8cc <sulp>:
 801b8cc:	b570      	push	{r4, r5, r6, lr}
 801b8ce:	4604      	mov	r4, r0
 801b8d0:	460d      	mov	r5, r1
 801b8d2:	ec45 4b10 	vmov	d0, r4, r5
 801b8d6:	4616      	mov	r6, r2
 801b8d8:	f003 fad4 	bl	801ee84 <__ulp>
 801b8dc:	ec51 0b10 	vmov	r0, r1, d0
 801b8e0:	b17e      	cbz	r6, 801b902 <sulp+0x36>
 801b8e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801b8e6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b8ea:	2b00      	cmp	r3, #0
 801b8ec:	dd09      	ble.n	801b902 <sulp+0x36>
 801b8ee:	051b      	lsls	r3, r3, #20
 801b8f0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801b8f4:	2400      	movs	r4, #0
 801b8f6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801b8fa:	4622      	mov	r2, r4
 801b8fc:	462b      	mov	r3, r5
 801b8fe:	f7e4 fe9b 	bl	8000638 <__aeabi_dmul>
 801b902:	bd70      	pop	{r4, r5, r6, pc}
 801b904:	0000      	movs	r0, r0
	...

0801b908 <_strtod_l>:
 801b908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b90c:	b0a3      	sub	sp, #140	; 0x8c
 801b90e:	461f      	mov	r7, r3
 801b910:	2300      	movs	r3, #0
 801b912:	931e      	str	r3, [sp, #120]	; 0x78
 801b914:	4ba4      	ldr	r3, [pc, #656]	; (801bba8 <_strtod_l+0x2a0>)
 801b916:	9219      	str	r2, [sp, #100]	; 0x64
 801b918:	681b      	ldr	r3, [r3, #0]
 801b91a:	9307      	str	r3, [sp, #28]
 801b91c:	4604      	mov	r4, r0
 801b91e:	4618      	mov	r0, r3
 801b920:	4688      	mov	r8, r1
 801b922:	f7e4 fc6f 	bl	8000204 <strlen>
 801b926:	f04f 0a00 	mov.w	sl, #0
 801b92a:	4605      	mov	r5, r0
 801b92c:	f04f 0b00 	mov.w	fp, #0
 801b930:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801b934:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b936:	781a      	ldrb	r2, [r3, #0]
 801b938:	2a2b      	cmp	r2, #43	; 0x2b
 801b93a:	d04c      	beq.n	801b9d6 <_strtod_l+0xce>
 801b93c:	d839      	bhi.n	801b9b2 <_strtod_l+0xaa>
 801b93e:	2a0d      	cmp	r2, #13
 801b940:	d832      	bhi.n	801b9a8 <_strtod_l+0xa0>
 801b942:	2a08      	cmp	r2, #8
 801b944:	d832      	bhi.n	801b9ac <_strtod_l+0xa4>
 801b946:	2a00      	cmp	r2, #0
 801b948:	d03c      	beq.n	801b9c4 <_strtod_l+0xbc>
 801b94a:	2300      	movs	r3, #0
 801b94c:	930e      	str	r3, [sp, #56]	; 0x38
 801b94e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801b950:	7833      	ldrb	r3, [r6, #0]
 801b952:	2b30      	cmp	r3, #48	; 0x30
 801b954:	f040 80b4 	bne.w	801bac0 <_strtod_l+0x1b8>
 801b958:	7873      	ldrb	r3, [r6, #1]
 801b95a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801b95e:	2b58      	cmp	r3, #88	; 0x58
 801b960:	d16c      	bne.n	801ba3c <_strtod_l+0x134>
 801b962:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b964:	9301      	str	r3, [sp, #4]
 801b966:	ab1e      	add	r3, sp, #120	; 0x78
 801b968:	9702      	str	r7, [sp, #8]
 801b96a:	9300      	str	r3, [sp, #0]
 801b96c:	4a8f      	ldr	r2, [pc, #572]	; (801bbac <_strtod_l+0x2a4>)
 801b96e:	ab1f      	add	r3, sp, #124	; 0x7c
 801b970:	a91d      	add	r1, sp, #116	; 0x74
 801b972:	4620      	mov	r0, r4
 801b974:	f002 fa84 	bl	801de80 <__gethex>
 801b978:	f010 0707 	ands.w	r7, r0, #7
 801b97c:	4605      	mov	r5, r0
 801b97e:	d005      	beq.n	801b98c <_strtod_l+0x84>
 801b980:	2f06      	cmp	r7, #6
 801b982:	d12a      	bne.n	801b9da <_strtod_l+0xd2>
 801b984:	3601      	adds	r6, #1
 801b986:	2300      	movs	r3, #0
 801b988:	961d      	str	r6, [sp, #116]	; 0x74
 801b98a:	930e      	str	r3, [sp, #56]	; 0x38
 801b98c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b98e:	2b00      	cmp	r3, #0
 801b990:	f040 8596 	bne.w	801c4c0 <_strtod_l+0xbb8>
 801b994:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b996:	b1db      	cbz	r3, 801b9d0 <_strtod_l+0xc8>
 801b998:	4652      	mov	r2, sl
 801b99a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801b99e:	ec43 2b10 	vmov	d0, r2, r3
 801b9a2:	b023      	add	sp, #140	; 0x8c
 801b9a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9a8:	2a20      	cmp	r2, #32
 801b9aa:	d1ce      	bne.n	801b94a <_strtod_l+0x42>
 801b9ac:	3301      	adds	r3, #1
 801b9ae:	931d      	str	r3, [sp, #116]	; 0x74
 801b9b0:	e7c0      	b.n	801b934 <_strtod_l+0x2c>
 801b9b2:	2a2d      	cmp	r2, #45	; 0x2d
 801b9b4:	d1c9      	bne.n	801b94a <_strtod_l+0x42>
 801b9b6:	2201      	movs	r2, #1
 801b9b8:	920e      	str	r2, [sp, #56]	; 0x38
 801b9ba:	1c5a      	adds	r2, r3, #1
 801b9bc:	921d      	str	r2, [sp, #116]	; 0x74
 801b9be:	785b      	ldrb	r3, [r3, #1]
 801b9c0:	2b00      	cmp	r3, #0
 801b9c2:	d1c4      	bne.n	801b94e <_strtod_l+0x46>
 801b9c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b9c6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801b9ca:	2b00      	cmp	r3, #0
 801b9cc:	f040 8576 	bne.w	801c4bc <_strtod_l+0xbb4>
 801b9d0:	4652      	mov	r2, sl
 801b9d2:	465b      	mov	r3, fp
 801b9d4:	e7e3      	b.n	801b99e <_strtod_l+0x96>
 801b9d6:	2200      	movs	r2, #0
 801b9d8:	e7ee      	b.n	801b9b8 <_strtod_l+0xb0>
 801b9da:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801b9dc:	b13a      	cbz	r2, 801b9ee <_strtod_l+0xe6>
 801b9de:	2135      	movs	r1, #53	; 0x35
 801b9e0:	a820      	add	r0, sp, #128	; 0x80
 801b9e2:	f003 fb5a 	bl	801f09a <__copybits>
 801b9e6:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b9e8:	4620      	mov	r0, r4
 801b9ea:	f002 ff1f 	bl	801e82c <_Bfree>
 801b9ee:	3f01      	subs	r7, #1
 801b9f0:	2f05      	cmp	r7, #5
 801b9f2:	d807      	bhi.n	801ba04 <_strtod_l+0xfc>
 801b9f4:	e8df f007 	tbb	[pc, r7]
 801b9f8:	1d180b0e 	.word	0x1d180b0e
 801b9fc:	030e      	.short	0x030e
 801b9fe:	f04f 0b00 	mov.w	fp, #0
 801ba02:	46da      	mov	sl, fp
 801ba04:	0728      	lsls	r0, r5, #28
 801ba06:	d5c1      	bpl.n	801b98c <_strtod_l+0x84>
 801ba08:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801ba0c:	e7be      	b.n	801b98c <_strtod_l+0x84>
 801ba0e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801ba12:	e7f7      	b.n	801ba04 <_strtod_l+0xfc>
 801ba14:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801ba18:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801ba1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801ba1e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801ba22:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801ba26:	e7ed      	b.n	801ba04 <_strtod_l+0xfc>
 801ba28:	f8df b184 	ldr.w	fp, [pc, #388]	; 801bbb0 <_strtod_l+0x2a8>
 801ba2c:	f04f 0a00 	mov.w	sl, #0
 801ba30:	e7e8      	b.n	801ba04 <_strtod_l+0xfc>
 801ba32:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801ba36:	f04f 3aff 	mov.w	sl, #4294967295
 801ba3a:	e7e3      	b.n	801ba04 <_strtod_l+0xfc>
 801ba3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ba3e:	1c5a      	adds	r2, r3, #1
 801ba40:	921d      	str	r2, [sp, #116]	; 0x74
 801ba42:	785b      	ldrb	r3, [r3, #1]
 801ba44:	2b30      	cmp	r3, #48	; 0x30
 801ba46:	d0f9      	beq.n	801ba3c <_strtod_l+0x134>
 801ba48:	2b00      	cmp	r3, #0
 801ba4a:	d09f      	beq.n	801b98c <_strtod_l+0x84>
 801ba4c:	2301      	movs	r3, #1
 801ba4e:	f04f 0900 	mov.w	r9, #0
 801ba52:	9304      	str	r3, [sp, #16]
 801ba54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ba56:	930a      	str	r3, [sp, #40]	; 0x28
 801ba58:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801ba5c:	464f      	mov	r7, r9
 801ba5e:	220a      	movs	r2, #10
 801ba60:	981d      	ldr	r0, [sp, #116]	; 0x74
 801ba62:	7806      	ldrb	r6, [r0, #0]
 801ba64:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801ba68:	b2d9      	uxtb	r1, r3
 801ba6a:	2909      	cmp	r1, #9
 801ba6c:	d92a      	bls.n	801bac4 <_strtod_l+0x1bc>
 801ba6e:	9907      	ldr	r1, [sp, #28]
 801ba70:	462a      	mov	r2, r5
 801ba72:	f7ff ff19 	bl	801b8a8 <strncmp>
 801ba76:	b398      	cbz	r0, 801bae0 <_strtod_l+0x1d8>
 801ba78:	2000      	movs	r0, #0
 801ba7a:	4633      	mov	r3, r6
 801ba7c:	463d      	mov	r5, r7
 801ba7e:	9007      	str	r0, [sp, #28]
 801ba80:	4602      	mov	r2, r0
 801ba82:	2b65      	cmp	r3, #101	; 0x65
 801ba84:	d001      	beq.n	801ba8a <_strtod_l+0x182>
 801ba86:	2b45      	cmp	r3, #69	; 0x45
 801ba88:	d118      	bne.n	801babc <_strtod_l+0x1b4>
 801ba8a:	b91d      	cbnz	r5, 801ba94 <_strtod_l+0x18c>
 801ba8c:	9b04      	ldr	r3, [sp, #16]
 801ba8e:	4303      	orrs	r3, r0
 801ba90:	d098      	beq.n	801b9c4 <_strtod_l+0xbc>
 801ba92:	2500      	movs	r5, #0
 801ba94:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801ba98:	f108 0301 	add.w	r3, r8, #1
 801ba9c:	931d      	str	r3, [sp, #116]	; 0x74
 801ba9e:	f898 3001 	ldrb.w	r3, [r8, #1]
 801baa2:	2b2b      	cmp	r3, #43	; 0x2b
 801baa4:	d075      	beq.n	801bb92 <_strtod_l+0x28a>
 801baa6:	2b2d      	cmp	r3, #45	; 0x2d
 801baa8:	d07b      	beq.n	801bba2 <_strtod_l+0x29a>
 801baaa:	f04f 0c00 	mov.w	ip, #0
 801baae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801bab2:	2909      	cmp	r1, #9
 801bab4:	f240 8082 	bls.w	801bbbc <_strtod_l+0x2b4>
 801bab8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801babc:	2600      	movs	r6, #0
 801babe:	e09d      	b.n	801bbfc <_strtod_l+0x2f4>
 801bac0:	2300      	movs	r3, #0
 801bac2:	e7c4      	b.n	801ba4e <_strtod_l+0x146>
 801bac4:	2f08      	cmp	r7, #8
 801bac6:	bfd8      	it	le
 801bac8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801baca:	f100 0001 	add.w	r0, r0, #1
 801bace:	bfda      	itte	le
 801bad0:	fb02 3301 	mlale	r3, r2, r1, r3
 801bad4:	9309      	strle	r3, [sp, #36]	; 0x24
 801bad6:	fb02 3909 	mlagt	r9, r2, r9, r3
 801bada:	3701      	adds	r7, #1
 801badc:	901d      	str	r0, [sp, #116]	; 0x74
 801bade:	e7bf      	b.n	801ba60 <_strtod_l+0x158>
 801bae0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bae2:	195a      	adds	r2, r3, r5
 801bae4:	921d      	str	r2, [sp, #116]	; 0x74
 801bae6:	5d5b      	ldrb	r3, [r3, r5]
 801bae8:	2f00      	cmp	r7, #0
 801baea:	d037      	beq.n	801bb5c <_strtod_l+0x254>
 801baec:	9007      	str	r0, [sp, #28]
 801baee:	463d      	mov	r5, r7
 801baf0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801baf4:	2a09      	cmp	r2, #9
 801baf6:	d912      	bls.n	801bb1e <_strtod_l+0x216>
 801baf8:	2201      	movs	r2, #1
 801bafa:	e7c2      	b.n	801ba82 <_strtod_l+0x17a>
 801bafc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bafe:	1c5a      	adds	r2, r3, #1
 801bb00:	921d      	str	r2, [sp, #116]	; 0x74
 801bb02:	785b      	ldrb	r3, [r3, #1]
 801bb04:	3001      	adds	r0, #1
 801bb06:	2b30      	cmp	r3, #48	; 0x30
 801bb08:	d0f8      	beq.n	801bafc <_strtod_l+0x1f4>
 801bb0a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801bb0e:	2a08      	cmp	r2, #8
 801bb10:	f200 84db 	bhi.w	801c4ca <_strtod_l+0xbc2>
 801bb14:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801bb16:	9007      	str	r0, [sp, #28]
 801bb18:	2000      	movs	r0, #0
 801bb1a:	920a      	str	r2, [sp, #40]	; 0x28
 801bb1c:	4605      	mov	r5, r0
 801bb1e:	3b30      	subs	r3, #48	; 0x30
 801bb20:	f100 0201 	add.w	r2, r0, #1
 801bb24:	d014      	beq.n	801bb50 <_strtod_l+0x248>
 801bb26:	9907      	ldr	r1, [sp, #28]
 801bb28:	4411      	add	r1, r2
 801bb2a:	9107      	str	r1, [sp, #28]
 801bb2c:	462a      	mov	r2, r5
 801bb2e:	eb00 0e05 	add.w	lr, r0, r5
 801bb32:	210a      	movs	r1, #10
 801bb34:	4572      	cmp	r2, lr
 801bb36:	d113      	bne.n	801bb60 <_strtod_l+0x258>
 801bb38:	182a      	adds	r2, r5, r0
 801bb3a:	2a08      	cmp	r2, #8
 801bb3c:	f105 0501 	add.w	r5, r5, #1
 801bb40:	4405      	add	r5, r0
 801bb42:	dc1c      	bgt.n	801bb7e <_strtod_l+0x276>
 801bb44:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bb46:	220a      	movs	r2, #10
 801bb48:	fb02 3301 	mla	r3, r2, r1, r3
 801bb4c:	9309      	str	r3, [sp, #36]	; 0x24
 801bb4e:	2200      	movs	r2, #0
 801bb50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bb52:	1c59      	adds	r1, r3, #1
 801bb54:	911d      	str	r1, [sp, #116]	; 0x74
 801bb56:	785b      	ldrb	r3, [r3, #1]
 801bb58:	4610      	mov	r0, r2
 801bb5a:	e7c9      	b.n	801baf0 <_strtod_l+0x1e8>
 801bb5c:	4638      	mov	r0, r7
 801bb5e:	e7d2      	b.n	801bb06 <_strtod_l+0x1fe>
 801bb60:	2a08      	cmp	r2, #8
 801bb62:	dc04      	bgt.n	801bb6e <_strtod_l+0x266>
 801bb64:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801bb66:	434e      	muls	r6, r1
 801bb68:	9609      	str	r6, [sp, #36]	; 0x24
 801bb6a:	3201      	adds	r2, #1
 801bb6c:	e7e2      	b.n	801bb34 <_strtod_l+0x22c>
 801bb6e:	f102 0c01 	add.w	ip, r2, #1
 801bb72:	f1bc 0f10 	cmp.w	ip, #16
 801bb76:	bfd8      	it	le
 801bb78:	fb01 f909 	mulle.w	r9, r1, r9
 801bb7c:	e7f5      	b.n	801bb6a <_strtod_l+0x262>
 801bb7e:	2d10      	cmp	r5, #16
 801bb80:	bfdc      	itt	le
 801bb82:	220a      	movle	r2, #10
 801bb84:	fb02 3909 	mlale	r9, r2, r9, r3
 801bb88:	e7e1      	b.n	801bb4e <_strtod_l+0x246>
 801bb8a:	2300      	movs	r3, #0
 801bb8c:	9307      	str	r3, [sp, #28]
 801bb8e:	2201      	movs	r2, #1
 801bb90:	e77c      	b.n	801ba8c <_strtod_l+0x184>
 801bb92:	f04f 0c00 	mov.w	ip, #0
 801bb96:	f108 0302 	add.w	r3, r8, #2
 801bb9a:	931d      	str	r3, [sp, #116]	; 0x74
 801bb9c:	f898 3002 	ldrb.w	r3, [r8, #2]
 801bba0:	e785      	b.n	801baae <_strtod_l+0x1a6>
 801bba2:	f04f 0c01 	mov.w	ip, #1
 801bba6:	e7f6      	b.n	801bb96 <_strtod_l+0x28e>
 801bba8:	080224c8 	.word	0x080224c8
 801bbac:	080222b4 	.word	0x080222b4
 801bbb0:	7ff00000 	.word	0x7ff00000
 801bbb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bbb6:	1c59      	adds	r1, r3, #1
 801bbb8:	911d      	str	r1, [sp, #116]	; 0x74
 801bbba:	785b      	ldrb	r3, [r3, #1]
 801bbbc:	2b30      	cmp	r3, #48	; 0x30
 801bbbe:	d0f9      	beq.n	801bbb4 <_strtod_l+0x2ac>
 801bbc0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801bbc4:	2908      	cmp	r1, #8
 801bbc6:	f63f af79 	bhi.w	801babc <_strtod_l+0x1b4>
 801bbca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801bbce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bbd0:	9308      	str	r3, [sp, #32]
 801bbd2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bbd4:	1c59      	adds	r1, r3, #1
 801bbd6:	911d      	str	r1, [sp, #116]	; 0x74
 801bbd8:	785b      	ldrb	r3, [r3, #1]
 801bbda:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801bbde:	2e09      	cmp	r6, #9
 801bbe0:	d937      	bls.n	801bc52 <_strtod_l+0x34a>
 801bbe2:	9e08      	ldr	r6, [sp, #32]
 801bbe4:	1b89      	subs	r1, r1, r6
 801bbe6:	2908      	cmp	r1, #8
 801bbe8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801bbec:	dc02      	bgt.n	801bbf4 <_strtod_l+0x2ec>
 801bbee:	4576      	cmp	r6, lr
 801bbf0:	bfa8      	it	ge
 801bbf2:	4676      	movge	r6, lr
 801bbf4:	f1bc 0f00 	cmp.w	ip, #0
 801bbf8:	d000      	beq.n	801bbfc <_strtod_l+0x2f4>
 801bbfa:	4276      	negs	r6, r6
 801bbfc:	2d00      	cmp	r5, #0
 801bbfe:	d14f      	bne.n	801bca0 <_strtod_l+0x398>
 801bc00:	9904      	ldr	r1, [sp, #16]
 801bc02:	4301      	orrs	r1, r0
 801bc04:	f47f aec2 	bne.w	801b98c <_strtod_l+0x84>
 801bc08:	2a00      	cmp	r2, #0
 801bc0a:	f47f aedb 	bne.w	801b9c4 <_strtod_l+0xbc>
 801bc0e:	2b69      	cmp	r3, #105	; 0x69
 801bc10:	d027      	beq.n	801bc62 <_strtod_l+0x35a>
 801bc12:	dc24      	bgt.n	801bc5e <_strtod_l+0x356>
 801bc14:	2b49      	cmp	r3, #73	; 0x49
 801bc16:	d024      	beq.n	801bc62 <_strtod_l+0x35a>
 801bc18:	2b4e      	cmp	r3, #78	; 0x4e
 801bc1a:	f47f aed3 	bne.w	801b9c4 <_strtod_l+0xbc>
 801bc1e:	499e      	ldr	r1, [pc, #632]	; (801be98 <_strtod_l+0x590>)
 801bc20:	a81d      	add	r0, sp, #116	; 0x74
 801bc22:	f002 fb85 	bl	801e330 <__match>
 801bc26:	2800      	cmp	r0, #0
 801bc28:	f43f aecc 	beq.w	801b9c4 <_strtod_l+0xbc>
 801bc2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bc2e:	781b      	ldrb	r3, [r3, #0]
 801bc30:	2b28      	cmp	r3, #40	; 0x28
 801bc32:	d12d      	bne.n	801bc90 <_strtod_l+0x388>
 801bc34:	4999      	ldr	r1, [pc, #612]	; (801be9c <_strtod_l+0x594>)
 801bc36:	aa20      	add	r2, sp, #128	; 0x80
 801bc38:	a81d      	add	r0, sp, #116	; 0x74
 801bc3a:	f002 fb8d 	bl	801e358 <__hexnan>
 801bc3e:	2805      	cmp	r0, #5
 801bc40:	d126      	bne.n	801bc90 <_strtod_l+0x388>
 801bc42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bc44:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801bc48:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801bc4c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801bc50:	e69c      	b.n	801b98c <_strtod_l+0x84>
 801bc52:	210a      	movs	r1, #10
 801bc54:	fb01 3e0e 	mla	lr, r1, lr, r3
 801bc58:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801bc5c:	e7b9      	b.n	801bbd2 <_strtod_l+0x2ca>
 801bc5e:	2b6e      	cmp	r3, #110	; 0x6e
 801bc60:	e7db      	b.n	801bc1a <_strtod_l+0x312>
 801bc62:	498f      	ldr	r1, [pc, #572]	; (801bea0 <_strtod_l+0x598>)
 801bc64:	a81d      	add	r0, sp, #116	; 0x74
 801bc66:	f002 fb63 	bl	801e330 <__match>
 801bc6a:	2800      	cmp	r0, #0
 801bc6c:	f43f aeaa 	beq.w	801b9c4 <_strtod_l+0xbc>
 801bc70:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bc72:	498c      	ldr	r1, [pc, #560]	; (801bea4 <_strtod_l+0x59c>)
 801bc74:	3b01      	subs	r3, #1
 801bc76:	a81d      	add	r0, sp, #116	; 0x74
 801bc78:	931d      	str	r3, [sp, #116]	; 0x74
 801bc7a:	f002 fb59 	bl	801e330 <__match>
 801bc7e:	b910      	cbnz	r0, 801bc86 <_strtod_l+0x37e>
 801bc80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bc82:	3301      	adds	r3, #1
 801bc84:	931d      	str	r3, [sp, #116]	; 0x74
 801bc86:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801beb4 <_strtod_l+0x5ac>
 801bc8a:	f04f 0a00 	mov.w	sl, #0
 801bc8e:	e67d      	b.n	801b98c <_strtod_l+0x84>
 801bc90:	4885      	ldr	r0, [pc, #532]	; (801bea8 <_strtod_l+0x5a0>)
 801bc92:	f7fd ffd5 	bl	8019c40 <nan>
 801bc96:	ed8d 0b04 	vstr	d0, [sp, #16]
 801bc9a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801bc9e:	e675      	b.n	801b98c <_strtod_l+0x84>
 801bca0:	9b07      	ldr	r3, [sp, #28]
 801bca2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bca4:	1af3      	subs	r3, r6, r3
 801bca6:	2f00      	cmp	r7, #0
 801bca8:	bf08      	it	eq
 801bcaa:	462f      	moveq	r7, r5
 801bcac:	2d10      	cmp	r5, #16
 801bcae:	9308      	str	r3, [sp, #32]
 801bcb0:	46a8      	mov	r8, r5
 801bcb2:	bfa8      	it	ge
 801bcb4:	f04f 0810 	movge.w	r8, #16
 801bcb8:	f7e4 fc44 	bl	8000544 <__aeabi_ui2d>
 801bcbc:	2d09      	cmp	r5, #9
 801bcbe:	4682      	mov	sl, r0
 801bcc0:	468b      	mov	fp, r1
 801bcc2:	dd13      	ble.n	801bcec <_strtod_l+0x3e4>
 801bcc4:	4b79      	ldr	r3, [pc, #484]	; (801beac <_strtod_l+0x5a4>)
 801bcc6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801bcca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801bcce:	f7e4 fcb3 	bl	8000638 <__aeabi_dmul>
 801bcd2:	4682      	mov	sl, r0
 801bcd4:	4648      	mov	r0, r9
 801bcd6:	468b      	mov	fp, r1
 801bcd8:	f7e4 fc34 	bl	8000544 <__aeabi_ui2d>
 801bcdc:	4602      	mov	r2, r0
 801bcde:	460b      	mov	r3, r1
 801bce0:	4650      	mov	r0, sl
 801bce2:	4659      	mov	r1, fp
 801bce4:	f7e4 faf2 	bl	80002cc <__adddf3>
 801bce8:	4682      	mov	sl, r0
 801bcea:	468b      	mov	fp, r1
 801bcec:	2d0f      	cmp	r5, #15
 801bcee:	dc38      	bgt.n	801bd62 <_strtod_l+0x45a>
 801bcf0:	9b08      	ldr	r3, [sp, #32]
 801bcf2:	2b00      	cmp	r3, #0
 801bcf4:	f43f ae4a 	beq.w	801b98c <_strtod_l+0x84>
 801bcf8:	dd24      	ble.n	801bd44 <_strtod_l+0x43c>
 801bcfa:	2b16      	cmp	r3, #22
 801bcfc:	dc0b      	bgt.n	801bd16 <_strtod_l+0x40e>
 801bcfe:	4d6b      	ldr	r5, [pc, #428]	; (801beac <_strtod_l+0x5a4>)
 801bd00:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801bd04:	e9d5 0100 	ldrd	r0, r1, [r5]
 801bd08:	4652      	mov	r2, sl
 801bd0a:	465b      	mov	r3, fp
 801bd0c:	f7e4 fc94 	bl	8000638 <__aeabi_dmul>
 801bd10:	4682      	mov	sl, r0
 801bd12:	468b      	mov	fp, r1
 801bd14:	e63a      	b.n	801b98c <_strtod_l+0x84>
 801bd16:	9a08      	ldr	r2, [sp, #32]
 801bd18:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801bd1c:	4293      	cmp	r3, r2
 801bd1e:	db20      	blt.n	801bd62 <_strtod_l+0x45a>
 801bd20:	4c62      	ldr	r4, [pc, #392]	; (801beac <_strtod_l+0x5a4>)
 801bd22:	f1c5 050f 	rsb	r5, r5, #15
 801bd26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801bd2a:	4652      	mov	r2, sl
 801bd2c:	465b      	mov	r3, fp
 801bd2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bd32:	f7e4 fc81 	bl	8000638 <__aeabi_dmul>
 801bd36:	9b08      	ldr	r3, [sp, #32]
 801bd38:	1b5d      	subs	r5, r3, r5
 801bd3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801bd3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801bd42:	e7e3      	b.n	801bd0c <_strtod_l+0x404>
 801bd44:	9b08      	ldr	r3, [sp, #32]
 801bd46:	3316      	adds	r3, #22
 801bd48:	db0b      	blt.n	801bd62 <_strtod_l+0x45a>
 801bd4a:	9b07      	ldr	r3, [sp, #28]
 801bd4c:	4a57      	ldr	r2, [pc, #348]	; (801beac <_strtod_l+0x5a4>)
 801bd4e:	1b9e      	subs	r6, r3, r6
 801bd50:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801bd54:	e9d6 2300 	ldrd	r2, r3, [r6]
 801bd58:	4650      	mov	r0, sl
 801bd5a:	4659      	mov	r1, fp
 801bd5c:	f7e4 fd96 	bl	800088c <__aeabi_ddiv>
 801bd60:	e7d6      	b.n	801bd10 <_strtod_l+0x408>
 801bd62:	9b08      	ldr	r3, [sp, #32]
 801bd64:	eba5 0808 	sub.w	r8, r5, r8
 801bd68:	4498      	add	r8, r3
 801bd6a:	f1b8 0f00 	cmp.w	r8, #0
 801bd6e:	dd71      	ble.n	801be54 <_strtod_l+0x54c>
 801bd70:	f018 030f 	ands.w	r3, r8, #15
 801bd74:	d00a      	beq.n	801bd8c <_strtod_l+0x484>
 801bd76:	494d      	ldr	r1, [pc, #308]	; (801beac <_strtod_l+0x5a4>)
 801bd78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801bd7c:	4652      	mov	r2, sl
 801bd7e:	465b      	mov	r3, fp
 801bd80:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bd84:	f7e4 fc58 	bl	8000638 <__aeabi_dmul>
 801bd88:	4682      	mov	sl, r0
 801bd8a:	468b      	mov	fp, r1
 801bd8c:	f038 080f 	bics.w	r8, r8, #15
 801bd90:	d04d      	beq.n	801be2e <_strtod_l+0x526>
 801bd92:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801bd96:	dd22      	ble.n	801bdde <_strtod_l+0x4d6>
 801bd98:	2500      	movs	r5, #0
 801bd9a:	462e      	mov	r6, r5
 801bd9c:	9509      	str	r5, [sp, #36]	; 0x24
 801bd9e:	9507      	str	r5, [sp, #28]
 801bda0:	2322      	movs	r3, #34	; 0x22
 801bda2:	f8df b110 	ldr.w	fp, [pc, #272]	; 801beb4 <_strtod_l+0x5ac>
 801bda6:	6023      	str	r3, [r4, #0]
 801bda8:	f04f 0a00 	mov.w	sl, #0
 801bdac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bdae:	2b00      	cmp	r3, #0
 801bdb0:	f43f adec 	beq.w	801b98c <_strtod_l+0x84>
 801bdb4:	991e      	ldr	r1, [sp, #120]	; 0x78
 801bdb6:	4620      	mov	r0, r4
 801bdb8:	f002 fd38 	bl	801e82c <_Bfree>
 801bdbc:	9907      	ldr	r1, [sp, #28]
 801bdbe:	4620      	mov	r0, r4
 801bdc0:	f002 fd34 	bl	801e82c <_Bfree>
 801bdc4:	4631      	mov	r1, r6
 801bdc6:	4620      	mov	r0, r4
 801bdc8:	f002 fd30 	bl	801e82c <_Bfree>
 801bdcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bdce:	4620      	mov	r0, r4
 801bdd0:	f002 fd2c 	bl	801e82c <_Bfree>
 801bdd4:	4629      	mov	r1, r5
 801bdd6:	4620      	mov	r0, r4
 801bdd8:	f002 fd28 	bl	801e82c <_Bfree>
 801bddc:	e5d6      	b.n	801b98c <_strtod_l+0x84>
 801bdde:	2300      	movs	r3, #0
 801bde0:	ea4f 1828 	mov.w	r8, r8, asr #4
 801bde4:	4650      	mov	r0, sl
 801bde6:	4659      	mov	r1, fp
 801bde8:	4699      	mov	r9, r3
 801bdea:	f1b8 0f01 	cmp.w	r8, #1
 801bdee:	dc21      	bgt.n	801be34 <_strtod_l+0x52c>
 801bdf0:	b10b      	cbz	r3, 801bdf6 <_strtod_l+0x4ee>
 801bdf2:	4682      	mov	sl, r0
 801bdf4:	468b      	mov	fp, r1
 801bdf6:	4b2e      	ldr	r3, [pc, #184]	; (801beb0 <_strtod_l+0x5a8>)
 801bdf8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801bdfc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801be00:	4652      	mov	r2, sl
 801be02:	465b      	mov	r3, fp
 801be04:	e9d9 0100 	ldrd	r0, r1, [r9]
 801be08:	f7e4 fc16 	bl	8000638 <__aeabi_dmul>
 801be0c:	4b29      	ldr	r3, [pc, #164]	; (801beb4 <_strtod_l+0x5ac>)
 801be0e:	460a      	mov	r2, r1
 801be10:	400b      	ands	r3, r1
 801be12:	4929      	ldr	r1, [pc, #164]	; (801beb8 <_strtod_l+0x5b0>)
 801be14:	428b      	cmp	r3, r1
 801be16:	4682      	mov	sl, r0
 801be18:	d8be      	bhi.n	801bd98 <_strtod_l+0x490>
 801be1a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801be1e:	428b      	cmp	r3, r1
 801be20:	bf86      	itte	hi
 801be22:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801bebc <_strtod_l+0x5b4>
 801be26:	f04f 3aff 	movhi.w	sl, #4294967295
 801be2a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801be2e:	2300      	movs	r3, #0
 801be30:	9304      	str	r3, [sp, #16]
 801be32:	e081      	b.n	801bf38 <_strtod_l+0x630>
 801be34:	f018 0f01 	tst.w	r8, #1
 801be38:	d007      	beq.n	801be4a <_strtod_l+0x542>
 801be3a:	4b1d      	ldr	r3, [pc, #116]	; (801beb0 <_strtod_l+0x5a8>)
 801be3c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801be40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be44:	f7e4 fbf8 	bl	8000638 <__aeabi_dmul>
 801be48:	2301      	movs	r3, #1
 801be4a:	f109 0901 	add.w	r9, r9, #1
 801be4e:	ea4f 0868 	mov.w	r8, r8, asr #1
 801be52:	e7ca      	b.n	801bdea <_strtod_l+0x4e2>
 801be54:	d0eb      	beq.n	801be2e <_strtod_l+0x526>
 801be56:	f1c8 0800 	rsb	r8, r8, #0
 801be5a:	f018 020f 	ands.w	r2, r8, #15
 801be5e:	d00a      	beq.n	801be76 <_strtod_l+0x56e>
 801be60:	4b12      	ldr	r3, [pc, #72]	; (801beac <_strtod_l+0x5a4>)
 801be62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801be66:	4650      	mov	r0, sl
 801be68:	4659      	mov	r1, fp
 801be6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be6e:	f7e4 fd0d 	bl	800088c <__aeabi_ddiv>
 801be72:	4682      	mov	sl, r0
 801be74:	468b      	mov	fp, r1
 801be76:	ea5f 1828 	movs.w	r8, r8, asr #4
 801be7a:	d0d8      	beq.n	801be2e <_strtod_l+0x526>
 801be7c:	f1b8 0f1f 	cmp.w	r8, #31
 801be80:	dd1e      	ble.n	801bec0 <_strtod_l+0x5b8>
 801be82:	2500      	movs	r5, #0
 801be84:	462e      	mov	r6, r5
 801be86:	9509      	str	r5, [sp, #36]	; 0x24
 801be88:	9507      	str	r5, [sp, #28]
 801be8a:	2322      	movs	r3, #34	; 0x22
 801be8c:	f04f 0a00 	mov.w	sl, #0
 801be90:	f04f 0b00 	mov.w	fp, #0
 801be94:	6023      	str	r3, [r4, #0]
 801be96:	e789      	b.n	801bdac <_strtod_l+0x4a4>
 801be98:	08022289 	.word	0x08022289
 801be9c:	080222c8 	.word	0x080222c8
 801bea0:	08022281 	.word	0x08022281
 801bea4:	080223e4 	.word	0x080223e4
 801bea8:	080223e0 	.word	0x080223e0
 801beac:	08022568 	.word	0x08022568
 801beb0:	08022540 	.word	0x08022540
 801beb4:	7ff00000 	.word	0x7ff00000
 801beb8:	7ca00000 	.word	0x7ca00000
 801bebc:	7fefffff 	.word	0x7fefffff
 801bec0:	f018 0310 	ands.w	r3, r8, #16
 801bec4:	bf18      	it	ne
 801bec6:	236a      	movne	r3, #106	; 0x6a
 801bec8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801c280 <_strtod_l+0x978>
 801becc:	9304      	str	r3, [sp, #16]
 801bece:	4650      	mov	r0, sl
 801bed0:	4659      	mov	r1, fp
 801bed2:	2300      	movs	r3, #0
 801bed4:	f018 0f01 	tst.w	r8, #1
 801bed8:	d004      	beq.n	801bee4 <_strtod_l+0x5dc>
 801beda:	e9d9 2300 	ldrd	r2, r3, [r9]
 801bede:	f7e4 fbab 	bl	8000638 <__aeabi_dmul>
 801bee2:	2301      	movs	r3, #1
 801bee4:	ea5f 0868 	movs.w	r8, r8, asr #1
 801bee8:	f109 0908 	add.w	r9, r9, #8
 801beec:	d1f2      	bne.n	801bed4 <_strtod_l+0x5cc>
 801beee:	b10b      	cbz	r3, 801bef4 <_strtod_l+0x5ec>
 801bef0:	4682      	mov	sl, r0
 801bef2:	468b      	mov	fp, r1
 801bef4:	9b04      	ldr	r3, [sp, #16]
 801bef6:	b1bb      	cbz	r3, 801bf28 <_strtod_l+0x620>
 801bef8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801befc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801bf00:	2b00      	cmp	r3, #0
 801bf02:	4659      	mov	r1, fp
 801bf04:	dd10      	ble.n	801bf28 <_strtod_l+0x620>
 801bf06:	2b1f      	cmp	r3, #31
 801bf08:	f340 8128 	ble.w	801c15c <_strtod_l+0x854>
 801bf0c:	2b34      	cmp	r3, #52	; 0x34
 801bf0e:	bfde      	ittt	le
 801bf10:	3b20      	suble	r3, #32
 801bf12:	f04f 32ff 	movle.w	r2, #4294967295
 801bf16:	fa02 f303 	lslle.w	r3, r2, r3
 801bf1a:	f04f 0a00 	mov.w	sl, #0
 801bf1e:	bfcc      	ite	gt
 801bf20:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801bf24:	ea03 0b01 	andle.w	fp, r3, r1
 801bf28:	2200      	movs	r2, #0
 801bf2a:	2300      	movs	r3, #0
 801bf2c:	4650      	mov	r0, sl
 801bf2e:	4659      	mov	r1, fp
 801bf30:	f7e4 fdea 	bl	8000b08 <__aeabi_dcmpeq>
 801bf34:	2800      	cmp	r0, #0
 801bf36:	d1a4      	bne.n	801be82 <_strtod_l+0x57a>
 801bf38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf3a:	9300      	str	r3, [sp, #0]
 801bf3c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801bf3e:	462b      	mov	r3, r5
 801bf40:	463a      	mov	r2, r7
 801bf42:	4620      	mov	r0, r4
 801bf44:	f002 fcde 	bl	801e904 <__s2b>
 801bf48:	9009      	str	r0, [sp, #36]	; 0x24
 801bf4a:	2800      	cmp	r0, #0
 801bf4c:	f43f af24 	beq.w	801bd98 <_strtod_l+0x490>
 801bf50:	9b07      	ldr	r3, [sp, #28]
 801bf52:	1b9e      	subs	r6, r3, r6
 801bf54:	9b08      	ldr	r3, [sp, #32]
 801bf56:	2b00      	cmp	r3, #0
 801bf58:	bfb4      	ite	lt
 801bf5a:	4633      	movlt	r3, r6
 801bf5c:	2300      	movge	r3, #0
 801bf5e:	9310      	str	r3, [sp, #64]	; 0x40
 801bf60:	9b08      	ldr	r3, [sp, #32]
 801bf62:	2500      	movs	r5, #0
 801bf64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bf68:	9318      	str	r3, [sp, #96]	; 0x60
 801bf6a:	462e      	mov	r6, r5
 801bf6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf6e:	4620      	mov	r0, r4
 801bf70:	6859      	ldr	r1, [r3, #4]
 801bf72:	f002 fc1b 	bl	801e7ac <_Balloc>
 801bf76:	9007      	str	r0, [sp, #28]
 801bf78:	2800      	cmp	r0, #0
 801bf7a:	f43f af11 	beq.w	801bda0 <_strtod_l+0x498>
 801bf7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf80:	691a      	ldr	r2, [r3, #16]
 801bf82:	3202      	adds	r2, #2
 801bf84:	f103 010c 	add.w	r1, r3, #12
 801bf88:	0092      	lsls	r2, r2, #2
 801bf8a:	300c      	adds	r0, #12
 801bf8c:	f7fe f8c2 	bl	801a114 <memcpy>
 801bf90:	ec4b ab10 	vmov	d0, sl, fp
 801bf94:	aa20      	add	r2, sp, #128	; 0x80
 801bf96:	a91f      	add	r1, sp, #124	; 0x7c
 801bf98:	4620      	mov	r0, r4
 801bf9a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801bf9e:	f002 ffed 	bl	801ef7c <__d2b>
 801bfa2:	901e      	str	r0, [sp, #120]	; 0x78
 801bfa4:	2800      	cmp	r0, #0
 801bfa6:	f43f aefb 	beq.w	801bda0 <_strtod_l+0x498>
 801bfaa:	2101      	movs	r1, #1
 801bfac:	4620      	mov	r0, r4
 801bfae:	f002 fd43 	bl	801ea38 <__i2b>
 801bfb2:	4606      	mov	r6, r0
 801bfb4:	2800      	cmp	r0, #0
 801bfb6:	f43f aef3 	beq.w	801bda0 <_strtod_l+0x498>
 801bfba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801bfbc:	9904      	ldr	r1, [sp, #16]
 801bfbe:	2b00      	cmp	r3, #0
 801bfc0:	bfab      	itete	ge
 801bfc2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801bfc4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801bfc6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801bfc8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801bfcc:	bfac      	ite	ge
 801bfce:	eb03 0902 	addge.w	r9, r3, r2
 801bfd2:	1ad7      	sublt	r7, r2, r3
 801bfd4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801bfd6:	eba3 0801 	sub.w	r8, r3, r1
 801bfda:	4490      	add	r8, r2
 801bfdc:	4ba3      	ldr	r3, [pc, #652]	; (801c26c <_strtod_l+0x964>)
 801bfde:	f108 38ff 	add.w	r8, r8, #4294967295
 801bfe2:	4598      	cmp	r8, r3
 801bfe4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801bfe8:	f280 80cc 	bge.w	801c184 <_strtod_l+0x87c>
 801bfec:	eba3 0308 	sub.w	r3, r3, r8
 801bff0:	2b1f      	cmp	r3, #31
 801bff2:	eba2 0203 	sub.w	r2, r2, r3
 801bff6:	f04f 0101 	mov.w	r1, #1
 801bffa:	f300 80b6 	bgt.w	801c16a <_strtod_l+0x862>
 801bffe:	fa01 f303 	lsl.w	r3, r1, r3
 801c002:	9311      	str	r3, [sp, #68]	; 0x44
 801c004:	2300      	movs	r3, #0
 801c006:	930c      	str	r3, [sp, #48]	; 0x30
 801c008:	eb09 0802 	add.w	r8, r9, r2
 801c00c:	9b04      	ldr	r3, [sp, #16]
 801c00e:	45c1      	cmp	r9, r8
 801c010:	4417      	add	r7, r2
 801c012:	441f      	add	r7, r3
 801c014:	464b      	mov	r3, r9
 801c016:	bfa8      	it	ge
 801c018:	4643      	movge	r3, r8
 801c01a:	42bb      	cmp	r3, r7
 801c01c:	bfa8      	it	ge
 801c01e:	463b      	movge	r3, r7
 801c020:	2b00      	cmp	r3, #0
 801c022:	bfc2      	ittt	gt
 801c024:	eba8 0803 	subgt.w	r8, r8, r3
 801c028:	1aff      	subgt	r7, r7, r3
 801c02a:	eba9 0903 	subgt.w	r9, r9, r3
 801c02e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c030:	2b00      	cmp	r3, #0
 801c032:	dd17      	ble.n	801c064 <_strtod_l+0x75c>
 801c034:	4631      	mov	r1, r6
 801c036:	461a      	mov	r2, r3
 801c038:	4620      	mov	r0, r4
 801c03a:	f002 fdb9 	bl	801ebb0 <__pow5mult>
 801c03e:	4606      	mov	r6, r0
 801c040:	2800      	cmp	r0, #0
 801c042:	f43f aead 	beq.w	801bda0 <_strtod_l+0x498>
 801c046:	4601      	mov	r1, r0
 801c048:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801c04a:	4620      	mov	r0, r4
 801c04c:	f002 fd0a 	bl	801ea64 <__multiply>
 801c050:	900f      	str	r0, [sp, #60]	; 0x3c
 801c052:	2800      	cmp	r0, #0
 801c054:	f43f aea4 	beq.w	801bda0 <_strtod_l+0x498>
 801c058:	991e      	ldr	r1, [sp, #120]	; 0x78
 801c05a:	4620      	mov	r0, r4
 801c05c:	f002 fbe6 	bl	801e82c <_Bfree>
 801c060:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c062:	931e      	str	r3, [sp, #120]	; 0x78
 801c064:	f1b8 0f00 	cmp.w	r8, #0
 801c068:	f300 8091 	bgt.w	801c18e <_strtod_l+0x886>
 801c06c:	9b08      	ldr	r3, [sp, #32]
 801c06e:	2b00      	cmp	r3, #0
 801c070:	dd08      	ble.n	801c084 <_strtod_l+0x77c>
 801c072:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c074:	9907      	ldr	r1, [sp, #28]
 801c076:	4620      	mov	r0, r4
 801c078:	f002 fd9a 	bl	801ebb0 <__pow5mult>
 801c07c:	9007      	str	r0, [sp, #28]
 801c07e:	2800      	cmp	r0, #0
 801c080:	f43f ae8e 	beq.w	801bda0 <_strtod_l+0x498>
 801c084:	2f00      	cmp	r7, #0
 801c086:	dd08      	ble.n	801c09a <_strtod_l+0x792>
 801c088:	9907      	ldr	r1, [sp, #28]
 801c08a:	463a      	mov	r2, r7
 801c08c:	4620      	mov	r0, r4
 801c08e:	f002 fde9 	bl	801ec64 <__lshift>
 801c092:	9007      	str	r0, [sp, #28]
 801c094:	2800      	cmp	r0, #0
 801c096:	f43f ae83 	beq.w	801bda0 <_strtod_l+0x498>
 801c09a:	f1b9 0f00 	cmp.w	r9, #0
 801c09e:	dd08      	ble.n	801c0b2 <_strtod_l+0x7aa>
 801c0a0:	4631      	mov	r1, r6
 801c0a2:	464a      	mov	r2, r9
 801c0a4:	4620      	mov	r0, r4
 801c0a6:	f002 fddd 	bl	801ec64 <__lshift>
 801c0aa:	4606      	mov	r6, r0
 801c0ac:	2800      	cmp	r0, #0
 801c0ae:	f43f ae77 	beq.w	801bda0 <_strtod_l+0x498>
 801c0b2:	9a07      	ldr	r2, [sp, #28]
 801c0b4:	991e      	ldr	r1, [sp, #120]	; 0x78
 801c0b6:	4620      	mov	r0, r4
 801c0b8:	f002 fe5c 	bl	801ed74 <__mdiff>
 801c0bc:	4605      	mov	r5, r0
 801c0be:	2800      	cmp	r0, #0
 801c0c0:	f43f ae6e 	beq.w	801bda0 <_strtod_l+0x498>
 801c0c4:	68c3      	ldr	r3, [r0, #12]
 801c0c6:	930f      	str	r3, [sp, #60]	; 0x3c
 801c0c8:	2300      	movs	r3, #0
 801c0ca:	60c3      	str	r3, [r0, #12]
 801c0cc:	4631      	mov	r1, r6
 801c0ce:	f002 fe35 	bl	801ed3c <__mcmp>
 801c0d2:	2800      	cmp	r0, #0
 801c0d4:	da65      	bge.n	801c1a2 <_strtod_l+0x89a>
 801c0d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c0d8:	ea53 030a 	orrs.w	r3, r3, sl
 801c0dc:	f040 8087 	bne.w	801c1ee <_strtod_l+0x8e6>
 801c0e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c0e4:	2b00      	cmp	r3, #0
 801c0e6:	f040 8082 	bne.w	801c1ee <_strtod_l+0x8e6>
 801c0ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c0ee:	0d1b      	lsrs	r3, r3, #20
 801c0f0:	051b      	lsls	r3, r3, #20
 801c0f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801c0f6:	d97a      	bls.n	801c1ee <_strtod_l+0x8e6>
 801c0f8:	696b      	ldr	r3, [r5, #20]
 801c0fa:	b913      	cbnz	r3, 801c102 <_strtod_l+0x7fa>
 801c0fc:	692b      	ldr	r3, [r5, #16]
 801c0fe:	2b01      	cmp	r3, #1
 801c100:	dd75      	ble.n	801c1ee <_strtod_l+0x8e6>
 801c102:	4629      	mov	r1, r5
 801c104:	2201      	movs	r2, #1
 801c106:	4620      	mov	r0, r4
 801c108:	f002 fdac 	bl	801ec64 <__lshift>
 801c10c:	4631      	mov	r1, r6
 801c10e:	4605      	mov	r5, r0
 801c110:	f002 fe14 	bl	801ed3c <__mcmp>
 801c114:	2800      	cmp	r0, #0
 801c116:	dd6a      	ble.n	801c1ee <_strtod_l+0x8e6>
 801c118:	9904      	ldr	r1, [sp, #16]
 801c11a:	4a55      	ldr	r2, [pc, #340]	; (801c270 <_strtod_l+0x968>)
 801c11c:	465b      	mov	r3, fp
 801c11e:	2900      	cmp	r1, #0
 801c120:	f000 8085 	beq.w	801c22e <_strtod_l+0x926>
 801c124:	ea02 010b 	and.w	r1, r2, fp
 801c128:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801c12c:	dc7f      	bgt.n	801c22e <_strtod_l+0x926>
 801c12e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801c132:	f77f aeaa 	ble.w	801be8a <_strtod_l+0x582>
 801c136:	4a4f      	ldr	r2, [pc, #316]	; (801c274 <_strtod_l+0x96c>)
 801c138:	2300      	movs	r3, #0
 801c13a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801c13e:	4650      	mov	r0, sl
 801c140:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801c144:	4659      	mov	r1, fp
 801c146:	f7e4 fa77 	bl	8000638 <__aeabi_dmul>
 801c14a:	460b      	mov	r3, r1
 801c14c:	4303      	orrs	r3, r0
 801c14e:	bf08      	it	eq
 801c150:	2322      	moveq	r3, #34	; 0x22
 801c152:	4682      	mov	sl, r0
 801c154:	468b      	mov	fp, r1
 801c156:	bf08      	it	eq
 801c158:	6023      	streq	r3, [r4, #0]
 801c15a:	e62b      	b.n	801bdb4 <_strtod_l+0x4ac>
 801c15c:	f04f 32ff 	mov.w	r2, #4294967295
 801c160:	fa02 f303 	lsl.w	r3, r2, r3
 801c164:	ea03 0a0a 	and.w	sl, r3, sl
 801c168:	e6de      	b.n	801bf28 <_strtod_l+0x620>
 801c16a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801c16e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801c172:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801c176:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801c17a:	fa01 f308 	lsl.w	r3, r1, r8
 801c17e:	930c      	str	r3, [sp, #48]	; 0x30
 801c180:	9111      	str	r1, [sp, #68]	; 0x44
 801c182:	e741      	b.n	801c008 <_strtod_l+0x700>
 801c184:	2300      	movs	r3, #0
 801c186:	930c      	str	r3, [sp, #48]	; 0x30
 801c188:	2301      	movs	r3, #1
 801c18a:	9311      	str	r3, [sp, #68]	; 0x44
 801c18c:	e73c      	b.n	801c008 <_strtod_l+0x700>
 801c18e:	991e      	ldr	r1, [sp, #120]	; 0x78
 801c190:	4642      	mov	r2, r8
 801c192:	4620      	mov	r0, r4
 801c194:	f002 fd66 	bl	801ec64 <__lshift>
 801c198:	901e      	str	r0, [sp, #120]	; 0x78
 801c19a:	2800      	cmp	r0, #0
 801c19c:	f47f af66 	bne.w	801c06c <_strtod_l+0x764>
 801c1a0:	e5fe      	b.n	801bda0 <_strtod_l+0x498>
 801c1a2:	465f      	mov	r7, fp
 801c1a4:	d16e      	bne.n	801c284 <_strtod_l+0x97c>
 801c1a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c1a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c1ac:	b342      	cbz	r2, 801c200 <_strtod_l+0x8f8>
 801c1ae:	4a32      	ldr	r2, [pc, #200]	; (801c278 <_strtod_l+0x970>)
 801c1b0:	4293      	cmp	r3, r2
 801c1b2:	d128      	bne.n	801c206 <_strtod_l+0x8fe>
 801c1b4:	9b04      	ldr	r3, [sp, #16]
 801c1b6:	4650      	mov	r0, sl
 801c1b8:	b1eb      	cbz	r3, 801c1f6 <_strtod_l+0x8ee>
 801c1ba:	4a2d      	ldr	r2, [pc, #180]	; (801c270 <_strtod_l+0x968>)
 801c1bc:	403a      	ands	r2, r7
 801c1be:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801c1c2:	f04f 31ff 	mov.w	r1, #4294967295
 801c1c6:	d819      	bhi.n	801c1fc <_strtod_l+0x8f4>
 801c1c8:	0d12      	lsrs	r2, r2, #20
 801c1ca:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801c1ce:	fa01 f303 	lsl.w	r3, r1, r3
 801c1d2:	4298      	cmp	r0, r3
 801c1d4:	d117      	bne.n	801c206 <_strtod_l+0x8fe>
 801c1d6:	4b29      	ldr	r3, [pc, #164]	; (801c27c <_strtod_l+0x974>)
 801c1d8:	429f      	cmp	r7, r3
 801c1da:	d102      	bne.n	801c1e2 <_strtod_l+0x8da>
 801c1dc:	3001      	adds	r0, #1
 801c1de:	f43f addf 	beq.w	801bda0 <_strtod_l+0x498>
 801c1e2:	4b23      	ldr	r3, [pc, #140]	; (801c270 <_strtod_l+0x968>)
 801c1e4:	403b      	ands	r3, r7
 801c1e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801c1ea:	f04f 0a00 	mov.w	sl, #0
 801c1ee:	9b04      	ldr	r3, [sp, #16]
 801c1f0:	2b00      	cmp	r3, #0
 801c1f2:	d1a0      	bne.n	801c136 <_strtod_l+0x82e>
 801c1f4:	e5de      	b.n	801bdb4 <_strtod_l+0x4ac>
 801c1f6:	f04f 33ff 	mov.w	r3, #4294967295
 801c1fa:	e7ea      	b.n	801c1d2 <_strtod_l+0x8ca>
 801c1fc:	460b      	mov	r3, r1
 801c1fe:	e7e8      	b.n	801c1d2 <_strtod_l+0x8ca>
 801c200:	ea53 030a 	orrs.w	r3, r3, sl
 801c204:	d088      	beq.n	801c118 <_strtod_l+0x810>
 801c206:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c208:	b1db      	cbz	r3, 801c242 <_strtod_l+0x93a>
 801c20a:	423b      	tst	r3, r7
 801c20c:	d0ef      	beq.n	801c1ee <_strtod_l+0x8e6>
 801c20e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c210:	9a04      	ldr	r2, [sp, #16]
 801c212:	4650      	mov	r0, sl
 801c214:	4659      	mov	r1, fp
 801c216:	b1c3      	cbz	r3, 801c24a <_strtod_l+0x942>
 801c218:	f7ff fb58 	bl	801b8cc <sulp>
 801c21c:	4602      	mov	r2, r0
 801c21e:	460b      	mov	r3, r1
 801c220:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c224:	f7e4 f852 	bl	80002cc <__adddf3>
 801c228:	4682      	mov	sl, r0
 801c22a:	468b      	mov	fp, r1
 801c22c:	e7df      	b.n	801c1ee <_strtod_l+0x8e6>
 801c22e:	4013      	ands	r3, r2
 801c230:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801c234:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801c238:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801c23c:	f04f 3aff 	mov.w	sl, #4294967295
 801c240:	e7d5      	b.n	801c1ee <_strtod_l+0x8e6>
 801c242:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c244:	ea13 0f0a 	tst.w	r3, sl
 801c248:	e7e0      	b.n	801c20c <_strtod_l+0x904>
 801c24a:	f7ff fb3f 	bl	801b8cc <sulp>
 801c24e:	4602      	mov	r2, r0
 801c250:	460b      	mov	r3, r1
 801c252:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c256:	f7e4 f837 	bl	80002c8 <__aeabi_dsub>
 801c25a:	2200      	movs	r2, #0
 801c25c:	2300      	movs	r3, #0
 801c25e:	4682      	mov	sl, r0
 801c260:	468b      	mov	fp, r1
 801c262:	f7e4 fc51 	bl	8000b08 <__aeabi_dcmpeq>
 801c266:	2800      	cmp	r0, #0
 801c268:	d0c1      	beq.n	801c1ee <_strtod_l+0x8e6>
 801c26a:	e60e      	b.n	801be8a <_strtod_l+0x582>
 801c26c:	fffffc02 	.word	0xfffffc02
 801c270:	7ff00000 	.word	0x7ff00000
 801c274:	39500000 	.word	0x39500000
 801c278:	000fffff 	.word	0x000fffff
 801c27c:	7fefffff 	.word	0x7fefffff
 801c280:	080222e0 	.word	0x080222e0
 801c284:	4631      	mov	r1, r6
 801c286:	4628      	mov	r0, r5
 801c288:	f002 fed4 	bl	801f034 <__ratio>
 801c28c:	ec59 8b10 	vmov	r8, r9, d0
 801c290:	ee10 0a10 	vmov	r0, s0
 801c294:	2200      	movs	r2, #0
 801c296:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c29a:	4649      	mov	r1, r9
 801c29c:	f7e4 fc48 	bl	8000b30 <__aeabi_dcmple>
 801c2a0:	2800      	cmp	r0, #0
 801c2a2:	d07c      	beq.n	801c39e <_strtod_l+0xa96>
 801c2a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c2a6:	2b00      	cmp	r3, #0
 801c2a8:	d04c      	beq.n	801c344 <_strtod_l+0xa3c>
 801c2aa:	4b95      	ldr	r3, [pc, #596]	; (801c500 <_strtod_l+0xbf8>)
 801c2ac:	2200      	movs	r2, #0
 801c2ae:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801c2b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801c500 <_strtod_l+0xbf8>
 801c2b6:	f04f 0800 	mov.w	r8, #0
 801c2ba:	4b92      	ldr	r3, [pc, #584]	; (801c504 <_strtod_l+0xbfc>)
 801c2bc:	403b      	ands	r3, r7
 801c2be:	9311      	str	r3, [sp, #68]	; 0x44
 801c2c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c2c2:	4b91      	ldr	r3, [pc, #580]	; (801c508 <_strtod_l+0xc00>)
 801c2c4:	429a      	cmp	r2, r3
 801c2c6:	f040 80b2 	bne.w	801c42e <_strtod_l+0xb26>
 801c2ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c2ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c2d2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801c2d6:	ec4b ab10 	vmov	d0, sl, fp
 801c2da:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801c2de:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801c2e2:	f002 fdcf 	bl	801ee84 <__ulp>
 801c2e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c2ea:	ec53 2b10 	vmov	r2, r3, d0
 801c2ee:	f7e4 f9a3 	bl	8000638 <__aeabi_dmul>
 801c2f2:	4652      	mov	r2, sl
 801c2f4:	465b      	mov	r3, fp
 801c2f6:	f7e3 ffe9 	bl	80002cc <__adddf3>
 801c2fa:	460b      	mov	r3, r1
 801c2fc:	4981      	ldr	r1, [pc, #516]	; (801c504 <_strtod_l+0xbfc>)
 801c2fe:	4a83      	ldr	r2, [pc, #524]	; (801c50c <_strtod_l+0xc04>)
 801c300:	4019      	ands	r1, r3
 801c302:	4291      	cmp	r1, r2
 801c304:	4682      	mov	sl, r0
 801c306:	d95e      	bls.n	801c3c6 <_strtod_l+0xabe>
 801c308:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c30a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801c30e:	4293      	cmp	r3, r2
 801c310:	d103      	bne.n	801c31a <_strtod_l+0xa12>
 801c312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c314:	3301      	adds	r3, #1
 801c316:	f43f ad43 	beq.w	801bda0 <_strtod_l+0x498>
 801c31a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801c518 <_strtod_l+0xc10>
 801c31e:	f04f 3aff 	mov.w	sl, #4294967295
 801c322:	991e      	ldr	r1, [sp, #120]	; 0x78
 801c324:	4620      	mov	r0, r4
 801c326:	f002 fa81 	bl	801e82c <_Bfree>
 801c32a:	9907      	ldr	r1, [sp, #28]
 801c32c:	4620      	mov	r0, r4
 801c32e:	f002 fa7d 	bl	801e82c <_Bfree>
 801c332:	4631      	mov	r1, r6
 801c334:	4620      	mov	r0, r4
 801c336:	f002 fa79 	bl	801e82c <_Bfree>
 801c33a:	4629      	mov	r1, r5
 801c33c:	4620      	mov	r0, r4
 801c33e:	f002 fa75 	bl	801e82c <_Bfree>
 801c342:	e613      	b.n	801bf6c <_strtod_l+0x664>
 801c344:	f1ba 0f00 	cmp.w	sl, #0
 801c348:	d11b      	bne.n	801c382 <_strtod_l+0xa7a>
 801c34a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c34e:	b9f3      	cbnz	r3, 801c38e <_strtod_l+0xa86>
 801c350:	4b6b      	ldr	r3, [pc, #428]	; (801c500 <_strtod_l+0xbf8>)
 801c352:	2200      	movs	r2, #0
 801c354:	4640      	mov	r0, r8
 801c356:	4649      	mov	r1, r9
 801c358:	f7e4 fbe0 	bl	8000b1c <__aeabi_dcmplt>
 801c35c:	b9d0      	cbnz	r0, 801c394 <_strtod_l+0xa8c>
 801c35e:	4640      	mov	r0, r8
 801c360:	4649      	mov	r1, r9
 801c362:	4b6b      	ldr	r3, [pc, #428]	; (801c510 <_strtod_l+0xc08>)
 801c364:	2200      	movs	r2, #0
 801c366:	f7e4 f967 	bl	8000638 <__aeabi_dmul>
 801c36a:	4680      	mov	r8, r0
 801c36c:	4689      	mov	r9, r1
 801c36e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801c372:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801c376:	931b      	str	r3, [sp, #108]	; 0x6c
 801c378:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801c37c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801c380:	e79b      	b.n	801c2ba <_strtod_l+0x9b2>
 801c382:	f1ba 0f01 	cmp.w	sl, #1
 801c386:	d102      	bne.n	801c38e <_strtod_l+0xa86>
 801c388:	2f00      	cmp	r7, #0
 801c38a:	f43f ad7e 	beq.w	801be8a <_strtod_l+0x582>
 801c38e:	4b61      	ldr	r3, [pc, #388]	; (801c514 <_strtod_l+0xc0c>)
 801c390:	2200      	movs	r2, #0
 801c392:	e78c      	b.n	801c2ae <_strtod_l+0x9a6>
 801c394:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801c510 <_strtod_l+0xc08>
 801c398:	f04f 0800 	mov.w	r8, #0
 801c39c:	e7e7      	b.n	801c36e <_strtod_l+0xa66>
 801c39e:	4b5c      	ldr	r3, [pc, #368]	; (801c510 <_strtod_l+0xc08>)
 801c3a0:	4640      	mov	r0, r8
 801c3a2:	4649      	mov	r1, r9
 801c3a4:	2200      	movs	r2, #0
 801c3a6:	f7e4 f947 	bl	8000638 <__aeabi_dmul>
 801c3aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c3ac:	4680      	mov	r8, r0
 801c3ae:	4689      	mov	r9, r1
 801c3b0:	b933      	cbnz	r3, 801c3c0 <_strtod_l+0xab8>
 801c3b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c3b6:	9012      	str	r0, [sp, #72]	; 0x48
 801c3b8:	9313      	str	r3, [sp, #76]	; 0x4c
 801c3ba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801c3be:	e7dd      	b.n	801c37c <_strtod_l+0xa74>
 801c3c0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801c3c4:	e7f9      	b.n	801c3ba <_strtod_l+0xab2>
 801c3c6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801c3ca:	9b04      	ldr	r3, [sp, #16]
 801c3cc:	2b00      	cmp	r3, #0
 801c3ce:	d1a8      	bne.n	801c322 <_strtod_l+0xa1a>
 801c3d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c3d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c3d6:	0d1b      	lsrs	r3, r3, #20
 801c3d8:	051b      	lsls	r3, r3, #20
 801c3da:	429a      	cmp	r2, r3
 801c3dc:	d1a1      	bne.n	801c322 <_strtod_l+0xa1a>
 801c3de:	4640      	mov	r0, r8
 801c3e0:	4649      	mov	r1, r9
 801c3e2:	f7e4 fcd9 	bl	8000d98 <__aeabi_d2lz>
 801c3e6:	f7e4 f8f9 	bl	80005dc <__aeabi_l2d>
 801c3ea:	4602      	mov	r2, r0
 801c3ec:	460b      	mov	r3, r1
 801c3ee:	4640      	mov	r0, r8
 801c3f0:	4649      	mov	r1, r9
 801c3f2:	f7e3 ff69 	bl	80002c8 <__aeabi_dsub>
 801c3f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c3f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c3fc:	ea43 030a 	orr.w	r3, r3, sl
 801c400:	4313      	orrs	r3, r2
 801c402:	4680      	mov	r8, r0
 801c404:	4689      	mov	r9, r1
 801c406:	d053      	beq.n	801c4b0 <_strtod_l+0xba8>
 801c408:	a335      	add	r3, pc, #212	; (adr r3, 801c4e0 <_strtod_l+0xbd8>)
 801c40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c40e:	f7e4 fb85 	bl	8000b1c <__aeabi_dcmplt>
 801c412:	2800      	cmp	r0, #0
 801c414:	f47f acce 	bne.w	801bdb4 <_strtod_l+0x4ac>
 801c418:	a333      	add	r3, pc, #204	; (adr r3, 801c4e8 <_strtod_l+0xbe0>)
 801c41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c41e:	4640      	mov	r0, r8
 801c420:	4649      	mov	r1, r9
 801c422:	f7e4 fb99 	bl	8000b58 <__aeabi_dcmpgt>
 801c426:	2800      	cmp	r0, #0
 801c428:	f43f af7b 	beq.w	801c322 <_strtod_l+0xa1a>
 801c42c:	e4c2      	b.n	801bdb4 <_strtod_l+0x4ac>
 801c42e:	9b04      	ldr	r3, [sp, #16]
 801c430:	b333      	cbz	r3, 801c480 <_strtod_l+0xb78>
 801c432:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c434:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801c438:	d822      	bhi.n	801c480 <_strtod_l+0xb78>
 801c43a:	a32d      	add	r3, pc, #180	; (adr r3, 801c4f0 <_strtod_l+0xbe8>)
 801c43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c440:	4640      	mov	r0, r8
 801c442:	4649      	mov	r1, r9
 801c444:	f7e4 fb74 	bl	8000b30 <__aeabi_dcmple>
 801c448:	b1a0      	cbz	r0, 801c474 <_strtod_l+0xb6c>
 801c44a:	4649      	mov	r1, r9
 801c44c:	4640      	mov	r0, r8
 801c44e:	f7e4 fbcb 	bl	8000be8 <__aeabi_d2uiz>
 801c452:	2801      	cmp	r0, #1
 801c454:	bf38      	it	cc
 801c456:	2001      	movcc	r0, #1
 801c458:	f7e4 f874 	bl	8000544 <__aeabi_ui2d>
 801c45c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c45e:	4680      	mov	r8, r0
 801c460:	4689      	mov	r9, r1
 801c462:	bb13      	cbnz	r3, 801c4aa <_strtod_l+0xba2>
 801c464:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c468:	9014      	str	r0, [sp, #80]	; 0x50
 801c46a:	9315      	str	r3, [sp, #84]	; 0x54
 801c46c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801c470:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801c474:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c476:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c478:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801c47c:	1a9b      	subs	r3, r3, r2
 801c47e:	930d      	str	r3, [sp, #52]	; 0x34
 801c480:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c484:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801c488:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801c48c:	f002 fcfa 	bl	801ee84 <__ulp>
 801c490:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c494:	ec53 2b10 	vmov	r2, r3, d0
 801c498:	f7e4 f8ce 	bl	8000638 <__aeabi_dmul>
 801c49c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c4a0:	f7e3 ff14 	bl	80002cc <__adddf3>
 801c4a4:	4682      	mov	sl, r0
 801c4a6:	468b      	mov	fp, r1
 801c4a8:	e78f      	b.n	801c3ca <_strtod_l+0xac2>
 801c4aa:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801c4ae:	e7dd      	b.n	801c46c <_strtod_l+0xb64>
 801c4b0:	a311      	add	r3, pc, #68	; (adr r3, 801c4f8 <_strtod_l+0xbf0>)
 801c4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4b6:	f7e4 fb31 	bl	8000b1c <__aeabi_dcmplt>
 801c4ba:	e7b4      	b.n	801c426 <_strtod_l+0xb1e>
 801c4bc:	2300      	movs	r3, #0
 801c4be:	930e      	str	r3, [sp, #56]	; 0x38
 801c4c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801c4c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c4c4:	6013      	str	r3, [r2, #0]
 801c4c6:	f7ff ba65 	b.w	801b994 <_strtod_l+0x8c>
 801c4ca:	2b65      	cmp	r3, #101	; 0x65
 801c4cc:	f43f ab5d 	beq.w	801bb8a <_strtod_l+0x282>
 801c4d0:	2b45      	cmp	r3, #69	; 0x45
 801c4d2:	f43f ab5a 	beq.w	801bb8a <_strtod_l+0x282>
 801c4d6:	2201      	movs	r2, #1
 801c4d8:	f7ff bb92 	b.w	801bc00 <_strtod_l+0x2f8>
 801c4dc:	f3af 8000 	nop.w
 801c4e0:	94a03595 	.word	0x94a03595
 801c4e4:	3fdfffff 	.word	0x3fdfffff
 801c4e8:	35afe535 	.word	0x35afe535
 801c4ec:	3fe00000 	.word	0x3fe00000
 801c4f0:	ffc00000 	.word	0xffc00000
 801c4f4:	41dfffff 	.word	0x41dfffff
 801c4f8:	94a03595 	.word	0x94a03595
 801c4fc:	3fcfffff 	.word	0x3fcfffff
 801c500:	3ff00000 	.word	0x3ff00000
 801c504:	7ff00000 	.word	0x7ff00000
 801c508:	7fe00000 	.word	0x7fe00000
 801c50c:	7c9fffff 	.word	0x7c9fffff
 801c510:	3fe00000 	.word	0x3fe00000
 801c514:	bff00000 	.word	0xbff00000
 801c518:	7fefffff 	.word	0x7fefffff

0801c51c <_strtod_r>:
 801c51c:	4b01      	ldr	r3, [pc, #4]	; (801c524 <_strtod_r+0x8>)
 801c51e:	f7ff b9f3 	b.w	801b908 <_strtod_l>
 801c522:	bf00      	nop
 801c524:	200002c4 	.word	0x200002c4

0801c528 <strtok>:
 801c528:	4b16      	ldr	r3, [pc, #88]	; (801c584 <strtok+0x5c>)
 801c52a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c52c:	681e      	ldr	r6, [r3, #0]
 801c52e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 801c530:	4605      	mov	r5, r0
 801c532:	b9fc      	cbnz	r4, 801c574 <strtok+0x4c>
 801c534:	2050      	movs	r0, #80	; 0x50
 801c536:	9101      	str	r1, [sp, #4]
 801c538:	f7fd fddc 	bl	801a0f4 <malloc>
 801c53c:	9901      	ldr	r1, [sp, #4]
 801c53e:	65b0      	str	r0, [r6, #88]	; 0x58
 801c540:	4602      	mov	r2, r0
 801c542:	b920      	cbnz	r0, 801c54e <strtok+0x26>
 801c544:	4b10      	ldr	r3, [pc, #64]	; (801c588 <strtok+0x60>)
 801c546:	4811      	ldr	r0, [pc, #68]	; (801c58c <strtok+0x64>)
 801c548:	2157      	movs	r1, #87	; 0x57
 801c54a:	f000 fca3 	bl	801ce94 <__assert_func>
 801c54e:	e9c0 4400 	strd	r4, r4, [r0]
 801c552:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801c556:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801c55a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801c55e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801c562:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801c566:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801c56a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801c56e:	6184      	str	r4, [r0, #24]
 801c570:	7704      	strb	r4, [r0, #28]
 801c572:	6244      	str	r4, [r0, #36]	; 0x24
 801c574:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801c576:	2301      	movs	r3, #1
 801c578:	4628      	mov	r0, r5
 801c57a:	b002      	add	sp, #8
 801c57c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c580:	f000 b806 	b.w	801c590 <__strtok_r>
 801c584:	200001f8 	.word	0x200001f8
 801c588:	08022144 	.word	0x08022144
 801c58c:	08022308 	.word	0x08022308

0801c590 <__strtok_r>:
 801c590:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c592:	b908      	cbnz	r0, 801c598 <__strtok_r+0x8>
 801c594:	6810      	ldr	r0, [r2, #0]
 801c596:	b188      	cbz	r0, 801c5bc <__strtok_r+0x2c>
 801c598:	4604      	mov	r4, r0
 801c59a:	4620      	mov	r0, r4
 801c59c:	f814 5b01 	ldrb.w	r5, [r4], #1
 801c5a0:	460f      	mov	r7, r1
 801c5a2:	f817 6b01 	ldrb.w	r6, [r7], #1
 801c5a6:	b91e      	cbnz	r6, 801c5b0 <__strtok_r+0x20>
 801c5a8:	b965      	cbnz	r5, 801c5c4 <__strtok_r+0x34>
 801c5aa:	6015      	str	r5, [r2, #0]
 801c5ac:	4628      	mov	r0, r5
 801c5ae:	e005      	b.n	801c5bc <__strtok_r+0x2c>
 801c5b0:	42b5      	cmp	r5, r6
 801c5b2:	d1f6      	bne.n	801c5a2 <__strtok_r+0x12>
 801c5b4:	2b00      	cmp	r3, #0
 801c5b6:	d1f0      	bne.n	801c59a <__strtok_r+0xa>
 801c5b8:	6014      	str	r4, [r2, #0]
 801c5ba:	7003      	strb	r3, [r0, #0]
 801c5bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c5be:	461c      	mov	r4, r3
 801c5c0:	e00c      	b.n	801c5dc <__strtok_r+0x4c>
 801c5c2:	b915      	cbnz	r5, 801c5ca <__strtok_r+0x3a>
 801c5c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c5c8:	460e      	mov	r6, r1
 801c5ca:	f816 5b01 	ldrb.w	r5, [r6], #1
 801c5ce:	42ab      	cmp	r3, r5
 801c5d0:	d1f7      	bne.n	801c5c2 <__strtok_r+0x32>
 801c5d2:	2b00      	cmp	r3, #0
 801c5d4:	d0f3      	beq.n	801c5be <__strtok_r+0x2e>
 801c5d6:	2300      	movs	r3, #0
 801c5d8:	f804 3c01 	strb.w	r3, [r4, #-1]
 801c5dc:	6014      	str	r4, [r2, #0]
 801c5de:	e7ed      	b.n	801c5bc <__strtok_r+0x2c>

0801c5e0 <_strtol_l.isra.0>:
 801c5e0:	2b01      	cmp	r3, #1
 801c5e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c5e6:	d001      	beq.n	801c5ec <_strtol_l.isra.0+0xc>
 801c5e8:	2b24      	cmp	r3, #36	; 0x24
 801c5ea:	d906      	bls.n	801c5fa <_strtol_l.isra.0+0x1a>
 801c5ec:	f7fd fb40 	bl	8019c70 <__errno>
 801c5f0:	2316      	movs	r3, #22
 801c5f2:	6003      	str	r3, [r0, #0]
 801c5f4:	2000      	movs	r0, #0
 801c5f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c5fa:	4f3a      	ldr	r7, [pc, #232]	; (801c6e4 <_strtol_l.isra.0+0x104>)
 801c5fc:	468e      	mov	lr, r1
 801c5fe:	4676      	mov	r6, lr
 801c600:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801c604:	5de5      	ldrb	r5, [r4, r7]
 801c606:	f015 0508 	ands.w	r5, r5, #8
 801c60a:	d1f8      	bne.n	801c5fe <_strtol_l.isra.0+0x1e>
 801c60c:	2c2d      	cmp	r4, #45	; 0x2d
 801c60e:	d134      	bne.n	801c67a <_strtol_l.isra.0+0x9a>
 801c610:	f89e 4000 	ldrb.w	r4, [lr]
 801c614:	f04f 0801 	mov.w	r8, #1
 801c618:	f106 0e02 	add.w	lr, r6, #2
 801c61c:	2b00      	cmp	r3, #0
 801c61e:	d05c      	beq.n	801c6da <_strtol_l.isra.0+0xfa>
 801c620:	2b10      	cmp	r3, #16
 801c622:	d10c      	bne.n	801c63e <_strtol_l.isra.0+0x5e>
 801c624:	2c30      	cmp	r4, #48	; 0x30
 801c626:	d10a      	bne.n	801c63e <_strtol_l.isra.0+0x5e>
 801c628:	f89e 4000 	ldrb.w	r4, [lr]
 801c62c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801c630:	2c58      	cmp	r4, #88	; 0x58
 801c632:	d14d      	bne.n	801c6d0 <_strtol_l.isra.0+0xf0>
 801c634:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801c638:	2310      	movs	r3, #16
 801c63a:	f10e 0e02 	add.w	lr, lr, #2
 801c63e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801c642:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c646:	2600      	movs	r6, #0
 801c648:	fbbc f9f3 	udiv	r9, ip, r3
 801c64c:	4635      	mov	r5, r6
 801c64e:	fb03 ca19 	mls	sl, r3, r9, ip
 801c652:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801c656:	2f09      	cmp	r7, #9
 801c658:	d818      	bhi.n	801c68c <_strtol_l.isra.0+0xac>
 801c65a:	463c      	mov	r4, r7
 801c65c:	42a3      	cmp	r3, r4
 801c65e:	dd24      	ble.n	801c6aa <_strtol_l.isra.0+0xca>
 801c660:	2e00      	cmp	r6, #0
 801c662:	db1f      	blt.n	801c6a4 <_strtol_l.isra.0+0xc4>
 801c664:	45a9      	cmp	r9, r5
 801c666:	d31d      	bcc.n	801c6a4 <_strtol_l.isra.0+0xc4>
 801c668:	d101      	bne.n	801c66e <_strtol_l.isra.0+0x8e>
 801c66a:	45a2      	cmp	sl, r4
 801c66c:	db1a      	blt.n	801c6a4 <_strtol_l.isra.0+0xc4>
 801c66e:	fb05 4503 	mla	r5, r5, r3, r4
 801c672:	2601      	movs	r6, #1
 801c674:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801c678:	e7eb      	b.n	801c652 <_strtol_l.isra.0+0x72>
 801c67a:	2c2b      	cmp	r4, #43	; 0x2b
 801c67c:	bf08      	it	eq
 801c67e:	f89e 4000 	ldrbeq.w	r4, [lr]
 801c682:	46a8      	mov	r8, r5
 801c684:	bf08      	it	eq
 801c686:	f106 0e02 	addeq.w	lr, r6, #2
 801c68a:	e7c7      	b.n	801c61c <_strtol_l.isra.0+0x3c>
 801c68c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801c690:	2f19      	cmp	r7, #25
 801c692:	d801      	bhi.n	801c698 <_strtol_l.isra.0+0xb8>
 801c694:	3c37      	subs	r4, #55	; 0x37
 801c696:	e7e1      	b.n	801c65c <_strtol_l.isra.0+0x7c>
 801c698:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801c69c:	2f19      	cmp	r7, #25
 801c69e:	d804      	bhi.n	801c6aa <_strtol_l.isra.0+0xca>
 801c6a0:	3c57      	subs	r4, #87	; 0x57
 801c6a2:	e7db      	b.n	801c65c <_strtol_l.isra.0+0x7c>
 801c6a4:	f04f 36ff 	mov.w	r6, #4294967295
 801c6a8:	e7e4      	b.n	801c674 <_strtol_l.isra.0+0x94>
 801c6aa:	2e00      	cmp	r6, #0
 801c6ac:	da05      	bge.n	801c6ba <_strtol_l.isra.0+0xda>
 801c6ae:	2322      	movs	r3, #34	; 0x22
 801c6b0:	6003      	str	r3, [r0, #0]
 801c6b2:	4665      	mov	r5, ip
 801c6b4:	b942      	cbnz	r2, 801c6c8 <_strtol_l.isra.0+0xe8>
 801c6b6:	4628      	mov	r0, r5
 801c6b8:	e79d      	b.n	801c5f6 <_strtol_l.isra.0+0x16>
 801c6ba:	f1b8 0f00 	cmp.w	r8, #0
 801c6be:	d000      	beq.n	801c6c2 <_strtol_l.isra.0+0xe2>
 801c6c0:	426d      	negs	r5, r5
 801c6c2:	2a00      	cmp	r2, #0
 801c6c4:	d0f7      	beq.n	801c6b6 <_strtol_l.isra.0+0xd6>
 801c6c6:	b10e      	cbz	r6, 801c6cc <_strtol_l.isra.0+0xec>
 801c6c8:	f10e 31ff 	add.w	r1, lr, #4294967295
 801c6cc:	6011      	str	r1, [r2, #0]
 801c6ce:	e7f2      	b.n	801c6b6 <_strtol_l.isra.0+0xd6>
 801c6d0:	2430      	movs	r4, #48	; 0x30
 801c6d2:	2b00      	cmp	r3, #0
 801c6d4:	d1b3      	bne.n	801c63e <_strtol_l.isra.0+0x5e>
 801c6d6:	2308      	movs	r3, #8
 801c6d8:	e7b1      	b.n	801c63e <_strtol_l.isra.0+0x5e>
 801c6da:	2c30      	cmp	r4, #48	; 0x30
 801c6dc:	d0a4      	beq.n	801c628 <_strtol_l.isra.0+0x48>
 801c6de:	230a      	movs	r3, #10
 801c6e0:	e7ad      	b.n	801c63e <_strtol_l.isra.0+0x5e>
 801c6e2:	bf00      	nop
 801c6e4:	08021fdd 	.word	0x08021fdd

0801c6e8 <_strtol_r>:
 801c6e8:	f7ff bf7a 	b.w	801c5e0 <_strtol_l.isra.0>

0801c6ec <strtol>:
 801c6ec:	4613      	mov	r3, r2
 801c6ee:	460a      	mov	r2, r1
 801c6f0:	4601      	mov	r1, r0
 801c6f2:	4802      	ldr	r0, [pc, #8]	; (801c6fc <strtol+0x10>)
 801c6f4:	6800      	ldr	r0, [r0, #0]
 801c6f6:	f7ff bf73 	b.w	801c5e0 <_strtol_l.isra.0>
 801c6fa:	bf00      	nop
 801c6fc:	200001f8 	.word	0x200001f8

0801c700 <_strtoul_l.isra.0>:
 801c700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c704:	4e3b      	ldr	r6, [pc, #236]	; (801c7f4 <_strtoul_l.isra.0+0xf4>)
 801c706:	4686      	mov	lr, r0
 801c708:	468c      	mov	ip, r1
 801c70a:	4660      	mov	r0, ip
 801c70c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801c710:	5da5      	ldrb	r5, [r4, r6]
 801c712:	f015 0508 	ands.w	r5, r5, #8
 801c716:	d1f8      	bne.n	801c70a <_strtoul_l.isra.0+0xa>
 801c718:	2c2d      	cmp	r4, #45	; 0x2d
 801c71a:	d134      	bne.n	801c786 <_strtoul_l.isra.0+0x86>
 801c71c:	f89c 4000 	ldrb.w	r4, [ip]
 801c720:	f04f 0801 	mov.w	r8, #1
 801c724:	f100 0c02 	add.w	ip, r0, #2
 801c728:	2b00      	cmp	r3, #0
 801c72a:	d05e      	beq.n	801c7ea <_strtoul_l.isra.0+0xea>
 801c72c:	2b10      	cmp	r3, #16
 801c72e:	d10c      	bne.n	801c74a <_strtoul_l.isra.0+0x4a>
 801c730:	2c30      	cmp	r4, #48	; 0x30
 801c732:	d10a      	bne.n	801c74a <_strtoul_l.isra.0+0x4a>
 801c734:	f89c 0000 	ldrb.w	r0, [ip]
 801c738:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801c73c:	2858      	cmp	r0, #88	; 0x58
 801c73e:	d14f      	bne.n	801c7e0 <_strtoul_l.isra.0+0xe0>
 801c740:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801c744:	2310      	movs	r3, #16
 801c746:	f10c 0c02 	add.w	ip, ip, #2
 801c74a:	f04f 37ff 	mov.w	r7, #4294967295
 801c74e:	2500      	movs	r5, #0
 801c750:	fbb7 f7f3 	udiv	r7, r7, r3
 801c754:	fb03 f907 	mul.w	r9, r3, r7
 801c758:	ea6f 0909 	mvn.w	r9, r9
 801c75c:	4628      	mov	r0, r5
 801c75e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801c762:	2e09      	cmp	r6, #9
 801c764:	d818      	bhi.n	801c798 <_strtoul_l.isra.0+0x98>
 801c766:	4634      	mov	r4, r6
 801c768:	42a3      	cmp	r3, r4
 801c76a:	dd24      	ble.n	801c7b6 <_strtoul_l.isra.0+0xb6>
 801c76c:	2d00      	cmp	r5, #0
 801c76e:	db1f      	blt.n	801c7b0 <_strtoul_l.isra.0+0xb0>
 801c770:	4287      	cmp	r7, r0
 801c772:	d31d      	bcc.n	801c7b0 <_strtoul_l.isra.0+0xb0>
 801c774:	d101      	bne.n	801c77a <_strtoul_l.isra.0+0x7a>
 801c776:	45a1      	cmp	r9, r4
 801c778:	db1a      	blt.n	801c7b0 <_strtoul_l.isra.0+0xb0>
 801c77a:	fb00 4003 	mla	r0, r0, r3, r4
 801c77e:	2501      	movs	r5, #1
 801c780:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801c784:	e7eb      	b.n	801c75e <_strtoul_l.isra.0+0x5e>
 801c786:	2c2b      	cmp	r4, #43	; 0x2b
 801c788:	bf08      	it	eq
 801c78a:	f89c 4000 	ldrbeq.w	r4, [ip]
 801c78e:	46a8      	mov	r8, r5
 801c790:	bf08      	it	eq
 801c792:	f100 0c02 	addeq.w	ip, r0, #2
 801c796:	e7c7      	b.n	801c728 <_strtoul_l.isra.0+0x28>
 801c798:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801c79c:	2e19      	cmp	r6, #25
 801c79e:	d801      	bhi.n	801c7a4 <_strtoul_l.isra.0+0xa4>
 801c7a0:	3c37      	subs	r4, #55	; 0x37
 801c7a2:	e7e1      	b.n	801c768 <_strtoul_l.isra.0+0x68>
 801c7a4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801c7a8:	2e19      	cmp	r6, #25
 801c7aa:	d804      	bhi.n	801c7b6 <_strtoul_l.isra.0+0xb6>
 801c7ac:	3c57      	subs	r4, #87	; 0x57
 801c7ae:	e7db      	b.n	801c768 <_strtoul_l.isra.0+0x68>
 801c7b0:	f04f 35ff 	mov.w	r5, #4294967295
 801c7b4:	e7e4      	b.n	801c780 <_strtoul_l.isra.0+0x80>
 801c7b6:	2d00      	cmp	r5, #0
 801c7b8:	da07      	bge.n	801c7ca <_strtoul_l.isra.0+0xca>
 801c7ba:	2322      	movs	r3, #34	; 0x22
 801c7bc:	f8ce 3000 	str.w	r3, [lr]
 801c7c0:	f04f 30ff 	mov.w	r0, #4294967295
 801c7c4:	b942      	cbnz	r2, 801c7d8 <_strtoul_l.isra.0+0xd8>
 801c7c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c7ca:	f1b8 0f00 	cmp.w	r8, #0
 801c7ce:	d000      	beq.n	801c7d2 <_strtoul_l.isra.0+0xd2>
 801c7d0:	4240      	negs	r0, r0
 801c7d2:	2a00      	cmp	r2, #0
 801c7d4:	d0f7      	beq.n	801c7c6 <_strtoul_l.isra.0+0xc6>
 801c7d6:	b10d      	cbz	r5, 801c7dc <_strtoul_l.isra.0+0xdc>
 801c7d8:	f10c 31ff 	add.w	r1, ip, #4294967295
 801c7dc:	6011      	str	r1, [r2, #0]
 801c7de:	e7f2      	b.n	801c7c6 <_strtoul_l.isra.0+0xc6>
 801c7e0:	2430      	movs	r4, #48	; 0x30
 801c7e2:	2b00      	cmp	r3, #0
 801c7e4:	d1b1      	bne.n	801c74a <_strtoul_l.isra.0+0x4a>
 801c7e6:	2308      	movs	r3, #8
 801c7e8:	e7af      	b.n	801c74a <_strtoul_l.isra.0+0x4a>
 801c7ea:	2c30      	cmp	r4, #48	; 0x30
 801c7ec:	d0a2      	beq.n	801c734 <_strtoul_l.isra.0+0x34>
 801c7ee:	230a      	movs	r3, #10
 801c7f0:	e7ab      	b.n	801c74a <_strtoul_l.isra.0+0x4a>
 801c7f2:	bf00      	nop
 801c7f4:	08021fdd 	.word	0x08021fdd

0801c7f8 <_strtoul_r>:
 801c7f8:	f7ff bf82 	b.w	801c700 <_strtoul_l.isra.0>

0801c7fc <strtoul>:
 801c7fc:	4613      	mov	r3, r2
 801c7fe:	460a      	mov	r2, r1
 801c800:	4601      	mov	r1, r0
 801c802:	4802      	ldr	r0, [pc, #8]	; (801c80c <strtoul+0x10>)
 801c804:	6800      	ldr	r0, [r0, #0]
 801c806:	f7ff bf7b 	b.w	801c700 <_strtoul_l.isra.0>
 801c80a:	bf00      	nop
 801c80c:	200001f8 	.word	0x200001f8

0801c810 <__tzcalc_limits>:
 801c810:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c814:	4680      	mov	r8, r0
 801c816:	f001 fe7d 	bl	801e514 <__gettzinfo>
 801c81a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801c81e:	4598      	cmp	r8, r3
 801c820:	f340 8098 	ble.w	801c954 <__tzcalc_limits+0x144>
 801c824:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 801c828:	4443      	add	r3, r8
 801c82a:	109b      	asrs	r3, r3, #2
 801c82c:	f240 126d 	movw	r2, #365	; 0x16d
 801c830:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 801c834:	fb02 3505 	mla	r5, r2, r5, r3
 801c838:	f06f 0263 	mvn.w	r2, #99	; 0x63
 801c83c:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 801c840:	fb93 f3f2 	sdiv	r3, r3, r2
 801c844:	441d      	add	r5, r3
 801c846:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801c84a:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801c84e:	fb98 f7f3 	sdiv	r7, r8, r3
 801c852:	fb03 8717 	mls	r7, r3, r7, r8
 801c856:	4442      	add	r2, r8
 801c858:	fab7 fc87 	clz	ip, r7
 801c85c:	fbb2 f2f3 	udiv	r2, r2, r3
 801c860:	f008 0303 	and.w	r3, r8, #3
 801c864:	4415      	add	r5, r2
 801c866:	2264      	movs	r2, #100	; 0x64
 801c868:	f8c0 8004 	str.w	r8, [r0, #4]
 801c86c:	fb98 f6f2 	sdiv	r6, r8, r2
 801c870:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801c874:	fb02 8616 	mls	r6, r2, r6, r8
 801c878:	4604      	mov	r4, r0
 801c87a:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801c87e:	9300      	str	r3, [sp, #0]
 801c880:	f04f 0e07 	mov.w	lr, #7
 801c884:	7a22      	ldrb	r2, [r4, #8]
 801c886:	6963      	ldr	r3, [r4, #20]
 801c888:	2a4a      	cmp	r2, #74	; 0x4a
 801c88a:	d128      	bne.n	801c8de <__tzcalc_limits+0xce>
 801c88c:	9900      	ldr	r1, [sp, #0]
 801c88e:	18ea      	adds	r2, r5, r3
 801c890:	b901      	cbnz	r1, 801c894 <__tzcalc_limits+0x84>
 801c892:	b906      	cbnz	r6, 801c896 <__tzcalc_limits+0x86>
 801c894:	bb0f      	cbnz	r7, 801c8da <__tzcalc_limits+0xca>
 801c896:	2b3b      	cmp	r3, #59	; 0x3b
 801c898:	bfd4      	ite	le
 801c89a:	2300      	movle	r3, #0
 801c89c:	2301      	movgt	r3, #1
 801c89e:	4413      	add	r3, r2
 801c8a0:	1e5a      	subs	r2, r3, #1
 801c8a2:	69a3      	ldr	r3, [r4, #24]
 801c8a4:	492c      	ldr	r1, [pc, #176]	; (801c958 <__tzcalc_limits+0x148>)
 801c8a6:	fb01 3202 	mla	r2, r1, r2, r3
 801c8aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801c8ac:	4413      	add	r3, r2
 801c8ae:	461a      	mov	r2, r3
 801c8b0:	17db      	asrs	r3, r3, #31
 801c8b2:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801c8b6:	3428      	adds	r4, #40	; 0x28
 801c8b8:	45a3      	cmp	fp, r4
 801c8ba:	d1e3      	bne.n	801c884 <__tzcalc_limits+0x74>
 801c8bc:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 801c8c0:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 801c8c4:	4294      	cmp	r4, r2
 801c8c6:	eb75 0303 	sbcs.w	r3, r5, r3
 801c8ca:	bfb4      	ite	lt
 801c8cc:	2301      	movlt	r3, #1
 801c8ce:	2300      	movge	r3, #0
 801c8d0:	6003      	str	r3, [r0, #0]
 801c8d2:	2001      	movs	r0, #1
 801c8d4:	b003      	add	sp, #12
 801c8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8da:	2300      	movs	r3, #0
 801c8dc:	e7df      	b.n	801c89e <__tzcalc_limits+0x8e>
 801c8de:	2a44      	cmp	r2, #68	; 0x44
 801c8e0:	d101      	bne.n	801c8e6 <__tzcalc_limits+0xd6>
 801c8e2:	18ea      	adds	r2, r5, r3
 801c8e4:	e7dd      	b.n	801c8a2 <__tzcalc_limits+0x92>
 801c8e6:	9a00      	ldr	r2, [sp, #0]
 801c8e8:	bb72      	cbnz	r2, 801c948 <__tzcalc_limits+0x138>
 801c8ea:	2e00      	cmp	r6, #0
 801c8ec:	bf0c      	ite	eq
 801c8ee:	46e0      	moveq	r8, ip
 801c8f0:	f04f 0801 	movne.w	r8, #1
 801c8f4:	4919      	ldr	r1, [pc, #100]	; (801c95c <__tzcalc_limits+0x14c>)
 801c8f6:	68e2      	ldr	r2, [r4, #12]
 801c8f8:	9201      	str	r2, [sp, #4]
 801c8fa:	f04f 0a30 	mov.w	sl, #48	; 0x30
 801c8fe:	fb0a 1808 	mla	r8, sl, r8, r1
 801c902:	462a      	mov	r2, r5
 801c904:	f04f 0900 	mov.w	r9, #0
 801c908:	f1a8 0804 	sub.w	r8, r8, #4
 801c90c:	9901      	ldr	r1, [sp, #4]
 801c90e:	f109 0901 	add.w	r9, r9, #1
 801c912:	4549      	cmp	r1, r9
 801c914:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 801c918:	dc18      	bgt.n	801c94c <__tzcalc_limits+0x13c>
 801c91a:	f102 0804 	add.w	r8, r2, #4
 801c91e:	fb98 f9fe 	sdiv	r9, r8, lr
 801c922:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 801c926:	eba8 0909 	sub.w	r9, r8, r9
 801c92a:	ebb3 0909 	subs.w	r9, r3, r9
 801c92e:	6923      	ldr	r3, [r4, #16]
 801c930:	f103 33ff 	add.w	r3, r3, #4294967295
 801c934:	bf48      	it	mi
 801c936:	f109 0907 	addmi.w	r9, r9, #7
 801c93a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801c93e:	444b      	add	r3, r9
 801c940:	4553      	cmp	r3, sl
 801c942:	da05      	bge.n	801c950 <__tzcalc_limits+0x140>
 801c944:	441a      	add	r2, r3
 801c946:	e7ac      	b.n	801c8a2 <__tzcalc_limits+0x92>
 801c948:	46e0      	mov	r8, ip
 801c94a:	e7d3      	b.n	801c8f4 <__tzcalc_limits+0xe4>
 801c94c:	4452      	add	r2, sl
 801c94e:	e7dd      	b.n	801c90c <__tzcalc_limits+0xfc>
 801c950:	3b07      	subs	r3, #7
 801c952:	e7f5      	b.n	801c940 <__tzcalc_limits+0x130>
 801c954:	2000      	movs	r0, #0
 801c956:	e7bd      	b.n	801c8d4 <__tzcalc_limits+0xc4>
 801c958:	00015180 	.word	0x00015180
 801c95c:	0802221c 	.word	0x0802221c

0801c960 <__tz_lock>:
 801c960:	4801      	ldr	r0, [pc, #4]	; (801c968 <__tz_lock+0x8>)
 801c962:	f7fd bbc2 	b.w	801a0ea <__retarget_lock_acquire>
 801c966:	bf00      	nop
 801c968:	20008d53 	.word	0x20008d53

0801c96c <__tz_unlock>:
 801c96c:	4801      	ldr	r0, [pc, #4]	; (801c974 <__tz_unlock+0x8>)
 801c96e:	f7fd bbbe 	b.w	801a0ee <__retarget_lock_release>
 801c972:	bf00      	nop
 801c974:	20008d53 	.word	0x20008d53

0801c978 <_tzset_unlocked>:
 801c978:	4b01      	ldr	r3, [pc, #4]	; (801c980 <_tzset_unlocked+0x8>)
 801c97a:	6818      	ldr	r0, [r3, #0]
 801c97c:	f000 b802 	b.w	801c984 <_tzset_unlocked_r>
 801c980:	200001f8 	.word	0x200001f8

0801c984 <_tzset_unlocked_r>:
 801c984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c988:	b08d      	sub	sp, #52	; 0x34
 801c98a:	4607      	mov	r7, r0
 801c98c:	f001 fdc2 	bl	801e514 <__gettzinfo>
 801c990:	49ae      	ldr	r1, [pc, #696]	; (801cc4c <_tzset_unlocked_r+0x2c8>)
 801c992:	4eaf      	ldr	r6, [pc, #700]	; (801cc50 <_tzset_unlocked_r+0x2cc>)
 801c994:	4605      	mov	r5, r0
 801c996:	4638      	mov	r0, r7
 801c998:	f001 fdb4 	bl	801e504 <_getenv_r>
 801c99c:	4604      	mov	r4, r0
 801c99e:	b970      	cbnz	r0, 801c9be <_tzset_unlocked_r+0x3a>
 801c9a0:	4bac      	ldr	r3, [pc, #688]	; (801cc54 <_tzset_unlocked_r+0x2d0>)
 801c9a2:	4aad      	ldr	r2, [pc, #692]	; (801cc58 <_tzset_unlocked_r+0x2d4>)
 801c9a4:	6018      	str	r0, [r3, #0]
 801c9a6:	4bad      	ldr	r3, [pc, #692]	; (801cc5c <_tzset_unlocked_r+0x2d8>)
 801c9a8:	6018      	str	r0, [r3, #0]
 801c9aa:	4bad      	ldr	r3, [pc, #692]	; (801cc60 <_tzset_unlocked_r+0x2dc>)
 801c9ac:	6830      	ldr	r0, [r6, #0]
 801c9ae:	e9c3 2200 	strd	r2, r2, [r3]
 801c9b2:	f7fd fba7 	bl	801a104 <free>
 801c9b6:	6034      	str	r4, [r6, #0]
 801c9b8:	b00d      	add	sp, #52	; 0x34
 801c9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9be:	6831      	ldr	r1, [r6, #0]
 801c9c0:	2900      	cmp	r1, #0
 801c9c2:	d15f      	bne.n	801ca84 <_tzset_unlocked_r+0x100>
 801c9c4:	6830      	ldr	r0, [r6, #0]
 801c9c6:	f7fd fb9d 	bl	801a104 <free>
 801c9ca:	4620      	mov	r0, r4
 801c9cc:	f7e3 fc1a 	bl	8000204 <strlen>
 801c9d0:	1c41      	adds	r1, r0, #1
 801c9d2:	4638      	mov	r0, r7
 801c9d4:	f7fd fe9c 	bl	801a710 <_malloc_r>
 801c9d8:	6030      	str	r0, [r6, #0]
 801c9da:	2800      	cmp	r0, #0
 801c9dc:	d157      	bne.n	801ca8e <_tzset_unlocked_r+0x10a>
 801c9de:	7823      	ldrb	r3, [r4, #0]
 801c9e0:	4aa0      	ldr	r2, [pc, #640]	; (801cc64 <_tzset_unlocked_r+0x2e0>)
 801c9e2:	49a1      	ldr	r1, [pc, #644]	; (801cc68 <_tzset_unlocked_r+0x2e4>)
 801c9e4:	2b3a      	cmp	r3, #58	; 0x3a
 801c9e6:	bf08      	it	eq
 801c9e8:	3401      	addeq	r4, #1
 801c9ea:	ae0a      	add	r6, sp, #40	; 0x28
 801c9ec:	4633      	mov	r3, r6
 801c9ee:	4620      	mov	r0, r4
 801c9f0:	f7fe fed4 	bl	801b79c <siscanf>
 801c9f4:	2800      	cmp	r0, #0
 801c9f6:	dddf      	ble.n	801c9b8 <_tzset_unlocked_r+0x34>
 801c9f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c9fa:	18e7      	adds	r7, r4, r3
 801c9fc:	5ce3      	ldrb	r3, [r4, r3]
 801c9fe:	2b2d      	cmp	r3, #45	; 0x2d
 801ca00:	d149      	bne.n	801ca96 <_tzset_unlocked_r+0x112>
 801ca02:	3701      	adds	r7, #1
 801ca04:	f04f 34ff 	mov.w	r4, #4294967295
 801ca08:	f10d 0a20 	add.w	sl, sp, #32
 801ca0c:	f10d 0b1e 	add.w	fp, sp, #30
 801ca10:	f04f 0800 	mov.w	r8, #0
 801ca14:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801ca18:	4994      	ldr	r1, [pc, #592]	; (801cc6c <_tzset_unlocked_r+0x2e8>)
 801ca1a:	9603      	str	r6, [sp, #12]
 801ca1c:	f8cd b000 	str.w	fp, [sp]
 801ca20:	4633      	mov	r3, r6
 801ca22:	aa07      	add	r2, sp, #28
 801ca24:	4638      	mov	r0, r7
 801ca26:	f8ad 801e 	strh.w	r8, [sp, #30]
 801ca2a:	f8ad 8020 	strh.w	r8, [sp, #32]
 801ca2e:	f7fe feb5 	bl	801b79c <siscanf>
 801ca32:	4540      	cmp	r0, r8
 801ca34:	ddc0      	ble.n	801c9b8 <_tzset_unlocked_r+0x34>
 801ca36:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801ca3a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801ca3e:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801cc78 <_tzset_unlocked_r+0x2f4>
 801ca42:	213c      	movs	r1, #60	; 0x3c
 801ca44:	fb01 2203 	mla	r2, r1, r3, r2
 801ca48:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801ca4c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801ca50:	fb01 2303 	mla	r3, r1, r3, r2
 801ca54:	435c      	muls	r4, r3
 801ca56:	62ac      	str	r4, [r5, #40]	; 0x28
 801ca58:	4c81      	ldr	r4, [pc, #516]	; (801cc60 <_tzset_unlocked_r+0x2dc>)
 801ca5a:	4b82      	ldr	r3, [pc, #520]	; (801cc64 <_tzset_unlocked_r+0x2e0>)
 801ca5c:	6023      	str	r3, [r4, #0]
 801ca5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ca60:	4981      	ldr	r1, [pc, #516]	; (801cc68 <_tzset_unlocked_r+0x2e4>)
 801ca62:	441f      	add	r7, r3
 801ca64:	464a      	mov	r2, r9
 801ca66:	4633      	mov	r3, r6
 801ca68:	4638      	mov	r0, r7
 801ca6a:	f7fe fe97 	bl	801b79c <siscanf>
 801ca6e:	4540      	cmp	r0, r8
 801ca70:	dc16      	bgt.n	801caa0 <_tzset_unlocked_r+0x11c>
 801ca72:	6823      	ldr	r3, [r4, #0]
 801ca74:	6063      	str	r3, [r4, #4]
 801ca76:	4b77      	ldr	r3, [pc, #476]	; (801cc54 <_tzset_unlocked_r+0x2d0>)
 801ca78:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801ca7a:	601a      	str	r2, [r3, #0]
 801ca7c:	4b77      	ldr	r3, [pc, #476]	; (801cc5c <_tzset_unlocked_r+0x2d8>)
 801ca7e:	f8c3 8000 	str.w	r8, [r3]
 801ca82:	e799      	b.n	801c9b8 <_tzset_unlocked_r+0x34>
 801ca84:	f7e3 fbb4 	bl	80001f0 <strcmp>
 801ca88:	2800      	cmp	r0, #0
 801ca8a:	d19b      	bne.n	801c9c4 <_tzset_unlocked_r+0x40>
 801ca8c:	e794      	b.n	801c9b8 <_tzset_unlocked_r+0x34>
 801ca8e:	4621      	mov	r1, r4
 801ca90:	f7fe ff02 	bl	801b898 <strcpy>
 801ca94:	e7a3      	b.n	801c9de <_tzset_unlocked_r+0x5a>
 801ca96:	2b2b      	cmp	r3, #43	; 0x2b
 801ca98:	bf08      	it	eq
 801ca9a:	3701      	addeq	r7, #1
 801ca9c:	2401      	movs	r4, #1
 801ca9e:	e7b3      	b.n	801ca08 <_tzset_unlocked_r+0x84>
 801caa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801caa2:	f8c4 9004 	str.w	r9, [r4, #4]
 801caa6:	18fc      	adds	r4, r7, r3
 801caa8:	5cfb      	ldrb	r3, [r7, r3]
 801caaa:	2b2d      	cmp	r3, #45	; 0x2d
 801caac:	f040 808b 	bne.w	801cbc6 <_tzset_unlocked_r+0x242>
 801cab0:	3401      	adds	r4, #1
 801cab2:	f04f 37ff 	mov.w	r7, #4294967295
 801cab6:	2300      	movs	r3, #0
 801cab8:	f8ad 301c 	strh.w	r3, [sp, #28]
 801cabc:	f8ad 301e 	strh.w	r3, [sp, #30]
 801cac0:	f8ad 3020 	strh.w	r3, [sp, #32]
 801cac4:	930a      	str	r3, [sp, #40]	; 0x28
 801cac6:	e9cd a602 	strd	sl, r6, [sp, #8]
 801caca:	e9cd b600 	strd	fp, r6, [sp]
 801cace:	4967      	ldr	r1, [pc, #412]	; (801cc6c <_tzset_unlocked_r+0x2e8>)
 801cad0:	4633      	mov	r3, r6
 801cad2:	aa07      	add	r2, sp, #28
 801cad4:	4620      	mov	r0, r4
 801cad6:	f7fe fe61 	bl	801b79c <siscanf>
 801cada:	2800      	cmp	r0, #0
 801cadc:	dc78      	bgt.n	801cbd0 <_tzset_unlocked_r+0x24c>
 801cade:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 801cae0:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 801cae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cae6:	652f      	str	r7, [r5, #80]	; 0x50
 801cae8:	441c      	add	r4, r3
 801caea:	462f      	mov	r7, r5
 801caec:	f04f 0900 	mov.w	r9, #0
 801caf0:	7823      	ldrb	r3, [r4, #0]
 801caf2:	2b2c      	cmp	r3, #44	; 0x2c
 801caf4:	bf08      	it	eq
 801caf6:	3401      	addeq	r4, #1
 801caf8:	f894 8000 	ldrb.w	r8, [r4]
 801cafc:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801cb00:	d178      	bne.n	801cbf4 <_tzset_unlocked_r+0x270>
 801cb02:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801cb06:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801cb0a:	ab09      	add	r3, sp, #36	; 0x24
 801cb0c:	9300      	str	r3, [sp, #0]
 801cb0e:	4958      	ldr	r1, [pc, #352]	; (801cc70 <_tzset_unlocked_r+0x2ec>)
 801cb10:	9603      	str	r6, [sp, #12]
 801cb12:	4633      	mov	r3, r6
 801cb14:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 801cb18:	4620      	mov	r0, r4
 801cb1a:	f7fe fe3f 	bl	801b79c <siscanf>
 801cb1e:	2803      	cmp	r0, #3
 801cb20:	f47f af4a 	bne.w	801c9b8 <_tzset_unlocked_r+0x34>
 801cb24:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801cb28:	1e4b      	subs	r3, r1, #1
 801cb2a:	2b0b      	cmp	r3, #11
 801cb2c:	f63f af44 	bhi.w	801c9b8 <_tzset_unlocked_r+0x34>
 801cb30:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801cb34:	1e53      	subs	r3, r2, #1
 801cb36:	2b04      	cmp	r3, #4
 801cb38:	f63f af3e 	bhi.w	801c9b8 <_tzset_unlocked_r+0x34>
 801cb3c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801cb40:	2b06      	cmp	r3, #6
 801cb42:	f63f af39 	bhi.w	801c9b8 <_tzset_unlocked_r+0x34>
 801cb46:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801cb4a:	f887 8008 	strb.w	r8, [r7, #8]
 801cb4e:	617b      	str	r3, [r7, #20]
 801cb50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cb52:	eb04 0803 	add.w	r8, r4, r3
 801cb56:	2302      	movs	r3, #2
 801cb58:	f8ad 301c 	strh.w	r3, [sp, #28]
 801cb5c:	2300      	movs	r3, #0
 801cb5e:	f8ad 301e 	strh.w	r3, [sp, #30]
 801cb62:	f8ad 3020 	strh.w	r3, [sp, #32]
 801cb66:	930a      	str	r3, [sp, #40]	; 0x28
 801cb68:	f898 3000 	ldrb.w	r3, [r8]
 801cb6c:	2b2f      	cmp	r3, #47	; 0x2f
 801cb6e:	d109      	bne.n	801cb84 <_tzset_unlocked_r+0x200>
 801cb70:	e9cd a602 	strd	sl, r6, [sp, #8]
 801cb74:	e9cd b600 	strd	fp, r6, [sp]
 801cb78:	493e      	ldr	r1, [pc, #248]	; (801cc74 <_tzset_unlocked_r+0x2f0>)
 801cb7a:	4633      	mov	r3, r6
 801cb7c:	aa07      	add	r2, sp, #28
 801cb7e:	4640      	mov	r0, r8
 801cb80:	f7fe fe0c 	bl	801b79c <siscanf>
 801cb84:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801cb88:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801cb8c:	213c      	movs	r1, #60	; 0x3c
 801cb8e:	fb01 2203 	mla	r2, r1, r3, r2
 801cb92:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801cb96:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801cb9a:	fb01 2303 	mla	r3, r1, r3, r2
 801cb9e:	61bb      	str	r3, [r7, #24]
 801cba0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801cba2:	3728      	adds	r7, #40	; 0x28
 801cba4:	4444      	add	r4, r8
 801cba6:	f1b9 0f00 	cmp.w	r9, #0
 801cbaa:	d020      	beq.n	801cbee <_tzset_unlocked_r+0x26a>
 801cbac:	6868      	ldr	r0, [r5, #4]
 801cbae:	f7ff fe2f 	bl	801c810 <__tzcalc_limits>
 801cbb2:	4b28      	ldr	r3, [pc, #160]	; (801cc54 <_tzset_unlocked_r+0x2d0>)
 801cbb4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801cbb6:	601a      	str	r2, [r3, #0]
 801cbb8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801cbba:	1a9b      	subs	r3, r3, r2
 801cbbc:	4a27      	ldr	r2, [pc, #156]	; (801cc5c <_tzset_unlocked_r+0x2d8>)
 801cbbe:	bf18      	it	ne
 801cbc0:	2301      	movne	r3, #1
 801cbc2:	6013      	str	r3, [r2, #0]
 801cbc4:	e6f8      	b.n	801c9b8 <_tzset_unlocked_r+0x34>
 801cbc6:	2b2b      	cmp	r3, #43	; 0x2b
 801cbc8:	bf08      	it	eq
 801cbca:	3401      	addeq	r4, #1
 801cbcc:	2701      	movs	r7, #1
 801cbce:	e772      	b.n	801cab6 <_tzset_unlocked_r+0x132>
 801cbd0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801cbd4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801cbd8:	213c      	movs	r1, #60	; 0x3c
 801cbda:	fb01 2203 	mla	r2, r1, r3, r2
 801cbde:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801cbe2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801cbe6:	fb01 2303 	mla	r3, r1, r3, r2
 801cbea:	435f      	muls	r7, r3
 801cbec:	e77a      	b.n	801cae4 <_tzset_unlocked_r+0x160>
 801cbee:	f04f 0901 	mov.w	r9, #1
 801cbf2:	e77d      	b.n	801caf0 <_tzset_unlocked_r+0x16c>
 801cbf4:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 801cbf8:	bf06      	itte	eq
 801cbfa:	3401      	addeq	r4, #1
 801cbfc:	4643      	moveq	r3, r8
 801cbfe:	2344      	movne	r3, #68	; 0x44
 801cc00:	220a      	movs	r2, #10
 801cc02:	a90b      	add	r1, sp, #44	; 0x2c
 801cc04:	4620      	mov	r0, r4
 801cc06:	9305      	str	r3, [sp, #20]
 801cc08:	f7ff fdf8 	bl	801c7fc <strtoul>
 801cc0c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801cc10:	9b05      	ldr	r3, [sp, #20]
 801cc12:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801cc16:	45a0      	cmp	r8, r4
 801cc18:	d114      	bne.n	801cc44 <_tzset_unlocked_r+0x2c0>
 801cc1a:	234d      	movs	r3, #77	; 0x4d
 801cc1c:	f1b9 0f00 	cmp.w	r9, #0
 801cc20:	d107      	bne.n	801cc32 <_tzset_unlocked_r+0x2ae>
 801cc22:	722b      	strb	r3, [r5, #8]
 801cc24:	2103      	movs	r1, #3
 801cc26:	2302      	movs	r3, #2
 801cc28:	e9c5 1303 	strd	r1, r3, [r5, #12]
 801cc2c:	f8c5 9014 	str.w	r9, [r5, #20]
 801cc30:	e791      	b.n	801cb56 <_tzset_unlocked_r+0x1d2>
 801cc32:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801cc36:	220b      	movs	r2, #11
 801cc38:	2301      	movs	r3, #1
 801cc3a:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 801cc3e:	2300      	movs	r3, #0
 801cc40:	63eb      	str	r3, [r5, #60]	; 0x3c
 801cc42:	e788      	b.n	801cb56 <_tzset_unlocked_r+0x1d2>
 801cc44:	b280      	uxth	r0, r0
 801cc46:	723b      	strb	r3, [r7, #8]
 801cc48:	6178      	str	r0, [r7, #20]
 801cc4a:	e784      	b.n	801cb56 <_tzset_unlocked_r+0x1d2>
 801cc4c:	08022369 	.word	0x08022369
 801cc50:	20005ed8 	.word	0x20005ed8
 801cc54:	20005ee0 	.word	0x20005ee0
 801cc58:	0802236c 	.word	0x0802236c
 801cc5c:	20005edc 	.word	0x20005edc
 801cc60:	2000025c 	.word	0x2000025c
 801cc64:	20005ecb 	.word	0x20005ecb
 801cc68:	08022370 	.word	0x08022370
 801cc6c:	08022393 	.word	0x08022393
 801cc70:	0802237f 	.word	0x0802237f
 801cc74:	08022392 	.word	0x08022392
 801cc78:	20005ec0 	.word	0x20005ec0

0801cc7c <_vsniprintf_r>:
 801cc7c:	b530      	push	{r4, r5, lr}
 801cc7e:	1e14      	subs	r4, r2, #0
 801cc80:	4605      	mov	r5, r0
 801cc82:	b09b      	sub	sp, #108	; 0x6c
 801cc84:	4618      	mov	r0, r3
 801cc86:	da05      	bge.n	801cc94 <_vsniprintf_r+0x18>
 801cc88:	238b      	movs	r3, #139	; 0x8b
 801cc8a:	602b      	str	r3, [r5, #0]
 801cc8c:	f04f 30ff 	mov.w	r0, #4294967295
 801cc90:	b01b      	add	sp, #108	; 0x6c
 801cc92:	bd30      	pop	{r4, r5, pc}
 801cc94:	f44f 7302 	mov.w	r3, #520	; 0x208
 801cc98:	f8ad 300c 	strh.w	r3, [sp, #12]
 801cc9c:	bf14      	ite	ne
 801cc9e:	f104 33ff 	addne.w	r3, r4, #4294967295
 801cca2:	4623      	moveq	r3, r4
 801cca4:	9302      	str	r3, [sp, #8]
 801cca6:	9305      	str	r3, [sp, #20]
 801cca8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ccac:	9100      	str	r1, [sp, #0]
 801ccae:	9104      	str	r1, [sp, #16]
 801ccb0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ccb4:	4602      	mov	r2, r0
 801ccb6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801ccb8:	4669      	mov	r1, sp
 801ccba:	4628      	mov	r0, r5
 801ccbc:	f002 fac2 	bl	801f244 <_svfiprintf_r>
 801ccc0:	1c43      	adds	r3, r0, #1
 801ccc2:	bfbc      	itt	lt
 801ccc4:	238b      	movlt	r3, #139	; 0x8b
 801ccc6:	602b      	strlt	r3, [r5, #0]
 801ccc8:	2c00      	cmp	r4, #0
 801ccca:	d0e1      	beq.n	801cc90 <_vsniprintf_r+0x14>
 801cccc:	9b00      	ldr	r3, [sp, #0]
 801ccce:	2200      	movs	r2, #0
 801ccd0:	701a      	strb	r2, [r3, #0]
 801ccd2:	e7dd      	b.n	801cc90 <_vsniprintf_r+0x14>

0801ccd4 <vsniprintf>:
 801ccd4:	b507      	push	{r0, r1, r2, lr}
 801ccd6:	9300      	str	r3, [sp, #0]
 801ccd8:	4613      	mov	r3, r2
 801ccda:	460a      	mov	r2, r1
 801ccdc:	4601      	mov	r1, r0
 801ccde:	4803      	ldr	r0, [pc, #12]	; (801ccec <vsniprintf+0x18>)
 801cce0:	6800      	ldr	r0, [r0, #0]
 801cce2:	f7ff ffcb 	bl	801cc7c <_vsniprintf_r>
 801cce6:	b003      	add	sp, #12
 801cce8:	f85d fb04 	ldr.w	pc, [sp], #4
 801ccec:	200001f8 	.word	0x200001f8

0801ccf0 <__swbuf_r>:
 801ccf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ccf2:	460e      	mov	r6, r1
 801ccf4:	4614      	mov	r4, r2
 801ccf6:	4605      	mov	r5, r0
 801ccf8:	b118      	cbz	r0, 801cd02 <__swbuf_r+0x12>
 801ccfa:	6983      	ldr	r3, [r0, #24]
 801ccfc:	b90b      	cbnz	r3, 801cd02 <__swbuf_r+0x12>
 801ccfe:	f7fd f815 	bl	8019d2c <__sinit>
 801cd02:	4b21      	ldr	r3, [pc, #132]	; (801cd88 <__swbuf_r+0x98>)
 801cd04:	429c      	cmp	r4, r3
 801cd06:	d12b      	bne.n	801cd60 <__swbuf_r+0x70>
 801cd08:	686c      	ldr	r4, [r5, #4]
 801cd0a:	69a3      	ldr	r3, [r4, #24]
 801cd0c:	60a3      	str	r3, [r4, #8]
 801cd0e:	89a3      	ldrh	r3, [r4, #12]
 801cd10:	071a      	lsls	r2, r3, #28
 801cd12:	d52f      	bpl.n	801cd74 <__swbuf_r+0x84>
 801cd14:	6923      	ldr	r3, [r4, #16]
 801cd16:	b36b      	cbz	r3, 801cd74 <__swbuf_r+0x84>
 801cd18:	6923      	ldr	r3, [r4, #16]
 801cd1a:	6820      	ldr	r0, [r4, #0]
 801cd1c:	1ac0      	subs	r0, r0, r3
 801cd1e:	6963      	ldr	r3, [r4, #20]
 801cd20:	b2f6      	uxtb	r6, r6
 801cd22:	4283      	cmp	r3, r0
 801cd24:	4637      	mov	r7, r6
 801cd26:	dc04      	bgt.n	801cd32 <__swbuf_r+0x42>
 801cd28:	4621      	mov	r1, r4
 801cd2a:	4628      	mov	r0, r5
 801cd2c:	f000 fff2 	bl	801dd14 <_fflush_r>
 801cd30:	bb30      	cbnz	r0, 801cd80 <__swbuf_r+0x90>
 801cd32:	68a3      	ldr	r3, [r4, #8]
 801cd34:	3b01      	subs	r3, #1
 801cd36:	60a3      	str	r3, [r4, #8]
 801cd38:	6823      	ldr	r3, [r4, #0]
 801cd3a:	1c5a      	adds	r2, r3, #1
 801cd3c:	6022      	str	r2, [r4, #0]
 801cd3e:	701e      	strb	r6, [r3, #0]
 801cd40:	6963      	ldr	r3, [r4, #20]
 801cd42:	3001      	adds	r0, #1
 801cd44:	4283      	cmp	r3, r0
 801cd46:	d004      	beq.n	801cd52 <__swbuf_r+0x62>
 801cd48:	89a3      	ldrh	r3, [r4, #12]
 801cd4a:	07db      	lsls	r3, r3, #31
 801cd4c:	d506      	bpl.n	801cd5c <__swbuf_r+0x6c>
 801cd4e:	2e0a      	cmp	r6, #10
 801cd50:	d104      	bne.n	801cd5c <__swbuf_r+0x6c>
 801cd52:	4621      	mov	r1, r4
 801cd54:	4628      	mov	r0, r5
 801cd56:	f000 ffdd 	bl	801dd14 <_fflush_r>
 801cd5a:	b988      	cbnz	r0, 801cd80 <__swbuf_r+0x90>
 801cd5c:	4638      	mov	r0, r7
 801cd5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cd60:	4b0a      	ldr	r3, [pc, #40]	; (801cd8c <__swbuf_r+0x9c>)
 801cd62:	429c      	cmp	r4, r3
 801cd64:	d101      	bne.n	801cd6a <__swbuf_r+0x7a>
 801cd66:	68ac      	ldr	r4, [r5, #8]
 801cd68:	e7cf      	b.n	801cd0a <__swbuf_r+0x1a>
 801cd6a:	4b09      	ldr	r3, [pc, #36]	; (801cd90 <__swbuf_r+0xa0>)
 801cd6c:	429c      	cmp	r4, r3
 801cd6e:	bf08      	it	eq
 801cd70:	68ec      	ldreq	r4, [r5, #12]
 801cd72:	e7ca      	b.n	801cd0a <__swbuf_r+0x1a>
 801cd74:	4621      	mov	r1, r4
 801cd76:	4628      	mov	r0, r5
 801cd78:	f000 f81e 	bl	801cdb8 <__swsetup_r>
 801cd7c:	2800      	cmp	r0, #0
 801cd7e:	d0cb      	beq.n	801cd18 <__swbuf_r+0x28>
 801cd80:	f04f 37ff 	mov.w	r7, #4294967295
 801cd84:	e7ea      	b.n	801cd5c <__swbuf_r+0x6c>
 801cd86:	bf00      	nop
 801cd88:	08022100 	.word	0x08022100
 801cd8c:	08022120 	.word	0x08022120
 801cd90:	080220e0 	.word	0x080220e0

0801cd94 <_write_r>:
 801cd94:	b538      	push	{r3, r4, r5, lr}
 801cd96:	4d07      	ldr	r5, [pc, #28]	; (801cdb4 <_write_r+0x20>)
 801cd98:	4604      	mov	r4, r0
 801cd9a:	4608      	mov	r0, r1
 801cd9c:	4611      	mov	r1, r2
 801cd9e:	2200      	movs	r2, #0
 801cda0:	602a      	str	r2, [r5, #0]
 801cda2:	461a      	mov	r2, r3
 801cda4:	f003 f8d6 	bl	801ff54 <_write>
 801cda8:	1c43      	adds	r3, r0, #1
 801cdaa:	d102      	bne.n	801cdb2 <_write_r+0x1e>
 801cdac:	682b      	ldr	r3, [r5, #0]
 801cdae:	b103      	cbz	r3, 801cdb2 <_write_r+0x1e>
 801cdb0:	6023      	str	r3, [r4, #0]
 801cdb2:	bd38      	pop	{r3, r4, r5, pc}
 801cdb4:	20008d58 	.word	0x20008d58

0801cdb8 <__swsetup_r>:
 801cdb8:	4b32      	ldr	r3, [pc, #200]	; (801ce84 <__swsetup_r+0xcc>)
 801cdba:	b570      	push	{r4, r5, r6, lr}
 801cdbc:	681d      	ldr	r5, [r3, #0]
 801cdbe:	4606      	mov	r6, r0
 801cdc0:	460c      	mov	r4, r1
 801cdc2:	b125      	cbz	r5, 801cdce <__swsetup_r+0x16>
 801cdc4:	69ab      	ldr	r3, [r5, #24]
 801cdc6:	b913      	cbnz	r3, 801cdce <__swsetup_r+0x16>
 801cdc8:	4628      	mov	r0, r5
 801cdca:	f7fc ffaf 	bl	8019d2c <__sinit>
 801cdce:	4b2e      	ldr	r3, [pc, #184]	; (801ce88 <__swsetup_r+0xd0>)
 801cdd0:	429c      	cmp	r4, r3
 801cdd2:	d10f      	bne.n	801cdf4 <__swsetup_r+0x3c>
 801cdd4:	686c      	ldr	r4, [r5, #4]
 801cdd6:	89a3      	ldrh	r3, [r4, #12]
 801cdd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801cddc:	0719      	lsls	r1, r3, #28
 801cdde:	d42c      	bmi.n	801ce3a <__swsetup_r+0x82>
 801cde0:	06dd      	lsls	r5, r3, #27
 801cde2:	d411      	bmi.n	801ce08 <__swsetup_r+0x50>
 801cde4:	2309      	movs	r3, #9
 801cde6:	6033      	str	r3, [r6, #0]
 801cde8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801cdec:	81a3      	strh	r3, [r4, #12]
 801cdee:	f04f 30ff 	mov.w	r0, #4294967295
 801cdf2:	e03e      	b.n	801ce72 <__swsetup_r+0xba>
 801cdf4:	4b25      	ldr	r3, [pc, #148]	; (801ce8c <__swsetup_r+0xd4>)
 801cdf6:	429c      	cmp	r4, r3
 801cdf8:	d101      	bne.n	801cdfe <__swsetup_r+0x46>
 801cdfa:	68ac      	ldr	r4, [r5, #8]
 801cdfc:	e7eb      	b.n	801cdd6 <__swsetup_r+0x1e>
 801cdfe:	4b24      	ldr	r3, [pc, #144]	; (801ce90 <__swsetup_r+0xd8>)
 801ce00:	429c      	cmp	r4, r3
 801ce02:	bf08      	it	eq
 801ce04:	68ec      	ldreq	r4, [r5, #12]
 801ce06:	e7e6      	b.n	801cdd6 <__swsetup_r+0x1e>
 801ce08:	0758      	lsls	r0, r3, #29
 801ce0a:	d512      	bpl.n	801ce32 <__swsetup_r+0x7a>
 801ce0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ce0e:	b141      	cbz	r1, 801ce22 <__swsetup_r+0x6a>
 801ce10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ce14:	4299      	cmp	r1, r3
 801ce16:	d002      	beq.n	801ce1e <__swsetup_r+0x66>
 801ce18:	4630      	mov	r0, r6
 801ce1a:	f7fd fc29 	bl	801a670 <_free_r>
 801ce1e:	2300      	movs	r3, #0
 801ce20:	6363      	str	r3, [r4, #52]	; 0x34
 801ce22:	89a3      	ldrh	r3, [r4, #12]
 801ce24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ce28:	81a3      	strh	r3, [r4, #12]
 801ce2a:	2300      	movs	r3, #0
 801ce2c:	6063      	str	r3, [r4, #4]
 801ce2e:	6923      	ldr	r3, [r4, #16]
 801ce30:	6023      	str	r3, [r4, #0]
 801ce32:	89a3      	ldrh	r3, [r4, #12]
 801ce34:	f043 0308 	orr.w	r3, r3, #8
 801ce38:	81a3      	strh	r3, [r4, #12]
 801ce3a:	6923      	ldr	r3, [r4, #16]
 801ce3c:	b94b      	cbnz	r3, 801ce52 <__swsetup_r+0x9a>
 801ce3e:	89a3      	ldrh	r3, [r4, #12]
 801ce40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ce44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ce48:	d003      	beq.n	801ce52 <__swsetup_r+0x9a>
 801ce4a:	4621      	mov	r1, r4
 801ce4c:	4630      	mov	r0, r6
 801ce4e:	f001 fc4f 	bl	801e6f0 <__smakebuf_r>
 801ce52:	89a0      	ldrh	r0, [r4, #12]
 801ce54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ce58:	f010 0301 	ands.w	r3, r0, #1
 801ce5c:	d00a      	beq.n	801ce74 <__swsetup_r+0xbc>
 801ce5e:	2300      	movs	r3, #0
 801ce60:	60a3      	str	r3, [r4, #8]
 801ce62:	6963      	ldr	r3, [r4, #20]
 801ce64:	425b      	negs	r3, r3
 801ce66:	61a3      	str	r3, [r4, #24]
 801ce68:	6923      	ldr	r3, [r4, #16]
 801ce6a:	b943      	cbnz	r3, 801ce7e <__swsetup_r+0xc6>
 801ce6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ce70:	d1ba      	bne.n	801cde8 <__swsetup_r+0x30>
 801ce72:	bd70      	pop	{r4, r5, r6, pc}
 801ce74:	0781      	lsls	r1, r0, #30
 801ce76:	bf58      	it	pl
 801ce78:	6963      	ldrpl	r3, [r4, #20]
 801ce7a:	60a3      	str	r3, [r4, #8]
 801ce7c:	e7f4      	b.n	801ce68 <__swsetup_r+0xb0>
 801ce7e:	2000      	movs	r0, #0
 801ce80:	e7f7      	b.n	801ce72 <__swsetup_r+0xba>
 801ce82:	bf00      	nop
 801ce84:	200001f8 	.word	0x200001f8
 801ce88:	08022100 	.word	0x08022100
 801ce8c:	08022120 	.word	0x08022120
 801ce90:	080220e0 	.word	0x080220e0

0801ce94 <__assert_func>:
 801ce94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ce96:	4614      	mov	r4, r2
 801ce98:	461a      	mov	r2, r3
 801ce9a:	4b09      	ldr	r3, [pc, #36]	; (801cec0 <__assert_func+0x2c>)
 801ce9c:	681b      	ldr	r3, [r3, #0]
 801ce9e:	4605      	mov	r5, r0
 801cea0:	68d8      	ldr	r0, [r3, #12]
 801cea2:	b14c      	cbz	r4, 801ceb8 <__assert_func+0x24>
 801cea4:	4b07      	ldr	r3, [pc, #28]	; (801cec4 <__assert_func+0x30>)
 801cea6:	9100      	str	r1, [sp, #0]
 801cea8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ceac:	4906      	ldr	r1, [pc, #24]	; (801cec8 <__assert_func+0x34>)
 801ceae:	462b      	mov	r3, r5
 801ceb0:	f000 ff6c 	bl	801dd8c <fiprintf>
 801ceb4:	f7fc fecc 	bl	8019c50 <abort>
 801ceb8:	4b04      	ldr	r3, [pc, #16]	; (801cecc <__assert_func+0x38>)
 801ceba:	461c      	mov	r4, r3
 801cebc:	e7f3      	b.n	801cea6 <__assert_func+0x12>
 801cebe:	bf00      	nop
 801cec0:	200001f8 	.word	0x200001f8
 801cec4:	080223a5 	.word	0x080223a5
 801cec8:	080223b2 	.word	0x080223b2
 801cecc:	080223e0 	.word	0x080223e0

0801ced0 <_close_r>:
 801ced0:	b538      	push	{r3, r4, r5, lr}
 801ced2:	4d06      	ldr	r5, [pc, #24]	; (801ceec <_close_r+0x1c>)
 801ced4:	2300      	movs	r3, #0
 801ced6:	4604      	mov	r4, r0
 801ced8:	4608      	mov	r0, r1
 801ceda:	602b      	str	r3, [r5, #0]
 801cedc:	f002 fff4 	bl	801fec8 <_close>
 801cee0:	1c43      	adds	r3, r0, #1
 801cee2:	d102      	bne.n	801ceea <_close_r+0x1a>
 801cee4:	682b      	ldr	r3, [r5, #0]
 801cee6:	b103      	cbz	r3, 801ceea <_close_r+0x1a>
 801cee8:	6023      	str	r3, [r4, #0]
 801ceea:	bd38      	pop	{r3, r4, r5, pc}
 801ceec:	20008d58 	.word	0x20008d58

0801cef0 <div>:
 801cef0:	2900      	cmp	r1, #0
 801cef2:	b510      	push	{r4, lr}
 801cef4:	fb91 f4f2 	sdiv	r4, r1, r2
 801cef8:	fb02 1314 	mls	r3, r2, r4, r1
 801cefc:	db06      	blt.n	801cf0c <div+0x1c>
 801cefe:	2b00      	cmp	r3, #0
 801cf00:	da01      	bge.n	801cf06 <div+0x16>
 801cf02:	3401      	adds	r4, #1
 801cf04:	1a9b      	subs	r3, r3, r2
 801cf06:	e9c0 4300 	strd	r4, r3, [r0]
 801cf0a:	bd10      	pop	{r4, pc}
 801cf0c:	2b00      	cmp	r3, #0
 801cf0e:	bfc4      	itt	gt
 801cf10:	f104 34ff 	addgt.w	r4, r4, #4294967295
 801cf14:	189b      	addgt	r3, r3, r2
 801cf16:	e7f6      	b.n	801cf06 <div+0x16>

0801cf18 <quorem>:
 801cf18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf1c:	6903      	ldr	r3, [r0, #16]
 801cf1e:	690c      	ldr	r4, [r1, #16]
 801cf20:	42a3      	cmp	r3, r4
 801cf22:	4607      	mov	r7, r0
 801cf24:	f2c0 8081 	blt.w	801d02a <quorem+0x112>
 801cf28:	3c01      	subs	r4, #1
 801cf2a:	f101 0814 	add.w	r8, r1, #20
 801cf2e:	f100 0514 	add.w	r5, r0, #20
 801cf32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801cf36:	9301      	str	r3, [sp, #4]
 801cf38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801cf3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801cf40:	3301      	adds	r3, #1
 801cf42:	429a      	cmp	r2, r3
 801cf44:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801cf48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801cf4c:	fbb2 f6f3 	udiv	r6, r2, r3
 801cf50:	d331      	bcc.n	801cfb6 <quorem+0x9e>
 801cf52:	f04f 0e00 	mov.w	lr, #0
 801cf56:	4640      	mov	r0, r8
 801cf58:	46ac      	mov	ip, r5
 801cf5a:	46f2      	mov	sl, lr
 801cf5c:	f850 2b04 	ldr.w	r2, [r0], #4
 801cf60:	b293      	uxth	r3, r2
 801cf62:	fb06 e303 	mla	r3, r6, r3, lr
 801cf66:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801cf6a:	b29b      	uxth	r3, r3
 801cf6c:	ebaa 0303 	sub.w	r3, sl, r3
 801cf70:	0c12      	lsrs	r2, r2, #16
 801cf72:	f8dc a000 	ldr.w	sl, [ip]
 801cf76:	fb06 e202 	mla	r2, r6, r2, lr
 801cf7a:	fa13 f38a 	uxtah	r3, r3, sl
 801cf7e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801cf82:	fa1f fa82 	uxth.w	sl, r2
 801cf86:	f8dc 2000 	ldr.w	r2, [ip]
 801cf8a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801cf8e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801cf92:	b29b      	uxth	r3, r3
 801cf94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cf98:	4581      	cmp	r9, r0
 801cf9a:	f84c 3b04 	str.w	r3, [ip], #4
 801cf9e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801cfa2:	d2db      	bcs.n	801cf5c <quorem+0x44>
 801cfa4:	f855 300b 	ldr.w	r3, [r5, fp]
 801cfa8:	b92b      	cbnz	r3, 801cfb6 <quorem+0x9e>
 801cfaa:	9b01      	ldr	r3, [sp, #4]
 801cfac:	3b04      	subs	r3, #4
 801cfae:	429d      	cmp	r5, r3
 801cfb0:	461a      	mov	r2, r3
 801cfb2:	d32e      	bcc.n	801d012 <quorem+0xfa>
 801cfb4:	613c      	str	r4, [r7, #16]
 801cfb6:	4638      	mov	r0, r7
 801cfb8:	f001 fec0 	bl	801ed3c <__mcmp>
 801cfbc:	2800      	cmp	r0, #0
 801cfbe:	db24      	blt.n	801d00a <quorem+0xf2>
 801cfc0:	3601      	adds	r6, #1
 801cfc2:	4628      	mov	r0, r5
 801cfc4:	f04f 0c00 	mov.w	ip, #0
 801cfc8:	f858 2b04 	ldr.w	r2, [r8], #4
 801cfcc:	f8d0 e000 	ldr.w	lr, [r0]
 801cfd0:	b293      	uxth	r3, r2
 801cfd2:	ebac 0303 	sub.w	r3, ip, r3
 801cfd6:	0c12      	lsrs	r2, r2, #16
 801cfd8:	fa13 f38e 	uxtah	r3, r3, lr
 801cfdc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801cfe0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801cfe4:	b29b      	uxth	r3, r3
 801cfe6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cfea:	45c1      	cmp	r9, r8
 801cfec:	f840 3b04 	str.w	r3, [r0], #4
 801cff0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801cff4:	d2e8      	bcs.n	801cfc8 <quorem+0xb0>
 801cff6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801cffa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801cffe:	b922      	cbnz	r2, 801d00a <quorem+0xf2>
 801d000:	3b04      	subs	r3, #4
 801d002:	429d      	cmp	r5, r3
 801d004:	461a      	mov	r2, r3
 801d006:	d30a      	bcc.n	801d01e <quorem+0x106>
 801d008:	613c      	str	r4, [r7, #16]
 801d00a:	4630      	mov	r0, r6
 801d00c:	b003      	add	sp, #12
 801d00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d012:	6812      	ldr	r2, [r2, #0]
 801d014:	3b04      	subs	r3, #4
 801d016:	2a00      	cmp	r2, #0
 801d018:	d1cc      	bne.n	801cfb4 <quorem+0x9c>
 801d01a:	3c01      	subs	r4, #1
 801d01c:	e7c7      	b.n	801cfae <quorem+0x96>
 801d01e:	6812      	ldr	r2, [r2, #0]
 801d020:	3b04      	subs	r3, #4
 801d022:	2a00      	cmp	r2, #0
 801d024:	d1f0      	bne.n	801d008 <quorem+0xf0>
 801d026:	3c01      	subs	r4, #1
 801d028:	e7eb      	b.n	801d002 <quorem+0xea>
 801d02a:	2000      	movs	r0, #0
 801d02c:	e7ee      	b.n	801d00c <quorem+0xf4>
	...

0801d030 <_dtoa_r>:
 801d030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d034:	ed2d 8b02 	vpush	{d8}
 801d038:	ec57 6b10 	vmov	r6, r7, d0
 801d03c:	b095      	sub	sp, #84	; 0x54
 801d03e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801d040:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801d044:	9105      	str	r1, [sp, #20]
 801d046:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801d04a:	4604      	mov	r4, r0
 801d04c:	9209      	str	r2, [sp, #36]	; 0x24
 801d04e:	930f      	str	r3, [sp, #60]	; 0x3c
 801d050:	b975      	cbnz	r5, 801d070 <_dtoa_r+0x40>
 801d052:	2010      	movs	r0, #16
 801d054:	f7fd f84e 	bl	801a0f4 <malloc>
 801d058:	4602      	mov	r2, r0
 801d05a:	6260      	str	r0, [r4, #36]	; 0x24
 801d05c:	b920      	cbnz	r0, 801d068 <_dtoa_r+0x38>
 801d05e:	4bb2      	ldr	r3, [pc, #712]	; (801d328 <_dtoa_r+0x2f8>)
 801d060:	21ea      	movs	r1, #234	; 0xea
 801d062:	48b2      	ldr	r0, [pc, #712]	; (801d32c <_dtoa_r+0x2fc>)
 801d064:	f7ff ff16 	bl	801ce94 <__assert_func>
 801d068:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801d06c:	6005      	str	r5, [r0, #0]
 801d06e:	60c5      	str	r5, [r0, #12]
 801d070:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d072:	6819      	ldr	r1, [r3, #0]
 801d074:	b151      	cbz	r1, 801d08c <_dtoa_r+0x5c>
 801d076:	685a      	ldr	r2, [r3, #4]
 801d078:	604a      	str	r2, [r1, #4]
 801d07a:	2301      	movs	r3, #1
 801d07c:	4093      	lsls	r3, r2
 801d07e:	608b      	str	r3, [r1, #8]
 801d080:	4620      	mov	r0, r4
 801d082:	f001 fbd3 	bl	801e82c <_Bfree>
 801d086:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d088:	2200      	movs	r2, #0
 801d08a:	601a      	str	r2, [r3, #0]
 801d08c:	1e3b      	subs	r3, r7, #0
 801d08e:	bfb9      	ittee	lt
 801d090:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801d094:	9303      	strlt	r3, [sp, #12]
 801d096:	2300      	movge	r3, #0
 801d098:	f8c8 3000 	strge.w	r3, [r8]
 801d09c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801d0a0:	4ba3      	ldr	r3, [pc, #652]	; (801d330 <_dtoa_r+0x300>)
 801d0a2:	bfbc      	itt	lt
 801d0a4:	2201      	movlt	r2, #1
 801d0a6:	f8c8 2000 	strlt.w	r2, [r8]
 801d0aa:	ea33 0309 	bics.w	r3, r3, r9
 801d0ae:	d11b      	bne.n	801d0e8 <_dtoa_r+0xb8>
 801d0b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d0b2:	f242 730f 	movw	r3, #9999	; 0x270f
 801d0b6:	6013      	str	r3, [r2, #0]
 801d0b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d0bc:	4333      	orrs	r3, r6
 801d0be:	f000 857a 	beq.w	801dbb6 <_dtoa_r+0xb86>
 801d0c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d0c4:	b963      	cbnz	r3, 801d0e0 <_dtoa_r+0xb0>
 801d0c6:	4b9b      	ldr	r3, [pc, #620]	; (801d334 <_dtoa_r+0x304>)
 801d0c8:	e024      	b.n	801d114 <_dtoa_r+0xe4>
 801d0ca:	4b9b      	ldr	r3, [pc, #620]	; (801d338 <_dtoa_r+0x308>)
 801d0cc:	9300      	str	r3, [sp, #0]
 801d0ce:	3308      	adds	r3, #8
 801d0d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d0d2:	6013      	str	r3, [r2, #0]
 801d0d4:	9800      	ldr	r0, [sp, #0]
 801d0d6:	b015      	add	sp, #84	; 0x54
 801d0d8:	ecbd 8b02 	vpop	{d8}
 801d0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0e0:	4b94      	ldr	r3, [pc, #592]	; (801d334 <_dtoa_r+0x304>)
 801d0e2:	9300      	str	r3, [sp, #0]
 801d0e4:	3303      	adds	r3, #3
 801d0e6:	e7f3      	b.n	801d0d0 <_dtoa_r+0xa0>
 801d0e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d0ec:	2200      	movs	r2, #0
 801d0ee:	ec51 0b17 	vmov	r0, r1, d7
 801d0f2:	2300      	movs	r3, #0
 801d0f4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801d0f8:	f7e3 fd06 	bl	8000b08 <__aeabi_dcmpeq>
 801d0fc:	4680      	mov	r8, r0
 801d0fe:	b158      	cbz	r0, 801d118 <_dtoa_r+0xe8>
 801d100:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d102:	2301      	movs	r3, #1
 801d104:	6013      	str	r3, [r2, #0]
 801d106:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d108:	2b00      	cmp	r3, #0
 801d10a:	f000 8551 	beq.w	801dbb0 <_dtoa_r+0xb80>
 801d10e:	488b      	ldr	r0, [pc, #556]	; (801d33c <_dtoa_r+0x30c>)
 801d110:	6018      	str	r0, [r3, #0]
 801d112:	1e43      	subs	r3, r0, #1
 801d114:	9300      	str	r3, [sp, #0]
 801d116:	e7dd      	b.n	801d0d4 <_dtoa_r+0xa4>
 801d118:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801d11c:	aa12      	add	r2, sp, #72	; 0x48
 801d11e:	a913      	add	r1, sp, #76	; 0x4c
 801d120:	4620      	mov	r0, r4
 801d122:	f001 ff2b 	bl	801ef7c <__d2b>
 801d126:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801d12a:	4683      	mov	fp, r0
 801d12c:	2d00      	cmp	r5, #0
 801d12e:	d07c      	beq.n	801d22a <_dtoa_r+0x1fa>
 801d130:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d132:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801d136:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d13a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801d13e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801d142:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801d146:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801d14a:	4b7d      	ldr	r3, [pc, #500]	; (801d340 <_dtoa_r+0x310>)
 801d14c:	2200      	movs	r2, #0
 801d14e:	4630      	mov	r0, r6
 801d150:	4639      	mov	r1, r7
 801d152:	f7e3 f8b9 	bl	80002c8 <__aeabi_dsub>
 801d156:	a36e      	add	r3, pc, #440	; (adr r3, 801d310 <_dtoa_r+0x2e0>)
 801d158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d15c:	f7e3 fa6c 	bl	8000638 <__aeabi_dmul>
 801d160:	a36d      	add	r3, pc, #436	; (adr r3, 801d318 <_dtoa_r+0x2e8>)
 801d162:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d166:	f7e3 f8b1 	bl	80002cc <__adddf3>
 801d16a:	4606      	mov	r6, r0
 801d16c:	4628      	mov	r0, r5
 801d16e:	460f      	mov	r7, r1
 801d170:	f7e3 f9f8 	bl	8000564 <__aeabi_i2d>
 801d174:	a36a      	add	r3, pc, #424	; (adr r3, 801d320 <_dtoa_r+0x2f0>)
 801d176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d17a:	f7e3 fa5d 	bl	8000638 <__aeabi_dmul>
 801d17e:	4602      	mov	r2, r0
 801d180:	460b      	mov	r3, r1
 801d182:	4630      	mov	r0, r6
 801d184:	4639      	mov	r1, r7
 801d186:	f7e3 f8a1 	bl	80002cc <__adddf3>
 801d18a:	4606      	mov	r6, r0
 801d18c:	460f      	mov	r7, r1
 801d18e:	f7e3 fd03 	bl	8000b98 <__aeabi_d2iz>
 801d192:	2200      	movs	r2, #0
 801d194:	4682      	mov	sl, r0
 801d196:	2300      	movs	r3, #0
 801d198:	4630      	mov	r0, r6
 801d19a:	4639      	mov	r1, r7
 801d19c:	f7e3 fcbe 	bl	8000b1c <__aeabi_dcmplt>
 801d1a0:	b148      	cbz	r0, 801d1b6 <_dtoa_r+0x186>
 801d1a2:	4650      	mov	r0, sl
 801d1a4:	f7e3 f9de 	bl	8000564 <__aeabi_i2d>
 801d1a8:	4632      	mov	r2, r6
 801d1aa:	463b      	mov	r3, r7
 801d1ac:	f7e3 fcac 	bl	8000b08 <__aeabi_dcmpeq>
 801d1b0:	b908      	cbnz	r0, 801d1b6 <_dtoa_r+0x186>
 801d1b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d1b6:	f1ba 0f16 	cmp.w	sl, #22
 801d1ba:	d854      	bhi.n	801d266 <_dtoa_r+0x236>
 801d1bc:	4b61      	ldr	r3, [pc, #388]	; (801d344 <_dtoa_r+0x314>)
 801d1be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801d1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801d1ca:	f7e3 fca7 	bl	8000b1c <__aeabi_dcmplt>
 801d1ce:	2800      	cmp	r0, #0
 801d1d0:	d04b      	beq.n	801d26a <_dtoa_r+0x23a>
 801d1d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d1d6:	2300      	movs	r3, #0
 801d1d8:	930e      	str	r3, [sp, #56]	; 0x38
 801d1da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d1dc:	1b5d      	subs	r5, r3, r5
 801d1de:	1e6b      	subs	r3, r5, #1
 801d1e0:	9304      	str	r3, [sp, #16]
 801d1e2:	bf43      	ittte	mi
 801d1e4:	2300      	movmi	r3, #0
 801d1e6:	f1c5 0801 	rsbmi	r8, r5, #1
 801d1ea:	9304      	strmi	r3, [sp, #16]
 801d1ec:	f04f 0800 	movpl.w	r8, #0
 801d1f0:	f1ba 0f00 	cmp.w	sl, #0
 801d1f4:	db3b      	blt.n	801d26e <_dtoa_r+0x23e>
 801d1f6:	9b04      	ldr	r3, [sp, #16]
 801d1f8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801d1fc:	4453      	add	r3, sl
 801d1fe:	9304      	str	r3, [sp, #16]
 801d200:	2300      	movs	r3, #0
 801d202:	9306      	str	r3, [sp, #24]
 801d204:	9b05      	ldr	r3, [sp, #20]
 801d206:	2b09      	cmp	r3, #9
 801d208:	d869      	bhi.n	801d2de <_dtoa_r+0x2ae>
 801d20a:	2b05      	cmp	r3, #5
 801d20c:	bfc4      	itt	gt
 801d20e:	3b04      	subgt	r3, #4
 801d210:	9305      	strgt	r3, [sp, #20]
 801d212:	9b05      	ldr	r3, [sp, #20]
 801d214:	f1a3 0302 	sub.w	r3, r3, #2
 801d218:	bfcc      	ite	gt
 801d21a:	2500      	movgt	r5, #0
 801d21c:	2501      	movle	r5, #1
 801d21e:	2b03      	cmp	r3, #3
 801d220:	d869      	bhi.n	801d2f6 <_dtoa_r+0x2c6>
 801d222:	e8df f003 	tbb	[pc, r3]
 801d226:	4e2c      	.short	0x4e2c
 801d228:	5a4c      	.short	0x5a4c
 801d22a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801d22e:	441d      	add	r5, r3
 801d230:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801d234:	2b20      	cmp	r3, #32
 801d236:	bfc1      	itttt	gt
 801d238:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801d23c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801d240:	fa09 f303 	lslgt.w	r3, r9, r3
 801d244:	fa26 f000 	lsrgt.w	r0, r6, r0
 801d248:	bfda      	itte	le
 801d24a:	f1c3 0320 	rsble	r3, r3, #32
 801d24e:	fa06 f003 	lslle.w	r0, r6, r3
 801d252:	4318      	orrgt	r0, r3
 801d254:	f7e3 f976 	bl	8000544 <__aeabi_ui2d>
 801d258:	2301      	movs	r3, #1
 801d25a:	4606      	mov	r6, r0
 801d25c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801d260:	3d01      	subs	r5, #1
 801d262:	9310      	str	r3, [sp, #64]	; 0x40
 801d264:	e771      	b.n	801d14a <_dtoa_r+0x11a>
 801d266:	2301      	movs	r3, #1
 801d268:	e7b6      	b.n	801d1d8 <_dtoa_r+0x1a8>
 801d26a:	900e      	str	r0, [sp, #56]	; 0x38
 801d26c:	e7b5      	b.n	801d1da <_dtoa_r+0x1aa>
 801d26e:	f1ca 0300 	rsb	r3, sl, #0
 801d272:	9306      	str	r3, [sp, #24]
 801d274:	2300      	movs	r3, #0
 801d276:	eba8 080a 	sub.w	r8, r8, sl
 801d27a:	930d      	str	r3, [sp, #52]	; 0x34
 801d27c:	e7c2      	b.n	801d204 <_dtoa_r+0x1d4>
 801d27e:	2300      	movs	r3, #0
 801d280:	9308      	str	r3, [sp, #32]
 801d282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d284:	2b00      	cmp	r3, #0
 801d286:	dc39      	bgt.n	801d2fc <_dtoa_r+0x2cc>
 801d288:	f04f 0901 	mov.w	r9, #1
 801d28c:	f8cd 9004 	str.w	r9, [sp, #4]
 801d290:	464b      	mov	r3, r9
 801d292:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801d296:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801d298:	2200      	movs	r2, #0
 801d29a:	6042      	str	r2, [r0, #4]
 801d29c:	2204      	movs	r2, #4
 801d29e:	f102 0614 	add.w	r6, r2, #20
 801d2a2:	429e      	cmp	r6, r3
 801d2a4:	6841      	ldr	r1, [r0, #4]
 801d2a6:	d92f      	bls.n	801d308 <_dtoa_r+0x2d8>
 801d2a8:	4620      	mov	r0, r4
 801d2aa:	f001 fa7f 	bl	801e7ac <_Balloc>
 801d2ae:	9000      	str	r0, [sp, #0]
 801d2b0:	2800      	cmp	r0, #0
 801d2b2:	d14b      	bne.n	801d34c <_dtoa_r+0x31c>
 801d2b4:	4b24      	ldr	r3, [pc, #144]	; (801d348 <_dtoa_r+0x318>)
 801d2b6:	4602      	mov	r2, r0
 801d2b8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801d2bc:	e6d1      	b.n	801d062 <_dtoa_r+0x32>
 801d2be:	2301      	movs	r3, #1
 801d2c0:	e7de      	b.n	801d280 <_dtoa_r+0x250>
 801d2c2:	2300      	movs	r3, #0
 801d2c4:	9308      	str	r3, [sp, #32]
 801d2c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2c8:	eb0a 0903 	add.w	r9, sl, r3
 801d2cc:	f109 0301 	add.w	r3, r9, #1
 801d2d0:	2b01      	cmp	r3, #1
 801d2d2:	9301      	str	r3, [sp, #4]
 801d2d4:	bfb8      	it	lt
 801d2d6:	2301      	movlt	r3, #1
 801d2d8:	e7dd      	b.n	801d296 <_dtoa_r+0x266>
 801d2da:	2301      	movs	r3, #1
 801d2dc:	e7f2      	b.n	801d2c4 <_dtoa_r+0x294>
 801d2de:	2501      	movs	r5, #1
 801d2e0:	2300      	movs	r3, #0
 801d2e2:	9305      	str	r3, [sp, #20]
 801d2e4:	9508      	str	r5, [sp, #32]
 801d2e6:	f04f 39ff 	mov.w	r9, #4294967295
 801d2ea:	2200      	movs	r2, #0
 801d2ec:	f8cd 9004 	str.w	r9, [sp, #4]
 801d2f0:	2312      	movs	r3, #18
 801d2f2:	9209      	str	r2, [sp, #36]	; 0x24
 801d2f4:	e7cf      	b.n	801d296 <_dtoa_r+0x266>
 801d2f6:	2301      	movs	r3, #1
 801d2f8:	9308      	str	r3, [sp, #32]
 801d2fa:	e7f4      	b.n	801d2e6 <_dtoa_r+0x2b6>
 801d2fc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801d300:	f8cd 9004 	str.w	r9, [sp, #4]
 801d304:	464b      	mov	r3, r9
 801d306:	e7c6      	b.n	801d296 <_dtoa_r+0x266>
 801d308:	3101      	adds	r1, #1
 801d30a:	6041      	str	r1, [r0, #4]
 801d30c:	0052      	lsls	r2, r2, #1
 801d30e:	e7c6      	b.n	801d29e <_dtoa_r+0x26e>
 801d310:	636f4361 	.word	0x636f4361
 801d314:	3fd287a7 	.word	0x3fd287a7
 801d318:	8b60c8b3 	.word	0x8b60c8b3
 801d31c:	3fc68a28 	.word	0x3fc68a28
 801d320:	509f79fb 	.word	0x509f79fb
 801d324:	3fd34413 	.word	0x3fd34413
 801d328:	08022144 	.word	0x08022144
 801d32c:	080223ee 	.word	0x080223ee
 801d330:	7ff00000 	.word	0x7ff00000
 801d334:	080223ea 	.word	0x080223ea
 801d338:	080223e1 	.word	0x080223e1
 801d33c:	08022652 	.word	0x08022652
 801d340:	3ff80000 	.word	0x3ff80000
 801d344:	08022568 	.word	0x08022568
 801d348:	0802244d 	.word	0x0802244d
 801d34c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d34e:	9a00      	ldr	r2, [sp, #0]
 801d350:	601a      	str	r2, [r3, #0]
 801d352:	9b01      	ldr	r3, [sp, #4]
 801d354:	2b0e      	cmp	r3, #14
 801d356:	f200 80ad 	bhi.w	801d4b4 <_dtoa_r+0x484>
 801d35a:	2d00      	cmp	r5, #0
 801d35c:	f000 80aa 	beq.w	801d4b4 <_dtoa_r+0x484>
 801d360:	f1ba 0f00 	cmp.w	sl, #0
 801d364:	dd36      	ble.n	801d3d4 <_dtoa_r+0x3a4>
 801d366:	4ac3      	ldr	r2, [pc, #780]	; (801d674 <_dtoa_r+0x644>)
 801d368:	f00a 030f 	and.w	r3, sl, #15
 801d36c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801d370:	ed93 7b00 	vldr	d7, [r3]
 801d374:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801d378:	ea4f 172a 	mov.w	r7, sl, asr #4
 801d37c:	eeb0 8a47 	vmov.f32	s16, s14
 801d380:	eef0 8a67 	vmov.f32	s17, s15
 801d384:	d016      	beq.n	801d3b4 <_dtoa_r+0x384>
 801d386:	4bbc      	ldr	r3, [pc, #752]	; (801d678 <_dtoa_r+0x648>)
 801d388:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801d38c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801d390:	f7e3 fa7c 	bl	800088c <__aeabi_ddiv>
 801d394:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d398:	f007 070f 	and.w	r7, r7, #15
 801d39c:	2503      	movs	r5, #3
 801d39e:	4eb6      	ldr	r6, [pc, #728]	; (801d678 <_dtoa_r+0x648>)
 801d3a0:	b957      	cbnz	r7, 801d3b8 <_dtoa_r+0x388>
 801d3a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d3a6:	ec53 2b18 	vmov	r2, r3, d8
 801d3aa:	f7e3 fa6f 	bl	800088c <__aeabi_ddiv>
 801d3ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d3b2:	e029      	b.n	801d408 <_dtoa_r+0x3d8>
 801d3b4:	2502      	movs	r5, #2
 801d3b6:	e7f2      	b.n	801d39e <_dtoa_r+0x36e>
 801d3b8:	07f9      	lsls	r1, r7, #31
 801d3ba:	d508      	bpl.n	801d3ce <_dtoa_r+0x39e>
 801d3bc:	ec51 0b18 	vmov	r0, r1, d8
 801d3c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 801d3c4:	f7e3 f938 	bl	8000638 <__aeabi_dmul>
 801d3c8:	ec41 0b18 	vmov	d8, r0, r1
 801d3cc:	3501      	adds	r5, #1
 801d3ce:	107f      	asrs	r7, r7, #1
 801d3d0:	3608      	adds	r6, #8
 801d3d2:	e7e5      	b.n	801d3a0 <_dtoa_r+0x370>
 801d3d4:	f000 80a6 	beq.w	801d524 <_dtoa_r+0x4f4>
 801d3d8:	f1ca 0600 	rsb	r6, sl, #0
 801d3dc:	4ba5      	ldr	r3, [pc, #660]	; (801d674 <_dtoa_r+0x644>)
 801d3de:	4fa6      	ldr	r7, [pc, #664]	; (801d678 <_dtoa_r+0x648>)
 801d3e0:	f006 020f 	and.w	r2, r6, #15
 801d3e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801d3f0:	f7e3 f922 	bl	8000638 <__aeabi_dmul>
 801d3f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d3f8:	1136      	asrs	r6, r6, #4
 801d3fa:	2300      	movs	r3, #0
 801d3fc:	2502      	movs	r5, #2
 801d3fe:	2e00      	cmp	r6, #0
 801d400:	f040 8085 	bne.w	801d50e <_dtoa_r+0x4de>
 801d404:	2b00      	cmp	r3, #0
 801d406:	d1d2      	bne.n	801d3ae <_dtoa_r+0x37e>
 801d408:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d40a:	2b00      	cmp	r3, #0
 801d40c:	f000 808c 	beq.w	801d528 <_dtoa_r+0x4f8>
 801d410:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801d414:	4b99      	ldr	r3, [pc, #612]	; (801d67c <_dtoa_r+0x64c>)
 801d416:	2200      	movs	r2, #0
 801d418:	4630      	mov	r0, r6
 801d41a:	4639      	mov	r1, r7
 801d41c:	f7e3 fb7e 	bl	8000b1c <__aeabi_dcmplt>
 801d420:	2800      	cmp	r0, #0
 801d422:	f000 8081 	beq.w	801d528 <_dtoa_r+0x4f8>
 801d426:	9b01      	ldr	r3, [sp, #4]
 801d428:	2b00      	cmp	r3, #0
 801d42a:	d07d      	beq.n	801d528 <_dtoa_r+0x4f8>
 801d42c:	f1b9 0f00 	cmp.w	r9, #0
 801d430:	dd3c      	ble.n	801d4ac <_dtoa_r+0x47c>
 801d432:	f10a 33ff 	add.w	r3, sl, #4294967295
 801d436:	9307      	str	r3, [sp, #28]
 801d438:	2200      	movs	r2, #0
 801d43a:	4b91      	ldr	r3, [pc, #580]	; (801d680 <_dtoa_r+0x650>)
 801d43c:	4630      	mov	r0, r6
 801d43e:	4639      	mov	r1, r7
 801d440:	f7e3 f8fa 	bl	8000638 <__aeabi_dmul>
 801d444:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d448:	3501      	adds	r5, #1
 801d44a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801d44e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801d452:	4628      	mov	r0, r5
 801d454:	f7e3 f886 	bl	8000564 <__aeabi_i2d>
 801d458:	4632      	mov	r2, r6
 801d45a:	463b      	mov	r3, r7
 801d45c:	f7e3 f8ec 	bl	8000638 <__aeabi_dmul>
 801d460:	4b88      	ldr	r3, [pc, #544]	; (801d684 <_dtoa_r+0x654>)
 801d462:	2200      	movs	r2, #0
 801d464:	f7e2 ff32 	bl	80002cc <__adddf3>
 801d468:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801d46c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d470:	9303      	str	r3, [sp, #12]
 801d472:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d474:	2b00      	cmp	r3, #0
 801d476:	d15c      	bne.n	801d532 <_dtoa_r+0x502>
 801d478:	4b83      	ldr	r3, [pc, #524]	; (801d688 <_dtoa_r+0x658>)
 801d47a:	2200      	movs	r2, #0
 801d47c:	4630      	mov	r0, r6
 801d47e:	4639      	mov	r1, r7
 801d480:	f7e2 ff22 	bl	80002c8 <__aeabi_dsub>
 801d484:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d488:	4606      	mov	r6, r0
 801d48a:	460f      	mov	r7, r1
 801d48c:	f7e3 fb64 	bl	8000b58 <__aeabi_dcmpgt>
 801d490:	2800      	cmp	r0, #0
 801d492:	f040 8296 	bne.w	801d9c2 <_dtoa_r+0x992>
 801d496:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801d49a:	4630      	mov	r0, r6
 801d49c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d4a0:	4639      	mov	r1, r7
 801d4a2:	f7e3 fb3b 	bl	8000b1c <__aeabi_dcmplt>
 801d4a6:	2800      	cmp	r0, #0
 801d4a8:	f040 8288 	bne.w	801d9bc <_dtoa_r+0x98c>
 801d4ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801d4b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801d4b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d4b6:	2b00      	cmp	r3, #0
 801d4b8:	f2c0 8158 	blt.w	801d76c <_dtoa_r+0x73c>
 801d4bc:	f1ba 0f0e 	cmp.w	sl, #14
 801d4c0:	f300 8154 	bgt.w	801d76c <_dtoa_r+0x73c>
 801d4c4:	4b6b      	ldr	r3, [pc, #428]	; (801d674 <_dtoa_r+0x644>)
 801d4c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801d4ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d4ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d4d0:	2b00      	cmp	r3, #0
 801d4d2:	f280 80e3 	bge.w	801d69c <_dtoa_r+0x66c>
 801d4d6:	9b01      	ldr	r3, [sp, #4]
 801d4d8:	2b00      	cmp	r3, #0
 801d4da:	f300 80df 	bgt.w	801d69c <_dtoa_r+0x66c>
 801d4de:	f040 826d 	bne.w	801d9bc <_dtoa_r+0x98c>
 801d4e2:	4b69      	ldr	r3, [pc, #420]	; (801d688 <_dtoa_r+0x658>)
 801d4e4:	2200      	movs	r2, #0
 801d4e6:	4640      	mov	r0, r8
 801d4e8:	4649      	mov	r1, r9
 801d4ea:	f7e3 f8a5 	bl	8000638 <__aeabi_dmul>
 801d4ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d4f2:	f7e3 fb27 	bl	8000b44 <__aeabi_dcmpge>
 801d4f6:	9e01      	ldr	r6, [sp, #4]
 801d4f8:	4637      	mov	r7, r6
 801d4fa:	2800      	cmp	r0, #0
 801d4fc:	f040 8243 	bne.w	801d986 <_dtoa_r+0x956>
 801d500:	9d00      	ldr	r5, [sp, #0]
 801d502:	2331      	movs	r3, #49	; 0x31
 801d504:	f805 3b01 	strb.w	r3, [r5], #1
 801d508:	f10a 0a01 	add.w	sl, sl, #1
 801d50c:	e23f      	b.n	801d98e <_dtoa_r+0x95e>
 801d50e:	07f2      	lsls	r2, r6, #31
 801d510:	d505      	bpl.n	801d51e <_dtoa_r+0x4ee>
 801d512:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d516:	f7e3 f88f 	bl	8000638 <__aeabi_dmul>
 801d51a:	3501      	adds	r5, #1
 801d51c:	2301      	movs	r3, #1
 801d51e:	1076      	asrs	r6, r6, #1
 801d520:	3708      	adds	r7, #8
 801d522:	e76c      	b.n	801d3fe <_dtoa_r+0x3ce>
 801d524:	2502      	movs	r5, #2
 801d526:	e76f      	b.n	801d408 <_dtoa_r+0x3d8>
 801d528:	9b01      	ldr	r3, [sp, #4]
 801d52a:	f8cd a01c 	str.w	sl, [sp, #28]
 801d52e:	930c      	str	r3, [sp, #48]	; 0x30
 801d530:	e78d      	b.n	801d44e <_dtoa_r+0x41e>
 801d532:	9900      	ldr	r1, [sp, #0]
 801d534:	980c      	ldr	r0, [sp, #48]	; 0x30
 801d536:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d538:	4b4e      	ldr	r3, [pc, #312]	; (801d674 <_dtoa_r+0x644>)
 801d53a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d53e:	4401      	add	r1, r0
 801d540:	9102      	str	r1, [sp, #8]
 801d542:	9908      	ldr	r1, [sp, #32]
 801d544:	eeb0 8a47 	vmov.f32	s16, s14
 801d548:	eef0 8a67 	vmov.f32	s17, s15
 801d54c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d550:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d554:	2900      	cmp	r1, #0
 801d556:	d045      	beq.n	801d5e4 <_dtoa_r+0x5b4>
 801d558:	494c      	ldr	r1, [pc, #304]	; (801d68c <_dtoa_r+0x65c>)
 801d55a:	2000      	movs	r0, #0
 801d55c:	f7e3 f996 	bl	800088c <__aeabi_ddiv>
 801d560:	ec53 2b18 	vmov	r2, r3, d8
 801d564:	f7e2 feb0 	bl	80002c8 <__aeabi_dsub>
 801d568:	9d00      	ldr	r5, [sp, #0]
 801d56a:	ec41 0b18 	vmov	d8, r0, r1
 801d56e:	4639      	mov	r1, r7
 801d570:	4630      	mov	r0, r6
 801d572:	f7e3 fb11 	bl	8000b98 <__aeabi_d2iz>
 801d576:	900c      	str	r0, [sp, #48]	; 0x30
 801d578:	f7e2 fff4 	bl	8000564 <__aeabi_i2d>
 801d57c:	4602      	mov	r2, r0
 801d57e:	460b      	mov	r3, r1
 801d580:	4630      	mov	r0, r6
 801d582:	4639      	mov	r1, r7
 801d584:	f7e2 fea0 	bl	80002c8 <__aeabi_dsub>
 801d588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d58a:	3330      	adds	r3, #48	; 0x30
 801d58c:	f805 3b01 	strb.w	r3, [r5], #1
 801d590:	ec53 2b18 	vmov	r2, r3, d8
 801d594:	4606      	mov	r6, r0
 801d596:	460f      	mov	r7, r1
 801d598:	f7e3 fac0 	bl	8000b1c <__aeabi_dcmplt>
 801d59c:	2800      	cmp	r0, #0
 801d59e:	d165      	bne.n	801d66c <_dtoa_r+0x63c>
 801d5a0:	4632      	mov	r2, r6
 801d5a2:	463b      	mov	r3, r7
 801d5a4:	4935      	ldr	r1, [pc, #212]	; (801d67c <_dtoa_r+0x64c>)
 801d5a6:	2000      	movs	r0, #0
 801d5a8:	f7e2 fe8e 	bl	80002c8 <__aeabi_dsub>
 801d5ac:	ec53 2b18 	vmov	r2, r3, d8
 801d5b0:	f7e3 fab4 	bl	8000b1c <__aeabi_dcmplt>
 801d5b4:	2800      	cmp	r0, #0
 801d5b6:	f040 80b9 	bne.w	801d72c <_dtoa_r+0x6fc>
 801d5ba:	9b02      	ldr	r3, [sp, #8]
 801d5bc:	429d      	cmp	r5, r3
 801d5be:	f43f af75 	beq.w	801d4ac <_dtoa_r+0x47c>
 801d5c2:	4b2f      	ldr	r3, [pc, #188]	; (801d680 <_dtoa_r+0x650>)
 801d5c4:	ec51 0b18 	vmov	r0, r1, d8
 801d5c8:	2200      	movs	r2, #0
 801d5ca:	f7e3 f835 	bl	8000638 <__aeabi_dmul>
 801d5ce:	4b2c      	ldr	r3, [pc, #176]	; (801d680 <_dtoa_r+0x650>)
 801d5d0:	ec41 0b18 	vmov	d8, r0, r1
 801d5d4:	2200      	movs	r2, #0
 801d5d6:	4630      	mov	r0, r6
 801d5d8:	4639      	mov	r1, r7
 801d5da:	f7e3 f82d 	bl	8000638 <__aeabi_dmul>
 801d5de:	4606      	mov	r6, r0
 801d5e0:	460f      	mov	r7, r1
 801d5e2:	e7c4      	b.n	801d56e <_dtoa_r+0x53e>
 801d5e4:	ec51 0b17 	vmov	r0, r1, d7
 801d5e8:	f7e3 f826 	bl	8000638 <__aeabi_dmul>
 801d5ec:	9b02      	ldr	r3, [sp, #8]
 801d5ee:	9d00      	ldr	r5, [sp, #0]
 801d5f0:	930c      	str	r3, [sp, #48]	; 0x30
 801d5f2:	ec41 0b18 	vmov	d8, r0, r1
 801d5f6:	4639      	mov	r1, r7
 801d5f8:	4630      	mov	r0, r6
 801d5fa:	f7e3 facd 	bl	8000b98 <__aeabi_d2iz>
 801d5fe:	9011      	str	r0, [sp, #68]	; 0x44
 801d600:	f7e2 ffb0 	bl	8000564 <__aeabi_i2d>
 801d604:	4602      	mov	r2, r0
 801d606:	460b      	mov	r3, r1
 801d608:	4630      	mov	r0, r6
 801d60a:	4639      	mov	r1, r7
 801d60c:	f7e2 fe5c 	bl	80002c8 <__aeabi_dsub>
 801d610:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d612:	3330      	adds	r3, #48	; 0x30
 801d614:	f805 3b01 	strb.w	r3, [r5], #1
 801d618:	9b02      	ldr	r3, [sp, #8]
 801d61a:	429d      	cmp	r5, r3
 801d61c:	4606      	mov	r6, r0
 801d61e:	460f      	mov	r7, r1
 801d620:	f04f 0200 	mov.w	r2, #0
 801d624:	d134      	bne.n	801d690 <_dtoa_r+0x660>
 801d626:	4b19      	ldr	r3, [pc, #100]	; (801d68c <_dtoa_r+0x65c>)
 801d628:	ec51 0b18 	vmov	r0, r1, d8
 801d62c:	f7e2 fe4e 	bl	80002cc <__adddf3>
 801d630:	4602      	mov	r2, r0
 801d632:	460b      	mov	r3, r1
 801d634:	4630      	mov	r0, r6
 801d636:	4639      	mov	r1, r7
 801d638:	f7e3 fa8e 	bl	8000b58 <__aeabi_dcmpgt>
 801d63c:	2800      	cmp	r0, #0
 801d63e:	d175      	bne.n	801d72c <_dtoa_r+0x6fc>
 801d640:	ec53 2b18 	vmov	r2, r3, d8
 801d644:	4911      	ldr	r1, [pc, #68]	; (801d68c <_dtoa_r+0x65c>)
 801d646:	2000      	movs	r0, #0
 801d648:	f7e2 fe3e 	bl	80002c8 <__aeabi_dsub>
 801d64c:	4602      	mov	r2, r0
 801d64e:	460b      	mov	r3, r1
 801d650:	4630      	mov	r0, r6
 801d652:	4639      	mov	r1, r7
 801d654:	f7e3 fa62 	bl	8000b1c <__aeabi_dcmplt>
 801d658:	2800      	cmp	r0, #0
 801d65a:	f43f af27 	beq.w	801d4ac <_dtoa_r+0x47c>
 801d65e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d660:	1e6b      	subs	r3, r5, #1
 801d662:	930c      	str	r3, [sp, #48]	; 0x30
 801d664:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801d668:	2b30      	cmp	r3, #48	; 0x30
 801d66a:	d0f8      	beq.n	801d65e <_dtoa_r+0x62e>
 801d66c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801d670:	e04a      	b.n	801d708 <_dtoa_r+0x6d8>
 801d672:	bf00      	nop
 801d674:	08022568 	.word	0x08022568
 801d678:	08022540 	.word	0x08022540
 801d67c:	3ff00000 	.word	0x3ff00000
 801d680:	40240000 	.word	0x40240000
 801d684:	401c0000 	.word	0x401c0000
 801d688:	40140000 	.word	0x40140000
 801d68c:	3fe00000 	.word	0x3fe00000
 801d690:	4baf      	ldr	r3, [pc, #700]	; (801d950 <_dtoa_r+0x920>)
 801d692:	f7e2 ffd1 	bl	8000638 <__aeabi_dmul>
 801d696:	4606      	mov	r6, r0
 801d698:	460f      	mov	r7, r1
 801d69a:	e7ac      	b.n	801d5f6 <_dtoa_r+0x5c6>
 801d69c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801d6a0:	9d00      	ldr	r5, [sp, #0]
 801d6a2:	4642      	mov	r2, r8
 801d6a4:	464b      	mov	r3, r9
 801d6a6:	4630      	mov	r0, r6
 801d6a8:	4639      	mov	r1, r7
 801d6aa:	f7e3 f8ef 	bl	800088c <__aeabi_ddiv>
 801d6ae:	f7e3 fa73 	bl	8000b98 <__aeabi_d2iz>
 801d6b2:	9002      	str	r0, [sp, #8]
 801d6b4:	f7e2 ff56 	bl	8000564 <__aeabi_i2d>
 801d6b8:	4642      	mov	r2, r8
 801d6ba:	464b      	mov	r3, r9
 801d6bc:	f7e2 ffbc 	bl	8000638 <__aeabi_dmul>
 801d6c0:	4602      	mov	r2, r0
 801d6c2:	460b      	mov	r3, r1
 801d6c4:	4630      	mov	r0, r6
 801d6c6:	4639      	mov	r1, r7
 801d6c8:	f7e2 fdfe 	bl	80002c8 <__aeabi_dsub>
 801d6cc:	9e02      	ldr	r6, [sp, #8]
 801d6ce:	9f01      	ldr	r7, [sp, #4]
 801d6d0:	3630      	adds	r6, #48	; 0x30
 801d6d2:	f805 6b01 	strb.w	r6, [r5], #1
 801d6d6:	9e00      	ldr	r6, [sp, #0]
 801d6d8:	1bae      	subs	r6, r5, r6
 801d6da:	42b7      	cmp	r7, r6
 801d6dc:	4602      	mov	r2, r0
 801d6de:	460b      	mov	r3, r1
 801d6e0:	d137      	bne.n	801d752 <_dtoa_r+0x722>
 801d6e2:	f7e2 fdf3 	bl	80002cc <__adddf3>
 801d6e6:	4642      	mov	r2, r8
 801d6e8:	464b      	mov	r3, r9
 801d6ea:	4606      	mov	r6, r0
 801d6ec:	460f      	mov	r7, r1
 801d6ee:	f7e3 fa33 	bl	8000b58 <__aeabi_dcmpgt>
 801d6f2:	b9c8      	cbnz	r0, 801d728 <_dtoa_r+0x6f8>
 801d6f4:	4642      	mov	r2, r8
 801d6f6:	464b      	mov	r3, r9
 801d6f8:	4630      	mov	r0, r6
 801d6fa:	4639      	mov	r1, r7
 801d6fc:	f7e3 fa04 	bl	8000b08 <__aeabi_dcmpeq>
 801d700:	b110      	cbz	r0, 801d708 <_dtoa_r+0x6d8>
 801d702:	9b02      	ldr	r3, [sp, #8]
 801d704:	07d9      	lsls	r1, r3, #31
 801d706:	d40f      	bmi.n	801d728 <_dtoa_r+0x6f8>
 801d708:	4620      	mov	r0, r4
 801d70a:	4659      	mov	r1, fp
 801d70c:	f001 f88e 	bl	801e82c <_Bfree>
 801d710:	2300      	movs	r3, #0
 801d712:	702b      	strb	r3, [r5, #0]
 801d714:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d716:	f10a 0001 	add.w	r0, sl, #1
 801d71a:	6018      	str	r0, [r3, #0]
 801d71c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d71e:	2b00      	cmp	r3, #0
 801d720:	f43f acd8 	beq.w	801d0d4 <_dtoa_r+0xa4>
 801d724:	601d      	str	r5, [r3, #0]
 801d726:	e4d5      	b.n	801d0d4 <_dtoa_r+0xa4>
 801d728:	f8cd a01c 	str.w	sl, [sp, #28]
 801d72c:	462b      	mov	r3, r5
 801d72e:	461d      	mov	r5, r3
 801d730:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d734:	2a39      	cmp	r2, #57	; 0x39
 801d736:	d108      	bne.n	801d74a <_dtoa_r+0x71a>
 801d738:	9a00      	ldr	r2, [sp, #0]
 801d73a:	429a      	cmp	r2, r3
 801d73c:	d1f7      	bne.n	801d72e <_dtoa_r+0x6fe>
 801d73e:	9a07      	ldr	r2, [sp, #28]
 801d740:	9900      	ldr	r1, [sp, #0]
 801d742:	3201      	adds	r2, #1
 801d744:	9207      	str	r2, [sp, #28]
 801d746:	2230      	movs	r2, #48	; 0x30
 801d748:	700a      	strb	r2, [r1, #0]
 801d74a:	781a      	ldrb	r2, [r3, #0]
 801d74c:	3201      	adds	r2, #1
 801d74e:	701a      	strb	r2, [r3, #0]
 801d750:	e78c      	b.n	801d66c <_dtoa_r+0x63c>
 801d752:	4b7f      	ldr	r3, [pc, #508]	; (801d950 <_dtoa_r+0x920>)
 801d754:	2200      	movs	r2, #0
 801d756:	f7e2 ff6f 	bl	8000638 <__aeabi_dmul>
 801d75a:	2200      	movs	r2, #0
 801d75c:	2300      	movs	r3, #0
 801d75e:	4606      	mov	r6, r0
 801d760:	460f      	mov	r7, r1
 801d762:	f7e3 f9d1 	bl	8000b08 <__aeabi_dcmpeq>
 801d766:	2800      	cmp	r0, #0
 801d768:	d09b      	beq.n	801d6a2 <_dtoa_r+0x672>
 801d76a:	e7cd      	b.n	801d708 <_dtoa_r+0x6d8>
 801d76c:	9a08      	ldr	r2, [sp, #32]
 801d76e:	2a00      	cmp	r2, #0
 801d770:	f000 80c4 	beq.w	801d8fc <_dtoa_r+0x8cc>
 801d774:	9a05      	ldr	r2, [sp, #20]
 801d776:	2a01      	cmp	r2, #1
 801d778:	f300 80a8 	bgt.w	801d8cc <_dtoa_r+0x89c>
 801d77c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d77e:	2a00      	cmp	r2, #0
 801d780:	f000 80a0 	beq.w	801d8c4 <_dtoa_r+0x894>
 801d784:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801d788:	9e06      	ldr	r6, [sp, #24]
 801d78a:	4645      	mov	r5, r8
 801d78c:	9a04      	ldr	r2, [sp, #16]
 801d78e:	2101      	movs	r1, #1
 801d790:	441a      	add	r2, r3
 801d792:	4620      	mov	r0, r4
 801d794:	4498      	add	r8, r3
 801d796:	9204      	str	r2, [sp, #16]
 801d798:	f001 f94e 	bl	801ea38 <__i2b>
 801d79c:	4607      	mov	r7, r0
 801d79e:	2d00      	cmp	r5, #0
 801d7a0:	dd0b      	ble.n	801d7ba <_dtoa_r+0x78a>
 801d7a2:	9b04      	ldr	r3, [sp, #16]
 801d7a4:	2b00      	cmp	r3, #0
 801d7a6:	dd08      	ble.n	801d7ba <_dtoa_r+0x78a>
 801d7a8:	42ab      	cmp	r3, r5
 801d7aa:	9a04      	ldr	r2, [sp, #16]
 801d7ac:	bfa8      	it	ge
 801d7ae:	462b      	movge	r3, r5
 801d7b0:	eba8 0803 	sub.w	r8, r8, r3
 801d7b4:	1aed      	subs	r5, r5, r3
 801d7b6:	1ad3      	subs	r3, r2, r3
 801d7b8:	9304      	str	r3, [sp, #16]
 801d7ba:	9b06      	ldr	r3, [sp, #24]
 801d7bc:	b1fb      	cbz	r3, 801d7fe <_dtoa_r+0x7ce>
 801d7be:	9b08      	ldr	r3, [sp, #32]
 801d7c0:	2b00      	cmp	r3, #0
 801d7c2:	f000 809f 	beq.w	801d904 <_dtoa_r+0x8d4>
 801d7c6:	2e00      	cmp	r6, #0
 801d7c8:	dd11      	ble.n	801d7ee <_dtoa_r+0x7be>
 801d7ca:	4639      	mov	r1, r7
 801d7cc:	4632      	mov	r2, r6
 801d7ce:	4620      	mov	r0, r4
 801d7d0:	f001 f9ee 	bl	801ebb0 <__pow5mult>
 801d7d4:	465a      	mov	r2, fp
 801d7d6:	4601      	mov	r1, r0
 801d7d8:	4607      	mov	r7, r0
 801d7da:	4620      	mov	r0, r4
 801d7dc:	f001 f942 	bl	801ea64 <__multiply>
 801d7e0:	4659      	mov	r1, fp
 801d7e2:	9007      	str	r0, [sp, #28]
 801d7e4:	4620      	mov	r0, r4
 801d7e6:	f001 f821 	bl	801e82c <_Bfree>
 801d7ea:	9b07      	ldr	r3, [sp, #28]
 801d7ec:	469b      	mov	fp, r3
 801d7ee:	9b06      	ldr	r3, [sp, #24]
 801d7f0:	1b9a      	subs	r2, r3, r6
 801d7f2:	d004      	beq.n	801d7fe <_dtoa_r+0x7ce>
 801d7f4:	4659      	mov	r1, fp
 801d7f6:	4620      	mov	r0, r4
 801d7f8:	f001 f9da 	bl	801ebb0 <__pow5mult>
 801d7fc:	4683      	mov	fp, r0
 801d7fe:	2101      	movs	r1, #1
 801d800:	4620      	mov	r0, r4
 801d802:	f001 f919 	bl	801ea38 <__i2b>
 801d806:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d808:	2b00      	cmp	r3, #0
 801d80a:	4606      	mov	r6, r0
 801d80c:	dd7c      	ble.n	801d908 <_dtoa_r+0x8d8>
 801d80e:	461a      	mov	r2, r3
 801d810:	4601      	mov	r1, r0
 801d812:	4620      	mov	r0, r4
 801d814:	f001 f9cc 	bl	801ebb0 <__pow5mult>
 801d818:	9b05      	ldr	r3, [sp, #20]
 801d81a:	2b01      	cmp	r3, #1
 801d81c:	4606      	mov	r6, r0
 801d81e:	dd76      	ble.n	801d90e <_dtoa_r+0x8de>
 801d820:	2300      	movs	r3, #0
 801d822:	9306      	str	r3, [sp, #24]
 801d824:	6933      	ldr	r3, [r6, #16]
 801d826:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801d82a:	6918      	ldr	r0, [r3, #16]
 801d82c:	f001 f8b4 	bl	801e998 <__hi0bits>
 801d830:	f1c0 0020 	rsb	r0, r0, #32
 801d834:	9b04      	ldr	r3, [sp, #16]
 801d836:	4418      	add	r0, r3
 801d838:	f010 001f 	ands.w	r0, r0, #31
 801d83c:	f000 8086 	beq.w	801d94c <_dtoa_r+0x91c>
 801d840:	f1c0 0320 	rsb	r3, r0, #32
 801d844:	2b04      	cmp	r3, #4
 801d846:	dd7f      	ble.n	801d948 <_dtoa_r+0x918>
 801d848:	f1c0 001c 	rsb	r0, r0, #28
 801d84c:	9b04      	ldr	r3, [sp, #16]
 801d84e:	4403      	add	r3, r0
 801d850:	4480      	add	r8, r0
 801d852:	4405      	add	r5, r0
 801d854:	9304      	str	r3, [sp, #16]
 801d856:	f1b8 0f00 	cmp.w	r8, #0
 801d85a:	dd05      	ble.n	801d868 <_dtoa_r+0x838>
 801d85c:	4659      	mov	r1, fp
 801d85e:	4642      	mov	r2, r8
 801d860:	4620      	mov	r0, r4
 801d862:	f001 f9ff 	bl	801ec64 <__lshift>
 801d866:	4683      	mov	fp, r0
 801d868:	9b04      	ldr	r3, [sp, #16]
 801d86a:	2b00      	cmp	r3, #0
 801d86c:	dd05      	ble.n	801d87a <_dtoa_r+0x84a>
 801d86e:	4631      	mov	r1, r6
 801d870:	461a      	mov	r2, r3
 801d872:	4620      	mov	r0, r4
 801d874:	f001 f9f6 	bl	801ec64 <__lshift>
 801d878:	4606      	mov	r6, r0
 801d87a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d87c:	2b00      	cmp	r3, #0
 801d87e:	d069      	beq.n	801d954 <_dtoa_r+0x924>
 801d880:	4631      	mov	r1, r6
 801d882:	4658      	mov	r0, fp
 801d884:	f001 fa5a 	bl	801ed3c <__mcmp>
 801d888:	2800      	cmp	r0, #0
 801d88a:	da63      	bge.n	801d954 <_dtoa_r+0x924>
 801d88c:	2300      	movs	r3, #0
 801d88e:	4659      	mov	r1, fp
 801d890:	220a      	movs	r2, #10
 801d892:	4620      	mov	r0, r4
 801d894:	f000 ffec 	bl	801e870 <__multadd>
 801d898:	9b08      	ldr	r3, [sp, #32]
 801d89a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d89e:	4683      	mov	fp, r0
 801d8a0:	2b00      	cmp	r3, #0
 801d8a2:	f000 818f 	beq.w	801dbc4 <_dtoa_r+0xb94>
 801d8a6:	4639      	mov	r1, r7
 801d8a8:	2300      	movs	r3, #0
 801d8aa:	220a      	movs	r2, #10
 801d8ac:	4620      	mov	r0, r4
 801d8ae:	f000 ffdf 	bl	801e870 <__multadd>
 801d8b2:	f1b9 0f00 	cmp.w	r9, #0
 801d8b6:	4607      	mov	r7, r0
 801d8b8:	f300 808e 	bgt.w	801d9d8 <_dtoa_r+0x9a8>
 801d8bc:	9b05      	ldr	r3, [sp, #20]
 801d8be:	2b02      	cmp	r3, #2
 801d8c0:	dc50      	bgt.n	801d964 <_dtoa_r+0x934>
 801d8c2:	e089      	b.n	801d9d8 <_dtoa_r+0x9a8>
 801d8c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d8c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801d8ca:	e75d      	b.n	801d788 <_dtoa_r+0x758>
 801d8cc:	9b01      	ldr	r3, [sp, #4]
 801d8ce:	1e5e      	subs	r6, r3, #1
 801d8d0:	9b06      	ldr	r3, [sp, #24]
 801d8d2:	42b3      	cmp	r3, r6
 801d8d4:	bfbf      	itttt	lt
 801d8d6:	9b06      	ldrlt	r3, [sp, #24]
 801d8d8:	9606      	strlt	r6, [sp, #24]
 801d8da:	1af2      	sublt	r2, r6, r3
 801d8dc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801d8de:	bfb6      	itet	lt
 801d8e0:	189b      	addlt	r3, r3, r2
 801d8e2:	1b9e      	subge	r6, r3, r6
 801d8e4:	930d      	strlt	r3, [sp, #52]	; 0x34
 801d8e6:	9b01      	ldr	r3, [sp, #4]
 801d8e8:	bfb8      	it	lt
 801d8ea:	2600      	movlt	r6, #0
 801d8ec:	2b00      	cmp	r3, #0
 801d8ee:	bfb5      	itete	lt
 801d8f0:	eba8 0503 	sublt.w	r5, r8, r3
 801d8f4:	9b01      	ldrge	r3, [sp, #4]
 801d8f6:	2300      	movlt	r3, #0
 801d8f8:	4645      	movge	r5, r8
 801d8fa:	e747      	b.n	801d78c <_dtoa_r+0x75c>
 801d8fc:	9e06      	ldr	r6, [sp, #24]
 801d8fe:	9f08      	ldr	r7, [sp, #32]
 801d900:	4645      	mov	r5, r8
 801d902:	e74c      	b.n	801d79e <_dtoa_r+0x76e>
 801d904:	9a06      	ldr	r2, [sp, #24]
 801d906:	e775      	b.n	801d7f4 <_dtoa_r+0x7c4>
 801d908:	9b05      	ldr	r3, [sp, #20]
 801d90a:	2b01      	cmp	r3, #1
 801d90c:	dc18      	bgt.n	801d940 <_dtoa_r+0x910>
 801d90e:	9b02      	ldr	r3, [sp, #8]
 801d910:	b9b3      	cbnz	r3, 801d940 <_dtoa_r+0x910>
 801d912:	9b03      	ldr	r3, [sp, #12]
 801d914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d918:	b9a3      	cbnz	r3, 801d944 <_dtoa_r+0x914>
 801d91a:	9b03      	ldr	r3, [sp, #12]
 801d91c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d920:	0d1b      	lsrs	r3, r3, #20
 801d922:	051b      	lsls	r3, r3, #20
 801d924:	b12b      	cbz	r3, 801d932 <_dtoa_r+0x902>
 801d926:	9b04      	ldr	r3, [sp, #16]
 801d928:	3301      	adds	r3, #1
 801d92a:	9304      	str	r3, [sp, #16]
 801d92c:	f108 0801 	add.w	r8, r8, #1
 801d930:	2301      	movs	r3, #1
 801d932:	9306      	str	r3, [sp, #24]
 801d934:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d936:	2b00      	cmp	r3, #0
 801d938:	f47f af74 	bne.w	801d824 <_dtoa_r+0x7f4>
 801d93c:	2001      	movs	r0, #1
 801d93e:	e779      	b.n	801d834 <_dtoa_r+0x804>
 801d940:	2300      	movs	r3, #0
 801d942:	e7f6      	b.n	801d932 <_dtoa_r+0x902>
 801d944:	9b02      	ldr	r3, [sp, #8]
 801d946:	e7f4      	b.n	801d932 <_dtoa_r+0x902>
 801d948:	d085      	beq.n	801d856 <_dtoa_r+0x826>
 801d94a:	4618      	mov	r0, r3
 801d94c:	301c      	adds	r0, #28
 801d94e:	e77d      	b.n	801d84c <_dtoa_r+0x81c>
 801d950:	40240000 	.word	0x40240000
 801d954:	9b01      	ldr	r3, [sp, #4]
 801d956:	2b00      	cmp	r3, #0
 801d958:	dc38      	bgt.n	801d9cc <_dtoa_r+0x99c>
 801d95a:	9b05      	ldr	r3, [sp, #20]
 801d95c:	2b02      	cmp	r3, #2
 801d95e:	dd35      	ble.n	801d9cc <_dtoa_r+0x99c>
 801d960:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801d964:	f1b9 0f00 	cmp.w	r9, #0
 801d968:	d10d      	bne.n	801d986 <_dtoa_r+0x956>
 801d96a:	4631      	mov	r1, r6
 801d96c:	464b      	mov	r3, r9
 801d96e:	2205      	movs	r2, #5
 801d970:	4620      	mov	r0, r4
 801d972:	f000 ff7d 	bl	801e870 <__multadd>
 801d976:	4601      	mov	r1, r0
 801d978:	4606      	mov	r6, r0
 801d97a:	4658      	mov	r0, fp
 801d97c:	f001 f9de 	bl	801ed3c <__mcmp>
 801d980:	2800      	cmp	r0, #0
 801d982:	f73f adbd 	bgt.w	801d500 <_dtoa_r+0x4d0>
 801d986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d988:	9d00      	ldr	r5, [sp, #0]
 801d98a:	ea6f 0a03 	mvn.w	sl, r3
 801d98e:	f04f 0800 	mov.w	r8, #0
 801d992:	4631      	mov	r1, r6
 801d994:	4620      	mov	r0, r4
 801d996:	f000 ff49 	bl	801e82c <_Bfree>
 801d99a:	2f00      	cmp	r7, #0
 801d99c:	f43f aeb4 	beq.w	801d708 <_dtoa_r+0x6d8>
 801d9a0:	f1b8 0f00 	cmp.w	r8, #0
 801d9a4:	d005      	beq.n	801d9b2 <_dtoa_r+0x982>
 801d9a6:	45b8      	cmp	r8, r7
 801d9a8:	d003      	beq.n	801d9b2 <_dtoa_r+0x982>
 801d9aa:	4641      	mov	r1, r8
 801d9ac:	4620      	mov	r0, r4
 801d9ae:	f000 ff3d 	bl	801e82c <_Bfree>
 801d9b2:	4639      	mov	r1, r7
 801d9b4:	4620      	mov	r0, r4
 801d9b6:	f000 ff39 	bl	801e82c <_Bfree>
 801d9ba:	e6a5      	b.n	801d708 <_dtoa_r+0x6d8>
 801d9bc:	2600      	movs	r6, #0
 801d9be:	4637      	mov	r7, r6
 801d9c0:	e7e1      	b.n	801d986 <_dtoa_r+0x956>
 801d9c2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801d9c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801d9c8:	4637      	mov	r7, r6
 801d9ca:	e599      	b.n	801d500 <_dtoa_r+0x4d0>
 801d9cc:	9b08      	ldr	r3, [sp, #32]
 801d9ce:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801d9d2:	2b00      	cmp	r3, #0
 801d9d4:	f000 80fd 	beq.w	801dbd2 <_dtoa_r+0xba2>
 801d9d8:	2d00      	cmp	r5, #0
 801d9da:	dd05      	ble.n	801d9e8 <_dtoa_r+0x9b8>
 801d9dc:	4639      	mov	r1, r7
 801d9de:	462a      	mov	r2, r5
 801d9e0:	4620      	mov	r0, r4
 801d9e2:	f001 f93f 	bl	801ec64 <__lshift>
 801d9e6:	4607      	mov	r7, r0
 801d9e8:	9b06      	ldr	r3, [sp, #24]
 801d9ea:	2b00      	cmp	r3, #0
 801d9ec:	d05c      	beq.n	801daa8 <_dtoa_r+0xa78>
 801d9ee:	6879      	ldr	r1, [r7, #4]
 801d9f0:	4620      	mov	r0, r4
 801d9f2:	f000 fedb 	bl	801e7ac <_Balloc>
 801d9f6:	4605      	mov	r5, r0
 801d9f8:	b928      	cbnz	r0, 801da06 <_dtoa_r+0x9d6>
 801d9fa:	4b80      	ldr	r3, [pc, #512]	; (801dbfc <_dtoa_r+0xbcc>)
 801d9fc:	4602      	mov	r2, r0
 801d9fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 801da02:	f7ff bb2e 	b.w	801d062 <_dtoa_r+0x32>
 801da06:	693a      	ldr	r2, [r7, #16]
 801da08:	3202      	adds	r2, #2
 801da0a:	0092      	lsls	r2, r2, #2
 801da0c:	f107 010c 	add.w	r1, r7, #12
 801da10:	300c      	adds	r0, #12
 801da12:	f7fc fb7f 	bl	801a114 <memcpy>
 801da16:	2201      	movs	r2, #1
 801da18:	4629      	mov	r1, r5
 801da1a:	4620      	mov	r0, r4
 801da1c:	f001 f922 	bl	801ec64 <__lshift>
 801da20:	9b00      	ldr	r3, [sp, #0]
 801da22:	3301      	adds	r3, #1
 801da24:	9301      	str	r3, [sp, #4]
 801da26:	9b00      	ldr	r3, [sp, #0]
 801da28:	444b      	add	r3, r9
 801da2a:	9307      	str	r3, [sp, #28]
 801da2c:	9b02      	ldr	r3, [sp, #8]
 801da2e:	f003 0301 	and.w	r3, r3, #1
 801da32:	46b8      	mov	r8, r7
 801da34:	9306      	str	r3, [sp, #24]
 801da36:	4607      	mov	r7, r0
 801da38:	9b01      	ldr	r3, [sp, #4]
 801da3a:	4631      	mov	r1, r6
 801da3c:	3b01      	subs	r3, #1
 801da3e:	4658      	mov	r0, fp
 801da40:	9302      	str	r3, [sp, #8]
 801da42:	f7ff fa69 	bl	801cf18 <quorem>
 801da46:	4603      	mov	r3, r0
 801da48:	3330      	adds	r3, #48	; 0x30
 801da4a:	9004      	str	r0, [sp, #16]
 801da4c:	4641      	mov	r1, r8
 801da4e:	4658      	mov	r0, fp
 801da50:	9308      	str	r3, [sp, #32]
 801da52:	f001 f973 	bl	801ed3c <__mcmp>
 801da56:	463a      	mov	r2, r7
 801da58:	4681      	mov	r9, r0
 801da5a:	4631      	mov	r1, r6
 801da5c:	4620      	mov	r0, r4
 801da5e:	f001 f989 	bl	801ed74 <__mdiff>
 801da62:	68c2      	ldr	r2, [r0, #12]
 801da64:	9b08      	ldr	r3, [sp, #32]
 801da66:	4605      	mov	r5, r0
 801da68:	bb02      	cbnz	r2, 801daac <_dtoa_r+0xa7c>
 801da6a:	4601      	mov	r1, r0
 801da6c:	4658      	mov	r0, fp
 801da6e:	f001 f965 	bl	801ed3c <__mcmp>
 801da72:	9b08      	ldr	r3, [sp, #32]
 801da74:	4602      	mov	r2, r0
 801da76:	4629      	mov	r1, r5
 801da78:	4620      	mov	r0, r4
 801da7a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801da7e:	f000 fed5 	bl	801e82c <_Bfree>
 801da82:	9b05      	ldr	r3, [sp, #20]
 801da84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801da86:	9d01      	ldr	r5, [sp, #4]
 801da88:	ea43 0102 	orr.w	r1, r3, r2
 801da8c:	9b06      	ldr	r3, [sp, #24]
 801da8e:	430b      	orrs	r3, r1
 801da90:	9b08      	ldr	r3, [sp, #32]
 801da92:	d10d      	bne.n	801dab0 <_dtoa_r+0xa80>
 801da94:	2b39      	cmp	r3, #57	; 0x39
 801da96:	d029      	beq.n	801daec <_dtoa_r+0xabc>
 801da98:	f1b9 0f00 	cmp.w	r9, #0
 801da9c:	dd01      	ble.n	801daa2 <_dtoa_r+0xa72>
 801da9e:	9b04      	ldr	r3, [sp, #16]
 801daa0:	3331      	adds	r3, #49	; 0x31
 801daa2:	9a02      	ldr	r2, [sp, #8]
 801daa4:	7013      	strb	r3, [r2, #0]
 801daa6:	e774      	b.n	801d992 <_dtoa_r+0x962>
 801daa8:	4638      	mov	r0, r7
 801daaa:	e7b9      	b.n	801da20 <_dtoa_r+0x9f0>
 801daac:	2201      	movs	r2, #1
 801daae:	e7e2      	b.n	801da76 <_dtoa_r+0xa46>
 801dab0:	f1b9 0f00 	cmp.w	r9, #0
 801dab4:	db06      	blt.n	801dac4 <_dtoa_r+0xa94>
 801dab6:	9905      	ldr	r1, [sp, #20]
 801dab8:	ea41 0909 	orr.w	r9, r1, r9
 801dabc:	9906      	ldr	r1, [sp, #24]
 801dabe:	ea59 0101 	orrs.w	r1, r9, r1
 801dac2:	d120      	bne.n	801db06 <_dtoa_r+0xad6>
 801dac4:	2a00      	cmp	r2, #0
 801dac6:	ddec      	ble.n	801daa2 <_dtoa_r+0xa72>
 801dac8:	4659      	mov	r1, fp
 801daca:	2201      	movs	r2, #1
 801dacc:	4620      	mov	r0, r4
 801dace:	9301      	str	r3, [sp, #4]
 801dad0:	f001 f8c8 	bl	801ec64 <__lshift>
 801dad4:	4631      	mov	r1, r6
 801dad6:	4683      	mov	fp, r0
 801dad8:	f001 f930 	bl	801ed3c <__mcmp>
 801dadc:	2800      	cmp	r0, #0
 801dade:	9b01      	ldr	r3, [sp, #4]
 801dae0:	dc02      	bgt.n	801dae8 <_dtoa_r+0xab8>
 801dae2:	d1de      	bne.n	801daa2 <_dtoa_r+0xa72>
 801dae4:	07da      	lsls	r2, r3, #31
 801dae6:	d5dc      	bpl.n	801daa2 <_dtoa_r+0xa72>
 801dae8:	2b39      	cmp	r3, #57	; 0x39
 801daea:	d1d8      	bne.n	801da9e <_dtoa_r+0xa6e>
 801daec:	9a02      	ldr	r2, [sp, #8]
 801daee:	2339      	movs	r3, #57	; 0x39
 801daf0:	7013      	strb	r3, [r2, #0]
 801daf2:	462b      	mov	r3, r5
 801daf4:	461d      	mov	r5, r3
 801daf6:	3b01      	subs	r3, #1
 801daf8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801dafc:	2a39      	cmp	r2, #57	; 0x39
 801dafe:	d050      	beq.n	801dba2 <_dtoa_r+0xb72>
 801db00:	3201      	adds	r2, #1
 801db02:	701a      	strb	r2, [r3, #0]
 801db04:	e745      	b.n	801d992 <_dtoa_r+0x962>
 801db06:	2a00      	cmp	r2, #0
 801db08:	dd03      	ble.n	801db12 <_dtoa_r+0xae2>
 801db0a:	2b39      	cmp	r3, #57	; 0x39
 801db0c:	d0ee      	beq.n	801daec <_dtoa_r+0xabc>
 801db0e:	3301      	adds	r3, #1
 801db10:	e7c7      	b.n	801daa2 <_dtoa_r+0xa72>
 801db12:	9a01      	ldr	r2, [sp, #4]
 801db14:	9907      	ldr	r1, [sp, #28]
 801db16:	f802 3c01 	strb.w	r3, [r2, #-1]
 801db1a:	428a      	cmp	r2, r1
 801db1c:	d02a      	beq.n	801db74 <_dtoa_r+0xb44>
 801db1e:	4659      	mov	r1, fp
 801db20:	2300      	movs	r3, #0
 801db22:	220a      	movs	r2, #10
 801db24:	4620      	mov	r0, r4
 801db26:	f000 fea3 	bl	801e870 <__multadd>
 801db2a:	45b8      	cmp	r8, r7
 801db2c:	4683      	mov	fp, r0
 801db2e:	f04f 0300 	mov.w	r3, #0
 801db32:	f04f 020a 	mov.w	r2, #10
 801db36:	4641      	mov	r1, r8
 801db38:	4620      	mov	r0, r4
 801db3a:	d107      	bne.n	801db4c <_dtoa_r+0xb1c>
 801db3c:	f000 fe98 	bl	801e870 <__multadd>
 801db40:	4680      	mov	r8, r0
 801db42:	4607      	mov	r7, r0
 801db44:	9b01      	ldr	r3, [sp, #4]
 801db46:	3301      	adds	r3, #1
 801db48:	9301      	str	r3, [sp, #4]
 801db4a:	e775      	b.n	801da38 <_dtoa_r+0xa08>
 801db4c:	f000 fe90 	bl	801e870 <__multadd>
 801db50:	4639      	mov	r1, r7
 801db52:	4680      	mov	r8, r0
 801db54:	2300      	movs	r3, #0
 801db56:	220a      	movs	r2, #10
 801db58:	4620      	mov	r0, r4
 801db5a:	f000 fe89 	bl	801e870 <__multadd>
 801db5e:	4607      	mov	r7, r0
 801db60:	e7f0      	b.n	801db44 <_dtoa_r+0xb14>
 801db62:	f1b9 0f00 	cmp.w	r9, #0
 801db66:	9a00      	ldr	r2, [sp, #0]
 801db68:	bfcc      	ite	gt
 801db6a:	464d      	movgt	r5, r9
 801db6c:	2501      	movle	r5, #1
 801db6e:	4415      	add	r5, r2
 801db70:	f04f 0800 	mov.w	r8, #0
 801db74:	4659      	mov	r1, fp
 801db76:	2201      	movs	r2, #1
 801db78:	4620      	mov	r0, r4
 801db7a:	9301      	str	r3, [sp, #4]
 801db7c:	f001 f872 	bl	801ec64 <__lshift>
 801db80:	4631      	mov	r1, r6
 801db82:	4683      	mov	fp, r0
 801db84:	f001 f8da 	bl	801ed3c <__mcmp>
 801db88:	2800      	cmp	r0, #0
 801db8a:	dcb2      	bgt.n	801daf2 <_dtoa_r+0xac2>
 801db8c:	d102      	bne.n	801db94 <_dtoa_r+0xb64>
 801db8e:	9b01      	ldr	r3, [sp, #4]
 801db90:	07db      	lsls	r3, r3, #31
 801db92:	d4ae      	bmi.n	801daf2 <_dtoa_r+0xac2>
 801db94:	462b      	mov	r3, r5
 801db96:	461d      	mov	r5, r3
 801db98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801db9c:	2a30      	cmp	r2, #48	; 0x30
 801db9e:	d0fa      	beq.n	801db96 <_dtoa_r+0xb66>
 801dba0:	e6f7      	b.n	801d992 <_dtoa_r+0x962>
 801dba2:	9a00      	ldr	r2, [sp, #0]
 801dba4:	429a      	cmp	r2, r3
 801dba6:	d1a5      	bne.n	801daf4 <_dtoa_r+0xac4>
 801dba8:	f10a 0a01 	add.w	sl, sl, #1
 801dbac:	2331      	movs	r3, #49	; 0x31
 801dbae:	e779      	b.n	801daa4 <_dtoa_r+0xa74>
 801dbb0:	4b13      	ldr	r3, [pc, #76]	; (801dc00 <_dtoa_r+0xbd0>)
 801dbb2:	f7ff baaf 	b.w	801d114 <_dtoa_r+0xe4>
 801dbb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801dbb8:	2b00      	cmp	r3, #0
 801dbba:	f47f aa86 	bne.w	801d0ca <_dtoa_r+0x9a>
 801dbbe:	4b11      	ldr	r3, [pc, #68]	; (801dc04 <_dtoa_r+0xbd4>)
 801dbc0:	f7ff baa8 	b.w	801d114 <_dtoa_r+0xe4>
 801dbc4:	f1b9 0f00 	cmp.w	r9, #0
 801dbc8:	dc03      	bgt.n	801dbd2 <_dtoa_r+0xba2>
 801dbca:	9b05      	ldr	r3, [sp, #20]
 801dbcc:	2b02      	cmp	r3, #2
 801dbce:	f73f aec9 	bgt.w	801d964 <_dtoa_r+0x934>
 801dbd2:	9d00      	ldr	r5, [sp, #0]
 801dbd4:	4631      	mov	r1, r6
 801dbd6:	4658      	mov	r0, fp
 801dbd8:	f7ff f99e 	bl	801cf18 <quorem>
 801dbdc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801dbe0:	f805 3b01 	strb.w	r3, [r5], #1
 801dbe4:	9a00      	ldr	r2, [sp, #0]
 801dbe6:	1aaa      	subs	r2, r5, r2
 801dbe8:	4591      	cmp	r9, r2
 801dbea:	ddba      	ble.n	801db62 <_dtoa_r+0xb32>
 801dbec:	4659      	mov	r1, fp
 801dbee:	2300      	movs	r3, #0
 801dbf0:	220a      	movs	r2, #10
 801dbf2:	4620      	mov	r0, r4
 801dbf4:	f000 fe3c 	bl	801e870 <__multadd>
 801dbf8:	4683      	mov	fp, r0
 801dbfa:	e7eb      	b.n	801dbd4 <_dtoa_r+0xba4>
 801dbfc:	0802244d 	.word	0x0802244d
 801dc00:	08022651 	.word	0x08022651
 801dc04:	080223e1 	.word	0x080223e1

0801dc08 <__sflush_r>:
 801dc08:	898a      	ldrh	r2, [r1, #12]
 801dc0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc0e:	4605      	mov	r5, r0
 801dc10:	0710      	lsls	r0, r2, #28
 801dc12:	460c      	mov	r4, r1
 801dc14:	d458      	bmi.n	801dcc8 <__sflush_r+0xc0>
 801dc16:	684b      	ldr	r3, [r1, #4]
 801dc18:	2b00      	cmp	r3, #0
 801dc1a:	dc05      	bgt.n	801dc28 <__sflush_r+0x20>
 801dc1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801dc1e:	2b00      	cmp	r3, #0
 801dc20:	dc02      	bgt.n	801dc28 <__sflush_r+0x20>
 801dc22:	2000      	movs	r0, #0
 801dc24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dc28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dc2a:	2e00      	cmp	r6, #0
 801dc2c:	d0f9      	beq.n	801dc22 <__sflush_r+0x1a>
 801dc2e:	2300      	movs	r3, #0
 801dc30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801dc34:	682f      	ldr	r7, [r5, #0]
 801dc36:	602b      	str	r3, [r5, #0]
 801dc38:	d032      	beq.n	801dca0 <__sflush_r+0x98>
 801dc3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801dc3c:	89a3      	ldrh	r3, [r4, #12]
 801dc3e:	075a      	lsls	r2, r3, #29
 801dc40:	d505      	bpl.n	801dc4e <__sflush_r+0x46>
 801dc42:	6863      	ldr	r3, [r4, #4]
 801dc44:	1ac0      	subs	r0, r0, r3
 801dc46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801dc48:	b10b      	cbz	r3, 801dc4e <__sflush_r+0x46>
 801dc4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801dc4c:	1ac0      	subs	r0, r0, r3
 801dc4e:	2300      	movs	r3, #0
 801dc50:	4602      	mov	r2, r0
 801dc52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dc54:	6a21      	ldr	r1, [r4, #32]
 801dc56:	4628      	mov	r0, r5
 801dc58:	47b0      	blx	r6
 801dc5a:	1c43      	adds	r3, r0, #1
 801dc5c:	89a3      	ldrh	r3, [r4, #12]
 801dc5e:	d106      	bne.n	801dc6e <__sflush_r+0x66>
 801dc60:	6829      	ldr	r1, [r5, #0]
 801dc62:	291d      	cmp	r1, #29
 801dc64:	d82c      	bhi.n	801dcc0 <__sflush_r+0xb8>
 801dc66:	4a2a      	ldr	r2, [pc, #168]	; (801dd10 <__sflush_r+0x108>)
 801dc68:	40ca      	lsrs	r2, r1
 801dc6a:	07d6      	lsls	r6, r2, #31
 801dc6c:	d528      	bpl.n	801dcc0 <__sflush_r+0xb8>
 801dc6e:	2200      	movs	r2, #0
 801dc70:	6062      	str	r2, [r4, #4]
 801dc72:	04d9      	lsls	r1, r3, #19
 801dc74:	6922      	ldr	r2, [r4, #16]
 801dc76:	6022      	str	r2, [r4, #0]
 801dc78:	d504      	bpl.n	801dc84 <__sflush_r+0x7c>
 801dc7a:	1c42      	adds	r2, r0, #1
 801dc7c:	d101      	bne.n	801dc82 <__sflush_r+0x7a>
 801dc7e:	682b      	ldr	r3, [r5, #0]
 801dc80:	b903      	cbnz	r3, 801dc84 <__sflush_r+0x7c>
 801dc82:	6560      	str	r0, [r4, #84]	; 0x54
 801dc84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dc86:	602f      	str	r7, [r5, #0]
 801dc88:	2900      	cmp	r1, #0
 801dc8a:	d0ca      	beq.n	801dc22 <__sflush_r+0x1a>
 801dc8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dc90:	4299      	cmp	r1, r3
 801dc92:	d002      	beq.n	801dc9a <__sflush_r+0x92>
 801dc94:	4628      	mov	r0, r5
 801dc96:	f7fc fceb 	bl	801a670 <_free_r>
 801dc9a:	2000      	movs	r0, #0
 801dc9c:	6360      	str	r0, [r4, #52]	; 0x34
 801dc9e:	e7c1      	b.n	801dc24 <__sflush_r+0x1c>
 801dca0:	6a21      	ldr	r1, [r4, #32]
 801dca2:	2301      	movs	r3, #1
 801dca4:	4628      	mov	r0, r5
 801dca6:	47b0      	blx	r6
 801dca8:	1c41      	adds	r1, r0, #1
 801dcaa:	d1c7      	bne.n	801dc3c <__sflush_r+0x34>
 801dcac:	682b      	ldr	r3, [r5, #0]
 801dcae:	2b00      	cmp	r3, #0
 801dcb0:	d0c4      	beq.n	801dc3c <__sflush_r+0x34>
 801dcb2:	2b1d      	cmp	r3, #29
 801dcb4:	d001      	beq.n	801dcba <__sflush_r+0xb2>
 801dcb6:	2b16      	cmp	r3, #22
 801dcb8:	d101      	bne.n	801dcbe <__sflush_r+0xb6>
 801dcba:	602f      	str	r7, [r5, #0]
 801dcbc:	e7b1      	b.n	801dc22 <__sflush_r+0x1a>
 801dcbe:	89a3      	ldrh	r3, [r4, #12]
 801dcc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dcc4:	81a3      	strh	r3, [r4, #12]
 801dcc6:	e7ad      	b.n	801dc24 <__sflush_r+0x1c>
 801dcc8:	690f      	ldr	r7, [r1, #16]
 801dcca:	2f00      	cmp	r7, #0
 801dccc:	d0a9      	beq.n	801dc22 <__sflush_r+0x1a>
 801dcce:	0793      	lsls	r3, r2, #30
 801dcd0:	680e      	ldr	r6, [r1, #0]
 801dcd2:	bf08      	it	eq
 801dcd4:	694b      	ldreq	r3, [r1, #20]
 801dcd6:	600f      	str	r7, [r1, #0]
 801dcd8:	bf18      	it	ne
 801dcda:	2300      	movne	r3, #0
 801dcdc:	eba6 0807 	sub.w	r8, r6, r7
 801dce0:	608b      	str	r3, [r1, #8]
 801dce2:	f1b8 0f00 	cmp.w	r8, #0
 801dce6:	dd9c      	ble.n	801dc22 <__sflush_r+0x1a>
 801dce8:	6a21      	ldr	r1, [r4, #32]
 801dcea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801dcec:	4643      	mov	r3, r8
 801dcee:	463a      	mov	r2, r7
 801dcf0:	4628      	mov	r0, r5
 801dcf2:	47b0      	blx	r6
 801dcf4:	2800      	cmp	r0, #0
 801dcf6:	dc06      	bgt.n	801dd06 <__sflush_r+0xfe>
 801dcf8:	89a3      	ldrh	r3, [r4, #12]
 801dcfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dcfe:	81a3      	strh	r3, [r4, #12]
 801dd00:	f04f 30ff 	mov.w	r0, #4294967295
 801dd04:	e78e      	b.n	801dc24 <__sflush_r+0x1c>
 801dd06:	4407      	add	r7, r0
 801dd08:	eba8 0800 	sub.w	r8, r8, r0
 801dd0c:	e7e9      	b.n	801dce2 <__sflush_r+0xda>
 801dd0e:	bf00      	nop
 801dd10:	20400001 	.word	0x20400001

0801dd14 <_fflush_r>:
 801dd14:	b538      	push	{r3, r4, r5, lr}
 801dd16:	690b      	ldr	r3, [r1, #16]
 801dd18:	4605      	mov	r5, r0
 801dd1a:	460c      	mov	r4, r1
 801dd1c:	b913      	cbnz	r3, 801dd24 <_fflush_r+0x10>
 801dd1e:	2500      	movs	r5, #0
 801dd20:	4628      	mov	r0, r5
 801dd22:	bd38      	pop	{r3, r4, r5, pc}
 801dd24:	b118      	cbz	r0, 801dd2e <_fflush_r+0x1a>
 801dd26:	6983      	ldr	r3, [r0, #24]
 801dd28:	b90b      	cbnz	r3, 801dd2e <_fflush_r+0x1a>
 801dd2a:	f7fb ffff 	bl	8019d2c <__sinit>
 801dd2e:	4b14      	ldr	r3, [pc, #80]	; (801dd80 <_fflush_r+0x6c>)
 801dd30:	429c      	cmp	r4, r3
 801dd32:	d11b      	bne.n	801dd6c <_fflush_r+0x58>
 801dd34:	686c      	ldr	r4, [r5, #4]
 801dd36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dd3a:	2b00      	cmp	r3, #0
 801dd3c:	d0ef      	beq.n	801dd1e <_fflush_r+0xa>
 801dd3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801dd40:	07d0      	lsls	r0, r2, #31
 801dd42:	d404      	bmi.n	801dd4e <_fflush_r+0x3a>
 801dd44:	0599      	lsls	r1, r3, #22
 801dd46:	d402      	bmi.n	801dd4e <_fflush_r+0x3a>
 801dd48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dd4a:	f7fc f9cf 	bl	801a0ec <__retarget_lock_acquire_recursive>
 801dd4e:	4628      	mov	r0, r5
 801dd50:	4621      	mov	r1, r4
 801dd52:	f7ff ff59 	bl	801dc08 <__sflush_r>
 801dd56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dd58:	07da      	lsls	r2, r3, #31
 801dd5a:	4605      	mov	r5, r0
 801dd5c:	d4e0      	bmi.n	801dd20 <_fflush_r+0xc>
 801dd5e:	89a3      	ldrh	r3, [r4, #12]
 801dd60:	059b      	lsls	r3, r3, #22
 801dd62:	d4dd      	bmi.n	801dd20 <_fflush_r+0xc>
 801dd64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dd66:	f7fc f9c3 	bl	801a0f0 <__retarget_lock_release_recursive>
 801dd6a:	e7d9      	b.n	801dd20 <_fflush_r+0xc>
 801dd6c:	4b05      	ldr	r3, [pc, #20]	; (801dd84 <_fflush_r+0x70>)
 801dd6e:	429c      	cmp	r4, r3
 801dd70:	d101      	bne.n	801dd76 <_fflush_r+0x62>
 801dd72:	68ac      	ldr	r4, [r5, #8]
 801dd74:	e7df      	b.n	801dd36 <_fflush_r+0x22>
 801dd76:	4b04      	ldr	r3, [pc, #16]	; (801dd88 <_fflush_r+0x74>)
 801dd78:	429c      	cmp	r4, r3
 801dd7a:	bf08      	it	eq
 801dd7c:	68ec      	ldreq	r4, [r5, #12]
 801dd7e:	e7da      	b.n	801dd36 <_fflush_r+0x22>
 801dd80:	08022100 	.word	0x08022100
 801dd84:	08022120 	.word	0x08022120
 801dd88:	080220e0 	.word	0x080220e0

0801dd8c <fiprintf>:
 801dd8c:	b40e      	push	{r1, r2, r3}
 801dd8e:	b503      	push	{r0, r1, lr}
 801dd90:	4601      	mov	r1, r0
 801dd92:	ab03      	add	r3, sp, #12
 801dd94:	4805      	ldr	r0, [pc, #20]	; (801ddac <fiprintf+0x20>)
 801dd96:	f853 2b04 	ldr.w	r2, [r3], #4
 801dd9a:	6800      	ldr	r0, [r0, #0]
 801dd9c:	9301      	str	r3, [sp, #4]
 801dd9e:	f001 fd4d 	bl	801f83c <_vfiprintf_r>
 801dda2:	b002      	add	sp, #8
 801dda4:	f85d eb04 	ldr.w	lr, [sp], #4
 801dda8:	b003      	add	sp, #12
 801ddaa:	4770      	bx	lr
 801ddac:	200001f8 	.word	0x200001f8

0801ddb0 <rshift>:
 801ddb0:	6903      	ldr	r3, [r0, #16]
 801ddb2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801ddb6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ddba:	ea4f 1261 	mov.w	r2, r1, asr #5
 801ddbe:	f100 0414 	add.w	r4, r0, #20
 801ddc2:	dd45      	ble.n	801de50 <rshift+0xa0>
 801ddc4:	f011 011f 	ands.w	r1, r1, #31
 801ddc8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801ddcc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801ddd0:	d10c      	bne.n	801ddec <rshift+0x3c>
 801ddd2:	f100 0710 	add.w	r7, r0, #16
 801ddd6:	4629      	mov	r1, r5
 801ddd8:	42b1      	cmp	r1, r6
 801ddda:	d334      	bcc.n	801de46 <rshift+0x96>
 801dddc:	1a9b      	subs	r3, r3, r2
 801ddde:	009b      	lsls	r3, r3, #2
 801dde0:	1eea      	subs	r2, r5, #3
 801dde2:	4296      	cmp	r6, r2
 801dde4:	bf38      	it	cc
 801dde6:	2300      	movcc	r3, #0
 801dde8:	4423      	add	r3, r4
 801ddea:	e015      	b.n	801de18 <rshift+0x68>
 801ddec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801ddf0:	f1c1 0820 	rsb	r8, r1, #32
 801ddf4:	40cf      	lsrs	r7, r1
 801ddf6:	f105 0e04 	add.w	lr, r5, #4
 801ddfa:	46a1      	mov	r9, r4
 801ddfc:	4576      	cmp	r6, lr
 801ddfe:	46f4      	mov	ip, lr
 801de00:	d815      	bhi.n	801de2e <rshift+0x7e>
 801de02:	1a9b      	subs	r3, r3, r2
 801de04:	009a      	lsls	r2, r3, #2
 801de06:	3a04      	subs	r2, #4
 801de08:	3501      	adds	r5, #1
 801de0a:	42ae      	cmp	r6, r5
 801de0c:	bf38      	it	cc
 801de0e:	2200      	movcc	r2, #0
 801de10:	18a3      	adds	r3, r4, r2
 801de12:	50a7      	str	r7, [r4, r2]
 801de14:	b107      	cbz	r7, 801de18 <rshift+0x68>
 801de16:	3304      	adds	r3, #4
 801de18:	1b1a      	subs	r2, r3, r4
 801de1a:	42a3      	cmp	r3, r4
 801de1c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801de20:	bf08      	it	eq
 801de22:	2300      	moveq	r3, #0
 801de24:	6102      	str	r2, [r0, #16]
 801de26:	bf08      	it	eq
 801de28:	6143      	streq	r3, [r0, #20]
 801de2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801de2e:	f8dc c000 	ldr.w	ip, [ip]
 801de32:	fa0c fc08 	lsl.w	ip, ip, r8
 801de36:	ea4c 0707 	orr.w	r7, ip, r7
 801de3a:	f849 7b04 	str.w	r7, [r9], #4
 801de3e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801de42:	40cf      	lsrs	r7, r1
 801de44:	e7da      	b.n	801ddfc <rshift+0x4c>
 801de46:	f851 cb04 	ldr.w	ip, [r1], #4
 801de4a:	f847 cf04 	str.w	ip, [r7, #4]!
 801de4e:	e7c3      	b.n	801ddd8 <rshift+0x28>
 801de50:	4623      	mov	r3, r4
 801de52:	e7e1      	b.n	801de18 <rshift+0x68>

0801de54 <__hexdig_fun>:
 801de54:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801de58:	2b09      	cmp	r3, #9
 801de5a:	d802      	bhi.n	801de62 <__hexdig_fun+0xe>
 801de5c:	3820      	subs	r0, #32
 801de5e:	b2c0      	uxtb	r0, r0
 801de60:	4770      	bx	lr
 801de62:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801de66:	2b05      	cmp	r3, #5
 801de68:	d801      	bhi.n	801de6e <__hexdig_fun+0x1a>
 801de6a:	3847      	subs	r0, #71	; 0x47
 801de6c:	e7f7      	b.n	801de5e <__hexdig_fun+0xa>
 801de6e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801de72:	2b05      	cmp	r3, #5
 801de74:	d801      	bhi.n	801de7a <__hexdig_fun+0x26>
 801de76:	3827      	subs	r0, #39	; 0x27
 801de78:	e7f1      	b.n	801de5e <__hexdig_fun+0xa>
 801de7a:	2000      	movs	r0, #0
 801de7c:	4770      	bx	lr
	...

0801de80 <__gethex>:
 801de80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de84:	ed2d 8b02 	vpush	{d8}
 801de88:	b089      	sub	sp, #36	; 0x24
 801de8a:	ee08 0a10 	vmov	s16, r0
 801de8e:	9304      	str	r3, [sp, #16]
 801de90:	4bbc      	ldr	r3, [pc, #752]	; (801e184 <__gethex+0x304>)
 801de92:	681b      	ldr	r3, [r3, #0]
 801de94:	9301      	str	r3, [sp, #4]
 801de96:	4618      	mov	r0, r3
 801de98:	468b      	mov	fp, r1
 801de9a:	4690      	mov	r8, r2
 801de9c:	f7e2 f9b2 	bl	8000204 <strlen>
 801dea0:	9b01      	ldr	r3, [sp, #4]
 801dea2:	f8db 2000 	ldr.w	r2, [fp]
 801dea6:	4403      	add	r3, r0
 801dea8:	4682      	mov	sl, r0
 801deaa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801deae:	9305      	str	r3, [sp, #20]
 801deb0:	1c93      	adds	r3, r2, #2
 801deb2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801deb6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801deba:	32fe      	adds	r2, #254	; 0xfe
 801debc:	18d1      	adds	r1, r2, r3
 801debe:	461f      	mov	r7, r3
 801dec0:	f813 0b01 	ldrb.w	r0, [r3], #1
 801dec4:	9100      	str	r1, [sp, #0]
 801dec6:	2830      	cmp	r0, #48	; 0x30
 801dec8:	d0f8      	beq.n	801debc <__gethex+0x3c>
 801deca:	f7ff ffc3 	bl	801de54 <__hexdig_fun>
 801dece:	4604      	mov	r4, r0
 801ded0:	2800      	cmp	r0, #0
 801ded2:	d13a      	bne.n	801df4a <__gethex+0xca>
 801ded4:	9901      	ldr	r1, [sp, #4]
 801ded6:	4652      	mov	r2, sl
 801ded8:	4638      	mov	r0, r7
 801deda:	f7fd fce5 	bl	801b8a8 <strncmp>
 801dede:	4605      	mov	r5, r0
 801dee0:	2800      	cmp	r0, #0
 801dee2:	d168      	bne.n	801dfb6 <__gethex+0x136>
 801dee4:	f817 000a 	ldrb.w	r0, [r7, sl]
 801dee8:	eb07 060a 	add.w	r6, r7, sl
 801deec:	f7ff ffb2 	bl	801de54 <__hexdig_fun>
 801def0:	2800      	cmp	r0, #0
 801def2:	d062      	beq.n	801dfba <__gethex+0x13a>
 801def4:	4633      	mov	r3, r6
 801def6:	7818      	ldrb	r0, [r3, #0]
 801def8:	2830      	cmp	r0, #48	; 0x30
 801defa:	461f      	mov	r7, r3
 801defc:	f103 0301 	add.w	r3, r3, #1
 801df00:	d0f9      	beq.n	801def6 <__gethex+0x76>
 801df02:	f7ff ffa7 	bl	801de54 <__hexdig_fun>
 801df06:	2301      	movs	r3, #1
 801df08:	fab0 f480 	clz	r4, r0
 801df0c:	0964      	lsrs	r4, r4, #5
 801df0e:	4635      	mov	r5, r6
 801df10:	9300      	str	r3, [sp, #0]
 801df12:	463a      	mov	r2, r7
 801df14:	4616      	mov	r6, r2
 801df16:	3201      	adds	r2, #1
 801df18:	7830      	ldrb	r0, [r6, #0]
 801df1a:	f7ff ff9b 	bl	801de54 <__hexdig_fun>
 801df1e:	2800      	cmp	r0, #0
 801df20:	d1f8      	bne.n	801df14 <__gethex+0x94>
 801df22:	9901      	ldr	r1, [sp, #4]
 801df24:	4652      	mov	r2, sl
 801df26:	4630      	mov	r0, r6
 801df28:	f7fd fcbe 	bl	801b8a8 <strncmp>
 801df2c:	b980      	cbnz	r0, 801df50 <__gethex+0xd0>
 801df2e:	b94d      	cbnz	r5, 801df44 <__gethex+0xc4>
 801df30:	eb06 050a 	add.w	r5, r6, sl
 801df34:	462a      	mov	r2, r5
 801df36:	4616      	mov	r6, r2
 801df38:	3201      	adds	r2, #1
 801df3a:	7830      	ldrb	r0, [r6, #0]
 801df3c:	f7ff ff8a 	bl	801de54 <__hexdig_fun>
 801df40:	2800      	cmp	r0, #0
 801df42:	d1f8      	bne.n	801df36 <__gethex+0xb6>
 801df44:	1bad      	subs	r5, r5, r6
 801df46:	00ad      	lsls	r5, r5, #2
 801df48:	e004      	b.n	801df54 <__gethex+0xd4>
 801df4a:	2400      	movs	r4, #0
 801df4c:	4625      	mov	r5, r4
 801df4e:	e7e0      	b.n	801df12 <__gethex+0x92>
 801df50:	2d00      	cmp	r5, #0
 801df52:	d1f7      	bne.n	801df44 <__gethex+0xc4>
 801df54:	7833      	ldrb	r3, [r6, #0]
 801df56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801df5a:	2b50      	cmp	r3, #80	; 0x50
 801df5c:	d13b      	bne.n	801dfd6 <__gethex+0x156>
 801df5e:	7873      	ldrb	r3, [r6, #1]
 801df60:	2b2b      	cmp	r3, #43	; 0x2b
 801df62:	d02c      	beq.n	801dfbe <__gethex+0x13e>
 801df64:	2b2d      	cmp	r3, #45	; 0x2d
 801df66:	d02e      	beq.n	801dfc6 <__gethex+0x146>
 801df68:	1c71      	adds	r1, r6, #1
 801df6a:	f04f 0900 	mov.w	r9, #0
 801df6e:	7808      	ldrb	r0, [r1, #0]
 801df70:	f7ff ff70 	bl	801de54 <__hexdig_fun>
 801df74:	1e43      	subs	r3, r0, #1
 801df76:	b2db      	uxtb	r3, r3
 801df78:	2b18      	cmp	r3, #24
 801df7a:	d82c      	bhi.n	801dfd6 <__gethex+0x156>
 801df7c:	f1a0 0210 	sub.w	r2, r0, #16
 801df80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801df84:	f7ff ff66 	bl	801de54 <__hexdig_fun>
 801df88:	1e43      	subs	r3, r0, #1
 801df8a:	b2db      	uxtb	r3, r3
 801df8c:	2b18      	cmp	r3, #24
 801df8e:	d91d      	bls.n	801dfcc <__gethex+0x14c>
 801df90:	f1b9 0f00 	cmp.w	r9, #0
 801df94:	d000      	beq.n	801df98 <__gethex+0x118>
 801df96:	4252      	negs	r2, r2
 801df98:	4415      	add	r5, r2
 801df9a:	f8cb 1000 	str.w	r1, [fp]
 801df9e:	b1e4      	cbz	r4, 801dfda <__gethex+0x15a>
 801dfa0:	9b00      	ldr	r3, [sp, #0]
 801dfa2:	2b00      	cmp	r3, #0
 801dfa4:	bf14      	ite	ne
 801dfa6:	2700      	movne	r7, #0
 801dfa8:	2706      	moveq	r7, #6
 801dfaa:	4638      	mov	r0, r7
 801dfac:	b009      	add	sp, #36	; 0x24
 801dfae:	ecbd 8b02 	vpop	{d8}
 801dfb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dfb6:	463e      	mov	r6, r7
 801dfb8:	4625      	mov	r5, r4
 801dfba:	2401      	movs	r4, #1
 801dfbc:	e7ca      	b.n	801df54 <__gethex+0xd4>
 801dfbe:	f04f 0900 	mov.w	r9, #0
 801dfc2:	1cb1      	adds	r1, r6, #2
 801dfc4:	e7d3      	b.n	801df6e <__gethex+0xee>
 801dfc6:	f04f 0901 	mov.w	r9, #1
 801dfca:	e7fa      	b.n	801dfc2 <__gethex+0x142>
 801dfcc:	230a      	movs	r3, #10
 801dfce:	fb03 0202 	mla	r2, r3, r2, r0
 801dfd2:	3a10      	subs	r2, #16
 801dfd4:	e7d4      	b.n	801df80 <__gethex+0x100>
 801dfd6:	4631      	mov	r1, r6
 801dfd8:	e7df      	b.n	801df9a <__gethex+0x11a>
 801dfda:	1bf3      	subs	r3, r6, r7
 801dfdc:	3b01      	subs	r3, #1
 801dfde:	4621      	mov	r1, r4
 801dfe0:	2b07      	cmp	r3, #7
 801dfe2:	dc0b      	bgt.n	801dffc <__gethex+0x17c>
 801dfe4:	ee18 0a10 	vmov	r0, s16
 801dfe8:	f000 fbe0 	bl	801e7ac <_Balloc>
 801dfec:	4604      	mov	r4, r0
 801dfee:	b940      	cbnz	r0, 801e002 <__gethex+0x182>
 801dff0:	4b65      	ldr	r3, [pc, #404]	; (801e188 <__gethex+0x308>)
 801dff2:	4602      	mov	r2, r0
 801dff4:	21de      	movs	r1, #222	; 0xde
 801dff6:	4865      	ldr	r0, [pc, #404]	; (801e18c <__gethex+0x30c>)
 801dff8:	f7fe ff4c 	bl	801ce94 <__assert_func>
 801dffc:	3101      	adds	r1, #1
 801dffe:	105b      	asrs	r3, r3, #1
 801e000:	e7ee      	b.n	801dfe0 <__gethex+0x160>
 801e002:	f100 0914 	add.w	r9, r0, #20
 801e006:	f04f 0b00 	mov.w	fp, #0
 801e00a:	f1ca 0301 	rsb	r3, sl, #1
 801e00e:	f8cd 9008 	str.w	r9, [sp, #8]
 801e012:	f8cd b000 	str.w	fp, [sp]
 801e016:	9306      	str	r3, [sp, #24]
 801e018:	42b7      	cmp	r7, r6
 801e01a:	d340      	bcc.n	801e09e <__gethex+0x21e>
 801e01c:	9802      	ldr	r0, [sp, #8]
 801e01e:	9b00      	ldr	r3, [sp, #0]
 801e020:	f840 3b04 	str.w	r3, [r0], #4
 801e024:	eba0 0009 	sub.w	r0, r0, r9
 801e028:	1080      	asrs	r0, r0, #2
 801e02a:	0146      	lsls	r6, r0, #5
 801e02c:	6120      	str	r0, [r4, #16]
 801e02e:	4618      	mov	r0, r3
 801e030:	f000 fcb2 	bl	801e998 <__hi0bits>
 801e034:	1a30      	subs	r0, r6, r0
 801e036:	f8d8 6000 	ldr.w	r6, [r8]
 801e03a:	42b0      	cmp	r0, r6
 801e03c:	dd63      	ble.n	801e106 <__gethex+0x286>
 801e03e:	1b87      	subs	r7, r0, r6
 801e040:	4639      	mov	r1, r7
 801e042:	4620      	mov	r0, r4
 801e044:	f001 f84c 	bl	801f0e0 <__any_on>
 801e048:	4682      	mov	sl, r0
 801e04a:	b1a8      	cbz	r0, 801e078 <__gethex+0x1f8>
 801e04c:	1e7b      	subs	r3, r7, #1
 801e04e:	1159      	asrs	r1, r3, #5
 801e050:	f003 021f 	and.w	r2, r3, #31
 801e054:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801e058:	f04f 0a01 	mov.w	sl, #1
 801e05c:	fa0a f202 	lsl.w	r2, sl, r2
 801e060:	420a      	tst	r2, r1
 801e062:	d009      	beq.n	801e078 <__gethex+0x1f8>
 801e064:	4553      	cmp	r3, sl
 801e066:	dd05      	ble.n	801e074 <__gethex+0x1f4>
 801e068:	1eb9      	subs	r1, r7, #2
 801e06a:	4620      	mov	r0, r4
 801e06c:	f001 f838 	bl	801f0e0 <__any_on>
 801e070:	2800      	cmp	r0, #0
 801e072:	d145      	bne.n	801e100 <__gethex+0x280>
 801e074:	f04f 0a02 	mov.w	sl, #2
 801e078:	4639      	mov	r1, r7
 801e07a:	4620      	mov	r0, r4
 801e07c:	f7ff fe98 	bl	801ddb0 <rshift>
 801e080:	443d      	add	r5, r7
 801e082:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e086:	42ab      	cmp	r3, r5
 801e088:	da4c      	bge.n	801e124 <__gethex+0x2a4>
 801e08a:	ee18 0a10 	vmov	r0, s16
 801e08e:	4621      	mov	r1, r4
 801e090:	f000 fbcc 	bl	801e82c <_Bfree>
 801e094:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e096:	2300      	movs	r3, #0
 801e098:	6013      	str	r3, [r2, #0]
 801e09a:	27a3      	movs	r7, #163	; 0xa3
 801e09c:	e785      	b.n	801dfaa <__gethex+0x12a>
 801e09e:	1e73      	subs	r3, r6, #1
 801e0a0:	9a05      	ldr	r2, [sp, #20]
 801e0a2:	9303      	str	r3, [sp, #12]
 801e0a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801e0a8:	4293      	cmp	r3, r2
 801e0aa:	d019      	beq.n	801e0e0 <__gethex+0x260>
 801e0ac:	f1bb 0f20 	cmp.w	fp, #32
 801e0b0:	d107      	bne.n	801e0c2 <__gethex+0x242>
 801e0b2:	9b02      	ldr	r3, [sp, #8]
 801e0b4:	9a00      	ldr	r2, [sp, #0]
 801e0b6:	f843 2b04 	str.w	r2, [r3], #4
 801e0ba:	9302      	str	r3, [sp, #8]
 801e0bc:	2300      	movs	r3, #0
 801e0be:	9300      	str	r3, [sp, #0]
 801e0c0:	469b      	mov	fp, r3
 801e0c2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801e0c6:	f7ff fec5 	bl	801de54 <__hexdig_fun>
 801e0ca:	9b00      	ldr	r3, [sp, #0]
 801e0cc:	f000 000f 	and.w	r0, r0, #15
 801e0d0:	fa00 f00b 	lsl.w	r0, r0, fp
 801e0d4:	4303      	orrs	r3, r0
 801e0d6:	9300      	str	r3, [sp, #0]
 801e0d8:	f10b 0b04 	add.w	fp, fp, #4
 801e0dc:	9b03      	ldr	r3, [sp, #12]
 801e0de:	e00d      	b.n	801e0fc <__gethex+0x27c>
 801e0e0:	9b03      	ldr	r3, [sp, #12]
 801e0e2:	9a06      	ldr	r2, [sp, #24]
 801e0e4:	4413      	add	r3, r2
 801e0e6:	42bb      	cmp	r3, r7
 801e0e8:	d3e0      	bcc.n	801e0ac <__gethex+0x22c>
 801e0ea:	4618      	mov	r0, r3
 801e0ec:	9901      	ldr	r1, [sp, #4]
 801e0ee:	9307      	str	r3, [sp, #28]
 801e0f0:	4652      	mov	r2, sl
 801e0f2:	f7fd fbd9 	bl	801b8a8 <strncmp>
 801e0f6:	9b07      	ldr	r3, [sp, #28]
 801e0f8:	2800      	cmp	r0, #0
 801e0fa:	d1d7      	bne.n	801e0ac <__gethex+0x22c>
 801e0fc:	461e      	mov	r6, r3
 801e0fe:	e78b      	b.n	801e018 <__gethex+0x198>
 801e100:	f04f 0a03 	mov.w	sl, #3
 801e104:	e7b8      	b.n	801e078 <__gethex+0x1f8>
 801e106:	da0a      	bge.n	801e11e <__gethex+0x29e>
 801e108:	1a37      	subs	r7, r6, r0
 801e10a:	4621      	mov	r1, r4
 801e10c:	ee18 0a10 	vmov	r0, s16
 801e110:	463a      	mov	r2, r7
 801e112:	f000 fda7 	bl	801ec64 <__lshift>
 801e116:	1bed      	subs	r5, r5, r7
 801e118:	4604      	mov	r4, r0
 801e11a:	f100 0914 	add.w	r9, r0, #20
 801e11e:	f04f 0a00 	mov.w	sl, #0
 801e122:	e7ae      	b.n	801e082 <__gethex+0x202>
 801e124:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801e128:	42a8      	cmp	r0, r5
 801e12a:	dd72      	ble.n	801e212 <__gethex+0x392>
 801e12c:	1b45      	subs	r5, r0, r5
 801e12e:	42ae      	cmp	r6, r5
 801e130:	dc36      	bgt.n	801e1a0 <__gethex+0x320>
 801e132:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e136:	2b02      	cmp	r3, #2
 801e138:	d02a      	beq.n	801e190 <__gethex+0x310>
 801e13a:	2b03      	cmp	r3, #3
 801e13c:	d02c      	beq.n	801e198 <__gethex+0x318>
 801e13e:	2b01      	cmp	r3, #1
 801e140:	d115      	bne.n	801e16e <__gethex+0x2ee>
 801e142:	42ae      	cmp	r6, r5
 801e144:	d113      	bne.n	801e16e <__gethex+0x2ee>
 801e146:	2e01      	cmp	r6, #1
 801e148:	d10b      	bne.n	801e162 <__gethex+0x2e2>
 801e14a:	9a04      	ldr	r2, [sp, #16]
 801e14c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801e150:	6013      	str	r3, [r2, #0]
 801e152:	2301      	movs	r3, #1
 801e154:	6123      	str	r3, [r4, #16]
 801e156:	f8c9 3000 	str.w	r3, [r9]
 801e15a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e15c:	2762      	movs	r7, #98	; 0x62
 801e15e:	601c      	str	r4, [r3, #0]
 801e160:	e723      	b.n	801dfaa <__gethex+0x12a>
 801e162:	1e71      	subs	r1, r6, #1
 801e164:	4620      	mov	r0, r4
 801e166:	f000 ffbb 	bl	801f0e0 <__any_on>
 801e16a:	2800      	cmp	r0, #0
 801e16c:	d1ed      	bne.n	801e14a <__gethex+0x2ca>
 801e16e:	ee18 0a10 	vmov	r0, s16
 801e172:	4621      	mov	r1, r4
 801e174:	f000 fb5a 	bl	801e82c <_Bfree>
 801e178:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e17a:	2300      	movs	r3, #0
 801e17c:	6013      	str	r3, [r2, #0]
 801e17e:	2750      	movs	r7, #80	; 0x50
 801e180:	e713      	b.n	801dfaa <__gethex+0x12a>
 801e182:	bf00      	nop
 801e184:	080224c8 	.word	0x080224c8
 801e188:	0802244d 	.word	0x0802244d
 801e18c:	0802245e 	.word	0x0802245e
 801e190:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e192:	2b00      	cmp	r3, #0
 801e194:	d1eb      	bne.n	801e16e <__gethex+0x2ee>
 801e196:	e7d8      	b.n	801e14a <__gethex+0x2ca>
 801e198:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e19a:	2b00      	cmp	r3, #0
 801e19c:	d1d5      	bne.n	801e14a <__gethex+0x2ca>
 801e19e:	e7e6      	b.n	801e16e <__gethex+0x2ee>
 801e1a0:	1e6f      	subs	r7, r5, #1
 801e1a2:	f1ba 0f00 	cmp.w	sl, #0
 801e1a6:	d131      	bne.n	801e20c <__gethex+0x38c>
 801e1a8:	b127      	cbz	r7, 801e1b4 <__gethex+0x334>
 801e1aa:	4639      	mov	r1, r7
 801e1ac:	4620      	mov	r0, r4
 801e1ae:	f000 ff97 	bl	801f0e0 <__any_on>
 801e1b2:	4682      	mov	sl, r0
 801e1b4:	117b      	asrs	r3, r7, #5
 801e1b6:	2101      	movs	r1, #1
 801e1b8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801e1bc:	f007 071f 	and.w	r7, r7, #31
 801e1c0:	fa01 f707 	lsl.w	r7, r1, r7
 801e1c4:	421f      	tst	r7, r3
 801e1c6:	4629      	mov	r1, r5
 801e1c8:	4620      	mov	r0, r4
 801e1ca:	bf18      	it	ne
 801e1cc:	f04a 0a02 	orrne.w	sl, sl, #2
 801e1d0:	1b76      	subs	r6, r6, r5
 801e1d2:	f7ff fded 	bl	801ddb0 <rshift>
 801e1d6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801e1da:	2702      	movs	r7, #2
 801e1dc:	f1ba 0f00 	cmp.w	sl, #0
 801e1e0:	d048      	beq.n	801e274 <__gethex+0x3f4>
 801e1e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e1e6:	2b02      	cmp	r3, #2
 801e1e8:	d015      	beq.n	801e216 <__gethex+0x396>
 801e1ea:	2b03      	cmp	r3, #3
 801e1ec:	d017      	beq.n	801e21e <__gethex+0x39e>
 801e1ee:	2b01      	cmp	r3, #1
 801e1f0:	d109      	bne.n	801e206 <__gethex+0x386>
 801e1f2:	f01a 0f02 	tst.w	sl, #2
 801e1f6:	d006      	beq.n	801e206 <__gethex+0x386>
 801e1f8:	f8d9 0000 	ldr.w	r0, [r9]
 801e1fc:	ea4a 0a00 	orr.w	sl, sl, r0
 801e200:	f01a 0f01 	tst.w	sl, #1
 801e204:	d10e      	bne.n	801e224 <__gethex+0x3a4>
 801e206:	f047 0710 	orr.w	r7, r7, #16
 801e20a:	e033      	b.n	801e274 <__gethex+0x3f4>
 801e20c:	f04f 0a01 	mov.w	sl, #1
 801e210:	e7d0      	b.n	801e1b4 <__gethex+0x334>
 801e212:	2701      	movs	r7, #1
 801e214:	e7e2      	b.n	801e1dc <__gethex+0x35c>
 801e216:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e218:	f1c3 0301 	rsb	r3, r3, #1
 801e21c:	9315      	str	r3, [sp, #84]	; 0x54
 801e21e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e220:	2b00      	cmp	r3, #0
 801e222:	d0f0      	beq.n	801e206 <__gethex+0x386>
 801e224:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801e228:	f104 0314 	add.w	r3, r4, #20
 801e22c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801e230:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801e234:	f04f 0c00 	mov.w	ip, #0
 801e238:	4618      	mov	r0, r3
 801e23a:	f853 2b04 	ldr.w	r2, [r3], #4
 801e23e:	f1b2 3fff 	cmp.w	r2, #4294967295
 801e242:	d01c      	beq.n	801e27e <__gethex+0x3fe>
 801e244:	3201      	adds	r2, #1
 801e246:	6002      	str	r2, [r0, #0]
 801e248:	2f02      	cmp	r7, #2
 801e24a:	f104 0314 	add.w	r3, r4, #20
 801e24e:	d13f      	bne.n	801e2d0 <__gethex+0x450>
 801e250:	f8d8 2000 	ldr.w	r2, [r8]
 801e254:	3a01      	subs	r2, #1
 801e256:	42b2      	cmp	r2, r6
 801e258:	d10a      	bne.n	801e270 <__gethex+0x3f0>
 801e25a:	1171      	asrs	r1, r6, #5
 801e25c:	2201      	movs	r2, #1
 801e25e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801e262:	f006 061f 	and.w	r6, r6, #31
 801e266:	fa02 f606 	lsl.w	r6, r2, r6
 801e26a:	421e      	tst	r6, r3
 801e26c:	bf18      	it	ne
 801e26e:	4617      	movne	r7, r2
 801e270:	f047 0720 	orr.w	r7, r7, #32
 801e274:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e276:	601c      	str	r4, [r3, #0]
 801e278:	9b04      	ldr	r3, [sp, #16]
 801e27a:	601d      	str	r5, [r3, #0]
 801e27c:	e695      	b.n	801dfaa <__gethex+0x12a>
 801e27e:	4299      	cmp	r1, r3
 801e280:	f843 cc04 	str.w	ip, [r3, #-4]
 801e284:	d8d8      	bhi.n	801e238 <__gethex+0x3b8>
 801e286:	68a3      	ldr	r3, [r4, #8]
 801e288:	459b      	cmp	fp, r3
 801e28a:	db19      	blt.n	801e2c0 <__gethex+0x440>
 801e28c:	6861      	ldr	r1, [r4, #4]
 801e28e:	ee18 0a10 	vmov	r0, s16
 801e292:	3101      	adds	r1, #1
 801e294:	f000 fa8a 	bl	801e7ac <_Balloc>
 801e298:	4681      	mov	r9, r0
 801e29a:	b918      	cbnz	r0, 801e2a4 <__gethex+0x424>
 801e29c:	4b1a      	ldr	r3, [pc, #104]	; (801e308 <__gethex+0x488>)
 801e29e:	4602      	mov	r2, r0
 801e2a0:	2184      	movs	r1, #132	; 0x84
 801e2a2:	e6a8      	b.n	801dff6 <__gethex+0x176>
 801e2a4:	6922      	ldr	r2, [r4, #16]
 801e2a6:	3202      	adds	r2, #2
 801e2a8:	f104 010c 	add.w	r1, r4, #12
 801e2ac:	0092      	lsls	r2, r2, #2
 801e2ae:	300c      	adds	r0, #12
 801e2b0:	f7fb ff30 	bl	801a114 <memcpy>
 801e2b4:	4621      	mov	r1, r4
 801e2b6:	ee18 0a10 	vmov	r0, s16
 801e2ba:	f000 fab7 	bl	801e82c <_Bfree>
 801e2be:	464c      	mov	r4, r9
 801e2c0:	6923      	ldr	r3, [r4, #16]
 801e2c2:	1c5a      	adds	r2, r3, #1
 801e2c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801e2c8:	6122      	str	r2, [r4, #16]
 801e2ca:	2201      	movs	r2, #1
 801e2cc:	615a      	str	r2, [r3, #20]
 801e2ce:	e7bb      	b.n	801e248 <__gethex+0x3c8>
 801e2d0:	6922      	ldr	r2, [r4, #16]
 801e2d2:	455a      	cmp	r2, fp
 801e2d4:	dd0b      	ble.n	801e2ee <__gethex+0x46e>
 801e2d6:	2101      	movs	r1, #1
 801e2d8:	4620      	mov	r0, r4
 801e2da:	f7ff fd69 	bl	801ddb0 <rshift>
 801e2de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e2e2:	3501      	adds	r5, #1
 801e2e4:	42ab      	cmp	r3, r5
 801e2e6:	f6ff aed0 	blt.w	801e08a <__gethex+0x20a>
 801e2ea:	2701      	movs	r7, #1
 801e2ec:	e7c0      	b.n	801e270 <__gethex+0x3f0>
 801e2ee:	f016 061f 	ands.w	r6, r6, #31
 801e2f2:	d0fa      	beq.n	801e2ea <__gethex+0x46a>
 801e2f4:	449a      	add	sl, r3
 801e2f6:	f1c6 0620 	rsb	r6, r6, #32
 801e2fa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801e2fe:	f000 fb4b 	bl	801e998 <__hi0bits>
 801e302:	42b0      	cmp	r0, r6
 801e304:	dbe7      	blt.n	801e2d6 <__gethex+0x456>
 801e306:	e7f0      	b.n	801e2ea <__gethex+0x46a>
 801e308:	0802244d 	.word	0x0802244d

0801e30c <L_shift>:
 801e30c:	f1c2 0208 	rsb	r2, r2, #8
 801e310:	0092      	lsls	r2, r2, #2
 801e312:	b570      	push	{r4, r5, r6, lr}
 801e314:	f1c2 0620 	rsb	r6, r2, #32
 801e318:	6843      	ldr	r3, [r0, #4]
 801e31a:	6804      	ldr	r4, [r0, #0]
 801e31c:	fa03 f506 	lsl.w	r5, r3, r6
 801e320:	432c      	orrs	r4, r5
 801e322:	40d3      	lsrs	r3, r2
 801e324:	6004      	str	r4, [r0, #0]
 801e326:	f840 3f04 	str.w	r3, [r0, #4]!
 801e32a:	4288      	cmp	r0, r1
 801e32c:	d3f4      	bcc.n	801e318 <L_shift+0xc>
 801e32e:	bd70      	pop	{r4, r5, r6, pc}

0801e330 <__match>:
 801e330:	b530      	push	{r4, r5, lr}
 801e332:	6803      	ldr	r3, [r0, #0]
 801e334:	3301      	adds	r3, #1
 801e336:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e33a:	b914      	cbnz	r4, 801e342 <__match+0x12>
 801e33c:	6003      	str	r3, [r0, #0]
 801e33e:	2001      	movs	r0, #1
 801e340:	bd30      	pop	{r4, r5, pc}
 801e342:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e346:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801e34a:	2d19      	cmp	r5, #25
 801e34c:	bf98      	it	ls
 801e34e:	3220      	addls	r2, #32
 801e350:	42a2      	cmp	r2, r4
 801e352:	d0f0      	beq.n	801e336 <__match+0x6>
 801e354:	2000      	movs	r0, #0
 801e356:	e7f3      	b.n	801e340 <__match+0x10>

0801e358 <__hexnan>:
 801e358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e35c:	680b      	ldr	r3, [r1, #0]
 801e35e:	6801      	ldr	r1, [r0, #0]
 801e360:	115e      	asrs	r6, r3, #5
 801e362:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801e366:	f013 031f 	ands.w	r3, r3, #31
 801e36a:	b087      	sub	sp, #28
 801e36c:	bf18      	it	ne
 801e36e:	3604      	addne	r6, #4
 801e370:	2500      	movs	r5, #0
 801e372:	1f37      	subs	r7, r6, #4
 801e374:	4682      	mov	sl, r0
 801e376:	4690      	mov	r8, r2
 801e378:	9301      	str	r3, [sp, #4]
 801e37a:	f846 5c04 	str.w	r5, [r6, #-4]
 801e37e:	46b9      	mov	r9, r7
 801e380:	463c      	mov	r4, r7
 801e382:	9502      	str	r5, [sp, #8]
 801e384:	46ab      	mov	fp, r5
 801e386:	784a      	ldrb	r2, [r1, #1]
 801e388:	1c4b      	adds	r3, r1, #1
 801e38a:	9303      	str	r3, [sp, #12]
 801e38c:	b342      	cbz	r2, 801e3e0 <__hexnan+0x88>
 801e38e:	4610      	mov	r0, r2
 801e390:	9105      	str	r1, [sp, #20]
 801e392:	9204      	str	r2, [sp, #16]
 801e394:	f7ff fd5e 	bl	801de54 <__hexdig_fun>
 801e398:	2800      	cmp	r0, #0
 801e39a:	d14f      	bne.n	801e43c <__hexnan+0xe4>
 801e39c:	9a04      	ldr	r2, [sp, #16]
 801e39e:	9905      	ldr	r1, [sp, #20]
 801e3a0:	2a20      	cmp	r2, #32
 801e3a2:	d818      	bhi.n	801e3d6 <__hexnan+0x7e>
 801e3a4:	9b02      	ldr	r3, [sp, #8]
 801e3a6:	459b      	cmp	fp, r3
 801e3a8:	dd13      	ble.n	801e3d2 <__hexnan+0x7a>
 801e3aa:	454c      	cmp	r4, r9
 801e3ac:	d206      	bcs.n	801e3bc <__hexnan+0x64>
 801e3ae:	2d07      	cmp	r5, #7
 801e3b0:	dc04      	bgt.n	801e3bc <__hexnan+0x64>
 801e3b2:	462a      	mov	r2, r5
 801e3b4:	4649      	mov	r1, r9
 801e3b6:	4620      	mov	r0, r4
 801e3b8:	f7ff ffa8 	bl	801e30c <L_shift>
 801e3bc:	4544      	cmp	r4, r8
 801e3be:	d950      	bls.n	801e462 <__hexnan+0x10a>
 801e3c0:	2300      	movs	r3, #0
 801e3c2:	f1a4 0904 	sub.w	r9, r4, #4
 801e3c6:	f844 3c04 	str.w	r3, [r4, #-4]
 801e3ca:	f8cd b008 	str.w	fp, [sp, #8]
 801e3ce:	464c      	mov	r4, r9
 801e3d0:	461d      	mov	r5, r3
 801e3d2:	9903      	ldr	r1, [sp, #12]
 801e3d4:	e7d7      	b.n	801e386 <__hexnan+0x2e>
 801e3d6:	2a29      	cmp	r2, #41	; 0x29
 801e3d8:	d156      	bne.n	801e488 <__hexnan+0x130>
 801e3da:	3102      	adds	r1, #2
 801e3dc:	f8ca 1000 	str.w	r1, [sl]
 801e3e0:	f1bb 0f00 	cmp.w	fp, #0
 801e3e4:	d050      	beq.n	801e488 <__hexnan+0x130>
 801e3e6:	454c      	cmp	r4, r9
 801e3e8:	d206      	bcs.n	801e3f8 <__hexnan+0xa0>
 801e3ea:	2d07      	cmp	r5, #7
 801e3ec:	dc04      	bgt.n	801e3f8 <__hexnan+0xa0>
 801e3ee:	462a      	mov	r2, r5
 801e3f0:	4649      	mov	r1, r9
 801e3f2:	4620      	mov	r0, r4
 801e3f4:	f7ff ff8a 	bl	801e30c <L_shift>
 801e3f8:	4544      	cmp	r4, r8
 801e3fa:	d934      	bls.n	801e466 <__hexnan+0x10e>
 801e3fc:	f1a8 0204 	sub.w	r2, r8, #4
 801e400:	4623      	mov	r3, r4
 801e402:	f853 1b04 	ldr.w	r1, [r3], #4
 801e406:	f842 1f04 	str.w	r1, [r2, #4]!
 801e40a:	429f      	cmp	r7, r3
 801e40c:	d2f9      	bcs.n	801e402 <__hexnan+0xaa>
 801e40e:	1b3b      	subs	r3, r7, r4
 801e410:	f023 0303 	bic.w	r3, r3, #3
 801e414:	3304      	adds	r3, #4
 801e416:	3401      	adds	r4, #1
 801e418:	3e03      	subs	r6, #3
 801e41a:	42b4      	cmp	r4, r6
 801e41c:	bf88      	it	hi
 801e41e:	2304      	movhi	r3, #4
 801e420:	4443      	add	r3, r8
 801e422:	2200      	movs	r2, #0
 801e424:	f843 2b04 	str.w	r2, [r3], #4
 801e428:	429f      	cmp	r7, r3
 801e42a:	d2fb      	bcs.n	801e424 <__hexnan+0xcc>
 801e42c:	683b      	ldr	r3, [r7, #0]
 801e42e:	b91b      	cbnz	r3, 801e438 <__hexnan+0xe0>
 801e430:	4547      	cmp	r7, r8
 801e432:	d127      	bne.n	801e484 <__hexnan+0x12c>
 801e434:	2301      	movs	r3, #1
 801e436:	603b      	str	r3, [r7, #0]
 801e438:	2005      	movs	r0, #5
 801e43a:	e026      	b.n	801e48a <__hexnan+0x132>
 801e43c:	3501      	adds	r5, #1
 801e43e:	2d08      	cmp	r5, #8
 801e440:	f10b 0b01 	add.w	fp, fp, #1
 801e444:	dd06      	ble.n	801e454 <__hexnan+0xfc>
 801e446:	4544      	cmp	r4, r8
 801e448:	d9c3      	bls.n	801e3d2 <__hexnan+0x7a>
 801e44a:	2300      	movs	r3, #0
 801e44c:	f844 3c04 	str.w	r3, [r4, #-4]
 801e450:	2501      	movs	r5, #1
 801e452:	3c04      	subs	r4, #4
 801e454:	6822      	ldr	r2, [r4, #0]
 801e456:	f000 000f 	and.w	r0, r0, #15
 801e45a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801e45e:	6022      	str	r2, [r4, #0]
 801e460:	e7b7      	b.n	801e3d2 <__hexnan+0x7a>
 801e462:	2508      	movs	r5, #8
 801e464:	e7b5      	b.n	801e3d2 <__hexnan+0x7a>
 801e466:	9b01      	ldr	r3, [sp, #4]
 801e468:	2b00      	cmp	r3, #0
 801e46a:	d0df      	beq.n	801e42c <__hexnan+0xd4>
 801e46c:	f04f 32ff 	mov.w	r2, #4294967295
 801e470:	f1c3 0320 	rsb	r3, r3, #32
 801e474:	fa22 f303 	lsr.w	r3, r2, r3
 801e478:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801e47c:	401a      	ands	r2, r3
 801e47e:	f846 2c04 	str.w	r2, [r6, #-4]
 801e482:	e7d3      	b.n	801e42c <__hexnan+0xd4>
 801e484:	3f04      	subs	r7, #4
 801e486:	e7d1      	b.n	801e42c <__hexnan+0xd4>
 801e488:	2004      	movs	r0, #4
 801e48a:	b007      	add	sp, #28
 801e48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e490 <_findenv_r>:
 801e490:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e494:	4607      	mov	r7, r0
 801e496:	4689      	mov	r9, r1
 801e498:	4616      	mov	r6, r2
 801e49a:	f001 fcdf 	bl	801fe5c <__env_lock>
 801e49e:	4b18      	ldr	r3, [pc, #96]	; (801e500 <_findenv_r+0x70>)
 801e4a0:	681c      	ldr	r4, [r3, #0]
 801e4a2:	469a      	mov	sl, r3
 801e4a4:	b134      	cbz	r4, 801e4b4 <_findenv_r+0x24>
 801e4a6:	464b      	mov	r3, r9
 801e4a8:	4698      	mov	r8, r3
 801e4aa:	f813 1b01 	ldrb.w	r1, [r3], #1
 801e4ae:	b139      	cbz	r1, 801e4c0 <_findenv_r+0x30>
 801e4b0:	293d      	cmp	r1, #61	; 0x3d
 801e4b2:	d1f9      	bne.n	801e4a8 <_findenv_r+0x18>
 801e4b4:	4638      	mov	r0, r7
 801e4b6:	f001 fcd7 	bl	801fe68 <__env_unlock>
 801e4ba:	2000      	movs	r0, #0
 801e4bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4c0:	eba8 0809 	sub.w	r8, r8, r9
 801e4c4:	46a3      	mov	fp, r4
 801e4c6:	f854 0b04 	ldr.w	r0, [r4], #4
 801e4ca:	2800      	cmp	r0, #0
 801e4cc:	d0f2      	beq.n	801e4b4 <_findenv_r+0x24>
 801e4ce:	4642      	mov	r2, r8
 801e4d0:	4649      	mov	r1, r9
 801e4d2:	f7fd f9e9 	bl	801b8a8 <strncmp>
 801e4d6:	2800      	cmp	r0, #0
 801e4d8:	d1f4      	bne.n	801e4c4 <_findenv_r+0x34>
 801e4da:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801e4de:	eb03 0508 	add.w	r5, r3, r8
 801e4e2:	f813 3008 	ldrb.w	r3, [r3, r8]
 801e4e6:	2b3d      	cmp	r3, #61	; 0x3d
 801e4e8:	d1ec      	bne.n	801e4c4 <_findenv_r+0x34>
 801e4ea:	f8da 3000 	ldr.w	r3, [sl]
 801e4ee:	ebab 0303 	sub.w	r3, fp, r3
 801e4f2:	109b      	asrs	r3, r3, #2
 801e4f4:	4638      	mov	r0, r7
 801e4f6:	6033      	str	r3, [r6, #0]
 801e4f8:	f001 fcb6 	bl	801fe68 <__env_unlock>
 801e4fc:	1c68      	adds	r0, r5, #1
 801e4fe:	e7dd      	b.n	801e4bc <_findenv_r+0x2c>
 801e500:	20000430 	.word	0x20000430

0801e504 <_getenv_r>:
 801e504:	b507      	push	{r0, r1, r2, lr}
 801e506:	aa01      	add	r2, sp, #4
 801e508:	f7ff ffc2 	bl	801e490 <_findenv_r>
 801e50c:	b003      	add	sp, #12
 801e50e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801e514 <__gettzinfo>:
 801e514:	4800      	ldr	r0, [pc, #0]	; (801e518 <__gettzinfo+0x4>)
 801e516:	4770      	bx	lr
 801e518:	20000268 	.word	0x20000268

0801e51c <gmtime_r>:
 801e51c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e520:	e9d0 6700 	ldrd	r6, r7, [r0]
 801e524:	460c      	mov	r4, r1
 801e526:	4a51      	ldr	r2, [pc, #324]	; (801e66c <gmtime_r+0x150>)
 801e528:	2300      	movs	r3, #0
 801e52a:	4630      	mov	r0, r6
 801e52c:	4639      	mov	r1, r7
 801e52e:	f7e2 fbcb 	bl	8000cc8 <__aeabi_ldivmod>
 801e532:	4639      	mov	r1, r7
 801e534:	4605      	mov	r5, r0
 801e536:	4a4d      	ldr	r2, [pc, #308]	; (801e66c <gmtime_r+0x150>)
 801e538:	4630      	mov	r0, r6
 801e53a:	2300      	movs	r3, #0
 801e53c:	f7e2 fbc4 	bl	8000cc8 <__aeabi_ldivmod>
 801e540:	2a00      	cmp	r2, #0
 801e542:	bfbc      	itt	lt
 801e544:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 801e548:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 801e54c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801e550:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 801e554:	fbb2 f3f1 	udiv	r3, r2, r1
 801e558:	fb01 2213 	mls	r2, r1, r3, r2
 801e55c:	f04f 013c 	mov.w	r1, #60	; 0x3c
 801e560:	bfac      	ite	ge
 801e562:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 801e566:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 801e56a:	60a3      	str	r3, [r4, #8]
 801e56c:	fbb2 f3f1 	udiv	r3, r2, r1
 801e570:	fb01 2213 	mls	r2, r1, r3, r2
 801e574:	6063      	str	r3, [r4, #4]
 801e576:	6022      	str	r2, [r4, #0]
 801e578:	1cc3      	adds	r3, r0, #3
 801e57a:	2207      	movs	r2, #7
 801e57c:	fb93 f2f2 	sdiv	r2, r3, r2
 801e580:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801e584:	1a9b      	subs	r3, r3, r2
 801e586:	bf48      	it	mi
 801e588:	3307      	addmi	r3, #7
 801e58a:	2800      	cmp	r0, #0
 801e58c:	61a3      	str	r3, [r4, #24]
 801e58e:	bfb8      	it	lt
 801e590:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 801e594:	4936      	ldr	r1, [pc, #216]	; (801e670 <gmtime_r+0x154>)
 801e596:	bfae      	itee	ge
 801e598:	fb90 f1f1 	sdivge	r1, r0, r1
 801e59c:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 801e5a0:	fb93 f1f1 	sdivlt	r1, r3, r1
 801e5a4:	4b33      	ldr	r3, [pc, #204]	; (801e674 <gmtime_r+0x158>)
 801e5a6:	fb03 0001 	mla	r0, r3, r1, r0
 801e5aa:	f648 62ac 	movw	r2, #36524	; 0x8eac
 801e5ae:	fbb0 f2f2 	udiv	r2, r0, r2
 801e5b2:	4402      	add	r2, r0
 801e5b4:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 801e5b8:	fbb0 f3fc 	udiv	r3, r0, ip
 801e5bc:	1ad2      	subs	r2, r2, r3
 801e5be:	f240 176d 	movw	r7, #365	; 0x16d
 801e5c2:	4b2d      	ldr	r3, [pc, #180]	; (801e678 <gmtime_r+0x15c>)
 801e5c4:	fbb0 f3f3 	udiv	r3, r0, r3
 801e5c8:	2664      	movs	r6, #100	; 0x64
 801e5ca:	1ad3      	subs	r3, r2, r3
 801e5cc:	fbb3 f5f7 	udiv	r5, r3, r7
 801e5d0:	fbb3 f3fc 	udiv	r3, r3, ip
 801e5d4:	fbb5 f2f6 	udiv	r2, r5, r6
 801e5d8:	1ad3      	subs	r3, r2, r3
 801e5da:	4403      	add	r3, r0
 801e5dc:	fb07 3315 	mls	r3, r7, r5, r3
 801e5e0:	2099      	movs	r0, #153	; 0x99
 801e5e2:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 801e5e6:	f10c 0c02 	add.w	ip, ip, #2
 801e5ea:	f103 0e01 	add.w	lr, r3, #1
 801e5ee:	fbbc f7f0 	udiv	r7, ip, r0
 801e5f2:	4378      	muls	r0, r7
 801e5f4:	3002      	adds	r0, #2
 801e5f6:	f04f 0805 	mov.w	r8, #5
 801e5fa:	fbb0 f0f8 	udiv	r0, r0, r8
 801e5fe:	ebae 0000 	sub.w	r0, lr, r0
 801e602:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 801e606:	45f4      	cmp	ip, lr
 801e608:	bf94      	ite	ls
 801e60a:	f04f 0c02 	movls.w	ip, #2
 801e60e:	f06f 0c09 	mvnhi.w	ip, #9
 801e612:	4467      	add	r7, ip
 801e614:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 801e618:	fb0c 5101 	mla	r1, ip, r1, r5
 801e61c:	2f01      	cmp	r7, #1
 801e61e:	bf98      	it	ls
 801e620:	3101      	addls	r1, #1
 801e622:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 801e626:	d30c      	bcc.n	801e642 <gmtime_r+0x126>
 801e628:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 801e62c:	61e3      	str	r3, [r4, #28]
 801e62e:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 801e632:	2300      	movs	r3, #0
 801e634:	60e0      	str	r0, [r4, #12]
 801e636:	e9c4 7104 	strd	r7, r1, [r4, #16]
 801e63a:	6223      	str	r3, [r4, #32]
 801e63c:	4620      	mov	r0, r4
 801e63e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e642:	f015 0f03 	tst.w	r5, #3
 801e646:	d102      	bne.n	801e64e <gmtime_r+0x132>
 801e648:	fb06 5212 	mls	r2, r6, r2, r5
 801e64c:	b95a      	cbnz	r2, 801e666 <gmtime_r+0x14a>
 801e64e:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801e652:	fbb5 f2f6 	udiv	r2, r5, r6
 801e656:	fb06 5212 	mls	r2, r6, r2, r5
 801e65a:	fab2 f282 	clz	r2, r2
 801e65e:	0952      	lsrs	r2, r2, #5
 801e660:	333b      	adds	r3, #59	; 0x3b
 801e662:	4413      	add	r3, r2
 801e664:	e7e2      	b.n	801e62c <gmtime_r+0x110>
 801e666:	2201      	movs	r2, #1
 801e668:	e7fa      	b.n	801e660 <gmtime_r+0x144>
 801e66a:	bf00      	nop
 801e66c:	00015180 	.word	0x00015180
 801e670:	00023ab1 	.word	0x00023ab1
 801e674:	fffdc54f 	.word	0xfffdc54f
 801e678:	00023ab0 	.word	0x00023ab0

0801e67c <_localeconv_r>:
 801e67c:	4800      	ldr	r0, [pc, #0]	; (801e680 <_localeconv_r+0x4>)
 801e67e:	4770      	bx	lr
 801e680:	200003b4 	.word	0x200003b4

0801e684 <_lseek_r>:
 801e684:	b538      	push	{r3, r4, r5, lr}
 801e686:	4d07      	ldr	r5, [pc, #28]	; (801e6a4 <_lseek_r+0x20>)
 801e688:	4604      	mov	r4, r0
 801e68a:	4608      	mov	r0, r1
 801e68c:	4611      	mov	r1, r2
 801e68e:	2200      	movs	r2, #0
 801e690:	602a      	str	r2, [r5, #0]
 801e692:	461a      	mov	r2, r3
 801e694:	f001 fc40 	bl	801ff18 <_lseek>
 801e698:	1c43      	adds	r3, r0, #1
 801e69a:	d102      	bne.n	801e6a2 <_lseek_r+0x1e>
 801e69c:	682b      	ldr	r3, [r5, #0]
 801e69e:	b103      	cbz	r3, 801e6a2 <_lseek_r+0x1e>
 801e6a0:	6023      	str	r3, [r4, #0]
 801e6a2:	bd38      	pop	{r3, r4, r5, pc}
 801e6a4:	20008d58 	.word	0x20008d58

0801e6a8 <__swhatbuf_r>:
 801e6a8:	b570      	push	{r4, r5, r6, lr}
 801e6aa:	460e      	mov	r6, r1
 801e6ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e6b0:	2900      	cmp	r1, #0
 801e6b2:	b096      	sub	sp, #88	; 0x58
 801e6b4:	4614      	mov	r4, r2
 801e6b6:	461d      	mov	r5, r3
 801e6b8:	da07      	bge.n	801e6ca <__swhatbuf_r+0x22>
 801e6ba:	2300      	movs	r3, #0
 801e6bc:	602b      	str	r3, [r5, #0]
 801e6be:	89b3      	ldrh	r3, [r6, #12]
 801e6c0:	061a      	lsls	r2, r3, #24
 801e6c2:	d410      	bmi.n	801e6e6 <__swhatbuf_r+0x3e>
 801e6c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e6c8:	e00e      	b.n	801e6e8 <__swhatbuf_r+0x40>
 801e6ca:	466a      	mov	r2, sp
 801e6cc:	f001 fbd2 	bl	801fe74 <_fstat_r>
 801e6d0:	2800      	cmp	r0, #0
 801e6d2:	dbf2      	blt.n	801e6ba <__swhatbuf_r+0x12>
 801e6d4:	9a01      	ldr	r2, [sp, #4]
 801e6d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e6da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e6de:	425a      	negs	r2, r3
 801e6e0:	415a      	adcs	r2, r3
 801e6e2:	602a      	str	r2, [r5, #0]
 801e6e4:	e7ee      	b.n	801e6c4 <__swhatbuf_r+0x1c>
 801e6e6:	2340      	movs	r3, #64	; 0x40
 801e6e8:	2000      	movs	r0, #0
 801e6ea:	6023      	str	r3, [r4, #0]
 801e6ec:	b016      	add	sp, #88	; 0x58
 801e6ee:	bd70      	pop	{r4, r5, r6, pc}

0801e6f0 <__smakebuf_r>:
 801e6f0:	898b      	ldrh	r3, [r1, #12]
 801e6f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e6f4:	079d      	lsls	r5, r3, #30
 801e6f6:	4606      	mov	r6, r0
 801e6f8:	460c      	mov	r4, r1
 801e6fa:	d507      	bpl.n	801e70c <__smakebuf_r+0x1c>
 801e6fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e700:	6023      	str	r3, [r4, #0]
 801e702:	6123      	str	r3, [r4, #16]
 801e704:	2301      	movs	r3, #1
 801e706:	6163      	str	r3, [r4, #20]
 801e708:	b002      	add	sp, #8
 801e70a:	bd70      	pop	{r4, r5, r6, pc}
 801e70c:	ab01      	add	r3, sp, #4
 801e70e:	466a      	mov	r2, sp
 801e710:	f7ff ffca 	bl	801e6a8 <__swhatbuf_r>
 801e714:	9900      	ldr	r1, [sp, #0]
 801e716:	4605      	mov	r5, r0
 801e718:	4630      	mov	r0, r6
 801e71a:	f7fb fff9 	bl	801a710 <_malloc_r>
 801e71e:	b948      	cbnz	r0, 801e734 <__smakebuf_r+0x44>
 801e720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e724:	059a      	lsls	r2, r3, #22
 801e726:	d4ef      	bmi.n	801e708 <__smakebuf_r+0x18>
 801e728:	f023 0303 	bic.w	r3, r3, #3
 801e72c:	f043 0302 	orr.w	r3, r3, #2
 801e730:	81a3      	strh	r3, [r4, #12]
 801e732:	e7e3      	b.n	801e6fc <__smakebuf_r+0xc>
 801e734:	4b0d      	ldr	r3, [pc, #52]	; (801e76c <__smakebuf_r+0x7c>)
 801e736:	62b3      	str	r3, [r6, #40]	; 0x28
 801e738:	89a3      	ldrh	r3, [r4, #12]
 801e73a:	6020      	str	r0, [r4, #0]
 801e73c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e740:	81a3      	strh	r3, [r4, #12]
 801e742:	9b00      	ldr	r3, [sp, #0]
 801e744:	6163      	str	r3, [r4, #20]
 801e746:	9b01      	ldr	r3, [sp, #4]
 801e748:	6120      	str	r0, [r4, #16]
 801e74a:	b15b      	cbz	r3, 801e764 <__smakebuf_r+0x74>
 801e74c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e750:	4630      	mov	r0, r6
 801e752:	f001 fba1 	bl	801fe98 <_isatty_r>
 801e756:	b128      	cbz	r0, 801e764 <__smakebuf_r+0x74>
 801e758:	89a3      	ldrh	r3, [r4, #12]
 801e75a:	f023 0303 	bic.w	r3, r3, #3
 801e75e:	f043 0301 	orr.w	r3, r3, #1
 801e762:	81a3      	strh	r3, [r4, #12]
 801e764:	89a0      	ldrh	r0, [r4, #12]
 801e766:	4305      	orrs	r5, r0
 801e768:	81a5      	strh	r5, [r4, #12]
 801e76a:	e7cd      	b.n	801e708 <__smakebuf_r+0x18>
 801e76c:	08019cc5 	.word	0x08019cc5

0801e770 <__ascii_mbtowc>:
 801e770:	b082      	sub	sp, #8
 801e772:	b901      	cbnz	r1, 801e776 <__ascii_mbtowc+0x6>
 801e774:	a901      	add	r1, sp, #4
 801e776:	b142      	cbz	r2, 801e78a <__ascii_mbtowc+0x1a>
 801e778:	b14b      	cbz	r3, 801e78e <__ascii_mbtowc+0x1e>
 801e77a:	7813      	ldrb	r3, [r2, #0]
 801e77c:	600b      	str	r3, [r1, #0]
 801e77e:	7812      	ldrb	r2, [r2, #0]
 801e780:	1e10      	subs	r0, r2, #0
 801e782:	bf18      	it	ne
 801e784:	2001      	movne	r0, #1
 801e786:	b002      	add	sp, #8
 801e788:	4770      	bx	lr
 801e78a:	4610      	mov	r0, r2
 801e78c:	e7fb      	b.n	801e786 <__ascii_mbtowc+0x16>
 801e78e:	f06f 0001 	mvn.w	r0, #1
 801e792:	e7f8      	b.n	801e786 <__ascii_mbtowc+0x16>

0801e794 <__malloc_lock>:
 801e794:	4801      	ldr	r0, [pc, #4]	; (801e79c <__malloc_lock+0x8>)
 801e796:	f7fb bca9 	b.w	801a0ec <__retarget_lock_acquire_recursive>
 801e79a:	bf00      	nop
 801e79c:	20008d50 	.word	0x20008d50

0801e7a0 <__malloc_unlock>:
 801e7a0:	4801      	ldr	r0, [pc, #4]	; (801e7a8 <__malloc_unlock+0x8>)
 801e7a2:	f7fb bca5 	b.w	801a0f0 <__retarget_lock_release_recursive>
 801e7a6:	bf00      	nop
 801e7a8:	20008d50 	.word	0x20008d50

0801e7ac <_Balloc>:
 801e7ac:	b570      	push	{r4, r5, r6, lr}
 801e7ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801e7b0:	4604      	mov	r4, r0
 801e7b2:	460d      	mov	r5, r1
 801e7b4:	b976      	cbnz	r6, 801e7d4 <_Balloc+0x28>
 801e7b6:	2010      	movs	r0, #16
 801e7b8:	f7fb fc9c 	bl	801a0f4 <malloc>
 801e7bc:	4602      	mov	r2, r0
 801e7be:	6260      	str	r0, [r4, #36]	; 0x24
 801e7c0:	b920      	cbnz	r0, 801e7cc <_Balloc+0x20>
 801e7c2:	4b18      	ldr	r3, [pc, #96]	; (801e824 <_Balloc+0x78>)
 801e7c4:	4818      	ldr	r0, [pc, #96]	; (801e828 <_Balloc+0x7c>)
 801e7c6:	2166      	movs	r1, #102	; 0x66
 801e7c8:	f7fe fb64 	bl	801ce94 <__assert_func>
 801e7cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e7d0:	6006      	str	r6, [r0, #0]
 801e7d2:	60c6      	str	r6, [r0, #12]
 801e7d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801e7d6:	68f3      	ldr	r3, [r6, #12]
 801e7d8:	b183      	cbz	r3, 801e7fc <_Balloc+0x50>
 801e7da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e7dc:	68db      	ldr	r3, [r3, #12]
 801e7de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e7e2:	b9b8      	cbnz	r0, 801e814 <_Balloc+0x68>
 801e7e4:	2101      	movs	r1, #1
 801e7e6:	fa01 f605 	lsl.w	r6, r1, r5
 801e7ea:	1d72      	adds	r2, r6, #5
 801e7ec:	0092      	lsls	r2, r2, #2
 801e7ee:	4620      	mov	r0, r4
 801e7f0:	f000 fc97 	bl	801f122 <_calloc_r>
 801e7f4:	b160      	cbz	r0, 801e810 <_Balloc+0x64>
 801e7f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e7fa:	e00e      	b.n	801e81a <_Balloc+0x6e>
 801e7fc:	2221      	movs	r2, #33	; 0x21
 801e7fe:	2104      	movs	r1, #4
 801e800:	4620      	mov	r0, r4
 801e802:	f000 fc8e 	bl	801f122 <_calloc_r>
 801e806:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e808:	60f0      	str	r0, [r6, #12]
 801e80a:	68db      	ldr	r3, [r3, #12]
 801e80c:	2b00      	cmp	r3, #0
 801e80e:	d1e4      	bne.n	801e7da <_Balloc+0x2e>
 801e810:	2000      	movs	r0, #0
 801e812:	bd70      	pop	{r4, r5, r6, pc}
 801e814:	6802      	ldr	r2, [r0, #0]
 801e816:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e81a:	2300      	movs	r3, #0
 801e81c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e820:	e7f7      	b.n	801e812 <_Balloc+0x66>
 801e822:	bf00      	nop
 801e824:	08022144 	.word	0x08022144
 801e828:	080224dc 	.word	0x080224dc

0801e82c <_Bfree>:
 801e82c:	b570      	push	{r4, r5, r6, lr}
 801e82e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801e830:	4605      	mov	r5, r0
 801e832:	460c      	mov	r4, r1
 801e834:	b976      	cbnz	r6, 801e854 <_Bfree+0x28>
 801e836:	2010      	movs	r0, #16
 801e838:	f7fb fc5c 	bl	801a0f4 <malloc>
 801e83c:	4602      	mov	r2, r0
 801e83e:	6268      	str	r0, [r5, #36]	; 0x24
 801e840:	b920      	cbnz	r0, 801e84c <_Bfree+0x20>
 801e842:	4b09      	ldr	r3, [pc, #36]	; (801e868 <_Bfree+0x3c>)
 801e844:	4809      	ldr	r0, [pc, #36]	; (801e86c <_Bfree+0x40>)
 801e846:	218a      	movs	r1, #138	; 0x8a
 801e848:	f7fe fb24 	bl	801ce94 <__assert_func>
 801e84c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e850:	6006      	str	r6, [r0, #0]
 801e852:	60c6      	str	r6, [r0, #12]
 801e854:	b13c      	cbz	r4, 801e866 <_Bfree+0x3a>
 801e856:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801e858:	6862      	ldr	r2, [r4, #4]
 801e85a:	68db      	ldr	r3, [r3, #12]
 801e85c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e860:	6021      	str	r1, [r4, #0]
 801e862:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801e866:	bd70      	pop	{r4, r5, r6, pc}
 801e868:	08022144 	.word	0x08022144
 801e86c:	080224dc 	.word	0x080224dc

0801e870 <__multadd>:
 801e870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e874:	690e      	ldr	r6, [r1, #16]
 801e876:	4607      	mov	r7, r0
 801e878:	4698      	mov	r8, r3
 801e87a:	460c      	mov	r4, r1
 801e87c:	f101 0014 	add.w	r0, r1, #20
 801e880:	2300      	movs	r3, #0
 801e882:	6805      	ldr	r5, [r0, #0]
 801e884:	b2a9      	uxth	r1, r5
 801e886:	fb02 8101 	mla	r1, r2, r1, r8
 801e88a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801e88e:	0c2d      	lsrs	r5, r5, #16
 801e890:	fb02 c505 	mla	r5, r2, r5, ip
 801e894:	b289      	uxth	r1, r1
 801e896:	3301      	adds	r3, #1
 801e898:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801e89c:	429e      	cmp	r6, r3
 801e89e:	f840 1b04 	str.w	r1, [r0], #4
 801e8a2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801e8a6:	dcec      	bgt.n	801e882 <__multadd+0x12>
 801e8a8:	f1b8 0f00 	cmp.w	r8, #0
 801e8ac:	d022      	beq.n	801e8f4 <__multadd+0x84>
 801e8ae:	68a3      	ldr	r3, [r4, #8]
 801e8b0:	42b3      	cmp	r3, r6
 801e8b2:	dc19      	bgt.n	801e8e8 <__multadd+0x78>
 801e8b4:	6861      	ldr	r1, [r4, #4]
 801e8b6:	4638      	mov	r0, r7
 801e8b8:	3101      	adds	r1, #1
 801e8ba:	f7ff ff77 	bl	801e7ac <_Balloc>
 801e8be:	4605      	mov	r5, r0
 801e8c0:	b928      	cbnz	r0, 801e8ce <__multadd+0x5e>
 801e8c2:	4602      	mov	r2, r0
 801e8c4:	4b0d      	ldr	r3, [pc, #52]	; (801e8fc <__multadd+0x8c>)
 801e8c6:	480e      	ldr	r0, [pc, #56]	; (801e900 <__multadd+0x90>)
 801e8c8:	21b5      	movs	r1, #181	; 0xb5
 801e8ca:	f7fe fae3 	bl	801ce94 <__assert_func>
 801e8ce:	6922      	ldr	r2, [r4, #16]
 801e8d0:	3202      	adds	r2, #2
 801e8d2:	f104 010c 	add.w	r1, r4, #12
 801e8d6:	0092      	lsls	r2, r2, #2
 801e8d8:	300c      	adds	r0, #12
 801e8da:	f7fb fc1b 	bl	801a114 <memcpy>
 801e8de:	4621      	mov	r1, r4
 801e8e0:	4638      	mov	r0, r7
 801e8e2:	f7ff ffa3 	bl	801e82c <_Bfree>
 801e8e6:	462c      	mov	r4, r5
 801e8e8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801e8ec:	3601      	adds	r6, #1
 801e8ee:	f8c3 8014 	str.w	r8, [r3, #20]
 801e8f2:	6126      	str	r6, [r4, #16]
 801e8f4:	4620      	mov	r0, r4
 801e8f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e8fa:	bf00      	nop
 801e8fc:	0802244d 	.word	0x0802244d
 801e900:	080224dc 	.word	0x080224dc

0801e904 <__s2b>:
 801e904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e908:	460c      	mov	r4, r1
 801e90a:	4615      	mov	r5, r2
 801e90c:	461f      	mov	r7, r3
 801e90e:	2209      	movs	r2, #9
 801e910:	3308      	adds	r3, #8
 801e912:	4606      	mov	r6, r0
 801e914:	fb93 f3f2 	sdiv	r3, r3, r2
 801e918:	2100      	movs	r1, #0
 801e91a:	2201      	movs	r2, #1
 801e91c:	429a      	cmp	r2, r3
 801e91e:	db09      	blt.n	801e934 <__s2b+0x30>
 801e920:	4630      	mov	r0, r6
 801e922:	f7ff ff43 	bl	801e7ac <_Balloc>
 801e926:	b940      	cbnz	r0, 801e93a <__s2b+0x36>
 801e928:	4602      	mov	r2, r0
 801e92a:	4b19      	ldr	r3, [pc, #100]	; (801e990 <__s2b+0x8c>)
 801e92c:	4819      	ldr	r0, [pc, #100]	; (801e994 <__s2b+0x90>)
 801e92e:	21ce      	movs	r1, #206	; 0xce
 801e930:	f7fe fab0 	bl	801ce94 <__assert_func>
 801e934:	0052      	lsls	r2, r2, #1
 801e936:	3101      	adds	r1, #1
 801e938:	e7f0      	b.n	801e91c <__s2b+0x18>
 801e93a:	9b08      	ldr	r3, [sp, #32]
 801e93c:	6143      	str	r3, [r0, #20]
 801e93e:	2d09      	cmp	r5, #9
 801e940:	f04f 0301 	mov.w	r3, #1
 801e944:	6103      	str	r3, [r0, #16]
 801e946:	dd16      	ble.n	801e976 <__s2b+0x72>
 801e948:	f104 0909 	add.w	r9, r4, #9
 801e94c:	46c8      	mov	r8, r9
 801e94e:	442c      	add	r4, r5
 801e950:	f818 3b01 	ldrb.w	r3, [r8], #1
 801e954:	4601      	mov	r1, r0
 801e956:	3b30      	subs	r3, #48	; 0x30
 801e958:	220a      	movs	r2, #10
 801e95a:	4630      	mov	r0, r6
 801e95c:	f7ff ff88 	bl	801e870 <__multadd>
 801e960:	45a0      	cmp	r8, r4
 801e962:	d1f5      	bne.n	801e950 <__s2b+0x4c>
 801e964:	f1a5 0408 	sub.w	r4, r5, #8
 801e968:	444c      	add	r4, r9
 801e96a:	1b2d      	subs	r5, r5, r4
 801e96c:	1963      	adds	r3, r4, r5
 801e96e:	42bb      	cmp	r3, r7
 801e970:	db04      	blt.n	801e97c <__s2b+0x78>
 801e972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e976:	340a      	adds	r4, #10
 801e978:	2509      	movs	r5, #9
 801e97a:	e7f6      	b.n	801e96a <__s2b+0x66>
 801e97c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801e980:	4601      	mov	r1, r0
 801e982:	3b30      	subs	r3, #48	; 0x30
 801e984:	220a      	movs	r2, #10
 801e986:	4630      	mov	r0, r6
 801e988:	f7ff ff72 	bl	801e870 <__multadd>
 801e98c:	e7ee      	b.n	801e96c <__s2b+0x68>
 801e98e:	bf00      	nop
 801e990:	0802244d 	.word	0x0802244d
 801e994:	080224dc 	.word	0x080224dc

0801e998 <__hi0bits>:
 801e998:	0c03      	lsrs	r3, r0, #16
 801e99a:	041b      	lsls	r3, r3, #16
 801e99c:	b9d3      	cbnz	r3, 801e9d4 <__hi0bits+0x3c>
 801e99e:	0400      	lsls	r0, r0, #16
 801e9a0:	2310      	movs	r3, #16
 801e9a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801e9a6:	bf04      	itt	eq
 801e9a8:	0200      	lsleq	r0, r0, #8
 801e9aa:	3308      	addeq	r3, #8
 801e9ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801e9b0:	bf04      	itt	eq
 801e9b2:	0100      	lsleq	r0, r0, #4
 801e9b4:	3304      	addeq	r3, #4
 801e9b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801e9ba:	bf04      	itt	eq
 801e9bc:	0080      	lsleq	r0, r0, #2
 801e9be:	3302      	addeq	r3, #2
 801e9c0:	2800      	cmp	r0, #0
 801e9c2:	db05      	blt.n	801e9d0 <__hi0bits+0x38>
 801e9c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801e9c8:	f103 0301 	add.w	r3, r3, #1
 801e9cc:	bf08      	it	eq
 801e9ce:	2320      	moveq	r3, #32
 801e9d0:	4618      	mov	r0, r3
 801e9d2:	4770      	bx	lr
 801e9d4:	2300      	movs	r3, #0
 801e9d6:	e7e4      	b.n	801e9a2 <__hi0bits+0xa>

0801e9d8 <__lo0bits>:
 801e9d8:	6803      	ldr	r3, [r0, #0]
 801e9da:	f013 0207 	ands.w	r2, r3, #7
 801e9de:	4601      	mov	r1, r0
 801e9e0:	d00b      	beq.n	801e9fa <__lo0bits+0x22>
 801e9e2:	07da      	lsls	r2, r3, #31
 801e9e4:	d424      	bmi.n	801ea30 <__lo0bits+0x58>
 801e9e6:	0798      	lsls	r0, r3, #30
 801e9e8:	bf49      	itett	mi
 801e9ea:	085b      	lsrmi	r3, r3, #1
 801e9ec:	089b      	lsrpl	r3, r3, #2
 801e9ee:	2001      	movmi	r0, #1
 801e9f0:	600b      	strmi	r3, [r1, #0]
 801e9f2:	bf5c      	itt	pl
 801e9f4:	600b      	strpl	r3, [r1, #0]
 801e9f6:	2002      	movpl	r0, #2
 801e9f8:	4770      	bx	lr
 801e9fa:	b298      	uxth	r0, r3
 801e9fc:	b9b0      	cbnz	r0, 801ea2c <__lo0bits+0x54>
 801e9fe:	0c1b      	lsrs	r3, r3, #16
 801ea00:	2010      	movs	r0, #16
 801ea02:	f013 0fff 	tst.w	r3, #255	; 0xff
 801ea06:	bf04      	itt	eq
 801ea08:	0a1b      	lsreq	r3, r3, #8
 801ea0a:	3008      	addeq	r0, #8
 801ea0c:	071a      	lsls	r2, r3, #28
 801ea0e:	bf04      	itt	eq
 801ea10:	091b      	lsreq	r3, r3, #4
 801ea12:	3004      	addeq	r0, #4
 801ea14:	079a      	lsls	r2, r3, #30
 801ea16:	bf04      	itt	eq
 801ea18:	089b      	lsreq	r3, r3, #2
 801ea1a:	3002      	addeq	r0, #2
 801ea1c:	07da      	lsls	r2, r3, #31
 801ea1e:	d403      	bmi.n	801ea28 <__lo0bits+0x50>
 801ea20:	085b      	lsrs	r3, r3, #1
 801ea22:	f100 0001 	add.w	r0, r0, #1
 801ea26:	d005      	beq.n	801ea34 <__lo0bits+0x5c>
 801ea28:	600b      	str	r3, [r1, #0]
 801ea2a:	4770      	bx	lr
 801ea2c:	4610      	mov	r0, r2
 801ea2e:	e7e8      	b.n	801ea02 <__lo0bits+0x2a>
 801ea30:	2000      	movs	r0, #0
 801ea32:	4770      	bx	lr
 801ea34:	2020      	movs	r0, #32
 801ea36:	4770      	bx	lr

0801ea38 <__i2b>:
 801ea38:	b510      	push	{r4, lr}
 801ea3a:	460c      	mov	r4, r1
 801ea3c:	2101      	movs	r1, #1
 801ea3e:	f7ff feb5 	bl	801e7ac <_Balloc>
 801ea42:	4602      	mov	r2, r0
 801ea44:	b928      	cbnz	r0, 801ea52 <__i2b+0x1a>
 801ea46:	4b05      	ldr	r3, [pc, #20]	; (801ea5c <__i2b+0x24>)
 801ea48:	4805      	ldr	r0, [pc, #20]	; (801ea60 <__i2b+0x28>)
 801ea4a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801ea4e:	f7fe fa21 	bl	801ce94 <__assert_func>
 801ea52:	2301      	movs	r3, #1
 801ea54:	6144      	str	r4, [r0, #20]
 801ea56:	6103      	str	r3, [r0, #16]
 801ea58:	bd10      	pop	{r4, pc}
 801ea5a:	bf00      	nop
 801ea5c:	0802244d 	.word	0x0802244d
 801ea60:	080224dc 	.word	0x080224dc

0801ea64 <__multiply>:
 801ea64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea68:	4614      	mov	r4, r2
 801ea6a:	690a      	ldr	r2, [r1, #16]
 801ea6c:	6923      	ldr	r3, [r4, #16]
 801ea6e:	429a      	cmp	r2, r3
 801ea70:	bfb8      	it	lt
 801ea72:	460b      	movlt	r3, r1
 801ea74:	460d      	mov	r5, r1
 801ea76:	bfbc      	itt	lt
 801ea78:	4625      	movlt	r5, r4
 801ea7a:	461c      	movlt	r4, r3
 801ea7c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801ea80:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801ea84:	68ab      	ldr	r3, [r5, #8]
 801ea86:	6869      	ldr	r1, [r5, #4]
 801ea88:	eb0a 0709 	add.w	r7, sl, r9
 801ea8c:	42bb      	cmp	r3, r7
 801ea8e:	b085      	sub	sp, #20
 801ea90:	bfb8      	it	lt
 801ea92:	3101      	addlt	r1, #1
 801ea94:	f7ff fe8a 	bl	801e7ac <_Balloc>
 801ea98:	b930      	cbnz	r0, 801eaa8 <__multiply+0x44>
 801ea9a:	4602      	mov	r2, r0
 801ea9c:	4b42      	ldr	r3, [pc, #264]	; (801eba8 <__multiply+0x144>)
 801ea9e:	4843      	ldr	r0, [pc, #268]	; (801ebac <__multiply+0x148>)
 801eaa0:	f240 115d 	movw	r1, #349	; 0x15d
 801eaa4:	f7fe f9f6 	bl	801ce94 <__assert_func>
 801eaa8:	f100 0614 	add.w	r6, r0, #20
 801eaac:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801eab0:	4633      	mov	r3, r6
 801eab2:	2200      	movs	r2, #0
 801eab4:	4543      	cmp	r3, r8
 801eab6:	d31e      	bcc.n	801eaf6 <__multiply+0x92>
 801eab8:	f105 0c14 	add.w	ip, r5, #20
 801eabc:	f104 0314 	add.w	r3, r4, #20
 801eac0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801eac4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801eac8:	9202      	str	r2, [sp, #8]
 801eaca:	ebac 0205 	sub.w	r2, ip, r5
 801eace:	3a15      	subs	r2, #21
 801ead0:	f022 0203 	bic.w	r2, r2, #3
 801ead4:	3204      	adds	r2, #4
 801ead6:	f105 0115 	add.w	r1, r5, #21
 801eada:	458c      	cmp	ip, r1
 801eadc:	bf38      	it	cc
 801eade:	2204      	movcc	r2, #4
 801eae0:	9201      	str	r2, [sp, #4]
 801eae2:	9a02      	ldr	r2, [sp, #8]
 801eae4:	9303      	str	r3, [sp, #12]
 801eae6:	429a      	cmp	r2, r3
 801eae8:	d808      	bhi.n	801eafc <__multiply+0x98>
 801eaea:	2f00      	cmp	r7, #0
 801eaec:	dc55      	bgt.n	801eb9a <__multiply+0x136>
 801eaee:	6107      	str	r7, [r0, #16]
 801eaf0:	b005      	add	sp, #20
 801eaf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eaf6:	f843 2b04 	str.w	r2, [r3], #4
 801eafa:	e7db      	b.n	801eab4 <__multiply+0x50>
 801eafc:	f8b3 a000 	ldrh.w	sl, [r3]
 801eb00:	f1ba 0f00 	cmp.w	sl, #0
 801eb04:	d020      	beq.n	801eb48 <__multiply+0xe4>
 801eb06:	f105 0e14 	add.w	lr, r5, #20
 801eb0a:	46b1      	mov	r9, r6
 801eb0c:	2200      	movs	r2, #0
 801eb0e:	f85e 4b04 	ldr.w	r4, [lr], #4
 801eb12:	f8d9 b000 	ldr.w	fp, [r9]
 801eb16:	b2a1      	uxth	r1, r4
 801eb18:	fa1f fb8b 	uxth.w	fp, fp
 801eb1c:	fb0a b101 	mla	r1, sl, r1, fp
 801eb20:	4411      	add	r1, r2
 801eb22:	f8d9 2000 	ldr.w	r2, [r9]
 801eb26:	0c24      	lsrs	r4, r4, #16
 801eb28:	0c12      	lsrs	r2, r2, #16
 801eb2a:	fb0a 2404 	mla	r4, sl, r4, r2
 801eb2e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801eb32:	b289      	uxth	r1, r1
 801eb34:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801eb38:	45f4      	cmp	ip, lr
 801eb3a:	f849 1b04 	str.w	r1, [r9], #4
 801eb3e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801eb42:	d8e4      	bhi.n	801eb0e <__multiply+0xaa>
 801eb44:	9901      	ldr	r1, [sp, #4]
 801eb46:	5072      	str	r2, [r6, r1]
 801eb48:	9a03      	ldr	r2, [sp, #12]
 801eb4a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801eb4e:	3304      	adds	r3, #4
 801eb50:	f1b9 0f00 	cmp.w	r9, #0
 801eb54:	d01f      	beq.n	801eb96 <__multiply+0x132>
 801eb56:	6834      	ldr	r4, [r6, #0]
 801eb58:	f105 0114 	add.w	r1, r5, #20
 801eb5c:	46b6      	mov	lr, r6
 801eb5e:	f04f 0a00 	mov.w	sl, #0
 801eb62:	880a      	ldrh	r2, [r1, #0]
 801eb64:	f8be b002 	ldrh.w	fp, [lr, #2]
 801eb68:	fb09 b202 	mla	r2, r9, r2, fp
 801eb6c:	4492      	add	sl, r2
 801eb6e:	b2a4      	uxth	r4, r4
 801eb70:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801eb74:	f84e 4b04 	str.w	r4, [lr], #4
 801eb78:	f851 4b04 	ldr.w	r4, [r1], #4
 801eb7c:	f8be 2000 	ldrh.w	r2, [lr]
 801eb80:	0c24      	lsrs	r4, r4, #16
 801eb82:	fb09 2404 	mla	r4, r9, r4, r2
 801eb86:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801eb8a:	458c      	cmp	ip, r1
 801eb8c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801eb90:	d8e7      	bhi.n	801eb62 <__multiply+0xfe>
 801eb92:	9a01      	ldr	r2, [sp, #4]
 801eb94:	50b4      	str	r4, [r6, r2]
 801eb96:	3604      	adds	r6, #4
 801eb98:	e7a3      	b.n	801eae2 <__multiply+0x7e>
 801eb9a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801eb9e:	2b00      	cmp	r3, #0
 801eba0:	d1a5      	bne.n	801eaee <__multiply+0x8a>
 801eba2:	3f01      	subs	r7, #1
 801eba4:	e7a1      	b.n	801eaea <__multiply+0x86>
 801eba6:	bf00      	nop
 801eba8:	0802244d 	.word	0x0802244d
 801ebac:	080224dc 	.word	0x080224dc

0801ebb0 <__pow5mult>:
 801ebb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ebb4:	4615      	mov	r5, r2
 801ebb6:	f012 0203 	ands.w	r2, r2, #3
 801ebba:	4606      	mov	r6, r0
 801ebbc:	460f      	mov	r7, r1
 801ebbe:	d007      	beq.n	801ebd0 <__pow5mult+0x20>
 801ebc0:	4c25      	ldr	r4, [pc, #148]	; (801ec58 <__pow5mult+0xa8>)
 801ebc2:	3a01      	subs	r2, #1
 801ebc4:	2300      	movs	r3, #0
 801ebc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ebca:	f7ff fe51 	bl	801e870 <__multadd>
 801ebce:	4607      	mov	r7, r0
 801ebd0:	10ad      	asrs	r5, r5, #2
 801ebd2:	d03d      	beq.n	801ec50 <__pow5mult+0xa0>
 801ebd4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801ebd6:	b97c      	cbnz	r4, 801ebf8 <__pow5mult+0x48>
 801ebd8:	2010      	movs	r0, #16
 801ebda:	f7fb fa8b 	bl	801a0f4 <malloc>
 801ebde:	4602      	mov	r2, r0
 801ebe0:	6270      	str	r0, [r6, #36]	; 0x24
 801ebe2:	b928      	cbnz	r0, 801ebf0 <__pow5mult+0x40>
 801ebe4:	4b1d      	ldr	r3, [pc, #116]	; (801ec5c <__pow5mult+0xac>)
 801ebe6:	481e      	ldr	r0, [pc, #120]	; (801ec60 <__pow5mult+0xb0>)
 801ebe8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801ebec:	f7fe f952 	bl	801ce94 <__assert_func>
 801ebf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ebf4:	6004      	str	r4, [r0, #0]
 801ebf6:	60c4      	str	r4, [r0, #12]
 801ebf8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801ebfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801ec00:	b94c      	cbnz	r4, 801ec16 <__pow5mult+0x66>
 801ec02:	f240 2171 	movw	r1, #625	; 0x271
 801ec06:	4630      	mov	r0, r6
 801ec08:	f7ff ff16 	bl	801ea38 <__i2b>
 801ec0c:	2300      	movs	r3, #0
 801ec0e:	f8c8 0008 	str.w	r0, [r8, #8]
 801ec12:	4604      	mov	r4, r0
 801ec14:	6003      	str	r3, [r0, #0]
 801ec16:	f04f 0900 	mov.w	r9, #0
 801ec1a:	07eb      	lsls	r3, r5, #31
 801ec1c:	d50a      	bpl.n	801ec34 <__pow5mult+0x84>
 801ec1e:	4639      	mov	r1, r7
 801ec20:	4622      	mov	r2, r4
 801ec22:	4630      	mov	r0, r6
 801ec24:	f7ff ff1e 	bl	801ea64 <__multiply>
 801ec28:	4639      	mov	r1, r7
 801ec2a:	4680      	mov	r8, r0
 801ec2c:	4630      	mov	r0, r6
 801ec2e:	f7ff fdfd 	bl	801e82c <_Bfree>
 801ec32:	4647      	mov	r7, r8
 801ec34:	106d      	asrs	r5, r5, #1
 801ec36:	d00b      	beq.n	801ec50 <__pow5mult+0xa0>
 801ec38:	6820      	ldr	r0, [r4, #0]
 801ec3a:	b938      	cbnz	r0, 801ec4c <__pow5mult+0x9c>
 801ec3c:	4622      	mov	r2, r4
 801ec3e:	4621      	mov	r1, r4
 801ec40:	4630      	mov	r0, r6
 801ec42:	f7ff ff0f 	bl	801ea64 <__multiply>
 801ec46:	6020      	str	r0, [r4, #0]
 801ec48:	f8c0 9000 	str.w	r9, [r0]
 801ec4c:	4604      	mov	r4, r0
 801ec4e:	e7e4      	b.n	801ec1a <__pow5mult+0x6a>
 801ec50:	4638      	mov	r0, r7
 801ec52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ec56:	bf00      	nop
 801ec58:	08022630 	.word	0x08022630
 801ec5c:	08022144 	.word	0x08022144
 801ec60:	080224dc 	.word	0x080224dc

0801ec64 <__lshift>:
 801ec64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ec68:	460c      	mov	r4, r1
 801ec6a:	6849      	ldr	r1, [r1, #4]
 801ec6c:	6923      	ldr	r3, [r4, #16]
 801ec6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ec72:	68a3      	ldr	r3, [r4, #8]
 801ec74:	4607      	mov	r7, r0
 801ec76:	4691      	mov	r9, r2
 801ec78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ec7c:	f108 0601 	add.w	r6, r8, #1
 801ec80:	42b3      	cmp	r3, r6
 801ec82:	db0b      	blt.n	801ec9c <__lshift+0x38>
 801ec84:	4638      	mov	r0, r7
 801ec86:	f7ff fd91 	bl	801e7ac <_Balloc>
 801ec8a:	4605      	mov	r5, r0
 801ec8c:	b948      	cbnz	r0, 801eca2 <__lshift+0x3e>
 801ec8e:	4602      	mov	r2, r0
 801ec90:	4b28      	ldr	r3, [pc, #160]	; (801ed34 <__lshift+0xd0>)
 801ec92:	4829      	ldr	r0, [pc, #164]	; (801ed38 <__lshift+0xd4>)
 801ec94:	f240 11d9 	movw	r1, #473	; 0x1d9
 801ec98:	f7fe f8fc 	bl	801ce94 <__assert_func>
 801ec9c:	3101      	adds	r1, #1
 801ec9e:	005b      	lsls	r3, r3, #1
 801eca0:	e7ee      	b.n	801ec80 <__lshift+0x1c>
 801eca2:	2300      	movs	r3, #0
 801eca4:	f100 0114 	add.w	r1, r0, #20
 801eca8:	f100 0210 	add.w	r2, r0, #16
 801ecac:	4618      	mov	r0, r3
 801ecae:	4553      	cmp	r3, sl
 801ecb0:	db33      	blt.n	801ed1a <__lshift+0xb6>
 801ecb2:	6920      	ldr	r0, [r4, #16]
 801ecb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ecb8:	f104 0314 	add.w	r3, r4, #20
 801ecbc:	f019 091f 	ands.w	r9, r9, #31
 801ecc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801ecc4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801ecc8:	d02b      	beq.n	801ed22 <__lshift+0xbe>
 801ecca:	f1c9 0e20 	rsb	lr, r9, #32
 801ecce:	468a      	mov	sl, r1
 801ecd0:	2200      	movs	r2, #0
 801ecd2:	6818      	ldr	r0, [r3, #0]
 801ecd4:	fa00 f009 	lsl.w	r0, r0, r9
 801ecd8:	4302      	orrs	r2, r0
 801ecda:	f84a 2b04 	str.w	r2, [sl], #4
 801ecde:	f853 2b04 	ldr.w	r2, [r3], #4
 801ece2:	459c      	cmp	ip, r3
 801ece4:	fa22 f20e 	lsr.w	r2, r2, lr
 801ece8:	d8f3      	bhi.n	801ecd2 <__lshift+0x6e>
 801ecea:	ebac 0304 	sub.w	r3, ip, r4
 801ecee:	3b15      	subs	r3, #21
 801ecf0:	f023 0303 	bic.w	r3, r3, #3
 801ecf4:	3304      	adds	r3, #4
 801ecf6:	f104 0015 	add.w	r0, r4, #21
 801ecfa:	4584      	cmp	ip, r0
 801ecfc:	bf38      	it	cc
 801ecfe:	2304      	movcc	r3, #4
 801ed00:	50ca      	str	r2, [r1, r3]
 801ed02:	b10a      	cbz	r2, 801ed08 <__lshift+0xa4>
 801ed04:	f108 0602 	add.w	r6, r8, #2
 801ed08:	3e01      	subs	r6, #1
 801ed0a:	4638      	mov	r0, r7
 801ed0c:	612e      	str	r6, [r5, #16]
 801ed0e:	4621      	mov	r1, r4
 801ed10:	f7ff fd8c 	bl	801e82c <_Bfree>
 801ed14:	4628      	mov	r0, r5
 801ed16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ed1a:	f842 0f04 	str.w	r0, [r2, #4]!
 801ed1e:	3301      	adds	r3, #1
 801ed20:	e7c5      	b.n	801ecae <__lshift+0x4a>
 801ed22:	3904      	subs	r1, #4
 801ed24:	f853 2b04 	ldr.w	r2, [r3], #4
 801ed28:	f841 2f04 	str.w	r2, [r1, #4]!
 801ed2c:	459c      	cmp	ip, r3
 801ed2e:	d8f9      	bhi.n	801ed24 <__lshift+0xc0>
 801ed30:	e7ea      	b.n	801ed08 <__lshift+0xa4>
 801ed32:	bf00      	nop
 801ed34:	0802244d 	.word	0x0802244d
 801ed38:	080224dc 	.word	0x080224dc

0801ed3c <__mcmp>:
 801ed3c:	b530      	push	{r4, r5, lr}
 801ed3e:	6902      	ldr	r2, [r0, #16]
 801ed40:	690c      	ldr	r4, [r1, #16]
 801ed42:	1b12      	subs	r2, r2, r4
 801ed44:	d10e      	bne.n	801ed64 <__mcmp+0x28>
 801ed46:	f100 0314 	add.w	r3, r0, #20
 801ed4a:	3114      	adds	r1, #20
 801ed4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801ed50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801ed54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801ed58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801ed5c:	42a5      	cmp	r5, r4
 801ed5e:	d003      	beq.n	801ed68 <__mcmp+0x2c>
 801ed60:	d305      	bcc.n	801ed6e <__mcmp+0x32>
 801ed62:	2201      	movs	r2, #1
 801ed64:	4610      	mov	r0, r2
 801ed66:	bd30      	pop	{r4, r5, pc}
 801ed68:	4283      	cmp	r3, r0
 801ed6a:	d3f3      	bcc.n	801ed54 <__mcmp+0x18>
 801ed6c:	e7fa      	b.n	801ed64 <__mcmp+0x28>
 801ed6e:	f04f 32ff 	mov.w	r2, #4294967295
 801ed72:	e7f7      	b.n	801ed64 <__mcmp+0x28>

0801ed74 <__mdiff>:
 801ed74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed78:	460c      	mov	r4, r1
 801ed7a:	4606      	mov	r6, r0
 801ed7c:	4611      	mov	r1, r2
 801ed7e:	4620      	mov	r0, r4
 801ed80:	4617      	mov	r7, r2
 801ed82:	f7ff ffdb 	bl	801ed3c <__mcmp>
 801ed86:	1e05      	subs	r5, r0, #0
 801ed88:	d110      	bne.n	801edac <__mdiff+0x38>
 801ed8a:	4629      	mov	r1, r5
 801ed8c:	4630      	mov	r0, r6
 801ed8e:	f7ff fd0d 	bl	801e7ac <_Balloc>
 801ed92:	b930      	cbnz	r0, 801eda2 <__mdiff+0x2e>
 801ed94:	4b39      	ldr	r3, [pc, #228]	; (801ee7c <__mdiff+0x108>)
 801ed96:	4602      	mov	r2, r0
 801ed98:	f240 2132 	movw	r1, #562	; 0x232
 801ed9c:	4838      	ldr	r0, [pc, #224]	; (801ee80 <__mdiff+0x10c>)
 801ed9e:	f7fe f879 	bl	801ce94 <__assert_func>
 801eda2:	2301      	movs	r3, #1
 801eda4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801eda8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801edac:	bfa4      	itt	ge
 801edae:	463b      	movge	r3, r7
 801edb0:	4627      	movge	r7, r4
 801edb2:	4630      	mov	r0, r6
 801edb4:	6879      	ldr	r1, [r7, #4]
 801edb6:	bfa6      	itte	ge
 801edb8:	461c      	movge	r4, r3
 801edba:	2500      	movge	r5, #0
 801edbc:	2501      	movlt	r5, #1
 801edbe:	f7ff fcf5 	bl	801e7ac <_Balloc>
 801edc2:	b920      	cbnz	r0, 801edce <__mdiff+0x5a>
 801edc4:	4b2d      	ldr	r3, [pc, #180]	; (801ee7c <__mdiff+0x108>)
 801edc6:	4602      	mov	r2, r0
 801edc8:	f44f 7110 	mov.w	r1, #576	; 0x240
 801edcc:	e7e6      	b.n	801ed9c <__mdiff+0x28>
 801edce:	693e      	ldr	r6, [r7, #16]
 801edd0:	60c5      	str	r5, [r0, #12]
 801edd2:	6925      	ldr	r5, [r4, #16]
 801edd4:	f107 0114 	add.w	r1, r7, #20
 801edd8:	f104 0914 	add.w	r9, r4, #20
 801eddc:	f100 0e14 	add.w	lr, r0, #20
 801ede0:	f107 0210 	add.w	r2, r7, #16
 801ede4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801ede8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801edec:	46f2      	mov	sl, lr
 801edee:	2700      	movs	r7, #0
 801edf0:	f859 3b04 	ldr.w	r3, [r9], #4
 801edf4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801edf8:	fa1f f883 	uxth.w	r8, r3
 801edfc:	fa17 f78b 	uxtah	r7, r7, fp
 801ee00:	0c1b      	lsrs	r3, r3, #16
 801ee02:	eba7 0808 	sub.w	r8, r7, r8
 801ee06:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801ee0a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801ee0e:	fa1f f888 	uxth.w	r8, r8
 801ee12:	141f      	asrs	r7, r3, #16
 801ee14:	454d      	cmp	r5, r9
 801ee16:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801ee1a:	f84a 3b04 	str.w	r3, [sl], #4
 801ee1e:	d8e7      	bhi.n	801edf0 <__mdiff+0x7c>
 801ee20:	1b2b      	subs	r3, r5, r4
 801ee22:	3b15      	subs	r3, #21
 801ee24:	f023 0303 	bic.w	r3, r3, #3
 801ee28:	3304      	adds	r3, #4
 801ee2a:	3415      	adds	r4, #21
 801ee2c:	42a5      	cmp	r5, r4
 801ee2e:	bf38      	it	cc
 801ee30:	2304      	movcc	r3, #4
 801ee32:	4419      	add	r1, r3
 801ee34:	4473      	add	r3, lr
 801ee36:	469e      	mov	lr, r3
 801ee38:	460d      	mov	r5, r1
 801ee3a:	4565      	cmp	r5, ip
 801ee3c:	d30e      	bcc.n	801ee5c <__mdiff+0xe8>
 801ee3e:	f10c 0203 	add.w	r2, ip, #3
 801ee42:	1a52      	subs	r2, r2, r1
 801ee44:	f022 0203 	bic.w	r2, r2, #3
 801ee48:	3903      	subs	r1, #3
 801ee4a:	458c      	cmp	ip, r1
 801ee4c:	bf38      	it	cc
 801ee4e:	2200      	movcc	r2, #0
 801ee50:	441a      	add	r2, r3
 801ee52:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801ee56:	b17b      	cbz	r3, 801ee78 <__mdiff+0x104>
 801ee58:	6106      	str	r6, [r0, #16]
 801ee5a:	e7a5      	b.n	801eda8 <__mdiff+0x34>
 801ee5c:	f855 8b04 	ldr.w	r8, [r5], #4
 801ee60:	fa17 f488 	uxtah	r4, r7, r8
 801ee64:	1422      	asrs	r2, r4, #16
 801ee66:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801ee6a:	b2a4      	uxth	r4, r4
 801ee6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801ee70:	f84e 4b04 	str.w	r4, [lr], #4
 801ee74:	1417      	asrs	r7, r2, #16
 801ee76:	e7e0      	b.n	801ee3a <__mdiff+0xc6>
 801ee78:	3e01      	subs	r6, #1
 801ee7a:	e7ea      	b.n	801ee52 <__mdiff+0xde>
 801ee7c:	0802244d 	.word	0x0802244d
 801ee80:	080224dc 	.word	0x080224dc

0801ee84 <__ulp>:
 801ee84:	b082      	sub	sp, #8
 801ee86:	ed8d 0b00 	vstr	d0, [sp]
 801ee8a:	9b01      	ldr	r3, [sp, #4]
 801ee8c:	4912      	ldr	r1, [pc, #72]	; (801eed8 <__ulp+0x54>)
 801ee8e:	4019      	ands	r1, r3
 801ee90:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801ee94:	2900      	cmp	r1, #0
 801ee96:	dd05      	ble.n	801eea4 <__ulp+0x20>
 801ee98:	2200      	movs	r2, #0
 801ee9a:	460b      	mov	r3, r1
 801ee9c:	ec43 2b10 	vmov	d0, r2, r3
 801eea0:	b002      	add	sp, #8
 801eea2:	4770      	bx	lr
 801eea4:	4249      	negs	r1, r1
 801eea6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801eeaa:	ea4f 5021 	mov.w	r0, r1, asr #20
 801eeae:	f04f 0200 	mov.w	r2, #0
 801eeb2:	f04f 0300 	mov.w	r3, #0
 801eeb6:	da04      	bge.n	801eec2 <__ulp+0x3e>
 801eeb8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801eebc:	fa41 f300 	asr.w	r3, r1, r0
 801eec0:	e7ec      	b.n	801ee9c <__ulp+0x18>
 801eec2:	f1a0 0114 	sub.w	r1, r0, #20
 801eec6:	291e      	cmp	r1, #30
 801eec8:	bfda      	itte	le
 801eeca:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801eece:	fa20 f101 	lsrle.w	r1, r0, r1
 801eed2:	2101      	movgt	r1, #1
 801eed4:	460a      	mov	r2, r1
 801eed6:	e7e1      	b.n	801ee9c <__ulp+0x18>
 801eed8:	7ff00000 	.word	0x7ff00000

0801eedc <__b2d>:
 801eedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eede:	6905      	ldr	r5, [r0, #16]
 801eee0:	f100 0714 	add.w	r7, r0, #20
 801eee4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801eee8:	1f2e      	subs	r6, r5, #4
 801eeea:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801eeee:	4620      	mov	r0, r4
 801eef0:	f7ff fd52 	bl	801e998 <__hi0bits>
 801eef4:	f1c0 0320 	rsb	r3, r0, #32
 801eef8:	280a      	cmp	r0, #10
 801eefa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801ef78 <__b2d+0x9c>
 801eefe:	600b      	str	r3, [r1, #0]
 801ef00:	dc14      	bgt.n	801ef2c <__b2d+0x50>
 801ef02:	f1c0 0e0b 	rsb	lr, r0, #11
 801ef06:	fa24 f10e 	lsr.w	r1, r4, lr
 801ef0a:	42b7      	cmp	r7, r6
 801ef0c:	ea41 030c 	orr.w	r3, r1, ip
 801ef10:	bf34      	ite	cc
 801ef12:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801ef16:	2100      	movcs	r1, #0
 801ef18:	3015      	adds	r0, #21
 801ef1a:	fa04 f000 	lsl.w	r0, r4, r0
 801ef1e:	fa21 f10e 	lsr.w	r1, r1, lr
 801ef22:	ea40 0201 	orr.w	r2, r0, r1
 801ef26:	ec43 2b10 	vmov	d0, r2, r3
 801ef2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ef2c:	42b7      	cmp	r7, r6
 801ef2e:	bf3a      	itte	cc
 801ef30:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801ef34:	f1a5 0608 	subcc.w	r6, r5, #8
 801ef38:	2100      	movcs	r1, #0
 801ef3a:	380b      	subs	r0, #11
 801ef3c:	d017      	beq.n	801ef6e <__b2d+0x92>
 801ef3e:	f1c0 0c20 	rsb	ip, r0, #32
 801ef42:	fa04 f500 	lsl.w	r5, r4, r0
 801ef46:	42be      	cmp	r6, r7
 801ef48:	fa21 f40c 	lsr.w	r4, r1, ip
 801ef4c:	ea45 0504 	orr.w	r5, r5, r4
 801ef50:	bf8c      	ite	hi
 801ef52:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801ef56:	2400      	movls	r4, #0
 801ef58:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801ef5c:	fa01 f000 	lsl.w	r0, r1, r0
 801ef60:	fa24 f40c 	lsr.w	r4, r4, ip
 801ef64:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801ef68:	ea40 0204 	orr.w	r2, r0, r4
 801ef6c:	e7db      	b.n	801ef26 <__b2d+0x4a>
 801ef6e:	ea44 030c 	orr.w	r3, r4, ip
 801ef72:	460a      	mov	r2, r1
 801ef74:	e7d7      	b.n	801ef26 <__b2d+0x4a>
 801ef76:	bf00      	nop
 801ef78:	3ff00000 	.word	0x3ff00000

0801ef7c <__d2b>:
 801ef7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801ef80:	4689      	mov	r9, r1
 801ef82:	2101      	movs	r1, #1
 801ef84:	ec57 6b10 	vmov	r6, r7, d0
 801ef88:	4690      	mov	r8, r2
 801ef8a:	f7ff fc0f 	bl	801e7ac <_Balloc>
 801ef8e:	4604      	mov	r4, r0
 801ef90:	b930      	cbnz	r0, 801efa0 <__d2b+0x24>
 801ef92:	4602      	mov	r2, r0
 801ef94:	4b25      	ldr	r3, [pc, #148]	; (801f02c <__d2b+0xb0>)
 801ef96:	4826      	ldr	r0, [pc, #152]	; (801f030 <__d2b+0xb4>)
 801ef98:	f240 310a 	movw	r1, #778	; 0x30a
 801ef9c:	f7fd ff7a 	bl	801ce94 <__assert_func>
 801efa0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801efa4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801efa8:	bb35      	cbnz	r5, 801eff8 <__d2b+0x7c>
 801efaa:	2e00      	cmp	r6, #0
 801efac:	9301      	str	r3, [sp, #4]
 801efae:	d028      	beq.n	801f002 <__d2b+0x86>
 801efb0:	4668      	mov	r0, sp
 801efb2:	9600      	str	r6, [sp, #0]
 801efb4:	f7ff fd10 	bl	801e9d8 <__lo0bits>
 801efb8:	9900      	ldr	r1, [sp, #0]
 801efba:	b300      	cbz	r0, 801effe <__d2b+0x82>
 801efbc:	9a01      	ldr	r2, [sp, #4]
 801efbe:	f1c0 0320 	rsb	r3, r0, #32
 801efc2:	fa02 f303 	lsl.w	r3, r2, r3
 801efc6:	430b      	orrs	r3, r1
 801efc8:	40c2      	lsrs	r2, r0
 801efca:	6163      	str	r3, [r4, #20]
 801efcc:	9201      	str	r2, [sp, #4]
 801efce:	9b01      	ldr	r3, [sp, #4]
 801efd0:	61a3      	str	r3, [r4, #24]
 801efd2:	2b00      	cmp	r3, #0
 801efd4:	bf14      	ite	ne
 801efd6:	2202      	movne	r2, #2
 801efd8:	2201      	moveq	r2, #1
 801efda:	6122      	str	r2, [r4, #16]
 801efdc:	b1d5      	cbz	r5, 801f014 <__d2b+0x98>
 801efde:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801efe2:	4405      	add	r5, r0
 801efe4:	f8c9 5000 	str.w	r5, [r9]
 801efe8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801efec:	f8c8 0000 	str.w	r0, [r8]
 801eff0:	4620      	mov	r0, r4
 801eff2:	b003      	add	sp, #12
 801eff4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eff8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801effc:	e7d5      	b.n	801efaa <__d2b+0x2e>
 801effe:	6161      	str	r1, [r4, #20]
 801f000:	e7e5      	b.n	801efce <__d2b+0x52>
 801f002:	a801      	add	r0, sp, #4
 801f004:	f7ff fce8 	bl	801e9d8 <__lo0bits>
 801f008:	9b01      	ldr	r3, [sp, #4]
 801f00a:	6163      	str	r3, [r4, #20]
 801f00c:	2201      	movs	r2, #1
 801f00e:	6122      	str	r2, [r4, #16]
 801f010:	3020      	adds	r0, #32
 801f012:	e7e3      	b.n	801efdc <__d2b+0x60>
 801f014:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f018:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801f01c:	f8c9 0000 	str.w	r0, [r9]
 801f020:	6918      	ldr	r0, [r3, #16]
 801f022:	f7ff fcb9 	bl	801e998 <__hi0bits>
 801f026:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801f02a:	e7df      	b.n	801efec <__d2b+0x70>
 801f02c:	0802244d 	.word	0x0802244d
 801f030:	080224dc 	.word	0x080224dc

0801f034 <__ratio>:
 801f034:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f038:	4688      	mov	r8, r1
 801f03a:	4669      	mov	r1, sp
 801f03c:	4681      	mov	r9, r0
 801f03e:	f7ff ff4d 	bl	801eedc <__b2d>
 801f042:	a901      	add	r1, sp, #4
 801f044:	4640      	mov	r0, r8
 801f046:	ec55 4b10 	vmov	r4, r5, d0
 801f04a:	f7ff ff47 	bl	801eedc <__b2d>
 801f04e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f052:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801f056:	eba3 0c02 	sub.w	ip, r3, r2
 801f05a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801f05e:	1a9b      	subs	r3, r3, r2
 801f060:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801f064:	ec51 0b10 	vmov	r0, r1, d0
 801f068:	2b00      	cmp	r3, #0
 801f06a:	bfd6      	itet	le
 801f06c:	460a      	movle	r2, r1
 801f06e:	462a      	movgt	r2, r5
 801f070:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801f074:	468b      	mov	fp, r1
 801f076:	462f      	mov	r7, r5
 801f078:	bfd4      	ite	le
 801f07a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801f07e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801f082:	4620      	mov	r0, r4
 801f084:	ee10 2a10 	vmov	r2, s0
 801f088:	465b      	mov	r3, fp
 801f08a:	4639      	mov	r1, r7
 801f08c:	f7e1 fbfe 	bl	800088c <__aeabi_ddiv>
 801f090:	ec41 0b10 	vmov	d0, r0, r1
 801f094:	b003      	add	sp, #12
 801f096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f09a <__copybits>:
 801f09a:	3901      	subs	r1, #1
 801f09c:	b570      	push	{r4, r5, r6, lr}
 801f09e:	1149      	asrs	r1, r1, #5
 801f0a0:	6914      	ldr	r4, [r2, #16]
 801f0a2:	3101      	adds	r1, #1
 801f0a4:	f102 0314 	add.w	r3, r2, #20
 801f0a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801f0ac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801f0b0:	1f05      	subs	r5, r0, #4
 801f0b2:	42a3      	cmp	r3, r4
 801f0b4:	d30c      	bcc.n	801f0d0 <__copybits+0x36>
 801f0b6:	1aa3      	subs	r3, r4, r2
 801f0b8:	3b11      	subs	r3, #17
 801f0ba:	f023 0303 	bic.w	r3, r3, #3
 801f0be:	3211      	adds	r2, #17
 801f0c0:	42a2      	cmp	r2, r4
 801f0c2:	bf88      	it	hi
 801f0c4:	2300      	movhi	r3, #0
 801f0c6:	4418      	add	r0, r3
 801f0c8:	2300      	movs	r3, #0
 801f0ca:	4288      	cmp	r0, r1
 801f0cc:	d305      	bcc.n	801f0da <__copybits+0x40>
 801f0ce:	bd70      	pop	{r4, r5, r6, pc}
 801f0d0:	f853 6b04 	ldr.w	r6, [r3], #4
 801f0d4:	f845 6f04 	str.w	r6, [r5, #4]!
 801f0d8:	e7eb      	b.n	801f0b2 <__copybits+0x18>
 801f0da:	f840 3b04 	str.w	r3, [r0], #4
 801f0de:	e7f4      	b.n	801f0ca <__copybits+0x30>

0801f0e0 <__any_on>:
 801f0e0:	f100 0214 	add.w	r2, r0, #20
 801f0e4:	6900      	ldr	r0, [r0, #16]
 801f0e6:	114b      	asrs	r3, r1, #5
 801f0e8:	4298      	cmp	r0, r3
 801f0ea:	b510      	push	{r4, lr}
 801f0ec:	db11      	blt.n	801f112 <__any_on+0x32>
 801f0ee:	dd0a      	ble.n	801f106 <__any_on+0x26>
 801f0f0:	f011 011f 	ands.w	r1, r1, #31
 801f0f4:	d007      	beq.n	801f106 <__any_on+0x26>
 801f0f6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801f0fa:	fa24 f001 	lsr.w	r0, r4, r1
 801f0fe:	fa00 f101 	lsl.w	r1, r0, r1
 801f102:	428c      	cmp	r4, r1
 801f104:	d10b      	bne.n	801f11e <__any_on+0x3e>
 801f106:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f10a:	4293      	cmp	r3, r2
 801f10c:	d803      	bhi.n	801f116 <__any_on+0x36>
 801f10e:	2000      	movs	r0, #0
 801f110:	bd10      	pop	{r4, pc}
 801f112:	4603      	mov	r3, r0
 801f114:	e7f7      	b.n	801f106 <__any_on+0x26>
 801f116:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f11a:	2900      	cmp	r1, #0
 801f11c:	d0f5      	beq.n	801f10a <__any_on+0x2a>
 801f11e:	2001      	movs	r0, #1
 801f120:	e7f6      	b.n	801f110 <__any_on+0x30>

0801f122 <_calloc_r>:
 801f122:	b513      	push	{r0, r1, r4, lr}
 801f124:	434a      	muls	r2, r1
 801f126:	4611      	mov	r1, r2
 801f128:	9201      	str	r2, [sp, #4]
 801f12a:	f7fb faf1 	bl	801a710 <_malloc_r>
 801f12e:	4604      	mov	r4, r0
 801f130:	b118      	cbz	r0, 801f13a <_calloc_r+0x18>
 801f132:	9a01      	ldr	r2, [sp, #4]
 801f134:	2100      	movs	r1, #0
 801f136:	f7fb f815 	bl	801a164 <memset>
 801f13a:	4620      	mov	r0, r4
 801f13c:	b002      	add	sp, #8
 801f13e:	bd10      	pop	{r4, pc}

0801f140 <_realloc_r>:
 801f140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f142:	4607      	mov	r7, r0
 801f144:	4614      	mov	r4, r2
 801f146:	460e      	mov	r6, r1
 801f148:	b921      	cbnz	r1, 801f154 <_realloc_r+0x14>
 801f14a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801f14e:	4611      	mov	r1, r2
 801f150:	f7fb bade 	b.w	801a710 <_malloc_r>
 801f154:	b922      	cbnz	r2, 801f160 <_realloc_r+0x20>
 801f156:	f7fb fa8b 	bl	801a670 <_free_r>
 801f15a:	4625      	mov	r5, r4
 801f15c:	4628      	mov	r0, r5
 801f15e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f160:	f000 feaa 	bl	801feb8 <_malloc_usable_size_r>
 801f164:	42a0      	cmp	r0, r4
 801f166:	d20f      	bcs.n	801f188 <_realloc_r+0x48>
 801f168:	4621      	mov	r1, r4
 801f16a:	4638      	mov	r0, r7
 801f16c:	f7fb fad0 	bl	801a710 <_malloc_r>
 801f170:	4605      	mov	r5, r0
 801f172:	2800      	cmp	r0, #0
 801f174:	d0f2      	beq.n	801f15c <_realloc_r+0x1c>
 801f176:	4631      	mov	r1, r6
 801f178:	4622      	mov	r2, r4
 801f17a:	f7fa ffcb 	bl	801a114 <memcpy>
 801f17e:	4631      	mov	r1, r6
 801f180:	4638      	mov	r0, r7
 801f182:	f7fb fa75 	bl	801a670 <_free_r>
 801f186:	e7e9      	b.n	801f15c <_realloc_r+0x1c>
 801f188:	4635      	mov	r5, r6
 801f18a:	e7e7      	b.n	801f15c <_realloc_r+0x1c>

0801f18c <__ssputs_r>:
 801f18c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f190:	688e      	ldr	r6, [r1, #8]
 801f192:	429e      	cmp	r6, r3
 801f194:	4682      	mov	sl, r0
 801f196:	460c      	mov	r4, r1
 801f198:	4690      	mov	r8, r2
 801f19a:	461f      	mov	r7, r3
 801f19c:	d838      	bhi.n	801f210 <__ssputs_r+0x84>
 801f19e:	898a      	ldrh	r2, [r1, #12]
 801f1a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801f1a4:	d032      	beq.n	801f20c <__ssputs_r+0x80>
 801f1a6:	6825      	ldr	r5, [r4, #0]
 801f1a8:	6909      	ldr	r1, [r1, #16]
 801f1aa:	eba5 0901 	sub.w	r9, r5, r1
 801f1ae:	6965      	ldr	r5, [r4, #20]
 801f1b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f1b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f1b8:	3301      	adds	r3, #1
 801f1ba:	444b      	add	r3, r9
 801f1bc:	106d      	asrs	r5, r5, #1
 801f1be:	429d      	cmp	r5, r3
 801f1c0:	bf38      	it	cc
 801f1c2:	461d      	movcc	r5, r3
 801f1c4:	0553      	lsls	r3, r2, #21
 801f1c6:	d531      	bpl.n	801f22c <__ssputs_r+0xa0>
 801f1c8:	4629      	mov	r1, r5
 801f1ca:	f7fb faa1 	bl	801a710 <_malloc_r>
 801f1ce:	4606      	mov	r6, r0
 801f1d0:	b950      	cbnz	r0, 801f1e8 <__ssputs_r+0x5c>
 801f1d2:	230c      	movs	r3, #12
 801f1d4:	f8ca 3000 	str.w	r3, [sl]
 801f1d8:	89a3      	ldrh	r3, [r4, #12]
 801f1da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f1de:	81a3      	strh	r3, [r4, #12]
 801f1e0:	f04f 30ff 	mov.w	r0, #4294967295
 801f1e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f1e8:	6921      	ldr	r1, [r4, #16]
 801f1ea:	464a      	mov	r2, r9
 801f1ec:	f7fa ff92 	bl	801a114 <memcpy>
 801f1f0:	89a3      	ldrh	r3, [r4, #12]
 801f1f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801f1f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f1fa:	81a3      	strh	r3, [r4, #12]
 801f1fc:	6126      	str	r6, [r4, #16]
 801f1fe:	6165      	str	r5, [r4, #20]
 801f200:	444e      	add	r6, r9
 801f202:	eba5 0509 	sub.w	r5, r5, r9
 801f206:	6026      	str	r6, [r4, #0]
 801f208:	60a5      	str	r5, [r4, #8]
 801f20a:	463e      	mov	r6, r7
 801f20c:	42be      	cmp	r6, r7
 801f20e:	d900      	bls.n	801f212 <__ssputs_r+0x86>
 801f210:	463e      	mov	r6, r7
 801f212:	4632      	mov	r2, r6
 801f214:	6820      	ldr	r0, [r4, #0]
 801f216:	4641      	mov	r1, r8
 801f218:	f7fa ff8a 	bl	801a130 <memmove>
 801f21c:	68a3      	ldr	r3, [r4, #8]
 801f21e:	6822      	ldr	r2, [r4, #0]
 801f220:	1b9b      	subs	r3, r3, r6
 801f222:	4432      	add	r2, r6
 801f224:	60a3      	str	r3, [r4, #8]
 801f226:	6022      	str	r2, [r4, #0]
 801f228:	2000      	movs	r0, #0
 801f22a:	e7db      	b.n	801f1e4 <__ssputs_r+0x58>
 801f22c:	462a      	mov	r2, r5
 801f22e:	f7ff ff87 	bl	801f140 <_realloc_r>
 801f232:	4606      	mov	r6, r0
 801f234:	2800      	cmp	r0, #0
 801f236:	d1e1      	bne.n	801f1fc <__ssputs_r+0x70>
 801f238:	6921      	ldr	r1, [r4, #16]
 801f23a:	4650      	mov	r0, sl
 801f23c:	f7fb fa18 	bl	801a670 <_free_r>
 801f240:	e7c7      	b.n	801f1d2 <__ssputs_r+0x46>
	...

0801f244 <_svfiprintf_r>:
 801f244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f248:	4698      	mov	r8, r3
 801f24a:	898b      	ldrh	r3, [r1, #12]
 801f24c:	061b      	lsls	r3, r3, #24
 801f24e:	b09d      	sub	sp, #116	; 0x74
 801f250:	4607      	mov	r7, r0
 801f252:	460d      	mov	r5, r1
 801f254:	4614      	mov	r4, r2
 801f256:	d50e      	bpl.n	801f276 <_svfiprintf_r+0x32>
 801f258:	690b      	ldr	r3, [r1, #16]
 801f25a:	b963      	cbnz	r3, 801f276 <_svfiprintf_r+0x32>
 801f25c:	2140      	movs	r1, #64	; 0x40
 801f25e:	f7fb fa57 	bl	801a710 <_malloc_r>
 801f262:	6028      	str	r0, [r5, #0]
 801f264:	6128      	str	r0, [r5, #16]
 801f266:	b920      	cbnz	r0, 801f272 <_svfiprintf_r+0x2e>
 801f268:	230c      	movs	r3, #12
 801f26a:	603b      	str	r3, [r7, #0]
 801f26c:	f04f 30ff 	mov.w	r0, #4294967295
 801f270:	e0d1      	b.n	801f416 <_svfiprintf_r+0x1d2>
 801f272:	2340      	movs	r3, #64	; 0x40
 801f274:	616b      	str	r3, [r5, #20]
 801f276:	2300      	movs	r3, #0
 801f278:	9309      	str	r3, [sp, #36]	; 0x24
 801f27a:	2320      	movs	r3, #32
 801f27c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f280:	f8cd 800c 	str.w	r8, [sp, #12]
 801f284:	2330      	movs	r3, #48	; 0x30
 801f286:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801f430 <_svfiprintf_r+0x1ec>
 801f28a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f28e:	f04f 0901 	mov.w	r9, #1
 801f292:	4623      	mov	r3, r4
 801f294:	469a      	mov	sl, r3
 801f296:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f29a:	b10a      	cbz	r2, 801f2a0 <_svfiprintf_r+0x5c>
 801f29c:	2a25      	cmp	r2, #37	; 0x25
 801f29e:	d1f9      	bne.n	801f294 <_svfiprintf_r+0x50>
 801f2a0:	ebba 0b04 	subs.w	fp, sl, r4
 801f2a4:	d00b      	beq.n	801f2be <_svfiprintf_r+0x7a>
 801f2a6:	465b      	mov	r3, fp
 801f2a8:	4622      	mov	r2, r4
 801f2aa:	4629      	mov	r1, r5
 801f2ac:	4638      	mov	r0, r7
 801f2ae:	f7ff ff6d 	bl	801f18c <__ssputs_r>
 801f2b2:	3001      	adds	r0, #1
 801f2b4:	f000 80aa 	beq.w	801f40c <_svfiprintf_r+0x1c8>
 801f2b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f2ba:	445a      	add	r2, fp
 801f2bc:	9209      	str	r2, [sp, #36]	; 0x24
 801f2be:	f89a 3000 	ldrb.w	r3, [sl]
 801f2c2:	2b00      	cmp	r3, #0
 801f2c4:	f000 80a2 	beq.w	801f40c <_svfiprintf_r+0x1c8>
 801f2c8:	2300      	movs	r3, #0
 801f2ca:	f04f 32ff 	mov.w	r2, #4294967295
 801f2ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f2d2:	f10a 0a01 	add.w	sl, sl, #1
 801f2d6:	9304      	str	r3, [sp, #16]
 801f2d8:	9307      	str	r3, [sp, #28]
 801f2da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f2de:	931a      	str	r3, [sp, #104]	; 0x68
 801f2e0:	4654      	mov	r4, sl
 801f2e2:	2205      	movs	r2, #5
 801f2e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f2e8:	4851      	ldr	r0, [pc, #324]	; (801f430 <_svfiprintf_r+0x1ec>)
 801f2ea:	f7e0 ff99 	bl	8000220 <memchr>
 801f2ee:	9a04      	ldr	r2, [sp, #16]
 801f2f0:	b9d8      	cbnz	r0, 801f32a <_svfiprintf_r+0xe6>
 801f2f2:	06d0      	lsls	r0, r2, #27
 801f2f4:	bf44      	itt	mi
 801f2f6:	2320      	movmi	r3, #32
 801f2f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f2fc:	0711      	lsls	r1, r2, #28
 801f2fe:	bf44      	itt	mi
 801f300:	232b      	movmi	r3, #43	; 0x2b
 801f302:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f306:	f89a 3000 	ldrb.w	r3, [sl]
 801f30a:	2b2a      	cmp	r3, #42	; 0x2a
 801f30c:	d015      	beq.n	801f33a <_svfiprintf_r+0xf6>
 801f30e:	9a07      	ldr	r2, [sp, #28]
 801f310:	4654      	mov	r4, sl
 801f312:	2000      	movs	r0, #0
 801f314:	f04f 0c0a 	mov.w	ip, #10
 801f318:	4621      	mov	r1, r4
 801f31a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f31e:	3b30      	subs	r3, #48	; 0x30
 801f320:	2b09      	cmp	r3, #9
 801f322:	d94e      	bls.n	801f3c2 <_svfiprintf_r+0x17e>
 801f324:	b1b0      	cbz	r0, 801f354 <_svfiprintf_r+0x110>
 801f326:	9207      	str	r2, [sp, #28]
 801f328:	e014      	b.n	801f354 <_svfiprintf_r+0x110>
 801f32a:	eba0 0308 	sub.w	r3, r0, r8
 801f32e:	fa09 f303 	lsl.w	r3, r9, r3
 801f332:	4313      	orrs	r3, r2
 801f334:	9304      	str	r3, [sp, #16]
 801f336:	46a2      	mov	sl, r4
 801f338:	e7d2      	b.n	801f2e0 <_svfiprintf_r+0x9c>
 801f33a:	9b03      	ldr	r3, [sp, #12]
 801f33c:	1d19      	adds	r1, r3, #4
 801f33e:	681b      	ldr	r3, [r3, #0]
 801f340:	9103      	str	r1, [sp, #12]
 801f342:	2b00      	cmp	r3, #0
 801f344:	bfbb      	ittet	lt
 801f346:	425b      	neglt	r3, r3
 801f348:	f042 0202 	orrlt.w	r2, r2, #2
 801f34c:	9307      	strge	r3, [sp, #28]
 801f34e:	9307      	strlt	r3, [sp, #28]
 801f350:	bfb8      	it	lt
 801f352:	9204      	strlt	r2, [sp, #16]
 801f354:	7823      	ldrb	r3, [r4, #0]
 801f356:	2b2e      	cmp	r3, #46	; 0x2e
 801f358:	d10c      	bne.n	801f374 <_svfiprintf_r+0x130>
 801f35a:	7863      	ldrb	r3, [r4, #1]
 801f35c:	2b2a      	cmp	r3, #42	; 0x2a
 801f35e:	d135      	bne.n	801f3cc <_svfiprintf_r+0x188>
 801f360:	9b03      	ldr	r3, [sp, #12]
 801f362:	1d1a      	adds	r2, r3, #4
 801f364:	681b      	ldr	r3, [r3, #0]
 801f366:	9203      	str	r2, [sp, #12]
 801f368:	2b00      	cmp	r3, #0
 801f36a:	bfb8      	it	lt
 801f36c:	f04f 33ff 	movlt.w	r3, #4294967295
 801f370:	3402      	adds	r4, #2
 801f372:	9305      	str	r3, [sp, #20]
 801f374:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801f440 <_svfiprintf_r+0x1fc>
 801f378:	7821      	ldrb	r1, [r4, #0]
 801f37a:	2203      	movs	r2, #3
 801f37c:	4650      	mov	r0, sl
 801f37e:	f7e0 ff4f 	bl	8000220 <memchr>
 801f382:	b140      	cbz	r0, 801f396 <_svfiprintf_r+0x152>
 801f384:	2340      	movs	r3, #64	; 0x40
 801f386:	eba0 000a 	sub.w	r0, r0, sl
 801f38a:	fa03 f000 	lsl.w	r0, r3, r0
 801f38e:	9b04      	ldr	r3, [sp, #16]
 801f390:	4303      	orrs	r3, r0
 801f392:	3401      	adds	r4, #1
 801f394:	9304      	str	r3, [sp, #16]
 801f396:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f39a:	4826      	ldr	r0, [pc, #152]	; (801f434 <_svfiprintf_r+0x1f0>)
 801f39c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f3a0:	2206      	movs	r2, #6
 801f3a2:	f7e0 ff3d 	bl	8000220 <memchr>
 801f3a6:	2800      	cmp	r0, #0
 801f3a8:	d038      	beq.n	801f41c <_svfiprintf_r+0x1d8>
 801f3aa:	4b23      	ldr	r3, [pc, #140]	; (801f438 <_svfiprintf_r+0x1f4>)
 801f3ac:	bb1b      	cbnz	r3, 801f3f6 <_svfiprintf_r+0x1b2>
 801f3ae:	9b03      	ldr	r3, [sp, #12]
 801f3b0:	3307      	adds	r3, #7
 801f3b2:	f023 0307 	bic.w	r3, r3, #7
 801f3b6:	3308      	adds	r3, #8
 801f3b8:	9303      	str	r3, [sp, #12]
 801f3ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f3bc:	4433      	add	r3, r6
 801f3be:	9309      	str	r3, [sp, #36]	; 0x24
 801f3c0:	e767      	b.n	801f292 <_svfiprintf_r+0x4e>
 801f3c2:	fb0c 3202 	mla	r2, ip, r2, r3
 801f3c6:	460c      	mov	r4, r1
 801f3c8:	2001      	movs	r0, #1
 801f3ca:	e7a5      	b.n	801f318 <_svfiprintf_r+0xd4>
 801f3cc:	2300      	movs	r3, #0
 801f3ce:	3401      	adds	r4, #1
 801f3d0:	9305      	str	r3, [sp, #20]
 801f3d2:	4619      	mov	r1, r3
 801f3d4:	f04f 0c0a 	mov.w	ip, #10
 801f3d8:	4620      	mov	r0, r4
 801f3da:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f3de:	3a30      	subs	r2, #48	; 0x30
 801f3e0:	2a09      	cmp	r2, #9
 801f3e2:	d903      	bls.n	801f3ec <_svfiprintf_r+0x1a8>
 801f3e4:	2b00      	cmp	r3, #0
 801f3e6:	d0c5      	beq.n	801f374 <_svfiprintf_r+0x130>
 801f3e8:	9105      	str	r1, [sp, #20]
 801f3ea:	e7c3      	b.n	801f374 <_svfiprintf_r+0x130>
 801f3ec:	fb0c 2101 	mla	r1, ip, r1, r2
 801f3f0:	4604      	mov	r4, r0
 801f3f2:	2301      	movs	r3, #1
 801f3f4:	e7f0      	b.n	801f3d8 <_svfiprintf_r+0x194>
 801f3f6:	ab03      	add	r3, sp, #12
 801f3f8:	9300      	str	r3, [sp, #0]
 801f3fa:	462a      	mov	r2, r5
 801f3fc:	4b0f      	ldr	r3, [pc, #60]	; (801f43c <_svfiprintf_r+0x1f8>)
 801f3fe:	a904      	add	r1, sp, #16
 801f400:	4638      	mov	r0, r7
 801f402:	f7fb fa7f 	bl	801a904 <_printf_float>
 801f406:	1c42      	adds	r2, r0, #1
 801f408:	4606      	mov	r6, r0
 801f40a:	d1d6      	bne.n	801f3ba <_svfiprintf_r+0x176>
 801f40c:	89ab      	ldrh	r3, [r5, #12]
 801f40e:	065b      	lsls	r3, r3, #25
 801f410:	f53f af2c 	bmi.w	801f26c <_svfiprintf_r+0x28>
 801f414:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f416:	b01d      	add	sp, #116	; 0x74
 801f418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f41c:	ab03      	add	r3, sp, #12
 801f41e:	9300      	str	r3, [sp, #0]
 801f420:	462a      	mov	r2, r5
 801f422:	4b06      	ldr	r3, [pc, #24]	; (801f43c <_svfiprintf_r+0x1f8>)
 801f424:	a904      	add	r1, sp, #16
 801f426:	4638      	mov	r0, r7
 801f428:	f7fb fd10 	bl	801ae4c <_printf_i>
 801f42c:	e7eb      	b.n	801f406 <_svfiprintf_r+0x1c2>
 801f42e:	bf00      	nop
 801f430:	0802263c 	.word	0x0802263c
 801f434:	08022646 	.word	0x08022646
 801f438:	0801a905 	.word	0x0801a905
 801f43c:	0801f18d 	.word	0x0801f18d
 801f440:	08022642 	.word	0x08022642

0801f444 <_sungetc_r>:
 801f444:	b538      	push	{r3, r4, r5, lr}
 801f446:	1c4b      	adds	r3, r1, #1
 801f448:	4614      	mov	r4, r2
 801f44a:	d103      	bne.n	801f454 <_sungetc_r+0x10>
 801f44c:	f04f 35ff 	mov.w	r5, #4294967295
 801f450:	4628      	mov	r0, r5
 801f452:	bd38      	pop	{r3, r4, r5, pc}
 801f454:	8993      	ldrh	r3, [r2, #12]
 801f456:	f023 0320 	bic.w	r3, r3, #32
 801f45a:	8193      	strh	r3, [r2, #12]
 801f45c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f45e:	6852      	ldr	r2, [r2, #4]
 801f460:	b2cd      	uxtb	r5, r1
 801f462:	b18b      	cbz	r3, 801f488 <_sungetc_r+0x44>
 801f464:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801f466:	4293      	cmp	r3, r2
 801f468:	dd08      	ble.n	801f47c <_sungetc_r+0x38>
 801f46a:	6823      	ldr	r3, [r4, #0]
 801f46c:	1e5a      	subs	r2, r3, #1
 801f46e:	6022      	str	r2, [r4, #0]
 801f470:	f803 5c01 	strb.w	r5, [r3, #-1]
 801f474:	6863      	ldr	r3, [r4, #4]
 801f476:	3301      	adds	r3, #1
 801f478:	6063      	str	r3, [r4, #4]
 801f47a:	e7e9      	b.n	801f450 <_sungetc_r+0xc>
 801f47c:	4621      	mov	r1, r4
 801f47e:	f000 fca5 	bl	801fdcc <__submore>
 801f482:	2800      	cmp	r0, #0
 801f484:	d0f1      	beq.n	801f46a <_sungetc_r+0x26>
 801f486:	e7e1      	b.n	801f44c <_sungetc_r+0x8>
 801f488:	6921      	ldr	r1, [r4, #16]
 801f48a:	6823      	ldr	r3, [r4, #0]
 801f48c:	b151      	cbz	r1, 801f4a4 <_sungetc_r+0x60>
 801f48e:	4299      	cmp	r1, r3
 801f490:	d208      	bcs.n	801f4a4 <_sungetc_r+0x60>
 801f492:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801f496:	42a9      	cmp	r1, r5
 801f498:	d104      	bne.n	801f4a4 <_sungetc_r+0x60>
 801f49a:	3b01      	subs	r3, #1
 801f49c:	3201      	adds	r2, #1
 801f49e:	6023      	str	r3, [r4, #0]
 801f4a0:	6062      	str	r2, [r4, #4]
 801f4a2:	e7d5      	b.n	801f450 <_sungetc_r+0xc>
 801f4a4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801f4a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f4ac:	6363      	str	r3, [r4, #52]	; 0x34
 801f4ae:	2303      	movs	r3, #3
 801f4b0:	63a3      	str	r3, [r4, #56]	; 0x38
 801f4b2:	4623      	mov	r3, r4
 801f4b4:	f803 5f46 	strb.w	r5, [r3, #70]!
 801f4b8:	6023      	str	r3, [r4, #0]
 801f4ba:	2301      	movs	r3, #1
 801f4bc:	e7dc      	b.n	801f478 <_sungetc_r+0x34>

0801f4be <__ssrefill_r>:
 801f4be:	b510      	push	{r4, lr}
 801f4c0:	460c      	mov	r4, r1
 801f4c2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801f4c4:	b169      	cbz	r1, 801f4e2 <__ssrefill_r+0x24>
 801f4c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f4ca:	4299      	cmp	r1, r3
 801f4cc:	d001      	beq.n	801f4d2 <__ssrefill_r+0x14>
 801f4ce:	f7fb f8cf 	bl	801a670 <_free_r>
 801f4d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f4d4:	6063      	str	r3, [r4, #4]
 801f4d6:	2000      	movs	r0, #0
 801f4d8:	6360      	str	r0, [r4, #52]	; 0x34
 801f4da:	b113      	cbz	r3, 801f4e2 <__ssrefill_r+0x24>
 801f4dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801f4de:	6023      	str	r3, [r4, #0]
 801f4e0:	bd10      	pop	{r4, pc}
 801f4e2:	6923      	ldr	r3, [r4, #16]
 801f4e4:	6023      	str	r3, [r4, #0]
 801f4e6:	2300      	movs	r3, #0
 801f4e8:	6063      	str	r3, [r4, #4]
 801f4ea:	89a3      	ldrh	r3, [r4, #12]
 801f4ec:	f043 0320 	orr.w	r3, r3, #32
 801f4f0:	81a3      	strh	r3, [r4, #12]
 801f4f2:	f04f 30ff 	mov.w	r0, #4294967295
 801f4f6:	e7f3      	b.n	801f4e0 <__ssrefill_r+0x22>

0801f4f8 <__ssvfiscanf_r>:
 801f4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4fc:	460c      	mov	r4, r1
 801f4fe:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801f502:	2100      	movs	r1, #0
 801f504:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801f508:	49b2      	ldr	r1, [pc, #712]	; (801f7d4 <__ssvfiscanf_r+0x2dc>)
 801f50a:	91a0      	str	r1, [sp, #640]	; 0x280
 801f50c:	f10d 0804 	add.w	r8, sp, #4
 801f510:	49b1      	ldr	r1, [pc, #708]	; (801f7d8 <__ssvfiscanf_r+0x2e0>)
 801f512:	4fb2      	ldr	r7, [pc, #712]	; (801f7dc <__ssvfiscanf_r+0x2e4>)
 801f514:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801f7e0 <__ssvfiscanf_r+0x2e8>
 801f518:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801f51c:	4606      	mov	r6, r0
 801f51e:	91a1      	str	r1, [sp, #644]	; 0x284
 801f520:	9300      	str	r3, [sp, #0]
 801f522:	f892 a000 	ldrb.w	sl, [r2]
 801f526:	f1ba 0f00 	cmp.w	sl, #0
 801f52a:	f000 8151 	beq.w	801f7d0 <__ssvfiscanf_r+0x2d8>
 801f52e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801f532:	f013 0308 	ands.w	r3, r3, #8
 801f536:	f102 0501 	add.w	r5, r2, #1
 801f53a:	d019      	beq.n	801f570 <__ssvfiscanf_r+0x78>
 801f53c:	6863      	ldr	r3, [r4, #4]
 801f53e:	2b00      	cmp	r3, #0
 801f540:	dd0f      	ble.n	801f562 <__ssvfiscanf_r+0x6a>
 801f542:	6823      	ldr	r3, [r4, #0]
 801f544:	781a      	ldrb	r2, [r3, #0]
 801f546:	5cba      	ldrb	r2, [r7, r2]
 801f548:	0712      	lsls	r2, r2, #28
 801f54a:	d401      	bmi.n	801f550 <__ssvfiscanf_r+0x58>
 801f54c:	462a      	mov	r2, r5
 801f54e:	e7e8      	b.n	801f522 <__ssvfiscanf_r+0x2a>
 801f550:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801f552:	3201      	adds	r2, #1
 801f554:	9245      	str	r2, [sp, #276]	; 0x114
 801f556:	6862      	ldr	r2, [r4, #4]
 801f558:	3301      	adds	r3, #1
 801f55a:	3a01      	subs	r2, #1
 801f55c:	6062      	str	r2, [r4, #4]
 801f55e:	6023      	str	r3, [r4, #0]
 801f560:	e7ec      	b.n	801f53c <__ssvfiscanf_r+0x44>
 801f562:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801f564:	4621      	mov	r1, r4
 801f566:	4630      	mov	r0, r6
 801f568:	4798      	blx	r3
 801f56a:	2800      	cmp	r0, #0
 801f56c:	d0e9      	beq.n	801f542 <__ssvfiscanf_r+0x4a>
 801f56e:	e7ed      	b.n	801f54c <__ssvfiscanf_r+0x54>
 801f570:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 801f574:	f040 8083 	bne.w	801f67e <__ssvfiscanf_r+0x186>
 801f578:	9341      	str	r3, [sp, #260]	; 0x104
 801f57a:	9343      	str	r3, [sp, #268]	; 0x10c
 801f57c:	7853      	ldrb	r3, [r2, #1]
 801f57e:	2b2a      	cmp	r3, #42	; 0x2a
 801f580:	bf02      	ittt	eq
 801f582:	2310      	moveq	r3, #16
 801f584:	1c95      	addeq	r5, r2, #2
 801f586:	9341      	streq	r3, [sp, #260]	; 0x104
 801f588:	220a      	movs	r2, #10
 801f58a:	46ab      	mov	fp, r5
 801f58c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801f590:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801f594:	2b09      	cmp	r3, #9
 801f596:	d91d      	bls.n	801f5d4 <__ssvfiscanf_r+0xdc>
 801f598:	4891      	ldr	r0, [pc, #580]	; (801f7e0 <__ssvfiscanf_r+0x2e8>)
 801f59a:	2203      	movs	r2, #3
 801f59c:	f7e0 fe40 	bl	8000220 <memchr>
 801f5a0:	b140      	cbz	r0, 801f5b4 <__ssvfiscanf_r+0xbc>
 801f5a2:	2301      	movs	r3, #1
 801f5a4:	eba0 0009 	sub.w	r0, r0, r9
 801f5a8:	fa03 f000 	lsl.w	r0, r3, r0
 801f5ac:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801f5ae:	4318      	orrs	r0, r3
 801f5b0:	9041      	str	r0, [sp, #260]	; 0x104
 801f5b2:	465d      	mov	r5, fp
 801f5b4:	f815 3b01 	ldrb.w	r3, [r5], #1
 801f5b8:	2b78      	cmp	r3, #120	; 0x78
 801f5ba:	d806      	bhi.n	801f5ca <__ssvfiscanf_r+0xd2>
 801f5bc:	2b57      	cmp	r3, #87	; 0x57
 801f5be:	d810      	bhi.n	801f5e2 <__ssvfiscanf_r+0xea>
 801f5c0:	2b25      	cmp	r3, #37	; 0x25
 801f5c2:	d05c      	beq.n	801f67e <__ssvfiscanf_r+0x186>
 801f5c4:	d856      	bhi.n	801f674 <__ssvfiscanf_r+0x17c>
 801f5c6:	2b00      	cmp	r3, #0
 801f5c8:	d074      	beq.n	801f6b4 <__ssvfiscanf_r+0x1bc>
 801f5ca:	2303      	movs	r3, #3
 801f5cc:	9347      	str	r3, [sp, #284]	; 0x11c
 801f5ce:	230a      	movs	r3, #10
 801f5d0:	9342      	str	r3, [sp, #264]	; 0x108
 801f5d2:	e081      	b.n	801f6d8 <__ssvfiscanf_r+0x1e0>
 801f5d4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801f5d6:	fb02 1303 	mla	r3, r2, r3, r1
 801f5da:	3b30      	subs	r3, #48	; 0x30
 801f5dc:	9343      	str	r3, [sp, #268]	; 0x10c
 801f5de:	465d      	mov	r5, fp
 801f5e0:	e7d3      	b.n	801f58a <__ssvfiscanf_r+0x92>
 801f5e2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801f5e6:	2a20      	cmp	r2, #32
 801f5e8:	d8ef      	bhi.n	801f5ca <__ssvfiscanf_r+0xd2>
 801f5ea:	a101      	add	r1, pc, #4	; (adr r1, 801f5f0 <__ssvfiscanf_r+0xf8>)
 801f5ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801f5f0:	0801f6c3 	.word	0x0801f6c3
 801f5f4:	0801f5cb 	.word	0x0801f5cb
 801f5f8:	0801f5cb 	.word	0x0801f5cb
 801f5fc:	0801f721 	.word	0x0801f721
 801f600:	0801f5cb 	.word	0x0801f5cb
 801f604:	0801f5cb 	.word	0x0801f5cb
 801f608:	0801f5cb 	.word	0x0801f5cb
 801f60c:	0801f5cb 	.word	0x0801f5cb
 801f610:	0801f5cb 	.word	0x0801f5cb
 801f614:	0801f5cb 	.word	0x0801f5cb
 801f618:	0801f5cb 	.word	0x0801f5cb
 801f61c:	0801f737 	.word	0x0801f737
 801f620:	0801f70d 	.word	0x0801f70d
 801f624:	0801f67b 	.word	0x0801f67b
 801f628:	0801f67b 	.word	0x0801f67b
 801f62c:	0801f67b 	.word	0x0801f67b
 801f630:	0801f5cb 	.word	0x0801f5cb
 801f634:	0801f711 	.word	0x0801f711
 801f638:	0801f5cb 	.word	0x0801f5cb
 801f63c:	0801f5cb 	.word	0x0801f5cb
 801f640:	0801f5cb 	.word	0x0801f5cb
 801f644:	0801f5cb 	.word	0x0801f5cb
 801f648:	0801f747 	.word	0x0801f747
 801f64c:	0801f719 	.word	0x0801f719
 801f650:	0801f6bb 	.word	0x0801f6bb
 801f654:	0801f5cb 	.word	0x0801f5cb
 801f658:	0801f5cb 	.word	0x0801f5cb
 801f65c:	0801f743 	.word	0x0801f743
 801f660:	0801f5cb 	.word	0x0801f5cb
 801f664:	0801f70d 	.word	0x0801f70d
 801f668:	0801f5cb 	.word	0x0801f5cb
 801f66c:	0801f5cb 	.word	0x0801f5cb
 801f670:	0801f6c3 	.word	0x0801f6c3
 801f674:	3b45      	subs	r3, #69	; 0x45
 801f676:	2b02      	cmp	r3, #2
 801f678:	d8a7      	bhi.n	801f5ca <__ssvfiscanf_r+0xd2>
 801f67a:	2305      	movs	r3, #5
 801f67c:	e02b      	b.n	801f6d6 <__ssvfiscanf_r+0x1de>
 801f67e:	6863      	ldr	r3, [r4, #4]
 801f680:	2b00      	cmp	r3, #0
 801f682:	dd0d      	ble.n	801f6a0 <__ssvfiscanf_r+0x1a8>
 801f684:	6823      	ldr	r3, [r4, #0]
 801f686:	781a      	ldrb	r2, [r3, #0]
 801f688:	4552      	cmp	r2, sl
 801f68a:	f040 80a1 	bne.w	801f7d0 <__ssvfiscanf_r+0x2d8>
 801f68e:	3301      	adds	r3, #1
 801f690:	6862      	ldr	r2, [r4, #4]
 801f692:	6023      	str	r3, [r4, #0]
 801f694:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801f696:	3a01      	subs	r2, #1
 801f698:	3301      	adds	r3, #1
 801f69a:	6062      	str	r2, [r4, #4]
 801f69c:	9345      	str	r3, [sp, #276]	; 0x114
 801f69e:	e755      	b.n	801f54c <__ssvfiscanf_r+0x54>
 801f6a0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801f6a2:	4621      	mov	r1, r4
 801f6a4:	4630      	mov	r0, r6
 801f6a6:	4798      	blx	r3
 801f6a8:	2800      	cmp	r0, #0
 801f6aa:	d0eb      	beq.n	801f684 <__ssvfiscanf_r+0x18c>
 801f6ac:	9844      	ldr	r0, [sp, #272]	; 0x110
 801f6ae:	2800      	cmp	r0, #0
 801f6b0:	f040 8084 	bne.w	801f7bc <__ssvfiscanf_r+0x2c4>
 801f6b4:	f04f 30ff 	mov.w	r0, #4294967295
 801f6b8:	e086      	b.n	801f7c8 <__ssvfiscanf_r+0x2d0>
 801f6ba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801f6bc:	f042 0220 	orr.w	r2, r2, #32
 801f6c0:	9241      	str	r2, [sp, #260]	; 0x104
 801f6c2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801f6c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f6c8:	9241      	str	r2, [sp, #260]	; 0x104
 801f6ca:	2210      	movs	r2, #16
 801f6cc:	2b6f      	cmp	r3, #111	; 0x6f
 801f6ce:	9242      	str	r2, [sp, #264]	; 0x108
 801f6d0:	bf34      	ite	cc
 801f6d2:	2303      	movcc	r3, #3
 801f6d4:	2304      	movcs	r3, #4
 801f6d6:	9347      	str	r3, [sp, #284]	; 0x11c
 801f6d8:	6863      	ldr	r3, [r4, #4]
 801f6da:	2b00      	cmp	r3, #0
 801f6dc:	dd41      	ble.n	801f762 <__ssvfiscanf_r+0x26a>
 801f6de:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801f6e0:	0659      	lsls	r1, r3, #25
 801f6e2:	d404      	bmi.n	801f6ee <__ssvfiscanf_r+0x1f6>
 801f6e4:	6823      	ldr	r3, [r4, #0]
 801f6e6:	781a      	ldrb	r2, [r3, #0]
 801f6e8:	5cba      	ldrb	r2, [r7, r2]
 801f6ea:	0712      	lsls	r2, r2, #28
 801f6ec:	d440      	bmi.n	801f770 <__ssvfiscanf_r+0x278>
 801f6ee:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801f6f0:	2b02      	cmp	r3, #2
 801f6f2:	dc4f      	bgt.n	801f794 <__ssvfiscanf_r+0x29c>
 801f6f4:	466b      	mov	r3, sp
 801f6f6:	4622      	mov	r2, r4
 801f6f8:	a941      	add	r1, sp, #260	; 0x104
 801f6fa:	4630      	mov	r0, r6
 801f6fc:	f000 f9ce 	bl	801fa9c <_scanf_chars>
 801f700:	2801      	cmp	r0, #1
 801f702:	d065      	beq.n	801f7d0 <__ssvfiscanf_r+0x2d8>
 801f704:	2802      	cmp	r0, #2
 801f706:	f47f af21 	bne.w	801f54c <__ssvfiscanf_r+0x54>
 801f70a:	e7cf      	b.n	801f6ac <__ssvfiscanf_r+0x1b4>
 801f70c:	220a      	movs	r2, #10
 801f70e:	e7dd      	b.n	801f6cc <__ssvfiscanf_r+0x1d4>
 801f710:	2300      	movs	r3, #0
 801f712:	9342      	str	r3, [sp, #264]	; 0x108
 801f714:	2303      	movs	r3, #3
 801f716:	e7de      	b.n	801f6d6 <__ssvfiscanf_r+0x1de>
 801f718:	2308      	movs	r3, #8
 801f71a:	9342      	str	r3, [sp, #264]	; 0x108
 801f71c:	2304      	movs	r3, #4
 801f71e:	e7da      	b.n	801f6d6 <__ssvfiscanf_r+0x1de>
 801f720:	4629      	mov	r1, r5
 801f722:	4640      	mov	r0, r8
 801f724:	f000 fb18 	bl	801fd58 <__sccl>
 801f728:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801f72a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f72e:	9341      	str	r3, [sp, #260]	; 0x104
 801f730:	4605      	mov	r5, r0
 801f732:	2301      	movs	r3, #1
 801f734:	e7cf      	b.n	801f6d6 <__ssvfiscanf_r+0x1de>
 801f736:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801f738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f73c:	9341      	str	r3, [sp, #260]	; 0x104
 801f73e:	2300      	movs	r3, #0
 801f740:	e7c9      	b.n	801f6d6 <__ssvfiscanf_r+0x1de>
 801f742:	2302      	movs	r3, #2
 801f744:	e7c7      	b.n	801f6d6 <__ssvfiscanf_r+0x1de>
 801f746:	9841      	ldr	r0, [sp, #260]	; 0x104
 801f748:	06c3      	lsls	r3, r0, #27
 801f74a:	f53f aeff 	bmi.w	801f54c <__ssvfiscanf_r+0x54>
 801f74e:	9b00      	ldr	r3, [sp, #0]
 801f750:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801f752:	1d19      	adds	r1, r3, #4
 801f754:	9100      	str	r1, [sp, #0]
 801f756:	681b      	ldr	r3, [r3, #0]
 801f758:	07c0      	lsls	r0, r0, #31
 801f75a:	bf4c      	ite	mi
 801f75c:	801a      	strhmi	r2, [r3, #0]
 801f75e:	601a      	strpl	r2, [r3, #0]
 801f760:	e6f4      	b.n	801f54c <__ssvfiscanf_r+0x54>
 801f762:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801f764:	4621      	mov	r1, r4
 801f766:	4630      	mov	r0, r6
 801f768:	4798      	blx	r3
 801f76a:	2800      	cmp	r0, #0
 801f76c:	d0b7      	beq.n	801f6de <__ssvfiscanf_r+0x1e6>
 801f76e:	e79d      	b.n	801f6ac <__ssvfiscanf_r+0x1b4>
 801f770:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801f772:	3201      	adds	r2, #1
 801f774:	9245      	str	r2, [sp, #276]	; 0x114
 801f776:	6862      	ldr	r2, [r4, #4]
 801f778:	3a01      	subs	r2, #1
 801f77a:	2a00      	cmp	r2, #0
 801f77c:	6062      	str	r2, [r4, #4]
 801f77e:	dd02      	ble.n	801f786 <__ssvfiscanf_r+0x28e>
 801f780:	3301      	adds	r3, #1
 801f782:	6023      	str	r3, [r4, #0]
 801f784:	e7ae      	b.n	801f6e4 <__ssvfiscanf_r+0x1ec>
 801f786:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801f788:	4621      	mov	r1, r4
 801f78a:	4630      	mov	r0, r6
 801f78c:	4798      	blx	r3
 801f78e:	2800      	cmp	r0, #0
 801f790:	d0a8      	beq.n	801f6e4 <__ssvfiscanf_r+0x1ec>
 801f792:	e78b      	b.n	801f6ac <__ssvfiscanf_r+0x1b4>
 801f794:	2b04      	cmp	r3, #4
 801f796:	dc06      	bgt.n	801f7a6 <__ssvfiscanf_r+0x2ae>
 801f798:	466b      	mov	r3, sp
 801f79a:	4622      	mov	r2, r4
 801f79c:	a941      	add	r1, sp, #260	; 0x104
 801f79e:	4630      	mov	r0, r6
 801f7a0:	f000 f9d4 	bl	801fb4c <_scanf_i>
 801f7a4:	e7ac      	b.n	801f700 <__ssvfiscanf_r+0x208>
 801f7a6:	4b0f      	ldr	r3, [pc, #60]	; (801f7e4 <__ssvfiscanf_r+0x2ec>)
 801f7a8:	2b00      	cmp	r3, #0
 801f7aa:	f43f aecf 	beq.w	801f54c <__ssvfiscanf_r+0x54>
 801f7ae:	466b      	mov	r3, sp
 801f7b0:	4622      	mov	r2, r4
 801f7b2:	a941      	add	r1, sp, #260	; 0x104
 801f7b4:	4630      	mov	r0, r6
 801f7b6:	f7fb fc6f 	bl	801b098 <_scanf_float>
 801f7ba:	e7a1      	b.n	801f700 <__ssvfiscanf_r+0x208>
 801f7bc:	89a3      	ldrh	r3, [r4, #12]
 801f7be:	f013 0f40 	tst.w	r3, #64	; 0x40
 801f7c2:	bf18      	it	ne
 801f7c4:	f04f 30ff 	movne.w	r0, #4294967295
 801f7c8:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801f7cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f7d0:	9844      	ldr	r0, [sp, #272]	; 0x110
 801f7d2:	e7f9      	b.n	801f7c8 <__ssvfiscanf_r+0x2d0>
 801f7d4:	0801f445 	.word	0x0801f445
 801f7d8:	0801f4bf 	.word	0x0801f4bf
 801f7dc:	08021fdd 	.word	0x08021fdd
 801f7e0:	08022642 	.word	0x08022642
 801f7e4:	0801b099 	.word	0x0801b099

0801f7e8 <__sfputc_r>:
 801f7e8:	6893      	ldr	r3, [r2, #8]
 801f7ea:	3b01      	subs	r3, #1
 801f7ec:	2b00      	cmp	r3, #0
 801f7ee:	b410      	push	{r4}
 801f7f0:	6093      	str	r3, [r2, #8]
 801f7f2:	da08      	bge.n	801f806 <__sfputc_r+0x1e>
 801f7f4:	6994      	ldr	r4, [r2, #24]
 801f7f6:	42a3      	cmp	r3, r4
 801f7f8:	db01      	blt.n	801f7fe <__sfputc_r+0x16>
 801f7fa:	290a      	cmp	r1, #10
 801f7fc:	d103      	bne.n	801f806 <__sfputc_r+0x1e>
 801f7fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f802:	f7fd ba75 	b.w	801ccf0 <__swbuf_r>
 801f806:	6813      	ldr	r3, [r2, #0]
 801f808:	1c58      	adds	r0, r3, #1
 801f80a:	6010      	str	r0, [r2, #0]
 801f80c:	7019      	strb	r1, [r3, #0]
 801f80e:	4608      	mov	r0, r1
 801f810:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f814:	4770      	bx	lr

0801f816 <__sfputs_r>:
 801f816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f818:	4606      	mov	r6, r0
 801f81a:	460f      	mov	r7, r1
 801f81c:	4614      	mov	r4, r2
 801f81e:	18d5      	adds	r5, r2, r3
 801f820:	42ac      	cmp	r4, r5
 801f822:	d101      	bne.n	801f828 <__sfputs_r+0x12>
 801f824:	2000      	movs	r0, #0
 801f826:	e007      	b.n	801f838 <__sfputs_r+0x22>
 801f828:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f82c:	463a      	mov	r2, r7
 801f82e:	4630      	mov	r0, r6
 801f830:	f7ff ffda 	bl	801f7e8 <__sfputc_r>
 801f834:	1c43      	adds	r3, r0, #1
 801f836:	d1f3      	bne.n	801f820 <__sfputs_r+0xa>
 801f838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f83c <_vfiprintf_r>:
 801f83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f840:	460d      	mov	r5, r1
 801f842:	b09d      	sub	sp, #116	; 0x74
 801f844:	4614      	mov	r4, r2
 801f846:	4698      	mov	r8, r3
 801f848:	4606      	mov	r6, r0
 801f84a:	b118      	cbz	r0, 801f854 <_vfiprintf_r+0x18>
 801f84c:	6983      	ldr	r3, [r0, #24]
 801f84e:	b90b      	cbnz	r3, 801f854 <_vfiprintf_r+0x18>
 801f850:	f7fa fa6c 	bl	8019d2c <__sinit>
 801f854:	4b89      	ldr	r3, [pc, #548]	; (801fa7c <_vfiprintf_r+0x240>)
 801f856:	429d      	cmp	r5, r3
 801f858:	d11b      	bne.n	801f892 <_vfiprintf_r+0x56>
 801f85a:	6875      	ldr	r5, [r6, #4]
 801f85c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f85e:	07d9      	lsls	r1, r3, #31
 801f860:	d405      	bmi.n	801f86e <_vfiprintf_r+0x32>
 801f862:	89ab      	ldrh	r3, [r5, #12]
 801f864:	059a      	lsls	r2, r3, #22
 801f866:	d402      	bmi.n	801f86e <_vfiprintf_r+0x32>
 801f868:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f86a:	f7fa fc3f 	bl	801a0ec <__retarget_lock_acquire_recursive>
 801f86e:	89ab      	ldrh	r3, [r5, #12]
 801f870:	071b      	lsls	r3, r3, #28
 801f872:	d501      	bpl.n	801f878 <_vfiprintf_r+0x3c>
 801f874:	692b      	ldr	r3, [r5, #16]
 801f876:	b9eb      	cbnz	r3, 801f8b4 <_vfiprintf_r+0x78>
 801f878:	4629      	mov	r1, r5
 801f87a:	4630      	mov	r0, r6
 801f87c:	f7fd fa9c 	bl	801cdb8 <__swsetup_r>
 801f880:	b1c0      	cbz	r0, 801f8b4 <_vfiprintf_r+0x78>
 801f882:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f884:	07dc      	lsls	r4, r3, #31
 801f886:	d50e      	bpl.n	801f8a6 <_vfiprintf_r+0x6a>
 801f888:	f04f 30ff 	mov.w	r0, #4294967295
 801f88c:	b01d      	add	sp, #116	; 0x74
 801f88e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f892:	4b7b      	ldr	r3, [pc, #492]	; (801fa80 <_vfiprintf_r+0x244>)
 801f894:	429d      	cmp	r5, r3
 801f896:	d101      	bne.n	801f89c <_vfiprintf_r+0x60>
 801f898:	68b5      	ldr	r5, [r6, #8]
 801f89a:	e7df      	b.n	801f85c <_vfiprintf_r+0x20>
 801f89c:	4b79      	ldr	r3, [pc, #484]	; (801fa84 <_vfiprintf_r+0x248>)
 801f89e:	429d      	cmp	r5, r3
 801f8a0:	bf08      	it	eq
 801f8a2:	68f5      	ldreq	r5, [r6, #12]
 801f8a4:	e7da      	b.n	801f85c <_vfiprintf_r+0x20>
 801f8a6:	89ab      	ldrh	r3, [r5, #12]
 801f8a8:	0598      	lsls	r0, r3, #22
 801f8aa:	d4ed      	bmi.n	801f888 <_vfiprintf_r+0x4c>
 801f8ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f8ae:	f7fa fc1f 	bl	801a0f0 <__retarget_lock_release_recursive>
 801f8b2:	e7e9      	b.n	801f888 <_vfiprintf_r+0x4c>
 801f8b4:	2300      	movs	r3, #0
 801f8b6:	9309      	str	r3, [sp, #36]	; 0x24
 801f8b8:	2320      	movs	r3, #32
 801f8ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f8be:	f8cd 800c 	str.w	r8, [sp, #12]
 801f8c2:	2330      	movs	r3, #48	; 0x30
 801f8c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801fa88 <_vfiprintf_r+0x24c>
 801f8c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f8cc:	f04f 0901 	mov.w	r9, #1
 801f8d0:	4623      	mov	r3, r4
 801f8d2:	469a      	mov	sl, r3
 801f8d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f8d8:	b10a      	cbz	r2, 801f8de <_vfiprintf_r+0xa2>
 801f8da:	2a25      	cmp	r2, #37	; 0x25
 801f8dc:	d1f9      	bne.n	801f8d2 <_vfiprintf_r+0x96>
 801f8de:	ebba 0b04 	subs.w	fp, sl, r4
 801f8e2:	d00b      	beq.n	801f8fc <_vfiprintf_r+0xc0>
 801f8e4:	465b      	mov	r3, fp
 801f8e6:	4622      	mov	r2, r4
 801f8e8:	4629      	mov	r1, r5
 801f8ea:	4630      	mov	r0, r6
 801f8ec:	f7ff ff93 	bl	801f816 <__sfputs_r>
 801f8f0:	3001      	adds	r0, #1
 801f8f2:	f000 80aa 	beq.w	801fa4a <_vfiprintf_r+0x20e>
 801f8f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f8f8:	445a      	add	r2, fp
 801f8fa:	9209      	str	r2, [sp, #36]	; 0x24
 801f8fc:	f89a 3000 	ldrb.w	r3, [sl]
 801f900:	2b00      	cmp	r3, #0
 801f902:	f000 80a2 	beq.w	801fa4a <_vfiprintf_r+0x20e>
 801f906:	2300      	movs	r3, #0
 801f908:	f04f 32ff 	mov.w	r2, #4294967295
 801f90c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f910:	f10a 0a01 	add.w	sl, sl, #1
 801f914:	9304      	str	r3, [sp, #16]
 801f916:	9307      	str	r3, [sp, #28]
 801f918:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f91c:	931a      	str	r3, [sp, #104]	; 0x68
 801f91e:	4654      	mov	r4, sl
 801f920:	2205      	movs	r2, #5
 801f922:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f926:	4858      	ldr	r0, [pc, #352]	; (801fa88 <_vfiprintf_r+0x24c>)
 801f928:	f7e0 fc7a 	bl	8000220 <memchr>
 801f92c:	9a04      	ldr	r2, [sp, #16]
 801f92e:	b9d8      	cbnz	r0, 801f968 <_vfiprintf_r+0x12c>
 801f930:	06d1      	lsls	r1, r2, #27
 801f932:	bf44      	itt	mi
 801f934:	2320      	movmi	r3, #32
 801f936:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f93a:	0713      	lsls	r3, r2, #28
 801f93c:	bf44      	itt	mi
 801f93e:	232b      	movmi	r3, #43	; 0x2b
 801f940:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f944:	f89a 3000 	ldrb.w	r3, [sl]
 801f948:	2b2a      	cmp	r3, #42	; 0x2a
 801f94a:	d015      	beq.n	801f978 <_vfiprintf_r+0x13c>
 801f94c:	9a07      	ldr	r2, [sp, #28]
 801f94e:	4654      	mov	r4, sl
 801f950:	2000      	movs	r0, #0
 801f952:	f04f 0c0a 	mov.w	ip, #10
 801f956:	4621      	mov	r1, r4
 801f958:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f95c:	3b30      	subs	r3, #48	; 0x30
 801f95e:	2b09      	cmp	r3, #9
 801f960:	d94e      	bls.n	801fa00 <_vfiprintf_r+0x1c4>
 801f962:	b1b0      	cbz	r0, 801f992 <_vfiprintf_r+0x156>
 801f964:	9207      	str	r2, [sp, #28]
 801f966:	e014      	b.n	801f992 <_vfiprintf_r+0x156>
 801f968:	eba0 0308 	sub.w	r3, r0, r8
 801f96c:	fa09 f303 	lsl.w	r3, r9, r3
 801f970:	4313      	orrs	r3, r2
 801f972:	9304      	str	r3, [sp, #16]
 801f974:	46a2      	mov	sl, r4
 801f976:	e7d2      	b.n	801f91e <_vfiprintf_r+0xe2>
 801f978:	9b03      	ldr	r3, [sp, #12]
 801f97a:	1d19      	adds	r1, r3, #4
 801f97c:	681b      	ldr	r3, [r3, #0]
 801f97e:	9103      	str	r1, [sp, #12]
 801f980:	2b00      	cmp	r3, #0
 801f982:	bfbb      	ittet	lt
 801f984:	425b      	neglt	r3, r3
 801f986:	f042 0202 	orrlt.w	r2, r2, #2
 801f98a:	9307      	strge	r3, [sp, #28]
 801f98c:	9307      	strlt	r3, [sp, #28]
 801f98e:	bfb8      	it	lt
 801f990:	9204      	strlt	r2, [sp, #16]
 801f992:	7823      	ldrb	r3, [r4, #0]
 801f994:	2b2e      	cmp	r3, #46	; 0x2e
 801f996:	d10c      	bne.n	801f9b2 <_vfiprintf_r+0x176>
 801f998:	7863      	ldrb	r3, [r4, #1]
 801f99a:	2b2a      	cmp	r3, #42	; 0x2a
 801f99c:	d135      	bne.n	801fa0a <_vfiprintf_r+0x1ce>
 801f99e:	9b03      	ldr	r3, [sp, #12]
 801f9a0:	1d1a      	adds	r2, r3, #4
 801f9a2:	681b      	ldr	r3, [r3, #0]
 801f9a4:	9203      	str	r2, [sp, #12]
 801f9a6:	2b00      	cmp	r3, #0
 801f9a8:	bfb8      	it	lt
 801f9aa:	f04f 33ff 	movlt.w	r3, #4294967295
 801f9ae:	3402      	adds	r4, #2
 801f9b0:	9305      	str	r3, [sp, #20]
 801f9b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801fa98 <_vfiprintf_r+0x25c>
 801f9b6:	7821      	ldrb	r1, [r4, #0]
 801f9b8:	2203      	movs	r2, #3
 801f9ba:	4650      	mov	r0, sl
 801f9bc:	f7e0 fc30 	bl	8000220 <memchr>
 801f9c0:	b140      	cbz	r0, 801f9d4 <_vfiprintf_r+0x198>
 801f9c2:	2340      	movs	r3, #64	; 0x40
 801f9c4:	eba0 000a 	sub.w	r0, r0, sl
 801f9c8:	fa03 f000 	lsl.w	r0, r3, r0
 801f9cc:	9b04      	ldr	r3, [sp, #16]
 801f9ce:	4303      	orrs	r3, r0
 801f9d0:	3401      	adds	r4, #1
 801f9d2:	9304      	str	r3, [sp, #16]
 801f9d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f9d8:	482c      	ldr	r0, [pc, #176]	; (801fa8c <_vfiprintf_r+0x250>)
 801f9da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f9de:	2206      	movs	r2, #6
 801f9e0:	f7e0 fc1e 	bl	8000220 <memchr>
 801f9e4:	2800      	cmp	r0, #0
 801f9e6:	d03f      	beq.n	801fa68 <_vfiprintf_r+0x22c>
 801f9e8:	4b29      	ldr	r3, [pc, #164]	; (801fa90 <_vfiprintf_r+0x254>)
 801f9ea:	bb1b      	cbnz	r3, 801fa34 <_vfiprintf_r+0x1f8>
 801f9ec:	9b03      	ldr	r3, [sp, #12]
 801f9ee:	3307      	adds	r3, #7
 801f9f0:	f023 0307 	bic.w	r3, r3, #7
 801f9f4:	3308      	adds	r3, #8
 801f9f6:	9303      	str	r3, [sp, #12]
 801f9f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f9fa:	443b      	add	r3, r7
 801f9fc:	9309      	str	r3, [sp, #36]	; 0x24
 801f9fe:	e767      	b.n	801f8d0 <_vfiprintf_r+0x94>
 801fa00:	fb0c 3202 	mla	r2, ip, r2, r3
 801fa04:	460c      	mov	r4, r1
 801fa06:	2001      	movs	r0, #1
 801fa08:	e7a5      	b.n	801f956 <_vfiprintf_r+0x11a>
 801fa0a:	2300      	movs	r3, #0
 801fa0c:	3401      	adds	r4, #1
 801fa0e:	9305      	str	r3, [sp, #20]
 801fa10:	4619      	mov	r1, r3
 801fa12:	f04f 0c0a 	mov.w	ip, #10
 801fa16:	4620      	mov	r0, r4
 801fa18:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fa1c:	3a30      	subs	r2, #48	; 0x30
 801fa1e:	2a09      	cmp	r2, #9
 801fa20:	d903      	bls.n	801fa2a <_vfiprintf_r+0x1ee>
 801fa22:	2b00      	cmp	r3, #0
 801fa24:	d0c5      	beq.n	801f9b2 <_vfiprintf_r+0x176>
 801fa26:	9105      	str	r1, [sp, #20]
 801fa28:	e7c3      	b.n	801f9b2 <_vfiprintf_r+0x176>
 801fa2a:	fb0c 2101 	mla	r1, ip, r1, r2
 801fa2e:	4604      	mov	r4, r0
 801fa30:	2301      	movs	r3, #1
 801fa32:	e7f0      	b.n	801fa16 <_vfiprintf_r+0x1da>
 801fa34:	ab03      	add	r3, sp, #12
 801fa36:	9300      	str	r3, [sp, #0]
 801fa38:	462a      	mov	r2, r5
 801fa3a:	4b16      	ldr	r3, [pc, #88]	; (801fa94 <_vfiprintf_r+0x258>)
 801fa3c:	a904      	add	r1, sp, #16
 801fa3e:	4630      	mov	r0, r6
 801fa40:	f7fa ff60 	bl	801a904 <_printf_float>
 801fa44:	4607      	mov	r7, r0
 801fa46:	1c78      	adds	r0, r7, #1
 801fa48:	d1d6      	bne.n	801f9f8 <_vfiprintf_r+0x1bc>
 801fa4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fa4c:	07d9      	lsls	r1, r3, #31
 801fa4e:	d405      	bmi.n	801fa5c <_vfiprintf_r+0x220>
 801fa50:	89ab      	ldrh	r3, [r5, #12]
 801fa52:	059a      	lsls	r2, r3, #22
 801fa54:	d402      	bmi.n	801fa5c <_vfiprintf_r+0x220>
 801fa56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fa58:	f7fa fb4a 	bl	801a0f0 <__retarget_lock_release_recursive>
 801fa5c:	89ab      	ldrh	r3, [r5, #12]
 801fa5e:	065b      	lsls	r3, r3, #25
 801fa60:	f53f af12 	bmi.w	801f888 <_vfiprintf_r+0x4c>
 801fa64:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fa66:	e711      	b.n	801f88c <_vfiprintf_r+0x50>
 801fa68:	ab03      	add	r3, sp, #12
 801fa6a:	9300      	str	r3, [sp, #0]
 801fa6c:	462a      	mov	r2, r5
 801fa6e:	4b09      	ldr	r3, [pc, #36]	; (801fa94 <_vfiprintf_r+0x258>)
 801fa70:	a904      	add	r1, sp, #16
 801fa72:	4630      	mov	r0, r6
 801fa74:	f7fb f9ea 	bl	801ae4c <_printf_i>
 801fa78:	e7e4      	b.n	801fa44 <_vfiprintf_r+0x208>
 801fa7a:	bf00      	nop
 801fa7c:	08022100 	.word	0x08022100
 801fa80:	08022120 	.word	0x08022120
 801fa84:	080220e0 	.word	0x080220e0
 801fa88:	0802263c 	.word	0x0802263c
 801fa8c:	08022646 	.word	0x08022646
 801fa90:	0801a905 	.word	0x0801a905
 801fa94:	0801f817 	.word	0x0801f817
 801fa98:	08022642 	.word	0x08022642

0801fa9c <_scanf_chars>:
 801fa9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801faa0:	4615      	mov	r5, r2
 801faa2:	688a      	ldr	r2, [r1, #8]
 801faa4:	4680      	mov	r8, r0
 801faa6:	460c      	mov	r4, r1
 801faa8:	b932      	cbnz	r2, 801fab8 <_scanf_chars+0x1c>
 801faaa:	698a      	ldr	r2, [r1, #24]
 801faac:	2a00      	cmp	r2, #0
 801faae:	bf0c      	ite	eq
 801fab0:	2201      	moveq	r2, #1
 801fab2:	f04f 32ff 	movne.w	r2, #4294967295
 801fab6:	608a      	str	r2, [r1, #8]
 801fab8:	6822      	ldr	r2, [r4, #0]
 801faba:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801fb48 <_scanf_chars+0xac>
 801fabe:	06d1      	lsls	r1, r2, #27
 801fac0:	bf5f      	itttt	pl
 801fac2:	681a      	ldrpl	r2, [r3, #0]
 801fac4:	1d11      	addpl	r1, r2, #4
 801fac6:	6019      	strpl	r1, [r3, #0]
 801fac8:	6816      	ldrpl	r6, [r2, #0]
 801faca:	2700      	movs	r7, #0
 801facc:	69a0      	ldr	r0, [r4, #24]
 801face:	b188      	cbz	r0, 801faf4 <_scanf_chars+0x58>
 801fad0:	2801      	cmp	r0, #1
 801fad2:	d107      	bne.n	801fae4 <_scanf_chars+0x48>
 801fad4:	682b      	ldr	r3, [r5, #0]
 801fad6:	781a      	ldrb	r2, [r3, #0]
 801fad8:	6963      	ldr	r3, [r4, #20]
 801fada:	5c9b      	ldrb	r3, [r3, r2]
 801fadc:	b953      	cbnz	r3, 801faf4 <_scanf_chars+0x58>
 801fade:	bb27      	cbnz	r7, 801fb2a <_scanf_chars+0x8e>
 801fae0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fae4:	2802      	cmp	r0, #2
 801fae6:	d120      	bne.n	801fb2a <_scanf_chars+0x8e>
 801fae8:	682b      	ldr	r3, [r5, #0]
 801faea:	781b      	ldrb	r3, [r3, #0]
 801faec:	f813 3009 	ldrb.w	r3, [r3, r9]
 801faf0:	071b      	lsls	r3, r3, #28
 801faf2:	d41a      	bmi.n	801fb2a <_scanf_chars+0x8e>
 801faf4:	6823      	ldr	r3, [r4, #0]
 801faf6:	06da      	lsls	r2, r3, #27
 801faf8:	bf5e      	ittt	pl
 801fafa:	682b      	ldrpl	r3, [r5, #0]
 801fafc:	781b      	ldrbpl	r3, [r3, #0]
 801fafe:	f806 3b01 	strbpl.w	r3, [r6], #1
 801fb02:	682a      	ldr	r2, [r5, #0]
 801fb04:	686b      	ldr	r3, [r5, #4]
 801fb06:	3201      	adds	r2, #1
 801fb08:	602a      	str	r2, [r5, #0]
 801fb0a:	68a2      	ldr	r2, [r4, #8]
 801fb0c:	3b01      	subs	r3, #1
 801fb0e:	3a01      	subs	r2, #1
 801fb10:	606b      	str	r3, [r5, #4]
 801fb12:	3701      	adds	r7, #1
 801fb14:	60a2      	str	r2, [r4, #8]
 801fb16:	b142      	cbz	r2, 801fb2a <_scanf_chars+0x8e>
 801fb18:	2b00      	cmp	r3, #0
 801fb1a:	dcd7      	bgt.n	801facc <_scanf_chars+0x30>
 801fb1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801fb20:	4629      	mov	r1, r5
 801fb22:	4640      	mov	r0, r8
 801fb24:	4798      	blx	r3
 801fb26:	2800      	cmp	r0, #0
 801fb28:	d0d0      	beq.n	801facc <_scanf_chars+0x30>
 801fb2a:	6823      	ldr	r3, [r4, #0]
 801fb2c:	f013 0310 	ands.w	r3, r3, #16
 801fb30:	d105      	bne.n	801fb3e <_scanf_chars+0xa2>
 801fb32:	68e2      	ldr	r2, [r4, #12]
 801fb34:	3201      	adds	r2, #1
 801fb36:	60e2      	str	r2, [r4, #12]
 801fb38:	69a2      	ldr	r2, [r4, #24]
 801fb3a:	b102      	cbz	r2, 801fb3e <_scanf_chars+0xa2>
 801fb3c:	7033      	strb	r3, [r6, #0]
 801fb3e:	6923      	ldr	r3, [r4, #16]
 801fb40:	441f      	add	r7, r3
 801fb42:	6127      	str	r7, [r4, #16]
 801fb44:	2000      	movs	r0, #0
 801fb46:	e7cb      	b.n	801fae0 <_scanf_chars+0x44>
 801fb48:	08021fdd 	.word	0x08021fdd

0801fb4c <_scanf_i>:
 801fb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb50:	4698      	mov	r8, r3
 801fb52:	4b74      	ldr	r3, [pc, #464]	; (801fd24 <_scanf_i+0x1d8>)
 801fb54:	460c      	mov	r4, r1
 801fb56:	4682      	mov	sl, r0
 801fb58:	4616      	mov	r6, r2
 801fb5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801fb5e:	b087      	sub	sp, #28
 801fb60:	ab03      	add	r3, sp, #12
 801fb62:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801fb66:	4b70      	ldr	r3, [pc, #448]	; (801fd28 <_scanf_i+0x1dc>)
 801fb68:	69a1      	ldr	r1, [r4, #24]
 801fb6a:	4a70      	ldr	r2, [pc, #448]	; (801fd2c <_scanf_i+0x1e0>)
 801fb6c:	2903      	cmp	r1, #3
 801fb6e:	bf18      	it	ne
 801fb70:	461a      	movne	r2, r3
 801fb72:	68a3      	ldr	r3, [r4, #8]
 801fb74:	9201      	str	r2, [sp, #4]
 801fb76:	1e5a      	subs	r2, r3, #1
 801fb78:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801fb7c:	bf88      	it	hi
 801fb7e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801fb82:	4627      	mov	r7, r4
 801fb84:	bf82      	ittt	hi
 801fb86:	eb03 0905 	addhi.w	r9, r3, r5
 801fb8a:	f240 135d 	movwhi	r3, #349	; 0x15d
 801fb8e:	60a3      	strhi	r3, [r4, #8]
 801fb90:	f857 3b1c 	ldr.w	r3, [r7], #28
 801fb94:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801fb98:	bf98      	it	ls
 801fb9a:	f04f 0900 	movls.w	r9, #0
 801fb9e:	6023      	str	r3, [r4, #0]
 801fba0:	463d      	mov	r5, r7
 801fba2:	f04f 0b00 	mov.w	fp, #0
 801fba6:	6831      	ldr	r1, [r6, #0]
 801fba8:	ab03      	add	r3, sp, #12
 801fbaa:	7809      	ldrb	r1, [r1, #0]
 801fbac:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801fbb0:	2202      	movs	r2, #2
 801fbb2:	f7e0 fb35 	bl	8000220 <memchr>
 801fbb6:	b328      	cbz	r0, 801fc04 <_scanf_i+0xb8>
 801fbb8:	f1bb 0f01 	cmp.w	fp, #1
 801fbbc:	d159      	bne.n	801fc72 <_scanf_i+0x126>
 801fbbe:	6862      	ldr	r2, [r4, #4]
 801fbc0:	b92a      	cbnz	r2, 801fbce <_scanf_i+0x82>
 801fbc2:	6822      	ldr	r2, [r4, #0]
 801fbc4:	2308      	movs	r3, #8
 801fbc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801fbca:	6063      	str	r3, [r4, #4]
 801fbcc:	6022      	str	r2, [r4, #0]
 801fbce:	6822      	ldr	r2, [r4, #0]
 801fbd0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801fbd4:	6022      	str	r2, [r4, #0]
 801fbd6:	68a2      	ldr	r2, [r4, #8]
 801fbd8:	1e51      	subs	r1, r2, #1
 801fbda:	60a1      	str	r1, [r4, #8]
 801fbdc:	b192      	cbz	r2, 801fc04 <_scanf_i+0xb8>
 801fbde:	6832      	ldr	r2, [r6, #0]
 801fbe0:	1c51      	adds	r1, r2, #1
 801fbe2:	6031      	str	r1, [r6, #0]
 801fbe4:	7812      	ldrb	r2, [r2, #0]
 801fbe6:	f805 2b01 	strb.w	r2, [r5], #1
 801fbea:	6872      	ldr	r2, [r6, #4]
 801fbec:	3a01      	subs	r2, #1
 801fbee:	2a00      	cmp	r2, #0
 801fbf0:	6072      	str	r2, [r6, #4]
 801fbf2:	dc07      	bgt.n	801fc04 <_scanf_i+0xb8>
 801fbf4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801fbf8:	4631      	mov	r1, r6
 801fbfa:	4650      	mov	r0, sl
 801fbfc:	4790      	blx	r2
 801fbfe:	2800      	cmp	r0, #0
 801fc00:	f040 8085 	bne.w	801fd0e <_scanf_i+0x1c2>
 801fc04:	f10b 0b01 	add.w	fp, fp, #1
 801fc08:	f1bb 0f03 	cmp.w	fp, #3
 801fc0c:	d1cb      	bne.n	801fba6 <_scanf_i+0x5a>
 801fc0e:	6863      	ldr	r3, [r4, #4]
 801fc10:	b90b      	cbnz	r3, 801fc16 <_scanf_i+0xca>
 801fc12:	230a      	movs	r3, #10
 801fc14:	6063      	str	r3, [r4, #4]
 801fc16:	6863      	ldr	r3, [r4, #4]
 801fc18:	4945      	ldr	r1, [pc, #276]	; (801fd30 <_scanf_i+0x1e4>)
 801fc1a:	6960      	ldr	r0, [r4, #20]
 801fc1c:	1ac9      	subs	r1, r1, r3
 801fc1e:	f000 f89b 	bl	801fd58 <__sccl>
 801fc22:	f04f 0b00 	mov.w	fp, #0
 801fc26:	68a3      	ldr	r3, [r4, #8]
 801fc28:	6822      	ldr	r2, [r4, #0]
 801fc2a:	2b00      	cmp	r3, #0
 801fc2c:	d03d      	beq.n	801fcaa <_scanf_i+0x15e>
 801fc2e:	6831      	ldr	r1, [r6, #0]
 801fc30:	6960      	ldr	r0, [r4, #20]
 801fc32:	f891 c000 	ldrb.w	ip, [r1]
 801fc36:	f810 000c 	ldrb.w	r0, [r0, ip]
 801fc3a:	2800      	cmp	r0, #0
 801fc3c:	d035      	beq.n	801fcaa <_scanf_i+0x15e>
 801fc3e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801fc42:	d124      	bne.n	801fc8e <_scanf_i+0x142>
 801fc44:	0510      	lsls	r0, r2, #20
 801fc46:	d522      	bpl.n	801fc8e <_scanf_i+0x142>
 801fc48:	f10b 0b01 	add.w	fp, fp, #1
 801fc4c:	f1b9 0f00 	cmp.w	r9, #0
 801fc50:	d003      	beq.n	801fc5a <_scanf_i+0x10e>
 801fc52:	3301      	adds	r3, #1
 801fc54:	f109 39ff 	add.w	r9, r9, #4294967295
 801fc58:	60a3      	str	r3, [r4, #8]
 801fc5a:	6873      	ldr	r3, [r6, #4]
 801fc5c:	3b01      	subs	r3, #1
 801fc5e:	2b00      	cmp	r3, #0
 801fc60:	6073      	str	r3, [r6, #4]
 801fc62:	dd1b      	ble.n	801fc9c <_scanf_i+0x150>
 801fc64:	6833      	ldr	r3, [r6, #0]
 801fc66:	3301      	adds	r3, #1
 801fc68:	6033      	str	r3, [r6, #0]
 801fc6a:	68a3      	ldr	r3, [r4, #8]
 801fc6c:	3b01      	subs	r3, #1
 801fc6e:	60a3      	str	r3, [r4, #8]
 801fc70:	e7d9      	b.n	801fc26 <_scanf_i+0xda>
 801fc72:	f1bb 0f02 	cmp.w	fp, #2
 801fc76:	d1ae      	bne.n	801fbd6 <_scanf_i+0x8a>
 801fc78:	6822      	ldr	r2, [r4, #0]
 801fc7a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801fc7e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801fc82:	d1bf      	bne.n	801fc04 <_scanf_i+0xb8>
 801fc84:	2310      	movs	r3, #16
 801fc86:	6063      	str	r3, [r4, #4]
 801fc88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801fc8c:	e7a2      	b.n	801fbd4 <_scanf_i+0x88>
 801fc8e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801fc92:	6022      	str	r2, [r4, #0]
 801fc94:	780b      	ldrb	r3, [r1, #0]
 801fc96:	f805 3b01 	strb.w	r3, [r5], #1
 801fc9a:	e7de      	b.n	801fc5a <_scanf_i+0x10e>
 801fc9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801fca0:	4631      	mov	r1, r6
 801fca2:	4650      	mov	r0, sl
 801fca4:	4798      	blx	r3
 801fca6:	2800      	cmp	r0, #0
 801fca8:	d0df      	beq.n	801fc6a <_scanf_i+0x11e>
 801fcaa:	6823      	ldr	r3, [r4, #0]
 801fcac:	05d9      	lsls	r1, r3, #23
 801fcae:	d50d      	bpl.n	801fccc <_scanf_i+0x180>
 801fcb0:	42bd      	cmp	r5, r7
 801fcb2:	d909      	bls.n	801fcc8 <_scanf_i+0x17c>
 801fcb4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801fcb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801fcbc:	4632      	mov	r2, r6
 801fcbe:	4650      	mov	r0, sl
 801fcc0:	4798      	blx	r3
 801fcc2:	f105 39ff 	add.w	r9, r5, #4294967295
 801fcc6:	464d      	mov	r5, r9
 801fcc8:	42bd      	cmp	r5, r7
 801fcca:	d028      	beq.n	801fd1e <_scanf_i+0x1d2>
 801fccc:	6822      	ldr	r2, [r4, #0]
 801fcce:	f012 0210 	ands.w	r2, r2, #16
 801fcd2:	d113      	bne.n	801fcfc <_scanf_i+0x1b0>
 801fcd4:	702a      	strb	r2, [r5, #0]
 801fcd6:	6863      	ldr	r3, [r4, #4]
 801fcd8:	9e01      	ldr	r6, [sp, #4]
 801fcda:	4639      	mov	r1, r7
 801fcdc:	4650      	mov	r0, sl
 801fcde:	47b0      	blx	r6
 801fce0:	f8d8 3000 	ldr.w	r3, [r8]
 801fce4:	6821      	ldr	r1, [r4, #0]
 801fce6:	1d1a      	adds	r2, r3, #4
 801fce8:	f8c8 2000 	str.w	r2, [r8]
 801fcec:	f011 0f20 	tst.w	r1, #32
 801fcf0:	681b      	ldr	r3, [r3, #0]
 801fcf2:	d00f      	beq.n	801fd14 <_scanf_i+0x1c8>
 801fcf4:	6018      	str	r0, [r3, #0]
 801fcf6:	68e3      	ldr	r3, [r4, #12]
 801fcf8:	3301      	adds	r3, #1
 801fcfa:	60e3      	str	r3, [r4, #12]
 801fcfc:	1bed      	subs	r5, r5, r7
 801fcfe:	44ab      	add	fp, r5
 801fd00:	6925      	ldr	r5, [r4, #16]
 801fd02:	445d      	add	r5, fp
 801fd04:	6125      	str	r5, [r4, #16]
 801fd06:	2000      	movs	r0, #0
 801fd08:	b007      	add	sp, #28
 801fd0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd0e:	f04f 0b00 	mov.w	fp, #0
 801fd12:	e7ca      	b.n	801fcaa <_scanf_i+0x15e>
 801fd14:	07ca      	lsls	r2, r1, #31
 801fd16:	bf4c      	ite	mi
 801fd18:	8018      	strhmi	r0, [r3, #0]
 801fd1a:	6018      	strpl	r0, [r3, #0]
 801fd1c:	e7eb      	b.n	801fcf6 <_scanf_i+0x1aa>
 801fd1e:	2001      	movs	r0, #1
 801fd20:	e7f2      	b.n	801fd08 <_scanf_i+0x1bc>
 801fd22:	bf00      	nop
 801fd24:	08021e04 	.word	0x08021e04
 801fd28:	0801c7f9 	.word	0x0801c7f9
 801fd2c:	0801c6e9 	.word	0x0801c6e9
 801fd30:	08022666 	.word	0x08022666

0801fd34 <_read_r>:
 801fd34:	b538      	push	{r3, r4, r5, lr}
 801fd36:	4d07      	ldr	r5, [pc, #28]	; (801fd54 <_read_r+0x20>)
 801fd38:	4604      	mov	r4, r0
 801fd3a:	4608      	mov	r0, r1
 801fd3c:	4611      	mov	r1, r2
 801fd3e:	2200      	movs	r2, #0
 801fd40:	602a      	str	r2, [r5, #0]
 801fd42:	461a      	mov	r2, r3
 801fd44:	f000 f8f0 	bl	801ff28 <_read>
 801fd48:	1c43      	adds	r3, r0, #1
 801fd4a:	d102      	bne.n	801fd52 <_read_r+0x1e>
 801fd4c:	682b      	ldr	r3, [r5, #0]
 801fd4e:	b103      	cbz	r3, 801fd52 <_read_r+0x1e>
 801fd50:	6023      	str	r3, [r4, #0]
 801fd52:	bd38      	pop	{r3, r4, r5, pc}
 801fd54:	20008d58 	.word	0x20008d58

0801fd58 <__sccl>:
 801fd58:	b570      	push	{r4, r5, r6, lr}
 801fd5a:	780b      	ldrb	r3, [r1, #0]
 801fd5c:	4604      	mov	r4, r0
 801fd5e:	2b5e      	cmp	r3, #94	; 0x5e
 801fd60:	bf0b      	itete	eq
 801fd62:	784b      	ldrbeq	r3, [r1, #1]
 801fd64:	1c48      	addne	r0, r1, #1
 801fd66:	1c88      	addeq	r0, r1, #2
 801fd68:	2200      	movne	r2, #0
 801fd6a:	bf08      	it	eq
 801fd6c:	2201      	moveq	r2, #1
 801fd6e:	1e61      	subs	r1, r4, #1
 801fd70:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801fd74:	f801 2f01 	strb.w	r2, [r1, #1]!
 801fd78:	42a9      	cmp	r1, r5
 801fd7a:	d1fb      	bne.n	801fd74 <__sccl+0x1c>
 801fd7c:	b90b      	cbnz	r3, 801fd82 <__sccl+0x2a>
 801fd7e:	3801      	subs	r0, #1
 801fd80:	bd70      	pop	{r4, r5, r6, pc}
 801fd82:	f082 0101 	eor.w	r1, r2, #1
 801fd86:	54e1      	strb	r1, [r4, r3]
 801fd88:	1c42      	adds	r2, r0, #1
 801fd8a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801fd8e:	2d2d      	cmp	r5, #45	; 0x2d
 801fd90:	f102 36ff 	add.w	r6, r2, #4294967295
 801fd94:	4610      	mov	r0, r2
 801fd96:	d006      	beq.n	801fda6 <__sccl+0x4e>
 801fd98:	2d5d      	cmp	r5, #93	; 0x5d
 801fd9a:	d0f1      	beq.n	801fd80 <__sccl+0x28>
 801fd9c:	b90d      	cbnz	r5, 801fda2 <__sccl+0x4a>
 801fd9e:	4630      	mov	r0, r6
 801fda0:	e7ee      	b.n	801fd80 <__sccl+0x28>
 801fda2:	462b      	mov	r3, r5
 801fda4:	e7ef      	b.n	801fd86 <__sccl+0x2e>
 801fda6:	7816      	ldrb	r6, [r2, #0]
 801fda8:	2e5d      	cmp	r6, #93	; 0x5d
 801fdaa:	d0fa      	beq.n	801fda2 <__sccl+0x4a>
 801fdac:	42b3      	cmp	r3, r6
 801fdae:	dcf8      	bgt.n	801fda2 <__sccl+0x4a>
 801fdb0:	4618      	mov	r0, r3
 801fdb2:	3001      	adds	r0, #1
 801fdb4:	4286      	cmp	r6, r0
 801fdb6:	5421      	strb	r1, [r4, r0]
 801fdb8:	dcfb      	bgt.n	801fdb2 <__sccl+0x5a>
 801fdba:	43d8      	mvns	r0, r3
 801fdbc:	4430      	add	r0, r6
 801fdbe:	1c5d      	adds	r5, r3, #1
 801fdc0:	42b3      	cmp	r3, r6
 801fdc2:	bfa8      	it	ge
 801fdc4:	2000      	movge	r0, #0
 801fdc6:	182b      	adds	r3, r5, r0
 801fdc8:	3202      	adds	r2, #2
 801fdca:	e7de      	b.n	801fd8a <__sccl+0x32>

0801fdcc <__submore>:
 801fdcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fdd0:	460c      	mov	r4, r1
 801fdd2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801fdd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fdd8:	4299      	cmp	r1, r3
 801fdda:	d11d      	bne.n	801fe18 <__submore+0x4c>
 801fddc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801fde0:	f7fa fc96 	bl	801a710 <_malloc_r>
 801fde4:	b918      	cbnz	r0, 801fdee <__submore+0x22>
 801fde6:	f04f 30ff 	mov.w	r0, #4294967295
 801fdea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fdee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801fdf2:	63a3      	str	r3, [r4, #56]	; 0x38
 801fdf4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801fdf8:	6360      	str	r0, [r4, #52]	; 0x34
 801fdfa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801fdfe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801fe02:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801fe06:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801fe0a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801fe0e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801fe12:	6020      	str	r0, [r4, #0]
 801fe14:	2000      	movs	r0, #0
 801fe16:	e7e8      	b.n	801fdea <__submore+0x1e>
 801fe18:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801fe1a:	0077      	lsls	r7, r6, #1
 801fe1c:	463a      	mov	r2, r7
 801fe1e:	f7ff f98f 	bl	801f140 <_realloc_r>
 801fe22:	4605      	mov	r5, r0
 801fe24:	2800      	cmp	r0, #0
 801fe26:	d0de      	beq.n	801fde6 <__submore+0x1a>
 801fe28:	eb00 0806 	add.w	r8, r0, r6
 801fe2c:	4601      	mov	r1, r0
 801fe2e:	4632      	mov	r2, r6
 801fe30:	4640      	mov	r0, r8
 801fe32:	f7fa f96f 	bl	801a114 <memcpy>
 801fe36:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801fe3a:	f8c4 8000 	str.w	r8, [r4]
 801fe3e:	e7e9      	b.n	801fe14 <__submore+0x48>

0801fe40 <__ascii_wctomb>:
 801fe40:	b149      	cbz	r1, 801fe56 <__ascii_wctomb+0x16>
 801fe42:	2aff      	cmp	r2, #255	; 0xff
 801fe44:	bf85      	ittet	hi
 801fe46:	238a      	movhi	r3, #138	; 0x8a
 801fe48:	6003      	strhi	r3, [r0, #0]
 801fe4a:	700a      	strbls	r2, [r1, #0]
 801fe4c:	f04f 30ff 	movhi.w	r0, #4294967295
 801fe50:	bf98      	it	ls
 801fe52:	2001      	movls	r0, #1
 801fe54:	4770      	bx	lr
 801fe56:	4608      	mov	r0, r1
 801fe58:	4770      	bx	lr
	...

0801fe5c <__env_lock>:
 801fe5c:	4801      	ldr	r0, [pc, #4]	; (801fe64 <__env_lock+0x8>)
 801fe5e:	f7fa b945 	b.w	801a0ec <__retarget_lock_acquire_recursive>
 801fe62:	bf00      	nop
 801fe64:	20008d4e 	.word	0x20008d4e

0801fe68 <__env_unlock>:
 801fe68:	4801      	ldr	r0, [pc, #4]	; (801fe70 <__env_unlock+0x8>)
 801fe6a:	f7fa b941 	b.w	801a0f0 <__retarget_lock_release_recursive>
 801fe6e:	bf00      	nop
 801fe70:	20008d4e 	.word	0x20008d4e

0801fe74 <_fstat_r>:
 801fe74:	b538      	push	{r3, r4, r5, lr}
 801fe76:	4d07      	ldr	r5, [pc, #28]	; (801fe94 <_fstat_r+0x20>)
 801fe78:	2300      	movs	r3, #0
 801fe7a:	4604      	mov	r4, r0
 801fe7c:	4608      	mov	r0, r1
 801fe7e:	4611      	mov	r1, r2
 801fe80:	602b      	str	r3, [r5, #0]
 801fe82:	f000 f829 	bl	801fed8 <_fstat>
 801fe86:	1c43      	adds	r3, r0, #1
 801fe88:	d102      	bne.n	801fe90 <_fstat_r+0x1c>
 801fe8a:	682b      	ldr	r3, [r5, #0]
 801fe8c:	b103      	cbz	r3, 801fe90 <_fstat_r+0x1c>
 801fe8e:	6023      	str	r3, [r4, #0]
 801fe90:	bd38      	pop	{r3, r4, r5, pc}
 801fe92:	bf00      	nop
 801fe94:	20008d58 	.word	0x20008d58

0801fe98 <_isatty_r>:
 801fe98:	b538      	push	{r3, r4, r5, lr}
 801fe9a:	4d06      	ldr	r5, [pc, #24]	; (801feb4 <_isatty_r+0x1c>)
 801fe9c:	2300      	movs	r3, #0
 801fe9e:	4604      	mov	r4, r0
 801fea0:	4608      	mov	r0, r1
 801fea2:	602b      	str	r3, [r5, #0]
 801fea4:	f000 f828 	bl	801fef8 <_isatty>
 801fea8:	1c43      	adds	r3, r0, #1
 801feaa:	d102      	bne.n	801feb2 <_isatty_r+0x1a>
 801feac:	682b      	ldr	r3, [r5, #0]
 801feae:	b103      	cbz	r3, 801feb2 <_isatty_r+0x1a>
 801feb0:	6023      	str	r3, [r4, #0]
 801feb2:	bd38      	pop	{r3, r4, r5, pc}
 801feb4:	20008d58 	.word	0x20008d58

0801feb8 <_malloc_usable_size_r>:
 801feb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801febc:	1f18      	subs	r0, r3, #4
 801febe:	2b00      	cmp	r3, #0
 801fec0:	bfbc      	itt	lt
 801fec2:	580b      	ldrlt	r3, [r1, r0]
 801fec4:	18c0      	addlt	r0, r0, r3
 801fec6:	4770      	bx	lr

0801fec8 <_close>:
 801fec8:	4b02      	ldr	r3, [pc, #8]	; (801fed4 <_close+0xc>)
 801feca:	2258      	movs	r2, #88	; 0x58
 801fecc:	601a      	str	r2, [r3, #0]
 801fece:	f04f 30ff 	mov.w	r0, #4294967295
 801fed2:	4770      	bx	lr
 801fed4:	20008d58 	.word	0x20008d58

0801fed8 <_fstat>:
 801fed8:	4b02      	ldr	r3, [pc, #8]	; (801fee4 <_fstat+0xc>)
 801feda:	2258      	movs	r2, #88	; 0x58
 801fedc:	601a      	str	r2, [r3, #0]
 801fede:	f04f 30ff 	mov.w	r0, #4294967295
 801fee2:	4770      	bx	lr
 801fee4:	20008d58 	.word	0x20008d58

0801fee8 <_getpid>:
 801fee8:	4b02      	ldr	r3, [pc, #8]	; (801fef4 <_getpid+0xc>)
 801feea:	2258      	movs	r2, #88	; 0x58
 801feec:	601a      	str	r2, [r3, #0]
 801feee:	f04f 30ff 	mov.w	r0, #4294967295
 801fef2:	4770      	bx	lr
 801fef4:	20008d58 	.word	0x20008d58

0801fef8 <_isatty>:
 801fef8:	4b02      	ldr	r3, [pc, #8]	; (801ff04 <_isatty+0xc>)
 801fefa:	2258      	movs	r2, #88	; 0x58
 801fefc:	601a      	str	r2, [r3, #0]
 801fefe:	2000      	movs	r0, #0
 801ff00:	4770      	bx	lr
 801ff02:	bf00      	nop
 801ff04:	20008d58 	.word	0x20008d58

0801ff08 <_kill>:
 801ff08:	4b02      	ldr	r3, [pc, #8]	; (801ff14 <_kill+0xc>)
 801ff0a:	2258      	movs	r2, #88	; 0x58
 801ff0c:	601a      	str	r2, [r3, #0]
 801ff0e:	f04f 30ff 	mov.w	r0, #4294967295
 801ff12:	4770      	bx	lr
 801ff14:	20008d58 	.word	0x20008d58

0801ff18 <_lseek>:
 801ff18:	4b02      	ldr	r3, [pc, #8]	; (801ff24 <_lseek+0xc>)
 801ff1a:	2258      	movs	r2, #88	; 0x58
 801ff1c:	601a      	str	r2, [r3, #0]
 801ff1e:	f04f 30ff 	mov.w	r0, #4294967295
 801ff22:	4770      	bx	lr
 801ff24:	20008d58 	.word	0x20008d58

0801ff28 <_read>:
 801ff28:	4b02      	ldr	r3, [pc, #8]	; (801ff34 <_read+0xc>)
 801ff2a:	2258      	movs	r2, #88	; 0x58
 801ff2c:	601a      	str	r2, [r3, #0]
 801ff2e:	f04f 30ff 	mov.w	r0, #4294967295
 801ff32:	4770      	bx	lr
 801ff34:	20008d58 	.word	0x20008d58

0801ff38 <_sbrk>:
 801ff38:	4b04      	ldr	r3, [pc, #16]	; (801ff4c <_sbrk+0x14>)
 801ff3a:	6819      	ldr	r1, [r3, #0]
 801ff3c:	4602      	mov	r2, r0
 801ff3e:	b909      	cbnz	r1, 801ff44 <_sbrk+0xc>
 801ff40:	4903      	ldr	r1, [pc, #12]	; (801ff50 <_sbrk+0x18>)
 801ff42:	6019      	str	r1, [r3, #0]
 801ff44:	6818      	ldr	r0, [r3, #0]
 801ff46:	4402      	add	r2, r0
 801ff48:	601a      	str	r2, [r3, #0]
 801ff4a:	4770      	bx	lr
 801ff4c:	20005ee8 	.word	0x20005ee8
 801ff50:	20008d60 	.word	0x20008d60

0801ff54 <_write>:
 801ff54:	4b02      	ldr	r3, [pc, #8]	; (801ff60 <_write+0xc>)
 801ff56:	2258      	movs	r2, #88	; 0x58
 801ff58:	601a      	str	r2, [r3, #0]
 801ff5a:	f04f 30ff 	mov.w	r0, #4294967295
 801ff5e:	4770      	bx	lr
 801ff60:	20008d58 	.word	0x20008d58

0801ff64 <_exit>:
 801ff64:	e7fe      	b.n	801ff64 <_exit>
	...

0801ff68 <_init>:
 801ff68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ff6a:	bf00      	nop
 801ff6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ff6e:	bc08      	pop	{r3}
 801ff70:	469e      	mov	lr, r3
 801ff72:	4770      	bx	lr

0801ff74 <_fini>:
 801ff74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ff76:	bf00      	nop
 801ff78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ff7a:	bc08      	pop	{r3}
 801ff7c:	469e      	mov	lr, r3
 801ff7e:	4770      	bx	lr
