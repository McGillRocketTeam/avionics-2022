
FC_v2.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018920  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002508  08018ad0  08018ad0  00028ad0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801afd8  0801afd8  000302e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801afd8  0801afd8  0002afd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801afe0  0801afe0  000302e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801afe0  0801afe0  0002afe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801afe8  0801afe8  0002afe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e4  20000000  0801afec  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302e4  2**0
                  CONTENTS
 10 .bss          0000621c  200002e4  200002e4  000302e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20006500  20006500  000302e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00068b6b  00000000  00000000  00030314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000097d5  00000000  00000000  00098e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003680  00000000  00000000  000a2658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000033b8  00000000  00000000  000a5cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003682c  00000000  00000000  000a9090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003fa72  00000000  00000000  000df8bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00110d91  00000000  00000000  0011f32e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002300bf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000103a0  00000000  00000000  00230114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  002404b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  00240580  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002e4 	.word	0x200002e4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08018ab8 	.word	0x08018ab8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002e8 	.word	0x200002e8
 80001ec:	08018ab8 	.word	0x08018ab8

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9ef 	b.w	80010c8 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a4 	b.w	80010c8 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	468c      	mov	ip, r1
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8083 	bne.w	8000f1a <__udivmoddi4+0x116>
 8000e14:	428a      	cmp	r2, r1
 8000e16:	4617      	mov	r7, r2
 8000e18:	d947      	bls.n	8000eaa <__udivmoddi4+0xa6>
 8000e1a:	fab2 f282 	clz	r2, r2
 8000e1e:	b142      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e20:	f1c2 0020 	rsb	r0, r2, #32
 8000e24:	fa24 f000 	lsr.w	r0, r4, r0
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	4097      	lsls	r7, r2
 8000e2c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e30:	4094      	lsls	r4, r2
 8000e32:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e36:	0c23      	lsrs	r3, r4, #16
 8000e38:	fbbc f6f8 	udiv	r6, ip, r8
 8000e3c:	fa1f fe87 	uxth.w	lr, r7
 8000e40:	fb08 c116 	mls	r1, r8, r6, ip
 8000e44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e48:	fb06 f10e 	mul.w	r1, r6, lr
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x60>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e56:	f080 8119 	bcs.w	800108c <__udivmoddi4+0x288>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 8116 	bls.w	800108c <__udivmoddi4+0x288>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e78:	45a6      	cmp	lr, r4
 8000e7a:	d909      	bls.n	8000e90 <__udivmoddi4+0x8c>
 8000e7c:	193c      	adds	r4, r7, r4
 8000e7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e82:	f080 8105 	bcs.w	8001090 <__udivmoddi4+0x28c>
 8000e86:	45a6      	cmp	lr, r4
 8000e88:	f240 8102 	bls.w	8001090 <__udivmoddi4+0x28c>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	443c      	add	r4, r7
 8000e90:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e94:	eba4 040e 	sub.w	r4, r4, lr
 8000e98:	2600      	movs	r6, #0
 8000e9a:	b11d      	cbz	r5, 8000ea4 <__udivmoddi4+0xa0>
 8000e9c:	40d4      	lsrs	r4, r2
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	b902      	cbnz	r2, 8000eae <__udivmoddi4+0xaa>
 8000eac:	deff      	udf	#255	; 0xff
 8000eae:	fab2 f282 	clz	r2, r2
 8000eb2:	2a00      	cmp	r2, #0
 8000eb4:	d150      	bne.n	8000f58 <__udivmoddi4+0x154>
 8000eb6:	1bcb      	subs	r3, r1, r7
 8000eb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ebc:	fa1f f887 	uxth.w	r8, r7
 8000ec0:	2601      	movs	r6, #1
 8000ec2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ec6:	0c21      	lsrs	r1, r4, #16
 8000ec8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0xe4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0xe2>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	f200 80e9 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000ee6:	4684      	mov	ip, r0
 8000ee8:	1ac9      	subs	r1, r1, r3
 8000eea:	b2a3      	uxth	r3, r4
 8000eec:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ef8:	fb08 f800 	mul.w	r8, r8, r0
 8000efc:	45a0      	cmp	r8, r4
 8000efe:	d907      	bls.n	8000f10 <__udivmoddi4+0x10c>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f06:	d202      	bcs.n	8000f0e <__udivmoddi4+0x10a>
 8000f08:	45a0      	cmp	r8, r4
 8000f0a:	f200 80d9 	bhi.w	80010c0 <__udivmoddi4+0x2bc>
 8000f0e:	4618      	mov	r0, r3
 8000f10:	eba4 0408 	sub.w	r4, r4, r8
 8000f14:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f18:	e7bf      	b.n	8000e9a <__udivmoddi4+0x96>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d909      	bls.n	8000f32 <__udivmoddi4+0x12e>
 8000f1e:	2d00      	cmp	r5, #0
 8000f20:	f000 80b1 	beq.w	8001086 <__udivmoddi4+0x282>
 8000f24:	2600      	movs	r6, #0
 8000f26:	e9c5 0100 	strd	r0, r1, [r5]
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	4631      	mov	r1, r6
 8000f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f32:	fab3 f683 	clz	r6, r3
 8000f36:	2e00      	cmp	r6, #0
 8000f38:	d14a      	bne.n	8000fd0 <__udivmoddi4+0x1cc>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d302      	bcc.n	8000f44 <__udivmoddi4+0x140>
 8000f3e:	4282      	cmp	r2, r0
 8000f40:	f200 80b8 	bhi.w	80010b4 <__udivmoddi4+0x2b0>
 8000f44:	1a84      	subs	r4, r0, r2
 8000f46:	eb61 0103 	sbc.w	r1, r1, r3
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	468c      	mov	ip, r1
 8000f4e:	2d00      	cmp	r5, #0
 8000f50:	d0a8      	beq.n	8000ea4 <__udivmoddi4+0xa0>
 8000f52:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f56:	e7a5      	b.n	8000ea4 <__udivmoddi4+0xa0>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f60:	4097      	lsls	r7, r2
 8000f62:	fa01 f002 	lsl.w	r0, r1, r2
 8000f66:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6a:	40d9      	lsrs	r1, r3
 8000f6c:	4330      	orrs	r0, r6
 8000f6e:	0c03      	lsrs	r3, r0, #16
 8000f70:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f74:	fa1f f887 	uxth.w	r8, r7
 8000f78:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f80:	fb06 f108 	mul.w	r1, r6, r8
 8000f84:	4299      	cmp	r1, r3
 8000f86:	fa04 f402 	lsl.w	r4, r4, r2
 8000f8a:	d909      	bls.n	8000fa0 <__udivmoddi4+0x19c>
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f92:	f080 808d 	bcs.w	80010b0 <__udivmoddi4+0x2ac>
 8000f96:	4299      	cmp	r1, r3
 8000f98:	f240 808a 	bls.w	80010b0 <__udivmoddi4+0x2ac>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	443b      	add	r3, r7
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b281      	uxth	r1, r0
 8000fa4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fa8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb0:	fb00 f308 	mul.w	r3, r0, r8
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	d907      	bls.n	8000fc8 <__udivmoddi4+0x1c4>
 8000fb8:	1879      	adds	r1, r7, r1
 8000fba:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fbe:	d273      	bcs.n	80010a8 <__udivmoddi4+0x2a4>
 8000fc0:	428b      	cmp	r3, r1
 8000fc2:	d971      	bls.n	80010a8 <__udivmoddi4+0x2a4>
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	4439      	add	r1, r7
 8000fc8:	1acb      	subs	r3, r1, r3
 8000fca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fce:	e778      	b.n	8000ec2 <__udivmoddi4+0xbe>
 8000fd0:	f1c6 0c20 	rsb	ip, r6, #32
 8000fd4:	fa03 f406 	lsl.w	r4, r3, r6
 8000fd8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fdc:	431c      	orrs	r4, r3
 8000fde:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fe2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fe6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fea:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fee:	431f      	orrs	r7, r3
 8000ff0:	0c3b      	lsrs	r3, r7, #16
 8000ff2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff6:	fa1f f884 	uxth.w	r8, r4
 8000ffa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001002:	fb09 fa08 	mul.w	sl, r9, r8
 8001006:	458a      	cmp	sl, r1
 8001008:	fa02 f206 	lsl.w	r2, r2, r6
 800100c:	fa00 f306 	lsl.w	r3, r0, r6
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x220>
 8001012:	1861      	adds	r1, r4, r1
 8001014:	f109 30ff 	add.w	r0, r9, #4294967295
 8001018:	d248      	bcs.n	80010ac <__udivmoddi4+0x2a8>
 800101a:	458a      	cmp	sl, r1
 800101c:	d946      	bls.n	80010ac <__udivmoddi4+0x2a8>
 800101e:	f1a9 0902 	sub.w	r9, r9, #2
 8001022:	4421      	add	r1, r4
 8001024:	eba1 010a 	sub.w	r1, r1, sl
 8001028:	b2bf      	uxth	r7, r7
 800102a:	fbb1 f0fe 	udiv	r0, r1, lr
 800102e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001032:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001036:	fb00 f808 	mul.w	r8, r0, r8
 800103a:	45b8      	cmp	r8, r7
 800103c:	d907      	bls.n	800104e <__udivmoddi4+0x24a>
 800103e:	19e7      	adds	r7, r4, r7
 8001040:	f100 31ff 	add.w	r1, r0, #4294967295
 8001044:	d22e      	bcs.n	80010a4 <__udivmoddi4+0x2a0>
 8001046:	45b8      	cmp	r8, r7
 8001048:	d92c      	bls.n	80010a4 <__udivmoddi4+0x2a0>
 800104a:	3802      	subs	r0, #2
 800104c:	4427      	add	r7, r4
 800104e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001052:	eba7 0708 	sub.w	r7, r7, r8
 8001056:	fba0 8902 	umull	r8, r9, r0, r2
 800105a:	454f      	cmp	r7, r9
 800105c:	46c6      	mov	lr, r8
 800105e:	4649      	mov	r1, r9
 8001060:	d31a      	bcc.n	8001098 <__udivmoddi4+0x294>
 8001062:	d017      	beq.n	8001094 <__udivmoddi4+0x290>
 8001064:	b15d      	cbz	r5, 800107e <__udivmoddi4+0x27a>
 8001066:	ebb3 020e 	subs.w	r2, r3, lr
 800106a:	eb67 0701 	sbc.w	r7, r7, r1
 800106e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001072:	40f2      	lsrs	r2, r6
 8001074:	ea4c 0202 	orr.w	r2, ip, r2
 8001078:	40f7      	lsrs	r7, r6
 800107a:	e9c5 2700 	strd	r2, r7, [r5]
 800107e:	2600      	movs	r6, #0
 8001080:	4631      	mov	r1, r6
 8001082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e70b      	b.n	8000ea4 <__udivmoddi4+0xa0>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e9      	b.n	8000e64 <__udivmoddi4+0x60>
 8001090:	4618      	mov	r0, r3
 8001092:	e6fd      	b.n	8000e90 <__udivmoddi4+0x8c>
 8001094:	4543      	cmp	r3, r8
 8001096:	d2e5      	bcs.n	8001064 <__udivmoddi4+0x260>
 8001098:	ebb8 0e02 	subs.w	lr, r8, r2
 800109c:	eb69 0104 	sbc.w	r1, r9, r4
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7df      	b.n	8001064 <__udivmoddi4+0x260>
 80010a4:	4608      	mov	r0, r1
 80010a6:	e7d2      	b.n	800104e <__udivmoddi4+0x24a>
 80010a8:	4660      	mov	r0, ip
 80010aa:	e78d      	b.n	8000fc8 <__udivmoddi4+0x1c4>
 80010ac:	4681      	mov	r9, r0
 80010ae:	e7b9      	b.n	8001024 <__udivmoddi4+0x220>
 80010b0:	4666      	mov	r6, ip
 80010b2:	e775      	b.n	8000fa0 <__udivmoddi4+0x19c>
 80010b4:	4630      	mov	r0, r6
 80010b6:	e74a      	b.n	8000f4e <__udivmoddi4+0x14a>
 80010b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80010bc:	4439      	add	r1, r7
 80010be:	e713      	b.n	8000ee8 <__udivmoddi4+0xe4>
 80010c0:	3802      	subs	r0, #2
 80010c2:	443c      	add	r4, r7
 80010c4:	e724      	b.n	8000f10 <__udivmoddi4+0x10c>
 80010c6:	bf00      	nop

080010c8 <__aeabi_idiv0>:
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <println>:

#include <MRT_helpers.h>
#include <MRT_setup.h>
#include <tim.h>

void println(char* s){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	#if PRINT
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff f895 	bl	8000204 <strlen>
 80010da:	4603      	mov	r3, r0
 80010dc:	b29a      	uxth	r2, r3
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4806      	ldr	r0, [pc, #24]	; (8001100 <println+0x34>)
 80010e6:	f00d ff58 	bl	800ef9a <HAL_UART_Transmit>
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	2202      	movs	r2, #2
 80010f0:	4904      	ldr	r1, [pc, #16]	; (8001104 <println+0x38>)
 80010f2:	4803      	ldr	r0, [pc, #12]	; (8001100 <println+0x34>)
 80010f4:	f00d ff51 	bl	800ef9a <HAL_UART_Transmit>
	#endif
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20005dac 	.word	0x20005dac
 8001104:	08018ad0 	.word	0x08018ad0

08001108 <print>:

void print(char* s){
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	#if PRINT
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff f877 	bl	8000204 <strlen>
 8001116:	4603      	mov	r3, r0
 8001118:	b29a      	uxth	r2, r3
 800111a:	f04f 33ff 	mov.w	r3, #4294967295
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	4803      	ldr	r0, [pc, #12]	; (8001130 <print+0x28>)
 8001122:	f00d ff3a 	bl	800ef9a <HAL_UART_Transmit>
	#endif
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20005dac 	.word	0x20005dac

08001134 <tone_freq>:
void no_print(char* s){
	//TODO Buffer function for Iridium
}

// buzz at particular frequency
void tone_freq(uint32_t duration, uint32_t repeats, uint32_t freq) {
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
		HAL_GPIO_WritePin(POWER_ON_EXT_LED_GPIO_Port, POWER_ON_EXT_LED_Pin, RESET);
		if (repeats > 1)
			HAL_Delay(duration);
	}
	#endif
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <buzz_success>:
void buzz_success(void) { tone_freq(BUZZ_SUCCESS_DURATION, BUZZ_SUCCESS_REPEATS, BUZZ_SUCCESS_FREQ); }
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
 8001150:	f240 4216 	movw	r2, #1046	; 0x416
 8001154:	2102      	movs	r1, #2
 8001156:	204b      	movs	r0, #75	; 0x4b
 8001158:	f7ff ffec 	bl	8001134 <tone_freq>
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <buzz_startup_success>:
void buzz_failure(void) { tone_freq(BUZZ_FAILURE_DURATION, BUZZ_FAILURE_REPEATS, BUZZ_FAILURE_FREQ); }
void buzz_startup_success(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8001166:	2300      	movs	r3, #0
 8001168:	71fb      	strb	r3, [r7, #7]
 800116a:	e008      	b.n	800117e <buzz_startup_success+0x1e>
		buzz_success();
 800116c:	f7ff ffee 	bl	800114c <buzz_success>
		HAL_Delay(1000);
 8001170:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001174:	f008 fd22 	bl	8009bbc <HAL_Delay>
	for (uint8_t i = 0; i < 3; i++) {
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	3301      	adds	r3, #1
 800117c:	71fb      	strb	r3, [r7, #7]
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	2b02      	cmp	r3, #2
 8001182:	d9f3      	bls.n	800116c <buzz_startup_success+0xc>
	}
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <MRT_Init>:


//**************************************************//
//PUBLIC FUNCTIONS

void MRT_Init(void){
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
	print((char*) "\r\n\r\n/********MRT Init********/\r\n");
 8001194:	4808      	ldr	r0, [pc, #32]	; (80011b8 <MRT_Init+0x28>)
 8001196:	f7ff ffb7 	bl	8001108 <print>
	print((char*) "IWDG Init...");
	MX_IWDG_Init();
	print((char*) "OK\r\n");
	#endif

	MRT_Reinitialize_Peripherals();
 800119a:	f000 f8f3 	bl	8001384 <MRT_Reinitialize_Peripherals>

	//Memory
	MRT_MEMORY_Init();
 800119e:	f002 fa79 	bl	8003694 <MRT_MEMORY_Init>
	MRT_reset_info();
 80011a2:	f000 f819 	bl	80011d8 <MRT_reset_info>

	//RTC
	HAL_IWDG_Refresh(&hiwdg);
	MRT_rtc_Init();
 80011a6:	f001 f927 	bl	80023f8 <MRT_rtc_Init>
		  checkForI2CDevices(huart8,hi2c1);
		  checkForI2CDevices(huart8,hi2c2);
		  checkForI2CDevices(huart8,hi2c3);
		#endif

		MRT_i2c_sensors_Init();
 80011aa:	f003 fb81 	bl	80048b0 <MRT_i2c_sensors_Init>
	#endif


	//Telemetry
	#if TELEMETRY_THREAD
		MRT_TELEMETRY_Init();
 80011ae:	f008 fca1 	bl	8009af4 <MRT_TELEMETRY_Init>
	#endif

	#if FORCED_EJECTION_STAGE
		   ejection_stage_flag = FORCED_STAGE;
	#endif
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	08018ad4 	.word	0x08018ad4

080011bc <MRT_Deinit>:




void MRT_Deinit(void){
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	print((char*) "\r\n\r\n/********MRT Deinit********/\r\n");
 80011c0:	4804      	ldr	r0, [pc, #16]	; (80011d4 <MRT_Deinit+0x18>)
 80011c2:	f7ff ffa1 	bl	8001108 <print>

	MRT_Reinitialize_Peripherals();
 80011c6:	f000 f8dd 	bl	8001384 <MRT_Reinitialize_Peripherals>
	#endif


	//Sensors
	#if SENSORS_THREAD
		MRT_i2c_sensors_Deinit();
 80011ca:	f003 fba1 	bl	8004910 <MRT_i2c_sensors_Deinit>
	#endif

    //TODO
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	08018af8 	.word	0x08018af8

080011d8 <MRT_reset_info>:

//**************************************************//
//PRIVATE FUNCTIONS


void MRT_reset_info(void){
 80011d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011da:	b0a9      	sub	sp, #164	; 0xa4
 80011dc:	af06      	add	r7, sp, #24

	  char buffer[100];
	  sprintf(buffer,"Reset: %i,  WU: %i,  IWDG: %i\r\nPrevious RTC time: %i:%i:%i ::%i\r\n",
 80011de:	4b51      	ldr	r3, [pc, #324]	; (8001324 <MRT_reset_info+0x14c>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	461e      	mov	r6, r3
 80011e4:	4b50      	ldr	r3, [pc, #320]	; (8001328 <MRT_reset_info+0x150>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	469c      	mov	ip, r3
 80011ea:	4b50      	ldr	r3, [pc, #320]	; (800132c <MRT_reset_info+0x154>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	4b4f      	ldr	r3, [pc, #316]	; (8001330 <MRT_reset_info+0x158>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4619      	mov	r1, r3
 80011f6:	4b4f      	ldr	r3, [pc, #316]	; (8001334 <MRT_reset_info+0x15c>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	461c      	mov	r4, r3
 80011fc:	4b4e      	ldr	r3, [pc, #312]	; (8001338 <MRT_reset_info+0x160>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461d      	mov	r5, r3
 8001202:	4b4e      	ldr	r3, [pc, #312]	; (800133c <MRT_reset_info+0x164>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800120a:	9304      	str	r3, [sp, #16]
 800120c:	9503      	str	r5, [sp, #12]
 800120e:	9402      	str	r4, [sp, #8]
 8001210:	9101      	str	r1, [sp, #4]
 8001212:	9200      	str	r2, [sp, #0]
 8001214:	4663      	mov	r3, ip
 8001216:	4632      	mov	r2, r6
 8001218:	4949      	ldr	r1, [pc, #292]	; (8001340 <MRT_reset_info+0x168>)
 800121a:	f013 f87f 	bl	801431c <siprintf>
			  reset_flag, wu_flag, iwdg_flag, prev_hour, prev_min, prev_sec, prev_subsec);
	  print(buffer);
 800121e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff70 	bl	8001108 <print>

	  //Check if IWDG is being deactivated
	  if (iwdg_flag==1){
 8001228:	4b40      	ldr	r3, [pc, #256]	; (800132c <MRT_reset_info+0x154>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d119      	bne.n	8001264 <MRT_reset_info+0x8c>
		  print((char*) "Deactivating IWDG\r\n");
 8001230:	4844      	ldr	r0, [pc, #272]	; (8001344 <MRT_reset_info+0x16c>)
 8001232:	f7ff ff69 	bl	8001108 <print>

		  iwdg_flag = 0; //Flip flag
 8001236:	4b3d      	ldr	r3, [pc, #244]	; (800132c <MRT_reset_info+0x154>)
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]

		  //Write new flag to memory
		  rtc_bckp_reg_iwdg = iwdg_flag;
 800123c:	4b3b      	ldr	r3, [pc, #236]	; (800132c <MRT_reset_info+0x154>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	4b41      	ldr	r3, [pc, #260]	; (8001348 <MRT_reset_info+0x170>)
 8001244:	601a      	str	r2, [r3, #0]
		  ext_flash_iwdg = iwdg_flag;
 8001246:	4b39      	ldr	r3, [pc, #228]	; (800132c <MRT_reset_info+0x154>)
 8001248:	781a      	ldrb	r2, [r3, #0]
 800124a:	4b40      	ldr	r3, [pc, #256]	; (800134c <MRT_reset_info+0x174>)
 800124c:	701a      	strb	r2, [r3, #0]
		  MRT_saveFlagValue(FC_STATE_IWDG);
 800124e:	2002      	movs	r0, #2
 8001250:	f002 f84e 	bl	80032f0 <MRT_saveFlagValue>

		  HAL_Delay(500);
 8001254:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001258:	f008 fcb0 	bl	8009bbc <HAL_Delay>

		  //Go to sleep
		  MRT_StandByMode(SLEEP_TIME);
 800125c:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 8001260:	f001 f96a 	bl	8002538 <MRT_StandByMode>
	  }


	  //Check if we are after waking up (and at which wake up we are at)
	  if (wu_flag > 0){
 8001264:	4b30      	ldr	r3, [pc, #192]	; (8001328 <MRT_reset_info+0x150>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d010      	beq.n	800128e <MRT_reset_info+0xb6>
		  char buf[30];
		  sprintf(buf, "FC wake up %i\r\n", wu_flag);
 800126c:	4b2e      	ldr	r3, [pc, #184]	; (8001328 <MRT_reset_info+0x150>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	4936      	ldr	r1, [pc, #216]	; (8001350 <MRT_reset_info+0x178>)
 8001276:	4618      	mov	r0, r3
 8001278:	f013 f850 	bl	801431c <siprintf>
		  print(buf);
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ff42 	bl	8001108 <print>

		  print((char*) "Resetting RTC time\r\n");
 8001284:	4833      	ldr	r0, [pc, #204]	; (8001354 <MRT_reset_info+0x17c>)
 8001286:	f7ff ff3f 	bl	8001108 <print>

		  //Clear RTC time (last recorded)
		  MRT_resetTotalTime();
 800128a:	f002 f8f1 	bl	8003470 <MRT_resetTotalTime>
	  }


	  //Check if we start from the beginning
	  if (reset_flag == 0){
 800128e:	4b25      	ldr	r3, [pc, #148]	; (8001324 <MRT_reset_info+0x14c>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d108      	bne.n	80012a8 <MRT_reset_info+0xd0>
		  print((char*) "FC restarted\r\n");
 8001296:	4830      	ldr	r0, [pc, #192]	; (8001358 <MRT_reset_info+0x180>)
 8001298:	f7ff ff36 	bl	8001108 <print>

		  reset_flag = 1; //Flip flag
 800129c:	4b21      	ldr	r3, [pc, #132]	; (8001324 <MRT_reset_info+0x14c>)
 800129e:	2201      	movs	r2, #1
 80012a0:	701a      	strb	r2, [r3, #0]

		  MRT_saveFlagValue(FC_STATE_RESET);
 80012a2:	2000      	movs	r0, #0
 80012a4:	f002 f824 	bl	80032f0 <MRT_saveFlagValue>
	  }


	  //Check if before or after apogee
	  if (apogee_flag == 0){
 80012a8:	4b2c      	ldr	r3, [pc, #176]	; (800135c <MRT_reset_info+0x184>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d103      	bne.n	80012b8 <MRT_reset_info+0xe0>
		  print((char*) "Pre-apogee\r\n");
 80012b0:	482b      	ldr	r0, [pc, #172]	; (8001360 <MRT_reset_info+0x188>)
 80012b2:	f7ff ff29 	bl	8001108 <print>
 80012b6:	e006      	b.n	80012c6 <MRT_reset_info+0xee>
	  }
	  else if(apogee_flag==1){
 80012b8:	4b28      	ldr	r3, [pc, #160]	; (800135c <MRT_reset_info+0x184>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d102      	bne.n	80012c6 <MRT_reset_info+0xee>
		  print((char*) "Post-apogee\r\n");
 80012c0:	4828      	ldr	r0, [pc, #160]	; (8001364 <MRT_reset_info+0x18c>)
 80012c2:	f7ff ff21 	bl	8001108 <print>
	  }


	  //Check ejection stage
	  print((char*)"Ejection Stage: ");
 80012c6:	4828      	ldr	r0, [pc, #160]	; (8001368 <MRT_reset_info+0x190>)
 80012c8:	f7ff ff1e 	bl	8001108 <print>
	  if (ejection_stage_flag==PAD){
 80012cc:	4b27      	ldr	r3, [pc, #156]	; (800136c <MRT_reset_info+0x194>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d103      	bne.n	80012dc <MRT_reset_info+0x104>
		  print((char*)"Pad\r\n");
 80012d4:	4826      	ldr	r0, [pc, #152]	; (8001370 <MRT_reset_info+0x198>)
 80012d6:	f7ff ff17 	bl	8001108 <print>
		  print((char*)"Main descent\r\n");
	  }
	  else if(ejection_stage_flag==LANDED){
		  print((char*)"Landed\r\n");
	  }
}
 80012da:	e01e      	b.n	800131a <MRT_reset_info+0x142>
	  else if(ejection_stage_flag==BOOST){
 80012dc:	4b23      	ldr	r3, [pc, #140]	; (800136c <MRT_reset_info+0x194>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d103      	bne.n	80012ec <MRT_reset_info+0x114>
		  print((char*)"Boost\r\n");
 80012e4:	4823      	ldr	r0, [pc, #140]	; (8001374 <MRT_reset_info+0x19c>)
 80012e6:	f7ff ff0f 	bl	8001108 <print>
}
 80012ea:	e016      	b.n	800131a <MRT_reset_info+0x142>
	  else if(ejection_stage_flag==DROGUE_DESCENT){
 80012ec:	4b1f      	ldr	r3, [pc, #124]	; (800136c <MRT_reset_info+0x194>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d103      	bne.n	80012fc <MRT_reset_info+0x124>
		  print((char*)"Drogue descent\r\n");
 80012f4:	4820      	ldr	r0, [pc, #128]	; (8001378 <MRT_reset_info+0x1a0>)
 80012f6:	f7ff ff07 	bl	8001108 <print>
}
 80012fa:	e00e      	b.n	800131a <MRT_reset_info+0x142>
	  else if(ejection_stage_flag==MAIN_DESCENT){
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <MRT_reset_info+0x194>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b03      	cmp	r3, #3
 8001302:	d103      	bne.n	800130c <MRT_reset_info+0x134>
		  print((char*)"Main descent\r\n");
 8001304:	481d      	ldr	r0, [pc, #116]	; (800137c <MRT_reset_info+0x1a4>)
 8001306:	f7ff feff 	bl	8001108 <print>
}
 800130a:	e006      	b.n	800131a <MRT_reset_info+0x142>
	  else if(ejection_stage_flag==LANDED){
 800130c:	4b17      	ldr	r3, [pc, #92]	; (800136c <MRT_reset_info+0x194>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b04      	cmp	r3, #4
 8001312:	d102      	bne.n	800131a <MRT_reset_info+0x142>
		  print((char*)"Landed\r\n");
 8001314:	481a      	ldr	r0, [pc, #104]	; (8001380 <MRT_reset_info+0x1a8>)
 8001316:	f7ff fef7 	bl	8001108 <print>
}
 800131a:	bf00      	nop
 800131c:	378c      	adds	r7, #140	; 0x8c
 800131e:	46bd      	mov	sp, r7
 8001320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001322:	bf00      	nop
 8001324:	20000380 	.word	0x20000380
 8001328:	20000381 	.word	0x20000381
 800132c:	20000382 	.word	0x20000382
 8001330:	20000385 	.word	0x20000385
 8001334:	20000386 	.word	0x20000386
 8001338:	20000387 	.word	0x20000387
 800133c:	20000388 	.word	0x20000388
 8001340:	08018b1c 	.word	0x08018b1c
 8001344:	08018b60 	.word	0x08018b60
 8001348:	20000350 	.word	0x20000350
 800134c:	20000370 	.word	0x20000370
 8001350:	08018b74 	.word	0x08018b74
 8001354:	08018b84 	.word	0x08018b84
 8001358:	08018b9c 	.word	0x08018b9c
 800135c:	20000383 	.word	0x20000383
 8001360:	08018bac 	.word	0x08018bac
 8001364:	08018bbc 	.word	0x08018bbc
 8001368:	08018bcc 	.word	0x08018bcc
 800136c:	20000384 	.word	0x20000384
 8001370:	08018be0 	.word	0x08018be0
 8001374:	08018be8 	.word	0x08018be8
 8001378:	08018bf0 	.word	0x08018bf0
 800137c:	08018c04 	.word	0x08018c04
 8001380:	08018c14 	.word	0x08018c14

08001384 <MRT_Reinitialize_Peripherals>:


void MRT_Reinitialize_Peripherals(void){
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
	  /*
	   * Reinitialize all peripherals
	   */

	  print((char*)"Reinitializing Peripherals...");
 8001388:	482f      	ldr	r0, [pc, #188]	; (8001448 <MRT_Reinitialize_Peripherals+0xc4>)
 800138a:	f7ff febd 	bl	8001108 <print>

	  // reset LEDs
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	2102      	movs	r1, #2
 8001392:	482e      	ldr	r0, [pc, #184]	; (800144c <MRT_Reinitialize_Peripherals+0xc8>)
 8001394:	f009 fb1e 	bl	800a9d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001398:	2200      	movs	r2, #0
 800139a:	2104      	movs	r1, #4
 800139c:	482b      	ldr	r0, [pc, #172]	; (800144c <MRT_Reinitialize_Peripherals+0xc8>)
 800139e:	f009 fb19 	bl	800a9d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2108      	movs	r1, #8
 80013a6:	4829      	ldr	r0, [pc, #164]	; (800144c <MRT_Reinitialize_Peripherals+0xc8>)
 80013a8:	f009 fb14 	bl	800a9d4 <HAL_GPIO_WritePin>

	  // reset recovery pyro pins
	  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 80013ac:	2201      	movs	r2, #1
 80013ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013b2:	4827      	ldr	r0, [pc, #156]	; (8001450 <MRT_Reinitialize_Peripherals+0xcc>)
 80013b4:	f009 fb0e 	bl	800a9d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 80013b8:	2200      	movs	r2, #0
 80013ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013be:	4824      	ldr	r0, [pc, #144]	; (8001450 <MRT_Reinitialize_Peripherals+0xcc>)
 80013c0:	f009 fb08 	bl	800a9d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 80013c4:	2200      	movs	r2, #0
 80013c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ca:	4821      	ldr	r0, [pc, #132]	; (8001450 <MRT_Reinitialize_Peripherals+0xcc>)
 80013cc:	f009 fb02 	bl	800a9d4 <HAL_GPIO_WritePin>

	  // reset prop pyro pins
	  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET); //PG1 ARMING_PROP
 80013d0:	2201      	movs	r2, #1
 80013d2:	2102      	movs	r1, #2
 80013d4:	481e      	ldr	r0, [pc, #120]	; (8001450 <MRT_Reinitialize_Peripherals+0xcc>)
 80013d6:	f009 fafd 	bl	800a9d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 80013da:	2200      	movs	r2, #0
 80013dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013e0:	481c      	ldr	r0, [pc, #112]	; (8001454 <MRT_Reinitialize_Peripherals+0xd0>)
 80013e2:	f009 faf7 	bl	800a9d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ec:	4819      	ldr	r0, [pc, #100]	; (8001454 <MRT_Reinitialize_Peripherals+0xd0>)
 80013ee:	f009 faf1 	bl	800a9d4 <HAL_GPIO_WritePin>

	  // reset 12 V buck converter enable pin (disable converter)
	  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 80013f2:	2200      	movs	r2, #0
 80013f4:	2104      	movs	r1, #4
 80013f6:	4818      	ldr	r0, [pc, #96]	; (8001458 <MRT_Reinitialize_Peripherals+0xd4>)
 80013f8:	f009 faec 	bl	800a9d4 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
	  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


	  // reset payload EN signal
	  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001402:	4815      	ldr	r0, [pc, #84]	; (8001458 <MRT_Reinitialize_Peripherals+0xd4>)
 8001404:	f009 fae6 	bl	800a9d4 <HAL_GPIO_WritePin>

	  // set CS pin for thermocouple chip high
	  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

	  // set power off for VR
	  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 8001408:	2200      	movs	r2, #0
 800140a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800140e:	4810      	ldr	r0, [pc, #64]	; (8001450 <MRT_Reinitialize_Peripherals+0xcc>)
 8001410:	f009 fae0 	bl	800a9d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 8001414:	2200      	movs	r2, #0
 8001416:	2180      	movs	r1, #128	; 0x80
 8001418:	4810      	ldr	r0, [pc, #64]	; (800145c <MRT_Reinitialize_Peripherals+0xd8>)
 800141a:	f009 fadb 	bl	800a9d4 <HAL_GPIO_WritePin>

	  // FLASH set CS, WP and IO3 pins high
	  HAL_GPIO_WritePin(OUT_FLASH_CS_GPIO_Port, OUT_FLASH_CS_Pin, SET);
 800141e:	2201      	movs	r2, #1
 8001420:	2140      	movs	r1, #64	; 0x40
 8001422:	480e      	ldr	r0, [pc, #56]	; (800145c <MRT_Reinitialize_Peripherals+0xd8>)
 8001424:	f009 fad6 	bl	800a9d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_WP_GPIO_Port, OUT_FLASH_WP_Pin, SET);
 8001428:	2201      	movs	r2, #1
 800142a:	2120      	movs	r1, #32
 800142c:	480b      	ldr	r0, [pc, #44]	; (800145c <MRT_Reinitialize_Peripherals+0xd8>)
 800142e:	f009 fad1 	bl	800a9d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_IO3_GPIO_Port, OUT_FLASH_IO3_Pin, SET);
 8001432:	2201      	movs	r2, #1
 8001434:	2110      	movs	r1, #16
 8001436:	4809      	ldr	r0, [pc, #36]	; (800145c <MRT_Reinitialize_Peripherals+0xd8>)
 8001438:	f009 facc 	bl	800a9d4 <HAL_GPIO_WritePin>

	  print((char*)"OK\r\n");
 800143c:	4808      	ldr	r0, [pc, #32]	; (8001460 <MRT_Reinitialize_Peripherals+0xdc>)
 800143e:	f7ff fe63 	bl	8001108 <print>
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	08018c20 	.word	0x08018c20
 800144c:	40020800 	.word	0x40020800
 8001450:	40021800 	.word	0x40021800
 8001454:	40021400 	.word	0x40021400
 8001458:	40021000 	.word	0x40021000
 800145c:	40020c00 	.word	0x40020c00
 8001460:	08018c40 	.word	0x08018c40

08001464 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800146a:	463b      	mov	r3, r7
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001476:	4b21      	ldr	r3, [pc, #132]	; (80014fc <MX_ADC1_Init+0x98>)
 8001478:	4a21      	ldr	r2, [pc, #132]	; (8001500 <MX_ADC1_Init+0x9c>)
 800147a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800147c:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <MX_ADC1_Init+0x98>)
 800147e:	2200      	movs	r2, #0
 8001480:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001482:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <MX_ADC1_Init+0x98>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001488:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <MX_ADC1_Init+0x98>)
 800148a:	2200      	movs	r2, #0
 800148c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800148e:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <MX_ADC1_Init+0x98>)
 8001490:	2200      	movs	r2, #0
 8001492:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001494:	4b19      	ldr	r3, [pc, #100]	; (80014fc <MX_ADC1_Init+0x98>)
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800149c:	4b17      	ldr	r3, [pc, #92]	; (80014fc <MX_ADC1_Init+0x98>)
 800149e:	2200      	movs	r2, #0
 80014a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014a2:	4b16      	ldr	r3, [pc, #88]	; (80014fc <MX_ADC1_Init+0x98>)
 80014a4:	4a17      	ldr	r2, [pc, #92]	; (8001504 <MX_ADC1_Init+0xa0>)
 80014a6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <MX_ADC1_Init+0x98>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014ae:	4b13      	ldr	r3, [pc, #76]	; (80014fc <MX_ADC1_Init+0x98>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <MX_ADC1_Init+0x98>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <MX_ADC1_Init+0x98>)
 80014be:	2201      	movs	r2, #1
 80014c0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014c2:	480e      	ldr	r0, [pc, #56]	; (80014fc <MX_ADC1_Init+0x98>)
 80014c4:	f008 fb9e 	bl	8009c04 <HAL_ADC_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80014ce:	f000 fecf 	bl	8002270 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80014d2:	2306      	movs	r3, #6
 80014d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014d6:	2301      	movs	r3, #1
 80014d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014da:	2300      	movs	r3, #0
 80014dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014de:	463b      	mov	r3, r7
 80014e0:	4619      	mov	r1, r3
 80014e2:	4806      	ldr	r0, [pc, #24]	; (80014fc <MX_ADC1_Init+0x98>)
 80014e4:	f008 fd70 	bl	8009fc8 <HAL_ADC_ConfigChannel>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80014ee:	f000 febf 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20005a94 	.word	0x20005a94
 8001500:	40012000 	.word	0x40012000
 8001504:	0f000001 	.word	0x0f000001

08001508 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08a      	sub	sp, #40	; 0x28
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a17      	ldr	r2, [pc, #92]	; (8001584 <HAL_ADC_MspInit+0x7c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d127      	bne.n	800157a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	4b16      	ldr	r3, [pc, #88]	; (8001588 <HAL_ADC_MspInit+0x80>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	4a15      	ldr	r2, [pc, #84]	; (8001588 <HAL_ADC_MspInit+0x80>)
 8001534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001538:	6453      	str	r3, [r2, #68]	; 0x44
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <HAL_ADC_MspInit+0x80>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <HAL_ADC_MspInit+0x80>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a0e      	ldr	r2, [pc, #56]	; (8001588 <HAL_ADC_MspInit+0x80>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <HAL_ADC_MspInit+0x80>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 8001562:	2340      	movs	r3, #64	; 0x40
 8001564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001566:	2303      	movs	r3, #3
 8001568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	; (800158c <HAL_ADC_MspInit+0x84>)
 8001576:	f009 f869 	bl	800a64c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800157a:	bf00      	nop
 800157c:	3728      	adds	r7, #40	; 0x28
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40012000 	.word	0x40012000
 8001588:	40023800 	.word	0x40023800
 800158c:	40020000 	.word	0x40020000

08001590 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001594:	f3bf 8f4f 	dsb	sy
}
 8001598:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <__NVIC_SystemReset+0x24>)
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80015a2:	4904      	ldr	r1, [pc, #16]	; (80015b4 <__NVIC_SystemReset+0x24>)
 80015a4:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <__NVIC_SystemReset+0x28>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80015aa:	f3bf 8f4f 	dsb	sy
}
 80015ae:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <__NVIC_SystemReset+0x20>
 80015b4:	e000ed00 	.word	0xe000ed00
 80015b8:	05fa0004 	.word	0x05fa0004

080015bc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

	println("\r\nFREERTOS Init");
 80015c0:	4821      	ldr	r0, [pc, #132]	; (8001648 <MX_FREERTOS_Init+0x8c>)
 80015c2:	f7ff fd83 	bl	80010cc <println>
	print("\tInitializing the kernel...");
 80015c6:	4821      	ldr	r0, [pc, #132]	; (800164c <MX_FREERTOS_Init+0x90>)
 80015c8:	f7ff fd9e 	bl	8001108 <print>
	osKernelInitialize();
 80015cc:	f00e f95a 	bl	800f884 <osKernelInitialize>
	println("OK");
 80015d0:	481f      	ldr	r0, [pc, #124]	; (8001650 <MX_FREERTOS_Init+0x94>)
 80015d2:	f7ff fd7b 	bl	80010cc <println>

	print("\tCreating the threads...");
 80015d6:	481f      	ldr	r0, [pc, #124]	; (8001654 <MX_FREERTOS_Init+0x98>)
 80015d8:	f7ff fd96 	bl	8001108 <print>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Memory0 */
  Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 80015dc:	4a1e      	ldr	r2, [pc, #120]	; (8001658 <MX_FREERTOS_Init+0x9c>)
 80015de:	2100      	movs	r1, #0
 80015e0:	481e      	ldr	r0, [pc, #120]	; (800165c <MX_FREERTOS_Init+0xa0>)
 80015e2:	f00e f999 	bl	800f918 <osThreadNew>
 80015e6:	4603      	mov	r3, r0
 80015e8:	4a1d      	ldr	r2, [pc, #116]	; (8001660 <MX_FREERTOS_Init+0xa4>)
 80015ea:	6013      	str	r3, [r2, #0]

  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 80015ec:	4a1d      	ldr	r2, [pc, #116]	; (8001664 <MX_FREERTOS_Init+0xa8>)
 80015ee:	2100      	movs	r1, #0
 80015f0:	481d      	ldr	r0, [pc, #116]	; (8001668 <MX_FREERTOS_Init+0xac>)
 80015f2:	f00e f991 	bl	800f918 <osThreadNew>
 80015f6:	4603      	mov	r3, r0
 80015f8:	4a1c      	ldr	r2, [pc, #112]	; (800166c <MX_FREERTOS_Init+0xb0>)
 80015fa:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 80015fc:	4a1c      	ldr	r2, [pc, #112]	; (8001670 <MX_FREERTOS_Init+0xb4>)
 80015fe:	2100      	movs	r1, #0
 8001600:	481c      	ldr	r0, [pc, #112]	; (8001674 <MX_FREERTOS_Init+0xb8>)
 8001602:	f00e f989 	bl	800f918 <osThreadNew>
 8001606:	4603      	mov	r3, r0
 8001608:	4a1b      	ldr	r2, [pc, #108]	; (8001678 <MX_FREERTOS_Init+0xbc>)
 800160a:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 800160c:	4a1b      	ldr	r2, [pc, #108]	; (800167c <MX_FREERTOS_Init+0xc0>)
 800160e:	2100      	movs	r1, #0
 8001610:	481b      	ldr	r0, [pc, #108]	; (8001680 <MX_FREERTOS_Init+0xc4>)
 8001612:	f00e f981 	bl	800f918 <osThreadNew>
 8001616:	4603      	mov	r3, r0
 8001618:	4a1a      	ldr	r2, [pc, #104]	; (8001684 <MX_FREERTOS_Init+0xc8>)
 800161a:	6013      	str	r3, [r2, #0]

  /* creation of WatchDog */
  WatchDogHandle = osThreadNew(StartWatchDog, NULL, &WatchDog_attributes);
 800161c:	4a1a      	ldr	r2, [pc, #104]	; (8001688 <MX_FREERTOS_Init+0xcc>)
 800161e:	2100      	movs	r1, #0
 8001620:	481a      	ldr	r0, [pc, #104]	; (800168c <MX_FREERTOS_Init+0xd0>)
 8001622:	f00e f979 	bl	800f918 <osThreadNew>
 8001626:	4603      	mov	r3, r0
 8001628:	4a19      	ldr	r2, [pc, #100]	; (8001690 <MX_FREERTOS_Init+0xd4>)
 800162a:	6013      	str	r3, [r2, #0]

  /* creation of Propulsion4 */
  Propulsion4Handle = osThreadNew(StartPropulsion4, NULL, &Propulsion4_attributes);
 800162c:	4a19      	ldr	r2, [pc, #100]	; (8001694 <MX_FREERTOS_Init+0xd8>)
 800162e:	2100      	movs	r1, #0
 8001630:	4819      	ldr	r0, [pc, #100]	; (8001698 <MX_FREERTOS_Init+0xdc>)
 8001632:	f00e f971 	bl	800f918 <osThreadNew>
 8001636:	4603      	mov	r3, r0
 8001638:	4a18      	ldr	r2, [pc, #96]	; (800169c <MX_FREERTOS_Init+0xe0>)
 800163a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  println("OK");
 800163c:	4804      	ldr	r0, [pc, #16]	; (8001650 <MX_FREERTOS_Init+0x94>)
 800163e:	f7ff fd45 	bl	80010cc <println>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	08018c8c 	.word	0x08018c8c
 800164c:	08018c9c 	.word	0x08018c9c
 8001650:	08018cb8 	.word	0x08018cb8
 8001654:	08018cbc 	.word	0x08018cbc
 8001658:	0801a804 	.word	0x0801a804
 800165c:	080016a1 	.word	0x080016a1
 8001660:	20005ae0 	.word	0x20005ae0
 8001664:	0801a828 	.word	0x0801a828
 8001668:	08001729 	.word	0x08001729
 800166c:	20005af8 	.word	0x20005af8
 8001670:	0801a84c 	.word	0x0801a84c
 8001674:	08001745 	.word	0x08001745
 8001678:	20005afc 	.word	0x20005afc
 800167c:	0801a870 	.word	0x0801a870
 8001680:	08001855 	.word	0x08001855
 8001684:	20005b00 	.word	0x20005b00
 8001688:	0801a894 	.word	0x0801a894
 800168c:	080018cd 	.word	0x080018cd
 8001690:	20005adc 	.word	0x20005adc
 8001694:	0801a8b8 	.word	0x0801a8b8
 8001698:	08001a09 	.word	0x08001a09
 800169c:	20005b04 	.word	0x20005b04

080016a0 <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMemory0 */

	//TODO UNTESTED

	//Add thread id to the list
	threadsID[0]=osThreadGetId();
 80016a8:	f00e f9c8 	bl	800fa3c <osThreadGetId>
 80016ac:	4603      	mov	r3, r0
 80016ae:	4a16      	ldr	r2, [pc, #88]	; (8001708 <StartMemory0+0x68>)
 80016b0:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  for(;;)
  {

	 //Get RTC time
	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80016b2:	2200      	movs	r2, #0
 80016b4:	4915      	ldr	r1, [pc, #84]	; (800170c <StartMemory0+0x6c>)
 80016b6:	4816      	ldr	r0, [pc, #88]	; (8001710 <StartMemory0+0x70>)
 80016b8:	f00b fa6c 	bl	800cb94 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80016bc:	2200      	movs	r2, #0
 80016be:	4915      	ldr	r1, [pc, #84]	; (8001714 <StartMemory0+0x74>)
 80016c0:	4813      	ldr	r0, [pc, #76]	; (8001710 <StartMemory0+0x70>)
 80016c2:	f00b fb6c 	bl	800cd9e <HAL_RTC_GetDate>

	 //Update global variables
	 prev_hour = sTime.Hours;
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <StartMemory0+0x6c>)
 80016c8:	781a      	ldrb	r2, [r3, #0]
 80016ca:	4b13      	ldr	r3, [pc, #76]	; (8001718 <StartMemory0+0x78>)
 80016cc:	701a      	strb	r2, [r3, #0]
	 prev_min = sTime.Minutes;
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <StartMemory0+0x6c>)
 80016d0:	785a      	ldrb	r2, [r3, #1]
 80016d2:	4b12      	ldr	r3, [pc, #72]	; (800171c <StartMemory0+0x7c>)
 80016d4:	701a      	strb	r2, [r3, #0]
	 prev_sec = sTime.Seconds;
 80016d6:	4b0d      	ldr	r3, [pc, #52]	; (800170c <StartMemory0+0x6c>)
 80016d8:	789a      	ldrb	r2, [r3, #2]
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <StartMemory0+0x80>)
 80016dc:	701a      	strb	r2, [r3, #0]
	 if (__HAL_RTC_SHIFT_GET_FLAG(&hrtc, RTC_FLAG_SHPF)) prev_sec++; //Adjust following the user manual
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <StartMemory0+0x70>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d005      	beq.n	80016f8 <StartMemory0+0x58>
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <StartMemory0+0x80>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	3301      	adds	r3, #1
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <StartMemory0+0x80>)
 80016f6:	701a      	strb	r2, [r3, #0]
	 prev_subsec = sTime.SubSeconds;
 80016f8:	4b04      	ldr	r3, [pc, #16]	; (800170c <StartMemory0+0x6c>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	4a09      	ldr	r2, [pc, #36]	; (8001724 <StartMemory0+0x84>)
 80016fe:	6013      	str	r3, [r2, #0]
		sd_write(&fil, msg_buffer_pr);
	}
	f_close(&fil);
	#endif

	osDelay(1000/DATA_FREQ);
 8001700:	2064      	movs	r0, #100	; 0x64
 8001702:	f00e fa37 	bl	800fb74 <osDelay>
	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001706:	e7d4      	b.n	80016b2 <StartMemory0+0x12>
 8001708:	20005ae4 	.word	0x20005ae4
 800170c:	20000308 	.word	0x20000308
 8001710:	20005bb0 	.word	0x20005bb0
 8001714:	2000031c 	.word	0x2000031c
 8001718:	20000385 	.word	0x20000385
 800171c:	20000386 	.word	0x20000386
 8001720:	20000387 	.word	0x20000387
 8001724:	20000388 	.word	0x20000388

08001728 <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEjection1 */

	//Add thread id to the list
	threadsID[1]=osThreadGetId();
 8001730:	f00e f984 	bl	800fa3c <osThreadGetId>
 8001734:	4603      	mov	r3, r0
 8001736:	4a02      	ldr	r2, [pc, #8]	; (8001740 <StartEjection1+0x18>)
 8001738:	6053      	str	r3, [r2, #4]

	#if !EJECTION_THREAD
	osThreadExit();
 800173a:	f00e f9e8 	bl	800fb0e <osThreadExit>
 800173e:	bf00      	nop
 8001740:	20005ae4 	.word	0x20005ae4

08001744 <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b0c4      	sub	sp, #272	; 0x110
 8001748:	af00      	add	r7, sp, #0
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartTelemetry2 */

	//Add thread id to the list
	threadsID[2]=osThreadGetId();
 800174e:	f00e f975 	bl	800fa3c <osThreadGetId>
 8001752:	4603      	mov	r3, r0
 8001754:	4a39      	ldr	r2, [pc, #228]	; (800183c <StartTelemetry2+0xf8>)
 8001756:	6093      	str	r3, [r2, #8]
	#if !TELEMETRY_THREAD
	osThreadExit();
	#endif

	char radio_buffer[RADIO_BUFFER_SIZE];
	uint8_t counter = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint8_t iridium_counter = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 8001764:	2201      	movs	r2, #1
 8001766:	2108      	movs	r1, #8
 8001768:	4835      	ldr	r0, [pc, #212]	; (8001840 <StartTelemetry2+0xfc>)
 800176a:	f009 f933 	bl	800a9d4 <HAL_GPIO_WritePin>

	  if(apogee_flag == 0){ //Only send prop data pre-apogee
 800176e:	4b35      	ldr	r3, [pc, #212]	; (8001844 <StartTelemetry2+0x100>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d118      	bne.n	80017a8 <StartTelemetry2+0x64>

		  //Send propulsion data
		  memset(radio_buffer, 0, RADIO_BUFFER_SIZE);
 8001776:	f107 030c 	add.w	r3, r7, #12
 800177a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800177e:	2100      	movs	r1, #0
 8001780:	4618      	mov	r0, r3
 8001782:	f011 facf 	bl	8012d24 <memset>
		  MRT_formatPropulsion();
 8001786:	f002 fea5 	bl	80044d4 <MRT_formatPropulsion>
		  memcpy(radio_buffer, msg_buffer_pr, strlen(msg_buffer_pr));
 800178a:	482f      	ldr	r0, [pc, #188]	; (8001848 <StartTelemetry2+0x104>)
 800178c:	f7fe fd3a 	bl	8000204 <strlen>
 8001790:	4602      	mov	r2, r0
 8001792:	f107 030c 	add.w	r3, r7, #12
 8001796:	492c      	ldr	r1, [pc, #176]	; (8001848 <StartTelemetry2+0x104>)
 8001798:	4618      	mov	r0, r3
 800179a:	f011 fa9b 	bl	8012cd4 <memcpy>
		  MRT_radio_tx((char*) radio_buffer);
 800179e:	f107 030c 	add.w	r3, r7, #12
 80017a2:	4618      	mov	r0, r3
 80017a4:	f008 f988 	bl	8009ab8 <MRT_radio_tx>
	  }


	  if (counter == SENSORS_SEND_FREQ_DIVIDER){
 80017a8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d12e      	bne.n	800180e <StartTelemetry2+0xca>
		  counter = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		  float SEC = (uint8_t) time % 60; sprintf(&SEC,"%.0f",SEC);
		  float SUBSEC = time / 3600.0; sprintf(&SUBSEC,"%.0f",SUBSEC);
		  */

	  	  //Send sensors data
		  memset(radio_buffer, 0, RADIO_BUFFER_SIZE);
 80017b6:	f107 030c 	add.w	r3, r7, #12
 80017ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017be:	2100      	movs	r1, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	f011 faaf 	bl	8012d24 <memset>
		  MRT_formatAvionics();
 80017c6:	f001 fc5d 	bl	8003084 <MRT_formatAvionics>
		  memcpy(radio_buffer, msg_buffer_av, strlen(msg_buffer_av));
 80017ca:	4820      	ldr	r0, [pc, #128]	; (800184c <StartTelemetry2+0x108>)
 80017cc:	f7fe fd1a 	bl	8000204 <strlen>
 80017d0:	4602      	mov	r2, r0
 80017d2:	f107 030c 	add.w	r3, r7, #12
 80017d6:	491d      	ldr	r1, [pc, #116]	; (800184c <StartTelemetry2+0x108>)
 80017d8:	4618      	mov	r0, r3
 80017da:	f011 fa7b 	bl	8012cd4 <memcpy>
		  MRT_radio_tx((char*) radio_buffer);
 80017de:	f107 030c 	add.w	r3, r7, #12
 80017e2:	4618      	mov	r0, r3
 80017e4:	f008 f968 	bl	8009ab8 <MRT_radio_tx>


		  if(apogee_flag && iridium_counter == IRIDIUM_SEND_FREQ_DIVIDER){
 80017e8:	4b16      	ldr	r3, [pc, #88]	; (8001844 <StartTelemetry2+0x100>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d009      	beq.n	8001804 <StartTelemetry2+0xc0>
 80017f0:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80017f4:	2b05      	cmp	r3, #5
 80017f6:	d105      	bne.n	8001804 <StartTelemetry2+0xc0>
			  iridium_counter = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
			  #if IRIDIUM_ //Iridium send
			  hiridium.getTime(); //TODO doesn't cost anything
 80017fe:	4b14      	ldr	r3, [pc, #80]	; (8001850 <StartTelemetry2+0x10c>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	4798      	blx	r3
			  //hiridium.sendMessage(msg); TODO IT COSTS CREDITS WATCH OUT
			  #endif
		  }
		  iridium_counter++;
 8001804:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001808:	3301      	adds	r3, #1
 800180a:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	  }
	  counter++;
 800180e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001812:	3301      	adds	r3, #1
 8001814:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f


	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8001818:	2200      	movs	r2, #0
 800181a:	2108      	movs	r1, #8
 800181c:	4808      	ldr	r0, [pc, #32]	; (8001840 <StartTelemetry2+0xfc>)
 800181e:	f009 f8d9 	bl	800a9d4 <HAL_GPIO_WritePin>

	  if (apogee_flag){
 8001822:	4b08      	ldr	r3, [pc, #32]	; (8001844 <StartTelemetry2+0x100>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <StartTelemetry2+0xee>
		  osDelay(1000/POST_APOGEE_SEND_FREQ);
 800182a:	200a      	movs	r0, #10
 800182c:	f00e f9a2 	bl	800fb74 <osDelay>
 8001830:	e798      	b.n	8001764 <StartTelemetry2+0x20>
	  }
	  else{
		  osDelay(1000/PRE_APOGEE_SEND_FREQ);
 8001832:	2014      	movs	r0, #20
 8001834:	f00e f99e 	bl	800fb74 <osDelay>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 8001838:	e794      	b.n	8001764 <StartTelemetry2+0x20>
 800183a:	bf00      	nop
 800183c:	20005ae4 	.word	0x20005ae4
 8001840:	40020800 	.word	0x40020800
 8001844:	20000383 	.word	0x20000383
 8001848:	20005f3c 	.word	0x20005f3c
 800184c:	20005e34 	.word	0x20005e34
 8001850:	200003f4 	.word	0x200003f4

08001854 <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */

	//Add thread id to the list
	threadsID[3]=osThreadGetId();
 800185c:	f00e f8ee 	bl	800fa3c <osThreadGetId>
 8001860:	4603      	mov	r3, r0
 8001862:	4a13      	ldr	r2, [pc, #76]	; (80018b0 <StartSensors3+0x5c>)
 8001864:	60d3      	str	r3, [r2, #12]


  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 8001866:	2201      	movs	r2, #1
 8001868:	2102      	movs	r1, #2
 800186a:	4812      	ldr	r0, [pc, #72]	; (80018b4 <StartSensors3+0x60>)
 800186c:	f009 f8b2 	bl	800a9d4 <HAL_GPIO_WritePin>

	  //GPS
	  hgps.pollAll();
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <StartSensors3+0x64>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	4798      	blx	r3

	  //LSM6DSR
	  hlsm6dsr.pollAll();
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <StartSensors3+0x68>)
 8001878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187a:	4798      	blx	r3

	  //LPS22HH
	  hlps22hh.pollAll();
 800187c:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <StartSensors3+0x6c>)
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	4798      	blx	r3

	  //Gates continuity
	  gates_continuity = MRT_getContinuity();
 8001882:	f001 fbcb 	bl	800301c <MRT_getContinuity>
 8001886:	4603      	mov	r3, r0
 8001888:	461a      	mov	r2, r3
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <StartSensors3+0x70>)
 800188c:	701a      	strb	r2, [r3, #0]

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 800188e:	2200      	movs	r2, #0
 8001890:	2102      	movs	r1, #2
 8001892:	4808      	ldr	r0, [pc, #32]	; (80018b4 <StartSensors3+0x60>)
 8001894:	f009 f89e 	bl	800a9d4 <HAL_GPIO_WritePin>

	  if (apogee_flag){
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <StartSensors3+0x74>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <StartSensors3+0x54>
		  osDelay(1000/POST_APOGEE_POLL_FREQ);
 80018a0:	200a      	movs	r0, #10
 80018a2:	f00e f967 	bl	800fb74 <osDelay>
 80018a6:	e7de      	b.n	8001866 <StartSensors3+0x12>
	  }
	  else{
		  osDelay(1000/PRE_APOGEE_POLL_FREQ);
 80018a8:	2014      	movs	r0, #20
 80018aa:	f00e f963 	bl	800fb74 <osDelay>
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 80018ae:	e7da      	b.n	8001866 <StartSensors3+0x12>
 80018b0:	20005ae4 	.word	0x20005ae4
 80018b4:	40020800 	.word	0x40020800
 80018b8:	200003dc 	.word	0x200003dc
 80018bc:	2000039c 	.word	0x2000039c
 80018c0:	200003c8 	.word	0x200003c8
 80018c4:	2000036d 	.word	0x2000036d
 80018c8:	20000383 	.word	0x20000383

080018cc <StartWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchDog */
void StartWatchDog(void *argument)
{
 80018cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018d0:	b0c6      	sub	sp, #280	; 0x118
 80018d2:	af04      	add	r7, sp, #16
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	6018      	str	r0, [r3, #0]
	char buffer[WD_BUFFER_SIZE];

  /* Infinite loop */
  for(;;)
  {
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 80018d8:	2201      	movs	r2, #1
 80018da:	2104      	movs	r1, #4
 80018dc:	483a      	ldr	r0, [pc, #232]	; (80019c8 <StartWatchDog+0xfc>)
 80018de:	f009 f879 	bl	800a9d4 <HAL_GPIO_WritePin>

	 HAL_IWDG_Refresh(&hiwdg);

	 //Save the RTC time
	 MRT_saveTotalTime();
 80018e2:	f001 fd91 	bl	8003408 <MRT_saveTotalTime>

	 //TODO remove for comp
	 memset(buffer, 0, WD_BUFFER_SIZE);
 80018e6:	f107 0308 	add.w	r3, r7, #8
 80018ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f011 fa17 	bl	8012d24 <memset>
	 sprintf(buffer, "Time: %i:%i:%i ::%lu	Altitude: \r\n %f\r\n", prev_hour,prev_min,prev_sec,prev_subsec , altitude_m);
 80018f6:	4b35      	ldr	r3, [pc, #212]	; (80019cc <StartWatchDog+0x100>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	461e      	mov	r6, r3
 80018fc:	4b34      	ldr	r3, [pc, #208]	; (80019d0 <StartWatchDog+0x104>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4698      	mov	r8, r3
 8001902:	4b34      	ldr	r3, [pc, #208]	; (80019d4 <StartWatchDog+0x108>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	461d      	mov	r5, r3
 8001908:	4b33      	ldr	r3, [pc, #204]	; (80019d8 <StartWatchDog+0x10c>)
 800190a:	681c      	ldr	r4, [r3, #0]
 800190c:	4b33      	ldr	r3, [pc, #204]	; (80019dc <StartWatchDog+0x110>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fe39 	bl	8000588 <__aeabi_f2d>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	f107 0008 	add.w	r0, r7, #8
 800191e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001922:	9401      	str	r4, [sp, #4]
 8001924:	9500      	str	r5, [sp, #0]
 8001926:	4643      	mov	r3, r8
 8001928:	4632      	mov	r2, r6
 800192a:	492d      	ldr	r1, [pc, #180]	; (80019e0 <StartWatchDog+0x114>)
 800192c:	f012 fcf6 	bl	801431c <siprintf>
	 println((char*) buffer);
 8001930:	f107 0308 	add.w	r3, r7, #8
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fbc9 	bl	80010cc <println>


	 //Check if new ejection stage to save on external flash
	 if(wd_ejection_flag == 1){
 800193a:	4b2a      	ldr	r3, [pc, #168]	; (80019e4 <StartWatchDog+0x118>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d121      	bne.n	8001986 <StartWatchDog+0xba>

		wd_ejection_flag = 0;
 8001942:	4b28      	ldr	r3, [pc, #160]	; (80019e4 <StartWatchDog+0x118>)
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]

		//Update ejection stage flag and save it
		rtc_bckp_reg_ejection_stage = ejection_stage_flag;
 8001948:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <StartWatchDog+0x11c>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	4b27      	ldr	r3, [pc, #156]	; (80019ec <StartWatchDog+0x120>)
 8001950:	601a      	str	r2, [r3, #0]
		ext_flash_ejection_stage = ejection_stage_flag;
 8001952:	4b25      	ldr	r3, [pc, #148]	; (80019e8 <StartWatchDog+0x11c>)
 8001954:	781a      	ldrb	r2, [r3, #0]
 8001956:	4b26      	ldr	r3, [pc, #152]	; (80019f0 <StartWatchDog+0x124>)
 8001958:	701a      	strb	r2, [r3, #0]
		MRT_saveFlagValue(FC_STATE_FLIGHT);
 800195a:	2004      	movs	r0, #4
 800195c:	f001 fcc8 	bl	80032f0 <MRT_saveFlagValue>

		//If applicable, update apogee flag
		if (ejection_stage_flag >= DROGUE_DESCENT){
 8001960:	4b21      	ldr	r3, [pc, #132]	; (80019e8 <StartWatchDog+0x11c>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d90e      	bls.n	8001986 <StartWatchDog+0xba>
			apogee_flag = 1;
 8001968:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <StartWatchDog+0x128>)
 800196a:	2201      	movs	r2, #1
 800196c:	701a      	strb	r2, [r3, #0]
			rtc_bckp_reg_apogee = apogee_flag;
 800196e:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <StartWatchDog+0x128>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	461a      	mov	r2, r3
 8001974:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <StartWatchDog+0x12c>)
 8001976:	601a      	str	r2, [r3, #0]
			ext_flash_apogee = apogee_flag;
 8001978:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <StartWatchDog+0x128>)
 800197a:	781a      	ldrb	r2, [r3, #0]
 800197c:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <StartWatchDog+0x130>)
 800197e:	701a      	strb	r2, [r3, #0]
			MRT_saveFlagValue(FC_STATE_APOGEE);
 8001980:	2003      	movs	r0, #3
 8001982:	f001 fcb5 	bl	80032f0 <MRT_saveFlagValue>
		}
	 }

	  //Check if it's sleep time
	  if (flagA==1){
 8001986:	4b1e      	ldr	r3, [pc, #120]	; (8001a00 <StartWatchDog+0x134>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d110      	bne.n	80019b0 <StartWatchDog+0xe4>
		//Update iwdg_flag
		iwdg_flag = 1;
 800198e:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <StartWatchDog+0x138>)
 8001990:	2201      	movs	r2, #1
 8001992:	701a      	strb	r2, [r3, #0]
		rtc_bckp_reg_apogee = iwdg_flag;
 8001994:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <StartWatchDog+0x138>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <StartWatchDog+0x12c>)
 800199c:	601a      	str	r2, [r3, #0]
		ext_flash_apogee = iwdg_flag;
 800199e:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <StartWatchDog+0x138>)
 80019a0:	781a      	ldrb	r2, [r3, #0]
 80019a2:	4b16      	ldr	r3, [pc, #88]	; (80019fc <StartWatchDog+0x130>)
 80019a4:	701a      	strb	r2, [r3, #0]
		MRT_saveFlagValue(FC_STATE_IWDG);
 80019a6:	2002      	movs	r0, #2
 80019a8:	f001 fca2 	bl	80032f0 <MRT_saveFlagValue>

		//Reset to deactivate IWDG
		NVIC_SystemReset();
 80019ac:	f7ff fdf0 	bl	8001590 <__NVIC_SystemReset>
	  }

	  MRT_checkThreadStates();
 80019b0:	f000 f850 	bl	8001a54 <MRT_checkThreadStates>

	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 80019b4:	2200      	movs	r2, #0
 80019b6:	2104      	movs	r1, #4
 80019b8:	4803      	ldr	r0, [pc, #12]	; (80019c8 <StartWatchDog+0xfc>)
 80019ba:	f009 f80b 	bl	800a9d4 <HAL_GPIO_WritePin>

	  osDelay(1000/WD_FREQ);
 80019be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019c2:	f00e f8d7 	bl	800fb74 <osDelay>
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 80019c6:	e787      	b.n	80018d8 <StartWatchDog+0xc>
 80019c8:	40020800 	.word	0x40020800
 80019cc:	20000385 	.word	0x20000385
 80019d0:	20000386 	.word	0x20000386
 80019d4:	20000387 	.word	0x20000387
 80019d8:	20000388 	.word	0x20000388
 80019dc:	20000300 	.word	0x20000300
 80019e0:	08018cd8 	.word	0x08018cd8
 80019e4:	20000304 	.word	0x20000304
 80019e8:	20000384 	.word	0x20000384
 80019ec:	20000358 	.word	0x20000358
 80019f0:	20000372 	.word	0x20000372
 80019f4:	20000383 	.word	0x20000383
 80019f8:	20000354 	.word	0x20000354
 80019fc:	20000371 	.word	0x20000371
 8001a00:	2000036c 	.word	0x2000036c
 8001a04:	20000382 	.word	0x20000382

08001a08 <StartPropulsion4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPropulsion4 */
void StartPropulsion4(void *argument)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPropulsion4 */

	//Add thread id to the list
	threadsID[4]=osThreadGetId();
 8001a10:	f00e f814 	bl	800fa3c <osThreadGetId>
 8001a14:	4603      	mov	r3, r0
 8001a16:	4a0c      	ldr	r2, [pc, #48]	; (8001a48 <StartPropulsion4+0x40>)
 8001a18:	6113      	str	r3, [r2, #16]

	#if !PROPULSION_THREAD
	osThreadExit();
	#endif

	if (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT){
 8001a1a:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <StartPropulsion4+0x44>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d103      	bne.n	8001a2a <StartPropulsion4+0x22>
 8001a22:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <StartPropulsion4+0x48>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d901      	bls.n	8001a2e <StartPropulsion4+0x26>
		osThreadExit();
 8001a2a:	f00e f870 	bl	800fb0e <osThreadExit>

  /* Infinite loop */
  for(;;)
  {
	  //Poll propulsion sensors
	  MRT_pollPropulsion();
 8001a2e:	f002 fd19 	bl	8004464 <MRT_pollPropulsion>

	  if (apogee_flag){
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <StartPropulsion4+0x44>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <StartPropulsion4+0x36>
		  osThreadExit();
 8001a3a:	f00e f868 	bl	800fb0e <osThreadExit>
	  }
	  else{
		  osDelay(1000/PRE_APOGEE_POLL_FREQ);
 8001a3e:	2014      	movs	r0, #20
 8001a40:	f00e f898 	bl	800fb74 <osDelay>
	  MRT_pollPropulsion();
 8001a44:	e7f3      	b.n	8001a2e <StartPropulsion4+0x26>
 8001a46:	bf00      	nop
 8001a48:	20005ae4 	.word	0x20005ae4
 8001a4c:	20000383 	.word	0x20000383
 8001a50:	20000384 	.word	0x20000384

08001a54 <MRT_checkThreadStates>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

//TODO private functions

void MRT_checkThreadStates(void){
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
	  //Check each thread state
	  #if THREAD_KEEPER

	  osThreadState_t thread_state;

	  for (int i=0; i < NUMBER_OF_THREADS;i++){
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
 8001a5e:	e055      	b.n	8001b0c <MRT_checkThreadStates+0xb8>

		  thread_state = osThreadGetState(threadsID[i]);
 8001a60:	4a2e      	ldr	r2, [pc, #184]	; (8001b1c <MRT_checkThreadStates+0xc8>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f00d fff3 	bl	800fa54 <osThreadGetState>
 8001a6e:	6038      	str	r0, [r7, #0]

		  if (thread_state == osThreadInactive ||
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d005      	beq.n	8001a82 <MRT_checkThreadStates+0x2e>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d002      	beq.n	8001a82 <MRT_checkThreadStates+0x2e>
			  thread_state == osThreadBlocked  ||
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	d128      	bne.n	8001ad4 <MRT_checkThreadStates+0x80>
			  thread_state == osThreadTerminated){

			  //Ejection thread
			  if (i==1 && ejection_stage_flag < LANDED){
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d10a      	bne.n	8001a9e <MRT_checkThreadStates+0x4a>
 8001a88:	4b25      	ldr	r3, [pc, #148]	; (8001b20 <MRT_checkThreadStates+0xcc>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b03      	cmp	r3, #3
 8001a8e:	d806      	bhi.n	8001a9e <MRT_checkThreadStates+0x4a>
				 osThreadResume(threadsID[i]);
 8001a90:	4a22      	ldr	r2, [pc, #136]	; (8001b1c <MRT_checkThreadStates+0xc8>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f00e f817 	bl	800facc <osThreadResume>
			  }

			  //Propulsion thread
			  if (i==4 && (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT)){
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d10f      	bne.n	8001ac4 <MRT_checkThreadStates+0x70>
 8001aa4:	4b1f      	ldr	r3, [pc, #124]	; (8001b24 <MRT_checkThreadStates+0xd0>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d103      	bne.n	8001ab4 <MRT_checkThreadStates+0x60>
 8001aac:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <MRT_checkThreadStates+0xcc>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d907      	bls.n	8001ac4 <MRT_checkThreadStates+0x70>
				  osThreadTerminate(threadsID[i]);
 8001ab4:	4a19      	ldr	r2, [pc, #100]	; (8001b1c <MRT_checkThreadStates+0xc8>)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f00e f82c 	bl	800fb1a <osThreadTerminate>
				  continue;
 8001ac2:	e020      	b.n	8001b06 <MRT_checkThreadStates+0xb2>
			  }
			  else {
				 //Resume otherwise
				 osThreadResume(threadsID[i]);
 8001ac4:	4a15      	ldr	r2, [pc, #84]	; (8001b1c <MRT_checkThreadStates+0xc8>)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f00d fffd 	bl	800facc <osThreadResume>
			  if (i==4 && (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT)){
 8001ad2:	e018      	b.n	8001b06 <MRT_checkThreadStates+0xb2>
			  }
		  }

		  else if (thread_state == osThreadError){
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ada:	d114      	bne.n	8001b06 <MRT_checkThreadStates+0xb2>
			  //If it's the propulsion thread
			  if (i==4 && (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT)){
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	d10f      	bne.n	8001b02 <MRT_checkThreadStates+0xae>
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <MRT_checkThreadStates+0xd0>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d103      	bne.n	8001af2 <MRT_checkThreadStates+0x9e>
 8001aea:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <MRT_checkThreadStates+0xcc>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d907      	bls.n	8001b02 <MRT_checkThreadStates+0xae>
				  osThreadTerminate(threadsID[i]);
 8001af2:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <MRT_checkThreadStates+0xc8>)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f00e f80d 	bl	800fb1a <osThreadTerminate>
				  continue;
 8001b00:	e001      	b.n	8001b06 <MRT_checkThreadStates+0xb2>
			  }
			  else{
				 //Reset otherwise
				 NVIC_SystemReset();
 8001b02:	f7ff fd45 	bl	8001590 <__NVIC_SystemReset>
	  for (int i=0; i < NUMBER_OF_THREADS;i++){
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	dda6      	ble.n	8001a60 <MRT_checkThreadStates+0xc>
		  else if (thread_state == osThreadReserved){ TODO not sure what is this state
		  }
		  */
	  }
	  #endif
}
 8001b12:	bf00      	nop
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20005ae4 	.word	0x20005ae4
 8001b20:	20000384 	.word	0x20000384
 8001b24:	20000383 	.word	0x20000383

08001b28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08e      	sub	sp, #56	; 0x38
 8001b2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	60da      	str	r2, [r3, #12]
 8001b3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	623b      	str	r3, [r7, #32]
 8001b42:	4bb5      	ldr	r3, [pc, #724]	; (8001e18 <MX_GPIO_Init+0x2f0>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4ab4      	ldr	r2, [pc, #720]	; (8001e18 <MX_GPIO_Init+0x2f0>)
 8001b48:	f043 0310 	orr.w	r3, r3, #16
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4bb2      	ldr	r3, [pc, #712]	; (8001e18 <MX_GPIO_Init+0x2f0>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f003 0310 	and.w	r3, r3, #16
 8001b56:	623b      	str	r3, [r7, #32]
 8001b58:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
 8001b5e:	4bae      	ldr	r3, [pc, #696]	; (8001e18 <MX_GPIO_Init+0x2f0>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4aad      	ldr	r2, [pc, #692]	; (8001e18 <MX_GPIO_Init+0x2f0>)
 8001b64:	f043 0304 	orr.w	r3, r3, #4
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4bab      	ldr	r3, [pc, #684]	; (8001e18 <MX_GPIO_Init+0x2f0>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	61fb      	str	r3, [r7, #28]
 8001b74:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	61bb      	str	r3, [r7, #24]
 8001b7a:	4ba7      	ldr	r3, [pc, #668]	; (8001e18 <MX_GPIO_Init+0x2f0>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	4aa6      	ldr	r2, [pc, #664]	; (8001e18 <MX_GPIO_Init+0x2f0>)
 8001b80:	f043 0320 	orr.w	r3, r3, #32
 8001b84:	6313      	str	r3, [r2, #48]	; 0x30
 8001b86:	4ba4      	ldr	r3, [pc, #656]	; (8001e18 <MX_GPIO_Init+0x2f0>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	f003 0320 	and.w	r3, r3, #32
 8001b8e:	61bb      	str	r3, [r7, #24]
 8001b90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	4ba0      	ldr	r3, [pc, #640]	; (8001e18 <MX_GPIO_Init+0x2f0>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a9f      	ldr	r2, [pc, #636]	; (8001e18 <MX_GPIO_Init+0x2f0>)
 8001b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b9d      	ldr	r3, [pc, #628]	; (8001e18 <MX_GPIO_Init+0x2f0>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	4b99      	ldr	r3, [pc, #612]	; (8001e18 <MX_GPIO_Init+0x2f0>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	4a98      	ldr	r2, [pc, #608]	; (8001e18 <MX_GPIO_Init+0x2f0>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbe:	4b96      	ldr	r3, [pc, #600]	; (8001e18 <MX_GPIO_Init+0x2f0>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	4b92      	ldr	r3, [pc, #584]	; (8001e18 <MX_GPIO_Init+0x2f0>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4a91      	ldr	r2, [pc, #580]	; (8001e18 <MX_GPIO_Init+0x2f0>)
 8001bd4:	f043 0302 	orr.w	r3, r3, #2
 8001bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bda:	4b8f      	ldr	r3, [pc, #572]	; (8001e18 <MX_GPIO_Init+0x2f0>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	4b8b      	ldr	r3, [pc, #556]	; (8001e18 <MX_GPIO_Init+0x2f0>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	4a8a      	ldr	r2, [pc, #552]	; (8001e18 <MX_GPIO_Init+0x2f0>)
 8001bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf6:	4b88      	ldr	r3, [pc, #544]	; (8001e18 <MX_GPIO_Init+0x2f0>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	4b84      	ldr	r3, [pc, #528]	; (8001e18 <MX_GPIO_Init+0x2f0>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	4a83      	ldr	r2, [pc, #524]	; (8001e18 <MX_GPIO_Init+0x2f0>)
 8001c0c:	f043 0308 	orr.w	r3, r3, #8
 8001c10:	6313      	str	r3, [r2, #48]	; 0x30
 8001c12:	4b81      	ldr	r3, [pc, #516]	; (8001e18 <MX_GPIO_Init+0x2f0>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f248 4184 	movw	r1, #33924	; 0x8484
 8001c24:	487d      	ldr	r0, [pc, #500]	; (8001e1c <MX_GPIO_Init+0x2f4>)
 8001c26:	f008 fed5 	bl	800a9d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8001c30:	487b      	ldr	r0, [pc, #492]	; (8001e20 <MX_GPIO_Init+0x2f8>)
 8001c32:	f008 fecf 	bl	800a9d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 8001c36:	2200      	movs	r2, #0
 8001c38:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001c3c:	4879      	ldr	r0, [pc, #484]	; (8001e24 <MX_GPIO_Init+0x2fc>)
 8001c3e:	f008 fec9 	bl	800a9d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2108      	movs	r1, #8
 8001c46:	4878      	ldr	r0, [pc, #480]	; (8001e28 <MX_GPIO_Init+0x300>)
 8001c48:	f008 fec4 	bl	800a9d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f645 2126 	movw	r1, #23078	; 0x5a26
 8001c52:	4876      	ldr	r0, [pc, #472]	; (8001e2c <MX_GPIO_Init+0x304>)
 8001c54:	f008 febe 	bl	800a9d4 <HAL_GPIO_WritePin>
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin, GPIO_PIN_RESET);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8001c5e:	4874      	ldr	r0, [pc, #464]	; (8001e30 <MX_GPIO_Init+0x308>)
 8001c60:	f008 feb8 	bl	800a9d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8001c64:	2200      	movs	r2, #0
 8001c66:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 8001c6a:	4872      	ldr	r0, [pc, #456]	; (8001e34 <MX_GPIO_Init+0x30c>)
 8001c6c:	f008 feb2 	bl	800a9d4 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 8001c70:	f248 4384 	movw	r3, #33924	; 0x8484
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c76:	2301      	movs	r3, #1
 8001c78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c86:	4619      	mov	r1, r3
 8001c88:	4864      	ldr	r0, [pc, #400]	; (8001e1c <MX_GPIO_Init+0x2f4>)
 8001c8a:	f008 fcdf 	bl	800a64c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001c8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c94:	2301      	movs	r3, #1
 8001c96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	485e      	ldr	r0, [pc, #376]	; (8001e20 <MX_GPIO_Init+0x2f8>)
 8001ca8:	f008 fcd0 	bl	800a64c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 8001cac:	2301      	movs	r3, #1
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cb0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 8001cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4858      	ldr	r0, [pc, #352]	; (8001e24 <MX_GPIO_Init+0x2fc>)
 8001cc2:	f008 fcc3 	bl	800a64c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 8001cc6:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4851      	ldr	r0, [pc, #324]	; (8001e24 <MX_GPIO_Init+0x2fc>)
 8001ce0:	f008 fcb4 	bl	800a64c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 8001ce4:	2308      	movs	r3, #8
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 8001cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	484b      	ldr	r0, [pc, #300]	; (8001e28 <MX_GPIO_Init+0x300>)
 8001cfc:	f008 fca6 	bl	800a64c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8001d00:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d06:	2300      	movs	r3, #0
 8001d08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d12:	4619      	mov	r1, r3
 8001d14:	4843      	ldr	r0, [pc, #268]	; (8001e24 <MX_GPIO_Init+0x2fc>)
 8001d16:	f008 fc99 	bl	800a64c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 8001d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4840      	ldr	r0, [pc, #256]	; (8001e30 <MX_GPIO_Init+0x308>)
 8001d2e:	f008 fc8d 	bl	800a64c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 8001d32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 8001d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d44:	4619      	mov	r1, r3
 8001d46:	4836      	ldr	r0, [pc, #216]	; (8001e20 <MX_GPIO_Init+0x2f8>)
 8001d48:	f008 fc80 	bl	800a64c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 8001d4c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d52:	2301      	movs	r3, #1
 8001d54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d62:	4619      	mov	r1, r3
 8001d64:	482e      	ldr	r0, [pc, #184]	; (8001e20 <MX_GPIO_Init+0x2f8>)
 8001d66:	f008 fc71 	bl	800a64c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|IN_EJ_Main_Cont_Pin
 8001d6a:	f242 4319 	movw	r3, #9241	; 0x2419
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
                          |IN_EJ_Drogue_Cont_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d70:	2300      	movs	r3, #0
 8001d72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	482b      	ldr	r0, [pc, #172]	; (8001e2c <MX_GPIO_Init+0x304>)
 8001d80:	f008 fc64 	bl	800a64c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 8001d84:	f645 2326 	movw	r3, #23078	; 0x5a26
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d92:	2300      	movs	r3, #0
 8001d94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4823      	ldr	r0, [pc, #140]	; (8001e2c <MX_GPIO_Init+0x304>)
 8001d9e:	f008 fc55 	bl	800a64c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 8001da2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001da8:	2300      	movs	r3, #0
 8001daa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db4:	4619      	mov	r1, r3
 8001db6:	4819      	ldr	r0, [pc, #100]	; (8001e1c <MX_GPIO_Init+0x2f4>)
 8001db8:	f008 fc48 	bl	800a64c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB8 PBPin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin;
 8001dbc:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4816      	ldr	r0, [pc, #88]	; (8001e30 <MX_GPIO_Init+0x308>)
 8001dd6:	f008 fc39 	bl	800a64c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8001dda:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de0:	2301      	movs	r3, #1
 8001de2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de8:	2300      	movs	r3, #0
 8001dea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df0:	4619      	mov	r1, r3
 8001df2:	4810      	ldr	r0, [pc, #64]	; (8001e34 <MX_GPIO_Init+0x30c>)
 8001df4:	f008 fc2a 	bl	800a64c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 8001df8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8001e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4809      	ldr	r0, [pc, #36]	; (8001e34 <MX_GPIO_Init+0x30c>)
 8001e0e:	f008 fc1d 	bl	800a64c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 8001e12:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001e16:	e00f      	b.n	8001e38 <MX_GPIO_Init+0x310>
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40021400 	.word	0x40021400
 8001e24:	40020800 	.word	0x40020800
 8001e28:	40020000 	.word	0x40020000
 8001e2c:	40021800 	.word	0x40021800
 8001e30:	40020400 	.word	0x40020400
 8001e34:	40020c00 	.word	0x40020c00
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e3a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4807      	ldr	r0, [pc, #28]	; (8001e68 <MX_GPIO_Init+0x340>)
 8001e4c:	f008 fbfe 	bl	800a64c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001e50:	2200      	movs	r2, #0
 8001e52:	2105      	movs	r1, #5
 8001e54:	2006      	movs	r0, #6
 8001e56:	f008 fbc1 	bl	800a5dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001e5a:	2006      	movs	r0, #6
 8001e5c:	f008 fbda 	bl	800a614 <HAL_NVIC_EnableIRQ>

}
 8001e60:	bf00      	nop
 8001e62:	3738      	adds	r7, #56	; 0x38
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40021800 	.word	0x40021800

08001e6c <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001e70:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <MX_I2C2_Init+0x74>)
 8001e72:	4a1c      	ldr	r2, [pc, #112]	; (8001ee4 <MX_I2C2_Init+0x78>)
 8001e74:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001e76:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <MX_I2C2_Init+0x74>)
 8001e78:	4a1b      	ldr	r2, [pc, #108]	; (8001ee8 <MX_I2C2_Init+0x7c>)
 8001e7a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e7c:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <MX_I2C2_Init+0x74>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001e82:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <MX_I2C2_Init+0x74>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e88:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <MX_I2C2_Init+0x74>)
 8001e8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e8e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e90:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <MX_I2C2_Init+0x74>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001e96:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <MX_I2C2_Init+0x74>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e9c:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <MX_I2C2_Init+0x74>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ea2:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <MX_I2C2_Init+0x74>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ea8:	480d      	ldr	r0, [pc, #52]	; (8001ee0 <MX_I2C2_Init+0x74>)
 8001eaa:	f008 fdc5 	bl	800aa38 <HAL_I2C_Init>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001eb4:	f000 f9dc 	bl	8002270 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4809      	ldr	r0, [pc, #36]	; (8001ee0 <MX_I2C2_Init+0x74>)
 8001ebc:	f009 fdb1 	bl	800ba22 <HAL_I2CEx_ConfigAnalogFilter>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001ec6:	f000 f9d3 	bl	8002270 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4804      	ldr	r0, [pc, #16]	; (8001ee0 <MX_I2C2_Init+0x74>)
 8001ece:	f009 fde4 	bl	800ba9a <HAL_I2CEx_ConfigDigitalFilter>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001ed8:	f000 f9ca 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001edc:	bf00      	nop
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20005b5c 	.word	0x20005b5c
 8001ee4:	40005800 	.word	0x40005800
 8001ee8:	000186a0 	.word	0x000186a0

08001eec <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001ef0:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <MX_I2C3_Init+0x74>)
 8001ef2:	4a1c      	ldr	r2, [pc, #112]	; (8001f64 <MX_I2C3_Init+0x78>)
 8001ef4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001ef6:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <MX_I2C3_Init+0x74>)
 8001ef8:	4a1b      	ldr	r2, [pc, #108]	; (8001f68 <MX_I2C3_Init+0x7c>)
 8001efa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001efc:	4b18      	ldr	r3, [pc, #96]	; (8001f60 <MX_I2C3_Init+0x74>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001f02:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <MX_I2C3_Init+0x74>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f08:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <MX_I2C3_Init+0x74>)
 8001f0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f0e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f10:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <MX_I2C3_Init+0x74>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001f16:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <MX_I2C3_Init+0x74>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f1c:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <MX_I2C3_Init+0x74>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f22:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <MX_I2C3_Init+0x74>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001f28:	480d      	ldr	r0, [pc, #52]	; (8001f60 <MX_I2C3_Init+0x74>)
 8001f2a:	f008 fd85 	bl	800aa38 <HAL_I2C_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001f34:	f000 f99c 	bl	8002270 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4809      	ldr	r0, [pc, #36]	; (8001f60 <MX_I2C3_Init+0x74>)
 8001f3c:	f009 fd71 	bl	800ba22 <HAL_I2CEx_ConfigAnalogFilter>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001f46:	f000 f993 	bl	8002270 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4804      	ldr	r0, [pc, #16]	; (8001f60 <MX_I2C3_Init+0x74>)
 8001f4e:	f009 fda4 	bl	800ba9a <HAL_I2CEx_ConfigDigitalFilter>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001f58:	f000 f98a 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001f5c:	bf00      	nop
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20005b08 	.word	0x20005b08
 8001f64:	40005c00 	.word	0x40005c00
 8001f68:	000186a0 	.word	0x000186a0

08001f6c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08c      	sub	sp, #48	; 0x30
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 031c 	add.w	r3, r7, #28
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a42      	ldr	r2, [pc, #264]	; (8002094 <HAL_I2C_MspInit+0x128>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d12d      	bne.n	8001fea <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61bb      	str	r3, [r7, #24]
 8001f92:	4b41      	ldr	r3, [pc, #260]	; (8002098 <HAL_I2C_MspInit+0x12c>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a40      	ldr	r2, [pc, #256]	; (8002098 <HAL_I2C_MspInit+0x12c>)
 8001f98:	f043 0302 	orr.w	r3, r3, #2
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9e:	4b3e      	ldr	r3, [pc, #248]	; (8002098 <HAL_I2C_MspInit+0x12c>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	61bb      	str	r3, [r7, #24]
 8001fa8:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001faa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fb0:	2312      	movs	r3, #18
 8001fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001fbc:	2304      	movs	r3, #4
 8001fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc0:	f107 031c 	add.w	r3, r7, #28
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4835      	ldr	r0, [pc, #212]	; (800209c <HAL_I2C_MspInit+0x130>)
 8001fc8:	f008 fb40 	bl	800a64c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
 8001fd0:	4b31      	ldr	r3, [pc, #196]	; (8002098 <HAL_I2C_MspInit+0x12c>)
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	4a30      	ldr	r2, [pc, #192]	; (8002098 <HAL_I2C_MspInit+0x12c>)
 8001fd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fda:	6413      	str	r3, [r2, #64]	; 0x40
 8001fdc:	4b2e      	ldr	r3, [pc, #184]	; (8002098 <HAL_I2C_MspInit+0x12c>)
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001fe8:	e050      	b.n	800208c <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a2c      	ldr	r2, [pc, #176]	; (80020a0 <HAL_I2C_MspInit+0x134>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d14b      	bne.n	800208c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	4b27      	ldr	r3, [pc, #156]	; (8002098 <HAL_I2C_MspInit+0x12c>)
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffc:	4a26      	ldr	r2, [pc, #152]	; (8002098 <HAL_I2C_MspInit+0x12c>)
 8001ffe:	f043 0304 	orr.w	r3, r3, #4
 8002002:	6313      	str	r3, [r2, #48]	; 0x30
 8002004:	4b24      	ldr	r3, [pc, #144]	; (8002098 <HAL_I2C_MspInit+0x12c>)
 8002006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	4b20      	ldr	r3, [pc, #128]	; (8002098 <HAL_I2C_MspInit+0x12c>)
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	4a1f      	ldr	r2, [pc, #124]	; (8002098 <HAL_I2C_MspInit+0x12c>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6313      	str	r3, [r2, #48]	; 0x30
 8002020:	4b1d      	ldr	r3, [pc, #116]	; (8002098 <HAL_I2C_MspInit+0x12c>)
 8002022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800202c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002032:	2312      	movs	r3, #18
 8002034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002036:	2301      	movs	r3, #1
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203a:	2303      	movs	r3, #3
 800203c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800203e:	2304      	movs	r3, #4
 8002040:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002042:	f107 031c 	add.w	r3, r7, #28
 8002046:	4619      	mov	r1, r3
 8002048:	4816      	ldr	r0, [pc, #88]	; (80020a4 <HAL_I2C_MspInit+0x138>)
 800204a:	f008 faff 	bl	800a64c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800204e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002054:	2312      	movs	r3, #18
 8002056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002058:	2301      	movs	r3, #1
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205c:	2303      	movs	r3, #3
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002060:	2304      	movs	r3, #4
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	4619      	mov	r1, r3
 800206a:	480f      	ldr	r0, [pc, #60]	; (80020a8 <HAL_I2C_MspInit+0x13c>)
 800206c:	f008 faee 	bl	800a64c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002070:	2300      	movs	r3, #0
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	4b08      	ldr	r3, [pc, #32]	; (8002098 <HAL_I2C_MspInit+0x12c>)
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	4a07      	ldr	r2, [pc, #28]	; (8002098 <HAL_I2C_MspInit+0x12c>)
 800207a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800207e:	6413      	str	r3, [r2, #64]	; 0x40
 8002080:	4b05      	ldr	r3, [pc, #20]	; (8002098 <HAL_I2C_MspInit+0x12c>)
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	68bb      	ldr	r3, [r7, #8]
}
 800208c:	bf00      	nop
 800208e:	3730      	adds	r7, #48	; 0x30
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40005800 	.word	0x40005800
 8002098:	40023800 	.word	0x40023800
 800209c:	40020400 	.word	0x40020400
 80020a0:	40005c00 	.word	0x40005c00
 80020a4:	40020800 	.word	0x40020800
 80020a8:	40020000 	.word	0x40020000

080020ac <main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int main(void){
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
	MRT_STM_Init();
 80020b0:	f000 f894 	bl	80021dc <MRT_STM_Init>
	println("\r\n\r\nSTM Init...OK");
 80020b4:	480c      	ldr	r0, [pc, #48]	; (80020e8 <main+0x3c>)
 80020b6:	f7ff f809 	bl	80010cc <println>

	MRT_Init();
 80020ba:	f7ff f869 	bl	8001190 <MRT_Init>

	println("\r\n\r\n/****Starting FC****/\r\n\r\n");
 80020be:	480b      	ldr	r0, [pc, #44]	; (80020ec <main+0x40>)
 80020c0:	f7ff f804 	bl	80010cc <println>
	HAL_IWDG_Refresh(&hiwdg);
	buzz_startup_success();
 80020c4:	f7ff f84c 	bl	8001160 <buzz_startup_success>

	MRT_waitForLaunch();
 80020c8:	f000 f8aa 	bl	8002220 <MRT_waitForLaunch>
	//if (DEBUG) TESTING_LOOP(); //TODO remove

	//TODO I2C SENSORS (lsm and lps) SOMETIMES DON'T WANT TO WORK ANYMORE -> NEED TO RESET THE POWER (Enter quick standByMode?)

	//Initialize the os
	MX_FREERTOS_Init();
 80020cc:	f7ff fa76 	bl	80015bc <MX_FREERTOS_Init>

	//Starting the os
	println("\r\n/****Starting the OS****/\r\n");
 80020d0:	4807      	ldr	r0, [pc, #28]	; (80020f0 <main+0x44>)
 80020d2:	f7fe fffb 	bl	80010cc <println>
	osKernelStart();
 80020d6:	f00d fbf9 	bl	800f8cc <osKernelStart>

	println("SOMETHING WENT HORRIBLY WRONG, WAITING FOR WATCH DOG RESET");
 80020da:	4806      	ldr	r0, [pc, #24]	; (80020f4 <main+0x48>)
 80020dc:	f7fe fff6 	bl	80010cc <println>
	HAL_IWDG_Refresh(&hiwdg);
	MRT_Deinit();
 80020e0:	f7ff f86c 	bl	80011bc <MRT_Deinit>
	while (1){}
 80020e4:	e7fe      	b.n	80020e4 <main+0x38>
 80020e6:	bf00      	nop
 80020e8:	08018d00 	.word	0x08018d00
 80020ec:	08018d14 	.word	0x08018d14
 80020f0:	08018d34 	.word	0x08018d34
 80020f4:	08018d54 	.word	0x08018d54

080020f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b094      	sub	sp, #80	; 0x50
 80020fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020fe:	f107 0320 	add.w	r3, r7, #32
 8002102:	2230      	movs	r2, #48	; 0x30
 8002104:	2100      	movs	r1, #0
 8002106:	4618      	mov	r0, r3
 8002108:	f010 fe0c 	bl	8012d24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800210c:	f107 030c 	add.w	r3, r7, #12
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800211c:	2300      	movs	r3, #0
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	4b2c      	ldr	r3, [pc, #176]	; (80021d4 <SystemClock_Config+0xdc>)
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	4a2b      	ldr	r2, [pc, #172]	; (80021d4 <SystemClock_Config+0xdc>)
 8002126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212a:	6413      	str	r3, [r2, #64]	; 0x40
 800212c:	4b29      	ldr	r3, [pc, #164]	; (80021d4 <SystemClock_Config+0xdc>)
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002138:	2300      	movs	r3, #0
 800213a:	607b      	str	r3, [r7, #4]
 800213c:	4b26      	ldr	r3, [pc, #152]	; (80021d8 <SystemClock_Config+0xe0>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a25      	ldr	r2, [pc, #148]	; (80021d8 <SystemClock_Config+0xe0>)
 8002142:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002146:	6013      	str	r3, [r2, #0]
 8002148:	4b23      	ldr	r3, [pc, #140]	; (80021d8 <SystemClock_Config+0xe0>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002154:	2309      	movs	r3, #9
 8002156:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002158:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800215e:	2301      	movs	r3, #1
 8002160:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002162:	2302      	movs	r3, #2
 8002164:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002166:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800216a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800216c:	2308      	movs	r3, #8
 800216e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002170:	23b4      	movs	r3, #180	; 0xb4
 8002172:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002174:	2302      	movs	r3, #2
 8002176:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002178:	2303      	movs	r3, #3
 800217a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800217c:	f107 0320 	add.w	r3, r7, #32
 8002180:	4618      	mov	r0, r3
 8002182:	f009 fd57 	bl	800bc34 <HAL_RCC_OscConfig>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800218c:	f000 f870 	bl	8002270 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002190:	f009 fd00 	bl	800bb94 <HAL_PWREx_EnableOverDrive>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800219a:	f000 f869 	bl	8002270 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800219e:	230f      	movs	r3, #15
 80021a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021a2:	2302      	movs	r3, #2
 80021a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80021b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80021b6:	f107 030c 	add.w	r3, r7, #12
 80021ba:	2105      	movs	r1, #5
 80021bc:	4618      	mov	r0, r3
 80021be:	f009 ffb1 	bl	800c124 <HAL_RCC_ClockConfig>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80021c8:	f000 f852 	bl	8002270 <Error_Handler>
  }
}
 80021cc:	bf00      	nop
 80021ce:	3750      	adds	r7, #80	; 0x50
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40007000 	.word	0x40007000

080021dc <MRT_STM_Init>:

/* USER CODE BEGIN 4 */

void MRT_STM_Init(void){
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
	HAL_Init();
 80021e0:	f007 fcaa 	bl	8009b38 <HAL_Init>
	SystemClock_Config();
 80021e4:	f7ff ff88 	bl	80020f8 <SystemClock_Config>

	MX_GPIO_Init();
 80021e8:	f7ff fc9e 	bl	8001b28 <MX_GPIO_Init>
	MX_ADC1_Init();
 80021ec:	f7ff f93a 	bl	8001464 <MX_ADC1_Init>
	MX_I2C2_Init();
 80021f0:	f7ff fe3c 	bl	8001e6c <MX_I2C2_Init>
	MX_I2C3_Init();
 80021f4:	f7ff fe7a 	bl	8001eec <MX_I2C3_Init>
	MX_SPI2_Init();
 80021f8:	f000 fab8 	bl	800276c <MX_SPI2_Init>
	MX_SPI4_Init();
 80021fc:	f000 faec 	bl	80027d8 <MX_SPI4_Init>
	MX_SPI5_Init();
 8002200:	f000 fb20 	bl	8002844 <MX_SPI5_Init>
	MX_TIM2_Init();
 8002204:	f000 fce0 	bl	8002bc8 <MX_TIM2_Init>
	MX_UART8_Init();
 8002208:	f000 fdac 	bl	8002d64 <MX_UART8_Init>
	MX_USART3_UART_Init();
 800220c:	f000 fdd4 	bl	8002db8 <MX_USART3_UART_Init>
	MX_USART6_UART_Init();
 8002210:	f000 fdfc 	bl	8002e0c <MX_USART6_UART_Init>
	MX_RTC_Init();
 8002214:	f000 f832 	bl	800227c <MX_RTC_Init>
	//MX_IWDG_Init(); TODO ADDED IN MRT_Init()
	MX_FATFS_Init();
 8002218:	f00d fa2a 	bl	800f670 <MX_FATFS_Init>
}
 800221c:	bf00      	nop
 800221e:	bd80      	pop	{r7, pc}

08002220 <MRT_waitForLaunch>:

void MRT_waitForLaunch(void){
 8002220:	b580      	push	{r7, lr}
 8002222:	b0c2      	sub	sp, #264	; 0x108
 8002224:	af00      	add	r7, sp, #0

	println("Waiting for launch command from ground station\r\n");
 8002226:	4807      	ldr	r0, [pc, #28]	; (8002244 <MRT_waitForLaunch+0x24>)
 8002228:	f7fe ff50 	bl	80010cc <println>

	char radio_buffer[RADIO_BUFFER_SIZE];
	radio_command cmd = -1;
 800222c:	23ff      	movs	r3, #255	; 0xff
 800222e:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

	//Poll propulsion until launch command sent
	while((XTEND_ || SRADIO_) && ejection_stage_flag == PAD && wu_flag == 0){
 8002232:	bf00      	nop
		HAL_Delay(1000/PRE_APOGEE_SEND_FREQ);
	}


	//Send acknowledgement
	MRT_radio_tx((char*) "LAUNCH COMMAND RECEIVED"); //TODO CHECK AT WHAT JASPER DID
 8002234:	4804      	ldr	r0, [pc, #16]	; (8002248 <MRT_waitForLaunch+0x28>)
 8002236:	f007 fc3f 	bl	8009ab8 <MRT_radio_tx>
}
 800223a:	bf00      	nop
 800223c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	08018d90 	.word	0x08018d90
 8002248:	08018dc4 	.word	0x08018dc4

0800224c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a04      	ldr	r2, [pc, #16]	; (800226c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d101      	bne.n	8002262 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800225e:	f007 fc8d 	bl	8009b7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40001000 	.word	0x40001000

08002270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002274:	b672      	cpsid	i
}
 8002276:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002278:	e7fe      	b.n	8002278 <Error_Handler+0x8>
	...

0800227c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b090      	sub	sp, #64	; 0x40
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002282:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	605a      	str	r2, [r3, #4]
 800228c:	609a      	str	r2, [r3, #8]
 800228e:	60da      	str	r2, [r3, #12]
 8002290:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002292:	2300      	movs	r3, #0
 8002294:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8002296:	463b      	mov	r3, r7
 8002298:	2228      	movs	r2, #40	; 0x28
 800229a:	2100      	movs	r1, #0
 800229c:	4618      	mov	r0, r3
 800229e:	f010 fd41 	bl	8012d24 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80022a2:	4b3a      	ldr	r3, [pc, #232]	; (800238c <MX_RTC_Init+0x110>)
 80022a4:	4a3a      	ldr	r2, [pc, #232]	; (8002390 <MX_RTC_Init+0x114>)
 80022a6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80022a8:	4b38      	ldr	r3, [pc, #224]	; (800238c <MX_RTC_Init+0x110>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80022ae:	4b37      	ldr	r3, [pc, #220]	; (800238c <MX_RTC_Init+0x110>)
 80022b0:	227f      	movs	r2, #127	; 0x7f
 80022b2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80022b4:	4b35      	ldr	r3, [pc, #212]	; (800238c <MX_RTC_Init+0x110>)
 80022b6:	22ff      	movs	r2, #255	; 0xff
 80022b8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80022ba:	4b34      	ldr	r3, [pc, #208]	; (800238c <MX_RTC_Init+0x110>)
 80022bc:	2200      	movs	r2, #0
 80022be:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80022c0:	4b32      	ldr	r3, [pc, #200]	; (800238c <MX_RTC_Init+0x110>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80022c6:	4b31      	ldr	r3, [pc, #196]	; (800238c <MX_RTC_Init+0x110>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80022cc:	482f      	ldr	r0, [pc, #188]	; (800238c <MX_RTC_Init+0x110>)
 80022ce:	f00a fb13 	bl	800c8f8 <HAL_RTC_Init>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80022d8:	f7ff ffca 	bl	8002270 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80022dc:	2300      	movs	r3, #0
 80022de:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80022ee:	2300      	movs	r3, #0
 80022f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80022f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022fa:	2201      	movs	r2, #1
 80022fc:	4619      	mov	r1, r3
 80022fe:	4823      	ldr	r0, [pc, #140]	; (800238c <MX_RTC_Init+0x110>)
 8002300:	f00a fb8b 	bl	800ca1a <HAL_RTC_SetTime>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800230a:	f7ff ffb1 	bl	8002270 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800230e:	2301      	movs	r3, #1
 8002310:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002314:	2301      	movs	r3, #1
 8002316:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 800231a:	2301      	movs	r3, #1
 800231c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8002320:	2300      	movs	r3, #0
 8002322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002326:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800232a:	2201      	movs	r2, #1
 800232c:	4619      	mov	r1, r3
 800232e:	4817      	ldr	r0, [pc, #92]	; (800238c <MX_RTC_Init+0x110>)
 8002330:	f00a fc8e 	bl	800cc50 <HAL_RTC_SetDate>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800233a:	f7ff ff99 	bl	8002270 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800233e:	2300      	movs	r3, #0
 8002340:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8002342:	2301      	movs	r3, #1
 8002344:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002346:	2300      	movs	r3, #0
 8002348:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800234a:	2300      	movs	r3, #0
 800234c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002352:	2300      	movs	r3, #0
 8002354:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800235a:	2300      	movs	r3, #0
 800235c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002362:	2301      	movs	r3, #1
 8002364:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002368:	f44f 7380 	mov.w	r3, #256	; 0x100
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800236e:	463b      	mov	r3, r7
 8002370:	2201      	movs	r2, #1
 8002372:	4619      	mov	r1, r3
 8002374:	4805      	ldr	r0, [pc, #20]	; (800238c <MX_RTC_Init+0x110>)
 8002376:	f00a fd61 	bl	800ce3c <HAL_RTC_SetAlarm_IT>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002380:	f7ff ff76 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002384:	bf00      	nop
 8002386:	3740      	adds	r7, #64	; 0x40
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20005bb0 	.word	0x20005bb0
 8002390:	40002800 	.word	0x40002800

08002394 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08e      	sub	sp, #56	; 0x38
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800239c:	f107 0308 	add.w	r3, r7, #8
 80023a0:	2230      	movs	r2, #48	; 0x30
 80023a2:	2100      	movs	r1, #0
 80023a4:	4618      	mov	r0, r3
 80023a6:	f010 fcbd 	bl	8012d24 <memset>
  if(rtcHandle->Instance==RTC)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a10      	ldr	r2, [pc, #64]	; (80023f0 <HAL_RTC_MspInit+0x5c>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d119      	bne.n	80023e8 <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80023b4:	2320      	movs	r3, #32
 80023b6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80023b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023bc:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023be:	f107 0308 	add.w	r3, r7, #8
 80023c2:	4618      	mov	r0, r3
 80023c4:	f00a f8da 	bl	800c57c <HAL_RCCEx_PeriphCLKConfig>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80023ce:	f7ff ff4f 	bl	8002270 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023d2:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <HAL_RTC_MspInit+0x60>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 80023d8:	2200      	movs	r2, #0
 80023da:	2105      	movs	r1, #5
 80023dc:	2029      	movs	r0, #41	; 0x29
 80023de:	f008 f8fd 	bl	800a5dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80023e2:	2029      	movs	r0, #41	; 0x29
 80023e4:	f008 f916 	bl	800a614 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80023e8:	bf00      	nop
 80023ea:	3738      	adds	r7, #56	; 0x38
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40002800 	.word	0x40002800
 80023f4:	42470e3c 	.word	0x42470e3c

080023f8 <MRT_rtc_Init>:


//**************************************************//
//FUNCTIONS

void MRT_rtc_Init(void){
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
	println("\r\nMRT RTC Init");
 80023fc:	4816      	ldr	r0, [pc, #88]	; (8002458 <MRT_rtc_Init+0x60>)
 80023fe:	f7fe fe65 	bl	80010cc <println>

	print("\tSetting RTC to previous time...");
 8002402:	4816      	ldr	r0, [pc, #88]	; (800245c <MRT_rtc_Init+0x64>)
 8002404:	f7fe fe80 	bl	8001108 <print>
	MRT_set_rtc(prev_hour,prev_min,prev_sec);
 8002408:	4b15      	ldr	r3, [pc, #84]	; (8002460 <MRT_rtc_Init+0x68>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	4a15      	ldr	r2, [pc, #84]	; (8002464 <MRT_rtc_Init+0x6c>)
 800240e:	7811      	ldrb	r1, [r2, #0]
 8002410:	4a15      	ldr	r2, [pc, #84]	; (8002468 <MRT_rtc_Init+0x70>)
 8002412:	7812      	ldrb	r2, [r2, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f000 f8c3 	bl	80025a0 <MRT_set_rtc>
	println("OK");
 800241a:	4814      	ldr	r0, [pc, #80]	; (800246c <MRT_rtc_Init+0x74>)
 800241c:	f7fe fe56 	bl	80010cc <println>

	#if ALARM_A_ACTIVE
		print("\tSetting alarmA...");
 8002420:	4813      	ldr	r0, [pc, #76]	; (8002470 <MRT_rtc_Init+0x78>)
 8002422:	f7fe fe71 	bl	8001108 <print>
		HAL_Delay(2000); //To make sure that when you set the Alarm it doesn't go off automatically
 8002426:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800242a:	f007 fbc7 	bl	8009bbc <HAL_Delay>
		if (wu_flag == 0){
 800242e:	4b11      	ldr	r3, [pc, #68]	; (8002474 <MRT_rtc_Init+0x7c>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d105      	bne.n	8002442 <MRT_rtc_Init+0x4a>
			MRT_set_alarmA(PRE_WHEN_SLEEP_TIME_HOURS, PRE_WHEN_SLEEP_TIME_MIN, PRE_WHEN_SLEEP_TIME_SEC);
 8002436:	2200      	movs	r2, #0
 8002438:	211e      	movs	r1, #30
 800243a:	2004      	movs	r0, #4
 800243c:	f000 f8f6 	bl	800262c <MRT_set_alarmA>
 8002440:	e004      	b.n	800244c <MRT_rtc_Init+0x54>
		}
		else{
			MRT_set_alarmA(POST_WHEN_SLEEP_TIME_HOURS, POST_WHEN_SLEEP_TIME_MIN, POST_WHEN_SLEEP_TIME_SEC);
 8002442:	2200      	movs	r2, #0
 8002444:	2100      	movs	r1, #0
 8002446:	200e      	movs	r0, #14
 8002448:	f000 f8f0 	bl	800262c <MRT_set_alarmA>
		}
		println("OK");
 800244c:	4807      	ldr	r0, [pc, #28]	; (800246c <MRT_rtc_Init+0x74>)
 800244e:	f7fe fe3d 	bl	80010cc <println>
	#endif
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	08018ddc 	.word	0x08018ddc
 800245c:	08018dec 	.word	0x08018dec
 8002460:	20000385 	.word	0x20000385
 8002464:	20000386 	.word	0x20000386
 8002468:	20000387 	.word	0x20000387
 800246c:	08018e10 	.word	0x08018e10
 8002470:	08018e14 	.word	0x08018e14
 8002474:	20000381 	.word	0x20000381

08002478 <MRT_clear_alarms_flags>:



void MRT_clear_alarms_flags(void){
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	print("Clearing the flags\r\n");
 800247c:	482a      	ldr	r0, [pc, #168]	; (8002528 <MRT_clear_alarms_flags+0xb0>)
 800247e:	f7fe fe43 	bl	8001108 <print>

	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002482:	4b2a      	ldr	r3, [pc, #168]	; (800252c <MRT_clear_alarms_flags+0xb4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	22ca      	movs	r2, #202	; 0xca
 8002488:	625a      	str	r2, [r3, #36]	; 0x24
 800248a:	4b28      	ldr	r3, [pc, #160]	; (800252c <MRT_clear_alarms_flags+0xb4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2253      	movs	r2, #83	; 0x53
 8002490:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8002492:	e008      	b.n	80024a6 <MRT_clear_alarms_flags+0x2e>
		//print("Clearing alarm A flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002494:	4b25      	ldr	r3, [pc, #148]	; (800252c <MRT_clear_alarms_flags+0xb4>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	b2da      	uxtb	r2, r3
 800249c:	4b23      	ldr	r3, [pc, #140]	; (800252c <MRT_clear_alarms_flags+0xb4>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80024a4:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 80024a6:	4b21      	ldr	r3, [pc, #132]	; (800252c <MRT_clear_alarms_flags+0xb4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1ef      	bne.n	8002494 <MRT_clear_alarms_flags+0x1c>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 80024b4:	4b1d      	ldr	r3, [pc, #116]	; (800252c <MRT_clear_alarms_flags+0xb4>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	22ff      	movs	r2, #255	; 0xff
 80024ba:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80024bc:	4b1c      	ldr	r3, [pc, #112]	; (8002530 <MRT_clear_alarms_flags+0xb8>)
 80024be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024c2:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 80024c4:	4b19      	ldr	r3, [pc, #100]	; (800252c <MRT_clear_alarms_flags+0xb4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	22ca      	movs	r2, #202	; 0xca
 80024ca:	625a      	str	r2, [r3, #36]	; 0x24
 80024cc:	4b17      	ldr	r3, [pc, #92]	; (800252c <MRT_clear_alarms_flags+0xb4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2253      	movs	r2, #83	; 0x53
 80024d2:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 80024d4:	e008      	b.n	80024e8 <MRT_clear_alarms_flags+0x70>
		//print("Clearing alarm B flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 80024d6:	4b15      	ldr	r3, [pc, #84]	; (800252c <MRT_clear_alarms_flags+0xb4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	4b13      	ldr	r3, [pc, #76]	; (800252c <MRT_clear_alarms_flags+0xb4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f462 7220 	orn	r2, r2, #640	; 0x280
 80024e6:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 80024e8:	4b10      	ldr	r3, [pc, #64]	; (800252c <MRT_clear_alarms_flags+0xb4>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1ef      	bne.n	80024d6 <MRT_clear_alarms_flags+0x5e>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 80024f6:	4b0d      	ldr	r3, [pc, #52]	; (800252c <MRT_clear_alarms_flags+0xb4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	22ff      	movs	r2, #255	; 0xff
 80024fc:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80024fe:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <MRT_clear_alarms_flags+0xb8>)
 8002500:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002504:	615a      	str	r2, [r3, #20]

	/* Clear the WU FLAG */
	//print("Clearing wake up flag\r\n");
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8002506:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <MRT_clear_alarms_flags+0xbc>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <MRT_clear_alarms_flags+0xbc>)
 800250c:	f043 0304 	orr.w	r3, r3, #4
 8002510:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//print("Clearing RTC wake up flag\r\n");
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8002512:	4b06      	ldr	r3, [pc, #24]	; (800252c <MRT_clear_alarms_flags+0xb4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	b2da      	uxtb	r2, r3
 800251a:	4b04      	ldr	r3, [pc, #16]	; (800252c <MRT_clear_alarms_flags+0xb4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002522:	60da      	str	r2, [r3, #12]
}
 8002524:	bf00      	nop
 8002526:	bd80      	pop	{r7, pc}
 8002528:	08018e28 	.word	0x08018e28
 800252c:	20005bb0 	.word	0x20005bb0
 8002530:	40013c00 	.word	0x40013c00
 8002534:	40007000 	.word	0x40007000

08002538 <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode(uint32_t seconds){
 8002538:	b580      	push	{r7, lr}
 800253a:	b08c      	sub	sp, #48	; 0x30
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
	print("\r\n/*****StandByMode*****/\r\n");
 8002540:	4813      	ldr	r0, [pc, #76]	; (8002590 <MRT_StandByMode+0x58>)
 8002542:	f7fe fde1 	bl	8001108 <print>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8002546:	f44f 7080 	mov.w	r0, #256	; 0x100
 800254a:	f009 fae5 	bl	800bb18 <HAL_PWR_EnableWakeUpPin>

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_clear_alarms_flags();
 800254e:	f7ff ff93 	bl	8002478 <MRT_clear_alarms_flags>

	//Setup RTC wake up timer
	println("Setting up RTCW");
 8002552:	4810      	ldr	r0, [pc, #64]	; (8002594 <MRT_StandByMode+0x5c>)
 8002554:	f7fe fdba 	bl	80010cc <println>
	  Error_Handler();
	}
	*/

	char msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds",(int) seconds);
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	f107 030c 	add.w	r3, r7, #12
 800255e:	490e      	ldr	r1, [pc, #56]	; (8002598 <MRT_StandByMode+0x60>)
 8002560:	4618      	mov	r0, r3
 8002562:	f011 fedb 	bl	801431c <siprintf>
	println(msg);
 8002566:	f107 030c 	add.w	r3, r7, #12
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe fdae 	bl	80010cc <println>

	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8002570:	2204      	movs	r2, #4
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4809      	ldr	r0, [pc, #36]	; (800259c <MRT_StandByMode+0x64>)
 8002576:	f00a fe79 	bl	800d26c <HAL_RTCEx_SetWakeUpTimer_IT>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <MRT_StandByMode+0x4c>
	{
	  Error_Handler();
 8002580:	f7ff fe76 	bl	8002270 <Error_Handler>
	}

	HAL_PWR_EnterSTANDBYMode();
 8002584:	f009 faee 	bl	800bb64 <HAL_PWR_EnterSTANDBYMode>
}
 8002588:	bf00      	nop
 800258a:	3730      	adds	r7, #48	; 0x30
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	08018e40 	.word	0x08018e40
 8002594:	08018e5c 	.word	0x08018e5c
 8002598:	08018e6c 	.word	0x08018e6c
 800259c:	20005bb0 	.word	0x20005bb0

080025a0 <MRT_set_rtc>:




void MRT_set_rtc(uint8_t h, uint8_t m, uint8_t s){
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b088      	sub	sp, #32
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	71fb      	strb	r3, [r7, #7]
 80025aa:	460b      	mov	r3, r1
 80025ac:	71bb      	strb	r3, [r7, #6]
 80025ae:	4613      	mov	r3, r2
 80025b0:	717b      	strb	r3, [r7, #5]
	  /** Initialize RTC and set the Time and Date
	  */
	  RTC_TimeTypeDef sTime;

	  sTime.Hours = int_to_hex_table[h];
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	4a1a      	ldr	r2, [pc, #104]	; (8002620 <MRT_set_rtc+0x80>)
 80025b6:	5cd3      	ldrb	r3, [r2, r3]
 80025b8:	733b      	strb	r3, [r7, #12]
	  sTime.Minutes = int_to_hex_table[m];
 80025ba:	79bb      	ldrb	r3, [r7, #6]
 80025bc:	4a18      	ldr	r2, [pc, #96]	; (8002620 <MRT_set_rtc+0x80>)
 80025be:	5cd3      	ldrb	r3, [r2, r3]
 80025c0:	737b      	strb	r3, [r7, #13]
	  sTime.Seconds = int_to_hex_table[s];
 80025c2:	797b      	ldrb	r3, [r7, #5]
 80025c4:	4a16      	ldr	r2, [pc, #88]	; (8002620 <MRT_set_rtc+0x80>)
 80025c6:	5cd3      	ldrb	r3, [r2, r3]
 80025c8:	73bb      	strb	r3, [r7, #14]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61bb      	str	r3, [r7, #24]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61fb      	str	r3, [r7, #28]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80025d2:	f107 030c 	add.w	r3, r7, #12
 80025d6:	2201      	movs	r2, #1
 80025d8:	4619      	mov	r1, r3
 80025da:	4812      	ldr	r0, [pc, #72]	; (8002624 <MRT_set_rtc+0x84>)
 80025dc:	f00a fa1d 	bl	800ca1a <HAL_RTC_SetTime>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MRT_set_rtc+0x4a>
	  {
	    Error_Handler();
 80025e6:	f7ff fe43 	bl	8002270 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80025ea:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <MRT_set_rtc+0x88>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 80025f0:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <MRT_set_rtc+0x88>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x1;
 80025f6:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <MRT_set_rtc+0x88>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x0;
 80025fc:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <MRT_set_rtc+0x88>)
 80025fe:	2200      	movs	r2, #0
 8002600:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002602:	2201      	movs	r2, #1
 8002604:	4908      	ldr	r1, [pc, #32]	; (8002628 <MRT_set_rtc+0x88>)
 8002606:	4807      	ldr	r0, [pc, #28]	; (8002624 <MRT_set_rtc+0x84>)
 8002608:	f00a fb22 	bl	800cc50 <HAL_RTC_SetDate>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MRT_set_rtc+0x76>
	  {
	    Error_Handler();
 8002612:	f7ff fe2d 	bl	8002270 <Error_Handler>
	  }
}
 8002616:	bf00      	nop
 8002618:	3720      	adds	r7, #32
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000024 	.word	0x20000024
 8002624:	20005bb0 	.word	0x20005bb0
 8002628:	2000031c 	.word	0x2000031c

0800262c <MRT_set_alarmA>:



void MRT_set_alarmA(uint8_t h, uint8_t m, uint8_t s){
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	71fb      	strb	r3, [r7, #7]
 8002636:	460b      	mov	r3, r1
 8002638:	71bb      	strb	r3, [r7, #6]
 800263a:	4613      	mov	r3, r2
 800263c:	717b      	strb	r3, [r7, #5]
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = int_to_hex_table[h];
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	4a1a      	ldr	r2, [pc, #104]	; (80026ac <MRT_set_alarmA+0x80>)
 8002642:	5cd2      	ldrb	r2, [r2, r3]
 8002644:	4b1a      	ldr	r3, [pc, #104]	; (80026b0 <MRT_set_alarmA+0x84>)
 8002646:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = int_to_hex_table[m];
 8002648:	79bb      	ldrb	r3, [r7, #6]
 800264a:	4a18      	ldr	r2, [pc, #96]	; (80026ac <MRT_set_alarmA+0x80>)
 800264c:	5cd2      	ldrb	r2, [r2, r3]
 800264e:	4b18      	ldr	r3, [pc, #96]	; (80026b0 <MRT_set_alarmA+0x84>)
 8002650:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = int_to_hex_table[s];
 8002652:	797b      	ldrb	r3, [r7, #5]
 8002654:	4a15      	ldr	r2, [pc, #84]	; (80026ac <MRT_set_alarmA+0x80>)
 8002656:	5cd2      	ldrb	r2, [r2, r3]
 8002658:	4b15      	ldr	r3, [pc, #84]	; (80026b0 <MRT_set_alarmA+0x84>)
 800265a:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 800265c:	4b14      	ldr	r3, [pc, #80]	; (80026b0 <MRT_set_alarmA+0x84>)
 800265e:	2200      	movs	r2, #0
 8002660:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002662:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <MRT_set_alarmA+0x84>)
 8002664:	2200      	movs	r2, #0
 8002666:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002668:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <MRT_set_alarmA+0x84>)
 800266a:	2200      	movs	r2, #0
 800266c:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800266e:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <MRT_set_alarmA+0x84>)
 8002670:	2200      	movs	r2, #0
 8002672:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002674:	4b0e      	ldr	r3, [pc, #56]	; (80026b0 <MRT_set_alarmA+0x84>)
 8002676:	2200      	movs	r2, #0
 8002678:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800267a:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <MRT_set_alarmA+0x84>)
 800267c:	2200      	movs	r2, #0
 800267e:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 8002680:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <MRT_set_alarmA+0x84>)
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 8002688:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <MRT_set_alarmA+0x84>)
 800268a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800268e:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002690:	2201      	movs	r2, #1
 8002692:	4907      	ldr	r1, [pc, #28]	; (80026b0 <MRT_set_alarmA+0x84>)
 8002694:	4807      	ldr	r0, [pc, #28]	; (80026b4 <MRT_set_alarmA+0x88>)
 8002696:	f00a fbd1 	bl	800ce3c <HAL_RTC_SetAlarm_IT>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MRT_set_alarmA+0x78>
	  {
	    Error_Handler();
 80026a0:	f7ff fde6 	bl	8002270 <Error_Handler>
	  }
}
 80026a4:	bf00      	nop
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20000024 	.word	0x20000024
 80026b0:	20000320 	.word	0x20000320
 80026b4:	20005bb0 	.word	0x20005bb0

080026b8 <MRT_RTC_backup_regs_Init>:
uint32_t* rtc_bckp_regs[NB_RTC_BCKP_REGS] = {&rtc_bckp_reg_reset, &rtc_bckp_reg_wu, &rtc_bckp_reg_iwdg, &rtc_bckp_reg_apogee, &rtc_bckp_reg_ejection_stage,
							  &rtc_bckp_reg_hour, &rtc_bckp_reg_min, &rtc_bckp_reg_sec, &rtc_bckp_reg_subsec};


//Get all the backup regs values (initialization)
void MRT_RTC_backup_regs_Init(void){
 80026b8:	b590      	push	{r4, r7, lr}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_RTC_BCKP_REGS; i++){
 80026be:	2300      	movs	r3, #0
 80026c0:	607b      	str	r3, [r7, #4]
 80026c2:	e00d      	b.n	80026e0 <MRT_RTC_backup_regs_Init+0x28>
		*rtc_bckp_regs[i] = MRT_RTC_getBackupReg(i);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	4909      	ldr	r1, [pc, #36]	; (80026f0 <MRT_RTC_backup_regs_Init+0x38>)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 80026d0:	4610      	mov	r0, r2
 80026d2:	f000 f80f 	bl	80026f4 <MRT_RTC_getBackupReg>
 80026d6:	4603      	mov	r3, r0
 80026d8:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < NB_RTC_BCKP_REGS; i++){
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3301      	adds	r3, #1
 80026de:	607b      	str	r3, [r7, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	ddee      	ble.n	80026c4 <MRT_RTC_backup_regs_Init+0xc>
	}
}
 80026e6:	bf00      	nop
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd90      	pop	{r4, r7, pc}
 80026f0:	20000000 	.word	0x20000000

080026f4 <MRT_RTC_getBackupReg>:
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
}

// gets the backup register value for the specified state
uint32_t MRT_RTC_getBackupReg(rtc_backup_reg state) {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	71fb      	strb	r3, [r7, #7]
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 80026fe:	4b0b      	ldr	r3, [pc, #44]	; (800272c <MRT_RTC_getBackupReg+0x38>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	22ca      	movs	r2, #202	; 0xca
 8002704:	625a      	str	r2, [r3, #36]	; 0x24
 8002706:	4b09      	ldr	r3, [pc, #36]	; (800272c <MRT_RTC_getBackupReg+0x38>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2253      	movs	r2, #83	; 0x53
 800270c:	625a      	str	r2, [r3, #36]	; 0x24
	uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, (uint32_t) state);
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	4619      	mov	r1, r3
 8002712:	4806      	ldr	r0, [pc, #24]	; (800272c <MRT_RTC_getBackupReg+0x38>)
 8002714:	f00a fedc 	bl	800d4d0 <HAL_RTCEx_BKUPRead>
 8002718:	60f8      	str	r0, [r7, #12]
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 800271a:	4b04      	ldr	r3, [pc, #16]	; (800272c <MRT_RTC_getBackupReg+0x38>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	22ff      	movs	r2, #255	; 0xff
 8002720:	625a      	str	r2, [r3, #36]	; 0x24
	return val;
 8002722:	68fb      	ldr	r3, [r7, #12]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20005bb0 	.word	0x20005bb0

08002730 <MRT_RTC_setBackupReg>:

// sets the backup register value for the specified state
void MRT_RTC_setBackupReg(rtc_backup_reg state, uint32_t value) {
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	6039      	str	r1, [r7, #0]
 800273a:	71fb      	strb	r3, [r7, #7]
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 800273c:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <MRT_RTC_setBackupReg+0x38>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	22ca      	movs	r2, #202	; 0xca
 8002742:	625a      	str	r2, [r3, #36]	; 0x24
 8002744:	4b08      	ldr	r3, [pc, #32]	; (8002768 <MRT_RTC_setBackupReg+0x38>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2253      	movs	r2, #83	; 0x53
 800274a:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_RTCEx_BKUPWrite(&hrtc, (uint32_t) state, value);
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	4619      	mov	r1, r3
 8002752:	4805      	ldr	r0, [pc, #20]	; (8002768 <MRT_RTC_setBackupReg+0x38>)
 8002754:	f00a fea2 	bl	800d49c <HAL_RTCEx_BKUPWrite>
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002758:	4b03      	ldr	r3, [pc, #12]	; (8002768 <MRT_RTC_setBackupReg+0x38>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	22ff      	movs	r2, #255	; 0xff
 800275e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002760:	bf00      	nop
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20005bb0 	.word	0x20005bb0

0800276c <MX_SPI2_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002770:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <MX_SPI2_Init+0x64>)
 8002772:	4a18      	ldr	r2, [pc, #96]	; (80027d4 <MX_SPI2_Init+0x68>)
 8002774:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002776:	4b16      	ldr	r3, [pc, #88]	; (80027d0 <MX_SPI2_Init+0x64>)
 8002778:	f44f 7282 	mov.w	r2, #260	; 0x104
 800277c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800277e:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <MX_SPI2_Init+0x64>)
 8002780:	2200      	movs	r2, #0
 8002782:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002784:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <MX_SPI2_Init+0x64>)
 8002786:	2200      	movs	r2, #0
 8002788:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800278a:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <MX_SPI2_Init+0x64>)
 800278c:	2200      	movs	r2, #0
 800278e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002790:	4b0f      	ldr	r3, [pc, #60]	; (80027d0 <MX_SPI2_Init+0x64>)
 8002792:	2200      	movs	r2, #0
 8002794:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002796:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <MX_SPI2_Init+0x64>)
 8002798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800279c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800279e:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <MX_SPI2_Init+0x64>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027a4:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <MX_SPI2_Init+0x64>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80027aa:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <MX_SPI2_Init+0x64>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027b0:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <MX_SPI2_Init+0x64>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80027b6:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <MX_SPI2_Init+0x64>)
 80027b8:	220a      	movs	r2, #10
 80027ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80027bc:	4804      	ldr	r0, [pc, #16]	; (80027d0 <MX_SPI2_Init+0x64>)
 80027be:	f00a fea9 	bl	800d514 <HAL_SPI_Init>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80027c8:	f7ff fd52 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80027cc:	bf00      	nop
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20005bd0 	.word	0x20005bd0
 80027d4:	40003800 	.word	0x40003800

080027d8 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80027dc:	4b17      	ldr	r3, [pc, #92]	; (800283c <MX_SPI4_Init+0x64>)
 80027de:	4a18      	ldr	r2, [pc, #96]	; (8002840 <MX_SPI4_Init+0x68>)
 80027e0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80027e2:	4b16      	ldr	r3, [pc, #88]	; (800283c <MX_SPI4_Init+0x64>)
 80027e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027e8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80027ea:	4b14      	ldr	r3, [pc, #80]	; (800283c <MX_SPI4_Init+0x64>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80027f0:	4b12      	ldr	r3, [pc, #72]	; (800283c <MX_SPI4_Init+0x64>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027f6:	4b11      	ldr	r3, [pc, #68]	; (800283c <MX_SPI4_Init+0x64>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027fc:	4b0f      	ldr	r3, [pc, #60]	; (800283c <MX_SPI4_Init+0x64>)
 80027fe:	2200      	movs	r2, #0
 8002800:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002802:	4b0e      	ldr	r3, [pc, #56]	; (800283c <MX_SPI4_Init+0x64>)
 8002804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002808:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800280a:	4b0c      	ldr	r3, [pc, #48]	; (800283c <MX_SPI4_Init+0x64>)
 800280c:	2200      	movs	r2, #0
 800280e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002810:	4b0a      	ldr	r3, [pc, #40]	; (800283c <MX_SPI4_Init+0x64>)
 8002812:	2200      	movs	r2, #0
 8002814:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002816:	4b09      	ldr	r3, [pc, #36]	; (800283c <MX_SPI4_Init+0x64>)
 8002818:	2200      	movs	r2, #0
 800281a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800281c:	4b07      	ldr	r3, [pc, #28]	; (800283c <MX_SPI4_Init+0x64>)
 800281e:	2200      	movs	r2, #0
 8002820:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8002822:	4b06      	ldr	r3, [pc, #24]	; (800283c <MX_SPI4_Init+0x64>)
 8002824:	220a      	movs	r2, #10
 8002826:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002828:	4804      	ldr	r0, [pc, #16]	; (800283c <MX_SPI4_Init+0x64>)
 800282a:	f00a fe73 	bl	800d514 <HAL_SPI_Init>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8002834:	f7ff fd1c 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002838:	bf00      	nop
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20005c80 	.word	0x20005c80
 8002840:	40013400 	.word	0x40013400

08002844 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8002848:	4b17      	ldr	r3, [pc, #92]	; (80028a8 <MX_SPI5_Init+0x64>)
 800284a:	4a18      	ldr	r2, [pc, #96]	; (80028ac <MX_SPI5_Init+0x68>)
 800284c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800284e:	4b16      	ldr	r3, [pc, #88]	; (80028a8 <MX_SPI5_Init+0x64>)
 8002850:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002854:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002856:	4b14      	ldr	r3, [pc, #80]	; (80028a8 <MX_SPI5_Init+0x64>)
 8002858:	2200      	movs	r2, #0
 800285a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800285c:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <MX_SPI5_Init+0x64>)
 800285e:	2200      	movs	r2, #0
 8002860:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002862:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <MX_SPI5_Init+0x64>)
 8002864:	2200      	movs	r2, #0
 8002866:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002868:	4b0f      	ldr	r3, [pc, #60]	; (80028a8 <MX_SPI5_Init+0x64>)
 800286a:	2200      	movs	r2, #0
 800286c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800286e:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <MX_SPI5_Init+0x64>)
 8002870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002874:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002876:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <MX_SPI5_Init+0x64>)
 8002878:	2200      	movs	r2, #0
 800287a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800287c:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <MX_SPI5_Init+0x64>)
 800287e:	2200      	movs	r2, #0
 8002880:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002882:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <MX_SPI5_Init+0x64>)
 8002884:	2200      	movs	r2, #0
 8002886:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002888:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <MX_SPI5_Init+0x64>)
 800288a:	2200      	movs	r2, #0
 800288c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800288e:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <MX_SPI5_Init+0x64>)
 8002890:	220a      	movs	r2, #10
 8002892:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002894:	4804      	ldr	r0, [pc, #16]	; (80028a8 <MX_SPI5_Init+0x64>)
 8002896:	f00a fe3d 	bl	800d514 <HAL_SPI_Init>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80028a0:	f7ff fce6 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80028a4:	bf00      	nop
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	20005c28 	.word	0x20005c28
 80028ac:	40015000 	.word	0x40015000

080028b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08e      	sub	sp, #56	; 0x38
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]
 80028c6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a4c      	ldr	r2, [pc, #304]	; (8002a00 <HAL_SPI_MspInit+0x150>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d12d      	bne.n	800292e <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	623b      	str	r3, [r7, #32]
 80028d6:	4b4b      	ldr	r3, [pc, #300]	; (8002a04 <HAL_SPI_MspInit+0x154>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	4a4a      	ldr	r2, [pc, #296]	; (8002a04 <HAL_SPI_MspInit+0x154>)
 80028dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028e0:	6413      	str	r3, [r2, #64]	; 0x40
 80028e2:	4b48      	ldr	r3, [pc, #288]	; (8002a04 <HAL_SPI_MspInit+0x154>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ea:	623b      	str	r3, [r7, #32]
 80028ec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	61fb      	str	r3, [r7, #28]
 80028f2:	4b44      	ldr	r3, [pc, #272]	; (8002a04 <HAL_SPI_MspInit+0x154>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	4a43      	ldr	r2, [pc, #268]	; (8002a04 <HAL_SPI_MspInit+0x154>)
 80028f8:	f043 0302 	orr.w	r3, r3, #2
 80028fc:	6313      	str	r3, [r2, #48]	; 0x30
 80028fe:	4b41      	ldr	r3, [pc, #260]	; (8002a04 <HAL_SPI_MspInit+0x154>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	61fb      	str	r3, [r7, #28]
 8002908:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800290a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002910:	2302      	movs	r3, #2
 8002912:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002914:	2300      	movs	r3, #0
 8002916:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002918:	2303      	movs	r3, #3
 800291a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800291c:	2305      	movs	r3, #5
 800291e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002924:	4619      	mov	r1, r3
 8002926:	4838      	ldr	r0, [pc, #224]	; (8002a08 <HAL_SPI_MspInit+0x158>)
 8002928:	f007 fe90 	bl	800a64c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800292c:	e064      	b.n	80029f8 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI4)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a36      	ldr	r2, [pc, #216]	; (8002a0c <HAL_SPI_MspInit+0x15c>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d12d      	bne.n	8002994 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002938:	2300      	movs	r3, #0
 800293a:	61bb      	str	r3, [r7, #24]
 800293c:	4b31      	ldr	r3, [pc, #196]	; (8002a04 <HAL_SPI_MspInit+0x154>)
 800293e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002940:	4a30      	ldr	r2, [pc, #192]	; (8002a04 <HAL_SPI_MspInit+0x154>)
 8002942:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002946:	6453      	str	r3, [r2, #68]	; 0x44
 8002948:	4b2e      	ldr	r3, [pc, #184]	; (8002a04 <HAL_SPI_MspInit+0x154>)
 800294a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002950:	61bb      	str	r3, [r7, #24]
 8002952:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	4b2a      	ldr	r3, [pc, #168]	; (8002a04 <HAL_SPI_MspInit+0x154>)
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295c:	4a29      	ldr	r2, [pc, #164]	; (8002a04 <HAL_SPI_MspInit+0x154>)
 800295e:	f043 0310 	orr.w	r3, r3, #16
 8002962:	6313      	str	r3, [r2, #48]	; 0x30
 8002964:	4b27      	ldr	r3, [pc, #156]	; (8002a04 <HAL_SPI_MspInit+0x154>)
 8002966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002968:	f003 0310 	and.w	r3, r3, #16
 800296c:	617b      	str	r3, [r7, #20]
 800296e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002970:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002976:	2302      	movs	r3, #2
 8002978:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297a:	2300      	movs	r3, #0
 800297c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800297e:	2303      	movs	r3, #3
 8002980:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002982:	2305      	movs	r3, #5
 8002984:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800298a:	4619      	mov	r1, r3
 800298c:	4820      	ldr	r0, [pc, #128]	; (8002a10 <HAL_SPI_MspInit+0x160>)
 800298e:	f007 fe5d 	bl	800a64c <HAL_GPIO_Init>
}
 8002992:	e031      	b.n	80029f8 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI5)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a1e      	ldr	r2, [pc, #120]	; (8002a14 <HAL_SPI_MspInit+0x164>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d12c      	bne.n	80029f8 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	613b      	str	r3, [r7, #16]
 80029a2:	4b18      	ldr	r3, [pc, #96]	; (8002a04 <HAL_SPI_MspInit+0x154>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	4a17      	ldr	r2, [pc, #92]	; (8002a04 <HAL_SPI_MspInit+0x154>)
 80029a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ac:	6453      	str	r3, [r2, #68]	; 0x44
 80029ae:	4b15      	ldr	r3, [pc, #84]	; (8002a04 <HAL_SPI_MspInit+0x154>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029b6:	613b      	str	r3, [r7, #16]
 80029b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <HAL_SPI_MspInit+0x154>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	4a10      	ldr	r2, [pc, #64]	; (8002a04 <HAL_SPI_MspInit+0x154>)
 80029c4:	f043 0320 	orr.w	r3, r3, #32
 80029c8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ca:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <HAL_SPI_MspInit+0x154>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	f003 0320 	and.w	r3, r3, #32
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80029d6:	f44f 7360 	mov.w	r3, #896	; 0x380
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029dc:	2302      	movs	r3, #2
 80029de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029e0:	2301      	movs	r3, #1
 80029e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e4:	2303      	movs	r3, #3
 80029e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80029e8:	2305      	movs	r3, #5
 80029ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029f0:	4619      	mov	r1, r3
 80029f2:	4809      	ldr	r0, [pc, #36]	; (8002a18 <HAL_SPI_MspInit+0x168>)
 80029f4:	f007 fe2a 	bl	800a64c <HAL_GPIO_Init>
}
 80029f8:	bf00      	nop
 80029fa:	3738      	adds	r7, #56	; 0x38
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40003800 	.word	0x40003800
 8002a04:	40023800 	.word	0x40023800
 8002a08:	40020400 	.word	0x40020400
 8002a0c:	40013400 	.word	0x40013400
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40015000 	.word	0x40015000
 8002a18:	40021400 	.word	0x40021400

08002a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	607b      	str	r3, [r7, #4]
 8002a26:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <HAL_MspInit+0x54>)
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	4a11      	ldr	r2, [pc, #68]	; (8002a70 <HAL_MspInit+0x54>)
 8002a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a30:	6453      	str	r3, [r2, #68]	; 0x44
 8002a32:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <HAL_MspInit+0x54>)
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a3a:	607b      	str	r3, [r7, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	603b      	str	r3, [r7, #0]
 8002a42:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <HAL_MspInit+0x54>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	4a0a      	ldr	r2, [pc, #40]	; (8002a70 <HAL_MspInit+0x54>)
 8002a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4e:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <HAL_MspInit+0x54>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	210f      	movs	r1, #15
 8002a5e:	f06f 0001 	mvn.w	r0, #1
 8002a62:	f007 fdbb 	bl	800a5dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40023800 	.word	0x40023800

08002a74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08c      	sub	sp, #48	; 0x30
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002a84:	2200      	movs	r2, #0
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	2036      	movs	r0, #54	; 0x36
 8002a8a:	f007 fda7 	bl	800a5dc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a8e:	2036      	movs	r0, #54	; 0x36
 8002a90:	f007 fdc0 	bl	800a614 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002a94:	2300      	movs	r3, #0
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	4b1f      	ldr	r3, [pc, #124]	; (8002b18 <HAL_InitTick+0xa4>)
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	4a1e      	ldr	r2, [pc, #120]	; (8002b18 <HAL_InitTick+0xa4>)
 8002a9e:	f043 0310 	orr.w	r3, r3, #16
 8002aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa4:	4b1c      	ldr	r3, [pc, #112]	; (8002b18 <HAL_InitTick+0xa4>)
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	f003 0310 	and.w	r3, r3, #16
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ab0:	f107 0210 	add.w	r2, r7, #16
 8002ab4:	f107 0314 	add.w	r3, r7, #20
 8002ab8:	4611      	mov	r1, r2
 8002aba:	4618      	mov	r0, r3
 8002abc:	f009 fd2c 	bl	800c518 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002ac0:	f009 fd02 	bl	800c4c8 <HAL_RCC_GetPCLK1Freq>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002acc:	4a13      	ldr	r2, [pc, #76]	; (8002b1c <HAL_InitTick+0xa8>)
 8002ace:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad2:	0c9b      	lsrs	r3, r3, #18
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002ad8:	4b11      	ldr	r3, [pc, #68]	; (8002b20 <HAL_InitTick+0xac>)
 8002ada:	4a12      	ldr	r2, [pc, #72]	; (8002b24 <HAL_InitTick+0xb0>)
 8002adc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002ade:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <HAL_InitTick+0xac>)
 8002ae0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ae4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002ae6:	4a0e      	ldr	r2, [pc, #56]	; (8002b20 <HAL_InitTick+0xac>)
 8002ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aea:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002aec:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <HAL_InitTick+0xac>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002af2:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_InitTick+0xac>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002af8:	4809      	ldr	r0, [pc, #36]	; (8002b20 <HAL_InitTick+0xac>)
 8002afa:	f00b fab3 	bl	800e064 <HAL_TIM_Base_Init>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d104      	bne.n	8002b0e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002b04:	4806      	ldr	r0, [pc, #24]	; (8002b20 <HAL_InitTick+0xac>)
 8002b06:	f00b fafd 	bl	800e104 <HAL_TIM_Base_Start_IT>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	e000      	b.n	8002b10 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3730      	adds	r7, #48	; 0x30
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	431bde83 	.word	0x431bde83
 8002b20:	20005cd8 	.word	0x20005cd8
 8002b24:	40001000 	.word	0x40001000

08002b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b2c:	e7fe      	b.n	8002b2c <NMI_Handler+0x4>

08002b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b32:	e7fe      	b.n	8002b32 <HardFault_Handler+0x4>

08002b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b38:	e7fe      	b.n	8002b38 <MemManage_Handler+0x4>

08002b3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b3e:	e7fe      	b.n	8002b3e <BusFault_Handler+0x4>

08002b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b44:	e7fe      	b.n	8002b44 <UsageFault_Handler+0x4>

08002b46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b46:	b480      	push	{r7}
 8002b48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002b58:	2001      	movs	r0, #1
 8002b5a:	f007 ff55 	bl	800aa08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
	...

08002b64 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002b68:	4802      	ldr	r0, [pc, #8]	; (8002b74 <RTC_Alarm_IRQHandler+0x10>)
 8002b6a:	f00a fa9f 	bl	800d0ac <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20005bb0 	.word	0x20005bb0

08002b78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b7c:	4802      	ldr	r0, [pc, #8]	; (8002b88 <TIM6_DAC_IRQHandler+0x10>)
 8002b7e:	f00b fb8a 	bl	800e296 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20005cd8 	.word	0x20005cd8

08002b8c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	80fb      	strh	r3, [r7, #6]

}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <SystemInit+0x20>)
 8002baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bae:	4a05      	ldr	r2, [pc, #20]	; (8002bc4 <SystemInit+0x20>)
 8002bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08e      	sub	sp, #56	; 0x38
 8002bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	605a      	str	r2, [r3, #4]
 8002bd8:	609a      	str	r2, [r3, #8]
 8002bda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bdc:	f107 0320 	add.w	r3, r7, #32
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002be6:	1d3b      	adds	r3, r7, #4
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	609a      	str	r2, [r3, #8]
 8002bf0:	60da      	str	r2, [r3, #12]
 8002bf2:	611a      	str	r2, [r3, #16]
 8002bf4:	615a      	str	r2, [r3, #20]
 8002bf6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002bf8:	4b2d      	ldr	r3, [pc, #180]	; (8002cb0 <MX_TIM2_Init+0xe8>)
 8002bfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bfe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8002c00:	4b2b      	ldr	r3, [pc, #172]	; (8002cb0 <MX_TIM2_Init+0xe8>)
 8002c02:	2259      	movs	r2, #89	; 0x59
 8002c04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c06:	4b2a      	ldr	r3, [pc, #168]	; (8002cb0 <MX_TIM2_Init+0xe8>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 8002c0c:	4b28      	ldr	r3, [pc, #160]	; (8002cb0 <MX_TIM2_Init+0xe8>)
 8002c0e:	f240 128f 	movw	r2, #399	; 0x18f
 8002c12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c14:	4b26      	ldr	r3, [pc, #152]	; (8002cb0 <MX_TIM2_Init+0xe8>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c1a:	4b25      	ldr	r3, [pc, #148]	; (8002cb0 <MX_TIM2_Init+0xe8>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c20:	4823      	ldr	r0, [pc, #140]	; (8002cb0 <MX_TIM2_Init+0xe8>)
 8002c22:	f00b fa1f 	bl	800e064 <HAL_TIM_Base_Init>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002c2c:	f7ff fb20 	bl	8002270 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c34:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	481c      	ldr	r0, [pc, #112]	; (8002cb0 <MX_TIM2_Init+0xe8>)
 8002c3e:	f00b fcf5 	bl	800e62c <HAL_TIM_ConfigClockSource>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002c48:	f7ff fb12 	bl	8002270 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002c4c:	4818      	ldr	r0, [pc, #96]	; (8002cb0 <MX_TIM2_Init+0xe8>)
 8002c4e:	f00b fac9 	bl	800e1e4 <HAL_TIM_PWM_Init>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002c58:	f7ff fb0a 	bl	8002270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002c5c:	2320      	movs	r3, #32
 8002c5e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c60:	2300      	movs	r3, #0
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c64:	f107 0320 	add.w	r3, r7, #32
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4811      	ldr	r0, [pc, #68]	; (8002cb0 <MX_TIM2_Init+0xe8>)
 8002c6c:	f00c f8b8 	bl	800ede0 <HAL_TIMEx_MasterConfigSynchronization>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002c76:	f7ff fafb 	bl	8002270 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c7a:	2360      	movs	r3, #96	; 0x60
 8002c7c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8002c7e:	2364      	movs	r3, #100	; 0x64
 8002c80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c8a:	1d3b      	adds	r3, r7, #4
 8002c8c:	2208      	movs	r2, #8
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4807      	ldr	r0, [pc, #28]	; (8002cb0 <MX_TIM2_Init+0xe8>)
 8002c92:	f00b fc09 	bl	800e4a8 <HAL_TIM_PWM_ConfigChannel>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002c9c:	f7ff fae8 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002ca0:	4803      	ldr	r0, [pc, #12]	; (8002cb0 <MX_TIM2_Init+0xe8>)
 8002ca2:	f000 f827 	bl	8002cf4 <HAL_TIM_MspPostInit>

}
 8002ca6:	bf00      	nop
 8002ca8:	3738      	adds	r7, #56	; 0x38
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20005d20 	.word	0x20005d20

08002cb4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc4:	d10d      	bne.n	8002ce2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <HAL_TIM_Base_MspInit+0x3c>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	4a08      	ldr	r2, [pc, #32]	; (8002cf0 <HAL_TIM_Base_MspInit+0x3c>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd6:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <HAL_TIM_Base_MspInit+0x3c>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002ce2:	bf00      	nop
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40023800 	.word	0x40023800

08002cf4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cfc:	f107 030c 	add.w	r3, r7, #12
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	60da      	str	r2, [r3, #12]
 8002d0a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d14:	d11d      	bne.n	8002d52 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	4b10      	ldr	r3, [pc, #64]	; (8002d5c <HAL_TIM_MspPostInit+0x68>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	4a0f      	ldr	r2, [pc, #60]	; (8002d5c <HAL_TIM_MspPostInit+0x68>)
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	6313      	str	r3, [r2, #48]	; 0x30
 8002d26:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <HAL_TIM_MspPostInit+0x68>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	60bb      	str	r3, [r7, #8]
 8002d30:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8002d32:	2304      	movs	r3, #4
 8002d34:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d36:	2302      	movs	r3, #2
 8002d38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d42:	2301      	movs	r3, #1
 8002d44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8002d46:	f107 030c 	add.w	r3, r7, #12
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4804      	ldr	r0, [pc, #16]	; (8002d60 <HAL_TIM_MspPostInit+0x6c>)
 8002d4e:	f007 fc7d 	bl	800a64c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002d52:	bf00      	nop
 8002d54:	3720      	adds	r7, #32
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	40020000 	.word	0x40020000

08002d64 <MX_UART8_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART8 init function */
void MX_UART8_Init(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8002d68:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <MX_UART8_Init+0x4c>)
 8002d6a:	4a12      	ldr	r2, [pc, #72]	; (8002db4 <MX_UART8_Init+0x50>)
 8002d6c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8002d6e:	4b10      	ldr	r3, [pc, #64]	; (8002db0 <MX_UART8_Init+0x4c>)
 8002d70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d74:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8002d76:	4b0e      	ldr	r3, [pc, #56]	; (8002db0 <MX_UART8_Init+0x4c>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002d7c:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <MX_UART8_Init+0x4c>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002d82:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <MX_UART8_Init+0x4c>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002d88:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <MX_UART8_Init+0x4c>)
 8002d8a:	220c      	movs	r2, #12
 8002d8c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d8e:	4b08      	ldr	r3, [pc, #32]	; (8002db0 <MX_UART8_Init+0x4c>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d94:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <MX_UART8_Init+0x4c>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002d9a:	4805      	ldr	r0, [pc, #20]	; (8002db0 <MX_UART8_Init+0x4c>)
 8002d9c:	f00c f8b0 	bl	800ef00 <HAL_UART_Init>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8002da6:	f7ff fa63 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20005dac 	.word	0x20005dac
 8002db4:	40007c00 	.word	0x40007c00

08002db8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002dbc:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <MX_USART3_UART_Init+0x4c>)
 8002dbe:	4a12      	ldr	r2, [pc, #72]	; (8002e08 <MX_USART3_UART_Init+0x50>)
 8002dc0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002dc2:	4b10      	ldr	r3, [pc, #64]	; (8002e04 <MX_USART3_UART_Init+0x4c>)
 8002dc4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002dc8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002dca:	4b0e      	ldr	r3, [pc, #56]	; (8002e04 <MX_USART3_UART_Init+0x4c>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002dd0:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <MX_USART3_UART_Init+0x4c>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002dd6:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <MX_USART3_UART_Init+0x4c>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ddc:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <MX_USART3_UART_Init+0x4c>)
 8002dde:	220c      	movs	r2, #12
 8002de0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002de2:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <MX_USART3_UART_Init+0x4c>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002de8:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <MX_USART3_UART_Init+0x4c>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002dee:	4805      	ldr	r0, [pc, #20]	; (8002e04 <MX_USART3_UART_Init+0x4c>)
 8002df0:	f00c f886 	bl	800ef00 <HAL_UART_Init>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002dfa:	f7ff fa39 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20005d68 	.word	0x20005d68
 8002e08:	40004800 	.word	0x40004800

08002e0c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002e10:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <MX_USART6_UART_Init+0x4c>)
 8002e12:	4a12      	ldr	r2, [pc, #72]	; (8002e5c <MX_USART6_UART_Init+0x50>)
 8002e14:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002e16:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <MX_USART6_UART_Init+0x4c>)
 8002e18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002e1c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002e1e:	4b0e      	ldr	r3, [pc, #56]	; (8002e58 <MX_USART6_UART_Init+0x4c>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002e24:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <MX_USART6_UART_Init+0x4c>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002e2a:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <MX_USART6_UART_Init+0x4c>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002e30:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <MX_USART6_UART_Init+0x4c>)
 8002e32:	220c      	movs	r2, #12
 8002e34:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e36:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <MX_USART6_UART_Init+0x4c>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e3c:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <MX_USART6_UART_Init+0x4c>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002e42:	4805      	ldr	r0, [pc, #20]	; (8002e58 <MX_USART6_UART_Init+0x4c>)
 8002e44:	f00c f85c 	bl	800ef00 <HAL_UART_Init>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002e4e:	f7ff fa0f 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002e52:	bf00      	nop
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20005df0 	.word	0x20005df0
 8002e5c:	40011400 	.word	0x40011400

08002e60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08e      	sub	sp, #56	; 0x38
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	605a      	str	r2, [r3, #4]
 8002e72:	609a      	str	r2, [r3, #8]
 8002e74:	60da      	str	r2, [r3, #12]
 8002e76:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART8)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a4b      	ldr	r2, [pc, #300]	; (8002fac <HAL_UART_MspInit+0x14c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d12c      	bne.n	8002edc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002e82:	2300      	movs	r3, #0
 8002e84:	623b      	str	r3, [r7, #32]
 8002e86:	4b4a      	ldr	r3, [pc, #296]	; (8002fb0 <HAL_UART_MspInit+0x150>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	4a49      	ldr	r2, [pc, #292]	; (8002fb0 <HAL_UART_MspInit+0x150>)
 8002e8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e90:	6413      	str	r3, [r2, #64]	; 0x40
 8002e92:	4b47      	ldr	r3, [pc, #284]	; (8002fb0 <HAL_UART_MspInit+0x150>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e9a:	623b      	str	r3, [r7, #32]
 8002e9c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61fb      	str	r3, [r7, #28]
 8002ea2:	4b43      	ldr	r3, [pc, #268]	; (8002fb0 <HAL_UART_MspInit+0x150>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	4a42      	ldr	r2, [pc, #264]	; (8002fb0 <HAL_UART_MspInit+0x150>)
 8002ea8:	f043 0310 	orr.w	r3, r3, #16
 8002eac:	6313      	str	r3, [r2, #48]	; 0x30
 8002eae:	4b40      	ldr	r3, [pc, #256]	; (8002fb0 <HAL_UART_MspInit+0x150>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	61fb      	str	r3, [r7, #28]
 8002eb8:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002eca:	2308      	movs	r3, #8
 8002ecc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4837      	ldr	r0, [pc, #220]	; (8002fb4 <HAL_UART_MspInit+0x154>)
 8002ed6:	f007 fbb9 	bl	800a64c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002eda:	e063      	b.n	8002fa4 <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART3)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a35      	ldr	r2, [pc, #212]	; (8002fb8 <HAL_UART_MspInit+0x158>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d12d      	bne.n	8002f42 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61bb      	str	r3, [r7, #24]
 8002eea:	4b31      	ldr	r3, [pc, #196]	; (8002fb0 <HAL_UART_MspInit+0x150>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	4a30      	ldr	r2, [pc, #192]	; (8002fb0 <HAL_UART_MspInit+0x150>)
 8002ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ef6:	4b2e      	ldr	r3, [pc, #184]	; (8002fb0 <HAL_UART_MspInit+0x150>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002efe:	61bb      	str	r3, [r7, #24]
 8002f00:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	617b      	str	r3, [r7, #20]
 8002f06:	4b2a      	ldr	r3, [pc, #168]	; (8002fb0 <HAL_UART_MspInit+0x150>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	4a29      	ldr	r2, [pc, #164]	; (8002fb0 <HAL_UART_MspInit+0x150>)
 8002f0c:	f043 0308 	orr.w	r3, r3, #8
 8002f10:	6313      	str	r3, [r2, #48]	; 0x30
 8002f12:	4b27      	ldr	r3, [pc, #156]	; (8002fb0 <HAL_UART_MspInit+0x150>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8002f1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f24:	2302      	movs	r3, #2
 8002f26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f30:	2307      	movs	r3, #7
 8002f32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4820      	ldr	r0, [pc, #128]	; (8002fbc <HAL_UART_MspInit+0x15c>)
 8002f3c:	f007 fb86 	bl	800a64c <HAL_GPIO_Init>
}
 8002f40:	e030      	b.n	8002fa4 <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART6)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a1e      	ldr	r2, [pc, #120]	; (8002fc0 <HAL_UART_MspInit+0x160>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d12b      	bne.n	8002fa4 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	4b17      	ldr	r3, [pc, #92]	; (8002fb0 <HAL_UART_MspInit+0x150>)
 8002f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f54:	4a16      	ldr	r2, [pc, #88]	; (8002fb0 <HAL_UART_MspInit+0x150>)
 8002f56:	f043 0320 	orr.w	r3, r3, #32
 8002f5a:	6453      	str	r3, [r2, #68]	; 0x44
 8002f5c:	4b14      	ldr	r3, [pc, #80]	; (8002fb0 <HAL_UART_MspInit+0x150>)
 8002f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f60:	f003 0320 	and.w	r3, r3, #32
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <HAL_UART_MspInit+0x150>)
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f70:	4a0f      	ldr	r2, [pc, #60]	; (8002fb0 <HAL_UART_MspInit+0x150>)
 8002f72:	f043 0304 	orr.w	r3, r3, #4
 8002f76:	6313      	str	r3, [r2, #48]	; 0x30
 8002f78:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <HAL_UART_MspInit+0x150>)
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8002f84:	23c0      	movs	r3, #192	; 0xc0
 8002f86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f88:	2302      	movs	r3, #2
 8002f8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f90:	2303      	movs	r3, #3
 8002f92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002f94:	2308      	movs	r3, #8
 8002f96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4809      	ldr	r0, [pc, #36]	; (8002fc4 <HAL_UART_MspInit+0x164>)
 8002fa0:	f007 fb54 	bl	800a64c <HAL_GPIO_Init>
}
 8002fa4:	bf00      	nop
 8002fa6:	3738      	adds	r7, #56	; 0x38
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40007c00 	.word	0x40007c00
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	40004800 	.word	0x40004800
 8002fbc:	40020c00 	.word	0x40020c00
 8002fc0:	40011400 	.word	0x40011400
 8002fc4:	40020800 	.word	0x40020800

08002fc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002fc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003000 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002fcc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002fce:	e003      	b.n	8002fd8 <LoopCopyDataInit>

08002fd0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002fd0:	4b0c      	ldr	r3, [pc, #48]	; (8003004 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002fd2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002fd4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002fd6:	3104      	adds	r1, #4

08002fd8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002fd8:	480b      	ldr	r0, [pc, #44]	; (8003008 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002fda:	4b0c      	ldr	r3, [pc, #48]	; (800300c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002fdc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002fde:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002fe0:	d3f6      	bcc.n	8002fd0 <CopyDataInit>
  ldr  r2, =_sbss
 8002fe2:	4a0b      	ldr	r2, [pc, #44]	; (8003010 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002fe4:	e002      	b.n	8002fec <LoopFillZerobss>

08002fe6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002fe6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002fe8:	f842 3b04 	str.w	r3, [r2], #4

08002fec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002fec:	4b09      	ldr	r3, [pc, #36]	; (8003014 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002fee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ff0:	d3f9      	bcc.n	8002fe6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002ff2:	f7ff fdd7 	bl	8002ba4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ff6:	f00f fd17 	bl	8012a28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ffa:	f7ff f857 	bl	80020ac <main>
  bx  lr    
 8002ffe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003000:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003004:	0801afec 	.word	0x0801afec
  ldr  r0, =_sdata
 8003008:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800300c:	200002e4 	.word	0x200002e4
  ldr  r2, =_sbss
 8003010:	200002e4 	.word	0x200002e4
  ldr  r3, = _ebss
 8003014:	20006500 	.word	0x20006500

08003018 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003018:	e7fe      	b.n	8003018 <ADC_IRQHandler>
	...

0800301c <MRT_getContinuity>:
 * Checks the continuity of the gates
 *
 * returns a binary number in its decimal form. Each bit is the state of a gate.
 * bit3 bit2 bit1 bit0 = drogue1 drogue2 prop1 prop2
 */
uint8_t MRT_getContinuity(void){
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
	uint8_t drogue1 = HAL_GPIO_ReadPin(IN_EJ_Drogue_Cont_GPIO_Port, IN_EJ_Drogue_Cont_Pin);
 8003022:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003026:	4815      	ldr	r0, [pc, #84]	; (800307c <MRT_getContinuity+0x60>)
 8003028:	f007 fcbc 	bl	800a9a4 <HAL_GPIO_ReadPin>
 800302c:	4603      	mov	r3, r0
 800302e:	71fb      	strb	r3, [r7, #7]
	uint8_t drogue2 = HAL_GPIO_ReadPin(IN_EJ_Main_Cont_GPIO_Port, IN_EJ_Main_Cont_Pin);
 8003030:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003034:	4811      	ldr	r0, [pc, #68]	; (800307c <MRT_getContinuity+0x60>)
 8003036:	f007 fcb5 	bl	800a9a4 <HAL_GPIO_ReadPin>
 800303a:	4603      	mov	r3, r0
 800303c:	71bb      	strb	r3, [r7, #6]
	uint8_t prop1 = HAL_GPIO_ReadPin(IN_PyroValve_Cont_1_GPIO_Port, IN_PyroValve_Cont_1_Pin);
 800303e:	2101      	movs	r1, #1
 8003040:	480e      	ldr	r0, [pc, #56]	; (800307c <MRT_getContinuity+0x60>)
 8003042:	f007 fcaf 	bl	800a9a4 <HAL_GPIO_ReadPin>
 8003046:	4603      	mov	r3, r0
 8003048:	717b      	strb	r3, [r7, #5]
	uint8_t prop2 = HAL_GPIO_ReadPin(IN_PyroValve_Cont_2_GPIO_Port, IN_PyroValve_Cont_2_Pin);
 800304a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800304e:	480c      	ldr	r0, [pc, #48]	; (8003080 <MRT_getContinuity+0x64>)
 8003050:	f007 fca8 	bl	800a9a4 <HAL_GPIO_ReadPin>
 8003054:	4603      	mov	r3, r0
 8003056:	713b      	strb	r3, [r7, #4]
	uint8_t continuity = 8*drogue1 + 4*drogue2 + 2*prop1 + prop2;
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	005a      	lsls	r2, r3, #1
 800305c:	79bb      	ldrb	r3, [r7, #6]
 800305e:	4413      	add	r3, r2
 8003060:	005a      	lsls	r2, r3, #1
 8003062:	797b      	ldrb	r3, [r7, #5]
 8003064:	4413      	add	r3, r2
 8003066:	b2db      	uxtb	r3, r3
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	b2da      	uxtb	r2, r3
 800306c:	793b      	ldrb	r3, [r7, #4]
 800306e:	4413      	add	r3, r2
 8003070:	70fb      	strb	r3, [r7, #3]
	return continuity;
 8003072:	78fb      	ldrb	r3, [r7, #3]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40021800 	.word	0x40021800
 8003080:	40021400 	.word	0x40021400

08003084 <MRT_formatAvionics>:


// formats avionics telemetry string using sprintf
void MRT_formatAvionics(void) {
 8003084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003088:	b0a3      	sub	sp, #140	; 0x8c
 800308a:	af16      	add	r7, sp, #88	; 0x58
	memset(msg_buffer_av, 0, 200);
 800308c:	22c8      	movs	r2, #200	; 0xc8
 800308e:	2100      	movs	r1, #0
 8003090:	483c      	ldr	r0, [pc, #240]	; (8003184 <MRT_formatAvionics+0x100>)
 8003092:	f00f fe47 	bl	8012d24 <memset>
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
		hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 8003096:	4b3c      	ldr	r3, [pc, #240]	; (8003188 <MRT_formatAvionics+0x104>)
 8003098:	681b      	ldr	r3, [r3, #0]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 800309a:	4618      	mov	r0, r3
 800309c:	f7fd fa74 	bl	8000588 <__aeabi_f2d>
 80030a0:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
		hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 80030a4:	4b38      	ldr	r3, [pc, #224]	; (8003188 <MRT_formatAvionics+0x104>)
 80030a6:	685b      	ldr	r3, [r3, #4]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7fd fa6d 	bl	8000588 <__aeabi_f2d>
 80030ae:	e9c7 0108 	strd	r0, r1, [r7, #32]
		hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 80030b2:	4b35      	ldr	r3, [pc, #212]	; (8003188 <MRT_formatAvionics+0x104>)
 80030b4:	689b      	ldr	r3, [r3, #8]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fd fa66 	bl	8000588 <__aeabi_f2d>
 80030bc:	e9c7 0106 	strd	r0, r1, [r7, #24]
		hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 80030c0:	4b31      	ldr	r3, [pc, #196]	; (8003188 <MRT_formatAvionics+0x104>)
 80030c2:	68db      	ldr	r3, [r3, #12]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7fd fa5f 	bl	8000588 <__aeabi_f2d>
 80030ca:	e9c7 0104 	strd	r0, r1, [r7, #16]
		hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 80030ce:	4b2e      	ldr	r3, [pc, #184]	; (8003188 <MRT_formatAvionics+0x104>)
 80030d0:	691b      	ldr	r3, [r3, #16]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fd fa58 	bl	8000588 <__aeabi_f2d>
 80030d8:	e9c7 0102 	strd	r0, r1, [r7, #8]
		hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 80030dc:	4b2a      	ldr	r3, [pc, #168]	; (8003188 <MRT_formatAvionics+0x104>)
 80030de:	695b      	ldr	r3, [r3, #20]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7fd fa51 	bl	8000588 <__aeabi_f2d>
 80030e6:	e9c7 0100 	strd	r0, r1, [r7]
		hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 80030ea:	4b28      	ldr	r3, [pc, #160]	; (800318c <MRT_formatAvionics+0x108>)
 80030ec:	681b      	ldr	r3, [r3, #0]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fd fa4a 	bl	8000588 <__aeabi_f2d>
 80030f4:	4682      	mov	sl, r0
 80030f6:	468b      	mov	fp, r1
		hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 80030f8:	4b25      	ldr	r3, [pc, #148]	; (8003190 <MRT_formatAvionics+0x10c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fd fa43 	bl	8000588 <__aeabi_f2d>
 8003102:	4680      	mov	r8, r0
 8003104:	4689      	mov	r9, r1
		hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 8003106:	4b22      	ldr	r3, [pc, #136]	; (8003190 <MRT_formatAvionics+0x10c>)
 8003108:	685b      	ldr	r3, [r3, #4]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 800310a:	4618      	mov	r0, r3
 800310c:	f7fd fa3c 	bl	8000588 <__aeabi_f2d>
 8003110:	4604      	mov	r4, r0
 8003112:	460d      	mov	r5, r1
 8003114:	4b1f      	ldr	r3, [pc, #124]	; (8003194 <MRT_formatAvionics+0x110>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	461e      	mov	r6, r3
 800311a:	4b1f      	ldr	r3, [pc, #124]	; (8003198 <MRT_formatAvionics+0x114>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	4b1e      	ldr	r3, [pc, #120]	; (800319c <MRT_formatAvionics+0x118>)
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	4b1e      	ldr	r3, [pc, #120]	; (80031a0 <MRT_formatAvionics+0x11c>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	4619      	mov	r1, r3
 800312a:	4b1e      	ldr	r3, [pc, #120]	; (80031a4 <MRT_formatAvionics+0x120>)
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	9314      	str	r3, [sp, #80]	; 0x50
 8003130:	9113      	str	r1, [sp, #76]	; 0x4c
 8003132:	9212      	str	r2, [sp, #72]	; 0x48
 8003134:	9011      	str	r0, [sp, #68]	; 0x44
 8003136:	9610      	str	r6, [sp, #64]	; 0x40
 8003138:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 800313c:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8003140:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8003144:	ed97 7b00 	vldr	d7, [r7]
 8003148:	ed8d 7b08 	vstr	d7, [sp, #32]
 800314c:	ed97 7b02 	vldr	d7, [r7, #8]
 8003150:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003154:	ed97 7b04 	vldr	d7, [r7, #16]
 8003158:	ed8d 7b04 	vstr	d7, [sp, #16]
 800315c:	ed97 7b06 	vldr	d7, [r7, #24]
 8003160:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003164:	ed97 7b08 	vldr	d7, [r7, #32]
 8003168:	ed8d 7b00 	vstr	d7, [sp]
 800316c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003170:	490d      	ldr	r1, [pc, #52]	; (80031a8 <MRT_formatAvionics+0x124>)
 8003172:	4804      	ldr	r0, [pc, #16]	; (8003184 <MRT_formatAvionics+0x100>)
 8003174:	f011 f8d2 	bl	801431c <siprintf>
		prev_min, prev_sec, prev_subsec,
		gates_continuity,	ejection_stage_flag);
}
 8003178:	bf00      	nop
 800317a:	3734      	adds	r7, #52	; 0x34
 800317c:	46bd      	mov	sp, r7
 800317e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003182:	bf00      	nop
 8003184:	20005e34 	.word	0x20005e34
 8003188:	2000039c 	.word	0x2000039c
 800318c:	200003c8 	.word	0x200003c8
 8003190:	200003dc 	.word	0x200003dc
 8003194:	20000386 	.word	0x20000386
 8003198:	20000387 	.word	0x20000387
 800319c:	20000388 	.word	0x20000388
 80031a0:	2000036d 	.word	0x2000036d
 80031a4:	20000384 	.word	0x20000384
 80031a8:	08018e8c 	.word	0x08018e8c

080031ac <MRT_external_flash_Init>:


//**************************************************//
//FUNCTIONS

void MRT_external_flash_Init(void){
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0

	for (int i = 0; i < NB_OF_FLAGS; i++){
 80031b2:	2300      	movs	r3, #0
 80031b4:	607b      	str	r3, [r7, #4]
 80031b6:	e007      	b.n	80031c8 <MRT_external_flash_Init+0x1c>
		FLAGS_NULL_BUFFER[i] = 0; //Setup the flags null buffer for the correct number of values
 80031b8:	4a13      	ldr	r2, [pc, #76]	; (8003208 <MRT_external_flash_Init+0x5c>)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4413      	add	r3, r2
 80031be:	2200      	movs	r2, #0
 80031c0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	3301      	adds	r3, #1
 80031c6:	607b      	str	r3, [r7, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	ddf4      	ble.n	80031b8 <MRT_external_flash_Init+0xc>
	}

	if (!W25qxx_Init()) {
 80031ce:	f000 fc69 	bl	8003aa4 <W25qxx_Init>
 80031d2:	4603      	mov	r3, r0
 80031d4:	f083 0301 	eor.w	r3, r3, #1
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <MRT_external_flash_Init+0x36>
		Error_Handler(); // hangs and blinks LEDF
 80031de:	f7ff f847 	bl	8002270 <Error_Handler>
	}

	//Retrieve flags
	W25qxx_ReadSector(ext_flash_flags_buffer, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 80031e2:	2305      	movs	r3, #5
 80031e4:	2200      	movs	r2, #0
 80031e6:	2101      	movs	r1, #1
 80031e8:	4808      	ldr	r0, [pc, #32]	; (800320c <MRT_external_flash_Init+0x60>)
 80031ea:	f001 f835 	bl	8004258 <W25qxx_ReadSector>

	//Retrieve RTC time (last recorded)
	W25qxx_ReadSector(ext_flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 80031ee:	2304      	movs	r3, #4
 80031f0:	2200      	movs	r2, #0
 80031f2:	2102      	movs	r1, #2
 80031f4:	4806      	ldr	r0, [pc, #24]	; (8003210 <MRT_external_flash_Init+0x64>)
 80031f6:	f001 f82f 	bl	8004258 <W25qxx_ReadSector>

	//Assign each value read to their variable
	MRT_updateExternalFlashValues();
 80031fa:	f000 f843 	bl	8003284 <MRT_updateExternalFlashValues>
}
 80031fe:	bf00      	nop
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	20005efc 	.word	0x20005efc
 800320c:	20005f08 	.word	0x20005f08
 8003210:	20005f04 	.word	0x20005f04

08003214 <MRT_updateExternalFlashBuffers>:


void MRT_updateExternalFlashBuffers(void){
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 800321a:	2300      	movs	r3, #0
 800321c:	607b      	str	r3, [r7, #4]
 800321e:	e00c      	b.n	800323a <MRT_updateExternalFlashBuffers+0x26>
		ext_flash_flags_buffer[i] = *ext_flash_flags[i];
 8003220:	4a14      	ldr	r2, [pc, #80]	; (8003274 <MRT_updateExternalFlashBuffers+0x60>)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003228:	7819      	ldrb	r1, [r3, #0]
 800322a:	4a13      	ldr	r2, [pc, #76]	; (8003278 <MRT_updateExternalFlashBuffers+0x64>)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4413      	add	r3, r2
 8003230:	460a      	mov	r2, r1
 8003232:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3301      	adds	r3, #1
 8003238:	607b      	str	r3, [r7, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b04      	cmp	r3, #4
 800323e:	ddef      	ble.n	8003220 <MRT_updateExternalFlashBuffers+0xc>
	}
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003240:	2300      	movs	r3, #0
 8003242:	603b      	str	r3, [r7, #0]
 8003244:	e00c      	b.n	8003260 <MRT_updateExternalFlashBuffers+0x4c>
		ext_flash_time_buffer[i] = *ext_flash_time[i];
 8003246:	4a0d      	ldr	r2, [pc, #52]	; (800327c <MRT_updateExternalFlashBuffers+0x68>)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800324e:	7819      	ldrb	r1, [r3, #0]
 8003250:	4a0b      	ldr	r2, [pc, #44]	; (8003280 <MRT_updateExternalFlashBuffers+0x6c>)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	4413      	add	r3, r2
 8003256:	460a      	mov	r2, r1
 8003258:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	3301      	adds	r3, #1
 800325e:	603b      	str	r3, [r7, #0]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	2b03      	cmp	r3, #3
 8003264:	ddef      	ble.n	8003246 <MRT_updateExternalFlashBuffers+0x32>
	}
}
 8003266:	bf00      	nop
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	20000064 	.word	0x20000064
 8003278:	20005f08 	.word	0x20005f08
 800327c:	20000078 	.word	0x20000078
 8003280:	20005f04 	.word	0x20005f04

08003284 <MRT_updateExternalFlashValues>:


void MRT_updateExternalFlashValues(void){
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 800328a:	2300      	movs	r3, #0
 800328c:	607b      	str	r3, [r7, #4]
 800328e:	e00b      	b.n	80032a8 <MRT_updateExternalFlashValues+0x24>
		*ext_flash_flags[i] = ext_flash_flags_buffer[i];
 8003290:	4a13      	ldr	r2, [pc, #76]	; (80032e0 <MRT_updateExternalFlashValues+0x5c>)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003298:	4912      	ldr	r1, [pc, #72]	; (80032e4 <MRT_updateExternalFlashValues+0x60>)
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	440a      	add	r2, r1
 800329e:	7812      	ldrb	r2, [r2, #0]
 80032a0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3301      	adds	r3, #1
 80032a6:	607b      	str	r3, [r7, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	ddf0      	ble.n	8003290 <MRT_updateExternalFlashValues+0xc>
	}
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 80032ae:	2300      	movs	r3, #0
 80032b0:	603b      	str	r3, [r7, #0]
 80032b2:	e00b      	b.n	80032cc <MRT_updateExternalFlashValues+0x48>
		*ext_flash_time[i] = ext_flash_time_buffer[i];
 80032b4:	4a0c      	ldr	r2, [pc, #48]	; (80032e8 <MRT_updateExternalFlashValues+0x64>)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032bc:	490b      	ldr	r1, [pc, #44]	; (80032ec <MRT_updateExternalFlashValues+0x68>)
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	440a      	add	r2, r1
 80032c2:	7812      	ldrb	r2, [r2, #0]
 80032c4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	3301      	adds	r3, #1
 80032ca:	603b      	str	r3, [r7, #0]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	ddf0      	ble.n	80032b4 <MRT_updateExternalFlashValues+0x30>
	}
}
 80032d2:	bf00      	nop
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	20000064 	.word	0x20000064
 80032e4:	20005f08 	.word	0x20005f08
 80032e8:	20000078 	.word	0x20000078
 80032ec:	20005f04 	.word	0x20005f04

080032f0 <MRT_saveFlagValue>:
//Public functions

/*
 * Save a flag value (value updated outside the function)
 */
void MRT_saveFlagValue(rtc_backup_reg state){
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	71fb      	strb	r3, [r7, #7]
	//Write new flags to flash memory
	MRT_updateExternalFlashBuffers();
 80032fa:	f7ff ff8b 	bl	8003214 <MRT_updateExternalFlashBuffers>
	W25qxx_EraseSector(FLAGS_SECTOR);
 80032fe:	2001      	movs	r0, #1
 8003300:	f000 fd22 	bl	8003d48 <W25qxx_EraseSector>
	W25qxx_WriteSector(ext_flash_flags_buffer, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8003304:	2305      	movs	r3, #5
 8003306:	2200      	movs	r2, #0
 8003308:	2101      	movs	r1, #1
 800330a:	4808      	ldr	r0, [pc, #32]	; (800332c <MRT_saveFlagValue+0x3c>)
 800330c:	f000 fe66 	bl	8003fdc <W25qxx_WriteSector>

	//Write new flag to RTC backup register
	MRT_RTC_setBackupReg(state, *rtc_bckp_regs[state]);
 8003310:	79fb      	ldrb	r3, [r7, #7]
 8003312:	4a07      	ldr	r2, [pc, #28]	; (8003330 <MRT_saveFlagValue+0x40>)
 8003314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	79fb      	ldrb	r3, [r7, #7]
 800331c:	4611      	mov	r1, r2
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff fa06 	bl	8002730 <MRT_RTC_setBackupReg>
}
 8003324:	bf00      	nop
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	20005f08 	.word	0x20005f08
 8003330:	20000000 	.word	0x20000000

08003334 <MRT_checkFlagsValues>:


/*
 * Check for memory issues
 */
uint8_t MRT_checkFlagsValues(rtc_backup_reg val_index, uint32_t max_val){
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	4603      	mov	r3, r0
 800333c:	6039      	str	r1, [r7, #0]
 800333e:	71fb      	strb	r3, [r7, #7]

	uint8_t ret = true;
 8003340:	2301      	movs	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]

	//Check for a random value (unsigned int so can't be negative)
	if (*rtc_bckp_regs[val_index] > max_val){
 8003344:	79fb      	ldrb	r3, [r7, #7]
 8003346:	4a2e      	ldr	r2, [pc, #184]	; (8003400 <MRT_checkFlagsValues+0xcc>)
 8003348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d207      	bcs.n	8003364 <MRT_checkFlagsValues+0x30>
		*rtc_bckp_regs[val_index] = 0;
 8003354:	79fb      	ldrb	r3, [r7, #7]
 8003356:	4a2a      	ldr	r2, [pc, #168]	; (8003400 <MRT_checkFlagsValues+0xcc>)
 8003358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
		ret = false;
 8003360:	2300      	movs	r3, #0
 8003362:	73fb      	strb	r3, [r7, #15]
	}
	if (*ext_flash_flags[val_index] > max_val){
 8003364:	79fb      	ldrb	r3, [r7, #7]
 8003366:	4a27      	ldr	r2, [pc, #156]	; (8003404 <MRT_checkFlagsValues+0xd0>)
 8003368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	461a      	mov	r2, r3
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	4293      	cmp	r3, r2
 8003374:	d207      	bcs.n	8003386 <MRT_checkFlagsValues+0x52>
		*ext_flash_flags[val_index] = 0;
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	4a22      	ldr	r2, [pc, #136]	; (8003404 <MRT_checkFlagsValues+0xd0>)
 800337a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800337e:	2200      	movs	r2, #0
 8003380:	701a      	strb	r2, [r3, #0]
		ret = false;
 8003382:	2300      	movs	r3, #0
 8003384:	73fb      	strb	r3, [r7, #15]
	}

	if (*rtc_bckp_regs[val_index] != *ext_flash_flags[val_index]){
 8003386:	79fb      	ldrb	r3, [r7, #7]
 8003388:	4a1d      	ldr	r2, [pc, #116]	; (8003400 <MRT_checkFlagsValues+0xcc>)
 800338a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	79fa      	ldrb	r2, [r7, #7]
 8003392:	491c      	ldr	r1, [pc, #112]	; (8003404 <MRT_checkFlagsValues+0xd0>)
 8003394:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003398:	7812      	ldrb	r2, [r2, #0]
 800339a:	4293      	cmp	r3, r2
 800339c:	d028      	beq.n	80033f0 <MRT_checkFlagsValues+0xbc>
		*rtc_bckp_regs[val_index] = MAX(*rtc_bckp_regs[val_index], *ext_flash_flags[val_index]);
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	4a18      	ldr	r2, [pc, #96]	; (8003404 <MRT_checkFlagsValues+0xd0>)
 80033a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	79fb      	ldrb	r3, [r7, #7]
 80033ac:	4a14      	ldr	r2, [pc, #80]	; (8003400 <MRT_checkFlagsValues+0xcc>)
 80033ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	4912      	ldr	r1, [pc, #72]	; (8003400 <MRT_checkFlagsValues+0xcc>)
 80033b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80033bc:	4282      	cmp	r2, r0
 80033be:	bf38      	it	cc
 80033c0:	4602      	movcc	r2, r0
 80033c2:	601a      	str	r2, [r3, #0]
		*ext_flash_flags[val_index] = MAX(*rtc_bckp_regs[val_index], *ext_flash_flags[val_index]);
 80033c4:	79fb      	ldrb	r3, [r7, #7]
 80033c6:	4a0f      	ldr	r2, [pc, #60]	; (8003404 <MRT_checkFlagsValues+0xd0>)
 80033c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	4619      	mov	r1, r3
 80033d0:	79fb      	ldrb	r3, [r7, #7]
 80033d2:	4a0b      	ldr	r2, [pc, #44]	; (8003400 <MRT_checkFlagsValues+0xcc>)
 80033d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4299      	cmp	r1, r3
 80033dc:	bf38      	it	cc
 80033de:	4619      	movcc	r1, r3
 80033e0:	79fb      	ldrb	r3, [r7, #7]
 80033e2:	4a08      	ldr	r2, [pc, #32]	; (8003404 <MRT_checkFlagsValues+0xd0>)
 80033e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e8:	b2ca      	uxtb	r2, r1
 80033ea:	701a      	strb	r2, [r3, #0]
		ret = false;
 80033ec:	2300      	movs	r3, #0
 80033ee:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	20000000 	.word	0x20000000
 8003404:	20000064 	.word	0x20000064

08003408 <MRT_saveTotalTime>:
//Public functions

/*
 * Update every time values in memory
 */
void MRT_saveTotalTime(void){
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0

	//Update variables
	MRT_updateTimeValues();
 800340c:	f000 f890 	bl	8003530 <MRT_updateTimeValues>

	//Write new RTC time to external flash
	MRT_updateExternalFlashBuffers();
 8003410:	f7ff ff00 	bl	8003214 <MRT_updateExternalFlashBuffers>
	W25qxx_EraseSector(RTC_SECTOR);
 8003414:	2002      	movs	r0, #2
 8003416:	f000 fc97 	bl	8003d48 <W25qxx_EraseSector>
	W25qxx_WriteSector(ext_flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 800341a:	2304      	movs	r3, #4
 800341c:	2200      	movs	r2, #0
 800341e:	2102      	movs	r1, #2
 8003420:	480e      	ldr	r0, [pc, #56]	; (800345c <MRT_saveTotalTime+0x54>)
 8003422:	f000 fddb 	bl	8003fdc <W25qxx_WriteSector>

	//Write new RTC time to backup registers
	MRT_RTC_setBackupReg(RTC_HOUR, rtc_bckp_reg_hour);
 8003426:	4b0e      	ldr	r3, [pc, #56]	; (8003460 <MRT_saveTotalTime+0x58>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4619      	mov	r1, r3
 800342c:	2005      	movs	r0, #5
 800342e:	f7ff f97f 	bl	8002730 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_MINUTE, rtc_bckp_reg_min);
 8003432:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <MRT_saveTotalTime+0x5c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4619      	mov	r1, r3
 8003438:	2006      	movs	r0, #6
 800343a:	f7ff f979 	bl	8002730 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_SECOND, rtc_bckp_reg_sec);
 800343e:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <MRT_saveTotalTime+0x60>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4619      	mov	r1, r3
 8003444:	2007      	movs	r0, #7
 8003446:	f7ff f973 	bl	8002730 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_SUBSEC, rtc_bckp_reg_subsec);
 800344a:	4b08      	ldr	r3, [pc, #32]	; (800346c <MRT_saveTotalTime+0x64>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4619      	mov	r1, r3
 8003450:	2008      	movs	r0, #8
 8003452:	f7ff f96d 	bl	8002730 <MRT_RTC_setBackupReg>
}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	20005f04 	.word	0x20005f04
 8003460:	2000035c 	.word	0x2000035c
 8003464:	20000360 	.word	0x20000360
 8003468:	20000364 	.word	0x20000364
 800346c:	20000368 	.word	0x20000368

08003470 <MRT_resetTotalTime>:


void MRT_resetTotalTime(void){
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0

	//Clear RTC time (last recorded) in external flash
	W25qxx_EraseSector(RTC_SECTOR);
 8003476:	2002      	movs	r0, #2
 8003478:	f000 fc66 	bl	8003d48 <W25qxx_EraseSector>
	W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 800347c:	2304      	movs	r3, #4
 800347e:	2200      	movs	r2, #0
 8003480:	2102      	movs	r1, #2
 8003482:	4817      	ldr	r0, [pc, #92]	; (80034e0 <MRT_resetTotalTime+0x70>)
 8003484:	f000 fdaa 	bl	8003fdc <W25qxx_WriteSector>

	//Clear RTC time in backup registers
	MRT_RTC_setBackupReg(RTC_HOUR, 0);
 8003488:	2100      	movs	r1, #0
 800348a:	2005      	movs	r0, #5
 800348c:	f7ff f950 	bl	8002730 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_MINUTE, 0);
 8003490:	2100      	movs	r1, #0
 8003492:	2006      	movs	r0, #6
 8003494:	f7ff f94c 	bl	8002730 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_SECOND, 0);
 8003498:	2100      	movs	r1, #0
 800349a:	2007      	movs	r0, #7
 800349c:	f7ff f948 	bl	8002730 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_SUBSEC, 0);
 80034a0:	2100      	movs	r1, #0
 80034a2:	2008      	movs	r0, #8
 80034a4:	f7ff f944 	bl	8002730 <MRT_RTC_setBackupReg>

	//Update variables (to 0)
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 80034a8:	2300      	movs	r3, #0
 80034aa:	607b      	str	r3, [r7, #4]
 80034ac:	e00f      	b.n	80034ce <MRT_resetTotalTime+0x5e>
	  *ext_flash_time[i] = 0x0;
 80034ae:	4a0d      	ldr	r2, [pc, #52]	; (80034e4 <MRT_resetTotalTime+0x74>)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b6:	2200      	movs	r2, #0
 80034b8:	701a      	strb	r2, [r3, #0]
	  *rtc_bckp_regs[i + NB_OF_FLAGS] = 0x0;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3305      	adds	r3, #5
 80034be:	4a0a      	ldr	r2, [pc, #40]	; (80034e8 <MRT_resetTotalTime+0x78>)
 80034c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3301      	adds	r3, #1
 80034cc:	607b      	str	r3, [r7, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	ddec      	ble.n	80034ae <MRT_resetTotalTime+0x3e>
	}
}
 80034d4:	bf00      	nop
 80034d6:	bf00      	nop
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	2000037c 	.word	0x2000037c
 80034e4:	20000078 	.word	0x20000078
 80034e8:	20000000 	.word	0x20000000

080034ec <MRT_saveTimeValue>:
//Private functions

/*
 * Save an RTC value (value updated outside the function)
 */
void MRT_saveTimeValue(rtc_backup_reg state){
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4603      	mov	r3, r0
 80034f4:	71fb      	strb	r3, [r7, #7]

	//Write new RTC time to flash memory
	MRT_updateExternalFlashBuffers();
 80034f6:	f7ff fe8d 	bl	8003214 <MRT_updateExternalFlashBuffers>
	W25qxx_EraseSector(RTC_SECTOR);
 80034fa:	2002      	movs	r0, #2
 80034fc:	f000 fc24 	bl	8003d48 <W25qxx_EraseSector>
	W25qxx_WriteSector(ext_flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003500:	2304      	movs	r3, #4
 8003502:	2200      	movs	r2, #0
 8003504:	2102      	movs	r1, #2
 8003506:	4808      	ldr	r0, [pc, #32]	; (8003528 <MRT_saveTimeValue+0x3c>)
 8003508:	f000 fd68 	bl	8003fdc <W25qxx_WriteSector>

	//Write new RTC time to backup registers
	MRT_RTC_setBackupReg(state, *rtc_bckp_regs[state]);
 800350c:	79fb      	ldrb	r3, [r7, #7]
 800350e:	4a07      	ldr	r2, [pc, #28]	; (800352c <MRT_saveTimeValue+0x40>)
 8003510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	79fb      	ldrb	r3, [r7, #7]
 8003518:	4611      	mov	r1, r2
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff f908 	bl	8002730 <MRT_RTC_setBackupReg>
}
 8003520:	bf00      	nop
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	20005f04 	.word	0x20005f04
 800352c:	20000000 	.word	0x20000000

08003530 <MRT_updateTimeValues>:


/*
 * Update all time values
 */
void MRT_updateTimeValues(void){
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
	//External Flash
	ext_flash_hour = prev_hour;
 8003534:	4b13      	ldr	r3, [pc, #76]	; (8003584 <MRT_updateTimeValues+0x54>)
 8003536:	781a      	ldrb	r2, [r3, #0]
 8003538:	4b13      	ldr	r3, [pc, #76]	; (8003588 <MRT_updateTimeValues+0x58>)
 800353a:	701a      	strb	r2, [r3, #0]
	ext_flash_min = prev_min;
 800353c:	4b13      	ldr	r3, [pc, #76]	; (800358c <MRT_updateTimeValues+0x5c>)
 800353e:	781a      	ldrb	r2, [r3, #0]
 8003540:	4b13      	ldr	r3, [pc, #76]	; (8003590 <MRT_updateTimeValues+0x60>)
 8003542:	701a      	strb	r2, [r3, #0]
	ext_flash_sec = prev_sec;
 8003544:	4b13      	ldr	r3, [pc, #76]	; (8003594 <MRT_updateTimeValues+0x64>)
 8003546:	781a      	ldrb	r2, [r3, #0]
 8003548:	4b13      	ldr	r3, [pc, #76]	; (8003598 <MRT_updateTimeValues+0x68>)
 800354a:	701a      	strb	r2, [r3, #0]
	ext_flash_subsec = prev_subsec;
 800354c:	4b13      	ldr	r3, [pc, #76]	; (800359c <MRT_updateTimeValues+0x6c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a13      	ldr	r2, [pc, #76]	; (80035a0 <MRT_updateTimeValues+0x70>)
 8003552:	6013      	str	r3, [r2, #0]

	//RTC backup registers
	rtc_bckp_reg_hour = prev_hour;
 8003554:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <MRT_updateTimeValues+0x54>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	461a      	mov	r2, r3
 800355a:	4b12      	ldr	r3, [pc, #72]	; (80035a4 <MRT_updateTimeValues+0x74>)
 800355c:	601a      	str	r2, [r3, #0]
	rtc_bckp_reg_min = prev_min;
 800355e:	4b0b      	ldr	r3, [pc, #44]	; (800358c <MRT_updateTimeValues+0x5c>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	461a      	mov	r2, r3
 8003564:	4b10      	ldr	r3, [pc, #64]	; (80035a8 <MRT_updateTimeValues+0x78>)
 8003566:	601a      	str	r2, [r3, #0]
	rtc_bckp_reg_sec = prev_sec;
 8003568:	4b0a      	ldr	r3, [pc, #40]	; (8003594 <MRT_updateTimeValues+0x64>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	461a      	mov	r2, r3
 800356e:	4b0f      	ldr	r3, [pc, #60]	; (80035ac <MRT_updateTimeValues+0x7c>)
 8003570:	601a      	str	r2, [r3, #0]
	rtc_bckp_reg_subsec = prev_subsec;
 8003572:	4b0a      	ldr	r3, [pc, #40]	; (800359c <MRT_updateTimeValues+0x6c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a0e      	ldr	r2, [pc, #56]	; (80035b0 <MRT_updateTimeValues+0x80>)
 8003578:	6013      	str	r3, [r2, #0]
}
 800357a:	bf00      	nop
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	20000385 	.word	0x20000385
 8003588:	20000373 	.word	0x20000373
 800358c:	20000386 	.word	0x20000386
 8003590:	20000374 	.word	0x20000374
 8003594:	20000387 	.word	0x20000387
 8003598:	20000375 	.word	0x20000375
 800359c:	20000388 	.word	0x20000388
 80035a0:	20000378 	.word	0x20000378
 80035a4:	2000035c 	.word	0x2000035c
 80035a8:	20000360 	.word	0x20000360
 80035ac:	20000364 	.word	0x20000364
 80035b0:	20000368 	.word	0x20000368

080035b4 <MRT_checkTimeValues>:


/*
 * Check for memory issues
 */
uint8_t MRT_checkTimeValues(rtc_backup_reg val_index, uint32_t max_val){
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	6039      	str	r1, [r7, #0]
 80035be:	71fb      	strb	r3, [r7, #7]

	uint8_t ret = true;
 80035c0:	2301      	movs	r3, #1
 80035c2:	73fb      	strb	r3, [r7, #15]

	//Check for a random value (unsigned int so can't be negative)
	if (*rtc_bckp_regs[val_index] > max_val){
 80035c4:	79fb      	ldrb	r3, [r7, #7]
 80035c6:	4a31      	ldr	r2, [pc, #196]	; (800368c <MRT_checkTimeValues+0xd8>)
 80035c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d207      	bcs.n	80035e4 <MRT_checkTimeValues+0x30>
		*rtc_bckp_regs[val_index] = 0;
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	4a2d      	ldr	r2, [pc, #180]	; (800368c <MRT_checkTimeValues+0xd8>)
 80035d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
		ret = false;
 80035e0:	2300      	movs	r3, #0
 80035e2:	73fb      	strb	r3, [r7, #15]
	}
	if (*ext_flash_time[val_index - NB_OF_FLAGS] > max_val){
 80035e4:	79fb      	ldrb	r3, [r7, #7]
 80035e6:	3b05      	subs	r3, #5
 80035e8:	4a29      	ldr	r2, [pc, #164]	; (8003690 <MRT_checkTimeValues+0xdc>)
 80035ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	461a      	mov	r2, r3
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d208      	bcs.n	800360a <MRT_checkTimeValues+0x56>
		*ext_flash_time[val_index - NB_OF_FLAGS] = 0;
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	3b05      	subs	r3, #5
 80035fc:	4a24      	ldr	r2, [pc, #144]	; (8003690 <MRT_checkTimeValues+0xdc>)
 80035fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003602:	2200      	movs	r2, #0
 8003604:	701a      	strb	r2, [r3, #0]
		ret = false;
 8003606:	2300      	movs	r3, #0
 8003608:	73fb      	strb	r3, [r7, #15]
	}

	if (*rtc_bckp_regs[val_index] != *ext_flash_time[val_index - NB_OF_FLAGS]){
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	4a1f      	ldr	r2, [pc, #124]	; (800368c <MRT_checkTimeValues+0xd8>)
 800360e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	79fa      	ldrb	r2, [r7, #7]
 8003616:	3a05      	subs	r2, #5
 8003618:	491d      	ldr	r1, [pc, #116]	; (8003690 <MRT_checkTimeValues+0xdc>)
 800361a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800361e:	7812      	ldrb	r2, [r2, #0]
 8003620:	4293      	cmp	r3, r2
 8003622:	d02b      	beq.n	800367c <MRT_checkTimeValues+0xc8>
		*rtc_bckp_regs[val_index] = MAX(*rtc_bckp_regs[val_index], *ext_flash_time[val_index - NB_OF_FLAGS]);
 8003624:	79fb      	ldrb	r3, [r7, #7]
 8003626:	3b05      	subs	r3, #5
 8003628:	4a19      	ldr	r2, [pc, #100]	; (8003690 <MRT_checkTimeValues+0xdc>)
 800362a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	79fb      	ldrb	r3, [r7, #7]
 8003634:	4a15      	ldr	r2, [pc, #84]	; (800368c <MRT_checkTimeValues+0xd8>)
 8003636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	79fb      	ldrb	r3, [r7, #7]
 800363e:	4913      	ldr	r1, [pc, #76]	; (800368c <MRT_checkTimeValues+0xd8>)
 8003640:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003644:	4282      	cmp	r2, r0
 8003646:	bf38      	it	cc
 8003648:	4602      	movcc	r2, r0
 800364a:	601a      	str	r2, [r3, #0]
		*ext_flash_time[val_index - NB_OF_FLAGS] = MAX(*rtc_bckp_regs[val_index], *ext_flash_time[val_index - NB_OF_FLAGS]);
 800364c:	79fb      	ldrb	r3, [r7, #7]
 800364e:	3b05      	subs	r3, #5
 8003650:	4a0f      	ldr	r2, [pc, #60]	; (8003690 <MRT_checkTimeValues+0xdc>)
 8003652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	4619      	mov	r1, r3
 800365a:	79fb      	ldrb	r3, [r7, #7]
 800365c:	4a0b      	ldr	r2, [pc, #44]	; (800368c <MRT_checkTimeValues+0xd8>)
 800365e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4299      	cmp	r1, r3
 8003666:	bf38      	it	cc
 8003668:	4619      	movcc	r1, r3
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	3b05      	subs	r3, #5
 800366e:	4a08      	ldr	r2, [pc, #32]	; (8003690 <MRT_checkTimeValues+0xdc>)
 8003670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003674:	b2ca      	uxtb	r2, r1
 8003676:	701a      	strb	r2, [r3, #0]
		ret = false;
 8003678:	2300      	movs	r3, #0
 800367a:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 800367c:	7bfb      	ldrb	r3, [r7, #15]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	20000000 	.word	0x20000000
 8003690:	20000078 	.word	0x20000078

08003694 <MRT_MEMORY_Init>:
//**************************************************//
//MISC


//Public
void MRT_MEMORY_Init(void){
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0

	//External flash
	MRT_external_flash_Init();
 8003698:	f7ff fd88 	bl	80031ac <MRT_external_flash_Init>

	//Backup registers
	MRT_RTC_backup_regs_Init();
 800369c:	f7ff f80c 	bl	80026b8 <MRT_RTC_backup_regs_Init>

	//Get the previous flags and rtc time from memory
	MRT_stateRestoration();
 80036a0:	f000 f802 	bl	80036a8 <MRT_stateRestoration>
			else {
			  Error_Handler();
			}
		#endif
	#endif
}
 80036a4:	bf00      	nop
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <MRT_stateRestoration>:


//Private

//Get the flags values and RTC time
void MRT_stateRestoration(void){
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0

	//Check for a wakeup
	MRT_checkWakeUp();
 80036ac:	f000 f8ca 	bl	8003844 <MRT_checkWakeUp>

	//If RTC detected a wake up, update the flash memory and the backup registers
	if (wu_flag == 1){
 80036b0:	4b51      	ldr	r3, [pc, #324]	; (80037f8 <MRT_stateRestoration+0x150>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d111      	bne.n	80036dc <MRT_stateRestoration+0x34>

		//Update values
		ext_flash_wu += 1;
 80036b8:	4b50      	ldr	r3, [pc, #320]	; (80037fc <MRT_stateRestoration+0x154>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	3301      	adds	r3, #1
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	4b4e      	ldr	r3, [pc, #312]	; (80037fc <MRT_stateRestoration+0x154>)
 80036c2:	701a      	strb	r2, [r3, #0]
		rtc_bckp_reg_wu += 1;
 80036c4:	4b4e      	ldr	r3, [pc, #312]	; (8003800 <MRT_stateRestoration+0x158>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	3301      	adds	r3, #1
 80036ca:	4a4d      	ldr	r2, [pc, #308]	; (8003800 <MRT_stateRestoration+0x158>)
 80036cc:	6013      	str	r3, [r2, #0]

		//Check for memory issues¸
		MRT_checkFlagsValues(FC_STATE_WU, 2);
 80036ce:	2102      	movs	r1, #2
 80036d0:	2001      	movs	r0, #1
 80036d2:	f7ff fe2f 	bl	8003334 <MRT_checkFlagsValues>

		//Update memory
		MRT_saveFlagValue(FC_STATE_WU);
 80036d6:	2001      	movs	r0, #1
 80036d8:	f7ff fe0a 	bl	80032f0 <MRT_saveFlagValue>
	}
	//Update the wu_flag value
	wu_flag = rtc_bckp_reg_wu;
 80036dc:	4b48      	ldr	r3, [pc, #288]	; (8003800 <MRT_stateRestoration+0x158>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	4b45      	ldr	r3, [pc, #276]	; (80037f8 <MRT_stateRestoration+0x150>)
 80036e4:	701a      	strb	r2, [r3, #0]


	//Check flags values

	//Reset flag
	if(MRT_checkFlagsValues(FC_STATE_RESET, 1) == false)	MRT_saveFlagValue(FC_STATE_RESET);
 80036e6:	2101      	movs	r1, #1
 80036e8:	2000      	movs	r0, #0
 80036ea:	f7ff fe23 	bl	8003334 <MRT_checkFlagsValues>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d102      	bne.n	80036fa <MRT_stateRestoration+0x52>
 80036f4:	2000      	movs	r0, #0
 80036f6:	f7ff fdfb 	bl	80032f0 <MRT_saveFlagValue>
	reset_flag = rtc_bckp_reg_reset;
 80036fa:	4b42      	ldr	r3, [pc, #264]	; (8003804 <MRT_stateRestoration+0x15c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	4b41      	ldr	r3, [pc, #260]	; (8003808 <MRT_stateRestoration+0x160>)
 8003702:	701a      	strb	r2, [r3, #0]

	//Wake up flag (TODO double check??)
	if(MRT_checkFlagsValues(FC_STATE_WU, 1) == false)	MRT_saveFlagValue(FC_STATE_WU);
 8003704:	2101      	movs	r1, #1
 8003706:	2001      	movs	r0, #1
 8003708:	f7ff fe14 	bl	8003334 <MRT_checkFlagsValues>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d102      	bne.n	8003718 <MRT_stateRestoration+0x70>
 8003712:	2001      	movs	r0, #1
 8003714:	f7ff fdec 	bl	80032f0 <MRT_saveFlagValue>
	wu_flag = rtc_bckp_reg_wu;
 8003718:	4b39      	ldr	r3, [pc, #228]	; (8003800 <MRT_stateRestoration+0x158>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	b2da      	uxtb	r2, r3
 800371e:	4b36      	ldr	r3, [pc, #216]	; (80037f8 <MRT_stateRestoration+0x150>)
 8003720:	701a      	strb	r2, [r3, #0]

	//IWDG flag
	if(MRT_checkFlagsValues(FC_STATE_IWDG, 1) == false)	MRT_saveFlagValue(FC_STATE_IWDG);
 8003722:	2101      	movs	r1, #1
 8003724:	2002      	movs	r0, #2
 8003726:	f7ff fe05 	bl	8003334 <MRT_checkFlagsValues>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d102      	bne.n	8003736 <MRT_stateRestoration+0x8e>
 8003730:	2002      	movs	r0, #2
 8003732:	f7ff fddd 	bl	80032f0 <MRT_saveFlagValue>
	iwdg_flag = rtc_bckp_reg_iwdg;
 8003736:	4b35      	ldr	r3, [pc, #212]	; (800380c <MRT_stateRestoration+0x164>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	b2da      	uxtb	r2, r3
 800373c:	4b34      	ldr	r3, [pc, #208]	; (8003810 <MRT_stateRestoration+0x168>)
 800373e:	701a      	strb	r2, [r3, #0]

	//Apogee flag
	if(MRT_checkFlagsValues(FC_STATE_APOGEE, 1) == false)	MRT_saveFlagValue(FC_STATE_APOGEE);
 8003740:	2101      	movs	r1, #1
 8003742:	2003      	movs	r0, #3
 8003744:	f7ff fdf6 	bl	8003334 <MRT_checkFlagsValues>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d102      	bne.n	8003754 <MRT_stateRestoration+0xac>
 800374e:	2003      	movs	r0, #3
 8003750:	f7ff fdce 	bl	80032f0 <MRT_saveFlagValue>
	apogee_flag = rtc_bckp_reg_apogee;
 8003754:	4b2f      	ldr	r3, [pc, #188]	; (8003814 <MRT_stateRestoration+0x16c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	b2da      	uxtb	r2, r3
 800375a:	4b2f      	ldr	r3, [pc, #188]	; (8003818 <MRT_stateRestoration+0x170>)
 800375c:	701a      	strb	r2, [r3, #0]

	//Ejection state flag
	if(MRT_checkFlagsValues(FC_STATE_FLIGHT, 4) == false)	MRT_saveFlagValue(FC_STATE_FLIGHT);
 800375e:	2104      	movs	r1, #4
 8003760:	2004      	movs	r0, #4
 8003762:	f7ff fde7 	bl	8003334 <MRT_checkFlagsValues>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d102      	bne.n	8003772 <MRT_stateRestoration+0xca>
 800376c:	2004      	movs	r0, #4
 800376e:	f7ff fdbf 	bl	80032f0 <MRT_saveFlagValue>
	ejection_stage_flag = rtc_bckp_reg_ejection_stage;
 8003772:	4b2a      	ldr	r3, [pc, #168]	; (800381c <MRT_stateRestoration+0x174>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	b2da      	uxtb	r2, r3
 8003778:	4b29      	ldr	r3, [pc, #164]	; (8003820 <MRT_stateRestoration+0x178>)
 800377a:	701a      	strb	r2, [r3, #0]


	//Check RTC time values
	//Hours
	if(MRT_checkTimeValues(RTC_HOUR, 23) == false)	MRT_saveTimeValue(RTC_HOUR);
 800377c:	2117      	movs	r1, #23
 800377e:	2005      	movs	r0, #5
 8003780:	f7ff ff18 	bl	80035b4 <MRT_checkTimeValues>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d102      	bne.n	8003790 <MRT_stateRestoration+0xe8>
 800378a:	2005      	movs	r0, #5
 800378c:	f7ff feae 	bl	80034ec <MRT_saveTimeValue>
	prev_hour = rtc_bckp_reg_hour;
 8003790:	4b24      	ldr	r3, [pc, #144]	; (8003824 <MRT_stateRestoration+0x17c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	b2da      	uxtb	r2, r3
 8003796:	4b24      	ldr	r3, [pc, #144]	; (8003828 <MRT_stateRestoration+0x180>)
 8003798:	701a      	strb	r2, [r3, #0]

	//Minutes
	if(MRT_checkTimeValues(RTC_MINUTE, 59) == false)	MRT_saveTimeValue(RTC_MINUTE);
 800379a:	213b      	movs	r1, #59	; 0x3b
 800379c:	2006      	movs	r0, #6
 800379e:	f7ff ff09 	bl	80035b4 <MRT_checkTimeValues>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d102      	bne.n	80037ae <MRT_stateRestoration+0x106>
 80037a8:	2006      	movs	r0, #6
 80037aa:	f7ff fe9f 	bl	80034ec <MRT_saveTimeValue>
	prev_min = rtc_bckp_reg_min;
 80037ae:	4b1f      	ldr	r3, [pc, #124]	; (800382c <MRT_stateRestoration+0x184>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	4b1e      	ldr	r3, [pc, #120]	; (8003830 <MRT_stateRestoration+0x188>)
 80037b6:	701a      	strb	r2, [r3, #0]

	//Seconds
	if(MRT_checkTimeValues(RTC_SECOND, 59) == false)	MRT_saveTimeValue(RTC_SECOND);
 80037b8:	213b      	movs	r1, #59	; 0x3b
 80037ba:	2007      	movs	r0, #7
 80037bc:	f7ff fefa 	bl	80035b4 <MRT_checkTimeValues>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d102      	bne.n	80037cc <MRT_stateRestoration+0x124>
 80037c6:	2007      	movs	r0, #7
 80037c8:	f7ff fe90 	bl	80034ec <MRT_saveTimeValue>
	prev_sec = rtc_bckp_reg_sec;
 80037cc:	4b19      	ldr	r3, [pc, #100]	; (8003834 <MRT_stateRestoration+0x18c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	4b19      	ldr	r3, [pc, #100]	; (8003838 <MRT_stateRestoration+0x190>)
 80037d4:	701a      	strb	r2, [r3, #0]

	//Sub-Seconds
	if(MRT_checkTimeValues(RTC_SUBSEC, 999) == false)	MRT_saveTimeValue(RTC_SUBSEC);
 80037d6:	f240 31e7 	movw	r1, #999	; 0x3e7
 80037da:	2008      	movs	r0, #8
 80037dc:	f7ff feea 	bl	80035b4 <MRT_checkTimeValues>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d102      	bne.n	80037ec <MRT_stateRestoration+0x144>
 80037e6:	2008      	movs	r0, #8
 80037e8:	f7ff fe80 	bl	80034ec <MRT_saveTimeValue>
	prev_subsec = rtc_bckp_reg_subsec;
 80037ec:	4b13      	ldr	r3, [pc, #76]	; (800383c <MRT_stateRestoration+0x194>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a13      	ldr	r2, [pc, #76]	; (8003840 <MRT_stateRestoration+0x198>)
 80037f2:	6013      	str	r3, [r2, #0]
}
 80037f4:	bf00      	nop
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	20000381 	.word	0x20000381
 80037fc:	2000036f 	.word	0x2000036f
 8003800:	2000034c 	.word	0x2000034c
 8003804:	20000348 	.word	0x20000348
 8003808:	20000380 	.word	0x20000380
 800380c:	20000350 	.word	0x20000350
 8003810:	20000382 	.word	0x20000382
 8003814:	20000354 	.word	0x20000354
 8003818:	20000383 	.word	0x20000383
 800381c:	20000358 	.word	0x20000358
 8003820:	20000384 	.word	0x20000384
 8003824:	2000035c 	.word	0x2000035c
 8003828:	20000385 	.word	0x20000385
 800382c:	20000360 	.word	0x20000360
 8003830:	20000386 	.word	0x20000386
 8003834:	20000364 	.word	0x20000364
 8003838:	20000387 	.word	0x20000387
 800383c:	20000368 	.word	0x20000368
 8003840:	20000388 	.word	0x20000388

08003844 <MRT_checkWakeUp>:


/*
 * Check if FC is back from wakeup
 */
void MRT_checkWakeUp(void){
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8003848:	4b0e      	ldr	r3, [pc, #56]	; (8003884 <MRT_checkWakeUp+0x40>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b02      	cmp	r3, #2
 8003852:	d112      	bne.n	800387a <MRT_checkWakeUp+0x36>
	{

		wu_flag = 1;
 8003854:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <MRT_checkWakeUp+0x44>)
 8003856:	2201      	movs	r2, #1
 8003858:	701a      	strb	r2, [r3, #0]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 800385a:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <MRT_checkWakeUp+0x40>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a09      	ldr	r2, [pc, #36]	; (8003884 <MRT_checkWakeUp+0x40>)
 8003860:	f043 0308 	orr.w	r3, r3, #8
 8003864:	6013      	str	r3, [r2, #0]

		println("Wakeup from STANDBY MODE");
 8003866:	4809      	ldr	r0, [pc, #36]	; (800388c <MRT_checkWakeUp+0x48>)
 8003868:	f7fd fc30 	bl	80010cc <println>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 800386c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003870:	f008 f964 	bl	800bb3c <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8003874:	4806      	ldr	r0, [pc, #24]	; (8003890 <MRT_checkWakeUp+0x4c>)
 8003876:	f009 fdb9 	bl	800d3ec <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_clear_alarms_flags();
 800387a:	f7fe fdfd 	bl	8002478 <MRT_clear_alarms_flags>
}
 800387e:	bf00      	nop
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40007000 	.word	0x40007000
 8003888:	20000381 	.word	0x20000381
 800388c:	08018ee4 	.word	0x08018ee4
 8003890:	20005bb0 	.word	0x20005bb0

08003894 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af02      	add	r7, sp, #8
 800389a:	4603      	mov	r3, r0
 800389c:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 800389e:	f107 020f 	add.w	r2, r7, #15
 80038a2:	1df9      	adds	r1, r7, #7
 80038a4:	2364      	movs	r3, #100	; 0x64
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	2301      	movs	r3, #1
 80038aa:	4804      	ldr	r0, [pc, #16]	; (80038bc <W25qxx_Spi+0x28>)
 80038ac:	f00a f908 	bl	800dac0 <HAL_SPI_TransmitReceive>
	return ret;
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	20005c28 	.word	0x20005c28

080038c0 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80038c6:	2300      	movs	r3, #0
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	2300      	movs	r3, #0
 80038cc:	60bb      	str	r3, [r7, #8]
 80038ce:	2300      	movs	r3, #0
 80038d0:	607b      	str	r3, [r7, #4]
 80038d2:	2300      	movs	r3, #0
 80038d4:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80038d6:	2200      	movs	r2, #0
 80038d8:	2140      	movs	r1, #64	; 0x40
 80038da:	4813      	ldr	r0, [pc, #76]	; (8003928 <W25qxx_ReadID+0x68>)
 80038dc:	f007 f87a 	bl	800a9d4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 80038e0:	209f      	movs	r0, #159	; 0x9f
 80038e2:	f7ff ffd7 	bl	8003894 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80038e6:	20a5      	movs	r0, #165	; 0xa5
 80038e8:	f7ff ffd4 	bl	8003894 <W25qxx_Spi>
 80038ec:	4603      	mov	r3, r0
 80038ee:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80038f0:	20a5      	movs	r0, #165	; 0xa5
 80038f2:	f7ff ffcf 	bl	8003894 <W25qxx_Spi>
 80038f6:	4603      	mov	r3, r0
 80038f8:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80038fa:	20a5      	movs	r0, #165	; 0xa5
 80038fc:	f7ff ffca 	bl	8003894 <W25qxx_Spi>
 8003900:	4603      	mov	r3, r0
 8003902:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003904:	2201      	movs	r2, #1
 8003906:	2140      	movs	r1, #64	; 0x40
 8003908:	4807      	ldr	r0, [pc, #28]	; (8003928 <W25qxx_ReadID+0x68>)
 800390a:	f007 f863 	bl	800a9d4 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	041a      	lsls	r2, r3, #16
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	021b      	lsls	r3, r3, #8
 8003916:	4313      	orrs	r3, r2
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	4313      	orrs	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]
	return Temp;
 800391e:	68fb      	ldr	r3, [r7, #12]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40020c00 	.word	0x40020c00

0800392c <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 800392c:	b590      	push	{r4, r7, lr}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003932:	2200      	movs	r2, #0
 8003934:	2140      	movs	r1, #64	; 0x40
 8003936:	4816      	ldr	r0, [pc, #88]	; (8003990 <W25qxx_ReadUniqID+0x64>)
 8003938:	f007 f84c 	bl	800a9d4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 800393c:	204b      	movs	r0, #75	; 0x4b
 800393e:	f7ff ffa9 	bl	8003894 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003942:	2300      	movs	r3, #0
 8003944:	71fb      	strb	r3, [r7, #7]
 8003946:	e005      	b.n	8003954 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003948:	20a5      	movs	r0, #165	; 0xa5
 800394a:	f7ff ffa3 	bl	8003894 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800394e:	79fb      	ldrb	r3, [r7, #7]
 8003950:	3301      	adds	r3, #1
 8003952:	71fb      	strb	r3, [r7, #7]
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	2b03      	cmp	r3, #3
 8003958:	d9f6      	bls.n	8003948 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 800395a:	2300      	movs	r3, #0
 800395c:	71bb      	strb	r3, [r7, #6]
 800395e:	e00b      	b.n	8003978 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003960:	79bc      	ldrb	r4, [r7, #6]
 8003962:	20a5      	movs	r0, #165	; 0xa5
 8003964:	f7ff ff96 	bl	8003894 <W25qxx_Spi>
 8003968:	4603      	mov	r3, r0
 800396a:	461a      	mov	r2, r3
 800396c:	4b09      	ldr	r3, [pc, #36]	; (8003994 <W25qxx_ReadUniqID+0x68>)
 800396e:	4423      	add	r3, r4
 8003970:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8003972:	79bb      	ldrb	r3, [r7, #6]
 8003974:	3301      	adds	r3, #1
 8003976:	71bb      	strb	r3, [r7, #6]
 8003978:	79bb      	ldrb	r3, [r7, #6]
 800397a:	2b07      	cmp	r3, #7
 800397c:	d9f0      	bls.n	8003960 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800397e:	2201      	movs	r2, #1
 8003980:	2140      	movs	r1, #64	; 0x40
 8003982:	4803      	ldr	r0, [pc, #12]	; (8003990 <W25qxx_ReadUniqID+0x64>)
 8003984:	f007 f826 	bl	800a9d4 <HAL_GPIO_WritePin>
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	bd90      	pop	{r4, r7, pc}
 8003990:	40020c00 	.word	0x40020c00
 8003994:	20005f10 	.word	0x20005f10

08003998 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800399c:	2200      	movs	r2, #0
 800399e:	2140      	movs	r1, #64	; 0x40
 80039a0:	4807      	ldr	r0, [pc, #28]	; (80039c0 <W25qxx_WriteEnable+0x28>)
 80039a2:	f007 f817 	bl	800a9d4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 80039a6:	2006      	movs	r0, #6
 80039a8:	f7ff ff74 	bl	8003894 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80039ac:	2201      	movs	r2, #1
 80039ae:	2140      	movs	r1, #64	; 0x40
 80039b0:	4803      	ldr	r0, [pc, #12]	; (80039c0 <W25qxx_WriteEnable+0x28>)
 80039b2:	f007 f80f 	bl	800a9d4 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 80039b6:	2001      	movs	r0, #1
 80039b8:	f00c f8dc 	bl	800fb74 <osDelay>
}
 80039bc:	bf00      	nop
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40020c00 	.word	0x40020c00

080039c4 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 80039ce:	2300      	movs	r3, #0
 80039d0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80039d2:	2200      	movs	r2, #0
 80039d4:	2140      	movs	r1, #64	; 0x40
 80039d6:	481c      	ldr	r0, [pc, #112]	; (8003a48 <W25qxx_ReadStatusRegister+0x84>)
 80039d8:	f006 fffc 	bl	800a9d4 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 80039dc:	79fb      	ldrb	r3, [r7, #7]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d10c      	bne.n	80039fc <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 80039e2:	2005      	movs	r0, #5
 80039e4:	f7ff ff56 	bl	8003894 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80039e8:	20a5      	movs	r0, #165	; 0xa5
 80039ea:	f7ff ff53 	bl	8003894 <W25qxx_Spi>
 80039ee:	4603      	mov	r3, r0
 80039f0:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 80039f2:	4a16      	ldr	r2, [pc, #88]	; (8003a4c <W25qxx_ReadStatusRegister+0x88>)
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
 80039f6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80039fa:	e01b      	b.n	8003a34 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 80039fc:	79fb      	ldrb	r3, [r7, #7]
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d10c      	bne.n	8003a1c <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8003a02:	2035      	movs	r0, #53	; 0x35
 8003a04:	f7ff ff46 	bl	8003894 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003a08:	20a5      	movs	r0, #165	; 0xa5
 8003a0a:	f7ff ff43 	bl	8003894 <W25qxx_Spi>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8003a12:	4a0e      	ldr	r2, [pc, #56]	; (8003a4c <W25qxx_ReadStatusRegister+0x88>)
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
 8003a16:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8003a1a:	e00b      	b.n	8003a34 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8003a1c:	2015      	movs	r0, #21
 8003a1e:	f7ff ff39 	bl	8003894 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003a22:	20a5      	movs	r0, #165	; 0xa5
 8003a24:	f7ff ff36 	bl	8003894 <W25qxx_Spi>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8003a2c:	4a07      	ldr	r2, [pc, #28]	; (8003a4c <W25qxx_ReadStatusRegister+0x88>)
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003a34:	2201      	movs	r2, #1
 8003a36:	2140      	movs	r1, #64	; 0x40
 8003a38:	4803      	ldr	r0, [pc, #12]	; (8003a48 <W25qxx_ReadStatusRegister+0x84>)
 8003a3a:	f006 ffcb 	bl	800a9d4 <HAL_GPIO_WritePin>
	return status;
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40020c00 	.word	0x40020c00
 8003a4c:	20005f10 	.word	0x20005f10

08003a50 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8003a54:	2001      	movs	r0, #1
 8003a56:	f00c f88d 	bl	800fb74 <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	2140      	movs	r1, #64	; 0x40
 8003a5e:	480f      	ldr	r0, [pc, #60]	; (8003a9c <W25qxx_WaitForWriteEnd+0x4c>)
 8003a60:	f006 ffb8 	bl	800a9d4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8003a64:	2005      	movs	r0, #5
 8003a66:	f7ff ff15 	bl	8003894 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003a6a:	20a5      	movs	r0, #165	; 0xa5
 8003a6c:	f7ff ff12 	bl	8003894 <W25qxx_Spi>
 8003a70:	4603      	mov	r3, r0
 8003a72:	461a      	mov	r2, r3
 8003a74:	4b0a      	ldr	r3, [pc, #40]	; (8003aa0 <W25qxx_WaitForWriteEnd+0x50>)
 8003a76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8003a7a:	2001      	movs	r0, #1
 8003a7c:	f00c f87a 	bl	800fb74 <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8003a80:	4b07      	ldr	r3, [pc, #28]	; (8003aa0 <W25qxx_WaitForWriteEnd+0x50>)
 8003a82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1ed      	bne.n	8003a6a <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003a8e:	2201      	movs	r2, #1
 8003a90:	2140      	movs	r1, #64	; 0x40
 8003a92:	4802      	ldr	r0, [pc, #8]	; (8003a9c <W25qxx_WaitForWriteEnd+0x4c>)
 8003a94:	f006 ff9e 	bl	800a9d4 <HAL_GPIO_WritePin>
}
 8003a98:	bf00      	nop
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40020c00 	.word	0x40020c00
 8003aa0:	20005f10 	.word	0x20005f10

08003aa4 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8003aaa:	4b90      	ldr	r3, [pc, #576]	; (8003cec <W25qxx_Init+0x248>)
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8003ab2:	e002      	b.n	8003aba <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8003ab4:	2001      	movs	r0, #1
 8003ab6:	f00c f85d 	bl	800fb74 <osDelay>
	while (HAL_GetTick() < 100)
 8003aba:	f006 f873 	bl	8009ba4 <HAL_GetTick>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b63      	cmp	r3, #99	; 0x63
 8003ac2:	d9f7      	bls.n	8003ab4 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	2140      	movs	r1, #64	; 0x40
 8003ac8:	4889      	ldr	r0, [pc, #548]	; (8003cf0 <W25qxx_Init+0x24c>)
 8003aca:	f006 ff83 	bl	800a9d4 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8003ace:	2064      	movs	r0, #100	; 0x64
 8003ad0:	f00c f850 	bl	800fb74 <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 8003ad4:	4887      	ldr	r0, [pc, #540]	; (8003cf4 <W25qxx_Init+0x250>)
 8003ad6:	f010 fb55 	bl	8014184 <puts>
#endif
	id = W25qxx_ReadID();
 8003ada:	f7ff fef1 	bl	80038c0 <W25qxx_ReadID>
 8003ade:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	4885      	ldr	r0, [pc, #532]	; (8003cf8 <W25qxx_Init+0x254>)
 8003ae4:	f010 fac8 	bl	8014078 <iprintf>
#endif
	switch (id & 0x000000FF)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	3b11      	subs	r3, #17
 8003aee:	2b0f      	cmp	r3, #15
 8003af0:	f200 808b 	bhi.w	8003c0a <W25qxx_Init+0x166>
 8003af4:	a201      	add	r2, pc, #4	; (adr r2, 8003afc <W25qxx_Init+0x58>)
 8003af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afa:	bf00      	nop
 8003afc:	08003bf7 	.word	0x08003bf7
 8003b00:	08003be3 	.word	0x08003be3
 8003b04:	08003bcf 	.word	0x08003bcf
 8003b08:	08003bbb 	.word	0x08003bbb
 8003b0c:	08003ba7 	.word	0x08003ba7
 8003b10:	08003b93 	.word	0x08003b93
 8003b14:	08003b7f 	.word	0x08003b7f
 8003b18:	08003b69 	.word	0x08003b69
 8003b1c:	08003b53 	.word	0x08003b53
 8003b20:	08003c0b 	.word	0x08003c0b
 8003b24:	08003c0b 	.word	0x08003c0b
 8003b28:	08003c0b 	.word	0x08003c0b
 8003b2c:	08003c0b 	.word	0x08003c0b
 8003b30:	08003c0b 	.word	0x08003c0b
 8003b34:	08003c0b 	.word	0x08003c0b
 8003b38:	08003b3d 	.word	0x08003b3d
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8003b3c:	4b6b      	ldr	r3, [pc, #428]	; (8003cec <W25qxx_Init+0x248>)
 8003b3e:	220a      	movs	r2, #10
 8003b40:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8003b42:	4b6a      	ldr	r3, [pc, #424]	; (8003cec <W25qxx_Init+0x248>)
 8003b44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b48:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 8003b4a:	486c      	ldr	r0, [pc, #432]	; (8003cfc <W25qxx_Init+0x258>)
 8003b4c:	f010 fb1a 	bl	8014184 <puts>
#endif
		break;
 8003b50:	e064      	b.n	8003c1c <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8003b52:	4b66      	ldr	r3, [pc, #408]	; (8003cec <W25qxx_Init+0x248>)
 8003b54:	2209      	movs	r2, #9
 8003b56:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8003b58:	4b64      	ldr	r3, [pc, #400]	; (8003cec <W25qxx_Init+0x248>)
 8003b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b5e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 8003b60:	4867      	ldr	r0, [pc, #412]	; (8003d00 <W25qxx_Init+0x25c>)
 8003b62:	f010 fb0f 	bl	8014184 <puts>
#endif
		break;
 8003b66:	e059      	b.n	8003c1c <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8003b68:	4b60      	ldr	r3, [pc, #384]	; (8003cec <W25qxx_Init+0x248>)
 8003b6a:	2208      	movs	r2, #8
 8003b6c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8003b6e:	4b5f      	ldr	r3, [pc, #380]	; (8003cec <W25qxx_Init+0x248>)
 8003b70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b74:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 8003b76:	4863      	ldr	r0, [pc, #396]	; (8003d04 <W25qxx_Init+0x260>)
 8003b78:	f010 fb04 	bl	8014184 <puts>
#endif
		break;
 8003b7c:	e04e      	b.n	8003c1c <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8003b7e:	4b5b      	ldr	r3, [pc, #364]	; (8003cec <W25qxx_Init+0x248>)
 8003b80:	2207      	movs	r2, #7
 8003b82:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8003b84:	4b59      	ldr	r3, [pc, #356]	; (8003cec <W25qxx_Init+0x248>)
 8003b86:	2280      	movs	r2, #128	; 0x80
 8003b88:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 8003b8a:	485f      	ldr	r0, [pc, #380]	; (8003d08 <W25qxx_Init+0x264>)
 8003b8c:	f010 fafa 	bl	8014184 <puts>
#endif
		break;
 8003b90:	e044      	b.n	8003c1c <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8003b92:	4b56      	ldr	r3, [pc, #344]	; (8003cec <W25qxx_Init+0x248>)
 8003b94:	2206      	movs	r2, #6
 8003b96:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8003b98:	4b54      	ldr	r3, [pc, #336]	; (8003cec <W25qxx_Init+0x248>)
 8003b9a:	2240      	movs	r2, #64	; 0x40
 8003b9c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 8003b9e:	485b      	ldr	r0, [pc, #364]	; (8003d0c <W25qxx_Init+0x268>)
 8003ba0:	f010 faf0 	bl	8014184 <puts>
#endif
		break;
 8003ba4:	e03a      	b.n	8003c1c <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8003ba6:	4b51      	ldr	r3, [pc, #324]	; (8003cec <W25qxx_Init+0x248>)
 8003ba8:	2205      	movs	r2, #5
 8003baa:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8003bac:	4b4f      	ldr	r3, [pc, #316]	; (8003cec <W25qxx_Init+0x248>)
 8003bae:	2220      	movs	r2, #32
 8003bb0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 8003bb2:	4857      	ldr	r0, [pc, #348]	; (8003d10 <W25qxx_Init+0x26c>)
 8003bb4:	f010 fae6 	bl	8014184 <puts>
#endif
		break;
 8003bb8:	e030      	b.n	8003c1c <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8003bba:	4b4c      	ldr	r3, [pc, #304]	; (8003cec <W25qxx_Init+0x248>)
 8003bbc:	2204      	movs	r2, #4
 8003bbe:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8003bc0:	4b4a      	ldr	r3, [pc, #296]	; (8003cec <W25qxx_Init+0x248>)
 8003bc2:	2210      	movs	r2, #16
 8003bc4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 8003bc6:	4853      	ldr	r0, [pc, #332]	; (8003d14 <W25qxx_Init+0x270>)
 8003bc8:	f010 fadc 	bl	8014184 <puts>
#endif
		break;
 8003bcc:	e026      	b.n	8003c1c <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8003bce:	4b47      	ldr	r3, [pc, #284]	; (8003cec <W25qxx_Init+0x248>)
 8003bd0:	2203      	movs	r2, #3
 8003bd2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8003bd4:	4b45      	ldr	r3, [pc, #276]	; (8003cec <W25qxx_Init+0x248>)
 8003bd6:	2208      	movs	r2, #8
 8003bd8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 8003bda:	484f      	ldr	r0, [pc, #316]	; (8003d18 <W25qxx_Init+0x274>)
 8003bdc:	f010 fad2 	bl	8014184 <puts>
#endif
		break;
 8003be0:	e01c      	b.n	8003c1c <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8003be2:	4b42      	ldr	r3, [pc, #264]	; (8003cec <W25qxx_Init+0x248>)
 8003be4:	2202      	movs	r2, #2
 8003be6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8003be8:	4b40      	ldr	r3, [pc, #256]	; (8003cec <W25qxx_Init+0x248>)
 8003bea:	2204      	movs	r2, #4
 8003bec:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 8003bee:	484b      	ldr	r0, [pc, #300]	; (8003d1c <W25qxx_Init+0x278>)
 8003bf0:	f010 fac8 	bl	8014184 <puts>
#endif
		break;
 8003bf4:	e012      	b.n	8003c1c <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8003bf6:	4b3d      	ldr	r3, [pc, #244]	; (8003cec <W25qxx_Init+0x248>)
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8003bfc:	4b3b      	ldr	r3, [pc, #236]	; (8003cec <W25qxx_Init+0x248>)
 8003bfe:	2202      	movs	r2, #2
 8003c00:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 8003c02:	4847      	ldr	r0, [pc, #284]	; (8003d20 <W25qxx_Init+0x27c>)
 8003c04:	f010 fabe 	bl	8014184 <puts>
#endif
		break;
 8003c08:	e008      	b.n	8003c1c <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 8003c0a:	4846      	ldr	r0, [pc, #280]	; (8003d24 <W25qxx_Init+0x280>)
 8003c0c:	f010 faba 	bl	8014184 <puts>
#endif
		w25qxx.Lock = 0;
 8003c10:	4b36      	ldr	r3, [pc, #216]	; (8003cec <W25qxx_Init+0x248>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	e063      	b.n	8003ce4 <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 8003c1c:	4b33      	ldr	r3, [pc, #204]	; (8003cec <W25qxx_Init+0x248>)
 8003c1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c22:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8003c24:	4b31      	ldr	r3, [pc, #196]	; (8003cec <W25qxx_Init+0x248>)
 8003c26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c2a:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8003c2c:	4b2f      	ldr	r3, [pc, #188]	; (8003cec <W25qxx_Init+0x248>)
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	4a2e      	ldr	r2, [pc, #184]	; (8003cec <W25qxx_Init+0x248>)
 8003c34:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8003c36:	4b2d      	ldr	r3, [pc, #180]	; (8003cec <W25qxx_Init+0x248>)
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	4a2c      	ldr	r2, [pc, #176]	; (8003cec <W25qxx_Init+0x248>)
 8003c3c:	6912      	ldr	r2, [r2, #16]
 8003c3e:	fb02 f303 	mul.w	r3, r2, r3
 8003c42:	4a2a      	ldr	r2, [pc, #168]	; (8003cec <W25qxx_Init+0x248>)
 8003c44:	8952      	ldrh	r2, [r2, #10]
 8003c46:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c4a:	4a28      	ldr	r2, [pc, #160]	; (8003cec <W25qxx_Init+0x248>)
 8003c4c:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8003c4e:	4b27      	ldr	r3, [pc, #156]	; (8003cec <W25qxx_Init+0x248>)
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	4a25      	ldr	r2, [pc, #148]	; (8003cec <W25qxx_Init+0x248>)
 8003c56:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8003c58:	4b24      	ldr	r3, [pc, #144]	; (8003cec <W25qxx_Init+0x248>)
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	4a23      	ldr	r2, [pc, #140]	; (8003cec <W25qxx_Init+0x248>)
 8003c5e:	6912      	ldr	r2, [r2, #16]
 8003c60:	fb02 f303 	mul.w	r3, r2, r3
 8003c64:	0a9b      	lsrs	r3, r3, #10
 8003c66:	4a21      	ldr	r2, [pc, #132]	; (8003cec <W25qxx_Init+0x248>)
 8003c68:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8003c6a:	f7ff fe5f 	bl	800392c <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8003c6e:	2001      	movs	r0, #1
 8003c70:	f7ff fea8 	bl	80039c4 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8003c74:	2002      	movs	r0, #2
 8003c76:	f7ff fea5 	bl	80039c4 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8003c7a:	2003      	movs	r0, #3
 8003c7c:	f7ff fea2 	bl	80039c4 <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 8003c80:	4b1a      	ldr	r3, [pc, #104]	; (8003cec <W25qxx_Init+0x248>)
 8003c82:	895b      	ldrh	r3, [r3, #10]
 8003c84:	4619      	mov	r1, r3
 8003c86:	4828      	ldr	r0, [pc, #160]	; (8003d28 <W25qxx_Init+0x284>)
 8003c88:	f010 f9f6 	bl	8014078 <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 8003c8c:	4b17      	ldr	r3, [pc, #92]	; (8003cec <W25qxx_Init+0x248>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	4619      	mov	r1, r3
 8003c92:	4826      	ldr	r0, [pc, #152]	; (8003d2c <W25qxx_Init+0x288>)
 8003c94:	f010 f9f0 	bl	8014078 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 8003c98:	4b14      	ldr	r3, [pc, #80]	; (8003cec <W25qxx_Init+0x248>)
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4824      	ldr	r0, [pc, #144]	; (8003d30 <W25qxx_Init+0x28c>)
 8003ca0:	f010 f9ea 	bl	8014078 <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 8003ca4:	4b11      	ldr	r3, [pc, #68]	; (8003cec <W25qxx_Init+0x248>)
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4822      	ldr	r0, [pc, #136]	; (8003d34 <W25qxx_Init+0x290>)
 8003cac:	f010 f9e4 	bl	8014078 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 8003cb0:	4b0e      	ldr	r3, [pc, #56]	; (8003cec <W25qxx_Init+0x248>)
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4820      	ldr	r0, [pc, #128]	; (8003d38 <W25qxx_Init+0x294>)
 8003cb8:	f010 f9de 	bl	8014078 <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <W25qxx_Init+0x248>)
 8003cbe:	69db      	ldr	r3, [r3, #28]
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	481e      	ldr	r0, [pc, #120]	; (8003d3c <W25qxx_Init+0x298>)
 8003cc4:	f010 f9d8 	bl	8014078 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 8003cc8:	4b08      	ldr	r3, [pc, #32]	; (8003cec <W25qxx_Init+0x248>)
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	4619      	mov	r1, r3
 8003cce:	481c      	ldr	r0, [pc, #112]	; (8003d40 <W25qxx_Init+0x29c>)
 8003cd0:	f010 f9d2 	bl	8014078 <iprintf>
	printf("w25qxx Init Done\r\n");
 8003cd4:	481b      	ldr	r0, [pc, #108]	; (8003d44 <W25qxx_Init+0x2a0>)
 8003cd6:	f010 fa55 	bl	8014184 <puts>
#endif
	w25qxx.Lock = 0;
 8003cda:	4b04      	ldr	r3, [pc, #16]	; (8003cec <W25qxx_Init+0x248>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8003ce2:	2301      	movs	r3, #1
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	20005f10 	.word	0x20005f10
 8003cf0:	40020c00 	.word	0x40020c00
 8003cf4:	08018f00 	.word	0x08018f00
 8003cf8:	08018f18 	.word	0x08018f18
 8003cfc:	08018f2c 	.word	0x08018f2c
 8003d00:	08018f44 	.word	0x08018f44
 8003d04:	08018f5c 	.word	0x08018f5c
 8003d08:	08018f74 	.word	0x08018f74
 8003d0c:	08018f8c 	.word	0x08018f8c
 8003d10:	08018fa4 	.word	0x08018fa4
 8003d14:	08018fbc 	.word	0x08018fbc
 8003d18:	08018fd4 	.word	0x08018fd4
 8003d1c:	08018fec 	.word	0x08018fec
 8003d20:	08019004 	.word	0x08019004
 8003d24:	0801901c 	.word	0x0801901c
 8003d28:	08019030 	.word	0x08019030
 8003d2c:	08019050 	.word	0x08019050
 8003d30:	08019068 	.word	0x08019068
 8003d34:	08019088 	.word	0x08019088
 8003d38:	080190a4 	.word	0x080190a4
 8003d3c:	080190c4 	.word	0x080190c4
 8003d40:	080190e0 	.word	0x080190e0
 8003d44:	08019100 	.word	0x08019100

08003d48 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8003d50:	e002      	b.n	8003d58 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8003d52:	2001      	movs	r0, #1
 8003d54:	f00b ff0e 	bl	800fb74 <osDelay>
	while (w25qxx.Lock == 1)
 8003d58:	4b2d      	ldr	r3, [pc, #180]	; (8003e10 <W25qxx_EraseSector+0xc8>)
 8003d5a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d0f7      	beq.n	8003d52 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8003d62:	4b2b      	ldr	r3, [pc, #172]	; (8003e10 <W25qxx_EraseSector+0xc8>)
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 8003d6a:	f005 ff1b 	bl	8009ba4 <HAL_GetTick>
 8003d6e:	60f8      	str	r0, [r7, #12]
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
 8003d70:	6879      	ldr	r1, [r7, #4]
 8003d72:	4828      	ldr	r0, [pc, #160]	; (8003e14 <W25qxx_EraseSector+0xcc>)
 8003d74:	f010 f980 	bl	8014078 <iprintf>
#endif
	W25qxx_WaitForWriteEnd();
 8003d78:	f7ff fe6a 	bl	8003a50 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8003d7c:	4b24      	ldr	r3, [pc, #144]	; (8003e10 <W25qxx_EraseSector+0xc8>)
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	fb02 f303 	mul.w	r3, r2, r3
 8003d86:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8003d88:	f7ff fe06 	bl	8003998 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	2140      	movs	r1, #64	; 0x40
 8003d90:	4821      	ldr	r0, [pc, #132]	; (8003e18 <W25qxx_EraseSector+0xd0>)
 8003d92:	f006 fe1f 	bl	800a9d4 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8003d96:	4b1e      	ldr	r3, [pc, #120]	; (8003e10 <W25qxx_EraseSector+0xc8>)
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	2b08      	cmp	r3, #8
 8003d9c:	d909      	bls.n	8003db2 <W25qxx_EraseSector+0x6a>
	{
		W25qxx_Spi(0x21);
 8003d9e:	2021      	movs	r0, #33	; 0x21
 8003da0:	f7ff fd78 	bl	8003894 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	0e1b      	lsrs	r3, r3, #24
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff fd72 	bl	8003894 <W25qxx_Spi>
 8003db0:	e002      	b.n	8003db8 <W25qxx_EraseSector+0x70>
	}
	else
	{
		W25qxx_Spi(0x20);
 8003db2:	2020      	movs	r0, #32
 8003db4:	f7ff fd6e 	bl	8003894 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	0c1b      	lsrs	r3, r3, #16
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff fd68 	bl	8003894 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	0a1b      	lsrs	r3, r3, #8
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff fd62 	bl	8003894 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff fd5d 	bl	8003894 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003dda:	2201      	movs	r2, #1
 8003ddc:	2140      	movs	r1, #64	; 0x40
 8003dde:	480e      	ldr	r0, [pc, #56]	; (8003e18 <W25qxx_EraseSector+0xd0>)
 8003de0:	f006 fdf8 	bl	800a9d4 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8003de4:	f7ff fe34 	bl	8003a50 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
 8003de8:	f005 fedc 	bl	8009ba4 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	4619      	mov	r1, r3
 8003df4:	4809      	ldr	r0, [pc, #36]	; (8003e1c <W25qxx_EraseSector+0xd4>)
 8003df6:	f010 f93f 	bl	8014078 <iprintf>
#endif
	W25qxx_Delay(1);
 8003dfa:	2001      	movs	r0, #1
 8003dfc:	f00b feba 	bl	800fb74 <osDelay>
	w25qxx.Lock = 0;
 8003e00:	4b03      	ldr	r3, [pc, #12]	; (8003e10 <W25qxx_EraseSector+0xc8>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003e08:	bf00      	nop
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	20005f10 	.word	0x20005f10
 8003e14:	08019158 	.word	0x08019158
 8003e18:	40020c00 	.word	0x40020c00
 8003e1c:	0801917c 	.word	0x0801917c

08003e20 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8003e28:	4b07      	ldr	r3, [pc, #28]	; (8003e48 <W25qxx_SectorToPage+0x28>)
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	fb02 f303 	mul.w	r3, r2, r3
 8003e32:	4a05      	ldr	r2, [pc, #20]	; (8003e48 <W25qxx_SectorToPage+0x28>)
 8003e34:	8952      	ldrh	r2, [r2, #10]
 8003e36:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	20005f10 	.word	0x20005f10

08003e4c <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
 8003e58:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8003e5a:	e002      	b.n	8003e62 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8003e5c:	2001      	movs	r0, #1
 8003e5e:	f00b fe89 	bl	800fb74 <osDelay>
	while (w25qxx.Lock == 1)
 8003e62:	4b57      	ldr	r3, [pc, #348]	; (8003fc0 <W25qxx_WritePage+0x174>)
 8003e64:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d0f7      	beq.n	8003e5c <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8003e6c:	4b54      	ldr	r3, [pc, #336]	; (8003fc0 <W25qxx_WritePage+0x174>)
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4413      	add	r3, r2
 8003e7a:	4a51      	ldr	r2, [pc, #324]	; (8003fc0 <W25qxx_WritePage+0x174>)
 8003e7c:	8952      	ldrh	r2, [r2, #10]
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d802      	bhi.n	8003e88 <W25qxx_WritePage+0x3c>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d105      	bne.n	8003e94 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003e88:	4b4d      	ldr	r3, [pc, #308]	; (8003fc0 <W25qxx_WritePage+0x174>)
 8003e8a:	895b      	ldrh	r3, [r3, #10]
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	4413      	add	r3, r2
 8003e9a:	4a49      	ldr	r2, [pc, #292]	; (8003fc0 <W25qxx_WritePage+0x174>)
 8003e9c:	8952      	ldrh	r2, [r2, #10]
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d905      	bls.n	8003eae <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003ea2:	4b47      	ldr	r3, [pc, #284]	; (8003fc0 <W25qxx_WritePage+0x174>)
 8003ea4:	895b      	ldrh	r3, [r3, #10]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	68b9      	ldr	r1, [r7, #8]
 8003eb4:	4843      	ldr	r0, [pc, #268]	; (8003fc4 <W25qxx_WritePage+0x178>)
 8003eb6:	f010 f8df 	bl	8014078 <iprintf>
	W25qxx_Delay(100);
 8003eba:	2064      	movs	r0, #100	; 0x64
 8003ebc:	f00b fe5a 	bl	800fb74 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8003ec0:	f005 fe70 	bl	8009ba4 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 8003ec6:	f7ff fdc3 	bl	8003a50 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8003eca:	f7ff fd65 	bl	8003998 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003ece:	2200      	movs	r2, #0
 8003ed0:	2140      	movs	r1, #64	; 0x40
 8003ed2:	483d      	ldr	r0, [pc, #244]	; (8003fc8 <W25qxx_WritePage+0x17c>)
 8003ed4:	f006 fd7e 	bl	800a9d4 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8003ed8:	4b39      	ldr	r3, [pc, #228]	; (8003fc0 <W25qxx_WritePage+0x174>)
 8003eda:	895b      	ldrh	r3, [r3, #10]
 8003edc:	461a      	mov	r2, r3
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	fb03 f302 	mul.w	r3, r3, r2
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8003eea:	4b35      	ldr	r3, [pc, #212]	; (8003fc0 <W25qxx_WritePage+0x174>)
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	2b08      	cmp	r3, #8
 8003ef0:	d909      	bls.n	8003f06 <W25qxx_WritePage+0xba>
	{
		W25qxx_Spi(0x12);
 8003ef2:	2012      	movs	r0, #18
 8003ef4:	f7ff fcce 	bl	8003894 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	0e1b      	lsrs	r3, r3, #24
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7ff fcc8 	bl	8003894 <W25qxx_Spi>
 8003f04:	e002      	b.n	8003f0c <W25qxx_WritePage+0xc0>
	}
	else
	{
		W25qxx_Spi(0x02);
 8003f06:	2002      	movs	r0, #2
 8003f08:	f7ff fcc4 	bl	8003894 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	0c1b      	lsrs	r3, r3, #16
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff fcbe 	bl	8003894 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	0a1b      	lsrs	r3, r3, #8
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff fcb8 	bl	8003894 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff fcb3 	bl	8003894 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	2364      	movs	r3, #100	; 0x64
 8003f34:	68f9      	ldr	r1, [r7, #12]
 8003f36:	4825      	ldr	r0, [pc, #148]	; (8003fcc <W25qxx_WritePage+0x180>)
 8003f38:	f009 fb75 	bl	800d626 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	2140      	movs	r1, #64	; 0x40
 8003f40:	4821      	ldr	r0, [pc, #132]	; (8003fc8 <W25qxx_WritePage+0x17c>)
 8003f42:	f006 fd47 	bl	800a9d4 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8003f46:	f7ff fd83 	bl	8003a50 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8003f4a:	f005 fe2b 	bl	8009ba4 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 8003f56:	2300      	movs	r3, #0
 8003f58:	617b      	str	r3, [r7, #20]
 8003f5a:	e018      	b.n	8003f8e <W25qxx_WritePage+0x142>
	{
		if ((i % 8 == 0) && (i > 2))
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d108      	bne.n	8003f78 <W25qxx_WritePage+0x12c>
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d905      	bls.n	8003f78 <W25qxx_WritePage+0x12c>
		{
			printf("\r\n");
 8003f6c:	4818      	ldr	r0, [pc, #96]	; (8003fd0 <W25qxx_WritePage+0x184>)
 8003f6e:	f010 f909 	bl	8014184 <puts>
			W25qxx_Delay(10);
 8003f72:	200a      	movs	r0, #10
 8003f74:	f00b fdfe 	bl	800fb74 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	4619      	mov	r1, r3
 8003f82:	4814      	ldr	r0, [pc, #80]	; (8003fd4 <W25qxx_WritePage+0x188>)
 8003f84:	f010 f878 	bl	8014078 <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	617b      	str	r3, [r7, #20]
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d3e2      	bcc.n	8003f5c <W25qxx_WritePage+0x110>
	}
	printf("\r\n");
 8003f96:	480e      	ldr	r0, [pc, #56]	; (8003fd0 <W25qxx_WritePage+0x184>)
 8003f98:	f010 f8f4 	bl	8014184 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 8003f9c:	6939      	ldr	r1, [r7, #16]
 8003f9e:	480e      	ldr	r0, [pc, #56]	; (8003fd8 <W25qxx_WritePage+0x18c>)
 8003fa0:	f010 f86a 	bl	8014078 <iprintf>
	W25qxx_Delay(100);
 8003fa4:	2064      	movs	r0, #100	; 0x64
 8003fa6:	f00b fde5 	bl	800fb74 <osDelay>
#endif
	W25qxx_Delay(1);
 8003faa:	2001      	movs	r0, #1
 8003fac:	f00b fde2 	bl	800fb74 <osDelay>
	w25qxx.Lock = 0;
 8003fb0:	4b03      	ldr	r3, [pc, #12]	; (8003fc0 <W25qxx_WritePage+0x174>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003fb8:	bf00      	nop
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	20005f10 	.word	0x20005f10
 8003fc4:	080193e0 	.word	0x080193e0
 8003fc8:	40020c00 	.word	0x40020c00
 8003fcc:	20005c28 	.word	0x20005c28
 8003fd0:	0801941c 	.word	0x0801941c
 8003fd4:	08019420 	.word	0x08019420
 8003fd8:	08019428 	.word	0x08019428

08003fdc <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b088      	sub	sp, #32
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8003fea:	4b36      	ldr	r3, [pc, #216]	; (80040c4 <W25qxx_WriteSector+0xe8>)
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d802      	bhi.n	8003ffa <W25qxx_WriteSector+0x1e>
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d102      	bne.n	8004000 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8003ffa:	4b32      	ldr	r3, [pc, #200]	; (80040c4 <W25qxx_WriteSector+0xe8>)
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	68b9      	ldr	r1, [r7, #8]
 8004006:	4830      	ldr	r0, [pc, #192]	; (80040c8 <W25qxx_WriteSector+0xec>)
 8004008:	f010 f836 	bl	8014078 <iprintf>
	W25qxx_Delay(100);
 800400c:	2064      	movs	r0, #100	; 0x64
 800400e:	f00b fdb1 	bl	800fb74 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8004012:	4b2c      	ldr	r3, [pc, #176]	; (80040c4 <W25qxx_WriteSector+0xe8>)
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	429a      	cmp	r2, r3
 800401a:	d306      	bcc.n	800402a <W25qxx_WriteSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
 800401c:	482b      	ldr	r0, [pc, #172]	; (80040cc <W25qxx_WriteSector+0xf0>)
 800401e:	f010 f8b1 	bl	8014184 <puts>
		W25qxx_Delay(100);
 8004022:	2064      	movs	r0, #100	; 0x64
 8004024:	f00b fda6 	bl	800fb74 <osDelay>
#endif
		return;
 8004028:	e048      	b.n	80040bc <W25qxx_WriteSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	441a      	add	r2, r3
 8004030:	4b24      	ldr	r3, [pc, #144]	; (80040c4 <W25qxx_WriteSector+0xe8>)
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	429a      	cmp	r2, r3
 8004036:	d905      	bls.n	8004044 <W25qxx_WriteSector+0x68>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8004038:	4b22      	ldr	r3, [pc, #136]	; (80040c4 <W25qxx_WriteSector+0xe8>)
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	61bb      	str	r3, [r7, #24]
 8004042:	e001      	b.n	8004048 <W25qxx_WriteSector+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004048:	68b8      	ldr	r0, [r7, #8]
 800404a:	f7ff fee9 	bl	8003e20 <W25qxx_SectorToPage>
 800404e:	4602      	mov	r2, r0
 8004050:	4b1c      	ldr	r3, [pc, #112]	; (80040c4 <W25qxx_WriteSector+0xe8>)
 8004052:	895b      	ldrh	r3, [r3, #10]
 8004054:	4619      	mov	r1, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	fbb3 f3f1 	udiv	r3, r3, r1
 800405c:	4413      	add	r3, r2
 800405e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004060:	4b18      	ldr	r3, [pc, #96]	; (80040c4 <W25qxx_WriteSector+0xe8>)
 8004062:	895b      	ldrh	r3, [r3, #10]
 8004064:	461a      	mov	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	fbb3 f1f2 	udiv	r1, r3, r2
 800406c:	fb02 f201 	mul.w	r2, r2, r1
 8004070:	1a9b      	subs	r3, r3, r2
 8004072:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	69f9      	ldr	r1, [r7, #28]
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f7ff fee6 	bl	8003e4c <W25qxx_WritePage>
		StartPage++;
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	3301      	adds	r3, #1
 8004084:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8004086:	4b0f      	ldr	r3, [pc, #60]	; (80040c4 <W25qxx_WriteSector+0xe8>)
 8004088:	895b      	ldrh	r3, [r3, #10]
 800408a:	461a      	mov	r2, r3
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	1a9a      	subs	r2, r3, r2
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	4413      	add	r3, r2
 8004094:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8004096:	4b0b      	ldr	r3, [pc, #44]	; (80040c4 <W25qxx_WriteSector+0xe8>)
 8004098:	895b      	ldrh	r3, [r3, #10]
 800409a:	461a      	mov	r2, r3
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	4413      	add	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80040a6:	2300      	movs	r3, #0
 80040a8:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	dce1      	bgt.n	8004074 <W25qxx_WriteSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
 80040b0:	4807      	ldr	r0, [pc, #28]	; (80040d0 <W25qxx_WriteSector+0xf4>)
 80040b2:	f010 f867 	bl	8014184 <puts>
	W25qxx_Delay(100);
 80040b6:	2064      	movs	r0, #100	; 0x64
 80040b8:	f00b fd5c 	bl	800fb74 <osDelay>
#endif
}
 80040bc:	3720      	adds	r7, #32
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	20005f10 	.word	0x20005f10
 80040c8:	0801944c 	.word	0x0801944c
 80040cc:	0801948c 	.word	0x0801948c
 80040d0:	080194ac 	.word	0x080194ac

080040d4 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
 80040e0:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80040e2:	e002      	b.n	80040ea <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 80040e4:	2001      	movs	r0, #1
 80040e6:	f00b fd45 	bl	800fb74 <osDelay>
	while (w25qxx.Lock == 1)
 80040ea:	4b54      	ldr	r3, [pc, #336]	; (800423c <W25qxx_ReadPage+0x168>)
 80040ec:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d0f7      	beq.n	80040e4 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 80040f4:	4b51      	ldr	r3, [pc, #324]	; (800423c <W25qxx_ReadPage+0x168>)
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 80040fc:	4b4f      	ldr	r3, [pc, #316]	; (800423c <W25qxx_ReadPage+0x168>)
 80040fe:	895b      	ldrh	r3, [r3, #10]
 8004100:	461a      	mov	r2, r3
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	4293      	cmp	r3, r2
 8004106:	d802      	bhi.n	800410e <W25qxx_ReadPage+0x3a>
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d102      	bne.n	8004114 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 800410e:	4b4b      	ldr	r3, [pc, #300]	; (800423c <W25qxx_ReadPage+0x168>)
 8004110:	895b      	ldrh	r3, [r3, #10]
 8004112:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	4413      	add	r3, r2
 800411a:	4a48      	ldr	r2, [pc, #288]	; (800423c <W25qxx_ReadPage+0x168>)
 800411c:	8952      	ldrh	r2, [r2, #10]
 800411e:	4293      	cmp	r3, r2
 8004120:	d905      	bls.n	800412e <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004122:	4b46      	ldr	r3, [pc, #280]	; (800423c <W25qxx_ReadPage+0x168>)
 8004124:	895b      	ldrh	r3, [r3, #10]
 8004126:	461a      	mov	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	68b9      	ldr	r1, [r7, #8]
 8004134:	4842      	ldr	r0, [pc, #264]	; (8004240 <W25qxx_ReadPage+0x16c>)
 8004136:	f00f ff9f 	bl	8014078 <iprintf>
	W25qxx_Delay(100);
 800413a:	2064      	movs	r0, #100	; 0x64
 800413c:	f00b fd1a 	bl	800fb74 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8004140:	f005 fd30 	bl	8009ba4 <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8004146:	4b3d      	ldr	r3, [pc, #244]	; (800423c <W25qxx_ReadPage+0x168>)
 8004148:	895b      	ldrh	r3, [r3, #10]
 800414a:	461a      	mov	r2, r3
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	fb03 f302 	mul.w	r3, r3, r2
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	4413      	add	r3, r2
 8004156:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004158:	2200      	movs	r2, #0
 800415a:	2140      	movs	r1, #64	; 0x40
 800415c:	4839      	ldr	r0, [pc, #228]	; (8004244 <W25qxx_ReadPage+0x170>)
 800415e:	f006 fc39 	bl	800a9d4 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004162:	4b36      	ldr	r3, [pc, #216]	; (800423c <W25qxx_ReadPage+0x168>)
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b08      	cmp	r3, #8
 8004168:	d909      	bls.n	800417e <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 800416a:	200c      	movs	r0, #12
 800416c:	f7ff fb92 	bl	8003894 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	0e1b      	lsrs	r3, r3, #24
 8004174:	b2db      	uxtb	r3, r3
 8004176:	4618      	mov	r0, r3
 8004178:	f7ff fb8c 	bl	8003894 <W25qxx_Spi>
 800417c:	e002      	b.n	8004184 <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 800417e:	200b      	movs	r0, #11
 8004180:	f7ff fb88 	bl	8003894 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	0c1b      	lsrs	r3, r3, #16
 8004188:	b2db      	uxtb	r3, r3
 800418a:	4618      	mov	r0, r3
 800418c:	f7ff fb82 	bl	8003894 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	0a1b      	lsrs	r3, r3, #8
 8004194:	b2db      	uxtb	r3, r3
 8004196:	4618      	mov	r0, r3
 8004198:	f7ff fb7c 	bl	8003894 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7ff fb77 	bl	8003894 <W25qxx_Spi>
	W25qxx_Spi(0);
 80041a6:	2000      	movs	r0, #0
 80041a8:	f7ff fb74 	bl	8003894 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	2364      	movs	r3, #100	; 0x64
 80041b2:	68f9      	ldr	r1, [r7, #12]
 80041b4:	4824      	ldr	r0, [pc, #144]	; (8004248 <W25qxx_ReadPage+0x174>)
 80041b6:	f009 fb72 	bl	800d89e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80041ba:	2201      	movs	r2, #1
 80041bc:	2140      	movs	r1, #64	; 0x40
 80041be:	4821      	ldr	r0, [pc, #132]	; (8004244 <W25qxx_ReadPage+0x170>)
 80041c0:	f006 fc08 	bl	800a9d4 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 80041c4:	f005 fcee 	bl	8009ba4 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 80041d0:	2300      	movs	r3, #0
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	e018      	b.n	8004208 <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d108      	bne.n	80041f2 <W25qxx_ReadPage+0x11e>
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d905      	bls.n	80041f2 <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 80041e6:	4819      	ldr	r0, [pc, #100]	; (800424c <W25qxx_ReadPage+0x178>)
 80041e8:	f00f ffcc 	bl	8014184 <puts>
			W25qxx_Delay(10);
 80041ec:	200a      	movs	r0, #10
 80041ee:	f00b fcc1 	bl	800fb74 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	4413      	add	r3, r2
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	4619      	mov	r1, r3
 80041fc:	4814      	ldr	r0, [pc, #80]	; (8004250 <W25qxx_ReadPage+0x17c>)
 80041fe:	f00f ff3b 	bl	8014078 <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	3301      	adds	r3, #1
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	429a      	cmp	r2, r3
 800420e:	d3e2      	bcc.n	80041d6 <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 8004210:	480e      	ldr	r0, [pc, #56]	; (800424c <W25qxx_ReadPage+0x178>)
 8004212:	f00f ffb7 	bl	8014184 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 8004216:	6939      	ldr	r1, [r7, #16]
 8004218:	480e      	ldr	r0, [pc, #56]	; (8004254 <W25qxx_ReadPage+0x180>)
 800421a:	f00f ff2d 	bl	8014078 <iprintf>
	W25qxx_Delay(100);
 800421e:	2064      	movs	r0, #100	; 0x64
 8004220:	f00b fca8 	bl	800fb74 <osDelay>
#endif
	W25qxx_Delay(1);
 8004224:	2001      	movs	r0, #1
 8004226:	f00b fca5 	bl	800fb74 <osDelay>
	w25qxx.Lock = 0;
 800422a:	4b04      	ldr	r3, [pc, #16]	; (800423c <W25qxx_ReadPage+0x168>)
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004232:	bf00      	nop
 8004234:	3718      	adds	r7, #24
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	20005f10 	.word	0x20005f10
 8004240:	080195f8 	.word	0x080195f8
 8004244:	40020c00 	.word	0x40020c00
 8004248:	20005c28 	.word	0x20005c28
 800424c:	0801941c 	.word	0x0801941c
 8004250:	08019420 	.word	0x08019420
 8004254:	08019634 	.word	0x08019634

08004258 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
 8004264:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8004266:	4b36      	ldr	r3, [pc, #216]	; (8004340 <W25qxx_ReadSector+0xe8>)
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	429a      	cmp	r2, r3
 800426e:	d802      	bhi.n	8004276 <W25qxx_ReadSector+0x1e>
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d102      	bne.n	800427c <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8004276:	4b32      	ldr	r3, [pc, #200]	; (8004340 <W25qxx_ReadSector+0xe8>)
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	68b9      	ldr	r1, [r7, #8]
 8004282:	4830      	ldr	r0, [pc, #192]	; (8004344 <W25qxx_ReadSector+0xec>)
 8004284:	f00f fef8 	bl	8014078 <iprintf>
	W25qxx_Delay(100);
 8004288:	2064      	movs	r0, #100	; 0x64
 800428a:	f00b fc73 	bl	800fb74 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 800428e:	4b2c      	ldr	r3, [pc, #176]	; (8004340 <W25qxx_ReadSector+0xe8>)
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	429a      	cmp	r2, r3
 8004296:	d306      	bcc.n	80042a6 <W25qxx_ReadSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
 8004298:	482b      	ldr	r0, [pc, #172]	; (8004348 <W25qxx_ReadSector+0xf0>)
 800429a:	f00f ff73 	bl	8014184 <puts>
		W25qxx_Delay(100);
 800429e:	2064      	movs	r0, #100	; 0x64
 80042a0:	f00b fc68 	bl	800fb74 <osDelay>
#endif
		return;
 80042a4:	e048      	b.n	8004338 <W25qxx_ReadSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	441a      	add	r2, r3
 80042ac:	4b24      	ldr	r3, [pc, #144]	; (8004340 <W25qxx_ReadSector+0xe8>)
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d905      	bls.n	80042c0 <W25qxx_ReadSector+0x68>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 80042b4:	4b22      	ldr	r3, [pc, #136]	; (8004340 <W25qxx_ReadSector+0xe8>)
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	61bb      	str	r3, [r7, #24]
 80042be:	e001      	b.n	80042c4 <W25qxx_ReadSector+0x6c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80042c4:	68b8      	ldr	r0, [r7, #8]
 80042c6:	f7ff fdab 	bl	8003e20 <W25qxx_SectorToPage>
 80042ca:	4602      	mov	r2, r0
 80042cc:	4b1c      	ldr	r3, [pc, #112]	; (8004340 <W25qxx_ReadSector+0xe8>)
 80042ce:	895b      	ldrh	r3, [r3, #10]
 80042d0:	4619      	mov	r1, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80042d8:	4413      	add	r3, r2
 80042da:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80042dc:	4b18      	ldr	r3, [pc, #96]	; (8004340 <W25qxx_ReadSector+0xe8>)
 80042de:	895b      	ldrh	r3, [r3, #10]
 80042e0:	461a      	mov	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80042e8:	fb02 f201 	mul.w	r2, r2, r1
 80042ec:	1a9b      	subs	r3, r3, r2
 80042ee:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	69f9      	ldr	r1, [r7, #28]
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f7ff feec 	bl	80040d4 <W25qxx_ReadPage>
		StartPage++;
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	3301      	adds	r3, #1
 8004300:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8004302:	4b0f      	ldr	r3, [pc, #60]	; (8004340 <W25qxx_ReadSector+0xe8>)
 8004304:	895b      	ldrh	r3, [r3, #10]
 8004306:	461a      	mov	r2, r3
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	1a9a      	subs	r2, r3, r2
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	4413      	add	r3, r2
 8004310:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8004312:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <W25qxx_ReadSector+0xe8>)
 8004314:	895b      	ldrh	r3, [r3, #10]
 8004316:	461a      	mov	r2, r3
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	4413      	add	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8004322:	2300      	movs	r3, #0
 8004324:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	2b00      	cmp	r3, #0
 800432a:	dce1      	bgt.n	80042f0 <W25qxx_ReadSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
 800432c:	4807      	ldr	r0, [pc, #28]	; (800434c <W25qxx_ReadSector+0xf4>)
 800432e:	f00f ff29 	bl	8014184 <puts>
	W25qxx_Delay(100);
 8004332:	2064      	movs	r0, #100	; 0x64
 8004334:	f00b fc1e 	bl	800fb74 <osDelay>
#endif
}
 8004338:	3720      	adds	r7, #32
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20005f10 	.word	0x20005f10
 8004344:	08019658 	.word	0x08019658
 8004348:	08019698 	.word	0x08019698
 800434c:	080196b8 	.word	0x080196b8

08004350 <Max31855_Read_Temp>:
uint32_t sign=0;									  // Sign bit
uint8_t DATARX[4];                                    // Raw Data from MAX6675
//uint8_t DATATX = {0xFF, 0xFF, 0xFF, 0xFF};                                    // Raw Data from MAX6675

// ------------------- Functions ----------------
float Max31855_Read_Temp(void) {
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
	int Temp = 0;                                        // Temperature Variable
 8004356:	2300      	movs	r3, #0
 8004358:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); // Low State for SPI Communication
 800435a:	2200      	movs	r2, #0
 800435c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004360:	483b      	ldr	r0, [pc, #236]	; (8004450 <Max31855_Read_Temp+0x100>)
 8004362:	f006 fb37 	bl	800a9d4 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, DATARX, 4, 1000);                // DATA Transfer
 8004366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800436a:	2204      	movs	r2, #4
 800436c:	4939      	ldr	r1, [pc, #228]	; (8004454 <Max31855_Read_Temp+0x104>)
 800436e:	483a      	ldr	r0, [pc, #232]	; (8004458 <Max31855_Read_Temp+0x108>)
 8004370:	f009 fa95 	bl	800d89e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET); // High State for SPI Communication
 8004374:	2201      	movs	r2, #1
 8004376:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800437a:	4835      	ldr	r0, [pc, #212]	; (8004450 <Max31855_Read_Temp+0x100>)
 800437c:	f006 fb2a 	bl	800a9d4 <HAL_GPIO_WritePin>


	uint32_t v = DATARX[3] | (DATARX[2] << 8) | (DATARX[1] << 16) | (DATARX[0] << 24);
 8004380:	4b34      	ldr	r3, [pc, #208]	; (8004454 <Max31855_Read_Temp+0x104>)
 8004382:	78db      	ldrb	r3, [r3, #3]
 8004384:	461a      	mov	r2, r3
 8004386:	4b33      	ldr	r3, [pc, #204]	; (8004454 <Max31855_Read_Temp+0x104>)
 8004388:	789b      	ldrb	r3, [r3, #2]
 800438a:	021b      	lsls	r3, r3, #8
 800438c:	431a      	orrs	r2, r3
 800438e:	4b31      	ldr	r3, [pc, #196]	; (8004454 <Max31855_Read_Temp+0x104>)
 8004390:	785b      	ldrb	r3, [r3, #1]
 8004392:	041b      	lsls	r3, r3, #16
 8004394:	431a      	orrs	r2, r3
 8004396:	4b2f      	ldr	r3, [pc, #188]	; (8004454 <Max31855_Read_Temp+0x104>)
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	061b      	lsls	r3, r3, #24
 800439c:	4313      	orrs	r3, r2
 800439e:	603b      	str	r3, [r7, #0]

	Error = v & 0x07;								  // Error Detection
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	4b2c      	ldr	r3, [pc, #176]	; (800445c <Max31855_Read_Temp+0x10c>)
 80043ac:	701a      	strb	r2, [r3, #0]



		sign = (DATARX[0] & (0x80)) >> 7;					// Sign Bit calculation
 80043ae:	4b29      	ldr	r3, [pc, #164]	; (8004454 <Max31855_Read_Temp+0x104>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	09db      	lsrs	r3, r3, #7
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	461a      	mov	r2, r3
 80043b8:	4b29      	ldr	r3, [pc, #164]	; (8004460 <Max31855_Read_Temp+0x110>)
 80043ba:	601a      	str	r2, [r3, #0]

		if (DATARX[3] & 0x07)								 // Returns Error Number
 80043bc:	4b25      	ldr	r3, [pc, #148]	; (8004454 <Max31855_Read_Temp+0x104>)
 80043be:	78db      	ldrb	r3, [r3, #3]
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d009      	beq.n	80043dc <Max31855_Read_Temp+0x8c>
			return (-1 * (DATARX[3] & 0x07));
 80043c8:	4b22      	ldr	r3, [pc, #136]	; (8004454 <Max31855_Read_Temp+0x104>)
 80043ca:	78db      	ldrb	r3, [r3, #3]
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	425b      	negs	r3, r3
 80043d2:	ee07 3a90 	vmov	s15, r3
 80043d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043da:	e033      	b.n	8004444 <Max31855_Read_Temp+0xf4>

		else if (sign == 1) {								// Negative Temperature
 80043dc:	4b20      	ldr	r3, [pc, #128]	; (8004460 <Max31855_Read_Temp+0x110>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d11d      	bne.n	8004420 <Max31855_Read_Temp+0xd0>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 80043e4:	4b1b      	ldr	r3, [pc, #108]	; (8004454 <Max31855_Read_Temp+0x104>)
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	019b      	lsls	r3, r3, #6
 80043ea:	4a1a      	ldr	r2, [pc, #104]	; (8004454 <Max31855_Read_Temp+0x104>)
 80043ec:	7852      	ldrb	r2, [r2, #1]
 80043ee:	0892      	lsrs	r2, r2, #2
 80043f0:	b2d2      	uxtb	r2, r2
 80043f2:	4313      	orrs	r3, r2
 80043f4:	607b      	str	r3, [r7, #4]
			Temp &= 0b01111111111111;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043fc:	607b      	str	r3, [r7, #4]
			Temp ^= 0b01111111111111;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f483 53ff 	eor.w	r3, r3, #8160	; 0x1fe0
 8004404:	f083 031f 	eor.w	r3, r3, #31
 8004408:	607b      	str	r3, [r7, #4]
			return ((float) -Temp / 4);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	425b      	negs	r3, r3
 800440e:	ee07 3a90 	vmov	s15, r3
 8004412:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004416:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800441a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800441e:	e011      	b.n	8004444 <Max31855_Read_Temp+0xf4>
		}

		else												 // Positive Temperature
		{
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8004420:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <Max31855_Read_Temp+0x104>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	019b      	lsls	r3, r3, #6
 8004426:	4a0b      	ldr	r2, [pc, #44]	; (8004454 <Max31855_Read_Temp+0x104>)
 8004428:	7852      	ldrb	r2, [r2, #1]
 800442a:	0892      	lsrs	r2, r2, #2
 800442c:	b2d2      	uxtb	r2, r2
 800442e:	4313      	orrs	r3, r2
 8004430:	607b      	str	r3, [r7, #4]
			return ((float) Temp / 4.0);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	ee07 3a90 	vmov	s15, r3
 8004438:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800443c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8004440:	eec7 7a26 	vdiv.f32	s15, s14, s13

	// LSB = 0.25 degrees C
	centigrade *= 0.25;
	return centigrade;
	*/
}
 8004444:	eeb0 0a67 	vmov.f32	s0, s15
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	40021000 	.word	0x40021000
 8004454:	20005f38 	.word	0x20005f38
 8004458:	20005c80 	.word	0x20005c80
 800445c:	2000038c 	.word	0x2000038c
 8004460:	20000390 	.word	0x20000390

08004464 <MRT_pollPropulsion>:


//**************************************************//
//PUBLIC FUNCTIONS

void MRT_pollPropulsion(void){
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
	MRT_getThermoTemp();
 8004468:	f000 f806 	bl	8004478 <MRT_getThermoTemp>
	MRT_getTransducerVoltage();
 800446c:	f000 f812 	bl	8004494 <MRT_getTransducerVoltage>
	MRT_getValveStatus();
 8004470:	f000 f820 	bl	80044b4 <MRT_getValveStatus>
}
 8004474:	bf00      	nop
 8004476:	bd80      	pop	{r7, pc}

08004478 <MRT_getThermoTemp>:

void MRT_getThermoTemp(void){
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
	thermocouple_temperature = Max31855_Read_Temp();
 800447c:	f7ff ff68 	bl	8004350 <Max31855_Read_Temp>
 8004480:	eef0 7a40 	vmov.f32	s15, s0
 8004484:	4b02      	ldr	r3, [pc, #8]	; (8004490 <MRT_getThermoTemp+0x18>)
 8004486:	edc3 7a00 	vstr	s15, [r3]
}
 800448a:	bf00      	nop
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	20005f70 	.word	0x20005f70

08004494 <MRT_getTransducerVoltage>:

void MRT_getTransducerVoltage(void){
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
	transducer_voltage = MRT_prop_poll_pressure_transducer(&TRANSDUCER_ADC);
 8004498:	4804      	ldr	r0, [pc, #16]	; (80044ac <MRT_getTransducerVoltage+0x18>)
 800449a:	f000 f85d 	bl	8004558 <MRT_prop_poll_pressure_transducer>
 800449e:	eef0 7a40 	vmov.f32	s15, s0
 80044a2:	4b03      	ldr	r3, [pc, #12]	; (80044b0 <MRT_getTransducerVoltage+0x1c>)
 80044a4:	edc3 7a00 	vstr	s15, [r3]
}
 80044a8:	bf00      	nop
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	20005a94 	.word	0x20005a94
 80044b0:	20005f74 	.word	0x20005f74

080044b4 <MRT_getValveStatus>:

void MRT_getValveStatus(void){
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
	valve_status = HAL_GPIO_ReadPin(IN_Prop_ActuatedVent_Feedback_GPIO_Port,IN_Prop_ActuatedVent_Feedback_Pin);
 80044b8:	2102      	movs	r1, #2
 80044ba:	4804      	ldr	r0, [pc, #16]	; (80044cc <MRT_getValveStatus+0x18>)
 80044bc:	f006 fa72 	bl	800a9a4 <HAL_GPIO_ReadPin>
 80044c0:	4603      	mov	r3, r0
 80044c2:	461a      	mov	r2, r3
 80044c4:	4b02      	ldr	r3, [pc, #8]	; (80044d0 <MRT_getValveStatus+0x1c>)
 80044c6:	701a      	strb	r2, [r3, #0]
}
 80044c8:	bf00      	nop
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40020400 	.word	0x40020400
 80044d0:	20005f6e 	.word	0x20005f6e

080044d4 <MRT_formatPropulsion>:

// formats propulsion telemetry string using sprintf
void MRT_formatPropulsion(void) {
 80044d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044d6:	b089      	sub	sp, #36	; 0x24
 80044d8:	af06      	add	r7, sp, #24
	memset(msg_buffer_pr, 0, 50);
 80044da:	2232      	movs	r2, #50	; 0x32
 80044dc:	2100      	movs	r1, #0
 80044de:	4816      	ldr	r0, [pc, #88]	; (8004538 <MRT_formatPropulsion+0x64>)
 80044e0:	f00e fc20 	bl	8012d24 <memset>
	//tank_pressure = convert_prop_tank_pressure(); // convert buffered readings to voltage TODO??
	sprintf(msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 80044e4:	4b15      	ldr	r3, [pc, #84]	; (800453c <MRT_formatPropulsion+0x68>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fc f84d 	bl	8000588 <__aeabi_f2d>
 80044ee:	4604      	mov	r4, r0
 80044f0:	460d      	mov	r5, r1
 80044f2:	4b13      	ldr	r3, [pc, #76]	; (8004540 <MRT_formatPropulsion+0x6c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fc f846 	bl	8000588 <__aeabi_f2d>
 80044fc:	4602      	mov	r2, r0
 80044fe:	460b      	mov	r3, r1
 8004500:	4910      	ldr	r1, [pc, #64]	; (8004544 <MRT_formatPropulsion+0x70>)
 8004502:	7809      	ldrb	r1, [r1, #0]
 8004504:	4608      	mov	r0, r1
 8004506:	4910      	ldr	r1, [pc, #64]	; (8004548 <MRT_formatPropulsion+0x74>)
 8004508:	7809      	ldrb	r1, [r1, #0]
 800450a:	460e      	mov	r6, r1
 800450c:	490f      	ldr	r1, [pc, #60]	; (800454c <MRT_formatPropulsion+0x78>)
 800450e:	7809      	ldrb	r1, [r1, #0]
 8004510:	6079      	str	r1, [r7, #4]
 8004512:	490f      	ldr	r1, [pc, #60]	; (8004550 <MRT_formatPropulsion+0x7c>)
 8004514:	6809      	ldr	r1, [r1, #0]
 8004516:	9105      	str	r1, [sp, #20]
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	9104      	str	r1, [sp, #16]
 800451c:	9603      	str	r6, [sp, #12]
 800451e:	9002      	str	r0, [sp, #8]
 8004520:	e9cd 2300 	strd	r2, r3, [sp]
 8004524:	4622      	mov	r2, r4
 8004526:	462b      	mov	r3, r5
 8004528:	490a      	ldr	r1, [pc, #40]	; (8004554 <MRT_formatPropulsion+0x80>)
 800452a:	4803      	ldr	r0, [pc, #12]	; (8004538 <MRT_formatPropulsion+0x64>)
 800452c:	f00f fef6 	bl	801431c <siprintf>
			transducer_voltage, thermocouple_temperature, valve_status,
			prev_min, prev_sec, prev_subsec);
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004538:	20005f3c 	.word	0x20005f3c
 800453c:	20005f74 	.word	0x20005f74
 8004540:	20005f70 	.word	0x20005f70
 8004544:	20005f6e 	.word	0x20005f6e
 8004548:	20000386 	.word	0x20000386
 800454c:	20000387 	.word	0x20000387
 8004550:	20000388 	.word	0x20000388
 8004554:	0801974c 	.word	0x0801974c

08004558 <MRT_prop_poll_pressure_transducer>:
//PRIVATE FUNCTIONS

/*
 * Get the pressure transducer voltage (poll ADC)
 */
float MRT_prop_poll_pressure_transducer(ADC_HandleTypeDef* hadc) {
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
	// reading adc
	HAL_ADC_Start(hadc);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f005 fb93 	bl	8009c8c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 1000);
 8004566:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f005 fc93 	bl	8009e96 <HAL_ADC_PollForConversion>
	uint32_t pressure_sensor_raw = HAL_ADC_GetValue(hadc);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f005 fd1b 	bl	8009fac <HAL_ADC_GetValue>
 8004576:	60f8      	str	r0, [r7, #12]
	HAL_ADC_Stop(hadc);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f005 fc59 	bl	8009e30 <HAL_ADC_Stop>

	float voltage = (float) (pressure_sensor_raw / 4095.0) * 3.3; // assuming 12 bits
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f7fb ffe0 	bl	8000544 <__aeabi_ui2d>
 8004584:	a312      	add	r3, pc, #72	; (adr r3, 80045d0 <MRT_prop_poll_pressure_transducer+0x78>)
 8004586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458a:	f7fc f97f 	bl	800088c <__aeabi_ddiv>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4610      	mov	r0, r2
 8004594:	4619      	mov	r1, r3
 8004596:	f7fc fb47 	bl	8000c28 <__aeabi_d2f>
 800459a:	4603      	mov	r3, r0
 800459c:	4618      	mov	r0, r3
 800459e:	f7fb fff3 	bl	8000588 <__aeabi_f2d>
 80045a2:	a30d      	add	r3, pc, #52	; (adr r3, 80045d8 <MRT_prop_poll_pressure_transducer+0x80>)
 80045a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a8:	f7fc f846 	bl	8000638 <__aeabi_dmul>
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	4610      	mov	r0, r2
 80045b2:	4619      	mov	r1, r3
 80045b4:	f7fc fb38 	bl	8000c28 <__aeabi_d2f>
 80045b8:	4603      	mov	r3, r0
 80045ba:	60bb      	str	r3, [r7, #8]

	return voltage;
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	ee07 3a90 	vmov	s15, r3
}
 80045c2:	eeb0 0a67 	vmov.f32	s0, s15
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	f3af 8000 	nop.w
 80045d0:	00000000 	.word	0x00000000
 80045d4:	40affe00 	.word	0x40affe00
 80045d8:	66666666 	.word	0x66666666
 80045dc:	400a6666 	.word	0x400a6666

080045e0 <MRT_LSM6DSR_Constructor>:


//**************************************************//
/*****LSM6DSR STATIC FUNCTIONS*****/

void MRT_LSM6DSR_Constructor(){
 80045e0:	b598      	push	{r3, r4, r7, lr}
 80045e2:	af00      	add	r7, sp, #0
	if (lsm6dsr==NULL){
 80045e4:	4b08      	ldr	r3, [pc, #32]	; (8004608 <MRT_LSM6DSR_Constructor+0x28>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10b      	bne.n	8004604 <MRT_LSM6DSR_Constructor+0x24>
		lsm6dsr = new LSM6DSR(&LSM6DSR_I2C, (uint8_t) MRT_LSM6DSR_ADDRESS);
 80045ec:	203c      	movs	r0, #60	; 0x3c
 80045ee:	f00e f8d5 	bl	801279c <_Znwj>
 80045f2:	4603      	mov	r3, r0
 80045f4:	461c      	mov	r4, r3
 80045f6:	226a      	movs	r2, #106	; 0x6a
 80045f8:	4904      	ldr	r1, [pc, #16]	; (800460c <MRT_LSM6DSR_Constructor+0x2c>)
 80045fa:	4620      	mov	r0, r4
 80045fc:	f000 f990 	bl	8004920 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh>
 8004600:	4b01      	ldr	r3, [pc, #4]	; (8004608 <MRT_LSM6DSR_Constructor+0x28>)
 8004602:	601c      	str	r4, [r3, #0]
	}
}
 8004604:	bf00      	nop
 8004606:	bd98      	pop	{r3, r4, r7, pc}
 8004608:	20000394 	.word	0x20000394
 800460c:	20005b08 	.word	0x20005b08

08004610 <MRT_LSM6DSR_Destructor>:

void MRT_LSM6DSR_Destructor(){
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
	if (lsm6dsr!=NULL){
 8004614:	4b05      	ldr	r3, [pc, #20]	; (800462c <MRT_LSM6DSR_Destructor+0x1c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <MRT_LSM6DSR_Destructor+0x12>
		lsm6dsr = NULL;
 800461c:	4b03      	ldr	r3, [pc, #12]	; (800462c <MRT_LSM6DSR_Destructor+0x1c>)
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]
	}
}
 8004622:	bf00      	nop
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	20000394 	.word	0x20000394

08004630 <MRT_LSM6DSR_getAcceleration>:

void MRT_LSM6DSR_getAcceleration(void){
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
	float* temp_array = lsm6dsr->getAcceleration();
 8004636:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <MRT_LSM6DSR_getAcceleration+0x34>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f000 fa1c 	bl	8004a78 <_ZN7LSM6DSR15getAccelerationEv>
 8004640:	6078      	str	r0, [r7, #4]
	hlsm6dsr.acceleration_mg[0] = temp_array[0];
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a08      	ldr	r2, [pc, #32]	; (8004668 <MRT_LSM6DSR_getAcceleration+0x38>)
 8004648:	6013      	str	r3, [r2, #0]
	hlsm6dsr.acceleration_mg[1] = temp_array[1];
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	4a06      	ldr	r2, [pc, #24]	; (8004668 <MRT_LSM6DSR_getAcceleration+0x38>)
 8004650:	6053      	str	r3, [r2, #4]
	hlsm6dsr.acceleration_mg[2] = temp_array[2];
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	4a04      	ldr	r2, [pc, #16]	; (8004668 <MRT_LSM6DSR_getAcceleration+0x38>)
 8004658:	6093      	str	r3, [r2, #8]
}
 800465a:	bf00      	nop
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	20000394 	.word	0x20000394
 8004668:	2000039c 	.word	0x2000039c

0800466c <MRT_LSM6DSR_getAngularRate>:
void MRT_LSM6DSR_getAngularRate(void){
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
	float* temp_array = lsm6dsr->getAngularRate();
 8004672:	4b0b      	ldr	r3, [pc, #44]	; (80046a0 <MRT_LSM6DSR_getAngularRate+0x34>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fa7c 	bl	8004b74 <_ZN7LSM6DSR14getAngularRateEv>
 800467c:	6078      	str	r0, [r7, #4]
	hlsm6dsr.angular_rate_mdps[0] = temp_array[0];
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a08      	ldr	r2, [pc, #32]	; (80046a4 <MRT_LSM6DSR_getAngularRate+0x38>)
 8004684:	60d3      	str	r3, [r2, #12]
	hlsm6dsr.angular_rate_mdps[1] = temp_array[1];
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	4a06      	ldr	r2, [pc, #24]	; (80046a4 <MRT_LSM6DSR_getAngularRate+0x38>)
 800468c:	6113      	str	r3, [r2, #16]
	hlsm6dsr.angular_rate_mdps[2] = temp_array[2];
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	4a04      	ldr	r2, [pc, #16]	; (80046a4 <MRT_LSM6DSR_getAngularRate+0x38>)
 8004694:	6153      	str	r3, [r2, #20]
}
 8004696:	bf00      	nop
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20000394 	.word	0x20000394
 80046a4:	2000039c 	.word	0x2000039c

080046a8 <MRT_LSM6DSR_getTemperature>:
void MRT_LSM6DSR_getTemperature(void){
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
	lsm6dsr->getTemperature();
 80046ac:	4b05      	ldr	r3, [pc, #20]	; (80046c4 <MRT_LSM6DSR_getTemperature+0x1c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 fa29 	bl	8004b08 <_ZN7LSM6DSR14getTemperatureEv>
	hlsm6dsr.temperature_degC = lsm6dsr->temperature_degC;
 80046b6:	4b03      	ldr	r3, [pc, #12]	; (80046c4 <MRT_LSM6DSR_getTemperature+0x1c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	4a02      	ldr	r2, [pc, #8]	; (80046c8 <MRT_LSM6DSR_getTemperature+0x20>)
 80046be:	6193      	str	r3, [r2, #24]
}
 80046c0:	bf00      	nop
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	20000394 	.word	0x20000394
 80046c8:	2000039c 	.word	0x2000039c

080046cc <MRT_LSM6DSR_pollAll>:

void MRT_LSM6DSR_pollAll(void){
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
	MRT_LSM6DSR_getAcceleration();
 80046d0:	f7ff ffae 	bl	8004630 <MRT_LSM6DSR_getAcceleration>
	MRT_LSM6DSR_getAngularRate();
 80046d4:	f7ff ffca 	bl	800466c <MRT_LSM6DSR_getAngularRate>
	MRT_LSM6DSR_getTemperature();
 80046d8:	f7ff ffe6 	bl	80046a8 <MRT_LSM6DSR_getTemperature>
}
 80046dc:	bf00      	nop
 80046de:	bd80      	pop	{r7, pc}

080046e0 <MRT_LPS22HH_Constructor>:


//**************************************************//
/*****LPS22HH STATIC FUNCTIONS*****/

void MRT_LPS22HH_Constructor(){
 80046e0:	b598      	push	{r3, r4, r7, lr}
 80046e2:	af00      	add	r7, sp, #0
	if (lps22hh==NULL){
 80046e4:	4b08      	ldr	r3, [pc, #32]	; (8004708 <MRT_LPS22HH_Constructor+0x28>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d10b      	bne.n	8004704 <MRT_LPS22HH_Constructor+0x24>
		lps22hh = new LPS22HH(&LPS22HH_I2C, (uint8_t) MRT_LPS22HH_ADDRESS);
 80046ec:	2020      	movs	r0, #32
 80046ee:	f00e f855 	bl	801279c <_Znwj>
 80046f2:	4603      	mov	r3, r0
 80046f4:	461c      	mov	r4, r3
 80046f6:	22b3      	movs	r2, #179	; 0xb3
 80046f8:	4904      	ldr	r1, [pc, #16]	; (800470c <MRT_LPS22HH_Constructor+0x2c>)
 80046fa:	4620      	mov	r0, r4
 80046fc:	f000 fabe 	bl	8004c7c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh>
 8004700:	4b01      	ldr	r3, [pc, #4]	; (8004708 <MRT_LPS22HH_Constructor+0x28>)
 8004702:	601c      	str	r4, [r3, #0]
	}
}
 8004704:	bf00      	nop
 8004706:	bd98      	pop	{r3, r4, r7, pc}
 8004708:	20000398 	.word	0x20000398
 800470c:	20005b08 	.word	0x20005b08

08004710 <MRT_LPS22HH_Destructor>:

void MRT_LPS22HH_Destructor(){
 8004710:	b480      	push	{r7}
 8004712:	af00      	add	r7, sp, #0
	if (lps22hh!=NULL){
 8004714:	4b05      	ldr	r3, [pc, #20]	; (800472c <MRT_LPS22HH_Destructor+0x1c>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d002      	beq.n	8004722 <MRT_LPS22HH_Destructor+0x12>
		lps22hh = NULL;
 800471c:	4b03      	ldr	r3, [pc, #12]	; (800472c <MRT_LPS22HH_Destructor+0x1c>)
 800471e:	2200      	movs	r2, #0
 8004720:	601a      	str	r2, [r3, #0]
	}
}
 8004722:	bf00      	nop
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	20000398 	.word	0x20000398

08004730 <MRT_LPS22HH_getPressure>:

void MRT_LPS22HH_getPressure(void){
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
	hlps22hh.pressure_hPa = lps22hh->getPressure();
 8004734:	4b05      	ldr	r3, [pc, #20]	; (800474c <MRT_LPS22HH_getPressure+0x1c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4618      	mov	r0, r3
 800473a:	f000 fb27 	bl	8004d8c <_ZN7LPS22HH11getPressureEv>
 800473e:	eef0 7a40 	vmov.f32	s15, s0
 8004742:	4b03      	ldr	r3, [pc, #12]	; (8004750 <MRT_LPS22HH_getPressure+0x20>)
 8004744:	edc3 7a00 	vstr	s15, [r3]
}
 8004748:	bf00      	nop
 800474a:	bd80      	pop	{r7, pc}
 800474c:	20000398 	.word	0x20000398
 8004750:	200003c8 	.word	0x200003c8

08004754 <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(void){
 8004754:	b580      	push	{r7, lr}
 8004756:	af00      	add	r7, sp, #0
	hlps22hh.temperature_degC = lps22hh->getTemperature();
 8004758:	4b05      	ldr	r3, [pc, #20]	; (8004770 <MRT_LPS22HH_getTemperature+0x1c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4618      	mov	r0, r3
 800475e:	f000 fb49 	bl	8004df4 <_ZN7LPS22HH14getTemperatureEv>
 8004762:	eef0 7a40 	vmov.f32	s15, s0
 8004766:	4b03      	ldr	r3, [pc, #12]	; (8004774 <MRT_LPS22HH_getTemperature+0x20>)
 8004768:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800476c:	bf00      	nop
 800476e:	bd80      	pop	{r7, pc}
 8004770:	20000398 	.word	0x20000398
 8004774:	200003c8 	.word	0x200003c8

08004778 <MRT_LPS22HH_pollAll>:

void MRT_LPS22HH_pollAll(void){
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
	MRT_LPS22HH_getPressure();
 800477c:	f7ff ffd8 	bl	8004730 <MRT_LPS22HH_getPressure>
	MRT_LPS22HH_getTemperature();
 8004780:	f7ff ffe8 	bl	8004754 <MRT_LPS22HH_getTemperature>
}
 8004784:	bf00      	nop
 8004786:	bd80      	pop	{r7, pc}

08004788 <MRT_GPS_pollAll>:


//**************************************************//
/*****GPS STATIC FUNCTIONS*****/

void MRT_GPS_pollAll(void){
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
	GPS_Poll(&hgps.latitude, &hgps.longitude, &hgps.time);
 800478c:	4a03      	ldr	r2, [pc, #12]	; (800479c <MRT_GPS_pollAll+0x14>)
 800478e:	4904      	ldr	r1, [pc, #16]	; (80047a0 <MRT_GPS_pollAll+0x18>)
 8004790:	4804      	ldr	r0, [pc, #16]	; (80047a4 <MRT_GPS_pollAll+0x1c>)
 8004792:	f000 fb9f 	bl	8004ed4 <GPS_Poll>
}
 8004796:	bf00      	nop
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	200003e4 	.word	0x200003e4
 80047a0:	200003e0 	.word	0x200003e0
 80047a4:	200003dc 	.word	0x200003dc

080047a8 <MRT_LSM6DSR_Init>:


//**************************************************//
/*****PUBLIC STATIC FUNCTIONS*****/

HLSM6DSR MRT_LSM6DSR_Init(void){
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
	MRT_LSM6DSR_Constructor();
 80047b0:	f7ff ff16 	bl	80045e0 <MRT_LSM6DSR_Constructor>
	HLSM6DSR lsm6dsr_handler;
	lsm6dsr_handler.getAcceleration = &MRT_LSM6DSR_getAcceleration;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a16      	ldr	r2, [pc, #88]	; (8004810 <MRT_LSM6DSR_Init+0x68>)
 80047b8:	61da      	str	r2, [r3, #28]
	lsm6dsr_handler.getAngularRate = &MRT_LSM6DSR_getAngularRate;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a15      	ldr	r2, [pc, #84]	; (8004814 <MRT_LSM6DSR_Init+0x6c>)
 80047be:	621a      	str	r2, [r3, #32]
	lsm6dsr_handler.getTemperature = &MRT_LSM6DSR_getTemperature;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a15      	ldr	r2, [pc, #84]	; (8004818 <MRT_LSM6DSR_Init+0x70>)
 80047c4:	625a      	str	r2, [r3, #36]	; 0x24
	lsm6dsr_handler.pollAll = &MRT_LSM6DSR_pollAll;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a14      	ldr	r2, [pc, #80]	; (800481c <MRT_LSM6DSR_Init+0x74>)
 80047ca:	629a      	str	r2, [r3, #40]	; 0x28

	lsm6dsr_handler.acceleration_mg[0] = 0;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]
	lsm6dsr_handler.acceleration_mg[1] = 0;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f04f 0200 	mov.w	r2, #0
 80047da:	605a      	str	r2, [r3, #4]
	lsm6dsr_handler.acceleration_mg[2] = 0;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f04f 0200 	mov.w	r2, #0
 80047e2:	609a      	str	r2, [r3, #8]
	lsm6dsr_handler.angular_rate_mdps[0] = 0;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f04f 0200 	mov.w	r2, #0
 80047ea:	60da      	str	r2, [r3, #12]
	lsm6dsr_handler.angular_rate_mdps[1] = 0;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f04f 0200 	mov.w	r2, #0
 80047f2:	611a      	str	r2, [r3, #16]
	lsm6dsr_handler.angular_rate_mdps[2] = 0;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f04f 0200 	mov.w	r2, #0
 80047fa:	615a      	str	r2, [r3, #20]
	lsm6dsr_handler.temperature_degC = 0;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	619a      	str	r2, [r3, #24]
	return lsm6dsr_handler;
 8004804:	bf00      	nop
}
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	08004631 	.word	0x08004631
 8004814:	0800466d 	.word	0x0800466d
 8004818:	080046a9 	.word	0x080046a9
 800481c:	080046cd 	.word	0x080046cd

08004820 <MRT_LPS22HH_Init>:

struct HLPS22HH MRT_LPS22HH_Init(void){
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
	MRT_LPS22HH_Constructor();
 8004828:	f7ff ff5a 	bl	80046e0 <MRT_LPS22HH_Constructor>
	struct HLPS22HH lps22hh_handler;
	lps22hh_handler.getPressure = &MRT_LPS22HH_getPressure;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a0a      	ldr	r2, [pc, #40]	; (8004858 <MRT_LPS22HH_Init+0x38>)
 8004830:	609a      	str	r2, [r3, #8]
	lps22hh_handler.getTemperature = &MRT_LPS22HH_getTemperature;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a09      	ldr	r2, [pc, #36]	; (800485c <MRT_LPS22HH_Init+0x3c>)
 8004836:	60da      	str	r2, [r3, #12]
	lps22hh_handler.pollAll = &MRT_LPS22HH_pollAll;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a09      	ldr	r2, [pc, #36]	; (8004860 <MRT_LPS22HH_Init+0x40>)
 800483c:	611a      	str	r2, [r3, #16]

	lps22hh_handler.pressure_hPa = 0;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	601a      	str	r2, [r3, #0]
	lps22hh_handler.temperature_degC = 0;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f04f 0200 	mov.w	r2, #0
 800484c:	605a      	str	r2, [r3, #4]
	return lps22hh_handler;
 800484e:	bf00      	nop
}
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	08004731 	.word	0x08004731
 800485c:	08004755 	.word	0x08004755
 8004860:	08004779 	.word	0x08004779

08004864 <MRT_GPS_Init>:

struct HGPS MRT_GPS_Init(void){
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
	struct HGPS gps_handler;
	gps_handler.pollAll = &MRT_GPS_pollAll;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a0c      	ldr	r2, [pc, #48]	; (80048a0 <MRT_GPS_Init+0x3c>)
 8004870:	60da      	str	r2, [r3, #12]
	GPS_Init(&GPS_UART, print, tone_freq);
 8004872:	4a0c      	ldr	r2, [pc, #48]	; (80048a4 <MRT_GPS_Init+0x40>)
 8004874:	490c      	ldr	r1, [pc, #48]	; (80048a8 <MRT_GPS_Init+0x44>)
 8004876:	480d      	ldr	r0, [pc, #52]	; (80048ac <MRT_GPS_Init+0x48>)
 8004878:	f000 fd8c 	bl	8005394 <GPS_Init>
	gps_handler.latitude = 0;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f04f 0200 	mov.w	r2, #0
 8004882:	601a      	str	r2, [r3, #0]
	gps_handler.longitude = 0;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f04f 0200 	mov.w	r2, #0
 800488a:	605a      	str	r2, [r3, #4]
	gps_handler.time = 0;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f04f 0200 	mov.w	r2, #0
 8004892:	609a      	str	r2, [r3, #8]
	return gps_handler;
 8004894:	bf00      	nop
}
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	08004789 	.word	0x08004789
 80048a4:	08001135 	.word	0x08001135
 80048a8:	08001109 	.word	0x08001109
 80048ac:	20005df0 	.word	0x20005df0

080048b0 <MRT_i2c_sensors_Init>:

void MRT_i2c_sensors_Init(void){
 80048b0:	b5b0      	push	{r4, r5, r7, lr}
 80048b2:	b08c      	sub	sp, #48	; 0x30
 80048b4:	af00      	add	r7, sp, #0

	//LSM6DSR
	#if LSM6DSR_
	HAL_IWDG_Refresh(&hiwdg);
	hlsm6dsr = MRT_LSM6DSR_Init();
 80048b6:	4c13      	ldr	r4, [pc, #76]	; (8004904 <MRT_i2c_sensors_Init+0x54>)
 80048b8:	463b      	mov	r3, r7
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff ff74 	bl	80047a8 <MRT_LSM6DSR_Init>
 80048c0:	4625      	mov	r5, r4
 80048c2:	463c      	mov	r4, r7
 80048c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048cc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80048d0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	#endif

	//LPS22HH
	#if LPS22HH_
	HAL_IWDG_Refresh(&hiwdg);
	hlps22hh = MRT_LPS22HH_Init();
 80048d4:	4c0c      	ldr	r4, [pc, #48]	; (8004908 <MRT_i2c_sensors_Init+0x58>)
 80048d6:	463b      	mov	r3, r7
 80048d8:	4618      	mov	r0, r3
 80048da:	f7ff ffa1 	bl	8004820 <MRT_LPS22HH_Init>
 80048de:	4625      	mov	r5, r4
 80048e0:	463c      	mov	r4, r7
 80048e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048e6:	6823      	ldr	r3, [r4, #0]
 80048e8:	602b      	str	r3, [r5, #0]
	#endif

	//GPS
	#if GPS_
	HAL_IWDG_Refresh(&hiwdg);
	hgps = MRT_GPS_Init();
 80048ea:	4c08      	ldr	r4, [pc, #32]	; (800490c <MRT_i2c_sensors_Init+0x5c>)
 80048ec:	463b      	mov	r3, r7
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7ff ffb8 	bl	8004864 <MRT_GPS_Init>
 80048f4:	463b      	mov	r3, r7
 80048f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	#endif

}
 80048fc:	bf00      	nop
 80048fe:	3730      	adds	r7, #48	; 0x30
 8004900:	46bd      	mov	sp, r7
 8004902:	bdb0      	pop	{r4, r5, r7, pc}
 8004904:	2000039c 	.word	0x2000039c
 8004908:	200003c8 	.word	0x200003c8
 800490c:	200003dc 	.word	0x200003dc

08004910 <MRT_i2c_sensors_Deinit>:


void MRT_i2c_sensors_Deinit(void){
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0

	//LSM6DSR
	#if LSM6DSR_
	MRT_LSM6DSR_Destructor();
 8004914:	f7ff fe7c 	bl	8004610 <MRT_LSM6DSR_Destructor>
	#endif

	//LPS22HH
	#if LPS22HH_
	MRT_LPS22HH_Destructor();
 8004918:	f7ff fefa 	bl	8004710 <MRT_LPS22HH_Destructor>
	#endif

	//GPS
	//NO DEINIT NEEDED HERE
}
 800491c:	bf00      	nop
 800491e:	bd80      	pop	{r7, pc}

08004920 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh>:


//**************************************************//
/*****LSM6DSR*****/

LSM6DSR::LSM6DSR(I2C_HandleTypeDef* i2c_bus, uint8_t address){
 8004920:	b580      	push	{r7, lr}
 8004922:	b088      	sub	sp, #32
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	4613      	mov	r3, r2
 800492c:	71fb      	strb	r3, [r7, #7]
	println((char*) "\r\nLSM6DSR Init");
 800492e:	4848      	ldr	r0, [pc, #288]	; (8004a50 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x130>)
 8004930:	f7fc fbcc 	bl	80010cc <println>

	/* Initialize mems driver interface */
	ctx.write_reg = write;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4a47      	ldr	r2, [pc, #284]	; (8004a54 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x134>)
 8004938:	61da      	str	r2, [r3, #28]
	ctx.read_reg = read;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4a46      	ldr	r2, [pc, #280]	; (8004a58 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x138>)
 800493e:	621a      	str	r2, [r3, #32]
	ctx.handle = i2c_bus;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait sensor boot time */
	HAL_Delay(LSM6DSR_BOOT_TIME);
 8004946:	2064      	movs	r0, #100	; 0x64
 8004948:	f005 f938 	bl	8009bbc <HAL_Delay>
	/* Check device ID */
	lsm6dsr_device_id_get(&ctx, &whoamI);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f103 021c 	add.w	r2, r3, #28
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	3338      	adds	r3, #56	; 0x38
 8004956:	4619      	mov	r1, r3
 8004958:	4610      	mov	r0, r2
 800495a:	f001 faf1 	bl	8005f40 <lsm6dsr_device_id_get>

	print((char*) "\tChecking Sensor ID...");
 800495e:	483f      	ldr	r0, [pc, #252]	; (8004a5c <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x13c>)
 8004960:	f7fc fbd2 	bl	8001108 <print>
	if (whoamI != address){
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800496a:	79fa      	ldrb	r2, [r7, #7]
 800496c:	429a      	cmp	r2, r3
 800496e:	d018      	beq.n	80049a2 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x82>
	  println((char*) "NOT OK");
 8004970:	483b      	ldr	r0, [pc, #236]	; (8004a60 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x140>)
 8004972:	f7fc fbab 	bl	80010cc <println>
	  print((char*) "\tThis Device is: ");
 8004976:	483b      	ldr	r0, [pc, #236]	; (8004a64 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x144>)
 8004978:	f7fc fbc6 	bl	8001108 <print>

	  char buffer[10];
	  sprintf(buffer, "%X\r\n", whoamI);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004982:	461a      	mov	r2, r3
 8004984:	f107 0314 	add.w	r3, r7, #20
 8004988:	4937      	ldr	r1, [pc, #220]	; (8004a68 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x148>)
 800498a:	4618      	mov	r0, r3
 800498c:	f00f fcc6 	bl	801431c <siprintf>
	  print(buffer);
 8004990:	f107 0314 	add.w	r3, r7, #20
 8004994:	4618      	mov	r0, r3
 8004996:	f7fc fbb7 	bl	8001108 <print>

	  println((char*) "\n\rProgram Terminated\n\r");
 800499a:	4834      	ldr	r0, [pc, #208]	; (8004a6c <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x14c>)
 800499c:	f7fc fb96 	bl	80010cc <println>
	  while(1);
 80049a0:	e7fe      	b.n	80049a0 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x80>
	}
	println((char*) "OK");
 80049a2:	4833      	ldr	r0, [pc, #204]	; (8004a70 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x150>)
 80049a4:	f7fc fb92 	bl	80010cc <println>

	/* Restore default configuration */
	print((char*) "\tRestore default configuration...");
 80049a8:	4832      	ldr	r0, [pc, #200]	; (8004a74 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x154>)
 80049aa:	f7fc fbad 	bl	8001108 <print>
	lsm6dsr_reset_set(&ctx, PROPERTY_ENABLE);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	331c      	adds	r3, #28
 80049b2:	2101      	movs	r1, #1
 80049b4:	4618      	mov	r0, r3
 80049b6:	f001 fad4 	bl	8005f62 <lsm6dsr_reset_set>
	HAL_Delay(500);
 80049ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80049be:	f005 f8fd 	bl	8009bbc <HAL_Delay>
	do {
	lsm6dsr_reset_get(&ctx, &rst);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f103 021c 	add.w	r2, r3, #28
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	3339      	adds	r3, #57	; 0x39
 80049cc:	4619      	mov	r1, r3
 80049ce:	4610      	mov	r0, r2
 80049d0:	f001 faed 	bl	8005fae <lsm6dsr_reset_get>
	} while (rst);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d000      	beq.n	80049e0 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0xc0>
	do {
 80049de:	e7f0      	b.n	80049c2 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0xa2>
	println((char*) "OK");
 80049e0:	4823      	ldr	r0, [pc, #140]	; (8004a70 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x150>)
 80049e2:	f7fc fb73 	bl	80010cc <println>

	/* Disable I3C interface */
    lsm6dsr_i3c_disable_set(&ctx, LSM6DSR_I3C_DISABLE);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	331c      	adds	r3, #28
 80049ea:	2180      	movs	r1, #128	; 0x80
 80049ec:	4618      	mov	r0, r3
 80049ee:	f001 fb55 	bl	800609c <lsm6dsr_i3c_disable_set>

	/* Enable Block Data Update */
	lsm6dsr_block_data_update_set(&ctx, PROPERTY_ENABLE);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	331c      	adds	r3, #28
 80049f6:	2101      	movs	r1, #1
 80049f8:	4618      	mov	r0, r3
 80049fa:	f001 f951 	bl	8005ca0 <lsm6dsr_block_data_update_set>
	/* Set Output Data Rate */
	lsm6dsr_xl_data_rate_set(&ctx, LSM6DSR_XL_ODR_12Hz5);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	331c      	adds	r3, #28
 8004a02:	2101      	movs	r1, #1
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 ff2d 	bl	8005864 <lsm6dsr_xl_data_rate_set>
	lsm6dsr_gy_data_rate_set(&ctx, LSM6DSR_GY_ODR_12Hz5);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	331c      	adds	r3, #28
 8004a0e:	2101      	movs	r1, #1
 8004a10:	4618      	mov	r0, r3
 8004a12:	f001 f849 	bl	8005aa8 <lsm6dsr_gy_data_rate_set>
	/* Set full scale */
	lsm6dsr_xl_full_scale_set(&ctx, LSM6DSR_2g);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	331c      	adds	r3, #28
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 fefb 	bl	8005818 <lsm6dsr_xl_full_scale_set>
	lsm6dsr_gy_full_scale_set(&ctx, LSM6DSR_2000dps);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	331c      	adds	r3, #28
 8004a26:	210c      	movs	r1, #12
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f001 f817 	bl	8005a5c <lsm6dsr_gy_full_scale_set>
	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsr_xl_hp_path_on_out_set(&ctx, LSM6DSR_LP_ODR_DIV_100);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	331c      	adds	r3, #28
 8004a32:	2104      	movs	r1, #4
 8004a34:	4618      	mov	r0, r3
 8004a36:	f001 faf9 	bl	800602c <lsm6dsr_xl_hp_path_on_out_set>
	lsm6dsr_xl_filter_lp2_set(&ctx, PROPERTY_ENABLE);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	331c      	adds	r3, #28
 8004a3e:	2101      	movs	r1, #1
 8004a40:	4618      	mov	r0, r3
 8004a42:	f001 facd 	bl	8005fe0 <lsm6dsr_xl_filter_lp2_set>
}
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3720      	adds	r7, #32
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	08019774 	.word	0x08019774
 8004a54:	08004c07 	.word	0x08004c07
 8004a58:	08004c41 	.word	0x08004c41
 8004a5c:	08019784 	.word	0x08019784
 8004a60:	0801979c 	.word	0x0801979c
 8004a64:	080197a4 	.word	0x080197a4
 8004a68:	080197b8 	.word	0x080197b8
 8004a6c:	080197c0 	.word	0x080197c0
 8004a70:	080197d8 	.word	0x080197d8
 8004a74:	080197dc 	.word	0x080197dc

08004a78 <_ZN7LSM6DSR15getAccelerationEv>:


float* LSM6DSR::getAcceleration(void){
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
	lsm6dsr_xl_flag_data_ready_get(&ctx, &reg);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f103 021c 	add.w	r2, r3, #28
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3328      	adds	r3, #40	; 0x28
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	f001 f92d 	bl	8005cec <lsm6dsr_xl_flag_data_ready_get>

	if (reg){
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d030      	beq.n	8004afe <_ZN7LSM6DSR15getAccelerationEv+0x86>
		// Read magnetic field data
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	332a      	adds	r3, #42	; 0x2a
 8004aa0:	2206      	movs	r2, #6
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f00e f93d 	bl	8012d24 <memset>
		lsm6dsr_acceleration_raw_get(&ctx, data_raw_acceleration);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f103 021c 	add.w	r2, r3, #28
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	332a      	adds	r3, #42	; 0x2a
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	4610      	mov	r0, r2
 8004ab8:	f001 f9d1 	bl	8005e5e <lsm6dsr_acceleration_raw_get>
		acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[0]);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 fe5c 	bl	8005780 <lsm6dsr_from_fs2g_to_mg>
 8004ac8:	eef0 7a40 	vmov.f32	s15, s0
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	edc3 7a00 	vstr	s15, [r3]
		acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[1]);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 fe51 	bl	8005780 <lsm6dsr_from_fs2g_to_mg>
 8004ade:	eef0 7a40 	vmov.f32	s15, s0
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	edc3 7a01 	vstr	s15, [r3, #4]
		acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[2]);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fe46 	bl	8005780 <lsm6dsr_from_fs2g_to_mg>
 8004af4:	eef0 7a40 	vmov.f32	s15, s0
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	return acceleration_mg;
 8004afe:	687b      	ldr	r3, [r7, #4]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <_ZN7LSM6DSR14getTemperatureEv>:


float LSM6DSR::getTemperature(void){
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
    lsm6dsr_temp_flag_data_ready_get(&ctx, &reg);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f103 021c 	add.w	r2, r3, #28
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	3328      	adds	r3, #40	; 0x28
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	f001 f917 	bl	8005d50 <lsm6dsr_temp_flag_data_ready_get>

    if (reg){
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d01a      	beq.n	8004b62 <_ZN7LSM6DSR14getTemperatureEv+0x5a>
		// Read temperature data
		memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	3336      	adds	r3, #54	; 0x36
 8004b30:	2202      	movs	r2, #2
 8004b32:	2100      	movs	r1, #0
 8004b34:	4618      	mov	r0, r3
 8004b36:	f00e f8f5 	bl	8012d24 <memset>
		lsm6dsr_temperature_raw_get(&ctx, &data_raw_temperature);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f103 021c 	add.w	r2, r3, #28
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	3336      	adds	r3, #54	; 0x36
 8004b44:	4619      	mov	r1, r3
 8004b46:	4610      	mov	r0, r2
 8004b48:	f001 f91b 	bl	8005d82 <lsm6dsr_temperature_raw_get>
		temperature_degC = lsm6dsr_from_lsb_to_celsius(data_raw_temperature);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 fe44 	bl	80057e0 <lsm6dsr_from_lsb_to_celsius>
 8004b58:	eef0 7a40 	vmov.f32	s15, s0
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	edc3 7a06 	vstr	s15, [r3, #24]
	}
    return temperature_degC;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	ee07 3a90 	vmov	s15, r3
}
 8004b6a:	eeb0 0a67 	vmov.f32	s0, s15
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <_ZN7LSM6DSR14getAngularRateEv>:


float* LSM6DSR::getAngularRate(void){
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
    lsm6dsr_gy_flag_data_ready_get(&ctx, &reg);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f103 021c 	add.w	r2, r3, #28
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	3328      	adds	r3, #40	; 0x28
 8004b86:	4619      	mov	r1, r3
 8004b88:	4610      	mov	r0, r2
 8004b8a:	f001 f8c8 	bl	8005d1e <lsm6dsr_gy_flag_data_ready_get>

    if (reg){
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d030      	beq.n	8004bfa <_ZN7LSM6DSR14getAngularRateEv+0x86>
		// Read magnetic field data
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3330      	adds	r3, #48	; 0x30
 8004b9c:	2206      	movs	r2, #6
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f00e f8bf 	bl	8012d24 <memset>
		lsm6dsr_angular_rate_raw_get(&ctx, data_raw_angular_rate);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f103 021c 	add.w	r2, r3, #28
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3330      	adds	r3, #48	; 0x30
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4610      	mov	r0, r2
 8004bb4:	f001 f908 	bl	8005dc8 <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 fdf6 	bl	80057b0 <lsm6dsr_from_fs2000dps_to_mdps>
 8004bc4:	eef0 7a40 	vmov.f32	s15, s0
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	edc3 7a03 	vstr	s15, [r3, #12]
		angular_rate_mdps[1] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f000 fdeb 	bl	80057b0 <lsm6dsr_from_fs2000dps_to_mdps>
 8004bda:	eef0 7a40 	vmov.f32	s15, s0
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	edc3 7a04 	vstr	s15, [r3, #16]
		angular_rate_mdps[2] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fde0 	bl	80057b0 <lsm6dsr_from_fs2000dps_to_mdps>
 8004bf0:	eef0 7a40 	vmov.f32	s15, s0
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	edc3 7a05 	vstr	s15, [r3, #20]
		fs500dps_to_mdps
		fs1000dps_to_mdps
		fs2000dps_to_mdps
		*/
	}
    return angular_rate_mdps;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	330c      	adds	r3, #12
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <_ZN7LSM6DSR5writeEPvhPKht>:


int32_t LSM6DSR::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b088      	sub	sp, #32
 8004c0a:	af04      	add	r7, sp, #16
 8004c0c:	60f8      	str	r0, [r7, #12]
 8004c0e:	607a      	str	r2, [r7, #4]
 8004c10:	461a      	mov	r2, r3
 8004c12:	460b      	mov	r3, r1
 8004c14:	72fb      	strb	r3, [r7, #11]
 8004c16:	4613      	mov	r3, r2
 8004c18:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8004c1a:	7afb      	ldrb	r3, [r7, #11]
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c22:	9302      	str	r3, [sp, #8]
 8004c24:	893b      	ldrh	r3, [r7, #8]
 8004c26:	9301      	str	r3, [sp, #4]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	21d5      	movs	r1, #213	; 0xd5
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f006 f845 	bl	800acc0 <HAL_I2C_Mem_Write>
  return 0;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <_ZN7LSM6DSR4readEPvhPht>:

int32_t LSM6DSR::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b088      	sub	sp, #32
 8004c44:	af04      	add	r7, sp, #16
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	607a      	str	r2, [r7, #4]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	72fb      	strb	r3, [r7, #11]
 8004c50:	4613      	mov	r3, r2
 8004c52:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8004c54:	7afb      	ldrb	r3, [r7, #11]
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c5c:	9302      	str	r3, [sp, #8]
 8004c5e:	893b      	ldrh	r3, [r7, #8]
 8004c60:	9301      	str	r3, [sp, #4]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	2301      	movs	r3, #1
 8004c68:	21d5      	movs	r1, #213	; 0xd5
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f006 f922 	bl	800aeb4 <HAL_I2C_Mem_Read>
  return 0;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
	...

08004c7c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh>:

//**************************************************//
/*****LPS22HH*****/


LPS22HH::LPS22HH(I2C_HandleTypeDef* i2c_bus, uint8_t address){
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b088      	sub	sp, #32
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	4613      	mov	r3, r2
 8004c88:	71fb      	strb	r3, [r7, #7]
	println((char*) "\r\nLPS22HH Init");
 8004c8a:	4836      	ldr	r0, [pc, #216]	; (8004d64 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xe8>)
 8004c8c:	f7fc fa1e 	bl	80010cc <println>

	/* Initialize mems driver interface */
	ctx.write_reg = write;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4a35      	ldr	r2, [pc, #212]	; (8004d68 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xec>)
 8004c94:	609a      	str	r2, [r3, #8]
	ctx.read_reg = read;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4a34      	ldr	r2, [pc, #208]	; (8004d6c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf0>)
 8004c9a:	60da      	str	r2, [r3, #12]
	ctx.handle = i2c_bus;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	611a      	str	r2, [r3, #16]
	/* Wait sensor boot time */
	HAL_Delay(LPS22HH_BOOT_TIME);
 8004ca2:	2064      	movs	r0, #100	; 0x64
 8004ca4:	f004 ff8a 	bl	8009bbc <HAL_Delay>
	/* Check device ID */
	whoamI = 0;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	779a      	strb	r2, [r3, #30]
	lps22hh_device_id_get(&ctx, &whoamI);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f103 0208 	add.w	r2, r3, #8
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	331e      	adds	r3, #30
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4610      	mov	r0, r2
 8004cbc:	f000 fce0 	bl	8005680 <lps22hh_device_id_get>


	print((char*) "\tChecking Sensor ID...");
 8004cc0:	482b      	ldr	r0, [pc, #172]	; (8004d70 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf4>)
 8004cc2:	f7fc fa21 	bl	8001108 <print>
	if ( whoamI != address ){
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	7f9b      	ldrb	r3, [r3, #30]
 8004cca:	79fa      	ldrb	r2, [r7, #7]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d017      	beq.n	8004d00 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x84>
	  println((char*) "NOT OK");
 8004cd0:	4828      	ldr	r0, [pc, #160]	; (8004d74 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf8>)
 8004cd2:	f7fc f9fb 	bl	80010cc <println>
	  print((char*) "\tThis Device is: ");
 8004cd6:	4828      	ldr	r0, [pc, #160]	; (8004d78 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xfc>)
 8004cd8:	f7fc fa16 	bl	8001108 <print>

	  char buffer[10];
	  sprintf(buffer, "%X\r\n", whoamI);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	7f9b      	ldrb	r3, [r3, #30]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	f107 0314 	add.w	r3, r7, #20
 8004ce6:	4925      	ldr	r1, [pc, #148]	; (8004d7c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x100>)
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f00f fb17 	bl	801431c <siprintf>
	  print(buffer);
 8004cee:	f107 0314 	add.w	r3, r7, #20
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7fc fa08 	bl	8001108 <print>

	  println((char*) "\n\rProgram Terminated\n\r");
 8004cf8:	4821      	ldr	r0, [pc, #132]	; (8004d80 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x104>)
 8004cfa:	f7fc f9e7 	bl	80010cc <println>
	  while(1);
 8004cfe:	e7fe      	b.n	8004cfe <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x82>
	}
	println((char*) "OK");
 8004d00:	4820      	ldr	r0, [pc, #128]	; (8004d84 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x108>)
 8004d02:	f7fc f9e3 	bl	80010cc <println>

	/* Restore default configuration */
	print((char*) "\tRestore default configuration...");
 8004d06:	4820      	ldr	r0, [pc, #128]	; (8004d88 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x10c>)
 8004d08:	f7fc f9fe 	bl	8001108 <print>
	lps22hh_reset_set(&ctx, PROPERTY_ENABLE);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	3308      	adds	r3, #8
 8004d10:	2101      	movs	r1, #1
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 fcc5 	bl	80056a2 <lps22hh_reset_set>
	HAL_Delay(500);
 8004d18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004d1c:	f004 ff4e 	bl	8009bbc <HAL_Delay>
	do {
	lps22hh_reset_get(&ctx, &rst);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f103 0208 	add.w	r2, r3, #8
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	331f      	adds	r3, #31
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	4610      	mov	r0, r2
 8004d2e:	f000 fcde 	bl	80056ee <lps22hh_reset_get>
	} while (rst);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	7fdb      	ldrb	r3, [r3, #31]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d000      	beq.n	8004d3c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xc0>
	do {
 8004d3a:	e7f1      	b.n	8004d20 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xa4>
	println((char*) "OK");
 8004d3c:	4811      	ldr	r0, [pc, #68]	; (8004d84 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x108>)
 8004d3e:	f7fc f9c5 	bl	80010cc <println>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&ctx, PROPERTY_ENABLE);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	3308      	adds	r3, #8
 8004d46:	2101      	movs	r1, #1
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f000 fba7 	bl	800549c <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&ctx, LPS22HH_75_Hz_LOW_NOISE);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	3308      	adds	r3, #8
 8004d52:	2115      	movs	r1, #21
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 fbc7 	bl	80054e8 <lps22hh_data_rate_set>
}
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3720      	adds	r7, #32
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	08019800 	.word	0x08019800
 8004d68:	08004e5f 	.word	0x08004e5f
 8004d6c:	08004e99 	.word	0x08004e99
 8004d70:	08019784 	.word	0x08019784
 8004d74:	0801979c 	.word	0x0801979c
 8004d78:	080197a4 	.word	0x080197a4
 8004d7c:	080197b8 	.word	0x080197b8
 8004d80:	080197c0 	.word	0x080197c0
 8004d84:	080197d8 	.word	0x080197d8
 8004d88:	080197dc 	.word	0x080197dc

08004d8c <_ZN7LPS22HH11getPressureEv>:



float LPS22HH::getPressure(void){
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
	/* Read output only if new value is available */
	lps22hh_press_flag_data_ready_get(&ctx, &reg);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f103 0208 	add.w	r2, r3, #8
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	3314      	adds	r3, #20
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4610      	mov	r0, r2
 8004da2:	f000 fbef 	bl	8005584 <lps22hh_press_flag_data_ready_get>

	if (reg) {
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	7d1b      	ldrb	r3, [r3, #20]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d019      	beq.n	8004de2 <_ZN7LPS22HH11getPressureEv+0x56>
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	3318      	adds	r3, #24
 8004db2:	2204      	movs	r2, #4
 8004db4:	2100      	movs	r1, #0
 8004db6:	4618      	mov	r0, r3
 8004db8:	f00d ffb4 	bl	8012d24 <memset>
	  lps22hh_pressure_raw_get(&ctx, &data_raw_pressure);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f103 0208 	add.w	r2, r3, #8
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	3318      	adds	r3, #24
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	4610      	mov	r0, r2
 8004dca:	f000 fc0d 	bl	80055e8 <lps22hh_pressure_raw_get>
	  pressure_hPa = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 fb30 	bl	8005438 <lps22hh_from_lsb_to_hpa>
 8004dd8:	eef0 7a40 	vmov.f32	s15, s0
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	edc3 7a00 	vstr	s15, [r3]
	}
	return pressure_hPa;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	ee07 3a90 	vmov	s15, r3
}
 8004dea:	eeb0 0a67 	vmov.f32	s0, s15
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <_ZN7LPS22HH14getTemperatureEv>:


float LPS22HH::getTemperature(void){
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
	/* Read output only if new value is available */
	lps22hh_temp_flag_data_ready_get(&ctx, &reg);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f103 0208 	add.w	r2, r3, #8
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	3314      	adds	r3, #20
 8004e06:	4619      	mov	r1, r3
 8004e08:	4610      	mov	r0, r2
 8004e0a:	f000 fbd4 	bl	80055b6 <lps22hh_temp_flag_data_ready_get>

	if (reg) {
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	7d1b      	ldrb	r3, [r3, #20]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d01a      	beq.n	8004e4c <_ZN7LPS22HH14getTemperatureEv+0x58>
	  memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	331c      	adds	r3, #28
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f00d ff80 	bl	8012d24 <memset>
	  lps22hh_temperature_raw_get(&ctx, &data_raw_temperature);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f103 0208 	add.w	r2, r3, #8
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	331c      	adds	r3, #28
 8004e2e:	4619      	mov	r1, r3
 8004e30:	4610      	mov	r0, r2
 8004e32:	f000 fc02 	bl	800563a <lps22hh_temperature_raw_get>
	  temperature_degC = lps22hh_from_lsb_to_celsius(data_raw_temperature);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 fb13 	bl	8005468 <lps22hh_from_lsb_to_celsius>
 8004e42:	eef0 7a40 	vmov.f32	s15, s0
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	return temperature_degC;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	ee07 3a90 	vmov	s15, r3
}
 8004e54:	eeb0 0a67 	vmov.f32	s0, s15
 8004e58:	3708      	adds	r7, #8
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <_ZN7LPS22HH5writeEPvhPKht>:



int32_t LPS22HH::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b088      	sub	sp, #32
 8004e62:	af04      	add	r7, sp, #16
 8004e64:	60f8      	str	r0, [r7, #12]
 8004e66:	607a      	str	r2, [r7, #4]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	72fb      	strb	r3, [r7, #11]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8004e72:	7afb      	ldrb	r3, [r7, #11]
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e7a:	9302      	str	r3, [sp, #8]
 8004e7c:	893b      	ldrh	r3, [r7, #8]
 8004e7e:	9301      	str	r3, [sp, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	2301      	movs	r3, #1
 8004e86:	21b9      	movs	r1, #185	; 0xb9
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f005 ff19 	bl	800acc0 <HAL_I2C_Mem_Write>
  return 0;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <_ZN7LPS22HH4readEPvhPht>:

int32_t LPS22HH::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b088      	sub	sp, #32
 8004e9c:	af04      	add	r7, sp, #16
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	607a      	str	r2, [r7, #4]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	72fb      	strb	r3, [r7, #11]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8004eac:	7afb      	ldrb	r3, [r7, #11]
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004eb4:	9302      	str	r3, [sp, #8]
 8004eb6:	893b      	ldrh	r3, [r7, #8]
 8004eb8:	9301      	str	r3, [sp, #4]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	21b9      	movs	r1, #185	; 0xb9
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f005 fff6 	bl	800aeb4 <HAL_I2C_Mem_Read>
  return 0;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
	...

08004ed4 <GPS_Poll>:
#define LED3_GPIO_Port	((GPIO_TypeDef *) ((0x40000000UL + 0x00020000UL) + 0x0800UL))//OUT_LED3_GPIO_Port
#define LED3_Pin	(uint16_t)0x0008//OUT_LED3_Pin


void GPS_Poll(float *latitude, float *longitude, float *time)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b08c      	sub	sp, #48	; 0x30
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 8004ee0:	2364      	movs	r3, #100	; 0x64
 8004ee2:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 8004eec:	e073      	b.n	8004fd6 <GPS_Poll+0x102>
		HAL_UART_Receive(GPS.uart, (uint8_t*)&rx_current, 1, 100);
 8004eee:	4b3f      	ldr	r3, [pc, #252]	; (8004fec <GPS_Poll+0x118>)
 8004ef0:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8004ef2:	2364      	movs	r3, #100	; 0x64
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	493e      	ldr	r1, [pc, #248]	; (8004ff0 <GPS_Poll+0x11c>)
 8004ef8:	f00a f8e1 	bl	800f0be <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 8004efc:	4b3c      	ldr	r3, [pc, #240]	; (8004ff0 <GPS_Poll+0x11c>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	2b0a      	cmp	r3, #10
 8004f02:	d00f      	beq.n	8004f24 <GPS_Poll+0x50>
 8004f04:	4b3b      	ldr	r3, [pc, #236]	; (8004ff4 <GPS_Poll+0x120>)
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	2b63      	cmp	r3, #99	; 0x63
 8004f0a:	d80b      	bhi.n	8004f24 <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 8004f0c:	4b39      	ldr	r3, [pc, #228]	; (8004ff4 <GPS_Poll+0x120>)
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	b2d1      	uxtb	r1, r2
 8004f14:	4a37      	ldr	r2, [pc, #220]	; (8004ff4 <GPS_Poll+0x120>)
 8004f16:	7011      	strb	r1, [r2, #0]
 8004f18:	461a      	mov	r2, r3
 8004f1a:	4b35      	ldr	r3, [pc, #212]	; (8004ff0 <GPS_Poll+0x11c>)
 8004f1c:	7819      	ldrb	r1, [r3, #0]
 8004f1e:	4b36      	ldr	r3, [pc, #216]	; (8004ff8 <GPS_Poll+0x124>)
 8004f20:	5499      	strb	r1, [r3, r2]
 8004f22:	e021      	b.n	8004f68 <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 8004f24:	4834      	ldr	r0, [pc, #208]	; (8004ff8 <GPS_Poll+0x124>)
 8004f26:	f000 f869 	bl	8004ffc <GPS_validate>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d013      	beq.n	8004f58 <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 8004f30:	4831      	ldr	r0, [pc, #196]	; (8004ff8 <GPS_Poll+0x124>)
 8004f32:	f000 f8c5 	bl	80050c0 <GPS_parse>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00d      	beq.n	8004f58 <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 8004f3c:	4b2b      	ldr	r3, [pc, #172]	; (8004fec <GPS_Poll+0x118>)
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 8004f44:	4b29      	ldr	r3, [pc, #164]	; (8004fec <GPS_Poll+0x118>)
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 8004f4c:	4b27      	ldr	r3, [pc, #156]	; (8004fec <GPS_Poll+0x118>)
 8004f4e:	695a      	ldr	r2, [r3, #20]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	601a      	str	r2, [r3, #0]
					done = 1;
 8004f54:	2301      	movs	r3, #1
 8004f56:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 8004f58:	4b26      	ldr	r3, [pc, #152]	; (8004ff4 <GPS_Poll+0x120>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 8004f5e:	2264      	movs	r2, #100	; 0x64
 8004f60:	2100      	movs	r1, #0
 8004f62:	4825      	ldr	r0, [pc, #148]	; (8004ff8 <GPS_Poll+0x124>)
 8004f64:	f00d fede 	bl	8012d24 <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS.uart);
 8004f68:	2300      	movs	r3, #0
 8004f6a:	623b      	str	r3, [r7, #32]
 8004f6c:	4b1f      	ldr	r3, [pc, #124]	; (8004fec <GPS_Poll+0x118>)
 8004f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	623b      	str	r3, [r7, #32]
 8004f76:	4b1d      	ldr	r3, [pc, #116]	; (8004fec <GPS_Poll+0x118>)
 8004f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	623b      	str	r3, [r7, #32]
 8004f80:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS.uart);
 8004f82:	2300      	movs	r3, #0
 8004f84:	61fb      	str	r3, [r7, #28]
 8004f86:	4b19      	ldr	r3, [pc, #100]	; (8004fec <GPS_Poll+0x118>)
 8004f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	61fb      	str	r3, [r7, #28]
 8004f90:	4b16      	ldr	r3, [pc, #88]	; (8004fec <GPS_Poll+0x118>)
 8004f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	61fb      	str	r3, [r7, #28]
 8004f9a:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS.uart);
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	61bb      	str	r3, [r7, #24]
 8004fa0:	4b12      	ldr	r3, [pc, #72]	; (8004fec <GPS_Poll+0x118>)
 8004fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	61bb      	str	r3, [r7, #24]
 8004faa:	4b10      	ldr	r3, [pc, #64]	; (8004fec <GPS_Poll+0x118>)
 8004fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	61bb      	str	r3, [r7, #24]
 8004fb4:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS.uart);
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	617b      	str	r3, [r7, #20]
 8004fba:	4b0c      	ldr	r3, [pc, #48]	; (8004fec <GPS_Poll+0x118>)
 8004fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	4b09      	ldr	r3, [pc, #36]	; (8004fec <GPS_Poll+0x118>)
 8004fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	617b      	str	r3, [r7, #20]
 8004fce:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 8004fd0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 8004fd6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004fd8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d202      	bcs.n	8004fe4 <GPS_Poll+0x110>
 8004fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d084      	beq.n	8004eee <GPS_Poll+0x1a>
	}
}
 8004fe4:	bf00      	nop
 8004fe6:	3730      	adds	r7, #48	; 0x30
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	20005f78 	.word	0x20005f78
 8004ff0:	200003ec 	.word	0x200003ec
 8004ff4:	200003ed 	.word	0x200003ed
 8004ff8:	20005fdc 	.word	0x20005fdc

08004ffc <GPS_validate>:

int GPS_validate(char *nmeastr){
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8005004:	2300      	movs	r3, #0
 8005006:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8005008:	2300      	movs	r3, #0
 800500a:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	4413      	add	r3, r2
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2b24      	cmp	r3, #36	; 0x24
 8005016:	d103      	bne.n	8005020 <GPS_validate+0x24>
        i++;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	3301      	adds	r3, #1
 800501c:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800501e:	e00c      	b.n	800503a <GPS_validate+0x3e>
        return 0;
 8005020:	2300      	movs	r3, #0
 8005022:	e047      	b.n	80050b4 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	4413      	add	r3, r2
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	461a      	mov	r2, r3
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	4053      	eors	r3, r2
 8005032:	613b      	str	r3, [r7, #16]
        i++;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	3301      	adds	r3, #1
 8005038:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	4413      	add	r3, r2
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d008      	beq.n	8005058 <GPS_validate+0x5c>
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	4413      	add	r3, r2
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2b2a      	cmp	r3, #42	; 0x2a
 8005050:	d002      	beq.n	8005058 <GPS_validate+0x5c>
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2b4a      	cmp	r3, #74	; 0x4a
 8005056:	dde5      	ble.n	8005024 <GPS_validate+0x28>
    }

    if(i >= 75){
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	2b4a      	cmp	r3, #74	; 0x4a
 800505c:	dd01      	ble.n	8005062 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 800505e:	2300      	movs	r3, #0
 8005060:	e028      	b.n	80050b4 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	4413      	add	r3, r2
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	2b2a      	cmp	r3, #42	; 0x2a
 800506c:	d119      	bne.n	80050a2 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	3301      	adds	r3, #1
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	4413      	add	r3, r2
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	3302      	adds	r3, #2
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	4413      	add	r3, r2
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8005086:	2300      	movs	r3, #0
 8005088:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 800508a:	f107 0308 	add.w	r3, r7, #8
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	490a      	ldr	r1, [pc, #40]	; (80050bc <GPS_validate+0xc0>)
 8005092:	4618      	mov	r0, r3
 8005094:	f00f f942 	bl	801431c <siprintf>
    return((checkcalcstr[0] == check[0])
 8005098:	7a3a      	ldrb	r2, [r7, #8]
 800509a:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800509c:	429a      	cmp	r2, r3
 800509e:	d108      	bne.n	80050b2 <GPS_validate+0xb6>
 80050a0:	e001      	b.n	80050a6 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 80050a2:	2300      	movs	r3, #0
 80050a4:	e006      	b.n	80050b4 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80050a6:	7a7a      	ldrb	r2, [r7, #9]
 80050a8:	7b7b      	ldrb	r3, [r7, #13]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d101      	bne.n	80050b2 <GPS_validate+0xb6>
 80050ae:	2301      	movs	r3, #1
 80050b0:	e000      	b.n	80050b4 <GPS_validate+0xb8>
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3718      	adds	r7, #24
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	08019810 	.word	0x08019810

080050c0 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08a      	sub	sp, #40	; 0x28
 80050c4:	af08      	add	r7, sp, #32
 80050c6:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 80050c8:	2206      	movs	r2, #6
 80050ca:	496d      	ldr	r1, [pc, #436]	; (8005280 <GPS_parse+0x1c0>)
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f00f f9cb 	bl	8014468 <strncmp>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d139      	bne.n	800514c <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 80050d8:	4b6a      	ldr	r3, [pc, #424]	; (8005284 <GPS_parse+0x1c4>)
 80050da:	9307      	str	r3, [sp, #28]
 80050dc:	4b6a      	ldr	r3, [pc, #424]	; (8005288 <GPS_parse+0x1c8>)
 80050de:	9306      	str	r3, [sp, #24]
 80050e0:	4b6a      	ldr	r3, [pc, #424]	; (800528c <GPS_parse+0x1cc>)
 80050e2:	9305      	str	r3, [sp, #20]
 80050e4:	4b6a      	ldr	r3, [pc, #424]	; (8005290 <GPS_parse+0x1d0>)
 80050e6:	9304      	str	r3, [sp, #16]
 80050e8:	4b6a      	ldr	r3, [pc, #424]	; (8005294 <GPS_parse+0x1d4>)
 80050ea:	9303      	str	r3, [sp, #12]
 80050ec:	4b6a      	ldr	r3, [pc, #424]	; (8005298 <GPS_parse+0x1d8>)
 80050ee:	9302      	str	r3, [sp, #8]
 80050f0:	4b6a      	ldr	r3, [pc, #424]	; (800529c <GPS_parse+0x1dc>)
 80050f2:	9301      	str	r3, [sp, #4]
 80050f4:	4b6a      	ldr	r3, [pc, #424]	; (80052a0 <GPS_parse+0x1e0>)
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	4b6a      	ldr	r3, [pc, #424]	; (80052a4 <GPS_parse+0x1e4>)
 80050fa:	4a6b      	ldr	r2, [pc, #428]	; (80052a8 <GPS_parse+0x1e8>)
 80050fc:	496b      	ldr	r1, [pc, #428]	; (80052ac <GPS_parse+0x1ec>)
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f00f f92c 	bl	801435c <siscanf>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	f340 80b5 	ble.w	8005276 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 800510c:	4b68      	ldr	r3, [pc, #416]	; (80052b0 <GPS_parse+0x1f0>)
 800510e:	edd3 7a04 	vldr	s15, [r3, #16]
 8005112:	4b67      	ldr	r3, [pc, #412]	; (80052b0 <GPS_parse+0x1f0>)
 8005114:	7e1b      	ldrb	r3, [r3, #24]
 8005116:	4618      	mov	r0, r3
 8005118:	eeb0 0a67 	vmov.f32	s0, s15
 800511c:	f000 f8ec 	bl	80052f8 <GPS_nmea_to_dec>
 8005120:	eef0 7a40 	vmov.f32	s15, s0
 8005124:	4b62      	ldr	r3, [pc, #392]	; (80052b0 <GPS_parse+0x1f0>)
 8005126:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 800512a:	4b61      	ldr	r3, [pc, #388]	; (80052b0 <GPS_parse+0x1f0>)
 800512c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005130:	4b5f      	ldr	r3, [pc, #380]	; (80052b0 <GPS_parse+0x1f0>)
 8005132:	7e5b      	ldrb	r3, [r3, #25]
 8005134:	4618      	mov	r0, r3
 8005136:	eeb0 0a67 	vmov.f32	s0, s15
 800513a:	f000 f8dd 	bl	80052f8 <GPS_nmea_to_dec>
 800513e:	eef0 7a40 	vmov.f32	s15, s0
 8005142:	4b5b      	ldr	r3, [pc, #364]	; (80052b0 <GPS_parse+0x1f0>)
 8005144:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8005148:	2301      	movs	r3, #1
 800514a:	e095      	b.n	8005278 <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 800514c:	2206      	movs	r2, #6
 800514e:	4959      	ldr	r1, [pc, #356]	; (80052b4 <GPS_parse+0x1f4>)
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f00f f989 	bl	8014468 <strncmp>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d134      	bne.n	80051c6 <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 800515c:	4b56      	ldr	r3, [pc, #344]	; (80052b8 <GPS_parse+0x1f8>)
 800515e:	9305      	str	r3, [sp, #20]
 8005160:	4b56      	ldr	r3, [pc, #344]	; (80052bc <GPS_parse+0x1fc>)
 8005162:	9304      	str	r3, [sp, #16]
 8005164:	4b56      	ldr	r3, [pc, #344]	; (80052c0 <GPS_parse+0x200>)
 8005166:	9303      	str	r3, [sp, #12]
 8005168:	4b4b      	ldr	r3, [pc, #300]	; (8005298 <GPS_parse+0x1d8>)
 800516a:	9302      	str	r3, [sp, #8]
 800516c:	4b4b      	ldr	r3, [pc, #300]	; (800529c <GPS_parse+0x1dc>)
 800516e:	9301      	str	r3, [sp, #4]
 8005170:	4b4b      	ldr	r3, [pc, #300]	; (80052a0 <GPS_parse+0x1e0>)
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	4b4b      	ldr	r3, [pc, #300]	; (80052a4 <GPS_parse+0x1e4>)
 8005176:	4a4c      	ldr	r2, [pc, #304]	; (80052a8 <GPS_parse+0x1e8>)
 8005178:	4952      	ldr	r1, [pc, #328]	; (80052c4 <GPS_parse+0x204>)
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f00f f8ee 	bl	801435c <siscanf>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	dd77      	ble.n	8005276 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8005186:	4b4a      	ldr	r3, [pc, #296]	; (80052b0 <GPS_parse+0x1f0>)
 8005188:	edd3 7a04 	vldr	s15, [r3, #16]
 800518c:	4b48      	ldr	r3, [pc, #288]	; (80052b0 <GPS_parse+0x1f0>)
 800518e:	7e1b      	ldrb	r3, [r3, #24]
 8005190:	4618      	mov	r0, r3
 8005192:	eeb0 0a67 	vmov.f32	s0, s15
 8005196:	f000 f8af 	bl	80052f8 <GPS_nmea_to_dec>
 800519a:	eef0 7a40 	vmov.f32	s15, s0
 800519e:	4b44      	ldr	r3, [pc, #272]	; (80052b0 <GPS_parse+0x1f0>)
 80051a0:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80051a4:	4b42      	ldr	r3, [pc, #264]	; (80052b0 <GPS_parse+0x1f0>)
 80051a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80051aa:	4b41      	ldr	r3, [pc, #260]	; (80052b0 <GPS_parse+0x1f0>)
 80051ac:	7e5b      	ldrb	r3, [r3, #25]
 80051ae:	4618      	mov	r0, r3
 80051b0:	eeb0 0a67 	vmov.f32	s0, s15
 80051b4:	f000 f8a0 	bl	80052f8 <GPS_nmea_to_dec>
 80051b8:	eef0 7a40 	vmov.f32	s15, s0
 80051bc:	4b3c      	ldr	r3, [pc, #240]	; (80052b0 <GPS_parse+0x1f0>)
 80051be:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e058      	b.n	8005278 <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 80051c6:	2206      	movs	r2, #6
 80051c8:	493f      	ldr	r1, [pc, #252]	; (80052c8 <GPS_parse+0x208>)
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f00f f94c 	bl	8014468 <strncmp>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d130      	bne.n	8005238 <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 80051d6:	4b3d      	ldr	r3, [pc, #244]	; (80052cc <GPS_parse+0x20c>)
 80051d8:	9303      	str	r3, [sp, #12]
 80051da:	4b33      	ldr	r3, [pc, #204]	; (80052a8 <GPS_parse+0x1e8>)
 80051dc:	9302      	str	r3, [sp, #8]
 80051de:	4b2e      	ldr	r3, [pc, #184]	; (8005298 <GPS_parse+0x1d8>)
 80051e0:	9301      	str	r3, [sp, #4]
 80051e2:	4b2e      	ldr	r3, [pc, #184]	; (800529c <GPS_parse+0x1dc>)
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	4b2e      	ldr	r3, [pc, #184]	; (80052a0 <GPS_parse+0x1e0>)
 80051e8:	4a2e      	ldr	r2, [pc, #184]	; (80052a4 <GPS_parse+0x1e4>)
 80051ea:	4939      	ldr	r1, [pc, #228]	; (80052d0 <GPS_parse+0x210>)
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f00f f8b5 	bl	801435c <siscanf>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	dd3e      	ble.n	8005276 <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80051f8:	4b2d      	ldr	r3, [pc, #180]	; (80052b0 <GPS_parse+0x1f0>)
 80051fa:	edd3 7a04 	vldr	s15, [r3, #16]
 80051fe:	4b2c      	ldr	r3, [pc, #176]	; (80052b0 <GPS_parse+0x1f0>)
 8005200:	7e1b      	ldrb	r3, [r3, #24]
 8005202:	4618      	mov	r0, r3
 8005204:	eeb0 0a67 	vmov.f32	s0, s15
 8005208:	f000 f876 	bl	80052f8 <GPS_nmea_to_dec>
 800520c:	eef0 7a40 	vmov.f32	s15, s0
 8005210:	4b27      	ldr	r3, [pc, #156]	; (80052b0 <GPS_parse+0x1f0>)
 8005212:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8005216:	4b26      	ldr	r3, [pc, #152]	; (80052b0 <GPS_parse+0x1f0>)
 8005218:	edd3 7a03 	vldr	s15, [r3, #12]
 800521c:	4b24      	ldr	r3, [pc, #144]	; (80052b0 <GPS_parse+0x1f0>)
 800521e:	7e5b      	ldrb	r3, [r3, #25]
 8005220:	4618      	mov	r0, r3
 8005222:	eeb0 0a67 	vmov.f32	s0, s15
 8005226:	f000 f867 	bl	80052f8 <GPS_nmea_to_dec>
 800522a:	eef0 7a40 	vmov.f32	s15, s0
 800522e:	4b20      	ldr	r3, [pc, #128]	; (80052b0 <GPS_parse+0x1f0>)
 8005230:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 8005234:	2301      	movs	r3, #1
 8005236:	e01f      	b.n	8005278 <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 8005238:	2206      	movs	r2, #6
 800523a:	4926      	ldr	r1, [pc, #152]	; (80052d4 <GPS_parse+0x214>)
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f00f f913 	bl	8014468 <strncmp>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d116      	bne.n	8005276 <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8005248:	4b23      	ldr	r3, [pc, #140]	; (80052d8 <GPS_parse+0x218>)
 800524a:	9305      	str	r3, [sp, #20]
 800524c:	4b23      	ldr	r3, [pc, #140]	; (80052dc <GPS_parse+0x21c>)
 800524e:	9304      	str	r3, [sp, #16]
 8005250:	4b23      	ldr	r3, [pc, #140]	; (80052e0 <GPS_parse+0x220>)
 8005252:	9303      	str	r3, [sp, #12]
 8005254:	4b1a      	ldr	r3, [pc, #104]	; (80052c0 <GPS_parse+0x200>)
 8005256:	9302      	str	r3, [sp, #8]
 8005258:	4b22      	ldr	r3, [pc, #136]	; (80052e4 <GPS_parse+0x224>)
 800525a:	9301      	str	r3, [sp, #4]
 800525c:	4b22      	ldr	r3, [pc, #136]	; (80052e8 <GPS_parse+0x228>)
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	4b22      	ldr	r3, [pc, #136]	; (80052ec <GPS_parse+0x22c>)
 8005262:	4a23      	ldr	r2, [pc, #140]	; (80052f0 <GPS_parse+0x230>)
 8005264:	4923      	ldr	r1, [pc, #140]	; (80052f4 <GPS_parse+0x234>)
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f00f f878 	bl	801435c <siscanf>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	dd01      	ble.n	8005276 <GPS_parse+0x1b6>
            return 0;
 8005272:	2300      	movs	r3, #0
 8005274:	e000      	b.n	8005278 <GPS_parse+0x1b8>
    }
    return 0;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3708      	adds	r7, #8
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	08019818 	.word	0x08019818
 8005284:	20005fa4 	.word	0x20005fa4
 8005288:	20005fa0 	.word	0x20005fa0
 800528c:	20005f9c 	.word	0x20005f9c
 8005290:	20005f98 	.word	0x20005f98
 8005294:	20005f94 	.word	0x20005f94
 8005298:	20005f91 	.word	0x20005f91
 800529c:	20005f84 	.word	0x20005f84
 80052a0:	20005f90 	.word	0x20005f90
 80052a4:	20005f88 	.word	0x20005f88
 80052a8:	20005f8c 	.word	0x20005f8c
 80052ac:	08019820 	.word	0x08019820
 80052b0:	20005f78 	.word	0x20005f78
 80052b4:	08019848 	.word	0x08019848
 80052b8:	20005fb0 	.word	0x20005fb0
 80052bc:	20005fac 	.word	0x20005fac
 80052c0:	20005fa8 	.word	0x20005fa8
 80052c4:	08019850 	.word	0x08019850
 80052c8:	08019870 	.word	0x08019870
 80052cc:	20005fb4 	.word	0x20005fb4
 80052d0:	08019878 	.word	0x08019878
 80052d4:	08019894 	.word	0x08019894
 80052d8:	20005fcc 	.word	0x20005fcc
 80052dc:	20005fc8 	.word	0x20005fc8
 80052e0:	20005fc5 	.word	0x20005fc5
 80052e4:	20005fc4 	.word	0x20005fc4
 80052e8:	20005fc0 	.word	0x20005fc0
 80052ec:	20005fbc 	.word	0x20005fbc
 80052f0:	20005fb8 	.word	0x20005fb8
 80052f4:	0801989c 	.word	0x0801989c

080052f8 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8005302:	4603      	mov	r3, r0
 8005304:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8005306:	ed97 7a01 	vldr	s14, [r7, #4]
 800530a:	eddf 6a20 	vldr	s13, [pc, #128]	; 800538c <GPS_nmea_to_dec+0x94>
 800530e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005312:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005316:	ee17 3a90 	vmov	r3, s15
 800531a:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	2264      	movs	r2, #100	; 0x64
 8005320:	fb02 f303 	mul.w	r3, r2, r3
 8005324:	ee07 3a90 	vmov	s15, r3
 8005328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800532c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005330:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005334:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8005338:	ed97 7a03 	vldr	s14, [r7, #12]
 800533c:	eddf 6a14 	vldr	s13, [pc, #80]	; 8005390 <GPS_nmea_to_dec+0x98>
 8005340:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005344:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	ee07 3a90 	vmov	s15, r3
 800534e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005352:	ed97 7a02 	vldr	s14, [r7, #8]
 8005356:	ee77 7a27 	vadd.f32	s15, s14, s15
 800535a:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 800535e:	78fb      	ldrb	r3, [r7, #3]
 8005360:	2b53      	cmp	r3, #83	; 0x53
 8005362:	d002      	beq.n	800536a <GPS_nmea_to_dec+0x72>
 8005364:	78fb      	ldrb	r3, [r7, #3]
 8005366:	2b57      	cmp	r3, #87	; 0x57
 8005368:	d105      	bne.n	8005376 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 800536a:	edd7 7a05 	vldr	s15, [r7, #20]
 800536e:	eef1 7a67 	vneg.f32	s15, s15
 8005372:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	ee07 3a90 	vmov	s15, r3
}
 800537c:	eeb0 0a67 	vmov.f32	s0, s15
 8005380:	371c      	adds	r7, #28
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	42c80000 	.word	0x42c80000
 8005390:	42700000 	.word	0x42700000

08005394 <GPS_Init>:
	}
}


void GPS_Init(UART_HandleTypeDef* data_uart, void (*gps_print)(char*),
		void (*gps_tone_freq)(uint32_t duration, uint32_t repeats, uint32_t freq)){
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
	GPS.print = gps_print;
 80053a0:	4a0a      	ldr	r2, [pc, #40]	; (80053cc <GPS_Init+0x38>)
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	65d3      	str	r3, [r2, #92]	; 0x5c
	GPS.print((char*) "\r\nGPS Init...");
 80053a6:	4b09      	ldr	r3, [pc, #36]	; (80053cc <GPS_Init+0x38>)
 80053a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053aa:	4809      	ldr	r0, [pc, #36]	; (80053d0 <GPS_Init+0x3c>)
 80053ac:	4798      	blx	r3
	GPS.uart = data_uart;
 80053ae:	4a07      	ldr	r2, [pc, #28]	; (80053cc <GPS_Init+0x38>)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6593      	str	r3, [r2, #88]	; 0x58
	GPS.tone_freq = gps_tone_freq;
 80053b4:	4a05      	ldr	r2, [pc, #20]	; (80053cc <GPS_Init+0x38>)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6613      	str	r3, [r2, #96]	; 0x60
	GPS.print((char*) "OK\r\n");
 80053ba:	4b04      	ldr	r3, [pc, #16]	; (80053cc <GPS_Init+0x38>)
 80053bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053be:	4805      	ldr	r0, [pc, #20]	; (80053d4 <GPS_Init+0x40>)
 80053c0:	4798      	blx	r3
}
 80053c2:	bf00      	nop
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	20005f78 	.word	0x20005f78
 80053d0:	080198bc 	.word	0x080198bc
 80053d4:	080198cc 	.word	0x080198cc

080053d8 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80053d8:	b590      	push	{r4, r7, lr}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	607a      	str	r2, [r7, #4]
 80053e2:	461a      	mov	r2, r3
 80053e4:	460b      	mov	r3, r1
 80053e6:	72fb      	strb	r3, [r7, #11]
 80053e8:	4613      	mov	r3, r2
 80053ea:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	685c      	ldr	r4, [r3, #4]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6898      	ldr	r0, [r3, #8]
 80053f4:	893b      	ldrh	r3, [r7, #8]
 80053f6:	7af9      	ldrb	r1, [r7, #11]
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	47a0      	blx	r4
 80053fc:	6178      	str	r0, [r7, #20]

  return ret;
 80053fe:	697b      	ldr	r3, [r7, #20]
}
 8005400:	4618      	mov	r0, r3
 8005402:	371c      	adds	r7, #28
 8005404:	46bd      	mov	sp, r7
 8005406:	bd90      	pop	{r4, r7, pc}

08005408 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005408:	b590      	push	{r4, r7, lr}
 800540a:	b087      	sub	sp, #28
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	607a      	str	r2, [r7, #4]
 8005412:	461a      	mov	r2, r3
 8005414:	460b      	mov	r3, r1
 8005416:	72fb      	strb	r3, [r7, #11]
 8005418:	4613      	mov	r3, r2
 800541a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681c      	ldr	r4, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6898      	ldr	r0, [r3, #8]
 8005424:	893b      	ldrh	r3, [r7, #8]
 8005426:	7af9      	ldrb	r1, [r7, #11]
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	47a0      	blx	r4
 800542c:	6178      	str	r0, [r7, #20]

  return ret;
 800542e:	697b      	ldr	r3, [r7, #20]
}
 8005430:	4618      	mov	r0, r3
 8005432:	371c      	adds	r7, #28
 8005434:	46bd      	mov	sp, r7
 8005436:	bd90      	pop	{r4, r7, pc}

08005438 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	ee07 3a90 	vmov	s15, r3
 8005446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800544a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005464 <lps22hh_from_lsb_to_hpa+0x2c>
 800544e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005452:	eef0 7a66 	vmov.f32	s15, s13
}
 8005456:	eeb0 0a67 	vmov.f32	s0, s15
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	49800000 	.word	0x49800000

08005468 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	4603      	mov	r3, r0
 8005470:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8005472:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005476:	ee07 3a90 	vmov	s15, r3
 800547a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800547e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005498 <lps22hh_from_lsb_to_celsius+0x30>
 8005482:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005486:	eef0 7a66 	vmov.f32	s15, s13
}
 800548a:	eeb0 0a67 	vmov.f32	s0, s15
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	42c80000 	.word	0x42c80000

0800549c <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	460b      	mov	r3, r1
 80054a6:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80054a8:	f107 0208 	add.w	r2, r7, #8
 80054ac:	2301      	movs	r3, #1
 80054ae:	2110      	movs	r1, #16
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f7ff ff91 	bl	80053d8 <lps22hh_read_reg>
 80054b6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10f      	bne.n	80054de <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80054be:	78fb      	ldrb	r3, [r7, #3]
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	b2da      	uxtb	r2, r3
 80054c6:	7a3b      	ldrb	r3, [r7, #8]
 80054c8:	f362 0341 	bfi	r3, r2, #1, #1
 80054cc:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80054ce:	f107 0208 	add.w	r2, r7, #8
 80054d2:	2301      	movs	r3, #1
 80054d4:	2110      	movs	r1, #16
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7ff ff96 	bl	8005408 <lps22hh_write_reg>
 80054dc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80054de:	68fb      	ldr	r3, [r7, #12]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	460b      	mov	r3, r1
 80054f2:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80054f4:	f107 0210 	add.w	r2, r7, #16
 80054f8:	2301      	movs	r3, #1
 80054fa:	2110      	movs	r1, #16
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7ff ff6b 	bl	80053d8 <lps22hh_read_reg>
 8005502:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d107      	bne.n	800551a <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800550a:	f107 020c 	add.w	r2, r7, #12
 800550e:	2301      	movs	r3, #1
 8005510:	2111      	movs	r1, #17
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7ff ff60 	bl	80053d8 <lps22hh_read_reg>
 8005518:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10f      	bne.n	8005540 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8005520:	78fb      	ldrb	r3, [r7, #3]
 8005522:	f003 0307 	and.w	r3, r3, #7
 8005526:	b2da      	uxtb	r2, r3
 8005528:	7c3b      	ldrb	r3, [r7, #16]
 800552a:	f362 1306 	bfi	r3, r2, #4, #3
 800552e:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005530:	f107 0210 	add.w	r2, r7, #16
 8005534:	2301      	movs	r3, #1
 8005536:	2110      	movs	r1, #16
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7ff ff65 	bl	8005408 <lps22hh_write_reg>
 800553e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d119      	bne.n	800557a <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8005546:	78fb      	ldrb	r3, [r7, #3]
 8005548:	091b      	lsrs	r3, r3, #4
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	b2da      	uxtb	r2, r3
 8005550:	7b3b      	ldrb	r3, [r7, #12]
 8005552:	f362 0341 	bfi	r3, r2, #1, #1
 8005556:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8005558:	78fb      	ldrb	r3, [r7, #3]
 800555a:	08db      	lsrs	r3, r3, #3
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	b2da      	uxtb	r2, r3
 8005562:	7b3b      	ldrb	r3, [r7, #12]
 8005564:	f362 0300 	bfi	r3, r2, #0, #1
 8005568:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800556a:	f107 020c 	add.w	r2, r7, #12
 800556e:	2301      	movs	r3, #1
 8005570:	2111      	movs	r1, #17
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7ff ff48 	bl	8005408 <lps22hh_write_reg>
 8005578:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800557a:	697b      	ldr	r3, [r7, #20]
}
 800557c:	4618      	mov	r0, r3
 800557e:	3718      	adds	r7, #24
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <lps22hh_press_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_press_flag_data_ready_get(stmdev_ctx_t *ctx,
                                          uint8_t *val)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 800558e:	f107 0208 	add.w	r2, r7, #8
 8005592:	2301      	movs	r3, #1
 8005594:	2127      	movs	r1, #39	; 0x27
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7ff ff1e 	bl	80053d8 <lps22hh_read_reg>
 800559c:	60f8      	str	r0, [r7, #12]
  *val = reg.p_da;
 800559e:	7a3b      	ldrb	r3, [r7, #8]
 80055a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	461a      	mov	r2, r3
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	701a      	strb	r2, [r3, #0]

  return ret;
 80055ac:	68fb      	ldr	r3, [r7, #12]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b084      	sub	sp, #16
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 80055c0:	f107 0208 	add.w	r2, r7, #8
 80055c4:	2301      	movs	r3, #1
 80055c6:	2127      	movs	r1, #39	; 0x27
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7ff ff05 	bl	80053d8 <lps22hh_read_reg>
 80055ce:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 80055d0:	7a3b      	ldrb	r3, [r7, #8]
 80055d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	461a      	mov	r2, r3
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	701a      	strb	r2, [r3, #0]

  return ret;
 80055de:	68fb      	ldr	r3, [r7, #12]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 80055f2:	f107 0208 	add.w	r2, r7, #8
 80055f6:	2303      	movs	r3, #3
 80055f8:	2128      	movs	r1, #40	; 0x28
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7ff feec 	bl	80053d8 <lps22hh_read_reg>
 8005600:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8005602:	7abb      	ldrb	r3, [r7, #10]
 8005604:	461a      	mov	r2, r3
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	021b      	lsls	r3, r3, #8
 8005610:	7a7a      	ldrb	r2, [r7, #9]
 8005612:	441a      	add	r2, r3
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	021b      	lsls	r3, r3, #8
 800561e:	7a3a      	ldrb	r2, [r7, #8]
 8005620:	441a      	add	r2, r3
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	021a      	lsls	r2, r3, #8
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	601a      	str	r2, [r3, #0]

  return ret;
 8005630:	68fb      	ldr	r3, [r7, #12]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b084      	sub	sp, #16
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8005644:	f107 0208 	add.w	r2, r7, #8
 8005648:	2302      	movs	r3, #2
 800564a:	212b      	movs	r1, #43	; 0x2b
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f7ff fec3 	bl	80053d8 <lps22hh_read_reg>
 8005652:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8005654:	7a7b      	ldrb	r3, [r7, #9]
 8005656:	b21a      	sxth	r2, r3
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005662:	b29b      	uxth	r3, r3
 8005664:	021b      	lsls	r3, r3, #8
 8005666:	b29a      	uxth	r2, r3
 8005668:	7a3b      	ldrb	r3, [r7, #8]
 800566a:	b29b      	uxth	r3, r3
 800566c:	4413      	add	r3, r2
 800566e:	b29b      	uxth	r3, r3
 8005670:	b21a      	sxth	r2, r3
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	801a      	strh	r2, [r3, #0]

  return ret;
 8005676:	68fb      	ldr	r3, [r7, #12]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 800568a:	2301      	movs	r3, #1
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	210f      	movs	r1, #15
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7ff fea1 	bl	80053d8 <lps22hh_read_reg>
 8005696:	60f8      	str	r0, [r7, #12]

  return ret;
 8005698:	68fb      	ldr	r3, [r7, #12]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b084      	sub	sp, #16
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	460b      	mov	r3, r1
 80056ac:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80056ae:	f107 0208 	add.w	r2, r7, #8
 80056b2:	2301      	movs	r3, #1
 80056b4:	2111      	movs	r1, #17
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f7ff fe8e 	bl	80053d8 <lps22hh_read_reg>
 80056bc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10f      	bne.n	80056e4 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 80056c4:	78fb      	ldrb	r3, [r7, #3]
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	7a3b      	ldrb	r3, [r7, #8]
 80056ce:	f362 0382 	bfi	r3, r2, #2, #1
 80056d2:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80056d4:	f107 0208 	add.w	r2, r7, #8
 80056d8:	2301      	movs	r3, #1
 80056da:	2111      	movs	r1, #17
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f7ff fe93 	bl	8005408 <lps22hh_write_reg>
 80056e2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80056e4:	68fb      	ldr	r3, [r7, #12]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b084      	sub	sp, #16
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
 80056f6:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80056f8:	f107 0208 	add.w	r2, r7, #8
 80056fc:	2301      	movs	r3, #1
 80056fe:	2111      	movs	r1, #17
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7ff fe69 	bl	80053d8 <lps22hh_read_reg>
 8005706:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8005708:	7a3b      	ldrb	r3, [r7, #8]
 800570a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800570e:	b2db      	uxtb	r3, r3
 8005710:	461a      	mov	r2, r3
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	701a      	strb	r2, [r3, #0]

  return ret;
 8005716:	68fb      	ldr	r3, [r7, #12]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005720:	b590      	push	{r4, r7, lr}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	607a      	str	r2, [r7, #4]
 800572a:	461a      	mov	r2, r3
 800572c:	460b      	mov	r3, r1
 800572e:	72fb      	strb	r3, [r7, #11]
 8005730:	4613      	mov	r3, r2
 8005732:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	685c      	ldr	r4, [r3, #4]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6898      	ldr	r0, [r3, #8]
 800573c:	893b      	ldrh	r3, [r7, #8]
 800573e:	7af9      	ldrb	r1, [r7, #11]
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	47a0      	blx	r4
 8005744:	6178      	str	r0, [r7, #20]

  return ret;
 8005746:	697b      	ldr	r3, [r7, #20]
}
 8005748:	4618      	mov	r0, r3
 800574a:	371c      	adds	r7, #28
 800574c:	46bd      	mov	sp, r7
 800574e:	bd90      	pop	{r4, r7, pc}

08005750 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005750:	b590      	push	{r4, r7, lr}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	607a      	str	r2, [r7, #4]
 800575a:	461a      	mov	r2, r3
 800575c:	460b      	mov	r3, r1
 800575e:	72fb      	strb	r3, [r7, #11]
 8005760:	4613      	mov	r3, r2
 8005762:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681c      	ldr	r4, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6898      	ldr	r0, [r3, #8]
 800576c:	893b      	ldrh	r3, [r7, #8]
 800576e:	7af9      	ldrb	r1, [r7, #11]
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	47a0      	blx	r4
 8005774:	6178      	str	r0, [r7, #20]

  return ret;
 8005776:	697b      	ldr	r3, [r7, #20]
}
 8005778:	4618      	mov	r0, r3
 800577a:	371c      	adds	r7, #28
 800577c:	46bd      	mov	sp, r7
 800577e:	bd90      	pop	{r4, r7, pc}

08005780 <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	4603      	mov	r3, r0
 8005788:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 800578a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800578e:	ee07 3a90 	vmov	s15, r3
 8005792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005796:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80057ac <lsm6dsr_from_fs2g_to_mg+0x2c>
 800579a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800579e:	eeb0 0a67 	vmov.f32	s0, s15
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	3d79db23 	.word	0x3d79db23

080057b0 <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	4603      	mov	r3, r0
 80057b8:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 80057ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057be:	ee07 3a90 	vmov	s15, r3
 80057c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057c6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80057dc <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 80057ca:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80057ce:	eeb0 0a67 	vmov.f32	s0, s15
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	428c0000 	.word	0x428c0000

080057e0 <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	4603      	mov	r3, r0
 80057e8:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 80057ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057ee:	ee07 3a90 	vmov	s15, r3
 80057f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057f6:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005814 <lsm6dsr_from_lsb_to_celsius+0x34>
 80057fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80057fe:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005802:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8005806:	eeb0 0a67 	vmov.f32	s0, s15
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	43800000 	.word	0x43800000

08005818 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	460b      	mov	r3, r1
 8005822:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005824:	f107 0208 	add.w	r2, r7, #8
 8005828:	2301      	movs	r3, #1
 800582a:	2110      	movs	r1, #16
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f7ff ff77 	bl	8005720 <lsm6dsr_read_reg>
 8005832:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10f      	bne.n	800585a <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 800583a:	78fb      	ldrb	r3, [r7, #3]
 800583c:	f003 0303 	and.w	r3, r3, #3
 8005840:	b2da      	uxtb	r2, r3
 8005842:	7a3b      	ldrb	r3, [r7, #8]
 8005844:	f362 0383 	bfi	r3, r2, #2, #2
 8005848:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 800584a:	f107 0208 	add.w	r2, r7, #8
 800584e:	2301      	movs	r3, #1
 8005850:	2110      	movs	r1, #16
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7ff ff7c 	bl	8005750 <lsm6dsr_write_reg>
 8005858:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800585a:	68fb      	ldr	r3, [r7, #12]
}
 800585c:	4618      	mov	r0, r3
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	460b      	mov	r3, r1
 800586e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8005870:	78fb      	ldrb	r3, [r7, #3]
 8005872:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8005874:	f107 030c 	add.w	r3, r7, #12
 8005878:	4619      	mov	r1, r3
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fc54 	bl	8006128 <lsm6dsr_fsm_enable_get>
 8005880:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	2b00      	cmp	r3, #0
 8005886:	f040 80c4 	bne.w	8005a12 <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800588a:	7b3b      	ldrb	r3, [r7, #12]
 800588c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005890:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005892:	7b3b      	ldrb	r3, [r7, #12]
 8005894:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005898:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800589a:	4313      	orrs	r3, r2
 800589c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800589e:	7b3b      	ldrb	r3, [r7, #12]
 80058a0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80058a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80058a6:	4313      	orrs	r3, r2
 80058a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80058aa:	7b3b      	ldrb	r3, [r7, #12]
 80058ac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80058b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80058b2:	4313      	orrs	r3, r2
 80058b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80058b6:	7b3b      	ldrb	r3, [r7, #12]
 80058b8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80058bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80058be:	4313      	orrs	r3, r2
 80058c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80058c2:	7b3b      	ldrb	r3, [r7, #12]
 80058c4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80058c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80058ca:	4313      	orrs	r3, r2
 80058cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80058ce:	7b3b      	ldrb	r3, [r7, #12]
 80058d0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80058d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80058d6:	4313      	orrs	r3, r2
 80058d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80058da:	7b3b      	ldrb	r3, [r7, #12]
 80058dc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80058e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80058e2:	4313      	orrs	r3, r2
 80058e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80058e6:	7b7b      	ldrb	r3, [r7, #13]
 80058e8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80058ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80058ee:	4313      	orrs	r3, r2
 80058f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80058f2:	7b7b      	ldrb	r3, [r7, #13]
 80058f4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80058f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80058fa:	4313      	orrs	r3, r2
 80058fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80058fe:	7b7b      	ldrb	r3, [r7, #13]
 8005900:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005904:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005906:	4313      	orrs	r3, r2
 8005908:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800590a:	7b7b      	ldrb	r3, [r7, #13]
 800590c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005910:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005912:	4313      	orrs	r3, r2
 8005914:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005916:	7b7b      	ldrb	r3, [r7, #13]
 8005918:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800591c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800591e:	4313      	orrs	r3, r2
 8005920:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005922:	7b7b      	ldrb	r3, [r7, #13]
 8005924:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005928:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800592a:	4313      	orrs	r3, r2
 800592c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800592e:	7b7b      	ldrb	r3, [r7, #13]
 8005930:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005934:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005936:	4313      	orrs	r3, r2
 8005938:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800593a:	7b7b      	ldrb	r3, [r7, #13]
 800593c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005940:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005942:	4313      	orrs	r3, r2
 8005944:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005946:	2b01      	cmp	r3, #1
 8005948:	d163      	bne.n	8005a12 <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 800594a:	f107 030b 	add.w	r3, r7, #11
 800594e:	4619      	mov	r1, r3
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 fc15 	bl	8006180 <lsm6dsr_fsm_data_rate_get>
 8005956:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d159      	bne.n	8005a12 <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800595e:	7afb      	ldrb	r3, [r7, #11]
 8005960:	2b03      	cmp	r3, #3
 8005962:	d853      	bhi.n	8005a0c <lsm6dsr_xl_data_rate_set+0x1a8>
 8005964:	a201      	add	r2, pc, #4	; (adr r2, 800596c <lsm6dsr_xl_data_rate_set+0x108>)
 8005966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596a:	bf00      	nop
 800596c:	0800597d 	.word	0x0800597d
 8005970:	0800598f 	.word	0x0800598f
 8005974:	080059ad 	.word	0x080059ad
 8005978:	080059d7 	.word	0x080059d7
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 800597c:	78fb      	ldrb	r3, [r7, #3]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d102      	bne.n	8005988 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 8005982:	2301      	movs	r3, #1
 8005984:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005986:	e045      	b.n	8005a14 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005988:	78fb      	ldrb	r3, [r7, #3]
 800598a:	75fb      	strb	r3, [r7, #23]
            break;
 800598c:	e042      	b.n	8005a14 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 800598e:	78fb      	ldrb	r3, [r7, #3]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d102      	bne.n	800599a <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8005994:	2302      	movs	r3, #2
 8005996:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005998:	e03c      	b.n	8005a14 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 800599a:	78fb      	ldrb	r3, [r7, #3]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d102      	bne.n	80059a6 <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 80059a0:	2302      	movs	r3, #2
 80059a2:	75fb      	strb	r3, [r7, #23]
            break;
 80059a4:	e036      	b.n	8005a14 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80059a6:	78fb      	ldrb	r3, [r7, #3]
 80059a8:	75fb      	strb	r3, [r7, #23]
            break;
 80059aa:	e033      	b.n	8005a14 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80059ac:	78fb      	ldrb	r3, [r7, #3]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d102      	bne.n	80059b8 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80059b2:	2303      	movs	r3, #3
 80059b4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80059b6:	e02d      	b.n	8005a14 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80059b8:	78fb      	ldrb	r3, [r7, #3]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d102      	bne.n	80059c4 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80059be:	2303      	movs	r3, #3
 80059c0:	75fb      	strb	r3, [r7, #23]
            break;
 80059c2:	e027      	b.n	8005a14 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 80059c4:	78fb      	ldrb	r3, [r7, #3]
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d102      	bne.n	80059d0 <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80059ca:	2303      	movs	r3, #3
 80059cc:	75fb      	strb	r3, [r7, #23]
            break;
 80059ce:	e021      	b.n	8005a14 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80059d0:	78fb      	ldrb	r3, [r7, #3]
 80059d2:	75fb      	strb	r3, [r7, #23]
            break;
 80059d4:	e01e      	b.n	8005a14 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80059d6:	78fb      	ldrb	r3, [r7, #3]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d102      	bne.n	80059e2 <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80059dc:	2304      	movs	r3, #4
 80059de:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80059e0:	e018      	b.n	8005a14 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80059e2:	78fb      	ldrb	r3, [r7, #3]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d102      	bne.n	80059ee <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80059e8:	2304      	movs	r3, #4
 80059ea:	75fb      	strb	r3, [r7, #23]
            break;
 80059ec:	e012      	b.n	8005a14 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 80059ee:	78fb      	ldrb	r3, [r7, #3]
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d102      	bne.n	80059fa <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80059f4:	2304      	movs	r3, #4
 80059f6:	75fb      	strb	r3, [r7, #23]
            break;
 80059f8:	e00c      	b.n	8005a14 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 80059fa:	78fb      	ldrb	r3, [r7, #3]
 80059fc:	2b03      	cmp	r3, #3
 80059fe:	d102      	bne.n	8005a06 <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8005a00:	2304      	movs	r3, #4
 8005a02:	75fb      	strb	r3, [r7, #23]
            break;
 8005a04:	e006      	b.n	8005a14 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005a06:	78fb      	ldrb	r3, [r7, #3]
 8005a08:	75fb      	strb	r3, [r7, #23]
            break;
 8005a0a:	e003      	b.n	8005a14 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8005a0c:	78fb      	ldrb	r3, [r7, #3]
 8005a0e:	75fb      	strb	r3, [r7, #23]
            break;
 8005a10:	e000      	b.n	8005a14 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 8005a12:	bf00      	nop
    }
  }

  if (ret == 0)
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d107      	bne.n	8005a2a <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005a1a:	f107 0208 	add.w	r2, r7, #8
 8005a1e:	2301      	movs	r3, #1
 8005a20:	2110      	movs	r1, #16
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7ff fe7c 	bl	8005720 <lsm6dsr_read_reg>
 8005a28:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10f      	bne.n	8005a50 <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8005a30:	7dfb      	ldrb	r3, [r7, #23]
 8005a32:	f003 030f 	and.w	r3, r3, #15
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	7a3b      	ldrb	r3, [r7, #8]
 8005a3a:	f362 1307 	bfi	r3, r2, #4, #4
 8005a3e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8005a40:	f107 0208 	add.w	r2, r7, #8
 8005a44:	2301      	movs	r3, #1
 8005a46:	2110      	movs	r1, #16
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f7ff fe81 	bl	8005750 <lsm6dsr_write_reg>
 8005a4e:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8005a50:	693b      	ldr	r3, [r7, #16]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3718      	adds	r7, #24
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop

08005a5c <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	460b      	mov	r3, r1
 8005a66:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005a68:	f107 0208 	add.w	r2, r7, #8
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	2111      	movs	r1, #17
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f7ff fe55 	bl	8005720 <lsm6dsr_read_reg>
 8005a76:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10f      	bne.n	8005a9e <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8005a7e:	78fb      	ldrb	r3, [r7, #3]
 8005a80:	f003 030f 	and.w	r3, r3, #15
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	7a3b      	ldrb	r3, [r7, #8]
 8005a88:	f362 0303 	bfi	r3, r2, #0, #4
 8005a8c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005a8e:	f107 0208 	add.w	r2, r7, #8
 8005a92:	2301      	movs	r3, #1
 8005a94:	2111      	movs	r1, #17
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7ff fe5a 	bl	8005750 <lsm6dsr_write_reg>
 8005a9c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3710      	adds	r7, #16
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 8005ab4:	78fb      	ldrb	r3, [r7, #3]
 8005ab6:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8005ab8:	f107 030c 	add.w	r3, r7, #12
 8005abc:	4619      	mov	r1, r3
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fb32 	bl	8006128 <lsm6dsr_fsm_enable_get>
 8005ac4:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f040 80c4 	bne.w	8005c56 <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005ace:	7b3b      	ldrb	r3, [r7, #12]
 8005ad0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005ad4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005ad6:	7b3b      	ldrb	r3, [r7, #12]
 8005ad8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005adc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005ae2:	7b3b      	ldrb	r3, [r7, #12]
 8005ae4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005ae8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005aea:	4313      	orrs	r3, r2
 8005aec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005aee:	7b3b      	ldrb	r3, [r7, #12]
 8005af0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005af4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005af6:	4313      	orrs	r3, r2
 8005af8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005afa:	7b3b      	ldrb	r3, [r7, #12]
 8005afc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005b00:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005b02:	4313      	orrs	r3, r2
 8005b04:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005b06:	7b3b      	ldrb	r3, [r7, #12]
 8005b08:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005b0c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005b12:	7b3b      	ldrb	r3, [r7, #12]
 8005b14:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005b18:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005b1e:	7b3b      	ldrb	r3, [r7, #12]
 8005b20:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005b24:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005b26:	4313      	orrs	r3, r2
 8005b28:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005b2a:	7b7b      	ldrb	r3, [r7, #13]
 8005b2c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005b30:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005b32:	4313      	orrs	r3, r2
 8005b34:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005b36:	7b7b      	ldrb	r3, [r7, #13]
 8005b38:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005b3c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005b42:	7b7b      	ldrb	r3, [r7, #13]
 8005b44:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005b48:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005b4e:	7b7b      	ldrb	r3, [r7, #13]
 8005b50:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005b54:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005b56:	4313      	orrs	r3, r2
 8005b58:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005b5a:	7b7b      	ldrb	r3, [r7, #13]
 8005b5c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005b60:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005b62:	4313      	orrs	r3, r2
 8005b64:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005b66:	7b7b      	ldrb	r3, [r7, #13]
 8005b68:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005b6c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005b72:	7b7b      	ldrb	r3, [r7, #13]
 8005b74:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005b78:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005b7e:	7b7b      	ldrb	r3, [r7, #13]
 8005b80:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005b84:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005b86:	4313      	orrs	r3, r2
 8005b88:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d163      	bne.n	8005c56 <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8005b8e:	f107 030b 	add.w	r3, r7, #11
 8005b92:	4619      	mov	r1, r3
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 faf3 	bl	8006180 <lsm6dsr_fsm_data_rate_get>
 8005b9a:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d159      	bne.n	8005c56 <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8005ba2:	7afb      	ldrb	r3, [r7, #11]
 8005ba4:	2b03      	cmp	r3, #3
 8005ba6:	d853      	bhi.n	8005c50 <lsm6dsr_gy_data_rate_set+0x1a8>
 8005ba8:	a201      	add	r2, pc, #4	; (adr r2, 8005bb0 <lsm6dsr_gy_data_rate_set+0x108>)
 8005baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bae:	bf00      	nop
 8005bb0:	08005bc1 	.word	0x08005bc1
 8005bb4:	08005bd3 	.word	0x08005bd3
 8005bb8:	08005bf1 	.word	0x08005bf1
 8005bbc:	08005c1b 	.word	0x08005c1b
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 8005bc0:	78fb      	ldrb	r3, [r7, #3]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d102      	bne.n	8005bcc <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005bca:	e045      	b.n	8005c58 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005bcc:	78fb      	ldrb	r3, [r7, #3]
 8005bce:	75fb      	strb	r3, [r7, #23]
            break;
 8005bd0:	e042      	b.n	8005c58 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8005bd2:	78fb      	ldrb	r3, [r7, #3]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d102      	bne.n	8005bde <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8005bd8:	2302      	movs	r3, #2
 8005bda:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005bdc:	e03c      	b.n	8005c58 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8005bde:	78fb      	ldrb	r3, [r7, #3]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d102      	bne.n	8005bea <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8005be4:	2302      	movs	r3, #2
 8005be6:	75fb      	strb	r3, [r7, #23]
            break;
 8005be8:	e036      	b.n	8005c58 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005bea:	78fb      	ldrb	r3, [r7, #3]
 8005bec:	75fb      	strb	r3, [r7, #23]
            break;
 8005bee:	e033      	b.n	8005c58 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8005bf0:	78fb      	ldrb	r3, [r7, #3]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d102      	bne.n	8005bfc <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005bfa:	e02d      	b.n	8005c58 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8005bfc:	78fb      	ldrb	r3, [r7, #3]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d102      	bne.n	8005c08 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8005c02:	2303      	movs	r3, #3
 8005c04:	75fb      	strb	r3, [r7, #23]
            break;
 8005c06:	e027      	b.n	8005c58 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8005c08:	78fb      	ldrb	r3, [r7, #3]
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d102      	bne.n	8005c14 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	75fb      	strb	r3, [r7, #23]
            break;
 8005c12:	e021      	b.n	8005c58 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005c14:	78fb      	ldrb	r3, [r7, #3]
 8005c16:	75fb      	strb	r3, [r7, #23]
            break;
 8005c18:	e01e      	b.n	8005c58 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8005c1a:	78fb      	ldrb	r3, [r7, #3]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d102      	bne.n	8005c26 <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8005c20:	2304      	movs	r3, #4
 8005c22:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005c24:	e018      	b.n	8005c58 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8005c26:	78fb      	ldrb	r3, [r7, #3]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d102      	bne.n	8005c32 <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8005c2c:	2304      	movs	r3, #4
 8005c2e:	75fb      	strb	r3, [r7, #23]
            break;
 8005c30:	e012      	b.n	8005c58 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8005c32:	78fb      	ldrb	r3, [r7, #3]
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d102      	bne.n	8005c3e <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8005c38:	2304      	movs	r3, #4
 8005c3a:	75fb      	strb	r3, [r7, #23]
            break;
 8005c3c:	e00c      	b.n	8005c58 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 8005c3e:	78fb      	ldrb	r3, [r7, #3]
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d102      	bne.n	8005c4a <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8005c44:	2304      	movs	r3, #4
 8005c46:	75fb      	strb	r3, [r7, #23]
            break;
 8005c48:	e006      	b.n	8005c58 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005c4a:	78fb      	ldrb	r3, [r7, #3]
 8005c4c:	75fb      	strb	r3, [r7, #23]
            break;
 8005c4e:	e003      	b.n	8005c58 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8005c50:	78fb      	ldrb	r3, [r7, #3]
 8005c52:	75fb      	strb	r3, [r7, #23]
            break;
 8005c54:	e000      	b.n	8005c58 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 8005c56:	bf00      	nop
    }
  }

  if (ret == 0)
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d107      	bne.n	8005c6e <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005c5e:	f107 0208 	add.w	r2, r7, #8
 8005c62:	2301      	movs	r3, #1
 8005c64:	2111      	movs	r1, #17
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7ff fd5a 	bl	8005720 <lsm6dsr_read_reg>
 8005c6c:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10f      	bne.n	8005c94 <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8005c74:	7dfb      	ldrb	r3, [r7, #23]
 8005c76:	f003 030f 	and.w	r3, r3, #15
 8005c7a:	b2da      	uxtb	r2, r3
 8005c7c:	7a3b      	ldrb	r3, [r7, #8]
 8005c7e:	f362 1307 	bfi	r3, r2, #4, #4
 8005c82:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005c84:	f107 0208 	add.w	r2, r7, #8
 8005c88:	2301      	movs	r3, #1
 8005c8a:	2111      	movs	r1, #17
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7ff fd5f 	bl	8005750 <lsm6dsr_write_reg>
 8005c92:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8005c94:	693b      	ldr	r3, [r7, #16]
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3718      	adds	r7, #24
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop

08005ca0 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	460b      	mov	r3, r1
 8005caa:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005cac:	f107 0208 	add.w	r2, r7, #8
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	2112      	movs	r1, #18
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7ff fd33 	bl	8005720 <lsm6dsr_read_reg>
 8005cba:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10f      	bne.n	8005ce2 <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 8005cc2:	78fb      	ldrb	r3, [r7, #3]
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	7a3b      	ldrb	r3, [r7, #8]
 8005ccc:	f362 1386 	bfi	r3, r2, #6, #1
 8005cd0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005cd2:	f107 0208 	add.w	r2, r7, #8
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	2112      	movs	r1, #18
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7ff fd38 	bl	8005750 <lsm6dsr_write_reg>
 8005ce0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8005cf6:	f107 0208 	add.w	r2, r7, #8
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	211e      	movs	r1, #30
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7ff fd0e 	bl	8005720 <lsm6dsr_read_reg>
 8005d04:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 8005d06:	7a3b      	ldrb	r3, [r7, #8]
 8005d08:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	461a      	mov	r2, r3
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	701a      	strb	r2, [r3, #0]

  return ret;
 8005d14:	68fb      	ldr	r3, [r7, #12]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b084      	sub	sp, #16
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
 8005d26:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8005d28:	f107 0208 	add.w	r2, r7, #8
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	211e      	movs	r1, #30
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f7ff fcf5 	bl	8005720 <lsm6dsr_read_reg>
 8005d36:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8005d38:	7a3b      	ldrb	r3, [r7, #8]
 8005d3a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	461a      	mov	r2, r3
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	701a      	strb	r2, [r3, #0]

  return ret;
 8005d46:	68fb      	ldr	r3, [r7, #12]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8005d5a:	f107 0208 	add.w	r2, r7, #8
 8005d5e:	2301      	movs	r3, #1
 8005d60:	211e      	movs	r1, #30
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7ff fcdc 	bl	8005720 <lsm6dsr_read_reg>
 8005d68:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 8005d6a:	7a3b      	ldrb	r3, [r7, #8]
 8005d6c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	461a      	mov	r2, r3
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	701a      	strb	r2, [r3, #0]

  return ret;
 8005d78:	68fb      	ldr	r3, [r7, #12]
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b084      	sub	sp, #16
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 8005d8c:	f107 0208 	add.w	r2, r7, #8
 8005d90:	2302      	movs	r3, #2
 8005d92:	2120      	movs	r1, #32
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f7ff fcc3 	bl	8005720 <lsm6dsr_read_reg>
 8005d9a:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 8005d9c:	7a7b      	ldrb	r3, [r7, #9]
 8005d9e:	b21a      	sxth	r2, r3
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	021b      	lsls	r3, r3, #8
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	7a3b      	ldrb	r3, [r7, #8]
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	4413      	add	r3, r2
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	b21a      	sxth	r2, r3
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	801a      	strh	r2, [r3, #0]

  return ret;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 8005dd2:	f107 020c 	add.w	r2, r7, #12
 8005dd6:	2306      	movs	r3, #6
 8005dd8:	2122      	movs	r1, #34	; 0x22
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7ff fca0 	bl	8005720 <lsm6dsr_read_reg>
 8005de0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005de2:	7b7b      	ldrb	r3, [r7, #13]
 8005de4:	b21a      	sxth	r2, r3
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	021b      	lsls	r3, r3, #8
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	7b3b      	ldrb	r3, [r7, #12]
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	4413      	add	r3, r2
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	b21a      	sxth	r2, r3
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005e04:	7bfa      	ldrb	r2, [r7, #15]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	3302      	adds	r3, #2
 8005e0a:	b212      	sxth	r2, r2
 8005e0c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	3302      	adds	r3, #2
 8005e12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	021b      	lsls	r3, r3, #8
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	7bbb      	ldrb	r3, [r7, #14]
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	4413      	add	r3, r2
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	3302      	adds	r3, #2
 8005e28:	b212      	sxth	r2, r2
 8005e2a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005e2c:	7c7a      	ldrb	r2, [r7, #17]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	3304      	adds	r3, #4
 8005e32:	b212      	sxth	r2, r2
 8005e34:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	3304      	adds	r3, #4
 8005e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	021b      	lsls	r3, r3, #8
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	7c3b      	ldrb	r3, [r7, #16]
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	4413      	add	r3, r2
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	3304      	adds	r3, #4
 8005e50:	b212      	sxth	r2, r2
 8005e52:	801a      	strh	r2, [r3, #0]

  return ret;
 8005e54:	697b      	ldr	r3, [r7, #20]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3718      	adds	r7, #24
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b086      	sub	sp, #24
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 8005e68:	f107 020c 	add.w	r2, r7, #12
 8005e6c:	2306      	movs	r3, #6
 8005e6e:	2128      	movs	r1, #40	; 0x28
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7ff fc55 	bl	8005720 <lsm6dsr_read_reg>
 8005e76:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005e78:	7b7b      	ldrb	r3, [r7, #13]
 8005e7a:	b21a      	sxth	r2, r3
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	021b      	lsls	r3, r3, #8
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	7b3b      	ldrb	r3, [r7, #12]
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	4413      	add	r3, r2
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	b21a      	sxth	r2, r3
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005e9a:	7bfa      	ldrb	r2, [r7, #15]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	3302      	adds	r3, #2
 8005ea0:	b212      	sxth	r2, r2
 8005ea2:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	3302      	adds	r3, #2
 8005ea8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	021b      	lsls	r3, r3, #8
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	7bbb      	ldrb	r3, [r7, #14]
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	4413      	add	r3, r2
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	3302      	adds	r3, #2
 8005ebe:	b212      	sxth	r2, r2
 8005ec0:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005ec2:	7c7a      	ldrb	r2, [r7, #17]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	3304      	adds	r3, #4
 8005ec8:	b212      	sxth	r2, r2
 8005eca:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	3304      	adds	r3, #4
 8005ed0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	021b      	lsls	r3, r3, #8
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	7c3b      	ldrb	r3, [r7, #16]
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	4413      	add	r3, r2
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	3304      	adds	r3, #4
 8005ee6:	b212      	sxth	r2, r2
 8005ee8:	801a      	strh	r2, [r3, #0]

  return ret;
 8005eea:	697b      	ldr	r3, [r7, #20]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3718      	adds	r7, #24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	460b      	mov	r3, r1
 8005efe:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8005f00:	f107 0208 	add.w	r2, r7, #8
 8005f04:	2301      	movs	r3, #1
 8005f06:	2101      	movs	r1, #1
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f7ff fc09 	bl	8005720 <lsm6dsr_read_reg>
 8005f0e:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10f      	bne.n	8005f36 <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 8005f16:	78fb      	ldrb	r3, [r7, #3]
 8005f18:	f003 0303 	and.w	r3, r3, #3
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	7a3b      	ldrb	r3, [r7, #8]
 8005f20:	f362 1387 	bfi	r3, r2, #6, #2
 8005f24:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8005f26:	f107 0208 	add.w	r2, r7, #8
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7ff fc0e 	bl	8005750 <lsm6dsr_write_reg>
 8005f34:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8005f36:	68fb      	ldr	r3, [r7, #12]
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	210f      	movs	r1, #15
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7ff fbe5 	bl	8005720 <lsm6dsr_read_reg>
 8005f56:	60f8      	str	r0, [r7, #12]

  return ret;
 8005f58:	68fb      	ldr	r3, [r7, #12]
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b084      	sub	sp, #16
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005f6e:	f107 0208 	add.w	r2, r7, #8
 8005f72:	2301      	movs	r3, #1
 8005f74:	2112      	movs	r1, #18
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7ff fbd2 	bl	8005720 <lsm6dsr_read_reg>
 8005f7c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10f      	bne.n	8005fa4 <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8005f84:	78fb      	ldrb	r3, [r7, #3]
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	b2da      	uxtb	r2, r3
 8005f8c:	7a3b      	ldrb	r3, [r7, #8]
 8005f8e:	f362 0300 	bfi	r3, r2, #0, #1
 8005f92:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005f94:	f107 0208 	add.w	r2, r7, #8
 8005f98:	2301      	movs	r3, #1
 8005f9a:	2112      	movs	r1, #18
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7ff fbd7 	bl	8005750 <lsm6dsr_write_reg>
 8005fa2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b084      	sub	sp, #16
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
 8005fb6:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005fb8:	f107 0208 	add.w	r2, r7, #8
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	2112      	movs	r1, #18
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7ff fbad 	bl	8005720 <lsm6dsr_read_reg>
 8005fc6:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8005fc8:	7a3b      	ldrb	r3, [r7, #8]
 8005fca:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	701a      	strb	r2, [r3, #0]

  return ret;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <lsm6dsr_xl_filter_lp2_set>:
  * @param  val    Change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	460b      	mov	r3, r1
 8005fea:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005fec:	f107 0208 	add.w	r2, r7, #8
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	2110      	movs	r1, #16
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f7ff fb93 	bl	8005720 <lsm6dsr_read_reg>
 8005ffa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10f      	bne.n	8006022 <lsm6dsr_xl_filter_lp2_set+0x42>
  {
    ctrl1_xl.lpf2_xl_en = (uint8_t)val;
 8006002:	78fb      	ldrb	r3, [r7, #3]
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	b2da      	uxtb	r2, r3
 800600a:	7a3b      	ldrb	r3, [r7, #8]
 800600c:	f362 0341 	bfi	r3, r2, #1, #1
 8006010:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8006012:	f107 0208 	add.w	r2, r7, #8
 8006016:	2301      	movs	r3, #1
 8006018:	2110      	movs	r1, #16
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7ff fb98 	bl	8005750 <lsm6dsr_write_reg>
 8006020:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8006022:	68fb      	ldr	r3, [r7, #12]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <lsm6dsr_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dsr_hp_slope_xl_en_t val)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	460b      	mov	r3, r1
 8006036:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8006038:	f107 0208 	add.w	r2, r7, #8
 800603c:	2301      	movs	r3, #1
 800603e:	2117      	movs	r1, #23
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7ff fb6d 	bl	8005720 <lsm6dsr_read_reg>
 8006046:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d121      	bne.n	8006092 <lsm6dsr_xl_hp_path_on_out_set+0x66>
  {
    ctrl8_xl.hp_slope_xl_en = (((uint8_t)val & 0x10U) >> 4);
 800604e:	78fb      	ldrb	r3, [r7, #3]
 8006050:	091b      	lsrs	r3, r3, #4
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	b2da      	uxtb	r2, r3
 8006058:	7a3b      	ldrb	r3, [r7, #8]
 800605a:	f362 0382 	bfi	r3, r2, #2, #1
 800605e:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_ref_mode_xl = (((uint8_t)val & 0x20U) >> 5);
 8006060:	78fb      	ldrb	r3, [r7, #3]
 8006062:	095b      	lsrs	r3, r3, #5
 8006064:	f003 0301 	and.w	r3, r3, #1
 8006068:	b2da      	uxtb	r2, r3
 800606a:	7a3b      	ldrb	r3, [r7, #8]
 800606c:	f362 1304 	bfi	r3, r2, #4, #1
 8006070:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 8006072:	78fb      	ldrb	r3, [r7, #3]
 8006074:	f003 0307 	and.w	r3, r3, #7
 8006078:	b2da      	uxtb	r2, r3
 800607a:	7a3b      	ldrb	r3, [r7, #8]
 800607c:	f362 1347 	bfi	r3, r2, #5, #3
 8006080:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL8_XL,
 8006082:	f107 0208 	add.w	r2, r7, #8
 8006086:	2301      	movs	r3, #1
 8006088:	2117      	movs	r1, #23
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7ff fb60 	bl	8005750 <lsm6dsr_write_reg>
 8006090:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 8006092:	68fb      	ldr	r3, [r7, #12]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <lsm6dsr_i3c_disable_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dsr_i3c_disable_t val)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b086      	sub	sp, #24
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	460b      	mov	r3, r1
 80060a6:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl9_xl_t ctrl9_xl;
  lsm6dsr_i3c_bus_avb_t i3c_bus_avb;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80060a8:	f107 0210 	add.w	r2, r7, #16
 80060ac:	2301      	movs	r3, #1
 80060ae:	2118      	movs	r1, #24
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f7ff fb35 	bl	8005720 <lsm6dsr_read_reg>
 80060b6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d111      	bne.n	80060e2 <lsm6dsr_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 80060be:	78fb      	ldrb	r3, [r7, #3]
 80060c0:	09db      	lsrs	r3, r3, #7
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	b2da      	uxtb	r2, r3
 80060ca:	7c3b      	ldrb	r3, [r7, #16]
 80060cc:	f362 0341 	bfi	r3, r2, #1, #1
 80060d0:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL9_XL,
 80060d2:	f107 0210 	add.w	r2, r7, #16
 80060d6:	2301      	movs	r3, #1
 80060d8:	2118      	movs	r1, #24
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f7ff fb38 	bl	8005750 <lsm6dsr_write_reg>
 80060e0:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0)
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d107      	bne.n	80060f8 <lsm6dsr_i3c_disable_set+0x5c>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 80060e8:	f107 020c 	add.w	r2, r7, #12
 80060ec:	2301      	movs	r3, #1
 80060ee:	2162      	movs	r1, #98	; 0x62
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f7ff fb15 	bl	8005720 <lsm6dsr_read_reg>
 80060f6:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10f      	bne.n	800611e <lsm6dsr_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 80060fe:	78fb      	ldrb	r3, [r7, #3]
 8006100:	f003 0303 	and.w	r3, r3, #3
 8006104:	b2da      	uxtb	r2, r3
 8006106:	7b3b      	ldrb	r3, [r7, #12]
 8006108:	f362 03c4 	bfi	r3, r2, #3, #2
 800610c:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 800610e:	f107 020c 	add.w	r2, r7, #12
 8006112:	2301      	movs	r3, #1
 8006114:	2162      	movs	r1, #98	; 0x62
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7ff fb1a 	bl	8005750 <lsm6dsr_write_reg>
 800611c:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 800611e:	697b      	ldr	r3, [r7, #20]
}
 8006120:	4618      	mov	r0, r3
 8006122:	3718      	adds	r7, #24
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8006132:	2102      	movs	r1, #2
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f7ff fedd 	bl	8005ef4 <lsm6dsr_mem_bank_set>
 800613a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d106      	bne.n	8006150 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 8006142:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 8006144:	2301      	movs	r3, #1
 8006146:	2146      	movs	r1, #70	; 0x46
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f7ff fae9 	bl	8005720 <lsm6dsr_read_reg>
 800614e:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d107      	bne.n	8006166 <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 800615a:	2301      	movs	r3, #1
 800615c:	2147      	movs	r1, #71	; 0x47
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7ff fade 	bl	8005720 <lsm6dsr_read_reg>
 8006164:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d104      	bne.n	8006176 <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 800616c:	2100      	movs	r1, #0
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7ff fec0 	bl	8005ef4 <lsm6dsr_mem_bank_set>
 8006174:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006176:	68fb      	ldr	r3, [r7, #12]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800618a:	2102      	movs	r1, #2
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f7ff feb1 	bl	8005ef4 <lsm6dsr_mem_bank_set>
 8006192:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d107      	bne.n	80061aa <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 800619a:	f107 0208 	add.w	r2, r7, #8
 800619e:	2301      	movs	r3, #1
 80061a0:	215f      	movs	r1, #95	; 0x5f
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7ff fabc 	bl	8005720 <lsm6dsr_read_reg>
 80061a8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d104      	bne.n	80061ba <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 80061b0:	2100      	movs	r1, #0
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7ff fe9e 	bl	8005ef4 <lsm6dsr_mem_bank_set>
 80061b8:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 80061ba:	7a3b      	ldrb	r3, [r7, #8]
 80061bc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b03      	cmp	r3, #3
 80061c4:	d81a      	bhi.n	80061fc <lsm6dsr_fsm_data_rate_get+0x7c>
 80061c6:	a201      	add	r2, pc, #4	; (adr r2, 80061cc <lsm6dsr_fsm_data_rate_get+0x4c>)
 80061c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061cc:	080061dd 	.word	0x080061dd
 80061d0:	080061e5 	.word	0x080061e5
 80061d4:	080061ed 	.word	0x080061ed
 80061d8:	080061f5 	.word	0x080061f5
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	2200      	movs	r2, #0
 80061e0:	701a      	strb	r2, [r3, #0]
      break;
 80061e2:	e00f      	b.n	8006204 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	2201      	movs	r2, #1
 80061e8:	701a      	strb	r2, [r3, #0]
      break;
 80061ea:	e00b      	b.n	8006204 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	2202      	movs	r2, #2
 80061f0:	701a      	strb	r2, [r3, #0]
      break;
 80061f2:	e007      	b.n	8006204 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	2203      	movs	r2, #3
 80061f8:	701a      	strb	r2, [r3, #0]
      break;
 80061fa:	e003      	b.n	8006204 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	2200      	movs	r2, #0
 8006200:	701a      	strb	r2, [r3, #0]
      break;
 8006202:	bf00      	nop
  }

  return ret;
 8006204:	68fb      	ldr	r3, [r7, #12]
}
 8006206:	4618      	mov	r0, r3
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop

08006210 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	683a      	ldr	r2, [r7, #0]
 8006222:	b2d2      	uxtb	r2, r2
 8006224:	4611      	mov	r1, r2
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	4798      	blx	r3
 800622a:	4603      	mov	r3, r0
 800622c:	4618      	mov	r0, r3
 800622e:	3708      	adds	r7, #8
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <_Z12ISBDCallbackv>:

bool ISBDCallback() __attribute__((weak));
void ISBDConsoleCallback(IridiumSBD *device, char c) __attribute__((weak));
void ISBDDiagsCallback(IridiumSBD *device, char c) __attribute__((weak));

bool ISBDCallback() { return true; }
 8006234:	b480      	push	{r7}
 8006236:	af00      	add	r7, sp, #0
 8006238:	2301      	movs	r3, #1
 800623a:	4618      	mov	r0, r3
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <_Z19ISBDConsoleCallbackP10IridiumSBDc>:
void ISBDConsoleCallback(IridiumSBD *device, char c) { }
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	460b      	mov	r3, r1
 800624e:	70fb      	strb	r3, [r7, #3]
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <_Z17ISBDDiagsCallbackP10IridiumSBDc>:
void ISBDDiagsCallback(IridiumSBD *device, char c) { }
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	460b      	mov	r3, r1
 8006266:	70fb      	strb	r3, [r7, #3]
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <_ZN10IridiumSBD5beginEv>:



// Power on the RockBLOCK or return from sleep
int IridiumSBD::begin()
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <_ZN10IridiumSBD5beginEv+0x16>
      return ISBD_REENTRANT;
 8006286:	2309      	movs	r3, #9
 8006288:	e01a      	b.n	80062c0 <_ZN10IridiumSBD5beginEv+0x4c>

   this->reentrant = true;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalBegin();
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 faf6 	bl	8006884 <_ZN10IridiumSBD13internalBeginEv>
 8006298:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

   // Absent a successful startup, keep the device turned off
   if (ret != ISBD_SUCCESS)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00a      	beq.n	80062be <_ZN10IridiumSBD5beginEv+0x4a>
   {
      if (this->useSerial)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	7c5b      	ldrb	r3, [r3, #17]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d002      	beq.n	80062b6 <_ZN10IridiumSBD5beginEv+0x42>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f001 fc2b 	bl	8007b0c <_ZN10IridiumSBD13endSerialPortEv>
      power(false);
 80062b6:	2100      	movs	r1, #0
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f001 fb79 	bl	80079b0 <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 80062be:	68fb      	ldr	r3, [r7, #12]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <_ZN10IridiumSBD11sendSBDTextEPKc>:
   return ret;
}

// Transmit a text message
int IridiumSBD::sendSBDText(const char *message)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af02      	add	r7, sp, #8
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
   if (this->reentrant)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d001      	beq.n	80062e0 <_ZN10IridiumSBD11sendSBDTextEPKc+0x18>
      return ISBD_REENTRANT;
 80062dc:	2309      	movs	r3, #9
 80062de:	e013      	b.n	8006308 <_ZN10IridiumSBD11sendSBDTextEPKc+0x40>

   this->reentrant = true;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalSendReceiveSBD(message, NULL, 0, NULL, NULL);
 80062e8:	2300      	movs	r3, #0
 80062ea:	9301      	str	r3, [sp, #4]
 80062ec:	2300      	movs	r3, #0
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	2300      	movs	r3, #0
 80062f2:	2200      	movs	r2, #0
 80062f4:	6839      	ldr	r1, [r7, #0]
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fc4c 	bl	8006b94 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj>
 80062fc:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 8006306:	68fb      	ldr	r3, [r7, #12]
}
 8006308:	4618      	mov	r0, r3
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <_ZN10IridiumSBD16getSignalQualityERi>:
   return ret;
}

// High-level wrapper for AT+CSQ
int IridiumSBD::getSignalQuality(int &quality)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
   if (this->reentrant)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8006320:	2b00      	cmp	r3, #0
 8006322:	d001      	beq.n	8006328 <_ZN10IridiumSBD16getSignalQualityERi+0x18>
      return ISBD_REENTRANT;
 8006324:	2309      	movs	r3, #9
 8006326:	e00d      	b.n	8006344 <_ZN10IridiumSBD16getSignalQualityERi+0x34>

   this->reentrant = true;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalGetSignalQuality(quality);
 8006330:	6839      	ldr	r1, [r7, #0]
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 feea 	bl	800710c <_ZN10IridiumSBD24internalGetSignalQualityERi>
 8006338:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 8006342:	68fb      	ldr	r3, [r7, #12]
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <_ZN10IridiumSBD15adjustATTimeoutEi>:
   }
}

// Tweak AT timeout
void IridiumSBD::adjustATTimeout(int seconds)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
   this->atTimeout = seconds;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <_ZN10IridiumSBD16enableRingAlertsEb>:
{
   this->msstmWorkaroundRequested = useWorkAround;
}

void IridiumSBD::enableRingAlerts(bool enable) // true to enable SBDRING alerts and RING signal pin
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	460b      	mov	r3, r1
 8006372:	70fb      	strb	r3, [r7, #3]
   this->ringAlertsEnabled = enable;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	78fa      	ldrb	r2, [r7, #3]
 8006378:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
   if (enable)
 800637c:	78fb      	ldrb	r3, [r7, #3]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00d      	beq.n	800639e <_ZN10IridiumSBD16enableRingAlertsEb+0x36>
   {
      this->ringAsserted = false;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
      if (!this->useSerial) // If we are using I2C, clear the ring indicator flag
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	7c5b      	ldrb	r3, [r3, #17]
 800638e:	f083 0301 	eor.w	r3, r3, #1
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <_ZN10IridiumSBD16enableRingAlertsEb+0x36>
      {
        clearRingIndicator();
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 f9b3 	bl	8006704 <_ZN10IridiumSBD18clearRingIndicatorEv>
      }
   }
}
 800639e:	bf00      	nop
 80063a0:	3708      	adds	r7, #8
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
	...

080063a8 <_ZN10IridiumSBD13getSystemTimeER2tm>:

   return ret;
}

int IridiumSBD::getSystemTime(struct tm &tm)
{
 80063a8:	b5b0      	push	{r4, r5, r7, lr}
 80063aa:	b09c      	sub	sp, #112	; 0x70
 80063ac:	af02      	add	r7, sp, #8
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
   char msstmResponseBuf[24];

   send(F("AT-MSSTM\r"));
 80063b2:	2301      	movs	r3, #1
 80063b4:	2201      	movs	r2, #1
 80063b6:	493f      	ldr	r1, [pc, #252]	; (80064b4 <_ZN10IridiumSBD13getSystemTimeER2tm+0x10c>)
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f001 fbb5 	bl	8007b28 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(msstmResponseBuf, sizeof(msstmResponseBuf), "-MSSTM: "))
 80063be:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80063c2:	4b3d      	ldr	r3, [pc, #244]	; (80064b8 <_ZN10IridiumSBD13getSystemTimeER2tm+0x110>)
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	4b3d      	ldr	r3, [pc, #244]	; (80064bc <_ZN10IridiumSBD13getSystemTimeER2tm+0x114>)
 80063c8:	2218      	movs	r2, #24
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 ff4a 	bl	8007264 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80063d0:	4603      	mov	r3, r0
 80063d2:	f083 0301 	eor.w	r3, r3, #1
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d009      	beq.n	80063f0 <_ZN10IridiumSBD13getSystemTimeER2tm+0x48>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 ffff 	bl	80073e0 <_ZN10IridiumSBD9cancelledEv>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d001      	beq.n	80063ec <_ZN10IridiumSBD13getSystemTimeER2tm+0x44>
 80063e8:	2304      	movs	r3, #4
 80063ea:	e05e      	b.n	80064aa <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>
 80063ec:	2303      	movs	r3, #3
 80063ee:	e05c      	b.n	80064aa <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>

   if (!isxdigit(msstmResponseBuf[0]))
 80063f0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80063f4:	4618      	mov	r0, r3
 80063f6:	f00c fb3b 	bl	8012a70 <isxdigit>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <_ZN10IridiumSBD13getSystemTimeER2tm+0x5c>
      return ISBD_NO_NETWORK;
 8006400:	230c      	movs	r3, #12
 8006402:	e052      	b.n	80064aa <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>

   // Latest epoch began at May 11, 2014, at 14:23:55 UTC.
   struct tm epoch_start;
   epoch_start.tm_year = 2014 - 1900;
 8006404:	2372      	movs	r3, #114	; 0x72
 8006406:	62bb      	str	r3, [r7, #40]	; 0x28
   epoch_start.tm_mon = 5 - 1;
 8006408:	2304      	movs	r3, #4
 800640a:	627b      	str	r3, [r7, #36]	; 0x24
   epoch_start.tm_mday = 11;
 800640c:	230b      	movs	r3, #11
 800640e:	623b      	str	r3, [r7, #32]
   epoch_start.tm_hour = 14;
 8006410:	230e      	movs	r3, #14
 8006412:	61fb      	str	r3, [r7, #28]
   epoch_start.tm_min = 23;
 8006414:	2317      	movs	r3, #23
 8006416:	61bb      	str	r3, [r7, #24]
   epoch_start.tm_sec = 55;
 8006418:	2337      	movs	r3, #55	; 0x37
 800641a:	617b      	str	r3, [r7, #20]

   unsigned long ticks_since_epoch = strtoul(msstmResponseBuf, NULL, 16);
 800641c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006420:	2210      	movs	r2, #16
 8006422:	2100      	movs	r1, #0
 8006424:	4618      	mov	r0, r3
 8006426:	f00e ffc9 	bl	80153bc <strtoul>
 800642a:	6678      	str	r0, [r7, #100]	; 0x64
      seconds less than the equivalent ticks_since_epoch. Subtract that away and
      we'll be left with a small number that won't overflow when we scale by 90/1000.

      Many thanks to Scott Weldon for this suggestion.
   */
   unsigned long secs_since_epoch = (ticks_since_epoch / 1000) * 90;
 800642c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800642e:	4a24      	ldr	r2, [pc, #144]	; (80064c0 <_ZN10IridiumSBD13getSystemTimeER2tm+0x118>)
 8006430:	fba2 2303 	umull	r2, r3, r2, r3
 8006434:	099b      	lsrs	r3, r3, #6
 8006436:	225a      	movs	r2, #90	; 0x5a
 8006438:	fb02 f303 	mul.w	r3, r2, r3
 800643c:	663b      	str	r3, [r7, #96]	; 0x60
   unsigned long small_ticks = ticks_since_epoch - (secs_since_epoch / 90) * 1000;
 800643e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006440:	085b      	lsrs	r3, r3, #1
 8006442:	4a20      	ldr	r2, [pc, #128]	; (80064c4 <_ZN10IridiumSBD13getSystemTimeER2tm+0x11c>)
 8006444:	fba2 2303 	umull	r2, r3, r2, r3
 8006448:	095b      	lsrs	r3, r3, #5
 800644a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800644e:	fb02 f303 	mul.w	r3, r2, r3
 8006452:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	65fb      	str	r3, [r7, #92]	; 0x5c
   secs_since_epoch += small_ticks * 90 / 1000;
 8006458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800645a:	225a      	movs	r2, #90	; 0x5a
 800645c:	fb02 f303 	mul.w	r3, r2, r3
 8006460:	4a17      	ldr	r2, [pc, #92]	; (80064c0 <_ZN10IridiumSBD13getSystemTimeER2tm+0x118>)
 8006462:	fba2 2303 	umull	r2, r3, r2, r3
 8006466:	099b      	lsrs	r3, r3, #6
 8006468:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800646a:	4413      	add	r3, r2
 800646c:	663b      	str	r3, [r7, #96]	; 0x60

   time_t epoch_time = mktime(&epoch_start);
 800646e:	f107 0314 	add.w	r3, r7, #20
 8006472:	4618      	mov	r0, r3
 8006474:	f00c fd36 	bl	8012ee4 <mktime>
 8006478:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
   time_t now = epoch_time + secs_since_epoch;
 800647c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800647e:	4618      	mov	r0, r3
 8006480:	f04f 0100 	mov.w	r1, #0
 8006484:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006488:	1884      	adds	r4, r0, r2
 800648a:	eb41 0503 	adc.w	r5, r1, r3
 800648e:	e9c7 4502 	strd	r4, r5, [r7, #8]
   memcpy(&tm, localtime(&now), sizeof tm);
 8006492:	f107 0308 	add.w	r3, r7, #8
 8006496:	4618      	mov	r0, r3
 8006498:	f00c faf2 	bl	8012a80 <localtime>
 800649c:	4603      	mov	r3, r0
 800649e:	2224      	movs	r2, #36	; 0x24
 80064a0:	4619      	mov	r1, r3
 80064a2:	6838      	ldr	r0, [r7, #0]
 80064a4:	f00c fc16 	bl	8012cd4 <memcpy>
   return ISBD_SUCCESS;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3768      	adds	r7, #104	; 0x68
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bdb0      	pop	{r4, r5, r7, pc}
 80064b2:	bf00      	nop
 80064b4:	080198fc 	.word	0x080198fc
 80064b8:	08019914 	.word	0x08019914
 80064bc:	08019908 	.word	0x08019908
 80064c0:	10624dd3 	.word	0x10624dd3
 80064c4:	b60b60b7 	.word	0xb60b60b7

080064c8 <_ZN10IridiumSBD18getFirmwareVersionEPcj>:

int IridiumSBD::getFirmwareVersion(char *version, size_t bufferSize)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
   if (bufferSize < 8)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b07      	cmp	r3, #7
 80064d8:	d801      	bhi.n	80064de <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x16>
      return ISBD_RX_OVERFLOW;
 80064da:	2308      	movs	r3, #8
 80064dc:	e01e      	b.n	800651c <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   send(F("AT+CGMR\r"));
 80064de:	2301      	movs	r3, #1
 80064e0:	2201      	movs	r2, #1
 80064e2:	4910      	ldr	r1, [pc, #64]	; (8006524 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x5c>)
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f001 fb1f 	bl	8007b28 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(version, bufferSize, "Call Processor Version: "))
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	4b0e      	ldr	r3, [pc, #56]	; (8006528 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x60>)
 80064ee:	9300      	str	r3, [sp, #0]
 80064f0:	4b0e      	ldr	r3, [pc, #56]	; (800652c <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x64>)
 80064f2:	68b9      	ldr	r1, [r7, #8]
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f000 feb5 	bl	8007264 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80064fa:	4603      	mov	r3, r0
 80064fc:	f083 0301 	eor.w	r3, r3, #1
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d009      	beq.n	800651a <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x52>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f000 ff6a 	bl	80073e0 <_ZN10IridiumSBD9cancelledEv>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x4e>
 8006512:	2304      	movs	r3, #4
 8006514:	e002      	b.n	800651c <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>
 8006516:	2303      	movs	r3, #3
 8006518:	e000      	b.n	800651c <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   return ISBD_SUCCESS;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	0801991c 	.word	0x0801991c
 8006528:	08019914 	.word	0x08019914
 800652c:	08019928 	.word	0x08019928

08006530 <_ZN10IridiumSBD21enableSuperCapChargerEb>:

void IridiumSBD::enableSuperCapCharger(bool enable)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	460b      	mov	r3, r1
 800653a:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the charger manually)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	7c5b      	ldrb	r3, [r3, #17]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d004      	beq.n	800654e <_ZN10IridiumSBD21enableSuperCapChargerEb+0x1e>
  {
    diagprint(F("enableSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8006544:	4918      	ldr	r1, [pc, #96]	; (80065a8 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x78>)
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f001 fc6c 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 800654c:	e028      	b.n	80065a0 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x70>
  }

  // Enable/disable the supercapacitor charger by pulling its SHDN pin high/low
  check9603pins(); // Update IO_REGISTER
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f001 ff59 	bl	8008406 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8006554:	78fb      	ldrb	r3, [r7, #3]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00b      	beq.n	8006572 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x42>
  {
    IO_REGISTER |= IO_SHDN; // Set the SHDN bit
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006566:	4313      	orrs	r3, r2
 8006568:	b2da      	uxtb	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8006570:	e00f      	b.n	8006592 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_SHDN; // Clear the SHDN bit
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8006578:	b25a      	sxtb	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006580:	b25b      	sxtb	r3, r3
 8006582:	43db      	mvns	r3, r3
 8006584:	b25b      	sxtb	r3, r3
 8006586:	4013      	ands	r3, r2
 8006588:	b25b      	sxtb	r3, r3
 800658a:	b2da      	uxtb	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
  set9603pins(IO_REGISTER); // Update the pins
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8006598:	4619      	mov	r1, r3
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f001 ff6c 	bl	8008478 <_ZN10IridiumSBD11set9603pinsEh>
}
 80065a0:	3708      	adds	r7, #8
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	08019944 	.word	0x08019944

080065ac <_ZN10IridiumSBD20checkSuperCapChargerEv>:

bool IridiumSBD::checkSuperCapCharger()
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial (the user will have to check PGOOD manually)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	7c5b      	ldrb	r3, [r3, #17]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d005      	beq.n	80065c8 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x1c>
  {
    diagprint(F("checkSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 80065bc:	4912      	ldr	r1, [pc, #72]	; (8006608 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x5c>)
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f001 fc30 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return(false);
 80065c4:	2300      	movs	r3, #0
 80065c6:	e01a      	b.n	80065fe <_ZN10IridiumSBD20checkSuperCapChargerEv+0x52>
  }

  // Check the status of the supercapacitor charger PGOOD pin
  check9603pins(); // Update IO_REGISTER
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f001 ff1c 	bl	8008406 <_ZN10IridiumSBD13check9603pinsEv>
  if (IO_REGISTER &= IO_PGOOD) // If the PGOOD bit is set, return true
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80065da:	4013      	ands	r3, r2
 80065dc:	b2da      	uxtb	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	bf14      	ite	ne
 80065ee:	2301      	movne	r3, #1
 80065f0:	2300      	moveq	r3, #0
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d001      	beq.n	80065fc <_ZN10IridiumSBD20checkSuperCapChargerEv+0x50>
  {
    return(true);
 80065f8:	2301      	movs	r3, #1
 80065fa:	e000      	b.n	80065fe <_ZN10IridiumSBD20checkSuperCapChargerEv+0x52>
  }
  else
  {
    return(false);
 80065fc:	2300      	movs	r3, #0
  }
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	08019990 	.word	0x08019990

0800660c <_ZN10IridiumSBD16enable9603NpowerEb>:

void IridiumSBD::enable9603Npower(bool enable)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	460b      	mov	r3, r1
 8006616:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N power manually)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	7c5b      	ldrb	r3, [r3, #17]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d004      	beq.n	800662a <_ZN10IridiumSBD16enable9603NpowerEb+0x1e>
  {
    diagprint(F("enable9603Npower is only valid when using I2C on the Qwiic Iridium\r\n"));
 8006620:	4918      	ldr	r1, [pc, #96]	; (8006684 <_ZN10IridiumSBD16enable9603NpowerEb+0x78>)
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f001 fbfe 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8006628:	e028      	b.n	800667c <_ZN10IridiumSBD16enable9603NpowerEb+0x70>
  }

  // Enable/disable power to the 9603N by pulling PWR_EN high/low
  check9603pins(); // Update IO_REGISTER
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f001 feeb 	bl	8008406 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8006630:	78fb      	ldrb	r3, [r7, #3]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00b      	beq.n	800664e <_ZN10IridiumSBD16enable9603NpowerEb+0x42>
  {
    IO_REGISTER |= IO_PWR_EN; // Set the PWR_EN bit
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8006642:	4313      	orrs	r3, r2
 8006644:	b2da      	uxtb	r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 800664c:	e00f      	b.n	800666e <_ZN10IridiumSBD16enable9603NpowerEb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_PWR_EN; // Clear the PWR_EN bit
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8006654:	b25a      	sxtb	r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800665c:	b25b      	sxtb	r3, r3
 800665e:	43db      	mvns	r3, r3
 8006660:	b25b      	sxtb	r3, r3
 8006662:	4013      	ands	r3, r2
 8006664:	b25b      	sxtb	r3, r3
 8006666:	b2da      	uxtb	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
  set9603pins(IO_REGISTER); // Update the pins
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8006674:	4619      	mov	r1, r3
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f001 fefe 	bl	8008478 <_ZN10IridiumSBD11set9603pinsEh>
}
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	080199dc 	.word	0x080199dc

08006688 <_ZN10IridiumSBD10enable9603Eb>:

void IridiumSBD::enable9603(bool enable)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	460b      	mov	r3, r1
 8006692:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N manually)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	7c5b      	ldrb	r3, [r3, #17]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d004      	beq.n	80066a6 <_ZN10IridiumSBD10enable9603Eb+0x1e>
  {
    diagprint(F("enable9603 is only valid when using I2C on the Qwiic Iridium\r\n"));
 800669c:	4918      	ldr	r1, [pc, #96]	; (8006700 <_ZN10IridiumSBD10enable9603Eb+0x78>)
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f001 fbc0 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 80066a4:	e028      	b.n	80066f8 <_ZN10IridiumSBD10enable9603Eb+0x70>
  }

  // Enable/disable the 9603 by pulling ON_OFF high/low
  check9603pins(); // Update IO_REGISTER
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f001 fead 	bl	8008406 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 80066ac:	78fb      	ldrb	r3, [r7, #3]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00b      	beq.n	80066ca <_ZN10IridiumSBD10enable9603Eb+0x42>
  {
    IO_REGISTER |= IO_ON_OFF; // Set the ON_OFF bit
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 80066be:	4313      	orrs	r3, r2
 80066c0:	b2da      	uxtb	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 80066c8:	e00f      	b.n	80066ea <_ZN10IridiumSBD10enable9603Eb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_ON_OFF; // Clear the ON_OFF bit
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80066d0:	b25a      	sxtb	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 80066d8:	b25b      	sxtb	r3, r3
 80066da:	43db      	mvns	r3, r3
 80066dc:	b25b      	sxtb	r3, r3
 80066de:	4013      	ands	r3, r2
 80066e0:	b25b      	sxtb	r3, r3
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
  set9603pins(IO_REGISTER); // Update the pins
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80066f0:	4619      	mov	r1, r3
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f001 fec0 	bl	8008478 <_ZN10IridiumSBD11set9603pinsEh>
}
 80066f8:	3708      	adds	r7, #8
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	08019a24 	.word	0x08019a24

08006704 <_ZN10IridiumSBD18clearRingIndicatorEv>:
    return(false);
  }
}

void IridiumSBD::clearRingIndicator()
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	7c5b      	ldrb	r3, [r3, #17]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d004      	beq.n	800671e <_ZN10IridiumSBD18clearRingIndicatorEv+0x1a>
  {
    diagprint(F("clearRingIndicator is only valid when using I2C on the Qwiic Iridium\r\n"));
 8006714:	4912      	ldr	r1, [pc, #72]	; (8006760 <_ZN10IridiumSBD18clearRingIndicatorEv+0x5c>)
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f001 fb84 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 800671c:	e01d      	b.n	800675a <_ZN10IridiumSBD18clearRingIndicatorEv+0x56>
  }

  // Clear the 9603 RI flag
  check9603pins(); // Update IO_REGISTER
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f001 fe71 	bl	8008406 <_ZN10IridiumSBD13check9603pinsEv>
  IO_REGISTER &= ~IO_RI; // Clear the RI bit
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800672a:	b25a      	sxtb	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006732:	b25b      	sxtb	r3, r3
 8006734:	43db      	mvns	r3, r3
 8006736:	b25b      	sxtb	r3, r3
 8006738:	4013      	ands	r3, r2
 800673a:	b25b      	sxtb	r3, r3
 800673c:	b2da      	uxtb	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  set9603pins(IO_REGISTER); // Update the pins
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800674a:	4619      	mov	r1, r3
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f001 fe93 	bl	8008478 <_ZN10IridiumSBD11set9603pinsEh>
  this->ringAsserted = false; // Also clear the ringAsserted flag
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
}
 800675a:	3708      	adds	r7, #8
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	08019af4 	.word	0x08019af4

08006764 <_ZN10IridiumSBD21checkNetworkAvailableEv>:

bool IridiumSBD::checkNetworkAvailable()
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	7c5b      	ldrb	r3, [r3, #17]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d005      	beq.n	8006780 <_ZN10IridiumSBD21checkNetworkAvailableEv+0x1c>
  {
    diagprint(F("checkNetworkAvailable is only valid when using I2C on the Qwiic Iridium\r\n"));
 8006774:	4912      	ldr	r1, [pc, #72]	; (80067c0 <_ZN10IridiumSBD21checkNetworkAvailableEv+0x5c>)
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f001 fb54 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return(false);
 800677c:	2300      	movs	r3, #0
 800677e:	e01a      	b.n	80067b6 <_ZN10IridiumSBD21checkNetworkAvailableEv+0x52>
  }

  // Check the status of the 9603 Network Available pin
  check9603pins(); // Update IO_REGISTER
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f001 fe40 	bl	8008406 <_ZN10IridiumSBD13check9603pinsEv>
  if (IO_REGISTER &= IO_NA) // If the NA bit is set, return true
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006792:	4013      	ands	r3, r2
 8006794:	b2da      	uxtb	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	bf14      	ite	ne
 80067a6:	2301      	movne	r3, #1
 80067a8:	2300      	moveq	r3, #0
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d001      	beq.n	80067b4 <_ZN10IridiumSBD21checkNetworkAvailableEv+0x50>
  {
    return(true);
 80067b0:	2301      	movs	r3, #1
 80067b2:	e000      	b.n	80067b6 <_ZN10IridiumSBD21checkNetworkAvailableEv+0x52>
  }
  else
  {
    return(false);
 80067b4:	2300      	movs	r3, #0
  }
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3708      	adds	r7, #8
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	08019b3c 	.word	0x08019b3c

080067c4 <_ZN10IridiumSBD12clearBuffersEi>:

// High-level wrapper for AT+SBDD
int IridiumSBD::clearBuffers(int buffers)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
   if (this->reentrant)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <_ZN10IridiumSBD12clearBuffersEi+0x18>
      return ISBD_REENTRANT;
 80067d8:	2309      	movs	r3, #9
 80067da:	e00d      	b.n	80067f8 <_ZN10IridiumSBD12clearBuffersEi+0x34>

   this->reentrant = true;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalClearBuffers(buffers);
 80067e4:	6839      	ldr	r1, [r7, #0]
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f001 fed0 	bl	800858c <_ZN10IridiumSBD20internalClearBuffersEi>
 80067ec:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 80067f6:	68fb      	ldr	r3, [r7, #12]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <_ZN10IridiumSBD7getIMEIEPcj>:

// High-level wrapper for AT+CGSN
int IridiumSBD::getIMEI(char *IMEI, size_t bufferSize)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]
   if (this->reentrant)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8006812:	2b00      	cmp	r3, #0
 8006814:	d001      	beq.n	800681a <_ZN10IridiumSBD7getIMEIEPcj+0x1a>
      return ISBD_REENTRANT;
 8006816:	2309      	movs	r3, #9
 8006818:	e00e      	b.n	8006838 <_ZN10IridiumSBD7getIMEIEPcj+0x38>

   this->reentrant = true;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   int ret = internalGetIMEI(IMEI, bufferSize);
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	68b9      	ldr	r1, [r7, #8]
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f001 fefc 	bl	8008624 <_ZN10IridiumSBD15internalGetIMEIEPcj>
 800682c:	6178      	str	r0, [r7, #20]
   this->reentrant = false;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
   return ret;
 8006836:	697b      	ldr	r3, [r7, #20]
}
 8006838:	4618      	mov	r0, r3
 800683a:	3718      	adds	r7, #24
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <_ZN10IridiumSBD11isConnectedEv>:

//Returns true if the I2C device is connected
//Always returns true for serial
//boolean IridiumSBD::isConnected() TODO
bool IridiumSBD::isConnected()
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
   if (this->useSerial) // If we are using Serial
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	7c5b      	ldrb	r3, [r3, #17]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <_ZN10IridiumSBD11isConnectedEv+0x14>
   {
		return true;
 8006850:	2301      	movs	r3, #1
 8006852:	e012      	b.n	800687a <_ZN10IridiumSBD11isConnectedEv+0x3a>
   }
   else
   {
		wireport->beginTransmission((uint8_t)deviceaddress);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	68da      	ldr	r2, [r3, #12]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	7c1b      	ldrb	r3, [r3, #16]
 800685c:	4619      	mov	r1, r3
 800685e:	4610      	mov	r0, r2
 8006860:	f002 fce0 	bl	8009224 <_ZN7TwoWire17beginTransmissionEh>
		return (wireport->endTransmission() == 0); // Check that the device ack's
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	4618      	mov	r0, r3
 800686a:	f002 fd25 	bl	80092b8 <_ZN7TwoWire15endTransmissionEv>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	bf0c      	ite	eq
 8006874:	2301      	moveq	r3, #1
 8006876:	2300      	movne	r3, #0
 8006878:	b2db      	uxtb	r3, r3
   }
}
 800687a:	4618      	mov	r0, r3
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
	...

08006884 <_ZN10IridiumSBD13internalBeginEv>:
/*
Private interface
*/

int IridiumSBD::internalBegin()
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b090      	sub	sp, #64	; 0x40
 8006888:	af02      	add	r7, sp, #8
 800688a:	6078      	str	r0, [r7, #4]
   diagprint(F("Calling internalBegin\r\n"));
 800688c:	49b0      	ldr	r1, [pc, #704]	; (8006b50 <_ZN10IridiumSBD13internalBeginEv+0x2cc>)
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f001 fac8 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (!this->asleep)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800689a:	f083 0301 	eor.w	r3, r3, #1
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d001      	beq.n	80068a8 <_ZN10IridiumSBD13internalBeginEv+0x24>
      return ISBD_ALREADY_AWAKE;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e14f      	b.n	8006b48 <_ZN10IridiumSBD13internalBeginEv+0x2c4>

   if (!this->useSerial) // If we are using I2C
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	7c5b      	ldrb	r3, [r3, #17]
 80068ac:	f083 0301 	eor.w	r3, r3, #1
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d005      	beq.n	80068c2 <_ZN10IridiumSBD13internalBeginEv+0x3e>
   {
      check9603pins(); // Update IO_REGISTER with the status of the 9603 pins
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f001 fda5 	bl	8008406 <_ZN10IridiumSBD13check9603pinsEv>
      check9603data(); // Get any waiting 9603 serial data
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f001 fcd1 	bl	8008264 <_ZN10IridiumSBD13check9603dataEv>
   }

   power(true); // power on
 80068c2:	2101      	movs	r1, #1
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f001 f873 	bl	80079b0 <_ZN10IridiumSBD5powerEb>

   bool modemAlive = false;
 80068ca:	2300      	movs	r3, #0
 80068cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

   unsigned long startupTime = 500; //ms
 80068d0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80068d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   for (unsigned long start = millis(); millis() - start < startupTime;)
 80068d6:	f003 f965 	bl	8009ba4 <HAL_GetTick>
 80068da:	62b8      	str	r0, [r7, #40]	; 0x28
 80068dc:	f003 f962 	bl	8009ba4 <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068e8:	429a      	cmp	r2, r3
 80068ea:	bf8c      	ite	hi
 80068ec:	2301      	movhi	r3, #1
 80068ee:	2300      	movls	r3, #0
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d007      	beq.n	8006906 <_ZN10IridiumSBD13internalBeginEv+0x82>
      if (cancelled())
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fd72 	bl	80073e0 <_ZN10IridiumSBD9cancelledEv>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d0ec      	beq.n	80068dc <_ZN10IridiumSBD13internalBeginEv+0x58>
         return ISBD_CANCELLED;
 8006902:	2304      	movs	r3, #4
 8006904:	e120      	b.n	8006b48 <_ZN10IridiumSBD13internalBeginEv+0x2c4>

   if (this->useSerial) // If we are using Serial
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	7c5b      	ldrb	r3, [r3, #17]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d002      	beq.n	8006914 <_ZN10IridiumSBD13internalBeginEv+0x90>
      beginSerialPort(); // Apollo3 v2.1 Serial fix - begin the Serial port 500ms after power(true)
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f001 f8ee 	bl	8007af0 <_ZN10IridiumSBD15beginSerialPortEv>

   // Turn on modem and wait for a response from "AT" command to begin
   for (unsigned long start = millis(); !modemAlive && millis() - start < 1000UL * this->startupTimeout;)
 8006914:	f003 f946 	bl	8009ba4 <HAL_GetTick>
 8006918:	6278      	str	r0, [r7, #36]	; 0x24
 800691a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800691e:	f083 0301 	eor.w	r3, r3, #1
 8006922:	b2db      	uxtb	r3, r3
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00f      	beq.n	8006948 <_ZN10IridiumSBD13internalBeginEv+0xc4>
 8006928:	f003 f93c 	bl	8009ba4 <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006930:	1ad2      	subs	r2, r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006936:	4619      	mov	r1, r3
 8006938:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800693c:	fb03 f301 	mul.w	r3, r3, r1
 8006940:	429a      	cmp	r2, r3
 8006942:	d201      	bcs.n	8006948 <_ZN10IridiumSBD13internalBeginEv+0xc4>
 8006944:	2301      	movs	r3, #1
 8006946:	e000      	b.n	800694a <_ZN10IridiumSBD13internalBeginEv+0xc6>
 8006948:	2300      	movs	r3, #0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d018      	beq.n	8006980 <_ZN10IridiumSBD13internalBeginEv+0xfc>
   {
      send(F("AT\r"));
 800694e:	2301      	movs	r3, #1
 8006950:	2201      	movs	r2, #1
 8006952:	4980      	ldr	r1, [pc, #512]	; (8006b54 <_ZN10IridiumSBD13internalBeginEv+0x2d0>)
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f001 f8e7 	bl	8007b28 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      modemAlive = waitForATResponse();
 800695a:	4b7f      	ldr	r3, [pc, #508]	; (8006b58 <_ZN10IridiumSBD13internalBeginEv+0x2d4>)
 800695c:	9300      	str	r3, [sp, #0]
 800695e:	2300      	movs	r3, #0
 8006960:	2200      	movs	r2, #0
 8006962:	2100      	movs	r1, #0
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fc7d 	bl	8007264 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 800696a:	4603      	mov	r3, r0
 800696c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (cancelled())
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fd35 	bl	80073e0 <_ZN10IridiumSBD9cancelledEv>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d0ce      	beq.n	800691a <_ZN10IridiumSBD13internalBeginEv+0x96>
         return ISBD_CANCELLED;
 800697c:	2304      	movs	r3, #4
 800697e:	e0e3      	b.n	8006b48 <_ZN10IridiumSBD13internalBeginEv+0x2c4>
   }

   if (!modemAlive)
 8006980:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006984:	f083 0301 	eor.w	r3, r3, #1
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	d005      	beq.n	800699a <_ZN10IridiumSBD13internalBeginEv+0x116>
   {
      diagprint(F("No modem detected.\r\n"));
 800698e:	4973      	ldr	r1, [pc, #460]	; (8006b5c <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f001 fa47 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      return ISBD_NO_MODEM_DETECTED;
 8006996:	2305      	movs	r3, #5
 8006998:	e0d6      	b.n	8006b48 <_ZN10IridiumSBD13internalBeginEv+0x2c4>
   }

   // The usual initialization sequence
   const char *strings[3] = { "ATE1\r", "AT&D0\r", "AT&K0\r" };
 800699a:	4a71      	ldr	r2, [pc, #452]	; (8006b60 <_ZN10IridiumSBD13internalBeginEv+0x2dc>)
 800699c:	f107 0310 	add.w	r3, r7, #16
 80069a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80069a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   for (int i=0; i<3; ++i)
 80069a6:	2300      	movs	r3, #0
 80069a8:	633b      	str	r3, [r7, #48]	; 0x30
 80069aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	dc26      	bgt.n	80069fe <_ZN10IridiumSBD13internalBeginEv+0x17a>
   {
      send(strings[i]);
 80069b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80069b8:	4413      	add	r3, r2
 80069ba:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80069be:	4619      	mov	r1, r3
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f001 f90d 	bl	8007be0 <_ZN10IridiumSBD4sendEPKc>
      if (!waitForATResponse())
 80069c6:	4b64      	ldr	r3, [pc, #400]	; (8006b58 <_ZN10IridiumSBD13internalBeginEv+0x2d4>)
 80069c8:	9300      	str	r3, [sp, #0]
 80069ca:	2300      	movs	r3, #0
 80069cc:	2200      	movs	r2, #0
 80069ce:	2100      	movs	r1, #0
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 fc47 	bl	8007264 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80069d6:	4603      	mov	r3, r0
 80069d8:	f083 0301 	eor.w	r3, r3, #1
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d009      	beq.n	80069f6 <_ZN10IridiumSBD13internalBeginEv+0x172>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fcfc 	bl	80073e0 <_ZN10IridiumSBD9cancelledEv>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d001      	beq.n	80069f2 <_ZN10IridiumSBD13internalBeginEv+0x16e>
 80069ee:	2304      	movs	r3, #4
 80069f0:	e0aa      	b.n	8006b48 <_ZN10IridiumSBD13internalBeginEv+0x2c4>
 80069f2:	2303      	movs	r3, #3
 80069f4:	e0a8      	b.n	8006b48 <_ZN10IridiumSBD13internalBeginEv+0x2c4>
   for (int i=0; i<3; ++i)
 80069f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f8:	3301      	adds	r3, #1
 80069fa:	633b      	str	r3, [r7, #48]	; 0x30
 80069fc:	e7d5      	b.n	80069aa <_ZN10IridiumSBD13internalBeginEv+0x126>
   }

   // Enable or disable RING alerts as requested by user
   // By default they are on if a RING pin was supplied on constructor
   diagprint(F("Ring alerts are")); diagprint(ringAlertsEnabled ? F("") : F(" NOT")); diagprint(F(" enabled.\r\n"));
 80069fe:	4959      	ldr	r1, [pc, #356]	; (8006b64 <_ZN10IridiumSBD13internalBeginEv+0x2e0>)
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f001 fa0f 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <_ZN10IridiumSBD13internalBeginEv+0x190>
 8006a10:	4b55      	ldr	r3, [pc, #340]	; (8006b68 <_ZN10IridiumSBD13internalBeginEv+0x2e4>)
 8006a12:	e000      	b.n	8006a16 <_ZN10IridiumSBD13internalBeginEv+0x192>
 8006a14:	4b55      	ldr	r3, [pc, #340]	; (8006b6c <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 8006a16:	4619      	mov	r1, r3
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f001 fa03 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8006a1e:	4954      	ldr	r1, [pc, #336]	; (8006b70 <_ZN10IridiumSBD13internalBeginEv+0x2ec>)
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f001 f9ff 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (ringAlertsEnabled) enableRingAlerts(true); // This will clear ringAsserted and the Ring Indicator flag
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d004      	beq.n	8006a3a <_ZN10IridiumSBD13internalBeginEv+0x1b6>
 8006a30:	2101      	movs	r1, #1
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f7ff fc98 	bl	8006368 <_ZN10IridiumSBD16enableRingAlertsEb>
 8006a38:	e009      	b.n	8006a4e <_ZN10IridiumSBD13internalBeginEv+0x1ca>
   else {
	   if (!this->useSerial) clearRingIndicator(); // If ring alerts are not enabled and using I2C, make sure the Ring Indicator flag is clear
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	7c5b      	ldrb	r3, [r3, #17]
 8006a3e:	f083 0301 	eor.w	r3, r3, #1
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d002      	beq.n	8006a4e <_ZN10IridiumSBD13internalBeginEv+0x1ca>
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f7ff fe5b 	bl	8006704 <_ZN10IridiumSBD18clearRingIndicatorEv>
   }

   send(ringAlertsEnabled ? F("AT+SBDMTA=1\r") : F("AT+SBDMTA=0\r"));
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d001      	beq.n	8006a5c <_ZN10IridiumSBD13internalBeginEv+0x1d8>
 8006a58:	4946      	ldr	r1, [pc, #280]	; (8006b74 <_ZN10IridiumSBD13internalBeginEv+0x2f0>)
 8006a5a:	e000      	b.n	8006a5e <_ZN10IridiumSBD13internalBeginEv+0x1da>
 8006a5c:	4946      	ldr	r1, [pc, #280]	; (8006b78 <_ZN10IridiumSBD13internalBeginEv+0x2f4>)
 8006a5e:	2301      	movs	r3, #1
 8006a60:	2201      	movs	r2, #1
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f001 f860 	bl	8007b28 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   HAL_Delay(10); //TODO Added
 8006a68:	200a      	movs	r0, #10
 8006a6a:	f003 f8a7 	bl	8009bbc <HAL_Delay>
   if (!waitForATResponse())
 8006a6e:	4b3a      	ldr	r3, [pc, #232]	; (8006b58 <_ZN10IridiumSBD13internalBeginEv+0x2d4>)
 8006a70:	9300      	str	r3, [sp, #0]
 8006a72:	2300      	movs	r3, #0
 8006a74:	2200      	movs	r2, #0
 8006a76:	2100      	movs	r1, #0
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 fbf3 	bl	8007264 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	f083 0301 	eor.w	r3, r3, #1
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d009      	beq.n	8006a9e <_ZN10IridiumSBD13internalBeginEv+0x21a>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fca8 	bl	80073e0 <_ZN10IridiumSBD9cancelledEv>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d001      	beq.n	8006a9a <_ZN10IridiumSBD13internalBeginEv+0x216>
 8006a96:	2304      	movs	r3, #4
 8006a98:	e056      	b.n	8006b48 <_ZN10IridiumSBD13internalBeginEv+0x2c4>
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e054      	b.n	8006b48 <_ZN10IridiumSBD13internalBeginEv+0x2c4>

   // Decide whether the internal MSSTM workaround should be enforced on TX/RX
   // By default it is unless the firmware rev is >= TA13001
   char version[8];
   int ret = getFirmwareVersion(version, sizeof(version));
 8006a9e:	f107 0308 	add.w	r3, r7, #8
 8006aa2:	2208      	movs	r2, #8
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f7ff fd0e 	bl	80064c8 <_ZN10IridiumSBD18getFirmwareVersionEPcj>
 8006aac:	6238      	str	r0, [r7, #32]
   if (ret != ISBD_SUCCESS)
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d008      	beq.n	8006ac6 <_ZN10IridiumSBD13internalBeginEv+0x242>
   {
      diagprint(F("Unknown FW version\r\n"));
 8006ab4:	4931      	ldr	r1, [pc, #196]	; (8006b7c <_ZN10IridiumSBD13internalBeginEv+0x2f8>)
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f001 f9b4 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      msstmWorkaroundRequested = true;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8006ac4:	e027      	b.n	8006b16 <_ZN10IridiumSBD13internalBeginEv+0x292>
   }
   else
   {
      diagprint(F("Firmware version is ")); diagprint(version); diagprint(F("\r\n"));
 8006ac6:	492e      	ldr	r1, [pc, #184]	; (8006b80 <_ZN10IridiumSBD13internalBeginEv+0x2fc>)
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f001 f9ab 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8006ace:	f107 0308 	add.w	r3, r7, #8
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f001 f9c3 	bl	8007e60 <_ZN10IridiumSBD9diagprintEPKc>
 8006ada:	492a      	ldr	r1, [pc, #168]	; (8006b84 <_ZN10IridiumSBD13internalBeginEv+0x300>)
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f001 f9a1 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (version[0] == 'T' && version[1] == 'A')
 8006ae2:	7a3b      	ldrb	r3, [r7, #8]
 8006ae4:	2b54      	cmp	r3, #84	; 0x54
 8006ae6:	d116      	bne.n	8006b16 <_ZN10IridiumSBD13internalBeginEv+0x292>
 8006ae8:	7a7b      	ldrb	r3, [r7, #9]
 8006aea:	2b41      	cmp	r3, #65	; 0x41
 8006aec:	d113      	bne.n	8006b16 <_ZN10IridiumSBD13internalBeginEv+0x292>
      {
         unsigned long ver = strtoul(version + 2, NULL, 10);
 8006aee:	f107 0308 	add.w	r3, r7, #8
 8006af2:	3302      	adds	r3, #2
 8006af4:	220a      	movs	r2, #10
 8006af6:	2100      	movs	r1, #0
 8006af8:	4618      	mov	r0, r3
 8006afa:	f00e fc5f 	bl	80153bc <strtoul>
 8006afe:	61f8      	str	r0, [r7, #28]
         msstmWorkaroundRequested = ver < ISBD_MSSTM_WORKAROUND_FW_VER;
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8006b06:	4293      	cmp	r3, r2
 8006b08:	bf94      	ite	ls
 8006b0a:	2301      	movls	r3, #1
 8006b0c:	2300      	movhi	r3, #0
 8006b0e:	b2da      	uxtb	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
      }
   }
   diagprint(F("MSSTM workaround is")); diagprint(msstmWorkaroundRequested ? F("") : F(" NOT")); diagprint(F(" enforced.\r\n"));
 8006b16:	491c      	ldr	r1, [pc, #112]	; (8006b88 <_ZN10IridiumSBD13internalBeginEv+0x304>)
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f001 f983 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d001      	beq.n	8006b2c <_ZN10IridiumSBD13internalBeginEv+0x2a8>
 8006b28:	4b0f      	ldr	r3, [pc, #60]	; (8006b68 <_ZN10IridiumSBD13internalBeginEv+0x2e4>)
 8006b2a:	e000      	b.n	8006b2e <_ZN10IridiumSBD13internalBeginEv+0x2aa>
 8006b2c:	4b0f      	ldr	r3, [pc, #60]	; (8006b6c <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 8006b2e:	4619      	mov	r1, r3
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f001 f977 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8006b36:	4915      	ldr	r1, [pc, #84]	; (8006b8c <_ZN10IridiumSBD13internalBeginEv+0x308>)
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f001 f973 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   // Done!
   diagprint(F("InternalBegin: success!\r\n"));
 8006b3e:	4914      	ldr	r1, [pc, #80]	; (8006b90 <_ZN10IridiumSBD13internalBeginEv+0x30c>)
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f001 f96f 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   return ISBD_SUCCESS;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3738      	adds	r7, #56	; 0x38
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	08019c14 	.word	0x08019c14
 8006b54:	08019c2c 	.word	0x08019c2c
 8006b58:	08019914 	.word	0x08019914
 8006b5c:	08019c30 	.word	0x08019c30
 8006b60:	08019d04 	.word	0x08019d04
 8006b64:	08019c48 	.word	0x08019c48
 8006b68:	08019c58 	.word	0x08019c58
 8006b6c:	08019c5c 	.word	0x08019c5c
 8006b70:	08019c64 	.word	0x08019c64
 8006b74:	08019c70 	.word	0x08019c70
 8006b78:	08019c80 	.word	0x08019c80
 8006b7c:	08019c90 	.word	0x08019c90
 8006b80:	08019ca8 	.word	0x08019ca8
 8006b84:	08019cc0 	.word	0x08019cc0
 8006b88:	08019cc4 	.word	0x08019cc4
 8006b8c:	08019cd8 	.word	0x08019cd8
 8006b90:	08019ce8 	.word	0x08019ce8

08006b94 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj>:

int IridiumSBD::internalSendReceiveSBD(const char *txTxtMessage, const uint8_t *txData, size_t txDataSize, uint8_t *rxBuffer, size_t *prxBufferSize)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b096      	sub	sp, #88	; 0x58
 8006b98:	af04      	add	r7, sp, #16
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
 8006ba0:	603b      	str	r3, [r7, #0]
   diagprint(F("internalSendReceive\r\n"));
 8006ba2:	49a5      	ldr	r1, [pc, #660]	; (8006e38 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2a4>)
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f001 f93d 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (this->asleep)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d001      	beq.n	8006bb8 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x24>
      return ISBD_IS_ASLEEP;
 8006bb4:	230a      	movs	r3, #10
 8006bb6:	e289      	b.n	80070cc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

   // Binary transmission?
   if (txData && txDataSize)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f000 8152 	beq.w	8006e64 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2d0>
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f000 814e 	beq.w	8006e64 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2d0>
   {
      if (txDataSize > ISBD_MAX_MESSAGE_LENGTH)
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8006bce:	d901      	bls.n	8006bd4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x40>
         return ISBD_MSG_TOO_LONG;
 8006bd0:	230d      	movs	r3, #13
 8006bd2:	e27b      	b.n	80070cc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

      // send will use serial or wire as appropriate
      send(F("AT+SBDWB="), true, false);
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	4998      	ldr	r1, [pc, #608]	; (8006e3c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2a8>)
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f000 ffa4 	bl	8007b28 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      send(txDataSize);
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	4619      	mov	r1, r3
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f001 f8d6 	bl	8007d98 <_ZN10IridiumSBD4sendEt>
      send(F("\r"), false);
 8006bec:	2301      	movs	r3, #1
 8006bee:	2200      	movs	r2, #0
 8006bf0:	4993      	ldr	r1, [pc, #588]	; (8006e40 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2ac>)
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f000 ff98 	bl	8007b28 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      if (!waitForATResponse(NULL, 0, NULL, "READY\r\n"))
 8006bf8:	4b92      	ldr	r3, [pc, #584]	; (8006e44 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2b0>)
 8006bfa:	9300      	str	r3, [sp, #0]
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	2200      	movs	r2, #0
 8006c00:	2100      	movs	r1, #0
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f000 fb2e 	bl	8007264 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	f083 0301 	eor.w	r3, r3, #1
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d009      	beq.n	8006c28 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x94>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f000 fbe3 	bl	80073e0 <_ZN10IridiumSBD9cancelledEv>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d001      	beq.n	8006c24 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x90>
 8006c20:	2304      	movs	r3, #4
 8006c22:	e253      	b.n	80070cc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 8006c24:	2303      	movs	r3, #3
 8006c26:	e251      	b.n	80070cc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

      uint16_t checksum = 0;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

      if (this->useSerial)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	7c5b      	ldrb	r3, [r3, #17]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d03a      	beq.n	8006cac <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x118>
      {
         for (size_t i=0; i<txDataSize; ++i)
 8006c36:	2300      	movs	r3, #0
 8006c38:	643b      	str	r3, [r7, #64]	; 0x40
 8006c3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d21a      	bcs.n	8006c78 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0xe4>
         {
            stream->write(txData[i]);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	4618      	mov	r0, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6879      	ldr	r1, [r7, #4]
 8006c52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c54:	440a      	add	r2, r1
 8006c56:	7812      	ldrb	r2, [r2, #0]
 8006c58:	4611      	mov	r1, r2
 8006c5a:	4798      	blx	r3
            checksum += (uint16_t)txData[i];
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c60:	4413      	add	r3, r2
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
         for (size_t i=0; i<txDataSize; ++i)
 8006c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c72:	3301      	adds	r3, #1
 8006c74:	643b      	str	r3, [r7, #64]	; 0x40
 8006c76:	e7e0      	b.n	8006c3a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0xa6>
         }
         stream->write((uint8_t)(checksum >> 8));
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006c8a:	1212      	asrs	r2, r2, #8
 8006c8c:	b2d2      	uxtb	r2, r2
 8006c8e:	4611      	mov	r1, r2
 8006c90:	4798      	blx	r3
         stream->write((uint8_t)(checksum & 0xFF));
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	4618      	mov	r0, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006ca4:	b2d2      	uxtb	r2, r2
 8006ca6:	4611      	mov	r1, r2
 8006ca8:	4798      	blx	r3
 8006caa:	e092      	b.n	8006dd2 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x23e>
      }
      else
      {
         //lastCheck = millis(); // Update lastCheck so we enforce a full I2C_POLLING_WAIT
         // We need to make sure we don't send too much I2C data in one go (otherwise we will overflow the ATtiny841's I2C buffer)
         size_t bytes_to_send = txDataSize; // Send this many bytes in total
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	63fb      	str	r3, [r7, #60]	; 0x3c
         size_t i=0;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	63bb      	str	r3, [r7, #56]	; 0x38
         size_t nexti;
         while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 3)) // If there are too many bytes to send all in one go
 8006cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cb6:	2b1d      	cmp	r3, #29
 8006cb8:	d937      	bls.n	8006d2a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x196>
         {
            nexti = i + (TINY_I2C_BUFFER_LENGTH - 3);
 8006cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cbc:	331d      	adds	r3, #29
 8006cbe:	637b      	str	r3, [r7, #52]	; 0x34
            wireport->beginTransmission((uint8_t)deviceaddress);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	68da      	ldr	r2, [r3, #12]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	7c1b      	ldrb	r3, [r3, #16]
 8006cc8:	4619      	mov	r1, r3
 8006cca:	4610      	mov	r0, r2
 8006ccc:	f002 faaa 	bl	8009224 <_ZN7TwoWire17beginTransmissionEh>
            wireport->write(DATA_REG); // Point to the serial data 'register'
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	21ff      	movs	r1, #255	; 0xff
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7ff fa9a 	bl	8006210 <_ZN7TwoWire5writeEi>
            for (; i<nexti; ++i)
 8006cdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d219      	bcs.n	8006d18 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x184>
            {
               wireport->write(txData[i]); // Write each byte
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	68d8      	ldr	r0, [r3, #12]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	6879      	ldr	r1, [r7, #4]
 8006cf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cf4:	440a      	add	r2, r1
 8006cf6:	7812      	ldrb	r2, [r2, #0]
 8006cf8:	4611      	mov	r1, r2
 8006cfa:	4798      	blx	r3
               checksum += (uint16_t)txData[i];
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d00:	4413      	add	r3, r2
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006d0a:	4413      	add	r3, r2
 8006d0c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            for (; i<nexti; ++i)
 8006d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d12:	3301      	adds	r3, #1
 8006d14:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d16:	e7e1      	b.n	8006cdc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x148>
            }
            bytes_to_send = bytes_to_send - (TINY_I2C_BUFFER_LENGTH - 3); // Decrease the number of bytes still to send
 8006d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d1a:	3b1d      	subs	r3, #29
 8006d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
            wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	4618      	mov	r0, r3
 8006d24:	f002 fac8 	bl	80092b8 <_ZN7TwoWire15endTransmissionEv>
         while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 3)) // If there are too many bytes to send all in one go
 8006d28:	e7c4      	b.n	8006cb4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x120>
         }
         // There are now <= (TINY_I2C_BUFFER_LENGTH - 3) bytes left to send, so send them and then release the bus
         wireport->beginTransmission((uint8_t)deviceaddress);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	68da      	ldr	r2, [r3, #12]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	7c1b      	ldrb	r3, [r3, #16]
 8006d32:	4619      	mov	r1, r3
 8006d34:	4610      	mov	r0, r2
 8006d36:	f002 fa75 	bl	8009224 <_ZN7TwoWire17beginTransmissionEh>
         wireport->write(DATA_REG); // Point to the 'serial register'
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	21ff      	movs	r1, #255	; 0xff
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7ff fa65 	bl	8006210 <_ZN7TwoWire5writeEi>
         for (; i<txDataSize; ++i)
 8006d46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d219      	bcs.n	8006d82 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x1ee>
         {
            wireport->write(txData[i]);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	68d8      	ldr	r0, [r3, #12]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	6879      	ldr	r1, [r7, #4]
 8006d5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d5e:	440a      	add	r2, r1
 8006d60:	7812      	ldrb	r2, [r2, #0]
 8006d62:	4611      	mov	r1, r2
 8006d64:	4798      	blx	r3
            checksum += (uint16_t)txData[i];
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6a:	4413      	add	r3, r2
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006d74:	4413      	add	r3, r2
 8006d76:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
         for (; i<txDataSize; ++i)
 8006d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d80:	e7e1      	b.n	8006d46 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x1b2>
         }
         wireport->write((uint8_t)(checksum >> 8));
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	68d8      	ldr	r0, [r3, #12]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006d92:	1212      	asrs	r2, r2, #8
 8006d94:	b2d2      	uxtb	r2, r2
 8006d96:	4611      	mov	r1, r2
 8006d98:	4798      	blx	r3
         wireport->write((uint8_t)(checksum & 0xFF));
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	68da      	ldr	r2, [r3, #12]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8006daa:	b2c9      	uxtb	r1, r1
 8006dac:	4610      	mov	r0, r2
 8006dae:	4798      	blx	r3
         if (wireport->endTransmission() != 0) //Send data and release bus
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	4618      	mov	r0, r3
 8006db6:	f002 fa7f 	bl	80092b8 <_ZN7TwoWire15endTransmissionEv>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	bf14      	ite	ne
 8006dc0:	2301      	movne	r3, #1
 8006dc2:	2300      	moveq	r3, #0
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d003      	beq.n	8006dd2 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x23e>
            diagprint(F("I2C write was not successful!\r\n"));
 8006dca:	491f      	ldr	r1, [pc, #124]	; (8006e48 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2b4>)
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f001 f829 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      }

      consoleprint(F("["));
 8006dd2:	491e      	ldr	r1, [pc, #120]	; (8006e4c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2b8>)
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f001 f87d 	bl	8007ed4 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
      consoleprint((uint16_t)txDataSize);
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	4619      	mov	r1, r3
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f001 f8af 	bl	8007f44 <_ZN10IridiumSBD12consoleprintEt>
      consoleprint(F(" bytes]"));
 8006de6:	491a      	ldr	r1, [pc, #104]	; (8006e50 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2bc>)
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f001 f873 	bl	8007ed4 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

      diagprint(F("Checksum:"));
 8006dee:	4919      	ldr	r1, [pc, #100]	; (8006e54 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2c0>)
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f001 f817 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      diagprint(checksum);
 8006df6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f001 f849 	bl	8007e94 <_ZN10IridiumSBD9diagprintEt>
      diagprint(F("\r\n"));
 8006e02:	4915      	ldr	r1, [pc, #84]	; (8006e58 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2c4>)
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f001 f80d 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

      if (!waitForATResponse(NULL, 0, NULL, "0\r\n\r\nOK\r\n"))
 8006e0a:	4b14      	ldr	r3, [pc, #80]	; (8006e5c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2c8>)
 8006e0c:	9300      	str	r3, [sp, #0]
 8006e0e:	2300      	movs	r3, #0
 8006e10:	2200      	movs	r2, #0
 8006e12:	2100      	movs	r1, #0
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f000 fa25 	bl	8007264 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	f083 0301 	eor.w	r3, r3, #1
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f000 8091 	beq.w	8006f4a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b6>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f000 fad9 	bl	80073e0 <_ZN10IridiumSBD9cancelledEv>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d015      	beq.n	8006e60 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x2cc>
 8006e34:	2304      	movs	r3, #4
 8006e36:	e149      	b.n	80070cc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 8006e38:	08019d10 	.word	0x08019d10
 8006e3c:	08019d28 	.word	0x08019d28
 8006e40:	08019d34 	.word	0x08019d34
 8006e44:	08019d38 	.word	0x08019d38
 8006e48:	08019d40 	.word	0x08019d40
 8006e4c:	08019d60 	.word	0x08019d60
 8006e50:	08019d64 	.word	0x08019d64
 8006e54:	08019d6c 	.word	0x08019d6c
 8006e58:	08019cc0 	.word	0x08019cc0
 8006e5c:	08019d78 	.word	0x08019d78
 8006e60:	2303      	movs	r3, #3
 8006e62:	e133      	b.n	80070cc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
   }

   else // Text transmission
   {
#if true // use long string implementation
      if (txTxtMessage == NULL) // It's ok to have a NULL txtTxtMessage if the transaction is RX only
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d11d      	bne.n	8006ea6 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x312>
      {
         send(F("AT+SBDWT=\r"));
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	4999      	ldr	r1, [pc, #612]	; (80070d4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x540>)
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f000 fe59 	bl	8007b28 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
         if (!waitForATResponse())
 8006e76:	4b98      	ldr	r3, [pc, #608]	; (80070d8 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x544>)
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	2100      	movs	r1, #0
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f000 f9ef 	bl	8007264 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006e86:	4603      	mov	r3, r0
 8006e88:	f083 0301 	eor.w	r3, r3, #1
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d05c      	beq.n	8006f4c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b8>
            return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f000 faa4 	bl	80073e0 <_ZN10IridiumSBD9cancelledEv>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d001      	beq.n	8006ea2 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x30e>
 8006e9e:	2304      	movs	r3, #4
 8006ea0:	e114      	b.n	80070cc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e112      	b.n	80070cc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
      }
      else
      {
         // remove any embedded \r
         char *p = strchr(txTxtMessage, '\r');
 8006ea6:	210d      	movs	r1, #13
 8006ea8:	68b8      	ldr	r0, [r7, #8]
 8006eaa:	f00d fac8 	bl	801443e <strchr>
 8006eae:	6338      	str	r0, [r7, #48]	; 0x30
         if (p) *p = 0;
 8006eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d002      	beq.n	8006ebc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x328>
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb8:	2200      	movs	r2, #0
 8006eba:	701a      	strb	r2, [r3, #0]
         if (strlen(txTxtMessage) > ISBD_MAX_MESSAGE_LENGTH)
 8006ebc:	68b8      	ldr	r0, [r7, #8]
 8006ebe:	f7f9 f9a1 	bl	8000204 <strlen>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8006ec8:	d901      	bls.n	8006ece <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x33a>
            return ISBD_MSG_TOO_LONG;
 8006eca:	230d      	movs	r3, #13
 8006ecc:	e0fe      	b.n	80070cc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         send(F("AT+SBDWT\r"));
 8006ece:	2301      	movs	r3, #1
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	4982      	ldr	r1, [pc, #520]	; (80070dc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x548>)
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f000 fe27 	bl	8007b28 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
         if (!waitForATResponse(NULL, 0, NULL, "READY\r\n"))
 8006eda:	4b81      	ldr	r3, [pc, #516]	; (80070e0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x54c>)
 8006edc:	9300      	str	r3, [sp, #0]
 8006ede:	2300      	movs	r3, #0
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f000 f9bd 	bl	8007264 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006eea:	4603      	mov	r3, r0
 8006eec:	f083 0301 	eor.w	r3, r3, #1
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d009      	beq.n	8006f0a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x376>
            return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f000 fa72 	bl	80073e0 <_ZN10IridiumSBD9cancelledEv>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d001      	beq.n	8006f06 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x372>
 8006f02:	2304      	movs	r3, #4
 8006f04:	e0e2      	b.n	80070cc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 8006f06:	2303      	movs	r3, #3
 8006f08:	e0e0      	b.n	80070cc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         sendlong(txTxtMessage);
 8006f0a:	68b9      	ldr	r1, [r7, #8]
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f000 feb3 	bl	8007c78 <_ZN10IridiumSBD8sendlongEPKc>
         send("\r");
 8006f12:	4974      	ldr	r1, [pc, #464]	; (80070e4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x550>)
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f000 fe63 	bl	8007be0 <_ZN10IridiumSBD4sendEPKc>
         if (!waitForATResponse(NULL, 0, NULL, "0\r\n\r\nOK\r\n"))
 8006f1a:	4b73      	ldr	r3, [pc, #460]	; (80070e8 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x554>)
 8006f1c:	9300      	str	r3, [sp, #0]
 8006f1e:	2300      	movs	r3, #0
 8006f20:	2200      	movs	r2, #0
 8006f22:	2100      	movs	r1, #0
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f000 f99d 	bl	8007264 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	f083 0301 	eor.w	r3, r3, #1
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00a      	beq.n	8006f4c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b8>
            return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f000 fa52 	bl	80073e0 <_ZN10IridiumSBD9cancelledEv>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d001      	beq.n	8006f46 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3b2>
 8006f42:	2304      	movs	r3, #4
 8006f44:	e0c2      	b.n	80070cc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
 8006f46:	2303      	movs	r3, #3
 8006f48:	e0c0      	b.n	80070cc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8006f4a:	bf00      	nop
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
#endif
   }

   // Long SBDIX loop begins here
   for (unsigned long start = millis(); millis() - start < 1000UL * this->sendReceiveTimeout;)
 8006f4c:	f002 fe2a 	bl	8009ba4 <HAL_GetTick>
 8006f50:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006f52:	f002 fe27 	bl	8009ba4 <HAL_GetTick>
 8006f56:	4602      	mov	r2, r0
 8006f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f5a:	1ad2      	subs	r2, r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f60:	4619      	mov	r1, r3
 8006f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f66:	fb03 f301 	mul.w	r3, r3, r1
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	bf34      	ite	cc
 8006f6e:	2301      	movcc	r3, #1
 8006f70:	2300      	movcs	r3, #0
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f000 80a4 	beq.w	80070c2 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x52e>
   {
      bool okToProceed = true;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      if (this->msstmWorkaroundRequested)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00e      	beq.n	8006fa8 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x414>
      {
         okToProceed = false;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
         int ret = internalMSSTMWorkaround(okToProceed);
 8006f90:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8006f94:	4619      	mov	r1, r3
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f000 f902 	bl	80071a0 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb>
 8006f9c:	62b8      	str	r0, [r7, #40]	; 0x28
         if (ret != ISBD_SUCCESS)
 8006f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d001      	beq.n	8006fa8 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x414>
            return ret;
 8006fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa6:	e091      	b.n	80070cc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
      }

      if (okToProceed)
 8006fa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d077      	beq.n	80070a0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50c>
      {
         uint16_t moCode = 0, moMSN = 0, mtCode = 0, mtMSN = 0, mtLen = 0, mtRemaining = 0;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	843b      	strh	r3, [r7, #32]
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	83fb      	strh	r3, [r7, #30]
 8006fb8:	2300      	movs	r3, #0
 8006fba:	83bb      	strh	r3, [r7, #28]
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	837b      	strh	r3, [r7, #26]
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	833b      	strh	r3, [r7, #24]
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	82fb      	strh	r3, [r7, #22]
         int ret = doSBDIX(moCode, moMSN, mtCode, mtMSN, mtLen, mtRemaining);
 8006fc8:	f107 001c 	add.w	r0, r7, #28
 8006fcc:	f107 021e 	add.w	r2, r7, #30
 8006fd0:	f107 0120 	add.w	r1, r7, #32
 8006fd4:	f107 0316 	add.w	r3, r7, #22
 8006fd8:	9302      	str	r3, [sp, #8]
 8006fda:	f107 0318 	add.w	r3, r7, #24
 8006fde:	9301      	str	r3, [sp, #4]
 8006fe0:	f107 031a 	add.w	r3, r7, #26
 8006fe4:	9300      	str	r3, [sp, #0]
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f000 fa29 	bl	8007440 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_>
 8006fee:	6278      	str	r0, [r7, #36]	; 0x24
         if (ret != ISBD_SUCCESS)
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d001      	beq.n	8006ffa <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x466>
            return ret;
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff8:	e068      	b.n	80070cc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>

         diagprint(F("SBDIX MO code: "));
 8006ffa:	493c      	ldr	r1, [pc, #240]	; (80070ec <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x558>)
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f000 ff11 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
         diagprint(moCode);
 8007002:	8c3b      	ldrh	r3, [r7, #32]
 8007004:	4619      	mov	r1, r3
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f000 ff44 	bl	8007e94 <_ZN10IridiumSBD9diagprintEt>
         diagprint(F("\r\n"));
 800700c:	4938      	ldr	r1, [pc, #224]	; (80070f0 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x55c>)
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f000 ff08 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

         if (moCode <= 4) // this range indicates successful return!
 8007014:	8c3b      	ldrh	r3, [r7, #32]
 8007016:	2b04      	cmp	r3, #4
 8007018:	d820      	bhi.n	800705c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4c8>
         {
            diagprint(F("SBDIX success!\r\n"));
 800701a:	4936      	ldr	r1, [pc, #216]	; (80070f4 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x560>)
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f000 ff01 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

            this->remainingMessages = mtRemaining;
 8007022:	8afb      	ldrh	r3, [r7, #22]
 8007024:	461a      	mov	r2, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	675a      	str	r2, [r3, #116]	; 0x74
            if (mtCode == 1 && rxBuffer) // retrieved 1 message
 800702a:	8bbb      	ldrh	r3, [r7, #28]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d10d      	bne.n	800704c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4b8>
 8007030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00a      	beq.n	800704c <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4b8>
            {
               diagprint(F("Incoming message!\r\n"));
 8007036:	4930      	ldr	r1, [pc, #192]	; (80070f8 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x564>)
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f000 fef3 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
               return doSBDRB(rxBuffer, prxBufferSize);
 800703e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007040:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f000 fa62 	bl	800750c <_ZN10IridiumSBD7doSBDRBEPhPj>
 8007048:	4603      	mov	r3, r0
 800704a:	e028      	b.n	800709e <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50a>
            }

            else
            {
               // No data returned
               if (prxBufferSize)
 800704c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800704e:	2b00      	cmp	r3, #0
 8007050:	d002      	beq.n	8007058 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4c4>
                  *prxBufferSize = 0;
 8007052:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007054:	2200      	movs	r2, #0
 8007056:	601a      	str	r2, [r3, #0]
            }
            return ISBD_SUCCESS;
 8007058:	2300      	movs	r3, #0
 800705a:	e020      	b.n	800709e <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50a>
         }

         else if (moCode == 12 || moCode == 14 || moCode == 16) // fatal failure: no retry
 800705c:	8c3b      	ldrh	r3, [r7, #32]
 800705e:	2b0c      	cmp	r3, #12
 8007060:	d005      	beq.n	800706e <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4da>
 8007062:	8c3b      	ldrh	r3, [r7, #32]
 8007064:	2b0e      	cmp	r3, #14
 8007066:	d002      	beq.n	800706e <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4da>
 8007068:	8c3b      	ldrh	r3, [r7, #32]
 800706a:	2b10      	cmp	r3, #16
 800706c:	d105      	bne.n	800707a <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x4e6>
         {
            diagprint(F("SBDIX fatal!\r\n"));
 800706e:	4923      	ldr	r1, [pc, #140]	; (80070fc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x568>)
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f000 fed7 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
            return ISBD_SBDIX_FATAL_ERROR;
 8007076:	2306      	movs	r3, #6
 8007078:	e011      	b.n	800709e <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x50a>
         }

         else // retry
         {
            diagprint(F("Waiting for SBDIX retry...\r\n"));
 800707a:	4921      	ldr	r1, [pc, #132]	; (8007100 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x56c>)
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f000 fed1 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
            if (!noBlockWait(sbdixInterval))
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007086:	4619      	mov	r1, r3
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f000 f8c5 	bl	8007218 <_ZN10IridiumSBD11noBlockWaitEi>
 800708e:	4603      	mov	r3, r0
 8007090:	f083 0301 	eor.w	r3, r3, #1
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b00      	cmp	r3, #0
 8007098:	f43f af5b 	beq.w	8006f52 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3be>
               return ISBD_CANCELLED;
 800709c:	2304      	movs	r3, #4
            return ret;
 800709e:	e015      	b.n	80070cc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
         }
      }

      else // MSSTM check fail
      {
         diagprint(F("Waiting for MSSTM retry...\r\n"));
 80070a0:	4918      	ldr	r1, [pc, #96]	; (8007104 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x570>)
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f000 febe 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
         if (!noBlockWait(ISBD_MSSTM_RETRY_INTERVAL))
 80070a8:	210a      	movs	r1, #10
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f000 f8b4 	bl	8007218 <_ZN10IridiumSBD11noBlockWaitEi>
 80070b0:	4603      	mov	r3, r0
 80070b2:	f083 0301 	eor.w	r3, r3, #1
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f43f af4a 	beq.w	8006f52 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x3be>
            return ISBD_CANCELLED;
 80070be:	2304      	movs	r3, #4
 80070c0:	e004      	b.n	80070cc <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x538>
      }
   } // big wait loop

   diagprint(F("SBDIX timeout!\r\n"));
 80070c2:	4911      	ldr	r1, [pc, #68]	; (8007108 <_ZN10IridiumSBD22internalSendReceiveSBDEPKcPKhjPhPj+0x574>)
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f000 fead 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   return ISBD_SENDRECEIVE_TIMEOUT;
 80070ca:	2307      	movs	r3, #7
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3748      	adds	r7, #72	; 0x48
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	08019d84 	.word	0x08019d84
 80070d8:	08019914 	.word	0x08019914
 80070dc:	08019d90 	.word	0x08019d90
 80070e0:	08019d38 	.word	0x08019d38
 80070e4:	08019d34 	.word	0x08019d34
 80070e8:	08019d78 	.word	0x08019d78
 80070ec:	08019d9c 	.word	0x08019d9c
 80070f0:	08019cc0 	.word	0x08019cc0
 80070f4:	08019dac 	.word	0x08019dac
 80070f8:	08019dc0 	.word	0x08019dc0
 80070fc:	08019dd4 	.word	0x08019dd4
 8007100:	08019de4 	.word	0x08019de4
 8007104:	08019e04 	.word	0x08019e04
 8007108:	08019e24 	.word	0x08019e24

0800710c <_ZN10IridiumSBD24internalGetSignalQualityERi>:

int IridiumSBD::internalGetSignalQuality(int &quality)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b086      	sub	sp, #24
 8007110:	af02      	add	r7, sp, #8
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
   if (this->asleep)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800711c:	2b00      	cmp	r3, #0
 800711e:	d001      	beq.n	8007124 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x18>
      return ISBD_IS_ASLEEP;
 8007120:	230a      	movs	r3, #10
 8007122:	e032      	b.n	800718a <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>

   char csqResponseBuf[2];

   send(F("AT+CSQ\r"));
 8007124:	2301      	movs	r3, #1
 8007126:	2201      	movs	r2, #1
 8007128:	491a      	ldr	r1, [pc, #104]	; (8007194 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x88>)
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 fcfc 	bl	8007b28 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(csqResponseBuf, sizeof(csqResponseBuf), "+CSQ:"))
 8007130:	f107 010c 	add.w	r1, r7, #12
 8007134:	4b18      	ldr	r3, [pc, #96]	; (8007198 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x8c>)
 8007136:	9300      	str	r3, [sp, #0]
 8007138:	4b18      	ldr	r3, [pc, #96]	; (800719c <_ZN10IridiumSBD24internalGetSignalQualityERi+0x90>)
 800713a:	2202      	movs	r2, #2
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 f891 	bl	8007264 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8007142:	4603      	mov	r3, r0
 8007144:	f083 0301 	eor.w	r3, r3, #1
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d009      	beq.n	8007162 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x56>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f946 	bl	80073e0 <_ZN10IridiumSBD9cancelledEv>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d001      	beq.n	800715e <_ZN10IridiumSBD24internalGetSignalQualityERi+0x52>
 800715a:	2304      	movs	r3, #4
 800715c:	e015      	b.n	800718a <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>
 800715e:	2303      	movs	r3, #3
 8007160:	e013      	b.n	800718a <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>

   if (isdigit(csqResponseBuf[0]))
 8007162:	7b3b      	ldrb	r3, [r7, #12]
 8007164:	3b30      	subs	r3, #48	; 0x30
 8007166:	2b09      	cmp	r3, #9
 8007168:	bf94      	ite	ls
 800716a:	2301      	movls	r3, #1
 800716c:	2300      	movhi	r3, #0
 800716e:	b2db      	uxtb	r3, r3
 8007170:	2b00      	cmp	r3, #0
 8007172:	d009      	beq.n	8007188 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7c>
   {
      quality = atoi(csqResponseBuf);
 8007174:	f107 030c 	add.w	r3, r7, #12
 8007178:	4618      	mov	r0, r3
 800717a:	f00b fb50 	bl	801281e <atoi>
 800717e:	4602      	mov	r2, r0
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	601a      	str	r2, [r3, #0]
      return ISBD_SUCCESS;
 8007184:	2300      	movs	r3, #0
 8007186:	e000      	b.n	800718a <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>
   }

   return ISBD_PROTOCOL_ERROR;
 8007188:	2303      	movs	r3, #3
}
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	08019e38 	.word	0x08019e38
 8007198:	08019914 	.word	0x08019914
 800719c:	08019e40 	.word	0x08019e40

080071a0 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb>:

int IridiumSBD::internalMSSTMWorkaround(bool &okToProceed)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b08a      	sub	sp, #40	; 0x28
 80071a4:	af02      	add	r7, sp, #8
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
   satellite. Ensuring that the received signal strength reported in response to AT command +CSQ and +CIER is above 2-3 bars
   before attempting SBD communication will protect against lockout.
   */
   char msstmResponseBuf[24];

   send(F("AT-MSSTM\r"));
 80071aa:	2301      	movs	r3, #1
 80071ac:	2201      	movs	r2, #1
 80071ae:	4917      	ldr	r1, [pc, #92]	; (800720c <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x6c>)
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 fcb9 	bl	8007b28 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(msstmResponseBuf, sizeof(msstmResponseBuf), "-MSSTM: "))
 80071b6:	f107 0108 	add.w	r1, r7, #8
 80071ba:	4b15      	ldr	r3, [pc, #84]	; (8007210 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x70>)
 80071bc:	9300      	str	r3, [sp, #0]
 80071be:	4b15      	ldr	r3, [pc, #84]	; (8007214 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x74>)
 80071c0:	2218      	movs	r2, #24
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 f84e 	bl	8007264 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80071c8:	4603      	mov	r3, r0
 80071ca:	f083 0301 	eor.w	r3, r3, #1
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d009      	beq.n	80071e8 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x48>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f903 	bl	80073e0 <_ZN10IridiumSBD9cancelledEv>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d001      	beq.n	80071e4 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x44>
 80071e0:	2304      	movs	r3, #4
 80071e2:	e00e      	b.n	8007202 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x62>
 80071e4:	2303      	movs	r3, #3
 80071e6:	e00c      	b.n	8007202 <_ZN10IridiumSBD23internalMSSTMWorkaroundERb+0x62>

   // Response buf now contains either an 8-digit number or the string "no network service"
   okToProceed = isxdigit(msstmResponseBuf[0]);
 80071e8:	7a3b      	ldrb	r3, [r7, #8]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f00b fc40 	bl	8012a70 <isxdigit>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	bf14      	ite	ne
 80071f6:	2301      	movne	r3, #1
 80071f8:	2300      	moveq	r3, #0
 80071fa:	b2da      	uxtb	r2, r3
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	701a      	strb	r2, [r3, #0]
   return ISBD_SUCCESS;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	3720      	adds	r7, #32
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	080198fc 	.word	0x080198fc
 8007210:	08019914 	.word	0x08019914
 8007214:	08019908 	.word	0x08019908

08007218 <_ZN10IridiumSBD11noBlockWaitEi>:

   return ISBD_SUCCESS;
}

bool IridiumSBD::noBlockWait(int seconds)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
   for (unsigned long start=millis(); millis() - start < 1000UL * seconds;)
 8007222:	f002 fcbf 	bl	8009ba4 <HAL_GetTick>
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	f002 fcbc 	bl	8009ba4 <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	1ad2      	subs	r2, r2, r3
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007238:	fb01 f303 	mul.w	r3, r1, r3
 800723c:	429a      	cmp	r2, r3
 800723e:	bf34      	ite	cc
 8007240:	2301      	movcc	r3, #1
 8007242:	2300      	movcs	r3, #0
 8007244:	b2db      	uxtb	r3, r3
 8007246:	2b00      	cmp	r3, #0
 8007248:	d007      	beq.n	800725a <_ZN10IridiumSBD11noBlockWaitEi+0x42>
      if (cancelled())
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f8c8 	bl	80073e0 <_ZN10IridiumSBD9cancelledEv>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d0e8      	beq.n	8007228 <_ZN10IridiumSBD11noBlockWaitEi+0x10>
         return false;
 8007256:	2300      	movs	r3, #0
 8007258:	e000      	b.n	800725c <_ZN10IridiumSBD11noBlockWaitEi+0x44>

   return true;
 800725a:	2301      	movs	r3, #1
}
 800725c:	4618      	mov	r0, r3
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>:

// Wait for response from previous AT command.  This process terminates when "terminator" string is seen or upon timeout.
// If "prompt" string is provided (example "+CSQ:"), then all characters following prompt up to the next CRLF are
// stored in response buffer for later parsing by caller.
bool IridiumSBD::waitForATResponse(char *response, int responseSize, const char *prompt, const char *terminator)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b08a      	sub	sp, #40	; 0x28
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
 8007270:	603b      	str	r3, [r7, #0]
   diagprint(F("Waiting for response "));
 8007272:	4959      	ldr	r1, [pc, #356]	; (80073d8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x174>)
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f000 fdd5 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   diagprint(terminator);
 800727a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f000 fdef 	bl	8007e60 <_ZN10IridiumSBD9diagprintEPKc>
   this->print((char*) terminator); //TODO doesn't print otherwise
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007288:	4798      	blx	r3
   diagprint(F("\r\n"));
 800728a:	4954      	ldr	r1, [pc, #336]	; (80073dc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x178>)
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f000 fdc9 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (response)
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d005      	beq.n	80072a4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x40>
      memset(response, 0, responseSize);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	461a      	mov	r2, r3
 800729c:	2100      	movs	r1, #0
 800729e:	68b8      	ldr	r0, [r7, #8]
 80072a0:	f00b fd40 	bl	8012d24 <memset>

   int matchPromptPos = 0; // Matches chars in prompt
 80072a4:	2300      	movs	r3, #0
 80072a6:	627b      	str	r3, [r7, #36]	; 0x24
   int matchTerminatorPos = 0; // Matches chars in terminator
 80072a8:	2300      	movs	r3, #0
 80072aa:	623b      	str	r3, [r7, #32]
   enum {LOOKING_FOR_PROMPT, GATHERING_RESPONSE, LOOKING_FOR_TERMINATOR};
   int promptState = prompt ? LOOKING_FOR_PROMPT : LOOKING_FOR_TERMINATOR;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d001      	beq.n	80072b6 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x52>
 80072b2:	2300      	movs	r3, #0
 80072b4:	e000      	b.n	80072b8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x54>
 80072b6:	2302      	movs	r3, #2
 80072b8:	61fb      	str	r3, [r7, #28]
   //consoleprint(F("<< ")); //TODO If we comment out this it looks cleaner in the serial

   for (unsigned long start=millis(); millis() - start < 1000UL * atTimeout;)
 80072ba:	f002 fc73 	bl	8009ba4 <HAL_GetTick>
 80072be:	61b8      	str	r0, [r7, #24]
 80072c0:	f002 fc70 	bl	8009ba4 <HAL_GetTick>
 80072c4:	4602      	mov	r2, r0
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	1ad2      	subs	r2, r2, r3
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ce:	4619      	mov	r1, r3
 80072d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072d4:	fb03 f301 	mul.w	r3, r3, r1
 80072d8:	429a      	cmp	r2, r3
 80072da:	bf34      	ite	cc
 80072dc:	2301      	movcc	r3, #1
 80072de:	2300      	movcs	r3, #0
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d072      	beq.n	80073cc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x168>
   {
      if (cancelled())
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	f000 f87a 	bl	80073e0 <_ZN10IridiumSBD9cancelledEv>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d001      	beq.n	80072f6 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x92>
         return false;
 80072f2:	2300      	movs	r3, #0
 80072f4:	e06b      	b.n	80073ce <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x16a>

      while (filteredavailable() > 0)
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f000 ff52 	bl	80081a0 <_ZN10IridiumSBD17filteredavailableEv>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	bfcc      	ite	gt
 8007302:	2301      	movgt	r3, #1
 8007304:	2300      	movle	r3, #0
 8007306:	b2db      	uxtb	r3, r3
 8007308:	2b00      	cmp	r3, #0
 800730a:	d0d9      	beq.n	80072c0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x5c>
      {
         char c = filteredread();
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f000 ff63 	bl	80081d8 <_ZN10IridiumSBD12filteredreadEv>
 8007312:	4603      	mov	r3, r0
 8007314:	75fb      	strb	r3, [r7, #23]
         if (prompt)
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d03b      	beq.n	8007394 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x130>
         {
            switch (promptState)
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d003      	beq.n	800732a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xc6>
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d01d      	beq.n	8007364 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x100>
 8007328:	e034      	b.n	8007394 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x130>
            {
            case LOOKING_FOR_PROMPT:
               if (c == prompt[matchPromptPos])
 800732a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732c:	683a      	ldr	r2, [r7, #0]
 800732e:	4413      	add	r3, r2
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	7dfa      	ldrb	r2, [r7, #23]
 8007334:	429a      	cmp	r2, r3
 8007336:	d10b      	bne.n	8007350 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xec>
               {
                  ++matchPromptPos;
 8007338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733a:	3301      	adds	r3, #1
 800733c:	627b      	str	r3, [r7, #36]	; 0x24
                  if (prompt[matchPromptPos] == '\0')
 800733e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007340:	683a      	ldr	r2, [r7, #0]
 8007342:	4413      	add	r3, r2
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d121      	bne.n	800738e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12a>
                     promptState = GATHERING_RESPONSE;
 800734a:	2301      	movs	r3, #1
 800734c:	61fb      	str	r3, [r7, #28]
               else
               {
                  matchPromptPos = c == prompt[0] ? 1 : 0;
               }

               break;
 800734e:	e01e      	b.n	800738e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12a>
                  matchPromptPos = c == prompt[0] ? 1 : 0;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	7dfa      	ldrb	r2, [r7, #23]
 8007356:	429a      	cmp	r2, r3
 8007358:	d101      	bne.n	800735e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xfa>
 800735a:	2301      	movs	r3, #1
 800735c:	e000      	b.n	8007360 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xfc>
 800735e:	2300      	movs	r3, #0
 8007360:	627b      	str	r3, [r7, #36]	; 0x24
               break;
 8007362:	e014      	b.n	800738e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12a>
            case GATHERING_RESPONSE: // gathering response from end of prompt to first \r
               if (response)
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d013      	beq.n	8007392 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12e>
               {
                  if (c == '\r' || responseSize < 2)
 800736a:	7dfb      	ldrb	r3, [r7, #23]
 800736c:	2b0d      	cmp	r3, #13
 800736e:	d002      	beq.n	8007376 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x112>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2b01      	cmp	r3, #1
 8007374:	dc02      	bgt.n	800737c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x118>
                  {
                     promptState = LOOKING_FOR_TERMINATOR;
 8007376:	2302      	movs	r3, #2
 8007378:	61fb      	str	r3, [r7, #28]
                  {
                     *response++ = c;
                     responseSize--;
                  }
               }
               break;
 800737a:	e00a      	b.n	8007392 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12e>
                     *response++ = c;
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	1c5a      	adds	r2, r3, #1
 8007380:	60ba      	str	r2, [r7, #8]
 8007382:	7dfa      	ldrb	r2, [r7, #23]
 8007384:	701a      	strb	r2, [r3, #0]
                     responseSize--;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	3b01      	subs	r3, #1
 800738a:	607b      	str	r3, [r7, #4]
               break;
 800738c:	e001      	b.n	8007392 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12e>
               break;
 800738e:	bf00      	nop
 8007390:	e000      	b.n	8007394 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x130>
               break;
 8007392:	bf00      	nop
            }
         }

         if (c == terminator[matchTerminatorPos])
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007398:	4413      	add	r3, r2
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	7dfa      	ldrb	r2, [r7, #23]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d10a      	bne.n	80073b8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x154>
         {
            ++matchTerminatorPos;
 80073a2:	6a3b      	ldr	r3, [r7, #32]
 80073a4:	3301      	adds	r3, #1
 80073a6:	623b      	str	r3, [r7, #32]
            if (terminator[matchTerminatorPos] == '\0')
 80073a8:	6a3b      	ldr	r3, [r7, #32]
 80073aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ac:	4413      	add	r3, r2
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1a0      	bne.n	80072f6 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x92>
               return true;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e00a      	b.n	80073ce <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x16a>
         }
         else
         {
            matchTerminatorPos = c == terminator[0] ? 1 : 0;
 80073b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	7dfa      	ldrb	r2, [r7, #23]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d101      	bne.n	80073c6 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x162>
 80073c2:	2301      	movs	r3, #1
 80073c4:	e000      	b.n	80073c8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x164>
 80073c6:	2300      	movs	r3, #0
 80073c8:	623b      	str	r3, [r7, #32]
      while (filteredavailable() > 0)
 80073ca:	e794      	b.n	80072f6 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x92>
         }
      } // while (filteredavailable() > 0)
   } // timer loop
   return false;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3728      	adds	r7, #40	; 0x28
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	08019e48 	.word	0x08019e48
 80073dc:	08019cc0 	.word	0x08019cc0

080073e0 <_ZN10IridiumSBD9cancelledEv>:

bool IridiumSBD::cancelled()
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
   if (this->useSerial)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	7c5b      	ldrb	r3, [r3, #17]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d019      	beq.n	8007424 <_ZN10IridiumSBD9cancelledEv+0x44>
   {
	   //TODO For some reason when using digitalRead here it didn't work so simply replaced with HAL function
	   //if ((ringPin != -1) && digitalRead(ringPin) == LOW)
	     if ((ringPin != -1) && HAL_GPIO_ReadPin(ringPin_GPIO_Port,ringPin_Pin) == LOW)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073fa:	d008      	beq.n	800740e <_ZN10IridiumSBD9cancelledEv+0x2e>
 80073fc:	2110      	movs	r1, #16
 80073fe:	480e      	ldr	r0, [pc, #56]	; (8007438 <_ZN10IridiumSBD9cancelledEv+0x58>)
 8007400:	f003 fad0 	bl	800a9a4 <HAL_GPIO_ReadPin>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d101      	bne.n	800740e <_ZN10IridiumSBD9cancelledEv+0x2e>
 800740a:	2301      	movs	r3, #1
 800740c:	e000      	b.n	8007410 <_ZN10IridiumSBD9cancelledEv+0x30>
 800740e:	2300      	movs	r3, #0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d007      	beq.n	8007424 <_ZN10IridiumSBD9cancelledEv+0x44>
	  {
         ringAsserted = true;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
		 diagprint(F("ringPin seen!\r\n"));
 800741c:	4907      	ldr	r1, [pc, #28]	; (800743c <_ZN10IridiumSBD9cancelledEv+0x5c>)
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fd00 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
	  }
   }

   return !ISBDCallback();
 8007424:	f7fe ff06 	bl	8006234 <_Z12ISBDCallbackv>
 8007428:	4603      	mov	r3, r0
 800742a:	f083 0301 	eor.w	r3, r3, #1
 800742e:	b2db      	uxtb	r3, r3
}
 8007430:	4618      	mov	r0, r3
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	40020800 	.word	0x40020800
 800743c:	08019e60 	.word	0x08019e60

08007440 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_>:

int IridiumSBD::doSBDIX(uint16_t &moCode, uint16_t &moMSN, uint16_t &mtCode, uint16_t &mtMSN, uint16_t &mtLen, uint16_t &mtRemaining)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b096      	sub	sp, #88	; 0x58
 8007444:	af02      	add	r7, sp, #8
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
 800744c:	603b      	str	r3, [r7, #0]
   // Returns xx,xxxxx,xx,xxxxx,xx,xxx
   char sbdixResponseBuf[32];
   send(F("AT+SBDIX\r"));
 800744e:	2301      	movs	r3, #1
 8007450:	2201      	movs	r2, #1
 8007452:	492a      	ldr	r1, [pc, #168]	; (80074fc <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xbc>)
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 fb67 	bl	8007b28 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(sbdixResponseBuf, sizeof(sbdixResponseBuf), "+SBDIX: "))
 800745a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800745e:	4b28      	ldr	r3, [pc, #160]	; (8007500 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xc0>)
 8007460:	9300      	str	r3, [sp, #0]
 8007462:	4b28      	ldr	r3, [pc, #160]	; (8007504 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xc4>)
 8007464:	2220      	movs	r2, #32
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f7ff fefc 	bl	8007264 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 800746c:	4603      	mov	r3, r0
 800746e:	f083 0301 	eor.w	r3, r3, #1
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b00      	cmp	r3, #0
 8007476:	d009      	beq.n	800748c <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x4c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f7ff ffb1 	bl	80073e0 <_ZN10IridiumSBD9cancelledEv>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d001      	beq.n	8007488 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x48>
 8007484:	2304      	movs	r3, #4
 8007486:	e035      	b.n	80074f4 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb4>
 8007488:	2303      	movs	r3, #3
 800748a:	e033      	b.n	80074f4 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb4>

   uint16_t *values[6] = { &moCode, &moMSN, &mtCode, &mtMSN, &mtLen, &mtRemaining };
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	613b      	str	r3, [r7, #16]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	617b      	str	r3, [r7, #20]
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	61bb      	str	r3, [r7, #24]
 8007498:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800749a:	61fb      	str	r3, [r7, #28]
 800749c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800749e:	623b      	str	r3, [r7, #32]
 80074a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074a2:	627b      	str	r3, [r7, #36]	; 0x24
   for (int i=0; i<6; ++i)
 80074a4:	2300      	movs	r3, #0
 80074a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074aa:	2b05      	cmp	r3, #5
 80074ac:	dc21      	bgt.n	80074f2 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb2>
   {
      char *p = strtok(i == 0 ? sbdixResponseBuf : NULL, ", ");
 80074ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d102      	bne.n	80074ba <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x7a>
 80074b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80074b8:	e000      	b.n	80074bc <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x7c>
 80074ba:	2300      	movs	r3, #0
 80074bc:	4912      	ldr	r1, [pc, #72]	; (8007508 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xc8>)
 80074be:	4618      	mov	r0, r3
 80074c0:	f00d fe12 	bl	80150e8 <strtok>
 80074c4:	64b8      	str	r0, [r7, #72]	; 0x48
      if (p == NULL)
 80074c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d101      	bne.n	80074d0 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x90>
         return ISBD_PROTOCOL_ERROR;
 80074cc:	2303      	movs	r3, #3
 80074ce:	e011      	b.n	80074f4 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0xb4>
      *values[i] = atol(p);
 80074d0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80074d2:	f00b f9a8 	bl	8012826 <atol>
 80074d6:	4602      	mov	r2, r0
 80074d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80074e0:	440b      	add	r3, r1
 80074e2:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80074e6:	b292      	uxth	r2, r2
 80074e8:	801a      	strh	r2, [r3, #0]
   for (int i=0; i<6; ++i)
 80074ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074ec:	3301      	adds	r3, #1
 80074ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074f0:	e7da      	b.n	80074a8 <_ZN10IridiumSBD7doSBDIXERtS0_S0_S0_S0_S0_+0x68>
   }
   return ISBD_SUCCESS;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3750      	adds	r7, #80	; 0x50
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	08019e70 	.word	0x08019e70
 8007500:	08019914 	.word	0x08019914
 8007504:	08019e7c 	.word	0x08019e7c
 8007508:	08019e88 	.word	0x08019e88

0800750c <_ZN10IridiumSBD7doSBDRBEPhPj>:

int IridiumSBD::doSBDRB(uint8_t *rxBuffer, size_t *prxBufferSize)
{
 800750c:	b590      	push	{r4, r7, lr}
 800750e:	b08b      	sub	sp, #44	; 0x2c
 8007510:	af02      	add	r7, sp, #8
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
   bool rxOverflow = false;
 8007518:	2300      	movs	r3, #0
 800751a:	77fb      	strb	r3, [r7, #31]

   send(F("AT+SBDRB\r"));
 800751c:	2301      	movs	r3, #1
 800751e:	2201      	movs	r2, #1
 8007520:	49a2      	ldr	r1, [pc, #648]	; (80077ac <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a0>)
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	f000 fb00 	bl	8007b28 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(NULL, 0, NULL, "AT+SBDRB\r")) // waits for its own echo
 8007528:	4ba0      	ldr	r3, [pc, #640]	; (80077ac <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a0>)
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	2300      	movs	r3, #0
 800752e:	2200      	movs	r2, #0
 8007530:	2100      	movs	r1, #0
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f7ff fe96 	bl	8007264 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8007538:	4603      	mov	r3, r0
 800753a:	f083 0301 	eor.w	r3, r3, #1
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b00      	cmp	r3, #0
 8007542:	d009      	beq.n	8007558 <_ZN10IridiumSBD7doSBDRBEPhPj+0x4c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f7ff ff4b 	bl	80073e0 <_ZN10IridiumSBD9cancelledEv>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d001      	beq.n	8007554 <_ZN10IridiumSBD7doSBDRBEPhPj+0x48>
 8007550:	2304      	movs	r3, #4
 8007552:	e223      	b.n	800799c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
 8007554:	2303      	movs	r3, #3
 8007556:	e221      	b.n	800799c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   if(!this->useSerial) check9603data(); // Check for any 9603 serial data
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	7c5b      	ldrb	r3, [r3, #17]
 800755c:	f083 0301 	eor.w	r3, r3, #1
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d002      	beq.n	800756c <_ZN10IridiumSBD7doSBDRBEPhPj+0x60>
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f000 fe7c 	bl	8008264 <_ZN10IridiumSBD13check9603dataEv>

   // Time to read the binary data: size[2], body[size], checksum[2]
   unsigned long start = millis();
 800756c:	f002 fb1a 	bl	8009ba4 <HAL_GetTick>
 8007570:	6138      	str	r0, [r7, #16]
   while (millis() - start < 1000UL * atTimeout)
 8007572:	f002 fb17 	bl	8009ba4 <HAL_GetTick>
 8007576:	4602      	mov	r2, r0
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	1ad2      	subs	r2, r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007580:	4619      	mov	r1, r3
 8007582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007586:	fb03 f301 	mul.w	r3, r3, r1
 800758a:	429a      	cmp	r2, r3
 800758c:	bf34      	ite	cc
 800758e:	2301      	movcc	r3, #1
 8007590:	2300      	movcs	r3, #0
 8007592:	b2db      	uxtb	r3, r3
 8007594:	2b00      	cmp	r3, #0
 8007596:	d03c      	beq.n	8007612 <_ZN10IridiumSBD7doSBDRBEPhPj+0x106>
   {
      if(!this->useSerial) check9603data(); // Keep checking for new 9603 serial data
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	7c5b      	ldrb	r3, [r3, #17]
 800759c:	f083 0301 	eor.w	r3, r3, #1
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d002      	beq.n	80075ac <_ZN10IridiumSBD7doSBDRBEPhPj+0xa0>
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f000 fe5c 	bl	8008264 <_ZN10IridiumSBD13check9603dataEv>
      if (cancelled())
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f7ff ff17 	bl	80073e0 <_ZN10IridiumSBD9cancelledEv>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d001      	beq.n	80075bc <_ZN10IridiumSBD7doSBDRBEPhPj+0xb0>
         return ISBD_CANCELLED;
 80075b8:	2304      	movs	r3, #4
 80075ba:	e1ef      	b.n	800799c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
      if (this->useSerial && (stream->available() >= 2))
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	7c5b      	ldrb	r3, [r3, #17]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00d      	beq.n	80075e0 <_ZN10IridiumSBD7doSBDRBEPhPj+0xd4>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	689a      	ldr	r2, [r3, #8]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	3308      	adds	r3, #8
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4610      	mov	r0, r2
 80075d4:	4798      	blx	r3
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b01      	cmp	r3, #1
 80075da:	dd01      	ble.n	80075e0 <_ZN10IridiumSBD7doSBDRBEPhPj+0xd4>
 80075dc:	2301      	movs	r3, #1
 80075de:	e000      	b.n	80075e2 <_ZN10IridiumSBD7doSBDRBEPhPj+0xd6>
 80075e0:	2300      	movs	r3, #0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d112      	bne.n	800760c <_ZN10IridiumSBD7doSBDRBEPhPj+0x100>
         break;
      if ((!this->useSerial) && (i2cSerAvailable() >= 2))
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	7c5b      	ldrb	r3, [r3, #17]
 80075ea:	f083 0301 	eor.w	r3, r3, #1
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d007      	beq.n	8007604 <_ZN10IridiumSBD7doSBDRBEPhPj+0xf8>
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f000 ff65 	bl	80084c4 <_ZN10IridiumSBD15i2cSerAvailableEv>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	dd01      	ble.n	8007604 <_ZN10IridiumSBD7doSBDRBEPhPj+0xf8>
 8007600:	2301      	movs	r3, #1
 8007602:	e000      	b.n	8007606 <_ZN10IridiumSBD7doSBDRBEPhPj+0xfa>
 8007604:	2300      	movs	r3, #0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d102      	bne.n	8007610 <_ZN10IridiumSBD7doSBDRBEPhPj+0x104>
   while (millis() - start < 1000UL * atTimeout)
 800760a:	e7b2      	b.n	8007572 <_ZN10IridiumSBD7doSBDRBEPhPj+0x66>
         break;
 800760c:	bf00      	nop
 800760e:	e000      	b.n	8007612 <_ZN10IridiumSBD7doSBDRBEPhPj+0x106>
         break;
 8007610:	bf00      	nop
   }

   if (this->useSerial && (stream->available() < 2))
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	7c5b      	ldrb	r3, [r3, #17]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00d      	beq.n	8007636 <_ZN10IridiumSBD7doSBDRBEPhPj+0x12a>
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	689a      	ldr	r2, [r3, #8]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	3308      	adds	r3, #8
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4610      	mov	r0, r2
 800762a:	4798      	blx	r3
 800762c:	4603      	mov	r3, r0
 800762e:	2b01      	cmp	r3, #1
 8007630:	dc01      	bgt.n	8007636 <_ZN10IridiumSBD7doSBDRBEPhPj+0x12a>
 8007632:	2301      	movs	r3, #1
 8007634:	e000      	b.n	8007638 <_ZN10IridiumSBD7doSBDRBEPhPj+0x12c>
 8007636:	2300      	movs	r3, #0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d001      	beq.n	8007640 <_ZN10IridiumSBD7doSBDRBEPhPj+0x134>
      return ISBD_SENDRECEIVE_TIMEOUT;
 800763c:	2307      	movs	r3, #7
 800763e:	e1ad      	b.n	800799c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
   if ((!this->useSerial) && (i2cSerAvailable() < 2))
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	7c5b      	ldrb	r3, [r3, #17]
 8007644:	f083 0301 	eor.w	r3, r3, #1
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d007      	beq.n	800765e <_ZN10IridiumSBD7doSBDRBEPhPj+0x152>
 800764e:	68f8      	ldr	r0, [r7, #12]
 8007650:	f000 ff38 	bl	80084c4 <_ZN10IridiumSBD15i2cSerAvailableEv>
 8007654:	4603      	mov	r3, r0
 8007656:	2b01      	cmp	r3, #1
 8007658:	dc01      	bgt.n	800765e <_ZN10IridiumSBD7doSBDRBEPhPj+0x152>
 800765a:	2301      	movs	r3, #1
 800765c:	e000      	b.n	8007660 <_ZN10IridiumSBD7doSBDRBEPhPj+0x154>
 800765e:	2300      	movs	r3, #0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d001      	beq.n	8007668 <_ZN10IridiumSBD7doSBDRBEPhPj+0x15c>
      return ISBD_SENDRECEIVE_TIMEOUT;
 8007664:	2307      	movs	r3, #7
 8007666:	e199      	b.n	800799c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   uint16_t size;
   if (this->useSerial)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	7c5b      	ldrb	r3, [r3, #17]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d01a      	beq.n	80076a6 <_ZN10IridiumSBD7doSBDRBEPhPj+0x19a>
   {
      size = 256 * stream->read() + stream->read();
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	689a      	ldr	r2, [r3, #8]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	330c      	adds	r3, #12
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4610      	mov	r0, r2
 8007680:	4798      	blx	r3
 8007682:	4603      	mov	r3, r0
 8007684:	b29b      	uxth	r3, r3
 8007686:	021b      	lsls	r3, r3, #8
 8007688:	b29c      	uxth	r4, r3
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	689a      	ldr	r2, [r3, #8]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	330c      	adds	r3, #12
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4610      	mov	r0, r2
 800769a:	4798      	blx	r3
 800769c:	4603      	mov	r3, r0
 800769e:	b29b      	uxth	r3, r3
 80076a0:	4423      	add	r3, r4
 80076a2:	83bb      	strh	r3, [r7, #28]
 80076a4:	e00d      	b.n	80076c2 <_ZN10IridiumSBD7doSBDRBEPhPj+0x1b6>
   }
   else
   {
      size = 256 * i2cSerRead() + i2cSerRead();
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f000 ff24 	bl	80084f4 <_ZN10IridiumSBD10i2cSerReadEv>
 80076ac:	4603      	mov	r3, r0
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	021b      	lsls	r3, r3, #8
 80076b2:	b29c      	uxth	r4, r3
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f000 ff1d 	bl	80084f4 <_ZN10IridiumSBD10i2cSerReadEv>
 80076ba:	4603      	mov	r3, r0
 80076bc:	b29b      	uxth	r3, r3
 80076be:	4423      	add	r3, r4
 80076c0:	83bb      	strh	r3, [r7, #28]
   }
   consoleprint(F("[Binary size:"));
 80076c2:	493b      	ldr	r1, [pc, #236]	; (80077b0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a4>)
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f000 fc05 	bl	8007ed4 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(size);
 80076ca:	8bbb      	ldrh	r3, [r7, #28]
 80076cc:	4619      	mov	r1, r3
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f000 fc38 	bl	8007f44 <_ZN10IridiumSBD12consoleprintEt>
   consoleprint(F("]"));
 80076d4:	4937      	ldr	r1, [pc, #220]	; (80077b4 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2a8>)
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f000 fbfc 	bl	8007ed4 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

   for (uint16_t bytesRead = 0; bytesRead < size;)
 80076dc:	2300      	movs	r3, #0
 80076de:	837b      	strh	r3, [r7, #26]
 80076e0:	8b7a      	ldrh	r2, [r7, #26]
 80076e2:	8bbb      	ldrh	r3, [r7, #28]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d27f      	bcs.n	80077e8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2dc>
   {
      if (cancelled())
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f7ff fe79 	bl	80073e0 <_ZN10IridiumSBD9cancelledEv>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d001      	beq.n	80076f8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x1ec>
         return ISBD_CANCELLED;
 80076f4:	2304      	movs	r3, #4
 80076f6:	e151      	b.n	800799c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

      if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	7c5b      	ldrb	r3, [r3, #17]
 80076fc:	f083 0301 	eor.w	r3, r3, #1
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b00      	cmp	r3, #0
 8007704:	d002      	beq.n	800770c <_ZN10IridiumSBD7doSBDRBEPhPj+0x200>
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f000 fdac 	bl	8008264 <_ZN10IridiumSBD13check9603dataEv>

      if ((this->useSerial && (stream->available())) || ((!this->useSerial) && i2cSerAvailable()))
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	7c5b      	ldrb	r3, [r3, #17]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00b      	beq.n	800772c <_ZN10IridiumSBD7doSBDRBEPhPj+0x220>
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	689a      	ldr	r2, [r3, #8]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	3308      	adds	r3, #8
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4610      	mov	r0, r2
 8007724:	4798      	blx	r3
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d10c      	bne.n	8007746 <_ZN10IridiumSBD7doSBDRBEPhPj+0x23a>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	7c5b      	ldrb	r3, [r3, #17]
 8007730:	f083 0301 	eor.w	r3, r3, #1
 8007734:	b2db      	uxtb	r3, r3
 8007736:	2b00      	cmp	r3, #0
 8007738:	d007      	beq.n	800774a <_ZN10IridiumSBD7doSBDRBEPhPj+0x23e>
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	f000 fec2 	bl	80084c4 <_ZN10IridiumSBD15i2cSerAvailableEv>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d001      	beq.n	800774a <_ZN10IridiumSBD7doSBDRBEPhPj+0x23e>
 8007746:	2301      	movs	r3, #1
 8007748:	e000      	b.n	800774c <_ZN10IridiumSBD7doSBDRBEPhPj+0x240>
 800774a:	2300      	movs	r3, #0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d035      	beq.n	80077bc <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
      {
         uint8_t c;
         if (this->useSerial)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	7c5b      	ldrb	r3, [r3, #17]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00b      	beq.n	8007770 <_ZN10IridiumSBD7doSBDRBEPhPj+0x264>
         {
            c = stream->read();
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	689a      	ldr	r2, [r3, #8]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	330c      	adds	r3, #12
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4610      	mov	r0, r2
 8007768:	4798      	blx	r3
 800776a:	4603      	mov	r3, r0
 800776c:	767b      	strb	r3, [r7, #25]
 800776e:	e004      	b.n	800777a <_ZN10IridiumSBD7doSBDRBEPhPj+0x26e>
         }
         else
         {
            c = i2cSerRead();
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f000 febf 	bl	80084f4 <_ZN10IridiumSBD10i2cSerReadEv>
 8007776:	4603      	mov	r3, r0
 8007778:	767b      	strb	r3, [r7, #25]
         }
         bytesRead++;
 800777a:	8b7b      	ldrh	r3, [r7, #26]
 800777c:	3301      	adds	r3, #1
 800777e:	837b      	strh	r3, [r7, #26]
         if (rxBuffer && prxBufferSize)
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d01a      	beq.n	80077bc <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d017      	beq.n	80077bc <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
         {
            if (*prxBufferSize > 0)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d011      	beq.n	80077b8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2ac>
            {
               *rxBuffer++ = c;
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	1c5a      	adds	r2, r3, #1
 8007798:	60ba      	str	r2, [r7, #8]
 800779a:	7e7a      	ldrb	r2, [r7, #25]
 800779c:	701a      	strb	r2, [r3, #0]
               (*prxBufferSize)--;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	1e5a      	subs	r2, r3, #1
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	601a      	str	r2, [r3, #0]
 80077a8:	e008      	b.n	80077bc <_ZN10IridiumSBD7doSBDRBEPhPj+0x2b0>
 80077aa:	bf00      	nop
 80077ac:	08019e8c 	.word	0x08019e8c
 80077b0:	08019e98 	.word	0x08019e98
 80077b4:	08019ea8 	.word	0x08019ea8
            }
            else
            {
               rxOverflow = true;
 80077b8:	2301      	movs	r3, #1
 80077ba:	77fb      	strb	r3, [r7, #31]
            }
         }
      }

      if (millis() - start >= 1000UL * atTimeout)
 80077bc:	f002 f9f2 	bl	8009ba4 <HAL_GetTick>
 80077c0:	4602      	mov	r2, r0
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	1ad2      	subs	r2, r2, r3
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077ca:	4619      	mov	r1, r3
 80077cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80077d0:	fb03 f301 	mul.w	r3, r3, r1
 80077d4:	429a      	cmp	r2, r3
 80077d6:	bf2c      	ite	cs
 80077d8:	2301      	movcs	r3, #1
 80077da:	2300      	movcc	r3, #0
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f43f af7e 	beq.w	80076e0 <_ZN10IridiumSBD7doSBDRBEPhPj+0x1d4>
         return ISBD_SENDRECEIVE_TIMEOUT;
 80077e4:	2307      	movs	r3, #7
 80077e6:	e0d9      	b.n	800799c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
   }

   while (millis() - start < 1000UL * atTimeout)
 80077e8:	f002 f9dc 	bl	8009ba4 <HAL_GetTick>
 80077ec:	4602      	mov	r2, r0
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	1ad2      	subs	r2, r2, r3
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077f6:	4619      	mov	r1, r3
 80077f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80077fc:	fb03 f301 	mul.w	r3, r3, r1
 8007800:	429a      	cmp	r2, r3
 8007802:	bf34      	ite	cc
 8007804:	2301      	movcc	r3, #1
 8007806:	2300      	movcs	r3, #0
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	d03c      	beq.n	8007888 <_ZN10IridiumSBD7doSBDRBEPhPj+0x37c>
   {
      if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	7c5b      	ldrb	r3, [r3, #17]
 8007812:	f083 0301 	eor.w	r3, r3, #1
 8007816:	b2db      	uxtb	r3, r3
 8007818:	2b00      	cmp	r3, #0
 800781a:	d002      	beq.n	8007822 <_ZN10IridiumSBD7doSBDRBEPhPj+0x316>
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f000 fd21 	bl	8008264 <_ZN10IridiumSBD13check9603dataEv>
      if (cancelled())
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f7ff fddc 	bl	80073e0 <_ZN10IridiumSBD9cancelledEv>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d001      	beq.n	8007832 <_ZN10IridiumSBD7doSBDRBEPhPj+0x326>
         return ISBD_CANCELLED;
 800782e:	2304      	movs	r3, #4
 8007830:	e0b4      	b.n	800799c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
      if (this->useSerial && (stream->available() >= 2))
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	7c5b      	ldrb	r3, [r3, #17]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00d      	beq.n	8007856 <_ZN10IridiumSBD7doSBDRBEPhPj+0x34a>
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	689a      	ldr	r2, [r3, #8]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3308      	adds	r3, #8
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4610      	mov	r0, r2
 800784a:	4798      	blx	r3
 800784c:	4603      	mov	r3, r0
 800784e:	2b01      	cmp	r3, #1
 8007850:	dd01      	ble.n	8007856 <_ZN10IridiumSBD7doSBDRBEPhPj+0x34a>
 8007852:	2301      	movs	r3, #1
 8007854:	e000      	b.n	8007858 <_ZN10IridiumSBD7doSBDRBEPhPj+0x34c>
 8007856:	2300      	movs	r3, #0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d112      	bne.n	8007882 <_ZN10IridiumSBD7doSBDRBEPhPj+0x376>
         break;
      if ((!this->useSerial) && (i2cSerAvailable() >= 2))
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	7c5b      	ldrb	r3, [r3, #17]
 8007860:	f083 0301 	eor.w	r3, r3, #1
 8007864:	b2db      	uxtb	r3, r3
 8007866:	2b00      	cmp	r3, #0
 8007868:	d007      	beq.n	800787a <_ZN10IridiumSBD7doSBDRBEPhPj+0x36e>
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f000 fe2a 	bl	80084c4 <_ZN10IridiumSBD15i2cSerAvailableEv>
 8007870:	4603      	mov	r3, r0
 8007872:	2b01      	cmp	r3, #1
 8007874:	dd01      	ble.n	800787a <_ZN10IridiumSBD7doSBDRBEPhPj+0x36e>
 8007876:	2301      	movs	r3, #1
 8007878:	e000      	b.n	800787c <_ZN10IridiumSBD7doSBDRBEPhPj+0x370>
 800787a:	2300      	movs	r3, #0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d102      	bne.n	8007886 <_ZN10IridiumSBD7doSBDRBEPhPj+0x37a>
   while (millis() - start < 1000UL * atTimeout)
 8007880:	e7b2      	b.n	80077e8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x2dc>
         break;
 8007882:	bf00      	nop
 8007884:	e000      	b.n	8007888 <_ZN10IridiumSBD7doSBDRBEPhPj+0x37c>
         break;
 8007886:	bf00      	nop
   }

   if (this->useSerial && (stream->available() < 2))
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	7c5b      	ldrb	r3, [r3, #17]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00d      	beq.n	80078ac <_ZN10IridiumSBD7doSBDRBEPhPj+0x3a0>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	689a      	ldr	r2, [r3, #8]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	3308      	adds	r3, #8
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4610      	mov	r0, r2
 80078a0:	4798      	blx	r3
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	dc01      	bgt.n	80078ac <_ZN10IridiumSBD7doSBDRBEPhPj+0x3a0>
 80078a8:	2301      	movs	r3, #1
 80078aa:	e000      	b.n	80078ae <_ZN10IridiumSBD7doSBDRBEPhPj+0x3a2>
 80078ac:	2300      	movs	r3, #0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d001      	beq.n	80078b6 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3aa>
      return ISBD_SENDRECEIVE_TIMEOUT;
 80078b2:	2307      	movs	r3, #7
 80078b4:	e072      	b.n	800799c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
   if ((!this->useSerial) && (i2cSerAvailable() < 2))
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	7c5b      	ldrb	r3, [r3, #17]
 80078ba:	f083 0301 	eor.w	r3, r3, #1
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d007      	beq.n	80078d4 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3c8>
 80078c4:	68f8      	ldr	r0, [r7, #12]
 80078c6:	f000 fdfd 	bl	80084c4 <_ZN10IridiumSBD15i2cSerAvailableEv>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	dc01      	bgt.n	80078d4 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3c8>
 80078d0:	2301      	movs	r3, #1
 80078d2:	e000      	b.n	80078d6 <_ZN10IridiumSBD7doSBDRBEPhPj+0x3ca>
 80078d4:	2300      	movs	r3, #0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d001      	beq.n	80078de <_ZN10IridiumSBD7doSBDRBEPhPj+0x3d2>
      return ISBD_SENDRECEIVE_TIMEOUT;
 80078da:	2307      	movs	r3, #7
 80078dc:	e05e      	b.n	800799c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   uint16_t checksum;
   if (this->useSerial)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	7c5b      	ldrb	r3, [r3, #17]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d01a      	beq.n	800791c <_ZN10IridiumSBD7doSBDRBEPhPj+0x410>
   {
      checksum = 256 * stream->read() + stream->read();
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	689a      	ldr	r2, [r3, #8]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	330c      	adds	r3, #12
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4610      	mov	r0, r2
 80078f6:	4798      	blx	r3
 80078f8:	4603      	mov	r3, r0
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	021b      	lsls	r3, r3, #8
 80078fe:	b29c      	uxth	r4, r3
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	689a      	ldr	r2, [r3, #8]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	330c      	adds	r3, #12
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4610      	mov	r0, r2
 8007910:	4798      	blx	r3
 8007912:	4603      	mov	r3, r0
 8007914:	b29b      	uxth	r3, r3
 8007916:	4423      	add	r3, r4
 8007918:	82fb      	strh	r3, [r7, #22]
 800791a:	e00d      	b.n	8007938 <_ZN10IridiumSBD7doSBDRBEPhPj+0x42c>
   }
   else
   {
      checksum = 256 * i2cSerRead() + i2cSerRead();
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f000 fde9 	bl	80084f4 <_ZN10IridiumSBD10i2cSerReadEv>
 8007922:	4603      	mov	r3, r0
 8007924:	b29b      	uxth	r3, r3
 8007926:	021b      	lsls	r3, r3, #8
 8007928:	b29c      	uxth	r4, r3
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f000 fde2 	bl	80084f4 <_ZN10IridiumSBD10i2cSerReadEv>
 8007930:	4603      	mov	r3, r0
 8007932:	b29b      	uxth	r3, r3
 8007934:	4423      	add	r3, r4
 8007936:	82fb      	strh	r3, [r7, #22]
   }
   consoleprint(F("[csum:"));
 8007938:	491a      	ldr	r1, [pc, #104]	; (80079a4 <_ZN10IridiumSBD7doSBDRBEPhPj+0x498>)
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	f000 faca 	bl	8007ed4 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(checksum);
 8007940:	8afb      	ldrh	r3, [r7, #22]
 8007942:	4619      	mov	r1, r3
 8007944:	68f8      	ldr	r0, [r7, #12]
 8007946:	f000 fafd 	bl	8007f44 <_ZN10IridiumSBD12consoleprintEt>
   consoleprint(F("]"));
 800794a:	4917      	ldr	r1, [pc, #92]	; (80079a8 <_ZN10IridiumSBD7doSBDRBEPhPj+0x49c>)
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	f000 fac1 	bl	8007ed4 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

   // Return actual size of returned buffer
   if (prxBufferSize)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d002      	beq.n	800795e <_ZN10IridiumSBD7doSBDRBEPhPj+0x452>
      *prxBufferSize = (size_t)size;
 8007958:	8bba      	ldrh	r2, [r7, #28]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	601a      	str	r2, [r3, #0]

   // Wait for final OK
   if (!waitForATResponse())
 800795e:	4b13      	ldr	r3, [pc, #76]	; (80079ac <_ZN10IridiumSBD7doSBDRBEPhPj+0x4a0>)
 8007960:	9300      	str	r3, [sp, #0]
 8007962:	2300      	movs	r3, #0
 8007964:	2200      	movs	r2, #0
 8007966:	2100      	movs	r1, #0
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f7ff fc7b 	bl	8007264 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 800796e:	4603      	mov	r3, r0
 8007970:	f083 0301 	eor.w	r3, r3, #1
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d009      	beq.n	800798e <_ZN10IridiumSBD7doSBDRBEPhPj+0x482>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f7ff fd30 	bl	80073e0 <_ZN10IridiumSBD9cancelledEv>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d001      	beq.n	800798a <_ZN10IridiumSBD7doSBDRBEPhPj+0x47e>
 8007986:	2304      	movs	r3, #4
 8007988:	e008      	b.n	800799c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>
 800798a:	2303      	movs	r3, #3
 800798c:	e006      	b.n	800799c <_ZN10IridiumSBD7doSBDRBEPhPj+0x490>

   return rxOverflow ? ISBD_RX_OVERFLOW : ISBD_SUCCESS;
 800798e:	7ffb      	ldrb	r3, [r7, #31]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d001      	beq.n	8007998 <_ZN10IridiumSBD7doSBDRBEPhPj+0x48c>
 8007994:	2308      	movs	r3, #8
 8007996:	e000      	b.n	800799a <_ZN10IridiumSBD7doSBDRBEPhPj+0x48e>
 8007998:	2300      	movs	r3, #0
 800799a:	bf00      	nop
}
 800799c:	4618      	mov	r0, r3
 800799e:	3724      	adds	r7, #36	; 0x24
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd90      	pop	{r4, r7, pc}
 80079a4:	08019eac 	.word	0x08019eac
 80079a8:	08019ea8 	.word	0x08019ea8
 80079ac:	08019914 	.word	0x08019914

080079b0 <_ZN10IridiumSBD5powerEb>:

void IridiumSBD::power(bool on)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	460b      	mov	r3, r1
 80079ba:	70fb      	strb	r3, [r7, #3]
   this->asleep = !on;
 80079bc:	78fb      	ldrb	r3, [r7, #3]
 80079be:	f083 0301 	eor.w	r3, r3, #1
 80079c2:	b2da      	uxtb	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

   if (this->useSerial)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	7c5b      	ldrb	r3, [r3, #17]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d010      	beq.n	80079f4 <_ZN10IridiumSBD5powerEb+0x44>
   {
      if (this->sleepPin == -1)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079da:	d04a      	beq.n	8007a72 <_ZN10IridiumSBD5powerEb+0xc2>
      {
         return;
      }
      else
      {
          if (this->sleepPinConfigured == false)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d106      	bne.n	80079f4 <_ZN10IridiumSBD5powerEb+0x44>
          {
             configureSleepPin();
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f84c 	bl	8007a84 <_ZN10IridiumSBD17configureSleepPinEv>
             this->sleepPinConfigured = true;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          }
      }
   }

   if (on)
 80079f4:	78fb      	ldrb	r3, [r7, #3]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d017      	beq.n	8007a2a <_ZN10IridiumSBD5powerEb+0x7a>
   {
      diagprint(F("Powering on modem...\r\n"));
 80079fa:	4920      	ldr	r1, [pc, #128]	; (8007a7c <_ZN10IridiumSBD5powerEb+0xcc>)
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 fa11 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	7c5b      	ldrb	r3, [r3, #17]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d004      	beq.n	8007a14 <_ZN10IridiumSBD5powerEb+0x64>
      {
         setSleepPin(HIGH); // HIGH = awake
 8007a0a:	2101      	movs	r1, #1
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 f847 	bl	8007aa0 <_ZN10IridiumSBD11setSleepPinEh>
 8007a12:	e003      	b.n	8007a1c <_ZN10IridiumSBD5powerEb+0x6c>
      }
      else
      {
         enable9603(true);
 8007a14:	2101      	movs	r1, #1
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f7fe fe36 	bl	8006688 <_ZN10IridiumSBD10enable9603Eb>
      }
      lastPowerOnTime = millis();
 8007a1c:	f002 f8c2 	bl	8009ba4 <HAL_GetTick>
 8007a20:	4602      	mov	r2, r0
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8007a28:	e024      	b.n	8007a74 <_ZN10IridiumSBD5powerEb+0xc4>
   }
   else
   {
      // Best Practices Guide suggests waiting at least 2 seconds
      // before powering off again
      unsigned long elapsed = millis() - lastPowerOnTime;
 8007a2a:	f002 f8bb 	bl	8009ba4 <HAL_GetTick>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	60fb      	str	r3, [r7, #12]
      if (elapsed < 2000UL)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007a40:	d205      	bcs.n	8007a4e <_ZN10IridiumSBD5powerEb+0x9e>
         //delay(2000UL - elapsed); TODO
    	  HAL_Delay(2000UL - elapsed);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f002 f8b7 	bl	8009bbc <HAL_Delay>

      diagprint(F("Powering off modem...\r\n"));
 8007a4e:	490c      	ldr	r1, [pc, #48]	; (8007a80 <_ZN10IridiumSBD5powerEb+0xd0>)
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 f9e7 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	7c5b      	ldrb	r3, [r3, #17]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d004      	beq.n	8007a68 <_ZN10IridiumSBD5powerEb+0xb8>
      {
         setSleepPin(LOW); // LOW = asleep
 8007a5e:	2100      	movs	r1, #0
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 f81d 	bl	8007aa0 <_ZN10IridiumSBD11setSleepPinEh>
 8007a66:	e005      	b.n	8007a74 <_ZN10IridiumSBD5powerEb+0xc4>
      }
      else
      {
         enable9603(false);
 8007a68:	2100      	movs	r1, #0
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f7fe fe0c 	bl	8006688 <_ZN10IridiumSBD10enable9603Eb>
 8007a70:	e000      	b.n	8007a74 <_ZN10IridiumSBD5powerEb+0xc4>
         return;
 8007a72:	bf00      	nop
      }
   }
}
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	08019eb4 	.word	0x08019eb4
 8007a80:	08019ecc 	.word	0x08019ecc

08007a84 <_ZN10IridiumSBD17configureSleepPinEv>:

void IridiumSBD::configureSleepPin()
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
	//pinMode(sleepPin, OUTPUT); // Make the sleep pin an output TODO (doesnt work with this)
   //pinMode(sleepPin, OUTPUT_PP); // Make the sleep pin an output
   diagprint(F("configureSleepPin: sleepPin configured\r\n"));
 8007a8c:	4903      	ldr	r1, [pc, #12]	; (8007a9c <_ZN10IridiumSBD17configureSleepPinEv+0x18>)
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f9c8 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8007a94:	bf00      	nop
 8007a96:	3708      	adds	r7, #8
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	08019ee4 	.word	0x08019ee4

08007aa0 <_ZN10IridiumSBD11setSleepPinEh>:

void IridiumSBD::setSleepPin(uint8_t enable)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(sleepPin_GPIO_Port,sleepPin_Pin,GPIO_PIN_SET);
 8007aac:	2201      	movs	r2, #1
 8007aae:	2108      	movs	r1, #8
 8007ab0:	480b      	ldr	r0, [pc, #44]	; (8007ae0 <_ZN10IridiumSBD11setSleepPinEh+0x40>)
 8007ab2:	f002 ff8f 	bl	800a9d4 <HAL_GPIO_WritePin>
   //digitalWrite(this->sleepPin, enable); // HIGH = awake, LOW = asleep TODO
   diagprint(F("setSleepPin: sleepPin set "));
 8007ab6:	490b      	ldr	r1, [pc, #44]	; (8007ae4 <_ZN10IridiumSBD11setSleepPinEh+0x44>)
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 f9b3 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   if (enable == HIGH)
 8007abe:	78fb      	ldrb	r3, [r7, #3]
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d104      	bne.n	8007ace <_ZN10IridiumSBD11setSleepPinEh+0x2e>
      diagprint(F("HIGH\r\n"));
 8007ac4:	4908      	ldr	r1, [pc, #32]	; (8007ae8 <_ZN10IridiumSBD11setSleepPinEh+0x48>)
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 f9ac 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   else
      diagprint(F("LOW\r\n"));
}
 8007acc:	e003      	b.n	8007ad6 <_ZN10IridiumSBD11setSleepPinEh+0x36>
      diagprint(F("LOW\r\n"));
 8007ace:	4907      	ldr	r1, [pc, #28]	; (8007aec <_ZN10IridiumSBD11setSleepPinEh+0x4c>)
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 f9a7 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8007ad6:	bf00      	nop
 8007ad8:	3708      	adds	r7, #8
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	40020800 	.word	0x40020800
 8007ae4:	08019f10 	.word	0x08019f10
 8007ae8:	08019f2c 	.word	0x08019f2c
 8007aec:	08019f34 	.word	0x08019f34

08007af0 <_ZN10IridiumSBD15beginSerialPortEv>:

void IridiumSBD::beginSerialPort()
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::beginSerialPort\r\n"));
 8007af8:	4903      	ldr	r1, [pc, #12]	; (8007b08 <_ZN10IridiumSBD15beginSerialPortEv+0x18>)
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f992 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8007b00:	bf00      	nop
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	08019f3c 	.word	0x08019f3c

08007b0c <_ZN10IridiumSBD13endSerialPortEv>:

void IridiumSBD::endSerialPort()
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::endSerialPort\r\n"));
 8007b14:	4903      	ldr	r1, [pc, #12]	; (8007b24 <_ZN10IridiumSBD13endSerialPortEv+0x18>)
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f984 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8007b1c:	bf00      	nop
 8007b1e:	3708      	adds	r7, #8
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	08019f5c 	.word	0x08019f5c

08007b28 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>:

void IridiumSBD::send(FlashString str, bool beginLine, bool endLine)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	4611      	mov	r1, r2
 8007b34:	461a      	mov	r2, r3
 8007b36:	460b      	mov	r3, r1
 8007b38:	71fb      	strb	r3, [r7, #7]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	71bb      	strb	r3, [r7, #6]
   if (beginLine)
 8007b3e:	79fb      	ldrb	r3, [r7, #7]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d003      	beq.n	8007b4c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x24>
      consoleprint(F(">> "));
 8007b44:	4923      	ldr	r1, [pc, #140]	; (8007bd4 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xac>)
 8007b46:	68f8      	ldr	r0, [r7, #12]
 8007b48:	f000 f9c4 	bl	8007ed4 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 8007b4c:	68b9      	ldr	r1, [r7, #8]
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f000 f9c0 	bl	8007ed4 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (endLine)
 8007b54:	79bb      	ldrb	r3, [r7, #6]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d003      	beq.n	8007b62 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x3a>
      consoleprint(F("\r\n"));
 8007b5a:	491f      	ldr	r1, [pc, #124]	; (8007bd8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xb0>)
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f000 f9b9 	bl	8007ed4 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	7c5b      	ldrb	r3, [r3, #17]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d006      	beq.n	8007b78 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x50>
   {
      stream->print(str);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	68b9      	ldr	r1, [r7, #8]
 8007b70:	4618      	mov	r0, r3
 8007b72:	f001 f9e3 	bl	8008f3c <_ZN5Print5printEPK19__FlashStringHelper>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8007b76:	e029      	b.n	8007bcc <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xa4>
      lastCheck = millis(); // Update lastCheck so we enforce a full I2C_POLLING_WAIT //TODO Uncommented this line
 8007b78:	f002 f814 	bl	8009ba4 <HAL_GetTick>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	66da      	str	r2, [r3, #108]	; 0x6c
      wireport->beginTransmission((uint8_t)deviceaddress);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	68da      	ldr	r2, [r3, #12]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	7c1b      	ldrb	r3, [r3, #16]
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	4610      	mov	r0, r2
 8007b8e:	f001 fb49 	bl	8009224 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	21ff      	movs	r1, #255	; 0xff
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7fe fb39 	bl	8006210 <_ZN7TwoWire5writeEi>
      wireport->print(str);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	68b9      	ldr	r1, [r7, #8]
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f001 f9c9 	bl	8008f3c <_ZN5Print5printEPK19__FlashStringHelper>
      if (wireport->endTransmission() != 0) //Release bus
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f001 fb82 	bl	80092b8 <_ZN7TwoWire15endTransmissionEv>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	bf14      	ite	ne
 8007bba:	2301      	movne	r3, #1
 8007bbc:	2300      	moveq	r3, #0
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d003      	beq.n	8007bcc <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xa4>
         diagprint(F("I2C write was not successful!\r\n"));
 8007bc4:	4905      	ldr	r1, [pc, #20]	; (8007bdc <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xb4>)
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	f000 f92c 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8007bcc:	bf00      	nop
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	08019f78 	.word	0x08019f78
 8007bd8:	08019cc0 	.word	0x08019cc0
 8007bdc:	08019d40 	.word	0x08019d40

08007be0 <_ZN10IridiumSBD4sendEPKc>:

void IridiumSBD::send(const char *str)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
   consoleprint(F(">> "));
 8007bea:	4920      	ldr	r1, [pc, #128]	; (8007c6c <_ZN10IridiumSBD4sendEPKc+0x8c>)
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 f971 	bl	8007ed4 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 8007bf2:	6839      	ldr	r1, [r7, #0]
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f98b 	bl	8007f10 <_ZN10IridiumSBD12consoleprintEPKc>
   consoleprint(F("\r\n"));
 8007bfa:	491d      	ldr	r1, [pc, #116]	; (8007c70 <_ZN10IridiumSBD4sendEPKc+0x90>)
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 f969 	bl	8007ed4 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	7c5b      	ldrb	r3, [r3, #17]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d006      	beq.n	8007c18 <_ZN10IridiumSBD4sendEPKc+0x38>
   {
      stream->print(str);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	6839      	ldr	r1, [r7, #0]
 8007c10:	4618      	mov	r0, r3
 8007c12:	f001 f9a1 	bl	8008f58 <_ZN5Print5printEPKc>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8007c16:	e024      	b.n	8007c62 <_ZN10IridiumSBD4sendEPKc+0x82>
      wireport->beginTransmission((uint8_t)deviceaddress);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	68da      	ldr	r2, [r3, #12]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	7c1b      	ldrb	r3, [r3, #16]
 8007c20:	4619      	mov	r1, r3
 8007c22:	4610      	mov	r0, r2
 8007c24:	f001 fafe 	bl	8009224 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	21ff      	movs	r1, #255	; 0xff
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fe faee 	bl	8006210 <_ZN7TwoWire5writeEi>
      wireport->print(str);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	6839      	ldr	r1, [r7, #0]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f001 f98c 	bl	8008f58 <_ZN5Print5printEPKc>
      if (wireport->endTransmission() != 0) //Release bus
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	4618      	mov	r0, r3
 8007c46:	f001 fb37 	bl	80092b8 <_ZN7TwoWire15endTransmissionEv>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	bf14      	ite	ne
 8007c50:	2301      	movne	r3, #1
 8007c52:	2300      	moveq	r3, #0
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d003      	beq.n	8007c62 <_ZN10IridiumSBD4sendEPKc+0x82>
         diagprint(F("I2C write was not successful!\r\n"));
 8007c5a:	4906      	ldr	r1, [pc, #24]	; (8007c74 <_ZN10IridiumSBD4sendEPKc+0x94>)
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 f8e1 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8007c62:	bf00      	nop
 8007c64:	3708      	adds	r7, #8
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	08019f78 	.word	0x08019f78
 8007c70:	08019cc0 	.word	0x08019cc0
 8007c74:	08019d40 	.word	0x08019d40

08007c78 <_ZN10IridiumSBD8sendlongEPKc>:

void IridiumSBD::sendlong(const char *str)
// Send a long string that might need to be broken up for the I2C port
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b086      	sub	sp, #24
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
   consoleprint(F(">> "));
 8007c82:	4942      	ldr	r1, [pc, #264]	; (8007d8c <_ZN10IridiumSBD8sendlongEPKc+0x114>)
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 f925 	bl	8007ed4 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   this->print((char*) str);//TODO doesn't print otherwise
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	6838      	ldr	r0, [r7, #0]
 8007c90:	4798      	blx	r3
   consoleprint(str);
 8007c92:	6839      	ldr	r1, [r7, #0]
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f93b 	bl	8007f10 <_ZN10IridiumSBD12consoleprintEPKc>
   consoleprint(F("\r\n"));
 8007c9a:	493d      	ldr	r1, [pc, #244]	; (8007d90 <_ZN10IridiumSBD8sendlongEPKc+0x118>)
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 f919 	bl	8007ed4 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>

   if (this->useSerial)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	7c5b      	ldrb	r3, [r3, #17]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d006      	beq.n	8007cb8 <_ZN10IridiumSBD8sendlongEPKc+0x40>
   {
      stream->print(str); // If we are using serial then send it and don't worry about the long length
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	6839      	ldr	r1, [r7, #0]
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f001 f951 	bl	8008f58 <_ZN5Print5printEPKc>
         wireport->write(str[i]);
      }
      if (wireport->endTransmission() != 0) //Send data and release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8007cb6:	e065      	b.n	8007d84 <_ZN10IridiumSBD8sendlongEPKc+0x10c>
      size_t bytes_to_send = strlen(str); // Send this many bytes in total
 8007cb8:	6838      	ldr	r0, [r7, #0]
 8007cba:	f7f8 faa3 	bl	8000204 <strlen>
 8007cbe:	6178      	str	r0, [r7, #20]
      size_t txDataSize = bytes_to_send;
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	60fb      	str	r3, [r7, #12]
      size_t i=0;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	613b      	str	r3, [r7, #16]
      while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 1)) // If there are too many bytes to send all in one go
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	2b1f      	cmp	r3, #31
 8007ccc:	d92a      	bls.n	8007d24 <_ZN10IridiumSBD8sendlongEPKc+0xac>
         nexti = i + (TINY_I2C_BUFFER_LENGTH - 1);
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	331f      	adds	r3, #31
 8007cd2:	60bb      	str	r3, [r7, #8]
         wireport->beginTransmission((uint8_t)deviceaddress);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	68da      	ldr	r2, [r3, #12]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	7c1b      	ldrb	r3, [r3, #16]
 8007cdc:	4619      	mov	r1, r3
 8007cde:	4610      	mov	r0, r2
 8007ce0:	f001 faa0 	bl	8009224 <_ZN7TwoWire17beginTransmissionEh>
         wireport->write(DATA_REG); // Point to the 'serial register'
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	21ff      	movs	r1, #255	; 0xff
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fe fa90 	bl	8006210 <_ZN7TwoWire5writeEi>
         for (; i<nexti; ++i)
 8007cf0:	693a      	ldr	r2, [r7, #16]
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d20c      	bcs.n	8007d12 <_ZN10IridiumSBD8sendlongEPKc+0x9a>
            wireport->write(str[i]); // Write each byte
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	68d8      	ldr	r0, [r3, #12]
 8007cfc:	683a      	ldr	r2, [r7, #0]
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	4413      	add	r3, r2
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	4619      	mov	r1, r3
 8007d06:	f7fe fa83 	bl	8006210 <_ZN7TwoWire5writeEi>
         for (; i<nexti; ++i)
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	613b      	str	r3, [r7, #16]
 8007d10:	e7ee      	b.n	8007cf0 <_ZN10IridiumSBD8sendlongEPKc+0x78>
         bytes_to_send = bytes_to_send - (TINY_I2C_BUFFER_LENGTH - 1); // Decrease the number of bytes still to send
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	3b1f      	subs	r3, #31
 8007d16:	617b      	str	r3, [r7, #20]
         wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f001 facb 	bl	80092b8 <_ZN7TwoWire15endTransmissionEv>
      while (bytes_to_send > (TINY_I2C_BUFFER_LENGTH - 1)) // If there are too many bytes to send all in one go
 8007d22:	e7d1      	b.n	8007cc8 <_ZN10IridiumSBD8sendlongEPKc+0x50>
      wireport->beginTransmission((uint8_t)deviceaddress);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	68da      	ldr	r2, [r3, #12]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	7c1b      	ldrb	r3, [r3, #16]
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	4610      	mov	r0, r2
 8007d30:	f001 fa78 	bl	8009224 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	21ff      	movs	r1, #255	; 0xff
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7fe fa68 	bl	8006210 <_ZN7TwoWire5writeEi>
      for (; i<txDataSize; ++i)
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d20c      	bcs.n	8007d62 <_ZN10IridiumSBD8sendlongEPKc+0xea>
         wireport->write(str[i]);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	68d8      	ldr	r0, [r3, #12]
 8007d4c:	683a      	ldr	r2, [r7, #0]
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	4413      	add	r3, r2
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	4619      	mov	r1, r3
 8007d56:	f7fe fa5b 	bl	8006210 <_ZN7TwoWire5writeEi>
      for (; i<txDataSize; ++i)
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	613b      	str	r3, [r7, #16]
 8007d60:	e7ee      	b.n	8007d40 <_ZN10IridiumSBD8sendlongEPKc+0xc8>
      if (wireport->endTransmission() != 0) //Send data and release bus
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	4618      	mov	r0, r3
 8007d68:	f001 faa6 	bl	80092b8 <_ZN7TwoWire15endTransmissionEv>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	bf14      	ite	ne
 8007d72:	2301      	movne	r3, #1
 8007d74:	2300      	moveq	r3, #0
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d003      	beq.n	8007d84 <_ZN10IridiumSBD8sendlongEPKc+0x10c>
         diagprint(F("I2C write was not successful!\r\n"));
 8007d7c:	4905      	ldr	r1, [pc, #20]	; (8007d94 <_ZN10IridiumSBD8sendlongEPKc+0x11c>)
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 f850 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8007d84:	bf00      	nop
 8007d86:	3718      	adds	r7, #24
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	08019f78 	.word	0x08019f78
 8007d90:	08019cc0 	.word	0x08019cc0
 8007d94:	08019d40 	.word	0x08019d40

08007d98 <_ZN10IridiumSBD4sendEt>:

void IridiumSBD::send(uint16_t n)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	460b      	mov	r3, r1
 8007da2:	807b      	strh	r3, [r7, #2]
   consoleprint(n);
 8007da4:	887b      	ldrh	r3, [r7, #2]
 8007da6:	4619      	mov	r1, r3
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 f8cb 	bl	8007f44 <_ZN10IridiumSBD12consoleprintEt>
   if (this->useSerial)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	7c5b      	ldrb	r3, [r3, #17]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d008      	beq.n	8007dc8 <_ZN10IridiumSBD4sendEt+0x30>
   {
      stream->print(n);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	4618      	mov	r0, r3
 8007dbc:	887b      	ldrh	r3, [r7, #2]
 8007dbe:	220a      	movs	r2, #10
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	f001 f8e9 	bl	8008f98 <_ZN5Print5printEii>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(n);
      if (wireport->endTransmission() != 0) //Send data and release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8007dc6:	e026      	b.n	8007e16 <_ZN10IridiumSBD4sendEt+0x7e>
      wireport->beginTransmission((uint8_t)deviceaddress);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	68da      	ldr	r2, [r3, #12]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	7c1b      	ldrb	r3, [r3, #16]
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	4610      	mov	r0, r2
 8007dd4:	f001 fa26 	bl	8009224 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	21ff      	movs	r1, #255	; 0xff
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7fe fa16 	bl	8006210 <_ZN7TwoWire5writeEi>
      wireport->print(n);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	4618      	mov	r0, r3
 8007dea:	887b      	ldrh	r3, [r7, #2]
 8007dec:	220a      	movs	r2, #10
 8007dee:	4619      	mov	r1, r3
 8007df0:	f001 f8d2 	bl	8008f98 <_ZN5Print5printEii>
      if (wireport->endTransmission() != 0) //Send data and release bus
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f001 fa5d 	bl	80092b8 <_ZN7TwoWire15endTransmissionEv>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	bf14      	ite	ne
 8007e04:	2301      	movne	r3, #1
 8007e06:	2300      	moveq	r3, #0
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d003      	beq.n	8007e16 <_ZN10IridiumSBD4sendEt+0x7e>
         diagprint(F("I2C write was not successful!\r\n"));
 8007e0e:	4904      	ldr	r1, [pc, #16]	; (8007e20 <_ZN10IridiumSBD4sendEt+0x88>)
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 f807 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8007e16:	bf00      	nop
 8007e18:	3708      	adds	r7, #8
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	08019d40 	.word	0x08019d40

08007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>:

void IridiumSBD::diagprint(FlashString str)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	1c5a      	adds	r2, r3, #1
 8007e36:	60fa      	str	r2, [r7, #12]
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 8007e3c:	7afb      	ldrb	r3, [r7, #11]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d005      	beq.n	8007e4e <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0x2a>
      ISBDDiagsCallback(this, c);
 8007e42:	7afb      	ldrb	r3, [r7, #11]
 8007e44:	4619      	mov	r1, r3
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f7fe fa08 	bl	800625c <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   }
 8007e4c:	e7f1      	b.n	8007e32 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 8007e4e:	bf00      	nop

   //TODO
   this->print((char*) str);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	6838      	ldr	r0, [r7, #0]
 8007e56:	4798      	blx	r3
}
 8007e58:	bf00      	nop
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <_ZN10IridiumSBD9diagprintEPKc>:

void IridiumSBD::diagprint(const char *str)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
   while (*str)
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d008      	beq.n	8007e84 <_ZN10IridiumSBD9diagprintEPKc+0x24>
      ISBDDiagsCallback(this, *str++);
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	1c5a      	adds	r2, r3, #1
 8007e76:	603a      	str	r2, [r7, #0]
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f7fe f9ed 	bl	800625c <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   while (*str)
 8007e82:	e7f2      	b.n	8007e6a <_ZN10IridiumSBD9diagprintEPKc+0xa>

   //TODO
   this->print((char*) str);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	6838      	ldr	r0, [r7, #0]
 8007e8a:	4798      	blx	r3
}
 8007e8c:	bf00      	nop
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <_ZN10IridiumSBD9diagprintEt>:

void IridiumSBD::diagprint(uint16_t n)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b086      	sub	sp, #24
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	807b      	strh	r3, [r7, #2]
   char str[10];
   sprintf(str, "%u", n);
 8007ea0:	887a      	ldrh	r2, [r7, #2]
 8007ea2:	f107 030c 	add.w	r3, r7, #12
 8007ea6:	490a      	ldr	r1, [pc, #40]	; (8007ed0 <_ZN10IridiumSBD9diagprintEt+0x3c>)
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f00c fa37 	bl	801431c <siprintf>
   diagprint(str);
 8007eae:	f107 030c 	add.w	r3, r7, #12
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f7ff ffd3 	bl	8007e60 <_ZN10IridiumSBD9diagprintEPKc>

   //TODO
   this->print((char*) str);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f107 020c 	add.w	r2, r7, #12
 8007ec2:	4610      	mov	r0, r2
 8007ec4:	4798      	blx	r3
}
 8007ec6:	bf00      	nop
 8007ec8:	3718      	adds	r7, #24
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	08019f7c 	.word	0x08019f7c

08007ed4 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>:

void IridiumSBD::consoleprint(FlashString str)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	1c5a      	adds	r2, r3, #1
 8007ee6:	60fa      	str	r2, [r7, #12]
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 8007eec:	7afb      	ldrb	r3, [r7, #11]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d005      	beq.n	8007efe <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0x2a>
      ISBDConsoleCallback(this, c);
 8007ef2:	7afb      	ldrb	r3, [r7, #11]
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f7fe f9a4 	bl	8006244 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   }
 8007efc:	e7f1      	b.n	8007ee2 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 8007efe:	bf00      	nop

   //TODO
   this->print((char*) str);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	6838      	ldr	r0, [r7, #0]
 8007f06:	4798      	blx	r3
}
 8007f08:	bf00      	nop
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <_ZN10IridiumSBD12consoleprintEPKc>:

void IridiumSBD::consoleprint(const char *str)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
   while (*str)
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d008      	beq.n	8007f34 <_ZN10IridiumSBD12consoleprintEPKc+0x24>
      ISBDConsoleCallback(this, *str++);
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	1c5a      	adds	r2, r3, #1
 8007f26:	603a      	str	r2, [r7, #0]
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f7fe f989 	bl	8006244 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   while (*str)
 8007f32:	e7f2      	b.n	8007f1a <_ZN10IridiumSBD12consoleprintEPKc+0xa>

   //TODO
   this->print((char*) str);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	6838      	ldr	r0, [r7, #0]
 8007f3a:	4798      	blx	r3
}
 8007f3c:	bf00      	nop
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <_ZN10IridiumSBD12consoleprintEt>:

void IridiumSBD::consoleprint(uint16_t n)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b086      	sub	sp, #24
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	807b      	strh	r3, [r7, #2]
   char str[10];
   sprintf(str, "%u", n);
 8007f50:	887a      	ldrh	r2, [r7, #2]
 8007f52:	f107 030c 	add.w	r3, r7, #12
 8007f56:	490a      	ldr	r1, [pc, #40]	; (8007f80 <_ZN10IridiumSBD12consoleprintEt+0x3c>)
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f00c f9df 	bl	801431c <siprintf>
   consoleprint(str); //TODO
 8007f5e:	f107 030c 	add.w	r3, r7, #12
 8007f62:	4619      	mov	r1, r3
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7ff ffd3 	bl	8007f10 <_ZN10IridiumSBD12consoleprintEPKc>
   //consoleprint((const char*) str);
   this->print((char*) str);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f107 020c 	add.w	r2, r7, #12
 8007f72:	4610      	mov	r0, r2
 8007f74:	4798      	blx	r3
}
 8007f76:	bf00      	nop
 8007f78:	3718      	adds	r7, #24
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	08019f7c 	.word	0x08019f7c

08007f84 <_ZN10IridiumSBD12consoleprintEc>:

void IridiumSBD::consoleprint(char c)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	70fb      	strb	r3, [r7, #3]
   ISBDConsoleCallback(this, c);
 8007f90:	78fb      	ldrb	r3, [r7, #3]
 8007f92:	4619      	mov	r1, r3
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f7fe f955 	bl	8006244 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
}
 8007f9a:	bf00      	nop
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
	...

08007fa4 <_ZN10IridiumSBD11SBDRINGSeenEv>:

void IridiumSBD::SBDRINGSeen()
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
   ringAsserted = true;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
   diagprint(F("SBDRING alert seen!\r\n"));
 8007fb4:	4903      	ldr	r1, [pc, #12]	; (8007fc4 <_ZN10IridiumSBD11SBDRINGSeenEv+0x20>)
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f7ff ff34 	bl	8007e24 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8007fbc:	bf00      	nop
 8007fbe:	3708      	adds	r7, #8
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	08019f80 	.word	0x08019f80

08007fc8 <_ZN10IridiumSBD13filterSBDRINGEv>:
// Read characters until we find one that doesn't match SBDRING
// If nextChar is -1 it means we are still entertaining a possible
// match with SBDRING\r\n.  Once we find a mismatch, stuff it into
// nextChar.
void IridiumSBD::filterSBDRING()
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
   if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	7c5b      	ldrb	r3, [r3, #17]
 8007fd4:	f083 0301 	eor.w	r3, r3, #1
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d002      	beq.n	8007fe4 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c>
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 f940 	bl	8008264 <_ZN10IridiumSBD13check9603dataEv>
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	7c5b      	ldrb	r3, [r3, #17]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00b      	beq.n	8008004 <_ZN10IridiumSBD13filterSBDRINGEv+0x3c>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	689a      	ldr	r2, [r3, #8]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	3308      	adds	r3, #8
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4610      	mov	r0, r2
 8007ffc:	4798      	blx	r3
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	dc0c      	bgt.n	800801e <_ZN10IridiumSBD13filterSBDRINGEv+0x56>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	7c5b      	ldrb	r3, [r3, #17]
 8008008:	f083 0301 	eor.w	r3, r3, #1
 800800c:	b2db      	uxtb	r3, r3
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00d      	beq.n	800802e <_ZN10IridiumSBD13filterSBDRINGEv+0x66>
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fa56 	bl	80084c4 <_ZN10IridiumSBD15i2cSerAvailableEv>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	dd07      	ble.n	800802e <_ZN10IridiumSBD13filterSBDRINGEv+0x66>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008028:	d101      	bne.n	800802e <_ZN10IridiumSBD13filterSBDRINGEv+0x66>
 800802a:	2301      	movs	r3, #1
 800802c:	e000      	b.n	8008030 <_ZN10IridiumSBD13filterSBDRINGEv+0x68>
 800802e:	2300      	movs	r3, #0
 8008030:	2b00      	cmp	r3, #0
 8008032:	f000 80af 	beq.w	8008194 <_ZN10IridiumSBD13filterSBDRINGEv+0x1cc>
   {
      char c;
      if (this->useSerial)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	7c5b      	ldrb	r3, [r3, #17]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00b      	beq.n	8008056 <_ZN10IridiumSBD13filterSBDRINGEv+0x8e>
      {
         c = stream->read();
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	689a      	ldr	r2, [r3, #8]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	330c      	adds	r3, #12
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4610      	mov	r0, r2
 800804e:	4798      	blx	r3
 8008050:	4603      	mov	r3, r0
 8008052:	73fb      	strb	r3, [r7, #15]
 8008054:	e004      	b.n	8008060 <_ZN10IridiumSBD13filterSBDRINGEv+0x98>
      }
      else
      {
         c = i2cSerRead();
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fa4c 	bl	80084f4 <_ZN10IridiumSBD10i2cSerReadEv>
 800805c:	4603      	mov	r3, r0
 800805e:	73fb      	strb	r3, [r7, #15]
      }
      consoleprint(c);
 8008060:	7bfb      	ldrb	r3, [r7, #15]
 8008062:	4619      	mov	r1, r3
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f7ff ff8d 	bl	8007f84 <_ZN10IridiumSBD12consoleprintEc>
      if (*head != 0 && c == *head)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	f000 8087 	beq.w	8008186 <_ZN10IridiumSBD13filterSBDRINGEv+0x1be>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	7bfa      	ldrb	r2, [r7, #15]
 8008082:	429a      	cmp	r2, r3
 8008084:	d17f      	bne.n	8008186 <_ZN10IridiumSBD13filterSBDRINGEv+0x1be>
      {
         ++head;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800808c:	1c5a      	adds	r2, r3, #1
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
         if (*head == 0)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10d      	bne.n	80080bc <_ZN10IridiumSBD13filterSBDRINGEv+0xf4>
         {
            SBDRINGSeen();
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f7ff ff7f 	bl	8007fa4 <_ZN10IridiumSBD11SBDRINGSeenEv>
            head = tail = SBDRING;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a3c      	ldr	r2, [pc, #240]	; (800819c <_ZN10IridiumSBD13filterSBDRINGEv+0x1d4>)
 80080aa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
            {
               --head;
               nextChar = c;
            }
         }
 80080ba:	e069      	b.n	8008190 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c8>
            for (unsigned long start = millis(); ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) && millis() - start < FILTERTIMEOUT; );
 80080bc:	f001 fd72 	bl	8009ba4 <HAL_GetTick>
 80080c0:	60b8      	str	r0, [r7, #8]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	7c5b      	ldrb	r3, [r3, #17]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00b      	beq.n	80080e2 <_ZN10IridiumSBD13filterSBDRINGEv+0x11a>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	689a      	ldr	r2, [r3, #8]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	3308      	adds	r3, #8
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4610      	mov	r0, r2
 80080da:	4798      	blx	r3
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00c      	beq.n	80080fc <_ZN10IridiumSBD13filterSBDRINGEv+0x134>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	7c5b      	ldrb	r3, [r3, #17]
 80080e6:	f083 0301 	eor.w	r3, r3, #1
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00e      	beq.n	800810e <_ZN10IridiumSBD13filterSBDRINGEv+0x146>
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 f9e7 	bl	80084c4 <_ZN10IridiumSBD15i2cSerAvailableEv>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d108      	bne.n	800810e <_ZN10IridiumSBD13filterSBDRINGEv+0x146>
 80080fc:	f001 fd52 	bl	8009ba4 <HAL_GetTick>
 8008100:	4602      	mov	r2, r0
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	2b09      	cmp	r3, #9
 8008108:	d801      	bhi.n	800810e <_ZN10IridiumSBD13filterSBDRINGEv+0x146>
 800810a:	2301      	movs	r3, #1
 800810c:	e000      	b.n	8008110 <_ZN10IridiumSBD13filterSBDRINGEv+0x148>
 800810e:	2300      	movs	r3, #0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d000      	beq.n	8008116 <_ZN10IridiumSBD13filterSBDRINGEv+0x14e>
 8008114:	e7d5      	b.n	80080c2 <_ZN10IridiumSBD13filterSBDRINGEv+0xfa>
            if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	7c5b      	ldrb	r3, [r3, #17]
 800811a:	f083 0301 	eor.w	r3, r3, #1
 800811e:	b2db      	uxtb	r3, r3
 8008120:	2b00      	cmp	r3, #0
 8008122:	d002      	beq.n	800812a <_ZN10IridiumSBD13filterSBDRINGEv+0x162>
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 f89d 	bl	8008264 <_ZN10IridiumSBD13check9603dataEv>
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	7c5b      	ldrb	r3, [r3, #17]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00b      	beq.n	800814a <_ZN10IridiumSBD13filterSBDRINGEv+0x182>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	689a      	ldr	r2, [r3, #8]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	3308      	adds	r3, #8
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4610      	mov	r0, r2
 8008142:	4798      	blx	r3
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00c      	beq.n	8008164 <_ZN10IridiumSBD13filterSBDRINGEv+0x19c>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	7c5b      	ldrb	r3, [r3, #17]
 800814e:	f083 0301 	eor.w	r3, r3, #1
 8008152:	b2db      	uxtb	r3, r3
 8008154:	2b00      	cmp	r3, #0
 8008156:	d007      	beq.n	8008168 <_ZN10IridiumSBD13filterSBDRINGEv+0x1a0>
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 f9b3 	bl	80084c4 <_ZN10IridiumSBD15i2cSerAvailableEv>
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d101      	bne.n	8008168 <_ZN10IridiumSBD13filterSBDRINGEv+0x1a0>
 8008164:	2301      	movs	r3, #1
 8008166:	e000      	b.n	800816a <_ZN10IridiumSBD13filterSBDRINGEv+0x1a2>
 8008168:	2300      	movs	r3, #0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d010      	beq.n	8008190 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c8>
               --head;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008174:	1e5a      	subs	r2, r3, #1
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
               nextChar = c;
 800817c:	7bfa      	ldrb	r2, [r7, #15]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
         }
 8008184:	e004      	b.n	8008190 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c8>
      }
      else
      {
         nextChar = c;
 8008186:	7bfa      	ldrb	r2, [r7, #15]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800818e:	e729      	b.n	8007fe4 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c>
         }
 8008190:	bf00      	nop
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 8008192:	e727      	b.n	8007fe4 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c>
      }
   }
}
 8008194:	bf00      	nop
 8008196:	3710      	adds	r7, #16
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}
 800819c:	0801a8f4 	.word	0x0801a8f4

080081a0 <_ZN10IridiumSBD17filteredavailableEv>:

const char IridiumSBD::SBDRING[] = "SBDRING\r\n";

int IridiumSBD::filteredavailable()
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7ff ff0d 	bl	8007fc8 <_ZN10IridiumSBD13filterSBDRINGEv>
   return head - tail + (nextChar != -1 ? 1 : 0);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081ba:	1ad3      	subs	r3, r2, r3
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 80081c2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80081c6:	d001      	beq.n	80081cc <_ZN10IridiumSBD17filteredavailableEv+0x2c>
 80081c8:	2201      	movs	r2, #1
 80081ca:	e000      	b.n	80081ce <_ZN10IridiumSBD17filteredavailableEv+0x2e>
 80081cc:	2200      	movs	r2, #0
 80081ce:	4413      	add	r3, r2
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3708      	adds	r7, #8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <_ZN10IridiumSBD12filteredreadEv>:

int IridiumSBD::filteredread()
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f7ff fef1 	bl	8007fc8 <_ZN10IridiumSBD13filterSBDRINGEv>

   // Use up the queue first
   if (head > tail)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d91c      	bls.n	8008230 <_ZN10IridiumSBD12filteredreadEv+0x58>
   {
      char c = *tail++;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081fc:	1c59      	adds	r1, r3, #1
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	73bb      	strb	r3, [r7, #14]
      if (head == tail)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008214:	429a      	cmp	r2, r3
 8008216:	d109      	bne.n	800822c <_ZN10IridiumSBD12filteredreadEv+0x54>
         head = tail = SBDRING;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a11      	ldr	r2, [pc, #68]	; (8008260 <_ZN10IridiumSBD12filteredreadEv+0x88>)
 800821c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      return c;
 800822c:	7bbb      	ldrb	r3, [r7, #14]
 800822e:	e012      	b.n	8008256 <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   // Then the "extra" char
   else if (nextChar != -1)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800823a:	d00a      	beq.n	8008252 <_ZN10IridiumSBD12filteredreadEv+0x7a>
   {
      char c = (char)nextChar;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008242:	73fb      	strb	r3, [r7, #15]
      nextChar = -1;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f04f 32ff 	mov.w	r2, #4294967295
 800824a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      return c;
 800824e:	7bfb      	ldrb	r3, [r7, #15]
 8008250:	e001      	b.n	8008256 <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   return -1;
 8008252:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	0801a8f4 	.word	0x0801a8f4

08008264 <_ZN10IridiumSBD13check9603dataEv>:

//Checks the number of available serial bytes
//Reads the available serial bytes (if any) and stores them in i2c_ser_buffer
void IridiumSBD::check9603data()
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  if (millis() - lastCheck >= I2C_POLLING_WAIT_MS)
 800826c:	f001 fc9a 	bl	8009ba4 <HAL_GetTick>
 8008270:	4602      	mov	r2, r0
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 800827e:	4293      	cmp	r3, r2
 8008280:	bf2c      	ite	cs
 8008282:	2301      	movcs	r3, #1
 8008284:	2300      	movcc	r3, #0
 8008286:	b2db      	uxtb	r3, r3
 8008288:	2b00      	cmp	r3, #0
 800828a:	f000 80b8 	beq.w	80083fe <_ZN10IridiumSBD13check9603dataEv+0x19a>
  {
    //Check how many serial bytes are waiting to be read
    uint16_t bytesAvailable = 0;
 800828e:	2300      	movs	r3, #0
 8008290:	81fb      	strh	r3, [r7, #14]
    wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	68da      	ldr	r2, [r3, #12]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	7c1b      	ldrb	r3, [r3, #16]
 800829a:	4619      	mov	r1, r3
 800829c:	4610      	mov	r0, r2
 800829e:	f000 ffc1 	bl	8009224 <_ZN7TwoWire17beginTransmissionEh>
    wireport->write(LEN_REG); // Point to the serial buffer length
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	21fd      	movs	r1, #253	; 0xfd
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7fd ffb1 	bl	8006210 <_ZN7TwoWire5writeEi>
    wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	4618      	mov	r0, r3
 80082b4:	f001 f800 	bl	80092b8 <_ZN7TwoWire15endTransmissionEv>
    if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)2) == 2) // Request two bytes
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	68d8      	ldr	r0, [r3, #12]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	7c1b      	ldrb	r3, [r3, #16]
 80082c0:	2202      	movs	r2, #2
 80082c2:	4619      	mov	r1, r3
 80082c4:	f000 ff9b 	bl	80091fe <_ZN7TwoWire11requestFromEhh>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	bf0c      	ite	eq
 80082ce:	2301      	moveq	r3, #1
 80082d0:	2300      	movne	r3, #0
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d01d      	beq.n	8008314 <_ZN10IridiumSBD13check9603dataEv+0xb0>
    {
      uint8_t msb = wireport->read();
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	68da      	ldr	r2, [r3, #12]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	330c      	adds	r3, #12
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4610      	mov	r0, r2
 80082e8:	4798      	blx	r3
 80082ea:	4603      	mov	r3, r0
 80082ec:	737b      	strb	r3, [r7, #13]
      uint8_t lsb = wireport->read();
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	68da      	ldr	r2, [r3, #12]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	330c      	adds	r3, #12
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4610      	mov	r0, r2
 80082fe:	4798      	blx	r3
 8008300:	4603      	mov	r3, r0
 8008302:	733b      	strb	r3, [r7, #12]
      bytesAvailable = (((uint16_t)msb) << 8) | lsb;
 8008304:	7b7b      	ldrb	r3, [r7, #13]
 8008306:	021b      	lsls	r3, r3, #8
 8008308:	b21a      	sxth	r2, r3
 800830a:	7b3b      	ldrb	r3, [r7, #12]
 800830c:	b21b      	sxth	r3, r3
 800830e:	4313      	orrs	r3, r2
 8008310:	b21b      	sxth	r3, r3
 8008312:	81fb      	strh	r3, [r7, #14]
    }

    //Now read the serial bytes (if any)
    if (bytesAvailable > 0)
 8008314:	89fb      	ldrh	r3, [r7, #14]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d06c      	beq.n	80083f4 <_ZN10IridiumSBD13check9603dataEv+0x190>
    {
      // Request the bytes
      // Poke them into the i2c_serial buffer
      // Release the bus afterwards
      wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68da      	ldr	r2, [r3, #12]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	7c1b      	ldrb	r3, [r3, #16]
 8008322:	4619      	mov	r1, r3
 8008324:	4610      	mov	r0, r2
 8008326:	f000 ff7d 	bl	8009224 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the serial buffer
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	21ff      	movs	r1, #255	; 0xff
 8008330:	4618      	mov	r0, r3
 8008332:	f7fd ff6d 	bl	8006210 <_ZN7TwoWire5writeEi>
      wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	4618      	mov	r0, r3
 800833c:	f000 ffbc 	bl	80092b8 <_ZN7TwoWire15endTransmissionEv>
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 8008340:	89fb      	ldrh	r3, [r7, #14]
 8008342:	2b08      	cmp	r3, #8
 8008344:	d92c      	bls.n	80083a0 <_ZN10IridiumSBD13check9603dataEv+0x13c>
      {
        wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)SER_PACKET_SIZE, (uint8_t)false); // Request SER_PACKET_SIZE bytes, don't release the bus
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	68d8      	ldr	r0, [r3, #12]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	7c19      	ldrb	r1, [r3, #16]
 800834e:	2300      	movs	r3, #0
 8008350:	2208      	movs	r2, #8
 8008352:	f000 ff19 	bl	8009188 <_ZN7TwoWire11requestFromEhhh>
        while (wireport->available())
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	68da      	ldr	r2, [r3, #12]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	3308      	adds	r3, #8
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4610      	mov	r0, r2
 8008366:	4798      	blx	r3
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	bf14      	ite	ne
 800836e:	2301      	movne	r3, #1
 8008370:	2300      	moveq	r3, #0
 8008372:	b2db      	uxtb	r3, r3
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00f      	beq.n	8008398 <_ZN10IridiumSBD13check9603dataEv+0x134>
        {
          i2cSerPoke(wireport->read()); // Read and store each byte
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	68da      	ldr	r2, [r3, #12]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	330c      	adds	r3, #12
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4610      	mov	r0, r2
 8008388:	4798      	blx	r3
 800838a:	4603      	mov	r3, r0
 800838c:	b2db      	uxtb	r3, r3
 800838e:	4619      	mov	r1, r3
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 f8d5 	bl	8008540 <_ZN10IridiumSBD10i2cSerPokeEc>
        while (wireport->available())
 8008396:	e7de      	b.n	8008356 <_ZN10IridiumSBD13check9603dataEv+0xf2>
        }
        bytesAvailable -= SER_PACKET_SIZE; // Decrease the number of bytes available by SER_PACKET_SIZE
 8008398:	89fb      	ldrh	r3, [r7, #14]
 800839a:	3b08      	subs	r3, #8
 800839c:	81fb      	strh	r3, [r7, #14]
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 800839e:	e7cf      	b.n	8008340 <_ZN10IridiumSBD13check9603dataEv+0xdc>
      }
      wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)bytesAvailable); // Request remaining bytes, release the bus
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	68d8      	ldr	r0, [r3, #12]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	7c1b      	ldrb	r3, [r3, #16]
 80083a8:	89fa      	ldrh	r2, [r7, #14]
 80083aa:	b2d2      	uxtb	r2, r2
 80083ac:	4619      	mov	r1, r3
 80083ae:	f000 ff26 	bl	80091fe <_ZN7TwoWire11requestFromEhh>
      while (wireport->available())
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	68da      	ldr	r2, [r3, #12]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	3308      	adds	r3, #8
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4610      	mov	r0, r2
 80083c2:	4798      	blx	r3
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	bf14      	ite	ne
 80083ca:	2301      	movne	r3, #1
 80083cc:	2300      	moveq	r3, #0
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00f      	beq.n	80083f4 <_ZN10IridiumSBD13check9603dataEv+0x190>
      {
        i2cSerPoke(wireport->read()); // Read and store each byte
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	68da      	ldr	r2, [r3, #12]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	330c      	adds	r3, #12
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4610      	mov	r0, r2
 80083e4:	4798      	blx	r3
 80083e6:	4603      	mov	r3, r0
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	4619      	mov	r1, r3
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f8a7 	bl	8008540 <_ZN10IridiumSBD10i2cSerPokeEc>
      while (wireport->available())
 80083f2:	e7de      	b.n	80083b2 <_ZN10IridiumSBD13check9603dataEv+0x14e>
      }
    }

    lastCheck = millis(); //Put off checking to avoid excessive I2C bus traffic
 80083f4:	f001 fbd6 	bl	8009ba4 <HAL_GetTick>
 80083f8:	4602      	mov	r2, r0
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80083fe:	bf00      	nop
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <_ZN10IridiumSBD13check9603pinsEv>:

//Reads the IO pins and update IO_REGISTER
void IridiumSBD::check9603pins()
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b082      	sub	sp, #8
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
  //Read the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	68da      	ldr	r2, [r3, #12]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	7c1b      	ldrb	r3, [r3, #16]
 8008416:	4619      	mov	r1, r3
 8008418:	4610      	mov	r0, r2
 800841a:	f000 ff03 	bl	8009224 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	2110      	movs	r1, #16
 8008424:	4618      	mov	r0, r3
 8008426:	f7fd fef3 	bl	8006210 <_ZN7TwoWire5writeEi>
  wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	4618      	mov	r0, r3
 8008430:	f000 ff42 	bl	80092b8 <_ZN7TwoWire15endTransmissionEv>
  if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)1) == 1) // Request one byte from the IO register
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	68d8      	ldr	r0, [r3, #12]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	7c1b      	ldrb	r3, [r3, #16]
 800843c:	2201      	movs	r2, #1
 800843e:	4619      	mov	r1, r3
 8008440:	f000 fedd 	bl	80091fe <_ZN7TwoWire11requestFromEhh>
 8008444:	4603      	mov	r3, r0
 8008446:	2b01      	cmp	r3, #1
 8008448:	bf0c      	ite	eq
 800844a:	2301      	moveq	r3, #1
 800844c:	2300      	movne	r3, #0
 800844e:	b2db      	uxtb	r3, r3
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00d      	beq.n	8008470 <_ZN10IridiumSBD13check9603pinsEv+0x6a>
  {
    IO_REGISTER = wireport->read(); // Read the IO register
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	68da      	ldr	r2, [r3, #12]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	330c      	adds	r3, #12
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4610      	mov	r0, r2
 8008464:	4798      	blx	r3
 8008466:	4603      	mov	r3, r0
 8008468:	b2da      	uxtb	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  }
}
 8008470:	bf00      	nop
 8008472:	3708      	adds	r7, #8
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <_ZN10IridiumSBD11set9603pinsEh>:

//Set the IO pins
void IridiumSBD::set9603pins(uint8_t pins)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	460b      	mov	r3, r1
 8008482:	70fb      	strb	r3, [r7, #3]
  //Write to the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	68da      	ldr	r2, [r3, #12]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	7c1b      	ldrb	r3, [r3, #16]
 800848c:	4619      	mov	r1, r3
 800848e:	4610      	mov	r0, r2
 8008490:	f000 fec8 	bl	8009224 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	2110      	movs	r1, #16
 800849a:	4618      	mov	r0, r3
 800849c:	f7fd feb8 	bl	8006210 <_ZN7TwoWire5writeEi>
  wireport->write(pins); // Set the pins
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	68da      	ldr	r2, [r3, #12]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	78f9      	ldrb	r1, [r7, #3]
 80084ae:	4610      	mov	r0, r2
 80084b0:	4798      	blx	r3
  wireport->endTransmission(); // Send data and surrender the bus
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	4618      	mov	r0, r3
 80084b8:	f000 fefe 	bl	80092b8 <_ZN7TwoWire15endTransmissionEv>
}
 80084bc:	bf00      	nop
 80084be:	3708      	adds	r7, #8
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <_ZN10IridiumSBD15i2cSerAvailableEv>:
    return(ISBD_SUCCESS);
}

// I2C_SER functions
int IridiumSBD::i2cSerAvailable()
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  return (i2c_ser_buffer_tail + I2C_SER_MAX_BUFF - i2c_ser_buffer_head) % I2C_SER_MAX_BUFF;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084d0:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	425a      	negs	r2, r3
 80084dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084e0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80084e4:	bf58      	it	pl
 80084e6:	4253      	negpl	r3, r2
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <_ZN10IridiumSBD10i2cSerReadEv>:

int IridiumSBD::i2cSerRead()
{
 80084f4:	b480      	push	{r7}
 80084f6:	b085      	sub	sp, #20
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  // Empty buffer?
  if (i2c_ser_buffer_head == i2c_ser_buffer_tail)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008504:	429a      	cmp	r2, r3
 8008506:	d102      	bne.n	800850e <_ZN10IridiumSBD10i2cSerReadEv+0x1a>
    return -1;
 8008508:	f04f 33ff 	mov.w	r3, #4294967295
 800850c:	e012      	b.n	8008534 <_ZN10IridiumSBD10i2cSerReadEv+0x40>

  // Read from "head"
  uint8_t d = i2c_ser_buffer[i2c_ser_buffer_head]; // grab next byte
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	4413      	add	r3, r2
 8008516:	7c9b      	ldrb	r3, [r3, #18]
 8008518:	73fb      	strb	r3, [r7, #15]
  i2c_ser_buffer_head = (i2c_ser_buffer_head + 1) % I2C_SER_MAX_BUFF; // update head
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800851e:	3301      	adds	r3, #1
 8008520:	425a      	negs	r2, r3
 8008522:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008526:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800852a:	bf58      	it	pl
 800852c:	4253      	negpl	r3, r2
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	6593      	str	r3, [r2, #88]	; 0x58
  return d;
 8008532:	7bfb      	ldrb	r3, [r7, #15]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3714      	adds	r7, #20
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <_ZN10IridiumSBD10i2cSerPokeEc>:

void IridiumSBD::i2cSerPoke(char serChar)
{
 8008540:	b480      	push	{r7}
 8008542:	b085      	sub	sp, #20
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	460b      	mov	r3, r1
 800854a:	70fb      	strb	r3, [r7, #3]
  // Calculate the new value for the tail
  int next = (i2c_ser_buffer_tail + 1) % I2C_SER_MAX_BUFF;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008550:	3301      	adds	r3, #1
 8008552:	425a      	negs	r2, r3
 8008554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008558:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800855c:	bf58      	it	pl
 800855e:	4253      	negpl	r3, r2
 8008560:	60fb      	str	r3, [r7, #12]
  // If the buffer is not full (i.e. we are not about to overwrite the head byte)
  // If the buffer is full, the byte is lost
  if (next != i2c_ser_buffer_head)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	429a      	cmp	r2, r3
 800856a:	d008      	beq.n	800857e <_ZN10IridiumSBD10i2cSerPokeEc+0x3e>
  {
    // save new data in buffer: tail points to where byte goes
    i2c_ser_buffer[i2c_ser_buffer_tail] = serChar; // save new byte
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	4413      	add	r3, r2
 8008574:	78fa      	ldrb	r2, [r7, #3]
 8008576:	749a      	strb	r2, [r3, #18]
    i2c_ser_buffer_tail = next;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	68fa      	ldr	r2, [r7, #12]
 800857c:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 800857e:	bf00      	nop
 8008580:	3714      	adds	r7, #20
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
	...

0800858c <_ZN10IridiumSBD20internalClearBuffersEi>:

int IridiumSBD::internalClearBuffers(int buffers)
// Clear the MO/MT/Both buffers
// Defaults to clearing the MO buffer to avoid resending old messages
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af02      	add	r7, sp, #8
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
   if (this->asleep)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800859c:	2b00      	cmp	r3, #0
 800859e:	d001      	beq.n	80085a4 <_ZN10IridiumSBD20internalClearBuffersEi+0x18>
      return ISBD_IS_ASLEEP;
 80085a0:	230a      	movs	r3, #10
 80085a2:	e032      	b.n	800860a <_ZN10IridiumSBD20internalClearBuffersEi+0x7e>

   if (buffers == ISBD_CLEAR_MT) // Clear MT buffer
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d106      	bne.n	80085b8 <_ZN10IridiumSBD20internalClearBuffersEi+0x2c>
   {
      send(F("AT+SBDD1\r"));
 80085aa:	2301      	movs	r3, #1
 80085ac:	2201      	movs	r2, #1
 80085ae:	4919      	ldr	r1, [pc, #100]	; (8008614 <_ZN10IridiumSBD20internalClearBuffersEi+0x88>)
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f7ff fab9 	bl	8007b28 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
 80085b6:	e00f      	b.n	80085d8 <_ZN10IridiumSBD20internalClearBuffersEi+0x4c>
   }
   else if (buffers == ISBD_CLEAR_BOTH) // Clear both buffers
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d106      	bne.n	80085cc <_ZN10IridiumSBD20internalClearBuffersEi+0x40>
   {
      send(F("AT+SBDD2\r"));
 80085be:	2301      	movs	r3, #1
 80085c0:	2201      	movs	r2, #1
 80085c2:	4915      	ldr	r1, [pc, #84]	; (8008618 <_ZN10IridiumSBD20internalClearBuffersEi+0x8c>)
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f7ff faaf 	bl	8007b28 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
 80085ca:	e005      	b.n	80085d8 <_ZN10IridiumSBD20internalClearBuffersEi+0x4c>
   }
   else // Clear MO buffer
   {
      send(F("AT+SBDD0\r"));
 80085cc:	2301      	movs	r3, #1
 80085ce:	2201      	movs	r2, #1
 80085d0:	4912      	ldr	r1, [pc, #72]	; (800861c <_ZN10IridiumSBD20internalClearBuffersEi+0x90>)
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f7ff faa8 	bl	8007b28 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   }
   if (!waitForATResponse())
 80085d8:	4b11      	ldr	r3, [pc, #68]	; (8008620 <_ZN10IridiumSBD20internalClearBuffersEi+0x94>)
 80085da:	9300      	str	r3, [sp, #0]
 80085dc:	2300      	movs	r3, #0
 80085de:	2200      	movs	r2, #0
 80085e0:	2100      	movs	r1, #0
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f7fe fe3e 	bl	8007264 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80085e8:	4603      	mov	r3, r0
 80085ea:	f083 0301 	eor.w	r3, r3, #1
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d009      	beq.n	8008608 <_ZN10IridiumSBD20internalClearBuffersEi+0x7c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f7fe fef3 	bl	80073e0 <_ZN10IridiumSBD9cancelledEv>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d001      	beq.n	8008604 <_ZN10IridiumSBD20internalClearBuffersEi+0x78>
 8008600:	2304      	movs	r3, #4
 8008602:	e002      	b.n	800860a <_ZN10IridiumSBD20internalClearBuffersEi+0x7e>
 8008604:	2303      	movs	r3, #3
 8008606:	e000      	b.n	800860a <_ZN10IridiumSBD20internalClearBuffersEi+0x7e>

   return ISBD_SUCCESS;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3708      	adds	r7, #8
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	08019fcc 	.word	0x08019fcc
 8008618:	08019fd8 	.word	0x08019fd8
 800861c:	08019fe4 	.word	0x08019fe4
 8008620:	08019914 	.word	0x08019914

08008624 <_ZN10IridiumSBD15internalGetIMEIEPcj>:

int IridiumSBD::internalGetIMEI(char *IMEI, size_t bufferSize)
// Get the IMEI
// https://github.com/mikalhart/IridiumSBD/pull/21
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af02      	add	r7, sp, #8
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]
   if (this->asleep)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8008636:	2b00      	cmp	r3, #0
 8008638:	d001      	beq.n	800863e <_ZN10IridiumSBD15internalGetIMEIEPcj+0x1a>
      return ISBD_IS_ASLEEP;
 800863a:	230a      	movs	r3, #10
 800863c:	e023      	b.n	8008686 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>

   if (bufferSize < 16) // IMEI is 15 digits
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2b0f      	cmp	r3, #15
 8008642:	d801      	bhi.n	8008648 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x24>
      return ISBD_RX_OVERFLOW;
 8008644:	2308      	movs	r3, #8
 8008646:	e01e      	b.n	8008686 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>

   send(F("AT+CGSN\r"));
 8008648:	2301      	movs	r3, #1
 800864a:	2201      	movs	r2, #1
 800864c:	4910      	ldr	r1, [pc, #64]	; (8008690 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x6c>)
 800864e:	68f8      	ldr	r0, [r7, #12]
 8008650:	f7ff fa6a 	bl	8007b28 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(IMEI, bufferSize, "\n"))
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	4b0f      	ldr	r3, [pc, #60]	; (8008694 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x70>)
 8008658:	9300      	str	r3, [sp, #0]
 800865a:	4b0f      	ldr	r3, [pc, #60]	; (8008698 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x74>)
 800865c:	68b9      	ldr	r1, [r7, #8]
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f7fe fe00 	bl	8007264 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8008664:	4603      	mov	r3, r0
 8008666:	f083 0301 	eor.w	r3, r3, #1
 800866a:	b2db      	uxtb	r3, r3
 800866c:	2b00      	cmp	r3, #0
 800866e:	d009      	beq.n	8008684 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x60>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8008670:	68f8      	ldr	r0, [r7, #12]
 8008672:	f7fe feb5 	bl	80073e0 <_ZN10IridiumSBD9cancelledEv>
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d001      	beq.n	8008680 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x5c>
 800867c:	2304      	movs	r3, #4
 800867e:	e002      	b.n	8008686 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>
 8008680:	2303      	movs	r3, #3
 8008682:	e000      	b.n	8008686 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>

   return ISBD_SUCCESS;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3710      	adds	r7, #16
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	08019ff0 	.word	0x08019ff0
 8008694:	08019914 	.word	0x08019914
 8008698:	08019ffc 	.word	0x08019ffc

0800869c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE>:
}
#endif


//uint8_t IridiumSBD::MRT_Iridium_setup(UART_HandleTypeDef huart,POWERPROFILE profile){ TODO??
uint8_t IridiumSBD::MRT_Iridium_setup(uint8_t timeout, uint8_t i2c_bus, void (*iridium_print)(char*)){
 800869c:	b580      	push	{r7, lr}
 800869e:	b092      	sub	sp, #72	; 0x48
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	607b      	str	r3, [r7, #4]
 80086a6:	460b      	mov	r3, r1
 80086a8:	72fb      	strb	r3, [r7, #11]
 80086aa:	4613      	mov	r3, r2
 80086ac:	72bb      	strb	r3, [r7, #10]
	this->print = iridium_print;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	601a      	str	r2, [r3, #0]
	this->print((char*) "\r\nIridium 9603N Init\r\n");
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	485b      	ldr	r0, [pc, #364]	; (8008828 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x18c>)
 80086ba:	4798      	blx	r3

	this->print((char*) "\tSetting I2C bus...");
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	485a      	ldr	r0, [pc, #360]	; (800882c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x190>)
 80086c2:	4798      	blx	r3
	if (i2c_bus == 1){
 80086c4:	7abb      	ldrb	r3, [r7, #10]
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d103      	bne.n	80086d2 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x36>
		this->wireport = &Wire;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	4a58      	ldr	r2, [pc, #352]	; (8008830 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x194>)
 80086ce:	60da      	str	r2, [r3, #12]
 80086d0:	e00c      	b.n	80086ec <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x50>
	}
	else if (i2c_bus == 2){
 80086d2:	7abb      	ldrb	r3, [r7, #10]
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d103      	bne.n	80086e0 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x44>
		this->wireport = &Wire1;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	4a56      	ldr	r2, [pc, #344]	; (8008834 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x198>)
 80086dc:	60da      	str	r2, [r3, #12]
 80086de:	e005      	b.n	80086ec <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x50>
	}
	else if (i2c_bus == 3){
 80086e0:	7abb      	ldrb	r3, [r7, #10]
 80086e2:	2b03      	cmp	r3, #3
 80086e4:	d102      	bne.n	80086ec <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x50>
		this->wireport = &Wire2;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	4a53      	ldr	r2, [pc, #332]	; (8008838 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x19c>)
 80086ea:	60da      	str	r2, [r3, #12]
	}
	this->print((char*) "OK\r\n");
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4852      	ldr	r0, [pc, #328]	; (800883c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 80086f2:	4798      	blx	r3

	this->print((char*) "\tChecking device connection...");
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4851      	ldr	r0, [pc, #324]	; (8008840 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a4>)
 80086fa:	4798      	blx	r3
	while(!this->isConnected()){
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f7fe f89f 	bl	8006840 <_ZN10IridiumSBD11isConnectedEv>
 8008702:	4603      	mov	r3, r0
 8008704:	f083 0301 	eor.w	r3, r3, #1
 8008708:	b2db      	uxtb	r3, r3
 800870a:	2b00      	cmp	r3, #0
 800870c:	d020      	beq.n	8008750 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0xb4>
		HAL_Delay(300);
 800870e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008712:	f001 fa53 	bl	8009bbc <HAL_Delay>
		this->print((char*) "\r\tChecking device connection   ");
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	484a      	ldr	r0, [pc, #296]	; (8008844 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a8>)
 800871c:	4798      	blx	r3
		HAL_Delay(300);
 800871e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008722:	f001 fa4b 	bl	8009bbc <HAL_Delay>
		this->print((char*) "\r\tChecking device connection.  ");
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4847      	ldr	r0, [pc, #284]	; (8008848 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1ac>)
 800872c:	4798      	blx	r3
		HAL_Delay(300);
 800872e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008732:	f001 fa43 	bl	8009bbc <HAL_Delay>
		this->print((char*) "\r\tChecking device connection.. ");
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4844      	ldr	r0, [pc, #272]	; (800884c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1b0>)
 800873c:	4798      	blx	r3
		HAL_Delay(300);
 800873e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008742:	f001 fa3b 	bl	8009bbc <HAL_Delay>
		this->print((char*) "\r\tChecking device connection...");
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4841      	ldr	r0, [pc, #260]	; (8008850 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1b4>)
 800874c:	4798      	blx	r3
	while(!this->isConnected()){
 800874e:	e7d5      	b.n	80086fc <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x60>
	}
	this->print((char*) "OK\r\n");
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4839      	ldr	r0, [pc, #228]	; (800883c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 8008756:	4798      	blx	r3

	//Activate the superchargers
	this->print((char*) "\tActivating the superchargers...");
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	483d      	ldr	r0, [pc, #244]	; (8008854 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1b8>)
 800875e:	4798      	blx	r3
	this->enableSuperCapCharger(true);
 8008760:	2101      	movs	r1, #1
 8008762:	68f8      	ldr	r0, [r7, #12]
 8008764:	f7fd fee4 	bl	8006530 <_ZN10IridiumSBD21enableSuperCapChargerEb>
	this->print((char*) "OK\r\n");
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4833      	ldr	r0, [pc, #204]	; (800883c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 800876e:	4798      	blx	r3


	//Wait for the supercapacitors to charge
	//int start=millis();
	this->print((char*) "\tWaiting for the supercapacitors to charge...");
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4838      	ldr	r0, [pc, #224]	; (8008858 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1bc>)
 8008776:	4798      	blx	r3
	while (!this->checkSuperCapCharger()){
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f7fd ff17 	bl	80065ac <_ZN10IridiumSBD20checkSuperCapChargerEv>
 800877e:	4603      	mov	r3, r0
 8008780:	f083 0301 	eor.w	r3, r3, #1
 8008784:	b2db      	uxtb	r3, r3
 8008786:	2b00      	cmp	r3, #0
 8008788:	d004      	beq.n	8008794 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0xf8>
		HAL_Delay(333);
 800878a:	f240 104d 	movw	r0, #333	; 0x14d
 800878e:	f001 fa15 	bl	8009bbc <HAL_Delay>
	while (!this->checkSuperCapCharger()){
 8008792:	e7f1      	b.n	8008778 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0xdc>
	}
	this->print((char*) "OK\r\n");
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4828      	ldr	r0, [pc, #160]	; (800883c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 800879a:	4798      	blx	r3


	//Enable power for the 9603N
	this->print((char*) "\tEnabling 9603N power...");
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	482e      	ldr	r0, [pc, #184]	; (800885c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1c0>)
 80087a2:	4798      	blx	r3
	this->enable9603Npower(true);
 80087a4:	2101      	movs	r1, #1
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	f7fd ff30 	bl	800660c <_ZN10IridiumSBD16enable9603NpowerEb>
	this->print((char*) "OK\r\n");
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4822      	ldr	r0, [pc, #136]	; (800883c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 80087b2:	4798      	blx	r3
	/*
	 * Begin satellite modem operation
	 */

	//Power on the rockblock
	this->print((char*) "\tStarting Modem...");
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4829      	ldr	r0, [pc, #164]	; (8008860 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1c4>)
 80087ba:	4798      	blx	r3
	//this->setPowerProfile(profile);
	int err = this->begin();
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f7fd fd59 	bl	8006274 <_ZN10IridiumSBD5beginEv>
 80087c2:	6478      	str	r0, [r7, #68]	; 0x44
	if (err != ISBD_SUCCESS)
 80087c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00b      	beq.n	80087e2 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x146>
	  {
		this->print((char*) "Failed: ");
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4825      	ldr	r0, [pc, #148]	; (8008864 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1c8>)
 80087d0:	4798      	blx	r3
		this->MRT_Iridium_ErrorMessage(err);
 80087d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	4619      	mov	r1, r3
 80087d8:	68f8      	ldr	r0, [r7, #12]
 80087da:	f000 f849 	bl	8008870 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>

	    return HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	e01d      	b.n	800881e <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x182>
	  }
	this->print((char*) "OK\r\n");
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4815      	ldr	r0, [pc, #84]	; (800883c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 80087e8:	4798      	blx	r3

	//Setup default IMEI to 000000000000000 (no IMEI)
	IMEI= (char*) "000000000000000";
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	4a1e      	ldr	r2, [pc, #120]	; (8008868 <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1cc>)
 80087ee:	605a      	str	r2, [r3, #4]

	char str[50];
	sprintf(str, "\tSetting timeout of %i seconds...", timeout);
 80087f0:	7afa      	ldrb	r2, [r7, #11]
 80087f2:	f107 0310 	add.w	r3, r7, #16
 80087f6:	491d      	ldr	r1, [pc, #116]	; (800886c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1d0>)
 80087f8:	4618      	mov	r0, r3
 80087fa:	f00b fd8f 	bl	801431c <siprintf>
	this->print((char*) str);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f107 0210 	add.w	r2, r7, #16
 8008806:	4610      	mov	r0, r2
 8008808:	4798      	blx	r3
	adjustATTimeout(timeout);
 800880a:	7afb      	ldrb	r3, [r7, #11]
 800880c:	4619      	mov	r1, r3
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	f7fd fd9c 	bl	800634c <_ZN10IridiumSBD15adjustATTimeoutEi>
	this->print((char*) "OK\r\n");
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4808      	ldr	r0, [pc, #32]	; (800883c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE+0x1a0>)
 800881a:	4798      	blx	r3

	return HAL_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3748      	adds	r7, #72	; 0x48
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	0801a000 	.word	0x0801a000
 800882c:	0801a018 	.word	0x0801a018
 8008830:	20000408 	.word	0x20000408
 8008834:	200004c0 	.word	0x200004c0
 8008838:	20000578 	.word	0x20000578
 800883c:	08019914 	.word	0x08019914
 8008840:	0801a02c 	.word	0x0801a02c
 8008844:	0801a04c 	.word	0x0801a04c
 8008848:	0801a06c 	.word	0x0801a06c
 800884c:	0801a08c 	.word	0x0801a08c
 8008850:	0801a0ac 	.word	0x0801a0ac
 8008854:	0801a0cc 	.word	0x0801a0cc
 8008858:	0801a0f0 	.word	0x0801a0f0
 800885c:	0801a120 	.word	0x0801a120
 8008860:	0801a13c 	.word	0x0801a13c
 8008864:	0801a150 	.word	0x0801a150
 8008868:	0801a15c 	.word	0x0801a15c
 800886c:	0801a16c 	.word	0x0801a16c

08008870 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>:
	return true;
}



void IridiumSBD::MRT_Iridium_ErrorMessage(uint8_t error){
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	460b      	mov	r3, r1
 800887a:	70fb      	strb	r3, [r7, #3]
	this->print((char*) "\r\n\tError:\t");
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4834      	ldr	r0, [pc, #208]	; (8008954 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xe4>)
 8008882:	4798      	blx	r3
	if (error == ISBD_ALREADY_AWAKE){
 8008884:	78fb      	ldrb	r3, [r7, #3]
 8008886:	2b01      	cmp	r3, #1
 8008888:	d104      	bne.n	8008894 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x24>
		this->print((char*) "\tAlready Awake\r\n");
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4832      	ldr	r0, [pc, #200]	; (8008958 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xe8>)
 8008890:	4798      	blx	r3
		this->print((char*) "\tDEBUG LINE REACHED\r\n");
	}
	else{
		this->print((char*) "\tUNKNOWN\r\n");
	}
}
 8008892:	e05b      	b.n	800894c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_SERIAL_FAILURE){
 8008894:	78fb      	ldrb	r3, [r7, #3]
 8008896:	2b02      	cmp	r3, #2
 8008898:	d104      	bne.n	80088a4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x34>
		this->print((char*) "\tSerial Failure\r\n");
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	482f      	ldr	r0, [pc, #188]	; (800895c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xec>)
 80088a0:	4798      	blx	r3
}
 80088a2:	e053      	b.n	800894c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_PROTOCOL_ERROR){
 80088a4:	78fb      	ldrb	r3, [r7, #3]
 80088a6:	2b03      	cmp	r3, #3
 80088a8:	d104      	bne.n	80088b4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x44>
		this->print((char*) "\tProtocol Error\r\n");
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	482c      	ldr	r0, [pc, #176]	; (8008960 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf0>)
 80088b0:	4798      	blx	r3
}
 80088b2:	e04b      	b.n	800894c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_CANCELLED){
 80088b4:	78fb      	ldrb	r3, [r7, #3]
 80088b6:	2b04      	cmp	r3, #4
 80088b8:	d104      	bne.n	80088c4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x54>
		this->print((char*) "\tCancelled\r\n");
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4829      	ldr	r0, [pc, #164]	; (8008964 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf4>)
 80088c0:	4798      	blx	r3
}
 80088c2:	e043      	b.n	800894c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_NO_MODEM_DETECTED){
 80088c4:	78fb      	ldrb	r3, [r7, #3]
 80088c6:	2b05      	cmp	r3, #5
 80088c8:	d104      	bne.n	80088d4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x64>
		this->print((char*) "\tNo modem detected: check wiring.\r\n");
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4826      	ldr	r0, [pc, #152]	; (8008968 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf8>)
 80088d0:	4798      	blx	r3
}
 80088d2:	e03b      	b.n	800894c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_SBDIX_FATAL_ERROR){
 80088d4:	78fb      	ldrb	r3, [r7, #3]
 80088d6:	2b06      	cmp	r3, #6
 80088d8:	d104      	bne.n	80088e4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x74>
		this->print((char*) "\tSDBIX Fatal Error\r\n");
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4823      	ldr	r0, [pc, #140]	; (800896c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xfc>)
 80088e0:	4798      	blx	r3
}
 80088e2:	e033      	b.n	800894c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_SENDRECEIVE_TIMEOUT){
 80088e4:	78fb      	ldrb	r3, [r7, #3]
 80088e6:	2b07      	cmp	r3, #7
 80088e8:	d104      	bne.n	80088f4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x84>
		this->print((char*) "\tSend-Receive Timeout\r\n");
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4820      	ldr	r0, [pc, #128]	; (8008970 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x100>)
 80088f0:	4798      	blx	r3
}
 80088f2:	e02b      	b.n	800894c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_RX_OVERFLOW){
 80088f4:	78fb      	ldrb	r3, [r7, #3]
 80088f6:	2b08      	cmp	r3, #8
 80088f8:	d104      	bne.n	8008904 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x94>
		this->print((char*) "\tRX Overflow\r\n");
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	481d      	ldr	r0, [pc, #116]	; (8008974 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x104>)
 8008900:	4798      	blx	r3
}
 8008902:	e023      	b.n	800894c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_REENTRANT){
 8008904:	78fb      	ldrb	r3, [r7, #3]
 8008906:	2b09      	cmp	r3, #9
 8008908:	d104      	bne.n	8008914 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xa4>
		this->print((char*) "\tREENTRANT\r\n");
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	481a      	ldr	r0, [pc, #104]	; (8008978 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x108>)
 8008910:	4798      	blx	r3
}
 8008912:	e01b      	b.n	800894c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_IS_ASLEEP){
 8008914:	78fb      	ldrb	r3, [r7, #3]
 8008916:	2b0a      	cmp	r3, #10
 8008918:	d104      	bne.n	8008924 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xb4>
		this->print((char*) "\tIs Asleep\r\n");
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4817      	ldr	r0, [pc, #92]	; (800897c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x10c>)
 8008920:	4798      	blx	r3
}
 8008922:	e013      	b.n	800894c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if (error == ISBD_NO_SLEEP_PIN){
 8008924:	78fb      	ldrb	r3, [r7, #3]
 8008926:	2b0b      	cmp	r3, #11
 8008928:	d104      	bne.n	8008934 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xc4>
		this->print((char*) "\tNo Sleep Pin\r\n");
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4814      	ldr	r0, [pc, #80]	; (8008980 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x110>)
 8008930:	4798      	blx	r3
}
 8008932:	e00b      	b.n	800894c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
	else if(error == 20){
 8008934:	78fb      	ldrb	r3, [r7, #3]
 8008936:	2b14      	cmp	r3, #20
 8008938:	d104      	bne.n	8008944 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xd4>
		this->print((char*) "\tDEBUG LINE REACHED\r\n");
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4811      	ldr	r0, [pc, #68]	; (8008984 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x114>)
 8008940:	4798      	blx	r3
}
 8008942:	e003      	b.n	800894c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xdc>
		this->print((char*) "\tUNKNOWN\r\n");
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	480f      	ldr	r0, [pc, #60]	; (8008988 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x118>)
 800894a:	4798      	blx	r3
}
 800894c:	bf00      	nop
 800894e:	3708      	adds	r7, #8
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}
 8008954:	0801a250 	.word	0x0801a250
 8008958:	0801a25c 	.word	0x0801a25c
 800895c:	0801a270 	.word	0x0801a270
 8008960:	0801a284 	.word	0x0801a284
 8008964:	0801a298 	.word	0x0801a298
 8008968:	0801a2a8 	.word	0x0801a2a8
 800896c:	0801a2cc 	.word	0x0801a2cc
 8008970:	0801a2e4 	.word	0x0801a2e4
 8008974:	0801a2fc 	.word	0x0801a2fc
 8008978:	0801a30c 	.word	0x0801a30c
 800897c:	0801a31c 	.word	0x0801a31c
 8008980:	0801a32c 	.word	0x0801a32c
 8008984:	0801a33c 	.word	0x0801a33c
 8008988:	0801a354 	.word	0x0801a354

0800898c <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv>:


/*
 * This function requests the satellite modem's IMEI number.
 */
boolean IridiumSBD::MRT_Iridium_getIMEI(void){
 800898c:	b580      	push	{r7, lr}
 800898e:	b092      	sub	sp, #72	; 0x48
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]

	//Check if we already have the IMEI
	if (strcmp(IMEI,"000000000000000")==0){
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	491f      	ldr	r1, [pc, #124]	; (8008a18 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x8c>)
 800899a:	4618      	mov	r0, r3
 800899c:	f7f7 fc28 	bl	80001f0 <strcmp>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d124      	bne.n	80089f0 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x64>

		//Reset the IMEI
		IMEI=new char[16];
 80089a6:	2010      	movs	r0, #16
 80089a8:	f009 ff09 	bl	80127be <_Znaj>
 80089ac:	4603      	mov	r3, r0
 80089ae:	461a      	mov	r2, r3
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	605a      	str	r2, [r3, #4]

		// Get the IMEI
		this->print((char*) "\r\nIridium: Retrieving the IMEI\r\n");
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4818      	ldr	r0, [pc, #96]	; (8008a1c <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x90>)
 80089ba:	4798      	blx	r3
		int err = this->getIMEI(IMEI, 16);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	2210      	movs	r2, #16
 80089c2:	4619      	mov	r1, r3
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f7fd ff1b 	bl	8006800 <_ZN10IridiumSBD7getIMEIEPcj>
 80089ca:	6478      	str	r0, [r7, #68]	; 0x44
		if (err != ISBD_SUCCESS)
 80089cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00e      	beq.n	80089f0 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x64>
		{
			char str[24+sizeof(int)];
		    sprintf(str, "\tgetIMEI failed: error %i\r\n", err);
 80089d2:	f107 030c 	add.w	r3, r7, #12
 80089d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089d8:	4911      	ldr	r1, [pc, #68]	; (8008a20 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x94>)
 80089da:	4618      	mov	r0, r3
 80089dc:	f00b fc9e 	bl	801431c <siprintf>
		    this->print((char*) str);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f107 020c 	add.w	r2, r7, #12
 80089e8:	4610      	mov	r0, r2
 80089ea:	4798      	blx	r3
		    return false;
 80089ec:	2300      	movs	r3, #0
 80089ee:	e00e      	b.n	8008a0e <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x82>
		  }
	}

	char str[28];//IMEI is 15 integers long
	sprintf(str, "\tIMEI is %s\r\n", IMEI);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685a      	ldr	r2, [r3, #4]
 80089f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80089f8:	490a      	ldr	r1, [pc, #40]	; (8008a24 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x98>)
 80089fa:	4618      	mov	r0, r3
 80089fc:	f00b fc8e 	bl	801431c <siprintf>
	this->print((char*) str);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008a08:	4610      	mov	r0, r2
 8008a0a:	4798      	blx	r3
	return true;
 8008a0c:	2301      	movs	r3, #1
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3748      	adds	r7, #72	; 0x48
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	0801a15c 	.word	0x0801a15c
 8008a1c:	0801a360 	.word	0x0801a360
 8008a20:	0801a384 	.word	0x0801a384
 8008a24:	0801a3a0 	.word	0x0801a3a0

08008a28 <_ZN10IridiumSBD15MRT_Iridium_CSQEv>:
 * This sketch checks the Iridium signal quality and returns the status
 * of the Network Available signal.
 *
 * The boolean param is if you want to check for network availability
 */
int IridiumSBD::MRT_Iridium_CSQ(){
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b09e      	sub	sp, #120	; 0x78
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
	this->print((char*) "\r\nIridium: Checking Signal Quality\r\n");
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	481c      	ldr	r0, [pc, #112]	; (8008aa8 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x80>)
 8008a36:	4798      	blx	r3
	int signalQuality = -1;
 8008a38:	f04f 33ff 	mov.w	r3, #4294967295
 8008a3c:	673b      	str	r3, [r7, #112]	; 0x70

	this->MRT_Iridium_getIMEI();
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f7ff ffa4 	bl	800898c <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv>

	// Check the signal quality.
	// This returns a number between 0 and 5.
	// 2 or better is preferred.
	int err = this->getSignalQuality(signalQuality);
 8008a44:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008a48:	4619      	mov	r1, r3
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f7fd fc60 	bl	8006310 <_ZN10IridiumSBD16getSignalQualityERi>
 8008a50:	6778      	str	r0, [r7, #116]	; 0x74
	if (err != ISBD_SUCCESS)
 8008a52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d015      	beq.n	8008a84 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x5c>
	{
	  char str[34+sizeof(int)];
	  sprintf(str, "\tSignalQuality failed: error  %i\r\n", err);
 8008a58:	f107 030c 	add.w	r3, r7, #12
 8008a5c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008a5e:	4913      	ldr	r1, [pc, #76]	; (8008aac <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x84>)
 8008a60:	4618      	mov	r0, r3
 8008a62:	f00b fc5b 	bl	801431c <siprintf>
	  this->print((char*) str);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f107 020c 	add.w	r2, r7, #12
 8008a6e:	4610      	mov	r0, r2
 8008a70:	4798      	blx	r3
	  this->MRT_Iridium_ErrorMessage(err);
 8008a72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	4619      	mov	r1, r3
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f7ff fef9 	bl	8008870 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
	  return -1;
 8008a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a82:	e00d      	b.n	8008aa0 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x78>
	}

	char str[56+sizeof(int)];
	sprintf(str, "\tOn a scale of 0 to 5, signal quality is currently  %i\r\n", signalQuality);
 8008a84:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008a86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008a8a:	4909      	ldr	r1, [pc, #36]	; (8008ab0 <_ZN10IridiumSBD15MRT_Iridium_CSQEv+0x88>)
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f00b fc45 	bl	801431c <siprintf>
	this->print((char*) str);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008a9a:	4610      	mov	r0, r2
 8008a9c:	4798      	blx	r3

	return signalQuality;
 8008a9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3778      	adds	r7, #120	; 0x78
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	0801a3b0 	.word	0x0801a3b0
 8008aac:	0801a3d8 	.word	0x0801a3d8
 8008ab0:	0801a3fc 	.word	0x0801a3fc

08008ab4 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv>:


/*
 * This function checks if a network is available
 */
boolean IridiumSBD::MRT_Iridium_NetworkAvailability(void){
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]

	// Check Network Available.
	this->print((char*) "\r\nIridium: Checking if Network is Available:\t");
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	480c      	ldr	r0, [pc, #48]	; (8008af4 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x40>)
 8008ac2:	4798      	blx	r3
	if (!this->checkNetworkAvailable()){
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f7fd fe4d 	bl	8006764 <_ZN10IridiumSBD21checkNetworkAvailableEv>
 8008aca:	4603      	mov	r3, r0
 8008acc:	f083 0301 	eor.w	r3, r3, #1
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d005      	beq.n	8008ae2 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x2e>
		this->print((char*) "not available.\r\n");
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4807      	ldr	r0, [pc, #28]	; (8008af8 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x44>)
 8008adc:	4798      	blx	r3
		//diagprint(F("(This might be because the 9603N has not yet aquired the ring channel.)\r\n"));
		return false;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	e004      	b.n	8008aec <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x38>
	}

	this->print((char*) "available.\r\n");
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4805      	ldr	r0, [pc, #20]	; (8008afc <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv+0x48>)
 8008ae8:	4798      	blx	r3
	return true;
 8008aea:	2301      	movs	r3, #1
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3708      	adds	r7, #8
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	0801a438 	.word	0x0801a438
 8008af8:	0801a468 	.word	0x0801a468
 8008afc:	0801a47c 	.word	0x0801a47c

08008b00 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv>:


/*
 * This function requests the time
 */
boolean IridiumSBD::MRT_Iridium_getTime(void){
 8008b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b02:	b0a1      	sub	sp, #132	; 0x84
 8008b04:	af04      	add	r7, sp, #16
 8008b06:	6078      	str	r0, [r7, #4]
	this->print((char*) "\r\nIridium: Retrieving time\r\n");
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4820      	ldr	r0, [pc, #128]	; (8008b90 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x90>)
 8008b0e:	4798      	blx	r3
	struct tm t; // struct tm is defined in time.h
	int err = this->getSystemTime(t); // Ask the 9603N for the system time
 8008b10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008b14:	4619      	mov	r1, r3
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f7fd fc46 	bl	80063a8 <_ZN10IridiumSBD13getSystemTimeER2tm>
 8008b1c:	66f8      	str	r0, [r7, #108]	; 0x6c
	if (err == ISBD_SUCCESS) // Was it successful?
 8008b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d11c      	bne.n	8008b5e <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x5e>
	    {
		char buf[61];
		sprintf(buf, "\r\n\t<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
				t.tm_year + 1900, t.tm_mon + 1, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec);
 8008b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
		sprintf(buf, "\r\n\t<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
 8008b26:	f203 756c 	addw	r5, r3, #1900	; 0x76c
				t.tm_year + 1900, t.tm_mon + 1, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec);
 8008b2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		sprintf(buf, "\r\n\t<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
 8008b2c:	1c5e      	adds	r6, r3, #1
 8008b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b32:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008b34:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008b36:	f107 0408 	add.w	r4, r7, #8
 8008b3a:	9003      	str	r0, [sp, #12]
 8008b3c:	9102      	str	r1, [sp, #8]
 8008b3e:	9201      	str	r2, [sp, #4]
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	4633      	mov	r3, r6
 8008b44:	462a      	mov	r2, r5
 8008b46:	4913      	ldr	r1, [pc, #76]	; (8008b94 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x94>)
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f00b fbe7 	bl	801431c <siprintf>
		this->print((char*) buf);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f107 0208 	add.w	r2, r7, #8
 8008b56:	4610      	mov	r0, r2
 8008b58:	4798      	blx	r3
		return true;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e013      	b.n	8008b86 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x86>
	}

	else if (err == ISBD_NO_NETWORK) // Did it fail because the 9603N has not yet seen the network?
 8008b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b60:	2b0c      	cmp	r3, #12
 8008b62:	d105      	bne.n	8008b70 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x70>
	     {
		 this->print((char*) "\tNo network detected.\r\n");
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	480b      	ldr	r0, [pc, #44]	; (8008b98 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x98>)
 8008b6a:	4798      	blx	r3
	   	 return false;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	e00a      	b.n	8008b86 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x86>
	}

	else
	    {
		this->print((char*) "\tUnexpected Error ");
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4809      	ldr	r0, [pc, #36]	; (8008b9c <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x9c>)
 8008b76:	4798      	blx	r3
		this->MRT_Iridium_ErrorMessage(err);
 8008b78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f7ff fe76 	bl	8008870 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
		return false;
 8008b84:	2300      	movs	r3, #0
	}
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3774      	adds	r7, #116	; 0x74
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	0801a48c 	.word	0x0801a48c
 8008b94:	0801a4ac 	.word	0x0801a4ac
 8008b98:	0801a4e8 	.word	0x0801a4e8
 8008b9c:	0801a500 	.word	0x0801a500

08008ba0 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc>:
 * This sketch sends a "Hello, world!" message from the satellite modem.
 * If you have activated your account and have credits, this message
 * should arrive at the endpoints (delivery group) you have configured
 * (email address or HTTP POST).
 */
boolean IridiumSBD::MRT_Iridium_sendMessage(char* msg){
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b090      	sub	sp, #64	; 0x40
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
	int temp = this->atTimeout; //Save default atTimeout
	adjustATTimeout(timeout);
*/

	// Send the message
	this->print((char*) "\r\nIridium: Trying to send the message.  This might take several minutes.\r\n");
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4828      	ldr	r0, [pc, #160]	; (8008c50 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xb0>)
 8008bb0:	4798      	blx	r3
	int err = this->sendSBDText((const char*) msg);
 8008bb2:	6839      	ldr	r1, [r7, #0]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f7fd fb87 	bl	80062c8 <_ZN10IridiumSBD11sendSBDTextEPKc>
 8008bba:	63f8      	str	r0, [r7, #60]	; 0x3c
	//int err = this->sendSBDText((const char*) "Hello, world!");
	//int err = ISBD_SENDRECEIVE_TIMEOUT;

	if (err != ISBD_SUCCESS){
 8008bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d01b      	beq.n	8008bfa <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0x5a>
		char str[50];
		sprintf(str, "\tsendSBDText failed: error -> %i\r\n", err);
 8008bc2:	f107 0308 	add.w	r3, r7, #8
 8008bc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008bc8:	4922      	ldr	r1, [pc, #136]	; (8008c54 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xb4>)
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f00b fba6 	bl	801431c <siprintf>
		this->print((char*) str);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f107 0208 	add.w	r2, r7, #8
 8008bd8:	4610      	mov	r0, r2
 8008bda:	4798      	blx	r3
	    if (err == ISBD_SENDRECEIVE_TIMEOUT){
 8008bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bde:	2b07      	cmp	r3, #7
 8008be0:	d103      	bne.n	8008bea <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0x4a>
	    	this->print((char*) "\tTry again with a better view of the sky.\r\n");
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	481c      	ldr	r0, [pc, #112]	; (8008c58 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xb8>)
 8008be8:	4798      	blx	r3
	    }
	    this->MRT_Iridium_ErrorMessage((uint8_t) err);
 8008bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	4619      	mov	r1, r3
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f7ff fe3d 	bl	8008870 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
	    return false;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	e025      	b.n	8008c46 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xa6>
	}

	else{
		this->print((char*) "\tMessage sent\r\n");
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4817      	ldr	r0, [pc, #92]	; (8008c5c <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xbc>)
 8008c00:	4798      	blx	r3
	}

	// Clear the Mobile Originated message buffer
	this->print((char*) "\tClearing the MO buffer.\r\n");
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4816      	ldr	r0, [pc, #88]	; (8008c60 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xc0>)
 8008c08:	4798      	blx	r3
	err = this->clearBuffers(ISBD_CLEAR_MO); // Clear MO buffer
 8008c0a:	2100      	movs	r1, #0
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f7fd fdd9 	bl	80067c4 <_ZN10IridiumSBD12clearBuffersEi>
 8008c12:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (err != ISBD_SUCCESS){
 8008c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d014      	beq.n	8008c44 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xa4>
		char str[50];
		sprintf(str, "clearBuffers failed: error -> %i\r\n", err);
 8008c1a:	f107 0308 	add.w	r3, r7, #8
 8008c1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c20:	4910      	ldr	r1, [pc, #64]	; (8008c64 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xc4>)
 8008c22:	4618      	mov	r0, r3
 8008c24:	f00b fb7a 	bl	801431c <siprintf>
		this->print((char*) str);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f107 0208 	add.w	r2, r7, #8
 8008c30:	4610      	mov	r0, r2
 8008c32:	4798      	blx	r3
		this->MRT_Iridium_ErrorMessage((uint8_t) err);
 8008c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	4619      	mov	r1, r3
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f7ff fe18 	bl	8008870 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
		return false;
 8008c40:	2300      	movs	r3, #0
 8008c42:	e000      	b.n	8008c46 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc+0xa6>
	}
	return true;
 8008c44:	2301      	movs	r3, #1
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3740      	adds	r7, #64	; 0x40
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	0801a514 	.word	0x0801a514
 8008c54:	0801a560 	.word	0x0801a560
 8008c58:	0801a584 	.word	0x0801a584
 8008c5c:	0801a5b0 	.word	0x0801a5b0
 8008c60:	0801a5c0 	.word	0x0801a5c0
 8008c64:	0801a5dc 	.word	0x0801a5dc

08008c68 <_ZN10IridiumSBDC1ER7TwoWireh>:
      if (ringPin != -1)
         pinMode(ringPin, INPUT);
   }
   */

IridiumSBD(TwoWire &wirePort = IRIDIUM_I2C, uint8_t deviceAddress = 0x63)
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	4613      	mov	r3, r2
 8008c74:	71fb      	strb	r3, [r7, #7]
   {
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	66da      	str	r2, [r3, #108]	; 0x6c
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2205      	movs	r2, #5
 8008c80:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2202      	movs	r2, #2
 8008c90:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2204      	movs	r2, #4
 8008c98:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2208      	movs	r2, #8
 8008ca0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2210      	movs	r2, #16
 8008ca8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2220      	movs	r2, #32
 8008cb0:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2240      	movs	r2, #64	; 0x40
 8008cb8:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
      useSerial = false;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	745a      	strb	r2, [r3, #17]
      wireport = &wirePort;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	68ba      	ldr	r2, [r7, #8]
 8008cc6:	60da      	str	r2, [r3, #12]
      deviceaddress = deviceAddress;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	79fa      	ldrb	r2, [r7, #7]
 8008ccc:	741a      	strb	r2, [r3, #16]
      sbdixInterval = ISBD_USB_SBDIX_INTERVAL;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	221e      	movs	r2, #30
 8008cd2:	65da      	str	r2, [r3, #92]	; 0x5c
      atTimeout = ISBD_DEFAULT_AT_TIMEOUT;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	221e      	movs	r2, #30
 8008cd8:	661a      	str	r2, [r3, #96]	; 0x60
      sendReceiveTimeout = ISBD_DEFAULT_SENDRECEIVE_TIME;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008ce0:	665a      	str	r2, [r3, #100]	; 0x64
      startupTimeout = ISBD_STARTUP_MAX_TIME;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	22f0      	movs	r2, #240	; 0xf0
 8008ce6:	669a      	str	r2, [r3, #104]	; 0x68
      remainingMessages = -1;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f04f 32ff 	mov.w	r2, #4294967295
 8008cee:	675a      	str	r2, [r3, #116]	; 0x74
      asleep = true;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
      reentrant = false;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
      sleepPin = -1;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f04f 32ff 	mov.w	r2, #4294967295
 8008d06:	67da      	str	r2, [r3, #124]	; 0x7c
      sleepPinConfigured = false;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      ringPin = -1;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f04f 32ff 	mov.w	r2, #4294967295
 8008d16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      msstmWorkaroundRequested = false;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
      ringAlertsEnabled = true;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2201      	movs	r2, #1
 8008d26:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
      ringAsserted = false;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
      lastPowerOnTime = 0UL;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2200      	movs	r2, #0
 8008d36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      head = SBDRING;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	4a0c      	ldr	r2, [pc, #48]	; (8008d70 <_ZN10IridiumSBDC1ER7TwoWireh+0x108>)
 8008d3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      tail = SBDRING;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	4a0a      	ldr	r2, [pc, #40]	; (8008d70 <_ZN10IridiumSBDC1ER7TwoWireh+0x108>)
 8008d46:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      nextChar = -1;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d50:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      i2c_ser_buffer_tail = 0;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2200      	movs	r2, #0
 8008d58:	655a      	str	r2, [r3, #84]	; 0x54
      i2c_ser_buffer_head = 0;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	659a      	str	r2, [r3, #88]	; 0x58
   }
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	4618      	mov	r0, r3
 8008d64:	3714      	adds	r7, #20
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr
 8008d6e:	bf00      	nop
 8008d70:	0801a8f4 	.word	0x0801a8f4

08008d74 <MRT_Iridium_Constructor>:

//C structs
struct HIRIDIUM hiridium;


void MRT_Iridium_Constructor(){
 8008d74:	b598      	push	{r3, r4, r7, lr}
 8008d76:	af00      	add	r7, sp, #0
	if (E_T==NULL){
 8008d78:	4b08      	ldr	r3, [pc, #32]	; (8008d9c <MRT_Iridium_Constructor+0x28>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d10b      	bne.n	8008d98 <MRT_Iridium_Constructor+0x24>
		E_T = new IridiumSBD();
 8008d80:	20a4      	movs	r0, #164	; 0xa4
 8008d82:	f009 fd0b 	bl	801279c <_Znwj>
 8008d86:	4603      	mov	r3, r0
 8008d88:	461c      	mov	r4, r3
 8008d8a:	2263      	movs	r2, #99	; 0x63
 8008d8c:	4904      	ldr	r1, [pc, #16]	; (8008da0 <MRT_Iridium_Constructor+0x2c>)
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f7ff ff6a 	bl	8008c68 <_ZN10IridiumSBDC1ER7TwoWireh>
 8008d94:	4b01      	ldr	r3, [pc, #4]	; (8008d9c <MRT_Iridium_Constructor+0x28>)
 8008d96:	601c      	str	r4, [r3, #0]
	}
}
 8008d98:	bf00      	nop
 8008d9a:	bd98      	pop	{r3, r4, r7, pc}
 8008d9c:	200003f0 	.word	0x200003f0
 8008da0:	20000408 	.word	0x20000408

08008da4 <MRT_Iridium_Init>:
		E_T = NULL;
	}
}


struct HIRIDIUM MRT_Iridium_Init(uint8_t timeout, uint8_t i2c_bus, void (*iridium_print)(char*)){
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	607b      	str	r3, [r7, #4]
 8008dae:	460b      	mov	r3, r1
 8008db0:	72fb      	strb	r3, [r7, #11]
 8008db2:	4613      	mov	r3, r2
 8008db4:	72bb      	strb	r3, [r7, #10]
	MRT_Iridium_Constructor();
 8008db6:	f7ff ffdd 	bl	8008d74 <MRT_Iridium_Constructor>
	E_T->MRT_Iridium_setup(timeout, i2c_bus, iridium_print);
 8008dba:	4b0d      	ldr	r3, [pc, #52]	; (8008df0 <MRT_Iridium_Init+0x4c>)
 8008dbc:	6818      	ldr	r0, [r3, #0]
 8008dbe:	7aba      	ldrb	r2, [r7, #10]
 8008dc0:	7af9      	ldrb	r1, [r7, #11]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f7ff fc6a 	bl	800869c <_ZN10IridiumSBD17MRT_Iridium_setupEhhPFvPcE>
	HIRIDIUM iridium_handler;
	iridium_handler.CSQ = &MRT_Iridium_CSQ;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	4a0a      	ldr	r2, [pc, #40]	; (8008df4 <MRT_Iridium_Init+0x50>)
 8008dcc:	60da      	str	r2, [r3, #12]
	iridium_handler.getIMEI = &MRT_Iridium_getIMEI;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	4a09      	ldr	r2, [pc, #36]	; (8008df8 <MRT_Iridium_Init+0x54>)
 8008dd2:	601a      	str	r2, [r3, #0]
	iridium_handler.getNetworkAvailability = &MRT_Iridium_NetworkAvailability;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	4a09      	ldr	r2, [pc, #36]	; (8008dfc <MRT_Iridium_Init+0x58>)
 8008dd8:	609a      	str	r2, [r3, #8]
	iridium_handler.getTime = &MRT_Iridium_getTime;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	4a08      	ldr	r2, [pc, #32]	; (8008e00 <MRT_Iridium_Init+0x5c>)
 8008dde:	605a      	str	r2, [r3, #4]
	iridium_handler.sendMessage = &MRT_Iridium_sendMessage;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	4a08      	ldr	r2, [pc, #32]	; (8008e04 <MRT_Iridium_Init+0x60>)
 8008de4:	611a      	str	r2, [r3, #16]
	return iridium_handler;
 8008de6:	bf00      	nop
}
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	200003f0 	.word	0x200003f0
 8008df4:	08008e2d 	.word	0x08008e2d
 8008df8:	08008e09 	.word	0x08008e09
 8008dfc:	08008e45 	.word	0x08008e45
 8008e00:	08008e69 	.word	0x08008e69
 8008e04:	08008e8d 	.word	0x08008e8d

08008e08 <MRT_Iridium_getIMEI>:

void MRT_Iridium_ErrorMessage(uint8_t error){
	return E_T->MRT_Iridium_ErrorMessage(error);
}

bool MRT_Iridium_getIMEI(void){
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_getIMEI();
 8008e0c:	4b06      	ldr	r3, [pc, #24]	; (8008e28 <MRT_Iridium_getIMEI+0x20>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7ff fdbb 	bl	800898c <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	bf14      	ite	ne
 8008e1c:	2301      	movne	r3, #1
 8008e1e:	2300      	moveq	r3, #0
 8008e20:	b2db      	uxtb	r3, r3
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	200003f0 	.word	0x200003f0

08008e2c <MRT_Iridium_CSQ>:


int MRT_Iridium_CSQ(){
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_CSQ();
 8008e30:	4b03      	ldr	r3, [pc, #12]	; (8008e40 <MRT_Iridium_CSQ+0x14>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7ff fdf7 	bl	8008a28 <_ZN10IridiumSBD15MRT_Iridium_CSQEv>
 8008e3a:	4603      	mov	r3, r0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	200003f0 	.word	0x200003f0

08008e44 <MRT_Iridium_NetworkAvailability>:

bool MRT_Iridium_NetworkAvailability(){
 8008e44:	b580      	push	{r7, lr}
 8008e46:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_NetworkAvailability();
 8008e48:	4b06      	ldr	r3, [pc, #24]	; (8008e64 <MRT_Iridium_NetworkAvailability+0x20>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7ff fe31 	bl	8008ab4 <_ZN10IridiumSBD31MRT_Iridium_NetworkAvailabilityEv>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	bf14      	ite	ne
 8008e58:	2301      	movne	r3, #1
 8008e5a:	2300      	moveq	r3, #0
 8008e5c:	b2db      	uxtb	r3, r3
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	200003f0 	.word	0x200003f0

08008e68 <MRT_Iridium_getTime>:


bool MRT_Iridium_getTime(void){
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_getTime();
 8008e6c:	4b06      	ldr	r3, [pc, #24]	; (8008e88 <MRT_Iridium_getTime+0x20>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4618      	mov	r0, r3
 8008e72:	f7ff fe45 	bl	8008b00 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	bf14      	ite	ne
 8008e7c:	2301      	movne	r3, #1
 8008e7e:	2300      	moveq	r3, #0
 8008e80:	b2db      	uxtb	r3, r3
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	200003f0 	.word	0x200003f0

08008e8c <MRT_Iridium_sendMessage>:

bool MRT_Iridium_sendMessage(char* msg){
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
	return E_T->MRT_Iridium_sendMessage(msg);
 8008e94:	4b07      	ldr	r3, [pc, #28]	; (8008eb4 <MRT_Iridium_sendMessage+0x28>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	6879      	ldr	r1, [r7, #4]
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7ff fe80 	bl	8008ba0 <_ZN10IridiumSBD23MRT_Iridium_sendMessageEPc>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	bf14      	ite	ne
 8008ea6:	2301      	movne	r3, #1
 8008ea8:	2300      	moveq	r3, #0
 8008eaa:	b2db      	uxtb	r3, r3
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3708      	adds	r7, #8
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	200003f0 	.word	0x200003f0

08008eb8 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8008eb8:	b590      	push	{r4, r7, lr}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d101      	bne.n	8008ecc <_ZN5Print5writeEPKc+0x14>
 8008ec8:	2300      	movs	r3, #0
 8008eca:	e00d      	b.n	8008ee8 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	3304      	adds	r3, #4
 8008ed2:	681c      	ldr	r4, [r3, #0]
 8008ed4:	6838      	ldr	r0, [r7, #0]
 8008ed6:	f7f7 f995 	bl	8000204 <strlen>
 8008eda:	4603      	mov	r3, r0
 8008edc:	461a      	mov	r2, r3
 8008ede:	6839      	ldr	r1, [r7, #0]
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	47a0      	blx	r4
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	bf00      	nop
    }
 8008ee8:	4618      	mov	r0, r3
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd90      	pop	{r4, r7, pc}

08008ef0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b086      	sub	sp, #24
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8008efc:	2300      	movs	r3, #0
 8008efe:	617b      	str	r3, [r7, #20]
  while (size--) {
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	1e5a      	subs	r2, r3, #1
 8008f04:	607a      	str	r2, [r7, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	bf14      	ite	ne
 8008f0a:	2301      	movne	r3, #1
 8008f0c:	2300      	moveq	r3, #0
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d00e      	beq.n	8008f32 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	1c59      	adds	r1, r3, #1
 8008f1e:	60b9      	str	r1, [r7, #8]
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	4619      	mov	r1, r3
 8008f24:	68f8      	ldr	r0, [r7, #12]
 8008f26:	4790      	blx	r2
 8008f28:	4602      	mov	r2, r0
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8008f30:	e7e6      	b.n	8008f00 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8008f32:	697b      	ldr	r3, [r7, #20]
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3718      	adds	r7, #24
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 8008f46:	6839      	ldr	r1, [r7, #0]
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 f805 	bl	8008f58 <_ZN5Print5printEPKc>
 8008f4e:	4603      	mov	r3, r0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3708      	adds	r7, #8
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b082      	sub	sp, #8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  return write(str);
 8008f62:	6839      	ldr	r1, [r7, #0]
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f7ff ffa7 	bl	8008eb8 <_ZN5Print5writeEPKc>
 8008f6a:	4603      	mov	r3, r0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3708      	adds	r7, #8
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	70fb      	strb	r3, [r7, #3]
  return write(c);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	78fa      	ldrb	r2, [r7, #3]
 8008f88:	4611      	mov	r1, r2
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	4798      	blx	r3
 8008f8e:	4603      	mov	r3, r0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3708      	adds	r7, #8
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	68b9      	ldr	r1, [r7, #8]
 8008fa8:	68f8      	ldr	r0, [r7, #12]
 8008faa:	f000 f805 	bl	8008fb8 <_ZN5Print5printEli>
 8008fae:	4603      	mov	r3, r0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b086      	sub	sp, #24
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d109      	bne.n	8008fde <_ZN5Print5printEli+0x26>
    return write(n);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	68ba      	ldr	r2, [r7, #8]
 8008fd2:	b2d2      	uxtb	r2, r2
 8008fd4:	4611      	mov	r1, r2
 8008fd6:	68f8      	ldr	r0, [r7, #12]
 8008fd8:	4798      	blx	r3
 8008fda:	4603      	mov	r3, r0
 8008fdc:	e029      	b.n	8009032 <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2b0a      	cmp	r3, #10
 8008fe2:	d11d      	bne.n	8009020 <_ZN5Print5printEli+0x68>
    if (n < 0) {
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	da12      	bge.n	8009010 <_ZN5Print5printEli+0x58>
      int t = print('-');
 8008fea:	212d      	movs	r1, #45	; 0x2d
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	f7ff ffc1 	bl	8008f74 <_ZN5Print5printEc>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	617b      	str	r3, [r7, #20]
      n = -n;
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	425b      	negs	r3, r3
 8008ffa:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	220a      	movs	r2, #10
 8009000:	4619      	mov	r1, r3
 8009002:	68f8      	ldr	r0, [r7, #12]
 8009004:	f000 f819 	bl	800903a <_ZN5Print11printNumberEmh>
 8009008:	4602      	mov	r2, r0
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	4413      	add	r3, r2
 800900e:	e010      	b.n	8009032 <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	220a      	movs	r2, #10
 8009014:	4619      	mov	r1, r3
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f000 f80f 	bl	800903a <_ZN5Print11printNumberEmh>
 800901c:	4603      	mov	r3, r0
 800901e:	e008      	b.n	8009032 <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	b2d2      	uxtb	r2, r2
 8009026:	4619      	mov	r1, r3
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f000 f806 	bl	800903a <_ZN5Print11printNumberEmh>
 800902e:	4603      	mov	r3, r0
 8009030:	bf00      	nop
  }
}
 8009032:	4618      	mov	r0, r3
 8009034:	3718      	adds	r7, #24
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 800903a:	b580      	push	{r7, lr}
 800903c:	b090      	sub	sp, #64	; 0x40
 800903e:	af00      	add	r7, sp, #0
 8009040:	60f8      	str	r0, [r7, #12]
 8009042:	60b9      	str	r1, [r7, #8]
 8009044:	4613      	mov	r3, r2
 8009046:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 8009048:	f107 0314 	add.w	r3, r7, #20
 800904c:	3320      	adds	r3, #32
 800904e:	63fb      	str	r3, [r7, #60]	; 0x3c

  *str = '\0';
 8009050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009052:	2200      	movs	r2, #0
 8009054:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8009056:	79fb      	ldrb	r3, [r7, #7]
 8009058:	2b01      	cmp	r3, #1
 800905a:	d801      	bhi.n	8009060 <_ZN5Print11printNumberEmh+0x26>
 800905c:	230a      	movs	r3, #10
 800905e:	71fb      	strb	r3, [r7, #7]

  do {
    unsigned long m = n;
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	63bb      	str	r3, [r7, #56]	; 0x38
    n /= base;
 8009064:	79fb      	ldrb	r3, [r7, #7]
 8009066:	68ba      	ldr	r2, [r7, #8]
 8009068:	fbb2 f3f3 	udiv	r3, r2, r3
 800906c:	60bb      	str	r3, [r7, #8]
    char c = m - base * n;
 800906e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009070:	b2da      	uxtb	r2, r3
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	b2db      	uxtb	r3, r3
 8009076:	79f9      	ldrb	r1, [r7, #7]
 8009078:	fb11 f303 	smulbb	r3, r1, r3
 800907c:	b2db      	uxtb	r3, r3
 800907e:	1ad3      	subs	r3, r2, r3
 8009080:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8009084:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009088:	2b09      	cmp	r3, #9
 800908a:	d804      	bhi.n	8009096 <_ZN5Print11printNumberEmh+0x5c>
 800908c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009090:	3330      	adds	r3, #48	; 0x30
 8009092:	b2db      	uxtb	r3, r3
 8009094:	e003      	b.n	800909e <_ZN5Print11printNumberEmh+0x64>
 8009096:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800909a:	3337      	adds	r3, #55	; 0x37
 800909c:	b2db      	uxtb	r3, r3
 800909e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80090a0:	3a01      	subs	r2, #1
 80090a2:	63fa      	str	r2, [r7, #60]	; 0x3c
 80090a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80090a6:	7013      	strb	r3, [r2, #0]
  } while(n);
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d000      	beq.n	80090b0 <_ZN5Print11printNumberEmh+0x76>
  do {
 80090ae:	e7d7      	b.n	8009060 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
 80090b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80090b2:	68f8      	ldr	r0, [r7, #12]
 80090b4:	f7ff ff00 	bl	8008eb8 <_ZN5Print5writeEPKc>
 80090b8:	4603      	mov	r3, r0
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3740      	adds	r7, #64	; 0x40
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
	...

080090c4 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	4a06      	ldr	r2, [pc, #24]	; (80090e8 <_ZN5PrintC1Ev+0x24>)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	601a      	str	r2, [r3, #0]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	605a      	str	r2, [r3, #4]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4618      	mov	r0, r3
 80090dc:	370c      	adds	r7, #12
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	0801a908 	.word	0x0801a908

080090ec <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7ff ffe4 	bl	80090c4 <_ZN5PrintC1Ev>
 80090fc:	4a05      	ldr	r2, [pc, #20]	; (8009114 <_ZN6StreamC1Ev+0x28>)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	601a      	str	r2, [r3, #0]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009108:	609a      	str	r2, [r3, #8]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4618      	mov	r0, r3
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}
 8009114:	0801a938 	.word	0x0801a938

08009118 <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	4618      	mov	r0, r3
 8009126:	f7ff ffe1 	bl	80090ec <_ZN6StreamC1Ev>
 800912a:	4a16      	ldr	r2, [pc, #88]	; (8009184 <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	683a      	ldr	r2, [r7, #0]
 8009134:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	3390      	adds	r3, #144	; 0x90
 800913a:	2220      	movs	r2, #32
 800913c:	2100      	movs	r1, #0
 800913e:	4618      	mov	r0, r3
 8009140:	f009 fdf0 	bl	8012d24 <memset>
  rxBufferIndex = 0;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4618      	mov	r0, r3
 800917e:	3708      	adds	r7, #8
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}
 8009184:	0801a918 	.word	0x0801a918

08009188 <_ZN7TwoWire11requestFromEhhh>:
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  HAL_I2C_Init(&I2cHandle);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b086      	sub	sp, #24
 800918c:	af02      	add	r7, sp, #8
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	4608      	mov	r0, r1
 8009192:	4611      	mov	r1, r2
 8009194:	461a      	mov	r2, r3
 8009196:	4603      	mov	r3, r0
 8009198:	70fb      	strb	r3, [r7, #3]
 800919a:	460b      	mov	r3, r1
 800919c:	70bb      	strb	r3, [r7, #2]
 800919e:	4613      	mov	r3, r2
 80091a0:	707b      	strb	r3, [r7, #1]
  uint8_t ret_val;

  disableInterrupt();
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 fc24 	bl	80099f0 <_ZN7TwoWire16disableInterruptEv>

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
 80091a8:	78bb      	ldrb	r3, [r7, #2]
 80091aa:	2b20      	cmp	r3, #32
 80091ac:	d901      	bls.n	80091b2 <_ZN7TwoWire11requestFromEhhh+0x2a>
    quantity = BUFFER_LENGTH;
 80091ae:	2320      	movs	r3, #32
 80091b0:	70bb      	strb	r3, [r7, #2]
  }
  // perform blocking read into buffer
  int read = i2c_master_read((address << 1), (char *)rxBuffer, quantity, sendStop);
 80091b2:	78fb      	ldrb	r3, [r7, #3]
 80091b4:	005b      	lsls	r3, r3, #1
 80091b6:	b2d9      	uxtb	r1, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f103 0290 	add.w	r2, r3, #144	; 0x90
 80091be:	78b8      	ldrb	r0, [r7, #2]
 80091c0:	787b      	ldrb	r3, [r7, #1]
 80091c2:	9300      	str	r3, [sp, #0]
 80091c4:	4603      	mov	r3, r0
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 f9cf 	bl	800956a <_ZN7TwoWire15i2c_master_readEhPchh>
 80091cc:	60b8      	str	r0, [r7, #8]

  if(read < 0)
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	da02      	bge.n	80091da <_ZN7TwoWire11requestFromEhhh+0x52>
  {
    ret_val = 0;
 80091d4:	2300      	movs	r3, #0
 80091d6:	73fb      	strb	r3, [r7, #15]
 80091d8:	e001      	b.n	80091de <_ZN7TwoWire11requestFromEhhh+0x56>
  }else
  {
    ret_val = read;
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	73fb      	strb	r3, [r7, #15]
  }

  // set rx buffer iterator vars
  rxBufferIndex = 0;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = ret_val;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	7bfa      	ldrb	r2, [r7, #15]
 80091ea:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

  enableInterrupt();
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fbcc 	bl	800998c <_ZN7TwoWire15enableInterruptEv>

  return ret_val;
 80091f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}

080091fe <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
 80091fe:	b580      	push	{r7, lr}
 8009200:	b082      	sub	sp, #8
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
 8009206:	460b      	mov	r3, r1
 8009208:	70fb      	strb	r3, [r7, #3]
 800920a:	4613      	mov	r3, r2
 800920c:	70bb      	strb	r3, [r7, #2]
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 800920e:	78ba      	ldrb	r2, [r7, #2]
 8009210:	78f9      	ldrb	r1, [r7, #3]
 8009212:	2301      	movs	r3, #1
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f7ff ffb7 	bl	8009188 <_ZN7TwoWire11requestFromEhhh>
 800921a:	4603      	mov	r3, r0
}
 800921c:	4618      	mov	r0, r3
 800921e:	3708      	adds	r7, #8
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <_ZN7TwoWire17beginTransmissionEh>:
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	460b      	mov	r3, r1
 800922e:	70fb      	strb	r3, [r7, #3]
  // indicate that we are transmitting
  transmitting = 1;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  // set address of targeted slave
  txAddress = address;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	78fa      	ldrb	r2, [r7, #3]
 800923c:	741a      	strb	r2, [r3, #16]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2200      	movs	r2, #0
 800924a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 800924e:	bf00      	nop
 8009250:	370c      	adds	r7, #12
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr

0800925a <_ZN7TwoWire15endTransmissionEh>:
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b086      	sub	sp, #24
 800925e:	af02      	add	r7, sp, #8
 8009260:	6078      	str	r0, [r7, #4]
 8009262:	460b      	mov	r3, r1
 8009264:	70fb      	strb	r3, [r7, #3]
  // transmit buffer (blocking)
  disableInterrupt();
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 fbc2 	bl	80099f0 <_ZN7TwoWire16disableInterruptEv>

  int8_t ret = i2c_master_write((txAddress << 1), (const char *)txBuffer, txBufferLength, sendStop);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	7c1b      	ldrb	r3, [r3, #16]
 8009270:	0059      	lsls	r1, r3, #1
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f103 0211 	add.w	r2, r3, #17
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800927e:	4618      	mov	r0, r3
 8009280:	78fb      	ldrb	r3, [r7, #3]
 8009282:	9300      	str	r3, [sp, #0]
 8009284:	4603      	mov	r3, r0
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 fa00 	bl	800968c <_ZN7TwoWire16i2c_master_writeEiPKcii>
 800928c:	4603      	mov	r3, r0
 800928e:	73fb      	strb	r3, [r7, #15]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  // indicate that we are done transmitting
  transmitting = 0;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  enableInterrupt();
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 fb6f 	bl	800998c <_ZN7TwoWire15enableInterruptEv>

  return ret;
 80092ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3710      	adds	r7, #16
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <_ZN7TwoWire15endTransmissionEv>:

//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  return endTransmission(true);
 80092c0:	2101      	movs	r1, #1
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f7ff ffc9 	bl	800925a <_ZN7TwoWire15endTransmissionEh>
 80092c8:	4603      	mov	r3, r0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3708      	adds	r7, #8
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b082      	sub	sp, #8
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
 80092da:	460b      	mov	r3, r1
 80092dc:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d01d      	beq.n	8009324 <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80092ee:	2b1f      	cmp	r3, #31
 80092f0:	d901      	bls.n	80092f6 <_ZN7TwoWire5writeEh+0x24>
      return 0;
 80092f2:	2300      	movs	r3, #0
 80092f4:	e028      	b.n	8009348 <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80092fc:	4619      	mov	r1, r3
 80092fe:	78fa      	ldrb	r2, [r7, #3]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	440b      	add	r3, r1
 8009304:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800930c:	3301      	adds	r3, #1
 800930e:	b2da      	uxtb	r2, r3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8009322:	e010      	b.n	8009346 <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 fb63 	bl	80099f0 <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 800932a:	1cfb      	adds	r3, r7, #3
 800932c:	2201      	movs	r2, #1
 800932e:	4619      	mov	r1, r3
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 fa95 	bl	8009860 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 fb28 	bl	800998c <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	333c      	adds	r3, #60	; 0x3c
 8009340:	4618      	mov	r0, r3
 8009342:	f001 ffdd 	bl	800b300 <HAL_I2C_EnableListen_IT>
  }
  return 1;
 8009346:	2301      	movs	r3, #1
}
 8009348:	4618      	mov	r0, r3
 800934a:	3708      	adds	r7, #8
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b086      	sub	sp, #24
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]
  if(transmitting){
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8009362:	2b00      	cmp	r3, #0
 8009364:	d013      	beq.n	800938e <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 8009366:	2300      	movs	r3, #0
 8009368:	617b      	str	r3, [r7, #20]
 800936a:	697a      	ldr	r2, [r7, #20]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	429a      	cmp	r2, r3
 8009370:	d21e      	bcs.n	80093b0 <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	68b9      	ldr	r1, [r7, #8]
 800937a:	697a      	ldr	r2, [r7, #20]
 800937c:	440a      	add	r2, r1
 800937e:	7812      	ldrb	r2, [r2, #0]
 8009380:	4611      	mov	r1, r2
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	3301      	adds	r3, #1
 800938a:	617b      	str	r3, [r7, #20]
 800938c:	e7ed      	b.n	800936a <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 800938e:	68f8      	ldr	r0, [r7, #12]
 8009390:	f000 fb2e 	bl	80099f0 <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	461a      	mov	r2, r3
 8009398:	68b9      	ldr	r1, [r7, #8]
 800939a:	68f8      	ldr	r0, [r7, #12]
 800939c:	f000 fa60 	bl	8009860 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f000 faf3 	bl	800998c <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	333c      	adds	r3, #60	; 0x3c
 80093aa:	4618      	mov	r0, r3
 80093ac:	f001 ffa8 	bl	800b300 <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 80093b0:	687b      	ldr	r3, [r7, #4]
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3718      	adds	r7, #24
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 80093ba:	b480      	push	{r7}
 80093bc:	b083      	sub	sp, #12
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	461a      	mov	r2, r3
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	1ad3      	subs	r3, r2, r3
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	370c      	adds	r7, #12
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr

080093e2 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 80093e2:	b480      	push	{r7}
 80093e4:	b085      	sub	sp, #20
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
  int value = -1;
 80093ea:	f04f 33ff 	mov.w	r3, #4294967295
 80093ee:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80093f6:	b2da      	uxtb	r2, r3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	429a      	cmp	r2, r3
 8009402:	bf34      	ite	cc
 8009404:	2301      	movcc	r3, #1
 8009406:	2300      	movcs	r3, #0
 8009408:	b2db      	uxtb	r3, r3
 800940a:	2b00      	cmp	r3, #0
 800940c:	d012      	beq.n	8009434 <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8009414:	b2db      	uxtb	r3, r3
 8009416:	461a      	mov	r2, r3
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4413      	add	r3, r2
 800941c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8009420:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8009428:	b2db      	uxtb	r3, r3
 800942a:	3301      	adds	r3, #1
 800942c:	b2da      	uxtb	r2, r3
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 8009434:	68fb      	ldr	r3, [r7, #12]
}
 8009436:	4618      	mov	r0, r3
 8009438:	3714      	adds	r7, #20
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr

08009442 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 8009442:	b480      	push	{r7}
 8009444:	b085      	sub	sp, #20
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
  int value = -1;
 800944a:	f04f 33ff 	mov.w	r3, #4294967295
 800944e:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8009456:	b2da      	uxtb	r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800945e:	b2db      	uxtb	r3, r3
 8009460:	429a      	cmp	r2, r3
 8009462:	bf34      	ite	cc
 8009464:	2301      	movcc	r3, #1
 8009466:	2300      	movcs	r3, #0
 8009468:	b2db      	uxtb	r3, r3
 800946a:	2b00      	cmp	r3, #0
 800946c:	d009      	beq.n	8009482 <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8009474:	b2db      	uxtb	r3, r3
 8009476:	461a      	mov	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4413      	add	r3, r2
 800947c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8009480:	60fb      	str	r3, [r7, #12]
  }

  return value;
 8009482:	68fb      	ldr	r3, [r7, #12]
}
 8009484:	4618      	mov	r0, r3
 8009486:	3714      	adds	r7, #20
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 8009498:	bf00      	nop
 800949a:	370c      	adds	r7, #12
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr

080094a4 <_ZN7TwoWire16i2c_master_startEv>:
{
  user_onRequest = function;
}

int TwoWire::i2c_master_start()
{
 80094a4:	b480      	push	{r7}
 80094a6:	b085      	sub	sp, #20
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094b0:	60bb      	str	r3, [r7, #8]

    int timeout;

    // Clear Acknowledge failure flag
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80094ba:	615a      	str	r2, [r3, #20]

    // Wait the STOP condition has been previously correctly sent
  // This timeout can be avoid in some specific cases by simply clearing the STOP bit
    timeout = FLAG_TIMEOUT;
 80094bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094c0:	60fb      	str	r3, [r7, #12]
    while ((i2c->CR1 & I2C_CR1_STOP) == I2C_CR1_STOP) {
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094ce:	bf0c      	ite	eq
 80094d0:	2301      	moveq	r3, #1
 80094d2:	2300      	movne	r3, #0
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d00b      	beq.n	80094f2 <_ZN7TwoWire16i2c_master_startEv+0x4e>
        if ((timeout--) == 0) {
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	1e5a      	subs	r2, r3, #1
 80094de:	60fa      	str	r2, [r7, #12]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	bf0c      	ite	eq
 80094e4:	2301      	moveq	r3, #1
 80094e6:	2300      	movne	r3, #0
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d0e9      	beq.n	80094c2 <_ZN7TwoWire16i2c_master_startEv+0x1e>
            return 1;
 80094ee:	2301      	movs	r3, #1
 80094f0:	e021      	b.n	8009536 <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    // Generate the START condition
    i2c->CR1 |= I2C_CR1_START;
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	601a      	str	r2, [r3, #0]

    // Wait the START condition has been correctly sent
    timeout = FLAG_TIMEOUT;
 80094fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009502:	60fb      	str	r3, [r7, #12]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009508:	695b      	ldr	r3, [r3, #20]
 800950a:	f003 0301 	and.w	r3, r3, #1
 800950e:	2b01      	cmp	r3, #1
 8009510:	bf14      	ite	ne
 8009512:	2301      	movne	r3, #1
 8009514:	2300      	moveq	r3, #0
 8009516:	b2db      	uxtb	r3, r3
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00b      	beq.n	8009534 <_ZN7TwoWire16i2c_master_startEv+0x90>
        if ((timeout--) == 0) {
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	1e5a      	subs	r2, r3, #1
 8009520:	60fa      	str	r2, [r7, #12]
 8009522:	2b00      	cmp	r3, #0
 8009524:	bf0c      	ite	eq
 8009526:	2301      	moveq	r3, #1
 8009528:	2300      	movne	r3, #0
 800952a:	b2db      	uxtb	r3, r3
 800952c:	2b00      	cmp	r3, #0
 800952e:	d0e9      	beq.n	8009504 <_ZN7TwoWire16i2c_master_startEv+0x60>
            return 1;
 8009530:	2301      	movs	r3, #1
 8009532:	e000      	b.n	8009536 <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    return 0;
 8009534:	2300      	movs	r3, #0
}
 8009536:	4618      	mov	r0, r3
 8009538:	3714      	adds	r7, #20
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr

08009542 <_ZN7TwoWire15i2c_master_stopEv>:

int TwoWire::i2c_master_stop()
{
 8009542:	b480      	push	{r7}
 8009544:	b085      	sub	sp, #20
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800954e:	60fb      	str	r3, [r7, #12]

    // Generate the STOP condition
    i2c->CR1 |= I2C_CR1_STOP;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	601a      	str	r2, [r3, #0]

    return 0;
 800955c:	2300      	movs	r3, #0
}
 800955e:	4618      	mov	r0, r3
 8009560:	3714      	adds	r7, #20
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr

0800956a <_ZN7TwoWire15i2c_master_readEhPchh>:

int TwoWire::i2c_master_read(uint8_t address, char *data, uint8_t length, uint8_t stop)
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b08a      	sub	sp, #40	; 0x28
 800956e:	af00      	add	r7, sp, #0
 8009570:	60f8      	str	r0, [r7, #12]
 8009572:	607a      	str	r2, [r7, #4]
 8009574:	461a      	mov	r2, r3
 8009576:	460b      	mov	r3, r1
 8009578:	72fb      	strb	r3, [r7, #11]
 800957a:	4613      	mov	r3, r2
 800957c:	72bb      	strb	r3, [r7, #10]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009582:	61fb      	str	r3, [r7, #28]
    int timeout;
    int count;
    int value;
    int ret;

    i2c_master_start();
 8009584:	68f8      	ldr	r0, [r7, #12]
 8009586:	f7ff ff8d 	bl	80094a4 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 800958a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800958e:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009594:	695b      	ldr	r3, [r3, #20]
 8009596:	f003 0301 	and.w	r3, r3, #1
 800959a:	2b01      	cmp	r3, #1
 800959c:	bf14      	ite	ne
 800959e:	2301      	movne	r3, #1
 80095a0:	2300      	moveq	r3, #0
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d008      	beq.n	80095ba <_ZN7TwoWire15i2c_master_readEhPchh+0x50>
        timeout--;
 80095a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095aa:	3b01      	subs	r3, #1
 80095ac:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 80095ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d1ed      	bne.n	8009590 <_ZN7TwoWire15i2c_master_readEhPchh+0x26>
            return -1;
 80095b4:	f04f 33ff 	mov.w	r3, #4294967295
 80095b8:	e064      	b.n	8009684 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_READ(address);
 80095ba:	7afb      	ldrb	r3, [r7, #11]
 80095bc:	f043 0301 	orr.w	r3, r3, #1
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	461a      	mov	r2, r3
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 80095c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095cc:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095d2:	695b      	ldr	r3, [r3, #20]
 80095d4:	f003 0302 	and.w	r3, r3, #2
 80095d8:	2b02      	cmp	r3, #2
 80095da:	bf14      	ite	ne
 80095dc:	2301      	movne	r3, #1
 80095de:	2300      	moveq	r3, #0
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d008      	beq.n	80095f8 <_ZN7TwoWire15i2c_master_readEhPchh+0x8e>
        timeout--;
 80095e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e8:	3b01      	subs	r3, #1
 80095ea:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 80095ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1ed      	bne.n	80095ce <_ZN7TwoWire15i2c_master_readEhPchh+0x64>
            return -1;
 80095f2:	f04f 33ff 	mov.w	r3, #4294967295
 80095f6:	e045      	b.n	8009684 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 80095f8:	2300      	movs	r3, #0
 80095fa:	613b      	str	r3, [r7, #16]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009600:	695b      	ldr	r3, [r3, #20]
 8009602:	613b      	str	r3, [r7, #16]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009608:	699b      	ldr	r3, [r3, #24]
 800960a:	613b      	str	r3, [r7, #16]
 800960c:	693b      	ldr	r3, [r7, #16]

    // Read all bytes except last one
    for (count = 0; count < (length - 1); count++) {
 800960e:	2300      	movs	r3, #0
 8009610:	623b      	str	r3, [r7, #32]
 8009612:	7abb      	ldrb	r3, [r7, #10]
 8009614:	3b01      	subs	r3, #1
 8009616:	6a3a      	ldr	r2, [r7, #32]
 8009618:	429a      	cmp	r2, r3
 800961a:	da17      	bge.n	800964c <_ZN7TwoWire15i2c_master_readEhPchh+0xe2>
        ret = i2c_master_byte_read(&value, 0);
 800961c:	f107 0314 	add.w	r3, r7, #20
 8009620:	2200      	movs	r2, #0
 8009622:	4619      	mov	r1, r3
 8009624:	68f8      	ldr	r0, [r7, #12]
 8009626:	f000 f8a4 	bl	8009772 <_ZN7TwoWire20i2c_master_byte_readEPii>
 800962a:	61b8      	str	r0, [r7, #24]
        if(ret)
 800962c:	69bb      	ldr	r3, [r7, #24]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d002      	beq.n	8009638 <_ZN7TwoWire15i2c_master_readEhPchh+0xce>
        {
          return -1;
 8009632:	f04f 33ff 	mov.w	r3, #4294967295
 8009636:	e025      	b.n	8009684 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
        data[count] = (char)value;
 8009638:	6979      	ldr	r1, [r7, #20]
 800963a:	6a3b      	ldr	r3, [r7, #32]
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	4413      	add	r3, r2
 8009640:	b2ca      	uxtb	r2, r1
 8009642:	701a      	strb	r2, [r3, #0]
    for (count = 0; count < (length - 1); count++) {
 8009644:	6a3b      	ldr	r3, [r7, #32]
 8009646:	3301      	adds	r3, #1
 8009648:	623b      	str	r3, [r7, #32]
 800964a:	e7e2      	b.n	8009612 <_ZN7TwoWire15i2c_master_readEhPchh+0xa8>
    }

    // If not repeated start, send stop.
    // Warning: must be done BEFORE the data is read.
    if (stop) {
 800964c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009650:	2b00      	cmp	r3, #0
 8009652:	d002      	beq.n	800965a <_ZN7TwoWire15i2c_master_readEhPchh+0xf0>
        i2c_master_stop();
 8009654:	68f8      	ldr	r0, [r7, #12]
 8009656:	f7ff ff74 	bl	8009542 <_ZN7TwoWire15i2c_master_stopEv>
    }

    // Read the last byte
    ret = i2c_master_byte_read(&value, 1);
 800965a:	f107 0314 	add.w	r3, r7, #20
 800965e:	2201      	movs	r2, #1
 8009660:	4619      	mov	r1, r3
 8009662:	68f8      	ldr	r0, [r7, #12]
 8009664:	f000 f885 	bl	8009772 <_ZN7TwoWire20i2c_master_byte_readEPii>
 8009668:	61b8      	str	r0, [r7, #24]
    if(ret)
 800966a:	69bb      	ldr	r3, [r7, #24]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d002      	beq.n	8009676 <_ZN7TwoWire15i2c_master_readEhPchh+0x10c>
    {
      return -1;
 8009670:	f04f 33ff 	mov.w	r3, #4294967295
 8009674:	e006      	b.n	8009684 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
    }
    data[count] = (char)value;
 8009676:	6979      	ldr	r1, [r7, #20]
 8009678:	6a3b      	ldr	r3, [r7, #32]
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	4413      	add	r3, r2
 800967e:	b2ca      	uxtb	r2, r1
 8009680:	701a      	strb	r2, [r3, #0]

    return length;
 8009682:	7abb      	ldrb	r3, [r7, #10]
}
 8009684:	4618      	mov	r0, r3
 8009686:	3728      	adds	r7, #40	; 0x28
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <_ZN7TwoWire16i2c_master_writeEiPKcii>:

int TwoWire::i2c_master_write(int address, const char *data, int length, int stop)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b088      	sub	sp, #32
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	607a      	str	r2, [r7, #4]
 8009698:	603b      	str	r3, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800969e:	617b      	str	r3, [r7, #20]
    int timeout;
    int count;

    i2c_master_start();
 80096a0:	68f8      	ldr	r0, [r7, #12]
 80096a2:	f7ff feff 	bl	80094a4 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 80096a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096aa:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096b0:	695b      	ldr	r3, [r3, #20]
 80096b2:	f003 0301 	and.w	r3, r3, #1
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	bf14      	ite	ne
 80096ba:	2301      	movne	r3, #1
 80096bc:	2300      	moveq	r3, #0
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d007      	beq.n	80096d4 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x48>
        timeout--;
 80096c4:	69fb      	ldr	r3, [r7, #28]
 80096c6:	3b01      	subs	r3, #1
 80096c8:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 80096ca:	69fb      	ldr	r3, [r7, #28]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d1ed      	bne.n	80096ac <_ZN7TwoWire16i2c_master_writeEiPKcii+0x20>
            return 4;
 80096d0:	2304      	movs	r3, #4
 80096d2:	e04a      	b.n	800976a <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_WRITE(address);
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 80096e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096e4:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096ea:	695b      	ldr	r3, [r3, #20]
 80096ec:	f003 0302 	and.w	r3, r3, #2
 80096f0:	2b02      	cmp	r3, #2
 80096f2:	bf14      	ite	ne
 80096f4:	2301      	movne	r3, #1
 80096f6:	2300      	moveq	r3, #0
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d007      	beq.n	800970e <_ZN7TwoWire16i2c_master_writeEiPKcii+0x82>
        timeout--;
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	3b01      	subs	r3, #1
 8009702:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1ed      	bne.n	80096e6 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x5a>
            return 2;
 800970a:	2302      	movs	r3, #2
 800970c:	e02d      	b.n	800976a <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 800970e:	2300      	movs	r3, #0
 8009710:	613b      	str	r3, [r7, #16]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009716:	695b      	ldr	r3, [r3, #20]
 8009718:	613b      	str	r3, [r7, #16]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800971e:	699b      	ldr	r3, [r3, #24]
 8009720:	613b      	str	r3, [r7, #16]
 8009722:	693b      	ldr	r3, [r7, #16]

    for (count = 0; count < length; count++) {
 8009724:	2300      	movs	r3, #0
 8009726:	61bb      	str	r3, [r7, #24]
 8009728:	69ba      	ldr	r2, [r7, #24]
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	429a      	cmp	r2, r3
 800972e:	da15      	bge.n	800975c <_ZN7TwoWire16i2c_master_writeEiPKcii+0xd0>
        if (i2c_master_byte_write(data[count]) != 1) {
 8009730:	69bb      	ldr	r3, [r7, #24]
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	4413      	add	r3, r2
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	4619      	mov	r1, r3
 800973a:	68f8      	ldr	r0, [r7, #12]
 800973c:	f000 f85a 	bl	80097f4 <_ZN7TwoWire21i2c_master_byte_writeEi>
 8009740:	4603      	mov	r3, r0
 8009742:	2b01      	cmp	r3, #1
 8009744:	bf14      	ite	ne
 8009746:	2301      	movne	r3, #1
 8009748:	2300      	moveq	r3, #0
 800974a:	b2db      	uxtb	r3, r3
 800974c:	2b00      	cmp	r3, #0
 800974e:	d001      	beq.n	8009754 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xc8>
            return 3;
 8009750:	2303      	movs	r3, #3
 8009752:	e00a      	b.n	800976a <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
    for (count = 0; count < length; count++) {
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	3301      	adds	r3, #1
 8009758:	61bb      	str	r3, [r7, #24]
 800975a:	e7e5      	b.n	8009728 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x9c>
        }
    }

    // If not repeated start, send stop.
    if (stop) {
 800975c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975e:	2b00      	cmp	r3, #0
 8009760:	d002      	beq.n	8009768 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xdc>
        i2c_master_stop();
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	f7ff feed 	bl	8009542 <_ZN7TwoWire15i2c_master_stopEv>
    }

    return 0;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3720      	adds	r7, #32
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}

08009772 <_ZN7TwoWire20i2c_master_byte_readEPii>:

int TwoWire::i2c_master_byte_read(int *value, int last)
{
 8009772:	b480      	push	{r7}
 8009774:	b087      	sub	sp, #28
 8009776:	af00      	add	r7, sp, #0
 8009778:	60f8      	str	r0, [r7, #12]
 800977a:	60b9      	str	r1, [r7, #8]
 800977c:	607a      	str	r2, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009782:	613b      	str	r3, [r7, #16]
    int timeout;

    if (last) {
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d006      	beq.n	8009798 <_ZN7TwoWire20i2c_master_byte_readEPii+0x26>
        // Don't acknowledge the last byte
        i2c->CR1 &= ~I2C_CR1_ACK;
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	601a      	str	r2, [r3, #0]
 8009796:	e005      	b.n	80097a4 <_ZN7TwoWire20i2c_master_byte_readEPii+0x32>
    } else {
        // Acknowledge the byte
        i2c->CR1 |= I2C_CR1_ACK;
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	601a      	str	r2, [r3, #0]
    }

    // Wait until the byte is received
    timeout = FLAG_TIMEOUT;
 80097a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097a8:	617b      	str	r3, [r7, #20]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_RXNE) == RESET) {
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097ae:	695b      	ldr	r3, [r3, #20]
 80097b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097b4:	2b40      	cmp	r3, #64	; 0x40
 80097b6:	bf14      	ite	ne
 80097b8:	2301      	movne	r3, #1
 80097ba:	2300      	moveq	r3, #0
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d00c      	beq.n	80097dc <_ZN7TwoWire20i2c_master_byte_readEPii+0x6a>
        if ((timeout--) == 0) {
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	1e5a      	subs	r2, r3, #1
 80097c6:	617a      	str	r2, [r7, #20]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	bf0c      	ite	eq
 80097cc:	2301      	moveq	r3, #1
 80097ce:	2300      	movne	r3, #0
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d0e9      	beq.n	80097aa <_ZN7TwoWire20i2c_master_byte_readEPii+0x38>
            return -1;
 80097d6:	f04f 33ff 	mov.w	r3, #4294967295
 80097da:	e005      	b.n	80097e8 <_ZN7TwoWire20i2c_master_byte_readEPii+0x76>
        }
    }

    *value = (int)i2c->DR;
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	691b      	ldr	r3, [r3, #16]
 80097e0:	461a      	mov	r2, r3
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	601a      	str	r2, [r3, #0]

    return 0;
 80097e6:	2300      	movs	r3, #0
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	371c      	adds	r7, #28
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <_ZN7TwoWire21i2c_master_byte_writeEi>:

int TwoWire::i2c_master_byte_write(int data)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009802:	60bb      	str	r3, [r7, #8]
    int timeout;

    i2c->DR = (uint8_t)data;
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	b2db      	uxtb	r3, r3
 8009808:	461a      	mov	r2, r3
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	611a      	str	r2, [r3, #16]

    // Wait until the byte is transmitted
    timeout = FLAG_TIMEOUT;
 800980e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009812:	60fb      	str	r3, [r7, #12]
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009818:	695b      	ldr	r3, [r3, #20]
 800981a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800981e:	2b80      	cmp	r3, #128	; 0x80
 8009820:	d008      	beq.n	8009834 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
            (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == RESET)) {
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009826:	695b      	ldr	r3, [r3, #20]
 8009828:	f003 0304 	and.w	r3, r3, #4
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 800982c:	2b04      	cmp	r3, #4
 800982e:	d001      	beq.n	8009834 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
 8009830:	2301      	movs	r3, #1
 8009832:	e000      	b.n	8009836 <_ZN7TwoWire21i2c_master_byte_writeEi+0x42>
 8009834:	2300      	movs	r3, #0
 8009836:	2b00      	cmp	r3, #0
 8009838:	d00b      	beq.n	8009852 <_ZN7TwoWire21i2c_master_byte_writeEi+0x5e>
        if ((timeout--) == 0) {
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	1e5a      	subs	r2, r3, #1
 800983e:	60fa      	str	r2, [r7, #12]
 8009840:	2b00      	cmp	r3, #0
 8009842:	bf0c      	ite	eq
 8009844:	2301      	moveq	r3, #1
 8009846:	2300      	movne	r3, #0
 8009848:	b2db      	uxtb	r3, r3
 800984a:	2b00      	cmp	r3, #0
 800984c:	d0e2      	beq.n	8009814 <_ZN7TwoWire21i2c_master_byte_writeEi+0x20>
            return 0;
 800984e:	2300      	movs	r3, #0
 8009850:	e000      	b.n	8009854 <_ZN7TwoWire21i2c_master_byte_writeEi+0x60>
        }
    }

    return 1;
 8009852:	2301      	movs	r3, #1
}
 8009854:	4618      	mov	r0, r3
 8009856:	3714      	adds	r7, #20
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <_ZN7TwoWire15i2c_slave_writeEPKci>:

int TwoWire::i2c_slave_write(const char *data, int length)
{
 8009860:	b480      	push	{r7}
 8009862:	b089      	sub	sp, #36	; 0x24
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 800986c:	2300      	movs	r3, #0
 800986e:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009874:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2b00      	cmp	r3, #0
 800987a:	dd41      	ble.n	8009900 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 800987c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009880:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009886:	695b      	ldr	r3, [r3, #20]
 8009888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800988c:	2b80      	cmp	r3, #128	; 0x80
 800988e:	bf14      	ite	ne
 8009890:	2301      	movne	r3, #1
 8009892:	2300      	moveq	r3, #0
 8009894:	b2db      	uxtb	r3, r3
 8009896:	2b00      	cmp	r3, #0
 8009898:	d008      	beq.n	80098ac <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 800989a:	69fb      	ldr	r3, [r7, #28]
 800989c:	3b01      	subs	r3, #1
 800989e:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 80098a0:	69fb      	ldr	r3, [r7, #28]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d1ed      	bne.n	8009882 <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 80098a6:	f04f 33ff 	mov.w	r3, #4294967295
 80098aa:	e068      	b.n	800997e <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	1c5a      	adds	r2, r3, #1
 80098b0:	60ba      	str	r2, [r7, #8]
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	461a      	mov	r2, r3
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	611a      	str	r2, [r3, #16]
        length--;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	3b01      	subs	r3, #1
 80098be:	607b      	str	r3, [r7, #4]
        size++;
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	3301      	adds	r3, #1
 80098c4:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ca:	695b      	ldr	r3, [r3, #20]
 80098cc:	f003 0304 	and.w	r3, r3, #4
 80098d0:	2b04      	cmp	r3, #4
 80098d2:	d104      	bne.n	80098de <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d001      	beq.n	80098de <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 80098da:	2301      	movs	r3, #1
 80098dc:	e000      	b.n	80098e0 <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 80098de:	2300      	movs	r3, #0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d0c8      	beq.n	8009876 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	1c5a      	adds	r2, r3, #1
 80098e8:	60ba      	str	r2, [r7, #8]
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	461a      	mov	r2, r3
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	611a      	str	r2, [r3, #16]
            length--;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	3b01      	subs	r3, #1
 80098f6:	607b      	str	r3, [r7, #4]
            size++;
 80098f8:	69bb      	ldr	r3, [r7, #24]
 80098fa:	3301      	adds	r3, #1
 80098fc:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 80098fe:	e7ba      	b.n	8009876 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 8009900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009904:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800990a:	695b      	ldr	r3, [r3, #20]
 800990c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009914:	bf14      	ite	ne
 8009916:	2301      	movne	r3, #1
 8009918:	2300      	moveq	r3, #0
 800991a:	b2db      	uxtb	r3, r3
 800991c:	2b00      	cmp	r3, #0
 800991e:	d008      	beq.n	8009932 <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 8009920:	69fb      	ldr	r3, [r7, #28]
 8009922:	3b01      	subs	r3, #1
 8009924:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8009926:	69fb      	ldr	r3, [r7, #28]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d1ec      	bne.n	8009906 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 800992c:	f04f 33ff 	mov.w	r3, #4294967295
 8009930:	e025      	b.n	800997e <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009936:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800993a:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 800993c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009940:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009946:	699b      	ldr	r3, [r3, #24]
 8009948:	f003 0302 	and.w	r3, r3, #2
 800994c:	2b02      	cmp	r3, #2
 800994e:	bf0c      	ite	eq
 8009950:	2301      	moveq	r3, #1
 8009952:	2300      	movne	r3, #0
 8009954:	b2db      	uxtb	r3, r3
 8009956:	2b00      	cmp	r3, #0
 8009958:	d008      	beq.n	800996c <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	3b01      	subs	r3, #1
 800995e:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d1ed      	bne.n	8009942 <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 8009966:	f04f 33ff 	mov.w	r3, #4294967295
 800996a:	e008      	b.n	800997e <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2220      	movs	r2, #32
 8009970:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2200      	movs	r2, #0
 8009978:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 800997c:	69bb      	ldr	r3, [r7, #24]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3724      	adds	r7, #36	; 0x24
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr
	...

0800998c <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009998:	4a12      	ldr	r2, [pc, #72]	; (80099e4 <_ZN7TwoWire15enableInterruptEv+0x58>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d106      	bne.n	80099ac <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 800999e:	2049      	movs	r0, #73	; 0x49
 80099a0:	f000 fe38 	bl	800a614 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80099a4:	2048      	movs	r0, #72	; 0x48
 80099a6:	f000 fe35 	bl	800a614 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 80099aa:	e016      	b.n	80099da <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099b0:	4a0d      	ldr	r2, [pc, #52]	; (80099e8 <_ZN7TwoWire15enableInterruptEv+0x5c>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d106      	bne.n	80099c4 <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80099b6:	2022      	movs	r0, #34	; 0x22
 80099b8:	f000 fe2c 	bl	800a614 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80099bc:	2021      	movs	r0, #33	; 0x21
 80099be:	f000 fe29 	bl	800a614 <HAL_NVIC_EnableIRQ>
}
 80099c2:	e00a      	b.n	80099da <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099c8:	4a08      	ldr	r2, [pc, #32]	; (80099ec <_ZN7TwoWire15enableInterruptEv+0x60>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d105      	bne.n	80099da <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80099ce:	2020      	movs	r0, #32
 80099d0:	f000 fe20 	bl	800a614 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80099d4:	201f      	movs	r0, #31
 80099d6:	f000 fe1d 	bl	800a614 <HAL_NVIC_EnableIRQ>
}
 80099da:	bf00      	nop
 80099dc:	3708      	adds	r7, #8
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop
 80099e4:	40005c00 	.word	0x40005c00
 80099e8:	40005800 	.word	0x40005800
 80099ec:	40005400 	.word	0x40005400

080099f0 <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099fc:	4a12      	ldr	r2, [pc, #72]	; (8009a48 <_ZN7TwoWire16disableInterruptEv+0x58>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d106      	bne.n	8009a10 <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8009a02:	2049      	movs	r0, #73	; 0x49
 8009a04:	f000 fe14 	bl	800a630 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8009a08:	2048      	movs	r0, #72	; 0x48
 8009a0a:	f000 fe11 	bl	800a630 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8009a0e:	e016      	b.n	8009a3e <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a14:	4a0d      	ldr	r2, [pc, #52]	; (8009a4c <_ZN7TwoWire16disableInterruptEv+0x5c>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d106      	bne.n	8009a28 <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8009a1a:	2022      	movs	r0, #34	; 0x22
 8009a1c:	f000 fe08 	bl	800a630 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8009a20:	2021      	movs	r0, #33	; 0x21
 8009a22:	f000 fe05 	bl	800a630 <HAL_NVIC_DisableIRQ>
}
 8009a26:	e00a      	b.n	8009a3e <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a2c:	4a08      	ldr	r2, [pc, #32]	; (8009a50 <_ZN7TwoWire16disableInterruptEv+0x60>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d105      	bne.n	8009a3e <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8009a32:	2020      	movs	r0, #32
 8009a34:	f000 fdfc 	bl	800a630 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8009a38:	201f      	movs	r0, #31
 8009a3a:	f000 fdf9 	bl	800a630 <HAL_NVIC_DisableIRQ>
}
 8009a3e:	bf00      	nop
 8009a40:	3708      	adds	r7, #8
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	40005c00 	.word	0x40005c00
 8009a4c:	40005800 	.word	0x40005800
 8009a50:	40005400 	.word	0x40005400

08009a54 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b082      	sub	sp, #8
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d110      	bne.n	8009a86 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d10b      	bne.n	8009a86 <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 8009a6e:	4908      	ldr	r1, [pc, #32]	; (8009a90 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8009a70:	4808      	ldr	r0, [pc, #32]	; (8009a94 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8009a72:	f7ff fb51 	bl	8009118 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 8009a76:	4908      	ldr	r1, [pc, #32]	; (8009a98 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8009a78:	4808      	ldr	r0, [pc, #32]	; (8009a9c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8009a7a:	f7ff fb4d 	bl	8009118 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 8009a7e:	4908      	ldr	r1, [pc, #32]	; (8009aa0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8009a80:	4808      	ldr	r0, [pc, #32]	; (8009aa4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8009a82:	f7ff fb49 	bl	8009118 <_ZN7TwoWireC1EP11I2C_TypeDef>
 8009a86:	bf00      	nop
 8009a88:	3708      	adds	r7, #8
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	40005400 	.word	0x40005400
 8009a94:	20000408 	.word	0x20000408
 8009a98:	40005800 	.word	0x40005800
 8009a9c:	200004c0 	.word	0x200004c0
 8009aa0:	40005c00 	.word	0x40005c00
 8009aa4:	20000578 	.word	0x20000578

08009aa8 <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009ab0:	2001      	movs	r0, #1
 8009ab2:	f7ff ffcf 	bl	8009a54 <_Z41__static_initialization_and_destruction_0ii>
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <MRT_radio_tx>:
#include <iwdg.h>
#include <string.h>
#include <sx126x.h>


void MRT_radio_tx(char* buffer){
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b082      	sub	sp, #8
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
			//sx126x_set_tx(); TODO
			TxProtocol(buffer, strlen(buffer));
		}
	#endif

	print((char*) "Radio sending:\t");
 8009ac0:	4804      	ldr	r0, [pc, #16]	; (8009ad4 <MRT_radio_tx+0x1c>)
 8009ac2:	f7f7 fb21 	bl	8001108 <print>
	println(buffer);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f7f7 fb00 	bl	80010cc <println>
}
 8009acc:	bf00      	nop
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	0801a790 	.word	0x0801a790

08009ad8 <MRT_radio_Init>:
	println(buffer);
}



void MRT_radio_Init(void){
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	af00      	add	r7, sp, #0
	println("\r\nRadio Init");
 8009adc:	4803      	ldr	r0, [pc, #12]	; (8009aec <MRT_radio_Init+0x14>)
 8009ade:	f7f7 faf5 	bl	80010cc <println>
	set_NRESET_pin(SX_RST_GPIO_Port, SX_RST_Pin);
	set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
	Tx_setup();
	println("OK");
	#else
	println("\tNo radio currently in use");
 8009ae2:	4803      	ldr	r0, [pc, #12]	; (8009af0 <MRT_radio_Init+0x18>)
 8009ae4:	f7f7 faf2 	bl	80010cc <println>
	#endif
}
 8009ae8:	bf00      	nop
 8009aea:	bd80      	pop	{r7, pc}
 8009aec:	0801a7b4 	.word	0x0801a7b4
 8009af0:	0801a7c4 	.word	0x0801a7c4

08009af4 <MRT_TELEMETRY_Init>:


void MRT_TELEMETRY_Init(void){
 8009af4:	b5b0      	push	{r4, r5, r7, lr}
 8009af6:	b086      	sub	sp, #24
 8009af8:	af00      	add	r7, sp, #0

	MRT_radio_Init();
 8009afa:	f7ff ffed 	bl	8009ad8 <MRT_radio_Init>

	HAL_IWDG_Refresh(&hiwdg);

	#if IRIDIUM_
		HAL_GPIO_WritePin(Iridium_RST_GPIO_Port, Iridium_RST_Pin, SET);
 8009afe:	2201      	movs	r2, #1
 8009b00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009b04:	4809      	ldr	r0, [pc, #36]	; (8009b2c <MRT_TELEMETRY_Init+0x38>)
 8009b06:	f000 ff65 	bl	800a9d4 <HAL_GPIO_WritePin>
		#if IRIDIUM_INTERNAL_PRINT
		hiridium = MRT_Iridium_Init(IRIDIUM_TIMEOUT, IRIDIUM_I2C, print);
 8009b0a:	4c09      	ldr	r4, [pc, #36]	; (8009b30 <MRT_TELEMETRY_Init+0x3c>)
 8009b0c:	4638      	mov	r0, r7
 8009b0e:	4b09      	ldr	r3, [pc, #36]	; (8009b34 <MRT_TELEMETRY_Init+0x40>)
 8009b10:	2202      	movs	r2, #2
 8009b12:	2101      	movs	r1, #1
 8009b14:	f7ff f946 	bl	8008da4 <MRT_Iridium_Init>
 8009b18:	4625      	mov	r5, r4
 8009b1a:	463c      	mov	r4, r7
 8009b1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009b1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009b20:	6823      	ldr	r3, [r4, #0]
 8009b22:	602b      	str	r3, [r5, #0]
		#else
		hiridium = MRT_Iridium_Init(IRIDIUM_TIMEOUT, IRIDIUM_I2C, no_print); //Doesn't print the internal commands
		#endif
	#endif
}
 8009b24:	bf00      	nop
 8009b26:	3718      	adds	r7, #24
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bdb0      	pop	{r4, r5, r7, pc}
 8009b2c:	40021000 	.word	0x40021000
 8009b30:	200003f4 	.word	0x200003f4
 8009b34:	08001109 	.word	0x08001109

08009b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009b3c:	4b0e      	ldr	r3, [pc, #56]	; (8009b78 <HAL_Init+0x40>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a0d      	ldr	r2, [pc, #52]	; (8009b78 <HAL_Init+0x40>)
 8009b42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009b46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009b48:	4b0b      	ldr	r3, [pc, #44]	; (8009b78 <HAL_Init+0x40>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a0a      	ldr	r2, [pc, #40]	; (8009b78 <HAL_Init+0x40>)
 8009b4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009b52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009b54:	4b08      	ldr	r3, [pc, #32]	; (8009b78 <HAL_Init+0x40>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a07      	ldr	r2, [pc, #28]	; (8009b78 <HAL_Init+0x40>)
 8009b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009b60:	2003      	movs	r0, #3
 8009b62:	f000 fd30 	bl	800a5c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009b66:	2000      	movs	r0, #0
 8009b68:	f7f8 ff84 	bl	8002a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009b6c:	f7f8 ff56 	bl	8002a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009b70:	2300      	movs	r3, #0
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	40023c00 	.word	0x40023c00

08009b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009b80:	4b06      	ldr	r3, [pc, #24]	; (8009b9c <HAL_IncTick+0x20>)
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	461a      	mov	r2, r3
 8009b86:	4b06      	ldr	r3, [pc, #24]	; (8009ba0 <HAL_IncTick+0x24>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4413      	add	r3, r2
 8009b8c:	4a04      	ldr	r2, [pc, #16]	; (8009ba0 <HAL_IncTick+0x24>)
 8009b8e:	6013      	str	r3, [r2, #0]
}
 8009b90:	bf00      	nop
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr
 8009b9a:	bf00      	nop
 8009b9c:	2000008c 	.word	0x2000008c
 8009ba0:	20006040 	.word	0x20006040

08009ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8009ba8:	4b03      	ldr	r3, [pc, #12]	; (8009bb8 <HAL_GetTick+0x14>)
 8009baa:	681b      	ldr	r3, [r3, #0]
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb4:	4770      	bx	lr
 8009bb6:	bf00      	nop
 8009bb8:	20006040 	.word	0x20006040

08009bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009bc4:	f7ff ffee 	bl	8009ba4 <HAL_GetTick>
 8009bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bd4:	d005      	beq.n	8009be2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009bd6:	4b0a      	ldr	r3, [pc, #40]	; (8009c00 <HAL_Delay+0x44>)
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	461a      	mov	r2, r3
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	4413      	add	r3, r2
 8009be0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009be2:	bf00      	nop
 8009be4:	f7ff ffde 	bl	8009ba4 <HAL_GetTick>
 8009be8:	4602      	mov	r2, r0
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	1ad3      	subs	r3, r2, r3
 8009bee:	68fa      	ldr	r2, [r7, #12]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d8f7      	bhi.n	8009be4 <HAL_Delay+0x28>
  {
  }
}
 8009bf4:	bf00      	nop
 8009bf6:	bf00      	nop
 8009bf8:	3710      	adds	r7, #16
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	bf00      	nop
 8009c00:	2000008c 	.word	0x2000008c

08009c04 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d101      	bne.n	8009c1a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009c16:	2301      	movs	r3, #1
 8009c18:	e033      	b.n	8009c82 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d109      	bne.n	8009c36 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f7f7 fc70 	bl	8001508 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c3a:	f003 0310 	and.w	r3, r3, #16
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d118      	bne.n	8009c74 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c46:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009c4a:	f023 0302 	bic.w	r3, r3, #2
 8009c4e:	f043 0202 	orr.w	r2, r3, #2
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 fae8 	bl	800a22c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c66:	f023 0303 	bic.w	r3, r3, #3
 8009c6a:	f043 0201 	orr.w	r2, r3, #1
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	641a      	str	r2, [r3, #64]	; 0x40
 8009c72:	e001      	b.n	8009c78 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009c74:	2301      	movs	r3, #1
 8009c76:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3710      	adds	r7, #16
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
	...

08009c8c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b085      	sub	sp, #20
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8009c94:	2300      	movs	r3, #0
 8009c96:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d101      	bne.n	8009ca6 <HAL_ADC_Start+0x1a>
 8009ca2:	2302      	movs	r3, #2
 8009ca4:	e0b2      	b.n	8009e0c <HAL_ADC_Start+0x180>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2201      	movs	r2, #1
 8009caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	f003 0301 	and.w	r3, r3, #1
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d018      	beq.n	8009cee <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	689a      	ldr	r2, [r3, #8]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f042 0201 	orr.w	r2, r2, #1
 8009cca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009ccc:	4b52      	ldr	r3, [pc, #328]	; (8009e18 <HAL_ADC_Start+0x18c>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a52      	ldr	r2, [pc, #328]	; (8009e1c <HAL_ADC_Start+0x190>)
 8009cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8009cd6:	0c9a      	lsrs	r2, r3, #18
 8009cd8:	4613      	mov	r3, r2
 8009cda:	005b      	lsls	r3, r3, #1
 8009cdc:	4413      	add	r3, r2
 8009cde:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8009ce0:	e002      	b.n	8009ce8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	3b01      	subs	r3, #1
 8009ce6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d1f9      	bne.n	8009ce2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	f003 0301 	and.w	r3, r3, #1
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d17a      	bne.n	8009df2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d00:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009d04:	f023 0301 	bic.w	r3, r3, #1
 8009d08:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d007      	beq.n	8009d2e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d22:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009d26:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d3a:	d106      	bne.n	8009d4a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d40:	f023 0206 	bic.w	r2, r3, #6
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	645a      	str	r2, [r3, #68]	; 0x44
 8009d48:	e002      	b.n	8009d50 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009d58:	4b31      	ldr	r3, [pc, #196]	; (8009e20 <HAL_ADC_Start+0x194>)
 8009d5a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009d64:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	f003 031f 	and.w	r3, r3, #31
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d12a      	bne.n	8009dc8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4a2b      	ldr	r2, [pc, #172]	; (8009e24 <HAL_ADC_Start+0x198>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d015      	beq.n	8009da8 <HAL_ADC_Start+0x11c>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a29      	ldr	r2, [pc, #164]	; (8009e28 <HAL_ADC_Start+0x19c>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d105      	bne.n	8009d92 <HAL_ADC_Start+0x106>
 8009d86:	4b26      	ldr	r3, [pc, #152]	; (8009e20 <HAL_ADC_Start+0x194>)
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	f003 031f 	and.w	r3, r3, #31
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d00a      	beq.n	8009da8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a25      	ldr	r2, [pc, #148]	; (8009e2c <HAL_ADC_Start+0x1a0>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d136      	bne.n	8009e0a <HAL_ADC_Start+0x17e>
 8009d9c:	4b20      	ldr	r3, [pc, #128]	; (8009e20 <HAL_ADC_Start+0x194>)
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	f003 0310 	and.w	r3, r3, #16
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d130      	bne.n	8009e0a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	689b      	ldr	r3, [r3, #8]
 8009dae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d129      	bne.n	8009e0a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	689a      	ldr	r2, [r3, #8]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009dc4:	609a      	str	r2, [r3, #8]
 8009dc6:	e020      	b.n	8009e0a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a15      	ldr	r2, [pc, #84]	; (8009e24 <HAL_ADC_Start+0x198>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d11b      	bne.n	8009e0a <HAL_ADC_Start+0x17e>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d114      	bne.n	8009e0a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	689a      	ldr	r2, [r3, #8]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009dee:	609a      	str	r2, [r3, #8]
 8009df0:	e00b      	b.n	8009e0a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df6:	f043 0210 	orr.w	r2, r3, #16
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e02:	f043 0201 	orr.w	r2, r3, #1
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8009e0a:	2300      	movs	r3, #0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3714      	adds	r7, #20
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr
 8009e18:	20000060 	.word	0x20000060
 8009e1c:	431bde83 	.word	0x431bde83
 8009e20:	40012300 	.word	0x40012300
 8009e24:	40012000 	.word	0x40012000
 8009e28:	40012100 	.word	0x40012100
 8009e2c:	40012200 	.word	0x40012200

08009e30 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d101      	bne.n	8009e46 <HAL_ADC_Stop+0x16>
 8009e42:	2302      	movs	r3, #2
 8009e44:	e021      	b.n	8009e8a <HAL_ADC_Stop+0x5a>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2201      	movs	r2, #1
 8009e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	689a      	ldr	r2, [r3, #8]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f022 0201 	bic.w	r2, r2, #1
 8009e5c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	f003 0301 	and.w	r3, r3, #1
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d109      	bne.n	8009e80 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e70:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009e74:	f023 0301 	bic.w	r3, r3, #1
 8009e78:	f043 0201 	orr.w	r2, r3, #1
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009e88:	2300      	movs	r3, #0
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	370c      	adds	r7, #12
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr

08009e96 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b084      	sub	sp, #16
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
 8009e9e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009eb2:	d113      	bne.n	8009edc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	689b      	ldr	r3, [r3, #8]
 8009eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8009ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ec2:	d10b      	bne.n	8009edc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec8:	f043 0220 	orr.w	r2, r3, #32
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	e063      	b.n	8009fa4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8009edc:	f7ff fe62 	bl	8009ba4 <HAL_GetTick>
 8009ee0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8009ee2:	e021      	b.n	8009f28 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eea:	d01d      	beq.n	8009f28 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d007      	beq.n	8009f02 <HAL_ADC_PollForConversion+0x6c>
 8009ef2:	f7ff fe57 	bl	8009ba4 <HAL_GetTick>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	1ad3      	subs	r3, r2, r3
 8009efc:	683a      	ldr	r2, [r7, #0]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d212      	bcs.n	8009f28 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f003 0302 	and.w	r3, r3, #2
 8009f0c:	2b02      	cmp	r3, #2
 8009f0e:	d00b      	beq.n	8009f28 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f14:	f043 0204 	orr.w	r2, r3, #4
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8009f24:	2303      	movs	r3, #3
 8009f26:	e03d      	b.n	8009fa4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f003 0302 	and.w	r3, r3, #2
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	d1d6      	bne.n	8009ee4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f06f 0212 	mvn.w	r2, #18
 8009f3e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f44:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d123      	bne.n	8009fa2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d11f      	bne.n	8009fa2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f68:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d006      	beq.n	8009f7e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d111      	bne.n	8009fa2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d105      	bne.n	8009fa2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f9a:	f043 0201 	orr.w	r2, r3, #1
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8009fa2:	2300      	movs	r3, #0
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	370c      	adds	r7, #12
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr
	...

08009fc8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b085      	sub	sp, #20
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d101      	bne.n	8009fe4 <HAL_ADC_ConfigChannel+0x1c>
 8009fe0:	2302      	movs	r3, #2
 8009fe2:	e113      	b.n	800a20c <HAL_ADC_ConfigChannel+0x244>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	2b09      	cmp	r3, #9
 8009ff2:	d925      	bls.n	800a040 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	68d9      	ldr	r1, [r3, #12]
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	461a      	mov	r2, r3
 800a002:	4613      	mov	r3, r2
 800a004:	005b      	lsls	r3, r3, #1
 800a006:	4413      	add	r3, r2
 800a008:	3b1e      	subs	r3, #30
 800a00a:	2207      	movs	r2, #7
 800a00c:	fa02 f303 	lsl.w	r3, r2, r3
 800a010:	43da      	mvns	r2, r3
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	400a      	ands	r2, r1
 800a018:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	68d9      	ldr	r1, [r3, #12]
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	689a      	ldr	r2, [r3, #8]
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	b29b      	uxth	r3, r3
 800a02a:	4618      	mov	r0, r3
 800a02c:	4603      	mov	r3, r0
 800a02e:	005b      	lsls	r3, r3, #1
 800a030:	4403      	add	r3, r0
 800a032:	3b1e      	subs	r3, #30
 800a034:	409a      	lsls	r2, r3
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	430a      	orrs	r2, r1
 800a03c:	60da      	str	r2, [r3, #12]
 800a03e:	e022      	b.n	800a086 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	6919      	ldr	r1, [r3, #16]
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	461a      	mov	r2, r3
 800a04e:	4613      	mov	r3, r2
 800a050:	005b      	lsls	r3, r3, #1
 800a052:	4413      	add	r3, r2
 800a054:	2207      	movs	r2, #7
 800a056:	fa02 f303 	lsl.w	r3, r2, r3
 800a05a:	43da      	mvns	r2, r3
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	400a      	ands	r2, r1
 800a062:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	6919      	ldr	r1, [r3, #16]
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	689a      	ldr	r2, [r3, #8]
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	b29b      	uxth	r3, r3
 800a074:	4618      	mov	r0, r3
 800a076:	4603      	mov	r3, r0
 800a078:	005b      	lsls	r3, r3, #1
 800a07a:	4403      	add	r3, r0
 800a07c:	409a      	lsls	r2, r3
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	430a      	orrs	r2, r1
 800a084:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	2b06      	cmp	r3, #6
 800a08c:	d824      	bhi.n	800a0d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	685a      	ldr	r2, [r3, #4]
 800a098:	4613      	mov	r3, r2
 800a09a:	009b      	lsls	r3, r3, #2
 800a09c:	4413      	add	r3, r2
 800a09e:	3b05      	subs	r3, #5
 800a0a0:	221f      	movs	r2, #31
 800a0a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a0a6:	43da      	mvns	r2, r3
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	400a      	ands	r2, r1
 800a0ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	4618      	mov	r0, r3
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	685a      	ldr	r2, [r3, #4]
 800a0c2:	4613      	mov	r3, r2
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	4413      	add	r3, r2
 800a0c8:	3b05      	subs	r3, #5
 800a0ca:	fa00 f203 	lsl.w	r2, r0, r3
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	430a      	orrs	r2, r1
 800a0d4:	635a      	str	r2, [r3, #52]	; 0x34
 800a0d6:	e04c      	b.n	800a172 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	2b0c      	cmp	r3, #12
 800a0de:	d824      	bhi.n	800a12a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	685a      	ldr	r2, [r3, #4]
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	4413      	add	r3, r2
 800a0f0:	3b23      	subs	r3, #35	; 0x23
 800a0f2:	221f      	movs	r2, #31
 800a0f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a0f8:	43da      	mvns	r2, r3
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	400a      	ands	r2, r1
 800a100:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	4618      	mov	r0, r3
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	685a      	ldr	r2, [r3, #4]
 800a114:	4613      	mov	r3, r2
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	4413      	add	r3, r2
 800a11a:	3b23      	subs	r3, #35	; 0x23
 800a11c:	fa00 f203 	lsl.w	r2, r0, r3
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	430a      	orrs	r2, r1
 800a126:	631a      	str	r2, [r3, #48]	; 0x30
 800a128:	e023      	b.n	800a172 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	685a      	ldr	r2, [r3, #4]
 800a134:	4613      	mov	r3, r2
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	4413      	add	r3, r2
 800a13a:	3b41      	subs	r3, #65	; 0x41
 800a13c:	221f      	movs	r2, #31
 800a13e:	fa02 f303 	lsl.w	r3, r2, r3
 800a142:	43da      	mvns	r2, r3
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	400a      	ands	r2, r1
 800a14a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	b29b      	uxth	r3, r3
 800a158:	4618      	mov	r0, r3
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	685a      	ldr	r2, [r3, #4]
 800a15e:	4613      	mov	r3, r2
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	4413      	add	r3, r2
 800a164:	3b41      	subs	r3, #65	; 0x41
 800a166:	fa00 f203 	lsl.w	r2, r0, r3
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	430a      	orrs	r2, r1
 800a170:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a172:	4b29      	ldr	r3, [pc, #164]	; (800a218 <HAL_ADC_ConfigChannel+0x250>)
 800a174:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a28      	ldr	r2, [pc, #160]	; (800a21c <HAL_ADC_ConfigChannel+0x254>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d10f      	bne.n	800a1a0 <HAL_ADC_ConfigChannel+0x1d8>
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2b12      	cmp	r3, #18
 800a186:	d10b      	bne.n	800a1a0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a1d      	ldr	r2, [pc, #116]	; (800a21c <HAL_ADC_ConfigChannel+0x254>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d12b      	bne.n	800a202 <HAL_ADC_ConfigChannel+0x23a>
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a1c      	ldr	r2, [pc, #112]	; (800a220 <HAL_ADC_ConfigChannel+0x258>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d003      	beq.n	800a1bc <HAL_ADC_ConfigChannel+0x1f4>
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	2b11      	cmp	r3, #17
 800a1ba:	d122      	bne.n	800a202 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a11      	ldr	r2, [pc, #68]	; (800a220 <HAL_ADC_ConfigChannel+0x258>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d111      	bne.n	800a202 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a1de:	4b11      	ldr	r3, [pc, #68]	; (800a224 <HAL_ADC_ConfigChannel+0x25c>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a11      	ldr	r2, [pc, #68]	; (800a228 <HAL_ADC_ConfigChannel+0x260>)
 800a1e4:	fba2 2303 	umull	r2, r3, r2, r3
 800a1e8:	0c9a      	lsrs	r2, r3, #18
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	4413      	add	r3, r2
 800a1f0:	005b      	lsls	r3, r3, #1
 800a1f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a1f4:	e002      	b.n	800a1fc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	3b01      	subs	r3, #1
 800a1fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d1f9      	bne.n	800a1f6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2200      	movs	r2, #0
 800a206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3714      	adds	r7, #20
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr
 800a218:	40012300 	.word	0x40012300
 800a21c:	40012000 	.word	0x40012000
 800a220:	10000012 	.word	0x10000012
 800a224:	20000060 	.word	0x20000060
 800a228:	431bde83 	.word	0x431bde83

0800a22c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b085      	sub	sp, #20
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a234:	4b79      	ldr	r3, [pc, #484]	; (800a41c <ADC_Init+0x1f0>)
 800a236:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	685a      	ldr	r2, [r3, #4]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	431a      	orrs	r2, r3
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	685a      	ldr	r2, [r3, #4]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a260:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	6859      	ldr	r1, [r3, #4]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	691b      	ldr	r3, [r3, #16]
 800a26c:	021a      	lsls	r2, r3, #8
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	430a      	orrs	r2, r1
 800a274:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	685a      	ldr	r2, [r3, #4]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a284:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	6859      	ldr	r1, [r3, #4]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	689a      	ldr	r2, [r3, #8]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	430a      	orrs	r2, r1
 800a296:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	689a      	ldr	r2, [r3, #8]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a2a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	6899      	ldr	r1, [r3, #8]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	68da      	ldr	r2, [r3, #12]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	430a      	orrs	r2, r1
 800a2b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2be:	4a58      	ldr	r2, [pc, #352]	; (800a420 <ADC_Init+0x1f4>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d022      	beq.n	800a30a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	689a      	ldr	r2, [r3, #8]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a2d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	6899      	ldr	r1, [r3, #8]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	430a      	orrs	r2, r1
 800a2e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	689a      	ldr	r2, [r3, #8]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a2f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	6899      	ldr	r1, [r3, #8]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	430a      	orrs	r2, r1
 800a306:	609a      	str	r2, [r3, #8]
 800a308:	e00f      	b.n	800a32a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	689a      	ldr	r2, [r3, #8]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a318:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	689a      	ldr	r2, [r3, #8]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a328:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	689a      	ldr	r2, [r3, #8]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f022 0202 	bic.w	r2, r2, #2
 800a338:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	6899      	ldr	r1, [r3, #8]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	7e1b      	ldrb	r3, [r3, #24]
 800a344:	005a      	lsls	r2, r3, #1
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	430a      	orrs	r2, r1
 800a34c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d01b      	beq.n	800a390 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	685a      	ldr	r2, [r3, #4]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a366:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	685a      	ldr	r2, [r3, #4]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a376:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	6859      	ldr	r1, [r3, #4]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a382:	3b01      	subs	r3, #1
 800a384:	035a      	lsls	r2, r3, #13
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	430a      	orrs	r2, r1
 800a38c:	605a      	str	r2, [r3, #4]
 800a38e:	e007      	b.n	800a3a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	685a      	ldr	r2, [r3, #4]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a39e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a3ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	69db      	ldr	r3, [r3, #28]
 800a3ba:	3b01      	subs	r3, #1
 800a3bc:	051a      	lsls	r2, r3, #20
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	430a      	orrs	r2, r1
 800a3c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	689a      	ldr	r2, [r3, #8]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a3d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	6899      	ldr	r1, [r3, #8]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a3e2:	025a      	lsls	r2, r3, #9
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	430a      	orrs	r2, r1
 800a3ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	689a      	ldr	r2, [r3, #8]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	6899      	ldr	r1, [r3, #8]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	695b      	ldr	r3, [r3, #20]
 800a406:	029a      	lsls	r2, r3, #10
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	430a      	orrs	r2, r1
 800a40e:	609a      	str	r2, [r3, #8]
}
 800a410:	bf00      	nop
 800a412:	3714      	adds	r7, #20
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr
 800a41c:	40012300 	.word	0x40012300
 800a420:	0f000001 	.word	0x0f000001

0800a424 <__NVIC_SetPriorityGrouping>:
{
 800a424:	b480      	push	{r7}
 800a426:	b085      	sub	sp, #20
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f003 0307 	and.w	r3, r3, #7
 800a432:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a434:	4b0c      	ldr	r3, [pc, #48]	; (800a468 <__NVIC_SetPriorityGrouping+0x44>)
 800a436:	68db      	ldr	r3, [r3, #12]
 800a438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a43a:	68ba      	ldr	r2, [r7, #8]
 800a43c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a440:	4013      	ands	r3, r2
 800a442:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a44c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a456:	4a04      	ldr	r2, [pc, #16]	; (800a468 <__NVIC_SetPriorityGrouping+0x44>)
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	60d3      	str	r3, [r2, #12]
}
 800a45c:	bf00      	nop
 800a45e:	3714      	adds	r7, #20
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr
 800a468:	e000ed00 	.word	0xe000ed00

0800a46c <__NVIC_GetPriorityGrouping>:
{
 800a46c:	b480      	push	{r7}
 800a46e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a470:	4b04      	ldr	r3, [pc, #16]	; (800a484 <__NVIC_GetPriorityGrouping+0x18>)
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	0a1b      	lsrs	r3, r3, #8
 800a476:	f003 0307 	and.w	r3, r3, #7
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr
 800a484:	e000ed00 	.word	0xe000ed00

0800a488 <__NVIC_EnableIRQ>:
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	4603      	mov	r3, r0
 800a490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a496:	2b00      	cmp	r3, #0
 800a498:	db0b      	blt.n	800a4b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a49a:	79fb      	ldrb	r3, [r7, #7]
 800a49c:	f003 021f 	and.w	r2, r3, #31
 800a4a0:	4907      	ldr	r1, [pc, #28]	; (800a4c0 <__NVIC_EnableIRQ+0x38>)
 800a4a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4a6:	095b      	lsrs	r3, r3, #5
 800a4a8:	2001      	movs	r0, #1
 800a4aa:	fa00 f202 	lsl.w	r2, r0, r2
 800a4ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a4b2:	bf00      	nop
 800a4b4:	370c      	adds	r7, #12
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr
 800a4be:	bf00      	nop
 800a4c0:	e000e100 	.word	0xe000e100

0800a4c4 <__NVIC_DisableIRQ>:
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a4ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	db12      	blt.n	800a4fc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a4d6:	79fb      	ldrb	r3, [r7, #7]
 800a4d8:	f003 021f 	and.w	r2, r3, #31
 800a4dc:	490a      	ldr	r1, [pc, #40]	; (800a508 <__NVIC_DisableIRQ+0x44>)
 800a4de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4e2:	095b      	lsrs	r3, r3, #5
 800a4e4:	2001      	movs	r0, #1
 800a4e6:	fa00 f202 	lsl.w	r2, r0, r2
 800a4ea:	3320      	adds	r3, #32
 800a4ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800a4f0:	f3bf 8f4f 	dsb	sy
}
 800a4f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a4f6:	f3bf 8f6f 	isb	sy
}
 800a4fa:	bf00      	nop
}
 800a4fc:	bf00      	nop
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr
 800a508:	e000e100 	.word	0xe000e100

0800a50c <__NVIC_SetPriority>:
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
 800a512:	4603      	mov	r3, r0
 800a514:	6039      	str	r1, [r7, #0]
 800a516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	db0a      	blt.n	800a536 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	b2da      	uxtb	r2, r3
 800a524:	490c      	ldr	r1, [pc, #48]	; (800a558 <__NVIC_SetPriority+0x4c>)
 800a526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a52a:	0112      	lsls	r2, r2, #4
 800a52c:	b2d2      	uxtb	r2, r2
 800a52e:	440b      	add	r3, r1
 800a530:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a534:	e00a      	b.n	800a54c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	b2da      	uxtb	r2, r3
 800a53a:	4908      	ldr	r1, [pc, #32]	; (800a55c <__NVIC_SetPriority+0x50>)
 800a53c:	79fb      	ldrb	r3, [r7, #7]
 800a53e:	f003 030f 	and.w	r3, r3, #15
 800a542:	3b04      	subs	r3, #4
 800a544:	0112      	lsls	r2, r2, #4
 800a546:	b2d2      	uxtb	r2, r2
 800a548:	440b      	add	r3, r1
 800a54a:	761a      	strb	r2, [r3, #24]
}
 800a54c:	bf00      	nop
 800a54e:	370c      	adds	r7, #12
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr
 800a558:	e000e100 	.word	0xe000e100
 800a55c:	e000ed00 	.word	0xe000ed00

0800a560 <NVIC_EncodePriority>:
{
 800a560:	b480      	push	{r7}
 800a562:	b089      	sub	sp, #36	; 0x24
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f003 0307 	and.w	r3, r3, #7
 800a572:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a574:	69fb      	ldr	r3, [r7, #28]
 800a576:	f1c3 0307 	rsb	r3, r3, #7
 800a57a:	2b04      	cmp	r3, #4
 800a57c:	bf28      	it	cs
 800a57e:	2304      	movcs	r3, #4
 800a580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a582:	69fb      	ldr	r3, [r7, #28]
 800a584:	3304      	adds	r3, #4
 800a586:	2b06      	cmp	r3, #6
 800a588:	d902      	bls.n	800a590 <NVIC_EncodePriority+0x30>
 800a58a:	69fb      	ldr	r3, [r7, #28]
 800a58c:	3b03      	subs	r3, #3
 800a58e:	e000      	b.n	800a592 <NVIC_EncodePriority+0x32>
 800a590:	2300      	movs	r3, #0
 800a592:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a594:	f04f 32ff 	mov.w	r2, #4294967295
 800a598:	69bb      	ldr	r3, [r7, #24]
 800a59a:	fa02 f303 	lsl.w	r3, r2, r3
 800a59e:	43da      	mvns	r2, r3
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	401a      	ands	r2, r3
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a5a8:	f04f 31ff 	mov.w	r1, #4294967295
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	fa01 f303 	lsl.w	r3, r1, r3
 800a5b2:	43d9      	mvns	r1, r3
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a5b8:	4313      	orrs	r3, r2
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3724      	adds	r7, #36	; 0x24
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr

0800a5c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b082      	sub	sp, #8
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f7ff ff28 	bl	800a424 <__NVIC_SetPriorityGrouping>
}
 800a5d4:	bf00      	nop
 800a5d6:	3708      	adds	r7, #8
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b086      	sub	sp, #24
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	60b9      	str	r1, [r7, #8]
 800a5e6:	607a      	str	r2, [r7, #4]
 800a5e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a5ee:	f7ff ff3d 	bl	800a46c <__NVIC_GetPriorityGrouping>
 800a5f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	68b9      	ldr	r1, [r7, #8]
 800a5f8:	6978      	ldr	r0, [r7, #20]
 800a5fa:	f7ff ffb1 	bl	800a560 <NVIC_EncodePriority>
 800a5fe:	4602      	mov	r2, r0
 800a600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a604:	4611      	mov	r1, r2
 800a606:	4618      	mov	r0, r3
 800a608:	f7ff ff80 	bl	800a50c <__NVIC_SetPriority>
}
 800a60c:	bf00      	nop
 800a60e:	3718      	adds	r7, #24
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
 800a61a:	4603      	mov	r3, r0
 800a61c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a61e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a622:	4618      	mov	r0, r3
 800a624:	f7ff ff30 	bl	800a488 <__NVIC_EnableIRQ>
}
 800a628:	bf00      	nop
 800a62a:	3708      	adds	r7, #8
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	4603      	mov	r3, r0
 800a638:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800a63a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a63e:	4618      	mov	r0, r3
 800a640:	f7ff ff40 	bl	800a4c4 <__NVIC_DisableIRQ>
}
 800a644:	bf00      	nop
 800a646:	3708      	adds	r7, #8
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b089      	sub	sp, #36	; 0x24
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a656:	2300      	movs	r3, #0
 800a658:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a65a:	2300      	movs	r3, #0
 800a65c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a65e:	2300      	movs	r3, #0
 800a660:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a662:	2300      	movs	r3, #0
 800a664:	61fb      	str	r3, [r7, #28]
 800a666:	e177      	b.n	800a958 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a668:	2201      	movs	r2, #1
 800a66a:	69fb      	ldr	r3, [r7, #28]
 800a66c:	fa02 f303 	lsl.w	r3, r2, r3
 800a670:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	697a      	ldr	r2, [r7, #20]
 800a678:	4013      	ands	r3, r2
 800a67a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a67c:	693a      	ldr	r2, [r7, #16]
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	429a      	cmp	r2, r3
 800a682:	f040 8166 	bne.w	800a952 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	f003 0303 	and.w	r3, r3, #3
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d005      	beq.n	800a69e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a69a:	2b02      	cmp	r3, #2
 800a69c:	d130      	bne.n	800a700 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	689b      	ldr	r3, [r3, #8]
 800a6a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	005b      	lsls	r3, r3, #1
 800a6a8:	2203      	movs	r2, #3
 800a6aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a6ae:	43db      	mvns	r3, r3
 800a6b0:	69ba      	ldr	r2, [r7, #24]
 800a6b2:	4013      	ands	r3, r2
 800a6b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	68da      	ldr	r2, [r3, #12]
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	005b      	lsls	r3, r3, #1
 800a6be:	fa02 f303 	lsl.w	r3, r2, r3
 800a6c2:	69ba      	ldr	r2, [r7, #24]
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	69ba      	ldr	r2, [r7, #24]
 800a6cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	69fb      	ldr	r3, [r7, #28]
 800a6d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a6dc:	43db      	mvns	r3, r3
 800a6de:	69ba      	ldr	r2, [r7, #24]
 800a6e0:	4013      	ands	r3, r2
 800a6e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	091b      	lsrs	r3, r3, #4
 800a6ea:	f003 0201 	and.w	r2, r3, #1
 800a6ee:	69fb      	ldr	r3, [r7, #28]
 800a6f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a6f4:	69ba      	ldr	r2, [r7, #24]
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	69ba      	ldr	r2, [r7, #24]
 800a6fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	f003 0303 	and.w	r3, r3, #3
 800a708:	2b03      	cmp	r3, #3
 800a70a:	d017      	beq.n	800a73c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	68db      	ldr	r3, [r3, #12]
 800a710:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a712:	69fb      	ldr	r3, [r7, #28]
 800a714:	005b      	lsls	r3, r3, #1
 800a716:	2203      	movs	r2, #3
 800a718:	fa02 f303 	lsl.w	r3, r2, r3
 800a71c:	43db      	mvns	r3, r3
 800a71e:	69ba      	ldr	r2, [r7, #24]
 800a720:	4013      	ands	r3, r2
 800a722:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	689a      	ldr	r2, [r3, #8]
 800a728:	69fb      	ldr	r3, [r7, #28]
 800a72a:	005b      	lsls	r3, r3, #1
 800a72c:	fa02 f303 	lsl.w	r3, r2, r3
 800a730:	69ba      	ldr	r2, [r7, #24]
 800a732:	4313      	orrs	r3, r2
 800a734:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	69ba      	ldr	r2, [r7, #24]
 800a73a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	f003 0303 	and.w	r3, r3, #3
 800a744:	2b02      	cmp	r3, #2
 800a746:	d123      	bne.n	800a790 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	08da      	lsrs	r2, r3, #3
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	3208      	adds	r2, #8
 800a750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a754:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a756:	69fb      	ldr	r3, [r7, #28]
 800a758:	f003 0307 	and.w	r3, r3, #7
 800a75c:	009b      	lsls	r3, r3, #2
 800a75e:	220f      	movs	r2, #15
 800a760:	fa02 f303 	lsl.w	r3, r2, r3
 800a764:	43db      	mvns	r3, r3
 800a766:	69ba      	ldr	r2, [r7, #24]
 800a768:	4013      	ands	r3, r2
 800a76a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	691a      	ldr	r2, [r3, #16]
 800a770:	69fb      	ldr	r3, [r7, #28]
 800a772:	f003 0307 	and.w	r3, r3, #7
 800a776:	009b      	lsls	r3, r3, #2
 800a778:	fa02 f303 	lsl.w	r3, r2, r3
 800a77c:	69ba      	ldr	r2, [r7, #24]
 800a77e:	4313      	orrs	r3, r2
 800a780:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a782:	69fb      	ldr	r3, [r7, #28]
 800a784:	08da      	lsrs	r2, r3, #3
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	3208      	adds	r2, #8
 800a78a:	69b9      	ldr	r1, [r7, #24]
 800a78c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a796:	69fb      	ldr	r3, [r7, #28]
 800a798:	005b      	lsls	r3, r3, #1
 800a79a:	2203      	movs	r2, #3
 800a79c:	fa02 f303 	lsl.w	r3, r2, r3
 800a7a0:	43db      	mvns	r3, r3
 800a7a2:	69ba      	ldr	r2, [r7, #24]
 800a7a4:	4013      	ands	r3, r2
 800a7a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	f003 0203 	and.w	r2, r3, #3
 800a7b0:	69fb      	ldr	r3, [r7, #28]
 800a7b2:	005b      	lsls	r3, r3, #1
 800a7b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a7b8:	69ba      	ldr	r2, [r7, #24]
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	69ba      	ldr	r2, [r7, #24]
 800a7c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	f000 80c0 	beq.w	800a952 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	60fb      	str	r3, [r7, #12]
 800a7d6:	4b66      	ldr	r3, [pc, #408]	; (800a970 <HAL_GPIO_Init+0x324>)
 800a7d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7da:	4a65      	ldr	r2, [pc, #404]	; (800a970 <HAL_GPIO_Init+0x324>)
 800a7dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a7e0:	6453      	str	r3, [r2, #68]	; 0x44
 800a7e2:	4b63      	ldr	r3, [pc, #396]	; (800a970 <HAL_GPIO_Init+0x324>)
 800a7e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7ea:	60fb      	str	r3, [r7, #12]
 800a7ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a7ee:	4a61      	ldr	r2, [pc, #388]	; (800a974 <HAL_GPIO_Init+0x328>)
 800a7f0:	69fb      	ldr	r3, [r7, #28]
 800a7f2:	089b      	lsrs	r3, r3, #2
 800a7f4:	3302      	adds	r3, #2
 800a7f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	f003 0303 	and.w	r3, r3, #3
 800a802:	009b      	lsls	r3, r3, #2
 800a804:	220f      	movs	r2, #15
 800a806:	fa02 f303 	lsl.w	r3, r2, r3
 800a80a:	43db      	mvns	r3, r3
 800a80c:	69ba      	ldr	r2, [r7, #24]
 800a80e:	4013      	ands	r3, r2
 800a810:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4a58      	ldr	r2, [pc, #352]	; (800a978 <HAL_GPIO_Init+0x32c>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d037      	beq.n	800a88a <HAL_GPIO_Init+0x23e>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4a57      	ldr	r2, [pc, #348]	; (800a97c <HAL_GPIO_Init+0x330>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d031      	beq.n	800a886 <HAL_GPIO_Init+0x23a>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4a56      	ldr	r2, [pc, #344]	; (800a980 <HAL_GPIO_Init+0x334>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d02b      	beq.n	800a882 <HAL_GPIO_Init+0x236>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4a55      	ldr	r2, [pc, #340]	; (800a984 <HAL_GPIO_Init+0x338>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d025      	beq.n	800a87e <HAL_GPIO_Init+0x232>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	4a54      	ldr	r2, [pc, #336]	; (800a988 <HAL_GPIO_Init+0x33c>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d01f      	beq.n	800a87a <HAL_GPIO_Init+0x22e>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	4a53      	ldr	r2, [pc, #332]	; (800a98c <HAL_GPIO_Init+0x340>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d019      	beq.n	800a876 <HAL_GPIO_Init+0x22a>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4a52      	ldr	r2, [pc, #328]	; (800a990 <HAL_GPIO_Init+0x344>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d013      	beq.n	800a872 <HAL_GPIO_Init+0x226>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	4a51      	ldr	r2, [pc, #324]	; (800a994 <HAL_GPIO_Init+0x348>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d00d      	beq.n	800a86e <HAL_GPIO_Init+0x222>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	4a50      	ldr	r2, [pc, #320]	; (800a998 <HAL_GPIO_Init+0x34c>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d007      	beq.n	800a86a <HAL_GPIO_Init+0x21e>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	4a4f      	ldr	r2, [pc, #316]	; (800a99c <HAL_GPIO_Init+0x350>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d101      	bne.n	800a866 <HAL_GPIO_Init+0x21a>
 800a862:	2309      	movs	r3, #9
 800a864:	e012      	b.n	800a88c <HAL_GPIO_Init+0x240>
 800a866:	230a      	movs	r3, #10
 800a868:	e010      	b.n	800a88c <HAL_GPIO_Init+0x240>
 800a86a:	2308      	movs	r3, #8
 800a86c:	e00e      	b.n	800a88c <HAL_GPIO_Init+0x240>
 800a86e:	2307      	movs	r3, #7
 800a870:	e00c      	b.n	800a88c <HAL_GPIO_Init+0x240>
 800a872:	2306      	movs	r3, #6
 800a874:	e00a      	b.n	800a88c <HAL_GPIO_Init+0x240>
 800a876:	2305      	movs	r3, #5
 800a878:	e008      	b.n	800a88c <HAL_GPIO_Init+0x240>
 800a87a:	2304      	movs	r3, #4
 800a87c:	e006      	b.n	800a88c <HAL_GPIO_Init+0x240>
 800a87e:	2303      	movs	r3, #3
 800a880:	e004      	b.n	800a88c <HAL_GPIO_Init+0x240>
 800a882:	2302      	movs	r3, #2
 800a884:	e002      	b.n	800a88c <HAL_GPIO_Init+0x240>
 800a886:	2301      	movs	r3, #1
 800a888:	e000      	b.n	800a88c <HAL_GPIO_Init+0x240>
 800a88a:	2300      	movs	r3, #0
 800a88c:	69fa      	ldr	r2, [r7, #28]
 800a88e:	f002 0203 	and.w	r2, r2, #3
 800a892:	0092      	lsls	r2, r2, #2
 800a894:	4093      	lsls	r3, r2
 800a896:	69ba      	ldr	r2, [r7, #24]
 800a898:	4313      	orrs	r3, r2
 800a89a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a89c:	4935      	ldr	r1, [pc, #212]	; (800a974 <HAL_GPIO_Init+0x328>)
 800a89e:	69fb      	ldr	r3, [r7, #28]
 800a8a0:	089b      	lsrs	r3, r3, #2
 800a8a2:	3302      	adds	r3, #2
 800a8a4:	69ba      	ldr	r2, [r7, #24]
 800a8a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a8aa:	4b3d      	ldr	r3, [pc, #244]	; (800a9a0 <HAL_GPIO_Init+0x354>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	43db      	mvns	r3, r3
 800a8b4:	69ba      	ldr	r2, [r7, #24]
 800a8b6:	4013      	ands	r3, r2
 800a8b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d003      	beq.n	800a8ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800a8c6:	69ba      	ldr	r2, [r7, #24]
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a8ce:	4a34      	ldr	r2, [pc, #208]	; (800a9a0 <HAL_GPIO_Init+0x354>)
 800a8d0:	69bb      	ldr	r3, [r7, #24]
 800a8d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a8d4:	4b32      	ldr	r3, [pc, #200]	; (800a9a0 <HAL_GPIO_Init+0x354>)
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	43db      	mvns	r3, r3
 800a8de:	69ba      	ldr	r2, [r7, #24]
 800a8e0:	4013      	ands	r3, r2
 800a8e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d003      	beq.n	800a8f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800a8f0:	69ba      	ldr	r2, [r7, #24]
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a8f8:	4a29      	ldr	r2, [pc, #164]	; (800a9a0 <HAL_GPIO_Init+0x354>)
 800a8fa:	69bb      	ldr	r3, [r7, #24]
 800a8fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a8fe:	4b28      	ldr	r3, [pc, #160]	; (800a9a0 <HAL_GPIO_Init+0x354>)
 800a900:	689b      	ldr	r3, [r3, #8]
 800a902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	43db      	mvns	r3, r3
 800a908:	69ba      	ldr	r2, [r7, #24]
 800a90a:	4013      	ands	r3, r2
 800a90c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a916:	2b00      	cmp	r3, #0
 800a918:	d003      	beq.n	800a922 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800a91a:	69ba      	ldr	r2, [r7, #24]
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	4313      	orrs	r3, r2
 800a920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a922:	4a1f      	ldr	r2, [pc, #124]	; (800a9a0 <HAL_GPIO_Init+0x354>)
 800a924:	69bb      	ldr	r3, [r7, #24]
 800a926:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a928:	4b1d      	ldr	r3, [pc, #116]	; (800a9a0 <HAL_GPIO_Init+0x354>)
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	43db      	mvns	r3, r3
 800a932:	69ba      	ldr	r2, [r7, #24]
 800a934:	4013      	ands	r3, r2
 800a936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a940:	2b00      	cmp	r3, #0
 800a942:	d003      	beq.n	800a94c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800a944:	69ba      	ldr	r2, [r7, #24]
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	4313      	orrs	r3, r2
 800a94a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a94c:	4a14      	ldr	r2, [pc, #80]	; (800a9a0 <HAL_GPIO_Init+0x354>)
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a952:	69fb      	ldr	r3, [r7, #28]
 800a954:	3301      	adds	r3, #1
 800a956:	61fb      	str	r3, [r7, #28]
 800a958:	69fb      	ldr	r3, [r7, #28]
 800a95a:	2b0f      	cmp	r3, #15
 800a95c:	f67f ae84 	bls.w	800a668 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a960:	bf00      	nop
 800a962:	bf00      	nop
 800a964:	3724      	adds	r7, #36	; 0x24
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop
 800a970:	40023800 	.word	0x40023800
 800a974:	40013800 	.word	0x40013800
 800a978:	40020000 	.word	0x40020000
 800a97c:	40020400 	.word	0x40020400
 800a980:	40020800 	.word	0x40020800
 800a984:	40020c00 	.word	0x40020c00
 800a988:	40021000 	.word	0x40021000
 800a98c:	40021400 	.word	0x40021400
 800a990:	40021800 	.word	0x40021800
 800a994:	40021c00 	.word	0x40021c00
 800a998:	40022000 	.word	0x40022000
 800a99c:	40022400 	.word	0x40022400
 800a9a0:	40013c00 	.word	0x40013c00

0800a9a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b085      	sub	sp, #20
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	691a      	ldr	r2, [r3, #16]
 800a9b4:	887b      	ldrh	r3, [r7, #2]
 800a9b6:	4013      	ands	r3, r2
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d002      	beq.n	800a9c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	73fb      	strb	r3, [r7, #15]
 800a9c0:	e001      	b.n	800a9c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a9c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3714      	adds	r7, #20
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr

0800a9d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	460b      	mov	r3, r1
 800a9de:	807b      	strh	r3, [r7, #2]
 800a9e0:	4613      	mov	r3, r2
 800a9e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a9e4:	787b      	ldrb	r3, [r7, #1]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d003      	beq.n	800a9f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a9ea:	887a      	ldrh	r2, [r7, #2]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a9f0:	e003      	b.n	800a9fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a9f2:	887b      	ldrh	r3, [r7, #2]
 800a9f4:	041a      	lsls	r2, r3, #16
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	619a      	str	r2, [r3, #24]
}
 800a9fa:	bf00      	nop
 800a9fc:	370c      	adds	r7, #12
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr
	...

0800aa08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b082      	sub	sp, #8
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	4603      	mov	r3, r0
 800aa10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800aa12:	4b08      	ldr	r3, [pc, #32]	; (800aa34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800aa14:	695a      	ldr	r2, [r3, #20]
 800aa16:	88fb      	ldrh	r3, [r7, #6]
 800aa18:	4013      	ands	r3, r2
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d006      	beq.n	800aa2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800aa1e:	4a05      	ldr	r2, [pc, #20]	; (800aa34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800aa20:	88fb      	ldrh	r3, [r7, #6]
 800aa22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800aa24:	88fb      	ldrh	r3, [r7, #6]
 800aa26:	4618      	mov	r0, r3
 800aa28:	f7f8 f8b0 	bl	8002b8c <HAL_GPIO_EXTI_Callback>
  }
}
 800aa2c:	bf00      	nop
 800aa2e:	3708      	adds	r7, #8
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}
 800aa34:	40013c00 	.word	0x40013c00

0800aa38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b084      	sub	sp, #16
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d101      	bne.n	800aa4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800aa46:	2301      	movs	r3, #1
 800aa48:	e12b      	b.n	800aca2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d106      	bne.n	800aa64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f7f7 fa84 	bl	8001f6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2224      	movs	r2, #36	; 0x24
 800aa68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	681a      	ldr	r2, [r3, #0]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f022 0201 	bic.w	r2, r2, #1
 800aa7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aa8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aa9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800aa9c:	f001 fd14 	bl	800c4c8 <HAL_RCC_GetPCLK1Freq>
 800aaa0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	4a81      	ldr	r2, [pc, #516]	; (800acac <HAL_I2C_Init+0x274>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d807      	bhi.n	800aabc <HAL_I2C_Init+0x84>
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	4a80      	ldr	r2, [pc, #512]	; (800acb0 <HAL_I2C_Init+0x278>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	bf94      	ite	ls
 800aab4:	2301      	movls	r3, #1
 800aab6:	2300      	movhi	r3, #0
 800aab8:	b2db      	uxtb	r3, r3
 800aaba:	e006      	b.n	800aaca <HAL_I2C_Init+0x92>
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	4a7d      	ldr	r2, [pc, #500]	; (800acb4 <HAL_I2C_Init+0x27c>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	bf94      	ite	ls
 800aac4:	2301      	movls	r3, #1
 800aac6:	2300      	movhi	r3, #0
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d001      	beq.n	800aad2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800aace:	2301      	movs	r3, #1
 800aad0:	e0e7      	b.n	800aca2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	4a78      	ldr	r2, [pc, #480]	; (800acb8 <HAL_I2C_Init+0x280>)
 800aad6:	fba2 2303 	umull	r2, r3, r2, r3
 800aada:	0c9b      	lsrs	r3, r3, #18
 800aadc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	68ba      	ldr	r2, [r7, #8]
 800aaee:	430a      	orrs	r2, r1
 800aaf0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	6a1b      	ldr	r3, [r3, #32]
 800aaf8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	4a6a      	ldr	r2, [pc, #424]	; (800acac <HAL_I2C_Init+0x274>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d802      	bhi.n	800ab0c <HAL_I2C_Init+0xd4>
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	3301      	adds	r3, #1
 800ab0a:	e009      	b.n	800ab20 <HAL_I2C_Init+0xe8>
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ab12:	fb02 f303 	mul.w	r3, r2, r3
 800ab16:	4a69      	ldr	r2, [pc, #420]	; (800acbc <HAL_I2C_Init+0x284>)
 800ab18:	fba2 2303 	umull	r2, r3, r2, r3
 800ab1c:	099b      	lsrs	r3, r3, #6
 800ab1e:	3301      	adds	r3, #1
 800ab20:	687a      	ldr	r2, [r7, #4]
 800ab22:	6812      	ldr	r2, [r2, #0]
 800ab24:	430b      	orrs	r3, r1
 800ab26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	69db      	ldr	r3, [r3, #28]
 800ab2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800ab32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	495c      	ldr	r1, [pc, #368]	; (800acac <HAL_I2C_Init+0x274>)
 800ab3c:	428b      	cmp	r3, r1
 800ab3e:	d819      	bhi.n	800ab74 <HAL_I2C_Init+0x13c>
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	1e59      	subs	r1, r3, #1
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	005b      	lsls	r3, r3, #1
 800ab4a:	fbb1 f3f3 	udiv	r3, r1, r3
 800ab4e:	1c59      	adds	r1, r3, #1
 800ab50:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ab54:	400b      	ands	r3, r1
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d00a      	beq.n	800ab70 <HAL_I2C_Init+0x138>
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	1e59      	subs	r1, r3, #1
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	005b      	lsls	r3, r3, #1
 800ab64:	fbb1 f3f3 	udiv	r3, r1, r3
 800ab68:	3301      	adds	r3, #1
 800ab6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab6e:	e051      	b.n	800ac14 <HAL_I2C_Init+0x1dc>
 800ab70:	2304      	movs	r3, #4
 800ab72:	e04f      	b.n	800ac14 <HAL_I2C_Init+0x1dc>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	689b      	ldr	r3, [r3, #8]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d111      	bne.n	800aba0 <HAL_I2C_Init+0x168>
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	1e58      	subs	r0, r3, #1
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6859      	ldr	r1, [r3, #4]
 800ab84:	460b      	mov	r3, r1
 800ab86:	005b      	lsls	r3, r3, #1
 800ab88:	440b      	add	r3, r1
 800ab8a:	fbb0 f3f3 	udiv	r3, r0, r3
 800ab8e:	3301      	adds	r3, #1
 800ab90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	bf0c      	ite	eq
 800ab98:	2301      	moveq	r3, #1
 800ab9a:	2300      	movne	r3, #0
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	e012      	b.n	800abc6 <HAL_I2C_Init+0x18e>
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	1e58      	subs	r0, r3, #1
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6859      	ldr	r1, [r3, #4]
 800aba8:	460b      	mov	r3, r1
 800abaa:	009b      	lsls	r3, r3, #2
 800abac:	440b      	add	r3, r1
 800abae:	0099      	lsls	r1, r3, #2
 800abb0:	440b      	add	r3, r1
 800abb2:	fbb0 f3f3 	udiv	r3, r0, r3
 800abb6:	3301      	adds	r3, #1
 800abb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	bf0c      	ite	eq
 800abc0:	2301      	moveq	r3, #1
 800abc2:	2300      	movne	r3, #0
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d001      	beq.n	800abce <HAL_I2C_Init+0x196>
 800abca:	2301      	movs	r3, #1
 800abcc:	e022      	b.n	800ac14 <HAL_I2C_Init+0x1dc>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	689b      	ldr	r3, [r3, #8]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d10e      	bne.n	800abf4 <HAL_I2C_Init+0x1bc>
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	1e58      	subs	r0, r3, #1
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6859      	ldr	r1, [r3, #4]
 800abde:	460b      	mov	r3, r1
 800abe0:	005b      	lsls	r3, r3, #1
 800abe2:	440b      	add	r3, r1
 800abe4:	fbb0 f3f3 	udiv	r3, r0, r3
 800abe8:	3301      	adds	r3, #1
 800abea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800abee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abf2:	e00f      	b.n	800ac14 <HAL_I2C_Init+0x1dc>
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	1e58      	subs	r0, r3, #1
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6859      	ldr	r1, [r3, #4]
 800abfc:	460b      	mov	r3, r1
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	440b      	add	r3, r1
 800ac02:	0099      	lsls	r1, r3, #2
 800ac04:	440b      	add	r3, r1
 800ac06:	fbb0 f3f3 	udiv	r3, r0, r3
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ac14:	6879      	ldr	r1, [r7, #4]
 800ac16:	6809      	ldr	r1, [r1, #0]
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	69da      	ldr	r2, [r3, #28]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6a1b      	ldr	r3, [r3, #32]
 800ac2e:	431a      	orrs	r2, r3
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	430a      	orrs	r2, r1
 800ac36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	689b      	ldr	r3, [r3, #8]
 800ac3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800ac42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	6911      	ldr	r1, [r2, #16]
 800ac4a:	687a      	ldr	r2, [r7, #4]
 800ac4c:	68d2      	ldr	r2, [r2, #12]
 800ac4e:	4311      	orrs	r1, r2
 800ac50:	687a      	ldr	r2, [r7, #4]
 800ac52:	6812      	ldr	r2, [r2, #0]
 800ac54:	430b      	orrs	r3, r1
 800ac56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	68db      	ldr	r3, [r3, #12]
 800ac5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	695a      	ldr	r2, [r3, #20]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	699b      	ldr	r3, [r3, #24]
 800ac6a:	431a      	orrs	r2, r3
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	430a      	orrs	r2, r1
 800ac72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	681a      	ldr	r2, [r3, #0]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f042 0201 	orr.w	r2, r2, #1
 800ac82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2220      	movs	r2, #32
 800ac8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2200      	movs	r2, #0
 800ac96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800aca0:	2300      	movs	r3, #0
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3710      	adds	r7, #16
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop
 800acac:	000186a0 	.word	0x000186a0
 800acb0:	001e847f 	.word	0x001e847f
 800acb4:	003d08ff 	.word	0x003d08ff
 800acb8:	431bde83 	.word	0x431bde83
 800acbc:	10624dd3 	.word	0x10624dd3

0800acc0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b088      	sub	sp, #32
 800acc4:	af02      	add	r7, sp, #8
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	4608      	mov	r0, r1
 800acca:	4611      	mov	r1, r2
 800accc:	461a      	mov	r2, r3
 800acce:	4603      	mov	r3, r0
 800acd0:	817b      	strh	r3, [r7, #10]
 800acd2:	460b      	mov	r3, r1
 800acd4:	813b      	strh	r3, [r7, #8]
 800acd6:	4613      	mov	r3, r2
 800acd8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800acda:	f7fe ff63 	bl	8009ba4 <HAL_GetTick>
 800acde:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ace6:	b2db      	uxtb	r3, r3
 800ace8:	2b20      	cmp	r3, #32
 800acea:	f040 80d9 	bne.w	800aea0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	9300      	str	r3, [sp, #0]
 800acf2:	2319      	movs	r3, #25
 800acf4:	2201      	movs	r2, #1
 800acf6:	496d      	ldr	r1, [pc, #436]	; (800aeac <HAL_I2C_Mem_Write+0x1ec>)
 800acf8:	68f8      	ldr	r0, [r7, #12]
 800acfa:	f000 fcb5 	bl	800b668 <I2C_WaitOnFlagUntilTimeout>
 800acfe:	4603      	mov	r3, r0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d001      	beq.n	800ad08 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800ad04:	2302      	movs	r3, #2
 800ad06:	e0cc      	b.n	800aea2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d101      	bne.n	800ad16 <HAL_I2C_Mem_Write+0x56>
 800ad12:	2302      	movs	r3, #2
 800ad14:	e0c5      	b.n	800aea2 <HAL_I2C_Mem_Write+0x1e2>
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2201      	movs	r2, #1
 800ad1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f003 0301 	and.w	r3, r3, #1
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	d007      	beq.n	800ad3c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f042 0201 	orr.w	r2, r2, #1
 800ad3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ad4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	2221      	movs	r2, #33	; 0x21
 800ad50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2240      	movs	r2, #64	; 0x40
 800ad58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	6a3a      	ldr	r2, [r7, #32]
 800ad66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ad6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad72:	b29a      	uxth	r2, r3
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	4a4d      	ldr	r2, [pc, #308]	; (800aeb0 <HAL_I2C_Mem_Write+0x1f0>)
 800ad7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ad7e:	88f8      	ldrh	r0, [r7, #6]
 800ad80:	893a      	ldrh	r2, [r7, #8]
 800ad82:	8979      	ldrh	r1, [r7, #10]
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	9301      	str	r3, [sp, #4]
 800ad88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad8a:	9300      	str	r3, [sp, #0]
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	68f8      	ldr	r0, [r7, #12]
 800ad90:	f000 faec 	bl	800b36c <I2C_RequestMemoryWrite>
 800ad94:	4603      	mov	r3, r0
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d052      	beq.n	800ae40 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	e081      	b.n	800aea2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ad9e:	697a      	ldr	r2, [r7, #20]
 800ada0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ada2:	68f8      	ldr	r0, [r7, #12]
 800ada4:	f000 fd36 	bl	800b814 <I2C_WaitOnTXEFlagUntilTimeout>
 800ada8:	4603      	mov	r3, r0
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d00d      	beq.n	800adca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adb2:	2b04      	cmp	r3, #4
 800adb4:	d107      	bne.n	800adc6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800adc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800adc6:	2301      	movs	r3, #1
 800adc8:	e06b      	b.n	800aea2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adce:	781a      	ldrb	r2, [r3, #0]
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adda:	1c5a      	adds	r2, r3, #1
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ade4:	3b01      	subs	r3, #1
 800ade6:	b29a      	uxth	r2, r3
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	3b01      	subs	r3, #1
 800adf4:	b29a      	uxth	r2, r3
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	695b      	ldr	r3, [r3, #20]
 800ae00:	f003 0304 	and.w	r3, r3, #4
 800ae04:	2b04      	cmp	r3, #4
 800ae06:	d11b      	bne.n	800ae40 <HAL_I2C_Mem_Write+0x180>
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d017      	beq.n	800ae40 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae14:	781a      	ldrb	r2, [r3, #0]
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae20:	1c5a      	adds	r2, r3, #1
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae2a:	3b01      	subs	r3, #1
 800ae2c:	b29a      	uxth	r2, r3
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	3b01      	subs	r3, #1
 800ae3a:	b29a      	uxth	r2, r3
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d1aa      	bne.n	800ad9e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ae48:	697a      	ldr	r2, [r7, #20]
 800ae4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae4c:	68f8      	ldr	r0, [r7, #12]
 800ae4e:	f000 fd22 	bl	800b896 <I2C_WaitOnBTFFlagUntilTimeout>
 800ae52:	4603      	mov	r3, r0
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d00d      	beq.n	800ae74 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae5c:	2b04      	cmp	r3, #4
 800ae5e:	d107      	bne.n	800ae70 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	681a      	ldr	r2, [r3, #0]
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae6e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ae70:	2301      	movs	r3, #1
 800ae72:	e016      	b.n	800aea2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2220      	movs	r2, #32
 800ae88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2200      	movs	r2, #0
 800ae98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	e000      	b.n	800aea2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800aea0:	2302      	movs	r3, #2
  }
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3718      	adds	r7, #24
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	00100002 	.word	0x00100002
 800aeb0:	ffff0000 	.word	0xffff0000

0800aeb4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b08c      	sub	sp, #48	; 0x30
 800aeb8:	af02      	add	r7, sp, #8
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	4608      	mov	r0, r1
 800aebe:	4611      	mov	r1, r2
 800aec0:	461a      	mov	r2, r3
 800aec2:	4603      	mov	r3, r0
 800aec4:	817b      	strh	r3, [r7, #10]
 800aec6:	460b      	mov	r3, r1
 800aec8:	813b      	strh	r3, [r7, #8]
 800aeca:	4613      	mov	r3, r2
 800aecc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800aece:	f7fe fe69 	bl	8009ba4 <HAL_GetTick>
 800aed2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aeda:	b2db      	uxtb	r3, r3
 800aedc:	2b20      	cmp	r3, #32
 800aede:	f040 8208 	bne.w	800b2f2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800aee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee4:	9300      	str	r3, [sp, #0]
 800aee6:	2319      	movs	r3, #25
 800aee8:	2201      	movs	r2, #1
 800aeea:	497b      	ldr	r1, [pc, #492]	; (800b0d8 <HAL_I2C_Mem_Read+0x224>)
 800aeec:	68f8      	ldr	r0, [r7, #12]
 800aeee:	f000 fbbb 	bl	800b668 <I2C_WaitOnFlagUntilTimeout>
 800aef2:	4603      	mov	r3, r0
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d001      	beq.n	800aefc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800aef8:	2302      	movs	r3, #2
 800aefa:	e1fb      	b.n	800b2f4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af02:	2b01      	cmp	r3, #1
 800af04:	d101      	bne.n	800af0a <HAL_I2C_Mem_Read+0x56>
 800af06:	2302      	movs	r3, #2
 800af08:	e1f4      	b.n	800b2f4 <HAL_I2C_Mem_Read+0x440>
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2201      	movs	r2, #1
 800af0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f003 0301 	and.w	r3, r3, #1
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d007      	beq.n	800af30 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	681a      	ldr	r2, [r3, #0]
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f042 0201 	orr.w	r2, r2, #1
 800af2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800af3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2222      	movs	r2, #34	; 0x22
 800af44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2240      	movs	r2, #64	; 0x40
 800af4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2200      	movs	r2, #0
 800af54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800af60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af66:	b29a      	uxth	r2, r3
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	4a5b      	ldr	r2, [pc, #364]	; (800b0dc <HAL_I2C_Mem_Read+0x228>)
 800af70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800af72:	88f8      	ldrh	r0, [r7, #6]
 800af74:	893a      	ldrh	r2, [r7, #8]
 800af76:	8979      	ldrh	r1, [r7, #10]
 800af78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7a:	9301      	str	r3, [sp, #4]
 800af7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af7e:	9300      	str	r3, [sp, #0]
 800af80:	4603      	mov	r3, r0
 800af82:	68f8      	ldr	r0, [r7, #12]
 800af84:	f000 fa88 	bl	800b498 <I2C_RequestMemoryRead>
 800af88:	4603      	mov	r3, r0
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d001      	beq.n	800af92 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800af8e:	2301      	movs	r3, #1
 800af90:	e1b0      	b.n	800b2f4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af96:	2b00      	cmp	r3, #0
 800af98:	d113      	bne.n	800afc2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800af9a:	2300      	movs	r3, #0
 800af9c:	623b      	str	r3, [r7, #32]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	695b      	ldr	r3, [r3, #20]
 800afa4:	623b      	str	r3, [r7, #32]
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	699b      	ldr	r3, [r3, #24]
 800afac:	623b      	str	r3, [r7, #32]
 800afae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	681a      	ldr	r2, [r3, #0]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800afbe:	601a      	str	r2, [r3, #0]
 800afc0:	e184      	b.n	800b2cc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afc6:	2b01      	cmp	r3, #1
 800afc8:	d11b      	bne.n	800b002 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800afd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800afda:	2300      	movs	r3, #0
 800afdc:	61fb      	str	r3, [r7, #28]
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	695b      	ldr	r3, [r3, #20]
 800afe4:	61fb      	str	r3, [r7, #28]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	699b      	ldr	r3, [r3, #24]
 800afec:	61fb      	str	r3, [r7, #28]
 800afee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	681a      	ldr	r2, [r3, #0]
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800affe:	601a      	str	r2, [r3, #0]
 800b000:	e164      	b.n	800b2cc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b006:	2b02      	cmp	r3, #2
 800b008:	d11b      	bne.n	800b042 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	681a      	ldr	r2, [r3, #0]
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b018:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	681a      	ldr	r2, [r3, #0]
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b028:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b02a:	2300      	movs	r3, #0
 800b02c:	61bb      	str	r3, [r7, #24]
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	695b      	ldr	r3, [r3, #20]
 800b034:	61bb      	str	r3, [r7, #24]
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	699b      	ldr	r3, [r3, #24]
 800b03c:	61bb      	str	r3, [r7, #24]
 800b03e:	69bb      	ldr	r3, [r7, #24]
 800b040:	e144      	b.n	800b2cc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b042:	2300      	movs	r3, #0
 800b044:	617b      	str	r3, [r7, #20]
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	695b      	ldr	r3, [r3, #20]
 800b04c:	617b      	str	r3, [r7, #20]
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	699b      	ldr	r3, [r3, #24]
 800b054:	617b      	str	r3, [r7, #20]
 800b056:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b058:	e138      	b.n	800b2cc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b05e:	2b03      	cmp	r3, #3
 800b060:	f200 80f1 	bhi.w	800b246 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b068:	2b01      	cmp	r3, #1
 800b06a:	d123      	bne.n	800b0b4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b06c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b06e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b070:	68f8      	ldr	r0, [r7, #12]
 800b072:	f000 fc51 	bl	800b918 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b076:	4603      	mov	r3, r0
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d001      	beq.n	800b080 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800b07c:	2301      	movs	r3, #1
 800b07e:	e139      	b.n	800b2f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	691a      	ldr	r2, [r3, #16]
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b08a:	b2d2      	uxtb	r2, r2
 800b08c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b092:	1c5a      	adds	r2, r3, #1
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b09c:	3b01      	subs	r3, #1
 800b09e:	b29a      	uxth	r2, r3
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	3b01      	subs	r3, #1
 800b0ac:	b29a      	uxth	r2, r3
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b0b2:	e10b      	b.n	800b2cc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0b8:	2b02      	cmp	r3, #2
 800b0ba:	d14e      	bne.n	800b15a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0be:	9300      	str	r3, [sp, #0]
 800b0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	4906      	ldr	r1, [pc, #24]	; (800b0e0 <HAL_I2C_Mem_Read+0x22c>)
 800b0c6:	68f8      	ldr	r0, [r7, #12]
 800b0c8:	f000 face 	bl	800b668 <I2C_WaitOnFlagUntilTimeout>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d008      	beq.n	800b0e4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e10e      	b.n	800b2f4 <HAL_I2C_Mem_Read+0x440>
 800b0d6:	bf00      	nop
 800b0d8:	00100002 	.word	0x00100002
 800b0dc:	ffff0000 	.word	0xffff0000
 800b0e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b0f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	691a      	ldr	r2, [r3, #16]
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0fe:	b2d2      	uxtb	r2, r2
 800b100:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b106:	1c5a      	adds	r2, r3, #1
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b110:	3b01      	subs	r3, #1
 800b112:	b29a      	uxth	r2, r3
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b11c:	b29b      	uxth	r3, r3
 800b11e:	3b01      	subs	r3, #1
 800b120:	b29a      	uxth	r2, r3
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	691a      	ldr	r2, [r3, #16]
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b130:	b2d2      	uxtb	r2, r2
 800b132:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b138:	1c5a      	adds	r2, r3, #1
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b142:	3b01      	subs	r3, #1
 800b144:	b29a      	uxth	r2, r3
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b14e:	b29b      	uxth	r3, r3
 800b150:	3b01      	subs	r3, #1
 800b152:	b29a      	uxth	r2, r3
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b158:	e0b8      	b.n	800b2cc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15c:	9300      	str	r3, [sp, #0]
 800b15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b160:	2200      	movs	r2, #0
 800b162:	4966      	ldr	r1, [pc, #408]	; (800b2fc <HAL_I2C_Mem_Read+0x448>)
 800b164:	68f8      	ldr	r0, [r7, #12]
 800b166:	f000 fa7f 	bl	800b668 <I2C_WaitOnFlagUntilTimeout>
 800b16a:	4603      	mov	r3, r0
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d001      	beq.n	800b174 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800b170:	2301      	movs	r3, #1
 800b172:	e0bf      	b.n	800b2f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	681a      	ldr	r2, [r3, #0]
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b182:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	691a      	ldr	r2, [r3, #16]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b18e:	b2d2      	uxtb	r2, r2
 800b190:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b196:	1c5a      	adds	r2, r3, #1
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1a0:	3b01      	subs	r3, #1
 800b1a2:	b29a      	uxth	r2, r3
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	3b01      	subs	r3, #1
 800b1b0:	b29a      	uxth	r2, r3
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b8:	9300      	str	r3, [sp, #0]
 800b1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1bc:	2200      	movs	r2, #0
 800b1be:	494f      	ldr	r1, [pc, #316]	; (800b2fc <HAL_I2C_Mem_Read+0x448>)
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	f000 fa51 	bl	800b668 <I2C_WaitOnFlagUntilTimeout>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d001      	beq.n	800b1d0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	e091      	b.n	800b2f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	681a      	ldr	r2, [r3, #0]
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b1de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	691a      	ldr	r2, [r3, #16]
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ea:	b2d2      	uxtb	r2, r2
 800b1ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f2:	1c5a      	adds	r2, r3, #1
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1fc:	3b01      	subs	r3, #1
 800b1fe:	b29a      	uxth	r2, r3
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b208:	b29b      	uxth	r3, r3
 800b20a:	3b01      	subs	r3, #1
 800b20c:	b29a      	uxth	r2, r3
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	691a      	ldr	r2, [r3, #16]
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b21c:	b2d2      	uxtb	r2, r2
 800b21e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b224:	1c5a      	adds	r2, r3, #1
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b22e:	3b01      	subs	r3, #1
 800b230:	b29a      	uxth	r2, r3
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b23a:	b29b      	uxth	r3, r3
 800b23c:	3b01      	subs	r3, #1
 800b23e:	b29a      	uxth	r2, r3
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b244:	e042      	b.n	800b2cc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b248:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b24a:	68f8      	ldr	r0, [r7, #12]
 800b24c:	f000 fb64 	bl	800b918 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b250:	4603      	mov	r3, r0
 800b252:	2b00      	cmp	r3, #0
 800b254:	d001      	beq.n	800b25a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800b256:	2301      	movs	r3, #1
 800b258:	e04c      	b.n	800b2f4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	691a      	ldr	r2, [r3, #16]
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b264:	b2d2      	uxtb	r2, r2
 800b266:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b26c:	1c5a      	adds	r2, r3, #1
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b276:	3b01      	subs	r3, #1
 800b278:	b29a      	uxth	r2, r3
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b282:	b29b      	uxth	r3, r3
 800b284:	3b01      	subs	r3, #1
 800b286:	b29a      	uxth	r2, r3
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	695b      	ldr	r3, [r3, #20]
 800b292:	f003 0304 	and.w	r3, r3, #4
 800b296:	2b04      	cmp	r3, #4
 800b298:	d118      	bne.n	800b2cc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	691a      	ldr	r2, [r3, #16]
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a4:	b2d2      	uxtb	r2, r2
 800b2a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ac:	1c5a      	adds	r2, r3, #1
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2b6:	3b01      	subs	r3, #1
 800b2b8:	b29a      	uxth	r2, r3
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	3b01      	subs	r3, #1
 800b2c6:	b29a      	uxth	r2, r3
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	f47f aec2 	bne.w	800b05a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2220      	movs	r2, #32
 800b2da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	e000      	b.n	800b2f4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b2f2:	2302      	movs	r3, #2
  }
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3728      	adds	r7, #40	; 0x28
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	00010004 	.word	0x00010004

0800b300 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	2b20      	cmp	r3, #32
 800b312:	d124      	bne.n	800b35e <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2228      	movs	r2, #40	; 0x28
 800b318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f003 0301 	and.w	r3, r3, #1
 800b326:	2b01      	cmp	r3, #1
 800b328:	d007      	beq.n	800b33a <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	681a      	ldr	r2, [r3, #0]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f042 0201 	orr.w	r2, r2, #1
 800b338:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	681a      	ldr	r2, [r3, #0]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b348:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	685a      	ldr	r2, [r3, #4]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800b358:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800b35a:	2300      	movs	r3, #0
 800b35c:	e000      	b.n	800b360 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b35e:	2302      	movs	r3, #2
  }
}
 800b360:	4618      	mov	r0, r3
 800b362:	370c      	adds	r7, #12
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr

0800b36c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b088      	sub	sp, #32
 800b370:	af02      	add	r7, sp, #8
 800b372:	60f8      	str	r0, [r7, #12]
 800b374:	4608      	mov	r0, r1
 800b376:	4611      	mov	r1, r2
 800b378:	461a      	mov	r2, r3
 800b37a:	4603      	mov	r3, r0
 800b37c:	817b      	strh	r3, [r7, #10]
 800b37e:	460b      	mov	r3, r1
 800b380:	813b      	strh	r3, [r7, #8]
 800b382:	4613      	mov	r3, r2
 800b384:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	681a      	ldr	r2, [r3, #0]
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b394:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b398:	9300      	str	r3, [sp, #0]
 800b39a:	6a3b      	ldr	r3, [r7, #32]
 800b39c:	2200      	movs	r2, #0
 800b39e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b3a2:	68f8      	ldr	r0, [r7, #12]
 800b3a4:	f000 f960 	bl	800b668 <I2C_WaitOnFlagUntilTimeout>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d00d      	beq.n	800b3ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3bc:	d103      	bne.n	800b3c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b3c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b3c6:	2303      	movs	r3, #3
 800b3c8:	e05f      	b.n	800b48a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b3ca:	897b      	ldrh	r3, [r7, #10]
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b3d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3dc:	6a3a      	ldr	r2, [r7, #32]
 800b3de:	492d      	ldr	r1, [pc, #180]	; (800b494 <I2C_RequestMemoryWrite+0x128>)
 800b3e0:	68f8      	ldr	r0, [r7, #12]
 800b3e2:	f000 f998 	bl	800b716 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d001      	beq.n	800b3f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	e04c      	b.n	800b48a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	617b      	str	r3, [r7, #20]
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	695b      	ldr	r3, [r3, #20]
 800b3fa:	617b      	str	r3, [r7, #20]
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	699b      	ldr	r3, [r3, #24]
 800b402:	617b      	str	r3, [r7, #20]
 800b404:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b408:	6a39      	ldr	r1, [r7, #32]
 800b40a:	68f8      	ldr	r0, [r7, #12]
 800b40c:	f000 fa02 	bl	800b814 <I2C_WaitOnTXEFlagUntilTimeout>
 800b410:	4603      	mov	r3, r0
 800b412:	2b00      	cmp	r3, #0
 800b414:	d00d      	beq.n	800b432 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b41a:	2b04      	cmp	r3, #4
 800b41c:	d107      	bne.n	800b42e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b42c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b42e:	2301      	movs	r3, #1
 800b430:	e02b      	b.n	800b48a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b432:	88fb      	ldrh	r3, [r7, #6]
 800b434:	2b01      	cmp	r3, #1
 800b436:	d105      	bne.n	800b444 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b438:	893b      	ldrh	r3, [r7, #8]
 800b43a:	b2da      	uxtb	r2, r3
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	611a      	str	r2, [r3, #16]
 800b442:	e021      	b.n	800b488 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b444:	893b      	ldrh	r3, [r7, #8]
 800b446:	0a1b      	lsrs	r3, r3, #8
 800b448:	b29b      	uxth	r3, r3
 800b44a:	b2da      	uxtb	r2, r3
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b454:	6a39      	ldr	r1, [r7, #32]
 800b456:	68f8      	ldr	r0, [r7, #12]
 800b458:	f000 f9dc 	bl	800b814 <I2C_WaitOnTXEFlagUntilTimeout>
 800b45c:	4603      	mov	r3, r0
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d00d      	beq.n	800b47e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b466:	2b04      	cmp	r3, #4
 800b468:	d107      	bne.n	800b47a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	681a      	ldr	r2, [r3, #0]
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b478:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b47a:	2301      	movs	r3, #1
 800b47c:	e005      	b.n	800b48a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b47e:	893b      	ldrh	r3, [r7, #8]
 800b480:	b2da      	uxtb	r2, r3
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b488:	2300      	movs	r3, #0
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3718      	adds	r7, #24
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
 800b492:	bf00      	nop
 800b494:	00010002 	.word	0x00010002

0800b498 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b088      	sub	sp, #32
 800b49c:	af02      	add	r7, sp, #8
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	4608      	mov	r0, r1
 800b4a2:	4611      	mov	r1, r2
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	817b      	strh	r3, [r7, #10]
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	813b      	strh	r3, [r7, #8]
 800b4ae:	4613      	mov	r3, r2
 800b4b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	681a      	ldr	r2, [r3, #0]
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b4c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	681a      	ldr	r2, [r3, #0]
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b4d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d4:	9300      	str	r3, [sp, #0]
 800b4d6:	6a3b      	ldr	r3, [r7, #32]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b4de:	68f8      	ldr	r0, [r7, #12]
 800b4e0:	f000 f8c2 	bl	800b668 <I2C_WaitOnFlagUntilTimeout>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d00d      	beq.n	800b506 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4f8:	d103      	bne.n	800b502 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b500:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b502:	2303      	movs	r3, #3
 800b504:	e0aa      	b.n	800b65c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b506:	897b      	ldrh	r3, [r7, #10]
 800b508:	b2db      	uxtb	r3, r3
 800b50a:	461a      	mov	r2, r3
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b514:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b518:	6a3a      	ldr	r2, [r7, #32]
 800b51a:	4952      	ldr	r1, [pc, #328]	; (800b664 <I2C_RequestMemoryRead+0x1cc>)
 800b51c:	68f8      	ldr	r0, [r7, #12]
 800b51e:	f000 f8fa 	bl	800b716 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b522:	4603      	mov	r3, r0
 800b524:	2b00      	cmp	r3, #0
 800b526:	d001      	beq.n	800b52c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b528:	2301      	movs	r3, #1
 800b52a:	e097      	b.n	800b65c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b52c:	2300      	movs	r3, #0
 800b52e:	617b      	str	r3, [r7, #20]
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	695b      	ldr	r3, [r3, #20]
 800b536:	617b      	str	r3, [r7, #20]
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	699b      	ldr	r3, [r3, #24]
 800b53e:	617b      	str	r3, [r7, #20]
 800b540:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b544:	6a39      	ldr	r1, [r7, #32]
 800b546:	68f8      	ldr	r0, [r7, #12]
 800b548:	f000 f964 	bl	800b814 <I2C_WaitOnTXEFlagUntilTimeout>
 800b54c:	4603      	mov	r3, r0
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d00d      	beq.n	800b56e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b556:	2b04      	cmp	r3, #4
 800b558:	d107      	bne.n	800b56a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	681a      	ldr	r2, [r3, #0]
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b568:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b56a:	2301      	movs	r3, #1
 800b56c:	e076      	b.n	800b65c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b56e:	88fb      	ldrh	r3, [r7, #6]
 800b570:	2b01      	cmp	r3, #1
 800b572:	d105      	bne.n	800b580 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b574:	893b      	ldrh	r3, [r7, #8]
 800b576:	b2da      	uxtb	r2, r3
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	611a      	str	r2, [r3, #16]
 800b57e:	e021      	b.n	800b5c4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b580:	893b      	ldrh	r3, [r7, #8]
 800b582:	0a1b      	lsrs	r3, r3, #8
 800b584:	b29b      	uxth	r3, r3
 800b586:	b2da      	uxtb	r2, r3
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b58e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b590:	6a39      	ldr	r1, [r7, #32]
 800b592:	68f8      	ldr	r0, [r7, #12]
 800b594:	f000 f93e 	bl	800b814 <I2C_WaitOnTXEFlagUntilTimeout>
 800b598:	4603      	mov	r3, r0
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d00d      	beq.n	800b5ba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5a2:	2b04      	cmp	r3, #4
 800b5a4:	d107      	bne.n	800b5b6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	681a      	ldr	r2, [r3, #0]
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b5b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	e050      	b.n	800b65c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b5ba:	893b      	ldrh	r3, [r7, #8]
 800b5bc:	b2da      	uxtb	r2, r3
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b5c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5c6:	6a39      	ldr	r1, [r7, #32]
 800b5c8:	68f8      	ldr	r0, [r7, #12]
 800b5ca:	f000 f923 	bl	800b814 <I2C_WaitOnTXEFlagUntilTimeout>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d00d      	beq.n	800b5f0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5d8:	2b04      	cmp	r3, #4
 800b5da:	d107      	bne.n	800b5ec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	681a      	ldr	r2, [r3, #0]
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b5ea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	e035      	b.n	800b65c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	681a      	ldr	r2, [r3, #0]
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b5fe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b602:	9300      	str	r3, [sp, #0]
 800b604:	6a3b      	ldr	r3, [r7, #32]
 800b606:	2200      	movs	r2, #0
 800b608:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b60c:	68f8      	ldr	r0, [r7, #12]
 800b60e:	f000 f82b 	bl	800b668 <I2C_WaitOnFlagUntilTimeout>
 800b612:	4603      	mov	r3, r0
 800b614:	2b00      	cmp	r3, #0
 800b616:	d00d      	beq.n	800b634 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b626:	d103      	bne.n	800b630 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b62e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b630:	2303      	movs	r3, #3
 800b632:	e013      	b.n	800b65c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b634:	897b      	ldrh	r3, [r7, #10]
 800b636:	b2db      	uxtb	r3, r3
 800b638:	f043 0301 	orr.w	r3, r3, #1
 800b63c:	b2da      	uxtb	r2, r3
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b646:	6a3a      	ldr	r2, [r7, #32]
 800b648:	4906      	ldr	r1, [pc, #24]	; (800b664 <I2C_RequestMemoryRead+0x1cc>)
 800b64a:	68f8      	ldr	r0, [r7, #12]
 800b64c:	f000 f863 	bl	800b716 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b650:	4603      	mov	r3, r0
 800b652:	2b00      	cmp	r3, #0
 800b654:	d001      	beq.n	800b65a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b656:	2301      	movs	r3, #1
 800b658:	e000      	b.n	800b65c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b65a:	2300      	movs	r3, #0
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3718      	adds	r7, #24
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}
 800b664:	00010002 	.word	0x00010002

0800b668 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b084      	sub	sp, #16
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	603b      	str	r3, [r7, #0]
 800b674:	4613      	mov	r3, r2
 800b676:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b678:	e025      	b.n	800b6c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b680:	d021      	beq.n	800b6c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b682:	f7fe fa8f 	bl	8009ba4 <HAL_GetTick>
 800b686:	4602      	mov	r2, r0
 800b688:	69bb      	ldr	r3, [r7, #24]
 800b68a:	1ad3      	subs	r3, r2, r3
 800b68c:	683a      	ldr	r2, [r7, #0]
 800b68e:	429a      	cmp	r2, r3
 800b690:	d302      	bcc.n	800b698 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d116      	bne.n	800b6c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2200      	movs	r2, #0
 800b69c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2220      	movs	r2, #32
 800b6a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6b2:	f043 0220 	orr.w	r2, r3, #32
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	e023      	b.n	800b70e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	0c1b      	lsrs	r3, r3, #16
 800b6ca:	b2db      	uxtb	r3, r3
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d10d      	bne.n	800b6ec <I2C_WaitOnFlagUntilTimeout+0x84>
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	695b      	ldr	r3, [r3, #20]
 800b6d6:	43da      	mvns	r2, r3
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	4013      	ands	r3, r2
 800b6dc:	b29b      	uxth	r3, r3
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	bf0c      	ite	eq
 800b6e2:	2301      	moveq	r3, #1
 800b6e4:	2300      	movne	r3, #0
 800b6e6:	b2db      	uxtb	r3, r3
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	e00c      	b.n	800b706 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	699b      	ldr	r3, [r3, #24]
 800b6f2:	43da      	mvns	r2, r3
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	4013      	ands	r3, r2
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	bf0c      	ite	eq
 800b6fe:	2301      	moveq	r3, #1
 800b700:	2300      	movne	r3, #0
 800b702:	b2db      	uxtb	r3, r3
 800b704:	461a      	mov	r2, r3
 800b706:	79fb      	ldrb	r3, [r7, #7]
 800b708:	429a      	cmp	r2, r3
 800b70a:	d0b6      	beq.n	800b67a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b70c:	2300      	movs	r3, #0
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3710      	adds	r7, #16
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}

0800b716 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b716:	b580      	push	{r7, lr}
 800b718:	b084      	sub	sp, #16
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	60f8      	str	r0, [r7, #12]
 800b71e:	60b9      	str	r1, [r7, #8]
 800b720:	607a      	str	r2, [r7, #4]
 800b722:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b724:	e051      	b.n	800b7ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	695b      	ldr	r3, [r3, #20]
 800b72c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b734:	d123      	bne.n	800b77e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b744:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b74e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2200      	movs	r2, #0
 800b754:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2220      	movs	r2, #32
 800b75a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2200      	movs	r2, #0
 800b762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b76a:	f043 0204 	orr.w	r2, r3, #4
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2200      	movs	r2, #0
 800b776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b77a:	2301      	movs	r3, #1
 800b77c:	e046      	b.n	800b80c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b784:	d021      	beq.n	800b7ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b786:	f7fe fa0d 	bl	8009ba4 <HAL_GetTick>
 800b78a:	4602      	mov	r2, r0
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	1ad3      	subs	r3, r2, r3
 800b790:	687a      	ldr	r2, [r7, #4]
 800b792:	429a      	cmp	r2, r3
 800b794:	d302      	bcc.n	800b79c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d116      	bne.n	800b7ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2220      	movs	r2, #32
 800b7a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7b6:	f043 0220 	orr.w	r2, r3, #32
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	e020      	b.n	800b80c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	0c1b      	lsrs	r3, r3, #16
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	d10c      	bne.n	800b7ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	695b      	ldr	r3, [r3, #20]
 800b7da:	43da      	mvns	r2, r3
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	4013      	ands	r3, r2
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	bf14      	ite	ne
 800b7e6:	2301      	movne	r3, #1
 800b7e8:	2300      	moveq	r3, #0
 800b7ea:	b2db      	uxtb	r3, r3
 800b7ec:	e00b      	b.n	800b806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	699b      	ldr	r3, [r3, #24]
 800b7f4:	43da      	mvns	r2, r3
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	4013      	ands	r3, r2
 800b7fa:	b29b      	uxth	r3, r3
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	bf14      	ite	ne
 800b800:	2301      	movne	r3, #1
 800b802:	2300      	moveq	r3, #0
 800b804:	b2db      	uxtb	r3, r3
 800b806:	2b00      	cmp	r3, #0
 800b808:	d18d      	bne.n	800b726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800b80a:	2300      	movs	r3, #0
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3710      	adds	r7, #16
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}

0800b814 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	60b9      	str	r1, [r7, #8]
 800b81e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b820:	e02d      	b.n	800b87e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b822:	68f8      	ldr	r0, [r7, #12]
 800b824:	f000 f8ce 	bl	800b9c4 <I2C_IsAcknowledgeFailed>
 800b828:	4603      	mov	r3, r0
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d001      	beq.n	800b832 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b82e:	2301      	movs	r3, #1
 800b830:	e02d      	b.n	800b88e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b838:	d021      	beq.n	800b87e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b83a:	f7fe f9b3 	bl	8009ba4 <HAL_GetTick>
 800b83e:	4602      	mov	r2, r0
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	1ad3      	subs	r3, r2, r3
 800b844:	68ba      	ldr	r2, [r7, #8]
 800b846:	429a      	cmp	r2, r3
 800b848:	d302      	bcc.n	800b850 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d116      	bne.n	800b87e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	2200      	movs	r2, #0
 800b854:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2220      	movs	r2, #32
 800b85a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2200      	movs	r2, #0
 800b862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b86a:	f043 0220 	orr.w	r2, r3, #32
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2200      	movs	r2, #0
 800b876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b87a:	2301      	movs	r3, #1
 800b87c:	e007      	b.n	800b88e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	695b      	ldr	r3, [r3, #20]
 800b884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b888:	2b80      	cmp	r3, #128	; 0x80
 800b88a:	d1ca      	bne.n	800b822 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b88c:	2300      	movs	r3, #0
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3710      	adds	r7, #16
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}

0800b896 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b896:	b580      	push	{r7, lr}
 800b898:	b084      	sub	sp, #16
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	60f8      	str	r0, [r7, #12]
 800b89e:	60b9      	str	r1, [r7, #8]
 800b8a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b8a2:	e02d      	b.n	800b900 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b8a4:	68f8      	ldr	r0, [r7, #12]
 800b8a6:	f000 f88d 	bl	800b9c4 <I2C_IsAcknowledgeFailed>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d001      	beq.n	800b8b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	e02d      	b.n	800b910 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ba:	d021      	beq.n	800b900 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8bc:	f7fe f972 	bl	8009ba4 <HAL_GetTick>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	1ad3      	subs	r3, r2, r3
 800b8c6:	68ba      	ldr	r2, [r7, #8]
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	d302      	bcc.n	800b8d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d116      	bne.n	800b900 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2220      	movs	r2, #32
 800b8dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ec:	f043 0220 	orr.w	r2, r3, #32
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	e007      	b.n	800b910 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	695b      	ldr	r3, [r3, #20]
 800b906:	f003 0304 	and.w	r3, r3, #4
 800b90a:	2b04      	cmp	r3, #4
 800b90c:	d1ca      	bne.n	800b8a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b90e:	2300      	movs	r3, #0
}
 800b910:	4618      	mov	r0, r3
 800b912:	3710      	adds	r7, #16
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}

0800b918 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b084      	sub	sp, #16
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	60f8      	str	r0, [r7, #12]
 800b920:	60b9      	str	r1, [r7, #8]
 800b922:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b924:	e042      	b.n	800b9ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	695b      	ldr	r3, [r3, #20]
 800b92c:	f003 0310 	and.w	r3, r3, #16
 800b930:	2b10      	cmp	r3, #16
 800b932:	d119      	bne.n	800b968 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f06f 0210 	mvn.w	r2, #16
 800b93c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2200      	movs	r2, #0
 800b942:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2220      	movs	r2, #32
 800b948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2200      	movs	r2, #0
 800b950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	2200      	movs	r2, #0
 800b960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b964:	2301      	movs	r3, #1
 800b966:	e029      	b.n	800b9bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b968:	f7fe f91c 	bl	8009ba4 <HAL_GetTick>
 800b96c:	4602      	mov	r2, r0
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	1ad3      	subs	r3, r2, r3
 800b972:	68ba      	ldr	r2, [r7, #8]
 800b974:	429a      	cmp	r2, r3
 800b976:	d302      	bcc.n	800b97e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d116      	bne.n	800b9ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2200      	movs	r2, #0
 800b982:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2220      	movs	r2, #32
 800b988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	2200      	movs	r2, #0
 800b990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b998:	f043 0220 	orr.w	r2, r3, #32
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	e007      	b.n	800b9bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	695b      	ldr	r3, [r3, #20]
 800b9b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9b6:	2b40      	cmp	r3, #64	; 0x40
 800b9b8:	d1b5      	bne.n	800b926 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b9ba:	2300      	movs	r3, #0
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3710      	adds	r7, #16
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b083      	sub	sp, #12
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	695b      	ldr	r3, [r3, #20]
 800b9d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b9d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9da:	d11b      	bne.n	800ba14 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b9e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2220      	movs	r2, #32
 800b9f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba00:	f043 0204 	orr.w	r2, r3, #4
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ba10:	2301      	movs	r3, #1
 800ba12:	e000      	b.n	800ba16 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ba14:	2300      	movs	r3, #0
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	370c      	adds	r7, #12
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr

0800ba22 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ba22:	b480      	push	{r7}
 800ba24:	b083      	sub	sp, #12
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
 800ba2a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	2b20      	cmp	r3, #32
 800ba36:	d129      	bne.n	800ba8c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2224      	movs	r2, #36	; 0x24
 800ba3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	681a      	ldr	r2, [r3, #0]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f022 0201 	bic.w	r2, r2, #1
 800ba4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f022 0210 	bic.w	r2, r2, #16
 800ba5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	683a      	ldr	r2, [r7, #0]
 800ba6c:	430a      	orrs	r2, r1
 800ba6e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	681a      	ldr	r2, [r3, #0]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f042 0201 	orr.w	r2, r2, #1
 800ba7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2220      	movs	r2, #32
 800ba84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	e000      	b.n	800ba8e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800ba8c:	2302      	movs	r3, #2
  }
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	370c      	adds	r7, #12
 800ba92:	46bd      	mov	sp, r7
 800ba94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba98:	4770      	bx	lr

0800ba9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ba9a:	b480      	push	{r7}
 800ba9c:	b085      	sub	sp, #20
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
 800baa2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800baa4:	2300      	movs	r3, #0
 800baa6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800baae:	b2db      	uxtb	r3, r3
 800bab0:	2b20      	cmp	r3, #32
 800bab2:	d12a      	bne.n	800bb0a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2224      	movs	r2, #36	; 0x24
 800bab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f022 0201 	bic.w	r2, r2, #1
 800baca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800bad4:	89fb      	ldrh	r3, [r7, #14]
 800bad6:	f023 030f 	bic.w	r3, r3, #15
 800bada:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	b29a      	uxth	r2, r3
 800bae0:	89fb      	ldrh	r3, [r7, #14]
 800bae2:	4313      	orrs	r3, r2
 800bae4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	89fa      	ldrh	r2, [r7, #14]
 800baec:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	681a      	ldr	r2, [r3, #0]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f042 0201 	orr.w	r2, r2, #1
 800bafc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2220      	movs	r2, #32
 800bb02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800bb06:	2300      	movs	r3, #0
 800bb08:	e000      	b.n	800bb0c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800bb0a:	2302      	movs	r3, #2
  }
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3714      	adds	r7, #20
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr

0800bb18 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b083      	sub	sp, #12
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 800bb20:	4b05      	ldr	r3, [pc, #20]	; (800bb38 <HAL_PWR_EnableWakeUpPin+0x20>)
 800bb22:	685a      	ldr	r2, [r3, #4]
 800bb24:	4904      	ldr	r1, [pc, #16]	; (800bb38 <HAL_PWR_EnableWakeUpPin+0x20>)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	604b      	str	r3, [r1, #4]
}
 800bb2c:	bf00      	nop
 800bb2e:	370c      	adds	r7, #12
 800bb30:	46bd      	mov	sp, r7
 800bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb36:	4770      	bx	lr
 800bb38:	40007000 	.word	0x40007000

0800bb3c <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b083      	sub	sp, #12
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 800bb44:	4b06      	ldr	r3, [pc, #24]	; (800bb60 <HAL_PWR_DisableWakeUpPin+0x24>)
 800bb46:	685a      	ldr	r2, [r3, #4]
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	43db      	mvns	r3, r3
 800bb4c:	4904      	ldr	r1, [pc, #16]	; (800bb60 <HAL_PWR_DisableWakeUpPin+0x24>)
 800bb4e:	4013      	ands	r3, r2
 800bb50:	604b      	str	r3, [r1, #4]
}
 800bb52:	bf00      	nop
 800bb54:	370c      	adds	r7, #12
 800bb56:	46bd      	mov	sp, r7
 800bb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5c:	4770      	bx	lr
 800bb5e:	bf00      	nop
 800bb60:	40007000 	.word	0x40007000

0800bb64 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800bb64:	b480      	push	{r7}
 800bb66:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800bb68:	4b08      	ldr	r3, [pc, #32]	; (800bb8c <HAL_PWR_EnterSTANDBYMode+0x28>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	4a07      	ldr	r2, [pc, #28]	; (800bb8c <HAL_PWR_EnterSTANDBYMode+0x28>)
 800bb6e:	f043 0302 	orr.w	r3, r3, #2
 800bb72:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800bb74:	4b06      	ldr	r3, [pc, #24]	; (800bb90 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800bb76:	691b      	ldr	r3, [r3, #16]
 800bb78:	4a05      	ldr	r2, [pc, #20]	; (800bb90 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800bb7a:	f043 0304 	orr.w	r3, r3, #4
 800bb7e:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800bb80:	bf30      	wfi
}
 800bb82:	bf00      	nop
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr
 800bb8c:	40007000 	.word	0x40007000
 800bb90:	e000ed00 	.word	0xe000ed00

0800bb94 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b082      	sub	sp, #8
 800bb98:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800bb9e:	2300      	movs	r3, #0
 800bba0:	603b      	str	r3, [r7, #0]
 800bba2:	4b20      	ldr	r3, [pc, #128]	; (800bc24 <HAL_PWREx_EnableOverDrive+0x90>)
 800bba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bba6:	4a1f      	ldr	r2, [pc, #124]	; (800bc24 <HAL_PWREx_EnableOverDrive+0x90>)
 800bba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbac:	6413      	str	r3, [r2, #64]	; 0x40
 800bbae:	4b1d      	ldr	r3, [pc, #116]	; (800bc24 <HAL_PWREx_EnableOverDrive+0x90>)
 800bbb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbb6:	603b      	str	r3, [r7, #0]
 800bbb8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800bbba:	4b1b      	ldr	r3, [pc, #108]	; (800bc28 <HAL_PWREx_EnableOverDrive+0x94>)
 800bbbc:	2201      	movs	r2, #1
 800bbbe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bbc0:	f7fd fff0 	bl	8009ba4 <HAL_GetTick>
 800bbc4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bbc6:	e009      	b.n	800bbdc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800bbc8:	f7fd ffec 	bl	8009ba4 <HAL_GetTick>
 800bbcc:	4602      	mov	r2, r0
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	1ad3      	subs	r3, r2, r3
 800bbd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bbd6:	d901      	bls.n	800bbdc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800bbd8:	2303      	movs	r3, #3
 800bbda:	e01f      	b.n	800bc1c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bbdc:	4b13      	ldr	r3, [pc, #76]	; (800bc2c <HAL_PWREx_EnableOverDrive+0x98>)
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bbe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbe8:	d1ee      	bne.n	800bbc8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800bbea:	4b11      	ldr	r3, [pc, #68]	; (800bc30 <HAL_PWREx_EnableOverDrive+0x9c>)
 800bbec:	2201      	movs	r2, #1
 800bbee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bbf0:	f7fd ffd8 	bl	8009ba4 <HAL_GetTick>
 800bbf4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800bbf6:	e009      	b.n	800bc0c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800bbf8:	f7fd ffd4 	bl	8009ba4 <HAL_GetTick>
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	1ad3      	subs	r3, r2, r3
 800bc02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bc06:	d901      	bls.n	800bc0c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800bc08:	2303      	movs	r3, #3
 800bc0a:	e007      	b.n	800bc1c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800bc0c:	4b07      	ldr	r3, [pc, #28]	; (800bc2c <HAL_PWREx_EnableOverDrive+0x98>)
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc18:	d1ee      	bne.n	800bbf8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800bc1a:	2300      	movs	r3, #0
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3708      	adds	r7, #8
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	40023800 	.word	0x40023800
 800bc28:	420e0040 	.word	0x420e0040
 800bc2c:	40007000 	.word	0x40007000
 800bc30:	420e0044 	.word	0x420e0044

0800bc34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b086      	sub	sp, #24
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d101      	bne.n	800bc46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bc42:	2301      	movs	r3, #1
 800bc44:	e264      	b.n	800c110 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f003 0301 	and.w	r3, r3, #1
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d075      	beq.n	800bd3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bc52:	4ba3      	ldr	r3, [pc, #652]	; (800bee0 <HAL_RCC_OscConfig+0x2ac>)
 800bc54:	689b      	ldr	r3, [r3, #8]
 800bc56:	f003 030c 	and.w	r3, r3, #12
 800bc5a:	2b04      	cmp	r3, #4
 800bc5c:	d00c      	beq.n	800bc78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bc5e:	4ba0      	ldr	r3, [pc, #640]	; (800bee0 <HAL_RCC_OscConfig+0x2ac>)
 800bc60:	689b      	ldr	r3, [r3, #8]
 800bc62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bc66:	2b08      	cmp	r3, #8
 800bc68:	d112      	bne.n	800bc90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bc6a:	4b9d      	ldr	r3, [pc, #628]	; (800bee0 <HAL_RCC_OscConfig+0x2ac>)
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc76:	d10b      	bne.n	800bc90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bc78:	4b99      	ldr	r3, [pc, #612]	; (800bee0 <HAL_RCC_OscConfig+0x2ac>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d05b      	beq.n	800bd3c <HAL_RCC_OscConfig+0x108>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d157      	bne.n	800bd3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	e23f      	b.n	800c110 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc98:	d106      	bne.n	800bca8 <HAL_RCC_OscConfig+0x74>
 800bc9a:	4b91      	ldr	r3, [pc, #580]	; (800bee0 <HAL_RCC_OscConfig+0x2ac>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	4a90      	ldr	r2, [pc, #576]	; (800bee0 <HAL_RCC_OscConfig+0x2ac>)
 800bca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bca4:	6013      	str	r3, [r2, #0]
 800bca6:	e01d      	b.n	800bce4 <HAL_RCC_OscConfig+0xb0>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	685b      	ldr	r3, [r3, #4]
 800bcac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bcb0:	d10c      	bne.n	800bccc <HAL_RCC_OscConfig+0x98>
 800bcb2:	4b8b      	ldr	r3, [pc, #556]	; (800bee0 <HAL_RCC_OscConfig+0x2ac>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	4a8a      	ldr	r2, [pc, #552]	; (800bee0 <HAL_RCC_OscConfig+0x2ac>)
 800bcb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bcbc:	6013      	str	r3, [r2, #0]
 800bcbe:	4b88      	ldr	r3, [pc, #544]	; (800bee0 <HAL_RCC_OscConfig+0x2ac>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	4a87      	ldr	r2, [pc, #540]	; (800bee0 <HAL_RCC_OscConfig+0x2ac>)
 800bcc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bcc8:	6013      	str	r3, [r2, #0]
 800bcca:	e00b      	b.n	800bce4 <HAL_RCC_OscConfig+0xb0>
 800bccc:	4b84      	ldr	r3, [pc, #528]	; (800bee0 <HAL_RCC_OscConfig+0x2ac>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	4a83      	ldr	r2, [pc, #524]	; (800bee0 <HAL_RCC_OscConfig+0x2ac>)
 800bcd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bcd6:	6013      	str	r3, [r2, #0]
 800bcd8:	4b81      	ldr	r3, [pc, #516]	; (800bee0 <HAL_RCC_OscConfig+0x2ac>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4a80      	ldr	r2, [pc, #512]	; (800bee0 <HAL_RCC_OscConfig+0x2ac>)
 800bcde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bce2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d013      	beq.n	800bd14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bcec:	f7fd ff5a 	bl	8009ba4 <HAL_GetTick>
 800bcf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bcf2:	e008      	b.n	800bd06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bcf4:	f7fd ff56 	bl	8009ba4 <HAL_GetTick>
 800bcf8:	4602      	mov	r2, r0
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	1ad3      	subs	r3, r2, r3
 800bcfe:	2b64      	cmp	r3, #100	; 0x64
 800bd00:	d901      	bls.n	800bd06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800bd02:	2303      	movs	r3, #3
 800bd04:	e204      	b.n	800c110 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bd06:	4b76      	ldr	r3, [pc, #472]	; (800bee0 <HAL_RCC_OscConfig+0x2ac>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d0f0      	beq.n	800bcf4 <HAL_RCC_OscConfig+0xc0>
 800bd12:	e014      	b.n	800bd3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bd14:	f7fd ff46 	bl	8009ba4 <HAL_GetTick>
 800bd18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bd1a:	e008      	b.n	800bd2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bd1c:	f7fd ff42 	bl	8009ba4 <HAL_GetTick>
 800bd20:	4602      	mov	r2, r0
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	1ad3      	subs	r3, r2, r3
 800bd26:	2b64      	cmp	r3, #100	; 0x64
 800bd28:	d901      	bls.n	800bd2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bd2a:	2303      	movs	r3, #3
 800bd2c:	e1f0      	b.n	800c110 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bd2e:	4b6c      	ldr	r3, [pc, #432]	; (800bee0 <HAL_RCC_OscConfig+0x2ac>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d1f0      	bne.n	800bd1c <HAL_RCC_OscConfig+0xe8>
 800bd3a:	e000      	b.n	800bd3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bd3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f003 0302 	and.w	r3, r3, #2
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d063      	beq.n	800be12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bd4a:	4b65      	ldr	r3, [pc, #404]	; (800bee0 <HAL_RCC_OscConfig+0x2ac>)
 800bd4c:	689b      	ldr	r3, [r3, #8]
 800bd4e:	f003 030c 	and.w	r3, r3, #12
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d00b      	beq.n	800bd6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bd56:	4b62      	ldr	r3, [pc, #392]	; (800bee0 <HAL_RCC_OscConfig+0x2ac>)
 800bd58:	689b      	ldr	r3, [r3, #8]
 800bd5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bd5e:	2b08      	cmp	r3, #8
 800bd60:	d11c      	bne.n	800bd9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bd62:	4b5f      	ldr	r3, [pc, #380]	; (800bee0 <HAL_RCC_OscConfig+0x2ac>)
 800bd64:	685b      	ldr	r3, [r3, #4]
 800bd66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d116      	bne.n	800bd9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bd6e:	4b5c      	ldr	r3, [pc, #368]	; (800bee0 <HAL_RCC_OscConfig+0x2ac>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f003 0302 	and.w	r3, r3, #2
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d005      	beq.n	800bd86 <HAL_RCC_OscConfig+0x152>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	68db      	ldr	r3, [r3, #12]
 800bd7e:	2b01      	cmp	r3, #1
 800bd80:	d001      	beq.n	800bd86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800bd82:	2301      	movs	r3, #1
 800bd84:	e1c4      	b.n	800c110 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bd86:	4b56      	ldr	r3, [pc, #344]	; (800bee0 <HAL_RCC_OscConfig+0x2ac>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	691b      	ldr	r3, [r3, #16]
 800bd92:	00db      	lsls	r3, r3, #3
 800bd94:	4952      	ldr	r1, [pc, #328]	; (800bee0 <HAL_RCC_OscConfig+0x2ac>)
 800bd96:	4313      	orrs	r3, r2
 800bd98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bd9a:	e03a      	b.n	800be12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	68db      	ldr	r3, [r3, #12]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d020      	beq.n	800bde6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bda4:	4b4f      	ldr	r3, [pc, #316]	; (800bee4 <HAL_RCC_OscConfig+0x2b0>)
 800bda6:	2201      	movs	r2, #1
 800bda8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdaa:	f7fd fefb 	bl	8009ba4 <HAL_GetTick>
 800bdae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bdb0:	e008      	b.n	800bdc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bdb2:	f7fd fef7 	bl	8009ba4 <HAL_GetTick>
 800bdb6:	4602      	mov	r2, r0
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	1ad3      	subs	r3, r2, r3
 800bdbc:	2b02      	cmp	r3, #2
 800bdbe:	d901      	bls.n	800bdc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800bdc0:	2303      	movs	r3, #3
 800bdc2:	e1a5      	b.n	800c110 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bdc4:	4b46      	ldr	r3, [pc, #280]	; (800bee0 <HAL_RCC_OscConfig+0x2ac>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f003 0302 	and.w	r3, r3, #2
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d0f0      	beq.n	800bdb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bdd0:	4b43      	ldr	r3, [pc, #268]	; (800bee0 <HAL_RCC_OscConfig+0x2ac>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	691b      	ldr	r3, [r3, #16]
 800bddc:	00db      	lsls	r3, r3, #3
 800bdde:	4940      	ldr	r1, [pc, #256]	; (800bee0 <HAL_RCC_OscConfig+0x2ac>)
 800bde0:	4313      	orrs	r3, r2
 800bde2:	600b      	str	r3, [r1, #0]
 800bde4:	e015      	b.n	800be12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bde6:	4b3f      	ldr	r3, [pc, #252]	; (800bee4 <HAL_RCC_OscConfig+0x2b0>)
 800bde8:	2200      	movs	r2, #0
 800bdea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdec:	f7fd feda 	bl	8009ba4 <HAL_GetTick>
 800bdf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bdf2:	e008      	b.n	800be06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bdf4:	f7fd fed6 	bl	8009ba4 <HAL_GetTick>
 800bdf8:	4602      	mov	r2, r0
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	1ad3      	subs	r3, r2, r3
 800bdfe:	2b02      	cmp	r3, #2
 800be00:	d901      	bls.n	800be06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800be02:	2303      	movs	r3, #3
 800be04:	e184      	b.n	800c110 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800be06:	4b36      	ldr	r3, [pc, #216]	; (800bee0 <HAL_RCC_OscConfig+0x2ac>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f003 0302 	and.w	r3, r3, #2
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d1f0      	bne.n	800bdf4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f003 0308 	and.w	r3, r3, #8
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d030      	beq.n	800be80 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	695b      	ldr	r3, [r3, #20]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d016      	beq.n	800be54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800be26:	4b30      	ldr	r3, [pc, #192]	; (800bee8 <HAL_RCC_OscConfig+0x2b4>)
 800be28:	2201      	movs	r2, #1
 800be2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be2c:	f7fd feba 	bl	8009ba4 <HAL_GetTick>
 800be30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800be32:	e008      	b.n	800be46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800be34:	f7fd feb6 	bl	8009ba4 <HAL_GetTick>
 800be38:	4602      	mov	r2, r0
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	1ad3      	subs	r3, r2, r3
 800be3e:	2b02      	cmp	r3, #2
 800be40:	d901      	bls.n	800be46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800be42:	2303      	movs	r3, #3
 800be44:	e164      	b.n	800c110 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800be46:	4b26      	ldr	r3, [pc, #152]	; (800bee0 <HAL_RCC_OscConfig+0x2ac>)
 800be48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be4a:	f003 0302 	and.w	r3, r3, #2
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d0f0      	beq.n	800be34 <HAL_RCC_OscConfig+0x200>
 800be52:	e015      	b.n	800be80 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800be54:	4b24      	ldr	r3, [pc, #144]	; (800bee8 <HAL_RCC_OscConfig+0x2b4>)
 800be56:	2200      	movs	r2, #0
 800be58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800be5a:	f7fd fea3 	bl	8009ba4 <HAL_GetTick>
 800be5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800be60:	e008      	b.n	800be74 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800be62:	f7fd fe9f 	bl	8009ba4 <HAL_GetTick>
 800be66:	4602      	mov	r2, r0
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	1ad3      	subs	r3, r2, r3
 800be6c:	2b02      	cmp	r3, #2
 800be6e:	d901      	bls.n	800be74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800be70:	2303      	movs	r3, #3
 800be72:	e14d      	b.n	800c110 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800be74:	4b1a      	ldr	r3, [pc, #104]	; (800bee0 <HAL_RCC_OscConfig+0x2ac>)
 800be76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be78:	f003 0302 	and.w	r3, r3, #2
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d1f0      	bne.n	800be62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f003 0304 	and.w	r3, r3, #4
 800be88:	2b00      	cmp	r3, #0
 800be8a:	f000 80a0 	beq.w	800bfce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800be8e:	2300      	movs	r3, #0
 800be90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800be92:	4b13      	ldr	r3, [pc, #76]	; (800bee0 <HAL_RCC_OscConfig+0x2ac>)
 800be94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d10f      	bne.n	800bebe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800be9e:	2300      	movs	r3, #0
 800bea0:	60bb      	str	r3, [r7, #8]
 800bea2:	4b0f      	ldr	r3, [pc, #60]	; (800bee0 <HAL_RCC_OscConfig+0x2ac>)
 800bea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bea6:	4a0e      	ldr	r2, [pc, #56]	; (800bee0 <HAL_RCC_OscConfig+0x2ac>)
 800bea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800beac:	6413      	str	r3, [r2, #64]	; 0x40
 800beae:	4b0c      	ldr	r3, [pc, #48]	; (800bee0 <HAL_RCC_OscConfig+0x2ac>)
 800beb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800beb6:	60bb      	str	r3, [r7, #8]
 800beb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800beba:	2301      	movs	r3, #1
 800bebc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bebe:	4b0b      	ldr	r3, [pc, #44]	; (800beec <HAL_RCC_OscConfig+0x2b8>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d121      	bne.n	800bf0e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800beca:	4b08      	ldr	r3, [pc, #32]	; (800beec <HAL_RCC_OscConfig+0x2b8>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4a07      	ldr	r2, [pc, #28]	; (800beec <HAL_RCC_OscConfig+0x2b8>)
 800bed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bed4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bed6:	f7fd fe65 	bl	8009ba4 <HAL_GetTick>
 800beda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bedc:	e011      	b.n	800bf02 <HAL_RCC_OscConfig+0x2ce>
 800bede:	bf00      	nop
 800bee0:	40023800 	.word	0x40023800
 800bee4:	42470000 	.word	0x42470000
 800bee8:	42470e80 	.word	0x42470e80
 800beec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bef0:	f7fd fe58 	bl	8009ba4 <HAL_GetTick>
 800bef4:	4602      	mov	r2, r0
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	1ad3      	subs	r3, r2, r3
 800befa:	2b02      	cmp	r3, #2
 800befc:	d901      	bls.n	800bf02 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800befe:	2303      	movs	r3, #3
 800bf00:	e106      	b.n	800c110 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bf02:	4b85      	ldr	r3, [pc, #532]	; (800c118 <HAL_RCC_OscConfig+0x4e4>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d0f0      	beq.n	800bef0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	689b      	ldr	r3, [r3, #8]
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	d106      	bne.n	800bf24 <HAL_RCC_OscConfig+0x2f0>
 800bf16:	4b81      	ldr	r3, [pc, #516]	; (800c11c <HAL_RCC_OscConfig+0x4e8>)
 800bf18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf1a:	4a80      	ldr	r2, [pc, #512]	; (800c11c <HAL_RCC_OscConfig+0x4e8>)
 800bf1c:	f043 0301 	orr.w	r3, r3, #1
 800bf20:	6713      	str	r3, [r2, #112]	; 0x70
 800bf22:	e01c      	b.n	800bf5e <HAL_RCC_OscConfig+0x32a>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	689b      	ldr	r3, [r3, #8]
 800bf28:	2b05      	cmp	r3, #5
 800bf2a:	d10c      	bne.n	800bf46 <HAL_RCC_OscConfig+0x312>
 800bf2c:	4b7b      	ldr	r3, [pc, #492]	; (800c11c <HAL_RCC_OscConfig+0x4e8>)
 800bf2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf30:	4a7a      	ldr	r2, [pc, #488]	; (800c11c <HAL_RCC_OscConfig+0x4e8>)
 800bf32:	f043 0304 	orr.w	r3, r3, #4
 800bf36:	6713      	str	r3, [r2, #112]	; 0x70
 800bf38:	4b78      	ldr	r3, [pc, #480]	; (800c11c <HAL_RCC_OscConfig+0x4e8>)
 800bf3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf3c:	4a77      	ldr	r2, [pc, #476]	; (800c11c <HAL_RCC_OscConfig+0x4e8>)
 800bf3e:	f043 0301 	orr.w	r3, r3, #1
 800bf42:	6713      	str	r3, [r2, #112]	; 0x70
 800bf44:	e00b      	b.n	800bf5e <HAL_RCC_OscConfig+0x32a>
 800bf46:	4b75      	ldr	r3, [pc, #468]	; (800c11c <HAL_RCC_OscConfig+0x4e8>)
 800bf48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf4a:	4a74      	ldr	r2, [pc, #464]	; (800c11c <HAL_RCC_OscConfig+0x4e8>)
 800bf4c:	f023 0301 	bic.w	r3, r3, #1
 800bf50:	6713      	str	r3, [r2, #112]	; 0x70
 800bf52:	4b72      	ldr	r3, [pc, #456]	; (800c11c <HAL_RCC_OscConfig+0x4e8>)
 800bf54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf56:	4a71      	ldr	r2, [pc, #452]	; (800c11c <HAL_RCC_OscConfig+0x4e8>)
 800bf58:	f023 0304 	bic.w	r3, r3, #4
 800bf5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	689b      	ldr	r3, [r3, #8]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d015      	beq.n	800bf92 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf66:	f7fd fe1d 	bl	8009ba4 <HAL_GetTick>
 800bf6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bf6c:	e00a      	b.n	800bf84 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bf6e:	f7fd fe19 	bl	8009ba4 <HAL_GetTick>
 800bf72:	4602      	mov	r2, r0
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	1ad3      	subs	r3, r2, r3
 800bf78:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d901      	bls.n	800bf84 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800bf80:	2303      	movs	r3, #3
 800bf82:	e0c5      	b.n	800c110 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bf84:	4b65      	ldr	r3, [pc, #404]	; (800c11c <HAL_RCC_OscConfig+0x4e8>)
 800bf86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf88:	f003 0302 	and.w	r3, r3, #2
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d0ee      	beq.n	800bf6e <HAL_RCC_OscConfig+0x33a>
 800bf90:	e014      	b.n	800bfbc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bf92:	f7fd fe07 	bl	8009ba4 <HAL_GetTick>
 800bf96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bf98:	e00a      	b.n	800bfb0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bf9a:	f7fd fe03 	bl	8009ba4 <HAL_GetTick>
 800bf9e:	4602      	mov	r2, r0
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	1ad3      	subs	r3, r2, r3
 800bfa4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	d901      	bls.n	800bfb0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800bfac:	2303      	movs	r3, #3
 800bfae:	e0af      	b.n	800c110 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bfb0:	4b5a      	ldr	r3, [pc, #360]	; (800c11c <HAL_RCC_OscConfig+0x4e8>)
 800bfb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfb4:	f003 0302 	and.w	r3, r3, #2
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d1ee      	bne.n	800bf9a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bfbc:	7dfb      	ldrb	r3, [r7, #23]
 800bfbe:	2b01      	cmp	r3, #1
 800bfc0:	d105      	bne.n	800bfce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bfc2:	4b56      	ldr	r3, [pc, #344]	; (800c11c <HAL_RCC_OscConfig+0x4e8>)
 800bfc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfc6:	4a55      	ldr	r2, [pc, #340]	; (800c11c <HAL_RCC_OscConfig+0x4e8>)
 800bfc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bfcc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	699b      	ldr	r3, [r3, #24]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	f000 809b 	beq.w	800c10e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bfd8:	4b50      	ldr	r3, [pc, #320]	; (800c11c <HAL_RCC_OscConfig+0x4e8>)
 800bfda:	689b      	ldr	r3, [r3, #8]
 800bfdc:	f003 030c 	and.w	r3, r3, #12
 800bfe0:	2b08      	cmp	r3, #8
 800bfe2:	d05c      	beq.n	800c09e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	699b      	ldr	r3, [r3, #24]
 800bfe8:	2b02      	cmp	r3, #2
 800bfea:	d141      	bne.n	800c070 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bfec:	4b4c      	ldr	r3, [pc, #304]	; (800c120 <HAL_RCC_OscConfig+0x4ec>)
 800bfee:	2200      	movs	r2, #0
 800bff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bff2:	f7fd fdd7 	bl	8009ba4 <HAL_GetTick>
 800bff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bff8:	e008      	b.n	800c00c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bffa:	f7fd fdd3 	bl	8009ba4 <HAL_GetTick>
 800bffe:	4602      	mov	r2, r0
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	1ad3      	subs	r3, r2, r3
 800c004:	2b02      	cmp	r3, #2
 800c006:	d901      	bls.n	800c00c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800c008:	2303      	movs	r3, #3
 800c00a:	e081      	b.n	800c110 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c00c:	4b43      	ldr	r3, [pc, #268]	; (800c11c <HAL_RCC_OscConfig+0x4e8>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c014:	2b00      	cmp	r3, #0
 800c016:	d1f0      	bne.n	800bffa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	69da      	ldr	r2, [r3, #28]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6a1b      	ldr	r3, [r3, #32]
 800c020:	431a      	orrs	r2, r3
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c026:	019b      	lsls	r3, r3, #6
 800c028:	431a      	orrs	r2, r3
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c02e:	085b      	lsrs	r3, r3, #1
 800c030:	3b01      	subs	r3, #1
 800c032:	041b      	lsls	r3, r3, #16
 800c034:	431a      	orrs	r2, r3
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c03a:	061b      	lsls	r3, r3, #24
 800c03c:	4937      	ldr	r1, [pc, #220]	; (800c11c <HAL_RCC_OscConfig+0x4e8>)
 800c03e:	4313      	orrs	r3, r2
 800c040:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c042:	4b37      	ldr	r3, [pc, #220]	; (800c120 <HAL_RCC_OscConfig+0x4ec>)
 800c044:	2201      	movs	r2, #1
 800c046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c048:	f7fd fdac 	bl	8009ba4 <HAL_GetTick>
 800c04c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c04e:	e008      	b.n	800c062 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c050:	f7fd fda8 	bl	8009ba4 <HAL_GetTick>
 800c054:	4602      	mov	r2, r0
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	1ad3      	subs	r3, r2, r3
 800c05a:	2b02      	cmp	r3, #2
 800c05c:	d901      	bls.n	800c062 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800c05e:	2303      	movs	r3, #3
 800c060:	e056      	b.n	800c110 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c062:	4b2e      	ldr	r3, [pc, #184]	; (800c11c <HAL_RCC_OscConfig+0x4e8>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d0f0      	beq.n	800c050 <HAL_RCC_OscConfig+0x41c>
 800c06e:	e04e      	b.n	800c10e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c070:	4b2b      	ldr	r3, [pc, #172]	; (800c120 <HAL_RCC_OscConfig+0x4ec>)
 800c072:	2200      	movs	r2, #0
 800c074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c076:	f7fd fd95 	bl	8009ba4 <HAL_GetTick>
 800c07a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c07c:	e008      	b.n	800c090 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c07e:	f7fd fd91 	bl	8009ba4 <HAL_GetTick>
 800c082:	4602      	mov	r2, r0
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	1ad3      	subs	r3, r2, r3
 800c088:	2b02      	cmp	r3, #2
 800c08a:	d901      	bls.n	800c090 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800c08c:	2303      	movs	r3, #3
 800c08e:	e03f      	b.n	800c110 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c090:	4b22      	ldr	r3, [pc, #136]	; (800c11c <HAL_RCC_OscConfig+0x4e8>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d1f0      	bne.n	800c07e <HAL_RCC_OscConfig+0x44a>
 800c09c:	e037      	b.n	800c10e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	699b      	ldr	r3, [r3, #24]
 800c0a2:	2b01      	cmp	r3, #1
 800c0a4:	d101      	bne.n	800c0aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	e032      	b.n	800c110 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c0aa:	4b1c      	ldr	r3, [pc, #112]	; (800c11c <HAL_RCC_OscConfig+0x4e8>)
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	699b      	ldr	r3, [r3, #24]
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	d028      	beq.n	800c10a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	d121      	bne.n	800c10a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	d11a      	bne.n	800c10a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c0d4:	68fa      	ldr	r2, [r7, #12]
 800c0d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c0da:	4013      	ands	r3, r2
 800c0dc:	687a      	ldr	r2, [r7, #4]
 800c0de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c0e0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d111      	bne.n	800c10a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0f0:	085b      	lsrs	r3, r3, #1
 800c0f2:	3b01      	subs	r3, #1
 800c0f4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d107      	bne.n	800c10a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c104:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c106:	429a      	cmp	r2, r3
 800c108:	d001      	beq.n	800c10e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800c10a:	2301      	movs	r3, #1
 800c10c:	e000      	b.n	800c110 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800c10e:	2300      	movs	r3, #0
}
 800c110:	4618      	mov	r0, r3
 800c112:	3718      	adds	r7, #24
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}
 800c118:	40007000 	.word	0x40007000
 800c11c:	40023800 	.word	0x40023800
 800c120:	42470060 	.word	0x42470060

0800c124 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b084      	sub	sp, #16
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d101      	bne.n	800c138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c134:	2301      	movs	r3, #1
 800c136:	e0cc      	b.n	800c2d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c138:	4b68      	ldr	r3, [pc, #416]	; (800c2dc <HAL_RCC_ClockConfig+0x1b8>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f003 030f 	and.w	r3, r3, #15
 800c140:	683a      	ldr	r2, [r7, #0]
 800c142:	429a      	cmp	r2, r3
 800c144:	d90c      	bls.n	800c160 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c146:	4b65      	ldr	r3, [pc, #404]	; (800c2dc <HAL_RCC_ClockConfig+0x1b8>)
 800c148:	683a      	ldr	r2, [r7, #0]
 800c14a:	b2d2      	uxtb	r2, r2
 800c14c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c14e:	4b63      	ldr	r3, [pc, #396]	; (800c2dc <HAL_RCC_ClockConfig+0x1b8>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f003 030f 	and.w	r3, r3, #15
 800c156:	683a      	ldr	r2, [r7, #0]
 800c158:	429a      	cmp	r2, r3
 800c15a:	d001      	beq.n	800c160 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c15c:	2301      	movs	r3, #1
 800c15e:	e0b8      	b.n	800c2d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f003 0302 	and.w	r3, r3, #2
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d020      	beq.n	800c1ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f003 0304 	and.w	r3, r3, #4
 800c174:	2b00      	cmp	r3, #0
 800c176:	d005      	beq.n	800c184 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c178:	4b59      	ldr	r3, [pc, #356]	; (800c2e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c17a:	689b      	ldr	r3, [r3, #8]
 800c17c:	4a58      	ldr	r2, [pc, #352]	; (800c2e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c17e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c182:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f003 0308 	and.w	r3, r3, #8
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d005      	beq.n	800c19c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c190:	4b53      	ldr	r3, [pc, #332]	; (800c2e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c192:	689b      	ldr	r3, [r3, #8]
 800c194:	4a52      	ldr	r2, [pc, #328]	; (800c2e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c196:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c19a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c19c:	4b50      	ldr	r3, [pc, #320]	; (800c2e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c19e:	689b      	ldr	r3, [r3, #8]
 800c1a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	689b      	ldr	r3, [r3, #8]
 800c1a8:	494d      	ldr	r1, [pc, #308]	; (800c2e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c1aa:	4313      	orrs	r3, r2
 800c1ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f003 0301 	and.w	r3, r3, #1
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d044      	beq.n	800c244 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	685b      	ldr	r3, [r3, #4]
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	d107      	bne.n	800c1d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c1c2:	4b47      	ldr	r3, [pc, #284]	; (800c2e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d119      	bne.n	800c202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e07f      	b.n	800c2d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	685b      	ldr	r3, [r3, #4]
 800c1d6:	2b02      	cmp	r3, #2
 800c1d8:	d003      	beq.n	800c1e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c1de:	2b03      	cmp	r3, #3
 800c1e0:	d107      	bne.n	800c1f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c1e2:	4b3f      	ldr	r3, [pc, #252]	; (800c2e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d109      	bne.n	800c202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	e06f      	b.n	800c2d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c1f2:	4b3b      	ldr	r3, [pc, #236]	; (800c2e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f003 0302 	and.w	r3, r3, #2
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d101      	bne.n	800c202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c1fe:	2301      	movs	r3, #1
 800c200:	e067      	b.n	800c2d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c202:	4b37      	ldr	r3, [pc, #220]	; (800c2e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c204:	689b      	ldr	r3, [r3, #8]
 800c206:	f023 0203 	bic.w	r2, r3, #3
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	685b      	ldr	r3, [r3, #4]
 800c20e:	4934      	ldr	r1, [pc, #208]	; (800c2e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c210:	4313      	orrs	r3, r2
 800c212:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c214:	f7fd fcc6 	bl	8009ba4 <HAL_GetTick>
 800c218:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c21a:	e00a      	b.n	800c232 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c21c:	f7fd fcc2 	bl	8009ba4 <HAL_GetTick>
 800c220:	4602      	mov	r2, r0
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	1ad3      	subs	r3, r2, r3
 800c226:	f241 3288 	movw	r2, #5000	; 0x1388
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d901      	bls.n	800c232 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c22e:	2303      	movs	r3, #3
 800c230:	e04f      	b.n	800c2d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c232:	4b2b      	ldr	r3, [pc, #172]	; (800c2e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c234:	689b      	ldr	r3, [r3, #8]
 800c236:	f003 020c 	and.w	r2, r3, #12
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	685b      	ldr	r3, [r3, #4]
 800c23e:	009b      	lsls	r3, r3, #2
 800c240:	429a      	cmp	r2, r3
 800c242:	d1eb      	bne.n	800c21c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c244:	4b25      	ldr	r3, [pc, #148]	; (800c2dc <HAL_RCC_ClockConfig+0x1b8>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f003 030f 	and.w	r3, r3, #15
 800c24c:	683a      	ldr	r2, [r7, #0]
 800c24e:	429a      	cmp	r2, r3
 800c250:	d20c      	bcs.n	800c26c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c252:	4b22      	ldr	r3, [pc, #136]	; (800c2dc <HAL_RCC_ClockConfig+0x1b8>)
 800c254:	683a      	ldr	r2, [r7, #0]
 800c256:	b2d2      	uxtb	r2, r2
 800c258:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c25a:	4b20      	ldr	r3, [pc, #128]	; (800c2dc <HAL_RCC_ClockConfig+0x1b8>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f003 030f 	and.w	r3, r3, #15
 800c262:	683a      	ldr	r2, [r7, #0]
 800c264:	429a      	cmp	r2, r3
 800c266:	d001      	beq.n	800c26c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c268:	2301      	movs	r3, #1
 800c26a:	e032      	b.n	800c2d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f003 0304 	and.w	r3, r3, #4
 800c274:	2b00      	cmp	r3, #0
 800c276:	d008      	beq.n	800c28a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c278:	4b19      	ldr	r3, [pc, #100]	; (800c2e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c27a:	689b      	ldr	r3, [r3, #8]
 800c27c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	68db      	ldr	r3, [r3, #12]
 800c284:	4916      	ldr	r1, [pc, #88]	; (800c2e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c286:	4313      	orrs	r3, r2
 800c288:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f003 0308 	and.w	r3, r3, #8
 800c292:	2b00      	cmp	r3, #0
 800c294:	d009      	beq.n	800c2aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c296:	4b12      	ldr	r3, [pc, #72]	; (800c2e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c298:	689b      	ldr	r3, [r3, #8]
 800c29a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	691b      	ldr	r3, [r3, #16]
 800c2a2:	00db      	lsls	r3, r3, #3
 800c2a4:	490e      	ldr	r1, [pc, #56]	; (800c2e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c2aa:	f000 f821 	bl	800c2f0 <HAL_RCC_GetSysClockFreq>
 800c2ae:	4602      	mov	r2, r0
 800c2b0:	4b0b      	ldr	r3, [pc, #44]	; (800c2e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c2b2:	689b      	ldr	r3, [r3, #8]
 800c2b4:	091b      	lsrs	r3, r3, #4
 800c2b6:	f003 030f 	and.w	r3, r3, #15
 800c2ba:	490a      	ldr	r1, [pc, #40]	; (800c2e4 <HAL_RCC_ClockConfig+0x1c0>)
 800c2bc:	5ccb      	ldrb	r3, [r1, r3]
 800c2be:	fa22 f303 	lsr.w	r3, r2, r3
 800c2c2:	4a09      	ldr	r2, [pc, #36]	; (800c2e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c2c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c2c6:	4b09      	ldr	r3, [pc, #36]	; (800c2ec <HAL_RCC_ClockConfig+0x1c8>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7f6 fbd2 	bl	8002a74 <HAL_InitTick>

  return HAL_OK;
 800c2d0:	2300      	movs	r3, #0
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3710      	adds	r7, #16
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}
 800c2da:	bf00      	nop
 800c2dc:	40023c00 	.word	0x40023c00
 800c2e0:	40023800 	.word	0x40023800
 800c2e4:	0801a8dc 	.word	0x0801a8dc
 800c2e8:	20000060 	.word	0x20000060
 800c2ec:	20000088 	.word	0x20000088

0800c2f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c2f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c2f4:	b084      	sub	sp, #16
 800c2f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	607b      	str	r3, [r7, #4]
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	60fb      	str	r3, [r7, #12]
 800c300:	2300      	movs	r3, #0
 800c302:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c304:	2300      	movs	r3, #0
 800c306:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c308:	4b67      	ldr	r3, [pc, #412]	; (800c4a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c30a:	689b      	ldr	r3, [r3, #8]
 800c30c:	f003 030c 	and.w	r3, r3, #12
 800c310:	2b08      	cmp	r3, #8
 800c312:	d00d      	beq.n	800c330 <HAL_RCC_GetSysClockFreq+0x40>
 800c314:	2b08      	cmp	r3, #8
 800c316:	f200 80bd 	bhi.w	800c494 <HAL_RCC_GetSysClockFreq+0x1a4>
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d002      	beq.n	800c324 <HAL_RCC_GetSysClockFreq+0x34>
 800c31e:	2b04      	cmp	r3, #4
 800c320:	d003      	beq.n	800c32a <HAL_RCC_GetSysClockFreq+0x3a>
 800c322:	e0b7      	b.n	800c494 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c324:	4b61      	ldr	r3, [pc, #388]	; (800c4ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c326:	60bb      	str	r3, [r7, #8]
       break;
 800c328:	e0b7      	b.n	800c49a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c32a:	4b60      	ldr	r3, [pc, #384]	; (800c4ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c32c:	60bb      	str	r3, [r7, #8]
      break;
 800c32e:	e0b4      	b.n	800c49a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c330:	4b5d      	ldr	r3, [pc, #372]	; (800c4a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c332:	685b      	ldr	r3, [r3, #4]
 800c334:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c338:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c33a:	4b5b      	ldr	r3, [pc, #364]	; (800c4a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c33c:	685b      	ldr	r3, [r3, #4]
 800c33e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c342:	2b00      	cmp	r3, #0
 800c344:	d04d      	beq.n	800c3e2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c346:	4b58      	ldr	r3, [pc, #352]	; (800c4a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	099b      	lsrs	r3, r3, #6
 800c34c:	461a      	mov	r2, r3
 800c34e:	f04f 0300 	mov.w	r3, #0
 800c352:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c356:	f04f 0100 	mov.w	r1, #0
 800c35a:	ea02 0800 	and.w	r8, r2, r0
 800c35e:	ea03 0901 	and.w	r9, r3, r1
 800c362:	4640      	mov	r0, r8
 800c364:	4649      	mov	r1, r9
 800c366:	f04f 0200 	mov.w	r2, #0
 800c36a:	f04f 0300 	mov.w	r3, #0
 800c36e:	014b      	lsls	r3, r1, #5
 800c370:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c374:	0142      	lsls	r2, r0, #5
 800c376:	4610      	mov	r0, r2
 800c378:	4619      	mov	r1, r3
 800c37a:	ebb0 0008 	subs.w	r0, r0, r8
 800c37e:	eb61 0109 	sbc.w	r1, r1, r9
 800c382:	f04f 0200 	mov.w	r2, #0
 800c386:	f04f 0300 	mov.w	r3, #0
 800c38a:	018b      	lsls	r3, r1, #6
 800c38c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c390:	0182      	lsls	r2, r0, #6
 800c392:	1a12      	subs	r2, r2, r0
 800c394:	eb63 0301 	sbc.w	r3, r3, r1
 800c398:	f04f 0000 	mov.w	r0, #0
 800c39c:	f04f 0100 	mov.w	r1, #0
 800c3a0:	00d9      	lsls	r1, r3, #3
 800c3a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c3a6:	00d0      	lsls	r0, r2, #3
 800c3a8:	4602      	mov	r2, r0
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	eb12 0208 	adds.w	r2, r2, r8
 800c3b0:	eb43 0309 	adc.w	r3, r3, r9
 800c3b4:	f04f 0000 	mov.w	r0, #0
 800c3b8:	f04f 0100 	mov.w	r1, #0
 800c3bc:	0299      	lsls	r1, r3, #10
 800c3be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800c3c2:	0290      	lsls	r0, r2, #10
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	460b      	mov	r3, r1
 800c3c8:	4610      	mov	r0, r2
 800c3ca:	4619      	mov	r1, r3
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	f04f 0300 	mov.w	r3, #0
 800c3d4:	f7f4 fcc8 	bl	8000d68 <__aeabi_uldivmod>
 800c3d8:	4602      	mov	r2, r0
 800c3da:	460b      	mov	r3, r1
 800c3dc:	4613      	mov	r3, r2
 800c3de:	60fb      	str	r3, [r7, #12]
 800c3e0:	e04a      	b.n	800c478 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c3e2:	4b31      	ldr	r3, [pc, #196]	; (800c4a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	099b      	lsrs	r3, r3, #6
 800c3e8:	461a      	mov	r2, r3
 800c3ea:	f04f 0300 	mov.w	r3, #0
 800c3ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c3f2:	f04f 0100 	mov.w	r1, #0
 800c3f6:	ea02 0400 	and.w	r4, r2, r0
 800c3fa:	ea03 0501 	and.w	r5, r3, r1
 800c3fe:	4620      	mov	r0, r4
 800c400:	4629      	mov	r1, r5
 800c402:	f04f 0200 	mov.w	r2, #0
 800c406:	f04f 0300 	mov.w	r3, #0
 800c40a:	014b      	lsls	r3, r1, #5
 800c40c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c410:	0142      	lsls	r2, r0, #5
 800c412:	4610      	mov	r0, r2
 800c414:	4619      	mov	r1, r3
 800c416:	1b00      	subs	r0, r0, r4
 800c418:	eb61 0105 	sbc.w	r1, r1, r5
 800c41c:	f04f 0200 	mov.w	r2, #0
 800c420:	f04f 0300 	mov.w	r3, #0
 800c424:	018b      	lsls	r3, r1, #6
 800c426:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c42a:	0182      	lsls	r2, r0, #6
 800c42c:	1a12      	subs	r2, r2, r0
 800c42e:	eb63 0301 	sbc.w	r3, r3, r1
 800c432:	f04f 0000 	mov.w	r0, #0
 800c436:	f04f 0100 	mov.w	r1, #0
 800c43a:	00d9      	lsls	r1, r3, #3
 800c43c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c440:	00d0      	lsls	r0, r2, #3
 800c442:	4602      	mov	r2, r0
 800c444:	460b      	mov	r3, r1
 800c446:	1912      	adds	r2, r2, r4
 800c448:	eb45 0303 	adc.w	r3, r5, r3
 800c44c:	f04f 0000 	mov.w	r0, #0
 800c450:	f04f 0100 	mov.w	r1, #0
 800c454:	0299      	lsls	r1, r3, #10
 800c456:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800c45a:	0290      	lsls	r0, r2, #10
 800c45c:	4602      	mov	r2, r0
 800c45e:	460b      	mov	r3, r1
 800c460:	4610      	mov	r0, r2
 800c462:	4619      	mov	r1, r3
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	461a      	mov	r2, r3
 800c468:	f04f 0300 	mov.w	r3, #0
 800c46c:	f7f4 fc7c 	bl	8000d68 <__aeabi_uldivmod>
 800c470:	4602      	mov	r2, r0
 800c472:	460b      	mov	r3, r1
 800c474:	4613      	mov	r3, r2
 800c476:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c478:	4b0b      	ldr	r3, [pc, #44]	; (800c4a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c47a:	685b      	ldr	r3, [r3, #4]
 800c47c:	0c1b      	lsrs	r3, r3, #16
 800c47e:	f003 0303 	and.w	r3, r3, #3
 800c482:	3301      	adds	r3, #1
 800c484:	005b      	lsls	r3, r3, #1
 800c486:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c488:	68fa      	ldr	r2, [r7, #12]
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c490:	60bb      	str	r3, [r7, #8]
      break;
 800c492:	e002      	b.n	800c49a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c494:	4b05      	ldr	r3, [pc, #20]	; (800c4ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c496:	60bb      	str	r3, [r7, #8]
      break;
 800c498:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c49a:	68bb      	ldr	r3, [r7, #8]
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3710      	adds	r7, #16
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c4a6:	bf00      	nop
 800c4a8:	40023800 	.word	0x40023800
 800c4ac:	00f42400 	.word	0x00f42400

0800c4b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c4b4:	4b03      	ldr	r3, [pc, #12]	; (800c4c4 <HAL_RCC_GetHCLKFreq+0x14>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c0:	4770      	bx	lr
 800c4c2:	bf00      	nop
 800c4c4:	20000060 	.word	0x20000060

0800c4c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c4cc:	f7ff fff0 	bl	800c4b0 <HAL_RCC_GetHCLKFreq>
 800c4d0:	4602      	mov	r2, r0
 800c4d2:	4b05      	ldr	r3, [pc, #20]	; (800c4e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c4d4:	689b      	ldr	r3, [r3, #8]
 800c4d6:	0a9b      	lsrs	r3, r3, #10
 800c4d8:	f003 0307 	and.w	r3, r3, #7
 800c4dc:	4903      	ldr	r1, [pc, #12]	; (800c4ec <HAL_RCC_GetPCLK1Freq+0x24>)
 800c4de:	5ccb      	ldrb	r3, [r1, r3]
 800c4e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	bd80      	pop	{r7, pc}
 800c4e8:	40023800 	.word	0x40023800
 800c4ec:	0801a8ec 	.word	0x0801a8ec

0800c4f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c4f4:	f7ff ffdc 	bl	800c4b0 <HAL_RCC_GetHCLKFreq>
 800c4f8:	4602      	mov	r2, r0
 800c4fa:	4b05      	ldr	r3, [pc, #20]	; (800c510 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c4fc:	689b      	ldr	r3, [r3, #8]
 800c4fe:	0b5b      	lsrs	r3, r3, #13
 800c500:	f003 0307 	and.w	r3, r3, #7
 800c504:	4903      	ldr	r1, [pc, #12]	; (800c514 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c506:	5ccb      	ldrb	r3, [r1, r3]
 800c508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	bd80      	pop	{r7, pc}
 800c510:	40023800 	.word	0x40023800
 800c514:	0801a8ec 	.word	0x0801a8ec

0800c518 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c518:	b480      	push	{r7}
 800c51a:	b083      	sub	sp, #12
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	220f      	movs	r2, #15
 800c526:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c528:	4b12      	ldr	r3, [pc, #72]	; (800c574 <HAL_RCC_GetClockConfig+0x5c>)
 800c52a:	689b      	ldr	r3, [r3, #8]
 800c52c:	f003 0203 	and.w	r2, r3, #3
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800c534:	4b0f      	ldr	r3, [pc, #60]	; (800c574 <HAL_RCC_GetClockConfig+0x5c>)
 800c536:	689b      	ldr	r3, [r3, #8]
 800c538:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800c540:	4b0c      	ldr	r3, [pc, #48]	; (800c574 <HAL_RCC_GetClockConfig+0x5c>)
 800c542:	689b      	ldr	r3, [r3, #8]
 800c544:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800c54c:	4b09      	ldr	r3, [pc, #36]	; (800c574 <HAL_RCC_GetClockConfig+0x5c>)
 800c54e:	689b      	ldr	r3, [r3, #8]
 800c550:	08db      	lsrs	r3, r3, #3
 800c552:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c55a:	4b07      	ldr	r3, [pc, #28]	; (800c578 <HAL_RCC_GetClockConfig+0x60>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f003 020f 	and.w	r2, r3, #15
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	601a      	str	r2, [r3, #0]
}
 800c566:	bf00      	nop
 800c568:	370c      	adds	r7, #12
 800c56a:	46bd      	mov	sp, r7
 800c56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c570:	4770      	bx	lr
 800c572:	bf00      	nop
 800c574:	40023800 	.word	0x40023800
 800c578:	40023c00 	.word	0x40023c00

0800c57c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b086      	sub	sp, #24
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c584:	2300      	movs	r3, #0
 800c586:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800c588:	2300      	movs	r3, #0
 800c58a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f003 0301 	and.w	r3, r3, #1
 800c594:	2b00      	cmp	r3, #0
 800c596:	d10b      	bne.n	800c5b0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d105      	bne.n	800c5b0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d075      	beq.n	800c69c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c5b0:	4bad      	ldr	r3, [pc, #692]	; (800c868 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c5b6:	f7fd faf5 	bl	8009ba4 <HAL_GetTick>
 800c5ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c5bc:	e008      	b.n	800c5d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c5be:	f7fd faf1 	bl	8009ba4 <HAL_GetTick>
 800c5c2:	4602      	mov	r2, r0
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	1ad3      	subs	r3, r2, r3
 800c5c8:	2b02      	cmp	r3, #2
 800c5ca:	d901      	bls.n	800c5d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c5cc:	2303      	movs	r3, #3
 800c5ce:	e18b      	b.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c5d0:	4ba6      	ldr	r3, [pc, #664]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d1f0      	bne.n	800c5be <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f003 0301 	and.w	r3, r3, #1
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d009      	beq.n	800c5fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	019a      	lsls	r2, r3, #6
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	689b      	ldr	r3, [r3, #8]
 800c5f2:	071b      	lsls	r3, r3, #28
 800c5f4:	499d      	ldr	r1, [pc, #628]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c5f6:	4313      	orrs	r3, r2
 800c5f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f003 0302 	and.w	r3, r3, #2
 800c604:	2b00      	cmp	r3, #0
 800c606:	d01f      	beq.n	800c648 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c608:	4b98      	ldr	r3, [pc, #608]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c60a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c60e:	0f1b      	lsrs	r3, r3, #28
 800c610:	f003 0307 	and.w	r3, r3, #7
 800c614:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	685b      	ldr	r3, [r3, #4]
 800c61a:	019a      	lsls	r2, r3, #6
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	68db      	ldr	r3, [r3, #12]
 800c620:	061b      	lsls	r3, r3, #24
 800c622:	431a      	orrs	r2, r3
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	071b      	lsls	r3, r3, #28
 800c628:	4990      	ldr	r1, [pc, #576]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c62a:	4313      	orrs	r3, r2
 800c62c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c630:	4b8e      	ldr	r3, [pc, #568]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c636:	f023 021f 	bic.w	r2, r3, #31
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	69db      	ldr	r3, [r3, #28]
 800c63e:	3b01      	subs	r3, #1
 800c640:	498a      	ldr	r1, [pc, #552]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c642:	4313      	orrs	r3, r2
 800c644:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c650:	2b00      	cmp	r3, #0
 800c652:	d00d      	beq.n	800c670 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	685b      	ldr	r3, [r3, #4]
 800c658:	019a      	lsls	r2, r3, #6
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	68db      	ldr	r3, [r3, #12]
 800c65e:	061b      	lsls	r3, r3, #24
 800c660:	431a      	orrs	r2, r3
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	689b      	ldr	r3, [r3, #8]
 800c666:	071b      	lsls	r3, r3, #28
 800c668:	4980      	ldr	r1, [pc, #512]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c66a:	4313      	orrs	r3, r2
 800c66c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c670:	4b7d      	ldr	r3, [pc, #500]	; (800c868 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800c672:	2201      	movs	r2, #1
 800c674:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c676:	f7fd fa95 	bl	8009ba4 <HAL_GetTick>
 800c67a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c67c:	e008      	b.n	800c690 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c67e:	f7fd fa91 	bl	8009ba4 <HAL_GetTick>
 800c682:	4602      	mov	r2, r0
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	1ad3      	subs	r3, r2, r3
 800c688:	2b02      	cmp	r3, #2
 800c68a:	d901      	bls.n	800c690 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c68c:	2303      	movs	r3, #3
 800c68e:	e12b      	b.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c690:	4b76      	ldr	r3, [pc, #472]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d0f0      	beq.n	800c67e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f003 0304 	and.w	r3, r3, #4
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d105      	bne.n	800c6b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d079      	beq.n	800c7a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c6b4:	4b6e      	ldr	r3, [pc, #440]	; (800c870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c6ba:	f7fd fa73 	bl	8009ba4 <HAL_GetTick>
 800c6be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c6c0:	e008      	b.n	800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c6c2:	f7fd fa6f 	bl	8009ba4 <HAL_GetTick>
 800c6c6:	4602      	mov	r2, r0
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	1ad3      	subs	r3, r2, r3
 800c6cc:	2b02      	cmp	r3, #2
 800c6ce:	d901      	bls.n	800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c6d0:	2303      	movs	r3, #3
 800c6d2:	e109      	b.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c6d4:	4b65      	ldr	r3, [pc, #404]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6e0:	d0ef      	beq.n	800c6c2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f003 0304 	and.w	r3, r3, #4
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d020      	beq.n	800c730 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c6ee:	4b5f      	ldr	r3, [pc, #380]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c6f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6f4:	0f1b      	lsrs	r3, r3, #28
 800c6f6:	f003 0307 	and.w	r3, r3, #7
 800c6fa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	691b      	ldr	r3, [r3, #16]
 800c700:	019a      	lsls	r2, r3, #6
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	695b      	ldr	r3, [r3, #20]
 800c706:	061b      	lsls	r3, r3, #24
 800c708:	431a      	orrs	r2, r3
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	071b      	lsls	r3, r3, #28
 800c70e:	4957      	ldr	r1, [pc, #348]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c710:	4313      	orrs	r3, r2
 800c712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c716:	4b55      	ldr	r3, [pc, #340]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c71c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6a1b      	ldr	r3, [r3, #32]
 800c724:	3b01      	subs	r3, #1
 800c726:	021b      	lsls	r3, r3, #8
 800c728:	4950      	ldr	r1, [pc, #320]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c72a:	4313      	orrs	r3, r2
 800c72c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f003 0308 	and.w	r3, r3, #8
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d01e      	beq.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c73c:	4b4b      	ldr	r3, [pc, #300]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c73e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c742:	0e1b      	lsrs	r3, r3, #24
 800c744:	f003 030f 	and.w	r3, r3, #15
 800c748:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	691b      	ldr	r3, [r3, #16]
 800c74e:	019a      	lsls	r2, r3, #6
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	061b      	lsls	r3, r3, #24
 800c754:	431a      	orrs	r2, r3
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	699b      	ldr	r3, [r3, #24]
 800c75a:	071b      	lsls	r3, r3, #28
 800c75c:	4943      	ldr	r1, [pc, #268]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c75e:	4313      	orrs	r3, r2
 800c760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c764:	4b41      	ldr	r3, [pc, #260]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c766:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c76a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c772:	493e      	ldr	r1, [pc, #248]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c774:	4313      	orrs	r3, r2
 800c776:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c77a:	4b3d      	ldr	r3, [pc, #244]	; (800c870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c77c:	2201      	movs	r2, #1
 800c77e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c780:	f7fd fa10 	bl	8009ba4 <HAL_GetTick>
 800c784:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c786:	e008      	b.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c788:	f7fd fa0c 	bl	8009ba4 <HAL_GetTick>
 800c78c:	4602      	mov	r2, r0
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	1ad3      	subs	r3, r2, r3
 800c792:	2b02      	cmp	r3, #2
 800c794:	d901      	bls.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c796:	2303      	movs	r3, #3
 800c798:	e0a6      	b.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c79a:	4b34      	ldr	r3, [pc, #208]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c7a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7a6:	d1ef      	bne.n	800c788 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f003 0320 	and.w	r3, r3, #32
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	f000 808d 	beq.w	800c8d0 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	60fb      	str	r3, [r7, #12]
 800c7ba:	4b2c      	ldr	r3, [pc, #176]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c7bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7be:	4a2b      	ldr	r2, [pc, #172]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c7c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c7c4:	6413      	str	r3, [r2, #64]	; 0x40
 800c7c6:	4b29      	ldr	r3, [pc, #164]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c7ce:	60fb      	str	r3, [r7, #12]
 800c7d0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c7d2:	4b28      	ldr	r3, [pc, #160]	; (800c874 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	4a27      	ldr	r2, [pc, #156]	; (800c874 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800c7d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c7dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c7de:	f7fd f9e1 	bl	8009ba4 <HAL_GetTick>
 800c7e2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c7e4:	e008      	b.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c7e6:	f7fd f9dd 	bl	8009ba4 <HAL_GetTick>
 800c7ea:	4602      	mov	r2, r0
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	1ad3      	subs	r3, r2, r3
 800c7f0:	2b02      	cmp	r3, #2
 800c7f2:	d901      	bls.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800c7f4:	2303      	movs	r3, #3
 800c7f6:	e077      	b.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c7f8:	4b1e      	ldr	r3, [pc, #120]	; (800c874 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c800:	2b00      	cmp	r3, #0
 800c802:	d0f0      	beq.n	800c7e6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c804:	4b19      	ldr	r3, [pc, #100]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c808:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c80c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d039      	beq.n	800c888 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c818:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c81c:	693a      	ldr	r2, [r7, #16]
 800c81e:	429a      	cmp	r2, r3
 800c820:	d032      	beq.n	800c888 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c822:	4b12      	ldr	r3, [pc, #72]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c82a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c82c:	4b12      	ldr	r3, [pc, #72]	; (800c878 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800c82e:	2201      	movs	r2, #1
 800c830:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c832:	4b11      	ldr	r3, [pc, #68]	; (800c878 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800c834:	2200      	movs	r2, #0
 800c836:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c838:	4a0c      	ldr	r2, [pc, #48]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c83e:	4b0b      	ldr	r3, [pc, #44]	; (800c86c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c842:	f003 0301 	and.w	r3, r3, #1
 800c846:	2b01      	cmp	r3, #1
 800c848:	d11e      	bne.n	800c888 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c84a:	f7fd f9ab 	bl	8009ba4 <HAL_GetTick>
 800c84e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c850:	e014      	b.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c852:	f7fd f9a7 	bl	8009ba4 <HAL_GetTick>
 800c856:	4602      	mov	r2, r0
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	1ad3      	subs	r3, r2, r3
 800c85c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c860:	4293      	cmp	r3, r2
 800c862:	d90b      	bls.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800c864:	2303      	movs	r3, #3
 800c866:	e03f      	b.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800c868:	42470068 	.word	0x42470068
 800c86c:	40023800 	.word	0x40023800
 800c870:	42470070 	.word	0x42470070
 800c874:	40007000 	.word	0x40007000
 800c878:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c87c:	4b1c      	ldr	r3, [pc, #112]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c87e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c880:	f003 0302 	and.w	r3, r3, #2
 800c884:	2b00      	cmp	r3, #0
 800c886:	d0e4      	beq.n	800c852 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c88c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c890:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c894:	d10d      	bne.n	800c8b2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800c896:	4b16      	ldr	r3, [pc, #88]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c898:	689b      	ldr	r3, [r3, #8]
 800c89a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c8a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c8aa:	4911      	ldr	r1, [pc, #68]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c8ac:	4313      	orrs	r3, r2
 800c8ae:	608b      	str	r3, [r1, #8]
 800c8b0:	e005      	b.n	800c8be <HAL_RCCEx_PeriphCLKConfig+0x342>
 800c8b2:	4b0f      	ldr	r3, [pc, #60]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c8b4:	689b      	ldr	r3, [r3, #8]
 800c8b6:	4a0e      	ldr	r2, [pc, #56]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c8b8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c8bc:	6093      	str	r3, [r2, #8]
 800c8be:	4b0c      	ldr	r3, [pc, #48]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c8c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c8ca:	4909      	ldr	r1, [pc, #36]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c8cc:	4313      	orrs	r3, r2
 800c8ce:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	f003 0310 	and.w	r3, r3, #16
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d004      	beq.n	800c8e6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800c8e2:	4b04      	ldr	r3, [pc, #16]	; (800c8f4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800c8e4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800c8e6:	2300      	movs	r3, #0
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3718      	adds	r7, #24
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}
 800c8f0:	40023800 	.word	0x40023800
 800c8f4:	424711e0 	.word	0x424711e0

0800c8f8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d101      	bne.n	800c90a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800c906:	2301      	movs	r3, #1
 800c908:	e083      	b.n	800ca12 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	7f5b      	ldrb	r3, [r3, #29]
 800c90e:	b2db      	uxtb	r3, r3
 800c910:	2b00      	cmp	r3, #0
 800c912:	d105      	bne.n	800c920 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2200      	movs	r2, #0
 800c918:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f7f5 fd3a 	bl	8002394 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2202      	movs	r2, #2
 800c924:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	22ca      	movs	r2, #202	; 0xca
 800c92c:	625a      	str	r2, [r3, #36]	; 0x24
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	2253      	movs	r2, #83	; 0x53
 800c934:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f000 fc30 	bl	800d19c <RTC_EnterInitMode>
 800c93c:	4603      	mov	r3, r0
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d008      	beq.n	800c954 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	22ff      	movs	r2, #255	; 0xff
 800c948:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2204      	movs	r2, #4
 800c94e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800c950:	2301      	movs	r3, #1
 800c952:	e05e      	b.n	800ca12 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	689b      	ldr	r3, [r3, #8]
 800c95a:	687a      	ldr	r2, [r7, #4]
 800c95c:	6812      	ldr	r2, [r2, #0]
 800c95e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c962:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c966:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	6899      	ldr	r1, [r3, #8]
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	685a      	ldr	r2, [r3, #4]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	691b      	ldr	r3, [r3, #16]
 800c976:	431a      	orrs	r2, r3
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	695b      	ldr	r3, [r3, #20]
 800c97c:	431a      	orrs	r2, r3
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	430a      	orrs	r2, r1
 800c984:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	68d2      	ldr	r2, [r2, #12]
 800c98e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	6919      	ldr	r1, [r3, #16]
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	689b      	ldr	r3, [r3, #8]
 800c99a:	041a      	lsls	r2, r3, #16
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	430a      	orrs	r2, r1
 800c9a2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	68da      	ldr	r2, [r3, #12]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c9b2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	689b      	ldr	r3, [r3, #8]
 800c9ba:	f003 0320 	and.w	r3, r3, #32
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d10e      	bne.n	800c9e0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f000 fbc2 	bl	800d14c <HAL_RTC_WaitForSynchro>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d008      	beq.n	800c9e0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	22ff      	movs	r2, #255	; 0xff
 800c9d4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2204      	movs	r2, #4
 800c9da:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800c9dc:	2301      	movs	r3, #1
 800c9de:	e018      	b.n	800ca12 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c9ee:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	699a      	ldr	r2, [r3, #24]
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	430a      	orrs	r2, r1
 800ca00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	22ff      	movs	r2, #255	; 0xff
 800ca08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800ca10:	2300      	movs	r3, #0
  }
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	3708      	adds	r7, #8
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}

0800ca1a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ca1a:	b590      	push	{r4, r7, lr}
 800ca1c:	b087      	sub	sp, #28
 800ca1e:	af00      	add	r7, sp, #0
 800ca20:	60f8      	str	r0, [r7, #12]
 800ca22:	60b9      	str	r1, [r7, #8]
 800ca24:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800ca26:	2300      	movs	r3, #0
 800ca28:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	7f1b      	ldrb	r3, [r3, #28]
 800ca2e:	2b01      	cmp	r3, #1
 800ca30:	d101      	bne.n	800ca36 <HAL_RTC_SetTime+0x1c>
 800ca32:	2302      	movs	r3, #2
 800ca34:	e0aa      	b.n	800cb8c <HAL_RTC_SetTime+0x172>
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	2201      	movs	r2, #1
 800ca3a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	2202      	movs	r2, #2
 800ca40:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d126      	bne.n	800ca96 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	689b      	ldr	r3, [r3, #8]
 800ca4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d102      	bne.n	800ca5c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	4618      	mov	r0, r3
 800ca62:	f000 fbc7 	bl	800d1f4 <RTC_ByteToBcd2>
 800ca66:	4603      	mov	r3, r0
 800ca68:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	785b      	ldrb	r3, [r3, #1]
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f000 fbc0 	bl	800d1f4 <RTC_ByteToBcd2>
 800ca74:	4603      	mov	r3, r0
 800ca76:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800ca78:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	789b      	ldrb	r3, [r3, #2]
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f000 fbb8 	bl	800d1f4 <RTC_ByteToBcd2>
 800ca84:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800ca86:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	78db      	ldrb	r3, [r3, #3]
 800ca8e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800ca90:	4313      	orrs	r3, r2
 800ca92:	617b      	str	r3, [r7, #20]
 800ca94:	e018      	b.n	800cac8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	689b      	ldr	r3, [r3, #8]
 800ca9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d102      	bne.n	800caaa <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	2200      	movs	r2, #0
 800caa8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	781b      	ldrb	r3, [r3, #0]
 800caae:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	785b      	ldrb	r3, [r3, #1]
 800cab4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800cab6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800cab8:	68ba      	ldr	r2, [r7, #8]
 800caba:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800cabc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	78db      	ldrb	r3, [r3, #3]
 800cac2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800cac4:	4313      	orrs	r3, r2
 800cac6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	22ca      	movs	r2, #202	; 0xca
 800cace:	625a      	str	r2, [r3, #36]	; 0x24
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	2253      	movs	r2, #83	; 0x53
 800cad6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800cad8:	68f8      	ldr	r0, [r7, #12]
 800cada:	f000 fb5f 	bl	800d19c <RTC_EnterInitMode>
 800cade:	4603      	mov	r3, r0
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d00b      	beq.n	800cafc <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	22ff      	movs	r2, #255	; 0xff
 800caea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	2204      	movs	r2, #4
 800caf0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	2200      	movs	r2, #0
 800caf6:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800caf8:	2301      	movs	r3, #1
 800cafa:	e047      	b.n	800cb8c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681a      	ldr	r2, [r3, #0]
 800cb00:	697b      	ldr	r3, [r7, #20]
 800cb02:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800cb06:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800cb0a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	689a      	ldr	r2, [r3, #8]
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800cb1a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	6899      	ldr	r1, [r3, #8]
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	68da      	ldr	r2, [r3, #12]
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	691b      	ldr	r3, [r3, #16]
 800cb2a:	431a      	orrs	r2, r3
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	430a      	orrs	r2, r1
 800cb32:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	68da      	ldr	r2, [r3, #12]
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cb42:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	689b      	ldr	r3, [r3, #8]
 800cb4a:	f003 0320 	and.w	r3, r3, #32
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d111      	bne.n	800cb76 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cb52:	68f8      	ldr	r0, [r7, #12]
 800cb54:	f000 fafa 	bl	800d14c <HAL_RTC_WaitForSynchro>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d00b      	beq.n	800cb76 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	22ff      	movs	r2, #255	; 0xff
 800cb64:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	2204      	movs	r2, #4
 800cb6a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800cb72:	2301      	movs	r3, #1
 800cb74:	e00a      	b.n	800cb8c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	22ff      	movs	r2, #255	; 0xff
 800cb7c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	2201      	movs	r2, #1
 800cb82:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	2200      	movs	r2, #0
 800cb88:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800cb8a:	2300      	movs	r3, #0
  }
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	371c      	adds	r7, #28
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd90      	pop	{r4, r7, pc}

0800cb94 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b086      	sub	sp, #24
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	60f8      	str	r0, [r7, #12]
 800cb9c:	60b9      	str	r1, [r7, #8]
 800cb9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800cba0:	2300      	movs	r3, #0
 800cba2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	691b      	ldr	r3, [r3, #16]
 800cbb4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800cbc6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800cbca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	0c1b      	lsrs	r3, r3, #16
 800cbd0:	b2db      	uxtb	r3, r3
 800cbd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cbd6:	b2da      	uxtb	r2, r3
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	0a1b      	lsrs	r3, r3, #8
 800cbe0:	b2db      	uxtb	r3, r3
 800cbe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbe6:	b2da      	uxtb	r2, r3
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800cbec:	697b      	ldr	r3, [r7, #20]
 800cbee:	b2db      	uxtb	r3, r3
 800cbf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbf4:	b2da      	uxtb	r2, r3
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	0c1b      	lsrs	r3, r3, #16
 800cbfe:	b2db      	uxtb	r3, r3
 800cc00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc04:	b2da      	uxtb	r2, r3
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d11a      	bne.n	800cc46 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	781b      	ldrb	r3, [r3, #0]
 800cc14:	4618      	mov	r0, r3
 800cc16:	f000 fb0b 	bl	800d230 <RTC_Bcd2ToByte>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	785b      	ldrb	r3, [r3, #1]
 800cc26:	4618      	mov	r0, r3
 800cc28:	f000 fb02 	bl	800d230 <RTC_Bcd2ToByte>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	461a      	mov	r2, r3
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	789b      	ldrb	r3, [r3, #2]
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f000 faf9 	bl	800d230 <RTC_Bcd2ToByte>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	461a      	mov	r2, r3
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800cc46:	2300      	movs	r3, #0
}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	3718      	adds	r7, #24
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}

0800cc50 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cc50:	b590      	push	{r4, r7, lr}
 800cc52:	b087      	sub	sp, #28
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	60f8      	str	r0, [r7, #12]
 800cc58:	60b9      	str	r1, [r7, #8]
 800cc5a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	7f1b      	ldrb	r3, [r3, #28]
 800cc64:	2b01      	cmp	r3, #1
 800cc66:	d101      	bne.n	800cc6c <HAL_RTC_SetDate+0x1c>
 800cc68:	2302      	movs	r3, #2
 800cc6a:	e094      	b.n	800cd96 <HAL_RTC_SetDate+0x146>
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	2201      	movs	r2, #1
 800cc70:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	2202      	movs	r2, #2
 800cc76:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d10e      	bne.n	800cc9c <HAL_RTC_SetDate+0x4c>
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	785b      	ldrb	r3, [r3, #1]
 800cc82:	f003 0310 	and.w	r3, r3, #16
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d008      	beq.n	800cc9c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	785b      	ldrb	r3, [r3, #1]
 800cc8e:	f023 0310 	bic.w	r3, r3, #16
 800cc92:	b2db      	uxtb	r3, r3
 800cc94:	330a      	adds	r3, #10
 800cc96:	b2da      	uxtb	r2, r3
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d11c      	bne.n	800ccdc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	78db      	ldrb	r3, [r3, #3]
 800cca6:	4618      	mov	r0, r3
 800cca8:	f000 faa4 	bl	800d1f4 <RTC_ByteToBcd2>
 800ccac:	4603      	mov	r3, r0
 800ccae:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	785b      	ldrb	r3, [r3, #1]
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f000 fa9d 	bl	800d1f4 <RTC_ByteToBcd2>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800ccbe:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	789b      	ldrb	r3, [r3, #2]
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f000 fa95 	bl	800d1f4 <RTC_ByteToBcd2>
 800ccca:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800cccc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	781b      	ldrb	r3, [r3, #0]
 800ccd4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800ccd6:	4313      	orrs	r3, r2
 800ccd8:	617b      	str	r3, [r7, #20]
 800ccda:	e00e      	b.n	800ccfa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	78db      	ldrb	r3, [r3, #3]
 800cce0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	785b      	ldrb	r3, [r3, #1]
 800cce6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800cce8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800ccea:	68ba      	ldr	r2, [r7, #8]
 800ccec:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800ccee:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	781b      	ldrb	r3, [r3, #0]
 800ccf4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800ccf6:	4313      	orrs	r3, r2
 800ccf8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	22ca      	movs	r2, #202	; 0xca
 800cd00:	625a      	str	r2, [r3, #36]	; 0x24
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	2253      	movs	r2, #83	; 0x53
 800cd08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800cd0a:	68f8      	ldr	r0, [r7, #12]
 800cd0c:	f000 fa46 	bl	800d19c <RTC_EnterInitMode>
 800cd10:	4603      	mov	r3, r0
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d00b      	beq.n	800cd2e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	22ff      	movs	r2, #255	; 0xff
 800cd1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	2204      	movs	r2, #4
 800cd22:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	2200      	movs	r2, #0
 800cd28:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	e033      	b.n	800cd96 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	681a      	ldr	r2, [r3, #0]
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cd38:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cd3c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	68da      	ldr	r2, [r3, #12]
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cd4c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	689b      	ldr	r3, [r3, #8]
 800cd54:	f003 0320 	and.w	r3, r3, #32
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d111      	bne.n	800cd80 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cd5c:	68f8      	ldr	r0, [r7, #12]
 800cd5e:	f000 f9f5 	bl	800d14c <HAL_RTC_WaitForSynchro>
 800cd62:	4603      	mov	r3, r0
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d00b      	beq.n	800cd80 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	22ff      	movs	r2, #255	; 0xff
 800cd6e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	2204      	movs	r2, #4
 800cd74:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	e00a      	b.n	800cd96 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	22ff      	movs	r2, #255	; 0xff
 800cd86:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	2200      	movs	r2, #0
 800cd92:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800cd94:	2300      	movs	r3, #0
  }
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	371c      	adds	r7, #28
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd90      	pop	{r4, r7, pc}

0800cd9e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cd9e:	b580      	push	{r7, lr}
 800cda0:	b086      	sub	sp, #24
 800cda2:	af00      	add	r7, sp, #0
 800cda4:	60f8      	str	r0, [r7, #12]
 800cda6:	60b9      	str	r1, [r7, #8]
 800cda8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cdb8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cdbc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800cdbe:	697b      	ldr	r3, [r7, #20]
 800cdc0:	0c1b      	lsrs	r3, r3, #16
 800cdc2:	b2da      	uxtb	r2, r3
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	0a1b      	lsrs	r3, r3, #8
 800cdcc:	b2db      	uxtb	r3, r3
 800cdce:	f003 031f 	and.w	r3, r3, #31
 800cdd2:	b2da      	uxtb	r2, r3
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	b2db      	uxtb	r3, r3
 800cddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cde0:	b2da      	uxtb	r2, r3
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	0b5b      	lsrs	r3, r3, #13
 800cdea:	b2db      	uxtb	r3, r3
 800cdec:	f003 0307 	and.w	r3, r3, #7
 800cdf0:	b2da      	uxtb	r2, r3
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d11a      	bne.n	800ce32 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	78db      	ldrb	r3, [r3, #3]
 800ce00:	4618      	mov	r0, r3
 800ce02:	f000 fa15 	bl	800d230 <RTC_Bcd2ToByte>
 800ce06:	4603      	mov	r3, r0
 800ce08:	461a      	mov	r2, r3
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	785b      	ldrb	r3, [r3, #1]
 800ce12:	4618      	mov	r0, r3
 800ce14:	f000 fa0c 	bl	800d230 <RTC_Bcd2ToByte>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	789b      	ldrb	r3, [r3, #2]
 800ce24:	4618      	mov	r0, r3
 800ce26:	f000 fa03 	bl	800d230 <RTC_Bcd2ToByte>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	461a      	mov	r2, r3
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800ce32:	2300      	movs	r3, #0
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	3718      	adds	r7, #24
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}

0800ce3c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800ce3c:	b590      	push	{r4, r7, lr}
 800ce3e:	b089      	sub	sp, #36	; 0x24
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	60f8      	str	r0, [r7, #12]
 800ce44:	60b9      	str	r1, [r7, #8]
 800ce46:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	61fb      	str	r3, [r7, #28]
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800ce50:	4b93      	ldr	r3, [pc, #588]	; (800d0a0 <HAL_RTC_SetAlarm_IT+0x264>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	4a93      	ldr	r2, [pc, #588]	; (800d0a4 <HAL_RTC_SetAlarm_IT+0x268>)
 800ce56:	fba2 2303 	umull	r2, r3, r2, r3
 800ce5a:	0adb      	lsrs	r3, r3, #11
 800ce5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ce60:	fb02 f303 	mul.w	r3, r2, r3
 800ce64:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	7f1b      	ldrb	r3, [r3, #28]
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	d101      	bne.n	800ce72 <HAL_RTC_SetAlarm_IT+0x36>
 800ce6e:	2302      	movs	r3, #2
 800ce70:	e111      	b.n	800d096 <HAL_RTC_SetAlarm_IT+0x25a>
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	2201      	movs	r2, #1
 800ce76:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2202      	movs	r2, #2
 800ce7c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d137      	bne.n	800cef4 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	689b      	ldr	r3, [r3, #8]
 800ce8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d102      	bne.n	800ce98 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	2200      	movs	r2, #0
 800ce96:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	781b      	ldrb	r3, [r3, #0]
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f000 f9a9 	bl	800d1f4 <RTC_ByteToBcd2>
 800cea2:	4603      	mov	r3, r0
 800cea4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800cea6:	68bb      	ldr	r3, [r7, #8]
 800cea8:	785b      	ldrb	r3, [r3, #1]
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f000 f9a2 	bl	800d1f4 <RTC_ByteToBcd2>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800ceb4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	789b      	ldrb	r3, [r3, #2]
 800ceba:	4618      	mov	r0, r3
 800cebc:	f000 f99a 	bl	800d1f4 <RTC_ByteToBcd2>
 800cec0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800cec2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	78db      	ldrb	r3, [r3, #3]
 800ceca:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800cecc:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ced6:	4618      	mov	r0, r3
 800ced8:	f000 f98c 	bl	800d1f4 <RTC_ByteToBcd2>
 800cedc:	4603      	mov	r3, r0
 800cede:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800cee0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800cee8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800ceee:	4313      	orrs	r3, r2
 800cef0:	61fb      	str	r3, [r7, #28]
 800cef2:	e023      	b.n	800cf3c <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	689b      	ldr	r3, [r3, #8]
 800cefa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d102      	bne.n	800cf08 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	2200      	movs	r2, #0
 800cf06:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	785b      	ldrb	r3, [r3, #1]
 800cf12:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800cf14:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800cf16:	68ba      	ldr	r2, [r7, #8]
 800cf18:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800cf1a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	78db      	ldrb	r3, [r3, #3]
 800cf20:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800cf22:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cf2a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800cf2c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800cf32:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800cf38:	4313      	orrs	r3, r2
 800cf3a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	685a      	ldr	r2, [r3, #4]
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	699b      	ldr	r3, [r3, #24]
 800cf44:	4313      	orrs	r3, r2
 800cf46:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	22ca      	movs	r2, #202	; 0xca
 800cf4e:	625a      	str	r2, [r3, #36]	; 0x24
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	2253      	movs	r2, #83	; 0x53
 800cf56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf60:	d141      	bne.n	800cfe6 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	689a      	ldr	r2, [r3, #8]
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cf70:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	68db      	ldr	r3, [r3, #12]
 800cf78:	b2da      	uxtb	r2, r3
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800cf82:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	1e5a      	subs	r2, r3, #1
 800cf88:	617a      	str	r2, [r7, #20]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d10b      	bne.n	800cfa6 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	22ff      	movs	r2, #255	; 0xff
 800cf94:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2203      	movs	r2, #3
 800cf9a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800cfa2:	2303      	movs	r3, #3
 800cfa4:	e077      	b.n	800d096 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	68db      	ldr	r3, [r3, #12]
 800cfac:	f003 0301 	and.w	r3, r3, #1
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d0e7      	beq.n	800cf84 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	69fa      	ldr	r2, [r7, #28]
 800cfba:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	69ba      	ldr	r2, [r7, #24]
 800cfc2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	689a      	ldr	r2, [r3, #8]
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cfd2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	689a      	ldr	r2, [r3, #8]
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cfe2:	609a      	str	r2, [r3, #8]
 800cfe4:	e040      	b.n	800d068 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	689a      	ldr	r2, [r3, #8]
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800cff4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	68db      	ldr	r3, [r3, #12]
 800cffc:	b2da      	uxtb	r2, r3
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f462 7220 	orn	r2, r2, #640	; 0x280
 800d006:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	1e5a      	subs	r2, r3, #1
 800d00c:	617a      	str	r2, [r7, #20]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d10b      	bne.n	800d02a <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	22ff      	movs	r2, #255	; 0xff
 800d018:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	2203      	movs	r2, #3
 800d01e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2200      	movs	r2, #0
 800d024:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800d026:	2303      	movs	r3, #3
 800d028:	e035      	b.n	800d096 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	68db      	ldr	r3, [r3, #12]
 800d030:	f003 0302 	and.w	r3, r3, #2
 800d034:	2b00      	cmp	r3, #0
 800d036:	d0e7      	beq.n	800d008 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	69fa      	ldr	r2, [r7, #28]
 800d03e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	69ba      	ldr	r2, [r7, #24]
 800d046:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	689a      	ldr	r2, [r3, #8]
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d056:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	689a      	ldr	r2, [r3, #8]
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d066:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800d068:	4b0f      	ldr	r3, [pc, #60]	; (800d0a8 <HAL_RTC_SetAlarm_IT+0x26c>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	4a0e      	ldr	r2, [pc, #56]	; (800d0a8 <HAL_RTC_SetAlarm_IT+0x26c>)
 800d06e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d072:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 800d074:	4b0c      	ldr	r3, [pc, #48]	; (800d0a8 <HAL_RTC_SetAlarm_IT+0x26c>)
 800d076:	689b      	ldr	r3, [r3, #8]
 800d078:	4a0b      	ldr	r2, [pc, #44]	; (800d0a8 <HAL_RTC_SetAlarm_IT+0x26c>)
 800d07a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d07e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	22ff      	movs	r2, #255	; 0xff
 800d086:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2201      	movs	r2, #1
 800d08c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	2200      	movs	r2, #0
 800d092:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800d094:	2300      	movs	r3, #0
}
 800d096:	4618      	mov	r0, r3
 800d098:	3724      	adds	r7, #36	; 0x24
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd90      	pop	{r4, r7, pc}
 800d09e:	bf00      	nop
 800d0a0:	20000060 	.word	0x20000060
 800d0a4:	10624dd3 	.word	0x10624dd3
 800d0a8:	40013c00 	.word	0x40013c00

0800d0ac <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b082      	sub	sp, #8
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	689b      	ldr	r3, [r3, #8]
 800d0ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d012      	beq.n	800d0e8 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	68db      	ldr	r3, [r3, #12]
 800d0c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d00b      	beq.n	800d0e8 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f000 f831 	bl	800d138 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	68db      	ldr	r3, [r3, #12]
 800d0dc:	b2da      	uxtb	r2, r3
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800d0e6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	689b      	ldr	r3, [r3, #8]
 800d0ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d012      	beq.n	800d11c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	68db      	ldr	r3, [r3, #12]
 800d0fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d100:	2b00      	cmp	r3, #0
 800d102:	d00b      	beq.n	800d11c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f000 f9fb 	bl	800d500 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	68db      	ldr	r3, [r3, #12]
 800d110:	b2da      	uxtb	r2, r3
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f462 7220 	orn	r2, r2, #640	; 0x280
 800d11a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800d11c:	4b05      	ldr	r3, [pc, #20]	; (800d134 <HAL_RTC_AlarmIRQHandler+0x88>)
 800d11e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d122:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2201      	movs	r2, #1
 800d128:	775a      	strb	r2, [r3, #29]
}
 800d12a:	bf00      	nop
 800d12c:	3708      	adds	r7, #8
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}
 800d132:	bf00      	nop
 800d134:	40013c00 	.word	0x40013c00

0800d138 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800d138:	b480      	push	{r7}
 800d13a:	b083      	sub	sp, #12
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800d140:	bf00      	nop
 800d142:	370c      	adds	r7, #12
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr

0800d14c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b084      	sub	sp, #16
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d154:	2300      	movs	r3, #0
 800d156:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	68da      	ldr	r2, [r3, #12]
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d166:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d168:	f7fc fd1c 	bl	8009ba4 <HAL_GetTick>
 800d16c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d16e:	e009      	b.n	800d184 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d170:	f7fc fd18 	bl	8009ba4 <HAL_GetTick>
 800d174:	4602      	mov	r2, r0
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	1ad3      	subs	r3, r2, r3
 800d17a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d17e:	d901      	bls.n	800d184 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800d180:	2303      	movs	r3, #3
 800d182:	e007      	b.n	800d194 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	68db      	ldr	r3, [r3, #12]
 800d18a:	f003 0320 	and.w	r3, r3, #32
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d0ee      	beq.n	800d170 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800d192:	2300      	movs	r3, #0
}
 800d194:	4618      	mov	r0, r3
 800d196:	3710      	adds	r7, #16
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}

0800d19c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b084      	sub	sp, #16
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	68db      	ldr	r3, [r3, #12]
 800d1ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d119      	bne.n	800d1ea <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f04f 32ff 	mov.w	r2, #4294967295
 800d1be:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d1c0:	f7fc fcf0 	bl	8009ba4 <HAL_GetTick>
 800d1c4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d1c6:	e009      	b.n	800d1dc <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d1c8:	f7fc fcec 	bl	8009ba4 <HAL_GetTick>
 800d1cc:	4602      	mov	r2, r0
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	1ad3      	subs	r3, r2, r3
 800d1d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d1d6:	d901      	bls.n	800d1dc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800d1d8:	2303      	movs	r3, #3
 800d1da:	e007      	b.n	800d1ec <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	68db      	ldr	r3, [r3, #12]
 800d1e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d0ee      	beq.n	800d1c8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800d1ea:	2300      	movs	r3, #0
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3710      	adds	r7, #16
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}

0800d1f4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	b085      	sub	sp, #20
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800d1fe:	2300      	movs	r3, #0
 800d200:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800d202:	e005      	b.n	800d210 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	3301      	adds	r3, #1
 800d208:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800d20a:	79fb      	ldrb	r3, [r7, #7]
 800d20c:	3b0a      	subs	r3, #10
 800d20e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800d210:	79fb      	ldrb	r3, [r7, #7]
 800d212:	2b09      	cmp	r3, #9
 800d214:	d8f6      	bhi.n	800d204 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	b2db      	uxtb	r3, r3
 800d21a:	011b      	lsls	r3, r3, #4
 800d21c:	b2da      	uxtb	r2, r3
 800d21e:	79fb      	ldrb	r3, [r7, #7]
 800d220:	4313      	orrs	r3, r2
 800d222:	b2db      	uxtb	r3, r3
}
 800d224:	4618      	mov	r0, r3
 800d226:	3714      	adds	r7, #20
 800d228:	46bd      	mov	sp, r7
 800d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22e:	4770      	bx	lr

0800d230 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800d230:	b480      	push	{r7}
 800d232:	b085      	sub	sp, #20
 800d234:	af00      	add	r7, sp, #0
 800d236:	4603      	mov	r3, r0
 800d238:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800d23a:	2300      	movs	r3, #0
 800d23c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800d23e:	79fb      	ldrb	r3, [r7, #7]
 800d240:	091b      	lsrs	r3, r3, #4
 800d242:	b2db      	uxtb	r3, r3
 800d244:	461a      	mov	r2, r3
 800d246:	4613      	mov	r3, r2
 800d248:	009b      	lsls	r3, r3, #2
 800d24a:	4413      	add	r3, r2
 800d24c:	005b      	lsls	r3, r3, #1
 800d24e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800d250:	79fb      	ldrb	r3, [r7, #7]
 800d252:	f003 030f 	and.w	r3, r3, #15
 800d256:	b2da      	uxtb	r2, r3
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	b2db      	uxtb	r3, r3
 800d25c:	4413      	add	r3, r2
 800d25e:	b2db      	uxtb	r3, r3
}
 800d260:	4618      	mov	r0, r3
 800d262:	3714      	adds	r7, #20
 800d264:	46bd      	mov	sp, r7
 800d266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26a:	4770      	bx	lr

0800d26c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800d26c:	b480      	push	{r7}
 800d26e:	b087      	sub	sp, #28
 800d270:	af00      	add	r7, sp, #0
 800d272:	60f8      	str	r0, [r7, #12]
 800d274:	60b9      	str	r1, [r7, #8]
 800d276:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	7f1b      	ldrb	r3, [r3, #28]
 800d27c:	2b01      	cmp	r3, #1
 800d27e:	d101      	bne.n	800d284 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 800d280:	2302      	movs	r3, #2
 800d282:	e0a6      	b.n	800d3d2 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	2201      	movs	r2, #1
 800d288:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	2202      	movs	r2, #2
 800d28e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	22ca      	movs	r2, #202	; 0xca
 800d296:	625a      	str	r2, [r3, #36]	; 0x24
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	2253      	movs	r2, #83	; 0x53
 800d29e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	689b      	ldr	r3, [r3, #8]
 800d2a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d022      	beq.n	800d2f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800d2ae:	4b4c      	ldr	r3, [pc, #304]	; (800d3e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	4a4c      	ldr	r2, [pc, #304]	; (800d3e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800d2b4:	fba2 2303 	umull	r2, r3, r2, r3
 800d2b8:	0adb      	lsrs	r3, r3, #11
 800d2ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d2be:	fb02 f303 	mul.w	r3, r2, r3
 800d2c2:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	1e5a      	subs	r2, r3, #1
 800d2c8:	617a      	str	r2, [r7, #20]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d10b      	bne.n	800d2e6 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	22ff      	movs	r2, #255	; 0xff
 800d2d4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	2203      	movs	r2, #3
 800d2da:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800d2e2:	2303      	movs	r3, #3
 800d2e4:	e075      	b.n	800d3d2 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	68db      	ldr	r3, [r3, #12]
 800d2ec:	f003 0304 	and.w	r3, r3, #4
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d1e7      	bne.n	800d2c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	689a      	ldr	r2, [r3, #8]
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d302:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800d304:	4b36      	ldr	r3, [pc, #216]	; (800d3e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	4a36      	ldr	r2, [pc, #216]	; (800d3e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800d30a:	fba2 2303 	umull	r2, r3, r2, r3
 800d30e:	0adb      	lsrs	r3, r3, #11
 800d310:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d314:	fb02 f303 	mul.w	r3, r2, r3
 800d318:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 800d31a:	697b      	ldr	r3, [r7, #20]
 800d31c:	1e5a      	subs	r2, r3, #1
 800d31e:	617a      	str	r2, [r7, #20]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d10b      	bne.n	800d33c <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	22ff      	movs	r2, #255	; 0xff
 800d32a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	2203      	movs	r2, #3
 800d330:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	2200      	movs	r2, #0
 800d336:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800d338:	2303      	movs	r3, #3
 800d33a:	e04a      	b.n	800d3d2 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	68db      	ldr	r3, [r3, #12]
 800d342:	f003 0304 	and.w	r3, r3, #4
 800d346:	2b00      	cmp	r3, #0
 800d348:	d0e7      	beq.n	800d31a <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	68ba      	ldr	r2, [r7, #8]
 800d350:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	689a      	ldr	r2, [r3, #8]
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	f022 0207 	bic.w	r2, r2, #7
 800d360:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	6899      	ldr	r1, [r3, #8]
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	687a      	ldr	r2, [r7, #4]
 800d36e:	430a      	orrs	r2, r1
 800d370:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800d372:	4b1d      	ldr	r3, [pc, #116]	; (800d3e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	4a1c      	ldr	r2, [pc, #112]	; (800d3e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800d378:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d37c:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800d37e:	4b1a      	ldr	r3, [pc, #104]	; (800d3e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800d380:	689b      	ldr	r3, [r3, #8]
 800d382:	4a19      	ldr	r2, [pc, #100]	; (800d3e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800d384:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d388:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	68db      	ldr	r3, [r3, #12]
 800d390:	b2da      	uxtb	r2, r3
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800d39a:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	689a      	ldr	r2, [r3, #8]
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d3aa:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	689a      	ldr	r2, [r3, #8]
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d3ba:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	22ff      	movs	r2, #255	; 0xff
 800d3c2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800d3d0:	2300      	movs	r3, #0
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	371c      	adds	r7, #28
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3dc:	4770      	bx	lr
 800d3de:	bf00      	nop
 800d3e0:	20000060 	.word	0x20000060
 800d3e4:	10624dd3 	.word	0x10624dd3
 800d3e8:	40013c00 	.word	0x40013c00

0800d3ec <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b084      	sub	sp, #16
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	7f1b      	ldrb	r3, [r3, #28]
 800d3fc:	2b01      	cmp	r3, #1
 800d3fe:	d101      	bne.n	800d404 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 800d400:	2302      	movs	r3, #2
 800d402:	e047      	b.n	800d494 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2201      	movs	r2, #1
 800d408:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2202      	movs	r2, #2
 800d40e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	22ca      	movs	r2, #202	; 0xca
 800d416:	625a      	str	r2, [r3, #36]	; 0x24
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	2253      	movs	r2, #83	; 0x53
 800d41e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	689a      	ldr	r2, [r3, #8]
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d42e:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	689a      	ldr	r2, [r3, #8]
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d43e:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d440:	f7fc fbb0 	bl	8009ba4 <HAL_GetTick>
 800d444:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800d446:	e013      	b.n	800d470 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d448:	f7fc fbac 	bl	8009ba4 <HAL_GetTick>
 800d44c:	4602      	mov	r2, r0
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	1ad3      	subs	r3, r2, r3
 800d452:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d456:	d90b      	bls.n	800d470 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	22ff      	movs	r2, #255	; 0xff
 800d45e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2203      	movs	r2, #3
 800d464:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2200      	movs	r2, #0
 800d46a:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800d46c:	2303      	movs	r3, #3
 800d46e:	e011      	b.n	800d494 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	68db      	ldr	r3, [r3, #12]
 800d476:	f003 0304 	and.w	r3, r3, #4
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d0e4      	beq.n	800d448 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	22ff      	movs	r2, #255	; 0xff
 800d484:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2201      	movs	r2, #1
 800d48a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2200      	movs	r2, #0
 800d490:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800d492:	2300      	movs	r3, #0
}
 800d494:	4618      	mov	r0, r3
 800d496:	3710      	adds	r7, #16
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}

0800d49c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800d49c:	b480      	push	{r7}
 800d49e:	b087      	sub	sp, #28
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	60f8      	str	r0, [r7, #12]
 800d4a4:	60b9      	str	r1, [r7, #8]
 800d4a6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	3350      	adds	r3, #80	; 0x50
 800d4b2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	009b      	lsls	r3, r3, #2
 800d4b8:	697a      	ldr	r2, [r7, #20]
 800d4ba:	4413      	add	r3, r2
 800d4bc:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	687a      	ldr	r2, [r7, #4]
 800d4c2:	601a      	str	r2, [r3, #0]
}
 800d4c4:	bf00      	nop
 800d4c6:	371c      	adds	r7, #28
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ce:	4770      	bx	lr

0800d4d0 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	b085      	sub	sp, #20
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
 800d4d8:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	3350      	adds	r3, #80	; 0x50
 800d4e4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	009b      	lsls	r3, r3, #2
 800d4ea:	68fa      	ldr	r2, [r7, #12]
 800d4ec:	4413      	add	r3, r2
 800d4ee:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	681b      	ldr	r3, [r3, #0]
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	3714      	adds	r7, #20
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr

0800d500 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800d500:	b480      	push	{r7}
 800d502:	b083      	sub	sp, #12
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 800d508:	bf00      	nop
 800d50a:	370c      	adds	r7, #12
 800d50c:	46bd      	mov	sp, r7
 800d50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d512:	4770      	bx	lr

0800d514 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b082      	sub	sp, #8
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d101      	bne.n	800d526 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d522:	2301      	movs	r3, #1
 800d524:	e07b      	b.n	800d61e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d108      	bne.n	800d540 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	685b      	ldr	r3, [r3, #4]
 800d532:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d536:	d009      	beq.n	800d54c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2200      	movs	r2, #0
 800d53c:	61da      	str	r2, [r3, #28]
 800d53e:	e005      	b.n	800d54c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2200      	movs	r2, #0
 800d544:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2200      	movs	r2, #0
 800d54a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2200      	movs	r2, #0
 800d550:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d558:	b2db      	uxtb	r3, r3
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d106      	bne.n	800d56c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2200      	movs	r2, #0
 800d562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f7f5 f9a2 	bl	80028b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2202      	movs	r2, #2
 800d570:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	681a      	ldr	r2, [r3, #0]
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d582:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	685b      	ldr	r3, [r3, #4]
 800d588:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	689b      	ldr	r3, [r3, #8]
 800d590:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d594:	431a      	orrs	r2, r3
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	68db      	ldr	r3, [r3, #12]
 800d59a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d59e:	431a      	orrs	r2, r3
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	691b      	ldr	r3, [r3, #16]
 800d5a4:	f003 0302 	and.w	r3, r3, #2
 800d5a8:	431a      	orrs	r2, r3
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	695b      	ldr	r3, [r3, #20]
 800d5ae:	f003 0301 	and.w	r3, r3, #1
 800d5b2:	431a      	orrs	r2, r3
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	699b      	ldr	r3, [r3, #24]
 800d5b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d5bc:	431a      	orrs	r2, r3
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	69db      	ldr	r3, [r3, #28]
 800d5c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d5c6:	431a      	orrs	r2, r3
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6a1b      	ldr	r3, [r3, #32]
 800d5cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5d0:	ea42 0103 	orr.w	r1, r2, r3
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	430a      	orrs	r2, r1
 800d5e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	699b      	ldr	r3, [r3, #24]
 800d5e8:	0c1b      	lsrs	r3, r3, #16
 800d5ea:	f003 0104 	and.w	r1, r3, #4
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5f2:	f003 0210 	and.w	r2, r3, #16
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	430a      	orrs	r2, r1
 800d5fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	69da      	ldr	r2, [r3, #28]
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d60c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2200      	movs	r2, #0
 800d612:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2201      	movs	r2, #1
 800d618:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800d61c:	2300      	movs	r3, #0
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3708      	adds	r7, #8
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}

0800d626 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d626:	b580      	push	{r7, lr}
 800d628:	b088      	sub	sp, #32
 800d62a:	af00      	add	r7, sp, #0
 800d62c:	60f8      	str	r0, [r7, #12]
 800d62e:	60b9      	str	r1, [r7, #8]
 800d630:	603b      	str	r3, [r7, #0]
 800d632:	4613      	mov	r3, r2
 800d634:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d636:	2300      	movs	r3, #0
 800d638:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d640:	2b01      	cmp	r3, #1
 800d642:	d101      	bne.n	800d648 <HAL_SPI_Transmit+0x22>
 800d644:	2302      	movs	r3, #2
 800d646:	e126      	b.n	800d896 <HAL_SPI_Transmit+0x270>
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	2201      	movs	r2, #1
 800d64c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d650:	f7fc faa8 	bl	8009ba4 <HAL_GetTick>
 800d654:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d656:	88fb      	ldrh	r3, [r7, #6]
 800d658:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d660:	b2db      	uxtb	r3, r3
 800d662:	2b01      	cmp	r3, #1
 800d664:	d002      	beq.n	800d66c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d666:	2302      	movs	r3, #2
 800d668:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d66a:	e10b      	b.n	800d884 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d002      	beq.n	800d678 <HAL_SPI_Transmit+0x52>
 800d672:	88fb      	ldrh	r3, [r7, #6]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d102      	bne.n	800d67e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d678:	2301      	movs	r3, #1
 800d67a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d67c:	e102      	b.n	800d884 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	2203      	movs	r2, #3
 800d682:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	2200      	movs	r2, #0
 800d68a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	68ba      	ldr	r2, [r7, #8]
 800d690:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	88fa      	ldrh	r2, [r7, #6]
 800d696:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	88fa      	ldrh	r2, [r7, #6]
 800d69c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	689b      	ldr	r3, [r3, #8]
 800d6c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d6c4:	d10f      	bne.n	800d6e6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	681a      	ldr	r2, [r3, #0]
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d6d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	681a      	ldr	r2, [r3, #0]
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d6e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6f0:	2b40      	cmp	r3, #64	; 0x40
 800d6f2:	d007      	beq.n	800d704 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	681a      	ldr	r2, [r3, #0]
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d702:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	68db      	ldr	r3, [r3, #12]
 800d708:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d70c:	d14b      	bne.n	800d7a6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	685b      	ldr	r3, [r3, #4]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d002      	beq.n	800d71c <HAL_SPI_Transmit+0xf6>
 800d716:	8afb      	ldrh	r3, [r7, #22]
 800d718:	2b01      	cmp	r3, #1
 800d71a:	d13e      	bne.n	800d79a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d720:	881a      	ldrh	r2, [r3, #0]
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d72c:	1c9a      	adds	r2, r3, #2
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d736:	b29b      	uxth	r3, r3
 800d738:	3b01      	subs	r3, #1
 800d73a:	b29a      	uxth	r2, r3
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d740:	e02b      	b.n	800d79a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	689b      	ldr	r3, [r3, #8]
 800d748:	f003 0302 	and.w	r3, r3, #2
 800d74c:	2b02      	cmp	r3, #2
 800d74e:	d112      	bne.n	800d776 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d754:	881a      	ldrh	r2, [r3, #0]
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d760:	1c9a      	adds	r2, r3, #2
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d76a:	b29b      	uxth	r3, r3
 800d76c:	3b01      	subs	r3, #1
 800d76e:	b29a      	uxth	r2, r3
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	86da      	strh	r2, [r3, #54]	; 0x36
 800d774:	e011      	b.n	800d79a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d776:	f7fc fa15 	bl	8009ba4 <HAL_GetTick>
 800d77a:	4602      	mov	r2, r0
 800d77c:	69bb      	ldr	r3, [r7, #24]
 800d77e:	1ad3      	subs	r3, r2, r3
 800d780:	683a      	ldr	r2, [r7, #0]
 800d782:	429a      	cmp	r2, r3
 800d784:	d803      	bhi.n	800d78e <HAL_SPI_Transmit+0x168>
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d78c:	d102      	bne.n	800d794 <HAL_SPI_Transmit+0x16e>
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d102      	bne.n	800d79a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800d794:	2303      	movs	r3, #3
 800d796:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d798:	e074      	b.n	800d884 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d79e:	b29b      	uxth	r3, r3
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d1ce      	bne.n	800d742 <HAL_SPI_Transmit+0x11c>
 800d7a4:	e04c      	b.n	800d840 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	685b      	ldr	r3, [r3, #4]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d002      	beq.n	800d7b4 <HAL_SPI_Transmit+0x18e>
 800d7ae:	8afb      	ldrh	r3, [r7, #22]
 800d7b0:	2b01      	cmp	r3, #1
 800d7b2:	d140      	bne.n	800d836 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	330c      	adds	r3, #12
 800d7be:	7812      	ldrb	r2, [r2, #0]
 800d7c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7c6:	1c5a      	adds	r2, r3, #1
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d7d0:	b29b      	uxth	r3, r3
 800d7d2:	3b01      	subs	r3, #1
 800d7d4:	b29a      	uxth	r2, r3
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800d7da:	e02c      	b.n	800d836 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	689b      	ldr	r3, [r3, #8]
 800d7e2:	f003 0302 	and.w	r3, r3, #2
 800d7e6:	2b02      	cmp	r3, #2
 800d7e8:	d113      	bne.n	800d812 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	330c      	adds	r3, #12
 800d7f4:	7812      	ldrb	r2, [r2, #0]
 800d7f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7fc:	1c5a      	adds	r2, r3, #1
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d806:	b29b      	uxth	r3, r3
 800d808:	3b01      	subs	r3, #1
 800d80a:	b29a      	uxth	r2, r3
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	86da      	strh	r2, [r3, #54]	; 0x36
 800d810:	e011      	b.n	800d836 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d812:	f7fc f9c7 	bl	8009ba4 <HAL_GetTick>
 800d816:	4602      	mov	r2, r0
 800d818:	69bb      	ldr	r3, [r7, #24]
 800d81a:	1ad3      	subs	r3, r2, r3
 800d81c:	683a      	ldr	r2, [r7, #0]
 800d81e:	429a      	cmp	r2, r3
 800d820:	d803      	bhi.n	800d82a <HAL_SPI_Transmit+0x204>
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d828:	d102      	bne.n	800d830 <HAL_SPI_Transmit+0x20a>
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d102      	bne.n	800d836 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800d830:	2303      	movs	r3, #3
 800d832:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d834:	e026      	b.n	800d884 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d83a:	b29b      	uxth	r3, r3
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d1cd      	bne.n	800d7dc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d840:	69ba      	ldr	r2, [r7, #24]
 800d842:	6839      	ldr	r1, [r7, #0]
 800d844:	68f8      	ldr	r0, [r7, #12]
 800d846:	f000 fbcb 	bl	800dfe0 <SPI_EndRxTxTransaction>
 800d84a:	4603      	mov	r3, r0
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d002      	beq.n	800d856 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	2220      	movs	r2, #32
 800d854:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	689b      	ldr	r3, [r3, #8]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d10a      	bne.n	800d874 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d85e:	2300      	movs	r3, #0
 800d860:	613b      	str	r3, [r7, #16]
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	68db      	ldr	r3, [r3, #12]
 800d868:	613b      	str	r3, [r7, #16]
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	689b      	ldr	r3, [r3, #8]
 800d870:	613b      	str	r3, [r7, #16]
 800d872:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d002      	beq.n	800d882 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800d87c:	2301      	movs	r3, #1
 800d87e:	77fb      	strb	r3, [r7, #31]
 800d880:	e000      	b.n	800d884 <HAL_SPI_Transmit+0x25e>
  }

error:
 800d882:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	2201      	movs	r2, #1
 800d888:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	2200      	movs	r2, #0
 800d890:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d894:	7ffb      	ldrb	r3, [r7, #31]
}
 800d896:	4618      	mov	r0, r3
 800d898:	3720      	adds	r7, #32
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}

0800d89e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d89e:	b580      	push	{r7, lr}
 800d8a0:	b088      	sub	sp, #32
 800d8a2:	af02      	add	r7, sp, #8
 800d8a4:	60f8      	str	r0, [r7, #12]
 800d8a6:	60b9      	str	r1, [r7, #8]
 800d8a8:	603b      	str	r3, [r7, #0]
 800d8aa:	4613      	mov	r3, r2
 800d8ac:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	685b      	ldr	r3, [r3, #4]
 800d8b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d8ba:	d112      	bne.n	800d8e2 <HAL_SPI_Receive+0x44>
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	689b      	ldr	r3, [r3, #8]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d10e      	bne.n	800d8e2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	2204      	movs	r2, #4
 800d8c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d8cc:	88fa      	ldrh	r2, [r7, #6]
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	9300      	str	r3, [sp, #0]
 800d8d2:	4613      	mov	r3, r2
 800d8d4:	68ba      	ldr	r2, [r7, #8]
 800d8d6:	68b9      	ldr	r1, [r7, #8]
 800d8d8:	68f8      	ldr	r0, [r7, #12]
 800d8da:	f000 f8f1 	bl	800dac0 <HAL_SPI_TransmitReceive>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	e0ea      	b.n	800dab8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d8e8:	2b01      	cmp	r3, #1
 800d8ea:	d101      	bne.n	800d8f0 <HAL_SPI_Receive+0x52>
 800d8ec:	2302      	movs	r3, #2
 800d8ee:	e0e3      	b.n	800dab8 <HAL_SPI_Receive+0x21a>
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	2201      	movs	r2, #1
 800d8f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d8f8:	f7fc f954 	bl	8009ba4 <HAL_GetTick>
 800d8fc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d904:	b2db      	uxtb	r3, r3
 800d906:	2b01      	cmp	r3, #1
 800d908:	d002      	beq.n	800d910 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800d90a:	2302      	movs	r3, #2
 800d90c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d90e:	e0ca      	b.n	800daa6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d002      	beq.n	800d91c <HAL_SPI_Receive+0x7e>
 800d916:	88fb      	ldrh	r3, [r7, #6]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d102      	bne.n	800d922 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800d91c:	2301      	movs	r3, #1
 800d91e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d920:	e0c1      	b.n	800daa6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	2204      	movs	r2, #4
 800d926:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	2200      	movs	r2, #0
 800d92e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	68ba      	ldr	r2, [r7, #8]
 800d934:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	88fa      	ldrh	r2, [r7, #6]
 800d93a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	88fa      	ldrh	r2, [r7, #6]
 800d940:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	2200      	movs	r2, #0
 800d946:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	2200      	movs	r2, #0
 800d94c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	2200      	movs	r2, #0
 800d952:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	2200      	movs	r2, #0
 800d958:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2200      	movs	r2, #0
 800d95e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	689b      	ldr	r3, [r3, #8]
 800d964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d968:	d10f      	bne.n	800d98a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	681a      	ldr	r2, [r3, #0]
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d978:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	681a      	ldr	r2, [r3, #0]
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d988:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d994:	2b40      	cmp	r3, #64	; 0x40
 800d996:	d007      	beq.n	800d9a8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	681a      	ldr	r2, [r3, #0]
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d9a6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	68db      	ldr	r3, [r3, #12]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d162      	bne.n	800da76 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800d9b0:	e02e      	b.n	800da10 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	689b      	ldr	r3, [r3, #8]
 800d9b8:	f003 0301 	and.w	r3, r3, #1
 800d9bc:	2b01      	cmp	r3, #1
 800d9be:	d115      	bne.n	800d9ec <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	f103 020c 	add.w	r2, r3, #12
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9cc:	7812      	ldrb	r2, [r2, #0]
 800d9ce:	b2d2      	uxtb	r2, r2
 800d9d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9d6:	1c5a      	adds	r2, r3, #1
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d9e0:	b29b      	uxth	r3, r3
 800d9e2:	3b01      	subs	r3, #1
 800d9e4:	b29a      	uxth	r2, r3
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d9ea:	e011      	b.n	800da10 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d9ec:	f7fc f8da 	bl	8009ba4 <HAL_GetTick>
 800d9f0:	4602      	mov	r2, r0
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	1ad3      	subs	r3, r2, r3
 800d9f6:	683a      	ldr	r2, [r7, #0]
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	d803      	bhi.n	800da04 <HAL_SPI_Receive+0x166>
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da02:	d102      	bne.n	800da0a <HAL_SPI_Receive+0x16c>
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d102      	bne.n	800da10 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800da0a:	2303      	movs	r3, #3
 800da0c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800da0e:	e04a      	b.n	800daa6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da14:	b29b      	uxth	r3, r3
 800da16:	2b00      	cmp	r3, #0
 800da18:	d1cb      	bne.n	800d9b2 <HAL_SPI_Receive+0x114>
 800da1a:	e031      	b.n	800da80 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	689b      	ldr	r3, [r3, #8]
 800da22:	f003 0301 	and.w	r3, r3, #1
 800da26:	2b01      	cmp	r3, #1
 800da28:	d113      	bne.n	800da52 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	68da      	ldr	r2, [r3, #12]
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da34:	b292      	uxth	r2, r2
 800da36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da3c:	1c9a      	adds	r2, r3, #2
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da46:	b29b      	uxth	r3, r3
 800da48:	3b01      	subs	r3, #1
 800da4a:	b29a      	uxth	r2, r3
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800da50:	e011      	b.n	800da76 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da52:	f7fc f8a7 	bl	8009ba4 <HAL_GetTick>
 800da56:	4602      	mov	r2, r0
 800da58:	693b      	ldr	r3, [r7, #16]
 800da5a:	1ad3      	subs	r3, r2, r3
 800da5c:	683a      	ldr	r2, [r7, #0]
 800da5e:	429a      	cmp	r2, r3
 800da60:	d803      	bhi.n	800da6a <HAL_SPI_Receive+0x1cc>
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da68:	d102      	bne.n	800da70 <HAL_SPI_Receive+0x1d2>
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d102      	bne.n	800da76 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800da70:	2303      	movs	r3, #3
 800da72:	75fb      	strb	r3, [r7, #23]
          goto error;
 800da74:	e017      	b.n	800daa6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da7a:	b29b      	uxth	r3, r3
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d1cd      	bne.n	800da1c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800da80:	693a      	ldr	r2, [r7, #16]
 800da82:	6839      	ldr	r1, [r7, #0]
 800da84:	68f8      	ldr	r0, [r7, #12]
 800da86:	f000 fa45 	bl	800df14 <SPI_EndRxTransaction>
 800da8a:	4603      	mov	r3, r0
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d002      	beq.n	800da96 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	2220      	movs	r2, #32
 800da94:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d002      	beq.n	800daa4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800da9e:	2301      	movs	r3, #1
 800daa0:	75fb      	strb	r3, [r7, #23]
 800daa2:	e000      	b.n	800daa6 <HAL_SPI_Receive+0x208>
  }

error :
 800daa4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	2201      	movs	r2, #1
 800daaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	2200      	movs	r2, #0
 800dab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800dab6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dab8:	4618      	mov	r0, r3
 800daba:	3718      	adds	r7, #24
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}

0800dac0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b08c      	sub	sp, #48	; 0x30
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	60f8      	str	r0, [r7, #12]
 800dac8:	60b9      	str	r1, [r7, #8]
 800daca:	607a      	str	r2, [r7, #4]
 800dacc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800dace:	2301      	movs	r3, #1
 800dad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800dad2:	2300      	movs	r3, #0
 800dad4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800dade:	2b01      	cmp	r3, #1
 800dae0:	d101      	bne.n	800dae6 <HAL_SPI_TransmitReceive+0x26>
 800dae2:	2302      	movs	r3, #2
 800dae4:	e18a      	b.n	800ddfc <HAL_SPI_TransmitReceive+0x33c>
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	2201      	movs	r2, #1
 800daea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800daee:	f7fc f859 	bl	8009ba4 <HAL_GetTick>
 800daf2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dafa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	685b      	ldr	r3, [r3, #4]
 800db02:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800db04:	887b      	ldrh	r3, [r7, #2]
 800db06:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800db08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800db0c:	2b01      	cmp	r3, #1
 800db0e:	d00f      	beq.n	800db30 <HAL_SPI_TransmitReceive+0x70>
 800db10:	69fb      	ldr	r3, [r7, #28]
 800db12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800db16:	d107      	bne.n	800db28 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	689b      	ldr	r3, [r3, #8]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d103      	bne.n	800db28 <HAL_SPI_TransmitReceive+0x68>
 800db20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800db24:	2b04      	cmp	r3, #4
 800db26:	d003      	beq.n	800db30 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800db28:	2302      	movs	r3, #2
 800db2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800db2e:	e15b      	b.n	800dde8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d005      	beq.n	800db42 <HAL_SPI_TransmitReceive+0x82>
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d002      	beq.n	800db42 <HAL_SPI_TransmitReceive+0x82>
 800db3c:	887b      	ldrh	r3, [r7, #2]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d103      	bne.n	800db4a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800db42:	2301      	movs	r3, #1
 800db44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800db48:	e14e      	b.n	800dde8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800db50:	b2db      	uxtb	r3, r3
 800db52:	2b04      	cmp	r3, #4
 800db54:	d003      	beq.n	800db5e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	2205      	movs	r2, #5
 800db5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	2200      	movs	r2, #0
 800db62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	687a      	ldr	r2, [r7, #4]
 800db68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	887a      	ldrh	r2, [r7, #2]
 800db6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	887a      	ldrh	r2, [r7, #2]
 800db74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	68ba      	ldr	r2, [r7, #8]
 800db7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	887a      	ldrh	r2, [r7, #2]
 800db80:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	887a      	ldrh	r2, [r7, #2]
 800db86:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	2200      	movs	r2, #0
 800db8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	2200      	movs	r2, #0
 800db92:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db9e:	2b40      	cmp	r3, #64	; 0x40
 800dba0:	d007      	beq.n	800dbb2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	681a      	ldr	r2, [r3, #0]
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dbb0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	68db      	ldr	r3, [r3, #12]
 800dbb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dbba:	d178      	bne.n	800dcae <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	685b      	ldr	r3, [r3, #4]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d002      	beq.n	800dbca <HAL_SPI_TransmitReceive+0x10a>
 800dbc4:	8b7b      	ldrh	r3, [r7, #26]
 800dbc6:	2b01      	cmp	r3, #1
 800dbc8:	d166      	bne.n	800dc98 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbce:	881a      	ldrh	r2, [r3, #0]
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbda:	1c9a      	adds	r2, r3, #2
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dbe4:	b29b      	uxth	r3, r3
 800dbe6:	3b01      	subs	r3, #1
 800dbe8:	b29a      	uxth	r2, r3
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dbee:	e053      	b.n	800dc98 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	689b      	ldr	r3, [r3, #8]
 800dbf6:	f003 0302 	and.w	r3, r3, #2
 800dbfa:	2b02      	cmp	r3, #2
 800dbfc:	d11b      	bne.n	800dc36 <HAL_SPI_TransmitReceive+0x176>
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dc02:	b29b      	uxth	r3, r3
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d016      	beq.n	800dc36 <HAL_SPI_TransmitReceive+0x176>
 800dc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc0a:	2b01      	cmp	r3, #1
 800dc0c:	d113      	bne.n	800dc36 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc12:	881a      	ldrh	r2, [r3, #0]
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc1e:	1c9a      	adds	r2, r3, #2
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dc28:	b29b      	uxth	r3, r3
 800dc2a:	3b01      	subs	r3, #1
 800dc2c:	b29a      	uxth	r2, r3
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800dc32:	2300      	movs	r3, #0
 800dc34:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	689b      	ldr	r3, [r3, #8]
 800dc3c:	f003 0301 	and.w	r3, r3, #1
 800dc40:	2b01      	cmp	r3, #1
 800dc42:	d119      	bne.n	800dc78 <HAL_SPI_TransmitReceive+0x1b8>
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc48:	b29b      	uxth	r3, r3
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d014      	beq.n	800dc78 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	68da      	ldr	r2, [r3, #12]
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc58:	b292      	uxth	r2, r2
 800dc5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc60:	1c9a      	adds	r2, r3, #2
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc6a:	b29b      	uxth	r3, r3
 800dc6c:	3b01      	subs	r3, #1
 800dc6e:	b29a      	uxth	r2, r3
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dc74:	2301      	movs	r3, #1
 800dc76:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800dc78:	f7fb ff94 	bl	8009ba4 <HAL_GetTick>
 800dc7c:	4602      	mov	r2, r0
 800dc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc80:	1ad3      	subs	r3, r2, r3
 800dc82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d807      	bhi.n	800dc98 <HAL_SPI_TransmitReceive+0x1d8>
 800dc88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc8e:	d003      	beq.n	800dc98 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800dc90:	2303      	movs	r3, #3
 800dc92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800dc96:	e0a7      	b.n	800dde8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dc9c:	b29b      	uxth	r3, r3
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d1a6      	bne.n	800dbf0 <HAL_SPI_TransmitReceive+0x130>
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dca6:	b29b      	uxth	r3, r3
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d1a1      	bne.n	800dbf0 <HAL_SPI_TransmitReceive+0x130>
 800dcac:	e07c      	b.n	800dda8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	685b      	ldr	r3, [r3, #4]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d002      	beq.n	800dcbc <HAL_SPI_TransmitReceive+0x1fc>
 800dcb6:	8b7b      	ldrh	r3, [r7, #26]
 800dcb8:	2b01      	cmp	r3, #1
 800dcba:	d16b      	bne.n	800dd94 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	330c      	adds	r3, #12
 800dcc6:	7812      	ldrb	r2, [r2, #0]
 800dcc8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcce:	1c5a      	adds	r2, r3, #1
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dcd8:	b29b      	uxth	r3, r3
 800dcda:	3b01      	subs	r3, #1
 800dcdc:	b29a      	uxth	r2, r3
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dce2:	e057      	b.n	800dd94 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	689b      	ldr	r3, [r3, #8]
 800dcea:	f003 0302 	and.w	r3, r3, #2
 800dcee:	2b02      	cmp	r3, #2
 800dcf0:	d11c      	bne.n	800dd2c <HAL_SPI_TransmitReceive+0x26c>
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dcf6:	b29b      	uxth	r3, r3
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d017      	beq.n	800dd2c <HAL_SPI_TransmitReceive+0x26c>
 800dcfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcfe:	2b01      	cmp	r3, #1
 800dd00:	d114      	bne.n	800dd2c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	330c      	adds	r3, #12
 800dd0c:	7812      	ldrb	r2, [r2, #0]
 800dd0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd14:	1c5a      	adds	r2, r3, #1
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dd1e:	b29b      	uxth	r3, r3
 800dd20:	3b01      	subs	r3, #1
 800dd22:	b29a      	uxth	r2, r3
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800dd28:	2300      	movs	r3, #0
 800dd2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	689b      	ldr	r3, [r3, #8]
 800dd32:	f003 0301 	and.w	r3, r3, #1
 800dd36:	2b01      	cmp	r3, #1
 800dd38:	d119      	bne.n	800dd6e <HAL_SPI_TransmitReceive+0x2ae>
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd3e:	b29b      	uxth	r3, r3
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d014      	beq.n	800dd6e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	68da      	ldr	r2, [r3, #12]
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd4e:	b2d2      	uxtb	r2, r2
 800dd50:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd56:	1c5a      	adds	r2, r3, #1
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd60:	b29b      	uxth	r3, r3
 800dd62:	3b01      	subs	r3, #1
 800dd64:	b29a      	uxth	r2, r3
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800dd6e:	f7fb ff19 	bl	8009ba4 <HAL_GetTick>
 800dd72:	4602      	mov	r2, r0
 800dd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd76:	1ad3      	subs	r3, r2, r3
 800dd78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d803      	bhi.n	800dd86 <HAL_SPI_TransmitReceive+0x2c6>
 800dd7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd84:	d102      	bne.n	800dd8c <HAL_SPI_TransmitReceive+0x2cc>
 800dd86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d103      	bne.n	800dd94 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800dd8c:	2303      	movs	r3, #3
 800dd8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800dd92:	e029      	b.n	800dde8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dd98:	b29b      	uxth	r3, r3
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d1a2      	bne.n	800dce4 <HAL_SPI_TransmitReceive+0x224>
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dda2:	b29b      	uxth	r3, r3
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d19d      	bne.n	800dce4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dda8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddaa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ddac:	68f8      	ldr	r0, [r7, #12]
 800ddae:	f000 f917 	bl	800dfe0 <SPI_EndRxTxTransaction>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d006      	beq.n	800ddc6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ddb8:	2301      	movs	r3, #1
 800ddba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	2220      	movs	r2, #32
 800ddc2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ddc4:	e010      	b.n	800dde8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	689b      	ldr	r3, [r3, #8]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d10b      	bne.n	800dde6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ddce:	2300      	movs	r3, #0
 800ddd0:	617b      	str	r3, [r7, #20]
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	68db      	ldr	r3, [r3, #12]
 800ddd8:	617b      	str	r3, [r7, #20]
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	689b      	ldr	r3, [r3, #8]
 800dde0:	617b      	str	r3, [r7, #20]
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	e000      	b.n	800dde8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800dde6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	2201      	movs	r2, #1
 800ddec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ddf8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3730      	adds	r7, #48	; 0x30
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}

0800de04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b088      	sub	sp, #32
 800de08:	af00      	add	r7, sp, #0
 800de0a:	60f8      	str	r0, [r7, #12]
 800de0c:	60b9      	str	r1, [r7, #8]
 800de0e:	603b      	str	r3, [r7, #0]
 800de10:	4613      	mov	r3, r2
 800de12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800de14:	f7fb fec6 	bl	8009ba4 <HAL_GetTick>
 800de18:	4602      	mov	r2, r0
 800de1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de1c:	1a9b      	subs	r3, r3, r2
 800de1e:	683a      	ldr	r2, [r7, #0]
 800de20:	4413      	add	r3, r2
 800de22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800de24:	f7fb febe 	bl	8009ba4 <HAL_GetTick>
 800de28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800de2a:	4b39      	ldr	r3, [pc, #228]	; (800df10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	015b      	lsls	r3, r3, #5
 800de30:	0d1b      	lsrs	r3, r3, #20
 800de32:	69fa      	ldr	r2, [r7, #28]
 800de34:	fb02 f303 	mul.w	r3, r2, r3
 800de38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800de3a:	e054      	b.n	800dee6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de42:	d050      	beq.n	800dee6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800de44:	f7fb feae 	bl	8009ba4 <HAL_GetTick>
 800de48:	4602      	mov	r2, r0
 800de4a:	69bb      	ldr	r3, [r7, #24]
 800de4c:	1ad3      	subs	r3, r2, r3
 800de4e:	69fa      	ldr	r2, [r7, #28]
 800de50:	429a      	cmp	r2, r3
 800de52:	d902      	bls.n	800de5a <SPI_WaitFlagStateUntilTimeout+0x56>
 800de54:	69fb      	ldr	r3, [r7, #28]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d13d      	bne.n	800ded6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	685a      	ldr	r2, [r3, #4]
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800de68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	685b      	ldr	r3, [r3, #4]
 800de6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800de72:	d111      	bne.n	800de98 <SPI_WaitFlagStateUntilTimeout+0x94>
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	689b      	ldr	r3, [r3, #8]
 800de78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de7c:	d004      	beq.n	800de88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	689b      	ldr	r3, [r3, #8]
 800de82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800de86:	d107      	bne.n	800de98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	681a      	ldr	r2, [r3, #0]
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800de96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dea0:	d10f      	bne.n	800dec2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	681a      	ldr	r2, [r3, #0]
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800deb0:	601a      	str	r2, [r3, #0]
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	681a      	ldr	r2, [r3, #0]
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dec0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	2201      	movs	r2, #1
 800dec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	2200      	movs	r2, #0
 800dece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ded2:	2303      	movs	r3, #3
 800ded4:	e017      	b.n	800df06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800ded6:	697b      	ldr	r3, [r7, #20]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d101      	bne.n	800dee0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800dedc:	2300      	movs	r3, #0
 800dede:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	3b01      	subs	r3, #1
 800dee4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	689a      	ldr	r2, [r3, #8]
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	4013      	ands	r3, r2
 800def0:	68ba      	ldr	r2, [r7, #8]
 800def2:	429a      	cmp	r2, r3
 800def4:	bf0c      	ite	eq
 800def6:	2301      	moveq	r3, #1
 800def8:	2300      	movne	r3, #0
 800defa:	b2db      	uxtb	r3, r3
 800defc:	461a      	mov	r2, r3
 800defe:	79fb      	ldrb	r3, [r7, #7]
 800df00:	429a      	cmp	r2, r3
 800df02:	d19b      	bne.n	800de3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800df04:	2300      	movs	r3, #0
}
 800df06:	4618      	mov	r0, r3
 800df08:	3720      	adds	r7, #32
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}
 800df0e:	bf00      	nop
 800df10:	20000060 	.word	0x20000060

0800df14 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b086      	sub	sp, #24
 800df18:	af02      	add	r7, sp, #8
 800df1a:	60f8      	str	r0, [r7, #12]
 800df1c:	60b9      	str	r1, [r7, #8]
 800df1e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	685b      	ldr	r3, [r3, #4]
 800df24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800df28:	d111      	bne.n	800df4e <SPI_EndRxTransaction+0x3a>
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	689b      	ldr	r3, [r3, #8]
 800df2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df32:	d004      	beq.n	800df3e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	689b      	ldr	r3, [r3, #8]
 800df38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800df3c:	d107      	bne.n	800df4e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	681a      	ldr	r2, [r3, #0]
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800df4c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	685b      	ldr	r3, [r3, #4]
 800df52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800df56:	d12a      	bne.n	800dfae <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	689b      	ldr	r3, [r3, #8]
 800df5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800df60:	d012      	beq.n	800df88 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	9300      	str	r3, [sp, #0]
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	2200      	movs	r2, #0
 800df6a:	2180      	movs	r1, #128	; 0x80
 800df6c:	68f8      	ldr	r0, [r7, #12]
 800df6e:	f7ff ff49 	bl	800de04 <SPI_WaitFlagStateUntilTimeout>
 800df72:	4603      	mov	r3, r0
 800df74:	2b00      	cmp	r3, #0
 800df76:	d02d      	beq.n	800dfd4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df7c:	f043 0220 	orr.w	r2, r3, #32
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800df84:	2303      	movs	r3, #3
 800df86:	e026      	b.n	800dfd6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	9300      	str	r3, [sp, #0]
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	2200      	movs	r2, #0
 800df90:	2101      	movs	r1, #1
 800df92:	68f8      	ldr	r0, [r7, #12]
 800df94:	f7ff ff36 	bl	800de04 <SPI_WaitFlagStateUntilTimeout>
 800df98:	4603      	mov	r3, r0
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d01a      	beq.n	800dfd4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfa2:	f043 0220 	orr.w	r2, r3, #32
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800dfaa:	2303      	movs	r3, #3
 800dfac:	e013      	b.n	800dfd6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	9300      	str	r3, [sp, #0]
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	2101      	movs	r1, #1
 800dfb8:	68f8      	ldr	r0, [r7, #12]
 800dfba:	f7ff ff23 	bl	800de04 <SPI_WaitFlagStateUntilTimeout>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d007      	beq.n	800dfd4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfc8:	f043 0220 	orr.w	r2, r3, #32
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800dfd0:	2303      	movs	r3, #3
 800dfd2:	e000      	b.n	800dfd6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800dfd4:	2300      	movs	r3, #0
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	3710      	adds	r7, #16
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}
	...

0800dfe0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b088      	sub	sp, #32
 800dfe4:	af02      	add	r7, sp, #8
 800dfe6:	60f8      	str	r0, [r7, #12]
 800dfe8:	60b9      	str	r1, [r7, #8]
 800dfea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800dfec:	4b1b      	ldr	r3, [pc, #108]	; (800e05c <SPI_EndRxTxTransaction+0x7c>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	4a1b      	ldr	r2, [pc, #108]	; (800e060 <SPI_EndRxTxTransaction+0x80>)
 800dff2:	fba2 2303 	umull	r2, r3, r2, r3
 800dff6:	0d5b      	lsrs	r3, r3, #21
 800dff8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dffc:	fb02 f303 	mul.w	r3, r2, r3
 800e000:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	685b      	ldr	r3, [r3, #4]
 800e006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e00a:	d112      	bne.n	800e032 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	9300      	str	r3, [sp, #0]
 800e010:	68bb      	ldr	r3, [r7, #8]
 800e012:	2200      	movs	r2, #0
 800e014:	2180      	movs	r1, #128	; 0x80
 800e016:	68f8      	ldr	r0, [r7, #12]
 800e018:	f7ff fef4 	bl	800de04 <SPI_WaitFlagStateUntilTimeout>
 800e01c:	4603      	mov	r3, r0
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d016      	beq.n	800e050 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e026:	f043 0220 	orr.w	r2, r3, #32
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e02e:	2303      	movs	r3, #3
 800e030:	e00f      	b.n	800e052 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d00a      	beq.n	800e04e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	3b01      	subs	r3, #1
 800e03c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	689b      	ldr	r3, [r3, #8]
 800e044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e048:	2b80      	cmp	r3, #128	; 0x80
 800e04a:	d0f2      	beq.n	800e032 <SPI_EndRxTxTransaction+0x52>
 800e04c:	e000      	b.n	800e050 <SPI_EndRxTxTransaction+0x70>
        break;
 800e04e:	bf00      	nop
  }

  return HAL_OK;
 800e050:	2300      	movs	r3, #0
}
 800e052:	4618      	mov	r0, r3
 800e054:	3718      	adds	r7, #24
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}
 800e05a:	bf00      	nop
 800e05c:	20000060 	.word	0x20000060
 800e060:	165e9f81 	.word	0x165e9f81

0800e064 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b082      	sub	sp, #8
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d101      	bne.n	800e076 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e072:	2301      	movs	r3, #1
 800e074:	e041      	b.n	800e0fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e07c:	b2db      	uxtb	r3, r3
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d106      	bne.n	800e090 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2200      	movs	r2, #0
 800e086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f7f4 fe12 	bl	8002cb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2202      	movs	r2, #2
 800e094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681a      	ldr	r2, [r3, #0]
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	3304      	adds	r3, #4
 800e0a0:	4619      	mov	r1, r3
 800e0a2:	4610      	mov	r0, r2
 800e0a4:	f000 fbb2 	bl	800e80c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2201      	movs	r2, #1
 800e0ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2201      	movs	r2, #1
 800e0bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2201      	movs	r2, #1
 800e0c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2201      	movs	r2, #1
 800e0cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2201      	movs	r2, #1
 800e0d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2201      	movs	r2, #1
 800e0dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2201      	movs	r2, #1
 800e0e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2201      	movs	r2, #1
 800e0ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2201      	movs	r2, #1
 800e0f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e0f8:	2300      	movs	r3, #0
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	3708      	adds	r7, #8
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}
	...

0800e104 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e104:	b480      	push	{r7}
 800e106:	b085      	sub	sp, #20
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e112:	b2db      	uxtb	r3, r3
 800e114:	2b01      	cmp	r3, #1
 800e116:	d001      	beq.n	800e11c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e118:	2301      	movs	r3, #1
 800e11a:	e04e      	b.n	800e1ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2202      	movs	r2, #2
 800e120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	68da      	ldr	r2, [r3, #12]
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	f042 0201 	orr.w	r2, r2, #1
 800e132:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	4a23      	ldr	r2, [pc, #140]	; (800e1c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800e13a:	4293      	cmp	r3, r2
 800e13c:	d022      	beq.n	800e184 <HAL_TIM_Base_Start_IT+0x80>
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e146:	d01d      	beq.n	800e184 <HAL_TIM_Base_Start_IT+0x80>
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	4a1f      	ldr	r2, [pc, #124]	; (800e1cc <HAL_TIM_Base_Start_IT+0xc8>)
 800e14e:	4293      	cmp	r3, r2
 800e150:	d018      	beq.n	800e184 <HAL_TIM_Base_Start_IT+0x80>
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	4a1e      	ldr	r2, [pc, #120]	; (800e1d0 <HAL_TIM_Base_Start_IT+0xcc>)
 800e158:	4293      	cmp	r3, r2
 800e15a:	d013      	beq.n	800e184 <HAL_TIM_Base_Start_IT+0x80>
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	4a1c      	ldr	r2, [pc, #112]	; (800e1d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800e162:	4293      	cmp	r3, r2
 800e164:	d00e      	beq.n	800e184 <HAL_TIM_Base_Start_IT+0x80>
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	4a1b      	ldr	r2, [pc, #108]	; (800e1d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800e16c:	4293      	cmp	r3, r2
 800e16e:	d009      	beq.n	800e184 <HAL_TIM_Base_Start_IT+0x80>
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	4a19      	ldr	r2, [pc, #100]	; (800e1dc <HAL_TIM_Base_Start_IT+0xd8>)
 800e176:	4293      	cmp	r3, r2
 800e178:	d004      	beq.n	800e184 <HAL_TIM_Base_Start_IT+0x80>
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	4a18      	ldr	r2, [pc, #96]	; (800e1e0 <HAL_TIM_Base_Start_IT+0xdc>)
 800e180:	4293      	cmp	r3, r2
 800e182:	d111      	bne.n	800e1a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	689b      	ldr	r3, [r3, #8]
 800e18a:	f003 0307 	and.w	r3, r3, #7
 800e18e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	2b06      	cmp	r3, #6
 800e194:	d010      	beq.n	800e1b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	681a      	ldr	r2, [r3, #0]
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	f042 0201 	orr.w	r2, r2, #1
 800e1a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1a6:	e007      	b.n	800e1b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	681a      	ldr	r2, [r3, #0]
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	f042 0201 	orr.w	r2, r2, #1
 800e1b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e1b8:	2300      	movs	r3, #0
}
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	3714      	adds	r7, #20
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c4:	4770      	bx	lr
 800e1c6:	bf00      	nop
 800e1c8:	40010000 	.word	0x40010000
 800e1cc:	40000400 	.word	0x40000400
 800e1d0:	40000800 	.word	0x40000800
 800e1d4:	40000c00 	.word	0x40000c00
 800e1d8:	40010400 	.word	0x40010400
 800e1dc:	40014000 	.word	0x40014000
 800e1e0:	40001800 	.word	0x40001800

0800e1e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b082      	sub	sp, #8
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d101      	bne.n	800e1f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	e041      	b.n	800e27a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1fc:	b2db      	uxtb	r3, r3
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d106      	bne.n	800e210 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	2200      	movs	r2, #0
 800e206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f000 f839 	bl	800e282 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2202      	movs	r2, #2
 800e214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681a      	ldr	r2, [r3, #0]
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	3304      	adds	r3, #4
 800e220:	4619      	mov	r1, r3
 800e222:	4610      	mov	r0, r2
 800e224:	f000 faf2 	bl	800e80c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2201      	movs	r2, #1
 800e22c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2201      	movs	r2, #1
 800e234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2201      	movs	r2, #1
 800e23c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2201      	movs	r2, #1
 800e244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2201      	movs	r2, #1
 800e24c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2201      	movs	r2, #1
 800e254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2201      	movs	r2, #1
 800e25c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2201      	movs	r2, #1
 800e264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2201      	movs	r2, #1
 800e26c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2201      	movs	r2, #1
 800e274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e278:	2300      	movs	r3, #0
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	3708      	adds	r7, #8
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}

0800e282 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e282:	b480      	push	{r7}
 800e284:	b083      	sub	sp, #12
 800e286:	af00      	add	r7, sp, #0
 800e288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e28a:	bf00      	nop
 800e28c:	370c      	adds	r7, #12
 800e28e:	46bd      	mov	sp, r7
 800e290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e294:	4770      	bx	lr

0800e296 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e296:	b580      	push	{r7, lr}
 800e298:	b082      	sub	sp, #8
 800e29a:	af00      	add	r7, sp, #0
 800e29c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	691b      	ldr	r3, [r3, #16]
 800e2a4:	f003 0302 	and.w	r3, r3, #2
 800e2a8:	2b02      	cmp	r3, #2
 800e2aa:	d122      	bne.n	800e2f2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	68db      	ldr	r3, [r3, #12]
 800e2b2:	f003 0302 	and.w	r3, r3, #2
 800e2b6:	2b02      	cmp	r3, #2
 800e2b8:	d11b      	bne.n	800e2f2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	f06f 0202 	mvn.w	r2, #2
 800e2c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2201      	movs	r2, #1
 800e2c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	699b      	ldr	r3, [r3, #24]
 800e2d0:	f003 0303 	and.w	r3, r3, #3
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d003      	beq.n	800e2e0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e2d8:	6878      	ldr	r0, [r7, #4]
 800e2da:	f000 fa78 	bl	800e7ce <HAL_TIM_IC_CaptureCallback>
 800e2de:	e005      	b.n	800e2ec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f000 fa6a 	bl	800e7ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f000 fa7b 	bl	800e7e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	691b      	ldr	r3, [r3, #16]
 800e2f8:	f003 0304 	and.w	r3, r3, #4
 800e2fc:	2b04      	cmp	r3, #4
 800e2fe:	d122      	bne.n	800e346 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	68db      	ldr	r3, [r3, #12]
 800e306:	f003 0304 	and.w	r3, r3, #4
 800e30a:	2b04      	cmp	r3, #4
 800e30c:	d11b      	bne.n	800e346 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	f06f 0204 	mvn.w	r2, #4
 800e316:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2202      	movs	r2, #2
 800e31c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	699b      	ldr	r3, [r3, #24]
 800e324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d003      	beq.n	800e334 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f000 fa4e 	bl	800e7ce <HAL_TIM_IC_CaptureCallback>
 800e332:	e005      	b.n	800e340 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f000 fa40 	bl	800e7ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f000 fa51 	bl	800e7e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2200      	movs	r2, #0
 800e344:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	691b      	ldr	r3, [r3, #16]
 800e34c:	f003 0308 	and.w	r3, r3, #8
 800e350:	2b08      	cmp	r3, #8
 800e352:	d122      	bne.n	800e39a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	68db      	ldr	r3, [r3, #12]
 800e35a:	f003 0308 	and.w	r3, r3, #8
 800e35e:	2b08      	cmp	r3, #8
 800e360:	d11b      	bne.n	800e39a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	f06f 0208 	mvn.w	r2, #8
 800e36a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	2204      	movs	r2, #4
 800e370:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	69db      	ldr	r3, [r3, #28]
 800e378:	f003 0303 	and.w	r3, r3, #3
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d003      	beq.n	800e388 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f000 fa24 	bl	800e7ce <HAL_TIM_IC_CaptureCallback>
 800e386:	e005      	b.n	800e394 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f000 fa16 	bl	800e7ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e38e:	6878      	ldr	r0, [r7, #4]
 800e390:	f000 fa27 	bl	800e7e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2200      	movs	r2, #0
 800e398:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	691b      	ldr	r3, [r3, #16]
 800e3a0:	f003 0310 	and.w	r3, r3, #16
 800e3a4:	2b10      	cmp	r3, #16
 800e3a6:	d122      	bne.n	800e3ee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	68db      	ldr	r3, [r3, #12]
 800e3ae:	f003 0310 	and.w	r3, r3, #16
 800e3b2:	2b10      	cmp	r3, #16
 800e3b4:	d11b      	bne.n	800e3ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	f06f 0210 	mvn.w	r2, #16
 800e3be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2208      	movs	r2, #8
 800e3c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	69db      	ldr	r3, [r3, #28]
 800e3cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d003      	beq.n	800e3dc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e3d4:	6878      	ldr	r0, [r7, #4]
 800e3d6:	f000 f9fa 	bl	800e7ce <HAL_TIM_IC_CaptureCallback>
 800e3da:	e005      	b.n	800e3e8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f000 f9ec 	bl	800e7ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f000 f9fd 	bl	800e7e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	691b      	ldr	r3, [r3, #16]
 800e3f4:	f003 0301 	and.w	r3, r3, #1
 800e3f8:	2b01      	cmp	r3, #1
 800e3fa:	d10e      	bne.n	800e41a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	68db      	ldr	r3, [r3, #12]
 800e402:	f003 0301 	and.w	r3, r3, #1
 800e406:	2b01      	cmp	r3, #1
 800e408:	d107      	bne.n	800e41a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	f06f 0201 	mvn.w	r2, #1
 800e412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f7f3 ff19 	bl	800224c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	691b      	ldr	r3, [r3, #16]
 800e420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e424:	2b80      	cmp	r3, #128	; 0x80
 800e426:	d10e      	bne.n	800e446 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	68db      	ldr	r3, [r3, #12]
 800e42e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e432:	2b80      	cmp	r3, #128	; 0x80
 800e434:	d107      	bne.n	800e446 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e43e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e440:	6878      	ldr	r0, [r7, #4]
 800e442:	f000 fd53 	bl	800eeec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	691b      	ldr	r3, [r3, #16]
 800e44c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e450:	2b40      	cmp	r3, #64	; 0x40
 800e452:	d10e      	bne.n	800e472 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	68db      	ldr	r3, [r3, #12]
 800e45a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e45e:	2b40      	cmp	r3, #64	; 0x40
 800e460:	d107      	bne.n	800e472 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e46a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e46c:	6878      	ldr	r0, [r7, #4]
 800e46e:	f000 f9c2 	bl	800e7f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	691b      	ldr	r3, [r3, #16]
 800e478:	f003 0320 	and.w	r3, r3, #32
 800e47c:	2b20      	cmp	r3, #32
 800e47e:	d10e      	bne.n	800e49e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	68db      	ldr	r3, [r3, #12]
 800e486:	f003 0320 	and.w	r3, r3, #32
 800e48a:	2b20      	cmp	r3, #32
 800e48c:	d107      	bne.n	800e49e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	f06f 0220 	mvn.w	r2, #32
 800e496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f000 fd1d 	bl	800eed8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e49e:	bf00      	nop
 800e4a0:	3708      	adds	r7, #8
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}
	...

0800e4a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b086      	sub	sp, #24
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	60f8      	str	r0, [r7, #12]
 800e4b0:	60b9      	str	r1, [r7, #8]
 800e4b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e4be:	2b01      	cmp	r3, #1
 800e4c0:	d101      	bne.n	800e4c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e4c2:	2302      	movs	r3, #2
 800e4c4:	e0ae      	b.n	800e624 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	2201      	movs	r2, #1
 800e4ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2b0c      	cmp	r3, #12
 800e4d2:	f200 809f 	bhi.w	800e614 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800e4d6:	a201      	add	r2, pc, #4	; (adr r2, 800e4dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4dc:	0800e511 	.word	0x0800e511
 800e4e0:	0800e615 	.word	0x0800e615
 800e4e4:	0800e615 	.word	0x0800e615
 800e4e8:	0800e615 	.word	0x0800e615
 800e4ec:	0800e551 	.word	0x0800e551
 800e4f0:	0800e615 	.word	0x0800e615
 800e4f4:	0800e615 	.word	0x0800e615
 800e4f8:	0800e615 	.word	0x0800e615
 800e4fc:	0800e593 	.word	0x0800e593
 800e500:	0800e615 	.word	0x0800e615
 800e504:	0800e615 	.word	0x0800e615
 800e508:	0800e615 	.word	0x0800e615
 800e50c:	0800e5d3 	.word	0x0800e5d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	68b9      	ldr	r1, [r7, #8]
 800e516:	4618      	mov	r0, r3
 800e518:	f000 fa18 	bl	800e94c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	699a      	ldr	r2, [r3, #24]
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	f042 0208 	orr.w	r2, r2, #8
 800e52a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	699a      	ldr	r2, [r3, #24]
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	f022 0204 	bic.w	r2, r2, #4
 800e53a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	6999      	ldr	r1, [r3, #24]
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	691a      	ldr	r2, [r3, #16]
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	430a      	orrs	r2, r1
 800e54c:	619a      	str	r2, [r3, #24]
      break;
 800e54e:	e064      	b.n	800e61a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	68b9      	ldr	r1, [r7, #8]
 800e556:	4618      	mov	r0, r3
 800e558:	f000 fa68 	bl	800ea2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	699a      	ldr	r2, [r3, #24]
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e56a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	699a      	ldr	r2, [r3, #24]
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e57a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	6999      	ldr	r1, [r3, #24]
 800e582:	68bb      	ldr	r3, [r7, #8]
 800e584:	691b      	ldr	r3, [r3, #16]
 800e586:	021a      	lsls	r2, r3, #8
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	430a      	orrs	r2, r1
 800e58e:	619a      	str	r2, [r3, #24]
      break;
 800e590:	e043      	b.n	800e61a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	68b9      	ldr	r1, [r7, #8]
 800e598:	4618      	mov	r0, r3
 800e59a:	f000 fabd 	bl	800eb18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	69da      	ldr	r2, [r3, #28]
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	f042 0208 	orr.w	r2, r2, #8
 800e5ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	69da      	ldr	r2, [r3, #28]
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	f022 0204 	bic.w	r2, r2, #4
 800e5bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	69d9      	ldr	r1, [r3, #28]
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	691a      	ldr	r2, [r3, #16]
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	430a      	orrs	r2, r1
 800e5ce:	61da      	str	r2, [r3, #28]
      break;
 800e5d0:	e023      	b.n	800e61a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	68b9      	ldr	r1, [r7, #8]
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f000 fb11 	bl	800ec00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	69da      	ldr	r2, [r3, #28]
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e5ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	69da      	ldr	r2, [r3, #28]
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e5fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	69d9      	ldr	r1, [r3, #28]
 800e604:	68bb      	ldr	r3, [r7, #8]
 800e606:	691b      	ldr	r3, [r3, #16]
 800e608:	021a      	lsls	r2, r3, #8
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	430a      	orrs	r2, r1
 800e610:	61da      	str	r2, [r3, #28]
      break;
 800e612:	e002      	b.n	800e61a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800e614:	2301      	movs	r3, #1
 800e616:	75fb      	strb	r3, [r7, #23]
      break;
 800e618:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	2200      	movs	r2, #0
 800e61e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e622:	7dfb      	ldrb	r3, [r7, #23]
}
 800e624:	4618      	mov	r0, r3
 800e626:	3718      	adds	r7, #24
 800e628:	46bd      	mov	sp, r7
 800e62a:	bd80      	pop	{r7, pc}

0800e62c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b084      	sub	sp, #16
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
 800e634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e636:	2300      	movs	r3, #0
 800e638:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e640:	2b01      	cmp	r3, #1
 800e642:	d101      	bne.n	800e648 <HAL_TIM_ConfigClockSource+0x1c>
 800e644:	2302      	movs	r3, #2
 800e646:	e0b4      	b.n	800e7b2 <HAL_TIM_ConfigClockSource+0x186>
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2201      	movs	r2, #1
 800e64c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2202      	movs	r2, #2
 800e654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	689b      	ldr	r3, [r3, #8]
 800e65e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e666:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e66e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	68ba      	ldr	r2, [r7, #8]
 800e676:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e680:	d03e      	beq.n	800e700 <HAL_TIM_ConfigClockSource+0xd4>
 800e682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e686:	f200 8087 	bhi.w	800e798 <HAL_TIM_ConfigClockSource+0x16c>
 800e68a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e68e:	f000 8086 	beq.w	800e79e <HAL_TIM_ConfigClockSource+0x172>
 800e692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e696:	d87f      	bhi.n	800e798 <HAL_TIM_ConfigClockSource+0x16c>
 800e698:	2b70      	cmp	r3, #112	; 0x70
 800e69a:	d01a      	beq.n	800e6d2 <HAL_TIM_ConfigClockSource+0xa6>
 800e69c:	2b70      	cmp	r3, #112	; 0x70
 800e69e:	d87b      	bhi.n	800e798 <HAL_TIM_ConfigClockSource+0x16c>
 800e6a0:	2b60      	cmp	r3, #96	; 0x60
 800e6a2:	d050      	beq.n	800e746 <HAL_TIM_ConfigClockSource+0x11a>
 800e6a4:	2b60      	cmp	r3, #96	; 0x60
 800e6a6:	d877      	bhi.n	800e798 <HAL_TIM_ConfigClockSource+0x16c>
 800e6a8:	2b50      	cmp	r3, #80	; 0x50
 800e6aa:	d03c      	beq.n	800e726 <HAL_TIM_ConfigClockSource+0xfa>
 800e6ac:	2b50      	cmp	r3, #80	; 0x50
 800e6ae:	d873      	bhi.n	800e798 <HAL_TIM_ConfigClockSource+0x16c>
 800e6b0:	2b40      	cmp	r3, #64	; 0x40
 800e6b2:	d058      	beq.n	800e766 <HAL_TIM_ConfigClockSource+0x13a>
 800e6b4:	2b40      	cmp	r3, #64	; 0x40
 800e6b6:	d86f      	bhi.n	800e798 <HAL_TIM_ConfigClockSource+0x16c>
 800e6b8:	2b30      	cmp	r3, #48	; 0x30
 800e6ba:	d064      	beq.n	800e786 <HAL_TIM_ConfigClockSource+0x15a>
 800e6bc:	2b30      	cmp	r3, #48	; 0x30
 800e6be:	d86b      	bhi.n	800e798 <HAL_TIM_ConfigClockSource+0x16c>
 800e6c0:	2b20      	cmp	r3, #32
 800e6c2:	d060      	beq.n	800e786 <HAL_TIM_ConfigClockSource+0x15a>
 800e6c4:	2b20      	cmp	r3, #32
 800e6c6:	d867      	bhi.n	800e798 <HAL_TIM_ConfigClockSource+0x16c>
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d05c      	beq.n	800e786 <HAL_TIM_ConfigClockSource+0x15a>
 800e6cc:	2b10      	cmp	r3, #16
 800e6ce:	d05a      	beq.n	800e786 <HAL_TIM_ConfigClockSource+0x15a>
 800e6d0:	e062      	b.n	800e798 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	6818      	ldr	r0, [r3, #0]
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	6899      	ldr	r1, [r3, #8]
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	685a      	ldr	r2, [r3, #4]
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	68db      	ldr	r3, [r3, #12]
 800e6e2:	f000 fb5d 	bl	800eda0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	689b      	ldr	r3, [r3, #8]
 800e6ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e6ee:	68bb      	ldr	r3, [r7, #8]
 800e6f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e6f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	68ba      	ldr	r2, [r7, #8]
 800e6fc:	609a      	str	r2, [r3, #8]
      break;
 800e6fe:	e04f      	b.n	800e7a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	6818      	ldr	r0, [r3, #0]
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	6899      	ldr	r1, [r3, #8]
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	685a      	ldr	r2, [r3, #4]
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	68db      	ldr	r3, [r3, #12]
 800e710:	f000 fb46 	bl	800eda0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	689a      	ldr	r2, [r3, #8]
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e722:	609a      	str	r2, [r3, #8]
      break;
 800e724:	e03c      	b.n	800e7a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	6818      	ldr	r0, [r3, #0]
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	6859      	ldr	r1, [r3, #4]
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	68db      	ldr	r3, [r3, #12]
 800e732:	461a      	mov	r2, r3
 800e734:	f000 faba 	bl	800ecac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	2150      	movs	r1, #80	; 0x50
 800e73e:	4618      	mov	r0, r3
 800e740:	f000 fb13 	bl	800ed6a <TIM_ITRx_SetConfig>
      break;
 800e744:	e02c      	b.n	800e7a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	6818      	ldr	r0, [r3, #0]
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	6859      	ldr	r1, [r3, #4]
 800e74e:	683b      	ldr	r3, [r7, #0]
 800e750:	68db      	ldr	r3, [r3, #12]
 800e752:	461a      	mov	r2, r3
 800e754:	f000 fad9 	bl	800ed0a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	2160      	movs	r1, #96	; 0x60
 800e75e:	4618      	mov	r0, r3
 800e760:	f000 fb03 	bl	800ed6a <TIM_ITRx_SetConfig>
      break;
 800e764:	e01c      	b.n	800e7a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	6818      	ldr	r0, [r3, #0]
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	6859      	ldr	r1, [r3, #4]
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	68db      	ldr	r3, [r3, #12]
 800e772:	461a      	mov	r2, r3
 800e774:	f000 fa9a 	bl	800ecac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	2140      	movs	r1, #64	; 0x40
 800e77e:	4618      	mov	r0, r3
 800e780:	f000 faf3 	bl	800ed6a <TIM_ITRx_SetConfig>
      break;
 800e784:	e00c      	b.n	800e7a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681a      	ldr	r2, [r3, #0]
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	4619      	mov	r1, r3
 800e790:	4610      	mov	r0, r2
 800e792:	f000 faea 	bl	800ed6a <TIM_ITRx_SetConfig>
      break;
 800e796:	e003      	b.n	800e7a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800e798:	2301      	movs	r3, #1
 800e79a:	73fb      	strb	r3, [r7, #15]
      break;
 800e79c:	e000      	b.n	800e7a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800e79e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	2201      	movs	r2, #1
 800e7a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e7b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	3710      	adds	r7, #16
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	bd80      	pop	{r7, pc}

0800e7ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e7ba:	b480      	push	{r7}
 800e7bc:	b083      	sub	sp, #12
 800e7be:	af00      	add	r7, sp, #0
 800e7c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e7c2:	bf00      	nop
 800e7c4:	370c      	adds	r7, #12
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7cc:	4770      	bx	lr

0800e7ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e7ce:	b480      	push	{r7}
 800e7d0:	b083      	sub	sp, #12
 800e7d2:	af00      	add	r7, sp, #0
 800e7d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e7d6:	bf00      	nop
 800e7d8:	370c      	adds	r7, #12
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e0:	4770      	bx	lr

0800e7e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e7e2:	b480      	push	{r7}
 800e7e4:	b083      	sub	sp, #12
 800e7e6:	af00      	add	r7, sp, #0
 800e7e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e7ea:	bf00      	nop
 800e7ec:	370c      	adds	r7, #12
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f4:	4770      	bx	lr

0800e7f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e7f6:	b480      	push	{r7}
 800e7f8:	b083      	sub	sp, #12
 800e7fa:	af00      	add	r7, sp, #0
 800e7fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e7fe:	bf00      	nop
 800e800:	370c      	adds	r7, #12
 800e802:	46bd      	mov	sp, r7
 800e804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e808:	4770      	bx	lr
	...

0800e80c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e80c:	b480      	push	{r7}
 800e80e:	b085      	sub	sp, #20
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
 800e814:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	4a40      	ldr	r2, [pc, #256]	; (800e920 <TIM_Base_SetConfig+0x114>)
 800e820:	4293      	cmp	r3, r2
 800e822:	d013      	beq.n	800e84c <TIM_Base_SetConfig+0x40>
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e82a:	d00f      	beq.n	800e84c <TIM_Base_SetConfig+0x40>
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	4a3d      	ldr	r2, [pc, #244]	; (800e924 <TIM_Base_SetConfig+0x118>)
 800e830:	4293      	cmp	r3, r2
 800e832:	d00b      	beq.n	800e84c <TIM_Base_SetConfig+0x40>
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	4a3c      	ldr	r2, [pc, #240]	; (800e928 <TIM_Base_SetConfig+0x11c>)
 800e838:	4293      	cmp	r3, r2
 800e83a:	d007      	beq.n	800e84c <TIM_Base_SetConfig+0x40>
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	4a3b      	ldr	r2, [pc, #236]	; (800e92c <TIM_Base_SetConfig+0x120>)
 800e840:	4293      	cmp	r3, r2
 800e842:	d003      	beq.n	800e84c <TIM_Base_SetConfig+0x40>
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	4a3a      	ldr	r2, [pc, #232]	; (800e930 <TIM_Base_SetConfig+0x124>)
 800e848:	4293      	cmp	r3, r2
 800e84a:	d108      	bne.n	800e85e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e852:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	685b      	ldr	r3, [r3, #4]
 800e858:	68fa      	ldr	r2, [r7, #12]
 800e85a:	4313      	orrs	r3, r2
 800e85c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	4a2f      	ldr	r2, [pc, #188]	; (800e920 <TIM_Base_SetConfig+0x114>)
 800e862:	4293      	cmp	r3, r2
 800e864:	d02b      	beq.n	800e8be <TIM_Base_SetConfig+0xb2>
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e86c:	d027      	beq.n	800e8be <TIM_Base_SetConfig+0xb2>
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	4a2c      	ldr	r2, [pc, #176]	; (800e924 <TIM_Base_SetConfig+0x118>)
 800e872:	4293      	cmp	r3, r2
 800e874:	d023      	beq.n	800e8be <TIM_Base_SetConfig+0xb2>
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	4a2b      	ldr	r2, [pc, #172]	; (800e928 <TIM_Base_SetConfig+0x11c>)
 800e87a:	4293      	cmp	r3, r2
 800e87c:	d01f      	beq.n	800e8be <TIM_Base_SetConfig+0xb2>
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	4a2a      	ldr	r2, [pc, #168]	; (800e92c <TIM_Base_SetConfig+0x120>)
 800e882:	4293      	cmp	r3, r2
 800e884:	d01b      	beq.n	800e8be <TIM_Base_SetConfig+0xb2>
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	4a29      	ldr	r2, [pc, #164]	; (800e930 <TIM_Base_SetConfig+0x124>)
 800e88a:	4293      	cmp	r3, r2
 800e88c:	d017      	beq.n	800e8be <TIM_Base_SetConfig+0xb2>
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	4a28      	ldr	r2, [pc, #160]	; (800e934 <TIM_Base_SetConfig+0x128>)
 800e892:	4293      	cmp	r3, r2
 800e894:	d013      	beq.n	800e8be <TIM_Base_SetConfig+0xb2>
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	4a27      	ldr	r2, [pc, #156]	; (800e938 <TIM_Base_SetConfig+0x12c>)
 800e89a:	4293      	cmp	r3, r2
 800e89c:	d00f      	beq.n	800e8be <TIM_Base_SetConfig+0xb2>
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	4a26      	ldr	r2, [pc, #152]	; (800e93c <TIM_Base_SetConfig+0x130>)
 800e8a2:	4293      	cmp	r3, r2
 800e8a4:	d00b      	beq.n	800e8be <TIM_Base_SetConfig+0xb2>
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	4a25      	ldr	r2, [pc, #148]	; (800e940 <TIM_Base_SetConfig+0x134>)
 800e8aa:	4293      	cmp	r3, r2
 800e8ac:	d007      	beq.n	800e8be <TIM_Base_SetConfig+0xb2>
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	4a24      	ldr	r2, [pc, #144]	; (800e944 <TIM_Base_SetConfig+0x138>)
 800e8b2:	4293      	cmp	r3, r2
 800e8b4:	d003      	beq.n	800e8be <TIM_Base_SetConfig+0xb2>
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	4a23      	ldr	r2, [pc, #140]	; (800e948 <TIM_Base_SetConfig+0x13c>)
 800e8ba:	4293      	cmp	r3, r2
 800e8bc:	d108      	bne.n	800e8d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e8c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	68db      	ldr	r3, [r3, #12]
 800e8ca:	68fa      	ldr	r2, [r7, #12]
 800e8cc:	4313      	orrs	r3, r2
 800e8ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e8d6:	683b      	ldr	r3, [r7, #0]
 800e8d8:	695b      	ldr	r3, [r3, #20]
 800e8da:	4313      	orrs	r3, r2
 800e8dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	68fa      	ldr	r2, [r7, #12]
 800e8e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	689a      	ldr	r2, [r3, #8]
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	681a      	ldr	r2, [r3, #0]
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	4a0a      	ldr	r2, [pc, #40]	; (800e920 <TIM_Base_SetConfig+0x114>)
 800e8f8:	4293      	cmp	r3, r2
 800e8fa:	d003      	beq.n	800e904 <TIM_Base_SetConfig+0xf8>
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	4a0c      	ldr	r2, [pc, #48]	; (800e930 <TIM_Base_SetConfig+0x124>)
 800e900:	4293      	cmp	r3, r2
 800e902:	d103      	bne.n	800e90c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	691a      	ldr	r2, [r3, #16]
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2201      	movs	r2, #1
 800e910:	615a      	str	r2, [r3, #20]
}
 800e912:	bf00      	nop
 800e914:	3714      	adds	r7, #20
 800e916:	46bd      	mov	sp, r7
 800e918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91c:	4770      	bx	lr
 800e91e:	bf00      	nop
 800e920:	40010000 	.word	0x40010000
 800e924:	40000400 	.word	0x40000400
 800e928:	40000800 	.word	0x40000800
 800e92c:	40000c00 	.word	0x40000c00
 800e930:	40010400 	.word	0x40010400
 800e934:	40014000 	.word	0x40014000
 800e938:	40014400 	.word	0x40014400
 800e93c:	40014800 	.word	0x40014800
 800e940:	40001800 	.word	0x40001800
 800e944:	40001c00 	.word	0x40001c00
 800e948:	40002000 	.word	0x40002000

0800e94c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e94c:	b480      	push	{r7}
 800e94e:	b087      	sub	sp, #28
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
 800e954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	6a1b      	ldr	r3, [r3, #32]
 800e95a:	f023 0201 	bic.w	r2, r3, #1
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6a1b      	ldr	r3, [r3, #32]
 800e966:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	685b      	ldr	r3, [r3, #4]
 800e96c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	699b      	ldr	r3, [r3, #24]
 800e972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e97a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	f023 0303 	bic.w	r3, r3, #3
 800e982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	68fa      	ldr	r2, [r7, #12]
 800e98a:	4313      	orrs	r3, r2
 800e98c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	f023 0302 	bic.w	r3, r3, #2
 800e994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	689b      	ldr	r3, [r3, #8]
 800e99a:	697a      	ldr	r2, [r7, #20]
 800e99c:	4313      	orrs	r3, r2
 800e99e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	4a20      	ldr	r2, [pc, #128]	; (800ea24 <TIM_OC1_SetConfig+0xd8>)
 800e9a4:	4293      	cmp	r3, r2
 800e9a6:	d003      	beq.n	800e9b0 <TIM_OC1_SetConfig+0x64>
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	4a1f      	ldr	r2, [pc, #124]	; (800ea28 <TIM_OC1_SetConfig+0xdc>)
 800e9ac:	4293      	cmp	r3, r2
 800e9ae:	d10c      	bne.n	800e9ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e9b0:	697b      	ldr	r3, [r7, #20]
 800e9b2:	f023 0308 	bic.w	r3, r3, #8
 800e9b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	68db      	ldr	r3, [r3, #12]
 800e9bc:	697a      	ldr	r2, [r7, #20]
 800e9be:	4313      	orrs	r3, r2
 800e9c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	f023 0304 	bic.w	r3, r3, #4
 800e9c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	4a15      	ldr	r2, [pc, #84]	; (800ea24 <TIM_OC1_SetConfig+0xd8>)
 800e9ce:	4293      	cmp	r3, r2
 800e9d0:	d003      	beq.n	800e9da <TIM_OC1_SetConfig+0x8e>
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	4a14      	ldr	r2, [pc, #80]	; (800ea28 <TIM_OC1_SetConfig+0xdc>)
 800e9d6:	4293      	cmp	r3, r2
 800e9d8:	d111      	bne.n	800e9fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e9da:	693b      	ldr	r3, [r7, #16]
 800e9dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e9e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e9e2:	693b      	ldr	r3, [r7, #16]
 800e9e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e9e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	695b      	ldr	r3, [r3, #20]
 800e9ee:	693a      	ldr	r2, [r7, #16]
 800e9f0:	4313      	orrs	r3, r2
 800e9f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	699b      	ldr	r3, [r3, #24]
 800e9f8:	693a      	ldr	r2, [r7, #16]
 800e9fa:	4313      	orrs	r3, r2
 800e9fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	693a      	ldr	r2, [r7, #16]
 800ea02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	68fa      	ldr	r2, [r7, #12]
 800ea08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	685a      	ldr	r2, [r3, #4]
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	697a      	ldr	r2, [r7, #20]
 800ea16:	621a      	str	r2, [r3, #32]
}
 800ea18:	bf00      	nop
 800ea1a:	371c      	adds	r7, #28
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea22:	4770      	bx	lr
 800ea24:	40010000 	.word	0x40010000
 800ea28:	40010400 	.word	0x40010400

0800ea2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ea2c:	b480      	push	{r7}
 800ea2e:	b087      	sub	sp, #28
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
 800ea34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	6a1b      	ldr	r3, [r3, #32]
 800ea3a:	f023 0210 	bic.w	r2, r3, #16
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	6a1b      	ldr	r3, [r3, #32]
 800ea46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	685b      	ldr	r3, [r3, #4]
 800ea4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	699b      	ldr	r3, [r3, #24]
 800ea52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ea5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ea62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	021b      	lsls	r3, r3, #8
 800ea6a:	68fa      	ldr	r2, [r7, #12]
 800ea6c:	4313      	orrs	r3, r2
 800ea6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ea70:	697b      	ldr	r3, [r7, #20]
 800ea72:	f023 0320 	bic.w	r3, r3, #32
 800ea76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	689b      	ldr	r3, [r3, #8]
 800ea7c:	011b      	lsls	r3, r3, #4
 800ea7e:	697a      	ldr	r2, [r7, #20]
 800ea80:	4313      	orrs	r3, r2
 800ea82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	4a22      	ldr	r2, [pc, #136]	; (800eb10 <TIM_OC2_SetConfig+0xe4>)
 800ea88:	4293      	cmp	r3, r2
 800ea8a:	d003      	beq.n	800ea94 <TIM_OC2_SetConfig+0x68>
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	4a21      	ldr	r2, [pc, #132]	; (800eb14 <TIM_OC2_SetConfig+0xe8>)
 800ea90:	4293      	cmp	r3, r2
 800ea92:	d10d      	bne.n	800eab0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ea9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	68db      	ldr	r3, [r3, #12]
 800eaa0:	011b      	lsls	r3, r3, #4
 800eaa2:	697a      	ldr	r2, [r7, #20]
 800eaa4:	4313      	orrs	r3, r2
 800eaa6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800eaa8:	697b      	ldr	r3, [r7, #20]
 800eaaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eaae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	4a17      	ldr	r2, [pc, #92]	; (800eb10 <TIM_OC2_SetConfig+0xe4>)
 800eab4:	4293      	cmp	r3, r2
 800eab6:	d003      	beq.n	800eac0 <TIM_OC2_SetConfig+0x94>
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	4a16      	ldr	r2, [pc, #88]	; (800eb14 <TIM_OC2_SetConfig+0xe8>)
 800eabc:	4293      	cmp	r3, r2
 800eabe:	d113      	bne.n	800eae8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800eac0:	693b      	ldr	r3, [r7, #16]
 800eac2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800eac6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800eac8:	693b      	ldr	r3, [r7, #16]
 800eaca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eace:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	695b      	ldr	r3, [r3, #20]
 800ead4:	009b      	lsls	r3, r3, #2
 800ead6:	693a      	ldr	r2, [r7, #16]
 800ead8:	4313      	orrs	r3, r2
 800eada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	699b      	ldr	r3, [r3, #24]
 800eae0:	009b      	lsls	r3, r3, #2
 800eae2:	693a      	ldr	r2, [r7, #16]
 800eae4:	4313      	orrs	r3, r2
 800eae6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	693a      	ldr	r2, [r7, #16]
 800eaec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	68fa      	ldr	r2, [r7, #12]
 800eaf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	685a      	ldr	r2, [r3, #4]
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	697a      	ldr	r2, [r7, #20]
 800eb00:	621a      	str	r2, [r3, #32]
}
 800eb02:	bf00      	nop
 800eb04:	371c      	adds	r7, #28
 800eb06:	46bd      	mov	sp, r7
 800eb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0c:	4770      	bx	lr
 800eb0e:	bf00      	nop
 800eb10:	40010000 	.word	0x40010000
 800eb14:	40010400 	.word	0x40010400

0800eb18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b087      	sub	sp, #28
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
 800eb20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6a1b      	ldr	r3, [r3, #32]
 800eb26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	6a1b      	ldr	r3, [r3, #32]
 800eb32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	685b      	ldr	r3, [r3, #4]
 800eb38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	69db      	ldr	r3, [r3, #28]
 800eb3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	f023 0303 	bic.w	r3, r3, #3
 800eb4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	68fa      	ldr	r2, [r7, #12]
 800eb56:	4313      	orrs	r3, r2
 800eb58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800eb5a:	697b      	ldr	r3, [r7, #20]
 800eb5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800eb60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	689b      	ldr	r3, [r3, #8]
 800eb66:	021b      	lsls	r3, r3, #8
 800eb68:	697a      	ldr	r2, [r7, #20]
 800eb6a:	4313      	orrs	r3, r2
 800eb6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	4a21      	ldr	r2, [pc, #132]	; (800ebf8 <TIM_OC3_SetConfig+0xe0>)
 800eb72:	4293      	cmp	r3, r2
 800eb74:	d003      	beq.n	800eb7e <TIM_OC3_SetConfig+0x66>
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	4a20      	ldr	r2, [pc, #128]	; (800ebfc <TIM_OC3_SetConfig+0xe4>)
 800eb7a:	4293      	cmp	r3, r2
 800eb7c:	d10d      	bne.n	800eb9a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800eb7e:	697b      	ldr	r3, [r7, #20]
 800eb80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eb84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800eb86:	683b      	ldr	r3, [r7, #0]
 800eb88:	68db      	ldr	r3, [r3, #12]
 800eb8a:	021b      	lsls	r3, r3, #8
 800eb8c:	697a      	ldr	r2, [r7, #20]
 800eb8e:	4313      	orrs	r3, r2
 800eb90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800eb92:	697b      	ldr	r3, [r7, #20]
 800eb94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800eb98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	4a16      	ldr	r2, [pc, #88]	; (800ebf8 <TIM_OC3_SetConfig+0xe0>)
 800eb9e:	4293      	cmp	r3, r2
 800eba0:	d003      	beq.n	800ebaa <TIM_OC3_SetConfig+0x92>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	4a15      	ldr	r2, [pc, #84]	; (800ebfc <TIM_OC3_SetConfig+0xe4>)
 800eba6:	4293      	cmp	r3, r2
 800eba8:	d113      	bne.n	800ebd2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ebaa:	693b      	ldr	r3, [r7, #16]
 800ebac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ebb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ebb2:	693b      	ldr	r3, [r7, #16]
 800ebb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ebb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	695b      	ldr	r3, [r3, #20]
 800ebbe:	011b      	lsls	r3, r3, #4
 800ebc0:	693a      	ldr	r2, [r7, #16]
 800ebc2:	4313      	orrs	r3, r2
 800ebc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ebc6:	683b      	ldr	r3, [r7, #0]
 800ebc8:	699b      	ldr	r3, [r3, #24]
 800ebca:	011b      	lsls	r3, r3, #4
 800ebcc:	693a      	ldr	r2, [r7, #16]
 800ebce:	4313      	orrs	r3, r2
 800ebd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	693a      	ldr	r2, [r7, #16]
 800ebd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	68fa      	ldr	r2, [r7, #12]
 800ebdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	685a      	ldr	r2, [r3, #4]
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	697a      	ldr	r2, [r7, #20]
 800ebea:	621a      	str	r2, [r3, #32]
}
 800ebec:	bf00      	nop
 800ebee:	371c      	adds	r7, #28
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf6:	4770      	bx	lr
 800ebf8:	40010000 	.word	0x40010000
 800ebfc:	40010400 	.word	0x40010400

0800ec00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ec00:	b480      	push	{r7}
 800ec02:	b087      	sub	sp, #28
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
 800ec08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	6a1b      	ldr	r3, [r3, #32]
 800ec0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	6a1b      	ldr	r3, [r3, #32]
 800ec1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	685b      	ldr	r3, [r3, #4]
 800ec20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	69db      	ldr	r3, [r3, #28]
 800ec26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ec2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ec36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	021b      	lsls	r3, r3, #8
 800ec3e:	68fa      	ldr	r2, [r7, #12]
 800ec40:	4313      	orrs	r3, r2
 800ec42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ec44:	693b      	ldr	r3, [r7, #16]
 800ec46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ec4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	689b      	ldr	r3, [r3, #8]
 800ec50:	031b      	lsls	r3, r3, #12
 800ec52:	693a      	ldr	r2, [r7, #16]
 800ec54:	4313      	orrs	r3, r2
 800ec56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	4a12      	ldr	r2, [pc, #72]	; (800eca4 <TIM_OC4_SetConfig+0xa4>)
 800ec5c:	4293      	cmp	r3, r2
 800ec5e:	d003      	beq.n	800ec68 <TIM_OC4_SetConfig+0x68>
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	4a11      	ldr	r2, [pc, #68]	; (800eca8 <TIM_OC4_SetConfig+0xa8>)
 800ec64:	4293      	cmp	r3, r2
 800ec66:	d109      	bne.n	800ec7c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ec6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	695b      	ldr	r3, [r3, #20]
 800ec74:	019b      	lsls	r3, r3, #6
 800ec76:	697a      	ldr	r2, [r7, #20]
 800ec78:	4313      	orrs	r3, r2
 800ec7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	697a      	ldr	r2, [r7, #20]
 800ec80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	68fa      	ldr	r2, [r7, #12]
 800ec86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	685a      	ldr	r2, [r3, #4]
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	693a      	ldr	r2, [r7, #16]
 800ec94:	621a      	str	r2, [r3, #32]
}
 800ec96:	bf00      	nop
 800ec98:	371c      	adds	r7, #28
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca0:	4770      	bx	lr
 800eca2:	bf00      	nop
 800eca4:	40010000 	.word	0x40010000
 800eca8:	40010400 	.word	0x40010400

0800ecac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ecac:	b480      	push	{r7}
 800ecae:	b087      	sub	sp, #28
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	60f8      	str	r0, [r7, #12]
 800ecb4:	60b9      	str	r1, [r7, #8]
 800ecb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	6a1b      	ldr	r3, [r3, #32]
 800ecbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	6a1b      	ldr	r3, [r3, #32]
 800ecc2:	f023 0201 	bic.w	r2, r3, #1
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	699b      	ldr	r3, [r3, #24]
 800ecce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ecd0:	693b      	ldr	r3, [r7, #16]
 800ecd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ecd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	011b      	lsls	r3, r3, #4
 800ecdc:	693a      	ldr	r2, [r7, #16]
 800ecde:	4313      	orrs	r3, r2
 800ece0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ece2:	697b      	ldr	r3, [r7, #20]
 800ece4:	f023 030a 	bic.w	r3, r3, #10
 800ece8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ecea:	697a      	ldr	r2, [r7, #20]
 800ecec:	68bb      	ldr	r3, [r7, #8]
 800ecee:	4313      	orrs	r3, r2
 800ecf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	693a      	ldr	r2, [r7, #16]
 800ecf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	697a      	ldr	r2, [r7, #20]
 800ecfc:	621a      	str	r2, [r3, #32]
}
 800ecfe:	bf00      	nop
 800ed00:	371c      	adds	r7, #28
 800ed02:	46bd      	mov	sp, r7
 800ed04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed08:	4770      	bx	lr

0800ed0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ed0a:	b480      	push	{r7}
 800ed0c:	b087      	sub	sp, #28
 800ed0e:	af00      	add	r7, sp, #0
 800ed10:	60f8      	str	r0, [r7, #12]
 800ed12:	60b9      	str	r1, [r7, #8]
 800ed14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	6a1b      	ldr	r3, [r3, #32]
 800ed1a:	f023 0210 	bic.w	r2, r3, #16
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	699b      	ldr	r3, [r3, #24]
 800ed26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	6a1b      	ldr	r3, [r3, #32]
 800ed2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ed2e:	697b      	ldr	r3, [r7, #20]
 800ed30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ed34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	031b      	lsls	r3, r3, #12
 800ed3a:	697a      	ldr	r2, [r7, #20]
 800ed3c:	4313      	orrs	r3, r2
 800ed3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ed40:	693b      	ldr	r3, [r7, #16]
 800ed42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ed46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ed48:	68bb      	ldr	r3, [r7, #8]
 800ed4a:	011b      	lsls	r3, r3, #4
 800ed4c:	693a      	ldr	r2, [r7, #16]
 800ed4e:	4313      	orrs	r3, r2
 800ed50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	697a      	ldr	r2, [r7, #20]
 800ed56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	693a      	ldr	r2, [r7, #16]
 800ed5c:	621a      	str	r2, [r3, #32]
}
 800ed5e:	bf00      	nop
 800ed60:	371c      	adds	r7, #28
 800ed62:	46bd      	mov	sp, r7
 800ed64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed68:	4770      	bx	lr

0800ed6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ed6a:	b480      	push	{r7}
 800ed6c:	b085      	sub	sp, #20
 800ed6e:	af00      	add	r7, sp, #0
 800ed70:	6078      	str	r0, [r7, #4]
 800ed72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	689b      	ldr	r3, [r3, #8]
 800ed78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ed82:	683a      	ldr	r2, [r7, #0]
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	4313      	orrs	r3, r2
 800ed88:	f043 0307 	orr.w	r3, r3, #7
 800ed8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	68fa      	ldr	r2, [r7, #12]
 800ed92:	609a      	str	r2, [r3, #8]
}
 800ed94:	bf00      	nop
 800ed96:	3714      	adds	r7, #20
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9e:	4770      	bx	lr

0800eda0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800eda0:	b480      	push	{r7}
 800eda2:	b087      	sub	sp, #28
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	60f8      	str	r0, [r7, #12]
 800eda8:	60b9      	str	r1, [r7, #8]
 800edaa:	607a      	str	r2, [r7, #4]
 800edac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	689b      	ldr	r3, [r3, #8]
 800edb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800edba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	021a      	lsls	r2, r3, #8
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	431a      	orrs	r2, r3
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	4313      	orrs	r3, r2
 800edc8:	697a      	ldr	r2, [r7, #20]
 800edca:	4313      	orrs	r3, r2
 800edcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	697a      	ldr	r2, [r7, #20]
 800edd2:	609a      	str	r2, [r3, #8]
}
 800edd4:	bf00      	nop
 800edd6:	371c      	adds	r7, #28
 800edd8:	46bd      	mov	sp, r7
 800edda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edde:	4770      	bx	lr

0800ede0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ede0:	b480      	push	{r7}
 800ede2:	b085      	sub	sp, #20
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
 800ede8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800edf0:	2b01      	cmp	r3, #1
 800edf2:	d101      	bne.n	800edf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800edf4:	2302      	movs	r3, #2
 800edf6:	e05a      	b.n	800eeae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	2201      	movs	r2, #1
 800edfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2202      	movs	r2, #2
 800ee04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	685b      	ldr	r3, [r3, #4]
 800ee0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	689b      	ldr	r3, [r3, #8]
 800ee16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	68fa      	ldr	r2, [r7, #12]
 800ee26:	4313      	orrs	r3, r2
 800ee28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	68fa      	ldr	r2, [r7, #12]
 800ee30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	4a21      	ldr	r2, [pc, #132]	; (800eebc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ee38:	4293      	cmp	r3, r2
 800ee3a:	d022      	beq.n	800ee82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee44:	d01d      	beq.n	800ee82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	4a1d      	ldr	r2, [pc, #116]	; (800eec0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ee4c:	4293      	cmp	r3, r2
 800ee4e:	d018      	beq.n	800ee82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	4a1b      	ldr	r2, [pc, #108]	; (800eec4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ee56:	4293      	cmp	r3, r2
 800ee58:	d013      	beq.n	800ee82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	4a1a      	ldr	r2, [pc, #104]	; (800eec8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ee60:	4293      	cmp	r3, r2
 800ee62:	d00e      	beq.n	800ee82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	4a18      	ldr	r2, [pc, #96]	; (800eecc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ee6a:	4293      	cmp	r3, r2
 800ee6c:	d009      	beq.n	800ee82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	4a17      	ldr	r2, [pc, #92]	; (800eed0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ee74:	4293      	cmp	r3, r2
 800ee76:	d004      	beq.n	800ee82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	4a15      	ldr	r2, [pc, #84]	; (800eed4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ee7e:	4293      	cmp	r3, r2
 800ee80:	d10c      	bne.n	800ee9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ee82:	68bb      	ldr	r3, [r7, #8]
 800ee84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ee88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ee8a:	683b      	ldr	r3, [r7, #0]
 800ee8c:	685b      	ldr	r3, [r3, #4]
 800ee8e:	68ba      	ldr	r2, [r7, #8]
 800ee90:	4313      	orrs	r3, r2
 800ee92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	68ba      	ldr	r2, [r7, #8]
 800ee9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	2201      	movs	r2, #1
 800eea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2200      	movs	r2, #0
 800eea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eeac:	2300      	movs	r3, #0
}
 800eeae:	4618      	mov	r0, r3
 800eeb0:	3714      	adds	r7, #20
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb8:	4770      	bx	lr
 800eeba:	bf00      	nop
 800eebc:	40010000 	.word	0x40010000
 800eec0:	40000400 	.word	0x40000400
 800eec4:	40000800 	.word	0x40000800
 800eec8:	40000c00 	.word	0x40000c00
 800eecc:	40010400 	.word	0x40010400
 800eed0:	40014000 	.word	0x40014000
 800eed4:	40001800 	.word	0x40001800

0800eed8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800eed8:	b480      	push	{r7}
 800eeda:	b083      	sub	sp, #12
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800eee0:	bf00      	nop
 800eee2:	370c      	adds	r7, #12
 800eee4:	46bd      	mov	sp, r7
 800eee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeea:	4770      	bx	lr

0800eeec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800eeec:	b480      	push	{r7}
 800eeee:	b083      	sub	sp, #12
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800eef4:	bf00      	nop
 800eef6:	370c      	adds	r7, #12
 800eef8:	46bd      	mov	sp, r7
 800eefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefe:	4770      	bx	lr

0800ef00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b082      	sub	sp, #8
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d101      	bne.n	800ef12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ef0e:	2301      	movs	r3, #1
 800ef10:	e03f      	b.n	800ef92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ef18:	b2db      	uxtb	r3, r3
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d106      	bne.n	800ef2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	2200      	movs	r2, #0
 800ef22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	f7f3 ff9a 	bl	8002e60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2224      	movs	r2, #36	; 0x24
 800ef30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	68da      	ldr	r2, [r3, #12]
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ef42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ef44:	6878      	ldr	r0, [r7, #4]
 800ef46:	f000 f9cb 	bl	800f2e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	691a      	ldr	r2, [r3, #16]
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ef58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	695a      	ldr	r2, [r3, #20]
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ef68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	68da      	ldr	r2, [r3, #12]
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ef78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2220      	movs	r2, #32
 800ef84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	2220      	movs	r2, #32
 800ef8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ef90:	2300      	movs	r3, #0
}
 800ef92:	4618      	mov	r0, r3
 800ef94:	3708      	adds	r7, #8
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}

0800ef9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ef9a:	b580      	push	{r7, lr}
 800ef9c:	b08a      	sub	sp, #40	; 0x28
 800ef9e:	af02      	add	r7, sp, #8
 800efa0:	60f8      	str	r0, [r7, #12]
 800efa2:	60b9      	str	r1, [r7, #8]
 800efa4:	603b      	str	r3, [r7, #0]
 800efa6:	4613      	mov	r3, r2
 800efa8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800efaa:	2300      	movs	r3, #0
 800efac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800efb4:	b2db      	uxtb	r3, r3
 800efb6:	2b20      	cmp	r3, #32
 800efb8:	d17c      	bne.n	800f0b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800efba:	68bb      	ldr	r3, [r7, #8]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d002      	beq.n	800efc6 <HAL_UART_Transmit+0x2c>
 800efc0:	88fb      	ldrh	r3, [r7, #6]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d101      	bne.n	800efca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800efc6:	2301      	movs	r3, #1
 800efc8:	e075      	b.n	800f0b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800efd0:	2b01      	cmp	r3, #1
 800efd2:	d101      	bne.n	800efd8 <HAL_UART_Transmit+0x3e>
 800efd4:	2302      	movs	r3, #2
 800efd6:	e06e      	b.n	800f0b6 <HAL_UART_Transmit+0x11c>
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	2201      	movs	r2, #1
 800efdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	2200      	movs	r2, #0
 800efe4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	2221      	movs	r2, #33	; 0x21
 800efea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800efee:	f7fa fdd9 	bl	8009ba4 <HAL_GetTick>
 800eff2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	88fa      	ldrh	r2, [r7, #6]
 800eff8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	88fa      	ldrh	r2, [r7, #6]
 800effe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	689b      	ldr	r3, [r3, #8]
 800f004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f008:	d108      	bne.n	800f01c <HAL_UART_Transmit+0x82>
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	691b      	ldr	r3, [r3, #16]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d104      	bne.n	800f01c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800f012:	2300      	movs	r3, #0
 800f014:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f016:	68bb      	ldr	r3, [r7, #8]
 800f018:	61bb      	str	r3, [r7, #24]
 800f01a:	e003      	b.n	800f024 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800f01c:	68bb      	ldr	r3, [r7, #8]
 800f01e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f020:	2300      	movs	r3, #0
 800f022:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	2200      	movs	r2, #0
 800f028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800f02c:	e02a      	b.n	800f084 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f02e:	683b      	ldr	r3, [r7, #0]
 800f030:	9300      	str	r3, [sp, #0]
 800f032:	697b      	ldr	r3, [r7, #20]
 800f034:	2200      	movs	r2, #0
 800f036:	2180      	movs	r1, #128	; 0x80
 800f038:	68f8      	ldr	r0, [r7, #12]
 800f03a:	f000 f8e2 	bl	800f202 <UART_WaitOnFlagUntilTimeout>
 800f03e:	4603      	mov	r3, r0
 800f040:	2b00      	cmp	r3, #0
 800f042:	d001      	beq.n	800f048 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800f044:	2303      	movs	r3, #3
 800f046:	e036      	b.n	800f0b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800f048:	69fb      	ldr	r3, [r7, #28]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d10b      	bne.n	800f066 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f04e:	69bb      	ldr	r3, [r7, #24]
 800f050:	881b      	ldrh	r3, [r3, #0]
 800f052:	461a      	mov	r2, r3
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f05c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800f05e:	69bb      	ldr	r3, [r7, #24]
 800f060:	3302      	adds	r3, #2
 800f062:	61bb      	str	r3, [r7, #24]
 800f064:	e007      	b.n	800f076 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800f066:	69fb      	ldr	r3, [r7, #28]
 800f068:	781a      	ldrb	r2, [r3, #0]
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800f070:	69fb      	ldr	r3, [r7, #28]
 800f072:	3301      	adds	r3, #1
 800f074:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f07a:	b29b      	uxth	r3, r3
 800f07c:	3b01      	subs	r3, #1
 800f07e:	b29a      	uxth	r2, r3
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f088:	b29b      	uxth	r3, r3
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d1cf      	bne.n	800f02e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f08e:	683b      	ldr	r3, [r7, #0]
 800f090:	9300      	str	r3, [sp, #0]
 800f092:	697b      	ldr	r3, [r7, #20]
 800f094:	2200      	movs	r2, #0
 800f096:	2140      	movs	r1, #64	; 0x40
 800f098:	68f8      	ldr	r0, [r7, #12]
 800f09a:	f000 f8b2 	bl	800f202 <UART_WaitOnFlagUntilTimeout>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d001      	beq.n	800f0a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800f0a4:	2303      	movs	r3, #3
 800f0a6:	e006      	b.n	800f0b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	2220      	movs	r2, #32
 800f0ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	e000      	b.n	800f0b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800f0b4:	2302      	movs	r3, #2
  }
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	3720      	adds	r7, #32
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}

0800f0be <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f0be:	b580      	push	{r7, lr}
 800f0c0:	b08a      	sub	sp, #40	; 0x28
 800f0c2:	af02      	add	r7, sp, #8
 800f0c4:	60f8      	str	r0, [r7, #12]
 800f0c6:	60b9      	str	r1, [r7, #8]
 800f0c8:	603b      	str	r3, [r7, #0]
 800f0ca:	4613      	mov	r3, r2
 800f0cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f0d8:	b2db      	uxtb	r3, r3
 800f0da:	2b20      	cmp	r3, #32
 800f0dc:	f040 808c 	bne.w	800f1f8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d002      	beq.n	800f0ec <HAL_UART_Receive+0x2e>
 800f0e6:	88fb      	ldrh	r3, [r7, #6]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d101      	bne.n	800f0f0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800f0ec:	2301      	movs	r3, #1
 800f0ee:	e084      	b.n	800f1fa <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f0f6:	2b01      	cmp	r3, #1
 800f0f8:	d101      	bne.n	800f0fe <HAL_UART_Receive+0x40>
 800f0fa:	2302      	movs	r3, #2
 800f0fc:	e07d      	b.n	800f1fa <HAL_UART_Receive+0x13c>
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	2201      	movs	r2, #1
 800f102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	2200      	movs	r2, #0
 800f10a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	2222      	movs	r2, #34	; 0x22
 800f110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	2200      	movs	r2, #0
 800f118:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f11a:	f7fa fd43 	bl	8009ba4 <HAL_GetTick>
 800f11e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	88fa      	ldrh	r2, [r7, #6]
 800f124:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	88fa      	ldrh	r2, [r7, #6]
 800f12a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	689b      	ldr	r3, [r3, #8]
 800f130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f134:	d108      	bne.n	800f148 <HAL_UART_Receive+0x8a>
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	691b      	ldr	r3, [r3, #16]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d104      	bne.n	800f148 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800f13e:	2300      	movs	r3, #0
 800f140:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f142:	68bb      	ldr	r3, [r7, #8]
 800f144:	61bb      	str	r3, [r7, #24]
 800f146:	e003      	b.n	800f150 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800f148:	68bb      	ldr	r3, [r7, #8]
 800f14a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f14c:	2300      	movs	r3, #0
 800f14e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	2200      	movs	r2, #0
 800f154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800f158:	e043      	b.n	800f1e2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f15a:	683b      	ldr	r3, [r7, #0]
 800f15c:	9300      	str	r3, [sp, #0]
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	2200      	movs	r2, #0
 800f162:	2120      	movs	r1, #32
 800f164:	68f8      	ldr	r0, [r7, #12]
 800f166:	f000 f84c 	bl	800f202 <UART_WaitOnFlagUntilTimeout>
 800f16a:	4603      	mov	r3, r0
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d001      	beq.n	800f174 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800f170:	2303      	movs	r3, #3
 800f172:	e042      	b.n	800f1fa <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800f174:	69fb      	ldr	r3, [r7, #28]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d10c      	bne.n	800f194 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	685b      	ldr	r3, [r3, #4]
 800f180:	b29b      	uxth	r3, r3
 800f182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f186:	b29a      	uxth	r2, r3
 800f188:	69bb      	ldr	r3, [r7, #24]
 800f18a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f18c:	69bb      	ldr	r3, [r7, #24]
 800f18e:	3302      	adds	r3, #2
 800f190:	61bb      	str	r3, [r7, #24]
 800f192:	e01f      	b.n	800f1d4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	689b      	ldr	r3, [r3, #8]
 800f198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f19c:	d007      	beq.n	800f1ae <HAL_UART_Receive+0xf0>
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	689b      	ldr	r3, [r3, #8]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d10a      	bne.n	800f1bc <HAL_UART_Receive+0xfe>
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	691b      	ldr	r3, [r3, #16]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d106      	bne.n	800f1bc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	685b      	ldr	r3, [r3, #4]
 800f1b4:	b2da      	uxtb	r2, r3
 800f1b6:	69fb      	ldr	r3, [r7, #28]
 800f1b8:	701a      	strb	r2, [r3, #0]
 800f1ba:	e008      	b.n	800f1ce <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	685b      	ldr	r3, [r3, #4]
 800f1c2:	b2db      	uxtb	r3, r3
 800f1c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f1c8:	b2da      	uxtb	r2, r3
 800f1ca:	69fb      	ldr	r3, [r7, #28]
 800f1cc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800f1ce:	69fb      	ldr	r3, [r7, #28]
 800f1d0:	3301      	adds	r3, #1
 800f1d2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f1d8:	b29b      	uxth	r3, r3
 800f1da:	3b01      	subs	r3, #1
 800f1dc:	b29a      	uxth	r2, r3
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f1e6:	b29b      	uxth	r3, r3
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d1b6      	bne.n	800f15a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	2220      	movs	r2, #32
 800f1f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	e000      	b.n	800f1fa <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800f1f8:	2302      	movs	r3, #2
  }
}
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	3720      	adds	r7, #32
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}

0800f202 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800f202:	b580      	push	{r7, lr}
 800f204:	b090      	sub	sp, #64	; 0x40
 800f206:	af00      	add	r7, sp, #0
 800f208:	60f8      	str	r0, [r7, #12]
 800f20a:	60b9      	str	r1, [r7, #8]
 800f20c:	603b      	str	r3, [r7, #0]
 800f20e:	4613      	mov	r3, r2
 800f210:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f212:	e050      	b.n	800f2b6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f21a:	d04c      	beq.n	800f2b6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800f21c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d007      	beq.n	800f232 <UART_WaitOnFlagUntilTimeout+0x30>
 800f222:	f7fa fcbf 	bl	8009ba4 <HAL_GetTick>
 800f226:	4602      	mov	r2, r0
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	1ad3      	subs	r3, r2, r3
 800f22c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f22e:	429a      	cmp	r2, r3
 800f230:	d241      	bcs.n	800f2b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	330c      	adds	r3, #12
 800f238:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f23c:	e853 3f00 	ldrex	r3, [r3]
 800f240:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f244:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f248:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	330c      	adds	r3, #12
 800f250:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f252:	637a      	str	r2, [r7, #52]	; 0x34
 800f254:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f256:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f258:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f25a:	e841 2300 	strex	r3, r2, [r1]
 800f25e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f262:	2b00      	cmp	r3, #0
 800f264:	d1e5      	bne.n	800f232 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	3314      	adds	r3, #20
 800f26c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f26e:	697b      	ldr	r3, [r7, #20]
 800f270:	e853 3f00 	ldrex	r3, [r3]
 800f274:	613b      	str	r3, [r7, #16]
   return(result);
 800f276:	693b      	ldr	r3, [r7, #16]
 800f278:	f023 0301 	bic.w	r3, r3, #1
 800f27c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	3314      	adds	r3, #20
 800f284:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f286:	623a      	str	r2, [r7, #32]
 800f288:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f28a:	69f9      	ldr	r1, [r7, #28]
 800f28c:	6a3a      	ldr	r2, [r7, #32]
 800f28e:	e841 2300 	strex	r3, r2, [r1]
 800f292:	61bb      	str	r3, [r7, #24]
   return(result);
 800f294:	69bb      	ldr	r3, [r7, #24]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d1e5      	bne.n	800f266 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	2220      	movs	r2, #32
 800f29e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	2220      	movs	r2, #32
 800f2a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800f2b2:	2303      	movs	r3, #3
 800f2b4:	e00f      	b.n	800f2d6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	681a      	ldr	r2, [r3, #0]
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	4013      	ands	r3, r2
 800f2c0:	68ba      	ldr	r2, [r7, #8]
 800f2c2:	429a      	cmp	r2, r3
 800f2c4:	bf0c      	ite	eq
 800f2c6:	2301      	moveq	r3, #1
 800f2c8:	2300      	movne	r3, #0
 800f2ca:	b2db      	uxtb	r3, r3
 800f2cc:	461a      	mov	r2, r3
 800f2ce:	79fb      	ldrb	r3, [r7, #7]
 800f2d0:	429a      	cmp	r2, r3
 800f2d2:	d09f      	beq.n	800f214 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f2d4:	2300      	movs	r3, #0
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	3740      	adds	r7, #64	; 0x40
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}
	...

0800f2e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2e4:	b09f      	sub	sp, #124	; 0x7c
 800f2e6:	af00      	add	r7, sp, #0
 800f2e8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f2ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	691b      	ldr	r3, [r3, #16]
 800f2f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800f2f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2f6:	68d9      	ldr	r1, [r3, #12]
 800f2f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2fa:	681a      	ldr	r2, [r3, #0]
 800f2fc:	ea40 0301 	orr.w	r3, r0, r1
 800f300:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f304:	689a      	ldr	r2, [r3, #8]
 800f306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f308:	691b      	ldr	r3, [r3, #16]
 800f30a:	431a      	orrs	r2, r3
 800f30c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f30e:	695b      	ldr	r3, [r3, #20]
 800f310:	431a      	orrs	r2, r3
 800f312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f314:	69db      	ldr	r3, [r3, #28]
 800f316:	4313      	orrs	r3, r2
 800f318:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800f31a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	68db      	ldr	r3, [r3, #12]
 800f320:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800f324:	f021 010c 	bic.w	r1, r1, #12
 800f328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f32a:	681a      	ldr	r2, [r3, #0]
 800f32c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f32e:	430b      	orrs	r3, r1
 800f330:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	695b      	ldr	r3, [r3, #20]
 800f338:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800f33c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f33e:	6999      	ldr	r1, [r3, #24]
 800f340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f342:	681a      	ldr	r2, [r3, #0]
 800f344:	ea40 0301 	orr.w	r3, r0, r1
 800f348:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f34a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f34c:	681a      	ldr	r2, [r3, #0]
 800f34e:	4bc5      	ldr	r3, [pc, #788]	; (800f664 <UART_SetConfig+0x384>)
 800f350:	429a      	cmp	r2, r3
 800f352:	d004      	beq.n	800f35e <UART_SetConfig+0x7e>
 800f354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f356:	681a      	ldr	r2, [r3, #0]
 800f358:	4bc3      	ldr	r3, [pc, #780]	; (800f668 <UART_SetConfig+0x388>)
 800f35a:	429a      	cmp	r2, r3
 800f35c:	d103      	bne.n	800f366 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f35e:	f7fd f8c7 	bl	800c4f0 <HAL_RCC_GetPCLK2Freq>
 800f362:	6778      	str	r0, [r7, #116]	; 0x74
 800f364:	e002      	b.n	800f36c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f366:	f7fd f8af 	bl	800c4c8 <HAL_RCC_GetPCLK1Freq>
 800f36a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f36c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f36e:	69db      	ldr	r3, [r3, #28]
 800f370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f374:	f040 80b6 	bne.w	800f4e4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f378:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f37a:	461c      	mov	r4, r3
 800f37c:	f04f 0500 	mov.w	r5, #0
 800f380:	4622      	mov	r2, r4
 800f382:	462b      	mov	r3, r5
 800f384:	1891      	adds	r1, r2, r2
 800f386:	6439      	str	r1, [r7, #64]	; 0x40
 800f388:	415b      	adcs	r3, r3
 800f38a:	647b      	str	r3, [r7, #68]	; 0x44
 800f38c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f390:	1912      	adds	r2, r2, r4
 800f392:	eb45 0303 	adc.w	r3, r5, r3
 800f396:	f04f 0000 	mov.w	r0, #0
 800f39a:	f04f 0100 	mov.w	r1, #0
 800f39e:	00d9      	lsls	r1, r3, #3
 800f3a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f3a4:	00d0      	lsls	r0, r2, #3
 800f3a6:	4602      	mov	r2, r0
 800f3a8:	460b      	mov	r3, r1
 800f3aa:	1911      	adds	r1, r2, r4
 800f3ac:	6639      	str	r1, [r7, #96]	; 0x60
 800f3ae:	416b      	adcs	r3, r5
 800f3b0:	667b      	str	r3, [r7, #100]	; 0x64
 800f3b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f3b4:	685b      	ldr	r3, [r3, #4]
 800f3b6:	461a      	mov	r2, r3
 800f3b8:	f04f 0300 	mov.w	r3, #0
 800f3bc:	1891      	adds	r1, r2, r2
 800f3be:	63b9      	str	r1, [r7, #56]	; 0x38
 800f3c0:	415b      	adcs	r3, r3
 800f3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f3c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800f3c8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800f3cc:	f7f1 fccc 	bl	8000d68 <__aeabi_uldivmod>
 800f3d0:	4602      	mov	r2, r0
 800f3d2:	460b      	mov	r3, r1
 800f3d4:	4ba5      	ldr	r3, [pc, #660]	; (800f66c <UART_SetConfig+0x38c>)
 800f3d6:	fba3 2302 	umull	r2, r3, r3, r2
 800f3da:	095b      	lsrs	r3, r3, #5
 800f3dc:	011e      	lsls	r6, r3, #4
 800f3de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f3e0:	461c      	mov	r4, r3
 800f3e2:	f04f 0500 	mov.w	r5, #0
 800f3e6:	4622      	mov	r2, r4
 800f3e8:	462b      	mov	r3, r5
 800f3ea:	1891      	adds	r1, r2, r2
 800f3ec:	6339      	str	r1, [r7, #48]	; 0x30
 800f3ee:	415b      	adcs	r3, r3
 800f3f0:	637b      	str	r3, [r7, #52]	; 0x34
 800f3f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f3f6:	1912      	adds	r2, r2, r4
 800f3f8:	eb45 0303 	adc.w	r3, r5, r3
 800f3fc:	f04f 0000 	mov.w	r0, #0
 800f400:	f04f 0100 	mov.w	r1, #0
 800f404:	00d9      	lsls	r1, r3, #3
 800f406:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f40a:	00d0      	lsls	r0, r2, #3
 800f40c:	4602      	mov	r2, r0
 800f40e:	460b      	mov	r3, r1
 800f410:	1911      	adds	r1, r2, r4
 800f412:	65b9      	str	r1, [r7, #88]	; 0x58
 800f414:	416b      	adcs	r3, r5
 800f416:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f41a:	685b      	ldr	r3, [r3, #4]
 800f41c:	461a      	mov	r2, r3
 800f41e:	f04f 0300 	mov.w	r3, #0
 800f422:	1891      	adds	r1, r2, r2
 800f424:	62b9      	str	r1, [r7, #40]	; 0x28
 800f426:	415b      	adcs	r3, r3
 800f428:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f42a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f42e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800f432:	f7f1 fc99 	bl	8000d68 <__aeabi_uldivmod>
 800f436:	4602      	mov	r2, r0
 800f438:	460b      	mov	r3, r1
 800f43a:	4b8c      	ldr	r3, [pc, #560]	; (800f66c <UART_SetConfig+0x38c>)
 800f43c:	fba3 1302 	umull	r1, r3, r3, r2
 800f440:	095b      	lsrs	r3, r3, #5
 800f442:	2164      	movs	r1, #100	; 0x64
 800f444:	fb01 f303 	mul.w	r3, r1, r3
 800f448:	1ad3      	subs	r3, r2, r3
 800f44a:	00db      	lsls	r3, r3, #3
 800f44c:	3332      	adds	r3, #50	; 0x32
 800f44e:	4a87      	ldr	r2, [pc, #540]	; (800f66c <UART_SetConfig+0x38c>)
 800f450:	fba2 2303 	umull	r2, r3, r2, r3
 800f454:	095b      	lsrs	r3, r3, #5
 800f456:	005b      	lsls	r3, r3, #1
 800f458:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f45c:	441e      	add	r6, r3
 800f45e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f460:	4618      	mov	r0, r3
 800f462:	f04f 0100 	mov.w	r1, #0
 800f466:	4602      	mov	r2, r0
 800f468:	460b      	mov	r3, r1
 800f46a:	1894      	adds	r4, r2, r2
 800f46c:	623c      	str	r4, [r7, #32]
 800f46e:	415b      	adcs	r3, r3
 800f470:	627b      	str	r3, [r7, #36]	; 0x24
 800f472:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f476:	1812      	adds	r2, r2, r0
 800f478:	eb41 0303 	adc.w	r3, r1, r3
 800f47c:	f04f 0400 	mov.w	r4, #0
 800f480:	f04f 0500 	mov.w	r5, #0
 800f484:	00dd      	lsls	r5, r3, #3
 800f486:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f48a:	00d4      	lsls	r4, r2, #3
 800f48c:	4622      	mov	r2, r4
 800f48e:	462b      	mov	r3, r5
 800f490:	1814      	adds	r4, r2, r0
 800f492:	653c      	str	r4, [r7, #80]	; 0x50
 800f494:	414b      	adcs	r3, r1
 800f496:	657b      	str	r3, [r7, #84]	; 0x54
 800f498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f49a:	685b      	ldr	r3, [r3, #4]
 800f49c:	461a      	mov	r2, r3
 800f49e:	f04f 0300 	mov.w	r3, #0
 800f4a2:	1891      	adds	r1, r2, r2
 800f4a4:	61b9      	str	r1, [r7, #24]
 800f4a6:	415b      	adcs	r3, r3
 800f4a8:	61fb      	str	r3, [r7, #28]
 800f4aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f4ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800f4b2:	f7f1 fc59 	bl	8000d68 <__aeabi_uldivmod>
 800f4b6:	4602      	mov	r2, r0
 800f4b8:	460b      	mov	r3, r1
 800f4ba:	4b6c      	ldr	r3, [pc, #432]	; (800f66c <UART_SetConfig+0x38c>)
 800f4bc:	fba3 1302 	umull	r1, r3, r3, r2
 800f4c0:	095b      	lsrs	r3, r3, #5
 800f4c2:	2164      	movs	r1, #100	; 0x64
 800f4c4:	fb01 f303 	mul.w	r3, r1, r3
 800f4c8:	1ad3      	subs	r3, r2, r3
 800f4ca:	00db      	lsls	r3, r3, #3
 800f4cc:	3332      	adds	r3, #50	; 0x32
 800f4ce:	4a67      	ldr	r2, [pc, #412]	; (800f66c <UART_SetConfig+0x38c>)
 800f4d0:	fba2 2303 	umull	r2, r3, r2, r3
 800f4d4:	095b      	lsrs	r3, r3, #5
 800f4d6:	f003 0207 	and.w	r2, r3, #7
 800f4da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	4432      	add	r2, r6
 800f4e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800f4e2:	e0b9      	b.n	800f658 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f4e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f4e6:	461c      	mov	r4, r3
 800f4e8:	f04f 0500 	mov.w	r5, #0
 800f4ec:	4622      	mov	r2, r4
 800f4ee:	462b      	mov	r3, r5
 800f4f0:	1891      	adds	r1, r2, r2
 800f4f2:	6139      	str	r1, [r7, #16]
 800f4f4:	415b      	adcs	r3, r3
 800f4f6:	617b      	str	r3, [r7, #20]
 800f4f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f4fc:	1912      	adds	r2, r2, r4
 800f4fe:	eb45 0303 	adc.w	r3, r5, r3
 800f502:	f04f 0000 	mov.w	r0, #0
 800f506:	f04f 0100 	mov.w	r1, #0
 800f50a:	00d9      	lsls	r1, r3, #3
 800f50c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f510:	00d0      	lsls	r0, r2, #3
 800f512:	4602      	mov	r2, r0
 800f514:	460b      	mov	r3, r1
 800f516:	eb12 0804 	adds.w	r8, r2, r4
 800f51a:	eb43 0905 	adc.w	r9, r3, r5
 800f51e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f520:	685b      	ldr	r3, [r3, #4]
 800f522:	4618      	mov	r0, r3
 800f524:	f04f 0100 	mov.w	r1, #0
 800f528:	f04f 0200 	mov.w	r2, #0
 800f52c:	f04f 0300 	mov.w	r3, #0
 800f530:	008b      	lsls	r3, r1, #2
 800f532:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f536:	0082      	lsls	r2, r0, #2
 800f538:	4640      	mov	r0, r8
 800f53a:	4649      	mov	r1, r9
 800f53c:	f7f1 fc14 	bl	8000d68 <__aeabi_uldivmod>
 800f540:	4602      	mov	r2, r0
 800f542:	460b      	mov	r3, r1
 800f544:	4b49      	ldr	r3, [pc, #292]	; (800f66c <UART_SetConfig+0x38c>)
 800f546:	fba3 2302 	umull	r2, r3, r3, r2
 800f54a:	095b      	lsrs	r3, r3, #5
 800f54c:	011e      	lsls	r6, r3, #4
 800f54e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f550:	4618      	mov	r0, r3
 800f552:	f04f 0100 	mov.w	r1, #0
 800f556:	4602      	mov	r2, r0
 800f558:	460b      	mov	r3, r1
 800f55a:	1894      	adds	r4, r2, r2
 800f55c:	60bc      	str	r4, [r7, #8]
 800f55e:	415b      	adcs	r3, r3
 800f560:	60fb      	str	r3, [r7, #12]
 800f562:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f566:	1812      	adds	r2, r2, r0
 800f568:	eb41 0303 	adc.w	r3, r1, r3
 800f56c:	f04f 0400 	mov.w	r4, #0
 800f570:	f04f 0500 	mov.w	r5, #0
 800f574:	00dd      	lsls	r5, r3, #3
 800f576:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f57a:	00d4      	lsls	r4, r2, #3
 800f57c:	4622      	mov	r2, r4
 800f57e:	462b      	mov	r3, r5
 800f580:	1814      	adds	r4, r2, r0
 800f582:	64bc      	str	r4, [r7, #72]	; 0x48
 800f584:	414b      	adcs	r3, r1
 800f586:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f58a:	685b      	ldr	r3, [r3, #4]
 800f58c:	4618      	mov	r0, r3
 800f58e:	f04f 0100 	mov.w	r1, #0
 800f592:	f04f 0200 	mov.w	r2, #0
 800f596:	f04f 0300 	mov.w	r3, #0
 800f59a:	008b      	lsls	r3, r1, #2
 800f59c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f5a0:	0082      	lsls	r2, r0, #2
 800f5a2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800f5a6:	f7f1 fbdf 	bl	8000d68 <__aeabi_uldivmod>
 800f5aa:	4602      	mov	r2, r0
 800f5ac:	460b      	mov	r3, r1
 800f5ae:	4b2f      	ldr	r3, [pc, #188]	; (800f66c <UART_SetConfig+0x38c>)
 800f5b0:	fba3 1302 	umull	r1, r3, r3, r2
 800f5b4:	095b      	lsrs	r3, r3, #5
 800f5b6:	2164      	movs	r1, #100	; 0x64
 800f5b8:	fb01 f303 	mul.w	r3, r1, r3
 800f5bc:	1ad3      	subs	r3, r2, r3
 800f5be:	011b      	lsls	r3, r3, #4
 800f5c0:	3332      	adds	r3, #50	; 0x32
 800f5c2:	4a2a      	ldr	r2, [pc, #168]	; (800f66c <UART_SetConfig+0x38c>)
 800f5c4:	fba2 2303 	umull	r2, r3, r2, r3
 800f5c8:	095b      	lsrs	r3, r3, #5
 800f5ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f5ce:	441e      	add	r6, r3
 800f5d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f04f 0100 	mov.w	r1, #0
 800f5d8:	4602      	mov	r2, r0
 800f5da:	460b      	mov	r3, r1
 800f5dc:	1894      	adds	r4, r2, r2
 800f5de:	603c      	str	r4, [r7, #0]
 800f5e0:	415b      	adcs	r3, r3
 800f5e2:	607b      	str	r3, [r7, #4]
 800f5e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5e8:	1812      	adds	r2, r2, r0
 800f5ea:	eb41 0303 	adc.w	r3, r1, r3
 800f5ee:	f04f 0400 	mov.w	r4, #0
 800f5f2:	f04f 0500 	mov.w	r5, #0
 800f5f6:	00dd      	lsls	r5, r3, #3
 800f5f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f5fc:	00d4      	lsls	r4, r2, #3
 800f5fe:	4622      	mov	r2, r4
 800f600:	462b      	mov	r3, r5
 800f602:	eb12 0a00 	adds.w	sl, r2, r0
 800f606:	eb43 0b01 	adc.w	fp, r3, r1
 800f60a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f60c:	685b      	ldr	r3, [r3, #4]
 800f60e:	4618      	mov	r0, r3
 800f610:	f04f 0100 	mov.w	r1, #0
 800f614:	f04f 0200 	mov.w	r2, #0
 800f618:	f04f 0300 	mov.w	r3, #0
 800f61c:	008b      	lsls	r3, r1, #2
 800f61e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f622:	0082      	lsls	r2, r0, #2
 800f624:	4650      	mov	r0, sl
 800f626:	4659      	mov	r1, fp
 800f628:	f7f1 fb9e 	bl	8000d68 <__aeabi_uldivmod>
 800f62c:	4602      	mov	r2, r0
 800f62e:	460b      	mov	r3, r1
 800f630:	4b0e      	ldr	r3, [pc, #56]	; (800f66c <UART_SetConfig+0x38c>)
 800f632:	fba3 1302 	umull	r1, r3, r3, r2
 800f636:	095b      	lsrs	r3, r3, #5
 800f638:	2164      	movs	r1, #100	; 0x64
 800f63a:	fb01 f303 	mul.w	r3, r1, r3
 800f63e:	1ad3      	subs	r3, r2, r3
 800f640:	011b      	lsls	r3, r3, #4
 800f642:	3332      	adds	r3, #50	; 0x32
 800f644:	4a09      	ldr	r2, [pc, #36]	; (800f66c <UART_SetConfig+0x38c>)
 800f646:	fba2 2303 	umull	r2, r3, r2, r3
 800f64a:	095b      	lsrs	r3, r3, #5
 800f64c:	f003 020f 	and.w	r2, r3, #15
 800f650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	4432      	add	r2, r6
 800f656:	609a      	str	r2, [r3, #8]
}
 800f658:	bf00      	nop
 800f65a:	377c      	adds	r7, #124	; 0x7c
 800f65c:	46bd      	mov	sp, r7
 800f65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f662:	bf00      	nop
 800f664:	40011000 	.word	0x40011000
 800f668:	40011400 	.word	0x40011400
 800f66c:	51eb851f 	.word	0x51eb851f

0800f670 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800f674:	4904      	ldr	r1, [pc, #16]	; (800f688 <MX_FATFS_Init+0x18>)
 800f676:	4805      	ldr	r0, [pc, #20]	; (800f68c <MX_FATFS_Init+0x1c>)
 800f678:	f000 f8b0 	bl	800f7dc <FATFS_LinkDriver>
 800f67c:	4603      	mov	r3, r0
 800f67e:	461a      	mov	r2, r3
 800f680:	4b03      	ldr	r3, [pc, #12]	; (800f690 <MX_FATFS_Init+0x20>)
 800f682:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f684:	bf00      	nop
 800f686:	bd80      	pop	{r7, pc}
 800f688:	20006044 	.word	0x20006044
 800f68c:	20000090 	.word	0x20000090
 800f690:	20006048 	.word	0x20006048

0800f694 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800f694:	b480      	push	{r7}
 800f696:	b083      	sub	sp, #12
 800f698:	af00      	add	r7, sp, #0
 800f69a:	4603      	mov	r3, r0
 800f69c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800f69e:	4b06      	ldr	r3, [pc, #24]	; (800f6b8 <USER_initialize+0x24>)
 800f6a0:	2201      	movs	r2, #1
 800f6a2:	701a      	strb	r2, [r3, #0]
    return Stat;
 800f6a4:	4b04      	ldr	r3, [pc, #16]	; (800f6b8 <USER_initialize+0x24>)
 800f6a6:	781b      	ldrb	r3, [r3, #0]
 800f6a8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	370c      	adds	r7, #12
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b4:	4770      	bx	lr
 800f6b6:	bf00      	nop
 800f6b8:	2000008d 	.word	0x2000008d

0800f6bc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800f6bc:	b480      	push	{r7}
 800f6be:	b083      	sub	sp, #12
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800f6c6:	4b06      	ldr	r3, [pc, #24]	; (800f6e0 <USER_status+0x24>)
 800f6c8:	2201      	movs	r2, #1
 800f6ca:	701a      	strb	r2, [r3, #0]
    return Stat;
 800f6cc:	4b04      	ldr	r3, [pc, #16]	; (800f6e0 <USER_status+0x24>)
 800f6ce:	781b      	ldrb	r3, [r3, #0]
 800f6d0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	370c      	adds	r7, #12
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6dc:	4770      	bx	lr
 800f6de:	bf00      	nop
 800f6e0:	2000008d 	.word	0x2000008d

0800f6e4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	b085      	sub	sp, #20
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	60b9      	str	r1, [r7, #8]
 800f6ec:	607a      	str	r2, [r7, #4]
 800f6ee:	603b      	str	r3, [r7, #0]
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800f6f4:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	3714      	adds	r7, #20
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f700:	4770      	bx	lr

0800f702 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800f702:	b480      	push	{r7}
 800f704:	b085      	sub	sp, #20
 800f706:	af00      	add	r7, sp, #0
 800f708:	60b9      	str	r1, [r7, #8]
 800f70a:	607a      	str	r2, [r7, #4]
 800f70c:	603b      	str	r3, [r7, #0]
 800f70e:	4603      	mov	r3, r0
 800f710:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800f712:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800f714:	4618      	mov	r0, r3
 800f716:	3714      	adds	r7, #20
 800f718:	46bd      	mov	sp, r7
 800f71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71e:	4770      	bx	lr

0800f720 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800f720:	b480      	push	{r7}
 800f722:	b085      	sub	sp, #20
 800f724:	af00      	add	r7, sp, #0
 800f726:	4603      	mov	r3, r0
 800f728:	603a      	str	r2, [r7, #0]
 800f72a:	71fb      	strb	r3, [r7, #7]
 800f72c:	460b      	mov	r3, r1
 800f72e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800f730:	2301      	movs	r3, #1
 800f732:	73fb      	strb	r3, [r7, #15]
    return res;
 800f734:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800f736:	4618      	mov	r0, r3
 800f738:	3714      	adds	r7, #20
 800f73a:	46bd      	mov	sp, r7
 800f73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f740:	4770      	bx	lr
	...

0800f744 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f744:	b480      	push	{r7}
 800f746:	b087      	sub	sp, #28
 800f748:	af00      	add	r7, sp, #0
 800f74a:	60f8      	str	r0, [r7, #12]
 800f74c:	60b9      	str	r1, [r7, #8]
 800f74e:	4613      	mov	r3, r2
 800f750:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f752:	2301      	movs	r3, #1
 800f754:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f756:	2300      	movs	r3, #0
 800f758:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f75a:	4b1f      	ldr	r3, [pc, #124]	; (800f7d8 <FATFS_LinkDriverEx+0x94>)
 800f75c:	7a5b      	ldrb	r3, [r3, #9]
 800f75e:	b2db      	uxtb	r3, r3
 800f760:	2b00      	cmp	r3, #0
 800f762:	d131      	bne.n	800f7c8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f764:	4b1c      	ldr	r3, [pc, #112]	; (800f7d8 <FATFS_LinkDriverEx+0x94>)
 800f766:	7a5b      	ldrb	r3, [r3, #9]
 800f768:	b2db      	uxtb	r3, r3
 800f76a:	461a      	mov	r2, r3
 800f76c:	4b1a      	ldr	r3, [pc, #104]	; (800f7d8 <FATFS_LinkDriverEx+0x94>)
 800f76e:	2100      	movs	r1, #0
 800f770:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f772:	4b19      	ldr	r3, [pc, #100]	; (800f7d8 <FATFS_LinkDriverEx+0x94>)
 800f774:	7a5b      	ldrb	r3, [r3, #9]
 800f776:	b2db      	uxtb	r3, r3
 800f778:	4a17      	ldr	r2, [pc, #92]	; (800f7d8 <FATFS_LinkDriverEx+0x94>)
 800f77a:	009b      	lsls	r3, r3, #2
 800f77c:	4413      	add	r3, r2
 800f77e:	68fa      	ldr	r2, [r7, #12]
 800f780:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f782:	4b15      	ldr	r3, [pc, #84]	; (800f7d8 <FATFS_LinkDriverEx+0x94>)
 800f784:	7a5b      	ldrb	r3, [r3, #9]
 800f786:	b2db      	uxtb	r3, r3
 800f788:	461a      	mov	r2, r3
 800f78a:	4b13      	ldr	r3, [pc, #76]	; (800f7d8 <FATFS_LinkDriverEx+0x94>)
 800f78c:	4413      	add	r3, r2
 800f78e:	79fa      	ldrb	r2, [r7, #7]
 800f790:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f792:	4b11      	ldr	r3, [pc, #68]	; (800f7d8 <FATFS_LinkDriverEx+0x94>)
 800f794:	7a5b      	ldrb	r3, [r3, #9]
 800f796:	b2db      	uxtb	r3, r3
 800f798:	1c5a      	adds	r2, r3, #1
 800f79a:	b2d1      	uxtb	r1, r2
 800f79c:	4a0e      	ldr	r2, [pc, #56]	; (800f7d8 <FATFS_LinkDriverEx+0x94>)
 800f79e:	7251      	strb	r1, [r2, #9]
 800f7a0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f7a2:	7dbb      	ldrb	r3, [r7, #22]
 800f7a4:	3330      	adds	r3, #48	; 0x30
 800f7a6:	b2da      	uxtb	r2, r3
 800f7a8:	68bb      	ldr	r3, [r7, #8]
 800f7aa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	3301      	adds	r3, #1
 800f7b0:	223a      	movs	r2, #58	; 0x3a
 800f7b2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	3302      	adds	r3, #2
 800f7b8:	222f      	movs	r2, #47	; 0x2f
 800f7ba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f7bc:	68bb      	ldr	r3, [r7, #8]
 800f7be:	3303      	adds	r3, #3
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f7c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	371c      	adds	r7, #28
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d4:	4770      	bx	lr
 800f7d6:	bf00      	nop
 800f7d8:	20000630 	.word	0x20000630

0800f7dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b082      	sub	sp, #8
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
 800f7e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	6839      	ldr	r1, [r7, #0]
 800f7ea:	6878      	ldr	r0, [r7, #4]
 800f7ec:	f7ff ffaa 	bl	800f744 <FATFS_LinkDriverEx>
 800f7f0:	4603      	mov	r3, r0
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	3708      	adds	r7, #8
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
	...

0800f7fc <__NVIC_SetPriority>:
{
 800f7fc:	b480      	push	{r7}
 800f7fe:	b083      	sub	sp, #12
 800f800:	af00      	add	r7, sp, #0
 800f802:	4603      	mov	r3, r0
 800f804:	6039      	str	r1, [r7, #0]
 800f806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	db0a      	blt.n	800f826 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	b2da      	uxtb	r2, r3
 800f814:	490c      	ldr	r1, [pc, #48]	; (800f848 <__NVIC_SetPriority+0x4c>)
 800f816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f81a:	0112      	lsls	r2, r2, #4
 800f81c:	b2d2      	uxtb	r2, r2
 800f81e:	440b      	add	r3, r1
 800f820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f824:	e00a      	b.n	800f83c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	b2da      	uxtb	r2, r3
 800f82a:	4908      	ldr	r1, [pc, #32]	; (800f84c <__NVIC_SetPriority+0x50>)
 800f82c:	79fb      	ldrb	r3, [r7, #7]
 800f82e:	f003 030f 	and.w	r3, r3, #15
 800f832:	3b04      	subs	r3, #4
 800f834:	0112      	lsls	r2, r2, #4
 800f836:	b2d2      	uxtb	r2, r2
 800f838:	440b      	add	r3, r1
 800f83a:	761a      	strb	r2, [r3, #24]
}
 800f83c:	bf00      	nop
 800f83e:	370c      	adds	r7, #12
 800f840:	46bd      	mov	sp, r7
 800f842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f846:	4770      	bx	lr
 800f848:	e000e100 	.word	0xe000e100
 800f84c:	e000ed00 	.word	0xe000ed00

0800f850 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f850:	b580      	push	{r7, lr}
 800f852:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f854:	4b05      	ldr	r3, [pc, #20]	; (800f86c <SysTick_Handler+0x1c>)
 800f856:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f858:	f001 ff3c 	bl	80116d4 <xTaskGetSchedulerState>
 800f85c:	4603      	mov	r3, r0
 800f85e:	2b01      	cmp	r3, #1
 800f860:	d001      	beq.n	800f866 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f862:	f002 fd21 	bl	80122a8 <xPortSysTickHandler>
  }
}
 800f866:	bf00      	nop
 800f868:	bd80      	pop	{r7, pc}
 800f86a:	bf00      	nop
 800f86c:	e000e010 	.word	0xe000e010

0800f870 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f870:	b580      	push	{r7, lr}
 800f872:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f874:	2100      	movs	r1, #0
 800f876:	f06f 0004 	mvn.w	r0, #4
 800f87a:	f7ff ffbf 	bl	800f7fc <__NVIC_SetPriority>
#endif
}
 800f87e:	bf00      	nop
 800f880:	bd80      	pop	{r7, pc}
	...

0800f884 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f884:	b480      	push	{r7}
 800f886:	b083      	sub	sp, #12
 800f888:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f88a:	f3ef 8305 	mrs	r3, IPSR
 800f88e:	603b      	str	r3, [r7, #0]
  return(result);
 800f890:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f892:	2b00      	cmp	r3, #0
 800f894:	d003      	beq.n	800f89e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f896:	f06f 0305 	mvn.w	r3, #5
 800f89a:	607b      	str	r3, [r7, #4]
 800f89c:	e00c      	b.n	800f8b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f89e:	4b0a      	ldr	r3, [pc, #40]	; (800f8c8 <osKernelInitialize+0x44>)
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d105      	bne.n	800f8b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f8a6:	4b08      	ldr	r3, [pc, #32]	; (800f8c8 <osKernelInitialize+0x44>)
 800f8a8:	2201      	movs	r2, #1
 800f8aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	607b      	str	r3, [r7, #4]
 800f8b0:	e002      	b.n	800f8b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f8b2:	f04f 33ff 	mov.w	r3, #4294967295
 800f8b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f8b8:	687b      	ldr	r3, [r7, #4]
}
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	370c      	adds	r7, #12
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c4:	4770      	bx	lr
 800f8c6:	bf00      	nop
 800f8c8:	2000063c 	.word	0x2000063c

0800f8cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b082      	sub	sp, #8
 800f8d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f8d2:	f3ef 8305 	mrs	r3, IPSR
 800f8d6:	603b      	str	r3, [r7, #0]
  return(result);
 800f8d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d003      	beq.n	800f8e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800f8de:	f06f 0305 	mvn.w	r3, #5
 800f8e2:	607b      	str	r3, [r7, #4]
 800f8e4:	e010      	b.n	800f908 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f8e6:	4b0b      	ldr	r3, [pc, #44]	; (800f914 <osKernelStart+0x48>)
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	2b01      	cmp	r3, #1
 800f8ec:	d109      	bne.n	800f902 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f8ee:	f7ff ffbf 	bl	800f870 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f8f2:	4b08      	ldr	r3, [pc, #32]	; (800f914 <osKernelStart+0x48>)
 800f8f4:	2202      	movs	r2, #2
 800f8f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f8f8:	f001 fa80 	bl	8010dfc <vTaskStartScheduler>
      stat = osOK;
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	607b      	str	r3, [r7, #4]
 800f900:	e002      	b.n	800f908 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f902:	f04f 33ff 	mov.w	r3, #4294967295
 800f906:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f908:	687b      	ldr	r3, [r7, #4]
}
 800f90a:	4618      	mov	r0, r3
 800f90c:	3708      	adds	r7, #8
 800f90e:	46bd      	mov	sp, r7
 800f910:	bd80      	pop	{r7, pc}
 800f912:	bf00      	nop
 800f914:	2000063c 	.word	0x2000063c

0800f918 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f918:	b580      	push	{r7, lr}
 800f91a:	b08e      	sub	sp, #56	; 0x38
 800f91c:	af04      	add	r7, sp, #16
 800f91e:	60f8      	str	r0, [r7, #12]
 800f920:	60b9      	str	r1, [r7, #8]
 800f922:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f924:	2300      	movs	r3, #0
 800f926:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f928:	f3ef 8305 	mrs	r3, IPSR
 800f92c:	617b      	str	r3, [r7, #20]
  return(result);
 800f92e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f930:	2b00      	cmp	r3, #0
 800f932:	d17e      	bne.n	800fa32 <osThreadNew+0x11a>
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d07b      	beq.n	800fa32 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800f93a:	2380      	movs	r3, #128	; 0x80
 800f93c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f93e:	2318      	movs	r3, #24
 800f940:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f942:	2300      	movs	r3, #0
 800f944:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800f946:	f04f 33ff 	mov.w	r3, #4294967295
 800f94a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d045      	beq.n	800f9de <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d002      	beq.n	800f960 <osThreadNew+0x48>
        name = attr->name;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	699b      	ldr	r3, [r3, #24]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d002      	beq.n	800f96e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	699b      	ldr	r3, [r3, #24]
 800f96c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f96e:	69fb      	ldr	r3, [r7, #28]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d008      	beq.n	800f986 <osThreadNew+0x6e>
 800f974:	69fb      	ldr	r3, [r7, #28]
 800f976:	2b38      	cmp	r3, #56	; 0x38
 800f978:	d805      	bhi.n	800f986 <osThreadNew+0x6e>
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	685b      	ldr	r3, [r3, #4]
 800f97e:	f003 0301 	and.w	r3, r3, #1
 800f982:	2b00      	cmp	r3, #0
 800f984:	d001      	beq.n	800f98a <osThreadNew+0x72>
        return (NULL);
 800f986:	2300      	movs	r3, #0
 800f988:	e054      	b.n	800fa34 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	695b      	ldr	r3, [r3, #20]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d003      	beq.n	800f99a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	695b      	ldr	r3, [r3, #20]
 800f996:	089b      	lsrs	r3, r3, #2
 800f998:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	689b      	ldr	r3, [r3, #8]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d00e      	beq.n	800f9c0 <osThreadNew+0xa8>
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	68db      	ldr	r3, [r3, #12]
 800f9a6:	2bbb      	cmp	r3, #187	; 0xbb
 800f9a8:	d90a      	bls.n	800f9c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d006      	beq.n	800f9c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	695b      	ldr	r3, [r3, #20]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d002      	beq.n	800f9c0 <osThreadNew+0xa8>
        mem = 1;
 800f9ba:	2301      	movs	r3, #1
 800f9bc:	61bb      	str	r3, [r7, #24]
 800f9be:	e010      	b.n	800f9e2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	689b      	ldr	r3, [r3, #8]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d10c      	bne.n	800f9e2 <osThreadNew+0xca>
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	68db      	ldr	r3, [r3, #12]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d108      	bne.n	800f9e2 <osThreadNew+0xca>
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	691b      	ldr	r3, [r3, #16]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d104      	bne.n	800f9e2 <osThreadNew+0xca>
          mem = 0;
 800f9d8:	2300      	movs	r3, #0
 800f9da:	61bb      	str	r3, [r7, #24]
 800f9dc:	e001      	b.n	800f9e2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800f9de:	2300      	movs	r3, #0
 800f9e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f9e2:	69bb      	ldr	r3, [r7, #24]
 800f9e4:	2b01      	cmp	r3, #1
 800f9e6:	d110      	bne.n	800fa0a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f9ec:	687a      	ldr	r2, [r7, #4]
 800f9ee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f9f0:	9202      	str	r2, [sp, #8]
 800f9f2:	9301      	str	r3, [sp, #4]
 800f9f4:	69fb      	ldr	r3, [r7, #28]
 800f9f6:	9300      	str	r3, [sp, #0]
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	6a3a      	ldr	r2, [r7, #32]
 800f9fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f9fe:	68f8      	ldr	r0, [r7, #12]
 800fa00:	f000 fea8 	bl	8010754 <xTaskCreateStatic>
 800fa04:	4603      	mov	r3, r0
 800fa06:	613b      	str	r3, [r7, #16]
 800fa08:	e013      	b.n	800fa32 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800fa0a:	69bb      	ldr	r3, [r7, #24]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d110      	bne.n	800fa32 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800fa10:	6a3b      	ldr	r3, [r7, #32]
 800fa12:	b29a      	uxth	r2, r3
 800fa14:	f107 0310 	add.w	r3, r7, #16
 800fa18:	9301      	str	r3, [sp, #4]
 800fa1a:	69fb      	ldr	r3, [r7, #28]
 800fa1c:	9300      	str	r3, [sp, #0]
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa22:	68f8      	ldr	r0, [r7, #12]
 800fa24:	f000 fef3 	bl	801080e <xTaskCreate>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	2b01      	cmp	r3, #1
 800fa2c:	d001      	beq.n	800fa32 <osThreadNew+0x11a>
            hTask = NULL;
 800fa2e:	2300      	movs	r3, #0
 800fa30:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800fa32:	693b      	ldr	r3, [r7, #16]
}
 800fa34:	4618      	mov	r0, r3
 800fa36:	3728      	adds	r7, #40	; 0x28
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	bd80      	pop	{r7, pc}

0800fa3c <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b082      	sub	sp, #8
 800fa40:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 800fa42:	f001 fe37 	bl	80116b4 <xTaskGetCurrentTaskHandle>
 800fa46:	6078      	str	r0, [r7, #4]

  return (id);
 800fa48:	687b      	ldr	r3, [r7, #4]
}
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	3708      	adds	r7, #8
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	bd80      	pop	{r7, pc}
	...

0800fa54 <osThreadGetState>:

osThreadState_t osThreadGetState (osThreadId_t thread_id) {
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b086      	sub	sp, #24
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fa60:	f3ef 8305 	mrs	r3, IPSR
 800fa64:	60fb      	str	r3, [r7, #12]
  return(result);
 800fa66:	68fb      	ldr	r3, [r7, #12]
  osThreadState_t state;

  if (IS_IRQ() || (hTask == NULL)) {
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d102      	bne.n	800fa72 <osThreadGetState+0x1e>
 800fa6c:	693b      	ldr	r3, [r7, #16]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d103      	bne.n	800fa7a <osThreadGetState+0x26>
    state = osThreadError;
 800fa72:	f04f 33ff 	mov.w	r3, #4294967295
 800fa76:	617b      	str	r3, [r7, #20]
 800fa78:	e022      	b.n	800fac0 <osThreadGetState+0x6c>
  }
  else {
    switch (eTaskGetState (hTask)) {
 800fa7a:	6938      	ldr	r0, [r7, #16]
 800fa7c:	f001 f8c8 	bl	8010c10 <eTaskGetState>
 800fa80:	4603      	mov	r3, r0
 800fa82:	2b04      	cmp	r3, #4
 800fa84:	d818      	bhi.n	800fab8 <osThreadGetState+0x64>
 800fa86:	a201      	add	r2, pc, #4	; (adr r2, 800fa8c <osThreadGetState+0x38>)
 800fa88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa8c:	0800faa1 	.word	0x0800faa1
 800fa90:	0800faa7 	.word	0x0800faa7
 800fa94:	0800faad 	.word	0x0800faad
 800fa98:	0800faad 	.word	0x0800faad
 800fa9c:	0800fab3 	.word	0x0800fab3
      case eRunning:   state = osThreadRunning;    break;
 800faa0:	2302      	movs	r3, #2
 800faa2:	617b      	str	r3, [r7, #20]
 800faa4:	e00c      	b.n	800fac0 <osThreadGetState+0x6c>
      case eReady:     state = osThreadReady;      break;
 800faa6:	2301      	movs	r3, #1
 800faa8:	617b      	str	r3, [r7, #20]
 800faaa:	e009      	b.n	800fac0 <osThreadGetState+0x6c>
      case eBlocked:
      case eSuspended: state = osThreadBlocked;    break;
 800faac:	2303      	movs	r3, #3
 800faae:	617b      	str	r3, [r7, #20]
 800fab0:	e006      	b.n	800fac0 <osThreadGetState+0x6c>
      case eDeleted:   state = osThreadTerminated; break;
 800fab2:	2304      	movs	r3, #4
 800fab4:	617b      	str	r3, [r7, #20]
 800fab6:	e003      	b.n	800fac0 <osThreadGetState+0x6c>
      case eInvalid:
      default:         state = osThreadError;      break;
 800fab8:	f04f 33ff 	mov.w	r3, #4294967295
 800fabc:	617b      	str	r3, [r7, #20]
 800fabe:	bf00      	nop
    }
  }

  return (state);
 800fac0:	697b      	ldr	r3, [r7, #20]
}
 800fac2:	4618      	mov	r0, r3
 800fac4:	3718      	adds	r7, #24
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}
 800faca:	bf00      	nop

0800facc <osThreadResume>:
  }

  return (stat);
}

osStatus_t osThreadResume (osThreadId_t thread_id) {
 800facc:	b580      	push	{r7, lr}
 800face:	b086      	sub	sp, #24
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fad8:	f3ef 8305 	mrs	r3, IPSR
 800fadc:	60fb      	str	r3, [r7, #12]
  return(result);
 800fade:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d003      	beq.n	800faec <osThreadResume+0x20>
    stat = osErrorISR;
 800fae4:	f06f 0305 	mvn.w	r3, #5
 800fae8:	617b      	str	r3, [r7, #20]
 800faea:	e00b      	b.n	800fb04 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 800faec:	693b      	ldr	r3, [r7, #16]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d103      	bne.n	800fafa <osThreadResume+0x2e>
    stat = osErrorParameter;
 800faf2:	f06f 0303 	mvn.w	r3, #3
 800faf6:	617b      	str	r3, [r7, #20]
 800faf8:	e004      	b.n	800fb04 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 800fafa:	2300      	movs	r3, #0
 800fafc:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 800fafe:	6938      	ldr	r0, [r7, #16]
 800fb00:	f001 f91e 	bl	8010d40 <vTaskResume>
  }

  return (stat);
 800fb04:	697b      	ldr	r3, [r7, #20]
}
 800fb06:	4618      	mov	r0, r3
 800fb08:	3718      	adds	r7, #24
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd80      	pop	{r7, pc}

0800fb0e <osThreadExit>:
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 800fb0e:	b580      	push	{r7, lr}
 800fb10:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800fb12:	2000      	movs	r0, #0
 800fb14:	f000 ffd6 	bl	8010ac4 <vTaskDelete>
#endif
  for (;;);
 800fb18:	e7fe      	b.n	800fb18 <osThreadExit+0xa>

0800fb1a <osThreadTerminate>:
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 800fb1a:	b580      	push	{r7, lr}
 800fb1c:	b086      	sub	sp, #24
 800fb1e:	af00      	add	r7, sp, #0
 800fb20:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb26:	f3ef 8305 	mrs	r3, IPSR
 800fb2a:	60bb      	str	r3, [r7, #8]
  return(result);
 800fb2c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d003      	beq.n	800fb3a <osThreadTerminate+0x20>
    stat = osErrorISR;
 800fb32:	f06f 0305 	mvn.w	r3, #5
 800fb36:	617b      	str	r3, [r7, #20]
 800fb38:	e017      	b.n	800fb6a <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 800fb3a:	693b      	ldr	r3, [r7, #16]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d103      	bne.n	800fb48 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 800fb40:	f06f 0303 	mvn.w	r3, #3
 800fb44:	617b      	str	r3, [r7, #20]
 800fb46:	e010      	b.n	800fb6a <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 800fb48:	6938      	ldr	r0, [r7, #16]
 800fb4a:	f001 f861 	bl	8010c10 <eTaskGetState>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 800fb52:	7bfb      	ldrb	r3, [r7, #15]
 800fb54:	2b04      	cmp	r3, #4
 800fb56:	d005      	beq.n	800fb64 <osThreadTerminate+0x4a>
      stat = osOK;
 800fb58:	2300      	movs	r3, #0
 800fb5a:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 800fb5c:	6938      	ldr	r0, [r7, #16]
 800fb5e:	f000 ffb1 	bl	8010ac4 <vTaskDelete>
 800fb62:	e002      	b.n	800fb6a <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 800fb64:	f06f 0302 	mvn.w	r3, #2
 800fb68:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 800fb6a:	697b      	ldr	r3, [r7, #20]
}
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	3718      	adds	r7, #24
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}

0800fb74 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b084      	sub	sp, #16
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb7c:	f3ef 8305 	mrs	r3, IPSR
 800fb80:	60bb      	str	r3, [r7, #8]
  return(result);
 800fb82:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d003      	beq.n	800fb90 <osDelay+0x1c>
    stat = osErrorISR;
 800fb88:	f06f 0305 	mvn.w	r3, #5
 800fb8c:	60fb      	str	r3, [r7, #12]
 800fb8e:	e007      	b.n	800fba0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800fb90:	2300      	movs	r3, #0
 800fb92:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d002      	beq.n	800fba0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	f001 f804 	bl	8010ba8 <vTaskDelay>
    }
  }

  return (stat);
 800fba0:	68fb      	ldr	r3, [r7, #12]
}
 800fba2:	4618      	mov	r0, r3
 800fba4:	3710      	adds	r7, #16
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd80      	pop	{r7, pc}
	...

0800fbac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800fbac:	b480      	push	{r7}
 800fbae:	b085      	sub	sp, #20
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	60f8      	str	r0, [r7, #12]
 800fbb4:	60b9      	str	r1, [r7, #8]
 800fbb6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	4a07      	ldr	r2, [pc, #28]	; (800fbd8 <vApplicationGetIdleTaskMemory+0x2c>)
 800fbbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800fbbe:	68bb      	ldr	r3, [r7, #8]
 800fbc0:	4a06      	ldr	r2, [pc, #24]	; (800fbdc <vApplicationGetIdleTaskMemory+0x30>)
 800fbc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2280      	movs	r2, #128	; 0x80
 800fbc8:	601a      	str	r2, [r3, #0]
}
 800fbca:	bf00      	nop
 800fbcc:	3714      	adds	r7, #20
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd4:	4770      	bx	lr
 800fbd6:	bf00      	nop
 800fbd8:	20000640 	.word	0x20000640
 800fbdc:	200006fc 	.word	0x200006fc

0800fbe0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800fbe0:	b480      	push	{r7}
 800fbe2:	b085      	sub	sp, #20
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	60f8      	str	r0, [r7, #12]
 800fbe8:	60b9      	str	r1, [r7, #8]
 800fbea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	4a07      	ldr	r2, [pc, #28]	; (800fc0c <vApplicationGetTimerTaskMemory+0x2c>)
 800fbf0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800fbf2:	68bb      	ldr	r3, [r7, #8]
 800fbf4:	4a06      	ldr	r2, [pc, #24]	; (800fc10 <vApplicationGetTimerTaskMemory+0x30>)
 800fbf6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fbfe:	601a      	str	r2, [r3, #0]
}
 800fc00:	bf00      	nop
 800fc02:	3714      	adds	r7, #20
 800fc04:	46bd      	mov	sp, r7
 800fc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0a:	4770      	bx	lr
 800fc0c:	200008fc 	.word	0x200008fc
 800fc10:	200009b8 	.word	0x200009b8

0800fc14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fc14:	b480      	push	{r7}
 800fc16:	b083      	sub	sp, #12
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f103 0208 	add.w	r2, r3, #8
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	f04f 32ff 	mov.w	r2, #4294967295
 800fc2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	f103 0208 	add.w	r2, r3, #8
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	f103 0208 	add.w	r2, r3, #8
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	2200      	movs	r2, #0
 800fc46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fc48:	bf00      	nop
 800fc4a:	370c      	adds	r7, #12
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc52:	4770      	bx	lr

0800fc54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fc54:	b480      	push	{r7}
 800fc56:	b083      	sub	sp, #12
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2200      	movs	r2, #0
 800fc60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fc62:	bf00      	nop
 800fc64:	370c      	adds	r7, #12
 800fc66:	46bd      	mov	sp, r7
 800fc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6c:	4770      	bx	lr

0800fc6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fc6e:	b480      	push	{r7}
 800fc70:	b085      	sub	sp, #20
 800fc72:	af00      	add	r7, sp, #0
 800fc74:	6078      	str	r0, [r7, #4]
 800fc76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	685b      	ldr	r3, [r3, #4]
 800fc7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	68fa      	ldr	r2, [r7, #12]
 800fc82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	689a      	ldr	r2, [r3, #8]
 800fc88:	683b      	ldr	r3, [r7, #0]
 800fc8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	689b      	ldr	r3, [r3, #8]
 800fc90:	683a      	ldr	r2, [r7, #0]
 800fc92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	683a      	ldr	r2, [r7, #0]
 800fc98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	687a      	ldr	r2, [r7, #4]
 800fc9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	1c5a      	adds	r2, r3, #1
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	601a      	str	r2, [r3, #0]
}
 800fcaa:	bf00      	nop
 800fcac:	3714      	adds	r7, #20
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb4:	4770      	bx	lr

0800fcb6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fcb6:	b480      	push	{r7}
 800fcb8:	b085      	sub	sp, #20
 800fcba:	af00      	add	r7, sp, #0
 800fcbc:	6078      	str	r0, [r7, #4]
 800fcbe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fcc6:	68bb      	ldr	r3, [r7, #8]
 800fcc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fccc:	d103      	bne.n	800fcd6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	691b      	ldr	r3, [r3, #16]
 800fcd2:	60fb      	str	r3, [r7, #12]
 800fcd4:	e00c      	b.n	800fcf0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	3308      	adds	r3, #8
 800fcda:	60fb      	str	r3, [r7, #12]
 800fcdc:	e002      	b.n	800fce4 <vListInsert+0x2e>
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	685b      	ldr	r3, [r3, #4]
 800fce2:	60fb      	str	r3, [r7, #12]
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	685b      	ldr	r3, [r3, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	68ba      	ldr	r2, [r7, #8]
 800fcec:	429a      	cmp	r2, r3
 800fcee:	d2f6      	bcs.n	800fcde <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	685a      	ldr	r2, [r3, #4]
 800fcf4:	683b      	ldr	r3, [r7, #0]
 800fcf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fcf8:	683b      	ldr	r3, [r7, #0]
 800fcfa:	685b      	ldr	r3, [r3, #4]
 800fcfc:	683a      	ldr	r2, [r7, #0]
 800fcfe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	68fa      	ldr	r2, [r7, #12]
 800fd04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	683a      	ldr	r2, [r7, #0]
 800fd0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	687a      	ldr	r2, [r7, #4]
 800fd10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	1c5a      	adds	r2, r3, #1
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	601a      	str	r2, [r3, #0]
}
 800fd1c:	bf00      	nop
 800fd1e:	3714      	adds	r7, #20
 800fd20:	46bd      	mov	sp, r7
 800fd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd26:	4770      	bx	lr

0800fd28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fd28:	b480      	push	{r7}
 800fd2a:	b085      	sub	sp, #20
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	691b      	ldr	r3, [r3, #16]
 800fd34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	685b      	ldr	r3, [r3, #4]
 800fd3a:	687a      	ldr	r2, [r7, #4]
 800fd3c:	6892      	ldr	r2, [r2, #8]
 800fd3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	689b      	ldr	r3, [r3, #8]
 800fd44:	687a      	ldr	r2, [r7, #4]
 800fd46:	6852      	ldr	r2, [r2, #4]
 800fd48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	685b      	ldr	r3, [r3, #4]
 800fd4e:	687a      	ldr	r2, [r7, #4]
 800fd50:	429a      	cmp	r2, r3
 800fd52:	d103      	bne.n	800fd5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	689a      	ldr	r2, [r3, #8]
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2200      	movs	r2, #0
 800fd60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	1e5a      	subs	r2, r3, #1
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	681b      	ldr	r3, [r3, #0]
}
 800fd70:	4618      	mov	r0, r3
 800fd72:	3714      	adds	r7, #20
 800fd74:	46bd      	mov	sp, r7
 800fd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7a:	4770      	bx	lr

0800fd7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b084      	sub	sp, #16
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
 800fd84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d10a      	bne.n	800fda6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd94:	f383 8811 	msr	BASEPRI, r3
 800fd98:	f3bf 8f6f 	isb	sy
 800fd9c:	f3bf 8f4f 	dsb	sy
 800fda0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800fda2:	bf00      	nop
 800fda4:	e7fe      	b.n	800fda4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800fda6:	f002 f9ed 	bl	8012184 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	681a      	ldr	r2, [r3, #0]
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdb2:	68f9      	ldr	r1, [r7, #12]
 800fdb4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fdb6:	fb01 f303 	mul.w	r3, r1, r3
 800fdba:	441a      	add	r2, r3
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	681a      	ldr	r2, [r3, #0]
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	681a      	ldr	r2, [r3, #0]
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdd6:	3b01      	subs	r3, #1
 800fdd8:	68f9      	ldr	r1, [r7, #12]
 800fdda:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fddc:	fb01 f303 	mul.w	r3, r1, r3
 800fde0:	441a      	add	r2, r3
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	22ff      	movs	r2, #255	; 0xff
 800fdea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	22ff      	movs	r2, #255	; 0xff
 800fdf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800fdf6:	683b      	ldr	r3, [r7, #0]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d114      	bne.n	800fe26 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	691b      	ldr	r3, [r3, #16]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d01a      	beq.n	800fe3a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	3310      	adds	r3, #16
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f001 fa91 	bl	8011330 <xTaskRemoveFromEventList>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d012      	beq.n	800fe3a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fe14:	4b0c      	ldr	r3, [pc, #48]	; (800fe48 <xQueueGenericReset+0xcc>)
 800fe16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe1a:	601a      	str	r2, [r3, #0]
 800fe1c:	f3bf 8f4f 	dsb	sy
 800fe20:	f3bf 8f6f 	isb	sy
 800fe24:	e009      	b.n	800fe3a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	3310      	adds	r3, #16
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	f7ff fef2 	bl	800fc14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	3324      	adds	r3, #36	; 0x24
 800fe34:	4618      	mov	r0, r3
 800fe36:	f7ff feed 	bl	800fc14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fe3a:	f002 f9d3 	bl	80121e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fe3e:	2301      	movs	r3, #1
}
 800fe40:	4618      	mov	r0, r3
 800fe42:	3710      	adds	r7, #16
 800fe44:	46bd      	mov	sp, r7
 800fe46:	bd80      	pop	{r7, pc}
 800fe48:	e000ed04 	.word	0xe000ed04

0800fe4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b08e      	sub	sp, #56	; 0x38
 800fe50:	af02      	add	r7, sp, #8
 800fe52:	60f8      	str	r0, [r7, #12]
 800fe54:	60b9      	str	r1, [r7, #8]
 800fe56:	607a      	str	r2, [r7, #4]
 800fe58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d10a      	bne.n	800fe76 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800fe60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe64:	f383 8811 	msr	BASEPRI, r3
 800fe68:	f3bf 8f6f 	isb	sy
 800fe6c:	f3bf 8f4f 	dsb	sy
 800fe70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fe72:	bf00      	nop
 800fe74:	e7fe      	b.n	800fe74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d10a      	bne.n	800fe92 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800fe7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe80:	f383 8811 	msr	BASEPRI, r3
 800fe84:	f3bf 8f6f 	isb	sy
 800fe88:	f3bf 8f4f 	dsb	sy
 800fe8c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fe8e:	bf00      	nop
 800fe90:	e7fe      	b.n	800fe90 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d002      	beq.n	800fe9e <xQueueGenericCreateStatic+0x52>
 800fe98:	68bb      	ldr	r3, [r7, #8]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d001      	beq.n	800fea2 <xQueueGenericCreateStatic+0x56>
 800fe9e:	2301      	movs	r3, #1
 800fea0:	e000      	b.n	800fea4 <xQueueGenericCreateStatic+0x58>
 800fea2:	2300      	movs	r3, #0
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d10a      	bne.n	800febe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800fea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feac:	f383 8811 	msr	BASEPRI, r3
 800feb0:	f3bf 8f6f 	isb	sy
 800feb4:	f3bf 8f4f 	dsb	sy
 800feb8:	623b      	str	r3, [r7, #32]
}
 800feba:	bf00      	nop
 800febc:	e7fe      	b.n	800febc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d102      	bne.n	800feca <xQueueGenericCreateStatic+0x7e>
 800fec4:	68bb      	ldr	r3, [r7, #8]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d101      	bne.n	800fece <xQueueGenericCreateStatic+0x82>
 800feca:	2301      	movs	r3, #1
 800fecc:	e000      	b.n	800fed0 <xQueueGenericCreateStatic+0x84>
 800fece:	2300      	movs	r3, #0
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d10a      	bne.n	800feea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800fed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fed8:	f383 8811 	msr	BASEPRI, r3
 800fedc:	f3bf 8f6f 	isb	sy
 800fee0:	f3bf 8f4f 	dsb	sy
 800fee4:	61fb      	str	r3, [r7, #28]
}
 800fee6:	bf00      	nop
 800fee8:	e7fe      	b.n	800fee8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800feea:	2350      	movs	r3, #80	; 0x50
 800feec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800feee:	697b      	ldr	r3, [r7, #20]
 800fef0:	2b50      	cmp	r3, #80	; 0x50
 800fef2:	d00a      	beq.n	800ff0a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800fef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fef8:	f383 8811 	msr	BASEPRI, r3
 800fefc:	f3bf 8f6f 	isb	sy
 800ff00:	f3bf 8f4f 	dsb	sy
 800ff04:	61bb      	str	r3, [r7, #24]
}
 800ff06:	bf00      	nop
 800ff08:	e7fe      	b.n	800ff08 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ff0a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ff10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d00d      	beq.n	800ff32 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ff16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff18:	2201      	movs	r2, #1
 800ff1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ff1e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ff22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff24:	9300      	str	r3, [sp, #0]
 800ff26:	4613      	mov	r3, r2
 800ff28:	687a      	ldr	r2, [r7, #4]
 800ff2a:	68b9      	ldr	r1, [r7, #8]
 800ff2c:	68f8      	ldr	r0, [r7, #12]
 800ff2e:	f000 f805 	bl	800ff3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ff32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ff34:	4618      	mov	r0, r3
 800ff36:	3730      	adds	r7, #48	; 0x30
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	bd80      	pop	{r7, pc}

0800ff3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b084      	sub	sp, #16
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	60f8      	str	r0, [r7, #12]
 800ff44:	60b9      	str	r1, [r7, #8]
 800ff46:	607a      	str	r2, [r7, #4]
 800ff48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ff4a:	68bb      	ldr	r3, [r7, #8]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d103      	bne.n	800ff58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ff50:	69bb      	ldr	r3, [r7, #24]
 800ff52:	69ba      	ldr	r2, [r7, #24]
 800ff54:	601a      	str	r2, [r3, #0]
 800ff56:	e002      	b.n	800ff5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ff58:	69bb      	ldr	r3, [r7, #24]
 800ff5a:	687a      	ldr	r2, [r7, #4]
 800ff5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ff5e:	69bb      	ldr	r3, [r7, #24]
 800ff60:	68fa      	ldr	r2, [r7, #12]
 800ff62:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ff64:	69bb      	ldr	r3, [r7, #24]
 800ff66:	68ba      	ldr	r2, [r7, #8]
 800ff68:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ff6a:	2101      	movs	r1, #1
 800ff6c:	69b8      	ldr	r0, [r7, #24]
 800ff6e:	f7ff ff05 	bl	800fd7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ff72:	69bb      	ldr	r3, [r7, #24]
 800ff74:	78fa      	ldrb	r2, [r7, #3]
 800ff76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ff7a:	bf00      	nop
 800ff7c:	3710      	adds	r7, #16
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bd80      	pop	{r7, pc}
	...

0800ff84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b08e      	sub	sp, #56	; 0x38
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	60f8      	str	r0, [r7, #12]
 800ff8c:	60b9      	str	r1, [r7, #8]
 800ff8e:	607a      	str	r2, [r7, #4]
 800ff90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ff92:	2300      	movs	r3, #0
 800ff94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ff9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d10a      	bne.n	800ffb6 <xQueueGenericSend+0x32>
	__asm volatile
 800ffa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffa4:	f383 8811 	msr	BASEPRI, r3
 800ffa8:	f3bf 8f6f 	isb	sy
 800ffac:	f3bf 8f4f 	dsb	sy
 800ffb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ffb2:	bf00      	nop
 800ffb4:	e7fe      	b.n	800ffb4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ffb6:	68bb      	ldr	r3, [r7, #8]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d103      	bne.n	800ffc4 <xQueueGenericSend+0x40>
 800ffbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d101      	bne.n	800ffc8 <xQueueGenericSend+0x44>
 800ffc4:	2301      	movs	r3, #1
 800ffc6:	e000      	b.n	800ffca <xQueueGenericSend+0x46>
 800ffc8:	2300      	movs	r3, #0
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d10a      	bne.n	800ffe4 <xQueueGenericSend+0x60>
	__asm volatile
 800ffce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffd2:	f383 8811 	msr	BASEPRI, r3
 800ffd6:	f3bf 8f6f 	isb	sy
 800ffda:	f3bf 8f4f 	dsb	sy
 800ffde:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ffe0:	bf00      	nop
 800ffe2:	e7fe      	b.n	800ffe2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	2b02      	cmp	r3, #2
 800ffe8:	d103      	bne.n	800fff2 <xQueueGenericSend+0x6e>
 800ffea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ffee:	2b01      	cmp	r3, #1
 800fff0:	d101      	bne.n	800fff6 <xQueueGenericSend+0x72>
 800fff2:	2301      	movs	r3, #1
 800fff4:	e000      	b.n	800fff8 <xQueueGenericSend+0x74>
 800fff6:	2300      	movs	r3, #0
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d10a      	bne.n	8010012 <xQueueGenericSend+0x8e>
	__asm volatile
 800fffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010000:	f383 8811 	msr	BASEPRI, r3
 8010004:	f3bf 8f6f 	isb	sy
 8010008:	f3bf 8f4f 	dsb	sy
 801000c:	623b      	str	r3, [r7, #32]
}
 801000e:	bf00      	nop
 8010010:	e7fe      	b.n	8010010 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010012:	f001 fb5f 	bl	80116d4 <xTaskGetSchedulerState>
 8010016:	4603      	mov	r3, r0
 8010018:	2b00      	cmp	r3, #0
 801001a:	d102      	bne.n	8010022 <xQueueGenericSend+0x9e>
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d101      	bne.n	8010026 <xQueueGenericSend+0xa2>
 8010022:	2301      	movs	r3, #1
 8010024:	e000      	b.n	8010028 <xQueueGenericSend+0xa4>
 8010026:	2300      	movs	r3, #0
 8010028:	2b00      	cmp	r3, #0
 801002a:	d10a      	bne.n	8010042 <xQueueGenericSend+0xbe>
	__asm volatile
 801002c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010030:	f383 8811 	msr	BASEPRI, r3
 8010034:	f3bf 8f6f 	isb	sy
 8010038:	f3bf 8f4f 	dsb	sy
 801003c:	61fb      	str	r3, [r7, #28]
}
 801003e:	bf00      	nop
 8010040:	e7fe      	b.n	8010040 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010042:	f002 f89f 	bl	8012184 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801004a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801004c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801004e:	429a      	cmp	r2, r3
 8010050:	d302      	bcc.n	8010058 <xQueueGenericSend+0xd4>
 8010052:	683b      	ldr	r3, [r7, #0]
 8010054:	2b02      	cmp	r3, #2
 8010056:	d129      	bne.n	80100ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010058:	683a      	ldr	r2, [r7, #0]
 801005a:	68b9      	ldr	r1, [r7, #8]
 801005c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801005e:	f000 fa0b 	bl	8010478 <prvCopyDataToQueue>
 8010062:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010068:	2b00      	cmp	r3, #0
 801006a:	d010      	beq.n	801008e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801006c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801006e:	3324      	adds	r3, #36	; 0x24
 8010070:	4618      	mov	r0, r3
 8010072:	f001 f95d 	bl	8011330 <xTaskRemoveFromEventList>
 8010076:	4603      	mov	r3, r0
 8010078:	2b00      	cmp	r3, #0
 801007a:	d013      	beq.n	80100a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801007c:	4b3f      	ldr	r3, [pc, #252]	; (801017c <xQueueGenericSend+0x1f8>)
 801007e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010082:	601a      	str	r2, [r3, #0]
 8010084:	f3bf 8f4f 	dsb	sy
 8010088:	f3bf 8f6f 	isb	sy
 801008c:	e00a      	b.n	80100a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801008e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010090:	2b00      	cmp	r3, #0
 8010092:	d007      	beq.n	80100a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010094:	4b39      	ldr	r3, [pc, #228]	; (801017c <xQueueGenericSend+0x1f8>)
 8010096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801009a:	601a      	str	r2, [r3, #0]
 801009c:	f3bf 8f4f 	dsb	sy
 80100a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80100a4:	f002 f89e 	bl	80121e4 <vPortExitCritical>
				return pdPASS;
 80100a8:	2301      	movs	r3, #1
 80100aa:	e063      	b.n	8010174 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d103      	bne.n	80100ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80100b2:	f002 f897 	bl	80121e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80100b6:	2300      	movs	r3, #0
 80100b8:	e05c      	b.n	8010174 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80100ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d106      	bne.n	80100ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80100c0:	f107 0314 	add.w	r3, r7, #20
 80100c4:	4618      	mov	r0, r3
 80100c6:	f001 f997 	bl	80113f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80100ca:	2301      	movs	r3, #1
 80100cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80100ce:	f002 f889 	bl	80121e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80100d2:	f000 ff03 	bl	8010edc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80100d6:	f002 f855 	bl	8012184 <vPortEnterCritical>
 80100da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80100e0:	b25b      	sxtb	r3, r3
 80100e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100e6:	d103      	bne.n	80100f0 <xQueueGenericSend+0x16c>
 80100e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ea:	2200      	movs	r2, #0
 80100ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80100f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80100f6:	b25b      	sxtb	r3, r3
 80100f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100fc:	d103      	bne.n	8010106 <xQueueGenericSend+0x182>
 80100fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010100:	2200      	movs	r2, #0
 8010102:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010106:	f002 f86d 	bl	80121e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801010a:	1d3a      	adds	r2, r7, #4
 801010c:	f107 0314 	add.w	r3, r7, #20
 8010110:	4611      	mov	r1, r2
 8010112:	4618      	mov	r0, r3
 8010114:	f001 f986 	bl	8011424 <xTaskCheckForTimeOut>
 8010118:	4603      	mov	r3, r0
 801011a:	2b00      	cmp	r3, #0
 801011c:	d124      	bne.n	8010168 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801011e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010120:	f000 faa2 	bl	8010668 <prvIsQueueFull>
 8010124:	4603      	mov	r3, r0
 8010126:	2b00      	cmp	r3, #0
 8010128:	d018      	beq.n	801015c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801012a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801012c:	3310      	adds	r3, #16
 801012e:	687a      	ldr	r2, [r7, #4]
 8010130:	4611      	mov	r1, r2
 8010132:	4618      	mov	r0, r3
 8010134:	f001 f8ac 	bl	8011290 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010138:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801013a:	f000 fa2d 	bl	8010598 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801013e:	f000 fedb 	bl	8010ef8 <xTaskResumeAll>
 8010142:	4603      	mov	r3, r0
 8010144:	2b00      	cmp	r3, #0
 8010146:	f47f af7c 	bne.w	8010042 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801014a:	4b0c      	ldr	r3, [pc, #48]	; (801017c <xQueueGenericSend+0x1f8>)
 801014c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010150:	601a      	str	r2, [r3, #0]
 8010152:	f3bf 8f4f 	dsb	sy
 8010156:	f3bf 8f6f 	isb	sy
 801015a:	e772      	b.n	8010042 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801015c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801015e:	f000 fa1b 	bl	8010598 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010162:	f000 fec9 	bl	8010ef8 <xTaskResumeAll>
 8010166:	e76c      	b.n	8010042 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010168:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801016a:	f000 fa15 	bl	8010598 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801016e:	f000 fec3 	bl	8010ef8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010172:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010174:	4618      	mov	r0, r3
 8010176:	3738      	adds	r7, #56	; 0x38
 8010178:	46bd      	mov	sp, r7
 801017a:	bd80      	pop	{r7, pc}
 801017c:	e000ed04 	.word	0xe000ed04

08010180 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b090      	sub	sp, #64	; 0x40
 8010184:	af00      	add	r7, sp, #0
 8010186:	60f8      	str	r0, [r7, #12]
 8010188:	60b9      	str	r1, [r7, #8]
 801018a:	607a      	str	r2, [r7, #4]
 801018c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8010192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010194:	2b00      	cmp	r3, #0
 8010196:	d10a      	bne.n	80101ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8010198:	f04f 0350 	mov.w	r3, #80	; 0x50
 801019c:	f383 8811 	msr	BASEPRI, r3
 80101a0:	f3bf 8f6f 	isb	sy
 80101a4:	f3bf 8f4f 	dsb	sy
 80101a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80101aa:	bf00      	nop
 80101ac:	e7fe      	b.n	80101ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80101ae:	68bb      	ldr	r3, [r7, #8]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d103      	bne.n	80101bc <xQueueGenericSendFromISR+0x3c>
 80101b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d101      	bne.n	80101c0 <xQueueGenericSendFromISR+0x40>
 80101bc:	2301      	movs	r3, #1
 80101be:	e000      	b.n	80101c2 <xQueueGenericSendFromISR+0x42>
 80101c0:	2300      	movs	r3, #0
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d10a      	bne.n	80101dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80101c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101ca:	f383 8811 	msr	BASEPRI, r3
 80101ce:	f3bf 8f6f 	isb	sy
 80101d2:	f3bf 8f4f 	dsb	sy
 80101d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80101d8:	bf00      	nop
 80101da:	e7fe      	b.n	80101da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	2b02      	cmp	r3, #2
 80101e0:	d103      	bne.n	80101ea <xQueueGenericSendFromISR+0x6a>
 80101e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101e6:	2b01      	cmp	r3, #1
 80101e8:	d101      	bne.n	80101ee <xQueueGenericSendFromISR+0x6e>
 80101ea:	2301      	movs	r3, #1
 80101ec:	e000      	b.n	80101f0 <xQueueGenericSendFromISR+0x70>
 80101ee:	2300      	movs	r3, #0
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d10a      	bne.n	801020a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80101f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101f8:	f383 8811 	msr	BASEPRI, r3
 80101fc:	f3bf 8f6f 	isb	sy
 8010200:	f3bf 8f4f 	dsb	sy
 8010204:	623b      	str	r3, [r7, #32]
}
 8010206:	bf00      	nop
 8010208:	e7fe      	b.n	8010208 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801020a:	f002 f89d 	bl	8012348 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801020e:	f3ef 8211 	mrs	r2, BASEPRI
 8010212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010216:	f383 8811 	msr	BASEPRI, r3
 801021a:	f3bf 8f6f 	isb	sy
 801021e:	f3bf 8f4f 	dsb	sy
 8010222:	61fa      	str	r2, [r7, #28]
 8010224:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010226:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010228:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801022a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801022c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801022e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010232:	429a      	cmp	r2, r3
 8010234:	d302      	bcc.n	801023c <xQueueGenericSendFromISR+0xbc>
 8010236:	683b      	ldr	r3, [r7, #0]
 8010238:	2b02      	cmp	r3, #2
 801023a:	d12f      	bne.n	801029c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801023c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801023e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801024a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801024c:	683a      	ldr	r2, [r7, #0]
 801024e:	68b9      	ldr	r1, [r7, #8]
 8010250:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010252:	f000 f911 	bl	8010478 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010256:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801025a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801025e:	d112      	bne.n	8010286 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010264:	2b00      	cmp	r3, #0
 8010266:	d016      	beq.n	8010296 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801026a:	3324      	adds	r3, #36	; 0x24
 801026c:	4618      	mov	r0, r3
 801026e:	f001 f85f 	bl	8011330 <xTaskRemoveFromEventList>
 8010272:	4603      	mov	r3, r0
 8010274:	2b00      	cmp	r3, #0
 8010276:	d00e      	beq.n	8010296 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d00b      	beq.n	8010296 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	2201      	movs	r2, #1
 8010282:	601a      	str	r2, [r3, #0]
 8010284:	e007      	b.n	8010296 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010286:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801028a:	3301      	adds	r3, #1
 801028c:	b2db      	uxtb	r3, r3
 801028e:	b25a      	sxtb	r2, r3
 8010290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010292:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010296:	2301      	movs	r3, #1
 8010298:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801029a:	e001      	b.n	80102a0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801029c:	2300      	movs	r3, #0
 801029e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80102a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102a2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80102a4:	697b      	ldr	r3, [r7, #20]
 80102a6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80102aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80102ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80102ae:	4618      	mov	r0, r3
 80102b0:	3740      	adds	r7, #64	; 0x40
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}
	...

080102b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b08c      	sub	sp, #48	; 0x30
 80102bc:	af00      	add	r7, sp, #0
 80102be:	60f8      	str	r0, [r7, #12]
 80102c0:	60b9      	str	r1, [r7, #8]
 80102c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80102c4:	2300      	movs	r3, #0
 80102c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80102cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d10a      	bne.n	80102e8 <xQueueReceive+0x30>
	__asm volatile
 80102d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102d6:	f383 8811 	msr	BASEPRI, r3
 80102da:	f3bf 8f6f 	isb	sy
 80102de:	f3bf 8f4f 	dsb	sy
 80102e2:	623b      	str	r3, [r7, #32]
}
 80102e4:	bf00      	nop
 80102e6:	e7fe      	b.n	80102e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80102e8:	68bb      	ldr	r3, [r7, #8]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d103      	bne.n	80102f6 <xQueueReceive+0x3e>
 80102ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d101      	bne.n	80102fa <xQueueReceive+0x42>
 80102f6:	2301      	movs	r3, #1
 80102f8:	e000      	b.n	80102fc <xQueueReceive+0x44>
 80102fa:	2300      	movs	r3, #0
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d10a      	bne.n	8010316 <xQueueReceive+0x5e>
	__asm volatile
 8010300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010304:	f383 8811 	msr	BASEPRI, r3
 8010308:	f3bf 8f6f 	isb	sy
 801030c:	f3bf 8f4f 	dsb	sy
 8010310:	61fb      	str	r3, [r7, #28]
}
 8010312:	bf00      	nop
 8010314:	e7fe      	b.n	8010314 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010316:	f001 f9dd 	bl	80116d4 <xTaskGetSchedulerState>
 801031a:	4603      	mov	r3, r0
 801031c:	2b00      	cmp	r3, #0
 801031e:	d102      	bne.n	8010326 <xQueueReceive+0x6e>
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d101      	bne.n	801032a <xQueueReceive+0x72>
 8010326:	2301      	movs	r3, #1
 8010328:	e000      	b.n	801032c <xQueueReceive+0x74>
 801032a:	2300      	movs	r3, #0
 801032c:	2b00      	cmp	r3, #0
 801032e:	d10a      	bne.n	8010346 <xQueueReceive+0x8e>
	__asm volatile
 8010330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010334:	f383 8811 	msr	BASEPRI, r3
 8010338:	f3bf 8f6f 	isb	sy
 801033c:	f3bf 8f4f 	dsb	sy
 8010340:	61bb      	str	r3, [r7, #24]
}
 8010342:	bf00      	nop
 8010344:	e7fe      	b.n	8010344 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010346:	f001 ff1d 	bl	8012184 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801034a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801034c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801034e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010352:	2b00      	cmp	r3, #0
 8010354:	d01f      	beq.n	8010396 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010356:	68b9      	ldr	r1, [r7, #8]
 8010358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801035a:	f000 f8f7 	bl	801054c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801035e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010360:	1e5a      	subs	r2, r3, #1
 8010362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010364:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010368:	691b      	ldr	r3, [r3, #16]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d00f      	beq.n	801038e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801036e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010370:	3310      	adds	r3, #16
 8010372:	4618      	mov	r0, r3
 8010374:	f000 ffdc 	bl	8011330 <xTaskRemoveFromEventList>
 8010378:	4603      	mov	r3, r0
 801037a:	2b00      	cmp	r3, #0
 801037c:	d007      	beq.n	801038e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801037e:	4b3d      	ldr	r3, [pc, #244]	; (8010474 <xQueueReceive+0x1bc>)
 8010380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010384:	601a      	str	r2, [r3, #0]
 8010386:	f3bf 8f4f 	dsb	sy
 801038a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801038e:	f001 ff29 	bl	80121e4 <vPortExitCritical>
				return pdPASS;
 8010392:	2301      	movs	r3, #1
 8010394:	e069      	b.n	801046a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d103      	bne.n	80103a4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801039c:	f001 ff22 	bl	80121e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80103a0:	2300      	movs	r3, #0
 80103a2:	e062      	b.n	801046a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80103a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d106      	bne.n	80103b8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80103aa:	f107 0310 	add.w	r3, r7, #16
 80103ae:	4618      	mov	r0, r3
 80103b0:	f001 f822 	bl	80113f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80103b4:	2301      	movs	r3, #1
 80103b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80103b8:	f001 ff14 	bl	80121e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80103bc:	f000 fd8e 	bl	8010edc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80103c0:	f001 fee0 	bl	8012184 <vPortEnterCritical>
 80103c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80103ca:	b25b      	sxtb	r3, r3
 80103cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103d0:	d103      	bne.n	80103da <xQueueReceive+0x122>
 80103d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103d4:	2200      	movs	r2, #0
 80103d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80103da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80103e0:	b25b      	sxtb	r3, r3
 80103e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103e6:	d103      	bne.n	80103f0 <xQueueReceive+0x138>
 80103e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103ea:	2200      	movs	r2, #0
 80103ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80103f0:	f001 fef8 	bl	80121e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80103f4:	1d3a      	adds	r2, r7, #4
 80103f6:	f107 0310 	add.w	r3, r7, #16
 80103fa:	4611      	mov	r1, r2
 80103fc:	4618      	mov	r0, r3
 80103fe:	f001 f811 	bl	8011424 <xTaskCheckForTimeOut>
 8010402:	4603      	mov	r3, r0
 8010404:	2b00      	cmp	r3, #0
 8010406:	d123      	bne.n	8010450 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010408:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801040a:	f000 f917 	bl	801063c <prvIsQueueEmpty>
 801040e:	4603      	mov	r3, r0
 8010410:	2b00      	cmp	r3, #0
 8010412:	d017      	beq.n	8010444 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010416:	3324      	adds	r3, #36	; 0x24
 8010418:	687a      	ldr	r2, [r7, #4]
 801041a:	4611      	mov	r1, r2
 801041c:	4618      	mov	r0, r3
 801041e:	f000 ff37 	bl	8011290 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010422:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010424:	f000 f8b8 	bl	8010598 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010428:	f000 fd66 	bl	8010ef8 <xTaskResumeAll>
 801042c:	4603      	mov	r3, r0
 801042e:	2b00      	cmp	r3, #0
 8010430:	d189      	bne.n	8010346 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8010432:	4b10      	ldr	r3, [pc, #64]	; (8010474 <xQueueReceive+0x1bc>)
 8010434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010438:	601a      	str	r2, [r3, #0]
 801043a:	f3bf 8f4f 	dsb	sy
 801043e:	f3bf 8f6f 	isb	sy
 8010442:	e780      	b.n	8010346 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010446:	f000 f8a7 	bl	8010598 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801044a:	f000 fd55 	bl	8010ef8 <xTaskResumeAll>
 801044e:	e77a      	b.n	8010346 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010452:	f000 f8a1 	bl	8010598 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010456:	f000 fd4f 	bl	8010ef8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801045a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801045c:	f000 f8ee 	bl	801063c <prvIsQueueEmpty>
 8010460:	4603      	mov	r3, r0
 8010462:	2b00      	cmp	r3, #0
 8010464:	f43f af6f 	beq.w	8010346 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010468:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801046a:	4618      	mov	r0, r3
 801046c:	3730      	adds	r7, #48	; 0x30
 801046e:	46bd      	mov	sp, r7
 8010470:	bd80      	pop	{r7, pc}
 8010472:	bf00      	nop
 8010474:	e000ed04 	.word	0xe000ed04

08010478 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b086      	sub	sp, #24
 801047c:	af00      	add	r7, sp, #0
 801047e:	60f8      	str	r0, [r7, #12]
 8010480:	60b9      	str	r1, [r7, #8]
 8010482:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010484:	2300      	movs	r3, #0
 8010486:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801048c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010492:	2b00      	cmp	r3, #0
 8010494:	d10d      	bne.n	80104b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d14d      	bne.n	801053a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	689b      	ldr	r3, [r3, #8]
 80104a2:	4618      	mov	r0, r3
 80104a4:	f001 f934 	bl	8011710 <xTaskPriorityDisinherit>
 80104a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	2200      	movs	r2, #0
 80104ae:	609a      	str	r2, [r3, #8]
 80104b0:	e043      	b.n	801053a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d119      	bne.n	80104ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	6858      	ldr	r0, [r3, #4]
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104c0:	461a      	mov	r2, r3
 80104c2:	68b9      	ldr	r1, [r7, #8]
 80104c4:	f002 fc06 	bl	8012cd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	685a      	ldr	r2, [r3, #4]
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104d0:	441a      	add	r2, r3
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	685a      	ldr	r2, [r3, #4]
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	689b      	ldr	r3, [r3, #8]
 80104de:	429a      	cmp	r2, r3
 80104e0:	d32b      	bcc.n	801053a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	681a      	ldr	r2, [r3, #0]
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	605a      	str	r2, [r3, #4]
 80104ea:	e026      	b.n	801053a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	68d8      	ldr	r0, [r3, #12]
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104f4:	461a      	mov	r2, r3
 80104f6:	68b9      	ldr	r1, [r7, #8]
 80104f8:	f002 fbec 	bl	8012cd4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	68da      	ldr	r2, [r3, #12]
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010504:	425b      	negs	r3, r3
 8010506:	441a      	add	r2, r3
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	68da      	ldr	r2, [r3, #12]
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	429a      	cmp	r2, r3
 8010516:	d207      	bcs.n	8010528 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	689a      	ldr	r2, [r3, #8]
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010520:	425b      	negs	r3, r3
 8010522:	441a      	add	r2, r3
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	2b02      	cmp	r3, #2
 801052c:	d105      	bne.n	801053a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801052e:	693b      	ldr	r3, [r7, #16]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d002      	beq.n	801053a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010534:	693b      	ldr	r3, [r7, #16]
 8010536:	3b01      	subs	r3, #1
 8010538:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801053a:	693b      	ldr	r3, [r7, #16]
 801053c:	1c5a      	adds	r2, r3, #1
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010542:	697b      	ldr	r3, [r7, #20]
}
 8010544:	4618      	mov	r0, r3
 8010546:	3718      	adds	r7, #24
 8010548:	46bd      	mov	sp, r7
 801054a:	bd80      	pop	{r7, pc}

0801054c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b082      	sub	sp, #8
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
 8010554:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801055a:	2b00      	cmp	r3, #0
 801055c:	d018      	beq.n	8010590 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	68da      	ldr	r2, [r3, #12]
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010566:	441a      	add	r2, r3
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	68da      	ldr	r2, [r3, #12]
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	689b      	ldr	r3, [r3, #8]
 8010574:	429a      	cmp	r2, r3
 8010576:	d303      	bcc.n	8010580 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	681a      	ldr	r2, [r3, #0]
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	68d9      	ldr	r1, [r3, #12]
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010588:	461a      	mov	r2, r3
 801058a:	6838      	ldr	r0, [r7, #0]
 801058c:	f002 fba2 	bl	8012cd4 <memcpy>
	}
}
 8010590:	bf00      	nop
 8010592:	3708      	adds	r7, #8
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}

08010598 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b084      	sub	sp, #16
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80105a0:	f001 fdf0 	bl	8012184 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80105aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80105ac:	e011      	b.n	80105d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d012      	beq.n	80105dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	3324      	adds	r3, #36	; 0x24
 80105ba:	4618      	mov	r0, r3
 80105bc:	f000 feb8 	bl	8011330 <xTaskRemoveFromEventList>
 80105c0:	4603      	mov	r3, r0
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d001      	beq.n	80105ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80105c6:	f000 ff8f 	bl	80114e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80105ca:	7bfb      	ldrb	r3, [r7, #15]
 80105cc:	3b01      	subs	r3, #1
 80105ce:	b2db      	uxtb	r3, r3
 80105d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80105d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	dce9      	bgt.n	80105ae <prvUnlockQueue+0x16>
 80105da:	e000      	b.n	80105de <prvUnlockQueue+0x46>
					break;
 80105dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	22ff      	movs	r2, #255	; 0xff
 80105e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80105e6:	f001 fdfd 	bl	80121e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80105ea:	f001 fdcb 	bl	8012184 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80105f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80105f6:	e011      	b.n	801061c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	691b      	ldr	r3, [r3, #16]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d012      	beq.n	8010626 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	3310      	adds	r3, #16
 8010604:	4618      	mov	r0, r3
 8010606:	f000 fe93 	bl	8011330 <xTaskRemoveFromEventList>
 801060a:	4603      	mov	r3, r0
 801060c:	2b00      	cmp	r3, #0
 801060e:	d001      	beq.n	8010614 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010610:	f000 ff6a 	bl	80114e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010614:	7bbb      	ldrb	r3, [r7, #14]
 8010616:	3b01      	subs	r3, #1
 8010618:	b2db      	uxtb	r3, r3
 801061a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801061c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010620:	2b00      	cmp	r3, #0
 8010622:	dce9      	bgt.n	80105f8 <prvUnlockQueue+0x60>
 8010624:	e000      	b.n	8010628 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010626:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	22ff      	movs	r2, #255	; 0xff
 801062c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010630:	f001 fdd8 	bl	80121e4 <vPortExitCritical>
}
 8010634:	bf00      	nop
 8010636:	3710      	adds	r7, #16
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}

0801063c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b084      	sub	sp, #16
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010644:	f001 fd9e 	bl	8012184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801064c:	2b00      	cmp	r3, #0
 801064e:	d102      	bne.n	8010656 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010650:	2301      	movs	r3, #1
 8010652:	60fb      	str	r3, [r7, #12]
 8010654:	e001      	b.n	801065a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010656:	2300      	movs	r3, #0
 8010658:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801065a:	f001 fdc3 	bl	80121e4 <vPortExitCritical>

	return xReturn;
 801065e:	68fb      	ldr	r3, [r7, #12]
}
 8010660:	4618      	mov	r0, r3
 8010662:	3710      	adds	r7, #16
 8010664:	46bd      	mov	sp, r7
 8010666:	bd80      	pop	{r7, pc}

08010668 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b084      	sub	sp, #16
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010670:	f001 fd88 	bl	8012184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801067c:	429a      	cmp	r2, r3
 801067e:	d102      	bne.n	8010686 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010680:	2301      	movs	r3, #1
 8010682:	60fb      	str	r3, [r7, #12]
 8010684:	e001      	b.n	801068a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010686:	2300      	movs	r3, #0
 8010688:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801068a:	f001 fdab 	bl	80121e4 <vPortExitCritical>

	return xReturn;
 801068e:	68fb      	ldr	r3, [r7, #12]
}
 8010690:	4618      	mov	r0, r3
 8010692:	3710      	adds	r7, #16
 8010694:	46bd      	mov	sp, r7
 8010696:	bd80      	pop	{r7, pc}

08010698 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010698:	b480      	push	{r7}
 801069a:	b085      	sub	sp, #20
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
 80106a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80106a2:	2300      	movs	r3, #0
 80106a4:	60fb      	str	r3, [r7, #12]
 80106a6:	e014      	b.n	80106d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80106a8:	4a0f      	ldr	r2, [pc, #60]	; (80106e8 <vQueueAddToRegistry+0x50>)
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d10b      	bne.n	80106cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80106b4:	490c      	ldr	r1, [pc, #48]	; (80106e8 <vQueueAddToRegistry+0x50>)
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	683a      	ldr	r2, [r7, #0]
 80106ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80106be:	4a0a      	ldr	r2, [pc, #40]	; (80106e8 <vQueueAddToRegistry+0x50>)
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	00db      	lsls	r3, r3, #3
 80106c4:	4413      	add	r3, r2
 80106c6:	687a      	ldr	r2, [r7, #4]
 80106c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80106ca:	e006      	b.n	80106da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	3301      	adds	r3, #1
 80106d0:	60fb      	str	r3, [r7, #12]
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	2b07      	cmp	r3, #7
 80106d6:	d9e7      	bls.n	80106a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80106d8:	bf00      	nop
 80106da:	bf00      	nop
 80106dc:	3714      	adds	r7, #20
 80106de:	46bd      	mov	sp, r7
 80106e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e4:	4770      	bx	lr
 80106e6:	bf00      	nop
 80106e8:	200064b0 	.word	0x200064b0

080106ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b086      	sub	sp, #24
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	60f8      	str	r0, [r7, #12]
 80106f4:	60b9      	str	r1, [r7, #8]
 80106f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80106fc:	f001 fd42 	bl	8012184 <vPortEnterCritical>
 8010700:	697b      	ldr	r3, [r7, #20]
 8010702:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010706:	b25b      	sxtb	r3, r3
 8010708:	f1b3 3fff 	cmp.w	r3, #4294967295
 801070c:	d103      	bne.n	8010716 <vQueueWaitForMessageRestricted+0x2a>
 801070e:	697b      	ldr	r3, [r7, #20]
 8010710:	2200      	movs	r2, #0
 8010712:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010716:	697b      	ldr	r3, [r7, #20]
 8010718:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801071c:	b25b      	sxtb	r3, r3
 801071e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010722:	d103      	bne.n	801072c <vQueueWaitForMessageRestricted+0x40>
 8010724:	697b      	ldr	r3, [r7, #20]
 8010726:	2200      	movs	r2, #0
 8010728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801072c:	f001 fd5a 	bl	80121e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010730:	697b      	ldr	r3, [r7, #20]
 8010732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010734:	2b00      	cmp	r3, #0
 8010736:	d106      	bne.n	8010746 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010738:	697b      	ldr	r3, [r7, #20]
 801073a:	3324      	adds	r3, #36	; 0x24
 801073c:	687a      	ldr	r2, [r7, #4]
 801073e:	68b9      	ldr	r1, [r7, #8]
 8010740:	4618      	mov	r0, r3
 8010742:	f000 fdc9 	bl	80112d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010746:	6978      	ldr	r0, [r7, #20]
 8010748:	f7ff ff26 	bl	8010598 <prvUnlockQueue>
	}
 801074c:	bf00      	nop
 801074e:	3718      	adds	r7, #24
 8010750:	46bd      	mov	sp, r7
 8010752:	bd80      	pop	{r7, pc}

08010754 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010754:	b580      	push	{r7, lr}
 8010756:	b08e      	sub	sp, #56	; 0x38
 8010758:	af04      	add	r7, sp, #16
 801075a:	60f8      	str	r0, [r7, #12]
 801075c:	60b9      	str	r1, [r7, #8]
 801075e:	607a      	str	r2, [r7, #4]
 8010760:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010764:	2b00      	cmp	r3, #0
 8010766:	d10a      	bne.n	801077e <xTaskCreateStatic+0x2a>
	__asm volatile
 8010768:	f04f 0350 	mov.w	r3, #80	; 0x50
 801076c:	f383 8811 	msr	BASEPRI, r3
 8010770:	f3bf 8f6f 	isb	sy
 8010774:	f3bf 8f4f 	dsb	sy
 8010778:	623b      	str	r3, [r7, #32]
}
 801077a:	bf00      	nop
 801077c:	e7fe      	b.n	801077c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801077e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010780:	2b00      	cmp	r3, #0
 8010782:	d10a      	bne.n	801079a <xTaskCreateStatic+0x46>
	__asm volatile
 8010784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010788:	f383 8811 	msr	BASEPRI, r3
 801078c:	f3bf 8f6f 	isb	sy
 8010790:	f3bf 8f4f 	dsb	sy
 8010794:	61fb      	str	r3, [r7, #28]
}
 8010796:	bf00      	nop
 8010798:	e7fe      	b.n	8010798 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801079a:	23bc      	movs	r3, #188	; 0xbc
 801079c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801079e:	693b      	ldr	r3, [r7, #16]
 80107a0:	2bbc      	cmp	r3, #188	; 0xbc
 80107a2:	d00a      	beq.n	80107ba <xTaskCreateStatic+0x66>
	__asm volatile
 80107a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107a8:	f383 8811 	msr	BASEPRI, r3
 80107ac:	f3bf 8f6f 	isb	sy
 80107b0:	f3bf 8f4f 	dsb	sy
 80107b4:	61bb      	str	r3, [r7, #24]
}
 80107b6:	bf00      	nop
 80107b8:	e7fe      	b.n	80107b8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80107ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80107bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d01e      	beq.n	8010800 <xTaskCreateStatic+0xac>
 80107c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d01b      	beq.n	8010800 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80107c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80107cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80107d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80107d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107d4:	2202      	movs	r2, #2
 80107d6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80107da:	2300      	movs	r3, #0
 80107dc:	9303      	str	r3, [sp, #12]
 80107de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107e0:	9302      	str	r3, [sp, #8]
 80107e2:	f107 0314 	add.w	r3, r7, #20
 80107e6:	9301      	str	r3, [sp, #4]
 80107e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ea:	9300      	str	r3, [sp, #0]
 80107ec:	683b      	ldr	r3, [r7, #0]
 80107ee:	687a      	ldr	r2, [r7, #4]
 80107f0:	68b9      	ldr	r1, [r7, #8]
 80107f2:	68f8      	ldr	r0, [r7, #12]
 80107f4:	f000 f850 	bl	8010898 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80107f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80107fa:	f000 f8f3 	bl	80109e4 <prvAddNewTaskToReadyList>
 80107fe:	e001      	b.n	8010804 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010800:	2300      	movs	r3, #0
 8010802:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010804:	697b      	ldr	r3, [r7, #20]
	}
 8010806:	4618      	mov	r0, r3
 8010808:	3728      	adds	r7, #40	; 0x28
 801080a:	46bd      	mov	sp, r7
 801080c:	bd80      	pop	{r7, pc}

0801080e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801080e:	b580      	push	{r7, lr}
 8010810:	b08c      	sub	sp, #48	; 0x30
 8010812:	af04      	add	r7, sp, #16
 8010814:	60f8      	str	r0, [r7, #12]
 8010816:	60b9      	str	r1, [r7, #8]
 8010818:	603b      	str	r3, [r7, #0]
 801081a:	4613      	mov	r3, r2
 801081c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801081e:	88fb      	ldrh	r3, [r7, #6]
 8010820:	009b      	lsls	r3, r3, #2
 8010822:	4618      	mov	r0, r3
 8010824:	f001 fdd0 	bl	80123c8 <pvPortMalloc>
 8010828:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801082a:	697b      	ldr	r3, [r7, #20]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d00e      	beq.n	801084e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010830:	20bc      	movs	r0, #188	; 0xbc
 8010832:	f001 fdc9 	bl	80123c8 <pvPortMalloc>
 8010836:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010838:	69fb      	ldr	r3, [r7, #28]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d003      	beq.n	8010846 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801083e:	69fb      	ldr	r3, [r7, #28]
 8010840:	697a      	ldr	r2, [r7, #20]
 8010842:	631a      	str	r2, [r3, #48]	; 0x30
 8010844:	e005      	b.n	8010852 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010846:	6978      	ldr	r0, [r7, #20]
 8010848:	f001 fe8a 	bl	8012560 <vPortFree>
 801084c:	e001      	b.n	8010852 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801084e:	2300      	movs	r3, #0
 8010850:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010852:	69fb      	ldr	r3, [r7, #28]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d017      	beq.n	8010888 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010858:	69fb      	ldr	r3, [r7, #28]
 801085a:	2200      	movs	r2, #0
 801085c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010860:	88fa      	ldrh	r2, [r7, #6]
 8010862:	2300      	movs	r3, #0
 8010864:	9303      	str	r3, [sp, #12]
 8010866:	69fb      	ldr	r3, [r7, #28]
 8010868:	9302      	str	r3, [sp, #8]
 801086a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801086c:	9301      	str	r3, [sp, #4]
 801086e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010870:	9300      	str	r3, [sp, #0]
 8010872:	683b      	ldr	r3, [r7, #0]
 8010874:	68b9      	ldr	r1, [r7, #8]
 8010876:	68f8      	ldr	r0, [r7, #12]
 8010878:	f000 f80e 	bl	8010898 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801087c:	69f8      	ldr	r0, [r7, #28]
 801087e:	f000 f8b1 	bl	80109e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010882:	2301      	movs	r3, #1
 8010884:	61bb      	str	r3, [r7, #24]
 8010886:	e002      	b.n	801088e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010888:	f04f 33ff 	mov.w	r3, #4294967295
 801088c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801088e:	69bb      	ldr	r3, [r7, #24]
	}
 8010890:	4618      	mov	r0, r3
 8010892:	3720      	adds	r7, #32
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}

08010898 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b088      	sub	sp, #32
 801089c:	af00      	add	r7, sp, #0
 801089e:	60f8      	str	r0, [r7, #12]
 80108a0:	60b9      	str	r1, [r7, #8]
 80108a2:	607a      	str	r2, [r7, #4]
 80108a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80108a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	009b      	lsls	r3, r3, #2
 80108ae:	461a      	mov	r2, r3
 80108b0:	21a5      	movs	r1, #165	; 0xa5
 80108b2:	f002 fa37 	bl	8012d24 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80108b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80108c0:	3b01      	subs	r3, #1
 80108c2:	009b      	lsls	r3, r3, #2
 80108c4:	4413      	add	r3, r2
 80108c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80108c8:	69bb      	ldr	r3, [r7, #24]
 80108ca:	f023 0307 	bic.w	r3, r3, #7
 80108ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80108d0:	69bb      	ldr	r3, [r7, #24]
 80108d2:	f003 0307 	and.w	r3, r3, #7
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d00a      	beq.n	80108f0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80108da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108de:	f383 8811 	msr	BASEPRI, r3
 80108e2:	f3bf 8f6f 	isb	sy
 80108e6:	f3bf 8f4f 	dsb	sy
 80108ea:	617b      	str	r3, [r7, #20]
}
 80108ec:	bf00      	nop
 80108ee:	e7fe      	b.n	80108ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80108f0:	68bb      	ldr	r3, [r7, #8]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d01f      	beq.n	8010936 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80108f6:	2300      	movs	r3, #0
 80108f8:	61fb      	str	r3, [r7, #28]
 80108fa:	e012      	b.n	8010922 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80108fc:	68ba      	ldr	r2, [r7, #8]
 80108fe:	69fb      	ldr	r3, [r7, #28]
 8010900:	4413      	add	r3, r2
 8010902:	7819      	ldrb	r1, [r3, #0]
 8010904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010906:	69fb      	ldr	r3, [r7, #28]
 8010908:	4413      	add	r3, r2
 801090a:	3334      	adds	r3, #52	; 0x34
 801090c:	460a      	mov	r2, r1
 801090e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010910:	68ba      	ldr	r2, [r7, #8]
 8010912:	69fb      	ldr	r3, [r7, #28]
 8010914:	4413      	add	r3, r2
 8010916:	781b      	ldrb	r3, [r3, #0]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d006      	beq.n	801092a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801091c:	69fb      	ldr	r3, [r7, #28]
 801091e:	3301      	adds	r3, #1
 8010920:	61fb      	str	r3, [r7, #28]
 8010922:	69fb      	ldr	r3, [r7, #28]
 8010924:	2b0f      	cmp	r3, #15
 8010926:	d9e9      	bls.n	80108fc <prvInitialiseNewTask+0x64>
 8010928:	e000      	b.n	801092c <prvInitialiseNewTask+0x94>
			{
				break;
 801092a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801092c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801092e:	2200      	movs	r2, #0
 8010930:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010934:	e003      	b.n	801093e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010938:	2200      	movs	r2, #0
 801093a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801093e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010940:	2b37      	cmp	r3, #55	; 0x37
 8010942:	d901      	bls.n	8010948 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010944:	2337      	movs	r3, #55	; 0x37
 8010946:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801094a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801094c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801094e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010952:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010956:	2200      	movs	r2, #0
 8010958:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801095a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801095c:	3304      	adds	r3, #4
 801095e:	4618      	mov	r0, r3
 8010960:	f7ff f978 	bl	800fc54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010966:	3318      	adds	r3, #24
 8010968:	4618      	mov	r0, r3
 801096a:	f7ff f973 	bl	800fc54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801096e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010972:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010976:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801097a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801097c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801097e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010982:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010986:	2200      	movs	r2, #0
 8010988:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801098c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801098e:	2200      	movs	r2, #0
 8010990:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010996:	3354      	adds	r3, #84	; 0x54
 8010998:	2260      	movs	r2, #96	; 0x60
 801099a:	2100      	movs	r1, #0
 801099c:	4618      	mov	r0, r3
 801099e:	f002 f9c1 	bl	8012d24 <memset>
 80109a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109a4:	4a0c      	ldr	r2, [pc, #48]	; (80109d8 <prvInitialiseNewTask+0x140>)
 80109a6:	659a      	str	r2, [r3, #88]	; 0x58
 80109a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109aa:	4a0c      	ldr	r2, [pc, #48]	; (80109dc <prvInitialiseNewTask+0x144>)
 80109ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80109ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109b0:	4a0b      	ldr	r2, [pc, #44]	; (80109e0 <prvInitialiseNewTask+0x148>)
 80109b2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80109b4:	683a      	ldr	r2, [r7, #0]
 80109b6:	68f9      	ldr	r1, [r7, #12]
 80109b8:	69b8      	ldr	r0, [r7, #24]
 80109ba:	f001 fab9 	bl	8011f30 <pxPortInitialiseStack>
 80109be:	4602      	mov	r2, r0
 80109c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80109c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d002      	beq.n	80109d0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80109ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80109ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80109d0:	bf00      	nop
 80109d2:	3720      	adds	r7, #32
 80109d4:	46bd      	mov	sp, r7
 80109d6:	bd80      	pop	{r7, pc}
 80109d8:	0801aa74 	.word	0x0801aa74
 80109dc:	0801aa94 	.word	0x0801aa94
 80109e0:	0801aa54 	.word	0x0801aa54

080109e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b082      	sub	sp, #8
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80109ec:	f001 fbca 	bl	8012184 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80109f0:	4b2d      	ldr	r3, [pc, #180]	; (8010aa8 <prvAddNewTaskToReadyList+0xc4>)
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	3301      	adds	r3, #1
 80109f6:	4a2c      	ldr	r2, [pc, #176]	; (8010aa8 <prvAddNewTaskToReadyList+0xc4>)
 80109f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80109fa:	4b2c      	ldr	r3, [pc, #176]	; (8010aac <prvAddNewTaskToReadyList+0xc8>)
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d109      	bne.n	8010a16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010a02:	4a2a      	ldr	r2, [pc, #168]	; (8010aac <prvAddNewTaskToReadyList+0xc8>)
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010a08:	4b27      	ldr	r3, [pc, #156]	; (8010aa8 <prvAddNewTaskToReadyList+0xc4>)
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	2b01      	cmp	r3, #1
 8010a0e:	d110      	bne.n	8010a32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010a10:	f000 fd8e 	bl	8011530 <prvInitialiseTaskLists>
 8010a14:	e00d      	b.n	8010a32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010a16:	4b26      	ldr	r3, [pc, #152]	; (8010ab0 <prvAddNewTaskToReadyList+0xcc>)
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d109      	bne.n	8010a32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010a1e:	4b23      	ldr	r3, [pc, #140]	; (8010aac <prvAddNewTaskToReadyList+0xc8>)
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a28:	429a      	cmp	r2, r3
 8010a2a:	d802      	bhi.n	8010a32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010a2c:	4a1f      	ldr	r2, [pc, #124]	; (8010aac <prvAddNewTaskToReadyList+0xc8>)
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010a32:	4b20      	ldr	r3, [pc, #128]	; (8010ab4 <prvAddNewTaskToReadyList+0xd0>)
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	3301      	adds	r3, #1
 8010a38:	4a1e      	ldr	r2, [pc, #120]	; (8010ab4 <prvAddNewTaskToReadyList+0xd0>)
 8010a3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010a3c:	4b1d      	ldr	r3, [pc, #116]	; (8010ab4 <prvAddNewTaskToReadyList+0xd0>)
 8010a3e:	681a      	ldr	r2, [r3, #0]
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a48:	4b1b      	ldr	r3, [pc, #108]	; (8010ab8 <prvAddNewTaskToReadyList+0xd4>)
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	429a      	cmp	r2, r3
 8010a4e:	d903      	bls.n	8010a58 <prvAddNewTaskToReadyList+0x74>
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a54:	4a18      	ldr	r2, [pc, #96]	; (8010ab8 <prvAddNewTaskToReadyList+0xd4>)
 8010a56:	6013      	str	r3, [r2, #0]
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a5c:	4613      	mov	r3, r2
 8010a5e:	009b      	lsls	r3, r3, #2
 8010a60:	4413      	add	r3, r2
 8010a62:	009b      	lsls	r3, r3, #2
 8010a64:	4a15      	ldr	r2, [pc, #84]	; (8010abc <prvAddNewTaskToReadyList+0xd8>)
 8010a66:	441a      	add	r2, r3
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	3304      	adds	r3, #4
 8010a6c:	4619      	mov	r1, r3
 8010a6e:	4610      	mov	r0, r2
 8010a70:	f7ff f8fd 	bl	800fc6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010a74:	f001 fbb6 	bl	80121e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010a78:	4b0d      	ldr	r3, [pc, #52]	; (8010ab0 <prvAddNewTaskToReadyList+0xcc>)
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d00e      	beq.n	8010a9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010a80:	4b0a      	ldr	r3, [pc, #40]	; (8010aac <prvAddNewTaskToReadyList+0xc8>)
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a8a:	429a      	cmp	r2, r3
 8010a8c:	d207      	bcs.n	8010a9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010a8e:	4b0c      	ldr	r3, [pc, #48]	; (8010ac0 <prvAddNewTaskToReadyList+0xdc>)
 8010a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a94:	601a      	str	r2, [r3, #0]
 8010a96:	f3bf 8f4f 	dsb	sy
 8010a9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010a9e:	bf00      	nop
 8010aa0:	3708      	adds	r7, #8
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	bd80      	pop	{r7, pc}
 8010aa6:	bf00      	nop
 8010aa8:	2000128c 	.word	0x2000128c
 8010aac:	20000db8 	.word	0x20000db8
 8010ab0:	20001298 	.word	0x20001298
 8010ab4:	200012a8 	.word	0x200012a8
 8010ab8:	20001294 	.word	0x20001294
 8010abc:	20000dbc 	.word	0x20000dbc
 8010ac0:	e000ed04 	.word	0xe000ed04

08010ac4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b084      	sub	sp, #16
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8010acc:	f001 fb5a 	bl	8012184 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d102      	bne.n	8010adc <vTaskDelete+0x18>
 8010ad6:	4b2c      	ldr	r3, [pc, #176]	; (8010b88 <vTaskDelete+0xc4>)
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	e000      	b.n	8010ade <vTaskDelete+0x1a>
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	3304      	adds	r3, #4
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f7ff f91f 	bl	800fd28 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d004      	beq.n	8010afc <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	3318      	adds	r3, #24
 8010af6:	4618      	mov	r0, r3
 8010af8:	f7ff f916 	bl	800fd28 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8010afc:	4b23      	ldr	r3, [pc, #140]	; (8010b8c <vTaskDelete+0xc8>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	3301      	adds	r3, #1
 8010b02:	4a22      	ldr	r2, [pc, #136]	; (8010b8c <vTaskDelete+0xc8>)
 8010b04:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8010b06:	4b20      	ldr	r3, [pc, #128]	; (8010b88 <vTaskDelete+0xc4>)
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	68fa      	ldr	r2, [r7, #12]
 8010b0c:	429a      	cmp	r2, r3
 8010b0e:	d10b      	bne.n	8010b28 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	3304      	adds	r3, #4
 8010b14:	4619      	mov	r1, r3
 8010b16:	481e      	ldr	r0, [pc, #120]	; (8010b90 <vTaskDelete+0xcc>)
 8010b18:	f7ff f8a9 	bl	800fc6e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8010b1c:	4b1d      	ldr	r3, [pc, #116]	; (8010b94 <vTaskDelete+0xd0>)
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	3301      	adds	r3, #1
 8010b22:	4a1c      	ldr	r2, [pc, #112]	; (8010b94 <vTaskDelete+0xd0>)
 8010b24:	6013      	str	r3, [r2, #0]
 8010b26:	e009      	b.n	8010b3c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8010b28:	4b1b      	ldr	r3, [pc, #108]	; (8010b98 <vTaskDelete+0xd4>)
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	3b01      	subs	r3, #1
 8010b2e:	4a1a      	ldr	r2, [pc, #104]	; (8010b98 <vTaskDelete+0xd4>)
 8010b30:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8010b32:	68f8      	ldr	r0, [r7, #12]
 8010b34:	f000 fd6a 	bl	801160c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8010b38:	f000 fd9c 	bl	8011674 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8010b3c:	f001 fb52 	bl	80121e4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8010b40:	4b16      	ldr	r3, [pc, #88]	; (8010b9c <vTaskDelete+0xd8>)
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d01b      	beq.n	8010b80 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8010b48:	4b0f      	ldr	r3, [pc, #60]	; (8010b88 <vTaskDelete+0xc4>)
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	68fa      	ldr	r2, [r7, #12]
 8010b4e:	429a      	cmp	r2, r3
 8010b50:	d116      	bne.n	8010b80 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8010b52:	4b13      	ldr	r3, [pc, #76]	; (8010ba0 <vTaskDelete+0xdc>)
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d00a      	beq.n	8010b70 <vTaskDelete+0xac>
	__asm volatile
 8010b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b5e:	f383 8811 	msr	BASEPRI, r3
 8010b62:	f3bf 8f6f 	isb	sy
 8010b66:	f3bf 8f4f 	dsb	sy
 8010b6a:	60bb      	str	r3, [r7, #8]
}
 8010b6c:	bf00      	nop
 8010b6e:	e7fe      	b.n	8010b6e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8010b70:	4b0c      	ldr	r3, [pc, #48]	; (8010ba4 <vTaskDelete+0xe0>)
 8010b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b76:	601a      	str	r2, [r3, #0]
 8010b78:	f3bf 8f4f 	dsb	sy
 8010b7c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010b80:	bf00      	nop
 8010b82:	3710      	adds	r7, #16
 8010b84:	46bd      	mov	sp, r7
 8010b86:	bd80      	pop	{r7, pc}
 8010b88:	20000db8 	.word	0x20000db8
 8010b8c:	200012a8 	.word	0x200012a8
 8010b90:	20001260 	.word	0x20001260
 8010b94:	20001274 	.word	0x20001274
 8010b98:	2000128c 	.word	0x2000128c
 8010b9c:	20001298 	.word	0x20001298
 8010ba0:	200012b4 	.word	0x200012b4
 8010ba4:	e000ed04 	.word	0xe000ed04

08010ba8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b084      	sub	sp, #16
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d017      	beq.n	8010bea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010bba:	4b13      	ldr	r3, [pc, #76]	; (8010c08 <vTaskDelay+0x60>)
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d00a      	beq.n	8010bd8 <vTaskDelay+0x30>
	__asm volatile
 8010bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bc6:	f383 8811 	msr	BASEPRI, r3
 8010bca:	f3bf 8f6f 	isb	sy
 8010bce:	f3bf 8f4f 	dsb	sy
 8010bd2:	60bb      	str	r3, [r7, #8]
}
 8010bd4:	bf00      	nop
 8010bd6:	e7fe      	b.n	8010bd6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010bd8:	f000 f980 	bl	8010edc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010bdc:	2100      	movs	r1, #0
 8010bde:	6878      	ldr	r0, [r7, #4]
 8010be0:	f000 fe04 	bl	80117ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010be4:	f000 f988 	bl	8010ef8 <xTaskResumeAll>
 8010be8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d107      	bne.n	8010c00 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010bf0:	4b06      	ldr	r3, [pc, #24]	; (8010c0c <vTaskDelay+0x64>)
 8010bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bf6:	601a      	str	r2, [r3, #0]
 8010bf8:	f3bf 8f4f 	dsb	sy
 8010bfc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010c00:	bf00      	nop
 8010c02:	3710      	adds	r7, #16
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}
 8010c08:	200012b4 	.word	0x200012b4
 8010c0c:	e000ed04 	.word	0xe000ed04

08010c10 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b088      	sub	sp, #32
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8010c1c:	69bb      	ldr	r3, [r7, #24]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d10a      	bne.n	8010c38 <eTaskGetState+0x28>
	__asm volatile
 8010c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c26:	f383 8811 	msr	BASEPRI, r3
 8010c2a:	f3bf 8f6f 	isb	sy
 8010c2e:	f3bf 8f4f 	dsb	sy
 8010c32:	60bb      	str	r3, [r7, #8]
}
 8010c34:	bf00      	nop
 8010c36:	e7fe      	b.n	8010c36 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8010c38:	4b23      	ldr	r3, [pc, #140]	; (8010cc8 <eTaskGetState+0xb8>)
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	69ba      	ldr	r2, [r7, #24]
 8010c3e:	429a      	cmp	r2, r3
 8010c40:	d102      	bne.n	8010c48 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8010c42:	2300      	movs	r3, #0
 8010c44:	77fb      	strb	r3, [r7, #31]
 8010c46:	e03a      	b.n	8010cbe <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8010c48:	f001 fa9c 	bl	8012184 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8010c4c:	69bb      	ldr	r3, [r7, #24]
 8010c4e:	695b      	ldr	r3, [r3, #20]
 8010c50:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8010c52:	4b1e      	ldr	r3, [pc, #120]	; (8010ccc <eTaskGetState+0xbc>)
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8010c58:	4b1d      	ldr	r3, [pc, #116]	; (8010cd0 <eTaskGetState+0xc0>)
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8010c5e:	f001 fac1 	bl	80121e4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8010c62:	697a      	ldr	r2, [r7, #20]
 8010c64:	693b      	ldr	r3, [r7, #16]
 8010c66:	429a      	cmp	r2, r3
 8010c68:	d003      	beq.n	8010c72 <eTaskGetState+0x62>
 8010c6a:	697a      	ldr	r2, [r7, #20]
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	429a      	cmp	r2, r3
 8010c70:	d102      	bne.n	8010c78 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8010c72:	2302      	movs	r3, #2
 8010c74:	77fb      	strb	r3, [r7, #31]
 8010c76:	e022      	b.n	8010cbe <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8010c78:	697b      	ldr	r3, [r7, #20]
 8010c7a:	4a16      	ldr	r2, [pc, #88]	; (8010cd4 <eTaskGetState+0xc4>)
 8010c7c:	4293      	cmp	r3, r2
 8010c7e:	d112      	bne.n	8010ca6 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8010c80:	69bb      	ldr	r3, [r7, #24]
 8010c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d10b      	bne.n	8010ca0 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8010c88:	69bb      	ldr	r3, [r7, #24]
 8010c8a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8010c8e:	b2db      	uxtb	r3, r3
 8010c90:	2b01      	cmp	r3, #1
 8010c92:	d102      	bne.n	8010c9a <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8010c94:	2302      	movs	r3, #2
 8010c96:	77fb      	strb	r3, [r7, #31]
 8010c98:	e011      	b.n	8010cbe <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8010c9a:	2303      	movs	r3, #3
 8010c9c:	77fb      	strb	r3, [r7, #31]
 8010c9e:	e00e      	b.n	8010cbe <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8010ca0:	2302      	movs	r3, #2
 8010ca2:	77fb      	strb	r3, [r7, #31]
 8010ca4:	e00b      	b.n	8010cbe <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8010ca6:	697b      	ldr	r3, [r7, #20]
 8010ca8:	4a0b      	ldr	r2, [pc, #44]	; (8010cd8 <eTaskGetState+0xc8>)
 8010caa:	4293      	cmp	r3, r2
 8010cac:	d002      	beq.n	8010cb4 <eTaskGetState+0xa4>
 8010cae:	697b      	ldr	r3, [r7, #20]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d102      	bne.n	8010cba <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8010cb4:	2304      	movs	r3, #4
 8010cb6:	77fb      	strb	r3, [r7, #31]
 8010cb8:	e001      	b.n	8010cbe <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8010cba:	2301      	movs	r3, #1
 8010cbc:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8010cbe:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	3720      	adds	r7, #32
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	bd80      	pop	{r7, pc}
 8010cc8:	20000db8 	.word	0x20000db8
 8010ccc:	20001244 	.word	0x20001244
 8010cd0:	20001248 	.word	0x20001248
 8010cd4:	20001278 	.word	0x20001278
 8010cd8:	20001260 	.word	0x20001260

08010cdc <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8010cdc:	b480      	push	{r7}
 8010cde:	b087      	sub	sp, #28
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d10a      	bne.n	8010d08 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8010cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cf6:	f383 8811 	msr	BASEPRI, r3
 8010cfa:	f3bf 8f6f 	isb	sy
 8010cfe:	f3bf 8f4f 	dsb	sy
 8010d02:	60fb      	str	r3, [r7, #12]
}
 8010d04:	bf00      	nop
 8010d06:	e7fe      	b.n	8010d06 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010d08:	693b      	ldr	r3, [r7, #16]
 8010d0a:	695b      	ldr	r3, [r3, #20]
 8010d0c:	4a0a      	ldr	r2, [pc, #40]	; (8010d38 <prvTaskIsTaskSuspended+0x5c>)
 8010d0e:	4293      	cmp	r3, r2
 8010d10:	d10a      	bne.n	8010d28 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8010d12:	693b      	ldr	r3, [r7, #16]
 8010d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d16:	4a09      	ldr	r2, [pc, #36]	; (8010d3c <prvTaskIsTaskSuspended+0x60>)
 8010d18:	4293      	cmp	r3, r2
 8010d1a:	d005      	beq.n	8010d28 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8010d1c:	693b      	ldr	r3, [r7, #16]
 8010d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d101      	bne.n	8010d28 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8010d24:	2301      	movs	r3, #1
 8010d26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010d28:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	371c      	adds	r7, #28
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d34:	4770      	bx	lr
 8010d36:	bf00      	nop
 8010d38:	20001278 	.word	0x20001278
 8010d3c:	2000124c 	.word	0x2000124c

08010d40 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b084      	sub	sp, #16
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d10a      	bne.n	8010d68 <vTaskResume+0x28>
	__asm volatile
 8010d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d56:	f383 8811 	msr	BASEPRI, r3
 8010d5a:	f3bf 8f6f 	isb	sy
 8010d5e:	f3bf 8f4f 	dsb	sy
 8010d62:	60bb      	str	r3, [r7, #8]
}
 8010d64:	bf00      	nop
 8010d66:	e7fe      	b.n	8010d66 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8010d68:	4b20      	ldr	r3, [pc, #128]	; (8010dec <vTaskResume+0xac>)
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	68fa      	ldr	r2, [r7, #12]
 8010d6e:	429a      	cmp	r2, r3
 8010d70:	d038      	beq.n	8010de4 <vTaskResume+0xa4>
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d035      	beq.n	8010de4 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8010d78:	f001 fa04 	bl	8012184 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8010d7c:	68f8      	ldr	r0, [r7, #12]
 8010d7e:	f7ff ffad 	bl	8010cdc <prvTaskIsTaskSuspended>
 8010d82:	4603      	mov	r3, r0
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d02b      	beq.n	8010de0 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	3304      	adds	r3, #4
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	f7fe ffcb 	bl	800fd28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d96:	4b16      	ldr	r3, [pc, #88]	; (8010df0 <vTaskResume+0xb0>)
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	429a      	cmp	r2, r3
 8010d9c:	d903      	bls.n	8010da6 <vTaskResume+0x66>
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010da2:	4a13      	ldr	r2, [pc, #76]	; (8010df0 <vTaskResume+0xb0>)
 8010da4:	6013      	str	r3, [r2, #0]
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010daa:	4613      	mov	r3, r2
 8010dac:	009b      	lsls	r3, r3, #2
 8010dae:	4413      	add	r3, r2
 8010db0:	009b      	lsls	r3, r3, #2
 8010db2:	4a10      	ldr	r2, [pc, #64]	; (8010df4 <vTaskResume+0xb4>)
 8010db4:	441a      	add	r2, r3
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	3304      	adds	r3, #4
 8010dba:	4619      	mov	r1, r3
 8010dbc:	4610      	mov	r0, r2
 8010dbe:	f7fe ff56 	bl	800fc6e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dc6:	4b09      	ldr	r3, [pc, #36]	; (8010dec <vTaskResume+0xac>)
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dcc:	429a      	cmp	r2, r3
 8010dce:	d307      	bcc.n	8010de0 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8010dd0:	4b09      	ldr	r3, [pc, #36]	; (8010df8 <vTaskResume+0xb8>)
 8010dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010dd6:	601a      	str	r2, [r3, #0]
 8010dd8:	f3bf 8f4f 	dsb	sy
 8010ddc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8010de0:	f001 fa00 	bl	80121e4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010de4:	bf00      	nop
 8010de6:	3710      	adds	r7, #16
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}
 8010dec:	20000db8 	.word	0x20000db8
 8010df0:	20001294 	.word	0x20001294
 8010df4:	20000dbc 	.word	0x20000dbc
 8010df8:	e000ed04 	.word	0xe000ed04

08010dfc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b08a      	sub	sp, #40	; 0x28
 8010e00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010e02:	2300      	movs	r3, #0
 8010e04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010e06:	2300      	movs	r3, #0
 8010e08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010e0a:	463a      	mov	r2, r7
 8010e0c:	1d39      	adds	r1, r7, #4
 8010e0e:	f107 0308 	add.w	r3, r7, #8
 8010e12:	4618      	mov	r0, r3
 8010e14:	f7fe feca 	bl	800fbac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010e18:	6839      	ldr	r1, [r7, #0]
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	68ba      	ldr	r2, [r7, #8]
 8010e1e:	9202      	str	r2, [sp, #8]
 8010e20:	9301      	str	r3, [sp, #4]
 8010e22:	2300      	movs	r3, #0
 8010e24:	9300      	str	r3, [sp, #0]
 8010e26:	2300      	movs	r3, #0
 8010e28:	460a      	mov	r2, r1
 8010e2a:	4924      	ldr	r1, [pc, #144]	; (8010ebc <vTaskStartScheduler+0xc0>)
 8010e2c:	4824      	ldr	r0, [pc, #144]	; (8010ec0 <vTaskStartScheduler+0xc4>)
 8010e2e:	f7ff fc91 	bl	8010754 <xTaskCreateStatic>
 8010e32:	4603      	mov	r3, r0
 8010e34:	4a23      	ldr	r2, [pc, #140]	; (8010ec4 <vTaskStartScheduler+0xc8>)
 8010e36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010e38:	4b22      	ldr	r3, [pc, #136]	; (8010ec4 <vTaskStartScheduler+0xc8>)
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d002      	beq.n	8010e46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010e40:	2301      	movs	r3, #1
 8010e42:	617b      	str	r3, [r7, #20]
 8010e44:	e001      	b.n	8010e4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010e46:	2300      	movs	r3, #0
 8010e48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010e4a:	697b      	ldr	r3, [r7, #20]
 8010e4c:	2b01      	cmp	r3, #1
 8010e4e:	d102      	bne.n	8010e56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010e50:	f000 fd20 	bl	8011894 <xTimerCreateTimerTask>
 8010e54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010e56:	697b      	ldr	r3, [r7, #20]
 8010e58:	2b01      	cmp	r3, #1
 8010e5a:	d11b      	bne.n	8010e94 <vTaskStartScheduler+0x98>
	__asm volatile
 8010e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e60:	f383 8811 	msr	BASEPRI, r3
 8010e64:	f3bf 8f6f 	isb	sy
 8010e68:	f3bf 8f4f 	dsb	sy
 8010e6c:	613b      	str	r3, [r7, #16]
}
 8010e6e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010e70:	4b15      	ldr	r3, [pc, #84]	; (8010ec8 <vTaskStartScheduler+0xcc>)
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	3354      	adds	r3, #84	; 0x54
 8010e76:	4a15      	ldr	r2, [pc, #84]	; (8010ecc <vTaskStartScheduler+0xd0>)
 8010e78:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010e7a:	4b15      	ldr	r3, [pc, #84]	; (8010ed0 <vTaskStartScheduler+0xd4>)
 8010e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8010e80:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010e82:	4b14      	ldr	r3, [pc, #80]	; (8010ed4 <vTaskStartScheduler+0xd8>)
 8010e84:	2201      	movs	r2, #1
 8010e86:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010e88:	4b13      	ldr	r3, [pc, #76]	; (8010ed8 <vTaskStartScheduler+0xdc>)
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010e8e:	f001 f8d7 	bl	8012040 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010e92:	e00e      	b.n	8010eb2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010e94:	697b      	ldr	r3, [r7, #20]
 8010e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e9a:	d10a      	bne.n	8010eb2 <vTaskStartScheduler+0xb6>
	__asm volatile
 8010e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ea0:	f383 8811 	msr	BASEPRI, r3
 8010ea4:	f3bf 8f6f 	isb	sy
 8010ea8:	f3bf 8f4f 	dsb	sy
 8010eac:	60fb      	str	r3, [r7, #12]
}
 8010eae:	bf00      	nop
 8010eb0:	e7fe      	b.n	8010eb0 <vTaskStartScheduler+0xb4>
}
 8010eb2:	bf00      	nop
 8010eb4:	3718      	adds	r7, #24
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	bd80      	pop	{r7, pc}
 8010eba:	bf00      	nop
 8010ebc:	0801a7e0 	.word	0x0801a7e0
 8010ec0:	08011501 	.word	0x08011501
 8010ec4:	200012b0 	.word	0x200012b0
 8010ec8:	20000db8 	.word	0x20000db8
 8010ecc:	200000ac 	.word	0x200000ac
 8010ed0:	200012ac 	.word	0x200012ac
 8010ed4:	20001298 	.word	0x20001298
 8010ed8:	20001290 	.word	0x20001290

08010edc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010edc:	b480      	push	{r7}
 8010ede:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010ee0:	4b04      	ldr	r3, [pc, #16]	; (8010ef4 <vTaskSuspendAll+0x18>)
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	3301      	adds	r3, #1
 8010ee6:	4a03      	ldr	r2, [pc, #12]	; (8010ef4 <vTaskSuspendAll+0x18>)
 8010ee8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010eea:	bf00      	nop
 8010eec:	46bd      	mov	sp, r7
 8010eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef2:	4770      	bx	lr
 8010ef4:	200012b4 	.word	0x200012b4

08010ef8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b084      	sub	sp, #16
 8010efc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010efe:	2300      	movs	r3, #0
 8010f00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010f02:	2300      	movs	r3, #0
 8010f04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010f06:	4b42      	ldr	r3, [pc, #264]	; (8011010 <xTaskResumeAll+0x118>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d10a      	bne.n	8010f24 <xTaskResumeAll+0x2c>
	__asm volatile
 8010f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f12:	f383 8811 	msr	BASEPRI, r3
 8010f16:	f3bf 8f6f 	isb	sy
 8010f1a:	f3bf 8f4f 	dsb	sy
 8010f1e:	603b      	str	r3, [r7, #0]
}
 8010f20:	bf00      	nop
 8010f22:	e7fe      	b.n	8010f22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010f24:	f001 f92e 	bl	8012184 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010f28:	4b39      	ldr	r3, [pc, #228]	; (8011010 <xTaskResumeAll+0x118>)
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	3b01      	subs	r3, #1
 8010f2e:	4a38      	ldr	r2, [pc, #224]	; (8011010 <xTaskResumeAll+0x118>)
 8010f30:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010f32:	4b37      	ldr	r3, [pc, #220]	; (8011010 <xTaskResumeAll+0x118>)
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d162      	bne.n	8011000 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010f3a:	4b36      	ldr	r3, [pc, #216]	; (8011014 <xTaskResumeAll+0x11c>)
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d05e      	beq.n	8011000 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010f42:	e02f      	b.n	8010fa4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f44:	4b34      	ldr	r3, [pc, #208]	; (8011018 <xTaskResumeAll+0x120>)
 8010f46:	68db      	ldr	r3, [r3, #12]
 8010f48:	68db      	ldr	r3, [r3, #12]
 8010f4a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	3318      	adds	r3, #24
 8010f50:	4618      	mov	r0, r3
 8010f52:	f7fe fee9 	bl	800fd28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	3304      	adds	r3, #4
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	f7fe fee4 	bl	800fd28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f64:	4b2d      	ldr	r3, [pc, #180]	; (801101c <xTaskResumeAll+0x124>)
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	429a      	cmp	r2, r3
 8010f6a:	d903      	bls.n	8010f74 <xTaskResumeAll+0x7c>
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f70:	4a2a      	ldr	r2, [pc, #168]	; (801101c <xTaskResumeAll+0x124>)
 8010f72:	6013      	str	r3, [r2, #0]
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f78:	4613      	mov	r3, r2
 8010f7a:	009b      	lsls	r3, r3, #2
 8010f7c:	4413      	add	r3, r2
 8010f7e:	009b      	lsls	r3, r3, #2
 8010f80:	4a27      	ldr	r2, [pc, #156]	; (8011020 <xTaskResumeAll+0x128>)
 8010f82:	441a      	add	r2, r3
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	3304      	adds	r3, #4
 8010f88:	4619      	mov	r1, r3
 8010f8a:	4610      	mov	r0, r2
 8010f8c:	f7fe fe6f 	bl	800fc6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f94:	4b23      	ldr	r3, [pc, #140]	; (8011024 <xTaskResumeAll+0x12c>)
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f9a:	429a      	cmp	r2, r3
 8010f9c:	d302      	bcc.n	8010fa4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8010f9e:	4b22      	ldr	r3, [pc, #136]	; (8011028 <xTaskResumeAll+0x130>)
 8010fa0:	2201      	movs	r2, #1
 8010fa2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010fa4:	4b1c      	ldr	r3, [pc, #112]	; (8011018 <xTaskResumeAll+0x120>)
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d1cb      	bne.n	8010f44 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d001      	beq.n	8010fb6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010fb2:	f000 fb5f 	bl	8011674 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010fb6:	4b1d      	ldr	r3, [pc, #116]	; (801102c <xTaskResumeAll+0x134>)
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d010      	beq.n	8010fe4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010fc2:	f000 f847 	bl	8011054 <xTaskIncrementTick>
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d002      	beq.n	8010fd2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010fcc:	4b16      	ldr	r3, [pc, #88]	; (8011028 <xTaskResumeAll+0x130>)
 8010fce:	2201      	movs	r2, #1
 8010fd0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	3b01      	subs	r3, #1
 8010fd6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d1f1      	bne.n	8010fc2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8010fde:	4b13      	ldr	r3, [pc, #76]	; (801102c <xTaskResumeAll+0x134>)
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010fe4:	4b10      	ldr	r3, [pc, #64]	; (8011028 <xTaskResumeAll+0x130>)
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d009      	beq.n	8011000 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010fec:	2301      	movs	r3, #1
 8010fee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010ff0:	4b0f      	ldr	r3, [pc, #60]	; (8011030 <xTaskResumeAll+0x138>)
 8010ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ff6:	601a      	str	r2, [r3, #0]
 8010ff8:	f3bf 8f4f 	dsb	sy
 8010ffc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011000:	f001 f8f0 	bl	80121e4 <vPortExitCritical>

	return xAlreadyYielded;
 8011004:	68bb      	ldr	r3, [r7, #8]
}
 8011006:	4618      	mov	r0, r3
 8011008:	3710      	adds	r7, #16
 801100a:	46bd      	mov	sp, r7
 801100c:	bd80      	pop	{r7, pc}
 801100e:	bf00      	nop
 8011010:	200012b4 	.word	0x200012b4
 8011014:	2000128c 	.word	0x2000128c
 8011018:	2000124c 	.word	0x2000124c
 801101c:	20001294 	.word	0x20001294
 8011020:	20000dbc 	.word	0x20000dbc
 8011024:	20000db8 	.word	0x20000db8
 8011028:	200012a0 	.word	0x200012a0
 801102c:	2000129c 	.word	0x2000129c
 8011030:	e000ed04 	.word	0xe000ed04

08011034 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011034:	b480      	push	{r7}
 8011036:	b083      	sub	sp, #12
 8011038:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801103a:	4b05      	ldr	r3, [pc, #20]	; (8011050 <xTaskGetTickCount+0x1c>)
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011040:	687b      	ldr	r3, [r7, #4]
}
 8011042:	4618      	mov	r0, r3
 8011044:	370c      	adds	r7, #12
 8011046:	46bd      	mov	sp, r7
 8011048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104c:	4770      	bx	lr
 801104e:	bf00      	nop
 8011050:	20001290 	.word	0x20001290

08011054 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011054:	b580      	push	{r7, lr}
 8011056:	b086      	sub	sp, #24
 8011058:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801105a:	2300      	movs	r3, #0
 801105c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801105e:	4b4f      	ldr	r3, [pc, #316]	; (801119c <xTaskIncrementTick+0x148>)
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	2b00      	cmp	r3, #0
 8011064:	f040 808f 	bne.w	8011186 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011068:	4b4d      	ldr	r3, [pc, #308]	; (80111a0 <xTaskIncrementTick+0x14c>)
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	3301      	adds	r3, #1
 801106e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011070:	4a4b      	ldr	r2, [pc, #300]	; (80111a0 <xTaskIncrementTick+0x14c>)
 8011072:	693b      	ldr	r3, [r7, #16]
 8011074:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011076:	693b      	ldr	r3, [r7, #16]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d120      	bne.n	80110be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801107c:	4b49      	ldr	r3, [pc, #292]	; (80111a4 <xTaskIncrementTick+0x150>)
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d00a      	beq.n	801109c <xTaskIncrementTick+0x48>
	__asm volatile
 8011086:	f04f 0350 	mov.w	r3, #80	; 0x50
 801108a:	f383 8811 	msr	BASEPRI, r3
 801108e:	f3bf 8f6f 	isb	sy
 8011092:	f3bf 8f4f 	dsb	sy
 8011096:	603b      	str	r3, [r7, #0]
}
 8011098:	bf00      	nop
 801109a:	e7fe      	b.n	801109a <xTaskIncrementTick+0x46>
 801109c:	4b41      	ldr	r3, [pc, #260]	; (80111a4 <xTaskIncrementTick+0x150>)
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	60fb      	str	r3, [r7, #12]
 80110a2:	4b41      	ldr	r3, [pc, #260]	; (80111a8 <xTaskIncrementTick+0x154>)
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	4a3f      	ldr	r2, [pc, #252]	; (80111a4 <xTaskIncrementTick+0x150>)
 80110a8:	6013      	str	r3, [r2, #0]
 80110aa:	4a3f      	ldr	r2, [pc, #252]	; (80111a8 <xTaskIncrementTick+0x154>)
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	6013      	str	r3, [r2, #0]
 80110b0:	4b3e      	ldr	r3, [pc, #248]	; (80111ac <xTaskIncrementTick+0x158>)
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	3301      	adds	r3, #1
 80110b6:	4a3d      	ldr	r2, [pc, #244]	; (80111ac <xTaskIncrementTick+0x158>)
 80110b8:	6013      	str	r3, [r2, #0]
 80110ba:	f000 fadb 	bl	8011674 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80110be:	4b3c      	ldr	r3, [pc, #240]	; (80111b0 <xTaskIncrementTick+0x15c>)
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	693a      	ldr	r2, [r7, #16]
 80110c4:	429a      	cmp	r2, r3
 80110c6:	d349      	bcc.n	801115c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80110c8:	4b36      	ldr	r3, [pc, #216]	; (80111a4 <xTaskIncrementTick+0x150>)
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d104      	bne.n	80110dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80110d2:	4b37      	ldr	r3, [pc, #220]	; (80111b0 <xTaskIncrementTick+0x15c>)
 80110d4:	f04f 32ff 	mov.w	r2, #4294967295
 80110d8:	601a      	str	r2, [r3, #0]
					break;
 80110da:	e03f      	b.n	801115c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80110dc:	4b31      	ldr	r3, [pc, #196]	; (80111a4 <xTaskIncrementTick+0x150>)
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	68db      	ldr	r3, [r3, #12]
 80110e2:	68db      	ldr	r3, [r3, #12]
 80110e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80110e6:	68bb      	ldr	r3, [r7, #8]
 80110e8:	685b      	ldr	r3, [r3, #4]
 80110ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80110ec:	693a      	ldr	r2, [r7, #16]
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	429a      	cmp	r2, r3
 80110f2:	d203      	bcs.n	80110fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80110f4:	4a2e      	ldr	r2, [pc, #184]	; (80111b0 <xTaskIncrementTick+0x15c>)
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80110fa:	e02f      	b.n	801115c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80110fc:	68bb      	ldr	r3, [r7, #8]
 80110fe:	3304      	adds	r3, #4
 8011100:	4618      	mov	r0, r3
 8011102:	f7fe fe11 	bl	800fd28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011106:	68bb      	ldr	r3, [r7, #8]
 8011108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801110a:	2b00      	cmp	r3, #0
 801110c:	d004      	beq.n	8011118 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801110e:	68bb      	ldr	r3, [r7, #8]
 8011110:	3318      	adds	r3, #24
 8011112:	4618      	mov	r0, r3
 8011114:	f7fe fe08 	bl	800fd28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011118:	68bb      	ldr	r3, [r7, #8]
 801111a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801111c:	4b25      	ldr	r3, [pc, #148]	; (80111b4 <xTaskIncrementTick+0x160>)
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	429a      	cmp	r2, r3
 8011122:	d903      	bls.n	801112c <xTaskIncrementTick+0xd8>
 8011124:	68bb      	ldr	r3, [r7, #8]
 8011126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011128:	4a22      	ldr	r2, [pc, #136]	; (80111b4 <xTaskIncrementTick+0x160>)
 801112a:	6013      	str	r3, [r2, #0]
 801112c:	68bb      	ldr	r3, [r7, #8]
 801112e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011130:	4613      	mov	r3, r2
 8011132:	009b      	lsls	r3, r3, #2
 8011134:	4413      	add	r3, r2
 8011136:	009b      	lsls	r3, r3, #2
 8011138:	4a1f      	ldr	r2, [pc, #124]	; (80111b8 <xTaskIncrementTick+0x164>)
 801113a:	441a      	add	r2, r3
 801113c:	68bb      	ldr	r3, [r7, #8]
 801113e:	3304      	adds	r3, #4
 8011140:	4619      	mov	r1, r3
 8011142:	4610      	mov	r0, r2
 8011144:	f7fe fd93 	bl	800fc6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011148:	68bb      	ldr	r3, [r7, #8]
 801114a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801114c:	4b1b      	ldr	r3, [pc, #108]	; (80111bc <xTaskIncrementTick+0x168>)
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011152:	429a      	cmp	r2, r3
 8011154:	d3b8      	bcc.n	80110c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8011156:	2301      	movs	r3, #1
 8011158:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801115a:	e7b5      	b.n	80110c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801115c:	4b17      	ldr	r3, [pc, #92]	; (80111bc <xTaskIncrementTick+0x168>)
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011162:	4915      	ldr	r1, [pc, #84]	; (80111b8 <xTaskIncrementTick+0x164>)
 8011164:	4613      	mov	r3, r2
 8011166:	009b      	lsls	r3, r3, #2
 8011168:	4413      	add	r3, r2
 801116a:	009b      	lsls	r3, r3, #2
 801116c:	440b      	add	r3, r1
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	2b01      	cmp	r3, #1
 8011172:	d901      	bls.n	8011178 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8011174:	2301      	movs	r3, #1
 8011176:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011178:	4b11      	ldr	r3, [pc, #68]	; (80111c0 <xTaskIncrementTick+0x16c>)
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d007      	beq.n	8011190 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011180:	2301      	movs	r3, #1
 8011182:	617b      	str	r3, [r7, #20]
 8011184:	e004      	b.n	8011190 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011186:	4b0f      	ldr	r3, [pc, #60]	; (80111c4 <xTaskIncrementTick+0x170>)
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	3301      	adds	r3, #1
 801118c:	4a0d      	ldr	r2, [pc, #52]	; (80111c4 <xTaskIncrementTick+0x170>)
 801118e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011190:	697b      	ldr	r3, [r7, #20]
}
 8011192:	4618      	mov	r0, r3
 8011194:	3718      	adds	r7, #24
 8011196:	46bd      	mov	sp, r7
 8011198:	bd80      	pop	{r7, pc}
 801119a:	bf00      	nop
 801119c:	200012b4 	.word	0x200012b4
 80111a0:	20001290 	.word	0x20001290
 80111a4:	20001244 	.word	0x20001244
 80111a8:	20001248 	.word	0x20001248
 80111ac:	200012a4 	.word	0x200012a4
 80111b0:	200012ac 	.word	0x200012ac
 80111b4:	20001294 	.word	0x20001294
 80111b8:	20000dbc 	.word	0x20000dbc
 80111bc:	20000db8 	.word	0x20000db8
 80111c0:	200012a0 	.word	0x200012a0
 80111c4:	2000129c 	.word	0x2000129c

080111c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80111c8:	b480      	push	{r7}
 80111ca:	b085      	sub	sp, #20
 80111cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80111ce:	4b2a      	ldr	r3, [pc, #168]	; (8011278 <vTaskSwitchContext+0xb0>)
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d003      	beq.n	80111de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80111d6:	4b29      	ldr	r3, [pc, #164]	; (801127c <vTaskSwitchContext+0xb4>)
 80111d8:	2201      	movs	r2, #1
 80111da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80111dc:	e046      	b.n	801126c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80111de:	4b27      	ldr	r3, [pc, #156]	; (801127c <vTaskSwitchContext+0xb4>)
 80111e0:	2200      	movs	r2, #0
 80111e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111e4:	4b26      	ldr	r3, [pc, #152]	; (8011280 <vTaskSwitchContext+0xb8>)
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	60fb      	str	r3, [r7, #12]
 80111ea:	e010      	b.n	801120e <vTaskSwitchContext+0x46>
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d10a      	bne.n	8011208 <vTaskSwitchContext+0x40>
	__asm volatile
 80111f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111f6:	f383 8811 	msr	BASEPRI, r3
 80111fa:	f3bf 8f6f 	isb	sy
 80111fe:	f3bf 8f4f 	dsb	sy
 8011202:	607b      	str	r3, [r7, #4]
}
 8011204:	bf00      	nop
 8011206:	e7fe      	b.n	8011206 <vTaskSwitchContext+0x3e>
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	3b01      	subs	r3, #1
 801120c:	60fb      	str	r3, [r7, #12]
 801120e:	491d      	ldr	r1, [pc, #116]	; (8011284 <vTaskSwitchContext+0xbc>)
 8011210:	68fa      	ldr	r2, [r7, #12]
 8011212:	4613      	mov	r3, r2
 8011214:	009b      	lsls	r3, r3, #2
 8011216:	4413      	add	r3, r2
 8011218:	009b      	lsls	r3, r3, #2
 801121a:	440b      	add	r3, r1
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d0e4      	beq.n	80111ec <vTaskSwitchContext+0x24>
 8011222:	68fa      	ldr	r2, [r7, #12]
 8011224:	4613      	mov	r3, r2
 8011226:	009b      	lsls	r3, r3, #2
 8011228:	4413      	add	r3, r2
 801122a:	009b      	lsls	r3, r3, #2
 801122c:	4a15      	ldr	r2, [pc, #84]	; (8011284 <vTaskSwitchContext+0xbc>)
 801122e:	4413      	add	r3, r2
 8011230:	60bb      	str	r3, [r7, #8]
 8011232:	68bb      	ldr	r3, [r7, #8]
 8011234:	685b      	ldr	r3, [r3, #4]
 8011236:	685a      	ldr	r2, [r3, #4]
 8011238:	68bb      	ldr	r3, [r7, #8]
 801123a:	605a      	str	r2, [r3, #4]
 801123c:	68bb      	ldr	r3, [r7, #8]
 801123e:	685a      	ldr	r2, [r3, #4]
 8011240:	68bb      	ldr	r3, [r7, #8]
 8011242:	3308      	adds	r3, #8
 8011244:	429a      	cmp	r2, r3
 8011246:	d104      	bne.n	8011252 <vTaskSwitchContext+0x8a>
 8011248:	68bb      	ldr	r3, [r7, #8]
 801124a:	685b      	ldr	r3, [r3, #4]
 801124c:	685a      	ldr	r2, [r3, #4]
 801124e:	68bb      	ldr	r3, [r7, #8]
 8011250:	605a      	str	r2, [r3, #4]
 8011252:	68bb      	ldr	r3, [r7, #8]
 8011254:	685b      	ldr	r3, [r3, #4]
 8011256:	68db      	ldr	r3, [r3, #12]
 8011258:	4a0b      	ldr	r2, [pc, #44]	; (8011288 <vTaskSwitchContext+0xc0>)
 801125a:	6013      	str	r3, [r2, #0]
 801125c:	4a08      	ldr	r2, [pc, #32]	; (8011280 <vTaskSwitchContext+0xb8>)
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011262:	4b09      	ldr	r3, [pc, #36]	; (8011288 <vTaskSwitchContext+0xc0>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	3354      	adds	r3, #84	; 0x54
 8011268:	4a08      	ldr	r2, [pc, #32]	; (801128c <vTaskSwitchContext+0xc4>)
 801126a:	6013      	str	r3, [r2, #0]
}
 801126c:	bf00      	nop
 801126e:	3714      	adds	r7, #20
 8011270:	46bd      	mov	sp, r7
 8011272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011276:	4770      	bx	lr
 8011278:	200012b4 	.word	0x200012b4
 801127c:	200012a0 	.word	0x200012a0
 8011280:	20001294 	.word	0x20001294
 8011284:	20000dbc 	.word	0x20000dbc
 8011288:	20000db8 	.word	0x20000db8
 801128c:	200000ac 	.word	0x200000ac

08011290 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b084      	sub	sp, #16
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
 8011298:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d10a      	bne.n	80112b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80112a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112a4:	f383 8811 	msr	BASEPRI, r3
 80112a8:	f3bf 8f6f 	isb	sy
 80112ac:	f3bf 8f4f 	dsb	sy
 80112b0:	60fb      	str	r3, [r7, #12]
}
 80112b2:	bf00      	nop
 80112b4:	e7fe      	b.n	80112b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80112b6:	4b07      	ldr	r3, [pc, #28]	; (80112d4 <vTaskPlaceOnEventList+0x44>)
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	3318      	adds	r3, #24
 80112bc:	4619      	mov	r1, r3
 80112be:	6878      	ldr	r0, [r7, #4]
 80112c0:	f7fe fcf9 	bl	800fcb6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80112c4:	2101      	movs	r1, #1
 80112c6:	6838      	ldr	r0, [r7, #0]
 80112c8:	f000 fa90 	bl	80117ec <prvAddCurrentTaskToDelayedList>
}
 80112cc:	bf00      	nop
 80112ce:	3710      	adds	r7, #16
 80112d0:	46bd      	mov	sp, r7
 80112d2:	bd80      	pop	{r7, pc}
 80112d4:	20000db8 	.word	0x20000db8

080112d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80112d8:	b580      	push	{r7, lr}
 80112da:	b086      	sub	sp, #24
 80112dc:	af00      	add	r7, sp, #0
 80112de:	60f8      	str	r0, [r7, #12]
 80112e0:	60b9      	str	r1, [r7, #8]
 80112e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d10a      	bne.n	8011300 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80112ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ee:	f383 8811 	msr	BASEPRI, r3
 80112f2:	f3bf 8f6f 	isb	sy
 80112f6:	f3bf 8f4f 	dsb	sy
 80112fa:	617b      	str	r3, [r7, #20]
}
 80112fc:	bf00      	nop
 80112fe:	e7fe      	b.n	80112fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011300:	4b0a      	ldr	r3, [pc, #40]	; (801132c <vTaskPlaceOnEventListRestricted+0x54>)
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	3318      	adds	r3, #24
 8011306:	4619      	mov	r1, r3
 8011308:	68f8      	ldr	r0, [r7, #12]
 801130a:	f7fe fcb0 	bl	800fc6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d002      	beq.n	801131a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8011314:	f04f 33ff 	mov.w	r3, #4294967295
 8011318:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801131a:	6879      	ldr	r1, [r7, #4]
 801131c:	68b8      	ldr	r0, [r7, #8]
 801131e:	f000 fa65 	bl	80117ec <prvAddCurrentTaskToDelayedList>
	}
 8011322:	bf00      	nop
 8011324:	3718      	adds	r7, #24
 8011326:	46bd      	mov	sp, r7
 8011328:	bd80      	pop	{r7, pc}
 801132a:	bf00      	nop
 801132c:	20000db8 	.word	0x20000db8

08011330 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011330:	b580      	push	{r7, lr}
 8011332:	b086      	sub	sp, #24
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	68db      	ldr	r3, [r3, #12]
 801133c:	68db      	ldr	r3, [r3, #12]
 801133e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011340:	693b      	ldr	r3, [r7, #16]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d10a      	bne.n	801135c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011346:	f04f 0350 	mov.w	r3, #80	; 0x50
 801134a:	f383 8811 	msr	BASEPRI, r3
 801134e:	f3bf 8f6f 	isb	sy
 8011352:	f3bf 8f4f 	dsb	sy
 8011356:	60fb      	str	r3, [r7, #12]
}
 8011358:	bf00      	nop
 801135a:	e7fe      	b.n	801135a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801135c:	693b      	ldr	r3, [r7, #16]
 801135e:	3318      	adds	r3, #24
 8011360:	4618      	mov	r0, r3
 8011362:	f7fe fce1 	bl	800fd28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011366:	4b1e      	ldr	r3, [pc, #120]	; (80113e0 <xTaskRemoveFromEventList+0xb0>)
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d11d      	bne.n	80113aa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801136e:	693b      	ldr	r3, [r7, #16]
 8011370:	3304      	adds	r3, #4
 8011372:	4618      	mov	r0, r3
 8011374:	f7fe fcd8 	bl	800fd28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011378:	693b      	ldr	r3, [r7, #16]
 801137a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801137c:	4b19      	ldr	r3, [pc, #100]	; (80113e4 <xTaskRemoveFromEventList+0xb4>)
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	429a      	cmp	r2, r3
 8011382:	d903      	bls.n	801138c <xTaskRemoveFromEventList+0x5c>
 8011384:	693b      	ldr	r3, [r7, #16]
 8011386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011388:	4a16      	ldr	r2, [pc, #88]	; (80113e4 <xTaskRemoveFromEventList+0xb4>)
 801138a:	6013      	str	r3, [r2, #0]
 801138c:	693b      	ldr	r3, [r7, #16]
 801138e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011390:	4613      	mov	r3, r2
 8011392:	009b      	lsls	r3, r3, #2
 8011394:	4413      	add	r3, r2
 8011396:	009b      	lsls	r3, r3, #2
 8011398:	4a13      	ldr	r2, [pc, #76]	; (80113e8 <xTaskRemoveFromEventList+0xb8>)
 801139a:	441a      	add	r2, r3
 801139c:	693b      	ldr	r3, [r7, #16]
 801139e:	3304      	adds	r3, #4
 80113a0:	4619      	mov	r1, r3
 80113a2:	4610      	mov	r0, r2
 80113a4:	f7fe fc63 	bl	800fc6e <vListInsertEnd>
 80113a8:	e005      	b.n	80113b6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80113aa:	693b      	ldr	r3, [r7, #16]
 80113ac:	3318      	adds	r3, #24
 80113ae:	4619      	mov	r1, r3
 80113b0:	480e      	ldr	r0, [pc, #56]	; (80113ec <xTaskRemoveFromEventList+0xbc>)
 80113b2:	f7fe fc5c 	bl	800fc6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80113b6:	693b      	ldr	r3, [r7, #16]
 80113b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113ba:	4b0d      	ldr	r3, [pc, #52]	; (80113f0 <xTaskRemoveFromEventList+0xc0>)
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113c0:	429a      	cmp	r2, r3
 80113c2:	d905      	bls.n	80113d0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80113c4:	2301      	movs	r3, #1
 80113c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80113c8:	4b0a      	ldr	r3, [pc, #40]	; (80113f4 <xTaskRemoveFromEventList+0xc4>)
 80113ca:	2201      	movs	r2, #1
 80113cc:	601a      	str	r2, [r3, #0]
 80113ce:	e001      	b.n	80113d4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80113d0:	2300      	movs	r3, #0
 80113d2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80113d4:	697b      	ldr	r3, [r7, #20]
}
 80113d6:	4618      	mov	r0, r3
 80113d8:	3718      	adds	r7, #24
 80113da:	46bd      	mov	sp, r7
 80113dc:	bd80      	pop	{r7, pc}
 80113de:	bf00      	nop
 80113e0:	200012b4 	.word	0x200012b4
 80113e4:	20001294 	.word	0x20001294
 80113e8:	20000dbc 	.word	0x20000dbc
 80113ec:	2000124c 	.word	0x2000124c
 80113f0:	20000db8 	.word	0x20000db8
 80113f4:	200012a0 	.word	0x200012a0

080113f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80113f8:	b480      	push	{r7}
 80113fa:	b083      	sub	sp, #12
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011400:	4b06      	ldr	r3, [pc, #24]	; (801141c <vTaskInternalSetTimeOutState+0x24>)
 8011402:	681a      	ldr	r2, [r3, #0]
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011408:	4b05      	ldr	r3, [pc, #20]	; (8011420 <vTaskInternalSetTimeOutState+0x28>)
 801140a:	681a      	ldr	r2, [r3, #0]
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	605a      	str	r2, [r3, #4]
}
 8011410:	bf00      	nop
 8011412:	370c      	adds	r7, #12
 8011414:	46bd      	mov	sp, r7
 8011416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141a:	4770      	bx	lr
 801141c:	200012a4 	.word	0x200012a4
 8011420:	20001290 	.word	0x20001290

08011424 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011424:	b580      	push	{r7, lr}
 8011426:	b088      	sub	sp, #32
 8011428:	af00      	add	r7, sp, #0
 801142a:	6078      	str	r0, [r7, #4]
 801142c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d10a      	bne.n	801144a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011438:	f383 8811 	msr	BASEPRI, r3
 801143c:	f3bf 8f6f 	isb	sy
 8011440:	f3bf 8f4f 	dsb	sy
 8011444:	613b      	str	r3, [r7, #16]
}
 8011446:	bf00      	nop
 8011448:	e7fe      	b.n	8011448 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801144a:	683b      	ldr	r3, [r7, #0]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d10a      	bne.n	8011466 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011454:	f383 8811 	msr	BASEPRI, r3
 8011458:	f3bf 8f6f 	isb	sy
 801145c:	f3bf 8f4f 	dsb	sy
 8011460:	60fb      	str	r3, [r7, #12]
}
 8011462:	bf00      	nop
 8011464:	e7fe      	b.n	8011464 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011466:	f000 fe8d 	bl	8012184 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801146a:	4b1d      	ldr	r3, [pc, #116]	; (80114e0 <xTaskCheckForTimeOut+0xbc>)
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	685b      	ldr	r3, [r3, #4]
 8011474:	69ba      	ldr	r2, [r7, #24]
 8011476:	1ad3      	subs	r3, r2, r3
 8011478:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801147a:	683b      	ldr	r3, [r7, #0]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011482:	d102      	bne.n	801148a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011484:	2300      	movs	r3, #0
 8011486:	61fb      	str	r3, [r7, #28]
 8011488:	e023      	b.n	80114d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	681a      	ldr	r2, [r3, #0]
 801148e:	4b15      	ldr	r3, [pc, #84]	; (80114e4 <xTaskCheckForTimeOut+0xc0>)
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	429a      	cmp	r2, r3
 8011494:	d007      	beq.n	80114a6 <xTaskCheckForTimeOut+0x82>
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	685b      	ldr	r3, [r3, #4]
 801149a:	69ba      	ldr	r2, [r7, #24]
 801149c:	429a      	cmp	r2, r3
 801149e:	d302      	bcc.n	80114a6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80114a0:	2301      	movs	r3, #1
 80114a2:	61fb      	str	r3, [r7, #28]
 80114a4:	e015      	b.n	80114d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	697a      	ldr	r2, [r7, #20]
 80114ac:	429a      	cmp	r2, r3
 80114ae:	d20b      	bcs.n	80114c8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80114b0:	683b      	ldr	r3, [r7, #0]
 80114b2:	681a      	ldr	r2, [r3, #0]
 80114b4:	697b      	ldr	r3, [r7, #20]
 80114b6:	1ad2      	subs	r2, r2, r3
 80114b8:	683b      	ldr	r3, [r7, #0]
 80114ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80114bc:	6878      	ldr	r0, [r7, #4]
 80114be:	f7ff ff9b 	bl	80113f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80114c2:	2300      	movs	r3, #0
 80114c4:	61fb      	str	r3, [r7, #28]
 80114c6:	e004      	b.n	80114d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80114c8:	683b      	ldr	r3, [r7, #0]
 80114ca:	2200      	movs	r2, #0
 80114cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80114ce:	2301      	movs	r3, #1
 80114d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80114d2:	f000 fe87 	bl	80121e4 <vPortExitCritical>

	return xReturn;
 80114d6:	69fb      	ldr	r3, [r7, #28]
}
 80114d8:	4618      	mov	r0, r3
 80114da:	3720      	adds	r7, #32
 80114dc:	46bd      	mov	sp, r7
 80114de:	bd80      	pop	{r7, pc}
 80114e0:	20001290 	.word	0x20001290
 80114e4:	200012a4 	.word	0x200012a4

080114e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80114e8:	b480      	push	{r7}
 80114ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80114ec:	4b03      	ldr	r3, [pc, #12]	; (80114fc <vTaskMissedYield+0x14>)
 80114ee:	2201      	movs	r2, #1
 80114f0:	601a      	str	r2, [r3, #0]
}
 80114f2:	bf00      	nop
 80114f4:	46bd      	mov	sp, r7
 80114f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114fa:	4770      	bx	lr
 80114fc:	200012a0 	.word	0x200012a0

08011500 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011500:	b580      	push	{r7, lr}
 8011502:	b082      	sub	sp, #8
 8011504:	af00      	add	r7, sp, #0
 8011506:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011508:	f000 f852 	bl	80115b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801150c:	4b06      	ldr	r3, [pc, #24]	; (8011528 <prvIdleTask+0x28>)
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	2b01      	cmp	r3, #1
 8011512:	d9f9      	bls.n	8011508 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011514:	4b05      	ldr	r3, [pc, #20]	; (801152c <prvIdleTask+0x2c>)
 8011516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801151a:	601a      	str	r2, [r3, #0]
 801151c:	f3bf 8f4f 	dsb	sy
 8011520:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011524:	e7f0      	b.n	8011508 <prvIdleTask+0x8>
 8011526:	bf00      	nop
 8011528:	20000dbc 	.word	0x20000dbc
 801152c:	e000ed04 	.word	0xe000ed04

08011530 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011530:	b580      	push	{r7, lr}
 8011532:	b082      	sub	sp, #8
 8011534:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011536:	2300      	movs	r3, #0
 8011538:	607b      	str	r3, [r7, #4]
 801153a:	e00c      	b.n	8011556 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801153c:	687a      	ldr	r2, [r7, #4]
 801153e:	4613      	mov	r3, r2
 8011540:	009b      	lsls	r3, r3, #2
 8011542:	4413      	add	r3, r2
 8011544:	009b      	lsls	r3, r3, #2
 8011546:	4a12      	ldr	r2, [pc, #72]	; (8011590 <prvInitialiseTaskLists+0x60>)
 8011548:	4413      	add	r3, r2
 801154a:	4618      	mov	r0, r3
 801154c:	f7fe fb62 	bl	800fc14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	3301      	adds	r3, #1
 8011554:	607b      	str	r3, [r7, #4]
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	2b37      	cmp	r3, #55	; 0x37
 801155a:	d9ef      	bls.n	801153c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801155c:	480d      	ldr	r0, [pc, #52]	; (8011594 <prvInitialiseTaskLists+0x64>)
 801155e:	f7fe fb59 	bl	800fc14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011562:	480d      	ldr	r0, [pc, #52]	; (8011598 <prvInitialiseTaskLists+0x68>)
 8011564:	f7fe fb56 	bl	800fc14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011568:	480c      	ldr	r0, [pc, #48]	; (801159c <prvInitialiseTaskLists+0x6c>)
 801156a:	f7fe fb53 	bl	800fc14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801156e:	480c      	ldr	r0, [pc, #48]	; (80115a0 <prvInitialiseTaskLists+0x70>)
 8011570:	f7fe fb50 	bl	800fc14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011574:	480b      	ldr	r0, [pc, #44]	; (80115a4 <prvInitialiseTaskLists+0x74>)
 8011576:	f7fe fb4d 	bl	800fc14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801157a:	4b0b      	ldr	r3, [pc, #44]	; (80115a8 <prvInitialiseTaskLists+0x78>)
 801157c:	4a05      	ldr	r2, [pc, #20]	; (8011594 <prvInitialiseTaskLists+0x64>)
 801157e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011580:	4b0a      	ldr	r3, [pc, #40]	; (80115ac <prvInitialiseTaskLists+0x7c>)
 8011582:	4a05      	ldr	r2, [pc, #20]	; (8011598 <prvInitialiseTaskLists+0x68>)
 8011584:	601a      	str	r2, [r3, #0]
}
 8011586:	bf00      	nop
 8011588:	3708      	adds	r7, #8
 801158a:	46bd      	mov	sp, r7
 801158c:	bd80      	pop	{r7, pc}
 801158e:	bf00      	nop
 8011590:	20000dbc 	.word	0x20000dbc
 8011594:	2000121c 	.word	0x2000121c
 8011598:	20001230 	.word	0x20001230
 801159c:	2000124c 	.word	0x2000124c
 80115a0:	20001260 	.word	0x20001260
 80115a4:	20001278 	.word	0x20001278
 80115a8:	20001244 	.word	0x20001244
 80115ac:	20001248 	.word	0x20001248

080115b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80115b0:	b580      	push	{r7, lr}
 80115b2:	b082      	sub	sp, #8
 80115b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80115b6:	e019      	b.n	80115ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80115b8:	f000 fde4 	bl	8012184 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80115bc:	4b10      	ldr	r3, [pc, #64]	; (8011600 <prvCheckTasksWaitingTermination+0x50>)
 80115be:	68db      	ldr	r3, [r3, #12]
 80115c0:	68db      	ldr	r3, [r3, #12]
 80115c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	3304      	adds	r3, #4
 80115c8:	4618      	mov	r0, r3
 80115ca:	f7fe fbad 	bl	800fd28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80115ce:	4b0d      	ldr	r3, [pc, #52]	; (8011604 <prvCheckTasksWaitingTermination+0x54>)
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	3b01      	subs	r3, #1
 80115d4:	4a0b      	ldr	r2, [pc, #44]	; (8011604 <prvCheckTasksWaitingTermination+0x54>)
 80115d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80115d8:	4b0b      	ldr	r3, [pc, #44]	; (8011608 <prvCheckTasksWaitingTermination+0x58>)
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	3b01      	subs	r3, #1
 80115de:	4a0a      	ldr	r2, [pc, #40]	; (8011608 <prvCheckTasksWaitingTermination+0x58>)
 80115e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80115e2:	f000 fdff 	bl	80121e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80115e6:	6878      	ldr	r0, [r7, #4]
 80115e8:	f000 f810 	bl	801160c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80115ec:	4b06      	ldr	r3, [pc, #24]	; (8011608 <prvCheckTasksWaitingTermination+0x58>)
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d1e1      	bne.n	80115b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80115f4:	bf00      	nop
 80115f6:	bf00      	nop
 80115f8:	3708      	adds	r7, #8
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd80      	pop	{r7, pc}
 80115fe:	bf00      	nop
 8011600:	20001260 	.word	0x20001260
 8011604:	2000128c 	.word	0x2000128c
 8011608:	20001274 	.word	0x20001274

0801160c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801160c:	b580      	push	{r7, lr}
 801160e:	b084      	sub	sp, #16
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	3354      	adds	r3, #84	; 0x54
 8011618:	4618      	mov	r0, r3
 801161a:	f002 fdc9 	bl	80141b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011624:	2b00      	cmp	r3, #0
 8011626:	d108      	bne.n	801163a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801162c:	4618      	mov	r0, r3
 801162e:	f000 ff97 	bl	8012560 <vPortFree>
				vPortFree( pxTCB );
 8011632:	6878      	ldr	r0, [r7, #4]
 8011634:	f000 ff94 	bl	8012560 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011638:	e018      	b.n	801166c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011640:	2b01      	cmp	r3, #1
 8011642:	d103      	bne.n	801164c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011644:	6878      	ldr	r0, [r7, #4]
 8011646:	f000 ff8b 	bl	8012560 <vPortFree>
	}
 801164a:	e00f      	b.n	801166c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011652:	2b02      	cmp	r3, #2
 8011654:	d00a      	beq.n	801166c <prvDeleteTCB+0x60>
	__asm volatile
 8011656:	f04f 0350 	mov.w	r3, #80	; 0x50
 801165a:	f383 8811 	msr	BASEPRI, r3
 801165e:	f3bf 8f6f 	isb	sy
 8011662:	f3bf 8f4f 	dsb	sy
 8011666:	60fb      	str	r3, [r7, #12]
}
 8011668:	bf00      	nop
 801166a:	e7fe      	b.n	801166a <prvDeleteTCB+0x5e>
	}
 801166c:	bf00      	nop
 801166e:	3710      	adds	r7, #16
 8011670:	46bd      	mov	sp, r7
 8011672:	bd80      	pop	{r7, pc}

08011674 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011674:	b480      	push	{r7}
 8011676:	b083      	sub	sp, #12
 8011678:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801167a:	4b0c      	ldr	r3, [pc, #48]	; (80116ac <prvResetNextTaskUnblockTime+0x38>)
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d104      	bne.n	801168e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011684:	4b0a      	ldr	r3, [pc, #40]	; (80116b0 <prvResetNextTaskUnblockTime+0x3c>)
 8011686:	f04f 32ff 	mov.w	r2, #4294967295
 801168a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801168c:	e008      	b.n	80116a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801168e:	4b07      	ldr	r3, [pc, #28]	; (80116ac <prvResetNextTaskUnblockTime+0x38>)
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	68db      	ldr	r3, [r3, #12]
 8011694:	68db      	ldr	r3, [r3, #12]
 8011696:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	685b      	ldr	r3, [r3, #4]
 801169c:	4a04      	ldr	r2, [pc, #16]	; (80116b0 <prvResetNextTaskUnblockTime+0x3c>)
 801169e:	6013      	str	r3, [r2, #0]
}
 80116a0:	bf00      	nop
 80116a2:	370c      	adds	r7, #12
 80116a4:	46bd      	mov	sp, r7
 80116a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116aa:	4770      	bx	lr
 80116ac:	20001244 	.word	0x20001244
 80116b0:	200012ac 	.word	0x200012ac

080116b4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80116b4:	b480      	push	{r7}
 80116b6:	b083      	sub	sp, #12
 80116b8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80116ba:	4b05      	ldr	r3, [pc, #20]	; (80116d0 <xTaskGetCurrentTaskHandle+0x1c>)
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	607b      	str	r3, [r7, #4]

		return xReturn;
 80116c0:	687b      	ldr	r3, [r7, #4]
	}
 80116c2:	4618      	mov	r0, r3
 80116c4:	370c      	adds	r7, #12
 80116c6:	46bd      	mov	sp, r7
 80116c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116cc:	4770      	bx	lr
 80116ce:	bf00      	nop
 80116d0:	20000db8 	.word	0x20000db8

080116d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80116d4:	b480      	push	{r7}
 80116d6:	b083      	sub	sp, #12
 80116d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80116da:	4b0b      	ldr	r3, [pc, #44]	; (8011708 <xTaskGetSchedulerState+0x34>)
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d102      	bne.n	80116e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80116e2:	2301      	movs	r3, #1
 80116e4:	607b      	str	r3, [r7, #4]
 80116e6:	e008      	b.n	80116fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80116e8:	4b08      	ldr	r3, [pc, #32]	; (801170c <xTaskGetSchedulerState+0x38>)
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d102      	bne.n	80116f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80116f0:	2302      	movs	r3, #2
 80116f2:	607b      	str	r3, [r7, #4]
 80116f4:	e001      	b.n	80116fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80116f6:	2300      	movs	r3, #0
 80116f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80116fa:	687b      	ldr	r3, [r7, #4]
	}
 80116fc:	4618      	mov	r0, r3
 80116fe:	370c      	adds	r7, #12
 8011700:	46bd      	mov	sp, r7
 8011702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011706:	4770      	bx	lr
 8011708:	20001298 	.word	0x20001298
 801170c:	200012b4 	.word	0x200012b4

08011710 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011710:	b580      	push	{r7, lr}
 8011712:	b086      	sub	sp, #24
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801171c:	2300      	movs	r3, #0
 801171e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d056      	beq.n	80117d4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011726:	4b2e      	ldr	r3, [pc, #184]	; (80117e0 <xTaskPriorityDisinherit+0xd0>)
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	693a      	ldr	r2, [r7, #16]
 801172c:	429a      	cmp	r2, r3
 801172e:	d00a      	beq.n	8011746 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011734:	f383 8811 	msr	BASEPRI, r3
 8011738:	f3bf 8f6f 	isb	sy
 801173c:	f3bf 8f4f 	dsb	sy
 8011740:	60fb      	str	r3, [r7, #12]
}
 8011742:	bf00      	nop
 8011744:	e7fe      	b.n	8011744 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011746:	693b      	ldr	r3, [r7, #16]
 8011748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801174a:	2b00      	cmp	r3, #0
 801174c:	d10a      	bne.n	8011764 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801174e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011752:	f383 8811 	msr	BASEPRI, r3
 8011756:	f3bf 8f6f 	isb	sy
 801175a:	f3bf 8f4f 	dsb	sy
 801175e:	60bb      	str	r3, [r7, #8]
}
 8011760:	bf00      	nop
 8011762:	e7fe      	b.n	8011762 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011764:	693b      	ldr	r3, [r7, #16]
 8011766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011768:	1e5a      	subs	r2, r3, #1
 801176a:	693b      	ldr	r3, [r7, #16]
 801176c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801176e:	693b      	ldr	r3, [r7, #16]
 8011770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011772:	693b      	ldr	r3, [r7, #16]
 8011774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011776:	429a      	cmp	r2, r3
 8011778:	d02c      	beq.n	80117d4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801177a:	693b      	ldr	r3, [r7, #16]
 801177c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801177e:	2b00      	cmp	r3, #0
 8011780:	d128      	bne.n	80117d4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011782:	693b      	ldr	r3, [r7, #16]
 8011784:	3304      	adds	r3, #4
 8011786:	4618      	mov	r0, r3
 8011788:	f7fe face 	bl	800fd28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801178c:	693b      	ldr	r3, [r7, #16]
 801178e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011790:	693b      	ldr	r3, [r7, #16]
 8011792:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011794:	693b      	ldr	r3, [r7, #16]
 8011796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011798:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801179c:	693b      	ldr	r3, [r7, #16]
 801179e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80117a0:	693b      	ldr	r3, [r7, #16]
 80117a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117a4:	4b0f      	ldr	r3, [pc, #60]	; (80117e4 <xTaskPriorityDisinherit+0xd4>)
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	429a      	cmp	r2, r3
 80117aa:	d903      	bls.n	80117b4 <xTaskPriorityDisinherit+0xa4>
 80117ac:	693b      	ldr	r3, [r7, #16]
 80117ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117b0:	4a0c      	ldr	r2, [pc, #48]	; (80117e4 <xTaskPriorityDisinherit+0xd4>)
 80117b2:	6013      	str	r3, [r2, #0]
 80117b4:	693b      	ldr	r3, [r7, #16]
 80117b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117b8:	4613      	mov	r3, r2
 80117ba:	009b      	lsls	r3, r3, #2
 80117bc:	4413      	add	r3, r2
 80117be:	009b      	lsls	r3, r3, #2
 80117c0:	4a09      	ldr	r2, [pc, #36]	; (80117e8 <xTaskPriorityDisinherit+0xd8>)
 80117c2:	441a      	add	r2, r3
 80117c4:	693b      	ldr	r3, [r7, #16]
 80117c6:	3304      	adds	r3, #4
 80117c8:	4619      	mov	r1, r3
 80117ca:	4610      	mov	r0, r2
 80117cc:	f7fe fa4f 	bl	800fc6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80117d0:	2301      	movs	r3, #1
 80117d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80117d4:	697b      	ldr	r3, [r7, #20]
	}
 80117d6:	4618      	mov	r0, r3
 80117d8:	3718      	adds	r7, #24
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd80      	pop	{r7, pc}
 80117de:	bf00      	nop
 80117e0:	20000db8 	.word	0x20000db8
 80117e4:	20001294 	.word	0x20001294
 80117e8:	20000dbc 	.word	0x20000dbc

080117ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80117ec:	b580      	push	{r7, lr}
 80117ee:	b084      	sub	sp, #16
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	6078      	str	r0, [r7, #4]
 80117f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80117f6:	4b21      	ldr	r3, [pc, #132]	; (801187c <prvAddCurrentTaskToDelayedList+0x90>)
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80117fc:	4b20      	ldr	r3, [pc, #128]	; (8011880 <prvAddCurrentTaskToDelayedList+0x94>)
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	3304      	adds	r3, #4
 8011802:	4618      	mov	r0, r3
 8011804:	f7fe fa90 	bl	800fd28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801180e:	d10a      	bne.n	8011826 <prvAddCurrentTaskToDelayedList+0x3a>
 8011810:	683b      	ldr	r3, [r7, #0]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d007      	beq.n	8011826 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011816:	4b1a      	ldr	r3, [pc, #104]	; (8011880 <prvAddCurrentTaskToDelayedList+0x94>)
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	3304      	adds	r3, #4
 801181c:	4619      	mov	r1, r3
 801181e:	4819      	ldr	r0, [pc, #100]	; (8011884 <prvAddCurrentTaskToDelayedList+0x98>)
 8011820:	f7fe fa25 	bl	800fc6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011824:	e026      	b.n	8011874 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011826:	68fa      	ldr	r2, [r7, #12]
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	4413      	add	r3, r2
 801182c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801182e:	4b14      	ldr	r3, [pc, #80]	; (8011880 <prvAddCurrentTaskToDelayedList+0x94>)
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	68ba      	ldr	r2, [r7, #8]
 8011834:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011836:	68ba      	ldr	r2, [r7, #8]
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	429a      	cmp	r2, r3
 801183c:	d209      	bcs.n	8011852 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801183e:	4b12      	ldr	r3, [pc, #72]	; (8011888 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011840:	681a      	ldr	r2, [r3, #0]
 8011842:	4b0f      	ldr	r3, [pc, #60]	; (8011880 <prvAddCurrentTaskToDelayedList+0x94>)
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	3304      	adds	r3, #4
 8011848:	4619      	mov	r1, r3
 801184a:	4610      	mov	r0, r2
 801184c:	f7fe fa33 	bl	800fcb6 <vListInsert>
}
 8011850:	e010      	b.n	8011874 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011852:	4b0e      	ldr	r3, [pc, #56]	; (801188c <prvAddCurrentTaskToDelayedList+0xa0>)
 8011854:	681a      	ldr	r2, [r3, #0]
 8011856:	4b0a      	ldr	r3, [pc, #40]	; (8011880 <prvAddCurrentTaskToDelayedList+0x94>)
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	3304      	adds	r3, #4
 801185c:	4619      	mov	r1, r3
 801185e:	4610      	mov	r0, r2
 8011860:	f7fe fa29 	bl	800fcb6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011864:	4b0a      	ldr	r3, [pc, #40]	; (8011890 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	68ba      	ldr	r2, [r7, #8]
 801186a:	429a      	cmp	r2, r3
 801186c:	d202      	bcs.n	8011874 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801186e:	4a08      	ldr	r2, [pc, #32]	; (8011890 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011870:	68bb      	ldr	r3, [r7, #8]
 8011872:	6013      	str	r3, [r2, #0]
}
 8011874:	bf00      	nop
 8011876:	3710      	adds	r7, #16
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}
 801187c:	20001290 	.word	0x20001290
 8011880:	20000db8 	.word	0x20000db8
 8011884:	20001278 	.word	0x20001278
 8011888:	20001248 	.word	0x20001248
 801188c:	20001244 	.word	0x20001244
 8011890:	200012ac 	.word	0x200012ac

08011894 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011894:	b580      	push	{r7, lr}
 8011896:	b08a      	sub	sp, #40	; 0x28
 8011898:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801189a:	2300      	movs	r3, #0
 801189c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801189e:	f000 fb07 	bl	8011eb0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80118a2:	4b1c      	ldr	r3, [pc, #112]	; (8011914 <xTimerCreateTimerTask+0x80>)
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d021      	beq.n	80118ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80118aa:	2300      	movs	r3, #0
 80118ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80118ae:	2300      	movs	r3, #0
 80118b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80118b2:	1d3a      	adds	r2, r7, #4
 80118b4:	f107 0108 	add.w	r1, r7, #8
 80118b8:	f107 030c 	add.w	r3, r7, #12
 80118bc:	4618      	mov	r0, r3
 80118be:	f7fe f98f 	bl	800fbe0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80118c2:	6879      	ldr	r1, [r7, #4]
 80118c4:	68bb      	ldr	r3, [r7, #8]
 80118c6:	68fa      	ldr	r2, [r7, #12]
 80118c8:	9202      	str	r2, [sp, #8]
 80118ca:	9301      	str	r3, [sp, #4]
 80118cc:	2302      	movs	r3, #2
 80118ce:	9300      	str	r3, [sp, #0]
 80118d0:	2300      	movs	r3, #0
 80118d2:	460a      	mov	r2, r1
 80118d4:	4910      	ldr	r1, [pc, #64]	; (8011918 <xTimerCreateTimerTask+0x84>)
 80118d6:	4811      	ldr	r0, [pc, #68]	; (801191c <xTimerCreateTimerTask+0x88>)
 80118d8:	f7fe ff3c 	bl	8010754 <xTaskCreateStatic>
 80118dc:	4603      	mov	r3, r0
 80118de:	4a10      	ldr	r2, [pc, #64]	; (8011920 <xTimerCreateTimerTask+0x8c>)
 80118e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80118e2:	4b0f      	ldr	r3, [pc, #60]	; (8011920 <xTimerCreateTimerTask+0x8c>)
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d001      	beq.n	80118ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80118ea:	2301      	movs	r3, #1
 80118ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80118ee:	697b      	ldr	r3, [r7, #20]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d10a      	bne.n	801190a <xTimerCreateTimerTask+0x76>
	__asm volatile
 80118f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118f8:	f383 8811 	msr	BASEPRI, r3
 80118fc:	f3bf 8f6f 	isb	sy
 8011900:	f3bf 8f4f 	dsb	sy
 8011904:	613b      	str	r3, [r7, #16]
}
 8011906:	bf00      	nop
 8011908:	e7fe      	b.n	8011908 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801190a:	697b      	ldr	r3, [r7, #20]
}
 801190c:	4618      	mov	r0, r3
 801190e:	3718      	adds	r7, #24
 8011910:	46bd      	mov	sp, r7
 8011912:	bd80      	pop	{r7, pc}
 8011914:	200012e8 	.word	0x200012e8
 8011918:	0801a7e8 	.word	0x0801a7e8
 801191c:	08011a59 	.word	0x08011a59
 8011920:	200012ec 	.word	0x200012ec

08011924 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b08a      	sub	sp, #40	; 0x28
 8011928:	af00      	add	r7, sp, #0
 801192a:	60f8      	str	r0, [r7, #12]
 801192c:	60b9      	str	r1, [r7, #8]
 801192e:	607a      	str	r2, [r7, #4]
 8011930:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011932:	2300      	movs	r3, #0
 8011934:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d10a      	bne.n	8011952 <xTimerGenericCommand+0x2e>
	__asm volatile
 801193c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011940:	f383 8811 	msr	BASEPRI, r3
 8011944:	f3bf 8f6f 	isb	sy
 8011948:	f3bf 8f4f 	dsb	sy
 801194c:	623b      	str	r3, [r7, #32]
}
 801194e:	bf00      	nop
 8011950:	e7fe      	b.n	8011950 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011952:	4b1a      	ldr	r3, [pc, #104]	; (80119bc <xTimerGenericCommand+0x98>)
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d02a      	beq.n	80119b0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801195a:	68bb      	ldr	r3, [r7, #8]
 801195c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011966:	68bb      	ldr	r3, [r7, #8]
 8011968:	2b05      	cmp	r3, #5
 801196a:	dc18      	bgt.n	801199e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801196c:	f7ff feb2 	bl	80116d4 <xTaskGetSchedulerState>
 8011970:	4603      	mov	r3, r0
 8011972:	2b02      	cmp	r3, #2
 8011974:	d109      	bne.n	801198a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011976:	4b11      	ldr	r3, [pc, #68]	; (80119bc <xTimerGenericCommand+0x98>)
 8011978:	6818      	ldr	r0, [r3, #0]
 801197a:	f107 0110 	add.w	r1, r7, #16
 801197e:	2300      	movs	r3, #0
 8011980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011982:	f7fe faff 	bl	800ff84 <xQueueGenericSend>
 8011986:	6278      	str	r0, [r7, #36]	; 0x24
 8011988:	e012      	b.n	80119b0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801198a:	4b0c      	ldr	r3, [pc, #48]	; (80119bc <xTimerGenericCommand+0x98>)
 801198c:	6818      	ldr	r0, [r3, #0]
 801198e:	f107 0110 	add.w	r1, r7, #16
 8011992:	2300      	movs	r3, #0
 8011994:	2200      	movs	r2, #0
 8011996:	f7fe faf5 	bl	800ff84 <xQueueGenericSend>
 801199a:	6278      	str	r0, [r7, #36]	; 0x24
 801199c:	e008      	b.n	80119b0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801199e:	4b07      	ldr	r3, [pc, #28]	; (80119bc <xTimerGenericCommand+0x98>)
 80119a0:	6818      	ldr	r0, [r3, #0]
 80119a2:	f107 0110 	add.w	r1, r7, #16
 80119a6:	2300      	movs	r3, #0
 80119a8:	683a      	ldr	r2, [r7, #0]
 80119aa:	f7fe fbe9 	bl	8010180 <xQueueGenericSendFromISR>
 80119ae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80119b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80119b2:	4618      	mov	r0, r3
 80119b4:	3728      	adds	r7, #40	; 0x28
 80119b6:	46bd      	mov	sp, r7
 80119b8:	bd80      	pop	{r7, pc}
 80119ba:	bf00      	nop
 80119bc:	200012e8 	.word	0x200012e8

080119c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b088      	sub	sp, #32
 80119c4:	af02      	add	r7, sp, #8
 80119c6:	6078      	str	r0, [r7, #4]
 80119c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80119ca:	4b22      	ldr	r3, [pc, #136]	; (8011a54 <prvProcessExpiredTimer+0x94>)
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	68db      	ldr	r3, [r3, #12]
 80119d0:	68db      	ldr	r3, [r3, #12]
 80119d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80119d4:	697b      	ldr	r3, [r7, #20]
 80119d6:	3304      	adds	r3, #4
 80119d8:	4618      	mov	r0, r3
 80119da:	f7fe f9a5 	bl	800fd28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80119de:	697b      	ldr	r3, [r7, #20]
 80119e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80119e4:	f003 0304 	and.w	r3, r3, #4
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d022      	beq.n	8011a32 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80119ec:	697b      	ldr	r3, [r7, #20]
 80119ee:	699a      	ldr	r2, [r3, #24]
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	18d1      	adds	r1, r2, r3
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	683a      	ldr	r2, [r7, #0]
 80119f8:	6978      	ldr	r0, [r7, #20]
 80119fa:	f000 f8d1 	bl	8011ba0 <prvInsertTimerInActiveList>
 80119fe:	4603      	mov	r3, r0
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d01f      	beq.n	8011a44 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011a04:	2300      	movs	r3, #0
 8011a06:	9300      	str	r3, [sp, #0]
 8011a08:	2300      	movs	r3, #0
 8011a0a:	687a      	ldr	r2, [r7, #4]
 8011a0c:	2100      	movs	r1, #0
 8011a0e:	6978      	ldr	r0, [r7, #20]
 8011a10:	f7ff ff88 	bl	8011924 <xTimerGenericCommand>
 8011a14:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011a16:	693b      	ldr	r3, [r7, #16]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d113      	bne.n	8011a44 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8011a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a20:	f383 8811 	msr	BASEPRI, r3
 8011a24:	f3bf 8f6f 	isb	sy
 8011a28:	f3bf 8f4f 	dsb	sy
 8011a2c:	60fb      	str	r3, [r7, #12]
}
 8011a2e:	bf00      	nop
 8011a30:	e7fe      	b.n	8011a30 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011a32:	697b      	ldr	r3, [r7, #20]
 8011a34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011a38:	f023 0301 	bic.w	r3, r3, #1
 8011a3c:	b2da      	uxtb	r2, r3
 8011a3e:	697b      	ldr	r3, [r7, #20]
 8011a40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011a44:	697b      	ldr	r3, [r7, #20]
 8011a46:	6a1b      	ldr	r3, [r3, #32]
 8011a48:	6978      	ldr	r0, [r7, #20]
 8011a4a:	4798      	blx	r3
}
 8011a4c:	bf00      	nop
 8011a4e:	3718      	adds	r7, #24
 8011a50:	46bd      	mov	sp, r7
 8011a52:	bd80      	pop	{r7, pc}
 8011a54:	200012e0 	.word	0x200012e0

08011a58 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b084      	sub	sp, #16
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011a60:	f107 0308 	add.w	r3, r7, #8
 8011a64:	4618      	mov	r0, r3
 8011a66:	f000 f857 	bl	8011b18 <prvGetNextExpireTime>
 8011a6a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011a6c:	68bb      	ldr	r3, [r7, #8]
 8011a6e:	4619      	mov	r1, r3
 8011a70:	68f8      	ldr	r0, [r7, #12]
 8011a72:	f000 f803 	bl	8011a7c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011a76:	f000 f8d5 	bl	8011c24 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011a7a:	e7f1      	b.n	8011a60 <prvTimerTask+0x8>

08011a7c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b084      	sub	sp, #16
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
 8011a84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011a86:	f7ff fa29 	bl	8010edc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011a8a:	f107 0308 	add.w	r3, r7, #8
 8011a8e:	4618      	mov	r0, r3
 8011a90:	f000 f866 	bl	8011b60 <prvSampleTimeNow>
 8011a94:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011a96:	68bb      	ldr	r3, [r7, #8]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d130      	bne.n	8011afe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011a9c:	683b      	ldr	r3, [r7, #0]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d10a      	bne.n	8011ab8 <prvProcessTimerOrBlockTask+0x3c>
 8011aa2:	687a      	ldr	r2, [r7, #4]
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	429a      	cmp	r2, r3
 8011aa8:	d806      	bhi.n	8011ab8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011aaa:	f7ff fa25 	bl	8010ef8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011aae:	68f9      	ldr	r1, [r7, #12]
 8011ab0:	6878      	ldr	r0, [r7, #4]
 8011ab2:	f7ff ff85 	bl	80119c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011ab6:	e024      	b.n	8011b02 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011ab8:	683b      	ldr	r3, [r7, #0]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d008      	beq.n	8011ad0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011abe:	4b13      	ldr	r3, [pc, #76]	; (8011b0c <prvProcessTimerOrBlockTask+0x90>)
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d101      	bne.n	8011acc <prvProcessTimerOrBlockTask+0x50>
 8011ac8:	2301      	movs	r3, #1
 8011aca:	e000      	b.n	8011ace <prvProcessTimerOrBlockTask+0x52>
 8011acc:	2300      	movs	r3, #0
 8011ace:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011ad0:	4b0f      	ldr	r3, [pc, #60]	; (8011b10 <prvProcessTimerOrBlockTask+0x94>)
 8011ad2:	6818      	ldr	r0, [r3, #0]
 8011ad4:	687a      	ldr	r2, [r7, #4]
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	1ad3      	subs	r3, r2, r3
 8011ada:	683a      	ldr	r2, [r7, #0]
 8011adc:	4619      	mov	r1, r3
 8011ade:	f7fe fe05 	bl	80106ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011ae2:	f7ff fa09 	bl	8010ef8 <xTaskResumeAll>
 8011ae6:	4603      	mov	r3, r0
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d10a      	bne.n	8011b02 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011aec:	4b09      	ldr	r3, [pc, #36]	; (8011b14 <prvProcessTimerOrBlockTask+0x98>)
 8011aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011af2:	601a      	str	r2, [r3, #0]
 8011af4:	f3bf 8f4f 	dsb	sy
 8011af8:	f3bf 8f6f 	isb	sy
}
 8011afc:	e001      	b.n	8011b02 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011afe:	f7ff f9fb 	bl	8010ef8 <xTaskResumeAll>
}
 8011b02:	bf00      	nop
 8011b04:	3710      	adds	r7, #16
 8011b06:	46bd      	mov	sp, r7
 8011b08:	bd80      	pop	{r7, pc}
 8011b0a:	bf00      	nop
 8011b0c:	200012e4 	.word	0x200012e4
 8011b10:	200012e8 	.word	0x200012e8
 8011b14:	e000ed04 	.word	0xe000ed04

08011b18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011b18:	b480      	push	{r7}
 8011b1a:	b085      	sub	sp, #20
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011b20:	4b0e      	ldr	r3, [pc, #56]	; (8011b5c <prvGetNextExpireTime+0x44>)
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d101      	bne.n	8011b2e <prvGetNextExpireTime+0x16>
 8011b2a:	2201      	movs	r2, #1
 8011b2c:	e000      	b.n	8011b30 <prvGetNextExpireTime+0x18>
 8011b2e:	2200      	movs	r2, #0
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d105      	bne.n	8011b48 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011b3c:	4b07      	ldr	r3, [pc, #28]	; (8011b5c <prvGetNextExpireTime+0x44>)
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	68db      	ldr	r3, [r3, #12]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	60fb      	str	r3, [r7, #12]
 8011b46:	e001      	b.n	8011b4c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011b48:	2300      	movs	r3, #0
 8011b4a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011b4c:	68fb      	ldr	r3, [r7, #12]
}
 8011b4e:	4618      	mov	r0, r3
 8011b50:	3714      	adds	r7, #20
 8011b52:	46bd      	mov	sp, r7
 8011b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b58:	4770      	bx	lr
 8011b5a:	bf00      	nop
 8011b5c:	200012e0 	.word	0x200012e0

08011b60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b084      	sub	sp, #16
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011b68:	f7ff fa64 	bl	8011034 <xTaskGetTickCount>
 8011b6c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011b6e:	4b0b      	ldr	r3, [pc, #44]	; (8011b9c <prvSampleTimeNow+0x3c>)
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	68fa      	ldr	r2, [r7, #12]
 8011b74:	429a      	cmp	r2, r3
 8011b76:	d205      	bcs.n	8011b84 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011b78:	f000 f936 	bl	8011de8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	2201      	movs	r2, #1
 8011b80:	601a      	str	r2, [r3, #0]
 8011b82:	e002      	b.n	8011b8a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	2200      	movs	r2, #0
 8011b88:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011b8a:	4a04      	ldr	r2, [pc, #16]	; (8011b9c <prvSampleTimeNow+0x3c>)
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011b90:	68fb      	ldr	r3, [r7, #12]
}
 8011b92:	4618      	mov	r0, r3
 8011b94:	3710      	adds	r7, #16
 8011b96:	46bd      	mov	sp, r7
 8011b98:	bd80      	pop	{r7, pc}
 8011b9a:	bf00      	nop
 8011b9c:	200012f0 	.word	0x200012f0

08011ba0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b086      	sub	sp, #24
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	60f8      	str	r0, [r7, #12]
 8011ba8:	60b9      	str	r1, [r7, #8]
 8011baa:	607a      	str	r2, [r7, #4]
 8011bac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011bae:	2300      	movs	r3, #0
 8011bb0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	68ba      	ldr	r2, [r7, #8]
 8011bb6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	68fa      	ldr	r2, [r7, #12]
 8011bbc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011bbe:	68ba      	ldr	r2, [r7, #8]
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	429a      	cmp	r2, r3
 8011bc4:	d812      	bhi.n	8011bec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011bc6:	687a      	ldr	r2, [r7, #4]
 8011bc8:	683b      	ldr	r3, [r7, #0]
 8011bca:	1ad2      	subs	r2, r2, r3
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	699b      	ldr	r3, [r3, #24]
 8011bd0:	429a      	cmp	r2, r3
 8011bd2:	d302      	bcc.n	8011bda <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011bd4:	2301      	movs	r3, #1
 8011bd6:	617b      	str	r3, [r7, #20]
 8011bd8:	e01b      	b.n	8011c12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011bda:	4b10      	ldr	r3, [pc, #64]	; (8011c1c <prvInsertTimerInActiveList+0x7c>)
 8011bdc:	681a      	ldr	r2, [r3, #0]
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	3304      	adds	r3, #4
 8011be2:	4619      	mov	r1, r3
 8011be4:	4610      	mov	r0, r2
 8011be6:	f7fe f866 	bl	800fcb6 <vListInsert>
 8011bea:	e012      	b.n	8011c12 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011bec:	687a      	ldr	r2, [r7, #4]
 8011bee:	683b      	ldr	r3, [r7, #0]
 8011bf0:	429a      	cmp	r2, r3
 8011bf2:	d206      	bcs.n	8011c02 <prvInsertTimerInActiveList+0x62>
 8011bf4:	68ba      	ldr	r2, [r7, #8]
 8011bf6:	683b      	ldr	r3, [r7, #0]
 8011bf8:	429a      	cmp	r2, r3
 8011bfa:	d302      	bcc.n	8011c02 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011bfc:	2301      	movs	r3, #1
 8011bfe:	617b      	str	r3, [r7, #20]
 8011c00:	e007      	b.n	8011c12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011c02:	4b07      	ldr	r3, [pc, #28]	; (8011c20 <prvInsertTimerInActiveList+0x80>)
 8011c04:	681a      	ldr	r2, [r3, #0]
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	3304      	adds	r3, #4
 8011c0a:	4619      	mov	r1, r3
 8011c0c:	4610      	mov	r0, r2
 8011c0e:	f7fe f852 	bl	800fcb6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011c12:	697b      	ldr	r3, [r7, #20]
}
 8011c14:	4618      	mov	r0, r3
 8011c16:	3718      	adds	r7, #24
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	bd80      	pop	{r7, pc}
 8011c1c:	200012e4 	.word	0x200012e4
 8011c20:	200012e0 	.word	0x200012e0

08011c24 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b08e      	sub	sp, #56	; 0x38
 8011c28:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011c2a:	e0ca      	b.n	8011dc2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	da18      	bge.n	8011c64 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011c32:	1d3b      	adds	r3, r7, #4
 8011c34:	3304      	adds	r3, #4
 8011c36:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d10a      	bne.n	8011c54 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8011c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c42:	f383 8811 	msr	BASEPRI, r3
 8011c46:	f3bf 8f6f 	isb	sy
 8011c4a:	f3bf 8f4f 	dsb	sy
 8011c4e:	61fb      	str	r3, [r7, #28]
}
 8011c50:	bf00      	nop
 8011c52:	e7fe      	b.n	8011c52 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c5a:	6850      	ldr	r0, [r2, #4]
 8011c5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c5e:	6892      	ldr	r2, [r2, #8]
 8011c60:	4611      	mov	r1, r2
 8011c62:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	f2c0 80aa 	blt.w	8011dc0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c72:	695b      	ldr	r3, [r3, #20]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d004      	beq.n	8011c82 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c7a:	3304      	adds	r3, #4
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	f7fe f853 	bl	800fd28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011c82:	463b      	mov	r3, r7
 8011c84:	4618      	mov	r0, r3
 8011c86:	f7ff ff6b 	bl	8011b60 <prvSampleTimeNow>
 8011c8a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	2b09      	cmp	r3, #9
 8011c90:	f200 8097 	bhi.w	8011dc2 <prvProcessReceivedCommands+0x19e>
 8011c94:	a201      	add	r2, pc, #4	; (adr r2, 8011c9c <prvProcessReceivedCommands+0x78>)
 8011c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c9a:	bf00      	nop
 8011c9c:	08011cc5 	.word	0x08011cc5
 8011ca0:	08011cc5 	.word	0x08011cc5
 8011ca4:	08011cc5 	.word	0x08011cc5
 8011ca8:	08011d39 	.word	0x08011d39
 8011cac:	08011d4d 	.word	0x08011d4d
 8011cb0:	08011d97 	.word	0x08011d97
 8011cb4:	08011cc5 	.word	0x08011cc5
 8011cb8:	08011cc5 	.word	0x08011cc5
 8011cbc:	08011d39 	.word	0x08011d39
 8011cc0:	08011d4d 	.word	0x08011d4d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011cca:	f043 0301 	orr.w	r3, r3, #1
 8011cce:	b2da      	uxtb	r2, r3
 8011cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011cd6:	68ba      	ldr	r2, [r7, #8]
 8011cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cda:	699b      	ldr	r3, [r3, #24]
 8011cdc:	18d1      	adds	r1, r2, r3
 8011cde:	68bb      	ldr	r3, [r7, #8]
 8011ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ce2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ce4:	f7ff ff5c 	bl	8011ba0 <prvInsertTimerInActiveList>
 8011ce8:	4603      	mov	r3, r0
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d069      	beq.n	8011dc2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cf0:	6a1b      	ldr	r3, [r3, #32]
 8011cf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011cf4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011cfc:	f003 0304 	and.w	r3, r3, #4
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d05e      	beq.n	8011dc2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011d04:	68ba      	ldr	r2, [r7, #8]
 8011d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d08:	699b      	ldr	r3, [r3, #24]
 8011d0a:	441a      	add	r2, r3
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	9300      	str	r3, [sp, #0]
 8011d10:	2300      	movs	r3, #0
 8011d12:	2100      	movs	r1, #0
 8011d14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011d16:	f7ff fe05 	bl	8011924 <xTimerGenericCommand>
 8011d1a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011d1c:	6a3b      	ldr	r3, [r7, #32]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d14f      	bne.n	8011dc2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8011d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d26:	f383 8811 	msr	BASEPRI, r3
 8011d2a:	f3bf 8f6f 	isb	sy
 8011d2e:	f3bf 8f4f 	dsb	sy
 8011d32:	61bb      	str	r3, [r7, #24]
}
 8011d34:	bf00      	nop
 8011d36:	e7fe      	b.n	8011d36 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011d3e:	f023 0301 	bic.w	r3, r3, #1
 8011d42:	b2da      	uxtb	r2, r3
 8011d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8011d4a:	e03a      	b.n	8011dc2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011d52:	f043 0301 	orr.w	r3, r3, #1
 8011d56:	b2da      	uxtb	r2, r3
 8011d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011d5e:	68ba      	ldr	r2, [r7, #8]
 8011d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d62:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d66:	699b      	ldr	r3, [r3, #24]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d10a      	bne.n	8011d82 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8011d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d70:	f383 8811 	msr	BASEPRI, r3
 8011d74:	f3bf 8f6f 	isb	sy
 8011d78:	f3bf 8f4f 	dsb	sy
 8011d7c:	617b      	str	r3, [r7, #20]
}
 8011d7e:	bf00      	nop
 8011d80:	e7fe      	b.n	8011d80 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d84:	699a      	ldr	r2, [r3, #24]
 8011d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d88:	18d1      	adds	r1, r2, r3
 8011d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011d90:	f7ff ff06 	bl	8011ba0 <prvInsertTimerInActiveList>
					break;
 8011d94:	e015      	b.n	8011dc2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011d9c:	f003 0302 	and.w	r3, r3, #2
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d103      	bne.n	8011dac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8011da4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011da6:	f000 fbdb 	bl	8012560 <vPortFree>
 8011daa:	e00a      	b.n	8011dc2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011db2:	f023 0301 	bic.w	r3, r3, #1
 8011db6:	b2da      	uxtb	r2, r3
 8011db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011dbe:	e000      	b.n	8011dc2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011dc0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011dc2:	4b08      	ldr	r3, [pc, #32]	; (8011de4 <prvProcessReceivedCommands+0x1c0>)
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	1d39      	adds	r1, r7, #4
 8011dc8:	2200      	movs	r2, #0
 8011dca:	4618      	mov	r0, r3
 8011dcc:	f7fe fa74 	bl	80102b8 <xQueueReceive>
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	f47f af2a 	bne.w	8011c2c <prvProcessReceivedCommands+0x8>
	}
}
 8011dd8:	bf00      	nop
 8011dda:	bf00      	nop
 8011ddc:	3730      	adds	r7, #48	; 0x30
 8011dde:	46bd      	mov	sp, r7
 8011de0:	bd80      	pop	{r7, pc}
 8011de2:	bf00      	nop
 8011de4:	200012e8 	.word	0x200012e8

08011de8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b088      	sub	sp, #32
 8011dec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011dee:	e048      	b.n	8011e82 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011df0:	4b2d      	ldr	r3, [pc, #180]	; (8011ea8 <prvSwitchTimerLists+0xc0>)
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	68db      	ldr	r3, [r3, #12]
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011dfa:	4b2b      	ldr	r3, [pc, #172]	; (8011ea8 <prvSwitchTimerLists+0xc0>)
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	68db      	ldr	r3, [r3, #12]
 8011e00:	68db      	ldr	r3, [r3, #12]
 8011e02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	3304      	adds	r3, #4
 8011e08:	4618      	mov	r0, r3
 8011e0a:	f7fd ff8d 	bl	800fd28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	6a1b      	ldr	r3, [r3, #32]
 8011e12:	68f8      	ldr	r0, [r7, #12]
 8011e14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011e1c:	f003 0304 	and.w	r3, r3, #4
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d02e      	beq.n	8011e82 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	699b      	ldr	r3, [r3, #24]
 8011e28:	693a      	ldr	r2, [r7, #16]
 8011e2a:	4413      	add	r3, r2
 8011e2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011e2e:	68ba      	ldr	r2, [r7, #8]
 8011e30:	693b      	ldr	r3, [r7, #16]
 8011e32:	429a      	cmp	r2, r3
 8011e34:	d90e      	bls.n	8011e54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	68ba      	ldr	r2, [r7, #8]
 8011e3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	68fa      	ldr	r2, [r7, #12]
 8011e40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011e42:	4b19      	ldr	r3, [pc, #100]	; (8011ea8 <prvSwitchTimerLists+0xc0>)
 8011e44:	681a      	ldr	r2, [r3, #0]
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	3304      	adds	r3, #4
 8011e4a:	4619      	mov	r1, r3
 8011e4c:	4610      	mov	r0, r2
 8011e4e:	f7fd ff32 	bl	800fcb6 <vListInsert>
 8011e52:	e016      	b.n	8011e82 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011e54:	2300      	movs	r3, #0
 8011e56:	9300      	str	r3, [sp, #0]
 8011e58:	2300      	movs	r3, #0
 8011e5a:	693a      	ldr	r2, [r7, #16]
 8011e5c:	2100      	movs	r1, #0
 8011e5e:	68f8      	ldr	r0, [r7, #12]
 8011e60:	f7ff fd60 	bl	8011924 <xTimerGenericCommand>
 8011e64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d10a      	bne.n	8011e82 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8011e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e70:	f383 8811 	msr	BASEPRI, r3
 8011e74:	f3bf 8f6f 	isb	sy
 8011e78:	f3bf 8f4f 	dsb	sy
 8011e7c:	603b      	str	r3, [r7, #0]
}
 8011e7e:	bf00      	nop
 8011e80:	e7fe      	b.n	8011e80 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011e82:	4b09      	ldr	r3, [pc, #36]	; (8011ea8 <prvSwitchTimerLists+0xc0>)
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d1b1      	bne.n	8011df0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011e8c:	4b06      	ldr	r3, [pc, #24]	; (8011ea8 <prvSwitchTimerLists+0xc0>)
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011e92:	4b06      	ldr	r3, [pc, #24]	; (8011eac <prvSwitchTimerLists+0xc4>)
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	4a04      	ldr	r2, [pc, #16]	; (8011ea8 <prvSwitchTimerLists+0xc0>)
 8011e98:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011e9a:	4a04      	ldr	r2, [pc, #16]	; (8011eac <prvSwitchTimerLists+0xc4>)
 8011e9c:	697b      	ldr	r3, [r7, #20]
 8011e9e:	6013      	str	r3, [r2, #0]
}
 8011ea0:	bf00      	nop
 8011ea2:	3718      	adds	r7, #24
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	bd80      	pop	{r7, pc}
 8011ea8:	200012e0 	.word	0x200012e0
 8011eac:	200012e4 	.word	0x200012e4

08011eb0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b082      	sub	sp, #8
 8011eb4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011eb6:	f000 f965 	bl	8012184 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011eba:	4b15      	ldr	r3, [pc, #84]	; (8011f10 <prvCheckForValidListAndQueue+0x60>)
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d120      	bne.n	8011f04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011ec2:	4814      	ldr	r0, [pc, #80]	; (8011f14 <prvCheckForValidListAndQueue+0x64>)
 8011ec4:	f7fd fea6 	bl	800fc14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011ec8:	4813      	ldr	r0, [pc, #76]	; (8011f18 <prvCheckForValidListAndQueue+0x68>)
 8011eca:	f7fd fea3 	bl	800fc14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011ece:	4b13      	ldr	r3, [pc, #76]	; (8011f1c <prvCheckForValidListAndQueue+0x6c>)
 8011ed0:	4a10      	ldr	r2, [pc, #64]	; (8011f14 <prvCheckForValidListAndQueue+0x64>)
 8011ed2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011ed4:	4b12      	ldr	r3, [pc, #72]	; (8011f20 <prvCheckForValidListAndQueue+0x70>)
 8011ed6:	4a10      	ldr	r2, [pc, #64]	; (8011f18 <prvCheckForValidListAndQueue+0x68>)
 8011ed8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011eda:	2300      	movs	r3, #0
 8011edc:	9300      	str	r3, [sp, #0]
 8011ede:	4b11      	ldr	r3, [pc, #68]	; (8011f24 <prvCheckForValidListAndQueue+0x74>)
 8011ee0:	4a11      	ldr	r2, [pc, #68]	; (8011f28 <prvCheckForValidListAndQueue+0x78>)
 8011ee2:	2110      	movs	r1, #16
 8011ee4:	200a      	movs	r0, #10
 8011ee6:	f7fd ffb1 	bl	800fe4c <xQueueGenericCreateStatic>
 8011eea:	4603      	mov	r3, r0
 8011eec:	4a08      	ldr	r2, [pc, #32]	; (8011f10 <prvCheckForValidListAndQueue+0x60>)
 8011eee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011ef0:	4b07      	ldr	r3, [pc, #28]	; (8011f10 <prvCheckForValidListAndQueue+0x60>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d005      	beq.n	8011f04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011ef8:	4b05      	ldr	r3, [pc, #20]	; (8011f10 <prvCheckForValidListAndQueue+0x60>)
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	490b      	ldr	r1, [pc, #44]	; (8011f2c <prvCheckForValidListAndQueue+0x7c>)
 8011efe:	4618      	mov	r0, r3
 8011f00:	f7fe fbca 	bl	8010698 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011f04:	f000 f96e 	bl	80121e4 <vPortExitCritical>
}
 8011f08:	bf00      	nop
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	bd80      	pop	{r7, pc}
 8011f0e:	bf00      	nop
 8011f10:	200012e8 	.word	0x200012e8
 8011f14:	200012b8 	.word	0x200012b8
 8011f18:	200012cc 	.word	0x200012cc
 8011f1c:	200012e0 	.word	0x200012e0
 8011f20:	200012e4 	.word	0x200012e4
 8011f24:	20001394 	.word	0x20001394
 8011f28:	200012f4 	.word	0x200012f4
 8011f2c:	0801a7f0 	.word	0x0801a7f0

08011f30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011f30:	b480      	push	{r7}
 8011f32:	b085      	sub	sp, #20
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	60f8      	str	r0, [r7, #12]
 8011f38:	60b9      	str	r1, [r7, #8]
 8011f3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	3b04      	subs	r3, #4
 8011f40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011f48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	3b04      	subs	r3, #4
 8011f4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011f50:	68bb      	ldr	r3, [r7, #8]
 8011f52:	f023 0201 	bic.w	r2, r3, #1
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	3b04      	subs	r3, #4
 8011f5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011f60:	4a0c      	ldr	r2, [pc, #48]	; (8011f94 <pxPortInitialiseStack+0x64>)
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	3b14      	subs	r3, #20
 8011f6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011f6c:	687a      	ldr	r2, [r7, #4]
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	3b04      	subs	r3, #4
 8011f76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	f06f 0202 	mvn.w	r2, #2
 8011f7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	3b20      	subs	r3, #32
 8011f84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011f86:	68fb      	ldr	r3, [r7, #12]
}
 8011f88:	4618      	mov	r0, r3
 8011f8a:	3714      	adds	r7, #20
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f92:	4770      	bx	lr
 8011f94:	08011f99 	.word	0x08011f99

08011f98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011f98:	b480      	push	{r7}
 8011f9a:	b085      	sub	sp, #20
 8011f9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011fa2:	4b12      	ldr	r3, [pc, #72]	; (8011fec <prvTaskExitError+0x54>)
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011faa:	d00a      	beq.n	8011fc2 <prvTaskExitError+0x2a>
	__asm volatile
 8011fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fb0:	f383 8811 	msr	BASEPRI, r3
 8011fb4:	f3bf 8f6f 	isb	sy
 8011fb8:	f3bf 8f4f 	dsb	sy
 8011fbc:	60fb      	str	r3, [r7, #12]
}
 8011fbe:	bf00      	nop
 8011fc0:	e7fe      	b.n	8011fc0 <prvTaskExitError+0x28>
	__asm volatile
 8011fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fc6:	f383 8811 	msr	BASEPRI, r3
 8011fca:	f3bf 8f6f 	isb	sy
 8011fce:	f3bf 8f4f 	dsb	sy
 8011fd2:	60bb      	str	r3, [r7, #8]
}
 8011fd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011fd6:	bf00      	nop
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d0fc      	beq.n	8011fd8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011fde:	bf00      	nop
 8011fe0:	bf00      	nop
 8011fe2:	3714      	adds	r7, #20
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fea:	4770      	bx	lr
 8011fec:	200000a4 	.word	0x200000a4

08011ff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011ff0:	4b07      	ldr	r3, [pc, #28]	; (8012010 <pxCurrentTCBConst2>)
 8011ff2:	6819      	ldr	r1, [r3, #0]
 8011ff4:	6808      	ldr	r0, [r1, #0]
 8011ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ffa:	f380 8809 	msr	PSP, r0
 8011ffe:	f3bf 8f6f 	isb	sy
 8012002:	f04f 0000 	mov.w	r0, #0
 8012006:	f380 8811 	msr	BASEPRI, r0
 801200a:	4770      	bx	lr
 801200c:	f3af 8000 	nop.w

08012010 <pxCurrentTCBConst2>:
 8012010:	20000db8 	.word	0x20000db8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012014:	bf00      	nop
 8012016:	bf00      	nop

08012018 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012018:	4808      	ldr	r0, [pc, #32]	; (801203c <prvPortStartFirstTask+0x24>)
 801201a:	6800      	ldr	r0, [r0, #0]
 801201c:	6800      	ldr	r0, [r0, #0]
 801201e:	f380 8808 	msr	MSP, r0
 8012022:	f04f 0000 	mov.w	r0, #0
 8012026:	f380 8814 	msr	CONTROL, r0
 801202a:	b662      	cpsie	i
 801202c:	b661      	cpsie	f
 801202e:	f3bf 8f4f 	dsb	sy
 8012032:	f3bf 8f6f 	isb	sy
 8012036:	df00      	svc	0
 8012038:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801203a:	bf00      	nop
 801203c:	e000ed08 	.word	0xe000ed08

08012040 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012040:	b580      	push	{r7, lr}
 8012042:	b086      	sub	sp, #24
 8012044:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012046:	4b46      	ldr	r3, [pc, #280]	; (8012160 <xPortStartScheduler+0x120>)
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	4a46      	ldr	r2, [pc, #280]	; (8012164 <xPortStartScheduler+0x124>)
 801204c:	4293      	cmp	r3, r2
 801204e:	d10a      	bne.n	8012066 <xPortStartScheduler+0x26>
	__asm volatile
 8012050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012054:	f383 8811 	msr	BASEPRI, r3
 8012058:	f3bf 8f6f 	isb	sy
 801205c:	f3bf 8f4f 	dsb	sy
 8012060:	613b      	str	r3, [r7, #16]
}
 8012062:	bf00      	nop
 8012064:	e7fe      	b.n	8012064 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012066:	4b3e      	ldr	r3, [pc, #248]	; (8012160 <xPortStartScheduler+0x120>)
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	4a3f      	ldr	r2, [pc, #252]	; (8012168 <xPortStartScheduler+0x128>)
 801206c:	4293      	cmp	r3, r2
 801206e:	d10a      	bne.n	8012086 <xPortStartScheduler+0x46>
	__asm volatile
 8012070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012074:	f383 8811 	msr	BASEPRI, r3
 8012078:	f3bf 8f6f 	isb	sy
 801207c:	f3bf 8f4f 	dsb	sy
 8012080:	60fb      	str	r3, [r7, #12]
}
 8012082:	bf00      	nop
 8012084:	e7fe      	b.n	8012084 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012086:	4b39      	ldr	r3, [pc, #228]	; (801216c <xPortStartScheduler+0x12c>)
 8012088:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801208a:	697b      	ldr	r3, [r7, #20]
 801208c:	781b      	ldrb	r3, [r3, #0]
 801208e:	b2db      	uxtb	r3, r3
 8012090:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012092:	697b      	ldr	r3, [r7, #20]
 8012094:	22ff      	movs	r2, #255	; 0xff
 8012096:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012098:	697b      	ldr	r3, [r7, #20]
 801209a:	781b      	ldrb	r3, [r3, #0]
 801209c:	b2db      	uxtb	r3, r3
 801209e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80120a0:	78fb      	ldrb	r3, [r7, #3]
 80120a2:	b2db      	uxtb	r3, r3
 80120a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80120a8:	b2da      	uxtb	r2, r3
 80120aa:	4b31      	ldr	r3, [pc, #196]	; (8012170 <xPortStartScheduler+0x130>)
 80120ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80120ae:	4b31      	ldr	r3, [pc, #196]	; (8012174 <xPortStartScheduler+0x134>)
 80120b0:	2207      	movs	r2, #7
 80120b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80120b4:	e009      	b.n	80120ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80120b6:	4b2f      	ldr	r3, [pc, #188]	; (8012174 <xPortStartScheduler+0x134>)
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	3b01      	subs	r3, #1
 80120bc:	4a2d      	ldr	r2, [pc, #180]	; (8012174 <xPortStartScheduler+0x134>)
 80120be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80120c0:	78fb      	ldrb	r3, [r7, #3]
 80120c2:	b2db      	uxtb	r3, r3
 80120c4:	005b      	lsls	r3, r3, #1
 80120c6:	b2db      	uxtb	r3, r3
 80120c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80120ca:	78fb      	ldrb	r3, [r7, #3]
 80120cc:	b2db      	uxtb	r3, r3
 80120ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80120d2:	2b80      	cmp	r3, #128	; 0x80
 80120d4:	d0ef      	beq.n	80120b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80120d6:	4b27      	ldr	r3, [pc, #156]	; (8012174 <xPortStartScheduler+0x134>)
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	f1c3 0307 	rsb	r3, r3, #7
 80120de:	2b04      	cmp	r3, #4
 80120e0:	d00a      	beq.n	80120f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80120e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120e6:	f383 8811 	msr	BASEPRI, r3
 80120ea:	f3bf 8f6f 	isb	sy
 80120ee:	f3bf 8f4f 	dsb	sy
 80120f2:	60bb      	str	r3, [r7, #8]
}
 80120f4:	bf00      	nop
 80120f6:	e7fe      	b.n	80120f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80120f8:	4b1e      	ldr	r3, [pc, #120]	; (8012174 <xPortStartScheduler+0x134>)
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	021b      	lsls	r3, r3, #8
 80120fe:	4a1d      	ldr	r2, [pc, #116]	; (8012174 <xPortStartScheduler+0x134>)
 8012100:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012102:	4b1c      	ldr	r3, [pc, #112]	; (8012174 <xPortStartScheduler+0x134>)
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801210a:	4a1a      	ldr	r2, [pc, #104]	; (8012174 <xPortStartScheduler+0x134>)
 801210c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	b2da      	uxtb	r2, r3
 8012112:	697b      	ldr	r3, [r7, #20]
 8012114:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012116:	4b18      	ldr	r3, [pc, #96]	; (8012178 <xPortStartScheduler+0x138>)
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	4a17      	ldr	r2, [pc, #92]	; (8012178 <xPortStartScheduler+0x138>)
 801211c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012120:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012122:	4b15      	ldr	r3, [pc, #84]	; (8012178 <xPortStartScheduler+0x138>)
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	4a14      	ldr	r2, [pc, #80]	; (8012178 <xPortStartScheduler+0x138>)
 8012128:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801212c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801212e:	f000 f8dd 	bl	80122ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012132:	4b12      	ldr	r3, [pc, #72]	; (801217c <xPortStartScheduler+0x13c>)
 8012134:	2200      	movs	r2, #0
 8012136:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012138:	f000 f8fc 	bl	8012334 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801213c:	4b10      	ldr	r3, [pc, #64]	; (8012180 <xPortStartScheduler+0x140>)
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	4a0f      	ldr	r2, [pc, #60]	; (8012180 <xPortStartScheduler+0x140>)
 8012142:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012146:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012148:	f7ff ff66 	bl	8012018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801214c:	f7ff f83c 	bl	80111c8 <vTaskSwitchContext>
	prvTaskExitError();
 8012150:	f7ff ff22 	bl	8011f98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012154:	2300      	movs	r3, #0
}
 8012156:	4618      	mov	r0, r3
 8012158:	3718      	adds	r7, #24
 801215a:	46bd      	mov	sp, r7
 801215c:	bd80      	pop	{r7, pc}
 801215e:	bf00      	nop
 8012160:	e000ed00 	.word	0xe000ed00
 8012164:	410fc271 	.word	0x410fc271
 8012168:	410fc270 	.word	0x410fc270
 801216c:	e000e400 	.word	0xe000e400
 8012170:	200013e4 	.word	0x200013e4
 8012174:	200013e8 	.word	0x200013e8
 8012178:	e000ed20 	.word	0xe000ed20
 801217c:	200000a4 	.word	0x200000a4
 8012180:	e000ef34 	.word	0xe000ef34

08012184 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012184:	b480      	push	{r7}
 8012186:	b083      	sub	sp, #12
 8012188:	af00      	add	r7, sp, #0
	__asm volatile
 801218a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801218e:	f383 8811 	msr	BASEPRI, r3
 8012192:	f3bf 8f6f 	isb	sy
 8012196:	f3bf 8f4f 	dsb	sy
 801219a:	607b      	str	r3, [r7, #4]
}
 801219c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801219e:	4b0f      	ldr	r3, [pc, #60]	; (80121dc <vPortEnterCritical+0x58>)
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	3301      	adds	r3, #1
 80121a4:	4a0d      	ldr	r2, [pc, #52]	; (80121dc <vPortEnterCritical+0x58>)
 80121a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80121a8:	4b0c      	ldr	r3, [pc, #48]	; (80121dc <vPortEnterCritical+0x58>)
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	2b01      	cmp	r3, #1
 80121ae:	d10f      	bne.n	80121d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80121b0:	4b0b      	ldr	r3, [pc, #44]	; (80121e0 <vPortEnterCritical+0x5c>)
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	b2db      	uxtb	r3, r3
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d00a      	beq.n	80121d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80121ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121be:	f383 8811 	msr	BASEPRI, r3
 80121c2:	f3bf 8f6f 	isb	sy
 80121c6:	f3bf 8f4f 	dsb	sy
 80121ca:	603b      	str	r3, [r7, #0]
}
 80121cc:	bf00      	nop
 80121ce:	e7fe      	b.n	80121ce <vPortEnterCritical+0x4a>
	}
}
 80121d0:	bf00      	nop
 80121d2:	370c      	adds	r7, #12
 80121d4:	46bd      	mov	sp, r7
 80121d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121da:	4770      	bx	lr
 80121dc:	200000a4 	.word	0x200000a4
 80121e0:	e000ed04 	.word	0xe000ed04

080121e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80121e4:	b480      	push	{r7}
 80121e6:	b083      	sub	sp, #12
 80121e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80121ea:	4b12      	ldr	r3, [pc, #72]	; (8012234 <vPortExitCritical+0x50>)
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d10a      	bne.n	8012208 <vPortExitCritical+0x24>
	__asm volatile
 80121f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121f6:	f383 8811 	msr	BASEPRI, r3
 80121fa:	f3bf 8f6f 	isb	sy
 80121fe:	f3bf 8f4f 	dsb	sy
 8012202:	607b      	str	r3, [r7, #4]
}
 8012204:	bf00      	nop
 8012206:	e7fe      	b.n	8012206 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012208:	4b0a      	ldr	r3, [pc, #40]	; (8012234 <vPortExitCritical+0x50>)
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	3b01      	subs	r3, #1
 801220e:	4a09      	ldr	r2, [pc, #36]	; (8012234 <vPortExitCritical+0x50>)
 8012210:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012212:	4b08      	ldr	r3, [pc, #32]	; (8012234 <vPortExitCritical+0x50>)
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d105      	bne.n	8012226 <vPortExitCritical+0x42>
 801221a:	2300      	movs	r3, #0
 801221c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801221e:	683b      	ldr	r3, [r7, #0]
 8012220:	f383 8811 	msr	BASEPRI, r3
}
 8012224:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012226:	bf00      	nop
 8012228:	370c      	adds	r7, #12
 801222a:	46bd      	mov	sp, r7
 801222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012230:	4770      	bx	lr
 8012232:	bf00      	nop
 8012234:	200000a4 	.word	0x200000a4
	...

08012240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012240:	f3ef 8009 	mrs	r0, PSP
 8012244:	f3bf 8f6f 	isb	sy
 8012248:	4b15      	ldr	r3, [pc, #84]	; (80122a0 <pxCurrentTCBConst>)
 801224a:	681a      	ldr	r2, [r3, #0]
 801224c:	f01e 0f10 	tst.w	lr, #16
 8012250:	bf08      	it	eq
 8012252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801225a:	6010      	str	r0, [r2, #0]
 801225c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012260:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012264:	f380 8811 	msr	BASEPRI, r0
 8012268:	f3bf 8f4f 	dsb	sy
 801226c:	f3bf 8f6f 	isb	sy
 8012270:	f7fe ffaa 	bl	80111c8 <vTaskSwitchContext>
 8012274:	f04f 0000 	mov.w	r0, #0
 8012278:	f380 8811 	msr	BASEPRI, r0
 801227c:	bc09      	pop	{r0, r3}
 801227e:	6819      	ldr	r1, [r3, #0]
 8012280:	6808      	ldr	r0, [r1, #0]
 8012282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012286:	f01e 0f10 	tst.w	lr, #16
 801228a:	bf08      	it	eq
 801228c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012290:	f380 8809 	msr	PSP, r0
 8012294:	f3bf 8f6f 	isb	sy
 8012298:	4770      	bx	lr
 801229a:	bf00      	nop
 801229c:	f3af 8000 	nop.w

080122a0 <pxCurrentTCBConst>:
 80122a0:	20000db8 	.word	0x20000db8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80122a4:	bf00      	nop
 80122a6:	bf00      	nop

080122a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b082      	sub	sp, #8
 80122ac:	af00      	add	r7, sp, #0
	__asm volatile
 80122ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122b2:	f383 8811 	msr	BASEPRI, r3
 80122b6:	f3bf 8f6f 	isb	sy
 80122ba:	f3bf 8f4f 	dsb	sy
 80122be:	607b      	str	r3, [r7, #4]
}
 80122c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80122c2:	f7fe fec7 	bl	8011054 <xTaskIncrementTick>
 80122c6:	4603      	mov	r3, r0
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d003      	beq.n	80122d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80122cc:	4b06      	ldr	r3, [pc, #24]	; (80122e8 <xPortSysTickHandler+0x40>)
 80122ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122d2:	601a      	str	r2, [r3, #0]
 80122d4:	2300      	movs	r3, #0
 80122d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80122d8:	683b      	ldr	r3, [r7, #0]
 80122da:	f383 8811 	msr	BASEPRI, r3
}
 80122de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80122e0:	bf00      	nop
 80122e2:	3708      	adds	r7, #8
 80122e4:	46bd      	mov	sp, r7
 80122e6:	bd80      	pop	{r7, pc}
 80122e8:	e000ed04 	.word	0xe000ed04

080122ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80122ec:	b480      	push	{r7}
 80122ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80122f0:	4b0b      	ldr	r3, [pc, #44]	; (8012320 <vPortSetupTimerInterrupt+0x34>)
 80122f2:	2200      	movs	r2, #0
 80122f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80122f6:	4b0b      	ldr	r3, [pc, #44]	; (8012324 <vPortSetupTimerInterrupt+0x38>)
 80122f8:	2200      	movs	r2, #0
 80122fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80122fc:	4b0a      	ldr	r3, [pc, #40]	; (8012328 <vPortSetupTimerInterrupt+0x3c>)
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	4a0a      	ldr	r2, [pc, #40]	; (801232c <vPortSetupTimerInterrupt+0x40>)
 8012302:	fba2 2303 	umull	r2, r3, r2, r3
 8012306:	099b      	lsrs	r3, r3, #6
 8012308:	4a09      	ldr	r2, [pc, #36]	; (8012330 <vPortSetupTimerInterrupt+0x44>)
 801230a:	3b01      	subs	r3, #1
 801230c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801230e:	4b04      	ldr	r3, [pc, #16]	; (8012320 <vPortSetupTimerInterrupt+0x34>)
 8012310:	2207      	movs	r2, #7
 8012312:	601a      	str	r2, [r3, #0]
}
 8012314:	bf00      	nop
 8012316:	46bd      	mov	sp, r7
 8012318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801231c:	4770      	bx	lr
 801231e:	bf00      	nop
 8012320:	e000e010 	.word	0xe000e010
 8012324:	e000e018 	.word	0xe000e018
 8012328:	20000060 	.word	0x20000060
 801232c:	10624dd3 	.word	0x10624dd3
 8012330:	e000e014 	.word	0xe000e014

08012334 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012334:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012344 <vPortEnableVFP+0x10>
 8012338:	6801      	ldr	r1, [r0, #0]
 801233a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801233e:	6001      	str	r1, [r0, #0]
 8012340:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012342:	bf00      	nop
 8012344:	e000ed88 	.word	0xe000ed88

08012348 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012348:	b480      	push	{r7}
 801234a:	b085      	sub	sp, #20
 801234c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801234e:	f3ef 8305 	mrs	r3, IPSR
 8012352:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	2b0f      	cmp	r3, #15
 8012358:	d914      	bls.n	8012384 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801235a:	4a17      	ldr	r2, [pc, #92]	; (80123b8 <vPortValidateInterruptPriority+0x70>)
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	4413      	add	r3, r2
 8012360:	781b      	ldrb	r3, [r3, #0]
 8012362:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012364:	4b15      	ldr	r3, [pc, #84]	; (80123bc <vPortValidateInterruptPriority+0x74>)
 8012366:	781b      	ldrb	r3, [r3, #0]
 8012368:	7afa      	ldrb	r2, [r7, #11]
 801236a:	429a      	cmp	r2, r3
 801236c:	d20a      	bcs.n	8012384 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801236e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012372:	f383 8811 	msr	BASEPRI, r3
 8012376:	f3bf 8f6f 	isb	sy
 801237a:	f3bf 8f4f 	dsb	sy
 801237e:	607b      	str	r3, [r7, #4]
}
 8012380:	bf00      	nop
 8012382:	e7fe      	b.n	8012382 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012384:	4b0e      	ldr	r3, [pc, #56]	; (80123c0 <vPortValidateInterruptPriority+0x78>)
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801238c:	4b0d      	ldr	r3, [pc, #52]	; (80123c4 <vPortValidateInterruptPriority+0x7c>)
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	429a      	cmp	r2, r3
 8012392:	d90a      	bls.n	80123aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012398:	f383 8811 	msr	BASEPRI, r3
 801239c:	f3bf 8f6f 	isb	sy
 80123a0:	f3bf 8f4f 	dsb	sy
 80123a4:	603b      	str	r3, [r7, #0]
}
 80123a6:	bf00      	nop
 80123a8:	e7fe      	b.n	80123a8 <vPortValidateInterruptPriority+0x60>
	}
 80123aa:	bf00      	nop
 80123ac:	3714      	adds	r7, #20
 80123ae:	46bd      	mov	sp, r7
 80123b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b4:	4770      	bx	lr
 80123b6:	bf00      	nop
 80123b8:	e000e3f0 	.word	0xe000e3f0
 80123bc:	200013e4 	.word	0x200013e4
 80123c0:	e000ed0c 	.word	0xe000ed0c
 80123c4:	200013e8 	.word	0x200013e8

080123c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80123c8:	b580      	push	{r7, lr}
 80123ca:	b08a      	sub	sp, #40	; 0x28
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80123d0:	2300      	movs	r3, #0
 80123d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80123d4:	f7fe fd82 	bl	8010edc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80123d8:	4b5b      	ldr	r3, [pc, #364]	; (8012548 <pvPortMalloc+0x180>)
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d101      	bne.n	80123e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80123e0:	f000 f920 	bl	8012624 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80123e4:	4b59      	ldr	r3, [pc, #356]	; (801254c <pvPortMalloc+0x184>)
 80123e6:	681a      	ldr	r2, [r3, #0]
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	4013      	ands	r3, r2
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	f040 8093 	bne.w	8012518 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d01d      	beq.n	8012434 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80123f8:	2208      	movs	r2, #8
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	4413      	add	r3, r2
 80123fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	f003 0307 	and.w	r3, r3, #7
 8012406:	2b00      	cmp	r3, #0
 8012408:	d014      	beq.n	8012434 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	f023 0307 	bic.w	r3, r3, #7
 8012410:	3308      	adds	r3, #8
 8012412:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	f003 0307 	and.w	r3, r3, #7
 801241a:	2b00      	cmp	r3, #0
 801241c:	d00a      	beq.n	8012434 <pvPortMalloc+0x6c>
	__asm volatile
 801241e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012422:	f383 8811 	msr	BASEPRI, r3
 8012426:	f3bf 8f6f 	isb	sy
 801242a:	f3bf 8f4f 	dsb	sy
 801242e:	617b      	str	r3, [r7, #20]
}
 8012430:	bf00      	nop
 8012432:	e7fe      	b.n	8012432 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d06e      	beq.n	8012518 <pvPortMalloc+0x150>
 801243a:	4b45      	ldr	r3, [pc, #276]	; (8012550 <pvPortMalloc+0x188>)
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	687a      	ldr	r2, [r7, #4]
 8012440:	429a      	cmp	r2, r3
 8012442:	d869      	bhi.n	8012518 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012444:	4b43      	ldr	r3, [pc, #268]	; (8012554 <pvPortMalloc+0x18c>)
 8012446:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012448:	4b42      	ldr	r3, [pc, #264]	; (8012554 <pvPortMalloc+0x18c>)
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801244e:	e004      	b.n	801245a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012452:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801245c:	685b      	ldr	r3, [r3, #4]
 801245e:	687a      	ldr	r2, [r7, #4]
 8012460:	429a      	cmp	r2, r3
 8012462:	d903      	bls.n	801246c <pvPortMalloc+0xa4>
 8012464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d1f1      	bne.n	8012450 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801246c:	4b36      	ldr	r3, [pc, #216]	; (8012548 <pvPortMalloc+0x180>)
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012472:	429a      	cmp	r2, r3
 8012474:	d050      	beq.n	8012518 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012476:	6a3b      	ldr	r3, [r7, #32]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	2208      	movs	r2, #8
 801247c:	4413      	add	r3, r2
 801247e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012482:	681a      	ldr	r2, [r3, #0]
 8012484:	6a3b      	ldr	r3, [r7, #32]
 8012486:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801248a:	685a      	ldr	r2, [r3, #4]
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	1ad2      	subs	r2, r2, r3
 8012490:	2308      	movs	r3, #8
 8012492:	005b      	lsls	r3, r3, #1
 8012494:	429a      	cmp	r2, r3
 8012496:	d91f      	bls.n	80124d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	4413      	add	r3, r2
 801249e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80124a0:	69bb      	ldr	r3, [r7, #24]
 80124a2:	f003 0307 	and.w	r3, r3, #7
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d00a      	beq.n	80124c0 <pvPortMalloc+0xf8>
	__asm volatile
 80124aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124ae:	f383 8811 	msr	BASEPRI, r3
 80124b2:	f3bf 8f6f 	isb	sy
 80124b6:	f3bf 8f4f 	dsb	sy
 80124ba:	613b      	str	r3, [r7, #16]
}
 80124bc:	bf00      	nop
 80124be:	e7fe      	b.n	80124be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80124c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124c2:	685a      	ldr	r2, [r3, #4]
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	1ad2      	subs	r2, r2, r3
 80124c8:	69bb      	ldr	r3, [r7, #24]
 80124ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80124cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ce:	687a      	ldr	r2, [r7, #4]
 80124d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80124d2:	69b8      	ldr	r0, [r7, #24]
 80124d4:	f000 f908 	bl	80126e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80124d8:	4b1d      	ldr	r3, [pc, #116]	; (8012550 <pvPortMalloc+0x188>)
 80124da:	681a      	ldr	r2, [r3, #0]
 80124dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124de:	685b      	ldr	r3, [r3, #4]
 80124e0:	1ad3      	subs	r3, r2, r3
 80124e2:	4a1b      	ldr	r2, [pc, #108]	; (8012550 <pvPortMalloc+0x188>)
 80124e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80124e6:	4b1a      	ldr	r3, [pc, #104]	; (8012550 <pvPortMalloc+0x188>)
 80124e8:	681a      	ldr	r2, [r3, #0]
 80124ea:	4b1b      	ldr	r3, [pc, #108]	; (8012558 <pvPortMalloc+0x190>)
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	429a      	cmp	r2, r3
 80124f0:	d203      	bcs.n	80124fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80124f2:	4b17      	ldr	r3, [pc, #92]	; (8012550 <pvPortMalloc+0x188>)
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	4a18      	ldr	r2, [pc, #96]	; (8012558 <pvPortMalloc+0x190>)
 80124f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80124fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124fc:	685a      	ldr	r2, [r3, #4]
 80124fe:	4b13      	ldr	r3, [pc, #76]	; (801254c <pvPortMalloc+0x184>)
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	431a      	orrs	r2, r3
 8012504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012506:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801250a:	2200      	movs	r2, #0
 801250c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801250e:	4b13      	ldr	r3, [pc, #76]	; (801255c <pvPortMalloc+0x194>)
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	3301      	adds	r3, #1
 8012514:	4a11      	ldr	r2, [pc, #68]	; (801255c <pvPortMalloc+0x194>)
 8012516:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012518:	f7fe fcee 	bl	8010ef8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801251c:	69fb      	ldr	r3, [r7, #28]
 801251e:	f003 0307 	and.w	r3, r3, #7
 8012522:	2b00      	cmp	r3, #0
 8012524:	d00a      	beq.n	801253c <pvPortMalloc+0x174>
	__asm volatile
 8012526:	f04f 0350 	mov.w	r3, #80	; 0x50
 801252a:	f383 8811 	msr	BASEPRI, r3
 801252e:	f3bf 8f6f 	isb	sy
 8012532:	f3bf 8f4f 	dsb	sy
 8012536:	60fb      	str	r3, [r7, #12]
}
 8012538:	bf00      	nop
 801253a:	e7fe      	b.n	801253a <pvPortMalloc+0x172>
	return pvReturn;
 801253c:	69fb      	ldr	r3, [r7, #28]
}
 801253e:	4618      	mov	r0, r3
 8012540:	3728      	adds	r7, #40	; 0x28
 8012542:	46bd      	mov	sp, r7
 8012544:	bd80      	pop	{r7, pc}
 8012546:	bf00      	nop
 8012548:	20005a44 	.word	0x20005a44
 801254c:	20005a58 	.word	0x20005a58
 8012550:	20005a48 	.word	0x20005a48
 8012554:	20005a3c 	.word	0x20005a3c
 8012558:	20005a4c 	.word	0x20005a4c
 801255c:	20005a50 	.word	0x20005a50

08012560 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012560:	b580      	push	{r7, lr}
 8012562:	b086      	sub	sp, #24
 8012564:	af00      	add	r7, sp, #0
 8012566:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d04d      	beq.n	801260e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012572:	2308      	movs	r3, #8
 8012574:	425b      	negs	r3, r3
 8012576:	697a      	ldr	r2, [r7, #20]
 8012578:	4413      	add	r3, r2
 801257a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801257c:	697b      	ldr	r3, [r7, #20]
 801257e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012580:	693b      	ldr	r3, [r7, #16]
 8012582:	685a      	ldr	r2, [r3, #4]
 8012584:	4b24      	ldr	r3, [pc, #144]	; (8012618 <vPortFree+0xb8>)
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	4013      	ands	r3, r2
 801258a:	2b00      	cmp	r3, #0
 801258c:	d10a      	bne.n	80125a4 <vPortFree+0x44>
	__asm volatile
 801258e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012592:	f383 8811 	msr	BASEPRI, r3
 8012596:	f3bf 8f6f 	isb	sy
 801259a:	f3bf 8f4f 	dsb	sy
 801259e:	60fb      	str	r3, [r7, #12]
}
 80125a0:	bf00      	nop
 80125a2:	e7fe      	b.n	80125a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80125a4:	693b      	ldr	r3, [r7, #16]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d00a      	beq.n	80125c2 <vPortFree+0x62>
	__asm volatile
 80125ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125b0:	f383 8811 	msr	BASEPRI, r3
 80125b4:	f3bf 8f6f 	isb	sy
 80125b8:	f3bf 8f4f 	dsb	sy
 80125bc:	60bb      	str	r3, [r7, #8]
}
 80125be:	bf00      	nop
 80125c0:	e7fe      	b.n	80125c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80125c2:	693b      	ldr	r3, [r7, #16]
 80125c4:	685a      	ldr	r2, [r3, #4]
 80125c6:	4b14      	ldr	r3, [pc, #80]	; (8012618 <vPortFree+0xb8>)
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	4013      	ands	r3, r2
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d01e      	beq.n	801260e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80125d0:	693b      	ldr	r3, [r7, #16]
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d11a      	bne.n	801260e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80125d8:	693b      	ldr	r3, [r7, #16]
 80125da:	685a      	ldr	r2, [r3, #4]
 80125dc:	4b0e      	ldr	r3, [pc, #56]	; (8012618 <vPortFree+0xb8>)
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	43db      	mvns	r3, r3
 80125e2:	401a      	ands	r2, r3
 80125e4:	693b      	ldr	r3, [r7, #16]
 80125e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80125e8:	f7fe fc78 	bl	8010edc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80125ec:	693b      	ldr	r3, [r7, #16]
 80125ee:	685a      	ldr	r2, [r3, #4]
 80125f0:	4b0a      	ldr	r3, [pc, #40]	; (801261c <vPortFree+0xbc>)
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	4413      	add	r3, r2
 80125f6:	4a09      	ldr	r2, [pc, #36]	; (801261c <vPortFree+0xbc>)
 80125f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80125fa:	6938      	ldr	r0, [r7, #16]
 80125fc:	f000 f874 	bl	80126e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012600:	4b07      	ldr	r3, [pc, #28]	; (8012620 <vPortFree+0xc0>)
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	3301      	adds	r3, #1
 8012606:	4a06      	ldr	r2, [pc, #24]	; (8012620 <vPortFree+0xc0>)
 8012608:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801260a:	f7fe fc75 	bl	8010ef8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801260e:	bf00      	nop
 8012610:	3718      	adds	r7, #24
 8012612:	46bd      	mov	sp, r7
 8012614:	bd80      	pop	{r7, pc}
 8012616:	bf00      	nop
 8012618:	20005a58 	.word	0x20005a58
 801261c:	20005a48 	.word	0x20005a48
 8012620:	20005a54 	.word	0x20005a54

08012624 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012624:	b480      	push	{r7}
 8012626:	b085      	sub	sp, #20
 8012628:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801262a:	f244 6350 	movw	r3, #18000	; 0x4650
 801262e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012630:	4b27      	ldr	r3, [pc, #156]	; (80126d0 <prvHeapInit+0xac>)
 8012632:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	f003 0307 	and.w	r3, r3, #7
 801263a:	2b00      	cmp	r3, #0
 801263c:	d00c      	beq.n	8012658 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	3307      	adds	r3, #7
 8012642:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	f023 0307 	bic.w	r3, r3, #7
 801264a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801264c:	68ba      	ldr	r2, [r7, #8]
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	1ad3      	subs	r3, r2, r3
 8012652:	4a1f      	ldr	r2, [pc, #124]	; (80126d0 <prvHeapInit+0xac>)
 8012654:	4413      	add	r3, r2
 8012656:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801265c:	4a1d      	ldr	r2, [pc, #116]	; (80126d4 <prvHeapInit+0xb0>)
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012662:	4b1c      	ldr	r3, [pc, #112]	; (80126d4 <prvHeapInit+0xb0>)
 8012664:	2200      	movs	r2, #0
 8012666:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	68ba      	ldr	r2, [r7, #8]
 801266c:	4413      	add	r3, r2
 801266e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012670:	2208      	movs	r2, #8
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	1a9b      	subs	r3, r3, r2
 8012676:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	f023 0307 	bic.w	r3, r3, #7
 801267e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	4a15      	ldr	r2, [pc, #84]	; (80126d8 <prvHeapInit+0xb4>)
 8012684:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012686:	4b14      	ldr	r3, [pc, #80]	; (80126d8 <prvHeapInit+0xb4>)
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	2200      	movs	r2, #0
 801268c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801268e:	4b12      	ldr	r3, [pc, #72]	; (80126d8 <prvHeapInit+0xb4>)
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	2200      	movs	r2, #0
 8012694:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801269a:	683b      	ldr	r3, [r7, #0]
 801269c:	68fa      	ldr	r2, [r7, #12]
 801269e:	1ad2      	subs	r2, r2, r3
 80126a0:	683b      	ldr	r3, [r7, #0]
 80126a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80126a4:	4b0c      	ldr	r3, [pc, #48]	; (80126d8 <prvHeapInit+0xb4>)
 80126a6:	681a      	ldr	r2, [r3, #0]
 80126a8:	683b      	ldr	r3, [r7, #0]
 80126aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80126ac:	683b      	ldr	r3, [r7, #0]
 80126ae:	685b      	ldr	r3, [r3, #4]
 80126b0:	4a0a      	ldr	r2, [pc, #40]	; (80126dc <prvHeapInit+0xb8>)
 80126b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80126b4:	683b      	ldr	r3, [r7, #0]
 80126b6:	685b      	ldr	r3, [r3, #4]
 80126b8:	4a09      	ldr	r2, [pc, #36]	; (80126e0 <prvHeapInit+0xbc>)
 80126ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80126bc:	4b09      	ldr	r3, [pc, #36]	; (80126e4 <prvHeapInit+0xc0>)
 80126be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80126c2:	601a      	str	r2, [r3, #0]
}
 80126c4:	bf00      	nop
 80126c6:	3714      	adds	r7, #20
 80126c8:	46bd      	mov	sp, r7
 80126ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ce:	4770      	bx	lr
 80126d0:	200013ec 	.word	0x200013ec
 80126d4:	20005a3c 	.word	0x20005a3c
 80126d8:	20005a44 	.word	0x20005a44
 80126dc:	20005a4c 	.word	0x20005a4c
 80126e0:	20005a48 	.word	0x20005a48
 80126e4:	20005a58 	.word	0x20005a58

080126e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80126e8:	b480      	push	{r7}
 80126ea:	b085      	sub	sp, #20
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80126f0:	4b28      	ldr	r3, [pc, #160]	; (8012794 <prvInsertBlockIntoFreeList+0xac>)
 80126f2:	60fb      	str	r3, [r7, #12]
 80126f4:	e002      	b.n	80126fc <prvInsertBlockIntoFreeList+0x14>
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	60fb      	str	r3, [r7, #12]
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	687a      	ldr	r2, [r7, #4]
 8012702:	429a      	cmp	r2, r3
 8012704:	d8f7      	bhi.n	80126f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	685b      	ldr	r3, [r3, #4]
 801270e:	68ba      	ldr	r2, [r7, #8]
 8012710:	4413      	add	r3, r2
 8012712:	687a      	ldr	r2, [r7, #4]
 8012714:	429a      	cmp	r2, r3
 8012716:	d108      	bne.n	801272a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	685a      	ldr	r2, [r3, #4]
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	685b      	ldr	r3, [r3, #4]
 8012720:	441a      	add	r2, r3
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	685b      	ldr	r3, [r3, #4]
 8012732:	68ba      	ldr	r2, [r7, #8]
 8012734:	441a      	add	r2, r3
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	429a      	cmp	r2, r3
 801273c:	d118      	bne.n	8012770 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	681a      	ldr	r2, [r3, #0]
 8012742:	4b15      	ldr	r3, [pc, #84]	; (8012798 <prvInsertBlockIntoFreeList+0xb0>)
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	429a      	cmp	r2, r3
 8012748:	d00d      	beq.n	8012766 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	685a      	ldr	r2, [r3, #4]
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	685b      	ldr	r3, [r3, #4]
 8012754:	441a      	add	r2, r3
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	681a      	ldr	r2, [r3, #0]
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	601a      	str	r2, [r3, #0]
 8012764:	e008      	b.n	8012778 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012766:	4b0c      	ldr	r3, [pc, #48]	; (8012798 <prvInsertBlockIntoFreeList+0xb0>)
 8012768:	681a      	ldr	r2, [r3, #0]
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	601a      	str	r2, [r3, #0]
 801276e:	e003      	b.n	8012778 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	681a      	ldr	r2, [r3, #0]
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012778:	68fa      	ldr	r2, [r7, #12]
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	429a      	cmp	r2, r3
 801277e:	d002      	beq.n	8012786 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	687a      	ldr	r2, [r7, #4]
 8012784:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012786:	bf00      	nop
 8012788:	3714      	adds	r7, #20
 801278a:	46bd      	mov	sp, r7
 801278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012790:	4770      	bx	lr
 8012792:	bf00      	nop
 8012794:	20005a3c 	.word	0x20005a3c
 8012798:	20005a44 	.word	0x20005a44

0801279c <_Znwj>:
 801279c:	2801      	cmp	r0, #1
 801279e:	bf38      	it	cc
 80127a0:	2001      	movcc	r0, #1
 80127a2:	b510      	push	{r4, lr}
 80127a4:	4604      	mov	r4, r0
 80127a6:	4620      	mov	r0, r4
 80127a8:	f000 fa84 	bl	8012cb4 <malloc>
 80127ac:	b930      	cbnz	r0, 80127bc <_Znwj+0x20>
 80127ae:	f000 f81d 	bl	80127ec <_ZSt15get_new_handlerv>
 80127b2:	b908      	cbnz	r0, 80127b8 <_Znwj+0x1c>
 80127b4:	f000 f82c 	bl	8012810 <abort>
 80127b8:	4780      	blx	r0
 80127ba:	e7f4      	b.n	80127a6 <_Znwj+0xa>
 80127bc:	bd10      	pop	{r4, pc}

080127be <_Znaj>:
 80127be:	f7ff bfed 	b.w	801279c <_Znwj>

080127c2 <__cxa_pure_virtual>:
 80127c2:	b508      	push	{r3, lr}
 80127c4:	f000 f80c 	bl	80127e0 <_ZSt9terminatev>

080127c8 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80127c8:	b508      	push	{r3, lr}
 80127ca:	4780      	blx	r0
 80127cc:	f000 f820 	bl	8012810 <abort>

080127d0 <_ZSt13get_terminatev>:
 80127d0:	4b02      	ldr	r3, [pc, #8]	; (80127dc <_ZSt13get_terminatev+0xc>)
 80127d2:	6818      	ldr	r0, [r3, #0]
 80127d4:	f3bf 8f5b 	dmb	ish
 80127d8:	4770      	bx	lr
 80127da:	bf00      	nop
 80127dc:	200000a8 	.word	0x200000a8

080127e0 <_ZSt9terminatev>:
 80127e0:	b508      	push	{r3, lr}
 80127e2:	f7ff fff5 	bl	80127d0 <_ZSt13get_terminatev>
 80127e6:	f7ff ffef 	bl	80127c8 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080127ec <_ZSt15get_new_handlerv>:
 80127ec:	4b02      	ldr	r3, [pc, #8]	; (80127f8 <_ZSt15get_new_handlerv+0xc>)
 80127ee:	6818      	ldr	r0, [r3, #0]
 80127f0:	f3bf 8f5b 	dmb	ish
 80127f4:	4770      	bx	lr
 80127f6:	bf00      	nop
 80127f8:	20005a5c 	.word	0x20005a5c
 80127fc:	00000000 	.word	0x00000000

08012800 <nan>:
 8012800:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012808 <nan+0x8>
 8012804:	4770      	bx	lr
 8012806:	bf00      	nop
 8012808:	00000000 	.word	0x00000000
 801280c:	7ff80000 	.word	0x7ff80000

08012810 <abort>:
 8012810:	b508      	push	{r3, lr}
 8012812:	2006      	movs	r0, #6
 8012814:	f001 fd66 	bl	80142e4 <raise>
 8012818:	2001      	movs	r0, #1
 801281a:	f006 f94b 	bl	8018ab4 <_exit>

0801281e <atoi>:
 801281e:	220a      	movs	r2, #10
 8012820:	2100      	movs	r1, #0
 8012822:	f002 bd43 	b.w	80152ac <strtol>

08012826 <atol>:
 8012826:	220a      	movs	r2, #10
 8012828:	2100      	movs	r1, #0
 801282a:	f002 bd3f 	b.w	80152ac <strtol>
	...

08012830 <__errno>:
 8012830:	4b01      	ldr	r3, [pc, #4]	; (8012838 <__errno+0x8>)
 8012832:	6818      	ldr	r0, [r3, #0]
 8012834:	4770      	bx	lr
 8012836:	bf00      	nop
 8012838:	200000ac 	.word	0x200000ac

0801283c <std>:
 801283c:	2300      	movs	r3, #0
 801283e:	b510      	push	{r4, lr}
 8012840:	4604      	mov	r4, r0
 8012842:	e9c0 3300 	strd	r3, r3, [r0]
 8012846:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801284a:	6083      	str	r3, [r0, #8]
 801284c:	8181      	strh	r1, [r0, #12]
 801284e:	6643      	str	r3, [r0, #100]	; 0x64
 8012850:	81c2      	strh	r2, [r0, #14]
 8012852:	6183      	str	r3, [r0, #24]
 8012854:	4619      	mov	r1, r3
 8012856:	2208      	movs	r2, #8
 8012858:	305c      	adds	r0, #92	; 0x5c
 801285a:	f000 fa63 	bl	8012d24 <memset>
 801285e:	4b05      	ldr	r3, [pc, #20]	; (8012874 <std+0x38>)
 8012860:	6263      	str	r3, [r4, #36]	; 0x24
 8012862:	4b05      	ldr	r3, [pc, #20]	; (8012878 <std+0x3c>)
 8012864:	62a3      	str	r3, [r4, #40]	; 0x28
 8012866:	4b05      	ldr	r3, [pc, #20]	; (801287c <std+0x40>)
 8012868:	62e3      	str	r3, [r4, #44]	; 0x2c
 801286a:	4b05      	ldr	r3, [pc, #20]	; (8012880 <std+0x44>)
 801286c:	6224      	str	r4, [r4, #32]
 801286e:	6323      	str	r3, [r4, #48]	; 0x30
 8012870:	bd10      	pop	{r4, pc}
 8012872:	bf00      	nop
 8012874:	080143b5 	.word	0x080143b5
 8012878:	080143db 	.word	0x080143db
 801287c:	08014413 	.word	0x08014413
 8012880:	08014437 	.word	0x08014437

08012884 <_cleanup_r>:
 8012884:	4901      	ldr	r1, [pc, #4]	; (801288c <_cleanup_r+0x8>)
 8012886:	f000 b8af 	b.w	80129e8 <_fwalk_reent>
 801288a:	bf00      	nop
 801288c:	08016865 	.word	0x08016865

08012890 <__sfmoreglue>:
 8012890:	b570      	push	{r4, r5, r6, lr}
 8012892:	1e4a      	subs	r2, r1, #1
 8012894:	2568      	movs	r5, #104	; 0x68
 8012896:	4355      	muls	r5, r2
 8012898:	460e      	mov	r6, r1
 801289a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801289e:	f000 fd17 	bl	80132d0 <_malloc_r>
 80128a2:	4604      	mov	r4, r0
 80128a4:	b140      	cbz	r0, 80128b8 <__sfmoreglue+0x28>
 80128a6:	2100      	movs	r1, #0
 80128a8:	e9c0 1600 	strd	r1, r6, [r0]
 80128ac:	300c      	adds	r0, #12
 80128ae:	60a0      	str	r0, [r4, #8]
 80128b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80128b4:	f000 fa36 	bl	8012d24 <memset>
 80128b8:	4620      	mov	r0, r4
 80128ba:	bd70      	pop	{r4, r5, r6, pc}

080128bc <__sfp_lock_acquire>:
 80128bc:	4801      	ldr	r0, [pc, #4]	; (80128c4 <__sfp_lock_acquire+0x8>)
 80128be:	f000 b9f5 	b.w	8012cac <__retarget_lock_acquire_recursive>
 80128c2:	bf00      	nop
 80128c4:	200064f8 	.word	0x200064f8

080128c8 <__sfp_lock_release>:
 80128c8:	4801      	ldr	r0, [pc, #4]	; (80128d0 <__sfp_lock_release+0x8>)
 80128ca:	f000 b9f1 	b.w	8012cb0 <__retarget_lock_release_recursive>
 80128ce:	bf00      	nop
 80128d0:	200064f8 	.word	0x200064f8

080128d4 <__sinit_lock_acquire>:
 80128d4:	4801      	ldr	r0, [pc, #4]	; (80128dc <__sinit_lock_acquire+0x8>)
 80128d6:	f000 b9e9 	b.w	8012cac <__retarget_lock_acquire_recursive>
 80128da:	bf00      	nop
 80128dc:	200064f3 	.word	0x200064f3

080128e0 <__sinit_lock_release>:
 80128e0:	4801      	ldr	r0, [pc, #4]	; (80128e8 <__sinit_lock_release+0x8>)
 80128e2:	f000 b9e5 	b.w	8012cb0 <__retarget_lock_release_recursive>
 80128e6:	bf00      	nop
 80128e8:	200064f3 	.word	0x200064f3

080128ec <__sinit>:
 80128ec:	b510      	push	{r4, lr}
 80128ee:	4604      	mov	r4, r0
 80128f0:	f7ff fff0 	bl	80128d4 <__sinit_lock_acquire>
 80128f4:	69a3      	ldr	r3, [r4, #24]
 80128f6:	b11b      	cbz	r3, 8012900 <__sinit+0x14>
 80128f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128fc:	f7ff bff0 	b.w	80128e0 <__sinit_lock_release>
 8012900:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012904:	6523      	str	r3, [r4, #80]	; 0x50
 8012906:	4b13      	ldr	r3, [pc, #76]	; (8012954 <__sinit+0x68>)
 8012908:	4a13      	ldr	r2, [pc, #76]	; (8012958 <__sinit+0x6c>)
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	62a2      	str	r2, [r4, #40]	; 0x28
 801290e:	42a3      	cmp	r3, r4
 8012910:	bf04      	itt	eq
 8012912:	2301      	moveq	r3, #1
 8012914:	61a3      	streq	r3, [r4, #24]
 8012916:	4620      	mov	r0, r4
 8012918:	f000 f820 	bl	801295c <__sfp>
 801291c:	6060      	str	r0, [r4, #4]
 801291e:	4620      	mov	r0, r4
 8012920:	f000 f81c 	bl	801295c <__sfp>
 8012924:	60a0      	str	r0, [r4, #8]
 8012926:	4620      	mov	r0, r4
 8012928:	f000 f818 	bl	801295c <__sfp>
 801292c:	2200      	movs	r2, #0
 801292e:	60e0      	str	r0, [r4, #12]
 8012930:	2104      	movs	r1, #4
 8012932:	6860      	ldr	r0, [r4, #4]
 8012934:	f7ff ff82 	bl	801283c <std>
 8012938:	68a0      	ldr	r0, [r4, #8]
 801293a:	2201      	movs	r2, #1
 801293c:	2109      	movs	r1, #9
 801293e:	f7ff ff7d 	bl	801283c <std>
 8012942:	68e0      	ldr	r0, [r4, #12]
 8012944:	2202      	movs	r2, #2
 8012946:	2112      	movs	r1, #18
 8012948:	f7ff ff78 	bl	801283c <std>
 801294c:	2301      	movs	r3, #1
 801294e:	61a3      	str	r3, [r4, #24]
 8012950:	e7d2      	b.n	80128f8 <__sinit+0xc>
 8012952:	bf00      	nop
 8012954:	0801aab4 	.word	0x0801aab4
 8012958:	08012885 	.word	0x08012885

0801295c <__sfp>:
 801295c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801295e:	4607      	mov	r7, r0
 8012960:	f7ff ffac 	bl	80128bc <__sfp_lock_acquire>
 8012964:	4b1e      	ldr	r3, [pc, #120]	; (80129e0 <__sfp+0x84>)
 8012966:	681e      	ldr	r6, [r3, #0]
 8012968:	69b3      	ldr	r3, [r6, #24]
 801296a:	b913      	cbnz	r3, 8012972 <__sfp+0x16>
 801296c:	4630      	mov	r0, r6
 801296e:	f7ff ffbd 	bl	80128ec <__sinit>
 8012972:	3648      	adds	r6, #72	; 0x48
 8012974:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012978:	3b01      	subs	r3, #1
 801297a:	d503      	bpl.n	8012984 <__sfp+0x28>
 801297c:	6833      	ldr	r3, [r6, #0]
 801297e:	b30b      	cbz	r3, 80129c4 <__sfp+0x68>
 8012980:	6836      	ldr	r6, [r6, #0]
 8012982:	e7f7      	b.n	8012974 <__sfp+0x18>
 8012984:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012988:	b9d5      	cbnz	r5, 80129c0 <__sfp+0x64>
 801298a:	4b16      	ldr	r3, [pc, #88]	; (80129e4 <__sfp+0x88>)
 801298c:	60e3      	str	r3, [r4, #12]
 801298e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012992:	6665      	str	r5, [r4, #100]	; 0x64
 8012994:	f000 f988 	bl	8012ca8 <__retarget_lock_init_recursive>
 8012998:	f7ff ff96 	bl	80128c8 <__sfp_lock_release>
 801299c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80129a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80129a4:	6025      	str	r5, [r4, #0]
 80129a6:	61a5      	str	r5, [r4, #24]
 80129a8:	2208      	movs	r2, #8
 80129aa:	4629      	mov	r1, r5
 80129ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80129b0:	f000 f9b8 	bl	8012d24 <memset>
 80129b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80129b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80129bc:	4620      	mov	r0, r4
 80129be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129c0:	3468      	adds	r4, #104	; 0x68
 80129c2:	e7d9      	b.n	8012978 <__sfp+0x1c>
 80129c4:	2104      	movs	r1, #4
 80129c6:	4638      	mov	r0, r7
 80129c8:	f7ff ff62 	bl	8012890 <__sfmoreglue>
 80129cc:	4604      	mov	r4, r0
 80129ce:	6030      	str	r0, [r6, #0]
 80129d0:	2800      	cmp	r0, #0
 80129d2:	d1d5      	bne.n	8012980 <__sfp+0x24>
 80129d4:	f7ff ff78 	bl	80128c8 <__sfp_lock_release>
 80129d8:	230c      	movs	r3, #12
 80129da:	603b      	str	r3, [r7, #0]
 80129dc:	e7ee      	b.n	80129bc <__sfp+0x60>
 80129de:	bf00      	nop
 80129e0:	0801aab4 	.word	0x0801aab4
 80129e4:	ffff0001 	.word	0xffff0001

080129e8 <_fwalk_reent>:
 80129e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80129ec:	4606      	mov	r6, r0
 80129ee:	4688      	mov	r8, r1
 80129f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80129f4:	2700      	movs	r7, #0
 80129f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80129fa:	f1b9 0901 	subs.w	r9, r9, #1
 80129fe:	d505      	bpl.n	8012a0c <_fwalk_reent+0x24>
 8012a00:	6824      	ldr	r4, [r4, #0]
 8012a02:	2c00      	cmp	r4, #0
 8012a04:	d1f7      	bne.n	80129f6 <_fwalk_reent+0xe>
 8012a06:	4638      	mov	r0, r7
 8012a08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a0c:	89ab      	ldrh	r3, [r5, #12]
 8012a0e:	2b01      	cmp	r3, #1
 8012a10:	d907      	bls.n	8012a22 <_fwalk_reent+0x3a>
 8012a12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012a16:	3301      	adds	r3, #1
 8012a18:	d003      	beq.n	8012a22 <_fwalk_reent+0x3a>
 8012a1a:	4629      	mov	r1, r5
 8012a1c:	4630      	mov	r0, r6
 8012a1e:	47c0      	blx	r8
 8012a20:	4307      	orrs	r7, r0
 8012a22:	3568      	adds	r5, #104	; 0x68
 8012a24:	e7e9      	b.n	80129fa <_fwalk_reent+0x12>
	...

08012a28 <__libc_init_array>:
 8012a28:	b570      	push	{r4, r5, r6, lr}
 8012a2a:	4d0d      	ldr	r5, [pc, #52]	; (8012a60 <__libc_init_array+0x38>)
 8012a2c:	4c0d      	ldr	r4, [pc, #52]	; (8012a64 <__libc_init_array+0x3c>)
 8012a2e:	1b64      	subs	r4, r4, r5
 8012a30:	10a4      	asrs	r4, r4, #2
 8012a32:	2600      	movs	r6, #0
 8012a34:	42a6      	cmp	r6, r4
 8012a36:	d109      	bne.n	8012a4c <__libc_init_array+0x24>
 8012a38:	4d0b      	ldr	r5, [pc, #44]	; (8012a68 <__libc_init_array+0x40>)
 8012a3a:	4c0c      	ldr	r4, [pc, #48]	; (8012a6c <__libc_init_array+0x44>)
 8012a3c:	f006 f83c 	bl	8018ab8 <_init>
 8012a40:	1b64      	subs	r4, r4, r5
 8012a42:	10a4      	asrs	r4, r4, #2
 8012a44:	2600      	movs	r6, #0
 8012a46:	42a6      	cmp	r6, r4
 8012a48:	d105      	bne.n	8012a56 <__libc_init_array+0x2e>
 8012a4a:	bd70      	pop	{r4, r5, r6, pc}
 8012a4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012a50:	4798      	blx	r3
 8012a52:	3601      	adds	r6, #1
 8012a54:	e7ee      	b.n	8012a34 <__libc_init_array+0xc>
 8012a56:	f855 3b04 	ldr.w	r3, [r5], #4
 8012a5a:	4798      	blx	r3
 8012a5c:	3601      	adds	r6, #1
 8012a5e:	e7f2      	b.n	8012a46 <__libc_init_array+0x1e>
 8012a60:	0801afe0 	.word	0x0801afe0
 8012a64:	0801afe0 	.word	0x0801afe0
 8012a68:	0801afe0 	.word	0x0801afe0
 8012a6c:	0801afe8 	.word	0x0801afe8

08012a70 <isxdigit>:
 8012a70:	4b02      	ldr	r3, [pc, #8]	; (8012a7c <isxdigit+0xc>)
 8012a72:	4418      	add	r0, r3
 8012a74:	7840      	ldrb	r0, [r0, #1]
 8012a76:	f000 0044 	and.w	r0, r0, #68	; 0x44
 8012a7a:	4770      	bx	lr
 8012a7c:	0801a950 	.word	0x0801a950

08012a80 <localtime>:
 8012a80:	b538      	push	{r3, r4, r5, lr}
 8012a82:	4b0b      	ldr	r3, [pc, #44]	; (8012ab0 <localtime+0x30>)
 8012a84:	681d      	ldr	r5, [r3, #0]
 8012a86:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8012a88:	4604      	mov	r4, r0
 8012a8a:	b953      	cbnz	r3, 8012aa2 <localtime+0x22>
 8012a8c:	2024      	movs	r0, #36	; 0x24
 8012a8e:	f000 f911 	bl	8012cb4 <malloc>
 8012a92:	4602      	mov	r2, r0
 8012a94:	63e8      	str	r0, [r5, #60]	; 0x3c
 8012a96:	b920      	cbnz	r0, 8012aa2 <localtime+0x22>
 8012a98:	4b06      	ldr	r3, [pc, #24]	; (8012ab4 <localtime+0x34>)
 8012a9a:	4807      	ldr	r0, [pc, #28]	; (8012ab8 <localtime+0x38>)
 8012a9c:	2132      	movs	r1, #50	; 0x32
 8012a9e:	f002 ff9f 	bl	80159e0 <__assert_func>
 8012aa2:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8012aa4:	4620      	mov	r0, r4
 8012aa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012aaa:	f000 b807 	b.w	8012abc <localtime_r>
 8012aae:	bf00      	nop
 8012ab0:	200000ac 	.word	0x200000ac
 8012ab4:	0801aab8 	.word	0x0801aab8
 8012ab8:	0801aacf 	.word	0x0801aacf

08012abc <localtime_r>:
 8012abc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012ac0:	4607      	mov	r7, r0
 8012ac2:	9101      	str	r1, [sp, #4]
 8012ac4:	f004 face 	bl	8017064 <__gettzinfo>
 8012ac8:	9901      	ldr	r1, [sp, #4]
 8012aca:	4680      	mov	r8, r0
 8012acc:	4638      	mov	r0, r7
 8012ace:	f004 facd 	bl	801706c <gmtime_r>
 8012ad2:	6943      	ldr	r3, [r0, #20]
 8012ad4:	079a      	lsls	r2, r3, #30
 8012ad6:	4604      	mov	r4, r0
 8012ad8:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 8012adc:	d105      	bne.n	8012aea <localtime_r+0x2e>
 8012ade:	2264      	movs	r2, #100	; 0x64
 8012ae0:	fb96 f3f2 	sdiv	r3, r6, r2
 8012ae4:	fb02 6313 	mls	r3, r2, r3, r6
 8012ae8:	bb7b      	cbnz	r3, 8012b4a <localtime_r+0x8e>
 8012aea:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8012aee:	fb96 f5f3 	sdiv	r5, r6, r3
 8012af2:	fb03 6515 	mls	r5, r3, r5, r6
 8012af6:	fab5 f585 	clz	r5, r5
 8012afa:	096d      	lsrs	r5, r5, #5
 8012afc:	4b68      	ldr	r3, [pc, #416]	; (8012ca0 <localtime_r+0x1e4>)
 8012afe:	2230      	movs	r2, #48	; 0x30
 8012b00:	fb02 3505 	mla	r5, r2, r5, r3
 8012b04:	f002 fd0c 	bl	8015520 <__tz_lock>
 8012b08:	f002 fd16 	bl	8015538 <_tzset_unlocked>
 8012b0c:	4b65      	ldr	r3, [pc, #404]	; (8012ca4 <localtime_r+0x1e8>)
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	b353      	cbz	r3, 8012b68 <localtime_r+0xac>
 8012b12:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012b16:	42b3      	cmp	r3, r6
 8012b18:	d119      	bne.n	8012b4e <localtime_r+0x92>
 8012b1a:	f8d8 1000 	ldr.w	r1, [r8]
 8012b1e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8012b22:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 8012b26:	b9d1      	cbnz	r1, 8012b5e <localtime_r+0xa2>
 8012b28:	4296      	cmp	r6, r2
 8012b2a:	eb77 0303 	sbcs.w	r3, r7, r3
 8012b2e:	da23      	bge.n	8012b78 <localtime_r+0xbc>
 8012b30:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8012b34:	4296      	cmp	r6, r2
 8012b36:	eb77 0303 	sbcs.w	r3, r7, r3
 8012b3a:	bfb4      	ite	lt
 8012b3c:	2301      	movlt	r3, #1
 8012b3e:	2300      	movge	r3, #0
 8012b40:	6223      	str	r3, [r4, #32]
 8012b42:	db1b      	blt.n	8012b7c <localtime_r+0xc0>
 8012b44:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 8012b48:	e01a      	b.n	8012b80 <localtime_r+0xc4>
 8012b4a:	2501      	movs	r5, #1
 8012b4c:	e7d6      	b.n	8012afc <localtime_r+0x40>
 8012b4e:	4630      	mov	r0, r6
 8012b50:	f002 fc3e 	bl	80153d0 <__tzcalc_limits>
 8012b54:	2800      	cmp	r0, #0
 8012b56:	d1e0      	bne.n	8012b1a <localtime_r+0x5e>
 8012b58:	f04f 33ff 	mov.w	r3, #4294967295
 8012b5c:	e004      	b.n	8012b68 <localtime_r+0xac>
 8012b5e:	4296      	cmp	r6, r2
 8012b60:	eb77 0303 	sbcs.w	r3, r7, r3
 8012b64:	da02      	bge.n	8012b6c <localtime_r+0xb0>
 8012b66:	2300      	movs	r3, #0
 8012b68:	6223      	str	r3, [r4, #32]
 8012b6a:	e7eb      	b.n	8012b44 <localtime_r+0x88>
 8012b6c:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8012b70:	4296      	cmp	r6, r2
 8012b72:	eb77 0303 	sbcs.w	r3, r7, r3
 8012b76:	daf6      	bge.n	8012b66 <localtime_r+0xaa>
 8012b78:	2301      	movs	r3, #1
 8012b7a:	6223      	str	r3, [r4, #32]
 8012b7c:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8012b80:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8012b84:	203c      	movs	r0, #60	; 0x3c
 8012b86:	fb91 f6f3 	sdiv	r6, r1, r3
 8012b8a:	fb03 1316 	mls	r3, r3, r6, r1
 8012b8e:	6861      	ldr	r1, [r4, #4]
 8012b90:	fb93 f2f0 	sdiv	r2, r3, r0
 8012b94:	fb00 3012 	mls	r0, r0, r2, r3
 8012b98:	6823      	ldr	r3, [r4, #0]
 8012b9a:	1a89      	subs	r1, r1, r2
 8012b9c:	68a2      	ldr	r2, [r4, #8]
 8012b9e:	6061      	str	r1, [r4, #4]
 8012ba0:	1a1b      	subs	r3, r3, r0
 8012ba2:	1b92      	subs	r2, r2, r6
 8012ba4:	2b3b      	cmp	r3, #59	; 0x3b
 8012ba6:	6023      	str	r3, [r4, #0]
 8012ba8:	60a2      	str	r2, [r4, #8]
 8012baa:	dd35      	ble.n	8012c18 <localtime_r+0x15c>
 8012bac:	3101      	adds	r1, #1
 8012bae:	6061      	str	r1, [r4, #4]
 8012bb0:	3b3c      	subs	r3, #60	; 0x3c
 8012bb2:	6023      	str	r3, [r4, #0]
 8012bb4:	6863      	ldr	r3, [r4, #4]
 8012bb6:	2b3b      	cmp	r3, #59	; 0x3b
 8012bb8:	dd34      	ble.n	8012c24 <localtime_r+0x168>
 8012bba:	3201      	adds	r2, #1
 8012bbc:	60a2      	str	r2, [r4, #8]
 8012bbe:	3b3c      	subs	r3, #60	; 0x3c
 8012bc0:	6063      	str	r3, [r4, #4]
 8012bc2:	68a3      	ldr	r3, [r4, #8]
 8012bc4:	2b17      	cmp	r3, #23
 8012bc6:	dd33      	ble.n	8012c30 <localtime_r+0x174>
 8012bc8:	69e2      	ldr	r2, [r4, #28]
 8012bca:	3201      	adds	r2, #1
 8012bcc:	61e2      	str	r2, [r4, #28]
 8012bce:	69a2      	ldr	r2, [r4, #24]
 8012bd0:	3201      	adds	r2, #1
 8012bd2:	2a06      	cmp	r2, #6
 8012bd4:	bfc8      	it	gt
 8012bd6:	2200      	movgt	r2, #0
 8012bd8:	61a2      	str	r2, [r4, #24]
 8012bda:	68e2      	ldr	r2, [r4, #12]
 8012bdc:	3b18      	subs	r3, #24
 8012bde:	3201      	adds	r2, #1
 8012be0:	60a3      	str	r3, [r4, #8]
 8012be2:	6923      	ldr	r3, [r4, #16]
 8012be4:	60e2      	str	r2, [r4, #12]
 8012be6:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8012bea:	428a      	cmp	r2, r1
 8012bec:	dd0e      	ble.n	8012c0c <localtime_r+0x150>
 8012bee:	2b0b      	cmp	r3, #11
 8012bf0:	eba2 0201 	sub.w	r2, r2, r1
 8012bf4:	60e2      	str	r2, [r4, #12]
 8012bf6:	f103 0201 	add.w	r2, r3, #1
 8012bfa:	bf09      	itett	eq
 8012bfc:	6963      	ldreq	r3, [r4, #20]
 8012bfe:	6122      	strne	r2, [r4, #16]
 8012c00:	2200      	moveq	r2, #0
 8012c02:	3301      	addeq	r3, #1
 8012c04:	bf02      	ittt	eq
 8012c06:	6122      	streq	r2, [r4, #16]
 8012c08:	6163      	streq	r3, [r4, #20]
 8012c0a:	61e2      	streq	r2, [r4, #28]
 8012c0c:	f002 fc8e 	bl	801552c <__tz_unlock>
 8012c10:	4620      	mov	r0, r4
 8012c12:	b002      	add	sp, #8
 8012c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	dacb      	bge.n	8012bb4 <localtime_r+0xf8>
 8012c1c:	3901      	subs	r1, #1
 8012c1e:	6061      	str	r1, [r4, #4]
 8012c20:	333c      	adds	r3, #60	; 0x3c
 8012c22:	e7c6      	b.n	8012bb2 <localtime_r+0xf6>
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	dacc      	bge.n	8012bc2 <localtime_r+0x106>
 8012c28:	3a01      	subs	r2, #1
 8012c2a:	60a2      	str	r2, [r4, #8]
 8012c2c:	333c      	adds	r3, #60	; 0x3c
 8012c2e:	e7c7      	b.n	8012bc0 <localtime_r+0x104>
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	daeb      	bge.n	8012c0c <localtime_r+0x150>
 8012c34:	69e2      	ldr	r2, [r4, #28]
 8012c36:	3a01      	subs	r2, #1
 8012c38:	61e2      	str	r2, [r4, #28]
 8012c3a:	69a2      	ldr	r2, [r4, #24]
 8012c3c:	3a01      	subs	r2, #1
 8012c3e:	bf48      	it	mi
 8012c40:	2206      	movmi	r2, #6
 8012c42:	61a2      	str	r2, [r4, #24]
 8012c44:	68e2      	ldr	r2, [r4, #12]
 8012c46:	3318      	adds	r3, #24
 8012c48:	3a01      	subs	r2, #1
 8012c4a:	60e2      	str	r2, [r4, #12]
 8012c4c:	60a3      	str	r3, [r4, #8]
 8012c4e:	2a00      	cmp	r2, #0
 8012c50:	d1dc      	bne.n	8012c0c <localtime_r+0x150>
 8012c52:	6923      	ldr	r3, [r4, #16]
 8012c54:	3b01      	subs	r3, #1
 8012c56:	d405      	bmi.n	8012c64 <localtime_r+0x1a8>
 8012c58:	6123      	str	r3, [r4, #16]
 8012c5a:	6923      	ldr	r3, [r4, #16]
 8012c5c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8012c60:	60e3      	str	r3, [r4, #12]
 8012c62:	e7d3      	b.n	8012c0c <localtime_r+0x150>
 8012c64:	230b      	movs	r3, #11
 8012c66:	6123      	str	r3, [r4, #16]
 8012c68:	6963      	ldr	r3, [r4, #20]
 8012c6a:	1e5a      	subs	r2, r3, #1
 8012c6c:	6162      	str	r2, [r4, #20]
 8012c6e:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 8012c72:	0793      	lsls	r3, r2, #30
 8012c74:	d105      	bne.n	8012c82 <localtime_r+0x1c6>
 8012c76:	2164      	movs	r1, #100	; 0x64
 8012c78:	fb92 f3f1 	sdiv	r3, r2, r1
 8012c7c:	fb01 2313 	mls	r3, r1, r3, r2
 8012c80:	b963      	cbnz	r3, 8012c9c <localtime_r+0x1e0>
 8012c82:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8012c86:	fb92 f3f1 	sdiv	r3, r2, r1
 8012c8a:	fb01 2313 	mls	r3, r1, r3, r2
 8012c8e:	fab3 f383 	clz	r3, r3
 8012c92:	095b      	lsrs	r3, r3, #5
 8012c94:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8012c98:	61e3      	str	r3, [r4, #28]
 8012c9a:	e7de      	b.n	8012c5a <localtime_r+0x19e>
 8012c9c:	2301      	movs	r3, #1
 8012c9e:	e7f9      	b.n	8012c94 <localtime_r+0x1d8>
 8012ca0:	0801ab90 	.word	0x0801ab90
 8012ca4:	20005a84 	.word	0x20005a84

08012ca8 <__retarget_lock_init_recursive>:
 8012ca8:	4770      	bx	lr

08012caa <__retarget_lock_acquire>:
 8012caa:	4770      	bx	lr

08012cac <__retarget_lock_acquire_recursive>:
 8012cac:	4770      	bx	lr

08012cae <__retarget_lock_release>:
 8012cae:	4770      	bx	lr

08012cb0 <__retarget_lock_release_recursive>:
 8012cb0:	4770      	bx	lr
	...

08012cb4 <malloc>:
 8012cb4:	4b02      	ldr	r3, [pc, #8]	; (8012cc0 <malloc+0xc>)
 8012cb6:	4601      	mov	r1, r0
 8012cb8:	6818      	ldr	r0, [r3, #0]
 8012cba:	f000 bb09 	b.w	80132d0 <_malloc_r>
 8012cbe:	bf00      	nop
 8012cc0:	200000ac 	.word	0x200000ac

08012cc4 <free>:
 8012cc4:	4b02      	ldr	r3, [pc, #8]	; (8012cd0 <free+0xc>)
 8012cc6:	4601      	mov	r1, r0
 8012cc8:	6818      	ldr	r0, [r3, #0]
 8012cca:	f000 bab1 	b.w	8013230 <_free_r>
 8012cce:	bf00      	nop
 8012cd0:	200000ac 	.word	0x200000ac

08012cd4 <memcpy>:
 8012cd4:	440a      	add	r2, r1
 8012cd6:	4291      	cmp	r1, r2
 8012cd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8012cdc:	d100      	bne.n	8012ce0 <memcpy+0xc>
 8012cde:	4770      	bx	lr
 8012ce0:	b510      	push	{r4, lr}
 8012ce2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012ce6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012cea:	4291      	cmp	r1, r2
 8012cec:	d1f9      	bne.n	8012ce2 <memcpy+0xe>
 8012cee:	bd10      	pop	{r4, pc}

08012cf0 <memmove>:
 8012cf0:	4288      	cmp	r0, r1
 8012cf2:	b510      	push	{r4, lr}
 8012cf4:	eb01 0402 	add.w	r4, r1, r2
 8012cf8:	d902      	bls.n	8012d00 <memmove+0x10>
 8012cfa:	4284      	cmp	r4, r0
 8012cfc:	4623      	mov	r3, r4
 8012cfe:	d807      	bhi.n	8012d10 <memmove+0x20>
 8012d00:	1e43      	subs	r3, r0, #1
 8012d02:	42a1      	cmp	r1, r4
 8012d04:	d008      	beq.n	8012d18 <memmove+0x28>
 8012d06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012d0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012d0e:	e7f8      	b.n	8012d02 <memmove+0x12>
 8012d10:	4402      	add	r2, r0
 8012d12:	4601      	mov	r1, r0
 8012d14:	428a      	cmp	r2, r1
 8012d16:	d100      	bne.n	8012d1a <memmove+0x2a>
 8012d18:	bd10      	pop	{r4, pc}
 8012d1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012d1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012d22:	e7f7      	b.n	8012d14 <memmove+0x24>

08012d24 <memset>:
 8012d24:	4402      	add	r2, r0
 8012d26:	4603      	mov	r3, r0
 8012d28:	4293      	cmp	r3, r2
 8012d2a:	d100      	bne.n	8012d2e <memset+0xa>
 8012d2c:	4770      	bx	lr
 8012d2e:	f803 1b01 	strb.w	r1, [r3], #1
 8012d32:	e7f9      	b.n	8012d28 <memset+0x4>

08012d34 <validate_structure>:
 8012d34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012d36:	6801      	ldr	r1, [r0, #0]
 8012d38:	293b      	cmp	r1, #59	; 0x3b
 8012d3a:	4604      	mov	r4, r0
 8012d3c:	d911      	bls.n	8012d62 <validate_structure+0x2e>
 8012d3e:	223c      	movs	r2, #60	; 0x3c
 8012d40:	4668      	mov	r0, sp
 8012d42:	f002 fe7b 	bl	8015a3c <div>
 8012d46:	9a01      	ldr	r2, [sp, #4]
 8012d48:	6863      	ldr	r3, [r4, #4]
 8012d4a:	9900      	ldr	r1, [sp, #0]
 8012d4c:	2a00      	cmp	r2, #0
 8012d4e:	440b      	add	r3, r1
 8012d50:	6063      	str	r3, [r4, #4]
 8012d52:	bfbb      	ittet	lt
 8012d54:	323c      	addlt	r2, #60	; 0x3c
 8012d56:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8012d5a:	6022      	strge	r2, [r4, #0]
 8012d5c:	6022      	strlt	r2, [r4, #0]
 8012d5e:	bfb8      	it	lt
 8012d60:	6063      	strlt	r3, [r4, #4]
 8012d62:	6861      	ldr	r1, [r4, #4]
 8012d64:	293b      	cmp	r1, #59	; 0x3b
 8012d66:	d911      	bls.n	8012d8c <validate_structure+0x58>
 8012d68:	223c      	movs	r2, #60	; 0x3c
 8012d6a:	4668      	mov	r0, sp
 8012d6c:	f002 fe66 	bl	8015a3c <div>
 8012d70:	9a01      	ldr	r2, [sp, #4]
 8012d72:	68a3      	ldr	r3, [r4, #8]
 8012d74:	9900      	ldr	r1, [sp, #0]
 8012d76:	2a00      	cmp	r2, #0
 8012d78:	440b      	add	r3, r1
 8012d7a:	60a3      	str	r3, [r4, #8]
 8012d7c:	bfbb      	ittet	lt
 8012d7e:	323c      	addlt	r2, #60	; 0x3c
 8012d80:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8012d84:	6062      	strge	r2, [r4, #4]
 8012d86:	6062      	strlt	r2, [r4, #4]
 8012d88:	bfb8      	it	lt
 8012d8a:	60a3      	strlt	r3, [r4, #8]
 8012d8c:	68a1      	ldr	r1, [r4, #8]
 8012d8e:	2917      	cmp	r1, #23
 8012d90:	d911      	bls.n	8012db6 <validate_structure+0x82>
 8012d92:	2218      	movs	r2, #24
 8012d94:	4668      	mov	r0, sp
 8012d96:	f002 fe51 	bl	8015a3c <div>
 8012d9a:	9a01      	ldr	r2, [sp, #4]
 8012d9c:	68e3      	ldr	r3, [r4, #12]
 8012d9e:	9900      	ldr	r1, [sp, #0]
 8012da0:	2a00      	cmp	r2, #0
 8012da2:	440b      	add	r3, r1
 8012da4:	60e3      	str	r3, [r4, #12]
 8012da6:	bfbb      	ittet	lt
 8012da8:	3218      	addlt	r2, #24
 8012daa:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8012dae:	60a2      	strge	r2, [r4, #8]
 8012db0:	60a2      	strlt	r2, [r4, #8]
 8012db2:	bfb8      	it	lt
 8012db4:	60e3      	strlt	r3, [r4, #12]
 8012db6:	6921      	ldr	r1, [r4, #16]
 8012db8:	290b      	cmp	r1, #11
 8012dba:	d911      	bls.n	8012de0 <validate_structure+0xac>
 8012dbc:	220c      	movs	r2, #12
 8012dbe:	4668      	mov	r0, sp
 8012dc0:	f002 fe3c 	bl	8015a3c <div>
 8012dc4:	9a01      	ldr	r2, [sp, #4]
 8012dc6:	6963      	ldr	r3, [r4, #20]
 8012dc8:	9900      	ldr	r1, [sp, #0]
 8012dca:	2a00      	cmp	r2, #0
 8012dcc:	440b      	add	r3, r1
 8012dce:	6163      	str	r3, [r4, #20]
 8012dd0:	bfbb      	ittet	lt
 8012dd2:	320c      	addlt	r2, #12
 8012dd4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8012dd8:	6122      	strge	r2, [r4, #16]
 8012dda:	6122      	strlt	r2, [r4, #16]
 8012ddc:	bfb8      	it	lt
 8012dde:	6163      	strlt	r3, [r4, #20]
 8012de0:	6963      	ldr	r3, [r4, #20]
 8012de2:	0799      	lsls	r1, r3, #30
 8012de4:	d120      	bne.n	8012e28 <validate_structure+0xf4>
 8012de6:	2164      	movs	r1, #100	; 0x64
 8012de8:	fb93 f2f1 	sdiv	r2, r3, r1
 8012dec:	fb01 3212 	mls	r2, r1, r2, r3
 8012df0:	b9e2      	cbnz	r2, 8012e2c <validate_structure+0xf8>
 8012df2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8012df6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8012dfa:	fb93 f2f1 	sdiv	r2, r3, r1
 8012dfe:	fb01 3312 	mls	r3, r1, r2, r3
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	bf14      	ite	ne
 8012e06:	231c      	movne	r3, #28
 8012e08:	231d      	moveq	r3, #29
 8012e0a:	68e2      	ldr	r2, [r4, #12]
 8012e0c:	2a00      	cmp	r2, #0
 8012e0e:	dc0f      	bgt.n	8012e30 <validate_structure+0xfc>
 8012e10:	4f33      	ldr	r7, [pc, #204]	; (8012ee0 <validate_structure+0x1ac>)
 8012e12:	260b      	movs	r6, #11
 8012e14:	2064      	movs	r0, #100	; 0x64
 8012e16:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8012e1a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8012e1e:	f1bc 0f00 	cmp.w	ip, #0
 8012e22:	dd31      	ble.n	8012e88 <validate_structure+0x154>
 8012e24:	b003      	add	sp, #12
 8012e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e28:	231c      	movs	r3, #28
 8012e2a:	e7ee      	b.n	8012e0a <validate_structure+0xd6>
 8012e2c:	231d      	movs	r3, #29
 8012e2e:	e7ec      	b.n	8012e0a <validate_structure+0xd6>
 8012e30:	4f2b      	ldr	r7, [pc, #172]	; (8012ee0 <validate_structure+0x1ac>)
 8012e32:	f04f 0c00 	mov.w	ip, #0
 8012e36:	2564      	movs	r5, #100	; 0x64
 8012e38:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8012e3c:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8012e40:	2a01      	cmp	r2, #1
 8012e42:	bf14      	ite	ne
 8012e44:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 8012e48:	4618      	moveq	r0, r3
 8012e4a:	4281      	cmp	r1, r0
 8012e4c:	ddea      	ble.n	8012e24 <validate_structure+0xf0>
 8012e4e:	3201      	adds	r2, #1
 8012e50:	1a09      	subs	r1, r1, r0
 8012e52:	2a0c      	cmp	r2, #12
 8012e54:	60e1      	str	r1, [r4, #12]
 8012e56:	6122      	str	r2, [r4, #16]
 8012e58:	d1f0      	bne.n	8012e3c <validate_structure+0x108>
 8012e5a:	6963      	ldr	r3, [r4, #20]
 8012e5c:	1c5a      	adds	r2, r3, #1
 8012e5e:	0791      	lsls	r1, r2, #30
 8012e60:	e9c4 c204 	strd	ip, r2, [r4, #16]
 8012e64:	d137      	bne.n	8012ed6 <validate_structure+0x1a2>
 8012e66:	fb92 f1f5 	sdiv	r1, r2, r5
 8012e6a:	fb05 2211 	mls	r2, r5, r1, r2
 8012e6e:	2a00      	cmp	r2, #0
 8012e70:	d133      	bne.n	8012eda <validate_structure+0x1a6>
 8012e72:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8012e76:	fb93 f2f6 	sdiv	r2, r3, r6
 8012e7a:	fb06 3312 	mls	r3, r6, r2, r3
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	bf14      	ite	ne
 8012e82:	231c      	movne	r3, #28
 8012e84:	231d      	moveq	r3, #29
 8012e86:	e7d9      	b.n	8012e3c <validate_structure+0x108>
 8012e88:	6921      	ldr	r1, [r4, #16]
 8012e8a:	3901      	subs	r1, #1
 8012e8c:	6121      	str	r1, [r4, #16]
 8012e8e:	3101      	adds	r1, #1
 8012e90:	d114      	bne.n	8012ebc <validate_structure+0x188>
 8012e92:	6963      	ldr	r3, [r4, #20]
 8012e94:	1e59      	subs	r1, r3, #1
 8012e96:	078a      	lsls	r2, r1, #30
 8012e98:	e9c4 6104 	strd	r6, r1, [r4, #16]
 8012e9c:	d117      	bne.n	8012ece <validate_structure+0x19a>
 8012e9e:	fb91 f2f0 	sdiv	r2, r1, r0
 8012ea2:	fb00 1112 	mls	r1, r0, r2, r1
 8012ea6:	b9a1      	cbnz	r1, 8012ed2 <validate_structure+0x19e>
 8012ea8:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8012eac:	fb93 f2f5 	sdiv	r2, r3, r5
 8012eb0:	fb05 3312 	mls	r3, r5, r2, r3
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	bf14      	ite	ne
 8012eb8:	231c      	movne	r3, #28
 8012eba:	231d      	moveq	r3, #29
 8012ebc:	6922      	ldr	r2, [r4, #16]
 8012ebe:	2a01      	cmp	r2, #1
 8012ec0:	bf14      	ite	ne
 8012ec2:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8012ec6:	461a      	moveq	r2, r3
 8012ec8:	4462      	add	r2, ip
 8012eca:	60e2      	str	r2, [r4, #12]
 8012ecc:	e7a5      	b.n	8012e1a <validate_structure+0xe6>
 8012ece:	231c      	movs	r3, #28
 8012ed0:	e7f4      	b.n	8012ebc <validate_structure+0x188>
 8012ed2:	231d      	movs	r3, #29
 8012ed4:	e7f2      	b.n	8012ebc <validate_structure+0x188>
 8012ed6:	231c      	movs	r3, #28
 8012ed8:	e7b0      	b.n	8012e3c <validate_structure+0x108>
 8012eda:	231d      	movs	r3, #29
 8012edc:	e7ae      	b.n	8012e3c <validate_structure+0x108>
 8012ede:	bf00      	nop
 8012ee0:	0801ab30 	.word	0x0801ab30

08012ee4 <mktime>:
 8012ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ee8:	b08b      	sub	sp, #44	; 0x2c
 8012eea:	4605      	mov	r5, r0
 8012eec:	f004 f8ba 	bl	8017064 <__gettzinfo>
 8012ef0:	4607      	mov	r7, r0
 8012ef2:	4628      	mov	r0, r5
 8012ef4:	f7ff ff1e 	bl	8012d34 <validate_structure>
 8012ef8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012efc:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 8012f00:	68a8      	ldr	r0, [r5, #8]
 8012f02:	696e      	ldr	r6, [r5, #20]
 8012f04:	fb0a 2303 	mla	r3, sl, r3, r2
 8012f08:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 8012f0c:	fb0a 3a00 	mla	sl, sl, r0, r3
 8012f10:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 8012f14:	4ac3      	ldr	r2, [pc, #780]	; (8013224 <mktime+0x340>)
 8012f16:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8012f1a:	3c01      	subs	r4, #1
 8012f1c:	2b01      	cmp	r3, #1
 8012f1e:	4414      	add	r4, r2
 8012f20:	dd11      	ble.n	8012f46 <mktime+0x62>
 8012f22:	07b1      	lsls	r1, r6, #30
 8012f24:	d10f      	bne.n	8012f46 <mktime+0x62>
 8012f26:	2264      	movs	r2, #100	; 0x64
 8012f28:	fb96 f3f2 	sdiv	r3, r6, r2
 8012f2c:	fb02 6313 	mls	r3, r2, r3, r6
 8012f30:	b943      	cbnz	r3, 8012f44 <mktime+0x60>
 8012f32:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8012f36:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8012f3a:	fb91 f3f2 	sdiv	r3, r1, r2
 8012f3e:	fb02 1313 	mls	r3, r2, r3, r1
 8012f42:	b903      	cbnz	r3, 8012f46 <mktime+0x62>
 8012f44:	3401      	adds	r4, #1
 8012f46:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8012f4a:	3310      	adds	r3, #16
 8012f4c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8012f50:	4293      	cmp	r3, r2
 8012f52:	61ec      	str	r4, [r5, #28]
 8012f54:	f200 8161 	bhi.w	801321a <mktime+0x336>
 8012f58:	2e46      	cmp	r6, #70	; 0x46
 8012f5a:	dd77      	ble.n	801304c <mktime+0x168>
 8012f5c:	2346      	movs	r3, #70	; 0x46
 8012f5e:	f240 1e6d 	movw	lr, #365	; 0x16d
 8012f62:	2164      	movs	r1, #100	; 0x64
 8012f64:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8012f68:	079a      	lsls	r2, r3, #30
 8012f6a:	d169      	bne.n	8013040 <mktime+0x15c>
 8012f6c:	fb93 f2f1 	sdiv	r2, r3, r1
 8012f70:	fb01 3212 	mls	r2, r1, r2, r3
 8012f74:	2a00      	cmp	r2, #0
 8012f76:	d166      	bne.n	8013046 <mktime+0x162>
 8012f78:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8012f7c:	fb9c f2f0 	sdiv	r2, ip, r0
 8012f80:	fb00 c212 	mls	r2, r0, r2, ip
 8012f84:	2a00      	cmp	r2, #0
 8012f86:	bf14      	ite	ne
 8012f88:	4672      	movne	r2, lr
 8012f8a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8012f8e:	3301      	adds	r3, #1
 8012f90:	429e      	cmp	r6, r3
 8012f92:	4414      	add	r4, r2
 8012f94:	d1e8      	bne.n	8012f68 <mktime+0x84>
 8012f96:	4ba4      	ldr	r3, [pc, #656]	; (8013228 <mktime+0x344>)
 8012f98:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8012f9c:	fbc3 ab04 	smlal	sl, fp, r3, r4
 8012fa0:	f002 fabe 	bl	8015520 <__tz_lock>
 8012fa4:	f002 fac8 	bl	8015538 <_tzset_unlocked>
 8012fa8:	4ba0      	ldr	r3, [pc, #640]	; (801322c <mktime+0x348>)
 8012faa:	f8d3 9000 	ldr.w	r9, [r3]
 8012fae:	f1b9 0f00 	cmp.w	r9, #0
 8012fb2:	d03f      	beq.n	8013034 <mktime+0x150>
 8012fb4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8012fb8:	6968      	ldr	r0, [r5, #20]
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	f1b9 0f01 	cmp.w	r9, #1
 8012fc0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8012fc4:	46c8      	mov	r8, r9
 8012fc6:	bfa8      	it	ge
 8012fc8:	f04f 0801 	movge.w	r8, #1
 8012fcc:	4283      	cmp	r3, r0
 8012fce:	d17f      	bne.n	80130d0 <mktime+0x1ec>
 8012fd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fd2:	4619      	mov	r1, r3
 8012fd4:	17da      	asrs	r2, r3, #31
 8012fd6:	e9cd 1200 	strd	r1, r2, [sp]
 8012fda:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8012fde:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8012fe2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012fe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012fe8:	1a80      	subs	r0, r0, r2
 8012fea:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 8012fee:	4582      	cmp	sl, r0
 8012ff0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012ff4:	eb7b 0101 	sbcs.w	r1, fp, r1
 8012ff8:	da71      	bge.n	80130de <mktime+0x1fa>
 8012ffa:	9800      	ldr	r0, [sp, #0]
 8012ffc:	6a39      	ldr	r1, [r7, #32]
 8012ffe:	1a09      	subs	r1, r1, r0
 8013000:	9104      	str	r1, [sp, #16]
 8013002:	9801      	ldr	r0, [sp, #4]
 8013004:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013006:	eb61 0100 	sbc.w	r1, r1, r0
 801300a:	9105      	str	r1, [sp, #20]
 801300c:	6839      	ldr	r1, [r7, #0]
 801300e:	2900      	cmp	r1, #0
 8013010:	d075      	beq.n	80130fe <mktime+0x21a>
 8013012:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013016:	4582      	cmp	sl, r0
 8013018:	eb7b 0101 	sbcs.w	r1, fp, r1
 801301c:	db05      	blt.n	801302a <mktime+0x146>
 801301e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013022:	4582      	cmp	sl, r0
 8013024:	eb7b 0101 	sbcs.w	r1, fp, r1
 8013028:	db6f      	blt.n	801310a <mktime+0x226>
 801302a:	f1b9 0f00 	cmp.w	r9, #0
 801302e:	f04f 0900 	mov.w	r9, #0
 8013032:	da6f      	bge.n	8013114 <mktime+0x230>
 8013034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013036:	eb1a 0a03 	adds.w	sl, sl, r3
 801303a:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801303e:	e0ae      	b.n	801319e <mktime+0x2ba>
 8013040:	f240 126d 	movw	r2, #365	; 0x16d
 8013044:	e7a3      	b.n	8012f8e <mktime+0xaa>
 8013046:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801304a:	e7a0      	b.n	8012f8e <mktime+0xaa>
 801304c:	d0a3      	beq.n	8012f96 <mktime+0xb2>
 801304e:	2345      	movs	r3, #69	; 0x45
 8013050:	f240 1e6d 	movw	lr, #365	; 0x16d
 8013054:	2164      	movs	r1, #100	; 0x64
 8013056:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801305a:	e012      	b.n	8013082 <mktime+0x19e>
 801305c:	bb62      	cbnz	r2, 80130b8 <mktime+0x1d4>
 801305e:	fb93 f2f1 	sdiv	r2, r3, r1
 8013062:	fb01 3212 	mls	r2, r1, r2, r3
 8013066:	bb52      	cbnz	r2, 80130be <mktime+0x1da>
 8013068:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801306c:	fb9c f2f0 	sdiv	r2, ip, r0
 8013070:	fb00 c212 	mls	r2, r0, r2, ip
 8013074:	2a00      	cmp	r2, #0
 8013076:	bf14      	ite	ne
 8013078:	4672      	movne	r2, lr
 801307a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801307e:	1aa4      	subs	r4, r4, r2
 8013080:	3b01      	subs	r3, #1
 8013082:	429e      	cmp	r6, r3
 8013084:	f003 0203 	and.w	r2, r3, #3
 8013088:	dbe8      	blt.n	801305c <mktime+0x178>
 801308a:	b9da      	cbnz	r2, 80130c4 <mktime+0x1e0>
 801308c:	2264      	movs	r2, #100	; 0x64
 801308e:	fb96 f3f2 	sdiv	r3, r6, r2
 8013092:	fb02 6313 	mls	r3, r2, r3, r6
 8013096:	b9c3      	cbnz	r3, 80130ca <mktime+0x1e6>
 8013098:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 801309c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80130a0:	fb91 f3f2 	sdiv	r3, r1, r2
 80130a4:	fb02 1313 	mls	r3, r2, r3, r1
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	f240 136d 	movw	r3, #365	; 0x16d
 80130ae:	bf08      	it	eq
 80130b0:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 80130b4:	1ae4      	subs	r4, r4, r3
 80130b6:	e76e      	b.n	8012f96 <mktime+0xb2>
 80130b8:	f240 126d 	movw	r2, #365	; 0x16d
 80130bc:	e7df      	b.n	801307e <mktime+0x19a>
 80130be:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80130c2:	e7dc      	b.n	801307e <mktime+0x19a>
 80130c4:	f240 136d 	movw	r3, #365	; 0x16d
 80130c8:	e7f4      	b.n	80130b4 <mktime+0x1d0>
 80130ca:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80130ce:	e7f1      	b.n	80130b4 <mktime+0x1d0>
 80130d0:	f002 f97e 	bl	80153d0 <__tzcalc_limits>
 80130d4:	2800      	cmp	r0, #0
 80130d6:	f47f af7b 	bne.w	8012fd0 <mktime+0xec>
 80130da:	46c1      	mov	r9, r8
 80130dc:	e054      	b.n	8013188 <mktime+0x2a4>
 80130de:	9800      	ldr	r0, [sp, #0]
 80130e0:	9902      	ldr	r1, [sp, #8]
 80130e2:	1a09      	subs	r1, r1, r0
 80130e4:	9108      	str	r1, [sp, #32]
 80130e6:	9801      	ldr	r0, [sp, #4]
 80130e8:	9903      	ldr	r1, [sp, #12]
 80130ea:	eb61 0100 	sbc.w	r1, r1, r0
 80130ee:	9109      	str	r1, [sp, #36]	; 0x24
 80130f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80130f4:	4582      	cmp	sl, r0
 80130f6:	eb7b 0101 	sbcs.w	r1, fp, r1
 80130fa:	dbee      	blt.n	80130da <mktime+0x1f6>
 80130fc:	e77d      	b.n	8012ffa <mktime+0x116>
 80130fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013102:	4582      	cmp	sl, r0
 8013104:	eb7b 0101 	sbcs.w	r1, fp, r1
 8013108:	db89      	blt.n	801301e <mktime+0x13a>
 801310a:	f1b9 0f00 	cmp.w	r9, #0
 801310e:	db3f      	blt.n	8013190 <mktime+0x2ac>
 8013110:	f04f 0901 	mov.w	r9, #1
 8013114:	ea88 0809 	eor.w	r8, r8, r9
 8013118:	f1b8 0f01 	cmp.w	r8, #1
 801311c:	d134      	bne.n	8013188 <mktime+0x2a4>
 801311e:	f1b9 0f00 	cmp.w	r9, #0
 8013122:	d04f      	beq.n	80131c4 <mktime+0x2e0>
 8013124:	1ad3      	subs	r3, r2, r3
 8013126:	682a      	ldr	r2, [r5, #0]
 8013128:	f8d5 800c 	ldr.w	r8, [r5, #12]
 801312c:	441a      	add	r2, r3
 801312e:	eb1a 0a03 	adds.w	sl, sl, r3
 8013132:	602a      	str	r2, [r5, #0]
 8013134:	4628      	mov	r0, r5
 8013136:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801313a:	f7ff fdfb 	bl	8012d34 <validate_structure>
 801313e:	68ea      	ldr	r2, [r5, #12]
 8013140:	ebb2 0208 	subs.w	r2, r2, r8
 8013144:	d020      	beq.n	8013188 <mktime+0x2a4>
 8013146:	2a01      	cmp	r2, #1
 8013148:	dc3e      	bgt.n	80131c8 <mktime+0x2e4>
 801314a:	1c90      	adds	r0, r2, #2
 801314c:	bfd8      	it	le
 801314e:	2201      	movle	r2, #1
 8013150:	69eb      	ldr	r3, [r5, #28]
 8013152:	18d3      	adds	r3, r2, r3
 8013154:	4414      	add	r4, r2
 8013156:	d540      	bpl.n	80131da <mktime+0x2f6>
 8013158:	1e72      	subs	r2, r6, #1
 801315a:	0791      	lsls	r1, r2, #30
 801315c:	d137      	bne.n	80131ce <mktime+0x2ea>
 801315e:	2164      	movs	r1, #100	; 0x64
 8013160:	fb92 f3f1 	sdiv	r3, r2, r1
 8013164:	fb01 2313 	mls	r3, r1, r3, r2
 8013168:	bba3      	cbnz	r3, 80131d4 <mktime+0x2f0>
 801316a:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 801316e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8013172:	fb96 f3f2 	sdiv	r3, r6, r2
 8013176:	fb02 6613 	mls	r6, r2, r3, r6
 801317a:	2e00      	cmp	r6, #0
 801317c:	f240 136d 	movw	r3, #365	; 0x16d
 8013180:	bf18      	it	ne
 8013182:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8013186:	61eb      	str	r3, [r5, #28]
 8013188:	f1b9 0f01 	cmp.w	r9, #1
 801318c:	f47f af52 	bne.w	8013034 <mktime+0x150>
 8013190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013192:	eb1a 0a03 	adds.w	sl, sl, r3
 8013196:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801319a:	f04f 0901 	mov.w	r9, #1
 801319e:	f002 f9c5 	bl	801552c <__tz_unlock>
 80131a2:	3404      	adds	r4, #4
 80131a4:	2307      	movs	r3, #7
 80131a6:	fb94 f3f3 	sdiv	r3, r4, r3
 80131aa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80131ae:	1ae4      	subs	r4, r4, r3
 80131b0:	bf48      	it	mi
 80131b2:	3407      	addmi	r4, #7
 80131b4:	f8c5 9020 	str.w	r9, [r5, #32]
 80131b8:	61ac      	str	r4, [r5, #24]
 80131ba:	4650      	mov	r0, sl
 80131bc:	4659      	mov	r1, fp
 80131be:	b00b      	add	sp, #44	; 0x2c
 80131c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131c4:	1a9b      	subs	r3, r3, r2
 80131c6:	e7ae      	b.n	8013126 <mktime+0x242>
 80131c8:	f04f 32ff 	mov.w	r2, #4294967295
 80131cc:	e7c0      	b.n	8013150 <mktime+0x26c>
 80131ce:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80131d2:	e7d8      	b.n	8013186 <mktime+0x2a2>
 80131d4:	f240 136d 	movw	r3, #365	; 0x16d
 80131d8:	e7d5      	b.n	8013186 <mktime+0x2a2>
 80131da:	07b2      	lsls	r2, r6, #30
 80131dc:	d117      	bne.n	801320e <mktime+0x32a>
 80131de:	2164      	movs	r1, #100	; 0x64
 80131e0:	fb96 f2f1 	sdiv	r2, r6, r1
 80131e4:	fb01 6212 	mls	r2, r1, r2, r6
 80131e8:	b9a2      	cbnz	r2, 8013214 <mktime+0x330>
 80131ea:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80131ee:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80131f2:	fb96 f2f1 	sdiv	r2, r6, r1
 80131f6:	fb01 6612 	mls	r6, r1, r2, r6
 80131fa:	2e00      	cmp	r6, #0
 80131fc:	f240 126d 	movw	r2, #365	; 0x16d
 8013200:	bf08      	it	eq
 8013202:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8013206:	4293      	cmp	r3, r2
 8013208:	bfa8      	it	ge
 801320a:	1a9b      	subge	r3, r3, r2
 801320c:	e7bb      	b.n	8013186 <mktime+0x2a2>
 801320e:	f240 126d 	movw	r2, #365	; 0x16d
 8013212:	e7f8      	b.n	8013206 <mktime+0x322>
 8013214:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8013218:	e7f5      	b.n	8013206 <mktime+0x322>
 801321a:	f04f 3aff 	mov.w	sl, #4294967295
 801321e:	f04f 3bff 	mov.w	fp, #4294967295
 8013222:	e7ca      	b.n	80131ba <mktime+0x2d6>
 8013224:	0801ab60 	.word	0x0801ab60
 8013228:	00015180 	.word	0x00015180
 801322c:	20005a84 	.word	0x20005a84

08013230 <_free_r>:
 8013230:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013232:	2900      	cmp	r1, #0
 8013234:	d048      	beq.n	80132c8 <_free_r+0x98>
 8013236:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801323a:	9001      	str	r0, [sp, #4]
 801323c:	2b00      	cmp	r3, #0
 801323e:	f1a1 0404 	sub.w	r4, r1, #4
 8013242:	bfb8      	it	lt
 8013244:	18e4      	addlt	r4, r4, r3
 8013246:	f004 f84d 	bl	80172e4 <__malloc_lock>
 801324a:	4a20      	ldr	r2, [pc, #128]	; (80132cc <_free_r+0x9c>)
 801324c:	9801      	ldr	r0, [sp, #4]
 801324e:	6813      	ldr	r3, [r2, #0]
 8013250:	4615      	mov	r5, r2
 8013252:	b933      	cbnz	r3, 8013262 <_free_r+0x32>
 8013254:	6063      	str	r3, [r4, #4]
 8013256:	6014      	str	r4, [r2, #0]
 8013258:	b003      	add	sp, #12
 801325a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801325e:	f004 b847 	b.w	80172f0 <__malloc_unlock>
 8013262:	42a3      	cmp	r3, r4
 8013264:	d90b      	bls.n	801327e <_free_r+0x4e>
 8013266:	6821      	ldr	r1, [r4, #0]
 8013268:	1862      	adds	r2, r4, r1
 801326a:	4293      	cmp	r3, r2
 801326c:	bf04      	itt	eq
 801326e:	681a      	ldreq	r2, [r3, #0]
 8013270:	685b      	ldreq	r3, [r3, #4]
 8013272:	6063      	str	r3, [r4, #4]
 8013274:	bf04      	itt	eq
 8013276:	1852      	addeq	r2, r2, r1
 8013278:	6022      	streq	r2, [r4, #0]
 801327a:	602c      	str	r4, [r5, #0]
 801327c:	e7ec      	b.n	8013258 <_free_r+0x28>
 801327e:	461a      	mov	r2, r3
 8013280:	685b      	ldr	r3, [r3, #4]
 8013282:	b10b      	cbz	r3, 8013288 <_free_r+0x58>
 8013284:	42a3      	cmp	r3, r4
 8013286:	d9fa      	bls.n	801327e <_free_r+0x4e>
 8013288:	6811      	ldr	r1, [r2, #0]
 801328a:	1855      	adds	r5, r2, r1
 801328c:	42a5      	cmp	r5, r4
 801328e:	d10b      	bne.n	80132a8 <_free_r+0x78>
 8013290:	6824      	ldr	r4, [r4, #0]
 8013292:	4421      	add	r1, r4
 8013294:	1854      	adds	r4, r2, r1
 8013296:	42a3      	cmp	r3, r4
 8013298:	6011      	str	r1, [r2, #0]
 801329a:	d1dd      	bne.n	8013258 <_free_r+0x28>
 801329c:	681c      	ldr	r4, [r3, #0]
 801329e:	685b      	ldr	r3, [r3, #4]
 80132a0:	6053      	str	r3, [r2, #4]
 80132a2:	4421      	add	r1, r4
 80132a4:	6011      	str	r1, [r2, #0]
 80132a6:	e7d7      	b.n	8013258 <_free_r+0x28>
 80132a8:	d902      	bls.n	80132b0 <_free_r+0x80>
 80132aa:	230c      	movs	r3, #12
 80132ac:	6003      	str	r3, [r0, #0]
 80132ae:	e7d3      	b.n	8013258 <_free_r+0x28>
 80132b0:	6825      	ldr	r5, [r4, #0]
 80132b2:	1961      	adds	r1, r4, r5
 80132b4:	428b      	cmp	r3, r1
 80132b6:	bf04      	itt	eq
 80132b8:	6819      	ldreq	r1, [r3, #0]
 80132ba:	685b      	ldreq	r3, [r3, #4]
 80132bc:	6063      	str	r3, [r4, #4]
 80132be:	bf04      	itt	eq
 80132c0:	1949      	addeq	r1, r1, r5
 80132c2:	6021      	streq	r1, [r4, #0]
 80132c4:	6054      	str	r4, [r2, #4]
 80132c6:	e7c7      	b.n	8013258 <_free_r+0x28>
 80132c8:	b003      	add	sp, #12
 80132ca:	bd30      	pop	{r4, r5, pc}
 80132cc:	20005a60 	.word	0x20005a60

080132d0 <_malloc_r>:
 80132d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132d2:	1ccd      	adds	r5, r1, #3
 80132d4:	f025 0503 	bic.w	r5, r5, #3
 80132d8:	3508      	adds	r5, #8
 80132da:	2d0c      	cmp	r5, #12
 80132dc:	bf38      	it	cc
 80132de:	250c      	movcc	r5, #12
 80132e0:	2d00      	cmp	r5, #0
 80132e2:	4606      	mov	r6, r0
 80132e4:	db01      	blt.n	80132ea <_malloc_r+0x1a>
 80132e6:	42a9      	cmp	r1, r5
 80132e8:	d903      	bls.n	80132f2 <_malloc_r+0x22>
 80132ea:	230c      	movs	r3, #12
 80132ec:	6033      	str	r3, [r6, #0]
 80132ee:	2000      	movs	r0, #0
 80132f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132f2:	f003 fff7 	bl	80172e4 <__malloc_lock>
 80132f6:	4921      	ldr	r1, [pc, #132]	; (801337c <_malloc_r+0xac>)
 80132f8:	680a      	ldr	r2, [r1, #0]
 80132fa:	4614      	mov	r4, r2
 80132fc:	b99c      	cbnz	r4, 8013326 <_malloc_r+0x56>
 80132fe:	4f20      	ldr	r7, [pc, #128]	; (8013380 <_malloc_r+0xb0>)
 8013300:	683b      	ldr	r3, [r7, #0]
 8013302:	b923      	cbnz	r3, 801330e <_malloc_r+0x3e>
 8013304:	4621      	mov	r1, r4
 8013306:	4630      	mov	r0, r6
 8013308:	f000 ffae 	bl	8014268 <_sbrk_r>
 801330c:	6038      	str	r0, [r7, #0]
 801330e:	4629      	mov	r1, r5
 8013310:	4630      	mov	r0, r6
 8013312:	f000 ffa9 	bl	8014268 <_sbrk_r>
 8013316:	1c43      	adds	r3, r0, #1
 8013318:	d123      	bne.n	8013362 <_malloc_r+0x92>
 801331a:	230c      	movs	r3, #12
 801331c:	6033      	str	r3, [r6, #0]
 801331e:	4630      	mov	r0, r6
 8013320:	f003 ffe6 	bl	80172f0 <__malloc_unlock>
 8013324:	e7e3      	b.n	80132ee <_malloc_r+0x1e>
 8013326:	6823      	ldr	r3, [r4, #0]
 8013328:	1b5b      	subs	r3, r3, r5
 801332a:	d417      	bmi.n	801335c <_malloc_r+0x8c>
 801332c:	2b0b      	cmp	r3, #11
 801332e:	d903      	bls.n	8013338 <_malloc_r+0x68>
 8013330:	6023      	str	r3, [r4, #0]
 8013332:	441c      	add	r4, r3
 8013334:	6025      	str	r5, [r4, #0]
 8013336:	e004      	b.n	8013342 <_malloc_r+0x72>
 8013338:	6863      	ldr	r3, [r4, #4]
 801333a:	42a2      	cmp	r2, r4
 801333c:	bf0c      	ite	eq
 801333e:	600b      	streq	r3, [r1, #0]
 8013340:	6053      	strne	r3, [r2, #4]
 8013342:	4630      	mov	r0, r6
 8013344:	f003 ffd4 	bl	80172f0 <__malloc_unlock>
 8013348:	f104 000b 	add.w	r0, r4, #11
 801334c:	1d23      	adds	r3, r4, #4
 801334e:	f020 0007 	bic.w	r0, r0, #7
 8013352:	1ac2      	subs	r2, r0, r3
 8013354:	d0cc      	beq.n	80132f0 <_malloc_r+0x20>
 8013356:	1a1b      	subs	r3, r3, r0
 8013358:	50a3      	str	r3, [r4, r2]
 801335a:	e7c9      	b.n	80132f0 <_malloc_r+0x20>
 801335c:	4622      	mov	r2, r4
 801335e:	6864      	ldr	r4, [r4, #4]
 8013360:	e7cc      	b.n	80132fc <_malloc_r+0x2c>
 8013362:	1cc4      	adds	r4, r0, #3
 8013364:	f024 0403 	bic.w	r4, r4, #3
 8013368:	42a0      	cmp	r0, r4
 801336a:	d0e3      	beq.n	8013334 <_malloc_r+0x64>
 801336c:	1a21      	subs	r1, r4, r0
 801336e:	4630      	mov	r0, r6
 8013370:	f000 ff7a 	bl	8014268 <_sbrk_r>
 8013374:	3001      	adds	r0, #1
 8013376:	d1dd      	bne.n	8013334 <_malloc_r+0x64>
 8013378:	e7cf      	b.n	801331a <_malloc_r+0x4a>
 801337a:	bf00      	nop
 801337c:	20005a60 	.word	0x20005a60
 8013380:	20005a64 	.word	0x20005a64

08013384 <__cvt>:
 8013384:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013388:	ec55 4b10 	vmov	r4, r5, d0
 801338c:	2d00      	cmp	r5, #0
 801338e:	460e      	mov	r6, r1
 8013390:	4619      	mov	r1, r3
 8013392:	462b      	mov	r3, r5
 8013394:	bfbb      	ittet	lt
 8013396:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801339a:	461d      	movlt	r5, r3
 801339c:	2300      	movge	r3, #0
 801339e:	232d      	movlt	r3, #45	; 0x2d
 80133a0:	700b      	strb	r3, [r1, #0]
 80133a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80133a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80133a8:	4691      	mov	r9, r2
 80133aa:	f023 0820 	bic.w	r8, r3, #32
 80133ae:	bfbc      	itt	lt
 80133b0:	4622      	movlt	r2, r4
 80133b2:	4614      	movlt	r4, r2
 80133b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80133b8:	d005      	beq.n	80133c6 <__cvt+0x42>
 80133ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80133be:	d100      	bne.n	80133c2 <__cvt+0x3e>
 80133c0:	3601      	adds	r6, #1
 80133c2:	2102      	movs	r1, #2
 80133c4:	e000      	b.n	80133c8 <__cvt+0x44>
 80133c6:	2103      	movs	r1, #3
 80133c8:	ab03      	add	r3, sp, #12
 80133ca:	9301      	str	r3, [sp, #4]
 80133cc:	ab02      	add	r3, sp, #8
 80133ce:	9300      	str	r3, [sp, #0]
 80133d0:	ec45 4b10 	vmov	d0, r4, r5
 80133d4:	4653      	mov	r3, sl
 80133d6:	4632      	mov	r2, r6
 80133d8:	f002 fbd2 	bl	8015b80 <_dtoa_r>
 80133dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80133e0:	4607      	mov	r7, r0
 80133e2:	d102      	bne.n	80133ea <__cvt+0x66>
 80133e4:	f019 0f01 	tst.w	r9, #1
 80133e8:	d022      	beq.n	8013430 <__cvt+0xac>
 80133ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80133ee:	eb07 0906 	add.w	r9, r7, r6
 80133f2:	d110      	bne.n	8013416 <__cvt+0x92>
 80133f4:	783b      	ldrb	r3, [r7, #0]
 80133f6:	2b30      	cmp	r3, #48	; 0x30
 80133f8:	d10a      	bne.n	8013410 <__cvt+0x8c>
 80133fa:	2200      	movs	r2, #0
 80133fc:	2300      	movs	r3, #0
 80133fe:	4620      	mov	r0, r4
 8013400:	4629      	mov	r1, r5
 8013402:	f7ed fb81 	bl	8000b08 <__aeabi_dcmpeq>
 8013406:	b918      	cbnz	r0, 8013410 <__cvt+0x8c>
 8013408:	f1c6 0601 	rsb	r6, r6, #1
 801340c:	f8ca 6000 	str.w	r6, [sl]
 8013410:	f8da 3000 	ldr.w	r3, [sl]
 8013414:	4499      	add	r9, r3
 8013416:	2200      	movs	r2, #0
 8013418:	2300      	movs	r3, #0
 801341a:	4620      	mov	r0, r4
 801341c:	4629      	mov	r1, r5
 801341e:	f7ed fb73 	bl	8000b08 <__aeabi_dcmpeq>
 8013422:	b108      	cbz	r0, 8013428 <__cvt+0xa4>
 8013424:	f8cd 900c 	str.w	r9, [sp, #12]
 8013428:	2230      	movs	r2, #48	; 0x30
 801342a:	9b03      	ldr	r3, [sp, #12]
 801342c:	454b      	cmp	r3, r9
 801342e:	d307      	bcc.n	8013440 <__cvt+0xbc>
 8013430:	9b03      	ldr	r3, [sp, #12]
 8013432:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013434:	1bdb      	subs	r3, r3, r7
 8013436:	4638      	mov	r0, r7
 8013438:	6013      	str	r3, [r2, #0]
 801343a:	b004      	add	sp, #16
 801343c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013440:	1c59      	adds	r1, r3, #1
 8013442:	9103      	str	r1, [sp, #12]
 8013444:	701a      	strb	r2, [r3, #0]
 8013446:	e7f0      	b.n	801342a <__cvt+0xa6>

08013448 <__exponent>:
 8013448:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801344a:	4603      	mov	r3, r0
 801344c:	2900      	cmp	r1, #0
 801344e:	bfb8      	it	lt
 8013450:	4249      	neglt	r1, r1
 8013452:	f803 2b02 	strb.w	r2, [r3], #2
 8013456:	bfb4      	ite	lt
 8013458:	222d      	movlt	r2, #45	; 0x2d
 801345a:	222b      	movge	r2, #43	; 0x2b
 801345c:	2909      	cmp	r1, #9
 801345e:	7042      	strb	r2, [r0, #1]
 8013460:	dd2a      	ble.n	80134b8 <__exponent+0x70>
 8013462:	f10d 0407 	add.w	r4, sp, #7
 8013466:	46a4      	mov	ip, r4
 8013468:	270a      	movs	r7, #10
 801346a:	46a6      	mov	lr, r4
 801346c:	460a      	mov	r2, r1
 801346e:	fb91 f6f7 	sdiv	r6, r1, r7
 8013472:	fb07 1516 	mls	r5, r7, r6, r1
 8013476:	3530      	adds	r5, #48	; 0x30
 8013478:	2a63      	cmp	r2, #99	; 0x63
 801347a:	f104 34ff 	add.w	r4, r4, #4294967295
 801347e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8013482:	4631      	mov	r1, r6
 8013484:	dcf1      	bgt.n	801346a <__exponent+0x22>
 8013486:	3130      	adds	r1, #48	; 0x30
 8013488:	f1ae 0502 	sub.w	r5, lr, #2
 801348c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013490:	1c44      	adds	r4, r0, #1
 8013492:	4629      	mov	r1, r5
 8013494:	4561      	cmp	r1, ip
 8013496:	d30a      	bcc.n	80134ae <__exponent+0x66>
 8013498:	f10d 0209 	add.w	r2, sp, #9
 801349c:	eba2 020e 	sub.w	r2, r2, lr
 80134a0:	4565      	cmp	r5, ip
 80134a2:	bf88      	it	hi
 80134a4:	2200      	movhi	r2, #0
 80134a6:	4413      	add	r3, r2
 80134a8:	1a18      	subs	r0, r3, r0
 80134aa:	b003      	add	sp, #12
 80134ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80134b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80134b6:	e7ed      	b.n	8013494 <__exponent+0x4c>
 80134b8:	2330      	movs	r3, #48	; 0x30
 80134ba:	3130      	adds	r1, #48	; 0x30
 80134bc:	7083      	strb	r3, [r0, #2]
 80134be:	70c1      	strb	r1, [r0, #3]
 80134c0:	1d03      	adds	r3, r0, #4
 80134c2:	e7f1      	b.n	80134a8 <__exponent+0x60>

080134c4 <_printf_float>:
 80134c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134c8:	ed2d 8b02 	vpush	{d8}
 80134cc:	b08d      	sub	sp, #52	; 0x34
 80134ce:	460c      	mov	r4, r1
 80134d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80134d4:	4616      	mov	r6, r2
 80134d6:	461f      	mov	r7, r3
 80134d8:	4605      	mov	r5, r0
 80134da:	f003 fe77 	bl	80171cc <_localeconv_r>
 80134de:	f8d0 a000 	ldr.w	sl, [r0]
 80134e2:	4650      	mov	r0, sl
 80134e4:	f7ec fe8e 	bl	8000204 <strlen>
 80134e8:	2300      	movs	r3, #0
 80134ea:	930a      	str	r3, [sp, #40]	; 0x28
 80134ec:	6823      	ldr	r3, [r4, #0]
 80134ee:	9305      	str	r3, [sp, #20]
 80134f0:	f8d8 3000 	ldr.w	r3, [r8]
 80134f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80134f8:	3307      	adds	r3, #7
 80134fa:	f023 0307 	bic.w	r3, r3, #7
 80134fe:	f103 0208 	add.w	r2, r3, #8
 8013502:	f8c8 2000 	str.w	r2, [r8]
 8013506:	e9d3 2300 	ldrd	r2, r3, [r3]
 801350a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801350e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013512:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013516:	9307      	str	r3, [sp, #28]
 8013518:	f8cd 8018 	str.w	r8, [sp, #24]
 801351c:	ee08 0a10 	vmov	s16, r0
 8013520:	4b9f      	ldr	r3, [pc, #636]	; (80137a0 <_printf_float+0x2dc>)
 8013522:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013526:	f04f 32ff 	mov.w	r2, #4294967295
 801352a:	f7ed fb1f 	bl	8000b6c <__aeabi_dcmpun>
 801352e:	bb88      	cbnz	r0, 8013594 <_printf_float+0xd0>
 8013530:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013534:	4b9a      	ldr	r3, [pc, #616]	; (80137a0 <_printf_float+0x2dc>)
 8013536:	f04f 32ff 	mov.w	r2, #4294967295
 801353a:	f7ed faf9 	bl	8000b30 <__aeabi_dcmple>
 801353e:	bb48      	cbnz	r0, 8013594 <_printf_float+0xd0>
 8013540:	2200      	movs	r2, #0
 8013542:	2300      	movs	r3, #0
 8013544:	4640      	mov	r0, r8
 8013546:	4649      	mov	r1, r9
 8013548:	f7ed fae8 	bl	8000b1c <__aeabi_dcmplt>
 801354c:	b110      	cbz	r0, 8013554 <_printf_float+0x90>
 801354e:	232d      	movs	r3, #45	; 0x2d
 8013550:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013554:	4b93      	ldr	r3, [pc, #588]	; (80137a4 <_printf_float+0x2e0>)
 8013556:	4894      	ldr	r0, [pc, #592]	; (80137a8 <_printf_float+0x2e4>)
 8013558:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801355c:	bf94      	ite	ls
 801355e:	4698      	movls	r8, r3
 8013560:	4680      	movhi	r8, r0
 8013562:	2303      	movs	r3, #3
 8013564:	6123      	str	r3, [r4, #16]
 8013566:	9b05      	ldr	r3, [sp, #20]
 8013568:	f023 0204 	bic.w	r2, r3, #4
 801356c:	6022      	str	r2, [r4, #0]
 801356e:	f04f 0900 	mov.w	r9, #0
 8013572:	9700      	str	r7, [sp, #0]
 8013574:	4633      	mov	r3, r6
 8013576:	aa0b      	add	r2, sp, #44	; 0x2c
 8013578:	4621      	mov	r1, r4
 801357a:	4628      	mov	r0, r5
 801357c:	f000 f9d8 	bl	8013930 <_printf_common>
 8013580:	3001      	adds	r0, #1
 8013582:	f040 8090 	bne.w	80136a6 <_printf_float+0x1e2>
 8013586:	f04f 30ff 	mov.w	r0, #4294967295
 801358a:	b00d      	add	sp, #52	; 0x34
 801358c:	ecbd 8b02 	vpop	{d8}
 8013590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013594:	4642      	mov	r2, r8
 8013596:	464b      	mov	r3, r9
 8013598:	4640      	mov	r0, r8
 801359a:	4649      	mov	r1, r9
 801359c:	f7ed fae6 	bl	8000b6c <__aeabi_dcmpun>
 80135a0:	b140      	cbz	r0, 80135b4 <_printf_float+0xf0>
 80135a2:	464b      	mov	r3, r9
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	bfbc      	itt	lt
 80135a8:	232d      	movlt	r3, #45	; 0x2d
 80135aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80135ae:	487f      	ldr	r0, [pc, #508]	; (80137ac <_printf_float+0x2e8>)
 80135b0:	4b7f      	ldr	r3, [pc, #508]	; (80137b0 <_printf_float+0x2ec>)
 80135b2:	e7d1      	b.n	8013558 <_printf_float+0x94>
 80135b4:	6863      	ldr	r3, [r4, #4]
 80135b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80135ba:	9206      	str	r2, [sp, #24]
 80135bc:	1c5a      	adds	r2, r3, #1
 80135be:	d13f      	bne.n	8013640 <_printf_float+0x17c>
 80135c0:	2306      	movs	r3, #6
 80135c2:	6063      	str	r3, [r4, #4]
 80135c4:	9b05      	ldr	r3, [sp, #20]
 80135c6:	6861      	ldr	r1, [r4, #4]
 80135c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80135cc:	2300      	movs	r3, #0
 80135ce:	9303      	str	r3, [sp, #12]
 80135d0:	ab0a      	add	r3, sp, #40	; 0x28
 80135d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80135d6:	ab09      	add	r3, sp, #36	; 0x24
 80135d8:	ec49 8b10 	vmov	d0, r8, r9
 80135dc:	9300      	str	r3, [sp, #0]
 80135de:	6022      	str	r2, [r4, #0]
 80135e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80135e4:	4628      	mov	r0, r5
 80135e6:	f7ff fecd 	bl	8013384 <__cvt>
 80135ea:	9b06      	ldr	r3, [sp, #24]
 80135ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80135ee:	2b47      	cmp	r3, #71	; 0x47
 80135f0:	4680      	mov	r8, r0
 80135f2:	d108      	bne.n	8013606 <_printf_float+0x142>
 80135f4:	1cc8      	adds	r0, r1, #3
 80135f6:	db02      	blt.n	80135fe <_printf_float+0x13a>
 80135f8:	6863      	ldr	r3, [r4, #4]
 80135fa:	4299      	cmp	r1, r3
 80135fc:	dd41      	ble.n	8013682 <_printf_float+0x1be>
 80135fe:	f1ab 0b02 	sub.w	fp, fp, #2
 8013602:	fa5f fb8b 	uxtb.w	fp, fp
 8013606:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801360a:	d820      	bhi.n	801364e <_printf_float+0x18a>
 801360c:	3901      	subs	r1, #1
 801360e:	465a      	mov	r2, fp
 8013610:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013614:	9109      	str	r1, [sp, #36]	; 0x24
 8013616:	f7ff ff17 	bl	8013448 <__exponent>
 801361a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801361c:	1813      	adds	r3, r2, r0
 801361e:	2a01      	cmp	r2, #1
 8013620:	4681      	mov	r9, r0
 8013622:	6123      	str	r3, [r4, #16]
 8013624:	dc02      	bgt.n	801362c <_printf_float+0x168>
 8013626:	6822      	ldr	r2, [r4, #0]
 8013628:	07d2      	lsls	r2, r2, #31
 801362a:	d501      	bpl.n	8013630 <_printf_float+0x16c>
 801362c:	3301      	adds	r3, #1
 801362e:	6123      	str	r3, [r4, #16]
 8013630:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013634:	2b00      	cmp	r3, #0
 8013636:	d09c      	beq.n	8013572 <_printf_float+0xae>
 8013638:	232d      	movs	r3, #45	; 0x2d
 801363a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801363e:	e798      	b.n	8013572 <_printf_float+0xae>
 8013640:	9a06      	ldr	r2, [sp, #24]
 8013642:	2a47      	cmp	r2, #71	; 0x47
 8013644:	d1be      	bne.n	80135c4 <_printf_float+0x100>
 8013646:	2b00      	cmp	r3, #0
 8013648:	d1bc      	bne.n	80135c4 <_printf_float+0x100>
 801364a:	2301      	movs	r3, #1
 801364c:	e7b9      	b.n	80135c2 <_printf_float+0xfe>
 801364e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013652:	d118      	bne.n	8013686 <_printf_float+0x1c2>
 8013654:	2900      	cmp	r1, #0
 8013656:	6863      	ldr	r3, [r4, #4]
 8013658:	dd0b      	ble.n	8013672 <_printf_float+0x1ae>
 801365a:	6121      	str	r1, [r4, #16]
 801365c:	b913      	cbnz	r3, 8013664 <_printf_float+0x1a0>
 801365e:	6822      	ldr	r2, [r4, #0]
 8013660:	07d0      	lsls	r0, r2, #31
 8013662:	d502      	bpl.n	801366a <_printf_float+0x1a6>
 8013664:	3301      	adds	r3, #1
 8013666:	440b      	add	r3, r1
 8013668:	6123      	str	r3, [r4, #16]
 801366a:	65a1      	str	r1, [r4, #88]	; 0x58
 801366c:	f04f 0900 	mov.w	r9, #0
 8013670:	e7de      	b.n	8013630 <_printf_float+0x16c>
 8013672:	b913      	cbnz	r3, 801367a <_printf_float+0x1b6>
 8013674:	6822      	ldr	r2, [r4, #0]
 8013676:	07d2      	lsls	r2, r2, #31
 8013678:	d501      	bpl.n	801367e <_printf_float+0x1ba>
 801367a:	3302      	adds	r3, #2
 801367c:	e7f4      	b.n	8013668 <_printf_float+0x1a4>
 801367e:	2301      	movs	r3, #1
 8013680:	e7f2      	b.n	8013668 <_printf_float+0x1a4>
 8013682:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013688:	4299      	cmp	r1, r3
 801368a:	db05      	blt.n	8013698 <_printf_float+0x1d4>
 801368c:	6823      	ldr	r3, [r4, #0]
 801368e:	6121      	str	r1, [r4, #16]
 8013690:	07d8      	lsls	r0, r3, #31
 8013692:	d5ea      	bpl.n	801366a <_printf_float+0x1a6>
 8013694:	1c4b      	adds	r3, r1, #1
 8013696:	e7e7      	b.n	8013668 <_printf_float+0x1a4>
 8013698:	2900      	cmp	r1, #0
 801369a:	bfd4      	ite	le
 801369c:	f1c1 0202 	rsble	r2, r1, #2
 80136a0:	2201      	movgt	r2, #1
 80136a2:	4413      	add	r3, r2
 80136a4:	e7e0      	b.n	8013668 <_printf_float+0x1a4>
 80136a6:	6823      	ldr	r3, [r4, #0]
 80136a8:	055a      	lsls	r2, r3, #21
 80136aa:	d407      	bmi.n	80136bc <_printf_float+0x1f8>
 80136ac:	6923      	ldr	r3, [r4, #16]
 80136ae:	4642      	mov	r2, r8
 80136b0:	4631      	mov	r1, r6
 80136b2:	4628      	mov	r0, r5
 80136b4:	47b8      	blx	r7
 80136b6:	3001      	adds	r0, #1
 80136b8:	d12c      	bne.n	8013714 <_printf_float+0x250>
 80136ba:	e764      	b.n	8013586 <_printf_float+0xc2>
 80136bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80136c0:	f240 80e0 	bls.w	8013884 <_printf_float+0x3c0>
 80136c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80136c8:	2200      	movs	r2, #0
 80136ca:	2300      	movs	r3, #0
 80136cc:	f7ed fa1c 	bl	8000b08 <__aeabi_dcmpeq>
 80136d0:	2800      	cmp	r0, #0
 80136d2:	d034      	beq.n	801373e <_printf_float+0x27a>
 80136d4:	4a37      	ldr	r2, [pc, #220]	; (80137b4 <_printf_float+0x2f0>)
 80136d6:	2301      	movs	r3, #1
 80136d8:	4631      	mov	r1, r6
 80136da:	4628      	mov	r0, r5
 80136dc:	47b8      	blx	r7
 80136de:	3001      	adds	r0, #1
 80136e0:	f43f af51 	beq.w	8013586 <_printf_float+0xc2>
 80136e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80136e8:	429a      	cmp	r2, r3
 80136ea:	db02      	blt.n	80136f2 <_printf_float+0x22e>
 80136ec:	6823      	ldr	r3, [r4, #0]
 80136ee:	07d8      	lsls	r0, r3, #31
 80136f0:	d510      	bpl.n	8013714 <_printf_float+0x250>
 80136f2:	ee18 3a10 	vmov	r3, s16
 80136f6:	4652      	mov	r2, sl
 80136f8:	4631      	mov	r1, r6
 80136fa:	4628      	mov	r0, r5
 80136fc:	47b8      	blx	r7
 80136fe:	3001      	adds	r0, #1
 8013700:	f43f af41 	beq.w	8013586 <_printf_float+0xc2>
 8013704:	f04f 0800 	mov.w	r8, #0
 8013708:	f104 091a 	add.w	r9, r4, #26
 801370c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801370e:	3b01      	subs	r3, #1
 8013710:	4543      	cmp	r3, r8
 8013712:	dc09      	bgt.n	8013728 <_printf_float+0x264>
 8013714:	6823      	ldr	r3, [r4, #0]
 8013716:	079b      	lsls	r3, r3, #30
 8013718:	f100 8105 	bmi.w	8013926 <_printf_float+0x462>
 801371c:	68e0      	ldr	r0, [r4, #12]
 801371e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013720:	4298      	cmp	r0, r3
 8013722:	bfb8      	it	lt
 8013724:	4618      	movlt	r0, r3
 8013726:	e730      	b.n	801358a <_printf_float+0xc6>
 8013728:	2301      	movs	r3, #1
 801372a:	464a      	mov	r2, r9
 801372c:	4631      	mov	r1, r6
 801372e:	4628      	mov	r0, r5
 8013730:	47b8      	blx	r7
 8013732:	3001      	adds	r0, #1
 8013734:	f43f af27 	beq.w	8013586 <_printf_float+0xc2>
 8013738:	f108 0801 	add.w	r8, r8, #1
 801373c:	e7e6      	b.n	801370c <_printf_float+0x248>
 801373e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013740:	2b00      	cmp	r3, #0
 8013742:	dc39      	bgt.n	80137b8 <_printf_float+0x2f4>
 8013744:	4a1b      	ldr	r2, [pc, #108]	; (80137b4 <_printf_float+0x2f0>)
 8013746:	2301      	movs	r3, #1
 8013748:	4631      	mov	r1, r6
 801374a:	4628      	mov	r0, r5
 801374c:	47b8      	blx	r7
 801374e:	3001      	adds	r0, #1
 8013750:	f43f af19 	beq.w	8013586 <_printf_float+0xc2>
 8013754:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013758:	4313      	orrs	r3, r2
 801375a:	d102      	bne.n	8013762 <_printf_float+0x29e>
 801375c:	6823      	ldr	r3, [r4, #0]
 801375e:	07d9      	lsls	r1, r3, #31
 8013760:	d5d8      	bpl.n	8013714 <_printf_float+0x250>
 8013762:	ee18 3a10 	vmov	r3, s16
 8013766:	4652      	mov	r2, sl
 8013768:	4631      	mov	r1, r6
 801376a:	4628      	mov	r0, r5
 801376c:	47b8      	blx	r7
 801376e:	3001      	adds	r0, #1
 8013770:	f43f af09 	beq.w	8013586 <_printf_float+0xc2>
 8013774:	f04f 0900 	mov.w	r9, #0
 8013778:	f104 0a1a 	add.w	sl, r4, #26
 801377c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801377e:	425b      	negs	r3, r3
 8013780:	454b      	cmp	r3, r9
 8013782:	dc01      	bgt.n	8013788 <_printf_float+0x2c4>
 8013784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013786:	e792      	b.n	80136ae <_printf_float+0x1ea>
 8013788:	2301      	movs	r3, #1
 801378a:	4652      	mov	r2, sl
 801378c:	4631      	mov	r1, r6
 801378e:	4628      	mov	r0, r5
 8013790:	47b8      	blx	r7
 8013792:	3001      	adds	r0, #1
 8013794:	f43f aef7 	beq.w	8013586 <_printf_float+0xc2>
 8013798:	f109 0901 	add.w	r9, r9, #1
 801379c:	e7ee      	b.n	801377c <_printf_float+0x2b8>
 801379e:	bf00      	nop
 80137a0:	7fefffff 	.word	0x7fefffff
 80137a4:	0801abf0 	.word	0x0801abf0
 80137a8:	0801abf4 	.word	0x0801abf4
 80137ac:	0801abfc 	.word	0x0801abfc
 80137b0:	0801abf8 	.word	0x0801abf8
 80137b4:	0801afc1 	.word	0x0801afc1
 80137b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80137ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80137bc:	429a      	cmp	r2, r3
 80137be:	bfa8      	it	ge
 80137c0:	461a      	movge	r2, r3
 80137c2:	2a00      	cmp	r2, #0
 80137c4:	4691      	mov	r9, r2
 80137c6:	dc37      	bgt.n	8013838 <_printf_float+0x374>
 80137c8:	f04f 0b00 	mov.w	fp, #0
 80137cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80137d0:	f104 021a 	add.w	r2, r4, #26
 80137d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80137d6:	9305      	str	r3, [sp, #20]
 80137d8:	eba3 0309 	sub.w	r3, r3, r9
 80137dc:	455b      	cmp	r3, fp
 80137de:	dc33      	bgt.n	8013848 <_printf_float+0x384>
 80137e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80137e4:	429a      	cmp	r2, r3
 80137e6:	db3b      	blt.n	8013860 <_printf_float+0x39c>
 80137e8:	6823      	ldr	r3, [r4, #0]
 80137ea:	07da      	lsls	r2, r3, #31
 80137ec:	d438      	bmi.n	8013860 <_printf_float+0x39c>
 80137ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80137f0:	9b05      	ldr	r3, [sp, #20]
 80137f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80137f4:	1ad3      	subs	r3, r2, r3
 80137f6:	eba2 0901 	sub.w	r9, r2, r1
 80137fa:	4599      	cmp	r9, r3
 80137fc:	bfa8      	it	ge
 80137fe:	4699      	movge	r9, r3
 8013800:	f1b9 0f00 	cmp.w	r9, #0
 8013804:	dc35      	bgt.n	8013872 <_printf_float+0x3ae>
 8013806:	f04f 0800 	mov.w	r8, #0
 801380a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801380e:	f104 0a1a 	add.w	sl, r4, #26
 8013812:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013816:	1a9b      	subs	r3, r3, r2
 8013818:	eba3 0309 	sub.w	r3, r3, r9
 801381c:	4543      	cmp	r3, r8
 801381e:	f77f af79 	ble.w	8013714 <_printf_float+0x250>
 8013822:	2301      	movs	r3, #1
 8013824:	4652      	mov	r2, sl
 8013826:	4631      	mov	r1, r6
 8013828:	4628      	mov	r0, r5
 801382a:	47b8      	blx	r7
 801382c:	3001      	adds	r0, #1
 801382e:	f43f aeaa 	beq.w	8013586 <_printf_float+0xc2>
 8013832:	f108 0801 	add.w	r8, r8, #1
 8013836:	e7ec      	b.n	8013812 <_printf_float+0x34e>
 8013838:	4613      	mov	r3, r2
 801383a:	4631      	mov	r1, r6
 801383c:	4642      	mov	r2, r8
 801383e:	4628      	mov	r0, r5
 8013840:	47b8      	blx	r7
 8013842:	3001      	adds	r0, #1
 8013844:	d1c0      	bne.n	80137c8 <_printf_float+0x304>
 8013846:	e69e      	b.n	8013586 <_printf_float+0xc2>
 8013848:	2301      	movs	r3, #1
 801384a:	4631      	mov	r1, r6
 801384c:	4628      	mov	r0, r5
 801384e:	9205      	str	r2, [sp, #20]
 8013850:	47b8      	blx	r7
 8013852:	3001      	adds	r0, #1
 8013854:	f43f ae97 	beq.w	8013586 <_printf_float+0xc2>
 8013858:	9a05      	ldr	r2, [sp, #20]
 801385a:	f10b 0b01 	add.w	fp, fp, #1
 801385e:	e7b9      	b.n	80137d4 <_printf_float+0x310>
 8013860:	ee18 3a10 	vmov	r3, s16
 8013864:	4652      	mov	r2, sl
 8013866:	4631      	mov	r1, r6
 8013868:	4628      	mov	r0, r5
 801386a:	47b8      	blx	r7
 801386c:	3001      	adds	r0, #1
 801386e:	d1be      	bne.n	80137ee <_printf_float+0x32a>
 8013870:	e689      	b.n	8013586 <_printf_float+0xc2>
 8013872:	9a05      	ldr	r2, [sp, #20]
 8013874:	464b      	mov	r3, r9
 8013876:	4442      	add	r2, r8
 8013878:	4631      	mov	r1, r6
 801387a:	4628      	mov	r0, r5
 801387c:	47b8      	blx	r7
 801387e:	3001      	adds	r0, #1
 8013880:	d1c1      	bne.n	8013806 <_printf_float+0x342>
 8013882:	e680      	b.n	8013586 <_printf_float+0xc2>
 8013884:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013886:	2a01      	cmp	r2, #1
 8013888:	dc01      	bgt.n	801388e <_printf_float+0x3ca>
 801388a:	07db      	lsls	r3, r3, #31
 801388c:	d538      	bpl.n	8013900 <_printf_float+0x43c>
 801388e:	2301      	movs	r3, #1
 8013890:	4642      	mov	r2, r8
 8013892:	4631      	mov	r1, r6
 8013894:	4628      	mov	r0, r5
 8013896:	47b8      	blx	r7
 8013898:	3001      	adds	r0, #1
 801389a:	f43f ae74 	beq.w	8013586 <_printf_float+0xc2>
 801389e:	ee18 3a10 	vmov	r3, s16
 80138a2:	4652      	mov	r2, sl
 80138a4:	4631      	mov	r1, r6
 80138a6:	4628      	mov	r0, r5
 80138a8:	47b8      	blx	r7
 80138aa:	3001      	adds	r0, #1
 80138ac:	f43f ae6b 	beq.w	8013586 <_printf_float+0xc2>
 80138b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80138b4:	2200      	movs	r2, #0
 80138b6:	2300      	movs	r3, #0
 80138b8:	f7ed f926 	bl	8000b08 <__aeabi_dcmpeq>
 80138bc:	b9d8      	cbnz	r0, 80138f6 <_printf_float+0x432>
 80138be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80138c0:	f108 0201 	add.w	r2, r8, #1
 80138c4:	3b01      	subs	r3, #1
 80138c6:	4631      	mov	r1, r6
 80138c8:	4628      	mov	r0, r5
 80138ca:	47b8      	blx	r7
 80138cc:	3001      	adds	r0, #1
 80138ce:	d10e      	bne.n	80138ee <_printf_float+0x42a>
 80138d0:	e659      	b.n	8013586 <_printf_float+0xc2>
 80138d2:	2301      	movs	r3, #1
 80138d4:	4652      	mov	r2, sl
 80138d6:	4631      	mov	r1, r6
 80138d8:	4628      	mov	r0, r5
 80138da:	47b8      	blx	r7
 80138dc:	3001      	adds	r0, #1
 80138de:	f43f ae52 	beq.w	8013586 <_printf_float+0xc2>
 80138e2:	f108 0801 	add.w	r8, r8, #1
 80138e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80138e8:	3b01      	subs	r3, #1
 80138ea:	4543      	cmp	r3, r8
 80138ec:	dcf1      	bgt.n	80138d2 <_printf_float+0x40e>
 80138ee:	464b      	mov	r3, r9
 80138f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80138f4:	e6dc      	b.n	80136b0 <_printf_float+0x1ec>
 80138f6:	f04f 0800 	mov.w	r8, #0
 80138fa:	f104 0a1a 	add.w	sl, r4, #26
 80138fe:	e7f2      	b.n	80138e6 <_printf_float+0x422>
 8013900:	2301      	movs	r3, #1
 8013902:	4642      	mov	r2, r8
 8013904:	e7df      	b.n	80138c6 <_printf_float+0x402>
 8013906:	2301      	movs	r3, #1
 8013908:	464a      	mov	r2, r9
 801390a:	4631      	mov	r1, r6
 801390c:	4628      	mov	r0, r5
 801390e:	47b8      	blx	r7
 8013910:	3001      	adds	r0, #1
 8013912:	f43f ae38 	beq.w	8013586 <_printf_float+0xc2>
 8013916:	f108 0801 	add.w	r8, r8, #1
 801391a:	68e3      	ldr	r3, [r4, #12]
 801391c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801391e:	1a5b      	subs	r3, r3, r1
 8013920:	4543      	cmp	r3, r8
 8013922:	dcf0      	bgt.n	8013906 <_printf_float+0x442>
 8013924:	e6fa      	b.n	801371c <_printf_float+0x258>
 8013926:	f04f 0800 	mov.w	r8, #0
 801392a:	f104 0919 	add.w	r9, r4, #25
 801392e:	e7f4      	b.n	801391a <_printf_float+0x456>

08013930 <_printf_common>:
 8013930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013934:	4616      	mov	r6, r2
 8013936:	4699      	mov	r9, r3
 8013938:	688a      	ldr	r2, [r1, #8]
 801393a:	690b      	ldr	r3, [r1, #16]
 801393c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013940:	4293      	cmp	r3, r2
 8013942:	bfb8      	it	lt
 8013944:	4613      	movlt	r3, r2
 8013946:	6033      	str	r3, [r6, #0]
 8013948:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801394c:	4607      	mov	r7, r0
 801394e:	460c      	mov	r4, r1
 8013950:	b10a      	cbz	r2, 8013956 <_printf_common+0x26>
 8013952:	3301      	adds	r3, #1
 8013954:	6033      	str	r3, [r6, #0]
 8013956:	6823      	ldr	r3, [r4, #0]
 8013958:	0699      	lsls	r1, r3, #26
 801395a:	bf42      	ittt	mi
 801395c:	6833      	ldrmi	r3, [r6, #0]
 801395e:	3302      	addmi	r3, #2
 8013960:	6033      	strmi	r3, [r6, #0]
 8013962:	6825      	ldr	r5, [r4, #0]
 8013964:	f015 0506 	ands.w	r5, r5, #6
 8013968:	d106      	bne.n	8013978 <_printf_common+0x48>
 801396a:	f104 0a19 	add.w	sl, r4, #25
 801396e:	68e3      	ldr	r3, [r4, #12]
 8013970:	6832      	ldr	r2, [r6, #0]
 8013972:	1a9b      	subs	r3, r3, r2
 8013974:	42ab      	cmp	r3, r5
 8013976:	dc26      	bgt.n	80139c6 <_printf_common+0x96>
 8013978:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801397c:	1e13      	subs	r3, r2, #0
 801397e:	6822      	ldr	r2, [r4, #0]
 8013980:	bf18      	it	ne
 8013982:	2301      	movne	r3, #1
 8013984:	0692      	lsls	r2, r2, #26
 8013986:	d42b      	bmi.n	80139e0 <_printf_common+0xb0>
 8013988:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801398c:	4649      	mov	r1, r9
 801398e:	4638      	mov	r0, r7
 8013990:	47c0      	blx	r8
 8013992:	3001      	adds	r0, #1
 8013994:	d01e      	beq.n	80139d4 <_printf_common+0xa4>
 8013996:	6823      	ldr	r3, [r4, #0]
 8013998:	68e5      	ldr	r5, [r4, #12]
 801399a:	6832      	ldr	r2, [r6, #0]
 801399c:	f003 0306 	and.w	r3, r3, #6
 80139a0:	2b04      	cmp	r3, #4
 80139a2:	bf08      	it	eq
 80139a4:	1aad      	subeq	r5, r5, r2
 80139a6:	68a3      	ldr	r3, [r4, #8]
 80139a8:	6922      	ldr	r2, [r4, #16]
 80139aa:	bf0c      	ite	eq
 80139ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80139b0:	2500      	movne	r5, #0
 80139b2:	4293      	cmp	r3, r2
 80139b4:	bfc4      	itt	gt
 80139b6:	1a9b      	subgt	r3, r3, r2
 80139b8:	18ed      	addgt	r5, r5, r3
 80139ba:	2600      	movs	r6, #0
 80139bc:	341a      	adds	r4, #26
 80139be:	42b5      	cmp	r5, r6
 80139c0:	d11a      	bne.n	80139f8 <_printf_common+0xc8>
 80139c2:	2000      	movs	r0, #0
 80139c4:	e008      	b.n	80139d8 <_printf_common+0xa8>
 80139c6:	2301      	movs	r3, #1
 80139c8:	4652      	mov	r2, sl
 80139ca:	4649      	mov	r1, r9
 80139cc:	4638      	mov	r0, r7
 80139ce:	47c0      	blx	r8
 80139d0:	3001      	adds	r0, #1
 80139d2:	d103      	bne.n	80139dc <_printf_common+0xac>
 80139d4:	f04f 30ff 	mov.w	r0, #4294967295
 80139d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139dc:	3501      	adds	r5, #1
 80139de:	e7c6      	b.n	801396e <_printf_common+0x3e>
 80139e0:	18e1      	adds	r1, r4, r3
 80139e2:	1c5a      	adds	r2, r3, #1
 80139e4:	2030      	movs	r0, #48	; 0x30
 80139e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80139ea:	4422      	add	r2, r4
 80139ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80139f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80139f4:	3302      	adds	r3, #2
 80139f6:	e7c7      	b.n	8013988 <_printf_common+0x58>
 80139f8:	2301      	movs	r3, #1
 80139fa:	4622      	mov	r2, r4
 80139fc:	4649      	mov	r1, r9
 80139fe:	4638      	mov	r0, r7
 8013a00:	47c0      	blx	r8
 8013a02:	3001      	adds	r0, #1
 8013a04:	d0e6      	beq.n	80139d4 <_printf_common+0xa4>
 8013a06:	3601      	adds	r6, #1
 8013a08:	e7d9      	b.n	80139be <_printf_common+0x8e>
	...

08013a0c <_printf_i>:
 8013a0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013a10:	460c      	mov	r4, r1
 8013a12:	4691      	mov	r9, r2
 8013a14:	7e27      	ldrb	r7, [r4, #24]
 8013a16:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013a18:	2f78      	cmp	r7, #120	; 0x78
 8013a1a:	4680      	mov	r8, r0
 8013a1c:	469a      	mov	sl, r3
 8013a1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013a22:	d807      	bhi.n	8013a34 <_printf_i+0x28>
 8013a24:	2f62      	cmp	r7, #98	; 0x62
 8013a26:	d80a      	bhi.n	8013a3e <_printf_i+0x32>
 8013a28:	2f00      	cmp	r7, #0
 8013a2a:	f000 80d8 	beq.w	8013bde <_printf_i+0x1d2>
 8013a2e:	2f58      	cmp	r7, #88	; 0x58
 8013a30:	f000 80a3 	beq.w	8013b7a <_printf_i+0x16e>
 8013a34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013a38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013a3c:	e03a      	b.n	8013ab4 <_printf_i+0xa8>
 8013a3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013a42:	2b15      	cmp	r3, #21
 8013a44:	d8f6      	bhi.n	8013a34 <_printf_i+0x28>
 8013a46:	a001      	add	r0, pc, #4	; (adr r0, 8013a4c <_printf_i+0x40>)
 8013a48:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8013a4c:	08013aa5 	.word	0x08013aa5
 8013a50:	08013ab9 	.word	0x08013ab9
 8013a54:	08013a35 	.word	0x08013a35
 8013a58:	08013a35 	.word	0x08013a35
 8013a5c:	08013a35 	.word	0x08013a35
 8013a60:	08013a35 	.word	0x08013a35
 8013a64:	08013ab9 	.word	0x08013ab9
 8013a68:	08013a35 	.word	0x08013a35
 8013a6c:	08013a35 	.word	0x08013a35
 8013a70:	08013a35 	.word	0x08013a35
 8013a74:	08013a35 	.word	0x08013a35
 8013a78:	08013bc5 	.word	0x08013bc5
 8013a7c:	08013ae9 	.word	0x08013ae9
 8013a80:	08013ba7 	.word	0x08013ba7
 8013a84:	08013a35 	.word	0x08013a35
 8013a88:	08013a35 	.word	0x08013a35
 8013a8c:	08013be7 	.word	0x08013be7
 8013a90:	08013a35 	.word	0x08013a35
 8013a94:	08013ae9 	.word	0x08013ae9
 8013a98:	08013a35 	.word	0x08013a35
 8013a9c:	08013a35 	.word	0x08013a35
 8013aa0:	08013baf 	.word	0x08013baf
 8013aa4:	680b      	ldr	r3, [r1, #0]
 8013aa6:	1d1a      	adds	r2, r3, #4
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	600a      	str	r2, [r1, #0]
 8013aac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013ab0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013ab4:	2301      	movs	r3, #1
 8013ab6:	e0a3      	b.n	8013c00 <_printf_i+0x1f4>
 8013ab8:	6825      	ldr	r5, [r4, #0]
 8013aba:	6808      	ldr	r0, [r1, #0]
 8013abc:	062e      	lsls	r6, r5, #24
 8013abe:	f100 0304 	add.w	r3, r0, #4
 8013ac2:	d50a      	bpl.n	8013ada <_printf_i+0xce>
 8013ac4:	6805      	ldr	r5, [r0, #0]
 8013ac6:	600b      	str	r3, [r1, #0]
 8013ac8:	2d00      	cmp	r5, #0
 8013aca:	da03      	bge.n	8013ad4 <_printf_i+0xc8>
 8013acc:	232d      	movs	r3, #45	; 0x2d
 8013ace:	426d      	negs	r5, r5
 8013ad0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013ad4:	485e      	ldr	r0, [pc, #376]	; (8013c50 <_printf_i+0x244>)
 8013ad6:	230a      	movs	r3, #10
 8013ad8:	e019      	b.n	8013b0e <_printf_i+0x102>
 8013ada:	f015 0f40 	tst.w	r5, #64	; 0x40
 8013ade:	6805      	ldr	r5, [r0, #0]
 8013ae0:	600b      	str	r3, [r1, #0]
 8013ae2:	bf18      	it	ne
 8013ae4:	b22d      	sxthne	r5, r5
 8013ae6:	e7ef      	b.n	8013ac8 <_printf_i+0xbc>
 8013ae8:	680b      	ldr	r3, [r1, #0]
 8013aea:	6825      	ldr	r5, [r4, #0]
 8013aec:	1d18      	adds	r0, r3, #4
 8013aee:	6008      	str	r0, [r1, #0]
 8013af0:	0628      	lsls	r0, r5, #24
 8013af2:	d501      	bpl.n	8013af8 <_printf_i+0xec>
 8013af4:	681d      	ldr	r5, [r3, #0]
 8013af6:	e002      	b.n	8013afe <_printf_i+0xf2>
 8013af8:	0669      	lsls	r1, r5, #25
 8013afa:	d5fb      	bpl.n	8013af4 <_printf_i+0xe8>
 8013afc:	881d      	ldrh	r5, [r3, #0]
 8013afe:	4854      	ldr	r0, [pc, #336]	; (8013c50 <_printf_i+0x244>)
 8013b00:	2f6f      	cmp	r7, #111	; 0x6f
 8013b02:	bf0c      	ite	eq
 8013b04:	2308      	moveq	r3, #8
 8013b06:	230a      	movne	r3, #10
 8013b08:	2100      	movs	r1, #0
 8013b0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013b0e:	6866      	ldr	r6, [r4, #4]
 8013b10:	60a6      	str	r6, [r4, #8]
 8013b12:	2e00      	cmp	r6, #0
 8013b14:	bfa2      	ittt	ge
 8013b16:	6821      	ldrge	r1, [r4, #0]
 8013b18:	f021 0104 	bicge.w	r1, r1, #4
 8013b1c:	6021      	strge	r1, [r4, #0]
 8013b1e:	b90d      	cbnz	r5, 8013b24 <_printf_i+0x118>
 8013b20:	2e00      	cmp	r6, #0
 8013b22:	d04d      	beq.n	8013bc0 <_printf_i+0x1b4>
 8013b24:	4616      	mov	r6, r2
 8013b26:	fbb5 f1f3 	udiv	r1, r5, r3
 8013b2a:	fb03 5711 	mls	r7, r3, r1, r5
 8013b2e:	5dc7      	ldrb	r7, [r0, r7]
 8013b30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013b34:	462f      	mov	r7, r5
 8013b36:	42bb      	cmp	r3, r7
 8013b38:	460d      	mov	r5, r1
 8013b3a:	d9f4      	bls.n	8013b26 <_printf_i+0x11a>
 8013b3c:	2b08      	cmp	r3, #8
 8013b3e:	d10b      	bne.n	8013b58 <_printf_i+0x14c>
 8013b40:	6823      	ldr	r3, [r4, #0]
 8013b42:	07df      	lsls	r7, r3, #31
 8013b44:	d508      	bpl.n	8013b58 <_printf_i+0x14c>
 8013b46:	6923      	ldr	r3, [r4, #16]
 8013b48:	6861      	ldr	r1, [r4, #4]
 8013b4a:	4299      	cmp	r1, r3
 8013b4c:	bfde      	ittt	le
 8013b4e:	2330      	movle	r3, #48	; 0x30
 8013b50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013b54:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013b58:	1b92      	subs	r2, r2, r6
 8013b5a:	6122      	str	r2, [r4, #16]
 8013b5c:	f8cd a000 	str.w	sl, [sp]
 8013b60:	464b      	mov	r3, r9
 8013b62:	aa03      	add	r2, sp, #12
 8013b64:	4621      	mov	r1, r4
 8013b66:	4640      	mov	r0, r8
 8013b68:	f7ff fee2 	bl	8013930 <_printf_common>
 8013b6c:	3001      	adds	r0, #1
 8013b6e:	d14c      	bne.n	8013c0a <_printf_i+0x1fe>
 8013b70:	f04f 30ff 	mov.w	r0, #4294967295
 8013b74:	b004      	add	sp, #16
 8013b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b7a:	4835      	ldr	r0, [pc, #212]	; (8013c50 <_printf_i+0x244>)
 8013b7c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013b80:	6823      	ldr	r3, [r4, #0]
 8013b82:	680e      	ldr	r6, [r1, #0]
 8013b84:	061f      	lsls	r7, r3, #24
 8013b86:	f856 5b04 	ldr.w	r5, [r6], #4
 8013b8a:	600e      	str	r6, [r1, #0]
 8013b8c:	d514      	bpl.n	8013bb8 <_printf_i+0x1ac>
 8013b8e:	07d9      	lsls	r1, r3, #31
 8013b90:	bf44      	itt	mi
 8013b92:	f043 0320 	orrmi.w	r3, r3, #32
 8013b96:	6023      	strmi	r3, [r4, #0]
 8013b98:	b91d      	cbnz	r5, 8013ba2 <_printf_i+0x196>
 8013b9a:	6823      	ldr	r3, [r4, #0]
 8013b9c:	f023 0320 	bic.w	r3, r3, #32
 8013ba0:	6023      	str	r3, [r4, #0]
 8013ba2:	2310      	movs	r3, #16
 8013ba4:	e7b0      	b.n	8013b08 <_printf_i+0xfc>
 8013ba6:	6823      	ldr	r3, [r4, #0]
 8013ba8:	f043 0320 	orr.w	r3, r3, #32
 8013bac:	6023      	str	r3, [r4, #0]
 8013bae:	2378      	movs	r3, #120	; 0x78
 8013bb0:	4828      	ldr	r0, [pc, #160]	; (8013c54 <_printf_i+0x248>)
 8013bb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013bb6:	e7e3      	b.n	8013b80 <_printf_i+0x174>
 8013bb8:	065e      	lsls	r6, r3, #25
 8013bba:	bf48      	it	mi
 8013bbc:	b2ad      	uxthmi	r5, r5
 8013bbe:	e7e6      	b.n	8013b8e <_printf_i+0x182>
 8013bc0:	4616      	mov	r6, r2
 8013bc2:	e7bb      	b.n	8013b3c <_printf_i+0x130>
 8013bc4:	680b      	ldr	r3, [r1, #0]
 8013bc6:	6826      	ldr	r6, [r4, #0]
 8013bc8:	6960      	ldr	r0, [r4, #20]
 8013bca:	1d1d      	adds	r5, r3, #4
 8013bcc:	600d      	str	r5, [r1, #0]
 8013bce:	0635      	lsls	r5, r6, #24
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	d501      	bpl.n	8013bd8 <_printf_i+0x1cc>
 8013bd4:	6018      	str	r0, [r3, #0]
 8013bd6:	e002      	b.n	8013bde <_printf_i+0x1d2>
 8013bd8:	0671      	lsls	r1, r6, #25
 8013bda:	d5fb      	bpl.n	8013bd4 <_printf_i+0x1c8>
 8013bdc:	8018      	strh	r0, [r3, #0]
 8013bde:	2300      	movs	r3, #0
 8013be0:	6123      	str	r3, [r4, #16]
 8013be2:	4616      	mov	r6, r2
 8013be4:	e7ba      	b.n	8013b5c <_printf_i+0x150>
 8013be6:	680b      	ldr	r3, [r1, #0]
 8013be8:	1d1a      	adds	r2, r3, #4
 8013bea:	600a      	str	r2, [r1, #0]
 8013bec:	681e      	ldr	r6, [r3, #0]
 8013bee:	6862      	ldr	r2, [r4, #4]
 8013bf0:	2100      	movs	r1, #0
 8013bf2:	4630      	mov	r0, r6
 8013bf4:	f7ec fb14 	bl	8000220 <memchr>
 8013bf8:	b108      	cbz	r0, 8013bfe <_printf_i+0x1f2>
 8013bfa:	1b80      	subs	r0, r0, r6
 8013bfc:	6060      	str	r0, [r4, #4]
 8013bfe:	6863      	ldr	r3, [r4, #4]
 8013c00:	6123      	str	r3, [r4, #16]
 8013c02:	2300      	movs	r3, #0
 8013c04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013c08:	e7a8      	b.n	8013b5c <_printf_i+0x150>
 8013c0a:	6923      	ldr	r3, [r4, #16]
 8013c0c:	4632      	mov	r2, r6
 8013c0e:	4649      	mov	r1, r9
 8013c10:	4640      	mov	r0, r8
 8013c12:	47d0      	blx	sl
 8013c14:	3001      	adds	r0, #1
 8013c16:	d0ab      	beq.n	8013b70 <_printf_i+0x164>
 8013c18:	6823      	ldr	r3, [r4, #0]
 8013c1a:	079b      	lsls	r3, r3, #30
 8013c1c:	d413      	bmi.n	8013c46 <_printf_i+0x23a>
 8013c1e:	68e0      	ldr	r0, [r4, #12]
 8013c20:	9b03      	ldr	r3, [sp, #12]
 8013c22:	4298      	cmp	r0, r3
 8013c24:	bfb8      	it	lt
 8013c26:	4618      	movlt	r0, r3
 8013c28:	e7a4      	b.n	8013b74 <_printf_i+0x168>
 8013c2a:	2301      	movs	r3, #1
 8013c2c:	4632      	mov	r2, r6
 8013c2e:	4649      	mov	r1, r9
 8013c30:	4640      	mov	r0, r8
 8013c32:	47d0      	blx	sl
 8013c34:	3001      	adds	r0, #1
 8013c36:	d09b      	beq.n	8013b70 <_printf_i+0x164>
 8013c38:	3501      	adds	r5, #1
 8013c3a:	68e3      	ldr	r3, [r4, #12]
 8013c3c:	9903      	ldr	r1, [sp, #12]
 8013c3e:	1a5b      	subs	r3, r3, r1
 8013c40:	42ab      	cmp	r3, r5
 8013c42:	dcf2      	bgt.n	8013c2a <_printf_i+0x21e>
 8013c44:	e7eb      	b.n	8013c1e <_printf_i+0x212>
 8013c46:	2500      	movs	r5, #0
 8013c48:	f104 0619 	add.w	r6, r4, #25
 8013c4c:	e7f5      	b.n	8013c3a <_printf_i+0x22e>
 8013c4e:	bf00      	nop
 8013c50:	0801ac00 	.word	0x0801ac00
 8013c54:	0801ac11 	.word	0x0801ac11

08013c58 <_scanf_float>:
 8013c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c5c:	b087      	sub	sp, #28
 8013c5e:	4617      	mov	r7, r2
 8013c60:	9303      	str	r3, [sp, #12]
 8013c62:	688b      	ldr	r3, [r1, #8]
 8013c64:	1e5a      	subs	r2, r3, #1
 8013c66:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013c6a:	bf83      	ittte	hi
 8013c6c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013c70:	195b      	addhi	r3, r3, r5
 8013c72:	9302      	strhi	r3, [sp, #8]
 8013c74:	2300      	movls	r3, #0
 8013c76:	bf86      	itte	hi
 8013c78:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013c7c:	608b      	strhi	r3, [r1, #8]
 8013c7e:	9302      	strls	r3, [sp, #8]
 8013c80:	680b      	ldr	r3, [r1, #0]
 8013c82:	468b      	mov	fp, r1
 8013c84:	2500      	movs	r5, #0
 8013c86:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013c8a:	f84b 3b1c 	str.w	r3, [fp], #28
 8013c8e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8013c92:	4680      	mov	r8, r0
 8013c94:	460c      	mov	r4, r1
 8013c96:	465e      	mov	r6, fp
 8013c98:	46aa      	mov	sl, r5
 8013c9a:	46a9      	mov	r9, r5
 8013c9c:	9501      	str	r5, [sp, #4]
 8013c9e:	68a2      	ldr	r2, [r4, #8]
 8013ca0:	b152      	cbz	r2, 8013cb8 <_scanf_float+0x60>
 8013ca2:	683b      	ldr	r3, [r7, #0]
 8013ca4:	781b      	ldrb	r3, [r3, #0]
 8013ca6:	2b4e      	cmp	r3, #78	; 0x4e
 8013ca8:	d864      	bhi.n	8013d74 <_scanf_float+0x11c>
 8013caa:	2b40      	cmp	r3, #64	; 0x40
 8013cac:	d83c      	bhi.n	8013d28 <_scanf_float+0xd0>
 8013cae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8013cb2:	b2c8      	uxtb	r0, r1
 8013cb4:	280e      	cmp	r0, #14
 8013cb6:	d93a      	bls.n	8013d2e <_scanf_float+0xd6>
 8013cb8:	f1b9 0f00 	cmp.w	r9, #0
 8013cbc:	d003      	beq.n	8013cc6 <_scanf_float+0x6e>
 8013cbe:	6823      	ldr	r3, [r4, #0]
 8013cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013cc4:	6023      	str	r3, [r4, #0]
 8013cc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013cca:	f1ba 0f01 	cmp.w	sl, #1
 8013cce:	f200 8113 	bhi.w	8013ef8 <_scanf_float+0x2a0>
 8013cd2:	455e      	cmp	r6, fp
 8013cd4:	f200 8105 	bhi.w	8013ee2 <_scanf_float+0x28a>
 8013cd8:	2501      	movs	r5, #1
 8013cda:	4628      	mov	r0, r5
 8013cdc:	b007      	add	sp, #28
 8013cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ce2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8013ce6:	2a0d      	cmp	r2, #13
 8013ce8:	d8e6      	bhi.n	8013cb8 <_scanf_float+0x60>
 8013cea:	a101      	add	r1, pc, #4	; (adr r1, 8013cf0 <_scanf_float+0x98>)
 8013cec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013cf0:	08013e2f 	.word	0x08013e2f
 8013cf4:	08013cb9 	.word	0x08013cb9
 8013cf8:	08013cb9 	.word	0x08013cb9
 8013cfc:	08013cb9 	.word	0x08013cb9
 8013d00:	08013e8f 	.word	0x08013e8f
 8013d04:	08013e67 	.word	0x08013e67
 8013d08:	08013cb9 	.word	0x08013cb9
 8013d0c:	08013cb9 	.word	0x08013cb9
 8013d10:	08013e3d 	.word	0x08013e3d
 8013d14:	08013cb9 	.word	0x08013cb9
 8013d18:	08013cb9 	.word	0x08013cb9
 8013d1c:	08013cb9 	.word	0x08013cb9
 8013d20:	08013cb9 	.word	0x08013cb9
 8013d24:	08013df5 	.word	0x08013df5
 8013d28:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8013d2c:	e7db      	b.n	8013ce6 <_scanf_float+0x8e>
 8013d2e:	290e      	cmp	r1, #14
 8013d30:	d8c2      	bhi.n	8013cb8 <_scanf_float+0x60>
 8013d32:	a001      	add	r0, pc, #4	; (adr r0, 8013d38 <_scanf_float+0xe0>)
 8013d34:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8013d38:	08013de7 	.word	0x08013de7
 8013d3c:	08013cb9 	.word	0x08013cb9
 8013d40:	08013de7 	.word	0x08013de7
 8013d44:	08013e7b 	.word	0x08013e7b
 8013d48:	08013cb9 	.word	0x08013cb9
 8013d4c:	08013d95 	.word	0x08013d95
 8013d50:	08013dd1 	.word	0x08013dd1
 8013d54:	08013dd1 	.word	0x08013dd1
 8013d58:	08013dd1 	.word	0x08013dd1
 8013d5c:	08013dd1 	.word	0x08013dd1
 8013d60:	08013dd1 	.word	0x08013dd1
 8013d64:	08013dd1 	.word	0x08013dd1
 8013d68:	08013dd1 	.word	0x08013dd1
 8013d6c:	08013dd1 	.word	0x08013dd1
 8013d70:	08013dd1 	.word	0x08013dd1
 8013d74:	2b6e      	cmp	r3, #110	; 0x6e
 8013d76:	d809      	bhi.n	8013d8c <_scanf_float+0x134>
 8013d78:	2b60      	cmp	r3, #96	; 0x60
 8013d7a:	d8b2      	bhi.n	8013ce2 <_scanf_float+0x8a>
 8013d7c:	2b54      	cmp	r3, #84	; 0x54
 8013d7e:	d077      	beq.n	8013e70 <_scanf_float+0x218>
 8013d80:	2b59      	cmp	r3, #89	; 0x59
 8013d82:	d199      	bne.n	8013cb8 <_scanf_float+0x60>
 8013d84:	2d07      	cmp	r5, #7
 8013d86:	d197      	bne.n	8013cb8 <_scanf_float+0x60>
 8013d88:	2508      	movs	r5, #8
 8013d8a:	e029      	b.n	8013de0 <_scanf_float+0x188>
 8013d8c:	2b74      	cmp	r3, #116	; 0x74
 8013d8e:	d06f      	beq.n	8013e70 <_scanf_float+0x218>
 8013d90:	2b79      	cmp	r3, #121	; 0x79
 8013d92:	e7f6      	b.n	8013d82 <_scanf_float+0x12a>
 8013d94:	6821      	ldr	r1, [r4, #0]
 8013d96:	05c8      	lsls	r0, r1, #23
 8013d98:	d51a      	bpl.n	8013dd0 <_scanf_float+0x178>
 8013d9a:	9b02      	ldr	r3, [sp, #8]
 8013d9c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013da0:	6021      	str	r1, [r4, #0]
 8013da2:	f109 0901 	add.w	r9, r9, #1
 8013da6:	b11b      	cbz	r3, 8013db0 <_scanf_float+0x158>
 8013da8:	3b01      	subs	r3, #1
 8013daa:	3201      	adds	r2, #1
 8013dac:	9302      	str	r3, [sp, #8]
 8013dae:	60a2      	str	r2, [r4, #8]
 8013db0:	68a3      	ldr	r3, [r4, #8]
 8013db2:	3b01      	subs	r3, #1
 8013db4:	60a3      	str	r3, [r4, #8]
 8013db6:	6923      	ldr	r3, [r4, #16]
 8013db8:	3301      	adds	r3, #1
 8013dba:	6123      	str	r3, [r4, #16]
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	3b01      	subs	r3, #1
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	607b      	str	r3, [r7, #4]
 8013dc4:	f340 8084 	ble.w	8013ed0 <_scanf_float+0x278>
 8013dc8:	683b      	ldr	r3, [r7, #0]
 8013dca:	3301      	adds	r3, #1
 8013dcc:	603b      	str	r3, [r7, #0]
 8013dce:	e766      	b.n	8013c9e <_scanf_float+0x46>
 8013dd0:	eb1a 0f05 	cmn.w	sl, r5
 8013dd4:	f47f af70 	bne.w	8013cb8 <_scanf_float+0x60>
 8013dd8:	6822      	ldr	r2, [r4, #0]
 8013dda:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8013dde:	6022      	str	r2, [r4, #0]
 8013de0:	f806 3b01 	strb.w	r3, [r6], #1
 8013de4:	e7e4      	b.n	8013db0 <_scanf_float+0x158>
 8013de6:	6822      	ldr	r2, [r4, #0]
 8013de8:	0610      	lsls	r0, r2, #24
 8013dea:	f57f af65 	bpl.w	8013cb8 <_scanf_float+0x60>
 8013dee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013df2:	e7f4      	b.n	8013dde <_scanf_float+0x186>
 8013df4:	f1ba 0f00 	cmp.w	sl, #0
 8013df8:	d10e      	bne.n	8013e18 <_scanf_float+0x1c0>
 8013dfa:	f1b9 0f00 	cmp.w	r9, #0
 8013dfe:	d10e      	bne.n	8013e1e <_scanf_float+0x1c6>
 8013e00:	6822      	ldr	r2, [r4, #0]
 8013e02:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013e06:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013e0a:	d108      	bne.n	8013e1e <_scanf_float+0x1c6>
 8013e0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013e10:	6022      	str	r2, [r4, #0]
 8013e12:	f04f 0a01 	mov.w	sl, #1
 8013e16:	e7e3      	b.n	8013de0 <_scanf_float+0x188>
 8013e18:	f1ba 0f02 	cmp.w	sl, #2
 8013e1c:	d055      	beq.n	8013eca <_scanf_float+0x272>
 8013e1e:	2d01      	cmp	r5, #1
 8013e20:	d002      	beq.n	8013e28 <_scanf_float+0x1d0>
 8013e22:	2d04      	cmp	r5, #4
 8013e24:	f47f af48 	bne.w	8013cb8 <_scanf_float+0x60>
 8013e28:	3501      	adds	r5, #1
 8013e2a:	b2ed      	uxtb	r5, r5
 8013e2c:	e7d8      	b.n	8013de0 <_scanf_float+0x188>
 8013e2e:	f1ba 0f01 	cmp.w	sl, #1
 8013e32:	f47f af41 	bne.w	8013cb8 <_scanf_float+0x60>
 8013e36:	f04f 0a02 	mov.w	sl, #2
 8013e3a:	e7d1      	b.n	8013de0 <_scanf_float+0x188>
 8013e3c:	b97d      	cbnz	r5, 8013e5e <_scanf_float+0x206>
 8013e3e:	f1b9 0f00 	cmp.w	r9, #0
 8013e42:	f47f af3c 	bne.w	8013cbe <_scanf_float+0x66>
 8013e46:	6822      	ldr	r2, [r4, #0]
 8013e48:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013e4c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013e50:	f47f af39 	bne.w	8013cc6 <_scanf_float+0x6e>
 8013e54:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013e58:	6022      	str	r2, [r4, #0]
 8013e5a:	2501      	movs	r5, #1
 8013e5c:	e7c0      	b.n	8013de0 <_scanf_float+0x188>
 8013e5e:	2d03      	cmp	r5, #3
 8013e60:	d0e2      	beq.n	8013e28 <_scanf_float+0x1d0>
 8013e62:	2d05      	cmp	r5, #5
 8013e64:	e7de      	b.n	8013e24 <_scanf_float+0x1cc>
 8013e66:	2d02      	cmp	r5, #2
 8013e68:	f47f af26 	bne.w	8013cb8 <_scanf_float+0x60>
 8013e6c:	2503      	movs	r5, #3
 8013e6e:	e7b7      	b.n	8013de0 <_scanf_float+0x188>
 8013e70:	2d06      	cmp	r5, #6
 8013e72:	f47f af21 	bne.w	8013cb8 <_scanf_float+0x60>
 8013e76:	2507      	movs	r5, #7
 8013e78:	e7b2      	b.n	8013de0 <_scanf_float+0x188>
 8013e7a:	6822      	ldr	r2, [r4, #0]
 8013e7c:	0591      	lsls	r1, r2, #22
 8013e7e:	f57f af1b 	bpl.w	8013cb8 <_scanf_float+0x60>
 8013e82:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8013e86:	6022      	str	r2, [r4, #0]
 8013e88:	f8cd 9004 	str.w	r9, [sp, #4]
 8013e8c:	e7a8      	b.n	8013de0 <_scanf_float+0x188>
 8013e8e:	6822      	ldr	r2, [r4, #0]
 8013e90:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8013e94:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8013e98:	d006      	beq.n	8013ea8 <_scanf_float+0x250>
 8013e9a:	0550      	lsls	r0, r2, #21
 8013e9c:	f57f af0c 	bpl.w	8013cb8 <_scanf_float+0x60>
 8013ea0:	f1b9 0f00 	cmp.w	r9, #0
 8013ea4:	f43f af0f 	beq.w	8013cc6 <_scanf_float+0x6e>
 8013ea8:	0591      	lsls	r1, r2, #22
 8013eaa:	bf58      	it	pl
 8013eac:	9901      	ldrpl	r1, [sp, #4]
 8013eae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013eb2:	bf58      	it	pl
 8013eb4:	eba9 0101 	subpl.w	r1, r9, r1
 8013eb8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8013ebc:	bf58      	it	pl
 8013ebe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8013ec2:	6022      	str	r2, [r4, #0]
 8013ec4:	f04f 0900 	mov.w	r9, #0
 8013ec8:	e78a      	b.n	8013de0 <_scanf_float+0x188>
 8013eca:	f04f 0a03 	mov.w	sl, #3
 8013ece:	e787      	b.n	8013de0 <_scanf_float+0x188>
 8013ed0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013ed4:	4639      	mov	r1, r7
 8013ed6:	4640      	mov	r0, r8
 8013ed8:	4798      	blx	r3
 8013eda:	2800      	cmp	r0, #0
 8013edc:	f43f aedf 	beq.w	8013c9e <_scanf_float+0x46>
 8013ee0:	e6ea      	b.n	8013cb8 <_scanf_float+0x60>
 8013ee2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013ee6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013eea:	463a      	mov	r2, r7
 8013eec:	4640      	mov	r0, r8
 8013eee:	4798      	blx	r3
 8013ef0:	6923      	ldr	r3, [r4, #16]
 8013ef2:	3b01      	subs	r3, #1
 8013ef4:	6123      	str	r3, [r4, #16]
 8013ef6:	e6ec      	b.n	8013cd2 <_scanf_float+0x7a>
 8013ef8:	1e6b      	subs	r3, r5, #1
 8013efa:	2b06      	cmp	r3, #6
 8013efc:	d825      	bhi.n	8013f4a <_scanf_float+0x2f2>
 8013efe:	2d02      	cmp	r5, #2
 8013f00:	d836      	bhi.n	8013f70 <_scanf_float+0x318>
 8013f02:	455e      	cmp	r6, fp
 8013f04:	f67f aee8 	bls.w	8013cd8 <_scanf_float+0x80>
 8013f08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013f0c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013f10:	463a      	mov	r2, r7
 8013f12:	4640      	mov	r0, r8
 8013f14:	4798      	blx	r3
 8013f16:	6923      	ldr	r3, [r4, #16]
 8013f18:	3b01      	subs	r3, #1
 8013f1a:	6123      	str	r3, [r4, #16]
 8013f1c:	e7f1      	b.n	8013f02 <_scanf_float+0x2aa>
 8013f1e:	9802      	ldr	r0, [sp, #8]
 8013f20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013f24:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8013f28:	9002      	str	r0, [sp, #8]
 8013f2a:	463a      	mov	r2, r7
 8013f2c:	4640      	mov	r0, r8
 8013f2e:	4798      	blx	r3
 8013f30:	6923      	ldr	r3, [r4, #16]
 8013f32:	3b01      	subs	r3, #1
 8013f34:	6123      	str	r3, [r4, #16]
 8013f36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013f3a:	fa5f fa8a 	uxtb.w	sl, sl
 8013f3e:	f1ba 0f02 	cmp.w	sl, #2
 8013f42:	d1ec      	bne.n	8013f1e <_scanf_float+0x2c6>
 8013f44:	3d03      	subs	r5, #3
 8013f46:	b2ed      	uxtb	r5, r5
 8013f48:	1b76      	subs	r6, r6, r5
 8013f4a:	6823      	ldr	r3, [r4, #0]
 8013f4c:	05da      	lsls	r2, r3, #23
 8013f4e:	d52f      	bpl.n	8013fb0 <_scanf_float+0x358>
 8013f50:	055b      	lsls	r3, r3, #21
 8013f52:	d510      	bpl.n	8013f76 <_scanf_float+0x31e>
 8013f54:	455e      	cmp	r6, fp
 8013f56:	f67f aebf 	bls.w	8013cd8 <_scanf_float+0x80>
 8013f5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013f5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013f62:	463a      	mov	r2, r7
 8013f64:	4640      	mov	r0, r8
 8013f66:	4798      	blx	r3
 8013f68:	6923      	ldr	r3, [r4, #16]
 8013f6a:	3b01      	subs	r3, #1
 8013f6c:	6123      	str	r3, [r4, #16]
 8013f6e:	e7f1      	b.n	8013f54 <_scanf_float+0x2fc>
 8013f70:	46aa      	mov	sl, r5
 8013f72:	9602      	str	r6, [sp, #8]
 8013f74:	e7df      	b.n	8013f36 <_scanf_float+0x2de>
 8013f76:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8013f7a:	6923      	ldr	r3, [r4, #16]
 8013f7c:	2965      	cmp	r1, #101	; 0x65
 8013f7e:	f103 33ff 	add.w	r3, r3, #4294967295
 8013f82:	f106 35ff 	add.w	r5, r6, #4294967295
 8013f86:	6123      	str	r3, [r4, #16]
 8013f88:	d00c      	beq.n	8013fa4 <_scanf_float+0x34c>
 8013f8a:	2945      	cmp	r1, #69	; 0x45
 8013f8c:	d00a      	beq.n	8013fa4 <_scanf_float+0x34c>
 8013f8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013f92:	463a      	mov	r2, r7
 8013f94:	4640      	mov	r0, r8
 8013f96:	4798      	blx	r3
 8013f98:	6923      	ldr	r3, [r4, #16]
 8013f9a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8013f9e:	3b01      	subs	r3, #1
 8013fa0:	1eb5      	subs	r5, r6, #2
 8013fa2:	6123      	str	r3, [r4, #16]
 8013fa4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013fa8:	463a      	mov	r2, r7
 8013faa:	4640      	mov	r0, r8
 8013fac:	4798      	blx	r3
 8013fae:	462e      	mov	r6, r5
 8013fb0:	6825      	ldr	r5, [r4, #0]
 8013fb2:	f015 0510 	ands.w	r5, r5, #16
 8013fb6:	d158      	bne.n	801406a <_scanf_float+0x412>
 8013fb8:	7035      	strb	r5, [r6, #0]
 8013fba:	6823      	ldr	r3, [r4, #0]
 8013fbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013fc4:	d11c      	bne.n	8014000 <_scanf_float+0x3a8>
 8013fc6:	9b01      	ldr	r3, [sp, #4]
 8013fc8:	454b      	cmp	r3, r9
 8013fca:	eba3 0209 	sub.w	r2, r3, r9
 8013fce:	d124      	bne.n	801401a <_scanf_float+0x3c2>
 8013fd0:	2200      	movs	r2, #0
 8013fd2:	4659      	mov	r1, fp
 8013fd4:	4640      	mov	r0, r8
 8013fd6:	f001 f881 	bl	80150dc <_strtod_r>
 8013fda:	9b03      	ldr	r3, [sp, #12]
 8013fdc:	6821      	ldr	r1, [r4, #0]
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	f011 0f02 	tst.w	r1, #2
 8013fe4:	ec57 6b10 	vmov	r6, r7, d0
 8013fe8:	f103 0204 	add.w	r2, r3, #4
 8013fec:	d020      	beq.n	8014030 <_scanf_float+0x3d8>
 8013fee:	9903      	ldr	r1, [sp, #12]
 8013ff0:	600a      	str	r2, [r1, #0]
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	e9c3 6700 	strd	r6, r7, [r3]
 8013ff8:	68e3      	ldr	r3, [r4, #12]
 8013ffa:	3301      	adds	r3, #1
 8013ffc:	60e3      	str	r3, [r4, #12]
 8013ffe:	e66c      	b.n	8013cda <_scanf_float+0x82>
 8014000:	9b04      	ldr	r3, [sp, #16]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d0e4      	beq.n	8013fd0 <_scanf_float+0x378>
 8014006:	9905      	ldr	r1, [sp, #20]
 8014008:	230a      	movs	r3, #10
 801400a:	462a      	mov	r2, r5
 801400c:	3101      	adds	r1, #1
 801400e:	4640      	mov	r0, r8
 8014010:	f001 f94a 	bl	80152a8 <_strtol_r>
 8014014:	9b04      	ldr	r3, [sp, #16]
 8014016:	9e05      	ldr	r6, [sp, #20]
 8014018:	1ac2      	subs	r2, r0, r3
 801401a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801401e:	429e      	cmp	r6, r3
 8014020:	bf28      	it	cs
 8014022:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8014026:	4912      	ldr	r1, [pc, #72]	; (8014070 <_scanf_float+0x418>)
 8014028:	4630      	mov	r0, r6
 801402a:	f000 f977 	bl	801431c <siprintf>
 801402e:	e7cf      	b.n	8013fd0 <_scanf_float+0x378>
 8014030:	f011 0f04 	tst.w	r1, #4
 8014034:	9903      	ldr	r1, [sp, #12]
 8014036:	600a      	str	r2, [r1, #0]
 8014038:	d1db      	bne.n	8013ff2 <_scanf_float+0x39a>
 801403a:	f8d3 8000 	ldr.w	r8, [r3]
 801403e:	ee10 2a10 	vmov	r2, s0
 8014042:	ee10 0a10 	vmov	r0, s0
 8014046:	463b      	mov	r3, r7
 8014048:	4639      	mov	r1, r7
 801404a:	f7ec fd8f 	bl	8000b6c <__aeabi_dcmpun>
 801404e:	b128      	cbz	r0, 801405c <_scanf_float+0x404>
 8014050:	4808      	ldr	r0, [pc, #32]	; (8014074 <_scanf_float+0x41c>)
 8014052:	f000 f919 	bl	8014288 <nanf>
 8014056:	ed88 0a00 	vstr	s0, [r8]
 801405a:	e7cd      	b.n	8013ff8 <_scanf_float+0x3a0>
 801405c:	4630      	mov	r0, r6
 801405e:	4639      	mov	r1, r7
 8014060:	f7ec fde2 	bl	8000c28 <__aeabi_d2f>
 8014064:	f8c8 0000 	str.w	r0, [r8]
 8014068:	e7c6      	b.n	8013ff8 <_scanf_float+0x3a0>
 801406a:	2500      	movs	r5, #0
 801406c:	e635      	b.n	8013cda <_scanf_float+0x82>
 801406e:	bf00      	nop
 8014070:	0801ac22 	.word	0x0801ac22
 8014074:	0801ad50 	.word	0x0801ad50

08014078 <iprintf>:
 8014078:	b40f      	push	{r0, r1, r2, r3}
 801407a:	4b0a      	ldr	r3, [pc, #40]	; (80140a4 <iprintf+0x2c>)
 801407c:	b513      	push	{r0, r1, r4, lr}
 801407e:	681c      	ldr	r4, [r3, #0]
 8014080:	b124      	cbz	r4, 801408c <iprintf+0x14>
 8014082:	69a3      	ldr	r3, [r4, #24]
 8014084:	b913      	cbnz	r3, 801408c <iprintf+0x14>
 8014086:	4620      	mov	r0, r4
 8014088:	f7fe fc30 	bl	80128ec <__sinit>
 801408c:	ab05      	add	r3, sp, #20
 801408e:	9a04      	ldr	r2, [sp, #16]
 8014090:	68a1      	ldr	r1, [r4, #8]
 8014092:	9301      	str	r3, [sp, #4]
 8014094:	4620      	mov	r0, r4
 8014096:	f004 f979 	bl	801838c <_vfiprintf_r>
 801409a:	b002      	add	sp, #8
 801409c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80140a0:	b004      	add	sp, #16
 80140a2:	4770      	bx	lr
 80140a4:	200000ac 	.word	0x200000ac

080140a8 <_puts_r>:
 80140a8:	b570      	push	{r4, r5, r6, lr}
 80140aa:	460e      	mov	r6, r1
 80140ac:	4605      	mov	r5, r0
 80140ae:	b118      	cbz	r0, 80140b8 <_puts_r+0x10>
 80140b0:	6983      	ldr	r3, [r0, #24]
 80140b2:	b90b      	cbnz	r3, 80140b8 <_puts_r+0x10>
 80140b4:	f7fe fc1a 	bl	80128ec <__sinit>
 80140b8:	69ab      	ldr	r3, [r5, #24]
 80140ba:	68ac      	ldr	r4, [r5, #8]
 80140bc:	b913      	cbnz	r3, 80140c4 <_puts_r+0x1c>
 80140be:	4628      	mov	r0, r5
 80140c0:	f7fe fc14 	bl	80128ec <__sinit>
 80140c4:	4b2c      	ldr	r3, [pc, #176]	; (8014178 <_puts_r+0xd0>)
 80140c6:	429c      	cmp	r4, r3
 80140c8:	d120      	bne.n	801410c <_puts_r+0x64>
 80140ca:	686c      	ldr	r4, [r5, #4]
 80140cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80140ce:	07db      	lsls	r3, r3, #31
 80140d0:	d405      	bmi.n	80140de <_puts_r+0x36>
 80140d2:	89a3      	ldrh	r3, [r4, #12]
 80140d4:	0598      	lsls	r0, r3, #22
 80140d6:	d402      	bmi.n	80140de <_puts_r+0x36>
 80140d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80140da:	f7fe fde7 	bl	8012cac <__retarget_lock_acquire_recursive>
 80140de:	89a3      	ldrh	r3, [r4, #12]
 80140e0:	0719      	lsls	r1, r3, #28
 80140e2:	d51d      	bpl.n	8014120 <_puts_r+0x78>
 80140e4:	6923      	ldr	r3, [r4, #16]
 80140e6:	b1db      	cbz	r3, 8014120 <_puts_r+0x78>
 80140e8:	3e01      	subs	r6, #1
 80140ea:	68a3      	ldr	r3, [r4, #8]
 80140ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80140f0:	3b01      	subs	r3, #1
 80140f2:	60a3      	str	r3, [r4, #8]
 80140f4:	bb39      	cbnz	r1, 8014146 <_puts_r+0x9e>
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	da38      	bge.n	801416c <_puts_r+0xc4>
 80140fa:	4622      	mov	r2, r4
 80140fc:	210a      	movs	r1, #10
 80140fe:	4628      	mov	r0, r5
 8014100:	f001 fb9c 	bl	801583c <__swbuf_r>
 8014104:	3001      	adds	r0, #1
 8014106:	d011      	beq.n	801412c <_puts_r+0x84>
 8014108:	250a      	movs	r5, #10
 801410a:	e011      	b.n	8014130 <_puts_r+0x88>
 801410c:	4b1b      	ldr	r3, [pc, #108]	; (801417c <_puts_r+0xd4>)
 801410e:	429c      	cmp	r4, r3
 8014110:	d101      	bne.n	8014116 <_puts_r+0x6e>
 8014112:	68ac      	ldr	r4, [r5, #8]
 8014114:	e7da      	b.n	80140cc <_puts_r+0x24>
 8014116:	4b1a      	ldr	r3, [pc, #104]	; (8014180 <_puts_r+0xd8>)
 8014118:	429c      	cmp	r4, r3
 801411a:	bf08      	it	eq
 801411c:	68ec      	ldreq	r4, [r5, #12]
 801411e:	e7d5      	b.n	80140cc <_puts_r+0x24>
 8014120:	4621      	mov	r1, r4
 8014122:	4628      	mov	r0, r5
 8014124:	f001 fbee 	bl	8015904 <__swsetup_r>
 8014128:	2800      	cmp	r0, #0
 801412a:	d0dd      	beq.n	80140e8 <_puts_r+0x40>
 801412c:	f04f 35ff 	mov.w	r5, #4294967295
 8014130:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014132:	07da      	lsls	r2, r3, #31
 8014134:	d405      	bmi.n	8014142 <_puts_r+0x9a>
 8014136:	89a3      	ldrh	r3, [r4, #12]
 8014138:	059b      	lsls	r3, r3, #22
 801413a:	d402      	bmi.n	8014142 <_puts_r+0x9a>
 801413c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801413e:	f7fe fdb7 	bl	8012cb0 <__retarget_lock_release_recursive>
 8014142:	4628      	mov	r0, r5
 8014144:	bd70      	pop	{r4, r5, r6, pc}
 8014146:	2b00      	cmp	r3, #0
 8014148:	da04      	bge.n	8014154 <_puts_r+0xac>
 801414a:	69a2      	ldr	r2, [r4, #24]
 801414c:	429a      	cmp	r2, r3
 801414e:	dc06      	bgt.n	801415e <_puts_r+0xb6>
 8014150:	290a      	cmp	r1, #10
 8014152:	d004      	beq.n	801415e <_puts_r+0xb6>
 8014154:	6823      	ldr	r3, [r4, #0]
 8014156:	1c5a      	adds	r2, r3, #1
 8014158:	6022      	str	r2, [r4, #0]
 801415a:	7019      	strb	r1, [r3, #0]
 801415c:	e7c5      	b.n	80140ea <_puts_r+0x42>
 801415e:	4622      	mov	r2, r4
 8014160:	4628      	mov	r0, r5
 8014162:	f001 fb6b 	bl	801583c <__swbuf_r>
 8014166:	3001      	adds	r0, #1
 8014168:	d1bf      	bne.n	80140ea <_puts_r+0x42>
 801416a:	e7df      	b.n	801412c <_puts_r+0x84>
 801416c:	6823      	ldr	r3, [r4, #0]
 801416e:	250a      	movs	r5, #10
 8014170:	1c5a      	adds	r2, r3, #1
 8014172:	6022      	str	r2, [r4, #0]
 8014174:	701d      	strb	r5, [r3, #0]
 8014176:	e7db      	b.n	8014130 <_puts_r+0x88>
 8014178:	0801aa74 	.word	0x0801aa74
 801417c:	0801aa94 	.word	0x0801aa94
 8014180:	0801aa54 	.word	0x0801aa54

08014184 <puts>:
 8014184:	4b02      	ldr	r3, [pc, #8]	; (8014190 <puts+0xc>)
 8014186:	4601      	mov	r1, r0
 8014188:	6818      	ldr	r0, [r3, #0]
 801418a:	f7ff bf8d 	b.w	80140a8 <_puts_r>
 801418e:	bf00      	nop
 8014190:	200000ac 	.word	0x200000ac

08014194 <cleanup_glue>:
 8014194:	b538      	push	{r3, r4, r5, lr}
 8014196:	460c      	mov	r4, r1
 8014198:	6809      	ldr	r1, [r1, #0]
 801419a:	4605      	mov	r5, r0
 801419c:	b109      	cbz	r1, 80141a2 <cleanup_glue+0xe>
 801419e:	f7ff fff9 	bl	8014194 <cleanup_glue>
 80141a2:	4621      	mov	r1, r4
 80141a4:	4628      	mov	r0, r5
 80141a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80141aa:	f7ff b841 	b.w	8013230 <_free_r>
	...

080141b0 <_reclaim_reent>:
 80141b0:	4b2c      	ldr	r3, [pc, #176]	; (8014264 <_reclaim_reent+0xb4>)
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	4283      	cmp	r3, r0
 80141b6:	b570      	push	{r4, r5, r6, lr}
 80141b8:	4604      	mov	r4, r0
 80141ba:	d051      	beq.n	8014260 <_reclaim_reent+0xb0>
 80141bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80141be:	b143      	cbz	r3, 80141d2 <_reclaim_reent+0x22>
 80141c0:	68db      	ldr	r3, [r3, #12]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d14a      	bne.n	801425c <_reclaim_reent+0xac>
 80141c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80141c8:	6819      	ldr	r1, [r3, #0]
 80141ca:	b111      	cbz	r1, 80141d2 <_reclaim_reent+0x22>
 80141cc:	4620      	mov	r0, r4
 80141ce:	f7ff f82f 	bl	8013230 <_free_r>
 80141d2:	6961      	ldr	r1, [r4, #20]
 80141d4:	b111      	cbz	r1, 80141dc <_reclaim_reent+0x2c>
 80141d6:	4620      	mov	r0, r4
 80141d8:	f7ff f82a 	bl	8013230 <_free_r>
 80141dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80141de:	b111      	cbz	r1, 80141e6 <_reclaim_reent+0x36>
 80141e0:	4620      	mov	r0, r4
 80141e2:	f7ff f825 	bl	8013230 <_free_r>
 80141e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80141e8:	b111      	cbz	r1, 80141f0 <_reclaim_reent+0x40>
 80141ea:	4620      	mov	r0, r4
 80141ec:	f7ff f820 	bl	8013230 <_free_r>
 80141f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80141f2:	b111      	cbz	r1, 80141fa <_reclaim_reent+0x4a>
 80141f4:	4620      	mov	r0, r4
 80141f6:	f7ff f81b 	bl	8013230 <_free_r>
 80141fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80141fc:	b111      	cbz	r1, 8014204 <_reclaim_reent+0x54>
 80141fe:	4620      	mov	r0, r4
 8014200:	f7ff f816 	bl	8013230 <_free_r>
 8014204:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8014206:	b111      	cbz	r1, 801420e <_reclaim_reent+0x5e>
 8014208:	4620      	mov	r0, r4
 801420a:	f7ff f811 	bl	8013230 <_free_r>
 801420e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8014210:	b111      	cbz	r1, 8014218 <_reclaim_reent+0x68>
 8014212:	4620      	mov	r0, r4
 8014214:	f7ff f80c 	bl	8013230 <_free_r>
 8014218:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801421a:	b111      	cbz	r1, 8014222 <_reclaim_reent+0x72>
 801421c:	4620      	mov	r0, r4
 801421e:	f7ff f807 	bl	8013230 <_free_r>
 8014222:	69a3      	ldr	r3, [r4, #24]
 8014224:	b1e3      	cbz	r3, 8014260 <_reclaim_reent+0xb0>
 8014226:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014228:	4620      	mov	r0, r4
 801422a:	4798      	blx	r3
 801422c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801422e:	b1b9      	cbz	r1, 8014260 <_reclaim_reent+0xb0>
 8014230:	4620      	mov	r0, r4
 8014232:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014236:	f7ff bfad 	b.w	8014194 <cleanup_glue>
 801423a:	5949      	ldr	r1, [r1, r5]
 801423c:	b941      	cbnz	r1, 8014250 <_reclaim_reent+0xa0>
 801423e:	3504      	adds	r5, #4
 8014240:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014242:	2d80      	cmp	r5, #128	; 0x80
 8014244:	68d9      	ldr	r1, [r3, #12]
 8014246:	d1f8      	bne.n	801423a <_reclaim_reent+0x8a>
 8014248:	4620      	mov	r0, r4
 801424a:	f7fe fff1 	bl	8013230 <_free_r>
 801424e:	e7ba      	b.n	80141c6 <_reclaim_reent+0x16>
 8014250:	680e      	ldr	r6, [r1, #0]
 8014252:	4620      	mov	r0, r4
 8014254:	f7fe ffec 	bl	8013230 <_free_r>
 8014258:	4631      	mov	r1, r6
 801425a:	e7ef      	b.n	801423c <_reclaim_reent+0x8c>
 801425c:	2500      	movs	r5, #0
 801425e:	e7ef      	b.n	8014240 <_reclaim_reent+0x90>
 8014260:	bd70      	pop	{r4, r5, r6, pc}
 8014262:	bf00      	nop
 8014264:	200000ac 	.word	0x200000ac

08014268 <_sbrk_r>:
 8014268:	b538      	push	{r3, r4, r5, lr}
 801426a:	4d06      	ldr	r5, [pc, #24]	; (8014284 <_sbrk_r+0x1c>)
 801426c:	2300      	movs	r3, #0
 801426e:	4604      	mov	r4, r0
 8014270:	4608      	mov	r0, r1
 8014272:	602b      	str	r3, [r5, #0]
 8014274:	f004 fc08 	bl	8018a88 <_sbrk>
 8014278:	1c43      	adds	r3, r0, #1
 801427a:	d102      	bne.n	8014282 <_sbrk_r+0x1a>
 801427c:	682b      	ldr	r3, [r5, #0]
 801427e:	b103      	cbz	r3, 8014282 <_sbrk_r+0x1a>
 8014280:	6023      	str	r3, [r4, #0]
 8014282:	bd38      	pop	{r3, r4, r5, pc}
 8014284:	200064fc 	.word	0x200064fc

08014288 <nanf>:
 8014288:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014290 <nanf+0x8>
 801428c:	4770      	bx	lr
 801428e:	bf00      	nop
 8014290:	7fc00000 	.word	0x7fc00000

08014294 <_raise_r>:
 8014294:	291f      	cmp	r1, #31
 8014296:	b538      	push	{r3, r4, r5, lr}
 8014298:	4604      	mov	r4, r0
 801429a:	460d      	mov	r5, r1
 801429c:	d904      	bls.n	80142a8 <_raise_r+0x14>
 801429e:	2316      	movs	r3, #22
 80142a0:	6003      	str	r3, [r0, #0]
 80142a2:	f04f 30ff 	mov.w	r0, #4294967295
 80142a6:	bd38      	pop	{r3, r4, r5, pc}
 80142a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80142aa:	b112      	cbz	r2, 80142b2 <_raise_r+0x1e>
 80142ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80142b0:	b94b      	cbnz	r3, 80142c6 <_raise_r+0x32>
 80142b2:	4620      	mov	r0, r4
 80142b4:	f000 f830 	bl	8014318 <_getpid_r>
 80142b8:	462a      	mov	r2, r5
 80142ba:	4601      	mov	r1, r0
 80142bc:	4620      	mov	r0, r4
 80142be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80142c2:	f000 b817 	b.w	80142f4 <_kill_r>
 80142c6:	2b01      	cmp	r3, #1
 80142c8:	d00a      	beq.n	80142e0 <_raise_r+0x4c>
 80142ca:	1c59      	adds	r1, r3, #1
 80142cc:	d103      	bne.n	80142d6 <_raise_r+0x42>
 80142ce:	2316      	movs	r3, #22
 80142d0:	6003      	str	r3, [r0, #0]
 80142d2:	2001      	movs	r0, #1
 80142d4:	e7e7      	b.n	80142a6 <_raise_r+0x12>
 80142d6:	2400      	movs	r4, #0
 80142d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80142dc:	4628      	mov	r0, r5
 80142de:	4798      	blx	r3
 80142e0:	2000      	movs	r0, #0
 80142e2:	e7e0      	b.n	80142a6 <_raise_r+0x12>

080142e4 <raise>:
 80142e4:	4b02      	ldr	r3, [pc, #8]	; (80142f0 <raise+0xc>)
 80142e6:	4601      	mov	r1, r0
 80142e8:	6818      	ldr	r0, [r3, #0]
 80142ea:	f7ff bfd3 	b.w	8014294 <_raise_r>
 80142ee:	bf00      	nop
 80142f0:	200000ac 	.word	0x200000ac

080142f4 <_kill_r>:
 80142f4:	b538      	push	{r3, r4, r5, lr}
 80142f6:	4d07      	ldr	r5, [pc, #28]	; (8014314 <_kill_r+0x20>)
 80142f8:	2300      	movs	r3, #0
 80142fa:	4604      	mov	r4, r0
 80142fc:	4608      	mov	r0, r1
 80142fe:	4611      	mov	r1, r2
 8014300:	602b      	str	r3, [r5, #0]
 8014302:	f004 fba9 	bl	8018a58 <_kill>
 8014306:	1c43      	adds	r3, r0, #1
 8014308:	d102      	bne.n	8014310 <_kill_r+0x1c>
 801430a:	682b      	ldr	r3, [r5, #0]
 801430c:	b103      	cbz	r3, 8014310 <_kill_r+0x1c>
 801430e:	6023      	str	r3, [r4, #0]
 8014310:	bd38      	pop	{r3, r4, r5, pc}
 8014312:	bf00      	nop
 8014314:	200064fc 	.word	0x200064fc

08014318 <_getpid_r>:
 8014318:	f004 bb8e 	b.w	8018a38 <_getpid>

0801431c <siprintf>:
 801431c:	b40e      	push	{r1, r2, r3}
 801431e:	b500      	push	{lr}
 8014320:	b09c      	sub	sp, #112	; 0x70
 8014322:	ab1d      	add	r3, sp, #116	; 0x74
 8014324:	9002      	str	r0, [sp, #8]
 8014326:	9006      	str	r0, [sp, #24]
 8014328:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801432c:	4809      	ldr	r0, [pc, #36]	; (8014354 <siprintf+0x38>)
 801432e:	9107      	str	r1, [sp, #28]
 8014330:	9104      	str	r1, [sp, #16]
 8014332:	4909      	ldr	r1, [pc, #36]	; (8014358 <siprintf+0x3c>)
 8014334:	f853 2b04 	ldr.w	r2, [r3], #4
 8014338:	9105      	str	r1, [sp, #20]
 801433a:	6800      	ldr	r0, [r0, #0]
 801433c:	9301      	str	r3, [sp, #4]
 801433e:	a902      	add	r1, sp, #8
 8014340:	f003 fd28 	bl	8017d94 <_svfiprintf_r>
 8014344:	9b02      	ldr	r3, [sp, #8]
 8014346:	2200      	movs	r2, #0
 8014348:	701a      	strb	r2, [r3, #0]
 801434a:	b01c      	add	sp, #112	; 0x70
 801434c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014350:	b003      	add	sp, #12
 8014352:	4770      	bx	lr
 8014354:	200000ac 	.word	0x200000ac
 8014358:	ffff0208 	.word	0xffff0208

0801435c <siscanf>:
 801435c:	b40e      	push	{r1, r2, r3}
 801435e:	b510      	push	{r4, lr}
 8014360:	b09f      	sub	sp, #124	; 0x7c
 8014362:	ac21      	add	r4, sp, #132	; 0x84
 8014364:	f44f 7101 	mov.w	r1, #516	; 0x204
 8014368:	f854 2b04 	ldr.w	r2, [r4], #4
 801436c:	9201      	str	r2, [sp, #4]
 801436e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8014372:	9004      	str	r0, [sp, #16]
 8014374:	9008      	str	r0, [sp, #32]
 8014376:	f7eb ff45 	bl	8000204 <strlen>
 801437a:	4b0c      	ldr	r3, [pc, #48]	; (80143ac <siscanf+0x50>)
 801437c:	9005      	str	r0, [sp, #20]
 801437e:	9009      	str	r0, [sp, #36]	; 0x24
 8014380:	930d      	str	r3, [sp, #52]	; 0x34
 8014382:	480b      	ldr	r0, [pc, #44]	; (80143b0 <siscanf+0x54>)
 8014384:	9a01      	ldr	r2, [sp, #4]
 8014386:	6800      	ldr	r0, [r0, #0]
 8014388:	9403      	str	r4, [sp, #12]
 801438a:	2300      	movs	r3, #0
 801438c:	9311      	str	r3, [sp, #68]	; 0x44
 801438e:	9316      	str	r3, [sp, #88]	; 0x58
 8014390:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014394:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014398:	a904      	add	r1, sp, #16
 801439a:	4623      	mov	r3, r4
 801439c:	f003 fe54 	bl	8018048 <__ssvfiscanf_r>
 80143a0:	b01f      	add	sp, #124	; 0x7c
 80143a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80143a6:	b003      	add	sp, #12
 80143a8:	4770      	bx	lr
 80143aa:	bf00      	nop
 80143ac:	080143d7 	.word	0x080143d7
 80143b0:	200000ac 	.word	0x200000ac

080143b4 <__sread>:
 80143b4:	b510      	push	{r4, lr}
 80143b6:	460c      	mov	r4, r1
 80143b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143bc:	f004 fa62 	bl	8018884 <_read_r>
 80143c0:	2800      	cmp	r0, #0
 80143c2:	bfab      	itete	ge
 80143c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80143c6:	89a3      	ldrhlt	r3, [r4, #12]
 80143c8:	181b      	addge	r3, r3, r0
 80143ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80143ce:	bfac      	ite	ge
 80143d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80143d2:	81a3      	strhlt	r3, [r4, #12]
 80143d4:	bd10      	pop	{r4, pc}

080143d6 <__seofread>:
 80143d6:	2000      	movs	r0, #0
 80143d8:	4770      	bx	lr

080143da <__swrite>:
 80143da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143de:	461f      	mov	r7, r3
 80143e0:	898b      	ldrh	r3, [r1, #12]
 80143e2:	05db      	lsls	r3, r3, #23
 80143e4:	4605      	mov	r5, r0
 80143e6:	460c      	mov	r4, r1
 80143e8:	4616      	mov	r6, r2
 80143ea:	d505      	bpl.n	80143f8 <__swrite+0x1e>
 80143ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143f0:	2302      	movs	r3, #2
 80143f2:	2200      	movs	r2, #0
 80143f4:	f002 feee 	bl	80171d4 <_lseek_r>
 80143f8:	89a3      	ldrh	r3, [r4, #12]
 80143fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80143fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014402:	81a3      	strh	r3, [r4, #12]
 8014404:	4632      	mov	r2, r6
 8014406:	463b      	mov	r3, r7
 8014408:	4628      	mov	r0, r5
 801440a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801440e:	f001 ba67 	b.w	80158e0 <_write_r>

08014412 <__sseek>:
 8014412:	b510      	push	{r4, lr}
 8014414:	460c      	mov	r4, r1
 8014416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801441a:	f002 fedb 	bl	80171d4 <_lseek_r>
 801441e:	1c43      	adds	r3, r0, #1
 8014420:	89a3      	ldrh	r3, [r4, #12]
 8014422:	bf15      	itete	ne
 8014424:	6560      	strne	r0, [r4, #84]	; 0x54
 8014426:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801442a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801442e:	81a3      	strheq	r3, [r4, #12]
 8014430:	bf18      	it	ne
 8014432:	81a3      	strhne	r3, [r4, #12]
 8014434:	bd10      	pop	{r4, pc}

08014436 <__sclose>:
 8014436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801443a:	f001 baef 	b.w	8015a1c <_close_r>

0801443e <strchr>:
 801443e:	b2c9      	uxtb	r1, r1
 8014440:	4603      	mov	r3, r0
 8014442:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014446:	b11a      	cbz	r2, 8014450 <strchr+0x12>
 8014448:	428a      	cmp	r2, r1
 801444a:	d1f9      	bne.n	8014440 <strchr+0x2>
 801444c:	4618      	mov	r0, r3
 801444e:	4770      	bx	lr
 8014450:	2900      	cmp	r1, #0
 8014452:	bf18      	it	ne
 8014454:	2300      	movne	r3, #0
 8014456:	e7f9      	b.n	801444c <strchr+0xe>

08014458 <strcpy>:
 8014458:	4603      	mov	r3, r0
 801445a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801445e:	f803 2b01 	strb.w	r2, [r3], #1
 8014462:	2a00      	cmp	r2, #0
 8014464:	d1f9      	bne.n	801445a <strcpy+0x2>
 8014466:	4770      	bx	lr

08014468 <strncmp>:
 8014468:	b510      	push	{r4, lr}
 801446a:	b16a      	cbz	r2, 8014488 <strncmp+0x20>
 801446c:	3901      	subs	r1, #1
 801446e:	1884      	adds	r4, r0, r2
 8014470:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014474:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014478:	4293      	cmp	r3, r2
 801447a:	d103      	bne.n	8014484 <strncmp+0x1c>
 801447c:	42a0      	cmp	r0, r4
 801447e:	d001      	beq.n	8014484 <strncmp+0x1c>
 8014480:	2b00      	cmp	r3, #0
 8014482:	d1f5      	bne.n	8014470 <strncmp+0x8>
 8014484:	1a98      	subs	r0, r3, r2
 8014486:	bd10      	pop	{r4, pc}
 8014488:	4610      	mov	r0, r2
 801448a:	e7fc      	b.n	8014486 <strncmp+0x1e>

0801448c <sulp>:
 801448c:	b570      	push	{r4, r5, r6, lr}
 801448e:	4604      	mov	r4, r0
 8014490:	460d      	mov	r5, r1
 8014492:	ec45 4b10 	vmov	d0, r4, r5
 8014496:	4616      	mov	r6, r2
 8014498:	f003 fa9c 	bl	80179d4 <__ulp>
 801449c:	ec51 0b10 	vmov	r0, r1, d0
 80144a0:	b17e      	cbz	r6, 80144c2 <sulp+0x36>
 80144a2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80144a6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	dd09      	ble.n	80144c2 <sulp+0x36>
 80144ae:	051b      	lsls	r3, r3, #20
 80144b0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80144b4:	2400      	movs	r4, #0
 80144b6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80144ba:	4622      	mov	r2, r4
 80144bc:	462b      	mov	r3, r5
 80144be:	f7ec f8bb 	bl	8000638 <__aeabi_dmul>
 80144c2:	bd70      	pop	{r4, r5, r6, pc}
 80144c4:	0000      	movs	r0, r0
	...

080144c8 <_strtod_l>:
 80144c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144cc:	b0a3      	sub	sp, #140	; 0x8c
 80144ce:	461f      	mov	r7, r3
 80144d0:	2300      	movs	r3, #0
 80144d2:	931e      	str	r3, [sp, #120]	; 0x78
 80144d4:	4ba4      	ldr	r3, [pc, #656]	; (8014768 <_strtod_l+0x2a0>)
 80144d6:	9219      	str	r2, [sp, #100]	; 0x64
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	9307      	str	r3, [sp, #28]
 80144dc:	4604      	mov	r4, r0
 80144de:	4618      	mov	r0, r3
 80144e0:	4688      	mov	r8, r1
 80144e2:	f7eb fe8f 	bl	8000204 <strlen>
 80144e6:	f04f 0a00 	mov.w	sl, #0
 80144ea:	4605      	mov	r5, r0
 80144ec:	f04f 0b00 	mov.w	fp, #0
 80144f0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80144f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80144f6:	781a      	ldrb	r2, [r3, #0]
 80144f8:	2a2b      	cmp	r2, #43	; 0x2b
 80144fa:	d04c      	beq.n	8014596 <_strtod_l+0xce>
 80144fc:	d839      	bhi.n	8014572 <_strtod_l+0xaa>
 80144fe:	2a0d      	cmp	r2, #13
 8014500:	d832      	bhi.n	8014568 <_strtod_l+0xa0>
 8014502:	2a08      	cmp	r2, #8
 8014504:	d832      	bhi.n	801456c <_strtod_l+0xa4>
 8014506:	2a00      	cmp	r2, #0
 8014508:	d03c      	beq.n	8014584 <_strtod_l+0xbc>
 801450a:	2300      	movs	r3, #0
 801450c:	930e      	str	r3, [sp, #56]	; 0x38
 801450e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8014510:	7833      	ldrb	r3, [r6, #0]
 8014512:	2b30      	cmp	r3, #48	; 0x30
 8014514:	f040 80b4 	bne.w	8014680 <_strtod_l+0x1b8>
 8014518:	7873      	ldrb	r3, [r6, #1]
 801451a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801451e:	2b58      	cmp	r3, #88	; 0x58
 8014520:	d16c      	bne.n	80145fc <_strtod_l+0x134>
 8014522:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014524:	9301      	str	r3, [sp, #4]
 8014526:	ab1e      	add	r3, sp, #120	; 0x78
 8014528:	9702      	str	r7, [sp, #8]
 801452a:	9300      	str	r3, [sp, #0]
 801452c:	4a8f      	ldr	r2, [pc, #572]	; (801476c <_strtod_l+0x2a4>)
 801452e:	ab1f      	add	r3, sp, #124	; 0x7c
 8014530:	a91d      	add	r1, sp, #116	; 0x74
 8014532:	4620      	mov	r0, r4
 8014534:	f002 fa4c 	bl	80169d0 <__gethex>
 8014538:	f010 0707 	ands.w	r7, r0, #7
 801453c:	4605      	mov	r5, r0
 801453e:	d005      	beq.n	801454c <_strtod_l+0x84>
 8014540:	2f06      	cmp	r7, #6
 8014542:	d12a      	bne.n	801459a <_strtod_l+0xd2>
 8014544:	3601      	adds	r6, #1
 8014546:	2300      	movs	r3, #0
 8014548:	961d      	str	r6, [sp, #116]	; 0x74
 801454a:	930e      	str	r3, [sp, #56]	; 0x38
 801454c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801454e:	2b00      	cmp	r3, #0
 8014550:	f040 8596 	bne.w	8015080 <_strtod_l+0xbb8>
 8014554:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014556:	b1db      	cbz	r3, 8014590 <_strtod_l+0xc8>
 8014558:	4652      	mov	r2, sl
 801455a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801455e:	ec43 2b10 	vmov	d0, r2, r3
 8014562:	b023      	add	sp, #140	; 0x8c
 8014564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014568:	2a20      	cmp	r2, #32
 801456a:	d1ce      	bne.n	801450a <_strtod_l+0x42>
 801456c:	3301      	adds	r3, #1
 801456e:	931d      	str	r3, [sp, #116]	; 0x74
 8014570:	e7c0      	b.n	80144f4 <_strtod_l+0x2c>
 8014572:	2a2d      	cmp	r2, #45	; 0x2d
 8014574:	d1c9      	bne.n	801450a <_strtod_l+0x42>
 8014576:	2201      	movs	r2, #1
 8014578:	920e      	str	r2, [sp, #56]	; 0x38
 801457a:	1c5a      	adds	r2, r3, #1
 801457c:	921d      	str	r2, [sp, #116]	; 0x74
 801457e:	785b      	ldrb	r3, [r3, #1]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d1c4      	bne.n	801450e <_strtod_l+0x46>
 8014584:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014586:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801458a:	2b00      	cmp	r3, #0
 801458c:	f040 8576 	bne.w	801507c <_strtod_l+0xbb4>
 8014590:	4652      	mov	r2, sl
 8014592:	465b      	mov	r3, fp
 8014594:	e7e3      	b.n	801455e <_strtod_l+0x96>
 8014596:	2200      	movs	r2, #0
 8014598:	e7ee      	b.n	8014578 <_strtod_l+0xb0>
 801459a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801459c:	b13a      	cbz	r2, 80145ae <_strtod_l+0xe6>
 801459e:	2135      	movs	r1, #53	; 0x35
 80145a0:	a820      	add	r0, sp, #128	; 0x80
 80145a2:	f003 fb22 	bl	8017bea <__copybits>
 80145a6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80145a8:	4620      	mov	r0, r4
 80145aa:	f002 fee7 	bl	801737c <_Bfree>
 80145ae:	3f01      	subs	r7, #1
 80145b0:	2f05      	cmp	r7, #5
 80145b2:	d807      	bhi.n	80145c4 <_strtod_l+0xfc>
 80145b4:	e8df f007 	tbb	[pc, r7]
 80145b8:	1d180b0e 	.word	0x1d180b0e
 80145bc:	030e      	.short	0x030e
 80145be:	f04f 0b00 	mov.w	fp, #0
 80145c2:	46da      	mov	sl, fp
 80145c4:	0728      	lsls	r0, r5, #28
 80145c6:	d5c1      	bpl.n	801454c <_strtod_l+0x84>
 80145c8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80145cc:	e7be      	b.n	801454c <_strtod_l+0x84>
 80145ce:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80145d2:	e7f7      	b.n	80145c4 <_strtod_l+0xfc>
 80145d4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80145d8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80145da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80145de:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80145e2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80145e6:	e7ed      	b.n	80145c4 <_strtod_l+0xfc>
 80145e8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8014770 <_strtod_l+0x2a8>
 80145ec:	f04f 0a00 	mov.w	sl, #0
 80145f0:	e7e8      	b.n	80145c4 <_strtod_l+0xfc>
 80145f2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80145f6:	f04f 3aff 	mov.w	sl, #4294967295
 80145fa:	e7e3      	b.n	80145c4 <_strtod_l+0xfc>
 80145fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80145fe:	1c5a      	adds	r2, r3, #1
 8014600:	921d      	str	r2, [sp, #116]	; 0x74
 8014602:	785b      	ldrb	r3, [r3, #1]
 8014604:	2b30      	cmp	r3, #48	; 0x30
 8014606:	d0f9      	beq.n	80145fc <_strtod_l+0x134>
 8014608:	2b00      	cmp	r3, #0
 801460a:	d09f      	beq.n	801454c <_strtod_l+0x84>
 801460c:	2301      	movs	r3, #1
 801460e:	f04f 0900 	mov.w	r9, #0
 8014612:	9304      	str	r3, [sp, #16]
 8014614:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014616:	930a      	str	r3, [sp, #40]	; 0x28
 8014618:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801461c:	464f      	mov	r7, r9
 801461e:	220a      	movs	r2, #10
 8014620:	981d      	ldr	r0, [sp, #116]	; 0x74
 8014622:	7806      	ldrb	r6, [r0, #0]
 8014624:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8014628:	b2d9      	uxtb	r1, r3
 801462a:	2909      	cmp	r1, #9
 801462c:	d92a      	bls.n	8014684 <_strtod_l+0x1bc>
 801462e:	9907      	ldr	r1, [sp, #28]
 8014630:	462a      	mov	r2, r5
 8014632:	f7ff ff19 	bl	8014468 <strncmp>
 8014636:	b398      	cbz	r0, 80146a0 <_strtod_l+0x1d8>
 8014638:	2000      	movs	r0, #0
 801463a:	4633      	mov	r3, r6
 801463c:	463d      	mov	r5, r7
 801463e:	9007      	str	r0, [sp, #28]
 8014640:	4602      	mov	r2, r0
 8014642:	2b65      	cmp	r3, #101	; 0x65
 8014644:	d001      	beq.n	801464a <_strtod_l+0x182>
 8014646:	2b45      	cmp	r3, #69	; 0x45
 8014648:	d118      	bne.n	801467c <_strtod_l+0x1b4>
 801464a:	b91d      	cbnz	r5, 8014654 <_strtod_l+0x18c>
 801464c:	9b04      	ldr	r3, [sp, #16]
 801464e:	4303      	orrs	r3, r0
 8014650:	d098      	beq.n	8014584 <_strtod_l+0xbc>
 8014652:	2500      	movs	r5, #0
 8014654:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8014658:	f108 0301 	add.w	r3, r8, #1
 801465c:	931d      	str	r3, [sp, #116]	; 0x74
 801465e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8014662:	2b2b      	cmp	r3, #43	; 0x2b
 8014664:	d075      	beq.n	8014752 <_strtod_l+0x28a>
 8014666:	2b2d      	cmp	r3, #45	; 0x2d
 8014668:	d07b      	beq.n	8014762 <_strtod_l+0x29a>
 801466a:	f04f 0c00 	mov.w	ip, #0
 801466e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8014672:	2909      	cmp	r1, #9
 8014674:	f240 8082 	bls.w	801477c <_strtod_l+0x2b4>
 8014678:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801467c:	2600      	movs	r6, #0
 801467e:	e09d      	b.n	80147bc <_strtod_l+0x2f4>
 8014680:	2300      	movs	r3, #0
 8014682:	e7c4      	b.n	801460e <_strtod_l+0x146>
 8014684:	2f08      	cmp	r7, #8
 8014686:	bfd8      	it	le
 8014688:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801468a:	f100 0001 	add.w	r0, r0, #1
 801468e:	bfda      	itte	le
 8014690:	fb02 3301 	mlale	r3, r2, r1, r3
 8014694:	9309      	strle	r3, [sp, #36]	; 0x24
 8014696:	fb02 3909 	mlagt	r9, r2, r9, r3
 801469a:	3701      	adds	r7, #1
 801469c:	901d      	str	r0, [sp, #116]	; 0x74
 801469e:	e7bf      	b.n	8014620 <_strtod_l+0x158>
 80146a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80146a2:	195a      	adds	r2, r3, r5
 80146a4:	921d      	str	r2, [sp, #116]	; 0x74
 80146a6:	5d5b      	ldrb	r3, [r3, r5]
 80146a8:	2f00      	cmp	r7, #0
 80146aa:	d037      	beq.n	801471c <_strtod_l+0x254>
 80146ac:	9007      	str	r0, [sp, #28]
 80146ae:	463d      	mov	r5, r7
 80146b0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80146b4:	2a09      	cmp	r2, #9
 80146b6:	d912      	bls.n	80146de <_strtod_l+0x216>
 80146b8:	2201      	movs	r2, #1
 80146ba:	e7c2      	b.n	8014642 <_strtod_l+0x17a>
 80146bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80146be:	1c5a      	adds	r2, r3, #1
 80146c0:	921d      	str	r2, [sp, #116]	; 0x74
 80146c2:	785b      	ldrb	r3, [r3, #1]
 80146c4:	3001      	adds	r0, #1
 80146c6:	2b30      	cmp	r3, #48	; 0x30
 80146c8:	d0f8      	beq.n	80146bc <_strtod_l+0x1f4>
 80146ca:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80146ce:	2a08      	cmp	r2, #8
 80146d0:	f200 84db 	bhi.w	801508a <_strtod_l+0xbc2>
 80146d4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80146d6:	9007      	str	r0, [sp, #28]
 80146d8:	2000      	movs	r0, #0
 80146da:	920a      	str	r2, [sp, #40]	; 0x28
 80146dc:	4605      	mov	r5, r0
 80146de:	3b30      	subs	r3, #48	; 0x30
 80146e0:	f100 0201 	add.w	r2, r0, #1
 80146e4:	d014      	beq.n	8014710 <_strtod_l+0x248>
 80146e6:	9907      	ldr	r1, [sp, #28]
 80146e8:	4411      	add	r1, r2
 80146ea:	9107      	str	r1, [sp, #28]
 80146ec:	462a      	mov	r2, r5
 80146ee:	eb00 0e05 	add.w	lr, r0, r5
 80146f2:	210a      	movs	r1, #10
 80146f4:	4572      	cmp	r2, lr
 80146f6:	d113      	bne.n	8014720 <_strtod_l+0x258>
 80146f8:	182a      	adds	r2, r5, r0
 80146fa:	2a08      	cmp	r2, #8
 80146fc:	f105 0501 	add.w	r5, r5, #1
 8014700:	4405      	add	r5, r0
 8014702:	dc1c      	bgt.n	801473e <_strtod_l+0x276>
 8014704:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014706:	220a      	movs	r2, #10
 8014708:	fb02 3301 	mla	r3, r2, r1, r3
 801470c:	9309      	str	r3, [sp, #36]	; 0x24
 801470e:	2200      	movs	r2, #0
 8014710:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014712:	1c59      	adds	r1, r3, #1
 8014714:	911d      	str	r1, [sp, #116]	; 0x74
 8014716:	785b      	ldrb	r3, [r3, #1]
 8014718:	4610      	mov	r0, r2
 801471a:	e7c9      	b.n	80146b0 <_strtod_l+0x1e8>
 801471c:	4638      	mov	r0, r7
 801471e:	e7d2      	b.n	80146c6 <_strtod_l+0x1fe>
 8014720:	2a08      	cmp	r2, #8
 8014722:	dc04      	bgt.n	801472e <_strtod_l+0x266>
 8014724:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8014726:	434e      	muls	r6, r1
 8014728:	9609      	str	r6, [sp, #36]	; 0x24
 801472a:	3201      	adds	r2, #1
 801472c:	e7e2      	b.n	80146f4 <_strtod_l+0x22c>
 801472e:	f102 0c01 	add.w	ip, r2, #1
 8014732:	f1bc 0f10 	cmp.w	ip, #16
 8014736:	bfd8      	it	le
 8014738:	fb01 f909 	mulle.w	r9, r1, r9
 801473c:	e7f5      	b.n	801472a <_strtod_l+0x262>
 801473e:	2d10      	cmp	r5, #16
 8014740:	bfdc      	itt	le
 8014742:	220a      	movle	r2, #10
 8014744:	fb02 3909 	mlale	r9, r2, r9, r3
 8014748:	e7e1      	b.n	801470e <_strtod_l+0x246>
 801474a:	2300      	movs	r3, #0
 801474c:	9307      	str	r3, [sp, #28]
 801474e:	2201      	movs	r2, #1
 8014750:	e77c      	b.n	801464c <_strtod_l+0x184>
 8014752:	f04f 0c00 	mov.w	ip, #0
 8014756:	f108 0302 	add.w	r3, r8, #2
 801475a:	931d      	str	r3, [sp, #116]	; 0x74
 801475c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8014760:	e785      	b.n	801466e <_strtod_l+0x1a6>
 8014762:	f04f 0c01 	mov.w	ip, #1
 8014766:	e7f6      	b.n	8014756 <_strtod_l+0x28e>
 8014768:	0801ae38 	.word	0x0801ae38
 801476c:	0801ac28 	.word	0x0801ac28
 8014770:	7ff00000 	.word	0x7ff00000
 8014774:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014776:	1c59      	adds	r1, r3, #1
 8014778:	911d      	str	r1, [sp, #116]	; 0x74
 801477a:	785b      	ldrb	r3, [r3, #1]
 801477c:	2b30      	cmp	r3, #48	; 0x30
 801477e:	d0f9      	beq.n	8014774 <_strtod_l+0x2ac>
 8014780:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8014784:	2908      	cmp	r1, #8
 8014786:	f63f af79 	bhi.w	801467c <_strtod_l+0x1b4>
 801478a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801478e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014790:	9308      	str	r3, [sp, #32]
 8014792:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014794:	1c59      	adds	r1, r3, #1
 8014796:	911d      	str	r1, [sp, #116]	; 0x74
 8014798:	785b      	ldrb	r3, [r3, #1]
 801479a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801479e:	2e09      	cmp	r6, #9
 80147a0:	d937      	bls.n	8014812 <_strtod_l+0x34a>
 80147a2:	9e08      	ldr	r6, [sp, #32]
 80147a4:	1b89      	subs	r1, r1, r6
 80147a6:	2908      	cmp	r1, #8
 80147a8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80147ac:	dc02      	bgt.n	80147b4 <_strtod_l+0x2ec>
 80147ae:	4576      	cmp	r6, lr
 80147b0:	bfa8      	it	ge
 80147b2:	4676      	movge	r6, lr
 80147b4:	f1bc 0f00 	cmp.w	ip, #0
 80147b8:	d000      	beq.n	80147bc <_strtod_l+0x2f4>
 80147ba:	4276      	negs	r6, r6
 80147bc:	2d00      	cmp	r5, #0
 80147be:	d14f      	bne.n	8014860 <_strtod_l+0x398>
 80147c0:	9904      	ldr	r1, [sp, #16]
 80147c2:	4301      	orrs	r1, r0
 80147c4:	f47f aec2 	bne.w	801454c <_strtod_l+0x84>
 80147c8:	2a00      	cmp	r2, #0
 80147ca:	f47f aedb 	bne.w	8014584 <_strtod_l+0xbc>
 80147ce:	2b69      	cmp	r3, #105	; 0x69
 80147d0:	d027      	beq.n	8014822 <_strtod_l+0x35a>
 80147d2:	dc24      	bgt.n	801481e <_strtod_l+0x356>
 80147d4:	2b49      	cmp	r3, #73	; 0x49
 80147d6:	d024      	beq.n	8014822 <_strtod_l+0x35a>
 80147d8:	2b4e      	cmp	r3, #78	; 0x4e
 80147da:	f47f aed3 	bne.w	8014584 <_strtod_l+0xbc>
 80147de:	499e      	ldr	r1, [pc, #632]	; (8014a58 <_strtod_l+0x590>)
 80147e0:	a81d      	add	r0, sp, #116	; 0x74
 80147e2:	f002 fb4d 	bl	8016e80 <__match>
 80147e6:	2800      	cmp	r0, #0
 80147e8:	f43f aecc 	beq.w	8014584 <_strtod_l+0xbc>
 80147ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80147ee:	781b      	ldrb	r3, [r3, #0]
 80147f0:	2b28      	cmp	r3, #40	; 0x28
 80147f2:	d12d      	bne.n	8014850 <_strtod_l+0x388>
 80147f4:	4999      	ldr	r1, [pc, #612]	; (8014a5c <_strtod_l+0x594>)
 80147f6:	aa20      	add	r2, sp, #128	; 0x80
 80147f8:	a81d      	add	r0, sp, #116	; 0x74
 80147fa:	f002 fb55 	bl	8016ea8 <__hexnan>
 80147fe:	2805      	cmp	r0, #5
 8014800:	d126      	bne.n	8014850 <_strtod_l+0x388>
 8014802:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014804:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8014808:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801480c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8014810:	e69c      	b.n	801454c <_strtod_l+0x84>
 8014812:	210a      	movs	r1, #10
 8014814:	fb01 3e0e 	mla	lr, r1, lr, r3
 8014818:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801481c:	e7b9      	b.n	8014792 <_strtod_l+0x2ca>
 801481e:	2b6e      	cmp	r3, #110	; 0x6e
 8014820:	e7db      	b.n	80147da <_strtod_l+0x312>
 8014822:	498f      	ldr	r1, [pc, #572]	; (8014a60 <_strtod_l+0x598>)
 8014824:	a81d      	add	r0, sp, #116	; 0x74
 8014826:	f002 fb2b 	bl	8016e80 <__match>
 801482a:	2800      	cmp	r0, #0
 801482c:	f43f aeaa 	beq.w	8014584 <_strtod_l+0xbc>
 8014830:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014832:	498c      	ldr	r1, [pc, #560]	; (8014a64 <_strtod_l+0x59c>)
 8014834:	3b01      	subs	r3, #1
 8014836:	a81d      	add	r0, sp, #116	; 0x74
 8014838:	931d      	str	r3, [sp, #116]	; 0x74
 801483a:	f002 fb21 	bl	8016e80 <__match>
 801483e:	b910      	cbnz	r0, 8014846 <_strtod_l+0x37e>
 8014840:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014842:	3301      	adds	r3, #1
 8014844:	931d      	str	r3, [sp, #116]	; 0x74
 8014846:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8014a74 <_strtod_l+0x5ac>
 801484a:	f04f 0a00 	mov.w	sl, #0
 801484e:	e67d      	b.n	801454c <_strtod_l+0x84>
 8014850:	4885      	ldr	r0, [pc, #532]	; (8014a68 <_strtod_l+0x5a0>)
 8014852:	f7fd ffd5 	bl	8012800 <nan>
 8014856:	ed8d 0b04 	vstr	d0, [sp, #16]
 801485a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801485e:	e675      	b.n	801454c <_strtod_l+0x84>
 8014860:	9b07      	ldr	r3, [sp, #28]
 8014862:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014864:	1af3      	subs	r3, r6, r3
 8014866:	2f00      	cmp	r7, #0
 8014868:	bf08      	it	eq
 801486a:	462f      	moveq	r7, r5
 801486c:	2d10      	cmp	r5, #16
 801486e:	9308      	str	r3, [sp, #32]
 8014870:	46a8      	mov	r8, r5
 8014872:	bfa8      	it	ge
 8014874:	f04f 0810 	movge.w	r8, #16
 8014878:	f7eb fe64 	bl	8000544 <__aeabi_ui2d>
 801487c:	2d09      	cmp	r5, #9
 801487e:	4682      	mov	sl, r0
 8014880:	468b      	mov	fp, r1
 8014882:	dd13      	ble.n	80148ac <_strtod_l+0x3e4>
 8014884:	4b79      	ldr	r3, [pc, #484]	; (8014a6c <_strtod_l+0x5a4>)
 8014886:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801488a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801488e:	f7eb fed3 	bl	8000638 <__aeabi_dmul>
 8014892:	4682      	mov	sl, r0
 8014894:	4648      	mov	r0, r9
 8014896:	468b      	mov	fp, r1
 8014898:	f7eb fe54 	bl	8000544 <__aeabi_ui2d>
 801489c:	4602      	mov	r2, r0
 801489e:	460b      	mov	r3, r1
 80148a0:	4650      	mov	r0, sl
 80148a2:	4659      	mov	r1, fp
 80148a4:	f7eb fd12 	bl	80002cc <__adddf3>
 80148a8:	4682      	mov	sl, r0
 80148aa:	468b      	mov	fp, r1
 80148ac:	2d0f      	cmp	r5, #15
 80148ae:	dc38      	bgt.n	8014922 <_strtod_l+0x45a>
 80148b0:	9b08      	ldr	r3, [sp, #32]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	f43f ae4a 	beq.w	801454c <_strtod_l+0x84>
 80148b8:	dd24      	ble.n	8014904 <_strtod_l+0x43c>
 80148ba:	2b16      	cmp	r3, #22
 80148bc:	dc0b      	bgt.n	80148d6 <_strtod_l+0x40e>
 80148be:	4d6b      	ldr	r5, [pc, #428]	; (8014a6c <_strtod_l+0x5a4>)
 80148c0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80148c4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80148c8:	4652      	mov	r2, sl
 80148ca:	465b      	mov	r3, fp
 80148cc:	f7eb feb4 	bl	8000638 <__aeabi_dmul>
 80148d0:	4682      	mov	sl, r0
 80148d2:	468b      	mov	fp, r1
 80148d4:	e63a      	b.n	801454c <_strtod_l+0x84>
 80148d6:	9a08      	ldr	r2, [sp, #32]
 80148d8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80148dc:	4293      	cmp	r3, r2
 80148de:	db20      	blt.n	8014922 <_strtod_l+0x45a>
 80148e0:	4c62      	ldr	r4, [pc, #392]	; (8014a6c <_strtod_l+0x5a4>)
 80148e2:	f1c5 050f 	rsb	r5, r5, #15
 80148e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80148ea:	4652      	mov	r2, sl
 80148ec:	465b      	mov	r3, fp
 80148ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80148f2:	f7eb fea1 	bl	8000638 <__aeabi_dmul>
 80148f6:	9b08      	ldr	r3, [sp, #32]
 80148f8:	1b5d      	subs	r5, r3, r5
 80148fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80148fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014902:	e7e3      	b.n	80148cc <_strtod_l+0x404>
 8014904:	9b08      	ldr	r3, [sp, #32]
 8014906:	3316      	adds	r3, #22
 8014908:	db0b      	blt.n	8014922 <_strtod_l+0x45a>
 801490a:	9b07      	ldr	r3, [sp, #28]
 801490c:	4a57      	ldr	r2, [pc, #348]	; (8014a6c <_strtod_l+0x5a4>)
 801490e:	1b9e      	subs	r6, r3, r6
 8014910:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8014914:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014918:	4650      	mov	r0, sl
 801491a:	4659      	mov	r1, fp
 801491c:	f7eb ffb6 	bl	800088c <__aeabi_ddiv>
 8014920:	e7d6      	b.n	80148d0 <_strtod_l+0x408>
 8014922:	9b08      	ldr	r3, [sp, #32]
 8014924:	eba5 0808 	sub.w	r8, r5, r8
 8014928:	4498      	add	r8, r3
 801492a:	f1b8 0f00 	cmp.w	r8, #0
 801492e:	dd71      	ble.n	8014a14 <_strtod_l+0x54c>
 8014930:	f018 030f 	ands.w	r3, r8, #15
 8014934:	d00a      	beq.n	801494c <_strtod_l+0x484>
 8014936:	494d      	ldr	r1, [pc, #308]	; (8014a6c <_strtod_l+0x5a4>)
 8014938:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801493c:	4652      	mov	r2, sl
 801493e:	465b      	mov	r3, fp
 8014940:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014944:	f7eb fe78 	bl	8000638 <__aeabi_dmul>
 8014948:	4682      	mov	sl, r0
 801494a:	468b      	mov	fp, r1
 801494c:	f038 080f 	bics.w	r8, r8, #15
 8014950:	d04d      	beq.n	80149ee <_strtod_l+0x526>
 8014952:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8014956:	dd22      	ble.n	801499e <_strtod_l+0x4d6>
 8014958:	2500      	movs	r5, #0
 801495a:	462e      	mov	r6, r5
 801495c:	9509      	str	r5, [sp, #36]	; 0x24
 801495e:	9507      	str	r5, [sp, #28]
 8014960:	2322      	movs	r3, #34	; 0x22
 8014962:	f8df b110 	ldr.w	fp, [pc, #272]	; 8014a74 <_strtod_l+0x5ac>
 8014966:	6023      	str	r3, [r4, #0]
 8014968:	f04f 0a00 	mov.w	sl, #0
 801496c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801496e:	2b00      	cmp	r3, #0
 8014970:	f43f adec 	beq.w	801454c <_strtod_l+0x84>
 8014974:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014976:	4620      	mov	r0, r4
 8014978:	f002 fd00 	bl	801737c <_Bfree>
 801497c:	9907      	ldr	r1, [sp, #28]
 801497e:	4620      	mov	r0, r4
 8014980:	f002 fcfc 	bl	801737c <_Bfree>
 8014984:	4631      	mov	r1, r6
 8014986:	4620      	mov	r0, r4
 8014988:	f002 fcf8 	bl	801737c <_Bfree>
 801498c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801498e:	4620      	mov	r0, r4
 8014990:	f002 fcf4 	bl	801737c <_Bfree>
 8014994:	4629      	mov	r1, r5
 8014996:	4620      	mov	r0, r4
 8014998:	f002 fcf0 	bl	801737c <_Bfree>
 801499c:	e5d6      	b.n	801454c <_strtod_l+0x84>
 801499e:	2300      	movs	r3, #0
 80149a0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80149a4:	4650      	mov	r0, sl
 80149a6:	4659      	mov	r1, fp
 80149a8:	4699      	mov	r9, r3
 80149aa:	f1b8 0f01 	cmp.w	r8, #1
 80149ae:	dc21      	bgt.n	80149f4 <_strtod_l+0x52c>
 80149b0:	b10b      	cbz	r3, 80149b6 <_strtod_l+0x4ee>
 80149b2:	4682      	mov	sl, r0
 80149b4:	468b      	mov	fp, r1
 80149b6:	4b2e      	ldr	r3, [pc, #184]	; (8014a70 <_strtod_l+0x5a8>)
 80149b8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80149bc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80149c0:	4652      	mov	r2, sl
 80149c2:	465b      	mov	r3, fp
 80149c4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80149c8:	f7eb fe36 	bl	8000638 <__aeabi_dmul>
 80149cc:	4b29      	ldr	r3, [pc, #164]	; (8014a74 <_strtod_l+0x5ac>)
 80149ce:	460a      	mov	r2, r1
 80149d0:	400b      	ands	r3, r1
 80149d2:	4929      	ldr	r1, [pc, #164]	; (8014a78 <_strtod_l+0x5b0>)
 80149d4:	428b      	cmp	r3, r1
 80149d6:	4682      	mov	sl, r0
 80149d8:	d8be      	bhi.n	8014958 <_strtod_l+0x490>
 80149da:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80149de:	428b      	cmp	r3, r1
 80149e0:	bf86      	itte	hi
 80149e2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8014a7c <_strtod_l+0x5b4>
 80149e6:	f04f 3aff 	movhi.w	sl, #4294967295
 80149ea:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80149ee:	2300      	movs	r3, #0
 80149f0:	9304      	str	r3, [sp, #16]
 80149f2:	e081      	b.n	8014af8 <_strtod_l+0x630>
 80149f4:	f018 0f01 	tst.w	r8, #1
 80149f8:	d007      	beq.n	8014a0a <_strtod_l+0x542>
 80149fa:	4b1d      	ldr	r3, [pc, #116]	; (8014a70 <_strtod_l+0x5a8>)
 80149fc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8014a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a04:	f7eb fe18 	bl	8000638 <__aeabi_dmul>
 8014a08:	2301      	movs	r3, #1
 8014a0a:	f109 0901 	add.w	r9, r9, #1
 8014a0e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014a12:	e7ca      	b.n	80149aa <_strtod_l+0x4e2>
 8014a14:	d0eb      	beq.n	80149ee <_strtod_l+0x526>
 8014a16:	f1c8 0800 	rsb	r8, r8, #0
 8014a1a:	f018 020f 	ands.w	r2, r8, #15
 8014a1e:	d00a      	beq.n	8014a36 <_strtod_l+0x56e>
 8014a20:	4b12      	ldr	r3, [pc, #72]	; (8014a6c <_strtod_l+0x5a4>)
 8014a22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014a26:	4650      	mov	r0, sl
 8014a28:	4659      	mov	r1, fp
 8014a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a2e:	f7eb ff2d 	bl	800088c <__aeabi_ddiv>
 8014a32:	4682      	mov	sl, r0
 8014a34:	468b      	mov	fp, r1
 8014a36:	ea5f 1828 	movs.w	r8, r8, asr #4
 8014a3a:	d0d8      	beq.n	80149ee <_strtod_l+0x526>
 8014a3c:	f1b8 0f1f 	cmp.w	r8, #31
 8014a40:	dd1e      	ble.n	8014a80 <_strtod_l+0x5b8>
 8014a42:	2500      	movs	r5, #0
 8014a44:	462e      	mov	r6, r5
 8014a46:	9509      	str	r5, [sp, #36]	; 0x24
 8014a48:	9507      	str	r5, [sp, #28]
 8014a4a:	2322      	movs	r3, #34	; 0x22
 8014a4c:	f04f 0a00 	mov.w	sl, #0
 8014a50:	f04f 0b00 	mov.w	fp, #0
 8014a54:	6023      	str	r3, [r4, #0]
 8014a56:	e789      	b.n	801496c <_strtod_l+0x4a4>
 8014a58:	0801abfd 	.word	0x0801abfd
 8014a5c:	0801ac3c 	.word	0x0801ac3c
 8014a60:	0801abf5 	.word	0x0801abf5
 8014a64:	0801ad54 	.word	0x0801ad54
 8014a68:	0801ad50 	.word	0x0801ad50
 8014a6c:	0801aed8 	.word	0x0801aed8
 8014a70:	0801aeb0 	.word	0x0801aeb0
 8014a74:	7ff00000 	.word	0x7ff00000
 8014a78:	7ca00000 	.word	0x7ca00000
 8014a7c:	7fefffff 	.word	0x7fefffff
 8014a80:	f018 0310 	ands.w	r3, r8, #16
 8014a84:	bf18      	it	ne
 8014a86:	236a      	movne	r3, #106	; 0x6a
 8014a88:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8014e40 <_strtod_l+0x978>
 8014a8c:	9304      	str	r3, [sp, #16]
 8014a8e:	4650      	mov	r0, sl
 8014a90:	4659      	mov	r1, fp
 8014a92:	2300      	movs	r3, #0
 8014a94:	f018 0f01 	tst.w	r8, #1
 8014a98:	d004      	beq.n	8014aa4 <_strtod_l+0x5dc>
 8014a9a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8014a9e:	f7eb fdcb 	bl	8000638 <__aeabi_dmul>
 8014aa2:	2301      	movs	r3, #1
 8014aa4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8014aa8:	f109 0908 	add.w	r9, r9, #8
 8014aac:	d1f2      	bne.n	8014a94 <_strtod_l+0x5cc>
 8014aae:	b10b      	cbz	r3, 8014ab4 <_strtod_l+0x5ec>
 8014ab0:	4682      	mov	sl, r0
 8014ab2:	468b      	mov	fp, r1
 8014ab4:	9b04      	ldr	r3, [sp, #16]
 8014ab6:	b1bb      	cbz	r3, 8014ae8 <_strtod_l+0x620>
 8014ab8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8014abc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	4659      	mov	r1, fp
 8014ac4:	dd10      	ble.n	8014ae8 <_strtod_l+0x620>
 8014ac6:	2b1f      	cmp	r3, #31
 8014ac8:	f340 8128 	ble.w	8014d1c <_strtod_l+0x854>
 8014acc:	2b34      	cmp	r3, #52	; 0x34
 8014ace:	bfde      	ittt	le
 8014ad0:	3b20      	suble	r3, #32
 8014ad2:	f04f 32ff 	movle.w	r2, #4294967295
 8014ad6:	fa02 f303 	lslle.w	r3, r2, r3
 8014ada:	f04f 0a00 	mov.w	sl, #0
 8014ade:	bfcc      	ite	gt
 8014ae0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8014ae4:	ea03 0b01 	andle.w	fp, r3, r1
 8014ae8:	2200      	movs	r2, #0
 8014aea:	2300      	movs	r3, #0
 8014aec:	4650      	mov	r0, sl
 8014aee:	4659      	mov	r1, fp
 8014af0:	f7ec f80a 	bl	8000b08 <__aeabi_dcmpeq>
 8014af4:	2800      	cmp	r0, #0
 8014af6:	d1a4      	bne.n	8014a42 <_strtod_l+0x57a>
 8014af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014afa:	9300      	str	r3, [sp, #0]
 8014afc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014afe:	462b      	mov	r3, r5
 8014b00:	463a      	mov	r2, r7
 8014b02:	4620      	mov	r0, r4
 8014b04:	f002 fca6 	bl	8017454 <__s2b>
 8014b08:	9009      	str	r0, [sp, #36]	; 0x24
 8014b0a:	2800      	cmp	r0, #0
 8014b0c:	f43f af24 	beq.w	8014958 <_strtod_l+0x490>
 8014b10:	9b07      	ldr	r3, [sp, #28]
 8014b12:	1b9e      	subs	r6, r3, r6
 8014b14:	9b08      	ldr	r3, [sp, #32]
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	bfb4      	ite	lt
 8014b1a:	4633      	movlt	r3, r6
 8014b1c:	2300      	movge	r3, #0
 8014b1e:	9310      	str	r3, [sp, #64]	; 0x40
 8014b20:	9b08      	ldr	r3, [sp, #32]
 8014b22:	2500      	movs	r5, #0
 8014b24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014b28:	9318      	str	r3, [sp, #96]	; 0x60
 8014b2a:	462e      	mov	r6, r5
 8014b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b2e:	4620      	mov	r0, r4
 8014b30:	6859      	ldr	r1, [r3, #4]
 8014b32:	f002 fbe3 	bl	80172fc <_Balloc>
 8014b36:	9007      	str	r0, [sp, #28]
 8014b38:	2800      	cmp	r0, #0
 8014b3a:	f43f af11 	beq.w	8014960 <_strtod_l+0x498>
 8014b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b40:	691a      	ldr	r2, [r3, #16]
 8014b42:	3202      	adds	r2, #2
 8014b44:	f103 010c 	add.w	r1, r3, #12
 8014b48:	0092      	lsls	r2, r2, #2
 8014b4a:	300c      	adds	r0, #12
 8014b4c:	f7fe f8c2 	bl	8012cd4 <memcpy>
 8014b50:	ec4b ab10 	vmov	d0, sl, fp
 8014b54:	aa20      	add	r2, sp, #128	; 0x80
 8014b56:	a91f      	add	r1, sp, #124	; 0x7c
 8014b58:	4620      	mov	r0, r4
 8014b5a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8014b5e:	f002 ffb5 	bl	8017acc <__d2b>
 8014b62:	901e      	str	r0, [sp, #120]	; 0x78
 8014b64:	2800      	cmp	r0, #0
 8014b66:	f43f aefb 	beq.w	8014960 <_strtod_l+0x498>
 8014b6a:	2101      	movs	r1, #1
 8014b6c:	4620      	mov	r0, r4
 8014b6e:	f002 fd0b 	bl	8017588 <__i2b>
 8014b72:	4606      	mov	r6, r0
 8014b74:	2800      	cmp	r0, #0
 8014b76:	f43f aef3 	beq.w	8014960 <_strtod_l+0x498>
 8014b7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014b7c:	9904      	ldr	r1, [sp, #16]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	bfab      	itete	ge
 8014b82:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8014b84:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8014b86:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8014b88:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8014b8c:	bfac      	ite	ge
 8014b8e:	eb03 0902 	addge.w	r9, r3, r2
 8014b92:	1ad7      	sublt	r7, r2, r3
 8014b94:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014b96:	eba3 0801 	sub.w	r8, r3, r1
 8014b9a:	4490      	add	r8, r2
 8014b9c:	4ba3      	ldr	r3, [pc, #652]	; (8014e2c <_strtod_l+0x964>)
 8014b9e:	f108 38ff 	add.w	r8, r8, #4294967295
 8014ba2:	4598      	cmp	r8, r3
 8014ba4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014ba8:	f280 80cc 	bge.w	8014d44 <_strtod_l+0x87c>
 8014bac:	eba3 0308 	sub.w	r3, r3, r8
 8014bb0:	2b1f      	cmp	r3, #31
 8014bb2:	eba2 0203 	sub.w	r2, r2, r3
 8014bb6:	f04f 0101 	mov.w	r1, #1
 8014bba:	f300 80b6 	bgt.w	8014d2a <_strtod_l+0x862>
 8014bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8014bc2:	9311      	str	r3, [sp, #68]	; 0x44
 8014bc4:	2300      	movs	r3, #0
 8014bc6:	930c      	str	r3, [sp, #48]	; 0x30
 8014bc8:	eb09 0802 	add.w	r8, r9, r2
 8014bcc:	9b04      	ldr	r3, [sp, #16]
 8014bce:	45c1      	cmp	r9, r8
 8014bd0:	4417      	add	r7, r2
 8014bd2:	441f      	add	r7, r3
 8014bd4:	464b      	mov	r3, r9
 8014bd6:	bfa8      	it	ge
 8014bd8:	4643      	movge	r3, r8
 8014bda:	42bb      	cmp	r3, r7
 8014bdc:	bfa8      	it	ge
 8014bde:	463b      	movge	r3, r7
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	bfc2      	ittt	gt
 8014be4:	eba8 0803 	subgt.w	r8, r8, r3
 8014be8:	1aff      	subgt	r7, r7, r3
 8014bea:	eba9 0903 	subgt.w	r9, r9, r3
 8014bee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	dd17      	ble.n	8014c24 <_strtod_l+0x75c>
 8014bf4:	4631      	mov	r1, r6
 8014bf6:	461a      	mov	r2, r3
 8014bf8:	4620      	mov	r0, r4
 8014bfa:	f002 fd81 	bl	8017700 <__pow5mult>
 8014bfe:	4606      	mov	r6, r0
 8014c00:	2800      	cmp	r0, #0
 8014c02:	f43f aead 	beq.w	8014960 <_strtod_l+0x498>
 8014c06:	4601      	mov	r1, r0
 8014c08:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014c0a:	4620      	mov	r0, r4
 8014c0c:	f002 fcd2 	bl	80175b4 <__multiply>
 8014c10:	900f      	str	r0, [sp, #60]	; 0x3c
 8014c12:	2800      	cmp	r0, #0
 8014c14:	f43f aea4 	beq.w	8014960 <_strtod_l+0x498>
 8014c18:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014c1a:	4620      	mov	r0, r4
 8014c1c:	f002 fbae 	bl	801737c <_Bfree>
 8014c20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014c22:	931e      	str	r3, [sp, #120]	; 0x78
 8014c24:	f1b8 0f00 	cmp.w	r8, #0
 8014c28:	f300 8091 	bgt.w	8014d4e <_strtod_l+0x886>
 8014c2c:	9b08      	ldr	r3, [sp, #32]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	dd08      	ble.n	8014c44 <_strtod_l+0x77c>
 8014c32:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014c34:	9907      	ldr	r1, [sp, #28]
 8014c36:	4620      	mov	r0, r4
 8014c38:	f002 fd62 	bl	8017700 <__pow5mult>
 8014c3c:	9007      	str	r0, [sp, #28]
 8014c3e:	2800      	cmp	r0, #0
 8014c40:	f43f ae8e 	beq.w	8014960 <_strtod_l+0x498>
 8014c44:	2f00      	cmp	r7, #0
 8014c46:	dd08      	ble.n	8014c5a <_strtod_l+0x792>
 8014c48:	9907      	ldr	r1, [sp, #28]
 8014c4a:	463a      	mov	r2, r7
 8014c4c:	4620      	mov	r0, r4
 8014c4e:	f002 fdb1 	bl	80177b4 <__lshift>
 8014c52:	9007      	str	r0, [sp, #28]
 8014c54:	2800      	cmp	r0, #0
 8014c56:	f43f ae83 	beq.w	8014960 <_strtod_l+0x498>
 8014c5a:	f1b9 0f00 	cmp.w	r9, #0
 8014c5e:	dd08      	ble.n	8014c72 <_strtod_l+0x7aa>
 8014c60:	4631      	mov	r1, r6
 8014c62:	464a      	mov	r2, r9
 8014c64:	4620      	mov	r0, r4
 8014c66:	f002 fda5 	bl	80177b4 <__lshift>
 8014c6a:	4606      	mov	r6, r0
 8014c6c:	2800      	cmp	r0, #0
 8014c6e:	f43f ae77 	beq.w	8014960 <_strtod_l+0x498>
 8014c72:	9a07      	ldr	r2, [sp, #28]
 8014c74:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014c76:	4620      	mov	r0, r4
 8014c78:	f002 fe24 	bl	80178c4 <__mdiff>
 8014c7c:	4605      	mov	r5, r0
 8014c7e:	2800      	cmp	r0, #0
 8014c80:	f43f ae6e 	beq.w	8014960 <_strtod_l+0x498>
 8014c84:	68c3      	ldr	r3, [r0, #12]
 8014c86:	930f      	str	r3, [sp, #60]	; 0x3c
 8014c88:	2300      	movs	r3, #0
 8014c8a:	60c3      	str	r3, [r0, #12]
 8014c8c:	4631      	mov	r1, r6
 8014c8e:	f002 fdfd 	bl	801788c <__mcmp>
 8014c92:	2800      	cmp	r0, #0
 8014c94:	da65      	bge.n	8014d62 <_strtod_l+0x89a>
 8014c96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014c98:	ea53 030a 	orrs.w	r3, r3, sl
 8014c9c:	f040 8087 	bne.w	8014dae <_strtod_l+0x8e6>
 8014ca0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	f040 8082 	bne.w	8014dae <_strtod_l+0x8e6>
 8014caa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014cae:	0d1b      	lsrs	r3, r3, #20
 8014cb0:	051b      	lsls	r3, r3, #20
 8014cb2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014cb6:	d97a      	bls.n	8014dae <_strtod_l+0x8e6>
 8014cb8:	696b      	ldr	r3, [r5, #20]
 8014cba:	b913      	cbnz	r3, 8014cc2 <_strtod_l+0x7fa>
 8014cbc:	692b      	ldr	r3, [r5, #16]
 8014cbe:	2b01      	cmp	r3, #1
 8014cc0:	dd75      	ble.n	8014dae <_strtod_l+0x8e6>
 8014cc2:	4629      	mov	r1, r5
 8014cc4:	2201      	movs	r2, #1
 8014cc6:	4620      	mov	r0, r4
 8014cc8:	f002 fd74 	bl	80177b4 <__lshift>
 8014ccc:	4631      	mov	r1, r6
 8014cce:	4605      	mov	r5, r0
 8014cd0:	f002 fddc 	bl	801788c <__mcmp>
 8014cd4:	2800      	cmp	r0, #0
 8014cd6:	dd6a      	ble.n	8014dae <_strtod_l+0x8e6>
 8014cd8:	9904      	ldr	r1, [sp, #16]
 8014cda:	4a55      	ldr	r2, [pc, #340]	; (8014e30 <_strtod_l+0x968>)
 8014cdc:	465b      	mov	r3, fp
 8014cde:	2900      	cmp	r1, #0
 8014ce0:	f000 8085 	beq.w	8014dee <_strtod_l+0x926>
 8014ce4:	ea02 010b 	and.w	r1, r2, fp
 8014ce8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014cec:	dc7f      	bgt.n	8014dee <_strtod_l+0x926>
 8014cee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014cf2:	f77f aeaa 	ble.w	8014a4a <_strtod_l+0x582>
 8014cf6:	4a4f      	ldr	r2, [pc, #316]	; (8014e34 <_strtod_l+0x96c>)
 8014cf8:	2300      	movs	r3, #0
 8014cfa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8014cfe:	4650      	mov	r0, sl
 8014d00:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8014d04:	4659      	mov	r1, fp
 8014d06:	f7eb fc97 	bl	8000638 <__aeabi_dmul>
 8014d0a:	460b      	mov	r3, r1
 8014d0c:	4303      	orrs	r3, r0
 8014d0e:	bf08      	it	eq
 8014d10:	2322      	moveq	r3, #34	; 0x22
 8014d12:	4682      	mov	sl, r0
 8014d14:	468b      	mov	fp, r1
 8014d16:	bf08      	it	eq
 8014d18:	6023      	streq	r3, [r4, #0]
 8014d1a:	e62b      	b.n	8014974 <_strtod_l+0x4ac>
 8014d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8014d20:	fa02 f303 	lsl.w	r3, r2, r3
 8014d24:	ea03 0a0a 	and.w	sl, r3, sl
 8014d28:	e6de      	b.n	8014ae8 <_strtod_l+0x620>
 8014d2a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8014d2e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8014d32:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8014d36:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8014d3a:	fa01 f308 	lsl.w	r3, r1, r8
 8014d3e:	930c      	str	r3, [sp, #48]	; 0x30
 8014d40:	9111      	str	r1, [sp, #68]	; 0x44
 8014d42:	e741      	b.n	8014bc8 <_strtod_l+0x700>
 8014d44:	2300      	movs	r3, #0
 8014d46:	930c      	str	r3, [sp, #48]	; 0x30
 8014d48:	2301      	movs	r3, #1
 8014d4a:	9311      	str	r3, [sp, #68]	; 0x44
 8014d4c:	e73c      	b.n	8014bc8 <_strtod_l+0x700>
 8014d4e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014d50:	4642      	mov	r2, r8
 8014d52:	4620      	mov	r0, r4
 8014d54:	f002 fd2e 	bl	80177b4 <__lshift>
 8014d58:	901e      	str	r0, [sp, #120]	; 0x78
 8014d5a:	2800      	cmp	r0, #0
 8014d5c:	f47f af66 	bne.w	8014c2c <_strtod_l+0x764>
 8014d60:	e5fe      	b.n	8014960 <_strtod_l+0x498>
 8014d62:	465f      	mov	r7, fp
 8014d64:	d16e      	bne.n	8014e44 <_strtod_l+0x97c>
 8014d66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014d68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014d6c:	b342      	cbz	r2, 8014dc0 <_strtod_l+0x8f8>
 8014d6e:	4a32      	ldr	r2, [pc, #200]	; (8014e38 <_strtod_l+0x970>)
 8014d70:	4293      	cmp	r3, r2
 8014d72:	d128      	bne.n	8014dc6 <_strtod_l+0x8fe>
 8014d74:	9b04      	ldr	r3, [sp, #16]
 8014d76:	4650      	mov	r0, sl
 8014d78:	b1eb      	cbz	r3, 8014db6 <_strtod_l+0x8ee>
 8014d7a:	4a2d      	ldr	r2, [pc, #180]	; (8014e30 <_strtod_l+0x968>)
 8014d7c:	403a      	ands	r2, r7
 8014d7e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8014d82:	f04f 31ff 	mov.w	r1, #4294967295
 8014d86:	d819      	bhi.n	8014dbc <_strtod_l+0x8f4>
 8014d88:	0d12      	lsrs	r2, r2, #20
 8014d8a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8014d92:	4298      	cmp	r0, r3
 8014d94:	d117      	bne.n	8014dc6 <_strtod_l+0x8fe>
 8014d96:	4b29      	ldr	r3, [pc, #164]	; (8014e3c <_strtod_l+0x974>)
 8014d98:	429f      	cmp	r7, r3
 8014d9a:	d102      	bne.n	8014da2 <_strtod_l+0x8da>
 8014d9c:	3001      	adds	r0, #1
 8014d9e:	f43f addf 	beq.w	8014960 <_strtod_l+0x498>
 8014da2:	4b23      	ldr	r3, [pc, #140]	; (8014e30 <_strtod_l+0x968>)
 8014da4:	403b      	ands	r3, r7
 8014da6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8014daa:	f04f 0a00 	mov.w	sl, #0
 8014dae:	9b04      	ldr	r3, [sp, #16]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d1a0      	bne.n	8014cf6 <_strtod_l+0x82e>
 8014db4:	e5de      	b.n	8014974 <_strtod_l+0x4ac>
 8014db6:	f04f 33ff 	mov.w	r3, #4294967295
 8014dba:	e7ea      	b.n	8014d92 <_strtod_l+0x8ca>
 8014dbc:	460b      	mov	r3, r1
 8014dbe:	e7e8      	b.n	8014d92 <_strtod_l+0x8ca>
 8014dc0:	ea53 030a 	orrs.w	r3, r3, sl
 8014dc4:	d088      	beq.n	8014cd8 <_strtod_l+0x810>
 8014dc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014dc8:	b1db      	cbz	r3, 8014e02 <_strtod_l+0x93a>
 8014dca:	423b      	tst	r3, r7
 8014dcc:	d0ef      	beq.n	8014dae <_strtod_l+0x8e6>
 8014dce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014dd0:	9a04      	ldr	r2, [sp, #16]
 8014dd2:	4650      	mov	r0, sl
 8014dd4:	4659      	mov	r1, fp
 8014dd6:	b1c3      	cbz	r3, 8014e0a <_strtod_l+0x942>
 8014dd8:	f7ff fb58 	bl	801448c <sulp>
 8014ddc:	4602      	mov	r2, r0
 8014dde:	460b      	mov	r3, r1
 8014de0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014de4:	f7eb fa72 	bl	80002cc <__adddf3>
 8014de8:	4682      	mov	sl, r0
 8014dea:	468b      	mov	fp, r1
 8014dec:	e7df      	b.n	8014dae <_strtod_l+0x8e6>
 8014dee:	4013      	ands	r3, r2
 8014df0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014df4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014df8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014dfc:	f04f 3aff 	mov.w	sl, #4294967295
 8014e00:	e7d5      	b.n	8014dae <_strtod_l+0x8e6>
 8014e02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014e04:	ea13 0f0a 	tst.w	r3, sl
 8014e08:	e7e0      	b.n	8014dcc <_strtod_l+0x904>
 8014e0a:	f7ff fb3f 	bl	801448c <sulp>
 8014e0e:	4602      	mov	r2, r0
 8014e10:	460b      	mov	r3, r1
 8014e12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014e16:	f7eb fa57 	bl	80002c8 <__aeabi_dsub>
 8014e1a:	2200      	movs	r2, #0
 8014e1c:	2300      	movs	r3, #0
 8014e1e:	4682      	mov	sl, r0
 8014e20:	468b      	mov	fp, r1
 8014e22:	f7eb fe71 	bl	8000b08 <__aeabi_dcmpeq>
 8014e26:	2800      	cmp	r0, #0
 8014e28:	d0c1      	beq.n	8014dae <_strtod_l+0x8e6>
 8014e2a:	e60e      	b.n	8014a4a <_strtod_l+0x582>
 8014e2c:	fffffc02 	.word	0xfffffc02
 8014e30:	7ff00000 	.word	0x7ff00000
 8014e34:	39500000 	.word	0x39500000
 8014e38:	000fffff 	.word	0x000fffff
 8014e3c:	7fefffff 	.word	0x7fefffff
 8014e40:	0801ac50 	.word	0x0801ac50
 8014e44:	4631      	mov	r1, r6
 8014e46:	4628      	mov	r0, r5
 8014e48:	f002 fe9c 	bl	8017b84 <__ratio>
 8014e4c:	ec59 8b10 	vmov	r8, r9, d0
 8014e50:	ee10 0a10 	vmov	r0, s0
 8014e54:	2200      	movs	r2, #0
 8014e56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014e5a:	4649      	mov	r1, r9
 8014e5c:	f7eb fe68 	bl	8000b30 <__aeabi_dcmple>
 8014e60:	2800      	cmp	r0, #0
 8014e62:	d07c      	beq.n	8014f5e <_strtod_l+0xa96>
 8014e64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d04c      	beq.n	8014f04 <_strtod_l+0xa3c>
 8014e6a:	4b95      	ldr	r3, [pc, #596]	; (80150c0 <_strtod_l+0xbf8>)
 8014e6c:	2200      	movs	r2, #0
 8014e6e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014e72:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80150c0 <_strtod_l+0xbf8>
 8014e76:	f04f 0800 	mov.w	r8, #0
 8014e7a:	4b92      	ldr	r3, [pc, #584]	; (80150c4 <_strtod_l+0xbfc>)
 8014e7c:	403b      	ands	r3, r7
 8014e7e:	9311      	str	r3, [sp, #68]	; 0x44
 8014e80:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014e82:	4b91      	ldr	r3, [pc, #580]	; (80150c8 <_strtod_l+0xc00>)
 8014e84:	429a      	cmp	r2, r3
 8014e86:	f040 80b2 	bne.w	8014fee <_strtod_l+0xb26>
 8014e8a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014e8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014e92:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8014e96:	ec4b ab10 	vmov	d0, sl, fp
 8014e9a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8014e9e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014ea2:	f002 fd97 	bl	80179d4 <__ulp>
 8014ea6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014eaa:	ec53 2b10 	vmov	r2, r3, d0
 8014eae:	f7eb fbc3 	bl	8000638 <__aeabi_dmul>
 8014eb2:	4652      	mov	r2, sl
 8014eb4:	465b      	mov	r3, fp
 8014eb6:	f7eb fa09 	bl	80002cc <__adddf3>
 8014eba:	460b      	mov	r3, r1
 8014ebc:	4981      	ldr	r1, [pc, #516]	; (80150c4 <_strtod_l+0xbfc>)
 8014ebe:	4a83      	ldr	r2, [pc, #524]	; (80150cc <_strtod_l+0xc04>)
 8014ec0:	4019      	ands	r1, r3
 8014ec2:	4291      	cmp	r1, r2
 8014ec4:	4682      	mov	sl, r0
 8014ec6:	d95e      	bls.n	8014f86 <_strtod_l+0xabe>
 8014ec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014eca:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014ece:	4293      	cmp	r3, r2
 8014ed0:	d103      	bne.n	8014eda <_strtod_l+0xa12>
 8014ed2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ed4:	3301      	adds	r3, #1
 8014ed6:	f43f ad43 	beq.w	8014960 <_strtod_l+0x498>
 8014eda:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80150d8 <_strtod_l+0xc10>
 8014ede:	f04f 3aff 	mov.w	sl, #4294967295
 8014ee2:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014ee4:	4620      	mov	r0, r4
 8014ee6:	f002 fa49 	bl	801737c <_Bfree>
 8014eea:	9907      	ldr	r1, [sp, #28]
 8014eec:	4620      	mov	r0, r4
 8014eee:	f002 fa45 	bl	801737c <_Bfree>
 8014ef2:	4631      	mov	r1, r6
 8014ef4:	4620      	mov	r0, r4
 8014ef6:	f002 fa41 	bl	801737c <_Bfree>
 8014efa:	4629      	mov	r1, r5
 8014efc:	4620      	mov	r0, r4
 8014efe:	f002 fa3d 	bl	801737c <_Bfree>
 8014f02:	e613      	b.n	8014b2c <_strtod_l+0x664>
 8014f04:	f1ba 0f00 	cmp.w	sl, #0
 8014f08:	d11b      	bne.n	8014f42 <_strtod_l+0xa7a>
 8014f0a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014f0e:	b9f3      	cbnz	r3, 8014f4e <_strtod_l+0xa86>
 8014f10:	4b6b      	ldr	r3, [pc, #428]	; (80150c0 <_strtod_l+0xbf8>)
 8014f12:	2200      	movs	r2, #0
 8014f14:	4640      	mov	r0, r8
 8014f16:	4649      	mov	r1, r9
 8014f18:	f7eb fe00 	bl	8000b1c <__aeabi_dcmplt>
 8014f1c:	b9d0      	cbnz	r0, 8014f54 <_strtod_l+0xa8c>
 8014f1e:	4640      	mov	r0, r8
 8014f20:	4649      	mov	r1, r9
 8014f22:	4b6b      	ldr	r3, [pc, #428]	; (80150d0 <_strtod_l+0xc08>)
 8014f24:	2200      	movs	r2, #0
 8014f26:	f7eb fb87 	bl	8000638 <__aeabi_dmul>
 8014f2a:	4680      	mov	r8, r0
 8014f2c:	4689      	mov	r9, r1
 8014f2e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014f32:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8014f36:	931b      	str	r3, [sp, #108]	; 0x6c
 8014f38:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8014f3c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014f40:	e79b      	b.n	8014e7a <_strtod_l+0x9b2>
 8014f42:	f1ba 0f01 	cmp.w	sl, #1
 8014f46:	d102      	bne.n	8014f4e <_strtod_l+0xa86>
 8014f48:	2f00      	cmp	r7, #0
 8014f4a:	f43f ad7e 	beq.w	8014a4a <_strtod_l+0x582>
 8014f4e:	4b61      	ldr	r3, [pc, #388]	; (80150d4 <_strtod_l+0xc0c>)
 8014f50:	2200      	movs	r2, #0
 8014f52:	e78c      	b.n	8014e6e <_strtod_l+0x9a6>
 8014f54:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80150d0 <_strtod_l+0xc08>
 8014f58:	f04f 0800 	mov.w	r8, #0
 8014f5c:	e7e7      	b.n	8014f2e <_strtod_l+0xa66>
 8014f5e:	4b5c      	ldr	r3, [pc, #368]	; (80150d0 <_strtod_l+0xc08>)
 8014f60:	4640      	mov	r0, r8
 8014f62:	4649      	mov	r1, r9
 8014f64:	2200      	movs	r2, #0
 8014f66:	f7eb fb67 	bl	8000638 <__aeabi_dmul>
 8014f6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014f6c:	4680      	mov	r8, r0
 8014f6e:	4689      	mov	r9, r1
 8014f70:	b933      	cbnz	r3, 8014f80 <_strtod_l+0xab8>
 8014f72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014f76:	9012      	str	r0, [sp, #72]	; 0x48
 8014f78:	9313      	str	r3, [sp, #76]	; 0x4c
 8014f7a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8014f7e:	e7dd      	b.n	8014f3c <_strtod_l+0xa74>
 8014f80:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8014f84:	e7f9      	b.n	8014f7a <_strtod_l+0xab2>
 8014f86:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014f8a:	9b04      	ldr	r3, [sp, #16]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d1a8      	bne.n	8014ee2 <_strtod_l+0xa1a>
 8014f90:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014f94:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014f96:	0d1b      	lsrs	r3, r3, #20
 8014f98:	051b      	lsls	r3, r3, #20
 8014f9a:	429a      	cmp	r2, r3
 8014f9c:	d1a1      	bne.n	8014ee2 <_strtod_l+0xa1a>
 8014f9e:	4640      	mov	r0, r8
 8014fa0:	4649      	mov	r1, r9
 8014fa2:	f7eb fef9 	bl	8000d98 <__aeabi_d2lz>
 8014fa6:	f7eb fb19 	bl	80005dc <__aeabi_l2d>
 8014faa:	4602      	mov	r2, r0
 8014fac:	460b      	mov	r3, r1
 8014fae:	4640      	mov	r0, r8
 8014fb0:	4649      	mov	r1, r9
 8014fb2:	f7eb f989 	bl	80002c8 <__aeabi_dsub>
 8014fb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014fb8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014fbc:	ea43 030a 	orr.w	r3, r3, sl
 8014fc0:	4313      	orrs	r3, r2
 8014fc2:	4680      	mov	r8, r0
 8014fc4:	4689      	mov	r9, r1
 8014fc6:	d053      	beq.n	8015070 <_strtod_l+0xba8>
 8014fc8:	a335      	add	r3, pc, #212	; (adr r3, 80150a0 <_strtod_l+0xbd8>)
 8014fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fce:	f7eb fda5 	bl	8000b1c <__aeabi_dcmplt>
 8014fd2:	2800      	cmp	r0, #0
 8014fd4:	f47f acce 	bne.w	8014974 <_strtod_l+0x4ac>
 8014fd8:	a333      	add	r3, pc, #204	; (adr r3, 80150a8 <_strtod_l+0xbe0>)
 8014fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fde:	4640      	mov	r0, r8
 8014fe0:	4649      	mov	r1, r9
 8014fe2:	f7eb fdb9 	bl	8000b58 <__aeabi_dcmpgt>
 8014fe6:	2800      	cmp	r0, #0
 8014fe8:	f43f af7b 	beq.w	8014ee2 <_strtod_l+0xa1a>
 8014fec:	e4c2      	b.n	8014974 <_strtod_l+0x4ac>
 8014fee:	9b04      	ldr	r3, [sp, #16]
 8014ff0:	b333      	cbz	r3, 8015040 <_strtod_l+0xb78>
 8014ff2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014ff4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014ff8:	d822      	bhi.n	8015040 <_strtod_l+0xb78>
 8014ffa:	a32d      	add	r3, pc, #180	; (adr r3, 80150b0 <_strtod_l+0xbe8>)
 8014ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015000:	4640      	mov	r0, r8
 8015002:	4649      	mov	r1, r9
 8015004:	f7eb fd94 	bl	8000b30 <__aeabi_dcmple>
 8015008:	b1a0      	cbz	r0, 8015034 <_strtod_l+0xb6c>
 801500a:	4649      	mov	r1, r9
 801500c:	4640      	mov	r0, r8
 801500e:	f7eb fdeb 	bl	8000be8 <__aeabi_d2uiz>
 8015012:	2801      	cmp	r0, #1
 8015014:	bf38      	it	cc
 8015016:	2001      	movcc	r0, #1
 8015018:	f7eb fa94 	bl	8000544 <__aeabi_ui2d>
 801501c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801501e:	4680      	mov	r8, r0
 8015020:	4689      	mov	r9, r1
 8015022:	bb13      	cbnz	r3, 801506a <_strtod_l+0xba2>
 8015024:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015028:	9014      	str	r0, [sp, #80]	; 0x50
 801502a:	9315      	str	r3, [sp, #84]	; 0x54
 801502c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8015030:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8015034:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015036:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015038:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801503c:	1a9b      	subs	r3, r3, r2
 801503e:	930d      	str	r3, [sp, #52]	; 0x34
 8015040:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015044:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8015048:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801504c:	f002 fcc2 	bl	80179d4 <__ulp>
 8015050:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015054:	ec53 2b10 	vmov	r2, r3, d0
 8015058:	f7eb faee 	bl	8000638 <__aeabi_dmul>
 801505c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015060:	f7eb f934 	bl	80002cc <__adddf3>
 8015064:	4682      	mov	sl, r0
 8015066:	468b      	mov	fp, r1
 8015068:	e78f      	b.n	8014f8a <_strtod_l+0xac2>
 801506a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801506e:	e7dd      	b.n	801502c <_strtod_l+0xb64>
 8015070:	a311      	add	r3, pc, #68	; (adr r3, 80150b8 <_strtod_l+0xbf0>)
 8015072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015076:	f7eb fd51 	bl	8000b1c <__aeabi_dcmplt>
 801507a:	e7b4      	b.n	8014fe6 <_strtod_l+0xb1e>
 801507c:	2300      	movs	r3, #0
 801507e:	930e      	str	r3, [sp, #56]	; 0x38
 8015080:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015082:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015084:	6013      	str	r3, [r2, #0]
 8015086:	f7ff ba65 	b.w	8014554 <_strtod_l+0x8c>
 801508a:	2b65      	cmp	r3, #101	; 0x65
 801508c:	f43f ab5d 	beq.w	801474a <_strtod_l+0x282>
 8015090:	2b45      	cmp	r3, #69	; 0x45
 8015092:	f43f ab5a 	beq.w	801474a <_strtod_l+0x282>
 8015096:	2201      	movs	r2, #1
 8015098:	f7ff bb92 	b.w	80147c0 <_strtod_l+0x2f8>
 801509c:	f3af 8000 	nop.w
 80150a0:	94a03595 	.word	0x94a03595
 80150a4:	3fdfffff 	.word	0x3fdfffff
 80150a8:	35afe535 	.word	0x35afe535
 80150ac:	3fe00000 	.word	0x3fe00000
 80150b0:	ffc00000 	.word	0xffc00000
 80150b4:	41dfffff 	.word	0x41dfffff
 80150b8:	94a03595 	.word	0x94a03595
 80150bc:	3fcfffff 	.word	0x3fcfffff
 80150c0:	3ff00000 	.word	0x3ff00000
 80150c4:	7ff00000 	.word	0x7ff00000
 80150c8:	7fe00000 	.word	0x7fe00000
 80150cc:	7c9fffff 	.word	0x7c9fffff
 80150d0:	3fe00000 	.word	0x3fe00000
 80150d4:	bff00000 	.word	0xbff00000
 80150d8:	7fefffff 	.word	0x7fefffff

080150dc <_strtod_r>:
 80150dc:	4b01      	ldr	r3, [pc, #4]	; (80150e4 <_strtod_r+0x8>)
 80150de:	f7ff b9f3 	b.w	80144c8 <_strtod_l>
 80150e2:	bf00      	nop
 80150e4:	20000174 	.word	0x20000174

080150e8 <strtok>:
 80150e8:	4b16      	ldr	r3, [pc, #88]	; (8015144 <strtok+0x5c>)
 80150ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80150ec:	681e      	ldr	r6, [r3, #0]
 80150ee:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80150f0:	4605      	mov	r5, r0
 80150f2:	b9fc      	cbnz	r4, 8015134 <strtok+0x4c>
 80150f4:	2050      	movs	r0, #80	; 0x50
 80150f6:	9101      	str	r1, [sp, #4]
 80150f8:	f7fd fddc 	bl	8012cb4 <malloc>
 80150fc:	9901      	ldr	r1, [sp, #4]
 80150fe:	65b0      	str	r0, [r6, #88]	; 0x58
 8015100:	4602      	mov	r2, r0
 8015102:	b920      	cbnz	r0, 801510e <strtok+0x26>
 8015104:	4b10      	ldr	r3, [pc, #64]	; (8015148 <strtok+0x60>)
 8015106:	4811      	ldr	r0, [pc, #68]	; (801514c <strtok+0x64>)
 8015108:	2157      	movs	r1, #87	; 0x57
 801510a:	f000 fc69 	bl	80159e0 <__assert_func>
 801510e:	e9c0 4400 	strd	r4, r4, [r0]
 8015112:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8015116:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801511a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801511e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8015122:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8015126:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801512a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801512e:	6184      	str	r4, [r0, #24]
 8015130:	7704      	strb	r4, [r0, #28]
 8015132:	6244      	str	r4, [r0, #36]	; 0x24
 8015134:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8015136:	2301      	movs	r3, #1
 8015138:	4628      	mov	r0, r5
 801513a:	b002      	add	sp, #8
 801513c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015140:	f000 b806 	b.w	8015150 <__strtok_r>
 8015144:	200000ac 	.word	0x200000ac
 8015148:	0801aab8 	.word	0x0801aab8
 801514c:	0801ac78 	.word	0x0801ac78

08015150 <__strtok_r>:
 8015150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015152:	b908      	cbnz	r0, 8015158 <__strtok_r+0x8>
 8015154:	6810      	ldr	r0, [r2, #0]
 8015156:	b188      	cbz	r0, 801517c <__strtok_r+0x2c>
 8015158:	4604      	mov	r4, r0
 801515a:	4620      	mov	r0, r4
 801515c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8015160:	460f      	mov	r7, r1
 8015162:	f817 6b01 	ldrb.w	r6, [r7], #1
 8015166:	b91e      	cbnz	r6, 8015170 <__strtok_r+0x20>
 8015168:	b965      	cbnz	r5, 8015184 <__strtok_r+0x34>
 801516a:	6015      	str	r5, [r2, #0]
 801516c:	4628      	mov	r0, r5
 801516e:	e005      	b.n	801517c <__strtok_r+0x2c>
 8015170:	42b5      	cmp	r5, r6
 8015172:	d1f6      	bne.n	8015162 <__strtok_r+0x12>
 8015174:	2b00      	cmp	r3, #0
 8015176:	d1f0      	bne.n	801515a <__strtok_r+0xa>
 8015178:	6014      	str	r4, [r2, #0]
 801517a:	7003      	strb	r3, [r0, #0]
 801517c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801517e:	461c      	mov	r4, r3
 8015180:	e00c      	b.n	801519c <__strtok_r+0x4c>
 8015182:	b915      	cbnz	r5, 801518a <__strtok_r+0x3a>
 8015184:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015188:	460e      	mov	r6, r1
 801518a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801518e:	42ab      	cmp	r3, r5
 8015190:	d1f7      	bne.n	8015182 <__strtok_r+0x32>
 8015192:	2b00      	cmp	r3, #0
 8015194:	d0f3      	beq.n	801517e <__strtok_r+0x2e>
 8015196:	2300      	movs	r3, #0
 8015198:	f804 3c01 	strb.w	r3, [r4, #-1]
 801519c:	6014      	str	r4, [r2, #0]
 801519e:	e7ed      	b.n	801517c <__strtok_r+0x2c>

080151a0 <_strtol_l.isra.0>:
 80151a0:	2b01      	cmp	r3, #1
 80151a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151a6:	d001      	beq.n	80151ac <_strtol_l.isra.0+0xc>
 80151a8:	2b24      	cmp	r3, #36	; 0x24
 80151aa:	d906      	bls.n	80151ba <_strtol_l.isra.0+0x1a>
 80151ac:	f7fd fb40 	bl	8012830 <__errno>
 80151b0:	2316      	movs	r3, #22
 80151b2:	6003      	str	r3, [r0, #0]
 80151b4:	2000      	movs	r0, #0
 80151b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151ba:	4f3a      	ldr	r7, [pc, #232]	; (80152a4 <_strtol_l.isra.0+0x104>)
 80151bc:	468e      	mov	lr, r1
 80151be:	4676      	mov	r6, lr
 80151c0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80151c4:	5de5      	ldrb	r5, [r4, r7]
 80151c6:	f015 0508 	ands.w	r5, r5, #8
 80151ca:	d1f8      	bne.n	80151be <_strtol_l.isra.0+0x1e>
 80151cc:	2c2d      	cmp	r4, #45	; 0x2d
 80151ce:	d134      	bne.n	801523a <_strtol_l.isra.0+0x9a>
 80151d0:	f89e 4000 	ldrb.w	r4, [lr]
 80151d4:	f04f 0801 	mov.w	r8, #1
 80151d8:	f106 0e02 	add.w	lr, r6, #2
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d05c      	beq.n	801529a <_strtol_l.isra.0+0xfa>
 80151e0:	2b10      	cmp	r3, #16
 80151e2:	d10c      	bne.n	80151fe <_strtol_l.isra.0+0x5e>
 80151e4:	2c30      	cmp	r4, #48	; 0x30
 80151e6:	d10a      	bne.n	80151fe <_strtol_l.isra.0+0x5e>
 80151e8:	f89e 4000 	ldrb.w	r4, [lr]
 80151ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80151f0:	2c58      	cmp	r4, #88	; 0x58
 80151f2:	d14d      	bne.n	8015290 <_strtol_l.isra.0+0xf0>
 80151f4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80151f8:	2310      	movs	r3, #16
 80151fa:	f10e 0e02 	add.w	lr, lr, #2
 80151fe:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8015202:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015206:	2600      	movs	r6, #0
 8015208:	fbbc f9f3 	udiv	r9, ip, r3
 801520c:	4635      	mov	r5, r6
 801520e:	fb03 ca19 	mls	sl, r3, r9, ip
 8015212:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8015216:	2f09      	cmp	r7, #9
 8015218:	d818      	bhi.n	801524c <_strtol_l.isra.0+0xac>
 801521a:	463c      	mov	r4, r7
 801521c:	42a3      	cmp	r3, r4
 801521e:	dd24      	ble.n	801526a <_strtol_l.isra.0+0xca>
 8015220:	2e00      	cmp	r6, #0
 8015222:	db1f      	blt.n	8015264 <_strtol_l.isra.0+0xc4>
 8015224:	45a9      	cmp	r9, r5
 8015226:	d31d      	bcc.n	8015264 <_strtol_l.isra.0+0xc4>
 8015228:	d101      	bne.n	801522e <_strtol_l.isra.0+0x8e>
 801522a:	45a2      	cmp	sl, r4
 801522c:	db1a      	blt.n	8015264 <_strtol_l.isra.0+0xc4>
 801522e:	fb05 4503 	mla	r5, r5, r3, r4
 8015232:	2601      	movs	r6, #1
 8015234:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8015238:	e7eb      	b.n	8015212 <_strtol_l.isra.0+0x72>
 801523a:	2c2b      	cmp	r4, #43	; 0x2b
 801523c:	bf08      	it	eq
 801523e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8015242:	46a8      	mov	r8, r5
 8015244:	bf08      	it	eq
 8015246:	f106 0e02 	addeq.w	lr, r6, #2
 801524a:	e7c7      	b.n	80151dc <_strtol_l.isra.0+0x3c>
 801524c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8015250:	2f19      	cmp	r7, #25
 8015252:	d801      	bhi.n	8015258 <_strtol_l.isra.0+0xb8>
 8015254:	3c37      	subs	r4, #55	; 0x37
 8015256:	e7e1      	b.n	801521c <_strtol_l.isra.0+0x7c>
 8015258:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801525c:	2f19      	cmp	r7, #25
 801525e:	d804      	bhi.n	801526a <_strtol_l.isra.0+0xca>
 8015260:	3c57      	subs	r4, #87	; 0x57
 8015262:	e7db      	b.n	801521c <_strtol_l.isra.0+0x7c>
 8015264:	f04f 36ff 	mov.w	r6, #4294967295
 8015268:	e7e4      	b.n	8015234 <_strtol_l.isra.0+0x94>
 801526a:	2e00      	cmp	r6, #0
 801526c:	da05      	bge.n	801527a <_strtol_l.isra.0+0xda>
 801526e:	2322      	movs	r3, #34	; 0x22
 8015270:	6003      	str	r3, [r0, #0]
 8015272:	4665      	mov	r5, ip
 8015274:	b942      	cbnz	r2, 8015288 <_strtol_l.isra.0+0xe8>
 8015276:	4628      	mov	r0, r5
 8015278:	e79d      	b.n	80151b6 <_strtol_l.isra.0+0x16>
 801527a:	f1b8 0f00 	cmp.w	r8, #0
 801527e:	d000      	beq.n	8015282 <_strtol_l.isra.0+0xe2>
 8015280:	426d      	negs	r5, r5
 8015282:	2a00      	cmp	r2, #0
 8015284:	d0f7      	beq.n	8015276 <_strtol_l.isra.0+0xd6>
 8015286:	b10e      	cbz	r6, 801528c <_strtol_l.isra.0+0xec>
 8015288:	f10e 31ff 	add.w	r1, lr, #4294967295
 801528c:	6011      	str	r1, [r2, #0]
 801528e:	e7f2      	b.n	8015276 <_strtol_l.isra.0+0xd6>
 8015290:	2430      	movs	r4, #48	; 0x30
 8015292:	2b00      	cmp	r3, #0
 8015294:	d1b3      	bne.n	80151fe <_strtol_l.isra.0+0x5e>
 8015296:	2308      	movs	r3, #8
 8015298:	e7b1      	b.n	80151fe <_strtol_l.isra.0+0x5e>
 801529a:	2c30      	cmp	r4, #48	; 0x30
 801529c:	d0a4      	beq.n	80151e8 <_strtol_l.isra.0+0x48>
 801529e:	230a      	movs	r3, #10
 80152a0:	e7ad      	b.n	80151fe <_strtol_l.isra.0+0x5e>
 80152a2:	bf00      	nop
 80152a4:	0801a951 	.word	0x0801a951

080152a8 <_strtol_r>:
 80152a8:	f7ff bf7a 	b.w	80151a0 <_strtol_l.isra.0>

080152ac <strtol>:
 80152ac:	4613      	mov	r3, r2
 80152ae:	460a      	mov	r2, r1
 80152b0:	4601      	mov	r1, r0
 80152b2:	4802      	ldr	r0, [pc, #8]	; (80152bc <strtol+0x10>)
 80152b4:	6800      	ldr	r0, [r0, #0]
 80152b6:	f7ff bf73 	b.w	80151a0 <_strtol_l.isra.0>
 80152ba:	bf00      	nop
 80152bc:	200000ac 	.word	0x200000ac

080152c0 <_strtoul_l.isra.0>:
 80152c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80152c4:	4e3b      	ldr	r6, [pc, #236]	; (80153b4 <_strtoul_l.isra.0+0xf4>)
 80152c6:	4686      	mov	lr, r0
 80152c8:	468c      	mov	ip, r1
 80152ca:	4660      	mov	r0, ip
 80152cc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80152d0:	5da5      	ldrb	r5, [r4, r6]
 80152d2:	f015 0508 	ands.w	r5, r5, #8
 80152d6:	d1f8      	bne.n	80152ca <_strtoul_l.isra.0+0xa>
 80152d8:	2c2d      	cmp	r4, #45	; 0x2d
 80152da:	d134      	bne.n	8015346 <_strtoul_l.isra.0+0x86>
 80152dc:	f89c 4000 	ldrb.w	r4, [ip]
 80152e0:	f04f 0801 	mov.w	r8, #1
 80152e4:	f100 0c02 	add.w	ip, r0, #2
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d05e      	beq.n	80153aa <_strtoul_l.isra.0+0xea>
 80152ec:	2b10      	cmp	r3, #16
 80152ee:	d10c      	bne.n	801530a <_strtoul_l.isra.0+0x4a>
 80152f0:	2c30      	cmp	r4, #48	; 0x30
 80152f2:	d10a      	bne.n	801530a <_strtoul_l.isra.0+0x4a>
 80152f4:	f89c 0000 	ldrb.w	r0, [ip]
 80152f8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80152fc:	2858      	cmp	r0, #88	; 0x58
 80152fe:	d14f      	bne.n	80153a0 <_strtoul_l.isra.0+0xe0>
 8015300:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8015304:	2310      	movs	r3, #16
 8015306:	f10c 0c02 	add.w	ip, ip, #2
 801530a:	f04f 37ff 	mov.w	r7, #4294967295
 801530e:	2500      	movs	r5, #0
 8015310:	fbb7 f7f3 	udiv	r7, r7, r3
 8015314:	fb03 f907 	mul.w	r9, r3, r7
 8015318:	ea6f 0909 	mvn.w	r9, r9
 801531c:	4628      	mov	r0, r5
 801531e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8015322:	2e09      	cmp	r6, #9
 8015324:	d818      	bhi.n	8015358 <_strtoul_l.isra.0+0x98>
 8015326:	4634      	mov	r4, r6
 8015328:	42a3      	cmp	r3, r4
 801532a:	dd24      	ble.n	8015376 <_strtoul_l.isra.0+0xb6>
 801532c:	2d00      	cmp	r5, #0
 801532e:	db1f      	blt.n	8015370 <_strtoul_l.isra.0+0xb0>
 8015330:	4287      	cmp	r7, r0
 8015332:	d31d      	bcc.n	8015370 <_strtoul_l.isra.0+0xb0>
 8015334:	d101      	bne.n	801533a <_strtoul_l.isra.0+0x7a>
 8015336:	45a1      	cmp	r9, r4
 8015338:	db1a      	blt.n	8015370 <_strtoul_l.isra.0+0xb0>
 801533a:	fb00 4003 	mla	r0, r0, r3, r4
 801533e:	2501      	movs	r5, #1
 8015340:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8015344:	e7eb      	b.n	801531e <_strtoul_l.isra.0+0x5e>
 8015346:	2c2b      	cmp	r4, #43	; 0x2b
 8015348:	bf08      	it	eq
 801534a:	f89c 4000 	ldrbeq.w	r4, [ip]
 801534e:	46a8      	mov	r8, r5
 8015350:	bf08      	it	eq
 8015352:	f100 0c02 	addeq.w	ip, r0, #2
 8015356:	e7c7      	b.n	80152e8 <_strtoul_l.isra.0+0x28>
 8015358:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801535c:	2e19      	cmp	r6, #25
 801535e:	d801      	bhi.n	8015364 <_strtoul_l.isra.0+0xa4>
 8015360:	3c37      	subs	r4, #55	; 0x37
 8015362:	e7e1      	b.n	8015328 <_strtoul_l.isra.0+0x68>
 8015364:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8015368:	2e19      	cmp	r6, #25
 801536a:	d804      	bhi.n	8015376 <_strtoul_l.isra.0+0xb6>
 801536c:	3c57      	subs	r4, #87	; 0x57
 801536e:	e7db      	b.n	8015328 <_strtoul_l.isra.0+0x68>
 8015370:	f04f 35ff 	mov.w	r5, #4294967295
 8015374:	e7e4      	b.n	8015340 <_strtoul_l.isra.0+0x80>
 8015376:	2d00      	cmp	r5, #0
 8015378:	da07      	bge.n	801538a <_strtoul_l.isra.0+0xca>
 801537a:	2322      	movs	r3, #34	; 0x22
 801537c:	f8ce 3000 	str.w	r3, [lr]
 8015380:	f04f 30ff 	mov.w	r0, #4294967295
 8015384:	b942      	cbnz	r2, 8015398 <_strtoul_l.isra.0+0xd8>
 8015386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801538a:	f1b8 0f00 	cmp.w	r8, #0
 801538e:	d000      	beq.n	8015392 <_strtoul_l.isra.0+0xd2>
 8015390:	4240      	negs	r0, r0
 8015392:	2a00      	cmp	r2, #0
 8015394:	d0f7      	beq.n	8015386 <_strtoul_l.isra.0+0xc6>
 8015396:	b10d      	cbz	r5, 801539c <_strtoul_l.isra.0+0xdc>
 8015398:	f10c 31ff 	add.w	r1, ip, #4294967295
 801539c:	6011      	str	r1, [r2, #0]
 801539e:	e7f2      	b.n	8015386 <_strtoul_l.isra.0+0xc6>
 80153a0:	2430      	movs	r4, #48	; 0x30
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d1b1      	bne.n	801530a <_strtoul_l.isra.0+0x4a>
 80153a6:	2308      	movs	r3, #8
 80153a8:	e7af      	b.n	801530a <_strtoul_l.isra.0+0x4a>
 80153aa:	2c30      	cmp	r4, #48	; 0x30
 80153ac:	d0a2      	beq.n	80152f4 <_strtoul_l.isra.0+0x34>
 80153ae:	230a      	movs	r3, #10
 80153b0:	e7ab      	b.n	801530a <_strtoul_l.isra.0+0x4a>
 80153b2:	bf00      	nop
 80153b4:	0801a951 	.word	0x0801a951

080153b8 <_strtoul_r>:
 80153b8:	f7ff bf82 	b.w	80152c0 <_strtoul_l.isra.0>

080153bc <strtoul>:
 80153bc:	4613      	mov	r3, r2
 80153be:	460a      	mov	r2, r1
 80153c0:	4601      	mov	r1, r0
 80153c2:	4802      	ldr	r0, [pc, #8]	; (80153cc <strtoul+0x10>)
 80153c4:	6800      	ldr	r0, [r0, #0]
 80153c6:	f7ff bf7b 	b.w	80152c0 <_strtoul_l.isra.0>
 80153ca:	bf00      	nop
 80153cc:	200000ac 	.word	0x200000ac

080153d0 <__tzcalc_limits>:
 80153d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153d4:	4680      	mov	r8, r0
 80153d6:	f001 fe45 	bl	8017064 <__gettzinfo>
 80153da:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80153de:	4598      	cmp	r8, r3
 80153e0:	f340 8098 	ble.w	8015514 <__tzcalc_limits+0x144>
 80153e4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80153e8:	4443      	add	r3, r8
 80153ea:	109b      	asrs	r3, r3, #2
 80153ec:	f240 126d 	movw	r2, #365	; 0x16d
 80153f0:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 80153f4:	fb02 3505 	mla	r5, r2, r5, r3
 80153f8:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80153fc:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8015400:	fb93 f3f2 	sdiv	r3, r3, r2
 8015404:	441d      	add	r5, r3
 8015406:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801540a:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801540e:	fb98 f7f3 	sdiv	r7, r8, r3
 8015412:	fb03 8717 	mls	r7, r3, r7, r8
 8015416:	4442      	add	r2, r8
 8015418:	fab7 fc87 	clz	ip, r7
 801541c:	fbb2 f2f3 	udiv	r2, r2, r3
 8015420:	f008 0303 	and.w	r3, r8, #3
 8015424:	4415      	add	r5, r2
 8015426:	2264      	movs	r2, #100	; 0x64
 8015428:	f8c0 8004 	str.w	r8, [r0, #4]
 801542c:	fb98 f6f2 	sdiv	r6, r8, r2
 8015430:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8015434:	fb02 8616 	mls	r6, r2, r6, r8
 8015438:	4604      	mov	r4, r0
 801543a:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801543e:	9300      	str	r3, [sp, #0]
 8015440:	f04f 0e07 	mov.w	lr, #7
 8015444:	7a22      	ldrb	r2, [r4, #8]
 8015446:	6963      	ldr	r3, [r4, #20]
 8015448:	2a4a      	cmp	r2, #74	; 0x4a
 801544a:	d128      	bne.n	801549e <__tzcalc_limits+0xce>
 801544c:	9900      	ldr	r1, [sp, #0]
 801544e:	18ea      	adds	r2, r5, r3
 8015450:	b901      	cbnz	r1, 8015454 <__tzcalc_limits+0x84>
 8015452:	b906      	cbnz	r6, 8015456 <__tzcalc_limits+0x86>
 8015454:	bb0f      	cbnz	r7, 801549a <__tzcalc_limits+0xca>
 8015456:	2b3b      	cmp	r3, #59	; 0x3b
 8015458:	bfd4      	ite	le
 801545a:	2300      	movle	r3, #0
 801545c:	2301      	movgt	r3, #1
 801545e:	4413      	add	r3, r2
 8015460:	1e5a      	subs	r2, r3, #1
 8015462:	69a3      	ldr	r3, [r4, #24]
 8015464:	492c      	ldr	r1, [pc, #176]	; (8015518 <__tzcalc_limits+0x148>)
 8015466:	fb01 3202 	mla	r2, r1, r2, r3
 801546a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801546c:	4413      	add	r3, r2
 801546e:	461a      	mov	r2, r3
 8015470:	17db      	asrs	r3, r3, #31
 8015472:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8015476:	3428      	adds	r4, #40	; 0x28
 8015478:	45a3      	cmp	fp, r4
 801547a:	d1e3      	bne.n	8015444 <__tzcalc_limits+0x74>
 801547c:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8015480:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8015484:	4294      	cmp	r4, r2
 8015486:	eb75 0303 	sbcs.w	r3, r5, r3
 801548a:	bfb4      	ite	lt
 801548c:	2301      	movlt	r3, #1
 801548e:	2300      	movge	r3, #0
 8015490:	6003      	str	r3, [r0, #0]
 8015492:	2001      	movs	r0, #1
 8015494:	b003      	add	sp, #12
 8015496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801549a:	2300      	movs	r3, #0
 801549c:	e7df      	b.n	801545e <__tzcalc_limits+0x8e>
 801549e:	2a44      	cmp	r2, #68	; 0x44
 80154a0:	d101      	bne.n	80154a6 <__tzcalc_limits+0xd6>
 80154a2:	18ea      	adds	r2, r5, r3
 80154a4:	e7dd      	b.n	8015462 <__tzcalc_limits+0x92>
 80154a6:	9a00      	ldr	r2, [sp, #0]
 80154a8:	bb72      	cbnz	r2, 8015508 <__tzcalc_limits+0x138>
 80154aa:	2e00      	cmp	r6, #0
 80154ac:	bf0c      	ite	eq
 80154ae:	46e0      	moveq	r8, ip
 80154b0:	f04f 0801 	movne.w	r8, #1
 80154b4:	4919      	ldr	r1, [pc, #100]	; (801551c <__tzcalc_limits+0x14c>)
 80154b6:	68e2      	ldr	r2, [r4, #12]
 80154b8:	9201      	str	r2, [sp, #4]
 80154ba:	f04f 0a30 	mov.w	sl, #48	; 0x30
 80154be:	fb0a 1808 	mla	r8, sl, r8, r1
 80154c2:	462a      	mov	r2, r5
 80154c4:	f04f 0900 	mov.w	r9, #0
 80154c8:	f1a8 0804 	sub.w	r8, r8, #4
 80154cc:	9901      	ldr	r1, [sp, #4]
 80154ce:	f109 0901 	add.w	r9, r9, #1
 80154d2:	4549      	cmp	r1, r9
 80154d4:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 80154d8:	dc18      	bgt.n	801550c <__tzcalc_limits+0x13c>
 80154da:	f102 0804 	add.w	r8, r2, #4
 80154de:	fb98 f9fe 	sdiv	r9, r8, lr
 80154e2:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80154e6:	eba8 0909 	sub.w	r9, r8, r9
 80154ea:	ebb3 0909 	subs.w	r9, r3, r9
 80154ee:	6923      	ldr	r3, [r4, #16]
 80154f0:	f103 33ff 	add.w	r3, r3, #4294967295
 80154f4:	bf48      	it	mi
 80154f6:	f109 0907 	addmi.w	r9, r9, #7
 80154fa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80154fe:	444b      	add	r3, r9
 8015500:	4553      	cmp	r3, sl
 8015502:	da05      	bge.n	8015510 <__tzcalc_limits+0x140>
 8015504:	441a      	add	r2, r3
 8015506:	e7ac      	b.n	8015462 <__tzcalc_limits+0x92>
 8015508:	46e0      	mov	r8, ip
 801550a:	e7d3      	b.n	80154b4 <__tzcalc_limits+0xe4>
 801550c:	4452      	add	r2, sl
 801550e:	e7dd      	b.n	80154cc <__tzcalc_limits+0xfc>
 8015510:	3b07      	subs	r3, #7
 8015512:	e7f5      	b.n	8015500 <__tzcalc_limits+0x130>
 8015514:	2000      	movs	r0, #0
 8015516:	e7bd      	b.n	8015494 <__tzcalc_limits+0xc4>
 8015518:	00015180 	.word	0x00015180
 801551c:	0801ab90 	.word	0x0801ab90

08015520 <__tz_lock>:
 8015520:	4801      	ldr	r0, [pc, #4]	; (8015528 <__tz_lock+0x8>)
 8015522:	f7fd bbc2 	b.w	8012caa <__retarget_lock_acquire>
 8015526:	bf00      	nop
 8015528:	200064f7 	.word	0x200064f7

0801552c <__tz_unlock>:
 801552c:	4801      	ldr	r0, [pc, #4]	; (8015534 <__tz_unlock+0x8>)
 801552e:	f7fd bbbe 	b.w	8012cae <__retarget_lock_release>
 8015532:	bf00      	nop
 8015534:	200064f7 	.word	0x200064f7

08015538 <_tzset_unlocked>:
 8015538:	4b01      	ldr	r3, [pc, #4]	; (8015540 <_tzset_unlocked+0x8>)
 801553a:	6818      	ldr	r0, [r3, #0]
 801553c:	f000 b802 	b.w	8015544 <_tzset_unlocked_r>
 8015540:	200000ac 	.word	0x200000ac

08015544 <_tzset_unlocked_r>:
 8015544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015548:	b08d      	sub	sp, #52	; 0x34
 801554a:	4607      	mov	r7, r0
 801554c:	f001 fd8a 	bl	8017064 <__gettzinfo>
 8015550:	49ae      	ldr	r1, [pc, #696]	; (801580c <_tzset_unlocked_r+0x2c8>)
 8015552:	4eaf      	ldr	r6, [pc, #700]	; (8015810 <_tzset_unlocked_r+0x2cc>)
 8015554:	4605      	mov	r5, r0
 8015556:	4638      	mov	r0, r7
 8015558:	f001 fd7c 	bl	8017054 <_getenv_r>
 801555c:	4604      	mov	r4, r0
 801555e:	b970      	cbnz	r0, 801557e <_tzset_unlocked_r+0x3a>
 8015560:	4bac      	ldr	r3, [pc, #688]	; (8015814 <_tzset_unlocked_r+0x2d0>)
 8015562:	4aad      	ldr	r2, [pc, #692]	; (8015818 <_tzset_unlocked_r+0x2d4>)
 8015564:	6018      	str	r0, [r3, #0]
 8015566:	4bad      	ldr	r3, [pc, #692]	; (801581c <_tzset_unlocked_r+0x2d8>)
 8015568:	6018      	str	r0, [r3, #0]
 801556a:	4bad      	ldr	r3, [pc, #692]	; (8015820 <_tzset_unlocked_r+0x2dc>)
 801556c:	6830      	ldr	r0, [r6, #0]
 801556e:	e9c3 2200 	strd	r2, r2, [r3]
 8015572:	f7fd fba7 	bl	8012cc4 <free>
 8015576:	6034      	str	r4, [r6, #0]
 8015578:	b00d      	add	sp, #52	; 0x34
 801557a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801557e:	6831      	ldr	r1, [r6, #0]
 8015580:	2900      	cmp	r1, #0
 8015582:	d15f      	bne.n	8015644 <_tzset_unlocked_r+0x100>
 8015584:	6830      	ldr	r0, [r6, #0]
 8015586:	f7fd fb9d 	bl	8012cc4 <free>
 801558a:	4620      	mov	r0, r4
 801558c:	f7ea fe3a 	bl	8000204 <strlen>
 8015590:	1c41      	adds	r1, r0, #1
 8015592:	4638      	mov	r0, r7
 8015594:	f7fd fe9c 	bl	80132d0 <_malloc_r>
 8015598:	6030      	str	r0, [r6, #0]
 801559a:	2800      	cmp	r0, #0
 801559c:	d157      	bne.n	801564e <_tzset_unlocked_r+0x10a>
 801559e:	7823      	ldrb	r3, [r4, #0]
 80155a0:	4aa0      	ldr	r2, [pc, #640]	; (8015824 <_tzset_unlocked_r+0x2e0>)
 80155a2:	49a1      	ldr	r1, [pc, #644]	; (8015828 <_tzset_unlocked_r+0x2e4>)
 80155a4:	2b3a      	cmp	r3, #58	; 0x3a
 80155a6:	bf08      	it	eq
 80155a8:	3401      	addeq	r4, #1
 80155aa:	ae0a      	add	r6, sp, #40	; 0x28
 80155ac:	4633      	mov	r3, r6
 80155ae:	4620      	mov	r0, r4
 80155b0:	f7fe fed4 	bl	801435c <siscanf>
 80155b4:	2800      	cmp	r0, #0
 80155b6:	dddf      	ble.n	8015578 <_tzset_unlocked_r+0x34>
 80155b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155ba:	18e7      	adds	r7, r4, r3
 80155bc:	5ce3      	ldrb	r3, [r4, r3]
 80155be:	2b2d      	cmp	r3, #45	; 0x2d
 80155c0:	d149      	bne.n	8015656 <_tzset_unlocked_r+0x112>
 80155c2:	3701      	adds	r7, #1
 80155c4:	f04f 34ff 	mov.w	r4, #4294967295
 80155c8:	f10d 0a20 	add.w	sl, sp, #32
 80155cc:	f10d 0b1e 	add.w	fp, sp, #30
 80155d0:	f04f 0800 	mov.w	r8, #0
 80155d4:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80155d8:	4994      	ldr	r1, [pc, #592]	; (801582c <_tzset_unlocked_r+0x2e8>)
 80155da:	9603      	str	r6, [sp, #12]
 80155dc:	f8cd b000 	str.w	fp, [sp]
 80155e0:	4633      	mov	r3, r6
 80155e2:	aa07      	add	r2, sp, #28
 80155e4:	4638      	mov	r0, r7
 80155e6:	f8ad 801e 	strh.w	r8, [sp, #30]
 80155ea:	f8ad 8020 	strh.w	r8, [sp, #32]
 80155ee:	f7fe feb5 	bl	801435c <siscanf>
 80155f2:	4540      	cmp	r0, r8
 80155f4:	ddc0      	ble.n	8015578 <_tzset_unlocked_r+0x34>
 80155f6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80155fa:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80155fe:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8015838 <_tzset_unlocked_r+0x2f4>
 8015602:	213c      	movs	r1, #60	; 0x3c
 8015604:	fb01 2203 	mla	r2, r1, r3, r2
 8015608:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801560c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8015610:	fb01 2303 	mla	r3, r1, r3, r2
 8015614:	435c      	muls	r4, r3
 8015616:	62ac      	str	r4, [r5, #40]	; 0x28
 8015618:	4c81      	ldr	r4, [pc, #516]	; (8015820 <_tzset_unlocked_r+0x2dc>)
 801561a:	4b82      	ldr	r3, [pc, #520]	; (8015824 <_tzset_unlocked_r+0x2e0>)
 801561c:	6023      	str	r3, [r4, #0]
 801561e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015620:	4981      	ldr	r1, [pc, #516]	; (8015828 <_tzset_unlocked_r+0x2e4>)
 8015622:	441f      	add	r7, r3
 8015624:	464a      	mov	r2, r9
 8015626:	4633      	mov	r3, r6
 8015628:	4638      	mov	r0, r7
 801562a:	f7fe fe97 	bl	801435c <siscanf>
 801562e:	4540      	cmp	r0, r8
 8015630:	dc16      	bgt.n	8015660 <_tzset_unlocked_r+0x11c>
 8015632:	6823      	ldr	r3, [r4, #0]
 8015634:	6063      	str	r3, [r4, #4]
 8015636:	4b77      	ldr	r3, [pc, #476]	; (8015814 <_tzset_unlocked_r+0x2d0>)
 8015638:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801563a:	601a      	str	r2, [r3, #0]
 801563c:	4b77      	ldr	r3, [pc, #476]	; (801581c <_tzset_unlocked_r+0x2d8>)
 801563e:	f8c3 8000 	str.w	r8, [r3]
 8015642:	e799      	b.n	8015578 <_tzset_unlocked_r+0x34>
 8015644:	f7ea fdd4 	bl	80001f0 <strcmp>
 8015648:	2800      	cmp	r0, #0
 801564a:	d19b      	bne.n	8015584 <_tzset_unlocked_r+0x40>
 801564c:	e794      	b.n	8015578 <_tzset_unlocked_r+0x34>
 801564e:	4621      	mov	r1, r4
 8015650:	f7fe ff02 	bl	8014458 <strcpy>
 8015654:	e7a3      	b.n	801559e <_tzset_unlocked_r+0x5a>
 8015656:	2b2b      	cmp	r3, #43	; 0x2b
 8015658:	bf08      	it	eq
 801565a:	3701      	addeq	r7, #1
 801565c:	2401      	movs	r4, #1
 801565e:	e7b3      	b.n	80155c8 <_tzset_unlocked_r+0x84>
 8015660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015662:	f8c4 9004 	str.w	r9, [r4, #4]
 8015666:	18fc      	adds	r4, r7, r3
 8015668:	5cfb      	ldrb	r3, [r7, r3]
 801566a:	2b2d      	cmp	r3, #45	; 0x2d
 801566c:	f040 808b 	bne.w	8015786 <_tzset_unlocked_r+0x242>
 8015670:	3401      	adds	r4, #1
 8015672:	f04f 37ff 	mov.w	r7, #4294967295
 8015676:	2300      	movs	r3, #0
 8015678:	f8ad 301c 	strh.w	r3, [sp, #28]
 801567c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015680:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015684:	930a      	str	r3, [sp, #40]	; 0x28
 8015686:	e9cd a602 	strd	sl, r6, [sp, #8]
 801568a:	e9cd b600 	strd	fp, r6, [sp]
 801568e:	4967      	ldr	r1, [pc, #412]	; (801582c <_tzset_unlocked_r+0x2e8>)
 8015690:	4633      	mov	r3, r6
 8015692:	aa07      	add	r2, sp, #28
 8015694:	4620      	mov	r0, r4
 8015696:	f7fe fe61 	bl	801435c <siscanf>
 801569a:	2800      	cmp	r0, #0
 801569c:	dc78      	bgt.n	8015790 <_tzset_unlocked_r+0x24c>
 801569e:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 80156a0:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 80156a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156a6:	652f      	str	r7, [r5, #80]	; 0x50
 80156a8:	441c      	add	r4, r3
 80156aa:	462f      	mov	r7, r5
 80156ac:	f04f 0900 	mov.w	r9, #0
 80156b0:	7823      	ldrb	r3, [r4, #0]
 80156b2:	2b2c      	cmp	r3, #44	; 0x2c
 80156b4:	bf08      	it	eq
 80156b6:	3401      	addeq	r4, #1
 80156b8:	f894 8000 	ldrb.w	r8, [r4]
 80156bc:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80156c0:	d178      	bne.n	80157b4 <_tzset_unlocked_r+0x270>
 80156c2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80156c6:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80156ca:	ab09      	add	r3, sp, #36	; 0x24
 80156cc:	9300      	str	r3, [sp, #0]
 80156ce:	4958      	ldr	r1, [pc, #352]	; (8015830 <_tzset_unlocked_r+0x2ec>)
 80156d0:	9603      	str	r6, [sp, #12]
 80156d2:	4633      	mov	r3, r6
 80156d4:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80156d8:	4620      	mov	r0, r4
 80156da:	f7fe fe3f 	bl	801435c <siscanf>
 80156de:	2803      	cmp	r0, #3
 80156e0:	f47f af4a 	bne.w	8015578 <_tzset_unlocked_r+0x34>
 80156e4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80156e8:	1e4b      	subs	r3, r1, #1
 80156ea:	2b0b      	cmp	r3, #11
 80156ec:	f63f af44 	bhi.w	8015578 <_tzset_unlocked_r+0x34>
 80156f0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80156f4:	1e53      	subs	r3, r2, #1
 80156f6:	2b04      	cmp	r3, #4
 80156f8:	f63f af3e 	bhi.w	8015578 <_tzset_unlocked_r+0x34>
 80156fc:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8015700:	2b06      	cmp	r3, #6
 8015702:	f63f af39 	bhi.w	8015578 <_tzset_unlocked_r+0x34>
 8015706:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801570a:	f887 8008 	strb.w	r8, [r7, #8]
 801570e:	617b      	str	r3, [r7, #20]
 8015710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015712:	eb04 0803 	add.w	r8, r4, r3
 8015716:	2302      	movs	r3, #2
 8015718:	f8ad 301c 	strh.w	r3, [sp, #28]
 801571c:	2300      	movs	r3, #0
 801571e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015722:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015726:	930a      	str	r3, [sp, #40]	; 0x28
 8015728:	f898 3000 	ldrb.w	r3, [r8]
 801572c:	2b2f      	cmp	r3, #47	; 0x2f
 801572e:	d109      	bne.n	8015744 <_tzset_unlocked_r+0x200>
 8015730:	e9cd a602 	strd	sl, r6, [sp, #8]
 8015734:	e9cd b600 	strd	fp, r6, [sp]
 8015738:	493e      	ldr	r1, [pc, #248]	; (8015834 <_tzset_unlocked_r+0x2f0>)
 801573a:	4633      	mov	r3, r6
 801573c:	aa07      	add	r2, sp, #28
 801573e:	4640      	mov	r0, r8
 8015740:	f7fe fe0c 	bl	801435c <siscanf>
 8015744:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8015748:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801574c:	213c      	movs	r1, #60	; 0x3c
 801574e:	fb01 2203 	mla	r2, r1, r3, r2
 8015752:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8015756:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801575a:	fb01 2303 	mla	r3, r1, r3, r2
 801575e:	61bb      	str	r3, [r7, #24]
 8015760:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015762:	3728      	adds	r7, #40	; 0x28
 8015764:	4444      	add	r4, r8
 8015766:	f1b9 0f00 	cmp.w	r9, #0
 801576a:	d020      	beq.n	80157ae <_tzset_unlocked_r+0x26a>
 801576c:	6868      	ldr	r0, [r5, #4]
 801576e:	f7ff fe2f 	bl	80153d0 <__tzcalc_limits>
 8015772:	4b28      	ldr	r3, [pc, #160]	; (8015814 <_tzset_unlocked_r+0x2d0>)
 8015774:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8015776:	601a      	str	r2, [r3, #0]
 8015778:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801577a:	1a9b      	subs	r3, r3, r2
 801577c:	4a27      	ldr	r2, [pc, #156]	; (801581c <_tzset_unlocked_r+0x2d8>)
 801577e:	bf18      	it	ne
 8015780:	2301      	movne	r3, #1
 8015782:	6013      	str	r3, [r2, #0]
 8015784:	e6f8      	b.n	8015578 <_tzset_unlocked_r+0x34>
 8015786:	2b2b      	cmp	r3, #43	; 0x2b
 8015788:	bf08      	it	eq
 801578a:	3401      	addeq	r4, #1
 801578c:	2701      	movs	r7, #1
 801578e:	e772      	b.n	8015676 <_tzset_unlocked_r+0x132>
 8015790:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8015794:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8015798:	213c      	movs	r1, #60	; 0x3c
 801579a:	fb01 2203 	mla	r2, r1, r3, r2
 801579e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80157a2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80157a6:	fb01 2303 	mla	r3, r1, r3, r2
 80157aa:	435f      	muls	r7, r3
 80157ac:	e77a      	b.n	80156a4 <_tzset_unlocked_r+0x160>
 80157ae:	f04f 0901 	mov.w	r9, #1
 80157b2:	e77d      	b.n	80156b0 <_tzset_unlocked_r+0x16c>
 80157b4:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80157b8:	bf06      	itte	eq
 80157ba:	3401      	addeq	r4, #1
 80157bc:	4643      	moveq	r3, r8
 80157be:	2344      	movne	r3, #68	; 0x44
 80157c0:	220a      	movs	r2, #10
 80157c2:	a90b      	add	r1, sp, #44	; 0x2c
 80157c4:	4620      	mov	r0, r4
 80157c6:	9305      	str	r3, [sp, #20]
 80157c8:	f7ff fdf8 	bl	80153bc <strtoul>
 80157cc:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80157d0:	9b05      	ldr	r3, [sp, #20]
 80157d2:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80157d6:	45a0      	cmp	r8, r4
 80157d8:	d114      	bne.n	8015804 <_tzset_unlocked_r+0x2c0>
 80157da:	234d      	movs	r3, #77	; 0x4d
 80157dc:	f1b9 0f00 	cmp.w	r9, #0
 80157e0:	d107      	bne.n	80157f2 <_tzset_unlocked_r+0x2ae>
 80157e2:	722b      	strb	r3, [r5, #8]
 80157e4:	2103      	movs	r1, #3
 80157e6:	2302      	movs	r3, #2
 80157e8:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80157ec:	f8c5 9014 	str.w	r9, [r5, #20]
 80157f0:	e791      	b.n	8015716 <_tzset_unlocked_r+0x1d2>
 80157f2:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80157f6:	220b      	movs	r2, #11
 80157f8:	2301      	movs	r3, #1
 80157fa:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80157fe:	2300      	movs	r3, #0
 8015800:	63eb      	str	r3, [r5, #60]	; 0x3c
 8015802:	e788      	b.n	8015716 <_tzset_unlocked_r+0x1d2>
 8015804:	b280      	uxth	r0, r0
 8015806:	723b      	strb	r3, [r7, #8]
 8015808:	6178      	str	r0, [r7, #20]
 801580a:	e784      	b.n	8015716 <_tzset_unlocked_r+0x1d2>
 801580c:	0801acd9 	.word	0x0801acd9
 8015810:	20005a80 	.word	0x20005a80
 8015814:	20005a88 	.word	0x20005a88
 8015818:	0801acdc 	.word	0x0801acdc
 801581c:	20005a84 	.word	0x20005a84
 8015820:	20000110 	.word	0x20000110
 8015824:	20005a73 	.word	0x20005a73
 8015828:	0801ace0 	.word	0x0801ace0
 801582c:	0801ad03 	.word	0x0801ad03
 8015830:	0801acef 	.word	0x0801acef
 8015834:	0801ad02 	.word	0x0801ad02
 8015838:	20005a68 	.word	0x20005a68

0801583c <__swbuf_r>:
 801583c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801583e:	460e      	mov	r6, r1
 8015840:	4614      	mov	r4, r2
 8015842:	4605      	mov	r5, r0
 8015844:	b118      	cbz	r0, 801584e <__swbuf_r+0x12>
 8015846:	6983      	ldr	r3, [r0, #24]
 8015848:	b90b      	cbnz	r3, 801584e <__swbuf_r+0x12>
 801584a:	f7fd f84f 	bl	80128ec <__sinit>
 801584e:	4b21      	ldr	r3, [pc, #132]	; (80158d4 <__swbuf_r+0x98>)
 8015850:	429c      	cmp	r4, r3
 8015852:	d12b      	bne.n	80158ac <__swbuf_r+0x70>
 8015854:	686c      	ldr	r4, [r5, #4]
 8015856:	69a3      	ldr	r3, [r4, #24]
 8015858:	60a3      	str	r3, [r4, #8]
 801585a:	89a3      	ldrh	r3, [r4, #12]
 801585c:	071a      	lsls	r2, r3, #28
 801585e:	d52f      	bpl.n	80158c0 <__swbuf_r+0x84>
 8015860:	6923      	ldr	r3, [r4, #16]
 8015862:	b36b      	cbz	r3, 80158c0 <__swbuf_r+0x84>
 8015864:	6923      	ldr	r3, [r4, #16]
 8015866:	6820      	ldr	r0, [r4, #0]
 8015868:	1ac0      	subs	r0, r0, r3
 801586a:	6963      	ldr	r3, [r4, #20]
 801586c:	b2f6      	uxtb	r6, r6
 801586e:	4283      	cmp	r3, r0
 8015870:	4637      	mov	r7, r6
 8015872:	dc04      	bgt.n	801587e <__swbuf_r+0x42>
 8015874:	4621      	mov	r1, r4
 8015876:	4628      	mov	r0, r5
 8015878:	f000 fff4 	bl	8016864 <_fflush_r>
 801587c:	bb30      	cbnz	r0, 80158cc <__swbuf_r+0x90>
 801587e:	68a3      	ldr	r3, [r4, #8]
 8015880:	3b01      	subs	r3, #1
 8015882:	60a3      	str	r3, [r4, #8]
 8015884:	6823      	ldr	r3, [r4, #0]
 8015886:	1c5a      	adds	r2, r3, #1
 8015888:	6022      	str	r2, [r4, #0]
 801588a:	701e      	strb	r6, [r3, #0]
 801588c:	6963      	ldr	r3, [r4, #20]
 801588e:	3001      	adds	r0, #1
 8015890:	4283      	cmp	r3, r0
 8015892:	d004      	beq.n	801589e <__swbuf_r+0x62>
 8015894:	89a3      	ldrh	r3, [r4, #12]
 8015896:	07db      	lsls	r3, r3, #31
 8015898:	d506      	bpl.n	80158a8 <__swbuf_r+0x6c>
 801589a:	2e0a      	cmp	r6, #10
 801589c:	d104      	bne.n	80158a8 <__swbuf_r+0x6c>
 801589e:	4621      	mov	r1, r4
 80158a0:	4628      	mov	r0, r5
 80158a2:	f000 ffdf 	bl	8016864 <_fflush_r>
 80158a6:	b988      	cbnz	r0, 80158cc <__swbuf_r+0x90>
 80158a8:	4638      	mov	r0, r7
 80158aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158ac:	4b0a      	ldr	r3, [pc, #40]	; (80158d8 <__swbuf_r+0x9c>)
 80158ae:	429c      	cmp	r4, r3
 80158b0:	d101      	bne.n	80158b6 <__swbuf_r+0x7a>
 80158b2:	68ac      	ldr	r4, [r5, #8]
 80158b4:	e7cf      	b.n	8015856 <__swbuf_r+0x1a>
 80158b6:	4b09      	ldr	r3, [pc, #36]	; (80158dc <__swbuf_r+0xa0>)
 80158b8:	429c      	cmp	r4, r3
 80158ba:	bf08      	it	eq
 80158bc:	68ec      	ldreq	r4, [r5, #12]
 80158be:	e7ca      	b.n	8015856 <__swbuf_r+0x1a>
 80158c0:	4621      	mov	r1, r4
 80158c2:	4628      	mov	r0, r5
 80158c4:	f000 f81e 	bl	8015904 <__swsetup_r>
 80158c8:	2800      	cmp	r0, #0
 80158ca:	d0cb      	beq.n	8015864 <__swbuf_r+0x28>
 80158cc:	f04f 37ff 	mov.w	r7, #4294967295
 80158d0:	e7ea      	b.n	80158a8 <__swbuf_r+0x6c>
 80158d2:	bf00      	nop
 80158d4:	0801aa74 	.word	0x0801aa74
 80158d8:	0801aa94 	.word	0x0801aa94
 80158dc:	0801aa54 	.word	0x0801aa54

080158e0 <_write_r>:
 80158e0:	b538      	push	{r3, r4, r5, lr}
 80158e2:	4d07      	ldr	r5, [pc, #28]	; (8015900 <_write_r+0x20>)
 80158e4:	4604      	mov	r4, r0
 80158e6:	4608      	mov	r0, r1
 80158e8:	4611      	mov	r1, r2
 80158ea:	2200      	movs	r2, #0
 80158ec:	602a      	str	r2, [r5, #0]
 80158ee:	461a      	mov	r2, r3
 80158f0:	f003 f8d8 	bl	8018aa4 <_write>
 80158f4:	1c43      	adds	r3, r0, #1
 80158f6:	d102      	bne.n	80158fe <_write_r+0x1e>
 80158f8:	682b      	ldr	r3, [r5, #0]
 80158fa:	b103      	cbz	r3, 80158fe <_write_r+0x1e>
 80158fc:	6023      	str	r3, [r4, #0]
 80158fe:	bd38      	pop	{r3, r4, r5, pc}
 8015900:	200064fc 	.word	0x200064fc

08015904 <__swsetup_r>:
 8015904:	4b32      	ldr	r3, [pc, #200]	; (80159d0 <__swsetup_r+0xcc>)
 8015906:	b570      	push	{r4, r5, r6, lr}
 8015908:	681d      	ldr	r5, [r3, #0]
 801590a:	4606      	mov	r6, r0
 801590c:	460c      	mov	r4, r1
 801590e:	b125      	cbz	r5, 801591a <__swsetup_r+0x16>
 8015910:	69ab      	ldr	r3, [r5, #24]
 8015912:	b913      	cbnz	r3, 801591a <__swsetup_r+0x16>
 8015914:	4628      	mov	r0, r5
 8015916:	f7fc ffe9 	bl	80128ec <__sinit>
 801591a:	4b2e      	ldr	r3, [pc, #184]	; (80159d4 <__swsetup_r+0xd0>)
 801591c:	429c      	cmp	r4, r3
 801591e:	d10f      	bne.n	8015940 <__swsetup_r+0x3c>
 8015920:	686c      	ldr	r4, [r5, #4]
 8015922:	89a3      	ldrh	r3, [r4, #12]
 8015924:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015928:	0719      	lsls	r1, r3, #28
 801592a:	d42c      	bmi.n	8015986 <__swsetup_r+0x82>
 801592c:	06dd      	lsls	r5, r3, #27
 801592e:	d411      	bmi.n	8015954 <__swsetup_r+0x50>
 8015930:	2309      	movs	r3, #9
 8015932:	6033      	str	r3, [r6, #0]
 8015934:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015938:	81a3      	strh	r3, [r4, #12]
 801593a:	f04f 30ff 	mov.w	r0, #4294967295
 801593e:	e03e      	b.n	80159be <__swsetup_r+0xba>
 8015940:	4b25      	ldr	r3, [pc, #148]	; (80159d8 <__swsetup_r+0xd4>)
 8015942:	429c      	cmp	r4, r3
 8015944:	d101      	bne.n	801594a <__swsetup_r+0x46>
 8015946:	68ac      	ldr	r4, [r5, #8]
 8015948:	e7eb      	b.n	8015922 <__swsetup_r+0x1e>
 801594a:	4b24      	ldr	r3, [pc, #144]	; (80159dc <__swsetup_r+0xd8>)
 801594c:	429c      	cmp	r4, r3
 801594e:	bf08      	it	eq
 8015950:	68ec      	ldreq	r4, [r5, #12]
 8015952:	e7e6      	b.n	8015922 <__swsetup_r+0x1e>
 8015954:	0758      	lsls	r0, r3, #29
 8015956:	d512      	bpl.n	801597e <__swsetup_r+0x7a>
 8015958:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801595a:	b141      	cbz	r1, 801596e <__swsetup_r+0x6a>
 801595c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015960:	4299      	cmp	r1, r3
 8015962:	d002      	beq.n	801596a <__swsetup_r+0x66>
 8015964:	4630      	mov	r0, r6
 8015966:	f7fd fc63 	bl	8013230 <_free_r>
 801596a:	2300      	movs	r3, #0
 801596c:	6363      	str	r3, [r4, #52]	; 0x34
 801596e:	89a3      	ldrh	r3, [r4, #12]
 8015970:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015974:	81a3      	strh	r3, [r4, #12]
 8015976:	2300      	movs	r3, #0
 8015978:	6063      	str	r3, [r4, #4]
 801597a:	6923      	ldr	r3, [r4, #16]
 801597c:	6023      	str	r3, [r4, #0]
 801597e:	89a3      	ldrh	r3, [r4, #12]
 8015980:	f043 0308 	orr.w	r3, r3, #8
 8015984:	81a3      	strh	r3, [r4, #12]
 8015986:	6923      	ldr	r3, [r4, #16]
 8015988:	b94b      	cbnz	r3, 801599e <__swsetup_r+0x9a>
 801598a:	89a3      	ldrh	r3, [r4, #12]
 801598c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015994:	d003      	beq.n	801599e <__swsetup_r+0x9a>
 8015996:	4621      	mov	r1, r4
 8015998:	4630      	mov	r0, r6
 801599a:	f001 fc51 	bl	8017240 <__smakebuf_r>
 801599e:	89a0      	ldrh	r0, [r4, #12]
 80159a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80159a4:	f010 0301 	ands.w	r3, r0, #1
 80159a8:	d00a      	beq.n	80159c0 <__swsetup_r+0xbc>
 80159aa:	2300      	movs	r3, #0
 80159ac:	60a3      	str	r3, [r4, #8]
 80159ae:	6963      	ldr	r3, [r4, #20]
 80159b0:	425b      	negs	r3, r3
 80159b2:	61a3      	str	r3, [r4, #24]
 80159b4:	6923      	ldr	r3, [r4, #16]
 80159b6:	b943      	cbnz	r3, 80159ca <__swsetup_r+0xc6>
 80159b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80159bc:	d1ba      	bne.n	8015934 <__swsetup_r+0x30>
 80159be:	bd70      	pop	{r4, r5, r6, pc}
 80159c0:	0781      	lsls	r1, r0, #30
 80159c2:	bf58      	it	pl
 80159c4:	6963      	ldrpl	r3, [r4, #20]
 80159c6:	60a3      	str	r3, [r4, #8]
 80159c8:	e7f4      	b.n	80159b4 <__swsetup_r+0xb0>
 80159ca:	2000      	movs	r0, #0
 80159cc:	e7f7      	b.n	80159be <__swsetup_r+0xba>
 80159ce:	bf00      	nop
 80159d0:	200000ac 	.word	0x200000ac
 80159d4:	0801aa74 	.word	0x0801aa74
 80159d8:	0801aa94 	.word	0x0801aa94
 80159dc:	0801aa54 	.word	0x0801aa54

080159e0 <__assert_func>:
 80159e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80159e2:	4614      	mov	r4, r2
 80159e4:	461a      	mov	r2, r3
 80159e6:	4b09      	ldr	r3, [pc, #36]	; (8015a0c <__assert_func+0x2c>)
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	4605      	mov	r5, r0
 80159ec:	68d8      	ldr	r0, [r3, #12]
 80159ee:	b14c      	cbz	r4, 8015a04 <__assert_func+0x24>
 80159f0:	4b07      	ldr	r3, [pc, #28]	; (8015a10 <__assert_func+0x30>)
 80159f2:	9100      	str	r1, [sp, #0]
 80159f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80159f8:	4906      	ldr	r1, [pc, #24]	; (8015a14 <__assert_func+0x34>)
 80159fa:	462b      	mov	r3, r5
 80159fc:	f000 ff6e 	bl	80168dc <fiprintf>
 8015a00:	f7fc ff06 	bl	8012810 <abort>
 8015a04:	4b04      	ldr	r3, [pc, #16]	; (8015a18 <__assert_func+0x38>)
 8015a06:	461c      	mov	r4, r3
 8015a08:	e7f3      	b.n	80159f2 <__assert_func+0x12>
 8015a0a:	bf00      	nop
 8015a0c:	200000ac 	.word	0x200000ac
 8015a10:	0801ad15 	.word	0x0801ad15
 8015a14:	0801ad22 	.word	0x0801ad22
 8015a18:	0801ad50 	.word	0x0801ad50

08015a1c <_close_r>:
 8015a1c:	b538      	push	{r3, r4, r5, lr}
 8015a1e:	4d06      	ldr	r5, [pc, #24]	; (8015a38 <_close_r+0x1c>)
 8015a20:	2300      	movs	r3, #0
 8015a22:	4604      	mov	r4, r0
 8015a24:	4608      	mov	r0, r1
 8015a26:	602b      	str	r3, [r5, #0]
 8015a28:	f002 fff6 	bl	8018a18 <_close>
 8015a2c:	1c43      	adds	r3, r0, #1
 8015a2e:	d102      	bne.n	8015a36 <_close_r+0x1a>
 8015a30:	682b      	ldr	r3, [r5, #0]
 8015a32:	b103      	cbz	r3, 8015a36 <_close_r+0x1a>
 8015a34:	6023      	str	r3, [r4, #0]
 8015a36:	bd38      	pop	{r3, r4, r5, pc}
 8015a38:	200064fc 	.word	0x200064fc

08015a3c <div>:
 8015a3c:	2900      	cmp	r1, #0
 8015a3e:	b510      	push	{r4, lr}
 8015a40:	fb91 f4f2 	sdiv	r4, r1, r2
 8015a44:	fb02 1314 	mls	r3, r2, r4, r1
 8015a48:	db06      	blt.n	8015a58 <div+0x1c>
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	da01      	bge.n	8015a52 <div+0x16>
 8015a4e:	3401      	adds	r4, #1
 8015a50:	1a9b      	subs	r3, r3, r2
 8015a52:	e9c0 4300 	strd	r4, r3, [r0]
 8015a56:	bd10      	pop	{r4, pc}
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	bfc4      	itt	gt
 8015a5c:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8015a60:	189b      	addgt	r3, r3, r2
 8015a62:	e7f6      	b.n	8015a52 <div+0x16>

08015a64 <quorem>:
 8015a64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a68:	6903      	ldr	r3, [r0, #16]
 8015a6a:	690c      	ldr	r4, [r1, #16]
 8015a6c:	42a3      	cmp	r3, r4
 8015a6e:	4607      	mov	r7, r0
 8015a70:	f2c0 8081 	blt.w	8015b76 <quorem+0x112>
 8015a74:	3c01      	subs	r4, #1
 8015a76:	f101 0814 	add.w	r8, r1, #20
 8015a7a:	f100 0514 	add.w	r5, r0, #20
 8015a7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015a82:	9301      	str	r3, [sp, #4]
 8015a84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015a88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015a8c:	3301      	adds	r3, #1
 8015a8e:	429a      	cmp	r2, r3
 8015a90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015a94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015a98:	fbb2 f6f3 	udiv	r6, r2, r3
 8015a9c:	d331      	bcc.n	8015b02 <quorem+0x9e>
 8015a9e:	f04f 0e00 	mov.w	lr, #0
 8015aa2:	4640      	mov	r0, r8
 8015aa4:	46ac      	mov	ip, r5
 8015aa6:	46f2      	mov	sl, lr
 8015aa8:	f850 2b04 	ldr.w	r2, [r0], #4
 8015aac:	b293      	uxth	r3, r2
 8015aae:	fb06 e303 	mla	r3, r6, r3, lr
 8015ab2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8015ab6:	b29b      	uxth	r3, r3
 8015ab8:	ebaa 0303 	sub.w	r3, sl, r3
 8015abc:	0c12      	lsrs	r2, r2, #16
 8015abe:	f8dc a000 	ldr.w	sl, [ip]
 8015ac2:	fb06 e202 	mla	r2, r6, r2, lr
 8015ac6:	fa13 f38a 	uxtah	r3, r3, sl
 8015aca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015ace:	fa1f fa82 	uxth.w	sl, r2
 8015ad2:	f8dc 2000 	ldr.w	r2, [ip]
 8015ad6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8015ada:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015ade:	b29b      	uxth	r3, r3
 8015ae0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015ae4:	4581      	cmp	r9, r0
 8015ae6:	f84c 3b04 	str.w	r3, [ip], #4
 8015aea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015aee:	d2db      	bcs.n	8015aa8 <quorem+0x44>
 8015af0:	f855 300b 	ldr.w	r3, [r5, fp]
 8015af4:	b92b      	cbnz	r3, 8015b02 <quorem+0x9e>
 8015af6:	9b01      	ldr	r3, [sp, #4]
 8015af8:	3b04      	subs	r3, #4
 8015afa:	429d      	cmp	r5, r3
 8015afc:	461a      	mov	r2, r3
 8015afe:	d32e      	bcc.n	8015b5e <quorem+0xfa>
 8015b00:	613c      	str	r4, [r7, #16]
 8015b02:	4638      	mov	r0, r7
 8015b04:	f001 fec2 	bl	801788c <__mcmp>
 8015b08:	2800      	cmp	r0, #0
 8015b0a:	db24      	blt.n	8015b56 <quorem+0xf2>
 8015b0c:	3601      	adds	r6, #1
 8015b0e:	4628      	mov	r0, r5
 8015b10:	f04f 0c00 	mov.w	ip, #0
 8015b14:	f858 2b04 	ldr.w	r2, [r8], #4
 8015b18:	f8d0 e000 	ldr.w	lr, [r0]
 8015b1c:	b293      	uxth	r3, r2
 8015b1e:	ebac 0303 	sub.w	r3, ip, r3
 8015b22:	0c12      	lsrs	r2, r2, #16
 8015b24:	fa13 f38e 	uxtah	r3, r3, lr
 8015b28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015b2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015b30:	b29b      	uxth	r3, r3
 8015b32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015b36:	45c1      	cmp	r9, r8
 8015b38:	f840 3b04 	str.w	r3, [r0], #4
 8015b3c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015b40:	d2e8      	bcs.n	8015b14 <quorem+0xb0>
 8015b42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015b46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015b4a:	b922      	cbnz	r2, 8015b56 <quorem+0xf2>
 8015b4c:	3b04      	subs	r3, #4
 8015b4e:	429d      	cmp	r5, r3
 8015b50:	461a      	mov	r2, r3
 8015b52:	d30a      	bcc.n	8015b6a <quorem+0x106>
 8015b54:	613c      	str	r4, [r7, #16]
 8015b56:	4630      	mov	r0, r6
 8015b58:	b003      	add	sp, #12
 8015b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b5e:	6812      	ldr	r2, [r2, #0]
 8015b60:	3b04      	subs	r3, #4
 8015b62:	2a00      	cmp	r2, #0
 8015b64:	d1cc      	bne.n	8015b00 <quorem+0x9c>
 8015b66:	3c01      	subs	r4, #1
 8015b68:	e7c7      	b.n	8015afa <quorem+0x96>
 8015b6a:	6812      	ldr	r2, [r2, #0]
 8015b6c:	3b04      	subs	r3, #4
 8015b6e:	2a00      	cmp	r2, #0
 8015b70:	d1f0      	bne.n	8015b54 <quorem+0xf0>
 8015b72:	3c01      	subs	r4, #1
 8015b74:	e7eb      	b.n	8015b4e <quorem+0xea>
 8015b76:	2000      	movs	r0, #0
 8015b78:	e7ee      	b.n	8015b58 <quorem+0xf4>
 8015b7a:	0000      	movs	r0, r0
 8015b7c:	0000      	movs	r0, r0
	...

08015b80 <_dtoa_r>:
 8015b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b84:	ed2d 8b02 	vpush	{d8}
 8015b88:	ec57 6b10 	vmov	r6, r7, d0
 8015b8c:	b095      	sub	sp, #84	; 0x54
 8015b8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015b90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015b94:	9105      	str	r1, [sp, #20]
 8015b96:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8015b9a:	4604      	mov	r4, r0
 8015b9c:	9209      	str	r2, [sp, #36]	; 0x24
 8015b9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015ba0:	b975      	cbnz	r5, 8015bc0 <_dtoa_r+0x40>
 8015ba2:	2010      	movs	r0, #16
 8015ba4:	f7fd f886 	bl	8012cb4 <malloc>
 8015ba8:	4602      	mov	r2, r0
 8015baa:	6260      	str	r0, [r4, #36]	; 0x24
 8015bac:	b920      	cbnz	r0, 8015bb8 <_dtoa_r+0x38>
 8015bae:	4bb2      	ldr	r3, [pc, #712]	; (8015e78 <_dtoa_r+0x2f8>)
 8015bb0:	21ea      	movs	r1, #234	; 0xea
 8015bb2:	48b2      	ldr	r0, [pc, #712]	; (8015e7c <_dtoa_r+0x2fc>)
 8015bb4:	f7ff ff14 	bl	80159e0 <__assert_func>
 8015bb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015bbc:	6005      	str	r5, [r0, #0]
 8015bbe:	60c5      	str	r5, [r0, #12]
 8015bc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015bc2:	6819      	ldr	r1, [r3, #0]
 8015bc4:	b151      	cbz	r1, 8015bdc <_dtoa_r+0x5c>
 8015bc6:	685a      	ldr	r2, [r3, #4]
 8015bc8:	604a      	str	r2, [r1, #4]
 8015bca:	2301      	movs	r3, #1
 8015bcc:	4093      	lsls	r3, r2
 8015bce:	608b      	str	r3, [r1, #8]
 8015bd0:	4620      	mov	r0, r4
 8015bd2:	f001 fbd3 	bl	801737c <_Bfree>
 8015bd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015bd8:	2200      	movs	r2, #0
 8015bda:	601a      	str	r2, [r3, #0]
 8015bdc:	1e3b      	subs	r3, r7, #0
 8015bde:	bfb9      	ittee	lt
 8015be0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8015be4:	9303      	strlt	r3, [sp, #12]
 8015be6:	2300      	movge	r3, #0
 8015be8:	f8c8 3000 	strge.w	r3, [r8]
 8015bec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8015bf0:	4ba3      	ldr	r3, [pc, #652]	; (8015e80 <_dtoa_r+0x300>)
 8015bf2:	bfbc      	itt	lt
 8015bf4:	2201      	movlt	r2, #1
 8015bf6:	f8c8 2000 	strlt.w	r2, [r8]
 8015bfa:	ea33 0309 	bics.w	r3, r3, r9
 8015bfe:	d11b      	bne.n	8015c38 <_dtoa_r+0xb8>
 8015c00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015c02:	f242 730f 	movw	r3, #9999	; 0x270f
 8015c06:	6013      	str	r3, [r2, #0]
 8015c08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015c0c:	4333      	orrs	r3, r6
 8015c0e:	f000 857a 	beq.w	8016706 <_dtoa_r+0xb86>
 8015c12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015c14:	b963      	cbnz	r3, 8015c30 <_dtoa_r+0xb0>
 8015c16:	4b9b      	ldr	r3, [pc, #620]	; (8015e84 <_dtoa_r+0x304>)
 8015c18:	e024      	b.n	8015c64 <_dtoa_r+0xe4>
 8015c1a:	4b9b      	ldr	r3, [pc, #620]	; (8015e88 <_dtoa_r+0x308>)
 8015c1c:	9300      	str	r3, [sp, #0]
 8015c1e:	3308      	adds	r3, #8
 8015c20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015c22:	6013      	str	r3, [r2, #0]
 8015c24:	9800      	ldr	r0, [sp, #0]
 8015c26:	b015      	add	sp, #84	; 0x54
 8015c28:	ecbd 8b02 	vpop	{d8}
 8015c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c30:	4b94      	ldr	r3, [pc, #592]	; (8015e84 <_dtoa_r+0x304>)
 8015c32:	9300      	str	r3, [sp, #0]
 8015c34:	3303      	adds	r3, #3
 8015c36:	e7f3      	b.n	8015c20 <_dtoa_r+0xa0>
 8015c38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015c3c:	2200      	movs	r2, #0
 8015c3e:	ec51 0b17 	vmov	r0, r1, d7
 8015c42:	2300      	movs	r3, #0
 8015c44:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8015c48:	f7ea ff5e 	bl	8000b08 <__aeabi_dcmpeq>
 8015c4c:	4680      	mov	r8, r0
 8015c4e:	b158      	cbz	r0, 8015c68 <_dtoa_r+0xe8>
 8015c50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015c52:	2301      	movs	r3, #1
 8015c54:	6013      	str	r3, [r2, #0]
 8015c56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	f000 8551 	beq.w	8016700 <_dtoa_r+0xb80>
 8015c5e:	488b      	ldr	r0, [pc, #556]	; (8015e8c <_dtoa_r+0x30c>)
 8015c60:	6018      	str	r0, [r3, #0]
 8015c62:	1e43      	subs	r3, r0, #1
 8015c64:	9300      	str	r3, [sp, #0]
 8015c66:	e7dd      	b.n	8015c24 <_dtoa_r+0xa4>
 8015c68:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8015c6c:	aa12      	add	r2, sp, #72	; 0x48
 8015c6e:	a913      	add	r1, sp, #76	; 0x4c
 8015c70:	4620      	mov	r0, r4
 8015c72:	f001 ff2b 	bl	8017acc <__d2b>
 8015c76:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015c7a:	4683      	mov	fp, r0
 8015c7c:	2d00      	cmp	r5, #0
 8015c7e:	d07c      	beq.n	8015d7a <_dtoa_r+0x1fa>
 8015c80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c82:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8015c86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015c8a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8015c8e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8015c92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8015c96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015c9a:	4b7d      	ldr	r3, [pc, #500]	; (8015e90 <_dtoa_r+0x310>)
 8015c9c:	2200      	movs	r2, #0
 8015c9e:	4630      	mov	r0, r6
 8015ca0:	4639      	mov	r1, r7
 8015ca2:	f7ea fb11 	bl	80002c8 <__aeabi_dsub>
 8015ca6:	a36e      	add	r3, pc, #440	; (adr r3, 8015e60 <_dtoa_r+0x2e0>)
 8015ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cac:	f7ea fcc4 	bl	8000638 <__aeabi_dmul>
 8015cb0:	a36d      	add	r3, pc, #436	; (adr r3, 8015e68 <_dtoa_r+0x2e8>)
 8015cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cb6:	f7ea fb09 	bl	80002cc <__adddf3>
 8015cba:	4606      	mov	r6, r0
 8015cbc:	4628      	mov	r0, r5
 8015cbe:	460f      	mov	r7, r1
 8015cc0:	f7ea fc50 	bl	8000564 <__aeabi_i2d>
 8015cc4:	a36a      	add	r3, pc, #424	; (adr r3, 8015e70 <_dtoa_r+0x2f0>)
 8015cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cca:	f7ea fcb5 	bl	8000638 <__aeabi_dmul>
 8015cce:	4602      	mov	r2, r0
 8015cd0:	460b      	mov	r3, r1
 8015cd2:	4630      	mov	r0, r6
 8015cd4:	4639      	mov	r1, r7
 8015cd6:	f7ea faf9 	bl	80002cc <__adddf3>
 8015cda:	4606      	mov	r6, r0
 8015cdc:	460f      	mov	r7, r1
 8015cde:	f7ea ff5b 	bl	8000b98 <__aeabi_d2iz>
 8015ce2:	2200      	movs	r2, #0
 8015ce4:	4682      	mov	sl, r0
 8015ce6:	2300      	movs	r3, #0
 8015ce8:	4630      	mov	r0, r6
 8015cea:	4639      	mov	r1, r7
 8015cec:	f7ea ff16 	bl	8000b1c <__aeabi_dcmplt>
 8015cf0:	b148      	cbz	r0, 8015d06 <_dtoa_r+0x186>
 8015cf2:	4650      	mov	r0, sl
 8015cf4:	f7ea fc36 	bl	8000564 <__aeabi_i2d>
 8015cf8:	4632      	mov	r2, r6
 8015cfa:	463b      	mov	r3, r7
 8015cfc:	f7ea ff04 	bl	8000b08 <__aeabi_dcmpeq>
 8015d00:	b908      	cbnz	r0, 8015d06 <_dtoa_r+0x186>
 8015d02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015d06:	f1ba 0f16 	cmp.w	sl, #22
 8015d0a:	d854      	bhi.n	8015db6 <_dtoa_r+0x236>
 8015d0c:	4b61      	ldr	r3, [pc, #388]	; (8015e94 <_dtoa_r+0x314>)
 8015d0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015d1a:	f7ea feff 	bl	8000b1c <__aeabi_dcmplt>
 8015d1e:	2800      	cmp	r0, #0
 8015d20:	d04b      	beq.n	8015dba <_dtoa_r+0x23a>
 8015d22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015d26:	2300      	movs	r3, #0
 8015d28:	930e      	str	r3, [sp, #56]	; 0x38
 8015d2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015d2c:	1b5d      	subs	r5, r3, r5
 8015d2e:	1e6b      	subs	r3, r5, #1
 8015d30:	9304      	str	r3, [sp, #16]
 8015d32:	bf43      	ittte	mi
 8015d34:	2300      	movmi	r3, #0
 8015d36:	f1c5 0801 	rsbmi	r8, r5, #1
 8015d3a:	9304      	strmi	r3, [sp, #16]
 8015d3c:	f04f 0800 	movpl.w	r8, #0
 8015d40:	f1ba 0f00 	cmp.w	sl, #0
 8015d44:	db3b      	blt.n	8015dbe <_dtoa_r+0x23e>
 8015d46:	9b04      	ldr	r3, [sp, #16]
 8015d48:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8015d4c:	4453      	add	r3, sl
 8015d4e:	9304      	str	r3, [sp, #16]
 8015d50:	2300      	movs	r3, #0
 8015d52:	9306      	str	r3, [sp, #24]
 8015d54:	9b05      	ldr	r3, [sp, #20]
 8015d56:	2b09      	cmp	r3, #9
 8015d58:	d869      	bhi.n	8015e2e <_dtoa_r+0x2ae>
 8015d5a:	2b05      	cmp	r3, #5
 8015d5c:	bfc4      	itt	gt
 8015d5e:	3b04      	subgt	r3, #4
 8015d60:	9305      	strgt	r3, [sp, #20]
 8015d62:	9b05      	ldr	r3, [sp, #20]
 8015d64:	f1a3 0302 	sub.w	r3, r3, #2
 8015d68:	bfcc      	ite	gt
 8015d6a:	2500      	movgt	r5, #0
 8015d6c:	2501      	movle	r5, #1
 8015d6e:	2b03      	cmp	r3, #3
 8015d70:	d869      	bhi.n	8015e46 <_dtoa_r+0x2c6>
 8015d72:	e8df f003 	tbb	[pc, r3]
 8015d76:	4e2c      	.short	0x4e2c
 8015d78:	5a4c      	.short	0x5a4c
 8015d7a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8015d7e:	441d      	add	r5, r3
 8015d80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8015d84:	2b20      	cmp	r3, #32
 8015d86:	bfc1      	itttt	gt
 8015d88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015d8c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8015d90:	fa09 f303 	lslgt.w	r3, r9, r3
 8015d94:	fa26 f000 	lsrgt.w	r0, r6, r0
 8015d98:	bfda      	itte	le
 8015d9a:	f1c3 0320 	rsble	r3, r3, #32
 8015d9e:	fa06 f003 	lslle.w	r0, r6, r3
 8015da2:	4318      	orrgt	r0, r3
 8015da4:	f7ea fbce 	bl	8000544 <__aeabi_ui2d>
 8015da8:	2301      	movs	r3, #1
 8015daa:	4606      	mov	r6, r0
 8015dac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8015db0:	3d01      	subs	r5, #1
 8015db2:	9310      	str	r3, [sp, #64]	; 0x40
 8015db4:	e771      	b.n	8015c9a <_dtoa_r+0x11a>
 8015db6:	2301      	movs	r3, #1
 8015db8:	e7b6      	b.n	8015d28 <_dtoa_r+0x1a8>
 8015dba:	900e      	str	r0, [sp, #56]	; 0x38
 8015dbc:	e7b5      	b.n	8015d2a <_dtoa_r+0x1aa>
 8015dbe:	f1ca 0300 	rsb	r3, sl, #0
 8015dc2:	9306      	str	r3, [sp, #24]
 8015dc4:	2300      	movs	r3, #0
 8015dc6:	eba8 080a 	sub.w	r8, r8, sl
 8015dca:	930d      	str	r3, [sp, #52]	; 0x34
 8015dcc:	e7c2      	b.n	8015d54 <_dtoa_r+0x1d4>
 8015dce:	2300      	movs	r3, #0
 8015dd0:	9308      	str	r3, [sp, #32]
 8015dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	dc39      	bgt.n	8015e4c <_dtoa_r+0x2cc>
 8015dd8:	f04f 0901 	mov.w	r9, #1
 8015ddc:	f8cd 9004 	str.w	r9, [sp, #4]
 8015de0:	464b      	mov	r3, r9
 8015de2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8015de6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015de8:	2200      	movs	r2, #0
 8015dea:	6042      	str	r2, [r0, #4]
 8015dec:	2204      	movs	r2, #4
 8015dee:	f102 0614 	add.w	r6, r2, #20
 8015df2:	429e      	cmp	r6, r3
 8015df4:	6841      	ldr	r1, [r0, #4]
 8015df6:	d92f      	bls.n	8015e58 <_dtoa_r+0x2d8>
 8015df8:	4620      	mov	r0, r4
 8015dfa:	f001 fa7f 	bl	80172fc <_Balloc>
 8015dfe:	9000      	str	r0, [sp, #0]
 8015e00:	2800      	cmp	r0, #0
 8015e02:	d14b      	bne.n	8015e9c <_dtoa_r+0x31c>
 8015e04:	4b24      	ldr	r3, [pc, #144]	; (8015e98 <_dtoa_r+0x318>)
 8015e06:	4602      	mov	r2, r0
 8015e08:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015e0c:	e6d1      	b.n	8015bb2 <_dtoa_r+0x32>
 8015e0e:	2301      	movs	r3, #1
 8015e10:	e7de      	b.n	8015dd0 <_dtoa_r+0x250>
 8015e12:	2300      	movs	r3, #0
 8015e14:	9308      	str	r3, [sp, #32]
 8015e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e18:	eb0a 0903 	add.w	r9, sl, r3
 8015e1c:	f109 0301 	add.w	r3, r9, #1
 8015e20:	2b01      	cmp	r3, #1
 8015e22:	9301      	str	r3, [sp, #4]
 8015e24:	bfb8      	it	lt
 8015e26:	2301      	movlt	r3, #1
 8015e28:	e7dd      	b.n	8015de6 <_dtoa_r+0x266>
 8015e2a:	2301      	movs	r3, #1
 8015e2c:	e7f2      	b.n	8015e14 <_dtoa_r+0x294>
 8015e2e:	2501      	movs	r5, #1
 8015e30:	2300      	movs	r3, #0
 8015e32:	9305      	str	r3, [sp, #20]
 8015e34:	9508      	str	r5, [sp, #32]
 8015e36:	f04f 39ff 	mov.w	r9, #4294967295
 8015e3a:	2200      	movs	r2, #0
 8015e3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8015e40:	2312      	movs	r3, #18
 8015e42:	9209      	str	r2, [sp, #36]	; 0x24
 8015e44:	e7cf      	b.n	8015de6 <_dtoa_r+0x266>
 8015e46:	2301      	movs	r3, #1
 8015e48:	9308      	str	r3, [sp, #32]
 8015e4a:	e7f4      	b.n	8015e36 <_dtoa_r+0x2b6>
 8015e4c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8015e50:	f8cd 9004 	str.w	r9, [sp, #4]
 8015e54:	464b      	mov	r3, r9
 8015e56:	e7c6      	b.n	8015de6 <_dtoa_r+0x266>
 8015e58:	3101      	adds	r1, #1
 8015e5a:	6041      	str	r1, [r0, #4]
 8015e5c:	0052      	lsls	r2, r2, #1
 8015e5e:	e7c6      	b.n	8015dee <_dtoa_r+0x26e>
 8015e60:	636f4361 	.word	0x636f4361
 8015e64:	3fd287a7 	.word	0x3fd287a7
 8015e68:	8b60c8b3 	.word	0x8b60c8b3
 8015e6c:	3fc68a28 	.word	0x3fc68a28
 8015e70:	509f79fb 	.word	0x509f79fb
 8015e74:	3fd34413 	.word	0x3fd34413
 8015e78:	0801aab8 	.word	0x0801aab8
 8015e7c:	0801ad5e 	.word	0x0801ad5e
 8015e80:	7ff00000 	.word	0x7ff00000
 8015e84:	0801ad5a 	.word	0x0801ad5a
 8015e88:	0801ad51 	.word	0x0801ad51
 8015e8c:	0801afc2 	.word	0x0801afc2
 8015e90:	3ff80000 	.word	0x3ff80000
 8015e94:	0801aed8 	.word	0x0801aed8
 8015e98:	0801adbd 	.word	0x0801adbd
 8015e9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015e9e:	9a00      	ldr	r2, [sp, #0]
 8015ea0:	601a      	str	r2, [r3, #0]
 8015ea2:	9b01      	ldr	r3, [sp, #4]
 8015ea4:	2b0e      	cmp	r3, #14
 8015ea6:	f200 80ad 	bhi.w	8016004 <_dtoa_r+0x484>
 8015eaa:	2d00      	cmp	r5, #0
 8015eac:	f000 80aa 	beq.w	8016004 <_dtoa_r+0x484>
 8015eb0:	f1ba 0f00 	cmp.w	sl, #0
 8015eb4:	dd36      	ble.n	8015f24 <_dtoa_r+0x3a4>
 8015eb6:	4ac3      	ldr	r2, [pc, #780]	; (80161c4 <_dtoa_r+0x644>)
 8015eb8:	f00a 030f 	and.w	r3, sl, #15
 8015ebc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015ec0:	ed93 7b00 	vldr	d7, [r3]
 8015ec4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8015ec8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8015ecc:	eeb0 8a47 	vmov.f32	s16, s14
 8015ed0:	eef0 8a67 	vmov.f32	s17, s15
 8015ed4:	d016      	beq.n	8015f04 <_dtoa_r+0x384>
 8015ed6:	4bbc      	ldr	r3, [pc, #752]	; (80161c8 <_dtoa_r+0x648>)
 8015ed8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015edc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015ee0:	f7ea fcd4 	bl	800088c <__aeabi_ddiv>
 8015ee4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015ee8:	f007 070f 	and.w	r7, r7, #15
 8015eec:	2503      	movs	r5, #3
 8015eee:	4eb6      	ldr	r6, [pc, #728]	; (80161c8 <_dtoa_r+0x648>)
 8015ef0:	b957      	cbnz	r7, 8015f08 <_dtoa_r+0x388>
 8015ef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015ef6:	ec53 2b18 	vmov	r2, r3, d8
 8015efa:	f7ea fcc7 	bl	800088c <__aeabi_ddiv>
 8015efe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015f02:	e029      	b.n	8015f58 <_dtoa_r+0x3d8>
 8015f04:	2502      	movs	r5, #2
 8015f06:	e7f2      	b.n	8015eee <_dtoa_r+0x36e>
 8015f08:	07f9      	lsls	r1, r7, #31
 8015f0a:	d508      	bpl.n	8015f1e <_dtoa_r+0x39e>
 8015f0c:	ec51 0b18 	vmov	r0, r1, d8
 8015f10:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015f14:	f7ea fb90 	bl	8000638 <__aeabi_dmul>
 8015f18:	ec41 0b18 	vmov	d8, r0, r1
 8015f1c:	3501      	adds	r5, #1
 8015f1e:	107f      	asrs	r7, r7, #1
 8015f20:	3608      	adds	r6, #8
 8015f22:	e7e5      	b.n	8015ef0 <_dtoa_r+0x370>
 8015f24:	f000 80a6 	beq.w	8016074 <_dtoa_r+0x4f4>
 8015f28:	f1ca 0600 	rsb	r6, sl, #0
 8015f2c:	4ba5      	ldr	r3, [pc, #660]	; (80161c4 <_dtoa_r+0x644>)
 8015f2e:	4fa6      	ldr	r7, [pc, #664]	; (80161c8 <_dtoa_r+0x648>)
 8015f30:	f006 020f 	and.w	r2, r6, #15
 8015f34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015f40:	f7ea fb7a 	bl	8000638 <__aeabi_dmul>
 8015f44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015f48:	1136      	asrs	r6, r6, #4
 8015f4a:	2300      	movs	r3, #0
 8015f4c:	2502      	movs	r5, #2
 8015f4e:	2e00      	cmp	r6, #0
 8015f50:	f040 8085 	bne.w	801605e <_dtoa_r+0x4de>
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d1d2      	bne.n	8015efe <_dtoa_r+0x37e>
 8015f58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	f000 808c 	beq.w	8016078 <_dtoa_r+0x4f8>
 8015f60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8015f64:	4b99      	ldr	r3, [pc, #612]	; (80161cc <_dtoa_r+0x64c>)
 8015f66:	2200      	movs	r2, #0
 8015f68:	4630      	mov	r0, r6
 8015f6a:	4639      	mov	r1, r7
 8015f6c:	f7ea fdd6 	bl	8000b1c <__aeabi_dcmplt>
 8015f70:	2800      	cmp	r0, #0
 8015f72:	f000 8081 	beq.w	8016078 <_dtoa_r+0x4f8>
 8015f76:	9b01      	ldr	r3, [sp, #4]
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d07d      	beq.n	8016078 <_dtoa_r+0x4f8>
 8015f7c:	f1b9 0f00 	cmp.w	r9, #0
 8015f80:	dd3c      	ble.n	8015ffc <_dtoa_r+0x47c>
 8015f82:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015f86:	9307      	str	r3, [sp, #28]
 8015f88:	2200      	movs	r2, #0
 8015f8a:	4b91      	ldr	r3, [pc, #580]	; (80161d0 <_dtoa_r+0x650>)
 8015f8c:	4630      	mov	r0, r6
 8015f8e:	4639      	mov	r1, r7
 8015f90:	f7ea fb52 	bl	8000638 <__aeabi_dmul>
 8015f94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015f98:	3501      	adds	r5, #1
 8015f9a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8015f9e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8015fa2:	4628      	mov	r0, r5
 8015fa4:	f7ea fade 	bl	8000564 <__aeabi_i2d>
 8015fa8:	4632      	mov	r2, r6
 8015faa:	463b      	mov	r3, r7
 8015fac:	f7ea fb44 	bl	8000638 <__aeabi_dmul>
 8015fb0:	4b88      	ldr	r3, [pc, #544]	; (80161d4 <_dtoa_r+0x654>)
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	f7ea f98a 	bl	80002cc <__adddf3>
 8015fb8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8015fbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015fc0:	9303      	str	r3, [sp, #12]
 8015fc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d15c      	bne.n	8016082 <_dtoa_r+0x502>
 8015fc8:	4b83      	ldr	r3, [pc, #524]	; (80161d8 <_dtoa_r+0x658>)
 8015fca:	2200      	movs	r2, #0
 8015fcc:	4630      	mov	r0, r6
 8015fce:	4639      	mov	r1, r7
 8015fd0:	f7ea f97a 	bl	80002c8 <__aeabi_dsub>
 8015fd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015fd8:	4606      	mov	r6, r0
 8015fda:	460f      	mov	r7, r1
 8015fdc:	f7ea fdbc 	bl	8000b58 <__aeabi_dcmpgt>
 8015fe0:	2800      	cmp	r0, #0
 8015fe2:	f040 8296 	bne.w	8016512 <_dtoa_r+0x992>
 8015fe6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8015fea:	4630      	mov	r0, r6
 8015fec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015ff0:	4639      	mov	r1, r7
 8015ff2:	f7ea fd93 	bl	8000b1c <__aeabi_dcmplt>
 8015ff6:	2800      	cmp	r0, #0
 8015ff8:	f040 8288 	bne.w	801650c <_dtoa_r+0x98c>
 8015ffc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016000:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016004:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016006:	2b00      	cmp	r3, #0
 8016008:	f2c0 8158 	blt.w	80162bc <_dtoa_r+0x73c>
 801600c:	f1ba 0f0e 	cmp.w	sl, #14
 8016010:	f300 8154 	bgt.w	80162bc <_dtoa_r+0x73c>
 8016014:	4b6b      	ldr	r3, [pc, #428]	; (80161c4 <_dtoa_r+0x644>)
 8016016:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801601a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801601e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016020:	2b00      	cmp	r3, #0
 8016022:	f280 80e3 	bge.w	80161ec <_dtoa_r+0x66c>
 8016026:	9b01      	ldr	r3, [sp, #4]
 8016028:	2b00      	cmp	r3, #0
 801602a:	f300 80df 	bgt.w	80161ec <_dtoa_r+0x66c>
 801602e:	f040 826d 	bne.w	801650c <_dtoa_r+0x98c>
 8016032:	4b69      	ldr	r3, [pc, #420]	; (80161d8 <_dtoa_r+0x658>)
 8016034:	2200      	movs	r2, #0
 8016036:	4640      	mov	r0, r8
 8016038:	4649      	mov	r1, r9
 801603a:	f7ea fafd 	bl	8000638 <__aeabi_dmul>
 801603e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016042:	f7ea fd7f 	bl	8000b44 <__aeabi_dcmpge>
 8016046:	9e01      	ldr	r6, [sp, #4]
 8016048:	4637      	mov	r7, r6
 801604a:	2800      	cmp	r0, #0
 801604c:	f040 8243 	bne.w	80164d6 <_dtoa_r+0x956>
 8016050:	9d00      	ldr	r5, [sp, #0]
 8016052:	2331      	movs	r3, #49	; 0x31
 8016054:	f805 3b01 	strb.w	r3, [r5], #1
 8016058:	f10a 0a01 	add.w	sl, sl, #1
 801605c:	e23f      	b.n	80164de <_dtoa_r+0x95e>
 801605e:	07f2      	lsls	r2, r6, #31
 8016060:	d505      	bpl.n	801606e <_dtoa_r+0x4ee>
 8016062:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016066:	f7ea fae7 	bl	8000638 <__aeabi_dmul>
 801606a:	3501      	adds	r5, #1
 801606c:	2301      	movs	r3, #1
 801606e:	1076      	asrs	r6, r6, #1
 8016070:	3708      	adds	r7, #8
 8016072:	e76c      	b.n	8015f4e <_dtoa_r+0x3ce>
 8016074:	2502      	movs	r5, #2
 8016076:	e76f      	b.n	8015f58 <_dtoa_r+0x3d8>
 8016078:	9b01      	ldr	r3, [sp, #4]
 801607a:	f8cd a01c 	str.w	sl, [sp, #28]
 801607e:	930c      	str	r3, [sp, #48]	; 0x30
 8016080:	e78d      	b.n	8015f9e <_dtoa_r+0x41e>
 8016082:	9900      	ldr	r1, [sp, #0]
 8016084:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016086:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016088:	4b4e      	ldr	r3, [pc, #312]	; (80161c4 <_dtoa_r+0x644>)
 801608a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801608e:	4401      	add	r1, r0
 8016090:	9102      	str	r1, [sp, #8]
 8016092:	9908      	ldr	r1, [sp, #32]
 8016094:	eeb0 8a47 	vmov.f32	s16, s14
 8016098:	eef0 8a67 	vmov.f32	s17, s15
 801609c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80160a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80160a4:	2900      	cmp	r1, #0
 80160a6:	d045      	beq.n	8016134 <_dtoa_r+0x5b4>
 80160a8:	494c      	ldr	r1, [pc, #304]	; (80161dc <_dtoa_r+0x65c>)
 80160aa:	2000      	movs	r0, #0
 80160ac:	f7ea fbee 	bl	800088c <__aeabi_ddiv>
 80160b0:	ec53 2b18 	vmov	r2, r3, d8
 80160b4:	f7ea f908 	bl	80002c8 <__aeabi_dsub>
 80160b8:	9d00      	ldr	r5, [sp, #0]
 80160ba:	ec41 0b18 	vmov	d8, r0, r1
 80160be:	4639      	mov	r1, r7
 80160c0:	4630      	mov	r0, r6
 80160c2:	f7ea fd69 	bl	8000b98 <__aeabi_d2iz>
 80160c6:	900c      	str	r0, [sp, #48]	; 0x30
 80160c8:	f7ea fa4c 	bl	8000564 <__aeabi_i2d>
 80160cc:	4602      	mov	r2, r0
 80160ce:	460b      	mov	r3, r1
 80160d0:	4630      	mov	r0, r6
 80160d2:	4639      	mov	r1, r7
 80160d4:	f7ea f8f8 	bl	80002c8 <__aeabi_dsub>
 80160d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80160da:	3330      	adds	r3, #48	; 0x30
 80160dc:	f805 3b01 	strb.w	r3, [r5], #1
 80160e0:	ec53 2b18 	vmov	r2, r3, d8
 80160e4:	4606      	mov	r6, r0
 80160e6:	460f      	mov	r7, r1
 80160e8:	f7ea fd18 	bl	8000b1c <__aeabi_dcmplt>
 80160ec:	2800      	cmp	r0, #0
 80160ee:	d165      	bne.n	80161bc <_dtoa_r+0x63c>
 80160f0:	4632      	mov	r2, r6
 80160f2:	463b      	mov	r3, r7
 80160f4:	4935      	ldr	r1, [pc, #212]	; (80161cc <_dtoa_r+0x64c>)
 80160f6:	2000      	movs	r0, #0
 80160f8:	f7ea f8e6 	bl	80002c8 <__aeabi_dsub>
 80160fc:	ec53 2b18 	vmov	r2, r3, d8
 8016100:	f7ea fd0c 	bl	8000b1c <__aeabi_dcmplt>
 8016104:	2800      	cmp	r0, #0
 8016106:	f040 80b9 	bne.w	801627c <_dtoa_r+0x6fc>
 801610a:	9b02      	ldr	r3, [sp, #8]
 801610c:	429d      	cmp	r5, r3
 801610e:	f43f af75 	beq.w	8015ffc <_dtoa_r+0x47c>
 8016112:	4b2f      	ldr	r3, [pc, #188]	; (80161d0 <_dtoa_r+0x650>)
 8016114:	ec51 0b18 	vmov	r0, r1, d8
 8016118:	2200      	movs	r2, #0
 801611a:	f7ea fa8d 	bl	8000638 <__aeabi_dmul>
 801611e:	4b2c      	ldr	r3, [pc, #176]	; (80161d0 <_dtoa_r+0x650>)
 8016120:	ec41 0b18 	vmov	d8, r0, r1
 8016124:	2200      	movs	r2, #0
 8016126:	4630      	mov	r0, r6
 8016128:	4639      	mov	r1, r7
 801612a:	f7ea fa85 	bl	8000638 <__aeabi_dmul>
 801612e:	4606      	mov	r6, r0
 8016130:	460f      	mov	r7, r1
 8016132:	e7c4      	b.n	80160be <_dtoa_r+0x53e>
 8016134:	ec51 0b17 	vmov	r0, r1, d7
 8016138:	f7ea fa7e 	bl	8000638 <__aeabi_dmul>
 801613c:	9b02      	ldr	r3, [sp, #8]
 801613e:	9d00      	ldr	r5, [sp, #0]
 8016140:	930c      	str	r3, [sp, #48]	; 0x30
 8016142:	ec41 0b18 	vmov	d8, r0, r1
 8016146:	4639      	mov	r1, r7
 8016148:	4630      	mov	r0, r6
 801614a:	f7ea fd25 	bl	8000b98 <__aeabi_d2iz>
 801614e:	9011      	str	r0, [sp, #68]	; 0x44
 8016150:	f7ea fa08 	bl	8000564 <__aeabi_i2d>
 8016154:	4602      	mov	r2, r0
 8016156:	460b      	mov	r3, r1
 8016158:	4630      	mov	r0, r6
 801615a:	4639      	mov	r1, r7
 801615c:	f7ea f8b4 	bl	80002c8 <__aeabi_dsub>
 8016160:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016162:	3330      	adds	r3, #48	; 0x30
 8016164:	f805 3b01 	strb.w	r3, [r5], #1
 8016168:	9b02      	ldr	r3, [sp, #8]
 801616a:	429d      	cmp	r5, r3
 801616c:	4606      	mov	r6, r0
 801616e:	460f      	mov	r7, r1
 8016170:	f04f 0200 	mov.w	r2, #0
 8016174:	d134      	bne.n	80161e0 <_dtoa_r+0x660>
 8016176:	4b19      	ldr	r3, [pc, #100]	; (80161dc <_dtoa_r+0x65c>)
 8016178:	ec51 0b18 	vmov	r0, r1, d8
 801617c:	f7ea f8a6 	bl	80002cc <__adddf3>
 8016180:	4602      	mov	r2, r0
 8016182:	460b      	mov	r3, r1
 8016184:	4630      	mov	r0, r6
 8016186:	4639      	mov	r1, r7
 8016188:	f7ea fce6 	bl	8000b58 <__aeabi_dcmpgt>
 801618c:	2800      	cmp	r0, #0
 801618e:	d175      	bne.n	801627c <_dtoa_r+0x6fc>
 8016190:	ec53 2b18 	vmov	r2, r3, d8
 8016194:	4911      	ldr	r1, [pc, #68]	; (80161dc <_dtoa_r+0x65c>)
 8016196:	2000      	movs	r0, #0
 8016198:	f7ea f896 	bl	80002c8 <__aeabi_dsub>
 801619c:	4602      	mov	r2, r0
 801619e:	460b      	mov	r3, r1
 80161a0:	4630      	mov	r0, r6
 80161a2:	4639      	mov	r1, r7
 80161a4:	f7ea fcba 	bl	8000b1c <__aeabi_dcmplt>
 80161a8:	2800      	cmp	r0, #0
 80161aa:	f43f af27 	beq.w	8015ffc <_dtoa_r+0x47c>
 80161ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80161b0:	1e6b      	subs	r3, r5, #1
 80161b2:	930c      	str	r3, [sp, #48]	; 0x30
 80161b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80161b8:	2b30      	cmp	r3, #48	; 0x30
 80161ba:	d0f8      	beq.n	80161ae <_dtoa_r+0x62e>
 80161bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80161c0:	e04a      	b.n	8016258 <_dtoa_r+0x6d8>
 80161c2:	bf00      	nop
 80161c4:	0801aed8 	.word	0x0801aed8
 80161c8:	0801aeb0 	.word	0x0801aeb0
 80161cc:	3ff00000 	.word	0x3ff00000
 80161d0:	40240000 	.word	0x40240000
 80161d4:	401c0000 	.word	0x401c0000
 80161d8:	40140000 	.word	0x40140000
 80161dc:	3fe00000 	.word	0x3fe00000
 80161e0:	4baf      	ldr	r3, [pc, #700]	; (80164a0 <_dtoa_r+0x920>)
 80161e2:	f7ea fa29 	bl	8000638 <__aeabi_dmul>
 80161e6:	4606      	mov	r6, r0
 80161e8:	460f      	mov	r7, r1
 80161ea:	e7ac      	b.n	8016146 <_dtoa_r+0x5c6>
 80161ec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80161f0:	9d00      	ldr	r5, [sp, #0]
 80161f2:	4642      	mov	r2, r8
 80161f4:	464b      	mov	r3, r9
 80161f6:	4630      	mov	r0, r6
 80161f8:	4639      	mov	r1, r7
 80161fa:	f7ea fb47 	bl	800088c <__aeabi_ddiv>
 80161fe:	f7ea fccb 	bl	8000b98 <__aeabi_d2iz>
 8016202:	9002      	str	r0, [sp, #8]
 8016204:	f7ea f9ae 	bl	8000564 <__aeabi_i2d>
 8016208:	4642      	mov	r2, r8
 801620a:	464b      	mov	r3, r9
 801620c:	f7ea fa14 	bl	8000638 <__aeabi_dmul>
 8016210:	4602      	mov	r2, r0
 8016212:	460b      	mov	r3, r1
 8016214:	4630      	mov	r0, r6
 8016216:	4639      	mov	r1, r7
 8016218:	f7ea f856 	bl	80002c8 <__aeabi_dsub>
 801621c:	9e02      	ldr	r6, [sp, #8]
 801621e:	9f01      	ldr	r7, [sp, #4]
 8016220:	3630      	adds	r6, #48	; 0x30
 8016222:	f805 6b01 	strb.w	r6, [r5], #1
 8016226:	9e00      	ldr	r6, [sp, #0]
 8016228:	1bae      	subs	r6, r5, r6
 801622a:	42b7      	cmp	r7, r6
 801622c:	4602      	mov	r2, r0
 801622e:	460b      	mov	r3, r1
 8016230:	d137      	bne.n	80162a2 <_dtoa_r+0x722>
 8016232:	f7ea f84b 	bl	80002cc <__adddf3>
 8016236:	4642      	mov	r2, r8
 8016238:	464b      	mov	r3, r9
 801623a:	4606      	mov	r6, r0
 801623c:	460f      	mov	r7, r1
 801623e:	f7ea fc8b 	bl	8000b58 <__aeabi_dcmpgt>
 8016242:	b9c8      	cbnz	r0, 8016278 <_dtoa_r+0x6f8>
 8016244:	4642      	mov	r2, r8
 8016246:	464b      	mov	r3, r9
 8016248:	4630      	mov	r0, r6
 801624a:	4639      	mov	r1, r7
 801624c:	f7ea fc5c 	bl	8000b08 <__aeabi_dcmpeq>
 8016250:	b110      	cbz	r0, 8016258 <_dtoa_r+0x6d8>
 8016252:	9b02      	ldr	r3, [sp, #8]
 8016254:	07d9      	lsls	r1, r3, #31
 8016256:	d40f      	bmi.n	8016278 <_dtoa_r+0x6f8>
 8016258:	4620      	mov	r0, r4
 801625a:	4659      	mov	r1, fp
 801625c:	f001 f88e 	bl	801737c <_Bfree>
 8016260:	2300      	movs	r3, #0
 8016262:	702b      	strb	r3, [r5, #0]
 8016264:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016266:	f10a 0001 	add.w	r0, sl, #1
 801626a:	6018      	str	r0, [r3, #0]
 801626c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801626e:	2b00      	cmp	r3, #0
 8016270:	f43f acd8 	beq.w	8015c24 <_dtoa_r+0xa4>
 8016274:	601d      	str	r5, [r3, #0]
 8016276:	e4d5      	b.n	8015c24 <_dtoa_r+0xa4>
 8016278:	f8cd a01c 	str.w	sl, [sp, #28]
 801627c:	462b      	mov	r3, r5
 801627e:	461d      	mov	r5, r3
 8016280:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016284:	2a39      	cmp	r2, #57	; 0x39
 8016286:	d108      	bne.n	801629a <_dtoa_r+0x71a>
 8016288:	9a00      	ldr	r2, [sp, #0]
 801628a:	429a      	cmp	r2, r3
 801628c:	d1f7      	bne.n	801627e <_dtoa_r+0x6fe>
 801628e:	9a07      	ldr	r2, [sp, #28]
 8016290:	9900      	ldr	r1, [sp, #0]
 8016292:	3201      	adds	r2, #1
 8016294:	9207      	str	r2, [sp, #28]
 8016296:	2230      	movs	r2, #48	; 0x30
 8016298:	700a      	strb	r2, [r1, #0]
 801629a:	781a      	ldrb	r2, [r3, #0]
 801629c:	3201      	adds	r2, #1
 801629e:	701a      	strb	r2, [r3, #0]
 80162a0:	e78c      	b.n	80161bc <_dtoa_r+0x63c>
 80162a2:	4b7f      	ldr	r3, [pc, #508]	; (80164a0 <_dtoa_r+0x920>)
 80162a4:	2200      	movs	r2, #0
 80162a6:	f7ea f9c7 	bl	8000638 <__aeabi_dmul>
 80162aa:	2200      	movs	r2, #0
 80162ac:	2300      	movs	r3, #0
 80162ae:	4606      	mov	r6, r0
 80162b0:	460f      	mov	r7, r1
 80162b2:	f7ea fc29 	bl	8000b08 <__aeabi_dcmpeq>
 80162b6:	2800      	cmp	r0, #0
 80162b8:	d09b      	beq.n	80161f2 <_dtoa_r+0x672>
 80162ba:	e7cd      	b.n	8016258 <_dtoa_r+0x6d8>
 80162bc:	9a08      	ldr	r2, [sp, #32]
 80162be:	2a00      	cmp	r2, #0
 80162c0:	f000 80c4 	beq.w	801644c <_dtoa_r+0x8cc>
 80162c4:	9a05      	ldr	r2, [sp, #20]
 80162c6:	2a01      	cmp	r2, #1
 80162c8:	f300 80a8 	bgt.w	801641c <_dtoa_r+0x89c>
 80162cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80162ce:	2a00      	cmp	r2, #0
 80162d0:	f000 80a0 	beq.w	8016414 <_dtoa_r+0x894>
 80162d4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80162d8:	9e06      	ldr	r6, [sp, #24]
 80162da:	4645      	mov	r5, r8
 80162dc:	9a04      	ldr	r2, [sp, #16]
 80162de:	2101      	movs	r1, #1
 80162e0:	441a      	add	r2, r3
 80162e2:	4620      	mov	r0, r4
 80162e4:	4498      	add	r8, r3
 80162e6:	9204      	str	r2, [sp, #16]
 80162e8:	f001 f94e 	bl	8017588 <__i2b>
 80162ec:	4607      	mov	r7, r0
 80162ee:	2d00      	cmp	r5, #0
 80162f0:	dd0b      	ble.n	801630a <_dtoa_r+0x78a>
 80162f2:	9b04      	ldr	r3, [sp, #16]
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	dd08      	ble.n	801630a <_dtoa_r+0x78a>
 80162f8:	42ab      	cmp	r3, r5
 80162fa:	9a04      	ldr	r2, [sp, #16]
 80162fc:	bfa8      	it	ge
 80162fe:	462b      	movge	r3, r5
 8016300:	eba8 0803 	sub.w	r8, r8, r3
 8016304:	1aed      	subs	r5, r5, r3
 8016306:	1ad3      	subs	r3, r2, r3
 8016308:	9304      	str	r3, [sp, #16]
 801630a:	9b06      	ldr	r3, [sp, #24]
 801630c:	b1fb      	cbz	r3, 801634e <_dtoa_r+0x7ce>
 801630e:	9b08      	ldr	r3, [sp, #32]
 8016310:	2b00      	cmp	r3, #0
 8016312:	f000 809f 	beq.w	8016454 <_dtoa_r+0x8d4>
 8016316:	2e00      	cmp	r6, #0
 8016318:	dd11      	ble.n	801633e <_dtoa_r+0x7be>
 801631a:	4639      	mov	r1, r7
 801631c:	4632      	mov	r2, r6
 801631e:	4620      	mov	r0, r4
 8016320:	f001 f9ee 	bl	8017700 <__pow5mult>
 8016324:	465a      	mov	r2, fp
 8016326:	4601      	mov	r1, r0
 8016328:	4607      	mov	r7, r0
 801632a:	4620      	mov	r0, r4
 801632c:	f001 f942 	bl	80175b4 <__multiply>
 8016330:	4659      	mov	r1, fp
 8016332:	9007      	str	r0, [sp, #28]
 8016334:	4620      	mov	r0, r4
 8016336:	f001 f821 	bl	801737c <_Bfree>
 801633a:	9b07      	ldr	r3, [sp, #28]
 801633c:	469b      	mov	fp, r3
 801633e:	9b06      	ldr	r3, [sp, #24]
 8016340:	1b9a      	subs	r2, r3, r6
 8016342:	d004      	beq.n	801634e <_dtoa_r+0x7ce>
 8016344:	4659      	mov	r1, fp
 8016346:	4620      	mov	r0, r4
 8016348:	f001 f9da 	bl	8017700 <__pow5mult>
 801634c:	4683      	mov	fp, r0
 801634e:	2101      	movs	r1, #1
 8016350:	4620      	mov	r0, r4
 8016352:	f001 f919 	bl	8017588 <__i2b>
 8016356:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016358:	2b00      	cmp	r3, #0
 801635a:	4606      	mov	r6, r0
 801635c:	dd7c      	ble.n	8016458 <_dtoa_r+0x8d8>
 801635e:	461a      	mov	r2, r3
 8016360:	4601      	mov	r1, r0
 8016362:	4620      	mov	r0, r4
 8016364:	f001 f9cc 	bl	8017700 <__pow5mult>
 8016368:	9b05      	ldr	r3, [sp, #20]
 801636a:	2b01      	cmp	r3, #1
 801636c:	4606      	mov	r6, r0
 801636e:	dd76      	ble.n	801645e <_dtoa_r+0x8de>
 8016370:	2300      	movs	r3, #0
 8016372:	9306      	str	r3, [sp, #24]
 8016374:	6933      	ldr	r3, [r6, #16]
 8016376:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801637a:	6918      	ldr	r0, [r3, #16]
 801637c:	f001 f8b4 	bl	80174e8 <__hi0bits>
 8016380:	f1c0 0020 	rsb	r0, r0, #32
 8016384:	9b04      	ldr	r3, [sp, #16]
 8016386:	4418      	add	r0, r3
 8016388:	f010 001f 	ands.w	r0, r0, #31
 801638c:	f000 8086 	beq.w	801649c <_dtoa_r+0x91c>
 8016390:	f1c0 0320 	rsb	r3, r0, #32
 8016394:	2b04      	cmp	r3, #4
 8016396:	dd7f      	ble.n	8016498 <_dtoa_r+0x918>
 8016398:	f1c0 001c 	rsb	r0, r0, #28
 801639c:	9b04      	ldr	r3, [sp, #16]
 801639e:	4403      	add	r3, r0
 80163a0:	4480      	add	r8, r0
 80163a2:	4405      	add	r5, r0
 80163a4:	9304      	str	r3, [sp, #16]
 80163a6:	f1b8 0f00 	cmp.w	r8, #0
 80163aa:	dd05      	ble.n	80163b8 <_dtoa_r+0x838>
 80163ac:	4659      	mov	r1, fp
 80163ae:	4642      	mov	r2, r8
 80163b0:	4620      	mov	r0, r4
 80163b2:	f001 f9ff 	bl	80177b4 <__lshift>
 80163b6:	4683      	mov	fp, r0
 80163b8:	9b04      	ldr	r3, [sp, #16]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	dd05      	ble.n	80163ca <_dtoa_r+0x84a>
 80163be:	4631      	mov	r1, r6
 80163c0:	461a      	mov	r2, r3
 80163c2:	4620      	mov	r0, r4
 80163c4:	f001 f9f6 	bl	80177b4 <__lshift>
 80163c8:	4606      	mov	r6, r0
 80163ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d069      	beq.n	80164a4 <_dtoa_r+0x924>
 80163d0:	4631      	mov	r1, r6
 80163d2:	4658      	mov	r0, fp
 80163d4:	f001 fa5a 	bl	801788c <__mcmp>
 80163d8:	2800      	cmp	r0, #0
 80163da:	da63      	bge.n	80164a4 <_dtoa_r+0x924>
 80163dc:	2300      	movs	r3, #0
 80163de:	4659      	mov	r1, fp
 80163e0:	220a      	movs	r2, #10
 80163e2:	4620      	mov	r0, r4
 80163e4:	f000 ffec 	bl	80173c0 <__multadd>
 80163e8:	9b08      	ldr	r3, [sp, #32]
 80163ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80163ee:	4683      	mov	fp, r0
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	f000 818f 	beq.w	8016714 <_dtoa_r+0xb94>
 80163f6:	4639      	mov	r1, r7
 80163f8:	2300      	movs	r3, #0
 80163fa:	220a      	movs	r2, #10
 80163fc:	4620      	mov	r0, r4
 80163fe:	f000 ffdf 	bl	80173c0 <__multadd>
 8016402:	f1b9 0f00 	cmp.w	r9, #0
 8016406:	4607      	mov	r7, r0
 8016408:	f300 808e 	bgt.w	8016528 <_dtoa_r+0x9a8>
 801640c:	9b05      	ldr	r3, [sp, #20]
 801640e:	2b02      	cmp	r3, #2
 8016410:	dc50      	bgt.n	80164b4 <_dtoa_r+0x934>
 8016412:	e089      	b.n	8016528 <_dtoa_r+0x9a8>
 8016414:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016416:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801641a:	e75d      	b.n	80162d8 <_dtoa_r+0x758>
 801641c:	9b01      	ldr	r3, [sp, #4]
 801641e:	1e5e      	subs	r6, r3, #1
 8016420:	9b06      	ldr	r3, [sp, #24]
 8016422:	42b3      	cmp	r3, r6
 8016424:	bfbf      	itttt	lt
 8016426:	9b06      	ldrlt	r3, [sp, #24]
 8016428:	9606      	strlt	r6, [sp, #24]
 801642a:	1af2      	sublt	r2, r6, r3
 801642c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801642e:	bfb6      	itet	lt
 8016430:	189b      	addlt	r3, r3, r2
 8016432:	1b9e      	subge	r6, r3, r6
 8016434:	930d      	strlt	r3, [sp, #52]	; 0x34
 8016436:	9b01      	ldr	r3, [sp, #4]
 8016438:	bfb8      	it	lt
 801643a:	2600      	movlt	r6, #0
 801643c:	2b00      	cmp	r3, #0
 801643e:	bfb5      	itete	lt
 8016440:	eba8 0503 	sublt.w	r5, r8, r3
 8016444:	9b01      	ldrge	r3, [sp, #4]
 8016446:	2300      	movlt	r3, #0
 8016448:	4645      	movge	r5, r8
 801644a:	e747      	b.n	80162dc <_dtoa_r+0x75c>
 801644c:	9e06      	ldr	r6, [sp, #24]
 801644e:	9f08      	ldr	r7, [sp, #32]
 8016450:	4645      	mov	r5, r8
 8016452:	e74c      	b.n	80162ee <_dtoa_r+0x76e>
 8016454:	9a06      	ldr	r2, [sp, #24]
 8016456:	e775      	b.n	8016344 <_dtoa_r+0x7c4>
 8016458:	9b05      	ldr	r3, [sp, #20]
 801645a:	2b01      	cmp	r3, #1
 801645c:	dc18      	bgt.n	8016490 <_dtoa_r+0x910>
 801645e:	9b02      	ldr	r3, [sp, #8]
 8016460:	b9b3      	cbnz	r3, 8016490 <_dtoa_r+0x910>
 8016462:	9b03      	ldr	r3, [sp, #12]
 8016464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016468:	b9a3      	cbnz	r3, 8016494 <_dtoa_r+0x914>
 801646a:	9b03      	ldr	r3, [sp, #12]
 801646c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016470:	0d1b      	lsrs	r3, r3, #20
 8016472:	051b      	lsls	r3, r3, #20
 8016474:	b12b      	cbz	r3, 8016482 <_dtoa_r+0x902>
 8016476:	9b04      	ldr	r3, [sp, #16]
 8016478:	3301      	adds	r3, #1
 801647a:	9304      	str	r3, [sp, #16]
 801647c:	f108 0801 	add.w	r8, r8, #1
 8016480:	2301      	movs	r3, #1
 8016482:	9306      	str	r3, [sp, #24]
 8016484:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016486:	2b00      	cmp	r3, #0
 8016488:	f47f af74 	bne.w	8016374 <_dtoa_r+0x7f4>
 801648c:	2001      	movs	r0, #1
 801648e:	e779      	b.n	8016384 <_dtoa_r+0x804>
 8016490:	2300      	movs	r3, #0
 8016492:	e7f6      	b.n	8016482 <_dtoa_r+0x902>
 8016494:	9b02      	ldr	r3, [sp, #8]
 8016496:	e7f4      	b.n	8016482 <_dtoa_r+0x902>
 8016498:	d085      	beq.n	80163a6 <_dtoa_r+0x826>
 801649a:	4618      	mov	r0, r3
 801649c:	301c      	adds	r0, #28
 801649e:	e77d      	b.n	801639c <_dtoa_r+0x81c>
 80164a0:	40240000 	.word	0x40240000
 80164a4:	9b01      	ldr	r3, [sp, #4]
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	dc38      	bgt.n	801651c <_dtoa_r+0x99c>
 80164aa:	9b05      	ldr	r3, [sp, #20]
 80164ac:	2b02      	cmp	r3, #2
 80164ae:	dd35      	ble.n	801651c <_dtoa_r+0x99c>
 80164b0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80164b4:	f1b9 0f00 	cmp.w	r9, #0
 80164b8:	d10d      	bne.n	80164d6 <_dtoa_r+0x956>
 80164ba:	4631      	mov	r1, r6
 80164bc:	464b      	mov	r3, r9
 80164be:	2205      	movs	r2, #5
 80164c0:	4620      	mov	r0, r4
 80164c2:	f000 ff7d 	bl	80173c0 <__multadd>
 80164c6:	4601      	mov	r1, r0
 80164c8:	4606      	mov	r6, r0
 80164ca:	4658      	mov	r0, fp
 80164cc:	f001 f9de 	bl	801788c <__mcmp>
 80164d0:	2800      	cmp	r0, #0
 80164d2:	f73f adbd 	bgt.w	8016050 <_dtoa_r+0x4d0>
 80164d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164d8:	9d00      	ldr	r5, [sp, #0]
 80164da:	ea6f 0a03 	mvn.w	sl, r3
 80164de:	f04f 0800 	mov.w	r8, #0
 80164e2:	4631      	mov	r1, r6
 80164e4:	4620      	mov	r0, r4
 80164e6:	f000 ff49 	bl	801737c <_Bfree>
 80164ea:	2f00      	cmp	r7, #0
 80164ec:	f43f aeb4 	beq.w	8016258 <_dtoa_r+0x6d8>
 80164f0:	f1b8 0f00 	cmp.w	r8, #0
 80164f4:	d005      	beq.n	8016502 <_dtoa_r+0x982>
 80164f6:	45b8      	cmp	r8, r7
 80164f8:	d003      	beq.n	8016502 <_dtoa_r+0x982>
 80164fa:	4641      	mov	r1, r8
 80164fc:	4620      	mov	r0, r4
 80164fe:	f000 ff3d 	bl	801737c <_Bfree>
 8016502:	4639      	mov	r1, r7
 8016504:	4620      	mov	r0, r4
 8016506:	f000 ff39 	bl	801737c <_Bfree>
 801650a:	e6a5      	b.n	8016258 <_dtoa_r+0x6d8>
 801650c:	2600      	movs	r6, #0
 801650e:	4637      	mov	r7, r6
 8016510:	e7e1      	b.n	80164d6 <_dtoa_r+0x956>
 8016512:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8016514:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8016518:	4637      	mov	r7, r6
 801651a:	e599      	b.n	8016050 <_dtoa_r+0x4d0>
 801651c:	9b08      	ldr	r3, [sp, #32]
 801651e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8016522:	2b00      	cmp	r3, #0
 8016524:	f000 80fd 	beq.w	8016722 <_dtoa_r+0xba2>
 8016528:	2d00      	cmp	r5, #0
 801652a:	dd05      	ble.n	8016538 <_dtoa_r+0x9b8>
 801652c:	4639      	mov	r1, r7
 801652e:	462a      	mov	r2, r5
 8016530:	4620      	mov	r0, r4
 8016532:	f001 f93f 	bl	80177b4 <__lshift>
 8016536:	4607      	mov	r7, r0
 8016538:	9b06      	ldr	r3, [sp, #24]
 801653a:	2b00      	cmp	r3, #0
 801653c:	d05c      	beq.n	80165f8 <_dtoa_r+0xa78>
 801653e:	6879      	ldr	r1, [r7, #4]
 8016540:	4620      	mov	r0, r4
 8016542:	f000 fedb 	bl	80172fc <_Balloc>
 8016546:	4605      	mov	r5, r0
 8016548:	b928      	cbnz	r0, 8016556 <_dtoa_r+0x9d6>
 801654a:	4b80      	ldr	r3, [pc, #512]	; (801674c <_dtoa_r+0xbcc>)
 801654c:	4602      	mov	r2, r0
 801654e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8016552:	f7ff bb2e 	b.w	8015bb2 <_dtoa_r+0x32>
 8016556:	693a      	ldr	r2, [r7, #16]
 8016558:	3202      	adds	r2, #2
 801655a:	0092      	lsls	r2, r2, #2
 801655c:	f107 010c 	add.w	r1, r7, #12
 8016560:	300c      	adds	r0, #12
 8016562:	f7fc fbb7 	bl	8012cd4 <memcpy>
 8016566:	2201      	movs	r2, #1
 8016568:	4629      	mov	r1, r5
 801656a:	4620      	mov	r0, r4
 801656c:	f001 f922 	bl	80177b4 <__lshift>
 8016570:	9b00      	ldr	r3, [sp, #0]
 8016572:	3301      	adds	r3, #1
 8016574:	9301      	str	r3, [sp, #4]
 8016576:	9b00      	ldr	r3, [sp, #0]
 8016578:	444b      	add	r3, r9
 801657a:	9307      	str	r3, [sp, #28]
 801657c:	9b02      	ldr	r3, [sp, #8]
 801657e:	f003 0301 	and.w	r3, r3, #1
 8016582:	46b8      	mov	r8, r7
 8016584:	9306      	str	r3, [sp, #24]
 8016586:	4607      	mov	r7, r0
 8016588:	9b01      	ldr	r3, [sp, #4]
 801658a:	4631      	mov	r1, r6
 801658c:	3b01      	subs	r3, #1
 801658e:	4658      	mov	r0, fp
 8016590:	9302      	str	r3, [sp, #8]
 8016592:	f7ff fa67 	bl	8015a64 <quorem>
 8016596:	4603      	mov	r3, r0
 8016598:	3330      	adds	r3, #48	; 0x30
 801659a:	9004      	str	r0, [sp, #16]
 801659c:	4641      	mov	r1, r8
 801659e:	4658      	mov	r0, fp
 80165a0:	9308      	str	r3, [sp, #32]
 80165a2:	f001 f973 	bl	801788c <__mcmp>
 80165a6:	463a      	mov	r2, r7
 80165a8:	4681      	mov	r9, r0
 80165aa:	4631      	mov	r1, r6
 80165ac:	4620      	mov	r0, r4
 80165ae:	f001 f989 	bl	80178c4 <__mdiff>
 80165b2:	68c2      	ldr	r2, [r0, #12]
 80165b4:	9b08      	ldr	r3, [sp, #32]
 80165b6:	4605      	mov	r5, r0
 80165b8:	bb02      	cbnz	r2, 80165fc <_dtoa_r+0xa7c>
 80165ba:	4601      	mov	r1, r0
 80165bc:	4658      	mov	r0, fp
 80165be:	f001 f965 	bl	801788c <__mcmp>
 80165c2:	9b08      	ldr	r3, [sp, #32]
 80165c4:	4602      	mov	r2, r0
 80165c6:	4629      	mov	r1, r5
 80165c8:	4620      	mov	r0, r4
 80165ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80165ce:	f000 fed5 	bl	801737c <_Bfree>
 80165d2:	9b05      	ldr	r3, [sp, #20]
 80165d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80165d6:	9d01      	ldr	r5, [sp, #4]
 80165d8:	ea43 0102 	orr.w	r1, r3, r2
 80165dc:	9b06      	ldr	r3, [sp, #24]
 80165de:	430b      	orrs	r3, r1
 80165e0:	9b08      	ldr	r3, [sp, #32]
 80165e2:	d10d      	bne.n	8016600 <_dtoa_r+0xa80>
 80165e4:	2b39      	cmp	r3, #57	; 0x39
 80165e6:	d029      	beq.n	801663c <_dtoa_r+0xabc>
 80165e8:	f1b9 0f00 	cmp.w	r9, #0
 80165ec:	dd01      	ble.n	80165f2 <_dtoa_r+0xa72>
 80165ee:	9b04      	ldr	r3, [sp, #16]
 80165f0:	3331      	adds	r3, #49	; 0x31
 80165f2:	9a02      	ldr	r2, [sp, #8]
 80165f4:	7013      	strb	r3, [r2, #0]
 80165f6:	e774      	b.n	80164e2 <_dtoa_r+0x962>
 80165f8:	4638      	mov	r0, r7
 80165fa:	e7b9      	b.n	8016570 <_dtoa_r+0x9f0>
 80165fc:	2201      	movs	r2, #1
 80165fe:	e7e2      	b.n	80165c6 <_dtoa_r+0xa46>
 8016600:	f1b9 0f00 	cmp.w	r9, #0
 8016604:	db06      	blt.n	8016614 <_dtoa_r+0xa94>
 8016606:	9905      	ldr	r1, [sp, #20]
 8016608:	ea41 0909 	orr.w	r9, r1, r9
 801660c:	9906      	ldr	r1, [sp, #24]
 801660e:	ea59 0101 	orrs.w	r1, r9, r1
 8016612:	d120      	bne.n	8016656 <_dtoa_r+0xad6>
 8016614:	2a00      	cmp	r2, #0
 8016616:	ddec      	ble.n	80165f2 <_dtoa_r+0xa72>
 8016618:	4659      	mov	r1, fp
 801661a:	2201      	movs	r2, #1
 801661c:	4620      	mov	r0, r4
 801661e:	9301      	str	r3, [sp, #4]
 8016620:	f001 f8c8 	bl	80177b4 <__lshift>
 8016624:	4631      	mov	r1, r6
 8016626:	4683      	mov	fp, r0
 8016628:	f001 f930 	bl	801788c <__mcmp>
 801662c:	2800      	cmp	r0, #0
 801662e:	9b01      	ldr	r3, [sp, #4]
 8016630:	dc02      	bgt.n	8016638 <_dtoa_r+0xab8>
 8016632:	d1de      	bne.n	80165f2 <_dtoa_r+0xa72>
 8016634:	07da      	lsls	r2, r3, #31
 8016636:	d5dc      	bpl.n	80165f2 <_dtoa_r+0xa72>
 8016638:	2b39      	cmp	r3, #57	; 0x39
 801663a:	d1d8      	bne.n	80165ee <_dtoa_r+0xa6e>
 801663c:	9a02      	ldr	r2, [sp, #8]
 801663e:	2339      	movs	r3, #57	; 0x39
 8016640:	7013      	strb	r3, [r2, #0]
 8016642:	462b      	mov	r3, r5
 8016644:	461d      	mov	r5, r3
 8016646:	3b01      	subs	r3, #1
 8016648:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801664c:	2a39      	cmp	r2, #57	; 0x39
 801664e:	d050      	beq.n	80166f2 <_dtoa_r+0xb72>
 8016650:	3201      	adds	r2, #1
 8016652:	701a      	strb	r2, [r3, #0]
 8016654:	e745      	b.n	80164e2 <_dtoa_r+0x962>
 8016656:	2a00      	cmp	r2, #0
 8016658:	dd03      	ble.n	8016662 <_dtoa_r+0xae2>
 801665a:	2b39      	cmp	r3, #57	; 0x39
 801665c:	d0ee      	beq.n	801663c <_dtoa_r+0xabc>
 801665e:	3301      	adds	r3, #1
 8016660:	e7c7      	b.n	80165f2 <_dtoa_r+0xa72>
 8016662:	9a01      	ldr	r2, [sp, #4]
 8016664:	9907      	ldr	r1, [sp, #28]
 8016666:	f802 3c01 	strb.w	r3, [r2, #-1]
 801666a:	428a      	cmp	r2, r1
 801666c:	d02a      	beq.n	80166c4 <_dtoa_r+0xb44>
 801666e:	4659      	mov	r1, fp
 8016670:	2300      	movs	r3, #0
 8016672:	220a      	movs	r2, #10
 8016674:	4620      	mov	r0, r4
 8016676:	f000 fea3 	bl	80173c0 <__multadd>
 801667a:	45b8      	cmp	r8, r7
 801667c:	4683      	mov	fp, r0
 801667e:	f04f 0300 	mov.w	r3, #0
 8016682:	f04f 020a 	mov.w	r2, #10
 8016686:	4641      	mov	r1, r8
 8016688:	4620      	mov	r0, r4
 801668a:	d107      	bne.n	801669c <_dtoa_r+0xb1c>
 801668c:	f000 fe98 	bl	80173c0 <__multadd>
 8016690:	4680      	mov	r8, r0
 8016692:	4607      	mov	r7, r0
 8016694:	9b01      	ldr	r3, [sp, #4]
 8016696:	3301      	adds	r3, #1
 8016698:	9301      	str	r3, [sp, #4]
 801669a:	e775      	b.n	8016588 <_dtoa_r+0xa08>
 801669c:	f000 fe90 	bl	80173c0 <__multadd>
 80166a0:	4639      	mov	r1, r7
 80166a2:	4680      	mov	r8, r0
 80166a4:	2300      	movs	r3, #0
 80166a6:	220a      	movs	r2, #10
 80166a8:	4620      	mov	r0, r4
 80166aa:	f000 fe89 	bl	80173c0 <__multadd>
 80166ae:	4607      	mov	r7, r0
 80166b0:	e7f0      	b.n	8016694 <_dtoa_r+0xb14>
 80166b2:	f1b9 0f00 	cmp.w	r9, #0
 80166b6:	9a00      	ldr	r2, [sp, #0]
 80166b8:	bfcc      	ite	gt
 80166ba:	464d      	movgt	r5, r9
 80166bc:	2501      	movle	r5, #1
 80166be:	4415      	add	r5, r2
 80166c0:	f04f 0800 	mov.w	r8, #0
 80166c4:	4659      	mov	r1, fp
 80166c6:	2201      	movs	r2, #1
 80166c8:	4620      	mov	r0, r4
 80166ca:	9301      	str	r3, [sp, #4]
 80166cc:	f001 f872 	bl	80177b4 <__lshift>
 80166d0:	4631      	mov	r1, r6
 80166d2:	4683      	mov	fp, r0
 80166d4:	f001 f8da 	bl	801788c <__mcmp>
 80166d8:	2800      	cmp	r0, #0
 80166da:	dcb2      	bgt.n	8016642 <_dtoa_r+0xac2>
 80166dc:	d102      	bne.n	80166e4 <_dtoa_r+0xb64>
 80166de:	9b01      	ldr	r3, [sp, #4]
 80166e0:	07db      	lsls	r3, r3, #31
 80166e2:	d4ae      	bmi.n	8016642 <_dtoa_r+0xac2>
 80166e4:	462b      	mov	r3, r5
 80166e6:	461d      	mov	r5, r3
 80166e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80166ec:	2a30      	cmp	r2, #48	; 0x30
 80166ee:	d0fa      	beq.n	80166e6 <_dtoa_r+0xb66>
 80166f0:	e6f7      	b.n	80164e2 <_dtoa_r+0x962>
 80166f2:	9a00      	ldr	r2, [sp, #0]
 80166f4:	429a      	cmp	r2, r3
 80166f6:	d1a5      	bne.n	8016644 <_dtoa_r+0xac4>
 80166f8:	f10a 0a01 	add.w	sl, sl, #1
 80166fc:	2331      	movs	r3, #49	; 0x31
 80166fe:	e779      	b.n	80165f4 <_dtoa_r+0xa74>
 8016700:	4b13      	ldr	r3, [pc, #76]	; (8016750 <_dtoa_r+0xbd0>)
 8016702:	f7ff baaf 	b.w	8015c64 <_dtoa_r+0xe4>
 8016706:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016708:	2b00      	cmp	r3, #0
 801670a:	f47f aa86 	bne.w	8015c1a <_dtoa_r+0x9a>
 801670e:	4b11      	ldr	r3, [pc, #68]	; (8016754 <_dtoa_r+0xbd4>)
 8016710:	f7ff baa8 	b.w	8015c64 <_dtoa_r+0xe4>
 8016714:	f1b9 0f00 	cmp.w	r9, #0
 8016718:	dc03      	bgt.n	8016722 <_dtoa_r+0xba2>
 801671a:	9b05      	ldr	r3, [sp, #20]
 801671c:	2b02      	cmp	r3, #2
 801671e:	f73f aec9 	bgt.w	80164b4 <_dtoa_r+0x934>
 8016722:	9d00      	ldr	r5, [sp, #0]
 8016724:	4631      	mov	r1, r6
 8016726:	4658      	mov	r0, fp
 8016728:	f7ff f99c 	bl	8015a64 <quorem>
 801672c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8016730:	f805 3b01 	strb.w	r3, [r5], #1
 8016734:	9a00      	ldr	r2, [sp, #0]
 8016736:	1aaa      	subs	r2, r5, r2
 8016738:	4591      	cmp	r9, r2
 801673a:	ddba      	ble.n	80166b2 <_dtoa_r+0xb32>
 801673c:	4659      	mov	r1, fp
 801673e:	2300      	movs	r3, #0
 8016740:	220a      	movs	r2, #10
 8016742:	4620      	mov	r0, r4
 8016744:	f000 fe3c 	bl	80173c0 <__multadd>
 8016748:	4683      	mov	fp, r0
 801674a:	e7eb      	b.n	8016724 <_dtoa_r+0xba4>
 801674c:	0801adbd 	.word	0x0801adbd
 8016750:	0801afc1 	.word	0x0801afc1
 8016754:	0801ad51 	.word	0x0801ad51

08016758 <__sflush_r>:
 8016758:	898a      	ldrh	r2, [r1, #12]
 801675a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801675e:	4605      	mov	r5, r0
 8016760:	0710      	lsls	r0, r2, #28
 8016762:	460c      	mov	r4, r1
 8016764:	d458      	bmi.n	8016818 <__sflush_r+0xc0>
 8016766:	684b      	ldr	r3, [r1, #4]
 8016768:	2b00      	cmp	r3, #0
 801676a:	dc05      	bgt.n	8016778 <__sflush_r+0x20>
 801676c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801676e:	2b00      	cmp	r3, #0
 8016770:	dc02      	bgt.n	8016778 <__sflush_r+0x20>
 8016772:	2000      	movs	r0, #0
 8016774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016778:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801677a:	2e00      	cmp	r6, #0
 801677c:	d0f9      	beq.n	8016772 <__sflush_r+0x1a>
 801677e:	2300      	movs	r3, #0
 8016780:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016784:	682f      	ldr	r7, [r5, #0]
 8016786:	602b      	str	r3, [r5, #0]
 8016788:	d032      	beq.n	80167f0 <__sflush_r+0x98>
 801678a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801678c:	89a3      	ldrh	r3, [r4, #12]
 801678e:	075a      	lsls	r2, r3, #29
 8016790:	d505      	bpl.n	801679e <__sflush_r+0x46>
 8016792:	6863      	ldr	r3, [r4, #4]
 8016794:	1ac0      	subs	r0, r0, r3
 8016796:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016798:	b10b      	cbz	r3, 801679e <__sflush_r+0x46>
 801679a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801679c:	1ac0      	subs	r0, r0, r3
 801679e:	2300      	movs	r3, #0
 80167a0:	4602      	mov	r2, r0
 80167a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80167a4:	6a21      	ldr	r1, [r4, #32]
 80167a6:	4628      	mov	r0, r5
 80167a8:	47b0      	blx	r6
 80167aa:	1c43      	adds	r3, r0, #1
 80167ac:	89a3      	ldrh	r3, [r4, #12]
 80167ae:	d106      	bne.n	80167be <__sflush_r+0x66>
 80167b0:	6829      	ldr	r1, [r5, #0]
 80167b2:	291d      	cmp	r1, #29
 80167b4:	d82c      	bhi.n	8016810 <__sflush_r+0xb8>
 80167b6:	4a2a      	ldr	r2, [pc, #168]	; (8016860 <__sflush_r+0x108>)
 80167b8:	40ca      	lsrs	r2, r1
 80167ba:	07d6      	lsls	r6, r2, #31
 80167bc:	d528      	bpl.n	8016810 <__sflush_r+0xb8>
 80167be:	2200      	movs	r2, #0
 80167c0:	6062      	str	r2, [r4, #4]
 80167c2:	04d9      	lsls	r1, r3, #19
 80167c4:	6922      	ldr	r2, [r4, #16]
 80167c6:	6022      	str	r2, [r4, #0]
 80167c8:	d504      	bpl.n	80167d4 <__sflush_r+0x7c>
 80167ca:	1c42      	adds	r2, r0, #1
 80167cc:	d101      	bne.n	80167d2 <__sflush_r+0x7a>
 80167ce:	682b      	ldr	r3, [r5, #0]
 80167d0:	b903      	cbnz	r3, 80167d4 <__sflush_r+0x7c>
 80167d2:	6560      	str	r0, [r4, #84]	; 0x54
 80167d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80167d6:	602f      	str	r7, [r5, #0]
 80167d8:	2900      	cmp	r1, #0
 80167da:	d0ca      	beq.n	8016772 <__sflush_r+0x1a>
 80167dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80167e0:	4299      	cmp	r1, r3
 80167e2:	d002      	beq.n	80167ea <__sflush_r+0x92>
 80167e4:	4628      	mov	r0, r5
 80167e6:	f7fc fd23 	bl	8013230 <_free_r>
 80167ea:	2000      	movs	r0, #0
 80167ec:	6360      	str	r0, [r4, #52]	; 0x34
 80167ee:	e7c1      	b.n	8016774 <__sflush_r+0x1c>
 80167f0:	6a21      	ldr	r1, [r4, #32]
 80167f2:	2301      	movs	r3, #1
 80167f4:	4628      	mov	r0, r5
 80167f6:	47b0      	blx	r6
 80167f8:	1c41      	adds	r1, r0, #1
 80167fa:	d1c7      	bne.n	801678c <__sflush_r+0x34>
 80167fc:	682b      	ldr	r3, [r5, #0]
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d0c4      	beq.n	801678c <__sflush_r+0x34>
 8016802:	2b1d      	cmp	r3, #29
 8016804:	d001      	beq.n	801680a <__sflush_r+0xb2>
 8016806:	2b16      	cmp	r3, #22
 8016808:	d101      	bne.n	801680e <__sflush_r+0xb6>
 801680a:	602f      	str	r7, [r5, #0]
 801680c:	e7b1      	b.n	8016772 <__sflush_r+0x1a>
 801680e:	89a3      	ldrh	r3, [r4, #12]
 8016810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016814:	81a3      	strh	r3, [r4, #12]
 8016816:	e7ad      	b.n	8016774 <__sflush_r+0x1c>
 8016818:	690f      	ldr	r7, [r1, #16]
 801681a:	2f00      	cmp	r7, #0
 801681c:	d0a9      	beq.n	8016772 <__sflush_r+0x1a>
 801681e:	0793      	lsls	r3, r2, #30
 8016820:	680e      	ldr	r6, [r1, #0]
 8016822:	bf08      	it	eq
 8016824:	694b      	ldreq	r3, [r1, #20]
 8016826:	600f      	str	r7, [r1, #0]
 8016828:	bf18      	it	ne
 801682a:	2300      	movne	r3, #0
 801682c:	eba6 0807 	sub.w	r8, r6, r7
 8016830:	608b      	str	r3, [r1, #8]
 8016832:	f1b8 0f00 	cmp.w	r8, #0
 8016836:	dd9c      	ble.n	8016772 <__sflush_r+0x1a>
 8016838:	6a21      	ldr	r1, [r4, #32]
 801683a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801683c:	4643      	mov	r3, r8
 801683e:	463a      	mov	r2, r7
 8016840:	4628      	mov	r0, r5
 8016842:	47b0      	blx	r6
 8016844:	2800      	cmp	r0, #0
 8016846:	dc06      	bgt.n	8016856 <__sflush_r+0xfe>
 8016848:	89a3      	ldrh	r3, [r4, #12]
 801684a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801684e:	81a3      	strh	r3, [r4, #12]
 8016850:	f04f 30ff 	mov.w	r0, #4294967295
 8016854:	e78e      	b.n	8016774 <__sflush_r+0x1c>
 8016856:	4407      	add	r7, r0
 8016858:	eba8 0800 	sub.w	r8, r8, r0
 801685c:	e7e9      	b.n	8016832 <__sflush_r+0xda>
 801685e:	bf00      	nop
 8016860:	20400001 	.word	0x20400001

08016864 <_fflush_r>:
 8016864:	b538      	push	{r3, r4, r5, lr}
 8016866:	690b      	ldr	r3, [r1, #16]
 8016868:	4605      	mov	r5, r0
 801686a:	460c      	mov	r4, r1
 801686c:	b913      	cbnz	r3, 8016874 <_fflush_r+0x10>
 801686e:	2500      	movs	r5, #0
 8016870:	4628      	mov	r0, r5
 8016872:	bd38      	pop	{r3, r4, r5, pc}
 8016874:	b118      	cbz	r0, 801687e <_fflush_r+0x1a>
 8016876:	6983      	ldr	r3, [r0, #24]
 8016878:	b90b      	cbnz	r3, 801687e <_fflush_r+0x1a>
 801687a:	f7fc f837 	bl	80128ec <__sinit>
 801687e:	4b14      	ldr	r3, [pc, #80]	; (80168d0 <_fflush_r+0x6c>)
 8016880:	429c      	cmp	r4, r3
 8016882:	d11b      	bne.n	80168bc <_fflush_r+0x58>
 8016884:	686c      	ldr	r4, [r5, #4]
 8016886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801688a:	2b00      	cmp	r3, #0
 801688c:	d0ef      	beq.n	801686e <_fflush_r+0xa>
 801688e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016890:	07d0      	lsls	r0, r2, #31
 8016892:	d404      	bmi.n	801689e <_fflush_r+0x3a>
 8016894:	0599      	lsls	r1, r3, #22
 8016896:	d402      	bmi.n	801689e <_fflush_r+0x3a>
 8016898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801689a:	f7fc fa07 	bl	8012cac <__retarget_lock_acquire_recursive>
 801689e:	4628      	mov	r0, r5
 80168a0:	4621      	mov	r1, r4
 80168a2:	f7ff ff59 	bl	8016758 <__sflush_r>
 80168a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80168a8:	07da      	lsls	r2, r3, #31
 80168aa:	4605      	mov	r5, r0
 80168ac:	d4e0      	bmi.n	8016870 <_fflush_r+0xc>
 80168ae:	89a3      	ldrh	r3, [r4, #12]
 80168b0:	059b      	lsls	r3, r3, #22
 80168b2:	d4dd      	bmi.n	8016870 <_fflush_r+0xc>
 80168b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80168b6:	f7fc f9fb 	bl	8012cb0 <__retarget_lock_release_recursive>
 80168ba:	e7d9      	b.n	8016870 <_fflush_r+0xc>
 80168bc:	4b05      	ldr	r3, [pc, #20]	; (80168d4 <_fflush_r+0x70>)
 80168be:	429c      	cmp	r4, r3
 80168c0:	d101      	bne.n	80168c6 <_fflush_r+0x62>
 80168c2:	68ac      	ldr	r4, [r5, #8]
 80168c4:	e7df      	b.n	8016886 <_fflush_r+0x22>
 80168c6:	4b04      	ldr	r3, [pc, #16]	; (80168d8 <_fflush_r+0x74>)
 80168c8:	429c      	cmp	r4, r3
 80168ca:	bf08      	it	eq
 80168cc:	68ec      	ldreq	r4, [r5, #12]
 80168ce:	e7da      	b.n	8016886 <_fflush_r+0x22>
 80168d0:	0801aa74 	.word	0x0801aa74
 80168d4:	0801aa94 	.word	0x0801aa94
 80168d8:	0801aa54 	.word	0x0801aa54

080168dc <fiprintf>:
 80168dc:	b40e      	push	{r1, r2, r3}
 80168de:	b503      	push	{r0, r1, lr}
 80168e0:	4601      	mov	r1, r0
 80168e2:	ab03      	add	r3, sp, #12
 80168e4:	4805      	ldr	r0, [pc, #20]	; (80168fc <fiprintf+0x20>)
 80168e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80168ea:	6800      	ldr	r0, [r0, #0]
 80168ec:	9301      	str	r3, [sp, #4]
 80168ee:	f001 fd4d 	bl	801838c <_vfiprintf_r>
 80168f2:	b002      	add	sp, #8
 80168f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80168f8:	b003      	add	sp, #12
 80168fa:	4770      	bx	lr
 80168fc:	200000ac 	.word	0x200000ac

08016900 <rshift>:
 8016900:	6903      	ldr	r3, [r0, #16]
 8016902:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016906:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801690a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801690e:	f100 0414 	add.w	r4, r0, #20
 8016912:	dd45      	ble.n	80169a0 <rshift+0xa0>
 8016914:	f011 011f 	ands.w	r1, r1, #31
 8016918:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801691c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016920:	d10c      	bne.n	801693c <rshift+0x3c>
 8016922:	f100 0710 	add.w	r7, r0, #16
 8016926:	4629      	mov	r1, r5
 8016928:	42b1      	cmp	r1, r6
 801692a:	d334      	bcc.n	8016996 <rshift+0x96>
 801692c:	1a9b      	subs	r3, r3, r2
 801692e:	009b      	lsls	r3, r3, #2
 8016930:	1eea      	subs	r2, r5, #3
 8016932:	4296      	cmp	r6, r2
 8016934:	bf38      	it	cc
 8016936:	2300      	movcc	r3, #0
 8016938:	4423      	add	r3, r4
 801693a:	e015      	b.n	8016968 <rshift+0x68>
 801693c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016940:	f1c1 0820 	rsb	r8, r1, #32
 8016944:	40cf      	lsrs	r7, r1
 8016946:	f105 0e04 	add.w	lr, r5, #4
 801694a:	46a1      	mov	r9, r4
 801694c:	4576      	cmp	r6, lr
 801694e:	46f4      	mov	ip, lr
 8016950:	d815      	bhi.n	801697e <rshift+0x7e>
 8016952:	1a9b      	subs	r3, r3, r2
 8016954:	009a      	lsls	r2, r3, #2
 8016956:	3a04      	subs	r2, #4
 8016958:	3501      	adds	r5, #1
 801695a:	42ae      	cmp	r6, r5
 801695c:	bf38      	it	cc
 801695e:	2200      	movcc	r2, #0
 8016960:	18a3      	adds	r3, r4, r2
 8016962:	50a7      	str	r7, [r4, r2]
 8016964:	b107      	cbz	r7, 8016968 <rshift+0x68>
 8016966:	3304      	adds	r3, #4
 8016968:	1b1a      	subs	r2, r3, r4
 801696a:	42a3      	cmp	r3, r4
 801696c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016970:	bf08      	it	eq
 8016972:	2300      	moveq	r3, #0
 8016974:	6102      	str	r2, [r0, #16]
 8016976:	bf08      	it	eq
 8016978:	6143      	streq	r3, [r0, #20]
 801697a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801697e:	f8dc c000 	ldr.w	ip, [ip]
 8016982:	fa0c fc08 	lsl.w	ip, ip, r8
 8016986:	ea4c 0707 	orr.w	r7, ip, r7
 801698a:	f849 7b04 	str.w	r7, [r9], #4
 801698e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016992:	40cf      	lsrs	r7, r1
 8016994:	e7da      	b.n	801694c <rshift+0x4c>
 8016996:	f851 cb04 	ldr.w	ip, [r1], #4
 801699a:	f847 cf04 	str.w	ip, [r7, #4]!
 801699e:	e7c3      	b.n	8016928 <rshift+0x28>
 80169a0:	4623      	mov	r3, r4
 80169a2:	e7e1      	b.n	8016968 <rshift+0x68>

080169a4 <__hexdig_fun>:
 80169a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80169a8:	2b09      	cmp	r3, #9
 80169aa:	d802      	bhi.n	80169b2 <__hexdig_fun+0xe>
 80169ac:	3820      	subs	r0, #32
 80169ae:	b2c0      	uxtb	r0, r0
 80169b0:	4770      	bx	lr
 80169b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80169b6:	2b05      	cmp	r3, #5
 80169b8:	d801      	bhi.n	80169be <__hexdig_fun+0x1a>
 80169ba:	3847      	subs	r0, #71	; 0x47
 80169bc:	e7f7      	b.n	80169ae <__hexdig_fun+0xa>
 80169be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80169c2:	2b05      	cmp	r3, #5
 80169c4:	d801      	bhi.n	80169ca <__hexdig_fun+0x26>
 80169c6:	3827      	subs	r0, #39	; 0x27
 80169c8:	e7f1      	b.n	80169ae <__hexdig_fun+0xa>
 80169ca:	2000      	movs	r0, #0
 80169cc:	4770      	bx	lr
	...

080169d0 <__gethex>:
 80169d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169d4:	ed2d 8b02 	vpush	{d8}
 80169d8:	b089      	sub	sp, #36	; 0x24
 80169da:	ee08 0a10 	vmov	s16, r0
 80169de:	9304      	str	r3, [sp, #16]
 80169e0:	4bbc      	ldr	r3, [pc, #752]	; (8016cd4 <__gethex+0x304>)
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	9301      	str	r3, [sp, #4]
 80169e6:	4618      	mov	r0, r3
 80169e8:	468b      	mov	fp, r1
 80169ea:	4690      	mov	r8, r2
 80169ec:	f7e9 fc0a 	bl	8000204 <strlen>
 80169f0:	9b01      	ldr	r3, [sp, #4]
 80169f2:	f8db 2000 	ldr.w	r2, [fp]
 80169f6:	4403      	add	r3, r0
 80169f8:	4682      	mov	sl, r0
 80169fa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80169fe:	9305      	str	r3, [sp, #20]
 8016a00:	1c93      	adds	r3, r2, #2
 8016a02:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8016a06:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016a0a:	32fe      	adds	r2, #254	; 0xfe
 8016a0c:	18d1      	adds	r1, r2, r3
 8016a0e:	461f      	mov	r7, r3
 8016a10:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016a14:	9100      	str	r1, [sp, #0]
 8016a16:	2830      	cmp	r0, #48	; 0x30
 8016a18:	d0f8      	beq.n	8016a0c <__gethex+0x3c>
 8016a1a:	f7ff ffc3 	bl	80169a4 <__hexdig_fun>
 8016a1e:	4604      	mov	r4, r0
 8016a20:	2800      	cmp	r0, #0
 8016a22:	d13a      	bne.n	8016a9a <__gethex+0xca>
 8016a24:	9901      	ldr	r1, [sp, #4]
 8016a26:	4652      	mov	r2, sl
 8016a28:	4638      	mov	r0, r7
 8016a2a:	f7fd fd1d 	bl	8014468 <strncmp>
 8016a2e:	4605      	mov	r5, r0
 8016a30:	2800      	cmp	r0, #0
 8016a32:	d168      	bne.n	8016b06 <__gethex+0x136>
 8016a34:	f817 000a 	ldrb.w	r0, [r7, sl]
 8016a38:	eb07 060a 	add.w	r6, r7, sl
 8016a3c:	f7ff ffb2 	bl	80169a4 <__hexdig_fun>
 8016a40:	2800      	cmp	r0, #0
 8016a42:	d062      	beq.n	8016b0a <__gethex+0x13a>
 8016a44:	4633      	mov	r3, r6
 8016a46:	7818      	ldrb	r0, [r3, #0]
 8016a48:	2830      	cmp	r0, #48	; 0x30
 8016a4a:	461f      	mov	r7, r3
 8016a4c:	f103 0301 	add.w	r3, r3, #1
 8016a50:	d0f9      	beq.n	8016a46 <__gethex+0x76>
 8016a52:	f7ff ffa7 	bl	80169a4 <__hexdig_fun>
 8016a56:	2301      	movs	r3, #1
 8016a58:	fab0 f480 	clz	r4, r0
 8016a5c:	0964      	lsrs	r4, r4, #5
 8016a5e:	4635      	mov	r5, r6
 8016a60:	9300      	str	r3, [sp, #0]
 8016a62:	463a      	mov	r2, r7
 8016a64:	4616      	mov	r6, r2
 8016a66:	3201      	adds	r2, #1
 8016a68:	7830      	ldrb	r0, [r6, #0]
 8016a6a:	f7ff ff9b 	bl	80169a4 <__hexdig_fun>
 8016a6e:	2800      	cmp	r0, #0
 8016a70:	d1f8      	bne.n	8016a64 <__gethex+0x94>
 8016a72:	9901      	ldr	r1, [sp, #4]
 8016a74:	4652      	mov	r2, sl
 8016a76:	4630      	mov	r0, r6
 8016a78:	f7fd fcf6 	bl	8014468 <strncmp>
 8016a7c:	b980      	cbnz	r0, 8016aa0 <__gethex+0xd0>
 8016a7e:	b94d      	cbnz	r5, 8016a94 <__gethex+0xc4>
 8016a80:	eb06 050a 	add.w	r5, r6, sl
 8016a84:	462a      	mov	r2, r5
 8016a86:	4616      	mov	r6, r2
 8016a88:	3201      	adds	r2, #1
 8016a8a:	7830      	ldrb	r0, [r6, #0]
 8016a8c:	f7ff ff8a 	bl	80169a4 <__hexdig_fun>
 8016a90:	2800      	cmp	r0, #0
 8016a92:	d1f8      	bne.n	8016a86 <__gethex+0xb6>
 8016a94:	1bad      	subs	r5, r5, r6
 8016a96:	00ad      	lsls	r5, r5, #2
 8016a98:	e004      	b.n	8016aa4 <__gethex+0xd4>
 8016a9a:	2400      	movs	r4, #0
 8016a9c:	4625      	mov	r5, r4
 8016a9e:	e7e0      	b.n	8016a62 <__gethex+0x92>
 8016aa0:	2d00      	cmp	r5, #0
 8016aa2:	d1f7      	bne.n	8016a94 <__gethex+0xc4>
 8016aa4:	7833      	ldrb	r3, [r6, #0]
 8016aa6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016aaa:	2b50      	cmp	r3, #80	; 0x50
 8016aac:	d13b      	bne.n	8016b26 <__gethex+0x156>
 8016aae:	7873      	ldrb	r3, [r6, #1]
 8016ab0:	2b2b      	cmp	r3, #43	; 0x2b
 8016ab2:	d02c      	beq.n	8016b0e <__gethex+0x13e>
 8016ab4:	2b2d      	cmp	r3, #45	; 0x2d
 8016ab6:	d02e      	beq.n	8016b16 <__gethex+0x146>
 8016ab8:	1c71      	adds	r1, r6, #1
 8016aba:	f04f 0900 	mov.w	r9, #0
 8016abe:	7808      	ldrb	r0, [r1, #0]
 8016ac0:	f7ff ff70 	bl	80169a4 <__hexdig_fun>
 8016ac4:	1e43      	subs	r3, r0, #1
 8016ac6:	b2db      	uxtb	r3, r3
 8016ac8:	2b18      	cmp	r3, #24
 8016aca:	d82c      	bhi.n	8016b26 <__gethex+0x156>
 8016acc:	f1a0 0210 	sub.w	r2, r0, #16
 8016ad0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016ad4:	f7ff ff66 	bl	80169a4 <__hexdig_fun>
 8016ad8:	1e43      	subs	r3, r0, #1
 8016ada:	b2db      	uxtb	r3, r3
 8016adc:	2b18      	cmp	r3, #24
 8016ade:	d91d      	bls.n	8016b1c <__gethex+0x14c>
 8016ae0:	f1b9 0f00 	cmp.w	r9, #0
 8016ae4:	d000      	beq.n	8016ae8 <__gethex+0x118>
 8016ae6:	4252      	negs	r2, r2
 8016ae8:	4415      	add	r5, r2
 8016aea:	f8cb 1000 	str.w	r1, [fp]
 8016aee:	b1e4      	cbz	r4, 8016b2a <__gethex+0x15a>
 8016af0:	9b00      	ldr	r3, [sp, #0]
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	bf14      	ite	ne
 8016af6:	2700      	movne	r7, #0
 8016af8:	2706      	moveq	r7, #6
 8016afa:	4638      	mov	r0, r7
 8016afc:	b009      	add	sp, #36	; 0x24
 8016afe:	ecbd 8b02 	vpop	{d8}
 8016b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b06:	463e      	mov	r6, r7
 8016b08:	4625      	mov	r5, r4
 8016b0a:	2401      	movs	r4, #1
 8016b0c:	e7ca      	b.n	8016aa4 <__gethex+0xd4>
 8016b0e:	f04f 0900 	mov.w	r9, #0
 8016b12:	1cb1      	adds	r1, r6, #2
 8016b14:	e7d3      	b.n	8016abe <__gethex+0xee>
 8016b16:	f04f 0901 	mov.w	r9, #1
 8016b1a:	e7fa      	b.n	8016b12 <__gethex+0x142>
 8016b1c:	230a      	movs	r3, #10
 8016b1e:	fb03 0202 	mla	r2, r3, r2, r0
 8016b22:	3a10      	subs	r2, #16
 8016b24:	e7d4      	b.n	8016ad0 <__gethex+0x100>
 8016b26:	4631      	mov	r1, r6
 8016b28:	e7df      	b.n	8016aea <__gethex+0x11a>
 8016b2a:	1bf3      	subs	r3, r6, r7
 8016b2c:	3b01      	subs	r3, #1
 8016b2e:	4621      	mov	r1, r4
 8016b30:	2b07      	cmp	r3, #7
 8016b32:	dc0b      	bgt.n	8016b4c <__gethex+0x17c>
 8016b34:	ee18 0a10 	vmov	r0, s16
 8016b38:	f000 fbe0 	bl	80172fc <_Balloc>
 8016b3c:	4604      	mov	r4, r0
 8016b3e:	b940      	cbnz	r0, 8016b52 <__gethex+0x182>
 8016b40:	4b65      	ldr	r3, [pc, #404]	; (8016cd8 <__gethex+0x308>)
 8016b42:	4602      	mov	r2, r0
 8016b44:	21de      	movs	r1, #222	; 0xde
 8016b46:	4865      	ldr	r0, [pc, #404]	; (8016cdc <__gethex+0x30c>)
 8016b48:	f7fe ff4a 	bl	80159e0 <__assert_func>
 8016b4c:	3101      	adds	r1, #1
 8016b4e:	105b      	asrs	r3, r3, #1
 8016b50:	e7ee      	b.n	8016b30 <__gethex+0x160>
 8016b52:	f100 0914 	add.w	r9, r0, #20
 8016b56:	f04f 0b00 	mov.w	fp, #0
 8016b5a:	f1ca 0301 	rsb	r3, sl, #1
 8016b5e:	f8cd 9008 	str.w	r9, [sp, #8]
 8016b62:	f8cd b000 	str.w	fp, [sp]
 8016b66:	9306      	str	r3, [sp, #24]
 8016b68:	42b7      	cmp	r7, r6
 8016b6a:	d340      	bcc.n	8016bee <__gethex+0x21e>
 8016b6c:	9802      	ldr	r0, [sp, #8]
 8016b6e:	9b00      	ldr	r3, [sp, #0]
 8016b70:	f840 3b04 	str.w	r3, [r0], #4
 8016b74:	eba0 0009 	sub.w	r0, r0, r9
 8016b78:	1080      	asrs	r0, r0, #2
 8016b7a:	0146      	lsls	r6, r0, #5
 8016b7c:	6120      	str	r0, [r4, #16]
 8016b7e:	4618      	mov	r0, r3
 8016b80:	f000 fcb2 	bl	80174e8 <__hi0bits>
 8016b84:	1a30      	subs	r0, r6, r0
 8016b86:	f8d8 6000 	ldr.w	r6, [r8]
 8016b8a:	42b0      	cmp	r0, r6
 8016b8c:	dd63      	ble.n	8016c56 <__gethex+0x286>
 8016b8e:	1b87      	subs	r7, r0, r6
 8016b90:	4639      	mov	r1, r7
 8016b92:	4620      	mov	r0, r4
 8016b94:	f001 f84c 	bl	8017c30 <__any_on>
 8016b98:	4682      	mov	sl, r0
 8016b9a:	b1a8      	cbz	r0, 8016bc8 <__gethex+0x1f8>
 8016b9c:	1e7b      	subs	r3, r7, #1
 8016b9e:	1159      	asrs	r1, r3, #5
 8016ba0:	f003 021f 	and.w	r2, r3, #31
 8016ba4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8016ba8:	f04f 0a01 	mov.w	sl, #1
 8016bac:	fa0a f202 	lsl.w	r2, sl, r2
 8016bb0:	420a      	tst	r2, r1
 8016bb2:	d009      	beq.n	8016bc8 <__gethex+0x1f8>
 8016bb4:	4553      	cmp	r3, sl
 8016bb6:	dd05      	ble.n	8016bc4 <__gethex+0x1f4>
 8016bb8:	1eb9      	subs	r1, r7, #2
 8016bba:	4620      	mov	r0, r4
 8016bbc:	f001 f838 	bl	8017c30 <__any_on>
 8016bc0:	2800      	cmp	r0, #0
 8016bc2:	d145      	bne.n	8016c50 <__gethex+0x280>
 8016bc4:	f04f 0a02 	mov.w	sl, #2
 8016bc8:	4639      	mov	r1, r7
 8016bca:	4620      	mov	r0, r4
 8016bcc:	f7ff fe98 	bl	8016900 <rshift>
 8016bd0:	443d      	add	r5, r7
 8016bd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016bd6:	42ab      	cmp	r3, r5
 8016bd8:	da4c      	bge.n	8016c74 <__gethex+0x2a4>
 8016bda:	ee18 0a10 	vmov	r0, s16
 8016bde:	4621      	mov	r1, r4
 8016be0:	f000 fbcc 	bl	801737c <_Bfree>
 8016be4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016be6:	2300      	movs	r3, #0
 8016be8:	6013      	str	r3, [r2, #0]
 8016bea:	27a3      	movs	r7, #163	; 0xa3
 8016bec:	e785      	b.n	8016afa <__gethex+0x12a>
 8016bee:	1e73      	subs	r3, r6, #1
 8016bf0:	9a05      	ldr	r2, [sp, #20]
 8016bf2:	9303      	str	r3, [sp, #12]
 8016bf4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016bf8:	4293      	cmp	r3, r2
 8016bfa:	d019      	beq.n	8016c30 <__gethex+0x260>
 8016bfc:	f1bb 0f20 	cmp.w	fp, #32
 8016c00:	d107      	bne.n	8016c12 <__gethex+0x242>
 8016c02:	9b02      	ldr	r3, [sp, #8]
 8016c04:	9a00      	ldr	r2, [sp, #0]
 8016c06:	f843 2b04 	str.w	r2, [r3], #4
 8016c0a:	9302      	str	r3, [sp, #8]
 8016c0c:	2300      	movs	r3, #0
 8016c0e:	9300      	str	r3, [sp, #0]
 8016c10:	469b      	mov	fp, r3
 8016c12:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8016c16:	f7ff fec5 	bl	80169a4 <__hexdig_fun>
 8016c1a:	9b00      	ldr	r3, [sp, #0]
 8016c1c:	f000 000f 	and.w	r0, r0, #15
 8016c20:	fa00 f00b 	lsl.w	r0, r0, fp
 8016c24:	4303      	orrs	r3, r0
 8016c26:	9300      	str	r3, [sp, #0]
 8016c28:	f10b 0b04 	add.w	fp, fp, #4
 8016c2c:	9b03      	ldr	r3, [sp, #12]
 8016c2e:	e00d      	b.n	8016c4c <__gethex+0x27c>
 8016c30:	9b03      	ldr	r3, [sp, #12]
 8016c32:	9a06      	ldr	r2, [sp, #24]
 8016c34:	4413      	add	r3, r2
 8016c36:	42bb      	cmp	r3, r7
 8016c38:	d3e0      	bcc.n	8016bfc <__gethex+0x22c>
 8016c3a:	4618      	mov	r0, r3
 8016c3c:	9901      	ldr	r1, [sp, #4]
 8016c3e:	9307      	str	r3, [sp, #28]
 8016c40:	4652      	mov	r2, sl
 8016c42:	f7fd fc11 	bl	8014468 <strncmp>
 8016c46:	9b07      	ldr	r3, [sp, #28]
 8016c48:	2800      	cmp	r0, #0
 8016c4a:	d1d7      	bne.n	8016bfc <__gethex+0x22c>
 8016c4c:	461e      	mov	r6, r3
 8016c4e:	e78b      	b.n	8016b68 <__gethex+0x198>
 8016c50:	f04f 0a03 	mov.w	sl, #3
 8016c54:	e7b8      	b.n	8016bc8 <__gethex+0x1f8>
 8016c56:	da0a      	bge.n	8016c6e <__gethex+0x29e>
 8016c58:	1a37      	subs	r7, r6, r0
 8016c5a:	4621      	mov	r1, r4
 8016c5c:	ee18 0a10 	vmov	r0, s16
 8016c60:	463a      	mov	r2, r7
 8016c62:	f000 fda7 	bl	80177b4 <__lshift>
 8016c66:	1bed      	subs	r5, r5, r7
 8016c68:	4604      	mov	r4, r0
 8016c6a:	f100 0914 	add.w	r9, r0, #20
 8016c6e:	f04f 0a00 	mov.w	sl, #0
 8016c72:	e7ae      	b.n	8016bd2 <__gethex+0x202>
 8016c74:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8016c78:	42a8      	cmp	r0, r5
 8016c7a:	dd72      	ble.n	8016d62 <__gethex+0x392>
 8016c7c:	1b45      	subs	r5, r0, r5
 8016c7e:	42ae      	cmp	r6, r5
 8016c80:	dc36      	bgt.n	8016cf0 <__gethex+0x320>
 8016c82:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016c86:	2b02      	cmp	r3, #2
 8016c88:	d02a      	beq.n	8016ce0 <__gethex+0x310>
 8016c8a:	2b03      	cmp	r3, #3
 8016c8c:	d02c      	beq.n	8016ce8 <__gethex+0x318>
 8016c8e:	2b01      	cmp	r3, #1
 8016c90:	d115      	bne.n	8016cbe <__gethex+0x2ee>
 8016c92:	42ae      	cmp	r6, r5
 8016c94:	d113      	bne.n	8016cbe <__gethex+0x2ee>
 8016c96:	2e01      	cmp	r6, #1
 8016c98:	d10b      	bne.n	8016cb2 <__gethex+0x2e2>
 8016c9a:	9a04      	ldr	r2, [sp, #16]
 8016c9c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016ca0:	6013      	str	r3, [r2, #0]
 8016ca2:	2301      	movs	r3, #1
 8016ca4:	6123      	str	r3, [r4, #16]
 8016ca6:	f8c9 3000 	str.w	r3, [r9]
 8016caa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016cac:	2762      	movs	r7, #98	; 0x62
 8016cae:	601c      	str	r4, [r3, #0]
 8016cb0:	e723      	b.n	8016afa <__gethex+0x12a>
 8016cb2:	1e71      	subs	r1, r6, #1
 8016cb4:	4620      	mov	r0, r4
 8016cb6:	f000 ffbb 	bl	8017c30 <__any_on>
 8016cba:	2800      	cmp	r0, #0
 8016cbc:	d1ed      	bne.n	8016c9a <__gethex+0x2ca>
 8016cbe:	ee18 0a10 	vmov	r0, s16
 8016cc2:	4621      	mov	r1, r4
 8016cc4:	f000 fb5a 	bl	801737c <_Bfree>
 8016cc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016cca:	2300      	movs	r3, #0
 8016ccc:	6013      	str	r3, [r2, #0]
 8016cce:	2750      	movs	r7, #80	; 0x50
 8016cd0:	e713      	b.n	8016afa <__gethex+0x12a>
 8016cd2:	bf00      	nop
 8016cd4:	0801ae38 	.word	0x0801ae38
 8016cd8:	0801adbd 	.word	0x0801adbd
 8016cdc:	0801adce 	.word	0x0801adce
 8016ce0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d1eb      	bne.n	8016cbe <__gethex+0x2ee>
 8016ce6:	e7d8      	b.n	8016c9a <__gethex+0x2ca>
 8016ce8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d1d5      	bne.n	8016c9a <__gethex+0x2ca>
 8016cee:	e7e6      	b.n	8016cbe <__gethex+0x2ee>
 8016cf0:	1e6f      	subs	r7, r5, #1
 8016cf2:	f1ba 0f00 	cmp.w	sl, #0
 8016cf6:	d131      	bne.n	8016d5c <__gethex+0x38c>
 8016cf8:	b127      	cbz	r7, 8016d04 <__gethex+0x334>
 8016cfa:	4639      	mov	r1, r7
 8016cfc:	4620      	mov	r0, r4
 8016cfe:	f000 ff97 	bl	8017c30 <__any_on>
 8016d02:	4682      	mov	sl, r0
 8016d04:	117b      	asrs	r3, r7, #5
 8016d06:	2101      	movs	r1, #1
 8016d08:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8016d0c:	f007 071f 	and.w	r7, r7, #31
 8016d10:	fa01 f707 	lsl.w	r7, r1, r7
 8016d14:	421f      	tst	r7, r3
 8016d16:	4629      	mov	r1, r5
 8016d18:	4620      	mov	r0, r4
 8016d1a:	bf18      	it	ne
 8016d1c:	f04a 0a02 	orrne.w	sl, sl, #2
 8016d20:	1b76      	subs	r6, r6, r5
 8016d22:	f7ff fded 	bl	8016900 <rshift>
 8016d26:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016d2a:	2702      	movs	r7, #2
 8016d2c:	f1ba 0f00 	cmp.w	sl, #0
 8016d30:	d048      	beq.n	8016dc4 <__gethex+0x3f4>
 8016d32:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016d36:	2b02      	cmp	r3, #2
 8016d38:	d015      	beq.n	8016d66 <__gethex+0x396>
 8016d3a:	2b03      	cmp	r3, #3
 8016d3c:	d017      	beq.n	8016d6e <__gethex+0x39e>
 8016d3e:	2b01      	cmp	r3, #1
 8016d40:	d109      	bne.n	8016d56 <__gethex+0x386>
 8016d42:	f01a 0f02 	tst.w	sl, #2
 8016d46:	d006      	beq.n	8016d56 <__gethex+0x386>
 8016d48:	f8d9 0000 	ldr.w	r0, [r9]
 8016d4c:	ea4a 0a00 	orr.w	sl, sl, r0
 8016d50:	f01a 0f01 	tst.w	sl, #1
 8016d54:	d10e      	bne.n	8016d74 <__gethex+0x3a4>
 8016d56:	f047 0710 	orr.w	r7, r7, #16
 8016d5a:	e033      	b.n	8016dc4 <__gethex+0x3f4>
 8016d5c:	f04f 0a01 	mov.w	sl, #1
 8016d60:	e7d0      	b.n	8016d04 <__gethex+0x334>
 8016d62:	2701      	movs	r7, #1
 8016d64:	e7e2      	b.n	8016d2c <__gethex+0x35c>
 8016d66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016d68:	f1c3 0301 	rsb	r3, r3, #1
 8016d6c:	9315      	str	r3, [sp, #84]	; 0x54
 8016d6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d0f0      	beq.n	8016d56 <__gethex+0x386>
 8016d74:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016d78:	f104 0314 	add.w	r3, r4, #20
 8016d7c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016d80:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8016d84:	f04f 0c00 	mov.w	ip, #0
 8016d88:	4618      	mov	r0, r3
 8016d8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d8e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016d92:	d01c      	beq.n	8016dce <__gethex+0x3fe>
 8016d94:	3201      	adds	r2, #1
 8016d96:	6002      	str	r2, [r0, #0]
 8016d98:	2f02      	cmp	r7, #2
 8016d9a:	f104 0314 	add.w	r3, r4, #20
 8016d9e:	d13f      	bne.n	8016e20 <__gethex+0x450>
 8016da0:	f8d8 2000 	ldr.w	r2, [r8]
 8016da4:	3a01      	subs	r2, #1
 8016da6:	42b2      	cmp	r2, r6
 8016da8:	d10a      	bne.n	8016dc0 <__gethex+0x3f0>
 8016daa:	1171      	asrs	r1, r6, #5
 8016dac:	2201      	movs	r2, #1
 8016dae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016db2:	f006 061f 	and.w	r6, r6, #31
 8016db6:	fa02 f606 	lsl.w	r6, r2, r6
 8016dba:	421e      	tst	r6, r3
 8016dbc:	bf18      	it	ne
 8016dbe:	4617      	movne	r7, r2
 8016dc0:	f047 0720 	orr.w	r7, r7, #32
 8016dc4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016dc6:	601c      	str	r4, [r3, #0]
 8016dc8:	9b04      	ldr	r3, [sp, #16]
 8016dca:	601d      	str	r5, [r3, #0]
 8016dcc:	e695      	b.n	8016afa <__gethex+0x12a>
 8016dce:	4299      	cmp	r1, r3
 8016dd0:	f843 cc04 	str.w	ip, [r3, #-4]
 8016dd4:	d8d8      	bhi.n	8016d88 <__gethex+0x3b8>
 8016dd6:	68a3      	ldr	r3, [r4, #8]
 8016dd8:	459b      	cmp	fp, r3
 8016dda:	db19      	blt.n	8016e10 <__gethex+0x440>
 8016ddc:	6861      	ldr	r1, [r4, #4]
 8016dde:	ee18 0a10 	vmov	r0, s16
 8016de2:	3101      	adds	r1, #1
 8016de4:	f000 fa8a 	bl	80172fc <_Balloc>
 8016de8:	4681      	mov	r9, r0
 8016dea:	b918      	cbnz	r0, 8016df4 <__gethex+0x424>
 8016dec:	4b1a      	ldr	r3, [pc, #104]	; (8016e58 <__gethex+0x488>)
 8016dee:	4602      	mov	r2, r0
 8016df0:	2184      	movs	r1, #132	; 0x84
 8016df2:	e6a8      	b.n	8016b46 <__gethex+0x176>
 8016df4:	6922      	ldr	r2, [r4, #16]
 8016df6:	3202      	adds	r2, #2
 8016df8:	f104 010c 	add.w	r1, r4, #12
 8016dfc:	0092      	lsls	r2, r2, #2
 8016dfe:	300c      	adds	r0, #12
 8016e00:	f7fb ff68 	bl	8012cd4 <memcpy>
 8016e04:	4621      	mov	r1, r4
 8016e06:	ee18 0a10 	vmov	r0, s16
 8016e0a:	f000 fab7 	bl	801737c <_Bfree>
 8016e0e:	464c      	mov	r4, r9
 8016e10:	6923      	ldr	r3, [r4, #16]
 8016e12:	1c5a      	adds	r2, r3, #1
 8016e14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016e18:	6122      	str	r2, [r4, #16]
 8016e1a:	2201      	movs	r2, #1
 8016e1c:	615a      	str	r2, [r3, #20]
 8016e1e:	e7bb      	b.n	8016d98 <__gethex+0x3c8>
 8016e20:	6922      	ldr	r2, [r4, #16]
 8016e22:	455a      	cmp	r2, fp
 8016e24:	dd0b      	ble.n	8016e3e <__gethex+0x46e>
 8016e26:	2101      	movs	r1, #1
 8016e28:	4620      	mov	r0, r4
 8016e2a:	f7ff fd69 	bl	8016900 <rshift>
 8016e2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016e32:	3501      	adds	r5, #1
 8016e34:	42ab      	cmp	r3, r5
 8016e36:	f6ff aed0 	blt.w	8016bda <__gethex+0x20a>
 8016e3a:	2701      	movs	r7, #1
 8016e3c:	e7c0      	b.n	8016dc0 <__gethex+0x3f0>
 8016e3e:	f016 061f 	ands.w	r6, r6, #31
 8016e42:	d0fa      	beq.n	8016e3a <__gethex+0x46a>
 8016e44:	449a      	add	sl, r3
 8016e46:	f1c6 0620 	rsb	r6, r6, #32
 8016e4a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8016e4e:	f000 fb4b 	bl	80174e8 <__hi0bits>
 8016e52:	42b0      	cmp	r0, r6
 8016e54:	dbe7      	blt.n	8016e26 <__gethex+0x456>
 8016e56:	e7f0      	b.n	8016e3a <__gethex+0x46a>
 8016e58:	0801adbd 	.word	0x0801adbd

08016e5c <L_shift>:
 8016e5c:	f1c2 0208 	rsb	r2, r2, #8
 8016e60:	0092      	lsls	r2, r2, #2
 8016e62:	b570      	push	{r4, r5, r6, lr}
 8016e64:	f1c2 0620 	rsb	r6, r2, #32
 8016e68:	6843      	ldr	r3, [r0, #4]
 8016e6a:	6804      	ldr	r4, [r0, #0]
 8016e6c:	fa03 f506 	lsl.w	r5, r3, r6
 8016e70:	432c      	orrs	r4, r5
 8016e72:	40d3      	lsrs	r3, r2
 8016e74:	6004      	str	r4, [r0, #0]
 8016e76:	f840 3f04 	str.w	r3, [r0, #4]!
 8016e7a:	4288      	cmp	r0, r1
 8016e7c:	d3f4      	bcc.n	8016e68 <L_shift+0xc>
 8016e7e:	bd70      	pop	{r4, r5, r6, pc}

08016e80 <__match>:
 8016e80:	b530      	push	{r4, r5, lr}
 8016e82:	6803      	ldr	r3, [r0, #0]
 8016e84:	3301      	adds	r3, #1
 8016e86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016e8a:	b914      	cbnz	r4, 8016e92 <__match+0x12>
 8016e8c:	6003      	str	r3, [r0, #0]
 8016e8e:	2001      	movs	r0, #1
 8016e90:	bd30      	pop	{r4, r5, pc}
 8016e92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016e96:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016e9a:	2d19      	cmp	r5, #25
 8016e9c:	bf98      	it	ls
 8016e9e:	3220      	addls	r2, #32
 8016ea0:	42a2      	cmp	r2, r4
 8016ea2:	d0f0      	beq.n	8016e86 <__match+0x6>
 8016ea4:	2000      	movs	r0, #0
 8016ea6:	e7f3      	b.n	8016e90 <__match+0x10>

08016ea8 <__hexnan>:
 8016ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016eac:	680b      	ldr	r3, [r1, #0]
 8016eae:	6801      	ldr	r1, [r0, #0]
 8016eb0:	115e      	asrs	r6, r3, #5
 8016eb2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016eb6:	f013 031f 	ands.w	r3, r3, #31
 8016eba:	b087      	sub	sp, #28
 8016ebc:	bf18      	it	ne
 8016ebe:	3604      	addne	r6, #4
 8016ec0:	2500      	movs	r5, #0
 8016ec2:	1f37      	subs	r7, r6, #4
 8016ec4:	4682      	mov	sl, r0
 8016ec6:	4690      	mov	r8, r2
 8016ec8:	9301      	str	r3, [sp, #4]
 8016eca:	f846 5c04 	str.w	r5, [r6, #-4]
 8016ece:	46b9      	mov	r9, r7
 8016ed0:	463c      	mov	r4, r7
 8016ed2:	9502      	str	r5, [sp, #8]
 8016ed4:	46ab      	mov	fp, r5
 8016ed6:	784a      	ldrb	r2, [r1, #1]
 8016ed8:	1c4b      	adds	r3, r1, #1
 8016eda:	9303      	str	r3, [sp, #12]
 8016edc:	b342      	cbz	r2, 8016f30 <__hexnan+0x88>
 8016ede:	4610      	mov	r0, r2
 8016ee0:	9105      	str	r1, [sp, #20]
 8016ee2:	9204      	str	r2, [sp, #16]
 8016ee4:	f7ff fd5e 	bl	80169a4 <__hexdig_fun>
 8016ee8:	2800      	cmp	r0, #0
 8016eea:	d14f      	bne.n	8016f8c <__hexnan+0xe4>
 8016eec:	9a04      	ldr	r2, [sp, #16]
 8016eee:	9905      	ldr	r1, [sp, #20]
 8016ef0:	2a20      	cmp	r2, #32
 8016ef2:	d818      	bhi.n	8016f26 <__hexnan+0x7e>
 8016ef4:	9b02      	ldr	r3, [sp, #8]
 8016ef6:	459b      	cmp	fp, r3
 8016ef8:	dd13      	ble.n	8016f22 <__hexnan+0x7a>
 8016efa:	454c      	cmp	r4, r9
 8016efc:	d206      	bcs.n	8016f0c <__hexnan+0x64>
 8016efe:	2d07      	cmp	r5, #7
 8016f00:	dc04      	bgt.n	8016f0c <__hexnan+0x64>
 8016f02:	462a      	mov	r2, r5
 8016f04:	4649      	mov	r1, r9
 8016f06:	4620      	mov	r0, r4
 8016f08:	f7ff ffa8 	bl	8016e5c <L_shift>
 8016f0c:	4544      	cmp	r4, r8
 8016f0e:	d950      	bls.n	8016fb2 <__hexnan+0x10a>
 8016f10:	2300      	movs	r3, #0
 8016f12:	f1a4 0904 	sub.w	r9, r4, #4
 8016f16:	f844 3c04 	str.w	r3, [r4, #-4]
 8016f1a:	f8cd b008 	str.w	fp, [sp, #8]
 8016f1e:	464c      	mov	r4, r9
 8016f20:	461d      	mov	r5, r3
 8016f22:	9903      	ldr	r1, [sp, #12]
 8016f24:	e7d7      	b.n	8016ed6 <__hexnan+0x2e>
 8016f26:	2a29      	cmp	r2, #41	; 0x29
 8016f28:	d156      	bne.n	8016fd8 <__hexnan+0x130>
 8016f2a:	3102      	adds	r1, #2
 8016f2c:	f8ca 1000 	str.w	r1, [sl]
 8016f30:	f1bb 0f00 	cmp.w	fp, #0
 8016f34:	d050      	beq.n	8016fd8 <__hexnan+0x130>
 8016f36:	454c      	cmp	r4, r9
 8016f38:	d206      	bcs.n	8016f48 <__hexnan+0xa0>
 8016f3a:	2d07      	cmp	r5, #7
 8016f3c:	dc04      	bgt.n	8016f48 <__hexnan+0xa0>
 8016f3e:	462a      	mov	r2, r5
 8016f40:	4649      	mov	r1, r9
 8016f42:	4620      	mov	r0, r4
 8016f44:	f7ff ff8a 	bl	8016e5c <L_shift>
 8016f48:	4544      	cmp	r4, r8
 8016f4a:	d934      	bls.n	8016fb6 <__hexnan+0x10e>
 8016f4c:	f1a8 0204 	sub.w	r2, r8, #4
 8016f50:	4623      	mov	r3, r4
 8016f52:	f853 1b04 	ldr.w	r1, [r3], #4
 8016f56:	f842 1f04 	str.w	r1, [r2, #4]!
 8016f5a:	429f      	cmp	r7, r3
 8016f5c:	d2f9      	bcs.n	8016f52 <__hexnan+0xaa>
 8016f5e:	1b3b      	subs	r3, r7, r4
 8016f60:	f023 0303 	bic.w	r3, r3, #3
 8016f64:	3304      	adds	r3, #4
 8016f66:	3401      	adds	r4, #1
 8016f68:	3e03      	subs	r6, #3
 8016f6a:	42b4      	cmp	r4, r6
 8016f6c:	bf88      	it	hi
 8016f6e:	2304      	movhi	r3, #4
 8016f70:	4443      	add	r3, r8
 8016f72:	2200      	movs	r2, #0
 8016f74:	f843 2b04 	str.w	r2, [r3], #4
 8016f78:	429f      	cmp	r7, r3
 8016f7a:	d2fb      	bcs.n	8016f74 <__hexnan+0xcc>
 8016f7c:	683b      	ldr	r3, [r7, #0]
 8016f7e:	b91b      	cbnz	r3, 8016f88 <__hexnan+0xe0>
 8016f80:	4547      	cmp	r7, r8
 8016f82:	d127      	bne.n	8016fd4 <__hexnan+0x12c>
 8016f84:	2301      	movs	r3, #1
 8016f86:	603b      	str	r3, [r7, #0]
 8016f88:	2005      	movs	r0, #5
 8016f8a:	e026      	b.n	8016fda <__hexnan+0x132>
 8016f8c:	3501      	adds	r5, #1
 8016f8e:	2d08      	cmp	r5, #8
 8016f90:	f10b 0b01 	add.w	fp, fp, #1
 8016f94:	dd06      	ble.n	8016fa4 <__hexnan+0xfc>
 8016f96:	4544      	cmp	r4, r8
 8016f98:	d9c3      	bls.n	8016f22 <__hexnan+0x7a>
 8016f9a:	2300      	movs	r3, #0
 8016f9c:	f844 3c04 	str.w	r3, [r4, #-4]
 8016fa0:	2501      	movs	r5, #1
 8016fa2:	3c04      	subs	r4, #4
 8016fa4:	6822      	ldr	r2, [r4, #0]
 8016fa6:	f000 000f 	and.w	r0, r0, #15
 8016faa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8016fae:	6022      	str	r2, [r4, #0]
 8016fb0:	e7b7      	b.n	8016f22 <__hexnan+0x7a>
 8016fb2:	2508      	movs	r5, #8
 8016fb4:	e7b5      	b.n	8016f22 <__hexnan+0x7a>
 8016fb6:	9b01      	ldr	r3, [sp, #4]
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d0df      	beq.n	8016f7c <__hexnan+0xd4>
 8016fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8016fc0:	f1c3 0320 	rsb	r3, r3, #32
 8016fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8016fc8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016fcc:	401a      	ands	r2, r3
 8016fce:	f846 2c04 	str.w	r2, [r6, #-4]
 8016fd2:	e7d3      	b.n	8016f7c <__hexnan+0xd4>
 8016fd4:	3f04      	subs	r7, #4
 8016fd6:	e7d1      	b.n	8016f7c <__hexnan+0xd4>
 8016fd8:	2004      	movs	r0, #4
 8016fda:	b007      	add	sp, #28
 8016fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016fe0 <_findenv_r>:
 8016fe0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fe4:	4607      	mov	r7, r0
 8016fe6:	4689      	mov	r9, r1
 8016fe8:	4616      	mov	r6, r2
 8016fea:	f001 fcdf 	bl	80189ac <__env_lock>
 8016fee:	4b18      	ldr	r3, [pc, #96]	; (8017050 <_findenv_r+0x70>)
 8016ff0:	681c      	ldr	r4, [r3, #0]
 8016ff2:	469a      	mov	sl, r3
 8016ff4:	b134      	cbz	r4, 8017004 <_findenv_r+0x24>
 8016ff6:	464b      	mov	r3, r9
 8016ff8:	4698      	mov	r8, r3
 8016ffa:	f813 1b01 	ldrb.w	r1, [r3], #1
 8016ffe:	b139      	cbz	r1, 8017010 <_findenv_r+0x30>
 8017000:	293d      	cmp	r1, #61	; 0x3d
 8017002:	d1f9      	bne.n	8016ff8 <_findenv_r+0x18>
 8017004:	4638      	mov	r0, r7
 8017006:	f001 fcd7 	bl	80189b8 <__env_unlock>
 801700a:	2000      	movs	r0, #0
 801700c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017010:	eba8 0809 	sub.w	r8, r8, r9
 8017014:	46a3      	mov	fp, r4
 8017016:	f854 0b04 	ldr.w	r0, [r4], #4
 801701a:	2800      	cmp	r0, #0
 801701c:	d0f2      	beq.n	8017004 <_findenv_r+0x24>
 801701e:	4642      	mov	r2, r8
 8017020:	4649      	mov	r1, r9
 8017022:	f7fd fa21 	bl	8014468 <strncmp>
 8017026:	2800      	cmp	r0, #0
 8017028:	d1f4      	bne.n	8017014 <_findenv_r+0x34>
 801702a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801702e:	eb03 0508 	add.w	r5, r3, r8
 8017032:	f813 3008 	ldrb.w	r3, [r3, r8]
 8017036:	2b3d      	cmp	r3, #61	; 0x3d
 8017038:	d1ec      	bne.n	8017014 <_findenv_r+0x34>
 801703a:	f8da 3000 	ldr.w	r3, [sl]
 801703e:	ebab 0303 	sub.w	r3, fp, r3
 8017042:	109b      	asrs	r3, r3, #2
 8017044:	4638      	mov	r0, r7
 8017046:	6033      	str	r3, [r6, #0]
 8017048:	f001 fcb6 	bl	80189b8 <__env_unlock>
 801704c:	1c68      	adds	r0, r5, #1
 801704e:	e7dd      	b.n	801700c <_findenv_r+0x2c>
 8017050:	200002e0 	.word	0x200002e0

08017054 <_getenv_r>:
 8017054:	b507      	push	{r0, r1, r2, lr}
 8017056:	aa01      	add	r2, sp, #4
 8017058:	f7ff ffc2 	bl	8016fe0 <_findenv_r>
 801705c:	b003      	add	sp, #12
 801705e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08017064 <__gettzinfo>:
 8017064:	4800      	ldr	r0, [pc, #0]	; (8017068 <__gettzinfo+0x4>)
 8017066:	4770      	bx	lr
 8017068:	20000118 	.word	0x20000118

0801706c <gmtime_r>:
 801706c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017070:	e9d0 6700 	ldrd	r6, r7, [r0]
 8017074:	460c      	mov	r4, r1
 8017076:	4a51      	ldr	r2, [pc, #324]	; (80171bc <gmtime_r+0x150>)
 8017078:	2300      	movs	r3, #0
 801707a:	4630      	mov	r0, r6
 801707c:	4639      	mov	r1, r7
 801707e:	f7e9 fe23 	bl	8000cc8 <__aeabi_ldivmod>
 8017082:	4639      	mov	r1, r7
 8017084:	4605      	mov	r5, r0
 8017086:	4a4d      	ldr	r2, [pc, #308]	; (80171bc <gmtime_r+0x150>)
 8017088:	4630      	mov	r0, r6
 801708a:	2300      	movs	r3, #0
 801708c:	f7e9 fe1c 	bl	8000cc8 <__aeabi_ldivmod>
 8017090:	2a00      	cmp	r2, #0
 8017092:	bfbc      	itt	lt
 8017094:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8017098:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 801709c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80170a0:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80170a4:	fbb2 f3f1 	udiv	r3, r2, r1
 80170a8:	fb01 2213 	mls	r2, r1, r3, r2
 80170ac:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80170b0:	bfac      	ite	ge
 80170b2:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 80170b6:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 80170ba:	60a3      	str	r3, [r4, #8]
 80170bc:	fbb2 f3f1 	udiv	r3, r2, r1
 80170c0:	fb01 2213 	mls	r2, r1, r3, r2
 80170c4:	6063      	str	r3, [r4, #4]
 80170c6:	6022      	str	r2, [r4, #0]
 80170c8:	1cc3      	adds	r3, r0, #3
 80170ca:	2207      	movs	r2, #7
 80170cc:	fb93 f2f2 	sdiv	r2, r3, r2
 80170d0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80170d4:	1a9b      	subs	r3, r3, r2
 80170d6:	bf48      	it	mi
 80170d8:	3307      	addmi	r3, #7
 80170da:	2800      	cmp	r0, #0
 80170dc:	61a3      	str	r3, [r4, #24]
 80170de:	bfb8      	it	lt
 80170e0:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 80170e4:	4936      	ldr	r1, [pc, #216]	; (80171c0 <gmtime_r+0x154>)
 80170e6:	bfae      	itee	ge
 80170e8:	fb90 f1f1 	sdivge	r1, r0, r1
 80170ec:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 80170f0:	fb93 f1f1 	sdivlt	r1, r3, r1
 80170f4:	4b33      	ldr	r3, [pc, #204]	; (80171c4 <gmtime_r+0x158>)
 80170f6:	fb03 0001 	mla	r0, r3, r1, r0
 80170fa:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80170fe:	fbb0 f2f2 	udiv	r2, r0, r2
 8017102:	4402      	add	r2, r0
 8017104:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 8017108:	fbb0 f3fc 	udiv	r3, r0, ip
 801710c:	1ad2      	subs	r2, r2, r3
 801710e:	f240 176d 	movw	r7, #365	; 0x16d
 8017112:	4b2d      	ldr	r3, [pc, #180]	; (80171c8 <gmtime_r+0x15c>)
 8017114:	fbb0 f3f3 	udiv	r3, r0, r3
 8017118:	2664      	movs	r6, #100	; 0x64
 801711a:	1ad3      	subs	r3, r2, r3
 801711c:	fbb3 f5f7 	udiv	r5, r3, r7
 8017120:	fbb3 f3fc 	udiv	r3, r3, ip
 8017124:	fbb5 f2f6 	udiv	r2, r5, r6
 8017128:	1ad3      	subs	r3, r2, r3
 801712a:	4403      	add	r3, r0
 801712c:	fb07 3315 	mls	r3, r7, r5, r3
 8017130:	2099      	movs	r0, #153	; 0x99
 8017132:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8017136:	f10c 0c02 	add.w	ip, ip, #2
 801713a:	f103 0e01 	add.w	lr, r3, #1
 801713e:	fbbc f7f0 	udiv	r7, ip, r0
 8017142:	4378      	muls	r0, r7
 8017144:	3002      	adds	r0, #2
 8017146:	f04f 0805 	mov.w	r8, #5
 801714a:	fbb0 f0f8 	udiv	r0, r0, r8
 801714e:	ebae 0000 	sub.w	r0, lr, r0
 8017152:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 8017156:	45f4      	cmp	ip, lr
 8017158:	bf94      	ite	ls
 801715a:	f04f 0c02 	movls.w	ip, #2
 801715e:	f06f 0c09 	mvnhi.w	ip, #9
 8017162:	4467      	add	r7, ip
 8017164:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8017168:	fb0c 5101 	mla	r1, ip, r1, r5
 801716c:	2f01      	cmp	r7, #1
 801716e:	bf98      	it	ls
 8017170:	3101      	addls	r1, #1
 8017172:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8017176:	d30c      	bcc.n	8017192 <gmtime_r+0x126>
 8017178:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 801717c:	61e3      	str	r3, [r4, #28]
 801717e:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 8017182:	2300      	movs	r3, #0
 8017184:	60e0      	str	r0, [r4, #12]
 8017186:	e9c4 7104 	strd	r7, r1, [r4, #16]
 801718a:	6223      	str	r3, [r4, #32]
 801718c:	4620      	mov	r0, r4
 801718e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017192:	f015 0f03 	tst.w	r5, #3
 8017196:	d102      	bne.n	801719e <gmtime_r+0x132>
 8017198:	fb06 5212 	mls	r2, r6, r2, r5
 801719c:	b95a      	cbnz	r2, 80171b6 <gmtime_r+0x14a>
 801719e:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80171a2:	fbb5 f2f6 	udiv	r2, r5, r6
 80171a6:	fb06 5212 	mls	r2, r6, r2, r5
 80171aa:	fab2 f282 	clz	r2, r2
 80171ae:	0952      	lsrs	r2, r2, #5
 80171b0:	333b      	adds	r3, #59	; 0x3b
 80171b2:	4413      	add	r3, r2
 80171b4:	e7e2      	b.n	801717c <gmtime_r+0x110>
 80171b6:	2201      	movs	r2, #1
 80171b8:	e7fa      	b.n	80171b0 <gmtime_r+0x144>
 80171ba:	bf00      	nop
 80171bc:	00015180 	.word	0x00015180
 80171c0:	00023ab1 	.word	0x00023ab1
 80171c4:	fffdc54f 	.word	0xfffdc54f
 80171c8:	00023ab0 	.word	0x00023ab0

080171cc <_localeconv_r>:
 80171cc:	4800      	ldr	r0, [pc, #0]	; (80171d0 <_localeconv_r+0x4>)
 80171ce:	4770      	bx	lr
 80171d0:	20000264 	.word	0x20000264

080171d4 <_lseek_r>:
 80171d4:	b538      	push	{r3, r4, r5, lr}
 80171d6:	4d07      	ldr	r5, [pc, #28]	; (80171f4 <_lseek_r+0x20>)
 80171d8:	4604      	mov	r4, r0
 80171da:	4608      	mov	r0, r1
 80171dc:	4611      	mov	r1, r2
 80171de:	2200      	movs	r2, #0
 80171e0:	602a      	str	r2, [r5, #0]
 80171e2:	461a      	mov	r2, r3
 80171e4:	f001 fc40 	bl	8018a68 <_lseek>
 80171e8:	1c43      	adds	r3, r0, #1
 80171ea:	d102      	bne.n	80171f2 <_lseek_r+0x1e>
 80171ec:	682b      	ldr	r3, [r5, #0]
 80171ee:	b103      	cbz	r3, 80171f2 <_lseek_r+0x1e>
 80171f0:	6023      	str	r3, [r4, #0]
 80171f2:	bd38      	pop	{r3, r4, r5, pc}
 80171f4:	200064fc 	.word	0x200064fc

080171f8 <__swhatbuf_r>:
 80171f8:	b570      	push	{r4, r5, r6, lr}
 80171fa:	460e      	mov	r6, r1
 80171fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017200:	2900      	cmp	r1, #0
 8017202:	b096      	sub	sp, #88	; 0x58
 8017204:	4614      	mov	r4, r2
 8017206:	461d      	mov	r5, r3
 8017208:	da07      	bge.n	801721a <__swhatbuf_r+0x22>
 801720a:	2300      	movs	r3, #0
 801720c:	602b      	str	r3, [r5, #0]
 801720e:	89b3      	ldrh	r3, [r6, #12]
 8017210:	061a      	lsls	r2, r3, #24
 8017212:	d410      	bmi.n	8017236 <__swhatbuf_r+0x3e>
 8017214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017218:	e00e      	b.n	8017238 <__swhatbuf_r+0x40>
 801721a:	466a      	mov	r2, sp
 801721c:	f001 fbd2 	bl	80189c4 <_fstat_r>
 8017220:	2800      	cmp	r0, #0
 8017222:	dbf2      	blt.n	801720a <__swhatbuf_r+0x12>
 8017224:	9a01      	ldr	r2, [sp, #4]
 8017226:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801722a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801722e:	425a      	negs	r2, r3
 8017230:	415a      	adcs	r2, r3
 8017232:	602a      	str	r2, [r5, #0]
 8017234:	e7ee      	b.n	8017214 <__swhatbuf_r+0x1c>
 8017236:	2340      	movs	r3, #64	; 0x40
 8017238:	2000      	movs	r0, #0
 801723a:	6023      	str	r3, [r4, #0]
 801723c:	b016      	add	sp, #88	; 0x58
 801723e:	bd70      	pop	{r4, r5, r6, pc}

08017240 <__smakebuf_r>:
 8017240:	898b      	ldrh	r3, [r1, #12]
 8017242:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017244:	079d      	lsls	r5, r3, #30
 8017246:	4606      	mov	r6, r0
 8017248:	460c      	mov	r4, r1
 801724a:	d507      	bpl.n	801725c <__smakebuf_r+0x1c>
 801724c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017250:	6023      	str	r3, [r4, #0]
 8017252:	6123      	str	r3, [r4, #16]
 8017254:	2301      	movs	r3, #1
 8017256:	6163      	str	r3, [r4, #20]
 8017258:	b002      	add	sp, #8
 801725a:	bd70      	pop	{r4, r5, r6, pc}
 801725c:	ab01      	add	r3, sp, #4
 801725e:	466a      	mov	r2, sp
 8017260:	f7ff ffca 	bl	80171f8 <__swhatbuf_r>
 8017264:	9900      	ldr	r1, [sp, #0]
 8017266:	4605      	mov	r5, r0
 8017268:	4630      	mov	r0, r6
 801726a:	f7fc f831 	bl	80132d0 <_malloc_r>
 801726e:	b948      	cbnz	r0, 8017284 <__smakebuf_r+0x44>
 8017270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017274:	059a      	lsls	r2, r3, #22
 8017276:	d4ef      	bmi.n	8017258 <__smakebuf_r+0x18>
 8017278:	f023 0303 	bic.w	r3, r3, #3
 801727c:	f043 0302 	orr.w	r3, r3, #2
 8017280:	81a3      	strh	r3, [r4, #12]
 8017282:	e7e3      	b.n	801724c <__smakebuf_r+0xc>
 8017284:	4b0d      	ldr	r3, [pc, #52]	; (80172bc <__smakebuf_r+0x7c>)
 8017286:	62b3      	str	r3, [r6, #40]	; 0x28
 8017288:	89a3      	ldrh	r3, [r4, #12]
 801728a:	6020      	str	r0, [r4, #0]
 801728c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017290:	81a3      	strh	r3, [r4, #12]
 8017292:	9b00      	ldr	r3, [sp, #0]
 8017294:	6163      	str	r3, [r4, #20]
 8017296:	9b01      	ldr	r3, [sp, #4]
 8017298:	6120      	str	r0, [r4, #16]
 801729a:	b15b      	cbz	r3, 80172b4 <__smakebuf_r+0x74>
 801729c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80172a0:	4630      	mov	r0, r6
 80172a2:	f001 fba1 	bl	80189e8 <_isatty_r>
 80172a6:	b128      	cbz	r0, 80172b4 <__smakebuf_r+0x74>
 80172a8:	89a3      	ldrh	r3, [r4, #12]
 80172aa:	f023 0303 	bic.w	r3, r3, #3
 80172ae:	f043 0301 	orr.w	r3, r3, #1
 80172b2:	81a3      	strh	r3, [r4, #12]
 80172b4:	89a0      	ldrh	r0, [r4, #12]
 80172b6:	4305      	orrs	r5, r0
 80172b8:	81a5      	strh	r5, [r4, #12]
 80172ba:	e7cd      	b.n	8017258 <__smakebuf_r+0x18>
 80172bc:	08012885 	.word	0x08012885

080172c0 <__ascii_mbtowc>:
 80172c0:	b082      	sub	sp, #8
 80172c2:	b901      	cbnz	r1, 80172c6 <__ascii_mbtowc+0x6>
 80172c4:	a901      	add	r1, sp, #4
 80172c6:	b142      	cbz	r2, 80172da <__ascii_mbtowc+0x1a>
 80172c8:	b14b      	cbz	r3, 80172de <__ascii_mbtowc+0x1e>
 80172ca:	7813      	ldrb	r3, [r2, #0]
 80172cc:	600b      	str	r3, [r1, #0]
 80172ce:	7812      	ldrb	r2, [r2, #0]
 80172d0:	1e10      	subs	r0, r2, #0
 80172d2:	bf18      	it	ne
 80172d4:	2001      	movne	r0, #1
 80172d6:	b002      	add	sp, #8
 80172d8:	4770      	bx	lr
 80172da:	4610      	mov	r0, r2
 80172dc:	e7fb      	b.n	80172d6 <__ascii_mbtowc+0x16>
 80172de:	f06f 0001 	mvn.w	r0, #1
 80172e2:	e7f8      	b.n	80172d6 <__ascii_mbtowc+0x16>

080172e4 <__malloc_lock>:
 80172e4:	4801      	ldr	r0, [pc, #4]	; (80172ec <__malloc_lock+0x8>)
 80172e6:	f7fb bce1 	b.w	8012cac <__retarget_lock_acquire_recursive>
 80172ea:	bf00      	nop
 80172ec:	200064f4 	.word	0x200064f4

080172f0 <__malloc_unlock>:
 80172f0:	4801      	ldr	r0, [pc, #4]	; (80172f8 <__malloc_unlock+0x8>)
 80172f2:	f7fb bcdd 	b.w	8012cb0 <__retarget_lock_release_recursive>
 80172f6:	bf00      	nop
 80172f8:	200064f4 	.word	0x200064f4

080172fc <_Balloc>:
 80172fc:	b570      	push	{r4, r5, r6, lr}
 80172fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017300:	4604      	mov	r4, r0
 8017302:	460d      	mov	r5, r1
 8017304:	b976      	cbnz	r6, 8017324 <_Balloc+0x28>
 8017306:	2010      	movs	r0, #16
 8017308:	f7fb fcd4 	bl	8012cb4 <malloc>
 801730c:	4602      	mov	r2, r0
 801730e:	6260      	str	r0, [r4, #36]	; 0x24
 8017310:	b920      	cbnz	r0, 801731c <_Balloc+0x20>
 8017312:	4b18      	ldr	r3, [pc, #96]	; (8017374 <_Balloc+0x78>)
 8017314:	4818      	ldr	r0, [pc, #96]	; (8017378 <_Balloc+0x7c>)
 8017316:	2166      	movs	r1, #102	; 0x66
 8017318:	f7fe fb62 	bl	80159e0 <__assert_func>
 801731c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017320:	6006      	str	r6, [r0, #0]
 8017322:	60c6      	str	r6, [r0, #12]
 8017324:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017326:	68f3      	ldr	r3, [r6, #12]
 8017328:	b183      	cbz	r3, 801734c <_Balloc+0x50>
 801732a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801732c:	68db      	ldr	r3, [r3, #12]
 801732e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017332:	b9b8      	cbnz	r0, 8017364 <_Balloc+0x68>
 8017334:	2101      	movs	r1, #1
 8017336:	fa01 f605 	lsl.w	r6, r1, r5
 801733a:	1d72      	adds	r2, r6, #5
 801733c:	0092      	lsls	r2, r2, #2
 801733e:	4620      	mov	r0, r4
 8017340:	f000 fc97 	bl	8017c72 <_calloc_r>
 8017344:	b160      	cbz	r0, 8017360 <_Balloc+0x64>
 8017346:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801734a:	e00e      	b.n	801736a <_Balloc+0x6e>
 801734c:	2221      	movs	r2, #33	; 0x21
 801734e:	2104      	movs	r1, #4
 8017350:	4620      	mov	r0, r4
 8017352:	f000 fc8e 	bl	8017c72 <_calloc_r>
 8017356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017358:	60f0      	str	r0, [r6, #12]
 801735a:	68db      	ldr	r3, [r3, #12]
 801735c:	2b00      	cmp	r3, #0
 801735e:	d1e4      	bne.n	801732a <_Balloc+0x2e>
 8017360:	2000      	movs	r0, #0
 8017362:	bd70      	pop	{r4, r5, r6, pc}
 8017364:	6802      	ldr	r2, [r0, #0]
 8017366:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801736a:	2300      	movs	r3, #0
 801736c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017370:	e7f7      	b.n	8017362 <_Balloc+0x66>
 8017372:	bf00      	nop
 8017374:	0801aab8 	.word	0x0801aab8
 8017378:	0801ae4c 	.word	0x0801ae4c

0801737c <_Bfree>:
 801737c:	b570      	push	{r4, r5, r6, lr}
 801737e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017380:	4605      	mov	r5, r0
 8017382:	460c      	mov	r4, r1
 8017384:	b976      	cbnz	r6, 80173a4 <_Bfree+0x28>
 8017386:	2010      	movs	r0, #16
 8017388:	f7fb fc94 	bl	8012cb4 <malloc>
 801738c:	4602      	mov	r2, r0
 801738e:	6268      	str	r0, [r5, #36]	; 0x24
 8017390:	b920      	cbnz	r0, 801739c <_Bfree+0x20>
 8017392:	4b09      	ldr	r3, [pc, #36]	; (80173b8 <_Bfree+0x3c>)
 8017394:	4809      	ldr	r0, [pc, #36]	; (80173bc <_Bfree+0x40>)
 8017396:	218a      	movs	r1, #138	; 0x8a
 8017398:	f7fe fb22 	bl	80159e0 <__assert_func>
 801739c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80173a0:	6006      	str	r6, [r0, #0]
 80173a2:	60c6      	str	r6, [r0, #12]
 80173a4:	b13c      	cbz	r4, 80173b6 <_Bfree+0x3a>
 80173a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80173a8:	6862      	ldr	r2, [r4, #4]
 80173aa:	68db      	ldr	r3, [r3, #12]
 80173ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80173b0:	6021      	str	r1, [r4, #0]
 80173b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80173b6:	bd70      	pop	{r4, r5, r6, pc}
 80173b8:	0801aab8 	.word	0x0801aab8
 80173bc:	0801ae4c 	.word	0x0801ae4c

080173c0 <__multadd>:
 80173c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173c4:	690e      	ldr	r6, [r1, #16]
 80173c6:	4607      	mov	r7, r0
 80173c8:	4698      	mov	r8, r3
 80173ca:	460c      	mov	r4, r1
 80173cc:	f101 0014 	add.w	r0, r1, #20
 80173d0:	2300      	movs	r3, #0
 80173d2:	6805      	ldr	r5, [r0, #0]
 80173d4:	b2a9      	uxth	r1, r5
 80173d6:	fb02 8101 	mla	r1, r2, r1, r8
 80173da:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80173de:	0c2d      	lsrs	r5, r5, #16
 80173e0:	fb02 c505 	mla	r5, r2, r5, ip
 80173e4:	b289      	uxth	r1, r1
 80173e6:	3301      	adds	r3, #1
 80173e8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80173ec:	429e      	cmp	r6, r3
 80173ee:	f840 1b04 	str.w	r1, [r0], #4
 80173f2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80173f6:	dcec      	bgt.n	80173d2 <__multadd+0x12>
 80173f8:	f1b8 0f00 	cmp.w	r8, #0
 80173fc:	d022      	beq.n	8017444 <__multadd+0x84>
 80173fe:	68a3      	ldr	r3, [r4, #8]
 8017400:	42b3      	cmp	r3, r6
 8017402:	dc19      	bgt.n	8017438 <__multadd+0x78>
 8017404:	6861      	ldr	r1, [r4, #4]
 8017406:	4638      	mov	r0, r7
 8017408:	3101      	adds	r1, #1
 801740a:	f7ff ff77 	bl	80172fc <_Balloc>
 801740e:	4605      	mov	r5, r0
 8017410:	b928      	cbnz	r0, 801741e <__multadd+0x5e>
 8017412:	4602      	mov	r2, r0
 8017414:	4b0d      	ldr	r3, [pc, #52]	; (801744c <__multadd+0x8c>)
 8017416:	480e      	ldr	r0, [pc, #56]	; (8017450 <__multadd+0x90>)
 8017418:	21b5      	movs	r1, #181	; 0xb5
 801741a:	f7fe fae1 	bl	80159e0 <__assert_func>
 801741e:	6922      	ldr	r2, [r4, #16]
 8017420:	3202      	adds	r2, #2
 8017422:	f104 010c 	add.w	r1, r4, #12
 8017426:	0092      	lsls	r2, r2, #2
 8017428:	300c      	adds	r0, #12
 801742a:	f7fb fc53 	bl	8012cd4 <memcpy>
 801742e:	4621      	mov	r1, r4
 8017430:	4638      	mov	r0, r7
 8017432:	f7ff ffa3 	bl	801737c <_Bfree>
 8017436:	462c      	mov	r4, r5
 8017438:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801743c:	3601      	adds	r6, #1
 801743e:	f8c3 8014 	str.w	r8, [r3, #20]
 8017442:	6126      	str	r6, [r4, #16]
 8017444:	4620      	mov	r0, r4
 8017446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801744a:	bf00      	nop
 801744c:	0801adbd 	.word	0x0801adbd
 8017450:	0801ae4c 	.word	0x0801ae4c

08017454 <__s2b>:
 8017454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017458:	460c      	mov	r4, r1
 801745a:	4615      	mov	r5, r2
 801745c:	461f      	mov	r7, r3
 801745e:	2209      	movs	r2, #9
 8017460:	3308      	adds	r3, #8
 8017462:	4606      	mov	r6, r0
 8017464:	fb93 f3f2 	sdiv	r3, r3, r2
 8017468:	2100      	movs	r1, #0
 801746a:	2201      	movs	r2, #1
 801746c:	429a      	cmp	r2, r3
 801746e:	db09      	blt.n	8017484 <__s2b+0x30>
 8017470:	4630      	mov	r0, r6
 8017472:	f7ff ff43 	bl	80172fc <_Balloc>
 8017476:	b940      	cbnz	r0, 801748a <__s2b+0x36>
 8017478:	4602      	mov	r2, r0
 801747a:	4b19      	ldr	r3, [pc, #100]	; (80174e0 <__s2b+0x8c>)
 801747c:	4819      	ldr	r0, [pc, #100]	; (80174e4 <__s2b+0x90>)
 801747e:	21ce      	movs	r1, #206	; 0xce
 8017480:	f7fe faae 	bl	80159e0 <__assert_func>
 8017484:	0052      	lsls	r2, r2, #1
 8017486:	3101      	adds	r1, #1
 8017488:	e7f0      	b.n	801746c <__s2b+0x18>
 801748a:	9b08      	ldr	r3, [sp, #32]
 801748c:	6143      	str	r3, [r0, #20]
 801748e:	2d09      	cmp	r5, #9
 8017490:	f04f 0301 	mov.w	r3, #1
 8017494:	6103      	str	r3, [r0, #16]
 8017496:	dd16      	ble.n	80174c6 <__s2b+0x72>
 8017498:	f104 0909 	add.w	r9, r4, #9
 801749c:	46c8      	mov	r8, r9
 801749e:	442c      	add	r4, r5
 80174a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80174a4:	4601      	mov	r1, r0
 80174a6:	3b30      	subs	r3, #48	; 0x30
 80174a8:	220a      	movs	r2, #10
 80174aa:	4630      	mov	r0, r6
 80174ac:	f7ff ff88 	bl	80173c0 <__multadd>
 80174b0:	45a0      	cmp	r8, r4
 80174b2:	d1f5      	bne.n	80174a0 <__s2b+0x4c>
 80174b4:	f1a5 0408 	sub.w	r4, r5, #8
 80174b8:	444c      	add	r4, r9
 80174ba:	1b2d      	subs	r5, r5, r4
 80174bc:	1963      	adds	r3, r4, r5
 80174be:	42bb      	cmp	r3, r7
 80174c0:	db04      	blt.n	80174cc <__s2b+0x78>
 80174c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80174c6:	340a      	adds	r4, #10
 80174c8:	2509      	movs	r5, #9
 80174ca:	e7f6      	b.n	80174ba <__s2b+0x66>
 80174cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80174d0:	4601      	mov	r1, r0
 80174d2:	3b30      	subs	r3, #48	; 0x30
 80174d4:	220a      	movs	r2, #10
 80174d6:	4630      	mov	r0, r6
 80174d8:	f7ff ff72 	bl	80173c0 <__multadd>
 80174dc:	e7ee      	b.n	80174bc <__s2b+0x68>
 80174de:	bf00      	nop
 80174e0:	0801adbd 	.word	0x0801adbd
 80174e4:	0801ae4c 	.word	0x0801ae4c

080174e8 <__hi0bits>:
 80174e8:	0c03      	lsrs	r3, r0, #16
 80174ea:	041b      	lsls	r3, r3, #16
 80174ec:	b9d3      	cbnz	r3, 8017524 <__hi0bits+0x3c>
 80174ee:	0400      	lsls	r0, r0, #16
 80174f0:	2310      	movs	r3, #16
 80174f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80174f6:	bf04      	itt	eq
 80174f8:	0200      	lsleq	r0, r0, #8
 80174fa:	3308      	addeq	r3, #8
 80174fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8017500:	bf04      	itt	eq
 8017502:	0100      	lsleq	r0, r0, #4
 8017504:	3304      	addeq	r3, #4
 8017506:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801750a:	bf04      	itt	eq
 801750c:	0080      	lsleq	r0, r0, #2
 801750e:	3302      	addeq	r3, #2
 8017510:	2800      	cmp	r0, #0
 8017512:	db05      	blt.n	8017520 <__hi0bits+0x38>
 8017514:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8017518:	f103 0301 	add.w	r3, r3, #1
 801751c:	bf08      	it	eq
 801751e:	2320      	moveq	r3, #32
 8017520:	4618      	mov	r0, r3
 8017522:	4770      	bx	lr
 8017524:	2300      	movs	r3, #0
 8017526:	e7e4      	b.n	80174f2 <__hi0bits+0xa>

08017528 <__lo0bits>:
 8017528:	6803      	ldr	r3, [r0, #0]
 801752a:	f013 0207 	ands.w	r2, r3, #7
 801752e:	4601      	mov	r1, r0
 8017530:	d00b      	beq.n	801754a <__lo0bits+0x22>
 8017532:	07da      	lsls	r2, r3, #31
 8017534:	d424      	bmi.n	8017580 <__lo0bits+0x58>
 8017536:	0798      	lsls	r0, r3, #30
 8017538:	bf49      	itett	mi
 801753a:	085b      	lsrmi	r3, r3, #1
 801753c:	089b      	lsrpl	r3, r3, #2
 801753e:	2001      	movmi	r0, #1
 8017540:	600b      	strmi	r3, [r1, #0]
 8017542:	bf5c      	itt	pl
 8017544:	600b      	strpl	r3, [r1, #0]
 8017546:	2002      	movpl	r0, #2
 8017548:	4770      	bx	lr
 801754a:	b298      	uxth	r0, r3
 801754c:	b9b0      	cbnz	r0, 801757c <__lo0bits+0x54>
 801754e:	0c1b      	lsrs	r3, r3, #16
 8017550:	2010      	movs	r0, #16
 8017552:	f013 0fff 	tst.w	r3, #255	; 0xff
 8017556:	bf04      	itt	eq
 8017558:	0a1b      	lsreq	r3, r3, #8
 801755a:	3008      	addeq	r0, #8
 801755c:	071a      	lsls	r2, r3, #28
 801755e:	bf04      	itt	eq
 8017560:	091b      	lsreq	r3, r3, #4
 8017562:	3004      	addeq	r0, #4
 8017564:	079a      	lsls	r2, r3, #30
 8017566:	bf04      	itt	eq
 8017568:	089b      	lsreq	r3, r3, #2
 801756a:	3002      	addeq	r0, #2
 801756c:	07da      	lsls	r2, r3, #31
 801756e:	d403      	bmi.n	8017578 <__lo0bits+0x50>
 8017570:	085b      	lsrs	r3, r3, #1
 8017572:	f100 0001 	add.w	r0, r0, #1
 8017576:	d005      	beq.n	8017584 <__lo0bits+0x5c>
 8017578:	600b      	str	r3, [r1, #0]
 801757a:	4770      	bx	lr
 801757c:	4610      	mov	r0, r2
 801757e:	e7e8      	b.n	8017552 <__lo0bits+0x2a>
 8017580:	2000      	movs	r0, #0
 8017582:	4770      	bx	lr
 8017584:	2020      	movs	r0, #32
 8017586:	4770      	bx	lr

08017588 <__i2b>:
 8017588:	b510      	push	{r4, lr}
 801758a:	460c      	mov	r4, r1
 801758c:	2101      	movs	r1, #1
 801758e:	f7ff feb5 	bl	80172fc <_Balloc>
 8017592:	4602      	mov	r2, r0
 8017594:	b928      	cbnz	r0, 80175a2 <__i2b+0x1a>
 8017596:	4b05      	ldr	r3, [pc, #20]	; (80175ac <__i2b+0x24>)
 8017598:	4805      	ldr	r0, [pc, #20]	; (80175b0 <__i2b+0x28>)
 801759a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801759e:	f7fe fa1f 	bl	80159e0 <__assert_func>
 80175a2:	2301      	movs	r3, #1
 80175a4:	6144      	str	r4, [r0, #20]
 80175a6:	6103      	str	r3, [r0, #16]
 80175a8:	bd10      	pop	{r4, pc}
 80175aa:	bf00      	nop
 80175ac:	0801adbd 	.word	0x0801adbd
 80175b0:	0801ae4c 	.word	0x0801ae4c

080175b4 <__multiply>:
 80175b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175b8:	4614      	mov	r4, r2
 80175ba:	690a      	ldr	r2, [r1, #16]
 80175bc:	6923      	ldr	r3, [r4, #16]
 80175be:	429a      	cmp	r2, r3
 80175c0:	bfb8      	it	lt
 80175c2:	460b      	movlt	r3, r1
 80175c4:	460d      	mov	r5, r1
 80175c6:	bfbc      	itt	lt
 80175c8:	4625      	movlt	r5, r4
 80175ca:	461c      	movlt	r4, r3
 80175cc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80175d0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80175d4:	68ab      	ldr	r3, [r5, #8]
 80175d6:	6869      	ldr	r1, [r5, #4]
 80175d8:	eb0a 0709 	add.w	r7, sl, r9
 80175dc:	42bb      	cmp	r3, r7
 80175de:	b085      	sub	sp, #20
 80175e0:	bfb8      	it	lt
 80175e2:	3101      	addlt	r1, #1
 80175e4:	f7ff fe8a 	bl	80172fc <_Balloc>
 80175e8:	b930      	cbnz	r0, 80175f8 <__multiply+0x44>
 80175ea:	4602      	mov	r2, r0
 80175ec:	4b42      	ldr	r3, [pc, #264]	; (80176f8 <__multiply+0x144>)
 80175ee:	4843      	ldr	r0, [pc, #268]	; (80176fc <__multiply+0x148>)
 80175f0:	f240 115d 	movw	r1, #349	; 0x15d
 80175f4:	f7fe f9f4 	bl	80159e0 <__assert_func>
 80175f8:	f100 0614 	add.w	r6, r0, #20
 80175fc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8017600:	4633      	mov	r3, r6
 8017602:	2200      	movs	r2, #0
 8017604:	4543      	cmp	r3, r8
 8017606:	d31e      	bcc.n	8017646 <__multiply+0x92>
 8017608:	f105 0c14 	add.w	ip, r5, #20
 801760c:	f104 0314 	add.w	r3, r4, #20
 8017610:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8017614:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8017618:	9202      	str	r2, [sp, #8]
 801761a:	ebac 0205 	sub.w	r2, ip, r5
 801761e:	3a15      	subs	r2, #21
 8017620:	f022 0203 	bic.w	r2, r2, #3
 8017624:	3204      	adds	r2, #4
 8017626:	f105 0115 	add.w	r1, r5, #21
 801762a:	458c      	cmp	ip, r1
 801762c:	bf38      	it	cc
 801762e:	2204      	movcc	r2, #4
 8017630:	9201      	str	r2, [sp, #4]
 8017632:	9a02      	ldr	r2, [sp, #8]
 8017634:	9303      	str	r3, [sp, #12]
 8017636:	429a      	cmp	r2, r3
 8017638:	d808      	bhi.n	801764c <__multiply+0x98>
 801763a:	2f00      	cmp	r7, #0
 801763c:	dc55      	bgt.n	80176ea <__multiply+0x136>
 801763e:	6107      	str	r7, [r0, #16]
 8017640:	b005      	add	sp, #20
 8017642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017646:	f843 2b04 	str.w	r2, [r3], #4
 801764a:	e7db      	b.n	8017604 <__multiply+0x50>
 801764c:	f8b3 a000 	ldrh.w	sl, [r3]
 8017650:	f1ba 0f00 	cmp.w	sl, #0
 8017654:	d020      	beq.n	8017698 <__multiply+0xe4>
 8017656:	f105 0e14 	add.w	lr, r5, #20
 801765a:	46b1      	mov	r9, r6
 801765c:	2200      	movs	r2, #0
 801765e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8017662:	f8d9 b000 	ldr.w	fp, [r9]
 8017666:	b2a1      	uxth	r1, r4
 8017668:	fa1f fb8b 	uxth.w	fp, fp
 801766c:	fb0a b101 	mla	r1, sl, r1, fp
 8017670:	4411      	add	r1, r2
 8017672:	f8d9 2000 	ldr.w	r2, [r9]
 8017676:	0c24      	lsrs	r4, r4, #16
 8017678:	0c12      	lsrs	r2, r2, #16
 801767a:	fb0a 2404 	mla	r4, sl, r4, r2
 801767e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8017682:	b289      	uxth	r1, r1
 8017684:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8017688:	45f4      	cmp	ip, lr
 801768a:	f849 1b04 	str.w	r1, [r9], #4
 801768e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8017692:	d8e4      	bhi.n	801765e <__multiply+0xaa>
 8017694:	9901      	ldr	r1, [sp, #4]
 8017696:	5072      	str	r2, [r6, r1]
 8017698:	9a03      	ldr	r2, [sp, #12]
 801769a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801769e:	3304      	adds	r3, #4
 80176a0:	f1b9 0f00 	cmp.w	r9, #0
 80176a4:	d01f      	beq.n	80176e6 <__multiply+0x132>
 80176a6:	6834      	ldr	r4, [r6, #0]
 80176a8:	f105 0114 	add.w	r1, r5, #20
 80176ac:	46b6      	mov	lr, r6
 80176ae:	f04f 0a00 	mov.w	sl, #0
 80176b2:	880a      	ldrh	r2, [r1, #0]
 80176b4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80176b8:	fb09 b202 	mla	r2, r9, r2, fp
 80176bc:	4492      	add	sl, r2
 80176be:	b2a4      	uxth	r4, r4
 80176c0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80176c4:	f84e 4b04 	str.w	r4, [lr], #4
 80176c8:	f851 4b04 	ldr.w	r4, [r1], #4
 80176cc:	f8be 2000 	ldrh.w	r2, [lr]
 80176d0:	0c24      	lsrs	r4, r4, #16
 80176d2:	fb09 2404 	mla	r4, r9, r4, r2
 80176d6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80176da:	458c      	cmp	ip, r1
 80176dc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80176e0:	d8e7      	bhi.n	80176b2 <__multiply+0xfe>
 80176e2:	9a01      	ldr	r2, [sp, #4]
 80176e4:	50b4      	str	r4, [r6, r2]
 80176e6:	3604      	adds	r6, #4
 80176e8:	e7a3      	b.n	8017632 <__multiply+0x7e>
 80176ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d1a5      	bne.n	801763e <__multiply+0x8a>
 80176f2:	3f01      	subs	r7, #1
 80176f4:	e7a1      	b.n	801763a <__multiply+0x86>
 80176f6:	bf00      	nop
 80176f8:	0801adbd 	.word	0x0801adbd
 80176fc:	0801ae4c 	.word	0x0801ae4c

08017700 <__pow5mult>:
 8017700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017704:	4615      	mov	r5, r2
 8017706:	f012 0203 	ands.w	r2, r2, #3
 801770a:	4606      	mov	r6, r0
 801770c:	460f      	mov	r7, r1
 801770e:	d007      	beq.n	8017720 <__pow5mult+0x20>
 8017710:	4c25      	ldr	r4, [pc, #148]	; (80177a8 <__pow5mult+0xa8>)
 8017712:	3a01      	subs	r2, #1
 8017714:	2300      	movs	r3, #0
 8017716:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801771a:	f7ff fe51 	bl	80173c0 <__multadd>
 801771e:	4607      	mov	r7, r0
 8017720:	10ad      	asrs	r5, r5, #2
 8017722:	d03d      	beq.n	80177a0 <__pow5mult+0xa0>
 8017724:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8017726:	b97c      	cbnz	r4, 8017748 <__pow5mult+0x48>
 8017728:	2010      	movs	r0, #16
 801772a:	f7fb fac3 	bl	8012cb4 <malloc>
 801772e:	4602      	mov	r2, r0
 8017730:	6270      	str	r0, [r6, #36]	; 0x24
 8017732:	b928      	cbnz	r0, 8017740 <__pow5mult+0x40>
 8017734:	4b1d      	ldr	r3, [pc, #116]	; (80177ac <__pow5mult+0xac>)
 8017736:	481e      	ldr	r0, [pc, #120]	; (80177b0 <__pow5mult+0xb0>)
 8017738:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801773c:	f7fe f950 	bl	80159e0 <__assert_func>
 8017740:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017744:	6004      	str	r4, [r0, #0]
 8017746:	60c4      	str	r4, [r0, #12]
 8017748:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801774c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017750:	b94c      	cbnz	r4, 8017766 <__pow5mult+0x66>
 8017752:	f240 2171 	movw	r1, #625	; 0x271
 8017756:	4630      	mov	r0, r6
 8017758:	f7ff ff16 	bl	8017588 <__i2b>
 801775c:	2300      	movs	r3, #0
 801775e:	f8c8 0008 	str.w	r0, [r8, #8]
 8017762:	4604      	mov	r4, r0
 8017764:	6003      	str	r3, [r0, #0]
 8017766:	f04f 0900 	mov.w	r9, #0
 801776a:	07eb      	lsls	r3, r5, #31
 801776c:	d50a      	bpl.n	8017784 <__pow5mult+0x84>
 801776e:	4639      	mov	r1, r7
 8017770:	4622      	mov	r2, r4
 8017772:	4630      	mov	r0, r6
 8017774:	f7ff ff1e 	bl	80175b4 <__multiply>
 8017778:	4639      	mov	r1, r7
 801777a:	4680      	mov	r8, r0
 801777c:	4630      	mov	r0, r6
 801777e:	f7ff fdfd 	bl	801737c <_Bfree>
 8017782:	4647      	mov	r7, r8
 8017784:	106d      	asrs	r5, r5, #1
 8017786:	d00b      	beq.n	80177a0 <__pow5mult+0xa0>
 8017788:	6820      	ldr	r0, [r4, #0]
 801778a:	b938      	cbnz	r0, 801779c <__pow5mult+0x9c>
 801778c:	4622      	mov	r2, r4
 801778e:	4621      	mov	r1, r4
 8017790:	4630      	mov	r0, r6
 8017792:	f7ff ff0f 	bl	80175b4 <__multiply>
 8017796:	6020      	str	r0, [r4, #0]
 8017798:	f8c0 9000 	str.w	r9, [r0]
 801779c:	4604      	mov	r4, r0
 801779e:	e7e4      	b.n	801776a <__pow5mult+0x6a>
 80177a0:	4638      	mov	r0, r7
 80177a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80177a6:	bf00      	nop
 80177a8:	0801afa0 	.word	0x0801afa0
 80177ac:	0801aab8 	.word	0x0801aab8
 80177b0:	0801ae4c 	.word	0x0801ae4c

080177b4 <__lshift>:
 80177b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80177b8:	460c      	mov	r4, r1
 80177ba:	6849      	ldr	r1, [r1, #4]
 80177bc:	6923      	ldr	r3, [r4, #16]
 80177be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80177c2:	68a3      	ldr	r3, [r4, #8]
 80177c4:	4607      	mov	r7, r0
 80177c6:	4691      	mov	r9, r2
 80177c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80177cc:	f108 0601 	add.w	r6, r8, #1
 80177d0:	42b3      	cmp	r3, r6
 80177d2:	db0b      	blt.n	80177ec <__lshift+0x38>
 80177d4:	4638      	mov	r0, r7
 80177d6:	f7ff fd91 	bl	80172fc <_Balloc>
 80177da:	4605      	mov	r5, r0
 80177dc:	b948      	cbnz	r0, 80177f2 <__lshift+0x3e>
 80177de:	4602      	mov	r2, r0
 80177e0:	4b28      	ldr	r3, [pc, #160]	; (8017884 <__lshift+0xd0>)
 80177e2:	4829      	ldr	r0, [pc, #164]	; (8017888 <__lshift+0xd4>)
 80177e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80177e8:	f7fe f8fa 	bl	80159e0 <__assert_func>
 80177ec:	3101      	adds	r1, #1
 80177ee:	005b      	lsls	r3, r3, #1
 80177f0:	e7ee      	b.n	80177d0 <__lshift+0x1c>
 80177f2:	2300      	movs	r3, #0
 80177f4:	f100 0114 	add.w	r1, r0, #20
 80177f8:	f100 0210 	add.w	r2, r0, #16
 80177fc:	4618      	mov	r0, r3
 80177fe:	4553      	cmp	r3, sl
 8017800:	db33      	blt.n	801786a <__lshift+0xb6>
 8017802:	6920      	ldr	r0, [r4, #16]
 8017804:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017808:	f104 0314 	add.w	r3, r4, #20
 801780c:	f019 091f 	ands.w	r9, r9, #31
 8017810:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017814:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017818:	d02b      	beq.n	8017872 <__lshift+0xbe>
 801781a:	f1c9 0e20 	rsb	lr, r9, #32
 801781e:	468a      	mov	sl, r1
 8017820:	2200      	movs	r2, #0
 8017822:	6818      	ldr	r0, [r3, #0]
 8017824:	fa00 f009 	lsl.w	r0, r0, r9
 8017828:	4302      	orrs	r2, r0
 801782a:	f84a 2b04 	str.w	r2, [sl], #4
 801782e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017832:	459c      	cmp	ip, r3
 8017834:	fa22 f20e 	lsr.w	r2, r2, lr
 8017838:	d8f3      	bhi.n	8017822 <__lshift+0x6e>
 801783a:	ebac 0304 	sub.w	r3, ip, r4
 801783e:	3b15      	subs	r3, #21
 8017840:	f023 0303 	bic.w	r3, r3, #3
 8017844:	3304      	adds	r3, #4
 8017846:	f104 0015 	add.w	r0, r4, #21
 801784a:	4584      	cmp	ip, r0
 801784c:	bf38      	it	cc
 801784e:	2304      	movcc	r3, #4
 8017850:	50ca      	str	r2, [r1, r3]
 8017852:	b10a      	cbz	r2, 8017858 <__lshift+0xa4>
 8017854:	f108 0602 	add.w	r6, r8, #2
 8017858:	3e01      	subs	r6, #1
 801785a:	4638      	mov	r0, r7
 801785c:	612e      	str	r6, [r5, #16]
 801785e:	4621      	mov	r1, r4
 8017860:	f7ff fd8c 	bl	801737c <_Bfree>
 8017864:	4628      	mov	r0, r5
 8017866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801786a:	f842 0f04 	str.w	r0, [r2, #4]!
 801786e:	3301      	adds	r3, #1
 8017870:	e7c5      	b.n	80177fe <__lshift+0x4a>
 8017872:	3904      	subs	r1, #4
 8017874:	f853 2b04 	ldr.w	r2, [r3], #4
 8017878:	f841 2f04 	str.w	r2, [r1, #4]!
 801787c:	459c      	cmp	ip, r3
 801787e:	d8f9      	bhi.n	8017874 <__lshift+0xc0>
 8017880:	e7ea      	b.n	8017858 <__lshift+0xa4>
 8017882:	bf00      	nop
 8017884:	0801adbd 	.word	0x0801adbd
 8017888:	0801ae4c 	.word	0x0801ae4c

0801788c <__mcmp>:
 801788c:	b530      	push	{r4, r5, lr}
 801788e:	6902      	ldr	r2, [r0, #16]
 8017890:	690c      	ldr	r4, [r1, #16]
 8017892:	1b12      	subs	r2, r2, r4
 8017894:	d10e      	bne.n	80178b4 <__mcmp+0x28>
 8017896:	f100 0314 	add.w	r3, r0, #20
 801789a:	3114      	adds	r1, #20
 801789c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80178a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80178a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80178a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80178ac:	42a5      	cmp	r5, r4
 80178ae:	d003      	beq.n	80178b8 <__mcmp+0x2c>
 80178b0:	d305      	bcc.n	80178be <__mcmp+0x32>
 80178b2:	2201      	movs	r2, #1
 80178b4:	4610      	mov	r0, r2
 80178b6:	bd30      	pop	{r4, r5, pc}
 80178b8:	4283      	cmp	r3, r0
 80178ba:	d3f3      	bcc.n	80178a4 <__mcmp+0x18>
 80178bc:	e7fa      	b.n	80178b4 <__mcmp+0x28>
 80178be:	f04f 32ff 	mov.w	r2, #4294967295
 80178c2:	e7f7      	b.n	80178b4 <__mcmp+0x28>

080178c4 <__mdiff>:
 80178c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178c8:	460c      	mov	r4, r1
 80178ca:	4606      	mov	r6, r0
 80178cc:	4611      	mov	r1, r2
 80178ce:	4620      	mov	r0, r4
 80178d0:	4617      	mov	r7, r2
 80178d2:	f7ff ffdb 	bl	801788c <__mcmp>
 80178d6:	1e05      	subs	r5, r0, #0
 80178d8:	d110      	bne.n	80178fc <__mdiff+0x38>
 80178da:	4629      	mov	r1, r5
 80178dc:	4630      	mov	r0, r6
 80178de:	f7ff fd0d 	bl	80172fc <_Balloc>
 80178e2:	b930      	cbnz	r0, 80178f2 <__mdiff+0x2e>
 80178e4:	4b39      	ldr	r3, [pc, #228]	; (80179cc <__mdiff+0x108>)
 80178e6:	4602      	mov	r2, r0
 80178e8:	f240 2132 	movw	r1, #562	; 0x232
 80178ec:	4838      	ldr	r0, [pc, #224]	; (80179d0 <__mdiff+0x10c>)
 80178ee:	f7fe f877 	bl	80159e0 <__assert_func>
 80178f2:	2301      	movs	r3, #1
 80178f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80178f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178fc:	bfa4      	itt	ge
 80178fe:	463b      	movge	r3, r7
 8017900:	4627      	movge	r7, r4
 8017902:	4630      	mov	r0, r6
 8017904:	6879      	ldr	r1, [r7, #4]
 8017906:	bfa6      	itte	ge
 8017908:	461c      	movge	r4, r3
 801790a:	2500      	movge	r5, #0
 801790c:	2501      	movlt	r5, #1
 801790e:	f7ff fcf5 	bl	80172fc <_Balloc>
 8017912:	b920      	cbnz	r0, 801791e <__mdiff+0x5a>
 8017914:	4b2d      	ldr	r3, [pc, #180]	; (80179cc <__mdiff+0x108>)
 8017916:	4602      	mov	r2, r0
 8017918:	f44f 7110 	mov.w	r1, #576	; 0x240
 801791c:	e7e6      	b.n	80178ec <__mdiff+0x28>
 801791e:	693e      	ldr	r6, [r7, #16]
 8017920:	60c5      	str	r5, [r0, #12]
 8017922:	6925      	ldr	r5, [r4, #16]
 8017924:	f107 0114 	add.w	r1, r7, #20
 8017928:	f104 0914 	add.w	r9, r4, #20
 801792c:	f100 0e14 	add.w	lr, r0, #20
 8017930:	f107 0210 	add.w	r2, r7, #16
 8017934:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8017938:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801793c:	46f2      	mov	sl, lr
 801793e:	2700      	movs	r7, #0
 8017940:	f859 3b04 	ldr.w	r3, [r9], #4
 8017944:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8017948:	fa1f f883 	uxth.w	r8, r3
 801794c:	fa17 f78b 	uxtah	r7, r7, fp
 8017950:	0c1b      	lsrs	r3, r3, #16
 8017952:	eba7 0808 	sub.w	r8, r7, r8
 8017956:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801795a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801795e:	fa1f f888 	uxth.w	r8, r8
 8017962:	141f      	asrs	r7, r3, #16
 8017964:	454d      	cmp	r5, r9
 8017966:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801796a:	f84a 3b04 	str.w	r3, [sl], #4
 801796e:	d8e7      	bhi.n	8017940 <__mdiff+0x7c>
 8017970:	1b2b      	subs	r3, r5, r4
 8017972:	3b15      	subs	r3, #21
 8017974:	f023 0303 	bic.w	r3, r3, #3
 8017978:	3304      	adds	r3, #4
 801797a:	3415      	adds	r4, #21
 801797c:	42a5      	cmp	r5, r4
 801797e:	bf38      	it	cc
 8017980:	2304      	movcc	r3, #4
 8017982:	4419      	add	r1, r3
 8017984:	4473      	add	r3, lr
 8017986:	469e      	mov	lr, r3
 8017988:	460d      	mov	r5, r1
 801798a:	4565      	cmp	r5, ip
 801798c:	d30e      	bcc.n	80179ac <__mdiff+0xe8>
 801798e:	f10c 0203 	add.w	r2, ip, #3
 8017992:	1a52      	subs	r2, r2, r1
 8017994:	f022 0203 	bic.w	r2, r2, #3
 8017998:	3903      	subs	r1, #3
 801799a:	458c      	cmp	ip, r1
 801799c:	bf38      	it	cc
 801799e:	2200      	movcc	r2, #0
 80179a0:	441a      	add	r2, r3
 80179a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80179a6:	b17b      	cbz	r3, 80179c8 <__mdiff+0x104>
 80179a8:	6106      	str	r6, [r0, #16]
 80179aa:	e7a5      	b.n	80178f8 <__mdiff+0x34>
 80179ac:	f855 8b04 	ldr.w	r8, [r5], #4
 80179b0:	fa17 f488 	uxtah	r4, r7, r8
 80179b4:	1422      	asrs	r2, r4, #16
 80179b6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80179ba:	b2a4      	uxth	r4, r4
 80179bc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80179c0:	f84e 4b04 	str.w	r4, [lr], #4
 80179c4:	1417      	asrs	r7, r2, #16
 80179c6:	e7e0      	b.n	801798a <__mdiff+0xc6>
 80179c8:	3e01      	subs	r6, #1
 80179ca:	e7ea      	b.n	80179a2 <__mdiff+0xde>
 80179cc:	0801adbd 	.word	0x0801adbd
 80179d0:	0801ae4c 	.word	0x0801ae4c

080179d4 <__ulp>:
 80179d4:	b082      	sub	sp, #8
 80179d6:	ed8d 0b00 	vstr	d0, [sp]
 80179da:	9b01      	ldr	r3, [sp, #4]
 80179dc:	4912      	ldr	r1, [pc, #72]	; (8017a28 <__ulp+0x54>)
 80179de:	4019      	ands	r1, r3
 80179e0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80179e4:	2900      	cmp	r1, #0
 80179e6:	dd05      	ble.n	80179f4 <__ulp+0x20>
 80179e8:	2200      	movs	r2, #0
 80179ea:	460b      	mov	r3, r1
 80179ec:	ec43 2b10 	vmov	d0, r2, r3
 80179f0:	b002      	add	sp, #8
 80179f2:	4770      	bx	lr
 80179f4:	4249      	negs	r1, r1
 80179f6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80179fa:	ea4f 5021 	mov.w	r0, r1, asr #20
 80179fe:	f04f 0200 	mov.w	r2, #0
 8017a02:	f04f 0300 	mov.w	r3, #0
 8017a06:	da04      	bge.n	8017a12 <__ulp+0x3e>
 8017a08:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8017a0c:	fa41 f300 	asr.w	r3, r1, r0
 8017a10:	e7ec      	b.n	80179ec <__ulp+0x18>
 8017a12:	f1a0 0114 	sub.w	r1, r0, #20
 8017a16:	291e      	cmp	r1, #30
 8017a18:	bfda      	itte	le
 8017a1a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8017a1e:	fa20 f101 	lsrle.w	r1, r0, r1
 8017a22:	2101      	movgt	r1, #1
 8017a24:	460a      	mov	r2, r1
 8017a26:	e7e1      	b.n	80179ec <__ulp+0x18>
 8017a28:	7ff00000 	.word	0x7ff00000

08017a2c <__b2d>:
 8017a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a2e:	6905      	ldr	r5, [r0, #16]
 8017a30:	f100 0714 	add.w	r7, r0, #20
 8017a34:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8017a38:	1f2e      	subs	r6, r5, #4
 8017a3a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8017a3e:	4620      	mov	r0, r4
 8017a40:	f7ff fd52 	bl	80174e8 <__hi0bits>
 8017a44:	f1c0 0320 	rsb	r3, r0, #32
 8017a48:	280a      	cmp	r0, #10
 8017a4a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8017ac8 <__b2d+0x9c>
 8017a4e:	600b      	str	r3, [r1, #0]
 8017a50:	dc14      	bgt.n	8017a7c <__b2d+0x50>
 8017a52:	f1c0 0e0b 	rsb	lr, r0, #11
 8017a56:	fa24 f10e 	lsr.w	r1, r4, lr
 8017a5a:	42b7      	cmp	r7, r6
 8017a5c:	ea41 030c 	orr.w	r3, r1, ip
 8017a60:	bf34      	ite	cc
 8017a62:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017a66:	2100      	movcs	r1, #0
 8017a68:	3015      	adds	r0, #21
 8017a6a:	fa04 f000 	lsl.w	r0, r4, r0
 8017a6e:	fa21 f10e 	lsr.w	r1, r1, lr
 8017a72:	ea40 0201 	orr.w	r2, r0, r1
 8017a76:	ec43 2b10 	vmov	d0, r2, r3
 8017a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a7c:	42b7      	cmp	r7, r6
 8017a7e:	bf3a      	itte	cc
 8017a80:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017a84:	f1a5 0608 	subcc.w	r6, r5, #8
 8017a88:	2100      	movcs	r1, #0
 8017a8a:	380b      	subs	r0, #11
 8017a8c:	d017      	beq.n	8017abe <__b2d+0x92>
 8017a8e:	f1c0 0c20 	rsb	ip, r0, #32
 8017a92:	fa04 f500 	lsl.w	r5, r4, r0
 8017a96:	42be      	cmp	r6, r7
 8017a98:	fa21 f40c 	lsr.w	r4, r1, ip
 8017a9c:	ea45 0504 	orr.w	r5, r5, r4
 8017aa0:	bf8c      	ite	hi
 8017aa2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8017aa6:	2400      	movls	r4, #0
 8017aa8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8017aac:	fa01 f000 	lsl.w	r0, r1, r0
 8017ab0:	fa24 f40c 	lsr.w	r4, r4, ip
 8017ab4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8017ab8:	ea40 0204 	orr.w	r2, r0, r4
 8017abc:	e7db      	b.n	8017a76 <__b2d+0x4a>
 8017abe:	ea44 030c 	orr.w	r3, r4, ip
 8017ac2:	460a      	mov	r2, r1
 8017ac4:	e7d7      	b.n	8017a76 <__b2d+0x4a>
 8017ac6:	bf00      	nop
 8017ac8:	3ff00000 	.word	0x3ff00000

08017acc <__d2b>:
 8017acc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017ad0:	4689      	mov	r9, r1
 8017ad2:	2101      	movs	r1, #1
 8017ad4:	ec57 6b10 	vmov	r6, r7, d0
 8017ad8:	4690      	mov	r8, r2
 8017ada:	f7ff fc0f 	bl	80172fc <_Balloc>
 8017ade:	4604      	mov	r4, r0
 8017ae0:	b930      	cbnz	r0, 8017af0 <__d2b+0x24>
 8017ae2:	4602      	mov	r2, r0
 8017ae4:	4b25      	ldr	r3, [pc, #148]	; (8017b7c <__d2b+0xb0>)
 8017ae6:	4826      	ldr	r0, [pc, #152]	; (8017b80 <__d2b+0xb4>)
 8017ae8:	f240 310a 	movw	r1, #778	; 0x30a
 8017aec:	f7fd ff78 	bl	80159e0 <__assert_func>
 8017af0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8017af4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017af8:	bb35      	cbnz	r5, 8017b48 <__d2b+0x7c>
 8017afa:	2e00      	cmp	r6, #0
 8017afc:	9301      	str	r3, [sp, #4]
 8017afe:	d028      	beq.n	8017b52 <__d2b+0x86>
 8017b00:	4668      	mov	r0, sp
 8017b02:	9600      	str	r6, [sp, #0]
 8017b04:	f7ff fd10 	bl	8017528 <__lo0bits>
 8017b08:	9900      	ldr	r1, [sp, #0]
 8017b0a:	b300      	cbz	r0, 8017b4e <__d2b+0x82>
 8017b0c:	9a01      	ldr	r2, [sp, #4]
 8017b0e:	f1c0 0320 	rsb	r3, r0, #32
 8017b12:	fa02 f303 	lsl.w	r3, r2, r3
 8017b16:	430b      	orrs	r3, r1
 8017b18:	40c2      	lsrs	r2, r0
 8017b1a:	6163      	str	r3, [r4, #20]
 8017b1c:	9201      	str	r2, [sp, #4]
 8017b1e:	9b01      	ldr	r3, [sp, #4]
 8017b20:	61a3      	str	r3, [r4, #24]
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	bf14      	ite	ne
 8017b26:	2202      	movne	r2, #2
 8017b28:	2201      	moveq	r2, #1
 8017b2a:	6122      	str	r2, [r4, #16]
 8017b2c:	b1d5      	cbz	r5, 8017b64 <__d2b+0x98>
 8017b2e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8017b32:	4405      	add	r5, r0
 8017b34:	f8c9 5000 	str.w	r5, [r9]
 8017b38:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017b3c:	f8c8 0000 	str.w	r0, [r8]
 8017b40:	4620      	mov	r0, r4
 8017b42:	b003      	add	sp, #12
 8017b44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017b4c:	e7d5      	b.n	8017afa <__d2b+0x2e>
 8017b4e:	6161      	str	r1, [r4, #20]
 8017b50:	e7e5      	b.n	8017b1e <__d2b+0x52>
 8017b52:	a801      	add	r0, sp, #4
 8017b54:	f7ff fce8 	bl	8017528 <__lo0bits>
 8017b58:	9b01      	ldr	r3, [sp, #4]
 8017b5a:	6163      	str	r3, [r4, #20]
 8017b5c:	2201      	movs	r2, #1
 8017b5e:	6122      	str	r2, [r4, #16]
 8017b60:	3020      	adds	r0, #32
 8017b62:	e7e3      	b.n	8017b2c <__d2b+0x60>
 8017b64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017b68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017b6c:	f8c9 0000 	str.w	r0, [r9]
 8017b70:	6918      	ldr	r0, [r3, #16]
 8017b72:	f7ff fcb9 	bl	80174e8 <__hi0bits>
 8017b76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017b7a:	e7df      	b.n	8017b3c <__d2b+0x70>
 8017b7c:	0801adbd 	.word	0x0801adbd
 8017b80:	0801ae4c 	.word	0x0801ae4c

08017b84 <__ratio>:
 8017b84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b88:	4688      	mov	r8, r1
 8017b8a:	4669      	mov	r1, sp
 8017b8c:	4681      	mov	r9, r0
 8017b8e:	f7ff ff4d 	bl	8017a2c <__b2d>
 8017b92:	a901      	add	r1, sp, #4
 8017b94:	4640      	mov	r0, r8
 8017b96:	ec55 4b10 	vmov	r4, r5, d0
 8017b9a:	f7ff ff47 	bl	8017a2c <__b2d>
 8017b9e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017ba2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017ba6:	eba3 0c02 	sub.w	ip, r3, r2
 8017baa:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017bae:	1a9b      	subs	r3, r3, r2
 8017bb0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8017bb4:	ec51 0b10 	vmov	r0, r1, d0
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	bfd6      	itet	le
 8017bbc:	460a      	movle	r2, r1
 8017bbe:	462a      	movgt	r2, r5
 8017bc0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017bc4:	468b      	mov	fp, r1
 8017bc6:	462f      	mov	r7, r5
 8017bc8:	bfd4      	ite	le
 8017bca:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8017bce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8017bd2:	4620      	mov	r0, r4
 8017bd4:	ee10 2a10 	vmov	r2, s0
 8017bd8:	465b      	mov	r3, fp
 8017bda:	4639      	mov	r1, r7
 8017bdc:	f7e8 fe56 	bl	800088c <__aeabi_ddiv>
 8017be0:	ec41 0b10 	vmov	d0, r0, r1
 8017be4:	b003      	add	sp, #12
 8017be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017bea <__copybits>:
 8017bea:	3901      	subs	r1, #1
 8017bec:	b570      	push	{r4, r5, r6, lr}
 8017bee:	1149      	asrs	r1, r1, #5
 8017bf0:	6914      	ldr	r4, [r2, #16]
 8017bf2:	3101      	adds	r1, #1
 8017bf4:	f102 0314 	add.w	r3, r2, #20
 8017bf8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017bfc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017c00:	1f05      	subs	r5, r0, #4
 8017c02:	42a3      	cmp	r3, r4
 8017c04:	d30c      	bcc.n	8017c20 <__copybits+0x36>
 8017c06:	1aa3      	subs	r3, r4, r2
 8017c08:	3b11      	subs	r3, #17
 8017c0a:	f023 0303 	bic.w	r3, r3, #3
 8017c0e:	3211      	adds	r2, #17
 8017c10:	42a2      	cmp	r2, r4
 8017c12:	bf88      	it	hi
 8017c14:	2300      	movhi	r3, #0
 8017c16:	4418      	add	r0, r3
 8017c18:	2300      	movs	r3, #0
 8017c1a:	4288      	cmp	r0, r1
 8017c1c:	d305      	bcc.n	8017c2a <__copybits+0x40>
 8017c1e:	bd70      	pop	{r4, r5, r6, pc}
 8017c20:	f853 6b04 	ldr.w	r6, [r3], #4
 8017c24:	f845 6f04 	str.w	r6, [r5, #4]!
 8017c28:	e7eb      	b.n	8017c02 <__copybits+0x18>
 8017c2a:	f840 3b04 	str.w	r3, [r0], #4
 8017c2e:	e7f4      	b.n	8017c1a <__copybits+0x30>

08017c30 <__any_on>:
 8017c30:	f100 0214 	add.w	r2, r0, #20
 8017c34:	6900      	ldr	r0, [r0, #16]
 8017c36:	114b      	asrs	r3, r1, #5
 8017c38:	4298      	cmp	r0, r3
 8017c3a:	b510      	push	{r4, lr}
 8017c3c:	db11      	blt.n	8017c62 <__any_on+0x32>
 8017c3e:	dd0a      	ble.n	8017c56 <__any_on+0x26>
 8017c40:	f011 011f 	ands.w	r1, r1, #31
 8017c44:	d007      	beq.n	8017c56 <__any_on+0x26>
 8017c46:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017c4a:	fa24 f001 	lsr.w	r0, r4, r1
 8017c4e:	fa00 f101 	lsl.w	r1, r0, r1
 8017c52:	428c      	cmp	r4, r1
 8017c54:	d10b      	bne.n	8017c6e <__any_on+0x3e>
 8017c56:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017c5a:	4293      	cmp	r3, r2
 8017c5c:	d803      	bhi.n	8017c66 <__any_on+0x36>
 8017c5e:	2000      	movs	r0, #0
 8017c60:	bd10      	pop	{r4, pc}
 8017c62:	4603      	mov	r3, r0
 8017c64:	e7f7      	b.n	8017c56 <__any_on+0x26>
 8017c66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017c6a:	2900      	cmp	r1, #0
 8017c6c:	d0f5      	beq.n	8017c5a <__any_on+0x2a>
 8017c6e:	2001      	movs	r0, #1
 8017c70:	e7f6      	b.n	8017c60 <__any_on+0x30>

08017c72 <_calloc_r>:
 8017c72:	b513      	push	{r0, r1, r4, lr}
 8017c74:	434a      	muls	r2, r1
 8017c76:	4611      	mov	r1, r2
 8017c78:	9201      	str	r2, [sp, #4]
 8017c7a:	f7fb fb29 	bl	80132d0 <_malloc_r>
 8017c7e:	4604      	mov	r4, r0
 8017c80:	b118      	cbz	r0, 8017c8a <_calloc_r+0x18>
 8017c82:	9a01      	ldr	r2, [sp, #4]
 8017c84:	2100      	movs	r1, #0
 8017c86:	f7fb f84d 	bl	8012d24 <memset>
 8017c8a:	4620      	mov	r0, r4
 8017c8c:	b002      	add	sp, #8
 8017c8e:	bd10      	pop	{r4, pc}

08017c90 <_realloc_r>:
 8017c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c92:	4607      	mov	r7, r0
 8017c94:	4614      	mov	r4, r2
 8017c96:	460e      	mov	r6, r1
 8017c98:	b921      	cbnz	r1, 8017ca4 <_realloc_r+0x14>
 8017c9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017c9e:	4611      	mov	r1, r2
 8017ca0:	f7fb bb16 	b.w	80132d0 <_malloc_r>
 8017ca4:	b922      	cbnz	r2, 8017cb0 <_realloc_r+0x20>
 8017ca6:	f7fb fac3 	bl	8013230 <_free_r>
 8017caa:	4625      	mov	r5, r4
 8017cac:	4628      	mov	r0, r5
 8017cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017cb0:	f000 feaa 	bl	8018a08 <_malloc_usable_size_r>
 8017cb4:	42a0      	cmp	r0, r4
 8017cb6:	d20f      	bcs.n	8017cd8 <_realloc_r+0x48>
 8017cb8:	4621      	mov	r1, r4
 8017cba:	4638      	mov	r0, r7
 8017cbc:	f7fb fb08 	bl	80132d0 <_malloc_r>
 8017cc0:	4605      	mov	r5, r0
 8017cc2:	2800      	cmp	r0, #0
 8017cc4:	d0f2      	beq.n	8017cac <_realloc_r+0x1c>
 8017cc6:	4631      	mov	r1, r6
 8017cc8:	4622      	mov	r2, r4
 8017cca:	f7fb f803 	bl	8012cd4 <memcpy>
 8017cce:	4631      	mov	r1, r6
 8017cd0:	4638      	mov	r0, r7
 8017cd2:	f7fb faad 	bl	8013230 <_free_r>
 8017cd6:	e7e9      	b.n	8017cac <_realloc_r+0x1c>
 8017cd8:	4635      	mov	r5, r6
 8017cda:	e7e7      	b.n	8017cac <_realloc_r+0x1c>

08017cdc <__ssputs_r>:
 8017cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ce0:	688e      	ldr	r6, [r1, #8]
 8017ce2:	429e      	cmp	r6, r3
 8017ce4:	4682      	mov	sl, r0
 8017ce6:	460c      	mov	r4, r1
 8017ce8:	4690      	mov	r8, r2
 8017cea:	461f      	mov	r7, r3
 8017cec:	d838      	bhi.n	8017d60 <__ssputs_r+0x84>
 8017cee:	898a      	ldrh	r2, [r1, #12]
 8017cf0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017cf4:	d032      	beq.n	8017d5c <__ssputs_r+0x80>
 8017cf6:	6825      	ldr	r5, [r4, #0]
 8017cf8:	6909      	ldr	r1, [r1, #16]
 8017cfa:	eba5 0901 	sub.w	r9, r5, r1
 8017cfe:	6965      	ldr	r5, [r4, #20]
 8017d00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017d04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017d08:	3301      	adds	r3, #1
 8017d0a:	444b      	add	r3, r9
 8017d0c:	106d      	asrs	r5, r5, #1
 8017d0e:	429d      	cmp	r5, r3
 8017d10:	bf38      	it	cc
 8017d12:	461d      	movcc	r5, r3
 8017d14:	0553      	lsls	r3, r2, #21
 8017d16:	d531      	bpl.n	8017d7c <__ssputs_r+0xa0>
 8017d18:	4629      	mov	r1, r5
 8017d1a:	f7fb fad9 	bl	80132d0 <_malloc_r>
 8017d1e:	4606      	mov	r6, r0
 8017d20:	b950      	cbnz	r0, 8017d38 <__ssputs_r+0x5c>
 8017d22:	230c      	movs	r3, #12
 8017d24:	f8ca 3000 	str.w	r3, [sl]
 8017d28:	89a3      	ldrh	r3, [r4, #12]
 8017d2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017d2e:	81a3      	strh	r3, [r4, #12]
 8017d30:	f04f 30ff 	mov.w	r0, #4294967295
 8017d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d38:	6921      	ldr	r1, [r4, #16]
 8017d3a:	464a      	mov	r2, r9
 8017d3c:	f7fa ffca 	bl	8012cd4 <memcpy>
 8017d40:	89a3      	ldrh	r3, [r4, #12]
 8017d42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017d4a:	81a3      	strh	r3, [r4, #12]
 8017d4c:	6126      	str	r6, [r4, #16]
 8017d4e:	6165      	str	r5, [r4, #20]
 8017d50:	444e      	add	r6, r9
 8017d52:	eba5 0509 	sub.w	r5, r5, r9
 8017d56:	6026      	str	r6, [r4, #0]
 8017d58:	60a5      	str	r5, [r4, #8]
 8017d5a:	463e      	mov	r6, r7
 8017d5c:	42be      	cmp	r6, r7
 8017d5e:	d900      	bls.n	8017d62 <__ssputs_r+0x86>
 8017d60:	463e      	mov	r6, r7
 8017d62:	4632      	mov	r2, r6
 8017d64:	6820      	ldr	r0, [r4, #0]
 8017d66:	4641      	mov	r1, r8
 8017d68:	f7fa ffc2 	bl	8012cf0 <memmove>
 8017d6c:	68a3      	ldr	r3, [r4, #8]
 8017d6e:	6822      	ldr	r2, [r4, #0]
 8017d70:	1b9b      	subs	r3, r3, r6
 8017d72:	4432      	add	r2, r6
 8017d74:	60a3      	str	r3, [r4, #8]
 8017d76:	6022      	str	r2, [r4, #0]
 8017d78:	2000      	movs	r0, #0
 8017d7a:	e7db      	b.n	8017d34 <__ssputs_r+0x58>
 8017d7c:	462a      	mov	r2, r5
 8017d7e:	f7ff ff87 	bl	8017c90 <_realloc_r>
 8017d82:	4606      	mov	r6, r0
 8017d84:	2800      	cmp	r0, #0
 8017d86:	d1e1      	bne.n	8017d4c <__ssputs_r+0x70>
 8017d88:	6921      	ldr	r1, [r4, #16]
 8017d8a:	4650      	mov	r0, sl
 8017d8c:	f7fb fa50 	bl	8013230 <_free_r>
 8017d90:	e7c7      	b.n	8017d22 <__ssputs_r+0x46>
	...

08017d94 <_svfiprintf_r>:
 8017d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d98:	4698      	mov	r8, r3
 8017d9a:	898b      	ldrh	r3, [r1, #12]
 8017d9c:	061b      	lsls	r3, r3, #24
 8017d9e:	b09d      	sub	sp, #116	; 0x74
 8017da0:	4607      	mov	r7, r0
 8017da2:	460d      	mov	r5, r1
 8017da4:	4614      	mov	r4, r2
 8017da6:	d50e      	bpl.n	8017dc6 <_svfiprintf_r+0x32>
 8017da8:	690b      	ldr	r3, [r1, #16]
 8017daa:	b963      	cbnz	r3, 8017dc6 <_svfiprintf_r+0x32>
 8017dac:	2140      	movs	r1, #64	; 0x40
 8017dae:	f7fb fa8f 	bl	80132d0 <_malloc_r>
 8017db2:	6028      	str	r0, [r5, #0]
 8017db4:	6128      	str	r0, [r5, #16]
 8017db6:	b920      	cbnz	r0, 8017dc2 <_svfiprintf_r+0x2e>
 8017db8:	230c      	movs	r3, #12
 8017dba:	603b      	str	r3, [r7, #0]
 8017dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8017dc0:	e0d1      	b.n	8017f66 <_svfiprintf_r+0x1d2>
 8017dc2:	2340      	movs	r3, #64	; 0x40
 8017dc4:	616b      	str	r3, [r5, #20]
 8017dc6:	2300      	movs	r3, #0
 8017dc8:	9309      	str	r3, [sp, #36]	; 0x24
 8017dca:	2320      	movs	r3, #32
 8017dcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017dd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8017dd4:	2330      	movs	r3, #48	; 0x30
 8017dd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017f80 <_svfiprintf_r+0x1ec>
 8017dda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017dde:	f04f 0901 	mov.w	r9, #1
 8017de2:	4623      	mov	r3, r4
 8017de4:	469a      	mov	sl, r3
 8017de6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017dea:	b10a      	cbz	r2, 8017df0 <_svfiprintf_r+0x5c>
 8017dec:	2a25      	cmp	r2, #37	; 0x25
 8017dee:	d1f9      	bne.n	8017de4 <_svfiprintf_r+0x50>
 8017df0:	ebba 0b04 	subs.w	fp, sl, r4
 8017df4:	d00b      	beq.n	8017e0e <_svfiprintf_r+0x7a>
 8017df6:	465b      	mov	r3, fp
 8017df8:	4622      	mov	r2, r4
 8017dfa:	4629      	mov	r1, r5
 8017dfc:	4638      	mov	r0, r7
 8017dfe:	f7ff ff6d 	bl	8017cdc <__ssputs_r>
 8017e02:	3001      	adds	r0, #1
 8017e04:	f000 80aa 	beq.w	8017f5c <_svfiprintf_r+0x1c8>
 8017e08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017e0a:	445a      	add	r2, fp
 8017e0c:	9209      	str	r2, [sp, #36]	; 0x24
 8017e0e:	f89a 3000 	ldrb.w	r3, [sl]
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	f000 80a2 	beq.w	8017f5c <_svfiprintf_r+0x1c8>
 8017e18:	2300      	movs	r3, #0
 8017e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8017e1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017e22:	f10a 0a01 	add.w	sl, sl, #1
 8017e26:	9304      	str	r3, [sp, #16]
 8017e28:	9307      	str	r3, [sp, #28]
 8017e2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017e2e:	931a      	str	r3, [sp, #104]	; 0x68
 8017e30:	4654      	mov	r4, sl
 8017e32:	2205      	movs	r2, #5
 8017e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e38:	4851      	ldr	r0, [pc, #324]	; (8017f80 <_svfiprintf_r+0x1ec>)
 8017e3a:	f7e8 f9f1 	bl	8000220 <memchr>
 8017e3e:	9a04      	ldr	r2, [sp, #16]
 8017e40:	b9d8      	cbnz	r0, 8017e7a <_svfiprintf_r+0xe6>
 8017e42:	06d0      	lsls	r0, r2, #27
 8017e44:	bf44      	itt	mi
 8017e46:	2320      	movmi	r3, #32
 8017e48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017e4c:	0711      	lsls	r1, r2, #28
 8017e4e:	bf44      	itt	mi
 8017e50:	232b      	movmi	r3, #43	; 0x2b
 8017e52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017e56:	f89a 3000 	ldrb.w	r3, [sl]
 8017e5a:	2b2a      	cmp	r3, #42	; 0x2a
 8017e5c:	d015      	beq.n	8017e8a <_svfiprintf_r+0xf6>
 8017e5e:	9a07      	ldr	r2, [sp, #28]
 8017e60:	4654      	mov	r4, sl
 8017e62:	2000      	movs	r0, #0
 8017e64:	f04f 0c0a 	mov.w	ip, #10
 8017e68:	4621      	mov	r1, r4
 8017e6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017e6e:	3b30      	subs	r3, #48	; 0x30
 8017e70:	2b09      	cmp	r3, #9
 8017e72:	d94e      	bls.n	8017f12 <_svfiprintf_r+0x17e>
 8017e74:	b1b0      	cbz	r0, 8017ea4 <_svfiprintf_r+0x110>
 8017e76:	9207      	str	r2, [sp, #28]
 8017e78:	e014      	b.n	8017ea4 <_svfiprintf_r+0x110>
 8017e7a:	eba0 0308 	sub.w	r3, r0, r8
 8017e7e:	fa09 f303 	lsl.w	r3, r9, r3
 8017e82:	4313      	orrs	r3, r2
 8017e84:	9304      	str	r3, [sp, #16]
 8017e86:	46a2      	mov	sl, r4
 8017e88:	e7d2      	b.n	8017e30 <_svfiprintf_r+0x9c>
 8017e8a:	9b03      	ldr	r3, [sp, #12]
 8017e8c:	1d19      	adds	r1, r3, #4
 8017e8e:	681b      	ldr	r3, [r3, #0]
 8017e90:	9103      	str	r1, [sp, #12]
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	bfbb      	ittet	lt
 8017e96:	425b      	neglt	r3, r3
 8017e98:	f042 0202 	orrlt.w	r2, r2, #2
 8017e9c:	9307      	strge	r3, [sp, #28]
 8017e9e:	9307      	strlt	r3, [sp, #28]
 8017ea0:	bfb8      	it	lt
 8017ea2:	9204      	strlt	r2, [sp, #16]
 8017ea4:	7823      	ldrb	r3, [r4, #0]
 8017ea6:	2b2e      	cmp	r3, #46	; 0x2e
 8017ea8:	d10c      	bne.n	8017ec4 <_svfiprintf_r+0x130>
 8017eaa:	7863      	ldrb	r3, [r4, #1]
 8017eac:	2b2a      	cmp	r3, #42	; 0x2a
 8017eae:	d135      	bne.n	8017f1c <_svfiprintf_r+0x188>
 8017eb0:	9b03      	ldr	r3, [sp, #12]
 8017eb2:	1d1a      	adds	r2, r3, #4
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	9203      	str	r2, [sp, #12]
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	bfb8      	it	lt
 8017ebc:	f04f 33ff 	movlt.w	r3, #4294967295
 8017ec0:	3402      	adds	r4, #2
 8017ec2:	9305      	str	r3, [sp, #20]
 8017ec4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017f90 <_svfiprintf_r+0x1fc>
 8017ec8:	7821      	ldrb	r1, [r4, #0]
 8017eca:	2203      	movs	r2, #3
 8017ecc:	4650      	mov	r0, sl
 8017ece:	f7e8 f9a7 	bl	8000220 <memchr>
 8017ed2:	b140      	cbz	r0, 8017ee6 <_svfiprintf_r+0x152>
 8017ed4:	2340      	movs	r3, #64	; 0x40
 8017ed6:	eba0 000a 	sub.w	r0, r0, sl
 8017eda:	fa03 f000 	lsl.w	r0, r3, r0
 8017ede:	9b04      	ldr	r3, [sp, #16]
 8017ee0:	4303      	orrs	r3, r0
 8017ee2:	3401      	adds	r4, #1
 8017ee4:	9304      	str	r3, [sp, #16]
 8017ee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017eea:	4826      	ldr	r0, [pc, #152]	; (8017f84 <_svfiprintf_r+0x1f0>)
 8017eec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017ef0:	2206      	movs	r2, #6
 8017ef2:	f7e8 f995 	bl	8000220 <memchr>
 8017ef6:	2800      	cmp	r0, #0
 8017ef8:	d038      	beq.n	8017f6c <_svfiprintf_r+0x1d8>
 8017efa:	4b23      	ldr	r3, [pc, #140]	; (8017f88 <_svfiprintf_r+0x1f4>)
 8017efc:	bb1b      	cbnz	r3, 8017f46 <_svfiprintf_r+0x1b2>
 8017efe:	9b03      	ldr	r3, [sp, #12]
 8017f00:	3307      	adds	r3, #7
 8017f02:	f023 0307 	bic.w	r3, r3, #7
 8017f06:	3308      	adds	r3, #8
 8017f08:	9303      	str	r3, [sp, #12]
 8017f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f0c:	4433      	add	r3, r6
 8017f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8017f10:	e767      	b.n	8017de2 <_svfiprintf_r+0x4e>
 8017f12:	fb0c 3202 	mla	r2, ip, r2, r3
 8017f16:	460c      	mov	r4, r1
 8017f18:	2001      	movs	r0, #1
 8017f1a:	e7a5      	b.n	8017e68 <_svfiprintf_r+0xd4>
 8017f1c:	2300      	movs	r3, #0
 8017f1e:	3401      	adds	r4, #1
 8017f20:	9305      	str	r3, [sp, #20]
 8017f22:	4619      	mov	r1, r3
 8017f24:	f04f 0c0a 	mov.w	ip, #10
 8017f28:	4620      	mov	r0, r4
 8017f2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017f2e:	3a30      	subs	r2, #48	; 0x30
 8017f30:	2a09      	cmp	r2, #9
 8017f32:	d903      	bls.n	8017f3c <_svfiprintf_r+0x1a8>
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	d0c5      	beq.n	8017ec4 <_svfiprintf_r+0x130>
 8017f38:	9105      	str	r1, [sp, #20]
 8017f3a:	e7c3      	b.n	8017ec4 <_svfiprintf_r+0x130>
 8017f3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8017f40:	4604      	mov	r4, r0
 8017f42:	2301      	movs	r3, #1
 8017f44:	e7f0      	b.n	8017f28 <_svfiprintf_r+0x194>
 8017f46:	ab03      	add	r3, sp, #12
 8017f48:	9300      	str	r3, [sp, #0]
 8017f4a:	462a      	mov	r2, r5
 8017f4c:	4b0f      	ldr	r3, [pc, #60]	; (8017f8c <_svfiprintf_r+0x1f8>)
 8017f4e:	a904      	add	r1, sp, #16
 8017f50:	4638      	mov	r0, r7
 8017f52:	f7fb fab7 	bl	80134c4 <_printf_float>
 8017f56:	1c42      	adds	r2, r0, #1
 8017f58:	4606      	mov	r6, r0
 8017f5a:	d1d6      	bne.n	8017f0a <_svfiprintf_r+0x176>
 8017f5c:	89ab      	ldrh	r3, [r5, #12]
 8017f5e:	065b      	lsls	r3, r3, #25
 8017f60:	f53f af2c 	bmi.w	8017dbc <_svfiprintf_r+0x28>
 8017f64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017f66:	b01d      	add	sp, #116	; 0x74
 8017f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f6c:	ab03      	add	r3, sp, #12
 8017f6e:	9300      	str	r3, [sp, #0]
 8017f70:	462a      	mov	r2, r5
 8017f72:	4b06      	ldr	r3, [pc, #24]	; (8017f8c <_svfiprintf_r+0x1f8>)
 8017f74:	a904      	add	r1, sp, #16
 8017f76:	4638      	mov	r0, r7
 8017f78:	f7fb fd48 	bl	8013a0c <_printf_i>
 8017f7c:	e7eb      	b.n	8017f56 <_svfiprintf_r+0x1c2>
 8017f7e:	bf00      	nop
 8017f80:	0801afac 	.word	0x0801afac
 8017f84:	0801afb6 	.word	0x0801afb6
 8017f88:	080134c5 	.word	0x080134c5
 8017f8c:	08017cdd 	.word	0x08017cdd
 8017f90:	0801afb2 	.word	0x0801afb2

08017f94 <_sungetc_r>:
 8017f94:	b538      	push	{r3, r4, r5, lr}
 8017f96:	1c4b      	adds	r3, r1, #1
 8017f98:	4614      	mov	r4, r2
 8017f9a:	d103      	bne.n	8017fa4 <_sungetc_r+0x10>
 8017f9c:	f04f 35ff 	mov.w	r5, #4294967295
 8017fa0:	4628      	mov	r0, r5
 8017fa2:	bd38      	pop	{r3, r4, r5, pc}
 8017fa4:	8993      	ldrh	r3, [r2, #12]
 8017fa6:	f023 0320 	bic.w	r3, r3, #32
 8017faa:	8193      	strh	r3, [r2, #12]
 8017fac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017fae:	6852      	ldr	r2, [r2, #4]
 8017fb0:	b2cd      	uxtb	r5, r1
 8017fb2:	b18b      	cbz	r3, 8017fd8 <_sungetc_r+0x44>
 8017fb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017fb6:	4293      	cmp	r3, r2
 8017fb8:	dd08      	ble.n	8017fcc <_sungetc_r+0x38>
 8017fba:	6823      	ldr	r3, [r4, #0]
 8017fbc:	1e5a      	subs	r2, r3, #1
 8017fbe:	6022      	str	r2, [r4, #0]
 8017fc0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8017fc4:	6863      	ldr	r3, [r4, #4]
 8017fc6:	3301      	adds	r3, #1
 8017fc8:	6063      	str	r3, [r4, #4]
 8017fca:	e7e9      	b.n	8017fa0 <_sungetc_r+0xc>
 8017fcc:	4621      	mov	r1, r4
 8017fce:	f000 fca5 	bl	801891c <__submore>
 8017fd2:	2800      	cmp	r0, #0
 8017fd4:	d0f1      	beq.n	8017fba <_sungetc_r+0x26>
 8017fd6:	e7e1      	b.n	8017f9c <_sungetc_r+0x8>
 8017fd8:	6921      	ldr	r1, [r4, #16]
 8017fda:	6823      	ldr	r3, [r4, #0]
 8017fdc:	b151      	cbz	r1, 8017ff4 <_sungetc_r+0x60>
 8017fde:	4299      	cmp	r1, r3
 8017fe0:	d208      	bcs.n	8017ff4 <_sungetc_r+0x60>
 8017fe2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8017fe6:	42a9      	cmp	r1, r5
 8017fe8:	d104      	bne.n	8017ff4 <_sungetc_r+0x60>
 8017fea:	3b01      	subs	r3, #1
 8017fec:	3201      	adds	r2, #1
 8017fee:	6023      	str	r3, [r4, #0]
 8017ff0:	6062      	str	r2, [r4, #4]
 8017ff2:	e7d5      	b.n	8017fa0 <_sungetc_r+0xc>
 8017ff4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017ff8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017ffc:	6363      	str	r3, [r4, #52]	; 0x34
 8017ffe:	2303      	movs	r3, #3
 8018000:	63a3      	str	r3, [r4, #56]	; 0x38
 8018002:	4623      	mov	r3, r4
 8018004:	f803 5f46 	strb.w	r5, [r3, #70]!
 8018008:	6023      	str	r3, [r4, #0]
 801800a:	2301      	movs	r3, #1
 801800c:	e7dc      	b.n	8017fc8 <_sungetc_r+0x34>

0801800e <__ssrefill_r>:
 801800e:	b510      	push	{r4, lr}
 8018010:	460c      	mov	r4, r1
 8018012:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018014:	b169      	cbz	r1, 8018032 <__ssrefill_r+0x24>
 8018016:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801801a:	4299      	cmp	r1, r3
 801801c:	d001      	beq.n	8018022 <__ssrefill_r+0x14>
 801801e:	f7fb f907 	bl	8013230 <_free_r>
 8018022:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018024:	6063      	str	r3, [r4, #4]
 8018026:	2000      	movs	r0, #0
 8018028:	6360      	str	r0, [r4, #52]	; 0x34
 801802a:	b113      	cbz	r3, 8018032 <__ssrefill_r+0x24>
 801802c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801802e:	6023      	str	r3, [r4, #0]
 8018030:	bd10      	pop	{r4, pc}
 8018032:	6923      	ldr	r3, [r4, #16]
 8018034:	6023      	str	r3, [r4, #0]
 8018036:	2300      	movs	r3, #0
 8018038:	6063      	str	r3, [r4, #4]
 801803a:	89a3      	ldrh	r3, [r4, #12]
 801803c:	f043 0320 	orr.w	r3, r3, #32
 8018040:	81a3      	strh	r3, [r4, #12]
 8018042:	f04f 30ff 	mov.w	r0, #4294967295
 8018046:	e7f3      	b.n	8018030 <__ssrefill_r+0x22>

08018048 <__ssvfiscanf_r>:
 8018048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801804c:	460c      	mov	r4, r1
 801804e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8018052:	2100      	movs	r1, #0
 8018054:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8018058:	49b2      	ldr	r1, [pc, #712]	; (8018324 <__ssvfiscanf_r+0x2dc>)
 801805a:	91a0      	str	r1, [sp, #640]	; 0x280
 801805c:	f10d 0804 	add.w	r8, sp, #4
 8018060:	49b1      	ldr	r1, [pc, #708]	; (8018328 <__ssvfiscanf_r+0x2e0>)
 8018062:	4fb2      	ldr	r7, [pc, #712]	; (801832c <__ssvfiscanf_r+0x2e4>)
 8018064:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8018330 <__ssvfiscanf_r+0x2e8>
 8018068:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801806c:	4606      	mov	r6, r0
 801806e:	91a1      	str	r1, [sp, #644]	; 0x284
 8018070:	9300      	str	r3, [sp, #0]
 8018072:	f892 a000 	ldrb.w	sl, [r2]
 8018076:	f1ba 0f00 	cmp.w	sl, #0
 801807a:	f000 8151 	beq.w	8018320 <__ssvfiscanf_r+0x2d8>
 801807e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8018082:	f013 0308 	ands.w	r3, r3, #8
 8018086:	f102 0501 	add.w	r5, r2, #1
 801808a:	d019      	beq.n	80180c0 <__ssvfiscanf_r+0x78>
 801808c:	6863      	ldr	r3, [r4, #4]
 801808e:	2b00      	cmp	r3, #0
 8018090:	dd0f      	ble.n	80180b2 <__ssvfiscanf_r+0x6a>
 8018092:	6823      	ldr	r3, [r4, #0]
 8018094:	781a      	ldrb	r2, [r3, #0]
 8018096:	5cba      	ldrb	r2, [r7, r2]
 8018098:	0712      	lsls	r2, r2, #28
 801809a:	d401      	bmi.n	80180a0 <__ssvfiscanf_r+0x58>
 801809c:	462a      	mov	r2, r5
 801809e:	e7e8      	b.n	8018072 <__ssvfiscanf_r+0x2a>
 80180a0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80180a2:	3201      	adds	r2, #1
 80180a4:	9245      	str	r2, [sp, #276]	; 0x114
 80180a6:	6862      	ldr	r2, [r4, #4]
 80180a8:	3301      	adds	r3, #1
 80180aa:	3a01      	subs	r2, #1
 80180ac:	6062      	str	r2, [r4, #4]
 80180ae:	6023      	str	r3, [r4, #0]
 80180b0:	e7ec      	b.n	801808c <__ssvfiscanf_r+0x44>
 80180b2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80180b4:	4621      	mov	r1, r4
 80180b6:	4630      	mov	r0, r6
 80180b8:	4798      	blx	r3
 80180ba:	2800      	cmp	r0, #0
 80180bc:	d0e9      	beq.n	8018092 <__ssvfiscanf_r+0x4a>
 80180be:	e7ed      	b.n	801809c <__ssvfiscanf_r+0x54>
 80180c0:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80180c4:	f040 8083 	bne.w	80181ce <__ssvfiscanf_r+0x186>
 80180c8:	9341      	str	r3, [sp, #260]	; 0x104
 80180ca:	9343      	str	r3, [sp, #268]	; 0x10c
 80180cc:	7853      	ldrb	r3, [r2, #1]
 80180ce:	2b2a      	cmp	r3, #42	; 0x2a
 80180d0:	bf02      	ittt	eq
 80180d2:	2310      	moveq	r3, #16
 80180d4:	1c95      	addeq	r5, r2, #2
 80180d6:	9341      	streq	r3, [sp, #260]	; 0x104
 80180d8:	220a      	movs	r2, #10
 80180da:	46ab      	mov	fp, r5
 80180dc:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80180e0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80180e4:	2b09      	cmp	r3, #9
 80180e6:	d91d      	bls.n	8018124 <__ssvfiscanf_r+0xdc>
 80180e8:	4891      	ldr	r0, [pc, #580]	; (8018330 <__ssvfiscanf_r+0x2e8>)
 80180ea:	2203      	movs	r2, #3
 80180ec:	f7e8 f898 	bl	8000220 <memchr>
 80180f0:	b140      	cbz	r0, 8018104 <__ssvfiscanf_r+0xbc>
 80180f2:	2301      	movs	r3, #1
 80180f4:	eba0 0009 	sub.w	r0, r0, r9
 80180f8:	fa03 f000 	lsl.w	r0, r3, r0
 80180fc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80180fe:	4318      	orrs	r0, r3
 8018100:	9041      	str	r0, [sp, #260]	; 0x104
 8018102:	465d      	mov	r5, fp
 8018104:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018108:	2b78      	cmp	r3, #120	; 0x78
 801810a:	d806      	bhi.n	801811a <__ssvfiscanf_r+0xd2>
 801810c:	2b57      	cmp	r3, #87	; 0x57
 801810e:	d810      	bhi.n	8018132 <__ssvfiscanf_r+0xea>
 8018110:	2b25      	cmp	r3, #37	; 0x25
 8018112:	d05c      	beq.n	80181ce <__ssvfiscanf_r+0x186>
 8018114:	d856      	bhi.n	80181c4 <__ssvfiscanf_r+0x17c>
 8018116:	2b00      	cmp	r3, #0
 8018118:	d074      	beq.n	8018204 <__ssvfiscanf_r+0x1bc>
 801811a:	2303      	movs	r3, #3
 801811c:	9347      	str	r3, [sp, #284]	; 0x11c
 801811e:	230a      	movs	r3, #10
 8018120:	9342      	str	r3, [sp, #264]	; 0x108
 8018122:	e081      	b.n	8018228 <__ssvfiscanf_r+0x1e0>
 8018124:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018126:	fb02 1303 	mla	r3, r2, r3, r1
 801812a:	3b30      	subs	r3, #48	; 0x30
 801812c:	9343      	str	r3, [sp, #268]	; 0x10c
 801812e:	465d      	mov	r5, fp
 8018130:	e7d3      	b.n	80180da <__ssvfiscanf_r+0x92>
 8018132:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8018136:	2a20      	cmp	r2, #32
 8018138:	d8ef      	bhi.n	801811a <__ssvfiscanf_r+0xd2>
 801813a:	a101      	add	r1, pc, #4	; (adr r1, 8018140 <__ssvfiscanf_r+0xf8>)
 801813c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8018140:	08018213 	.word	0x08018213
 8018144:	0801811b 	.word	0x0801811b
 8018148:	0801811b 	.word	0x0801811b
 801814c:	08018271 	.word	0x08018271
 8018150:	0801811b 	.word	0x0801811b
 8018154:	0801811b 	.word	0x0801811b
 8018158:	0801811b 	.word	0x0801811b
 801815c:	0801811b 	.word	0x0801811b
 8018160:	0801811b 	.word	0x0801811b
 8018164:	0801811b 	.word	0x0801811b
 8018168:	0801811b 	.word	0x0801811b
 801816c:	08018287 	.word	0x08018287
 8018170:	0801825d 	.word	0x0801825d
 8018174:	080181cb 	.word	0x080181cb
 8018178:	080181cb 	.word	0x080181cb
 801817c:	080181cb 	.word	0x080181cb
 8018180:	0801811b 	.word	0x0801811b
 8018184:	08018261 	.word	0x08018261
 8018188:	0801811b 	.word	0x0801811b
 801818c:	0801811b 	.word	0x0801811b
 8018190:	0801811b 	.word	0x0801811b
 8018194:	0801811b 	.word	0x0801811b
 8018198:	08018297 	.word	0x08018297
 801819c:	08018269 	.word	0x08018269
 80181a0:	0801820b 	.word	0x0801820b
 80181a4:	0801811b 	.word	0x0801811b
 80181a8:	0801811b 	.word	0x0801811b
 80181ac:	08018293 	.word	0x08018293
 80181b0:	0801811b 	.word	0x0801811b
 80181b4:	0801825d 	.word	0x0801825d
 80181b8:	0801811b 	.word	0x0801811b
 80181bc:	0801811b 	.word	0x0801811b
 80181c0:	08018213 	.word	0x08018213
 80181c4:	3b45      	subs	r3, #69	; 0x45
 80181c6:	2b02      	cmp	r3, #2
 80181c8:	d8a7      	bhi.n	801811a <__ssvfiscanf_r+0xd2>
 80181ca:	2305      	movs	r3, #5
 80181cc:	e02b      	b.n	8018226 <__ssvfiscanf_r+0x1de>
 80181ce:	6863      	ldr	r3, [r4, #4]
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	dd0d      	ble.n	80181f0 <__ssvfiscanf_r+0x1a8>
 80181d4:	6823      	ldr	r3, [r4, #0]
 80181d6:	781a      	ldrb	r2, [r3, #0]
 80181d8:	4552      	cmp	r2, sl
 80181da:	f040 80a1 	bne.w	8018320 <__ssvfiscanf_r+0x2d8>
 80181de:	3301      	adds	r3, #1
 80181e0:	6862      	ldr	r2, [r4, #4]
 80181e2:	6023      	str	r3, [r4, #0]
 80181e4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80181e6:	3a01      	subs	r2, #1
 80181e8:	3301      	adds	r3, #1
 80181ea:	6062      	str	r2, [r4, #4]
 80181ec:	9345      	str	r3, [sp, #276]	; 0x114
 80181ee:	e755      	b.n	801809c <__ssvfiscanf_r+0x54>
 80181f0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80181f2:	4621      	mov	r1, r4
 80181f4:	4630      	mov	r0, r6
 80181f6:	4798      	blx	r3
 80181f8:	2800      	cmp	r0, #0
 80181fa:	d0eb      	beq.n	80181d4 <__ssvfiscanf_r+0x18c>
 80181fc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80181fe:	2800      	cmp	r0, #0
 8018200:	f040 8084 	bne.w	801830c <__ssvfiscanf_r+0x2c4>
 8018204:	f04f 30ff 	mov.w	r0, #4294967295
 8018208:	e086      	b.n	8018318 <__ssvfiscanf_r+0x2d0>
 801820a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801820c:	f042 0220 	orr.w	r2, r2, #32
 8018210:	9241      	str	r2, [sp, #260]	; 0x104
 8018212:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018218:	9241      	str	r2, [sp, #260]	; 0x104
 801821a:	2210      	movs	r2, #16
 801821c:	2b6f      	cmp	r3, #111	; 0x6f
 801821e:	9242      	str	r2, [sp, #264]	; 0x108
 8018220:	bf34      	ite	cc
 8018222:	2303      	movcc	r3, #3
 8018224:	2304      	movcs	r3, #4
 8018226:	9347      	str	r3, [sp, #284]	; 0x11c
 8018228:	6863      	ldr	r3, [r4, #4]
 801822a:	2b00      	cmp	r3, #0
 801822c:	dd41      	ble.n	80182b2 <__ssvfiscanf_r+0x26a>
 801822e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018230:	0659      	lsls	r1, r3, #25
 8018232:	d404      	bmi.n	801823e <__ssvfiscanf_r+0x1f6>
 8018234:	6823      	ldr	r3, [r4, #0]
 8018236:	781a      	ldrb	r2, [r3, #0]
 8018238:	5cba      	ldrb	r2, [r7, r2]
 801823a:	0712      	lsls	r2, r2, #28
 801823c:	d440      	bmi.n	80182c0 <__ssvfiscanf_r+0x278>
 801823e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8018240:	2b02      	cmp	r3, #2
 8018242:	dc4f      	bgt.n	80182e4 <__ssvfiscanf_r+0x29c>
 8018244:	466b      	mov	r3, sp
 8018246:	4622      	mov	r2, r4
 8018248:	a941      	add	r1, sp, #260	; 0x104
 801824a:	4630      	mov	r0, r6
 801824c:	f000 f9ce 	bl	80185ec <_scanf_chars>
 8018250:	2801      	cmp	r0, #1
 8018252:	d065      	beq.n	8018320 <__ssvfiscanf_r+0x2d8>
 8018254:	2802      	cmp	r0, #2
 8018256:	f47f af21 	bne.w	801809c <__ssvfiscanf_r+0x54>
 801825a:	e7cf      	b.n	80181fc <__ssvfiscanf_r+0x1b4>
 801825c:	220a      	movs	r2, #10
 801825e:	e7dd      	b.n	801821c <__ssvfiscanf_r+0x1d4>
 8018260:	2300      	movs	r3, #0
 8018262:	9342      	str	r3, [sp, #264]	; 0x108
 8018264:	2303      	movs	r3, #3
 8018266:	e7de      	b.n	8018226 <__ssvfiscanf_r+0x1de>
 8018268:	2308      	movs	r3, #8
 801826a:	9342      	str	r3, [sp, #264]	; 0x108
 801826c:	2304      	movs	r3, #4
 801826e:	e7da      	b.n	8018226 <__ssvfiscanf_r+0x1de>
 8018270:	4629      	mov	r1, r5
 8018272:	4640      	mov	r0, r8
 8018274:	f000 fb18 	bl	80188a8 <__sccl>
 8018278:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801827a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801827e:	9341      	str	r3, [sp, #260]	; 0x104
 8018280:	4605      	mov	r5, r0
 8018282:	2301      	movs	r3, #1
 8018284:	e7cf      	b.n	8018226 <__ssvfiscanf_r+0x1de>
 8018286:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801828c:	9341      	str	r3, [sp, #260]	; 0x104
 801828e:	2300      	movs	r3, #0
 8018290:	e7c9      	b.n	8018226 <__ssvfiscanf_r+0x1de>
 8018292:	2302      	movs	r3, #2
 8018294:	e7c7      	b.n	8018226 <__ssvfiscanf_r+0x1de>
 8018296:	9841      	ldr	r0, [sp, #260]	; 0x104
 8018298:	06c3      	lsls	r3, r0, #27
 801829a:	f53f aeff 	bmi.w	801809c <__ssvfiscanf_r+0x54>
 801829e:	9b00      	ldr	r3, [sp, #0]
 80182a0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80182a2:	1d19      	adds	r1, r3, #4
 80182a4:	9100      	str	r1, [sp, #0]
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	07c0      	lsls	r0, r0, #31
 80182aa:	bf4c      	ite	mi
 80182ac:	801a      	strhmi	r2, [r3, #0]
 80182ae:	601a      	strpl	r2, [r3, #0]
 80182b0:	e6f4      	b.n	801809c <__ssvfiscanf_r+0x54>
 80182b2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80182b4:	4621      	mov	r1, r4
 80182b6:	4630      	mov	r0, r6
 80182b8:	4798      	blx	r3
 80182ba:	2800      	cmp	r0, #0
 80182bc:	d0b7      	beq.n	801822e <__ssvfiscanf_r+0x1e6>
 80182be:	e79d      	b.n	80181fc <__ssvfiscanf_r+0x1b4>
 80182c0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80182c2:	3201      	adds	r2, #1
 80182c4:	9245      	str	r2, [sp, #276]	; 0x114
 80182c6:	6862      	ldr	r2, [r4, #4]
 80182c8:	3a01      	subs	r2, #1
 80182ca:	2a00      	cmp	r2, #0
 80182cc:	6062      	str	r2, [r4, #4]
 80182ce:	dd02      	ble.n	80182d6 <__ssvfiscanf_r+0x28e>
 80182d0:	3301      	adds	r3, #1
 80182d2:	6023      	str	r3, [r4, #0]
 80182d4:	e7ae      	b.n	8018234 <__ssvfiscanf_r+0x1ec>
 80182d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80182d8:	4621      	mov	r1, r4
 80182da:	4630      	mov	r0, r6
 80182dc:	4798      	blx	r3
 80182de:	2800      	cmp	r0, #0
 80182e0:	d0a8      	beq.n	8018234 <__ssvfiscanf_r+0x1ec>
 80182e2:	e78b      	b.n	80181fc <__ssvfiscanf_r+0x1b4>
 80182e4:	2b04      	cmp	r3, #4
 80182e6:	dc06      	bgt.n	80182f6 <__ssvfiscanf_r+0x2ae>
 80182e8:	466b      	mov	r3, sp
 80182ea:	4622      	mov	r2, r4
 80182ec:	a941      	add	r1, sp, #260	; 0x104
 80182ee:	4630      	mov	r0, r6
 80182f0:	f000 f9d4 	bl	801869c <_scanf_i>
 80182f4:	e7ac      	b.n	8018250 <__ssvfiscanf_r+0x208>
 80182f6:	4b0f      	ldr	r3, [pc, #60]	; (8018334 <__ssvfiscanf_r+0x2ec>)
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	f43f aecf 	beq.w	801809c <__ssvfiscanf_r+0x54>
 80182fe:	466b      	mov	r3, sp
 8018300:	4622      	mov	r2, r4
 8018302:	a941      	add	r1, sp, #260	; 0x104
 8018304:	4630      	mov	r0, r6
 8018306:	f7fb fca7 	bl	8013c58 <_scanf_float>
 801830a:	e7a1      	b.n	8018250 <__ssvfiscanf_r+0x208>
 801830c:	89a3      	ldrh	r3, [r4, #12]
 801830e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018312:	bf18      	it	ne
 8018314:	f04f 30ff 	movne.w	r0, #4294967295
 8018318:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801831c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018320:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018322:	e7f9      	b.n	8018318 <__ssvfiscanf_r+0x2d0>
 8018324:	08017f95 	.word	0x08017f95
 8018328:	0801800f 	.word	0x0801800f
 801832c:	0801a951 	.word	0x0801a951
 8018330:	0801afb2 	.word	0x0801afb2
 8018334:	08013c59 	.word	0x08013c59

08018338 <__sfputc_r>:
 8018338:	6893      	ldr	r3, [r2, #8]
 801833a:	3b01      	subs	r3, #1
 801833c:	2b00      	cmp	r3, #0
 801833e:	b410      	push	{r4}
 8018340:	6093      	str	r3, [r2, #8]
 8018342:	da08      	bge.n	8018356 <__sfputc_r+0x1e>
 8018344:	6994      	ldr	r4, [r2, #24]
 8018346:	42a3      	cmp	r3, r4
 8018348:	db01      	blt.n	801834e <__sfputc_r+0x16>
 801834a:	290a      	cmp	r1, #10
 801834c:	d103      	bne.n	8018356 <__sfputc_r+0x1e>
 801834e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018352:	f7fd ba73 	b.w	801583c <__swbuf_r>
 8018356:	6813      	ldr	r3, [r2, #0]
 8018358:	1c58      	adds	r0, r3, #1
 801835a:	6010      	str	r0, [r2, #0]
 801835c:	7019      	strb	r1, [r3, #0]
 801835e:	4608      	mov	r0, r1
 8018360:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018364:	4770      	bx	lr

08018366 <__sfputs_r>:
 8018366:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018368:	4606      	mov	r6, r0
 801836a:	460f      	mov	r7, r1
 801836c:	4614      	mov	r4, r2
 801836e:	18d5      	adds	r5, r2, r3
 8018370:	42ac      	cmp	r4, r5
 8018372:	d101      	bne.n	8018378 <__sfputs_r+0x12>
 8018374:	2000      	movs	r0, #0
 8018376:	e007      	b.n	8018388 <__sfputs_r+0x22>
 8018378:	f814 1b01 	ldrb.w	r1, [r4], #1
 801837c:	463a      	mov	r2, r7
 801837e:	4630      	mov	r0, r6
 8018380:	f7ff ffda 	bl	8018338 <__sfputc_r>
 8018384:	1c43      	adds	r3, r0, #1
 8018386:	d1f3      	bne.n	8018370 <__sfputs_r+0xa>
 8018388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801838c <_vfiprintf_r>:
 801838c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018390:	460d      	mov	r5, r1
 8018392:	b09d      	sub	sp, #116	; 0x74
 8018394:	4614      	mov	r4, r2
 8018396:	4698      	mov	r8, r3
 8018398:	4606      	mov	r6, r0
 801839a:	b118      	cbz	r0, 80183a4 <_vfiprintf_r+0x18>
 801839c:	6983      	ldr	r3, [r0, #24]
 801839e:	b90b      	cbnz	r3, 80183a4 <_vfiprintf_r+0x18>
 80183a0:	f7fa faa4 	bl	80128ec <__sinit>
 80183a4:	4b89      	ldr	r3, [pc, #548]	; (80185cc <_vfiprintf_r+0x240>)
 80183a6:	429d      	cmp	r5, r3
 80183a8:	d11b      	bne.n	80183e2 <_vfiprintf_r+0x56>
 80183aa:	6875      	ldr	r5, [r6, #4]
 80183ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80183ae:	07d9      	lsls	r1, r3, #31
 80183b0:	d405      	bmi.n	80183be <_vfiprintf_r+0x32>
 80183b2:	89ab      	ldrh	r3, [r5, #12]
 80183b4:	059a      	lsls	r2, r3, #22
 80183b6:	d402      	bmi.n	80183be <_vfiprintf_r+0x32>
 80183b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80183ba:	f7fa fc77 	bl	8012cac <__retarget_lock_acquire_recursive>
 80183be:	89ab      	ldrh	r3, [r5, #12]
 80183c0:	071b      	lsls	r3, r3, #28
 80183c2:	d501      	bpl.n	80183c8 <_vfiprintf_r+0x3c>
 80183c4:	692b      	ldr	r3, [r5, #16]
 80183c6:	b9eb      	cbnz	r3, 8018404 <_vfiprintf_r+0x78>
 80183c8:	4629      	mov	r1, r5
 80183ca:	4630      	mov	r0, r6
 80183cc:	f7fd fa9a 	bl	8015904 <__swsetup_r>
 80183d0:	b1c0      	cbz	r0, 8018404 <_vfiprintf_r+0x78>
 80183d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80183d4:	07dc      	lsls	r4, r3, #31
 80183d6:	d50e      	bpl.n	80183f6 <_vfiprintf_r+0x6a>
 80183d8:	f04f 30ff 	mov.w	r0, #4294967295
 80183dc:	b01d      	add	sp, #116	; 0x74
 80183de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183e2:	4b7b      	ldr	r3, [pc, #492]	; (80185d0 <_vfiprintf_r+0x244>)
 80183e4:	429d      	cmp	r5, r3
 80183e6:	d101      	bne.n	80183ec <_vfiprintf_r+0x60>
 80183e8:	68b5      	ldr	r5, [r6, #8]
 80183ea:	e7df      	b.n	80183ac <_vfiprintf_r+0x20>
 80183ec:	4b79      	ldr	r3, [pc, #484]	; (80185d4 <_vfiprintf_r+0x248>)
 80183ee:	429d      	cmp	r5, r3
 80183f0:	bf08      	it	eq
 80183f2:	68f5      	ldreq	r5, [r6, #12]
 80183f4:	e7da      	b.n	80183ac <_vfiprintf_r+0x20>
 80183f6:	89ab      	ldrh	r3, [r5, #12]
 80183f8:	0598      	lsls	r0, r3, #22
 80183fa:	d4ed      	bmi.n	80183d8 <_vfiprintf_r+0x4c>
 80183fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80183fe:	f7fa fc57 	bl	8012cb0 <__retarget_lock_release_recursive>
 8018402:	e7e9      	b.n	80183d8 <_vfiprintf_r+0x4c>
 8018404:	2300      	movs	r3, #0
 8018406:	9309      	str	r3, [sp, #36]	; 0x24
 8018408:	2320      	movs	r3, #32
 801840a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801840e:	f8cd 800c 	str.w	r8, [sp, #12]
 8018412:	2330      	movs	r3, #48	; 0x30
 8018414:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80185d8 <_vfiprintf_r+0x24c>
 8018418:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801841c:	f04f 0901 	mov.w	r9, #1
 8018420:	4623      	mov	r3, r4
 8018422:	469a      	mov	sl, r3
 8018424:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018428:	b10a      	cbz	r2, 801842e <_vfiprintf_r+0xa2>
 801842a:	2a25      	cmp	r2, #37	; 0x25
 801842c:	d1f9      	bne.n	8018422 <_vfiprintf_r+0x96>
 801842e:	ebba 0b04 	subs.w	fp, sl, r4
 8018432:	d00b      	beq.n	801844c <_vfiprintf_r+0xc0>
 8018434:	465b      	mov	r3, fp
 8018436:	4622      	mov	r2, r4
 8018438:	4629      	mov	r1, r5
 801843a:	4630      	mov	r0, r6
 801843c:	f7ff ff93 	bl	8018366 <__sfputs_r>
 8018440:	3001      	adds	r0, #1
 8018442:	f000 80aa 	beq.w	801859a <_vfiprintf_r+0x20e>
 8018446:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018448:	445a      	add	r2, fp
 801844a:	9209      	str	r2, [sp, #36]	; 0x24
 801844c:	f89a 3000 	ldrb.w	r3, [sl]
 8018450:	2b00      	cmp	r3, #0
 8018452:	f000 80a2 	beq.w	801859a <_vfiprintf_r+0x20e>
 8018456:	2300      	movs	r3, #0
 8018458:	f04f 32ff 	mov.w	r2, #4294967295
 801845c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018460:	f10a 0a01 	add.w	sl, sl, #1
 8018464:	9304      	str	r3, [sp, #16]
 8018466:	9307      	str	r3, [sp, #28]
 8018468:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801846c:	931a      	str	r3, [sp, #104]	; 0x68
 801846e:	4654      	mov	r4, sl
 8018470:	2205      	movs	r2, #5
 8018472:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018476:	4858      	ldr	r0, [pc, #352]	; (80185d8 <_vfiprintf_r+0x24c>)
 8018478:	f7e7 fed2 	bl	8000220 <memchr>
 801847c:	9a04      	ldr	r2, [sp, #16]
 801847e:	b9d8      	cbnz	r0, 80184b8 <_vfiprintf_r+0x12c>
 8018480:	06d1      	lsls	r1, r2, #27
 8018482:	bf44      	itt	mi
 8018484:	2320      	movmi	r3, #32
 8018486:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801848a:	0713      	lsls	r3, r2, #28
 801848c:	bf44      	itt	mi
 801848e:	232b      	movmi	r3, #43	; 0x2b
 8018490:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018494:	f89a 3000 	ldrb.w	r3, [sl]
 8018498:	2b2a      	cmp	r3, #42	; 0x2a
 801849a:	d015      	beq.n	80184c8 <_vfiprintf_r+0x13c>
 801849c:	9a07      	ldr	r2, [sp, #28]
 801849e:	4654      	mov	r4, sl
 80184a0:	2000      	movs	r0, #0
 80184a2:	f04f 0c0a 	mov.w	ip, #10
 80184a6:	4621      	mov	r1, r4
 80184a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80184ac:	3b30      	subs	r3, #48	; 0x30
 80184ae:	2b09      	cmp	r3, #9
 80184b0:	d94e      	bls.n	8018550 <_vfiprintf_r+0x1c4>
 80184b2:	b1b0      	cbz	r0, 80184e2 <_vfiprintf_r+0x156>
 80184b4:	9207      	str	r2, [sp, #28]
 80184b6:	e014      	b.n	80184e2 <_vfiprintf_r+0x156>
 80184b8:	eba0 0308 	sub.w	r3, r0, r8
 80184bc:	fa09 f303 	lsl.w	r3, r9, r3
 80184c0:	4313      	orrs	r3, r2
 80184c2:	9304      	str	r3, [sp, #16]
 80184c4:	46a2      	mov	sl, r4
 80184c6:	e7d2      	b.n	801846e <_vfiprintf_r+0xe2>
 80184c8:	9b03      	ldr	r3, [sp, #12]
 80184ca:	1d19      	adds	r1, r3, #4
 80184cc:	681b      	ldr	r3, [r3, #0]
 80184ce:	9103      	str	r1, [sp, #12]
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	bfbb      	ittet	lt
 80184d4:	425b      	neglt	r3, r3
 80184d6:	f042 0202 	orrlt.w	r2, r2, #2
 80184da:	9307      	strge	r3, [sp, #28]
 80184dc:	9307      	strlt	r3, [sp, #28]
 80184de:	bfb8      	it	lt
 80184e0:	9204      	strlt	r2, [sp, #16]
 80184e2:	7823      	ldrb	r3, [r4, #0]
 80184e4:	2b2e      	cmp	r3, #46	; 0x2e
 80184e6:	d10c      	bne.n	8018502 <_vfiprintf_r+0x176>
 80184e8:	7863      	ldrb	r3, [r4, #1]
 80184ea:	2b2a      	cmp	r3, #42	; 0x2a
 80184ec:	d135      	bne.n	801855a <_vfiprintf_r+0x1ce>
 80184ee:	9b03      	ldr	r3, [sp, #12]
 80184f0:	1d1a      	adds	r2, r3, #4
 80184f2:	681b      	ldr	r3, [r3, #0]
 80184f4:	9203      	str	r2, [sp, #12]
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	bfb8      	it	lt
 80184fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80184fe:	3402      	adds	r4, #2
 8018500:	9305      	str	r3, [sp, #20]
 8018502:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80185e8 <_vfiprintf_r+0x25c>
 8018506:	7821      	ldrb	r1, [r4, #0]
 8018508:	2203      	movs	r2, #3
 801850a:	4650      	mov	r0, sl
 801850c:	f7e7 fe88 	bl	8000220 <memchr>
 8018510:	b140      	cbz	r0, 8018524 <_vfiprintf_r+0x198>
 8018512:	2340      	movs	r3, #64	; 0x40
 8018514:	eba0 000a 	sub.w	r0, r0, sl
 8018518:	fa03 f000 	lsl.w	r0, r3, r0
 801851c:	9b04      	ldr	r3, [sp, #16]
 801851e:	4303      	orrs	r3, r0
 8018520:	3401      	adds	r4, #1
 8018522:	9304      	str	r3, [sp, #16]
 8018524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018528:	482c      	ldr	r0, [pc, #176]	; (80185dc <_vfiprintf_r+0x250>)
 801852a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801852e:	2206      	movs	r2, #6
 8018530:	f7e7 fe76 	bl	8000220 <memchr>
 8018534:	2800      	cmp	r0, #0
 8018536:	d03f      	beq.n	80185b8 <_vfiprintf_r+0x22c>
 8018538:	4b29      	ldr	r3, [pc, #164]	; (80185e0 <_vfiprintf_r+0x254>)
 801853a:	bb1b      	cbnz	r3, 8018584 <_vfiprintf_r+0x1f8>
 801853c:	9b03      	ldr	r3, [sp, #12]
 801853e:	3307      	adds	r3, #7
 8018540:	f023 0307 	bic.w	r3, r3, #7
 8018544:	3308      	adds	r3, #8
 8018546:	9303      	str	r3, [sp, #12]
 8018548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801854a:	443b      	add	r3, r7
 801854c:	9309      	str	r3, [sp, #36]	; 0x24
 801854e:	e767      	b.n	8018420 <_vfiprintf_r+0x94>
 8018550:	fb0c 3202 	mla	r2, ip, r2, r3
 8018554:	460c      	mov	r4, r1
 8018556:	2001      	movs	r0, #1
 8018558:	e7a5      	b.n	80184a6 <_vfiprintf_r+0x11a>
 801855a:	2300      	movs	r3, #0
 801855c:	3401      	adds	r4, #1
 801855e:	9305      	str	r3, [sp, #20]
 8018560:	4619      	mov	r1, r3
 8018562:	f04f 0c0a 	mov.w	ip, #10
 8018566:	4620      	mov	r0, r4
 8018568:	f810 2b01 	ldrb.w	r2, [r0], #1
 801856c:	3a30      	subs	r2, #48	; 0x30
 801856e:	2a09      	cmp	r2, #9
 8018570:	d903      	bls.n	801857a <_vfiprintf_r+0x1ee>
 8018572:	2b00      	cmp	r3, #0
 8018574:	d0c5      	beq.n	8018502 <_vfiprintf_r+0x176>
 8018576:	9105      	str	r1, [sp, #20]
 8018578:	e7c3      	b.n	8018502 <_vfiprintf_r+0x176>
 801857a:	fb0c 2101 	mla	r1, ip, r1, r2
 801857e:	4604      	mov	r4, r0
 8018580:	2301      	movs	r3, #1
 8018582:	e7f0      	b.n	8018566 <_vfiprintf_r+0x1da>
 8018584:	ab03      	add	r3, sp, #12
 8018586:	9300      	str	r3, [sp, #0]
 8018588:	462a      	mov	r2, r5
 801858a:	4b16      	ldr	r3, [pc, #88]	; (80185e4 <_vfiprintf_r+0x258>)
 801858c:	a904      	add	r1, sp, #16
 801858e:	4630      	mov	r0, r6
 8018590:	f7fa ff98 	bl	80134c4 <_printf_float>
 8018594:	4607      	mov	r7, r0
 8018596:	1c78      	adds	r0, r7, #1
 8018598:	d1d6      	bne.n	8018548 <_vfiprintf_r+0x1bc>
 801859a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801859c:	07d9      	lsls	r1, r3, #31
 801859e:	d405      	bmi.n	80185ac <_vfiprintf_r+0x220>
 80185a0:	89ab      	ldrh	r3, [r5, #12]
 80185a2:	059a      	lsls	r2, r3, #22
 80185a4:	d402      	bmi.n	80185ac <_vfiprintf_r+0x220>
 80185a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80185a8:	f7fa fb82 	bl	8012cb0 <__retarget_lock_release_recursive>
 80185ac:	89ab      	ldrh	r3, [r5, #12]
 80185ae:	065b      	lsls	r3, r3, #25
 80185b0:	f53f af12 	bmi.w	80183d8 <_vfiprintf_r+0x4c>
 80185b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80185b6:	e711      	b.n	80183dc <_vfiprintf_r+0x50>
 80185b8:	ab03      	add	r3, sp, #12
 80185ba:	9300      	str	r3, [sp, #0]
 80185bc:	462a      	mov	r2, r5
 80185be:	4b09      	ldr	r3, [pc, #36]	; (80185e4 <_vfiprintf_r+0x258>)
 80185c0:	a904      	add	r1, sp, #16
 80185c2:	4630      	mov	r0, r6
 80185c4:	f7fb fa22 	bl	8013a0c <_printf_i>
 80185c8:	e7e4      	b.n	8018594 <_vfiprintf_r+0x208>
 80185ca:	bf00      	nop
 80185cc:	0801aa74 	.word	0x0801aa74
 80185d0:	0801aa94 	.word	0x0801aa94
 80185d4:	0801aa54 	.word	0x0801aa54
 80185d8:	0801afac 	.word	0x0801afac
 80185dc:	0801afb6 	.word	0x0801afb6
 80185e0:	080134c5 	.word	0x080134c5
 80185e4:	08018367 	.word	0x08018367
 80185e8:	0801afb2 	.word	0x0801afb2

080185ec <_scanf_chars>:
 80185ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80185f0:	4615      	mov	r5, r2
 80185f2:	688a      	ldr	r2, [r1, #8]
 80185f4:	4680      	mov	r8, r0
 80185f6:	460c      	mov	r4, r1
 80185f8:	b932      	cbnz	r2, 8018608 <_scanf_chars+0x1c>
 80185fa:	698a      	ldr	r2, [r1, #24]
 80185fc:	2a00      	cmp	r2, #0
 80185fe:	bf0c      	ite	eq
 8018600:	2201      	moveq	r2, #1
 8018602:	f04f 32ff 	movne.w	r2, #4294967295
 8018606:	608a      	str	r2, [r1, #8]
 8018608:	6822      	ldr	r2, [r4, #0]
 801860a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8018698 <_scanf_chars+0xac>
 801860e:	06d1      	lsls	r1, r2, #27
 8018610:	bf5f      	itttt	pl
 8018612:	681a      	ldrpl	r2, [r3, #0]
 8018614:	1d11      	addpl	r1, r2, #4
 8018616:	6019      	strpl	r1, [r3, #0]
 8018618:	6816      	ldrpl	r6, [r2, #0]
 801861a:	2700      	movs	r7, #0
 801861c:	69a0      	ldr	r0, [r4, #24]
 801861e:	b188      	cbz	r0, 8018644 <_scanf_chars+0x58>
 8018620:	2801      	cmp	r0, #1
 8018622:	d107      	bne.n	8018634 <_scanf_chars+0x48>
 8018624:	682b      	ldr	r3, [r5, #0]
 8018626:	781a      	ldrb	r2, [r3, #0]
 8018628:	6963      	ldr	r3, [r4, #20]
 801862a:	5c9b      	ldrb	r3, [r3, r2]
 801862c:	b953      	cbnz	r3, 8018644 <_scanf_chars+0x58>
 801862e:	bb27      	cbnz	r7, 801867a <_scanf_chars+0x8e>
 8018630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018634:	2802      	cmp	r0, #2
 8018636:	d120      	bne.n	801867a <_scanf_chars+0x8e>
 8018638:	682b      	ldr	r3, [r5, #0]
 801863a:	781b      	ldrb	r3, [r3, #0]
 801863c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8018640:	071b      	lsls	r3, r3, #28
 8018642:	d41a      	bmi.n	801867a <_scanf_chars+0x8e>
 8018644:	6823      	ldr	r3, [r4, #0]
 8018646:	06da      	lsls	r2, r3, #27
 8018648:	bf5e      	ittt	pl
 801864a:	682b      	ldrpl	r3, [r5, #0]
 801864c:	781b      	ldrbpl	r3, [r3, #0]
 801864e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8018652:	682a      	ldr	r2, [r5, #0]
 8018654:	686b      	ldr	r3, [r5, #4]
 8018656:	3201      	adds	r2, #1
 8018658:	602a      	str	r2, [r5, #0]
 801865a:	68a2      	ldr	r2, [r4, #8]
 801865c:	3b01      	subs	r3, #1
 801865e:	3a01      	subs	r2, #1
 8018660:	606b      	str	r3, [r5, #4]
 8018662:	3701      	adds	r7, #1
 8018664:	60a2      	str	r2, [r4, #8]
 8018666:	b142      	cbz	r2, 801867a <_scanf_chars+0x8e>
 8018668:	2b00      	cmp	r3, #0
 801866a:	dcd7      	bgt.n	801861c <_scanf_chars+0x30>
 801866c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018670:	4629      	mov	r1, r5
 8018672:	4640      	mov	r0, r8
 8018674:	4798      	blx	r3
 8018676:	2800      	cmp	r0, #0
 8018678:	d0d0      	beq.n	801861c <_scanf_chars+0x30>
 801867a:	6823      	ldr	r3, [r4, #0]
 801867c:	f013 0310 	ands.w	r3, r3, #16
 8018680:	d105      	bne.n	801868e <_scanf_chars+0xa2>
 8018682:	68e2      	ldr	r2, [r4, #12]
 8018684:	3201      	adds	r2, #1
 8018686:	60e2      	str	r2, [r4, #12]
 8018688:	69a2      	ldr	r2, [r4, #24]
 801868a:	b102      	cbz	r2, 801868e <_scanf_chars+0xa2>
 801868c:	7033      	strb	r3, [r6, #0]
 801868e:	6923      	ldr	r3, [r4, #16]
 8018690:	441f      	add	r7, r3
 8018692:	6127      	str	r7, [r4, #16]
 8018694:	2000      	movs	r0, #0
 8018696:	e7cb      	b.n	8018630 <_scanf_chars+0x44>
 8018698:	0801a951 	.word	0x0801a951

0801869c <_scanf_i>:
 801869c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186a0:	4698      	mov	r8, r3
 80186a2:	4b74      	ldr	r3, [pc, #464]	; (8018874 <_scanf_i+0x1d8>)
 80186a4:	460c      	mov	r4, r1
 80186a6:	4682      	mov	sl, r0
 80186a8:	4616      	mov	r6, r2
 80186aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80186ae:	b087      	sub	sp, #28
 80186b0:	ab03      	add	r3, sp, #12
 80186b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80186b6:	4b70      	ldr	r3, [pc, #448]	; (8018878 <_scanf_i+0x1dc>)
 80186b8:	69a1      	ldr	r1, [r4, #24]
 80186ba:	4a70      	ldr	r2, [pc, #448]	; (801887c <_scanf_i+0x1e0>)
 80186bc:	2903      	cmp	r1, #3
 80186be:	bf18      	it	ne
 80186c0:	461a      	movne	r2, r3
 80186c2:	68a3      	ldr	r3, [r4, #8]
 80186c4:	9201      	str	r2, [sp, #4]
 80186c6:	1e5a      	subs	r2, r3, #1
 80186c8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80186cc:	bf88      	it	hi
 80186ce:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80186d2:	4627      	mov	r7, r4
 80186d4:	bf82      	ittt	hi
 80186d6:	eb03 0905 	addhi.w	r9, r3, r5
 80186da:	f240 135d 	movwhi	r3, #349	; 0x15d
 80186de:	60a3      	strhi	r3, [r4, #8]
 80186e0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80186e4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80186e8:	bf98      	it	ls
 80186ea:	f04f 0900 	movls.w	r9, #0
 80186ee:	6023      	str	r3, [r4, #0]
 80186f0:	463d      	mov	r5, r7
 80186f2:	f04f 0b00 	mov.w	fp, #0
 80186f6:	6831      	ldr	r1, [r6, #0]
 80186f8:	ab03      	add	r3, sp, #12
 80186fa:	7809      	ldrb	r1, [r1, #0]
 80186fc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8018700:	2202      	movs	r2, #2
 8018702:	f7e7 fd8d 	bl	8000220 <memchr>
 8018706:	b328      	cbz	r0, 8018754 <_scanf_i+0xb8>
 8018708:	f1bb 0f01 	cmp.w	fp, #1
 801870c:	d159      	bne.n	80187c2 <_scanf_i+0x126>
 801870e:	6862      	ldr	r2, [r4, #4]
 8018710:	b92a      	cbnz	r2, 801871e <_scanf_i+0x82>
 8018712:	6822      	ldr	r2, [r4, #0]
 8018714:	2308      	movs	r3, #8
 8018716:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801871a:	6063      	str	r3, [r4, #4]
 801871c:	6022      	str	r2, [r4, #0]
 801871e:	6822      	ldr	r2, [r4, #0]
 8018720:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8018724:	6022      	str	r2, [r4, #0]
 8018726:	68a2      	ldr	r2, [r4, #8]
 8018728:	1e51      	subs	r1, r2, #1
 801872a:	60a1      	str	r1, [r4, #8]
 801872c:	b192      	cbz	r2, 8018754 <_scanf_i+0xb8>
 801872e:	6832      	ldr	r2, [r6, #0]
 8018730:	1c51      	adds	r1, r2, #1
 8018732:	6031      	str	r1, [r6, #0]
 8018734:	7812      	ldrb	r2, [r2, #0]
 8018736:	f805 2b01 	strb.w	r2, [r5], #1
 801873a:	6872      	ldr	r2, [r6, #4]
 801873c:	3a01      	subs	r2, #1
 801873e:	2a00      	cmp	r2, #0
 8018740:	6072      	str	r2, [r6, #4]
 8018742:	dc07      	bgt.n	8018754 <_scanf_i+0xb8>
 8018744:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8018748:	4631      	mov	r1, r6
 801874a:	4650      	mov	r0, sl
 801874c:	4790      	blx	r2
 801874e:	2800      	cmp	r0, #0
 8018750:	f040 8085 	bne.w	801885e <_scanf_i+0x1c2>
 8018754:	f10b 0b01 	add.w	fp, fp, #1
 8018758:	f1bb 0f03 	cmp.w	fp, #3
 801875c:	d1cb      	bne.n	80186f6 <_scanf_i+0x5a>
 801875e:	6863      	ldr	r3, [r4, #4]
 8018760:	b90b      	cbnz	r3, 8018766 <_scanf_i+0xca>
 8018762:	230a      	movs	r3, #10
 8018764:	6063      	str	r3, [r4, #4]
 8018766:	6863      	ldr	r3, [r4, #4]
 8018768:	4945      	ldr	r1, [pc, #276]	; (8018880 <_scanf_i+0x1e4>)
 801876a:	6960      	ldr	r0, [r4, #20]
 801876c:	1ac9      	subs	r1, r1, r3
 801876e:	f000 f89b 	bl	80188a8 <__sccl>
 8018772:	f04f 0b00 	mov.w	fp, #0
 8018776:	68a3      	ldr	r3, [r4, #8]
 8018778:	6822      	ldr	r2, [r4, #0]
 801877a:	2b00      	cmp	r3, #0
 801877c:	d03d      	beq.n	80187fa <_scanf_i+0x15e>
 801877e:	6831      	ldr	r1, [r6, #0]
 8018780:	6960      	ldr	r0, [r4, #20]
 8018782:	f891 c000 	ldrb.w	ip, [r1]
 8018786:	f810 000c 	ldrb.w	r0, [r0, ip]
 801878a:	2800      	cmp	r0, #0
 801878c:	d035      	beq.n	80187fa <_scanf_i+0x15e>
 801878e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8018792:	d124      	bne.n	80187de <_scanf_i+0x142>
 8018794:	0510      	lsls	r0, r2, #20
 8018796:	d522      	bpl.n	80187de <_scanf_i+0x142>
 8018798:	f10b 0b01 	add.w	fp, fp, #1
 801879c:	f1b9 0f00 	cmp.w	r9, #0
 80187a0:	d003      	beq.n	80187aa <_scanf_i+0x10e>
 80187a2:	3301      	adds	r3, #1
 80187a4:	f109 39ff 	add.w	r9, r9, #4294967295
 80187a8:	60a3      	str	r3, [r4, #8]
 80187aa:	6873      	ldr	r3, [r6, #4]
 80187ac:	3b01      	subs	r3, #1
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	6073      	str	r3, [r6, #4]
 80187b2:	dd1b      	ble.n	80187ec <_scanf_i+0x150>
 80187b4:	6833      	ldr	r3, [r6, #0]
 80187b6:	3301      	adds	r3, #1
 80187b8:	6033      	str	r3, [r6, #0]
 80187ba:	68a3      	ldr	r3, [r4, #8]
 80187bc:	3b01      	subs	r3, #1
 80187be:	60a3      	str	r3, [r4, #8]
 80187c0:	e7d9      	b.n	8018776 <_scanf_i+0xda>
 80187c2:	f1bb 0f02 	cmp.w	fp, #2
 80187c6:	d1ae      	bne.n	8018726 <_scanf_i+0x8a>
 80187c8:	6822      	ldr	r2, [r4, #0]
 80187ca:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80187ce:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80187d2:	d1bf      	bne.n	8018754 <_scanf_i+0xb8>
 80187d4:	2310      	movs	r3, #16
 80187d6:	6063      	str	r3, [r4, #4]
 80187d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80187dc:	e7a2      	b.n	8018724 <_scanf_i+0x88>
 80187de:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80187e2:	6022      	str	r2, [r4, #0]
 80187e4:	780b      	ldrb	r3, [r1, #0]
 80187e6:	f805 3b01 	strb.w	r3, [r5], #1
 80187ea:	e7de      	b.n	80187aa <_scanf_i+0x10e>
 80187ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80187f0:	4631      	mov	r1, r6
 80187f2:	4650      	mov	r0, sl
 80187f4:	4798      	blx	r3
 80187f6:	2800      	cmp	r0, #0
 80187f8:	d0df      	beq.n	80187ba <_scanf_i+0x11e>
 80187fa:	6823      	ldr	r3, [r4, #0]
 80187fc:	05d9      	lsls	r1, r3, #23
 80187fe:	d50d      	bpl.n	801881c <_scanf_i+0x180>
 8018800:	42bd      	cmp	r5, r7
 8018802:	d909      	bls.n	8018818 <_scanf_i+0x17c>
 8018804:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8018808:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801880c:	4632      	mov	r2, r6
 801880e:	4650      	mov	r0, sl
 8018810:	4798      	blx	r3
 8018812:	f105 39ff 	add.w	r9, r5, #4294967295
 8018816:	464d      	mov	r5, r9
 8018818:	42bd      	cmp	r5, r7
 801881a:	d028      	beq.n	801886e <_scanf_i+0x1d2>
 801881c:	6822      	ldr	r2, [r4, #0]
 801881e:	f012 0210 	ands.w	r2, r2, #16
 8018822:	d113      	bne.n	801884c <_scanf_i+0x1b0>
 8018824:	702a      	strb	r2, [r5, #0]
 8018826:	6863      	ldr	r3, [r4, #4]
 8018828:	9e01      	ldr	r6, [sp, #4]
 801882a:	4639      	mov	r1, r7
 801882c:	4650      	mov	r0, sl
 801882e:	47b0      	blx	r6
 8018830:	f8d8 3000 	ldr.w	r3, [r8]
 8018834:	6821      	ldr	r1, [r4, #0]
 8018836:	1d1a      	adds	r2, r3, #4
 8018838:	f8c8 2000 	str.w	r2, [r8]
 801883c:	f011 0f20 	tst.w	r1, #32
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	d00f      	beq.n	8018864 <_scanf_i+0x1c8>
 8018844:	6018      	str	r0, [r3, #0]
 8018846:	68e3      	ldr	r3, [r4, #12]
 8018848:	3301      	adds	r3, #1
 801884a:	60e3      	str	r3, [r4, #12]
 801884c:	1bed      	subs	r5, r5, r7
 801884e:	44ab      	add	fp, r5
 8018850:	6925      	ldr	r5, [r4, #16]
 8018852:	445d      	add	r5, fp
 8018854:	6125      	str	r5, [r4, #16]
 8018856:	2000      	movs	r0, #0
 8018858:	b007      	add	sp, #28
 801885a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801885e:	f04f 0b00 	mov.w	fp, #0
 8018862:	e7ca      	b.n	80187fa <_scanf_i+0x15e>
 8018864:	07ca      	lsls	r2, r1, #31
 8018866:	bf4c      	ite	mi
 8018868:	8018      	strhmi	r0, [r3, #0]
 801886a:	6018      	strpl	r0, [r3, #0]
 801886c:	e7eb      	b.n	8018846 <_scanf_i+0x1aa>
 801886e:	2001      	movs	r0, #1
 8018870:	e7f2      	b.n	8018858 <_scanf_i+0x1bc>
 8018872:	bf00      	nop
 8018874:	0801a7f8 	.word	0x0801a7f8
 8018878:	080153b9 	.word	0x080153b9
 801887c:	080152a9 	.word	0x080152a9
 8018880:	0801afd6 	.word	0x0801afd6

08018884 <_read_r>:
 8018884:	b538      	push	{r3, r4, r5, lr}
 8018886:	4d07      	ldr	r5, [pc, #28]	; (80188a4 <_read_r+0x20>)
 8018888:	4604      	mov	r4, r0
 801888a:	4608      	mov	r0, r1
 801888c:	4611      	mov	r1, r2
 801888e:	2200      	movs	r2, #0
 8018890:	602a      	str	r2, [r5, #0]
 8018892:	461a      	mov	r2, r3
 8018894:	f000 f8f0 	bl	8018a78 <_read>
 8018898:	1c43      	adds	r3, r0, #1
 801889a:	d102      	bne.n	80188a2 <_read_r+0x1e>
 801889c:	682b      	ldr	r3, [r5, #0]
 801889e:	b103      	cbz	r3, 80188a2 <_read_r+0x1e>
 80188a0:	6023      	str	r3, [r4, #0]
 80188a2:	bd38      	pop	{r3, r4, r5, pc}
 80188a4:	200064fc 	.word	0x200064fc

080188a8 <__sccl>:
 80188a8:	b570      	push	{r4, r5, r6, lr}
 80188aa:	780b      	ldrb	r3, [r1, #0]
 80188ac:	4604      	mov	r4, r0
 80188ae:	2b5e      	cmp	r3, #94	; 0x5e
 80188b0:	bf0b      	itete	eq
 80188b2:	784b      	ldrbeq	r3, [r1, #1]
 80188b4:	1c48      	addne	r0, r1, #1
 80188b6:	1c88      	addeq	r0, r1, #2
 80188b8:	2200      	movne	r2, #0
 80188ba:	bf08      	it	eq
 80188bc:	2201      	moveq	r2, #1
 80188be:	1e61      	subs	r1, r4, #1
 80188c0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80188c4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80188c8:	42a9      	cmp	r1, r5
 80188ca:	d1fb      	bne.n	80188c4 <__sccl+0x1c>
 80188cc:	b90b      	cbnz	r3, 80188d2 <__sccl+0x2a>
 80188ce:	3801      	subs	r0, #1
 80188d0:	bd70      	pop	{r4, r5, r6, pc}
 80188d2:	f082 0101 	eor.w	r1, r2, #1
 80188d6:	54e1      	strb	r1, [r4, r3]
 80188d8:	1c42      	adds	r2, r0, #1
 80188da:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80188de:	2d2d      	cmp	r5, #45	; 0x2d
 80188e0:	f102 36ff 	add.w	r6, r2, #4294967295
 80188e4:	4610      	mov	r0, r2
 80188e6:	d006      	beq.n	80188f6 <__sccl+0x4e>
 80188e8:	2d5d      	cmp	r5, #93	; 0x5d
 80188ea:	d0f1      	beq.n	80188d0 <__sccl+0x28>
 80188ec:	b90d      	cbnz	r5, 80188f2 <__sccl+0x4a>
 80188ee:	4630      	mov	r0, r6
 80188f0:	e7ee      	b.n	80188d0 <__sccl+0x28>
 80188f2:	462b      	mov	r3, r5
 80188f4:	e7ef      	b.n	80188d6 <__sccl+0x2e>
 80188f6:	7816      	ldrb	r6, [r2, #0]
 80188f8:	2e5d      	cmp	r6, #93	; 0x5d
 80188fa:	d0fa      	beq.n	80188f2 <__sccl+0x4a>
 80188fc:	42b3      	cmp	r3, r6
 80188fe:	dcf8      	bgt.n	80188f2 <__sccl+0x4a>
 8018900:	4618      	mov	r0, r3
 8018902:	3001      	adds	r0, #1
 8018904:	4286      	cmp	r6, r0
 8018906:	5421      	strb	r1, [r4, r0]
 8018908:	dcfb      	bgt.n	8018902 <__sccl+0x5a>
 801890a:	43d8      	mvns	r0, r3
 801890c:	4430      	add	r0, r6
 801890e:	1c5d      	adds	r5, r3, #1
 8018910:	42b3      	cmp	r3, r6
 8018912:	bfa8      	it	ge
 8018914:	2000      	movge	r0, #0
 8018916:	182b      	adds	r3, r5, r0
 8018918:	3202      	adds	r2, #2
 801891a:	e7de      	b.n	80188da <__sccl+0x32>

0801891c <__submore>:
 801891c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018920:	460c      	mov	r4, r1
 8018922:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018924:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018928:	4299      	cmp	r1, r3
 801892a:	d11d      	bne.n	8018968 <__submore+0x4c>
 801892c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018930:	f7fa fcce 	bl	80132d0 <_malloc_r>
 8018934:	b918      	cbnz	r0, 801893e <__submore+0x22>
 8018936:	f04f 30ff 	mov.w	r0, #4294967295
 801893a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801893e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018942:	63a3      	str	r3, [r4, #56]	; 0x38
 8018944:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8018948:	6360      	str	r0, [r4, #52]	; 0x34
 801894a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801894e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8018952:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8018956:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801895a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801895e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8018962:	6020      	str	r0, [r4, #0]
 8018964:	2000      	movs	r0, #0
 8018966:	e7e8      	b.n	801893a <__submore+0x1e>
 8018968:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801896a:	0077      	lsls	r7, r6, #1
 801896c:	463a      	mov	r2, r7
 801896e:	f7ff f98f 	bl	8017c90 <_realloc_r>
 8018972:	4605      	mov	r5, r0
 8018974:	2800      	cmp	r0, #0
 8018976:	d0de      	beq.n	8018936 <__submore+0x1a>
 8018978:	eb00 0806 	add.w	r8, r0, r6
 801897c:	4601      	mov	r1, r0
 801897e:	4632      	mov	r2, r6
 8018980:	4640      	mov	r0, r8
 8018982:	f7fa f9a7 	bl	8012cd4 <memcpy>
 8018986:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801898a:	f8c4 8000 	str.w	r8, [r4]
 801898e:	e7e9      	b.n	8018964 <__submore+0x48>

08018990 <__ascii_wctomb>:
 8018990:	b149      	cbz	r1, 80189a6 <__ascii_wctomb+0x16>
 8018992:	2aff      	cmp	r2, #255	; 0xff
 8018994:	bf85      	ittet	hi
 8018996:	238a      	movhi	r3, #138	; 0x8a
 8018998:	6003      	strhi	r3, [r0, #0]
 801899a:	700a      	strbls	r2, [r1, #0]
 801899c:	f04f 30ff 	movhi.w	r0, #4294967295
 80189a0:	bf98      	it	ls
 80189a2:	2001      	movls	r0, #1
 80189a4:	4770      	bx	lr
 80189a6:	4608      	mov	r0, r1
 80189a8:	4770      	bx	lr
	...

080189ac <__env_lock>:
 80189ac:	4801      	ldr	r0, [pc, #4]	; (80189b4 <__env_lock+0x8>)
 80189ae:	f7fa b97d 	b.w	8012cac <__retarget_lock_acquire_recursive>
 80189b2:	bf00      	nop
 80189b4:	200064f2 	.word	0x200064f2

080189b8 <__env_unlock>:
 80189b8:	4801      	ldr	r0, [pc, #4]	; (80189c0 <__env_unlock+0x8>)
 80189ba:	f7fa b979 	b.w	8012cb0 <__retarget_lock_release_recursive>
 80189be:	bf00      	nop
 80189c0:	200064f2 	.word	0x200064f2

080189c4 <_fstat_r>:
 80189c4:	b538      	push	{r3, r4, r5, lr}
 80189c6:	4d07      	ldr	r5, [pc, #28]	; (80189e4 <_fstat_r+0x20>)
 80189c8:	2300      	movs	r3, #0
 80189ca:	4604      	mov	r4, r0
 80189cc:	4608      	mov	r0, r1
 80189ce:	4611      	mov	r1, r2
 80189d0:	602b      	str	r3, [r5, #0]
 80189d2:	f000 f829 	bl	8018a28 <_fstat>
 80189d6:	1c43      	adds	r3, r0, #1
 80189d8:	d102      	bne.n	80189e0 <_fstat_r+0x1c>
 80189da:	682b      	ldr	r3, [r5, #0]
 80189dc:	b103      	cbz	r3, 80189e0 <_fstat_r+0x1c>
 80189de:	6023      	str	r3, [r4, #0]
 80189e0:	bd38      	pop	{r3, r4, r5, pc}
 80189e2:	bf00      	nop
 80189e4:	200064fc 	.word	0x200064fc

080189e8 <_isatty_r>:
 80189e8:	b538      	push	{r3, r4, r5, lr}
 80189ea:	4d06      	ldr	r5, [pc, #24]	; (8018a04 <_isatty_r+0x1c>)
 80189ec:	2300      	movs	r3, #0
 80189ee:	4604      	mov	r4, r0
 80189f0:	4608      	mov	r0, r1
 80189f2:	602b      	str	r3, [r5, #0]
 80189f4:	f000 f828 	bl	8018a48 <_isatty>
 80189f8:	1c43      	adds	r3, r0, #1
 80189fa:	d102      	bne.n	8018a02 <_isatty_r+0x1a>
 80189fc:	682b      	ldr	r3, [r5, #0]
 80189fe:	b103      	cbz	r3, 8018a02 <_isatty_r+0x1a>
 8018a00:	6023      	str	r3, [r4, #0]
 8018a02:	bd38      	pop	{r3, r4, r5, pc}
 8018a04:	200064fc 	.word	0x200064fc

08018a08 <_malloc_usable_size_r>:
 8018a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018a0c:	1f18      	subs	r0, r3, #4
 8018a0e:	2b00      	cmp	r3, #0
 8018a10:	bfbc      	itt	lt
 8018a12:	580b      	ldrlt	r3, [r1, r0]
 8018a14:	18c0      	addlt	r0, r0, r3
 8018a16:	4770      	bx	lr

08018a18 <_close>:
 8018a18:	4b02      	ldr	r3, [pc, #8]	; (8018a24 <_close+0xc>)
 8018a1a:	2258      	movs	r2, #88	; 0x58
 8018a1c:	601a      	str	r2, [r3, #0]
 8018a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8018a22:	4770      	bx	lr
 8018a24:	200064fc 	.word	0x200064fc

08018a28 <_fstat>:
 8018a28:	4b02      	ldr	r3, [pc, #8]	; (8018a34 <_fstat+0xc>)
 8018a2a:	2258      	movs	r2, #88	; 0x58
 8018a2c:	601a      	str	r2, [r3, #0]
 8018a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8018a32:	4770      	bx	lr
 8018a34:	200064fc 	.word	0x200064fc

08018a38 <_getpid>:
 8018a38:	4b02      	ldr	r3, [pc, #8]	; (8018a44 <_getpid+0xc>)
 8018a3a:	2258      	movs	r2, #88	; 0x58
 8018a3c:	601a      	str	r2, [r3, #0]
 8018a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8018a42:	4770      	bx	lr
 8018a44:	200064fc 	.word	0x200064fc

08018a48 <_isatty>:
 8018a48:	4b02      	ldr	r3, [pc, #8]	; (8018a54 <_isatty+0xc>)
 8018a4a:	2258      	movs	r2, #88	; 0x58
 8018a4c:	601a      	str	r2, [r3, #0]
 8018a4e:	2000      	movs	r0, #0
 8018a50:	4770      	bx	lr
 8018a52:	bf00      	nop
 8018a54:	200064fc 	.word	0x200064fc

08018a58 <_kill>:
 8018a58:	4b02      	ldr	r3, [pc, #8]	; (8018a64 <_kill+0xc>)
 8018a5a:	2258      	movs	r2, #88	; 0x58
 8018a5c:	601a      	str	r2, [r3, #0]
 8018a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8018a62:	4770      	bx	lr
 8018a64:	200064fc 	.word	0x200064fc

08018a68 <_lseek>:
 8018a68:	4b02      	ldr	r3, [pc, #8]	; (8018a74 <_lseek+0xc>)
 8018a6a:	2258      	movs	r2, #88	; 0x58
 8018a6c:	601a      	str	r2, [r3, #0]
 8018a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8018a72:	4770      	bx	lr
 8018a74:	200064fc 	.word	0x200064fc

08018a78 <_read>:
 8018a78:	4b02      	ldr	r3, [pc, #8]	; (8018a84 <_read+0xc>)
 8018a7a:	2258      	movs	r2, #88	; 0x58
 8018a7c:	601a      	str	r2, [r3, #0]
 8018a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8018a82:	4770      	bx	lr
 8018a84:	200064fc 	.word	0x200064fc

08018a88 <_sbrk>:
 8018a88:	4b04      	ldr	r3, [pc, #16]	; (8018a9c <_sbrk+0x14>)
 8018a8a:	6819      	ldr	r1, [r3, #0]
 8018a8c:	4602      	mov	r2, r0
 8018a8e:	b909      	cbnz	r1, 8018a94 <_sbrk+0xc>
 8018a90:	4903      	ldr	r1, [pc, #12]	; (8018aa0 <_sbrk+0x18>)
 8018a92:	6019      	str	r1, [r3, #0]
 8018a94:	6818      	ldr	r0, [r3, #0]
 8018a96:	4402      	add	r2, r0
 8018a98:	601a      	str	r2, [r3, #0]
 8018a9a:	4770      	bx	lr
 8018a9c:	20005a90 	.word	0x20005a90
 8018aa0:	20006500 	.word	0x20006500

08018aa4 <_write>:
 8018aa4:	4b02      	ldr	r3, [pc, #8]	; (8018ab0 <_write+0xc>)
 8018aa6:	2258      	movs	r2, #88	; 0x58
 8018aa8:	601a      	str	r2, [r3, #0]
 8018aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8018aae:	4770      	bx	lr
 8018ab0:	200064fc 	.word	0x200064fc

08018ab4 <_exit>:
 8018ab4:	e7fe      	b.n	8018ab4 <_exit>
	...

08018ab8 <_init>:
 8018ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018aba:	bf00      	nop
 8018abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018abe:	bc08      	pop	{r3}
 8018ac0:	469e      	mov	lr, r3
 8018ac2:	4770      	bx	lr

08018ac4 <_fini>:
 8018ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ac6:	bf00      	nop
 8018ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018aca:	bc08      	pop	{r3}
 8018acc:	469e      	mov	lr, r3
 8018ace:	4770      	bx	lr
